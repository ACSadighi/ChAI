Search.setIndex({"docnames": ["index", "modules/examples/ConvLayerTest", "modules/examples/GPUOperations", "modules/examples/MNISTNet", "modules/examples/ModuleSpec", "modules/examples/MultiLocaleInference", "modules/lib/Autograd", "modules/lib/DynamicTensor", "modules/lib/LoadNumpy", "modules/lib/NDArray", "modules/lib/Network", "modules/lib/OrderedDict", "modules/lib/Remote", "modules/lib/SimpleDomain", "modules/lib/StaticTensor", "modules/lib/Tensor", "modules/lib/Utilities", "modules/lib/Utilities/Standard", "modules/lib/Utilities/Types", "modules/src/ChAI"], "filenames": ["index.rst", "modules/examples/ConvLayerTest.rst", "modules/examples/GPUOperations.rst", "modules/examples/MNISTNet.rst", "modules/examples/ModuleSpec.rst", "modules/examples/MultiLocaleInference.rst", "modules/lib/Autograd.rst", "modules/lib/DynamicTensor.rst", "modules/lib/LoadNumpy.rst", "modules/lib/NDArray.rst", "modules/lib/Network.rst", "modules/lib/OrderedDict.rst", "modules/lib/Remote.rst", "modules/lib/SimpleDomain.rst", "modules/lib/StaticTensor.rst", "modules/lib/Tensor.rst", "modules/lib/Utilities.rst", "modules/lib/Utilities/Standard.rst", "modules/lib/Utilities/Types.rst", "modules/src/ChAI.rst"], "titles": ["chpldoc documentation", "ConvLayerTest", "GPUOperations", "MNISTNet", "ModuleSpec", "MultiLocaleInference", "Autograd", "DynamicTensor", "LoadNumpy", "NDArray", "Network", "OrderedDict", "Remote", "SimpleDomain", "StaticTensor", "Tensor", "Utilities", "Standard", "Types", "ChAI"], "terms": {"content": 0, "convlayertest": 0, "gpuoper": 0, "mnistnet": 0, "modulespec": 0, "multilocaleinfer": 0, "autograd": 0, "dynamictensor": 0, "loadnumpi": 0, "ndarrai": [0, 6, 7, 14], "network": [0, 3], "ordereddict": 0, "remot": [0, 6, 9], "simpledomain": 0, "statictensor": [0, 7], "tensor": [0, 1, 3, 4, 5, 7, 10], "util": [0, 17, 18], "standard": [0, 16], "type": [0, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 16, 17], "chai": 0, "index": 0, "chapel": 0, "modul": [0, 3, 4, 10], "search": 0, "page": 0, "usag": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "us": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "import": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "var": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], "t": [1, 7, 9, 10, 14, 16], "real": [1, 3, 4, 5, 6, 7, 8, 9, 10, 14, 18], "arang": [1, 7, 9, 14], "1": [1, 3, 4, 5, 6, 7, 9, 10, 13, 14, 16, 17], "8": 1, "conv": 1, "new": [1, 3, 17], "conv2d": [1, 3, 10], "3": [1, 3, 6, 9, 14], "output": [1, 3], "config": [3, 4, 5, 7, 14, 16], "param": [3, 6, 7, 8, 9, 10, 13, 14, 16, 17], "layerdebug": 3, "fals": [3, 4, 5, 6, 7, 9, 10, 14, 16, 17], "dtype": [3, 4, 5, 8, 10], "32": [3, 4, 5, 9, 10, 18], "class": [3, 6, 8, 9, 10, 12], "cnn": [3, 4, 5], "conv1": 3, "own": [3, 4, 6, 8, 9, 10, 12, 14], "elttyp": [3, 6, 7, 9, 10, 12, 13, 14, 17], "conv2": 3, "dropout1": 3, "dropout": [3, 10], "dropout2": 3, "flatten": [3, 7, 10], "fc1": 3, "linear": [3, 10], "fc2": 3, "proc": [3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19], "init": [3, 6, 7, 9, 10, 11, 12, 13, 14], "overrid": [3, 6, 10], "forward": [3, 6, 10], "input": [3, 6, 10], "const": [3, 4, 5, 9, 13, 14, 17], "diag": [3, 14], "model": [3, 4, 5], "loadmodel": [3, 4, 5, 10], "specfil": [3, 4, 5, 10], "script": [3, 4, 5], "specif": [3, 4, 5], "json": [3, 4, 5], "weightsfold": [3, 4, 5, 10], "testimgs": 3, "28": 3, "img": 3, "load": [3, 4, 5, 7], "data": [3, 4, 5, 6, 7, 8, 9, 10], "dataset": [3, 4, 5], "mnist": [3, 4, 5], "image_idx_0_7_7": 3, "chdata": [3, 4, 5], "modelpath": [3, 10], "mnist_cnn": 3, "imagecount": 3, "0": [3, 4, 5, 9, 10, 14, 17], "imag": [3, 4, 5], "foral": [3, 4, 5], "i": [3, 4, 5, 10], "do": [3, 4, 5, 17], "image_idx_": [3, 4, 5], "string": [3, 4, 5, 7, 8, 9, 10, 17], "pred": [3, 4, 5], "domain": [3, 5, 6, 7, 8, 9, 13, 14, 16], "int": [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18], "numtim": [3, 4], "printresult": [3, 4, 5], "cnn2": 3, "sequenti": [3, 10], "channel": [3, 10], "featur": [3, 6, 7, 9, 10, 14], "kernel": [3, 6, 7, 9, 10, 14], "stride": [3, 6, 7, 9, 10, 13, 14, 18], "64": [3, 7, 9, 14, 18], "25": 3, "5": [3, 10], "9216": 3, "128": 3, "10": 3, "detach": [4, 5, 6, 7, 14], "true": [4, 5, 6, 7, 14], "numimag": [4, 5], "time": 4, "imagesd": 5, "blockdist": 5, "createdomain": 5, "localemodelsd": 5, "local": [5, 6, 7, 12], "localemodel": 5, "li": 5, "numtri": 5, "totaltim": 5, "averagetim": 5, "checkrank": [6, 7], "te": 6, "share": [6, 7, 10, 12, 14], "tensoress": [6, 7], "rank": [6, 7, 8, 9, 10, 13, 14, 16, 17], "bool": [6, 7, 13, 14, 16, 17], "getrank": 6, "forcerank": [6, 7], "basetensorresourc": [6, 7, 14], "serializ": [6, 7, 9, 10, 11, 12, 13, 14], "runtimerank": [6, 7], "iter": [6, 9, 10, 11, 13, 16, 17], "children": 6, "borrow": [6, 9, 10], "treeheight": 6, "forgetfultensor": 6, "dataresourc": 6, "gradresourc": 6, "nil": 6, "devic": [6, 7, 12], "defaultdevic": [6, 12], "dest": [6, 12], "arrai": [6, 7, 14], "ref": [6, 7, 9, 10, 11, 12, 13, 14], "grad": [6, 7], "backward": 6, "alreadypopul": 6, "where": [6, 7, 9, 10, 12, 13, 14, 16, 17], "copi": [6, 12, 13, 14], "keepgrad": [6, 14], "tensorresourc": 6, "basevalu": 6, "operationtyp": 6, "operationctx": 6, "bt": 6, "record": [6, 7, 9, 10, 11, 13, 14], "reluop": 6, "_relu": 6, "x": [6, 10, 13, 16, 17], "expop": 6, "addop": 6, "lh": [6, 9], "rh": [6, 9], "subop": 6, "divop": 6, "multop": 6, "reshapeop": 6, "oldrank": 6, "newrank": [6, 9, 14], "shape": [6, 8, 9, 13, 14, 16], "permuteop": 6, "permut": [6, 9, 14], "expandop": 6, "expandedshap": 6, "padop": 6, "arg": [6, 7, 9, 10, 14, 16], "2": [6, 9, 13, 14, 16], "valu": [6, 9, 11, 12, 14], "shrinkop": 6, "sliceop": 6, "dom": [6, 7, 9, 13, 14, 16], "layersliceop": 6, "base": 6, "mask": 6, "maskdomain": 6, "sumop": 6, "sumrank": 6, "ax": [6, 7, 9, 14], "outrank": 6, "maxop": 6, "maxrank": [6, 7], "conv2dop": 6, "4": [6, 9, 10, 14], "6": 7, "defaultdetachedmod": 7, "meta": [7, 14], "detachmod": 7, "arr": [7, 9, 14, 16], "thi": [7, 9, 10, 14, 17], "resourc": [7, 14], "forcerankmeta": 7, "hardcheckrank": 7, "tondarrai": 7, "toarrai": 7, "oper": [7, 9, 10, 13, 14], "totyp": [7, 9, 13, 14], "totensor": 7, "eraserank": 7, "zipbinop": 7, "opnam": 7, "b": [7, 9, 13, 14], "loadfromnumpi": 7, "path": [7, 8, 10], "sum": [7, 9, 14], "r": [7, 14], "relu": [7, 9, 10, 14], "max": [7, 9, 14], "exp": [7, 14], "softmax": [7, 10, 14], "maxpool": [7, 9, 10, 14], "poolsiz": [7, 9, 10, 14], "reshap": [7, 9, 14], "slice": [7, 9, 14, 17], "rng": [7, 9, 14], "rang": [7, 9, 13, 14, 16, 18], "matvecmul": [7, 9, 14], "m": [7, 10, 14], "v": [7, 14], "matvecmulfast": [7, 14], "argmax": [7, 9], "convolv": [7, 9, 14], "bia": [7, 9, 10, 14], "ones": [7, 14], "zero": [7, 14], "main": [7, 8, 9, 10, 14, 19], "serial": [7, 9, 13, 14], "writer": [7, 9, 13, 14], "io": [7, 9, 13, 14], "filewrit": [7, 9, 13, 14], "lock": [7, 9, 14], "defaultseri": [7, 9, 14], "srt2": [7, 14], "write": [7, 9], "fw": [7, 9], "throw": [7, 9, 14], "save": 7, "multiread": 7, "precis": 7, "readinplac": 7, "fr": [7, 8, 9, 14], "fileread": [7, 9, 14], "norankarrai": 8, "arrclass": 8, "_domain": [8, 9, 17], "readdata": 8, "byte": 8, "readshap": 8, "loadnumpyarrai": 8, "domaintyp": 9, "noinit": 9, "_dom": [9, 14], "isdomaintyp": 9, "fill": 9, "rect": [9, 13, 17], "A": 9, "other": [9, 13], "setdata": 9, "reshapedomain": [9, 14], "isregulardomain": [9, 13], "newshap": [9, 14], "expand": [9, 14], "sumoneaxi": 9, "axi": 9, "sumaxesmask": 9, "withaxesmask": 9, "axescount": 9, "shrink": [9, 14], "narg": 9, "exactbound": 9, "pad": [9, 14], "dilat": [9, 14], "dil": [9, 14], "squeez": 9, "populateremot": 9, "re": 9, "toremot": 9, "batchifi": 9, "dim": [9, 13, 14], "kernelrot": 9, "val": 9, "_iteratorrecord": [9, 14], "ziparr": 9, "f": [9, 17], "mat": [9, 14], "vec": [9, 14], "fromrang": 9, "read": [9, 14], "_tensor_resourc": 9, "fullout": 9, "ranka": 9, "rankb": 9, "contract": 9, "axisa": 9, "axisb": 9, "splitat": 9, "": [9, 13], "del": [9, 17], "idx": [9, 13, 17], "getfirstidx": 9, "slicegener": 9, "start": [9, 16, 17], "stop": [9, 17], "take": [9, 17], "count": [9, 16, 17], "drop": [9, 17], "einsum": 9, "subscript": 9, "helpfindmodulebynam": 10, "helpfindparamdatabynam": 10, "modulechildren": 10, "childdict": 10, "map": [10, 11, 17], "order": [10, 11, 13], "list": [10, 11], "item": 10, "add": 10, "name": 10, "ith": 10, "fieldnam": 10, "issubtyp": [10, 12], "paramet": 10, "modulefieldnam": 10, "modulefield": 10, "registermodul": 10, "postinit": 10, "moduleattribut": 10, "layertyp": 10, "modulenam": 10, "attribut": 10, "dict": [10, 11], "attr": 10, "valtyp": [10, 11], "n": [10, 14, 16, 17], "getint": 10, "prettyprint": 10, "prettyprintspec": 10, "ma": 10, "modulespecif": 10, "submodul": [10, 16], "submoduleord": 10, "modulefromspec": 10, "ms_": 10, "modelfromspecfil": 10, "moduleinst": 10, "moduleid": 10, "ownedmodul": 10, "setup": 10, "getsubmodulenam": 10, "addmodul": 10, "addparamet": 10, "par": 10, "paramnam": 10, "mod": 10, "modnam": 10, "parameternam": 10, "namedmodul": 10, "loadpytorchdump": 10, "debug": 10, "signatur": 10, "md": 10, "overridenam": 10, "weight": 10, "kernelshap": 10, "freq": 10, "chain": 10, "net": 10, "keytyp": 11, "tabl": 11, "size": [11, 13, 14, 17], "kei": 11, "insert": 11, "_remotevarcontain": 12, "containedvalu": 12, "get": 12, "ptr": 12, "tr": 12, "_thunkrecord": 12, "copycontain": 12, "copyto": 12, "unmanag": 12, "chpl__buildremotewrapp": 12, "loc": 12, "intyp": 12, "isdomain": 13, "d": [13, 16], "dt": 13, "zerotup": 13, "simpletupletyp": 13, "tupl": 13, "_tupl": [13, 17], "first": 13, "last": 13, "uncon": 13, "head": 13, "tail": 13, "istupleoford": 13, "leaftyp": 13, "tup": [13, 16], "tuptyp": 13, "computestrid": 13, "computes": 13, "offset": 13, "rnk": 13, "isrectangular": [13, 17], "initi": 13, "from": 13, "shapeoffset": 13, "low": [13, 16, 17], "high": [13, 16, 17], "coord": 13, "shiftedshap": 13, "indexat": [13, 16, 17], "atindex": 13, "serialit": 13, "tag": [13, 16, 17], "iterkind": [13, 16, 17], "standalon": [13, 16, 17], "eachord": [13, 17], "origin": 13, "translat": 13, "chang": 13, "contain": 13, "rct": 13, "tostr": 13, "stdout": 13, "me": 13, "computeblock": 13, "wrap": 13, "unwrap": 13, "_setarraydata": 14, "tensorfromctx": 14, "ctx": 14, "unsqueez": 14, "matvec": 14, "fromshap": 14, "100": 14, "capitalt": 14, "loopgpusupport": 16, "chpl_locale_model": 16, "gpu": 16, "targetgpu": 16, "debugprint": 16, "err": 16, "debugwrit": 16, "cartesian": 16, "y": 16, "flatit": 16, "normalizearrai": 16, "unknown": 16, "isarraytyp": 16, "normalizedomain": 16, "emptydomain": 16, "domainfromshap": 16, "rangefrombound": 16, "rangefromstart": 16, "rangesfrombound": 16, "bound": [16, 18], "rangesfromshap": 16, "nbase": 16, "indexinshap": 16, "indexathelperprod": 16, "prod": 16, "indexathelpermultipl": 16, "div": 16, "fasteach": 16, "argsort": 16, "imagetyp": 17, "ishomogeneoustupl": 17, "removeidx": 17, "untuplifi": 17, "insertidx": 17, "each": 17, "inlin": 17, "simpl": 17, "return": 17, "everi": 17, "foreach": 17, "yield": 17, "everyzip": 17, "leader": 17, "followthi": 17, "follow": 17, "fastshap": 17, "fastnormaldim": 17, "myshap": 17, "normal": 17, "isnorm": 17, "countoccurr": 17, "c": 17, "takeuntil": 17, "keepdel": 17, "stdrang": 18, "idxtyp": 18, "boundkind": 18, "both": 18, "stridekind": 18, "one": 18, "f32": 18, "f64": 18, "document": 19, "gputil": 19}, "objects": {"": [[6, 0, 0, "-", "Autograd"], [19, 0, 0, "-", "ChAI"], [1, 0, 0, "-", "ConvLayerTest"], [7, 0, 0, "-", "DynamicTensor"], [2, 0, 0, "-", "GPUOperations"], [8, 0, 0, "-", "LoadNumpy"], [3, 0, 0, "-", "MNISTNet"], [4, 0, 0, "-", "ModuleSpec"], [5, 0, 0, "-", "MultiLocaleInference"], [9, 0, 0, "-", "NDArray"], [10, 0, 0, "-", "Network"], [11, 0, 0, "-", "OrderedDict"], [12, 0, 0, "-", "Remote"], [13, 0, 0, "-", "SimpleDomain"], [17, 0, 0, "-", "Standard"], [14, 0, 0, "-", "StaticTensor"], [15, 0, 0, "-", "Tensor"], [18, 0, 0, "-", "Types"], [16, 0, 0, "-", "Utilities"]], "Autograd": [[6, 1, 1, "", "BaseTensorResource"], [6, 1, 1, "", "ForgetfulTensor"], [6, 1, 1, "", "TensorEssence"], [6, 1, 1, "", "TensorResource"], [6, 5, 1, "", "addOp"], [6, 5, 1, "", "baseValue"], [6, 6, 1, "", "checkRank"], [6, 5, 1, "", "conv2DOp"], [6, 5, 1, "", "divOp"], [6, 5, 1, "", "expOp"], [6, 5, 1, "", "expandOp"], [6, 6, 1, "", "forceRank"], [6, 6, 1, "", "getRank"], [6, 5, 1, "", "layerSliceOp"], [6, 5, 1, "", "maxOp"], [6, 5, 1, "", "multOp"], [6, 5, 1, "", "padOp"], [6, 5, 1, "", "permuteOp"], [6, 5, 1, "", "reluOp"], [6, 5, 1, "", "reshapeOp"], [6, 5, 1, "", "shrinkOp"], [6, 5, 1, "", "sliceOp"], [6, 5, 1, "", "subOp"], [6, 5, 1, "", "sumOp"]], "Autograd.BaseTensorResource": [[6, 2, 1, "", "array"], [6, 2, 1, "", "backward"], [6, 3, 1, "", "dataResource"], [6, 2, 1, "", "detach"], [6, 2, 1, "", "device"], [6, 2, 1, "", "forward"], [6, 2, 1, "", "grad"], [6, 3, 1, "", "gradResource"], [6, 2, 1, "", "init"], [6, 3, 1, "", "rank"], [6, 2, 1, "", "runtimeRank"], [6, 2, 1, "", "to"]], "Autograd.ForgetfulTensor": [[6, 3, 1, "", "rank"]], "Autograd.TensorEssence": [[6, 4, 1, "", "children"], [6, 3, 1, "", "eltType"], [6, 2, 1, "", "runtimeRank"], [6, 2, 1, "", "treeHeight"]], "Autograd.TensorResource": [[6, 4, 1, "", "children"], [6, 2, 1, "", "detach"], [6, 2, 1, "", "forward"], [6, 2, 1, "", "init"], [6, 3, 1, "", "operationCtx"], [6, 3, 1, "", "operationType"]], "Autograd.addOp": [[6, 2, 1, "", "backward"], [6, 2, 1, "", "children"], [6, 3, 1, "", "eltType"], [6, 2, 1, "", "forward"], [6, 3, 1, "", "lhs"], [6, 3, 1, "", "rank"], [6, 3, 1, "", "rhs"]], "Autograd.baseValue": [[6, 2, 1, "", "children"], [6, 2, 1, "", "forward"]], "Autograd.conv2DOp": [[6, 2, 1, "", "backward"], [6, 2, 1, "", "children"], [6, 3, 1, "", "eltType"], [6, 3, 1, "", "features"], [6, 2, 1, "", "forward"], [6, 3, 1, "", "kernel"], [6, 3, 1, "", "stride"]], "Autograd.divOp": [[6, 2, 1, "", "children"], [6, 2, 1, "", "forward"], [6, 3, 1, "", "lhs"], [6, 3, 1, "", "rhs"]], "Autograd.expOp": [[6, 2, 1, "", "children"], [6, 2, 1, "", "forward"], [6, 3, 1, "", "input"]], "Autograd.expandOp": [[6, 2, 1, "", "backward"], [6, 2, 1, "", "children"], [6, 3, 1, "", "eltType"], [6, 3, 1, "", "expandedShape"], [6, 2, 1, "", "forward"], [6, 3, 1, "", "input"], [6, 3, 1, "", "rank"]], "Autograd.layerSliceOp": [[6, 2, 1, "", "backward"], [6, 3, 1, "", "base"], [6, 2, 1, "", "children"], [6, 3, 1, "", "eltType"], [6, 2, 1, "", "forward"], [6, 3, 1, "", "mask"], [6, 3, 1, "", "maskDomain"], [6, 3, 1, "", "rank"]], "Autograd.maxOp": [[6, 3, 1, "", "axes"], [6, 2, 1, "", "backward"], [6, 2, 1, "", "children"], [6, 3, 1, "", "eltType"], [6, 2, 1, "", "forward"], [6, 3, 1, "", "input"], [6, 3, 1, "", "maxRank"], [6, 3, 1, "", "rank"]], "Autograd.multOp": [[6, 2, 1, "", "backward"], [6, 2, 1, "", "children"], [6, 3, 1, "", "eltType"], [6, 2, 1, "", "forward"], [6, 3, 1, "", "lhs"], [6, 3, 1, "", "rank"], [6, 3, 1, "", "rhs"]], "Autograd.padOp": [[6, 3, 1, "", "arg"], [6, 2, 1, "", "backward"], [6, 2, 1, "", "children"], [6, 3, 1, "", "eltType"], [6, 2, 1, "", "forward"], [6, 3, 1, "", "input"], [6, 3, 1, "", "rank"], [6, 3, 1, "", "value"]], "Autograd.permuteOp": [[6, 2, 1, "", "backward"], [6, 2, 1, "", "children"], [6, 3, 1, "", "eltType"], [6, 2, 1, "", "forward"], [6, 3, 1, "", "input"], [6, 3, 1, "", "permutation"], [6, 3, 1, "", "rank"]], "Autograd.reluOp": [[6, 2, 1, "", "_relu"], [6, 2, 1, "", "children"], [6, 2, 1, "", "forward"], [6, 3, 1, "", "input"]], "Autograd.reshapeOp": [[6, 2, 1, "", "backward"], [6, 2, 1, "", "children"], [6, 3, 1, "", "eltType"], [6, 2, 1, "", "forward"], [6, 3, 1, "", "input"], [6, 3, 1, "", "newRank"], [6, 3, 1, "", "oldRank"], [6, 3, 1, "", "shape"]], "Autograd.shrinkOp": [[6, 3, 1, "", "arg"], [6, 2, 1, "", "backward"], [6, 2, 1, "", "children"], [6, 3, 1, "", "eltType"], [6, 2, 1, "", "forward"], [6, 3, 1, "", "input"], [6, 3, 1, "", "rank"]], "Autograd.sliceOp": [[6, 2, 1, "", "backward"], [6, 2, 1, "", "children"], [6, 3, 1, "", "dom"], [6, 3, 1, "", "eltType"], [6, 2, 1, "", "forward"], [6, 3, 1, "", "input"], [6, 3, 1, "", "rank"]], "Autograd.subOp": [[6, 2, 1, "", "children"], [6, 2, 1, "", "forward"], [6, 3, 1, "", "lhs"], [6, 3, 1, "", "rhs"]], "Autograd.sumOp": [[6, 3, 1, "", "axes"], [6, 2, 1, "", "backward"], [6, 2, 1, "", "children"], [6, 3, 1, "", "eltType"], [6, 2, 1, "", "forward"], [6, 3, 1, "", "input"], [6, 2, 1, "", "outRank"], [6, 3, 1, "", "rank"], [6, 3, 1, "", "sumRank"]], "ChAI": [[19, 6, 1, "", "main"]], "ConvLayerTest": [[1, 7, 1, "", "conv"], [1, 7, 1, "", "output"], [1, 7, 1, "", "t"]], "DynamicTensor": [[7, 6, 1, "", "*"], [7, 6, 1, "", "+"], [7, 6, 1, "", "-"], [7, 6, 1, "", ":"], [7, 8, 1, "", "Tensor"], [7, 7, 1, "", "defaultDetachedMode"], [7, 5, 1, "", "dynamicTensor"], [7, 6, 1, "", "main"], [7, 7, 1, "", "maxRank"], [7, 6, 1, "", "zipBinOp"]], "DynamicTensor.dynamicTensor": [[7, 2, 1, "", "arange"], [7, 2, 1, "", "argmax"], [7, 2, 1, "", "array"], [7, 2, 1, "", "checkRank"], [7, 2, 1, "", "convolve"], [7, 2, 1, "", "data"], [7, 2, 1, "", "detach"], [7, 2, 1, "", "detachMode"], [7, 2, 1, "", "device"], [7, 3, 1, "", "eltType"], [7, 2, 1, "", "exp"], [7, 2, 1, "", "flatten"], [7, 2, 1, "", "forceRank"], [7, 2, 1, "", "forceRankMeta"], [7, 2, 1, "", "grad"], [7, 2, 1, "", "hardCheckRank"], [7, 2, 1, "", "init"], [7, 2, 1, "", "load"], [7, 2, 1, "", "loadFromNumpy"], [7, 2, 1, "", "matvecmul"], [7, 2, 1, "", "matvecmulFast"], [7, 2, 1, "", "max"], [7, 2, 1, "", "maxPool"], [7, 3, 1, "", "meta"], [7, 2, 1, "", "multiReader"], [7, 2, 1, "", "ones"], [7, 2, 1, "", "readInPlace"], [7, 2, 1, "", "relu"], [7, 2, 1, "", "reshape"], [7, 2, 1, "", "resource"], [7, 3, 1, "", "runtimeRank"], [7, 2, 1, "", "save"], [7, 2, 1, "", "serialize"], [7, 2, 1, "", "slice"], [7, 2, 1, "", "softmax"], [7, 2, 1, "", "sum"], [7, 2, 1, "", "tensorize"], [7, 2, 1, "", "this"], [7, 2, 1, "", "to"], [7, 2, 1, "", "toArray"], [7, 2, 1, "", "toNDArray"], [7, 2, 1, "", "write"], [7, 2, 1, "", "zeros"]], "DynamicTensor.ndarray": [[7, 2, 1, "", "toTensor"]], "DynamicTensor.staticTensor": [[7, 2, 1, "", "eraseRank"]], "LoadNumpy": [[8, 1, 1, "", "ArrClass"], [8, 1, 1, "", "NoRankArray"], [8, 6, 1, "", "loadNumpyArray"], [8, 6, 1, "", "main"], [8, 6, 1, "", "readData"], [8, 6, 1, "", "readShape"]], "LoadNumpy.ArrClass": [[8, 3, 1, "", "_domain"], [8, 3, 1, "", "data"], [8, 3, 1, "", "rank"]], "MNISTNet": [[3, 1, 1, "", "CNN"], [3, 7, 1, "", "cnn"], [3, 7, 1, "", "cnn2"], [3, 7, 1, "", "diag"], [3, 8, 1, "", "dtype"], [3, 7, 1, "", "imageCount"], [3, 7, 1, "", "images"], [3, 7, 1, "", "img"], [3, 7, 1, "", "layerDebug"], [3, 7, 1, "", "model"], [3, 7, 1, "", "modelPath"], [3, 7, 1, "", "numTimes"], [3, 7, 1, "", "output"], [3, 7, 1, "", "preds"], [3, 7, 1, "", "printResults"], [3, 7, 1, "", "testImgSize"]], "MNISTNet.CNN": [[3, 3, 1, "", "conv1"], [3, 3, 1, "", "conv2"], [3, 3, 1, "", "dropout1"], [3, 3, 1, "", "dropout2"], [3, 3, 1, "", "fc1"], [3, 3, 1, "", "fc2"], [3, 3, 1, "", "flatten"], [3, 2, 1, "", "forward"], [3, 2, 1, "", "init"]], "ModuleSpec": [[4, 7, 1, "", "detach"], [4, 7, 1, "", "images"], [4, 7, 1, "", "model"], [4, 7, 1, "", "numImages"], [4, 7, 1, "", "numTimes"], [4, 7, 1, "", "preds"], [4, 7, 1, "", "printResults"], [4, 7, 1, "", "time"]], "MultiLocaleInference": [[5, 7, 1, "", "averageTime"], [5, 7, 1, "", "detach"], [5, 8, 1, "", "dtype"], [5, 7, 1, "", "images"], [5, 7, 1, "", "imagesD"], [5, 7, 1, "", "localeModels"], [5, 7, 1, "", "localeModelsD"], [5, 7, 1, "", "numImages"], [5, 7, 1, "", "numTries"], [5, 7, 1, "", "preds"], [5, 7, 1, "", "printResults"], [5, 7, 1, "", "totalTime"]], "NDArray": [[9, 6, 1, "", "*"], [9, 6, 1, "", "+"], [9, 6, 1, "", "-"], [9, 6, 1, "", "/"], [9, 6, 1, "", ":"], [9, 6, 1, "", "="], [9, 1, 1, "", "_tensor_resource"], [9, 8, 1, "", "domainType"], [9, 6, 1, "", "drop"], [9, 6, 1, "", "getFirstIdx"], [9, 6, 1, "", "main"], [9, 5, 1, "", "ndarray"], [9, 6, 1, "", "slice"], [9, 6, 1, "", "sliceGeneric"], [9, 6, 1, "", "splitAt"], [9, 6, 1, "", "take"], [9, 6, 1, "", "zipArr"]], "NDArray._tensor_resource": [[9, 3, 1, "", "data"], [9, 3, 1, "", "eltType"], [9, 3, 1, "", "rank"]], "NDArray.ndarray": [[9, 2, 1, "", "_dom"], [9, 3, 1, "", "_domain"], [9, 2, 1, "", "arange"], [9, 2, 1, "", "argmax"], [9, 4, 1, "", "batchify"], [9, 2, 1, "", "contract"], [9, 2, 1, "", "convolve"], [9, 3, 1, "", "data"], [9, 2, 1, "", "dilate"], [9, 2, 1, "", "einsum"], [9, 3, 1, "", "eltType"], [9, 2, 1, "", "expand"], [9, 2, 1, "", "fromRanges"], [9, 2, 1, "", "fullOuter"], [9, 2, 1, "", "init"], [9, 2, 1, "", "init="], [9, 2, 1, "", "kernelRot"], [9, 2, 1, "", "matvecmul"], [9, 2, 1, "", "max"], [9, 2, 1, "", "maxPool"], [9, 2, 1, "", "pad"], [9, 2, 1, "", "permute"], [9, 2, 1, "", "populateRemote"], [9, 3, 1, "", "rank"], [9, 2, 1, "", "read"], [9, 2, 1, "", "relu"], [9, 2, 1, "", "reshape"], [9, 2, 1, "", "reshapeDomain"], [9, 2, 1, "", "serialize"], [9, 2, 1, "", "setData"], [9, 2, 1, "", "shape"], [9, 2, 1, "", "shrink"], [9, 2, 1, "", "slice"], [9, 2, 1, "", "squeeze"], [9, 2, 1, "", "sum"], [9, 2, 1, "", "sumAxesMask"], [9, 2, 1, "", "sumOneAxis"], [9, 2, 1, "", "this"], [9, 2, 1, "", "toRemote"], [9, 2, 1, "", "write"]], "Network": [[10, 1, 1, "", "Conv2D"], [10, 1, 1, "", "Dropout"], [10, 1, 1, "", "Flatten"], [10, 1, 1, "", "Linear"], [10, 1, 1, "", "MaxPool"], [10, 1, 1, "", "Module"], [10, 1, 1, "", "ModuleSpecification"], [10, 1, 1, "", "Net"], [10, 1, 1, "", "Parameter"], [10, 1, 1, "", "ReLU"], [10, 1, 1, "", "Sequential"], [10, 1, 1, "", "Softmax"], [10, 6, 1, "", "chain"], [10, 6, 1, "", "helpFindModuleByName"], [10, 6, 1, "", "helpFindParamDataByName"], [10, 6, 1, "", "loadModel"], [10, 6, 1, "", "main"], [10, 6, 1, "", "modelFromSpecFile"], [10, 5, 1, "", "moduleAttributes"], [10, 5, 1, "", "moduleChildren"], [10, 6, 1, "", "moduleFromSpec"], [10, 7, 1, "", "moduleInstances"]], "Network.Conv2D": [[10, 2, 1, "", "attributes"], [10, 3, 1, "", "bias"], [10, 2, 1, "", "forward"], [10, 2, 1, "", "init"], [10, 3, 1, "", "kernel"], [10, 3, 1, "", "kernelShape"], [10, 2, 1, "", "setup"], [10, 3, 1, "", "stride"]], "Network.Dropout": [[10, 2, 1, "", "attributes"], [10, 2, 1, "", "forward"], [10, 2, 1, "", "init"]], "Network.Flatten": [[10, 2, 1, "", "attributes"], [10, 2, 1, "", "forward"], [10, 2, 1, "", "init"]], "Network.Linear": [[10, 2, 1, "", "attributes"], [10, 3, 1, "", "bias"], [10, 2, 1, "", "forward"], [10, 2, 1, "", "init"], [10, 3, 1, "", "m"], [10, 3, 1, "", "n"], [10, 2, 1, "", "setup"], [10, 3, 1, "", "weight"]], "Network.MaxPool": [[10, 2, 1, "", "attributes"], [10, 2, 1, "", "forward"], [10, 2, 1, "", "init"], [10, 3, 1, "", "poolSize"]], "Network.Module": [[10, 2, 1, "", "addModule"], [10, 2, 1, "", "addParameter"], [10, 2, 1, "", "attributes"], [10, 3, 1, "", "eltType"], [10, 2, 1, "", "forward"], [10, 2, 1, "", "getSubModuleName"], [10, 2, 1, "", "init"], [10, 2, 1, "", "loadPyTorchDump"], [10, 2, 1, "", "mod"], [10, 3, 1, "", "moduleId"], [10, 3, 1, "", "moduleName"], [10, 4, 1, "", "moduleNames"], [10, 4, 1, "", "modules"], [10, 4, 1, "", "namedModules"], [10, 3, 1, "", "ownedModules"], [10, 2, 1, "", "par"], [10, 4, 1, "", "parameterNames"], [10, 4, 1, "", "parameters"], [10, 2, 1, "", "setup"], [10, 2, 1, "", "signature"], [10, 3, 1, "", "subModules"], [10, 2, 1, "", "this"]], "Network.ModuleSpecification": [[10, 3, 1, "", "attributes"], [10, 3, 1, "", "layerType"], [10, 3, 1, "", "subModuleOrder"], [10, 3, 1, "", "subModules"]], "Network.Net": [[10, 2, 1, "", "forward"], [10, 2, 1, "", "init"]], "Network.Parameter": [[10, 2, 1, "", "attributes"], [10, 3, 1, "", "data"], [10, 2, 1, "", "init"]], "Network.ReLU": [[10, 2, 1, "", "attributes"], [10, 2, 1, "", "forward"], [10, 2, 1, "", "init"]], "Network.Sequential": [[10, 2, 1, "", "attributes"], [10, 2, 1, "", "forward"], [10, 2, 1, "", "init"], [10, 3, 1, "", "mds"]], "Network.Softmax": [[10, 2, 1, "", "attributes"], [10, 2, 1, "", "forward"], [10, 2, 1, "", "init"]], "Network.class": [[10, 4, 1, "", "moduleFieldNames"], [10, 4, 1, "", "moduleFields"], [10, 2, 1, "", "postinit"], [10, 2, 1, "", "registerModules"], [10, 2, 1, "", "this"]], "Network.moduleAttributes": [[10, 2, 1, "", ":"], [10, 3, 1, "", "attributes"], [10, 2, 1, "", "getInt"], [10, 2, 1, "", "init"], [10, 3, 1, "", "layerType"], [10, 3, 1, "", "moduleName"], [10, 2, 1, "", "prettyPrint"], [10, 2, 1, "", "prettyPrintSpec"]], "Network.moduleChildren": [[10, 2, 1, "", "add"], [10, 3, 1, "", "childDict"], [10, 3, 1, "", "eltType"], [10, 2, 1, "", "init"], [10, 4, 1, "", "items"], [10, 2, 1, "", "ith"], [10, 3, 1, "", "order"], [10, 4, 1, "", "these"]], "OrderedDict": [[11, 5, 1, "", "dict"]], "OrderedDict.dict": [[11, 2, 1, "", "init"], [11, 2, 1, "", "insert"], [11, 3, 1, "", "keyType"], [11, 4, 1, "", "keys"], [11, 3, 1, "", "order"], [11, 2, 1, "", "size"], [11, 3, 1, "", "table"], [11, 4, 1, "", "these"], [11, 3, 1, "", "valType"], [11, 4, 1, "", "values"]], "Remote": [[12, 1, 1, "", "Remote"], [12, 1, 1, "", "_RemoteVarContainer"], [12, 6, 1, "", "chpl__buildRemoteWrapper"], [12, 2, 1, "", "ref"]], "Remote.Remote": [[12, 2, 1, "", "copy"], [12, 2, 1, "", "copyContainer"], [12, 2, 1, "", "copyTo"], [12, 2, 1, "", "defaultDevice"], [12, 2, 1, "", "device"], [12, 3, 1, "", "eltType"], [12, 2, 1, "", "get"], [12, 2, 1, "", "init"], [12, 2, 1, "", "ptr"], [12, 2, 1, "", "to"], [12, 3, 1, "", "value"]], "Remote._RemoteVarContainer": [[12, 3, 1, "", "containedValue"]], "SimpleDomain": [[13, 6, 1, "SimpleDomain.&", "&amp;"], [13, 6, 1, "", "+"], [13, 6, 1, "", "-"], [13, 6, 1, "", "="], [13, 6, 1, "", "computeBlocks"], [13, 6, 1, "", "computeSize"], [13, 6, 1, "", "computeStrides"], [13, 6, 1, "", "isDomain"], [13, 6, 1, "", "isRegularDomain"], [13, 6, 1, "", "isTupleOfOrder"], [13, 5, 1, "", "rect"], [13, 6, 1, "", "simpleTupleType"], [13, 8, 1, "", "tuple"], [13, 6, 1, "", "unwrap"], [13, 6, 1, "", "wrap"], [13, 6, 1, "", "zeroTup"]], "SimpleDomain.rect": [[13, 2, 1, "", ":"], [13, 2, 1, "", "atIndex"], [13, 2, 1, "", "contains"], [13, 2, 1, "", "coords"], [13, 2, 1, "", "dims"], [13, 4, 1, "", "eachOrder"], [13, 2, 1, "", "high"], [13, 2, 1, "", "indexAt"], [13, 2, 1, "", "init"], [13, 2, 1, "", "init="], [13, 2, 1, "", "low"], [13, 3, 1, "", "offset"], [13, 2, 1, "", "originate"], [13, 3, 1, "", "rank"], [13, 4, 1, "", "serialIter"], [13, 2, 1, "", "serialize"], [13, 3, 1, "", "shape"], [13, 2, 1, "", "shiftedShape"], [13, 3, 1, "", "size"], [13, 3, 1, "", "strides"], [13, 4, 1, "", "these"], [13, 2, 1, "", "toString"], [13, 2, 1, "", "translate"]], "SimpleDomain.tuple": [[13, 2, 1, "", "eltType"], [13, 2, 1, "", "first"], [13, 2, 1, "", "head"], [13, 2, 1, "", "last"], [13, 2, 1, "", "tail"], [13, 2, 1, "", "uncons"]], "Standard._domain": [[17, 4, 1, "", "each"], [17, 4, 1, "", "every"], [17, 4, 1, "", "everyZip"], [17, 2, 1, "", "fastNormalDims"], [17, 2, 1, "", "fastShape"], [17, 2, 1, "", "indexAt"], [17, 2, 1, "", "isNormal"], [17, 2, 1, "", "myShape"], [17, 2, 1, "", "normalize"]], "Standard._tuple": [[17, 4, 1, "", "each"], [17, 2, 1, "", "eltType"], [17, 2, 1, "", "imageType"], [17, 2, 1, "", "indexAt"], [17, 2, 1, "", "insertIdx"], [17, 2, 1, "", "map"], [17, 2, 1, "", "removeIdx"], [17, 2, 1, "", "slice"], [17, 2, 1, "", "untuplify"]], "Standard.string": [[17, 2, 1, "", "countOccurrences"], [17, 2, 1, "", "drop"], [17, 2, 1, "", "slice"], [17, 2, 1, "", "take"], [17, 2, 1, "", "takeUntil"], [17, 2, 1, "", "this"]], "StaticTensor": [[14, 6, 1, "", "*"], [14, 6, 1, "", "+"], [14, 6, 1, "", "-"], [14, 6, 1, "", "/"], [14, 6, 1, "", ":"], [14, 7, 1, "", "diag"], [14, 6, 1, "", "main"], [14, 6, 1, "", "matvec"], [14, 7, 1, "", "n"], [14, 7, 1, "", "size"], [14, 5, 1, "", "staticTensor"], [14, 6, 1, "", "tensorFromCtx"]], "StaticTensor.staticTensor": [[14, 2, 1, "", "_dom"], [14, 2, 1, "", "_setArrayData"], [14, 2, 1, "", "arange"], [14, 2, 1, "", "convolve"], [14, 2, 1, "", "detach"], [14, 2, 1, "", "dilate"], [14, 3, 1, "", "eltType"], [14, 2, 1, "", "exp"], [14, 2, 1, "", "expand"], [14, 2, 1, "", "fromShape"], [14, 2, 1, "", "init"], [14, 2, 1, "", "matvecmul"], [14, 2, 1, "", "matvecmulFast"], [14, 2, 1, "", "max"], [14, 2, 1, "", "maxPool"], [14, 2, 1, "", "meta"], [14, 2, 1, "", "ones"], [14, 2, 1, "", "pad"], [14, 2, 1, "", "permute"], [14, 3, 1, "", "rank"], [14, 2, 1, "", "read"], [14, 2, 1, "", "relu"], [14, 2, 1, "", "reshape"], [14, 2, 1, "", "reshapeDomain"], [14, 3, 1, "", "resource"], [14, 2, 1, "", "serialize"], [14, 2, 1, "", "shrink"], [14, 2, 1, "", "slice"], [14, 2, 1, "", "softmax"], [14, 2, 1, "", "sum"], [14, 2, 1, "", "this"], [14, 2, 1, "", "unsqueeze"], [14, 2, 1, "", "zeros"]], "Types": [[18, 8, 1, "", "f32"], [18, 8, 1, "", "f64"], [18, 8, 1, "", "stdRange"]], "Utilities": [[16, 6, 1, "", "argsort"], [16, 9, 1, "", "cartesian"], [16, 7, 1, "", "debugPrint"], [16, 6, 1, "", "debugWrite"], [16, 6, 1, "", "domainFromShape"], [16, 6, 1, "", "emptyDomain"], [16, 6, 1, "", "err"], [16, 9, 1, "", "fastEach"], [16, 9, 1, "", "flatIter"], [16, 6, 1, "", "indexAt"], [16, 6, 1, "", "indexAtHelperMultiples"], [16, 6, 1, "", "indexAtHelperProd"], [16, 6, 1, "", "indexInShape"], [16, 7, 1, "", "loopGpuSupport"], [16, 6, 1, "", "nbase"], [16, 6, 1, "", "normalizeArray"], [16, 6, 1, "", "normalizeDomain"], [16, 6, 1, "", "rangeFromBound"], [16, 6, 1, "", "rangeFromStart"], [16, 6, 1, "", "rangesFromBounds"], [16, 6, 1, "", "rangesFromShape"], [16, 6, 1, "", "targetGpu"]]}, "objtypes": {"0": "chpl:module", "1": "chpl:class", "2": "chpl:method", "3": "chpl:attribute", "4": "chpl:itermethod", "5": "chpl:record", "6": "chpl:function", "7": "chpl:data", "8": "chpl:type", "9": "chpl:iterfunction"}, "objnames": {"0": ["chpl", "module", " module"], "1": ["chpl", "class", " class"], "2": ["chpl", "method", " method"], "3": ["chpl", "attribute", " attribute"], "4": ["chpl", "itermethod", " itermethod"], "5": ["chpl", "record", " record"], "6": ["chpl", "function", " function"], "7": ["chpl", "data", " data"], "8": ["chpl", "type", " type"], "9": ["chpl", "iterfunction", " iterfunction"]}, "titleterms": {"chpldoc": 0, "document": 0, "indic": 0, "tabl": 0, "convlayertest": 1, "gpuoper": 2, "mnistnet": 3, "modulespec": 4, "multilocaleinfer": 5, "autograd": 6, "dynamictensor": 7, "loadnumpi": 8, "ndarrai": 9, "network": 10, "ordereddict": 11, "remot": 12, "simpledomain": 13, "statictensor": 14, "tensor": 15, "util": 16, "standard": 17, "type": 18, "chai": 19}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx": 60}, "alltitles": {"chpldoc documentation": [[0, "chpldoc-documentation"]], "Indices and tables": [[0, "indices-and-tables"]], "ConvLayerTest": [[1, "convlayertest"]], "GPUOperations": [[2, "gpuoperations"]], "MNISTNet": [[3, "mnistnet"]], "ModuleSpec": [[4, "modulespec"]], "MultiLocaleInference": [[5, "multilocaleinference"]], "Autograd": [[6, "autograd"]], "DynamicTensor": [[7, "dynamictensor"]], "LoadNumpy": [[8, "loadnumpy"]], "NDArray": [[9, "ndarray"]], "Network": [[10, "network"]], "OrderedDict": [[11, "ordereddict"]], "Remote": [[12, "remote"]], "SimpleDomain": [[13, "simpledomain"]], "StaticTensor": [[14, "statictensor"]], "Tensor": [[15, "tensor"]], "Utilities": [[16, "utilities"]], "Standard": [[17, "standard"]], "Types": [[18, "types"]], "ChAI": [[19, "chai"]]}, "indexentries": {"convlayertest (module)": [[1, "module-ConvLayerTest"]], "conv (in module convlayertest)": [[1, "ConvLayerTest.conv"]], "output (in module convlayertest)": [[1, "ConvLayerTest.output"]], "t (in module convlayertest)": [[1, "ConvLayerTest.t"]], "gpuoperations (module)": [[2, "module-GPUOperations"]], "cnn (class in mnistnet)": [[3, "MNISTNet.CNN"]], "mnistnet (module)": [[3, "module-MNISTNet"]], "cnn (in module mnistnet)": [[3, "MNISTNet.cnn"]], "cnn2 (in module mnistnet)": [[3, "MNISTNet.cnn2"]], "conv1 (mnistnet.cnn attribute)": [[3, "MNISTNet.CNN.conv1"]], "conv2 (mnistnet.cnn attribute)": [[3, "MNISTNet.CNN.conv2"]], "diag (in module mnistnet)": [[3, "MNISTNet.diag"]], "dropout1 (mnistnet.cnn attribute)": [[3, "MNISTNet.CNN.dropout1"]], "dropout2 (mnistnet.cnn attribute)": [[3, "MNISTNet.CNN.dropout2"]], "dtype (in module mnistnet)": [[3, "MNISTNet.dtype"]], "fc1 (mnistnet.cnn attribute)": [[3, "MNISTNet.CNN.fc1"]], "fc2 (mnistnet.cnn attribute)": [[3, "MNISTNet.CNN.fc2"]], "flatten (mnistnet.cnn attribute)": [[3, "MNISTNet.CNN.flatten"]], "forward() (mnistnet.cnn method)": [[3, "MNISTNet.CNN.forward"]], "imagecount (in module mnistnet)": [[3, "MNISTNet.imageCount"]], "images (in module mnistnet)": [[3, "MNISTNet.images"]], "img (in module mnistnet)": [[3, "MNISTNet.img"]], "init() (mnistnet.cnn method)": [[3, "MNISTNet.CNN.init"]], "layerdebug (in module mnistnet)": [[3, "MNISTNet.layerDebug"]], "model (in module mnistnet)": [[3, "MNISTNet.model"]], "modelpath (in module mnistnet)": [[3, "MNISTNet.modelPath"]], "numtimes (in module mnistnet)": [[3, "MNISTNet.numTimes"]], "output (in module mnistnet)": [[3, "MNISTNet.output"]], "preds (in module mnistnet)": [[3, "MNISTNet.preds"]], "printresults (in module mnistnet)": [[3, "MNISTNet.printResults"]], "testimgsize (in module mnistnet)": [[3, "MNISTNet.testImgSize"]], "modulespec (module)": [[4, "module-ModuleSpec"]], "detach (in module modulespec)": [[4, "ModuleSpec.detach"]], "images (in module modulespec)": [[4, "ModuleSpec.images"]], "model (in module modulespec)": [[4, "ModuleSpec.model"]], "numimages (in module modulespec)": [[4, "ModuleSpec.numImages"]], "numtimes (in module modulespec)": [[4, "ModuleSpec.numTimes"]], "preds (in module modulespec)": [[4, "ModuleSpec.preds"]], "printresults (in module modulespec)": [[4, "ModuleSpec.printResults"]], "time (in module modulespec)": [[4, "ModuleSpec.time"]], "multilocaleinference (module)": [[5, "module-MultiLocaleInference"]], "averagetime (in module multilocaleinference)": [[5, "MultiLocaleInference.averageTime"]], "detach (in module multilocaleinference)": [[5, "MultiLocaleInference.detach"]], "dtype (in module multilocaleinference)": [[5, "MultiLocaleInference.dtype"]], "images (in module multilocaleinference)": [[5, "MultiLocaleInference.images"]], "imagesd (in module multilocaleinference)": [[5, "MultiLocaleInference.imagesD"]], "localemodels (in module multilocaleinference)": [[5, "MultiLocaleInference.localeModels"]], "localemodelsd (in module multilocaleinference)": [[5, "MultiLocaleInference.localeModelsD"]], "numimages (in module multilocaleinference)": [[5, "MultiLocaleInference.numImages"]], "numtries (in module multilocaleinference)": [[5, "MultiLocaleInference.numTries"]], "preds (in module multilocaleinference)": [[5, "MultiLocaleInference.preds"]], "printresults (in module multilocaleinference)": [[5, "MultiLocaleInference.printResults"]], "totaltime (in module multilocaleinference)": [[5, "MultiLocaleInference.totalTime"]], "autograd (module)": [[6, "module-Autograd"]], "basetensorresource (class in autograd)": [[6, "Autograd.BaseTensorResource"]], "forgetfultensor (class in autograd)": [[6, "Autograd.ForgetfulTensor"]], "tensoressence (class in autograd)": [[6, "Autograd.TensorEssence"]], "tensorresource (class in autograd)": [[6, "Autograd.TensorResource"]], "_relu() (autograd.reluop method)": [[6, "Autograd.reluOp._relu"]], "addop (record in autograd)": [[6, "Autograd.addOp"]], "arg (autograd.padop attribute)": [[6, "Autograd.padOp.arg"]], "arg (autograd.shrinkop attribute)": [[6, "Autograd.shrinkOp.arg"]], "array() (autograd.basetensorresource method)": [[6, "Autograd.BaseTensorResource.array"]], "axes (autograd.maxop attribute)": [[6, "Autograd.maxOp.axes"]], "axes (autograd.sumop attribute)": [[6, "Autograd.sumOp.axes"]], "backward() (autograd.basetensorresource method)": [[6, "Autograd.BaseTensorResource.backward"]], "backward() (autograd.addop method)": [[6, "Autograd.addOp.backward"]], "backward() (autograd.conv2dop method)": [[6, "Autograd.conv2DOp.backward"]], "backward() (autograd.expandop method)": [[6, "Autograd.expandOp.backward"]], "backward() (autograd.layersliceop method)": [[6, "Autograd.layerSliceOp.backward"]], "backward() (autograd.maxop method)": [[6, "Autograd.maxOp.backward"]], "backward() (autograd.multop method)": [[6, "Autograd.multOp.backward"]], "backward() (autograd.padop method)": [[6, "Autograd.padOp.backward"]], "backward() (autograd.permuteop method)": [[6, "Autograd.permuteOp.backward"]], "backward() (autograd.reshapeop method)": [[6, "Autograd.reshapeOp.backward"]], "backward() (autograd.shrinkop method)": [[6, "Autograd.shrinkOp.backward"]], "backward() (autograd.sliceop method)": [[6, "Autograd.sliceOp.backward"]], "backward() (autograd.sumop method)": [[6, "Autograd.sumOp.backward"]], "base (autograd.layersliceop attribute)": [[6, "Autograd.layerSliceOp.base"]], "basevalue (record in autograd)": [[6, "Autograd.baseValue"]], "checkrank() (in module autograd)": [[6, "Autograd.checkRank"]], "children() (autograd.tensoressence iterator)": [[6, "Autograd.TensorEssence.children"]], "children() (autograd.tensorresource iterator)": [[6, "Autograd.TensorResource.children"]], "children() (autograd.addop method)": [[6, "Autograd.addOp.children"]], "children() (autograd.basevalue method)": [[6, "Autograd.baseValue.children"]], "children() (autograd.conv2dop method)": [[6, "Autograd.conv2DOp.children"]], "children() (autograd.divop method)": [[6, "Autograd.divOp.children"]], "children() (autograd.expop method)": [[6, "Autograd.expOp.children"]], "children() (autograd.expandop method)": [[6, "Autograd.expandOp.children"]], "children() (autograd.layersliceop method)": [[6, "Autograd.layerSliceOp.children"]], "children() (autograd.maxop method)": [[6, "Autograd.maxOp.children"]], "children() (autograd.multop method)": [[6, "Autograd.multOp.children"]], "children() (autograd.padop method)": [[6, "Autograd.padOp.children"]], "children() (autograd.permuteop method)": [[6, "Autograd.permuteOp.children"]], "children() (autograd.reluop method)": [[6, "Autograd.reluOp.children"]], "children() (autograd.reshapeop method)": [[6, "Autograd.reshapeOp.children"]], "children() (autograd.shrinkop method)": [[6, "Autograd.shrinkOp.children"]], "children() (autograd.sliceop method)": [[6, "Autograd.sliceOp.children"]], "children() (autograd.subop method)": [[6, "Autograd.subOp.children"]], "children() (autograd.sumop method)": [[6, "Autograd.sumOp.children"]], "conv2dop (record in autograd)": [[6, "Autograd.conv2DOp"]], "dataresource (autograd.basetensorresource attribute)": [[6, "Autograd.BaseTensorResource.dataResource"]], "detach() (autograd.basetensorresource method)": [[6, "Autograd.BaseTensorResource.detach"]], "detach() (autograd.tensorresource method)": [[6, "Autograd.TensorResource.detach"]], "device() (autograd.basetensorresource method)": [[6, "Autograd.BaseTensorResource.device"]], "divop (record in autograd)": [[6, "Autograd.divOp"]], "dom (autograd.sliceop attribute)": [[6, "Autograd.sliceOp.dom"]], "elttype (autograd.tensoressence attribute)": [[6, "Autograd.TensorEssence.eltType"]], "elttype (autograd.addop attribute)": [[6, "Autograd.addOp.eltType"]], "elttype (autograd.conv2dop attribute)": [[6, "Autograd.conv2DOp.eltType"]], "elttype (autograd.expandop attribute)": [[6, "Autograd.expandOp.eltType"]], "elttype (autograd.layersliceop attribute)": [[6, "Autograd.layerSliceOp.eltType"]], "elttype (autograd.maxop attribute)": [[6, "Autograd.maxOp.eltType"]], "elttype (autograd.multop attribute)": [[6, "Autograd.multOp.eltType"]], "elttype (autograd.padop attribute)": [[6, "Autograd.padOp.eltType"]], "elttype (autograd.permuteop attribute)": [[6, "Autograd.permuteOp.eltType"]], "elttype (autograd.reshapeop attribute)": [[6, "Autograd.reshapeOp.eltType"]], "elttype (autograd.shrinkop attribute)": [[6, "Autograd.shrinkOp.eltType"]], "elttype (autograd.sliceop attribute)": [[6, "Autograd.sliceOp.eltType"]], "elttype (autograd.sumop attribute)": [[6, "Autograd.sumOp.eltType"]], "expop (record in autograd)": [[6, "Autograd.expOp"]], "expandop (record in autograd)": [[6, "Autograd.expandOp"]], "expandedshape (autograd.expandop attribute)": [[6, "Autograd.expandOp.expandedShape"]], "features (autograd.conv2dop attribute)": [[6, "Autograd.conv2DOp.features"]], "forcerank() (in module autograd)": [[6, "Autograd.forceRank"]], "forward() (autograd.basetensorresource method)": [[6, "Autograd.BaseTensorResource.forward"]], "forward() (autograd.tensorresource method)": [[6, "Autograd.TensorResource.forward"]], "forward() (autograd.addop method)": [[6, "Autograd.addOp.forward"]], "forward() (autograd.basevalue method)": [[6, "Autograd.baseValue.forward"]], "forward() (autograd.conv2dop method)": [[6, "Autograd.conv2DOp.forward"]], "forward() (autograd.divop method)": [[6, "Autograd.divOp.forward"]], "forward() (autograd.expop method)": [[6, "Autograd.expOp.forward"]], "forward() (autograd.expandop method)": [[6, "Autograd.expandOp.forward"]], "forward() (autograd.layersliceop method)": [[6, "Autograd.layerSliceOp.forward"]], "forward() (autograd.maxop method)": [[6, "Autograd.maxOp.forward"]], "forward() (autograd.multop method)": [[6, "Autograd.multOp.forward"]], "forward() (autograd.padop method)": [[6, "Autograd.padOp.forward"]], "forward() (autograd.permuteop method)": [[6, "Autograd.permuteOp.forward"]], "forward() (autograd.reluop method)": [[6, "Autograd.reluOp.forward"]], "forward() (autograd.reshapeop method)": [[6, "Autograd.reshapeOp.forward"]], "forward() (autograd.shrinkop method)": [[6, "Autograd.shrinkOp.forward"]], "forward() (autograd.sliceop method)": [[6, "Autograd.sliceOp.forward"]], "forward() (autograd.subop method)": [[6, "Autograd.subOp.forward"]], "forward() (autograd.sumop method)": [[6, "Autograd.sumOp.forward"]], "getrank() (in module autograd)": [[6, "Autograd.getRank"]], "grad() (autograd.basetensorresource method)": [[6, "Autograd.BaseTensorResource.grad"]], "gradresource (autograd.basetensorresource attribute)": [[6, "Autograd.BaseTensorResource.gradResource"]], "init() (autograd.basetensorresource method)": [[6, "Autograd.BaseTensorResource.init"]], "init() (autograd.tensorresource method)": [[6, "Autograd.TensorResource.init"]], "input (autograd.expop attribute)": [[6, "Autograd.expOp.input"]], "input (autograd.expandop attribute)": [[6, "Autograd.expandOp.input"]], "input (autograd.maxop attribute)": [[6, "Autograd.maxOp.input"]], "input (autograd.padop attribute)": [[6, "Autograd.padOp.input"]], "input (autograd.permuteop attribute)": [[6, "Autograd.permuteOp.input"]], "input (autograd.reluop attribute)": [[6, "Autograd.reluOp.input"]], "input (autograd.reshapeop attribute)": [[6, "Autograd.reshapeOp.input"]], "input (autograd.shrinkop attribute)": [[6, "Autograd.shrinkOp.input"]], "input (autograd.sliceop attribute)": [[6, "Autograd.sliceOp.input"]], "input (autograd.sumop attribute)": [[6, "Autograd.sumOp.input"]], "kernel (autograd.conv2dop attribute)": [[6, "Autograd.conv2DOp.kernel"]], "layersliceop (record in autograd)": [[6, "Autograd.layerSliceOp"]], "lhs (autograd.addop attribute)": [[6, "Autograd.addOp.lhs"]], "lhs (autograd.divop attribute)": [[6, "Autograd.divOp.lhs"]], "lhs (autograd.multop attribute)": [[6, "Autograd.multOp.lhs"]], "lhs (autograd.subop attribute)": [[6, "Autograd.subOp.lhs"]], "mask (autograd.layersliceop attribute)": [[6, "Autograd.layerSliceOp.mask"]], "maskdomain (autograd.layersliceop attribute)": [[6, "Autograd.layerSliceOp.maskDomain"]], "maxop (record in autograd)": [[6, "Autograd.maxOp"]], "maxrank (autograd.maxop attribute)": [[6, "Autograd.maxOp.maxRank"]], "multop (record in autograd)": [[6, "Autograd.multOp"]], "newrank (autograd.reshapeop attribute)": [[6, "Autograd.reshapeOp.newRank"]], "oldrank (autograd.reshapeop attribute)": [[6, "Autograd.reshapeOp.oldRank"]], "operationctx (autograd.tensorresource attribute)": [[6, "Autograd.TensorResource.operationCtx"]], "operationtype (autograd.tensorresource attribute)": [[6, "Autograd.TensorResource.operationType"]], "outrank() (autograd.sumop method)": [[6, "Autograd.sumOp.outRank"]], "padop (record in autograd)": [[6, "Autograd.padOp"]], "permutation (autograd.permuteop attribute)": [[6, "Autograd.permuteOp.permutation"]], "permuteop (record in autograd)": [[6, "Autograd.permuteOp"]], "rank (autograd.basetensorresource attribute)": [[6, "Autograd.BaseTensorResource.rank"]], "rank (autograd.forgetfultensor attribute)": [[6, "Autograd.ForgetfulTensor.rank"]], "rank (autograd.addop attribute)": [[6, "Autograd.addOp.rank"]], "rank (autograd.expandop attribute)": [[6, "Autograd.expandOp.rank"]], "rank (autograd.layersliceop attribute)": [[6, "Autograd.layerSliceOp.rank"]], "rank (autograd.maxop attribute)": [[6, "Autograd.maxOp.rank"]], "rank (autograd.multop attribute)": [[6, "Autograd.multOp.rank"]], "rank (autograd.padop attribute)": [[6, "Autograd.padOp.rank"]], "rank (autograd.permuteop attribute)": [[6, "Autograd.permuteOp.rank"]], "rank (autograd.shrinkop attribute)": [[6, "Autograd.shrinkOp.rank"]], "rank (autograd.sliceop attribute)": [[6, "Autograd.sliceOp.rank"]], "rank (autograd.sumop attribute)": [[6, "Autograd.sumOp.rank"]], "reluop (record in autograd)": [[6, "Autograd.reluOp"]], "reshapeop (record in autograd)": [[6, "Autograd.reshapeOp"]], "rhs (autograd.addop attribute)": [[6, "Autograd.addOp.rhs"]], "rhs (autograd.divop attribute)": [[6, "Autograd.divOp.rhs"]], "rhs (autograd.multop attribute)": [[6, "Autograd.multOp.rhs"]], "rhs (autograd.subop attribute)": [[6, "Autograd.subOp.rhs"]], "runtimerank() (autograd.basetensorresource method)": [[6, "Autograd.BaseTensorResource.runtimeRank"]], "runtimerank() (autograd.tensoressence method)": [[6, "Autograd.TensorEssence.runtimeRank"]], "shape (autograd.reshapeop attribute)": [[6, "Autograd.reshapeOp.shape"]], "shrinkop (record in autograd)": [[6, "Autograd.shrinkOp"]], "sliceop (record in autograd)": [[6, "Autograd.sliceOp"]], "stride (autograd.conv2dop attribute)": [[6, "Autograd.conv2DOp.stride"]], "subop (record in autograd)": [[6, "Autograd.subOp"]], "sumop (record in autograd)": [[6, "Autograd.sumOp"]], "sumrank (autograd.sumop attribute)": [[6, "Autograd.sumOp.sumRank"]], "to() (autograd.basetensorresource method)": [[6, "Autograd.BaseTensorResource.to"]], "treeheight() (autograd.tensoressence method)": [[6, "Autograd.TensorEssence.treeHeight"]], "value (autograd.padop attribute)": [[6, "Autograd.padOp.value"]], "*() (in module dynamictensor)": [[7, "DynamicTensor.*"]], "+() (in module dynamictensor)": [[7, "DynamicTensor.+"]], "-() (in module dynamictensor)": [[7, "DynamicTensor.-"]], ":() (in module dynamictensor)": [[7, "DynamicTensor.:"]], "dynamictensor (module)": [[7, "module-DynamicTensor"]], "tensor (in module dynamictensor)": [[7, "DynamicTensor.Tensor"]], "arange() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.arange"]], "argmax() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.argmax"]], "array() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.array"]], "checkrank() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.checkRank"]], "convolve() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.convolve"]], "data() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.data"]], "defaultdetachedmode (in module dynamictensor)": [[7, "DynamicTensor.defaultDetachedMode"]], "detach() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.detach"]], "detachmode() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.detachMode"]], "device() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.device"]], "dynamictensor (record in dynamictensor)": [[7, "DynamicTensor.dynamicTensor"]], "elttype (dynamictensor.dynamictensor attribute)": [[7, "DynamicTensor.dynamicTensor.eltType"]], "eraserank() (dynamictensor.statictensor method)": [[7, "DynamicTensor.staticTensor.eraseRank"]], "exp() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.exp"]], "flatten() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.flatten"]], "forcerank() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.forceRank"]], "forcerankmeta() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.forceRankMeta"]], "grad() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.grad"]], "hardcheckrank() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.hardCheckRank"]], "init() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.init"]], "load() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.load"]], "loadfromnumpy() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.loadFromNumpy"]], "main() (in module dynamictensor)": [[7, "DynamicTensor.main"]], "matvecmul() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.matvecmul"]], "matvecmulfast() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.matvecmulFast"]], "max() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.max"]], "maxpool() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.maxPool"]], "maxrank (in module dynamictensor)": [[7, "DynamicTensor.maxRank"]], "meta (dynamictensor.dynamictensor attribute)": [[7, "DynamicTensor.dynamicTensor.meta"]], "multireader() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.multiReader"]], "ones() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.ones"]], "readinplace() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.readInPlace"]], "relu() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.relu"]], "reshape() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.reshape"]], "resource() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.resource"]], "runtimerank (dynamictensor.dynamictensor attribute)": [[7, "DynamicTensor.dynamicTensor.runtimeRank"]], "save() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.save"]], "serialize() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.serialize"]], "slice() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.slice"]], "softmax() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.softmax"]], "sum() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.sum"]], "tensorize() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.tensorize"]], "this() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.this"]], "to() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.to"]], "toarray() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.toArray"]], "tondarray() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.toNDArray"]], "totensor() (dynamictensor.ndarray method)": [[7, "DynamicTensor.ndarray.toTensor"]], "write() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.write"]], "zeros() (dynamictensor.dynamictensor method)": [[7, "DynamicTensor.dynamicTensor.zeros"]], "zipbinop() (in module dynamictensor)": [[7, "DynamicTensor.zipBinOp"]], "arrclass (class in loadnumpy)": [[8, "LoadNumpy.ArrClass"]], "loadnumpy (module)": [[8, "module-LoadNumpy"]], "norankarray (class in loadnumpy)": [[8, "LoadNumpy.NoRankArray"]], "_domain (loadnumpy.arrclass attribute)": [[8, "LoadNumpy.ArrClass._domain"]], "data (loadnumpy.arrclass attribute)": [[8, "LoadNumpy.ArrClass.data"]], "loadnumpyarray() (in module loadnumpy)": [[8, "LoadNumpy.loadNumpyArray"]], "main() (in module loadnumpy)": [[8, "LoadNumpy.main"]], "rank (loadnumpy.arrclass attribute)": [[8, "LoadNumpy.ArrClass.rank"]], "readdata() (in module loadnumpy)": [[8, "LoadNumpy.readData"]], "readshape() (in module loadnumpy)": [[8, "LoadNumpy.readShape"]], "*() (in module ndarray)": [[9, "NDArray.*"]], "+() (in module ndarray)": [[9, "NDArray.+"]], "-() (in module ndarray)": [[9, "NDArray.-"]], "/() (in module ndarray)": [[9, "NDArray./"]], ":() (in module ndarray)": [[9, "NDArray.:"]], "=() (in module ndarray)": [[9, "NDArray.="]], "ndarray (module)": [[9, "module-NDArray"]], "_dom() (ndarray.ndarray method)": [[9, "NDArray.ndarray._dom"]], "_domain (ndarray.ndarray attribute)": [[9, "NDArray.ndarray._domain"]], "_tensor_resource (class in ndarray)": [[9, "NDArray._tensor_resource"]], "arange() (ndarray.ndarray method)": [[9, "NDArray.ndarray.arange"]], "argmax() (ndarray.ndarray method)": [[9, "NDArray.ndarray.argmax"]], "batchify() (ndarray.ndarray iterator)": [[9, "NDArray.ndarray.batchify"]], "contract() (ndarray.ndarray method)": [[9, "NDArray.ndarray.contract"]], "convolve() (ndarray.ndarray method)": [[9, "NDArray.ndarray.convolve"]], "data (ndarray._tensor_resource attribute)": [[9, "NDArray._tensor_resource.data"]], "data (ndarray.ndarray attribute)": [[9, "NDArray.ndarray.data"]], "dilate() (ndarray.ndarray method)": [[9, "NDArray.ndarray.dilate"]], "domaintype (in module ndarray)": [[9, "NDArray.domainType"]], "drop() (in module ndarray)": [[9, "NDArray.drop"]], "einsum() (ndarray.ndarray method)": [[9, "NDArray.ndarray.einsum"]], "elttype (ndarray._tensor_resource attribute)": [[9, "NDArray._tensor_resource.eltType"]], "elttype (ndarray.ndarray attribute)": [[9, "NDArray.ndarray.eltType"]], "expand() (ndarray.ndarray method)": [[9, "NDArray.ndarray.expand"]], "fromranges() (ndarray.ndarray method)": [[9, "NDArray.ndarray.fromRanges"]], "fullouter() (ndarray.ndarray method)": [[9, "NDArray.ndarray.fullOuter"]], "getfirstidx() (in module ndarray)": [[9, "NDArray.getFirstIdx"]], "init() (ndarray.ndarray method)": [[9, "NDArray.ndarray.init"]], "init=() (ndarray.ndarray method)": [[9, "NDArray.ndarray.init="]], "kernelrot() (ndarray.ndarray method)": [[9, "NDArray.ndarray.kernelRot"]], "main() (in module ndarray)": [[9, "NDArray.main"]], "matvecmul() (ndarray.ndarray method)": [[9, "NDArray.ndarray.matvecmul"]], "max() (ndarray.ndarray method)": [[9, "NDArray.ndarray.max"]], "maxpool() (ndarray.ndarray method)": [[9, "NDArray.ndarray.maxPool"]], "ndarray (record in ndarray)": [[9, "NDArray.ndarray"]], "pad() (ndarray.ndarray method)": [[9, "NDArray.ndarray.pad"]], "permute() (ndarray.ndarray method)": [[9, "NDArray.ndarray.permute"]], "populateremote() (ndarray.ndarray method)": [[9, "NDArray.ndarray.populateRemote"]], "rank (ndarray._tensor_resource attribute)": [[9, "NDArray._tensor_resource.rank"]], "rank (ndarray.ndarray attribute)": [[9, "NDArray.ndarray.rank"]], "read() (ndarray.ndarray method)": [[9, "NDArray.ndarray.read"]], "relu() (ndarray.ndarray method)": [[9, "NDArray.ndarray.relu"]], "reshape() (ndarray.ndarray method)": [[9, "NDArray.ndarray.reshape"]], "reshapedomain() (ndarray.ndarray method)": [[9, "NDArray.ndarray.reshapeDomain"]], "serialize() (ndarray.ndarray method)": [[9, "NDArray.ndarray.serialize"]], "setdata() (ndarray.ndarray method)": [[9, "NDArray.ndarray.setData"]], "shape() (ndarray.ndarray method)": [[9, "NDArray.ndarray.shape"]], "shrink() (ndarray.ndarray method)": [[9, "NDArray.ndarray.shrink"]], "slice() (ndarray.ndarray method)": [[9, "NDArray.ndarray.slice"]], "slice() (in module ndarray)": [[9, "NDArray.slice"]], "slicegeneric() (in module ndarray)": [[9, "NDArray.sliceGeneric"]], "splitat() (in module ndarray)": [[9, "NDArray.splitAt"]], "squeeze() (ndarray.ndarray method)": [[9, "NDArray.ndarray.squeeze"]], "sum() (ndarray.ndarray method)": [[9, "NDArray.ndarray.sum"]], "sumaxesmask() (ndarray.ndarray method)": [[9, "NDArray.ndarray.sumAxesMask"]], "sumoneaxis() (ndarray.ndarray method)": [[9, "NDArray.ndarray.sumOneAxis"]], "take() (in module ndarray)": [[9, "NDArray.take"]], "this() (ndarray.ndarray method)": [[9, "NDArray.ndarray.this"]], "toremote() (ndarray.ndarray method)": [[9, "NDArray.ndarray.toRemote"]], "write() (ndarray.ndarray method)": [[9, "NDArray.ndarray.write"]], "ziparr() (in module ndarray)": [[9, "NDArray.zipArr"]], ":() (network.moduleattributes method)": [[10, "Network.moduleAttributes.:"]], "conv2d (class in network)": [[10, "Network.Conv2D"]], "dropout (class in network)": [[10, "Network.Dropout"]], "flatten (class in network)": [[10, "Network.Flatten"]], "linear (class in network)": [[10, "Network.Linear"]], "maxpool (class in network)": [[10, "Network.MaxPool"]], "module (class in network)": [[10, "Network.Module"]], "modulespecification (class in network)": [[10, "Network.ModuleSpecification"]], "net (class in network)": [[10, "Network.Net"]], "network (module)": [[10, "module-Network"]], "parameter (class in network)": [[10, "Network.Parameter"]], "relu (class in network)": [[10, "Network.ReLU"]], "sequential (class in network)": [[10, "Network.Sequential"]], "softmax (class in network)": [[10, "Network.Softmax"]], "add() (network.modulechildren method)": [[10, "Network.moduleChildren.add"]], "addmodule() (network.module method)": [[10, "Network.Module.addModule"]], "addparameter() (network.module method)": [[10, "Network.Module.addParameter"]], "attributes (network.modulespecification attribute)": [[10, "Network.ModuleSpecification.attributes"]], "attributes (network.moduleattributes attribute)": [[10, "Network.moduleAttributes.attributes"]], "attributes() (network.conv2d method)": [[10, "Network.Conv2D.attributes"]], "attributes() (network.dropout method)": [[10, "Network.Dropout.attributes"]], "attributes() (network.flatten method)": [[10, "Network.Flatten.attributes"]], "attributes() (network.linear method)": [[10, "Network.Linear.attributes"]], "attributes() (network.maxpool method)": [[10, "Network.MaxPool.attributes"]], "attributes() (network.module method)": [[10, "Network.Module.attributes"]], "attributes() (network.parameter method)": [[10, "Network.Parameter.attributes"]], "attributes() (network.relu method)": [[10, "Network.ReLU.attributes"]], "attributes() (network.sequential method)": [[10, "Network.Sequential.attributes"]], "attributes() (network.softmax method)": [[10, "Network.Softmax.attributes"]], "bias (network.conv2d attribute)": [[10, "Network.Conv2D.bias"]], "bias (network.linear attribute)": [[10, "Network.Linear.bias"]], "chain() (in module network)": [[10, "Network.chain"]], "childdict (network.modulechildren attribute)": [[10, "Network.moduleChildren.childDict"]], "data (network.parameter attribute)": [[10, "Network.Parameter.data"]], "elttype (network.module attribute)": [[10, "Network.Module.eltType"]], "elttype (network.modulechildren attribute)": [[10, "Network.moduleChildren.eltType"]], "forward() (network.conv2d method)": [[10, "Network.Conv2D.forward"]], "forward() (network.dropout method)": [[10, "Network.Dropout.forward"]], "forward() (network.flatten method)": [[10, "Network.Flatten.forward"]], "forward() (network.linear method)": [[10, "Network.Linear.forward"]], "forward() (network.maxpool method)": [[10, "Network.MaxPool.forward"]], "forward() (network.module method)": [[10, "Network.Module.forward"]], "forward() (network.net method)": [[10, "Network.Net.forward"]], "forward() (network.relu method)": [[10, "Network.ReLU.forward"]], "forward() (network.sequential method)": [[10, "Network.Sequential.forward"]], "forward() (network.softmax method)": [[10, "Network.Softmax.forward"]], "getint() (network.moduleattributes method)": [[10, "Network.moduleAttributes.getInt"]], "getsubmodulename() (network.module method)": [[10, "Network.Module.getSubModuleName"]], "helpfindmodulebyname() (in module network)": [[10, "Network.helpFindModuleByName"]], "helpfindparamdatabyname() (in module network)": [[10, "Network.helpFindParamDataByName"]], "init() (network.conv2d method)": [[10, "Network.Conv2D.init"]], "init() (network.dropout method)": [[10, "Network.Dropout.init"]], "init() (network.flatten method)": [[10, "Network.Flatten.init"]], "init() (network.linear method)": [[10, "Network.Linear.init"]], "init() (network.maxpool method)": [[10, "Network.MaxPool.init"]], "init() (network.module method)": [[10, "Network.Module.init"]], "init() (network.net method)": [[10, "Network.Net.init"]], "init() (network.parameter method)": [[10, "Network.Parameter.init"]], "init() (network.relu method)": [[10, "Network.ReLU.init"]], "init() (network.sequential method)": [[10, "Network.Sequential.init"]], "init() (network.softmax method)": [[10, "Network.Softmax.init"]], "init() (network.moduleattributes method)": [[10, "Network.moduleAttributes.init"]], "init() (network.modulechildren method)": [[10, "Network.moduleChildren.init"]], "items() (network.modulechildren iterator)": [[10, "Network.moduleChildren.items"]], "ith() (network.modulechildren method)": [[10, "Network.moduleChildren.ith"]], "kernel (network.conv2d attribute)": [[10, "Network.Conv2D.kernel"]], "kernelshape (network.conv2d attribute)": [[10, "Network.Conv2D.kernelShape"]], "layertype (network.modulespecification attribute)": [[10, "Network.ModuleSpecification.layerType"]], "layertype (network.moduleattributes attribute)": [[10, "Network.moduleAttributes.layerType"]], "loadmodel() (in module network)": [[10, "Network.loadModel"]], "loadpytorchdump() (network.module method)": [[10, "Network.Module.loadPyTorchDump"]], "m (network.linear attribute)": [[10, "Network.Linear.m"]], "main() (in module network)": [[10, "Network.main"]], "mds (network.sequential attribute)": [[10, "Network.Sequential.mds"]], "mod() (network.module method)": [[10, "Network.Module.mod"]], "modelfromspecfile() (in module network)": [[10, "Network.modelFromSpecFile"]], "moduleattributes (record in network)": [[10, "Network.moduleAttributes"]], "modulechildren (record in network)": [[10, "Network.moduleChildren"]], "modulefieldnames() (network.class iterator)": [[10, "Network.class.moduleFieldNames"]], "modulefields() (network.class iterator)": [[10, "Network.class.moduleFields"]], "modulefromspec() (in module network)": [[10, "Network.moduleFromSpec"]], "moduleid (network.module attribute)": [[10, "Network.Module.moduleId"]], "moduleinstances (in module network)": [[10, "Network.moduleInstances"]], "modulename (network.module attribute)": [[10, "Network.Module.moduleName"]], "modulename (network.moduleattributes attribute)": [[10, "Network.moduleAttributes.moduleName"]], "modulenames() (network.module iterator)": [[10, "Network.Module.moduleNames"]], "modules() (network.module iterator)": [[10, "Network.Module.modules"]], "n (network.linear attribute)": [[10, "Network.Linear.n"]], "namedmodules() (network.module iterator)": [[10, "Network.Module.namedModules"]], "order (network.modulechildren attribute)": [[10, "Network.moduleChildren.order"]], "ownedmodules (network.module attribute)": [[10, "Network.Module.ownedModules"]], "par() (network.module method)": [[10, "Network.Module.par"]], "parameternames() (network.module iterator)": [[10, "Network.Module.parameterNames"]], "parameters() (network.module iterator)": [[10, "Network.Module.parameters"]], "poolsize (network.maxpool attribute)": [[10, "Network.MaxPool.poolSize"]], "postinit() (network.class method)": [[10, "Network.class.postinit"]], "prettyprint() (network.moduleattributes method)": [[10, "Network.moduleAttributes.prettyPrint"]], "prettyprintspec() (network.moduleattributes method)": [[10, "Network.moduleAttributes.prettyPrintSpec"]], "registermodules() (network.class method)": [[10, "Network.class.registerModules"]], "setup() (network.conv2d method)": [[10, "Network.Conv2D.setup"]], "setup() (network.linear method)": [[10, "Network.Linear.setup"]], "setup() (network.module method)": [[10, "Network.Module.setup"]], "signature() (network.module method)": [[10, "Network.Module.signature"]], "stride (network.conv2d attribute)": [[10, "Network.Conv2D.stride"]], "submoduleorder (network.modulespecification attribute)": [[10, "Network.ModuleSpecification.subModuleOrder"]], "submodules (network.module attribute)": [[10, "Network.Module.subModules"]], "submodules (network.modulespecification attribute)": [[10, "Network.ModuleSpecification.subModules"]], "these() (network.modulechildren iterator)": [[10, "Network.moduleChildren.these"]], "this() (network.module method)": [[10, "Network.Module.this"]], "this() (network.class method)": [[10, "Network.class.this"]], "weight (network.linear attribute)": [[10, "Network.Linear.weight"]], "ordereddict (module)": [[11, "module-OrderedDict"]], "dict (record in ordereddict)": [[11, "OrderedDict.dict"]], "init() (ordereddict.dict method)": [[11, "OrderedDict.dict.init"]], "insert() (ordereddict.dict method)": [[11, "OrderedDict.dict.insert"]], "keytype (ordereddict.dict attribute)": [[11, "OrderedDict.dict.keyType"]], "keys() (ordereddict.dict iterator)": [[11, "OrderedDict.dict.keys"]], "order (ordereddict.dict attribute)": [[11, "OrderedDict.dict.order"]], "size() (ordereddict.dict method)": [[11, "OrderedDict.dict.size"]], "table (ordereddict.dict attribute)": [[11, "OrderedDict.dict.table"]], "these() (ordereddict.dict iterator)": [[11, "OrderedDict.dict.these"]], "valtype (ordereddict.dict attribute)": [[11, "OrderedDict.dict.valType"]], "values() (ordereddict.dict iterator)": [[11, "OrderedDict.dict.values"]], "remote (class in remote)": [[12, "Remote.Remote"]], "remote (module)": [[12, "module-Remote"]], "_remotevarcontainer (class in remote)": [[12, "Remote._RemoteVarContainer"]], "chpl__buildremotewrapper() (in module remote)": [[12, "Remote.chpl__buildRemoteWrapper"]], "containedvalue (remote._remotevarcontainer attribute)": [[12, "Remote._RemoteVarContainer.containedValue"]], "copy() (remote.remote method)": [[12, "Remote.Remote.copy"]], "copycontainer() (remote.remote method)": [[12, "Remote.Remote.copyContainer"]], "copyto() (remote.remote method)": [[12, "Remote.Remote.copyTo"]], "defaultdevice() (remote.remote method)": [[12, "Remote.Remote.defaultDevice"]], "device() (remote.remote method)": [[12, "Remote.Remote.device"]], "elttype (remote.remote attribute)": [[12, "Remote.Remote.eltType"]], "get() (remote.remote method)": [[12, "Remote.Remote.get"]], "init() (remote.remote method)": [[12, "Remote.Remote.init"]], "ptr() (remote.remote method)": [[12, "Remote.Remote.ptr"]], "ref() (in module remote)": [[12, "Remote.ref"]], "to() (remote.remote method)": [[12, "Remote.Remote.to"]], "value (remote.remote attribute)": [[12, "Remote.Remote.value"]], "&() (in module simpledomain)": [[13, "SimpleDomain.&"]], "+() (in module simpledomain)": [[13, "SimpleDomain.+"]], "-() (in module simpledomain)": [[13, "SimpleDomain.-"]], ":() (simpledomain.rect method)": [[13, "SimpleDomain.rect.:"]], "=() (in module simpledomain)": [[13, "SimpleDomain.="]], "simpledomain (module)": [[13, "module-SimpleDomain"]], "atindex() (simpledomain.rect method)": [[13, "SimpleDomain.rect.atIndex"]], "computeblocks() (in module simpledomain)": [[13, "SimpleDomain.computeBlocks"]], "computesize() (in module simpledomain)": [[13, "SimpleDomain.computeSize"]], "computestrides() (in module simpledomain)": [[13, "SimpleDomain.computeStrides"]], "contains() (simpledomain.rect method)": [[13, "SimpleDomain.rect.contains"]], "coords() (simpledomain.rect method)": [[13, "SimpleDomain.rect.coords"]], "dims() (simpledomain.rect method)": [[13, "SimpleDomain.rect.dims"]], "eachorder() (simpledomain.rect iterator)": [[13, "SimpleDomain.rect.eachOrder"]], "elttype() (simpledomain.tuple method)": [[13, "SimpleDomain.tuple.eltType"]], "first() (simpledomain.tuple method)": [[13, "SimpleDomain.tuple.first"]], "head() (simpledomain.tuple method)": [[13, "SimpleDomain.tuple.head"]], "high() (simpledomain.rect method)": [[13, "SimpleDomain.rect.high"]], "indexat() (simpledomain.rect method)": [[13, "SimpleDomain.rect.indexAt"]], "init() (simpledomain.rect method)": [[13, "SimpleDomain.rect.init"]], "init=() (simpledomain.rect method)": [[13, "SimpleDomain.rect.init="]], "isdomain() (in module simpledomain)": [[13, "SimpleDomain.isDomain"]], "isregulardomain() (in module simpledomain)": [[13, "SimpleDomain.isRegularDomain"]], "istupleoforder() (in module simpledomain)": [[13, "SimpleDomain.isTupleOfOrder"]], "last() (simpledomain.tuple method)": [[13, "SimpleDomain.tuple.last"]], "low() (simpledomain.rect method)": [[13, "SimpleDomain.rect.low"]], "offset (simpledomain.rect attribute)": [[13, "SimpleDomain.rect.offset"]], "originate() (simpledomain.rect method)": [[13, "SimpleDomain.rect.originate"]], "rank (simpledomain.rect attribute)": [[13, "SimpleDomain.rect.rank"]], "rect (record in simpledomain)": [[13, "SimpleDomain.rect"]], "serialiter() (simpledomain.rect iterator)": [[13, "SimpleDomain.rect.serialIter"]], "serialize() (simpledomain.rect method)": [[13, "SimpleDomain.rect.serialize"]], "shape (simpledomain.rect attribute)": [[13, "SimpleDomain.rect.shape"]], "shiftedshape() (simpledomain.rect method)": [[13, "SimpleDomain.rect.shiftedShape"]], "simpletupletype() (in module simpledomain)": [[13, "SimpleDomain.simpleTupleType"]], "size (simpledomain.rect attribute)": [[13, "SimpleDomain.rect.size"]], "strides (simpledomain.rect attribute)": [[13, "SimpleDomain.rect.strides"]], "tail() (simpledomain.tuple method)": [[13, "SimpleDomain.tuple.tail"]], "these() (simpledomain.rect iterator)": [[13, "SimpleDomain.rect.these"]], "tostring() (simpledomain.rect method)": [[13, "SimpleDomain.rect.toString"]], "translate() (simpledomain.rect method)": [[13, "SimpleDomain.rect.translate"]], "tuple (in module simpledomain)": [[13, "SimpleDomain.tuple"]], "uncons() (simpledomain.tuple method)": [[13, "SimpleDomain.tuple.uncons"]], "unwrap() (in module simpledomain)": [[13, "SimpleDomain.unwrap"]], "wrap() (in module simpledomain)": [[13, "SimpleDomain.wrap"]], "zerotup() (in module simpledomain)": [[13, "SimpleDomain.zeroTup"]], "*() (in module statictensor)": [[14, "StaticTensor.*"]], "+() (in module statictensor)": [[14, "StaticTensor.+"]], "-() (in module statictensor)": [[14, "StaticTensor.-"]], "/() (in module statictensor)": [[14, "StaticTensor./"]], ":() (in module statictensor)": [[14, "StaticTensor.:"]], "statictensor (module)": [[14, "module-StaticTensor"]], "_dom() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor._dom"]], "_setarraydata() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor._setArrayData"]], "arange() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor.arange"]], "convolve() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor.convolve"]], "detach() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor.detach"]], "diag (in module statictensor)": [[14, "StaticTensor.diag"]], "dilate() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor.dilate"]], "elttype (statictensor.statictensor attribute)": [[14, "StaticTensor.staticTensor.eltType"]], "exp() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor.exp"]], "expand() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor.expand"]], "fromshape() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor.fromShape"]], "init() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor.init"]], "main() (in module statictensor)": [[14, "StaticTensor.main"]], "matvec() (in module statictensor)": [[14, "StaticTensor.matvec"]], "matvecmul() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor.matvecmul"]], "matvecmulfast() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor.matvecmulFast"]], "max() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor.max"]], "maxpool() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor.maxPool"]], "meta() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor.meta"]], "n (in module statictensor)": [[14, "StaticTensor.n"]], "ones() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor.ones"]], "pad() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor.pad"]], "permute() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor.permute"]], "rank (statictensor.statictensor attribute)": [[14, "StaticTensor.staticTensor.rank"]], "read() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor.read"]], "relu() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor.relu"]], "reshape() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor.reshape"]], "reshapedomain() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor.reshapeDomain"]], "resource (statictensor.statictensor attribute)": [[14, "StaticTensor.staticTensor.resource"]], "serialize() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor.serialize"]], "shrink() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor.shrink"]], "size (in module statictensor)": [[14, "StaticTensor.size"]], "slice() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor.slice"]], "softmax() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor.softmax"]], "statictensor (record in statictensor)": [[14, "StaticTensor.staticTensor"]], "sum() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor.sum"]], "tensorfromctx() (in module statictensor)": [[14, "StaticTensor.tensorFromCtx"]], "this() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor.this"]], "unsqueeze() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor.unsqueeze"]], "zeros() (statictensor.statictensor method)": [[14, "StaticTensor.staticTensor.zeros"]], "tensor (module)": [[15, "module-Tensor"]], "utilities (module)": [[16, "module-Utilities"]], "argsort() (in module utilities)": [[16, "Utilities.argsort"]], "cartesian() (in module utilities)": [[16, "Utilities.cartesian"]], "debugprint (in module utilities)": [[16, "Utilities.debugPrint"]], "debugwrite() (in module utilities)": [[16, "Utilities.debugWrite"]], "domainfromshape() (in module utilities)": [[16, "Utilities.domainFromShape"]], "emptydomain() (in module utilities)": [[16, "Utilities.emptyDomain"]], "err() (in module utilities)": [[16, "Utilities.err"]], "fasteach() (in module utilities)": [[16, "Utilities.fastEach"]], "flatiter() (in module utilities)": [[16, "Utilities.flatIter"]], "indexat() (in module utilities)": [[16, "Utilities.indexAt"]], "indexathelpermultiples() (in module utilities)": [[16, "Utilities.indexAtHelperMultiples"]], "indexathelperprod() (in module utilities)": [[16, "Utilities.indexAtHelperProd"]], "indexinshape() (in module utilities)": [[16, "Utilities.indexInShape"]], "loopgpusupport (in module utilities)": [[16, "Utilities.loopGpuSupport"]], "nbase() (in module utilities)": [[16, "Utilities.nbase"]], "normalizearray() (in module utilities)": [[16, "Utilities.normalizeArray"]], "normalizedomain() (in module utilities)": [[16, "Utilities.normalizeDomain"]], "rangefrombound() (in module utilities)": [[16, "Utilities.rangeFromBound"]], "rangefromstart() (in module utilities)": [[16, "Utilities.rangeFromStart"]], "rangesfrombounds() (in module utilities)": [[16, "Utilities.rangesFromBounds"]], "rangesfromshape() (in module utilities)": [[16, "Utilities.rangesFromShape"]], "targetgpu() (in module utilities)": [[16, "Utilities.targetGpu"]], "standard (module)": [[17, "module-Standard"]], "countoccurrences() (standard.string method)": [[17, "Standard.string.countOccurrences"]], "drop() (standard.string method)": [[17, "Standard.string.drop"]], "each() (standard._domain iterator)": [[17, "Standard._domain.each"]], "each() (standard._tuple iterator)": [[17, "Standard._tuple.each"]], "elttype() (standard._tuple method)": [[17, "Standard._tuple.eltType"]], "every() (standard._domain iterator)": [[17, "Standard._domain.every"]], "everyzip() (standard._domain iterator)": [[17, "Standard._domain.everyZip"]], "fastnormaldims() (standard._domain method)": [[17, "Standard._domain.fastNormalDims"]], "fastshape() (standard._domain method)": [[17, "Standard._domain.fastShape"]], "imagetype() (standard._tuple method)": [[17, "Standard._tuple.imageType"]], "indexat() (standard._domain method)": [[17, "Standard._domain.indexAt"]], "indexat() (standard._tuple method)": [[17, "Standard._tuple.indexAt"]], "insertidx() (standard._tuple method)": [[17, "Standard._tuple.insertIdx"]], "isnormal() (standard._domain method)": [[17, "Standard._domain.isNormal"]], "map() (standard._tuple method)": [[17, "Standard._tuple.map"]], "myshape() (standard._domain method)": [[17, "Standard._domain.myShape"]], "normalize() (standard._domain method)": [[17, "Standard._domain.normalize"]], "removeidx() (standard._tuple method)": [[17, "Standard._tuple.removeIdx"]], "slice() (standard._tuple method)": [[17, "Standard._tuple.slice"]], "slice() (standard.string method)": [[17, "Standard.string.slice"]], "take() (standard.string method)": [[17, "Standard.string.take"]], "takeuntil() (standard.string method)": [[17, "Standard.string.takeUntil"]], "this() (standard.string method)": [[17, "Standard.string.this"]], "untuplify() (standard._tuple method)": [[17, "Standard._tuple.untuplify"]], "types (module)": [[18, "module-Types"]], "f32 (in module types)": [[18, "Types.f32"]], "f64 (in module types)": [[18, "Types.f64"]], "stdrange (in module types)": [[18, "Types.stdRange"]], "chai (module)": [[19, "module-ChAI"]], "main() (in module chai)": [[19, "ChAI.main"]]}})