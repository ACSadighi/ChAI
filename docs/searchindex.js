Search.setIndex({"docnames": ["index", "modules/lib/Autograd", "modules/lib/DynamicTensor", "modules/lib/LoadNumpy", "modules/lib/NDArray", "modules/lib/Network", "modules/lib/OrderedDict", "modules/lib/Remote", "modules/lib/SimpleDomain", "modules/lib/StaticTensor", "modules/lib/Tensor", "modules/lib/Utilities", "modules/lib/Utilities/Standard", "modules/lib/Utilities/Types"], "filenames": ["index.rst", "modules/lib/Autograd.rst", "modules/lib/DynamicTensor.rst", "modules/lib/LoadNumpy.rst", "modules/lib/NDArray.rst", "modules/lib/Network.rst", "modules/lib/OrderedDict.rst", "modules/lib/Remote.rst", "modules/lib/SimpleDomain.rst", "modules/lib/StaticTensor.rst", "modules/lib/Tensor.rst", "modules/lib/Utilities.rst", "modules/lib/Utilities/Standard.rst", "modules/lib/Utilities/Types.rst"], "titles": ["chpldoc documentation", "Autograd", "DynamicTensor", "LoadNumpy", "NDArray", "Network", "OrderedDict", "Remote", "SimpleDomain", "StaticTensor", "Tensor", "Utilities", "Standard", "Types"], "terms": {"content": 0, "autograd": 0, "dynamictensor": 0, "loadnumpi": 0, "ndarrai": [0, 1, 2, 9], "network": 0, "ordereddict": 0, "remot": [0, 1, 4], "simpledomain": 0, "statictensor": 0, "tensor": [0, 2, 5, 9], "util": [0, 12, 13], "standard": [0, 11], "type": [0, 1, 2, 4, 5, 6, 7, 9, 11, 12], "index": 0, "chapel": 0, "modul": [0, 5], "search": 0, "page": 0, "usag": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], "us": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], "import": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], "proc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12], "checkrank": [1, 2], "te": 1, "share": [1, 2, 5, 7, 9], "tensoress": [1, 2], "elttyp": [1, 2, 4, 5, 7, 9, 12], "param": [1, 2, 3, 4, 5, 8, 9, 11, 12], "rank": [1, 2, 3, 4, 5, 8, 9, 11, 12], "int": [1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13], "bool": [1, 2, 9, 11, 12], "getrank": 1, "forcerank": [1, 2], "basetensorresourc": [1, 2, 9], "class": [1, 3, 4, 5, 7], "serializ": [1, 2, 4, 5, 6, 7, 9], "real": [1, 2, 3, 4, 5, 9, 13], "runtimerank": [1, 2], "forgetfultensor": 1, "var": [1, 2, 3, 4, 5, 6, 7, 8, 9], "dataresourc": 1, "gradresourc": 1, "device_": [], "local": [1, 2, 7], "devic": [1, 2, 7], "forward": [1, 5], "backward": 1, "grad": [1, 2], "alreadypopul": 1, "fals": [1, 2, 4, 5, 9, 11, 12], "where": [1, 2, 4, 5, 7, 9, 11, 12], "1": [1, 2, 4, 5, 9, 11, 12], "arrai": [1, 2, 9], "ref": [1, 2, 4, 5, 6, 7, 9], "data": [1, 2, 3, 4, 5], "graddata": [], "_loc": [], "overrid": [1, 5], "tensorresourc": 1, "oper": [2, 4, 5, 9], "operationdata": [], "init": [1, 2, 4, 5, 6, 7, 8, 9], "resourc": [2, 9], "defaultdevic": [1, 7], "record": [1, 2, 4, 5, 6, 8, 9], "basevalu": 1, "children": 1, "reluop": 1, "input": [1, 5], "_relu": 1, "x": [1, 5, 11, 12], "expop": 1, "addop": 1, "lh": [1, 4], "rh": [1, 4], "subop": 1, "divop": 1, "multop": 1, "reshapeop": 1, "oldrank": 1, "newrank": [1, 4, 9], "shape": [1, 3, 4, 8, 9, 11], "permuteop": 1, "permut": [1, 4, 9], "expandop": 1, "expandedshap": 1, "padop": 1, "arg": [1, 2, 4, 5, 9, 11], "2": [1, 4, 9, 11], "valu": [1, 4, 6, 7, 9], "shrinkop": 1, "sliceop": 1, "dom": [1, 2, 4, 9, 11], "domain": [1, 2, 3, 4, 9, 11], "layersliceop": 1, "base": 1, "mask": 1, "maskdomain": 1, "sumop": 1, "sumrank": 1, "ax": [1, 2, 4, 9], "outrank": 1, "maxop": 1, "maxrank": [1, 2], "conv2dop": 1, "featur": [1, 2, 4, 5, 9], "3": [1, 4, 9], "kernel": [1, 2, 4, 5, 9], "4": [1, 4, 5, 9], "stride": [1, 2, 4, 5, 9, 13], "config": [1, 2, 3, 4, 5, 6, 7, 8, 9], "6": 2, "meta": [2, 9], "t": [2, 4, 5, 9, 11], "arr": [2, 4, 9, 11], "thi": [2, 4, 5, 9, 12], "forcerankmeta": 2, "hardcheckrank": 2, "tondarrai": 2, "toarrai": 2, "totensor": 2, "eraserank": 2, "zipbinop": 2, "opnam": 2, "string": [2, 3, 4, 5, 12], "b": [2, 4, 9], "loadfromnumpi": 2, "path": [2, 3, 5], "sum": [2, 4, 9], "r": [2, 9], "relu": [2, 4, 5, 9], "max": [2, 4, 9], "exp": [2, 9], "softmax": [2, 5, 9], "maxpool": [2, 4, 5, 9], "poolsiz": [2, 4, 5, 9], "reshap": [2, 4, 9], "slice": [2, 4, 9, 12], "rng": [2, 4, 9], "rang": [2, 4, 9, 11, 13], "flatten": [2, 5], "matvecmul": [2, 4, 9], "m": [2, 5, 9], "v": [2, 9], "matvecmulfast": [2, 9], "argmax": [2, 4], "convolv": [2, 4, 9], "bia": [2, 4, 5, 9], "arang": [2, 4, 9], "ones": [2, 9], "zero": [2, 9], "main": [2, 3, 4, 5, 9], "serial": [2, 4, 9], "writer": [2, 4, 9], "io": [2, 4, 9], "filewrit": [2, 4, 9], "lock": [2, 4, 9], "defaultseri": [2, 4, 9], "srt2": [2, 9], "write": [2, 4], "fw": [2, 4], "throw": [2, 4, 9], "save": 2, "multiread": 2, "load": 2, "precis": 2, "64": [2, 4, 9, 13], "readinplac": 2, "fr": [2, 3, 4, 9], "fileread": [2, 4, 9], "norankarrai": 3, "arrclass": 3, "_domain": [3, 4, 12], "readdata": 3, "dtype": [3, 5], "byte": 3, "own": [1, 3, 4, 5, 7, 9], "readshap": 3, "loadnumpyarrai": 3, "ndarraydata": [], "emptydomain": 11, "noinit": 4, "A": 4, "me": [], "arrayresourc": [], "borrowresourc": [], "borrow": [1, 4, 5], "isdomaintyp": 4, "isnorm": 12, "true": [1, 2, 9], "_iteratorrecord": [4, 9], "other": 4, "setdata": 4, "reshapedomain": [4, 9], "newshap": [4, 9], "expand": [4, 9], "sumoneaxi": 4, "axi": 4, "sumaxesmask": 4, "withaxesmask": 4, "axescount": 4, "shrink": [4, 9], "narg": 4, "exactbound": 4, "pad": [4, 9], "0": [4, 5, 9, 12], "dilat": [4, 9], "dil": [4, 9], "squeez": 4, "populateremot": 4, "re": 4, "toremot": 4, "iter": [1, 4, 5, 6, 11, 12], "batchifi": 4, "dim": [4, 9], "kernelrot": 4, "d": 11, "val": 4, "ziparr": 4, "f": [4, 12], "mat": [4, 9], "vec": [4, 9], "fromrang": 4, "read": [4, 9], "_tensor_resourc": 4, "fullout": 4, "ranka": 4, "rankb": 4, "contract": 4, "axisa": 4, "axisb": 4, "splitat": 4, "": 4, "del": [4, 12], "idx": [4, 12], "getfirstidx": 4, "slicegener": 4, "start": [4, 11, 12], "stop": [4, 12], "take": [4, 12], "count": [4, 11, 12], "drop": [4, 12], "einsum": 4, "subscript": 4, "helpfindmodulebynam": 5, "helpfindparamdatabynam": 5, "modulechildren": 5, "childdict": 5, "map": [5, 6, 12], "order": [5, 6], "list": [5, 6], "item": 5, "add": 5, "name": 5, "ith": 5, "i": 5, "fieldnam": 5, "issubtyp": [5, 7], "paramet": 5, "modulefieldnam": 5, "modulefield": 5, "registermodul": 5, "postinit": 5, "moduleattribut": 5, "layertyp": 5, "modulenam": 5, "attribut": 5, "dict": [5, 6], "attr": 5, "valtyp": [5, 6], "n": [5, 9, 11, 12], "getint": 5, "prettyprint": 5, "prettyprintspec": 5, "ma": 5, "modulespecif": 5, "submodul": [5, 11], "submoduleord": 5, "modulefromspec": 5, "ms_": 5, "modelfromspecfil": 5, "moduleinst": 5, "moduleid": 5, "ownedmodul": 5, "setup": 5, "getsubmodulenam": 5, "addmodul": 5, "addparamet": 5, "par": 5, "paramnam": 5, "mod": 5, "modnam": 5, "parameternam": 5, "namedmodul": 5, "loadpytorchdump": 5, "modelpath": 5, "debug": 5, "signatur": 5, "sequenti": 5, "md": 5, "overridenam": 5, "linear": 5, "weight": 5, "conv2d": 5, "kernelshap": 5, "channel": 5, "dropout": 5, "freq": 5, "5": 5, "chain": 5, "net": 5, "keytyp": 6, "tabl": 6, "size": [6, 8, 9, 12], "kei": 6, "insert": 6, "const": [4, 9], "here": [], "gpu": 11, "els": [], "_remotevarwrapp": [], "get": 7, "remoteresourc": [], "copi": [1, 7, 9], "access": [], "localaccess": [], "download": [], "unload": [], "zerotup": 8, "rect": 8, "offset": 8, "_dom": [4, 9], "strict": [], "nda": [], "_setarraydata": 9, "tensorfromctx": 9, "ctx": 9, "unsqueez": 9, "matvec": 9, "fromshap": 9, "100": 9, "diag": 9, "capitalt": 9, "loopgpusupport": 11, "debugprint": 11, "err": 11, "debugwrit": 11, "cartesian": 11, "y": 11, "tag": [11, 12], "iterkind": [11, 12], "standalon": [11, 12], "flatit": 11, "normalizearrai": 11, "unknown": 11, "isarraytyp": 11, "normalizedomain": 11, "domainfromshap": 11, "rangefrombound": 11, "high": [11, 12], "low": [11, 12], "rangefromstart": 11, "rangesfrombound": 11, "bound": [11, 13], "rangesfromshap": 11, "nbase": 11, "indexinshap": 11, "indexathelperprod": 11, "prod": 11, "indexathelpermultipl": 11, "div": 11, "indexat": [11, 12], "fasteach": 11, "argsort": 11, "tup": 11, "_tupl": 12, "imagetyp": 12, "ishomogeneoustupl": 12, "removeidx": 12, "untuplifi": 12, "insertidx": 12, "each": 12, "everi": 12, "everyzip": 12, "fastshap": 12, "myshap": 12, "normal": 12, "isrectangular": 12, "countoccurr": 12, "c": 12, "takeuntil": 12, "keepdel": 12, "stdrang": 13, "idxtyp": 13, "boundkind": 13, "both": 13, "stridekind": 13, "one": 13, "treeheight": 1, "datar": [], "tr": 7, "forget": [], "defaultdetachedmod": 2, "detach": [1, 2, 9], "detachmod": 2, "totyp": [2, 4, 9], "32": [4, 5, 13], "loadmodel": 5, "specfil": 5, "weightsfold": 5, "f32": 13, "f64": 13, "nil": 1, "dest": [1, 7], "keepgrad": [1, 9], "operationtyp": 1, "operationctx": 1, "bt": 1, "dont": [], "_remotevarcontain": 7, "containedvalu": 7, "ptr": 7, "_thunkrecord": 7, "copycontain": 7, "copyto": 7, "unmanag": 7, "chpl_locale_model": 11, "targetgpu": 11, "fastnormaldim": 12}, "objects": {"": [[1, 0, 0, "-", "Autograd"], [2, 0, 0, "-", "DynamicTensor"], [3, 0, 0, "-", "LoadNumpy"], [4, 0, 0, "-", "NDArray"], [5, 0, 0, "-", "Network"], [6, 0, 0, "-", "OrderedDict"], [7, 0, 0, "-", "Remote"], [8, 0, 0, "-", "SimpleDomain"], [12, 0, 0, "-", "Standard"], [9, 0, 0, "-", "StaticTensor"], [10, 0, 0, "-", "Tensor"], [13, 0, 0, "-", "Types"], [11, 0, 0, "-", "Utilities"]], "Autograd": [[1, 1, 1, "", "BaseTensorResource"], [1, 1, 1, "", "ForgetfulTensor"], [1, 1, 1, "", "TensorEssence"], [1, 1, 1, "", "TensorResource"], [1, 6, 1, "", "addOp"], [1, 6, 1, "", "baseValue"], [1, 7, 1, "", "checkRank"], [1, 6, 1, "", "conv2DOp"], [1, 6, 1, "", "divOp"], [1, 6, 1, "", "expOp"], [1, 6, 1, "", "expandOp"], [1, 7, 1, "", "forceRank"], [1, 7, 1, "", "getRank"], [1, 6, 1, "", "layerSliceOp"], [1, 6, 1, "", "maxOp"], [1, 6, 1, "", "multOp"], [1, 6, 1, "", "padOp"], [1, 6, 1, "", "permuteOp"], [1, 6, 1, "", "reluOp"], [1, 6, 1, "", "reshapeOp"], [1, 6, 1, "", "shrinkOp"], [1, 6, 1, "", "sliceOp"], [1, 6, 1, "", "subOp"], [1, 6, 1, "", "sumOp"]], "Autograd.BaseTensorResource": [[1, 2, 1, "", "array"], [1, 2, 1, "", "backward"], [1, 3, 1, "", "dataResource"], [1, 2, 1, "", "detach"], [1, 2, 1, "", "device"], [1, 2, 1, "", "forward"], [1, 2, 1, "", "grad"], [1, 3, 1, "", "gradResource"], [1, 2, 1, "", "init"], [1, 3, 1, "", "rank"], [1, 2, 1, "", "runtimeRank"], [1, 2, 1, "", "to"]], "Autograd.ForgetfulTensor": [[1, 3, 1, "", "rank"]], "Autograd.TensorEssence": [[1, 4, 1, "", "children"], [1, 5, 1, "", "eltType"], [1, 2, 1, "", "runtimeRank"], [1, 2, 1, "", "treeHeight"]], "Autograd.TensorResource": [[1, 4, 1, "", "children"], [1, 2, 1, "", "detach"], [1, 2, 1, "", "forward"], [1, 2, 1, "", "init"], [1, 3, 1, "", "operationCtx"], [1, 5, 1, "", "operationType"]], "Autograd.addOp": [[1, 2, 1, "", "backward"], [1, 2, 1, "", "children"], [1, 5, 1, "", "eltType"], [1, 2, 1, "", "forward"], [1, 3, 1, "", "lhs"], [1, 3, 1, "", "rank"], [1, 3, 1, "", "rhs"]], "Autograd.baseValue": [[1, 2, 1, "", "children"], [1, 2, 1, "", "forward"]], "Autograd.conv2DOp": [[1, 2, 1, "", "backward"], [1, 2, 1, "", "children"], [1, 5, 1, "", "eltType"], [1, 3, 1, "", "features"], [1, 2, 1, "", "forward"], [1, 3, 1, "", "kernel"], [1, 3, 1, "", "stride"]], "Autograd.divOp": [[1, 2, 1, "", "children"], [1, 2, 1, "", "forward"], [1, 3, 1, "", "lhs"], [1, 3, 1, "", "rhs"]], "Autograd.expOp": [[1, 2, 1, "", "children"], [1, 2, 1, "", "forward"], [1, 3, 1, "", "input"]], "Autograd.expandOp": [[1, 2, 1, "", "backward"], [1, 2, 1, "", "children"], [1, 5, 1, "", "eltType"], [1, 3, 1, "", "expandedShape"], [1, 2, 1, "", "forward"], [1, 3, 1, "", "input"], [1, 3, 1, "", "rank"]], "Autograd.layerSliceOp": [[1, 2, 1, "", "backward"], [1, 3, 1, "", "base"], [1, 2, 1, "", "children"], [1, 5, 1, "", "eltType"], [1, 2, 1, "", "forward"], [1, 3, 1, "", "mask"], [1, 3, 1, "", "maskDomain"], [1, 3, 1, "", "rank"]], "Autograd.maxOp": [[1, 3, 1, "", "axes"], [1, 2, 1, "", "backward"], [1, 2, 1, "", "children"], [1, 5, 1, "", "eltType"], [1, 2, 1, "", "forward"], [1, 3, 1, "", "input"], [1, 3, 1, "", "maxRank"], [1, 3, 1, "", "rank"]], "Autograd.multOp": [[1, 2, 1, "", "backward"], [1, 2, 1, "", "children"], [1, 5, 1, "", "eltType"], [1, 2, 1, "", "forward"], [1, 3, 1, "", "lhs"], [1, 3, 1, "", "rank"], [1, 3, 1, "", "rhs"]], "Autograd.padOp": [[1, 3, 1, "", "arg"], [1, 2, 1, "", "backward"], [1, 2, 1, "", "children"], [1, 5, 1, "", "eltType"], [1, 2, 1, "", "forward"], [1, 3, 1, "", "input"], [1, 3, 1, "", "rank"], [1, 3, 1, "", "value"]], "Autograd.permuteOp": [[1, 2, 1, "", "backward"], [1, 2, 1, "", "children"], [1, 5, 1, "", "eltType"], [1, 2, 1, "", "forward"], [1, 3, 1, "", "input"], [1, 3, 1, "", "permutation"], [1, 3, 1, "", "rank"]], "Autograd.reluOp": [[1, 2, 1, "", "_relu"], [1, 2, 1, "", "children"], [1, 2, 1, "", "forward"], [1, 3, 1, "", "input"]], "Autograd.reshapeOp": [[1, 2, 1, "", "backward"], [1, 2, 1, "", "children"], [1, 5, 1, "", "eltType"], [1, 2, 1, "", "forward"], [1, 3, 1, "", "input"], [1, 3, 1, "", "newRank"], [1, 3, 1, "", "oldRank"], [1, 3, 1, "", "shape"]], "Autograd.shrinkOp": [[1, 3, 1, "", "arg"], [1, 2, 1, "", "backward"], [1, 2, 1, "", "children"], [1, 5, 1, "", "eltType"], [1, 2, 1, "", "forward"], [1, 3, 1, "", "input"], [1, 3, 1, "", "rank"]], "Autograd.sliceOp": [[1, 2, 1, "", "backward"], [1, 2, 1, "", "children"], [1, 3, 1, "", "dom"], [1, 5, 1, "", "eltType"], [1, 2, 1, "", "forward"], [1, 3, 1, "", "input"], [1, 3, 1, "", "rank"]], "Autograd.subOp": [[1, 2, 1, "", "children"], [1, 2, 1, "", "forward"], [1, 3, 1, "", "lhs"], [1, 3, 1, "", "rhs"]], "Autograd.sumOp": [[1, 3, 1, "", "axes"], [1, 2, 1, "", "backward"], [1, 2, 1, "", "children"], [1, 5, 1, "", "eltType"], [1, 2, 1, "", "forward"], [1, 3, 1, "", "input"], [1, 2, 1, "", "outRank"], [1, 3, 1, "", "rank"], [1, 3, 1, "", "sumRank"]], "DynamicTensor": [[2, 7, 1, "", "*"], [2, 7, 1, "", "+"], [2, 7, 1, "", "-"], [2, 7, 1, "", ":"], [2, 6, 1, "", "Tensor"], [2, 3, 1, "", "defaultDetachedMode"], [2, 7, 1, "", "main"], [2, 3, 1, "", "maxRank"], [2, 7, 1, "", "zipBinOp"]], "DynamicTensor.Tensor": [[2, 2, 1, "", "arange"], [2, 2, 1, "", "argmax"], [2, 2, 1, "", "array"], [2, 2, 1, "", "checkRank"], [2, 2, 1, "", "convolve"], [2, 2, 1, "", "data"], [2, 2, 1, "", "detach"], [2, 2, 1, "", "detachMode"], [2, 2, 1, "", "device"], [2, 5, 1, "", "eltType"], [2, 2, 1, "", "exp"], [2, 2, 1, "", "flatten"], [2, 2, 1, "", "forceRank"], [2, 2, 1, "", "forceRankMeta"], [2, 2, 1, "", "grad"], [2, 2, 1, "", "hardCheckRank"], [2, 2, 1, "", "init"], [2, 2, 1, "", "load"], [2, 2, 1, "", "loadFromNumpy"], [2, 2, 1, "", "matvecmul"], [2, 2, 1, "", "matvecmulFast"], [2, 2, 1, "", "max"], [2, 2, 1, "", "maxPool"], [2, 3, 1, "", "meta"], [2, 2, 1, "", "multiReader"], [2, 2, 1, "", "ones"], [2, 2, 1, "", "readInPlace"], [2, 2, 1, "", "relu"], [2, 2, 1, "", "reshape"], [2, 2, 1, "", "resource"], [2, 3, 1, "", "runtimeRank"], [2, 2, 1, "", "save"], [2, 2, 1, "", "serialize"], [2, 2, 1, "", "slice"], [2, 2, 1, "", "softmax"], [2, 2, 1, "", "sum"], [2, 2, 1, "", "tensorize"], [2, 2, 1, "", "this"], [2, 2, 1, "", "to"], [2, 2, 1, "", "toArray"], [2, 2, 1, "", "toNDArray"], [2, 2, 1, "", "write"], [2, 2, 1, "", "zeros"]], "DynamicTensor.ndarray": [[2, 2, 1, "", "toTensor"]], "DynamicTensor.tensor": [[2, 2, 1, "", "eraseRank"]], "LoadNumpy": [[3, 1, 1, "", "ArrClass"], [3, 1, 1, "", "NoRankArray"], [3, 7, 1, "", "loadNumpyArray"], [3, 7, 1, "", "main"], [3, 7, 1, "", "readData"], [3, 7, 1, "", "readShape"]], "LoadNumpy.ArrClass": [[3, 3, 1, "", "_domain"], [3, 3, 1, "", "data"], [3, 3, 1, "", "rank"]], "NDArray": [[4, 7, 1, "", "*"], [4, 7, 1, "", "+"], [4, 7, 1, "", "-"], [4, 7, 1, "", "/"], [4, 7, 1, "", ":"], [4, 7, 1, "", "="], [4, 1, 1, "", "_tensor_resource"], [4, 7, 1, "", "drop"], [4, 7, 1, "", "getFirstIdx"], [4, 7, 1, "", "main"], [4, 6, 1, "", "ndarray"], [4, 7, 1, "", "slice"], [4, 7, 1, "", "sliceGeneric"], [4, 7, 1, "", "splitAt"], [4, 7, 1, "", "take"], [4, 7, 1, "", "zipArr"]], "NDArray._tensor_resource": [[4, 3, 1, "", "data"], [4, 5, 1, "", "eltType"], [4, 3, 1, "", "rank"]], "NDArray.ndarray": [[4, 2, 1, "", "_dom"], [4, 3, 1, "", "_domain"], [4, 2, 1, "", "arange"], [4, 2, 1, "", "argmax"], [4, 4, 1, "", "batchify"], [4, 2, 1, "", "contract"], [4, 2, 1, "", "convolve"], [4, 3, 1, "", "data"], [4, 2, 1, "", "dilate"], [4, 2, 1, "", "einsum"], [4, 5, 1, "", "eltType"], [4, 2, 1, "", "expand"], [4, 2, 1, "", "fromRanges"], [4, 2, 1, "", "fullOuter"], [4, 2, 1, "", "init"], [4, 2, 1, "", "init="], [4, 2, 1, "", "kernelRot"], [4, 2, 1, "", "matvecmul"], [4, 2, 1, "", "max"], [4, 2, 1, "", "maxPool"], [4, 2, 1, "", "pad"], [4, 2, 1, "", "permute"], [4, 2, 1, "", "populateRemote"], [4, 3, 1, "", "rank"], [4, 2, 1, "", "read"], [4, 2, 1, "", "relu"], [4, 2, 1, "", "reshape"], [4, 2, 1, "", "reshapeDomain"], [4, 2, 1, "", "serialize"], [4, 2, 1, "", "setData"], [4, 2, 1, "", "shape"], [4, 2, 1, "", "shrink"], [4, 2, 1, "", "slice"], [4, 2, 1, "", "squeeze"], [4, 2, 1, "", "sum"], [4, 2, 1, "", "sumAxesMask"], [4, 2, 1, "", "sumOneAxis"], [4, 2, 1, "", "this"], [4, 2, 1, "", "toRemote"], [4, 2, 1, "", "write"]], "Network": [[5, 1, 1, "", "Conv2D"], [5, 1, 1, "", "Dropout"], [5, 1, 1, "", "Flatten"], [5, 1, 1, "", "Linear"], [5, 1, 1, "", "MaxPool"], [5, 1, 1, "", "Module"], [5, 1, 1, "", "ModuleSpecification"], [5, 1, 1, "", "Net"], [5, 1, 1, "", "Parameter"], [5, 1, 1, "", "ReLU"], [5, 1, 1, "", "Sequential"], [5, 1, 1, "", "Softmax"], [5, 2, 1, "", "attributes"], [5, 3, 1, "", "bias"], [5, 7, 1, "", "chain"], [5, 2, 1, "", "forward"], [5, 7, 1, "", "helpFindModuleByName"], [5, 7, 1, "", "helpFindParamDataByName"], [5, 2, 1, "", "init"], [5, 7, 1, "", "loadModel"], [5, 7, 1, "", "main"], [5, 7, 1, "", "modelFromSpecFile"], [5, 6, 1, "", "moduleAttributes"], [5, 6, 1, "", "moduleChildren"], [5, 7, 1, "", "moduleFromSpec"], [5, 3, 1, "", "moduleInstances"], [5, 3, 1, "", "n"], [5, 2, 1, "", "setup"], [5, 3, 1, "", "weight"]], "Network.Conv2D": [[5, 2, 1, "", "attributes"], [5, 3, 1, "", "bias"], [5, 2, 1, "", "forward"], [5, 2, 1, "", "init"], [5, 3, 1, "", "kernel"], [5, 3, 1, "", "kernelShape"], [5, 2, 1, "", "setup"], [5, 3, 1, "", "stride"]], "Network.Dropout": [[5, 2, 1, "", "attributes"], [5, 2, 1, "", "forward"], [5, 2, 1, "", "init"]], "Network.Flatten": [[5, 2, 1, "", "attributes"], [5, 2, 1, "", "forward"], [5, 2, 1, "", "init"]], "Network.Linear": [[5, 3, 1, "", "m"]], "Network.MaxPool": [[5, 2, 1, "", "attributes"], [5, 2, 1, "", "forward"], [5, 2, 1, "", "init"], [5, 3, 1, "", "poolSize"]], "Network.Module": [[5, 2, 1, "", "addModule"], [5, 2, 1, "", "addParameter"], [5, 2, 1, "", "attributes"], [5, 5, 1, "", "eltType"], [5, 2, 1, "", "forward"], [5, 2, 1, "", "getSubModuleName"], [5, 2, 1, "", "init"], [5, 2, 1, "", "loadPyTorchDump"], [5, 2, 1, "", "mod"], [5, 3, 1, "", "moduleId"], [5, 3, 1, "", "moduleName"], [5, 4, 1, "", "moduleNames"], [5, 4, 1, "", "modules"], [5, 4, 1, "", "namedModules"], [5, 3, 1, "", "ownedModules"], [5, 2, 1, "", "par"], [5, 4, 1, "", "parameterNames"], [5, 4, 1, "", "parameters"], [5, 2, 1, "", "setup"], [5, 2, 1, "", "signature"], [5, 3, 1, "", "subModules"], [5, 2, 1, "", "this"]], "Network.ModuleSpecification": [[5, 3, 1, "", "attributes"], [5, 3, 1, "", "layerType"], [5, 3, 1, "", "subModuleOrder"], [5, 3, 1, "", "subModules"]], "Network.Net": [[5, 2, 1, "", "forward"], [5, 2, 1, "", "init"]], "Network.Parameter": [[5, 2, 1, "", "attributes"], [5, 3, 1, "", "data"], [5, 2, 1, "", "init"]], "Network.ReLU": [[5, 2, 1, "", "attributes"], [5, 2, 1, "", "forward"], [5, 2, 1, "", "init"]], "Network.Sequential": [[5, 2, 1, "", "attributes"], [5, 2, 1, "", "forward"], [5, 2, 1, "", "init"], [5, 3, 1, "", "mds"]], "Network.Softmax": [[5, 2, 1, "", "attributes"], [5, 2, 1, "", "forward"], [5, 2, 1, "", "init"]], "Network.class": [[5, 4, 1, "", "moduleFieldNames"], [5, 4, 1, "", "moduleFields"], [5, 2, 1, "", "postinit"], [5, 2, 1, "", "registerModules"], [5, 2, 1, "", "this"]], "Network.moduleAttributes": [[5, 2, 1, "", ":"], [5, 3, 1, "", "attributes"], [5, 2, 1, "", "getInt"], [5, 2, 1, "", "init"], [5, 3, 1, "", "layerType"], [5, 3, 1, "", "moduleName"], [5, 2, 1, "", "prettyPrint"], [5, 2, 1, "", "prettyPrintSpec"]], "Network.moduleChildren": [[5, 2, 1, "", "add"], [5, 3, 1, "", "childDict"], [5, 5, 1, "", "eltType"], [5, 2, 1, "", "init"], [5, 4, 1, "", "items"], [5, 2, 1, "", "ith"], [5, 3, 1, "", "order"], [5, 4, 1, "", "these"]], "OrderedDict": [[6, 6, 1, "", "dict"]], "OrderedDict.dict": [[6, 2, 1, "", "init"], [6, 2, 1, "", "insert"], [6, 5, 1, "", "keyType"], [6, 4, 1, "", "keys"], [6, 3, 1, "", "order"], [6, 2, 1, "", "size"], [6, 3, 1, "", "table"], [6, 4, 1, "", "these"], [6, 5, 1, "", "valType"], [6, 4, 1, "", "values"]], "Remote": [[7, 1, 1, "", "Remote"], [7, 1, 1, "", "_RemoteVarContainer"], [7, 2, 1, "", "ref"]], "Remote.Remote": [[7, 2, 1, "", "copy"], [7, 2, 1, "", "copyContainer"], [7, 2, 1, "", "copyTo"], [7, 2, 1, "", "defaultDevice"], [7, 2, 1, "", "device"], [7, 5, 1, "", "eltType"], [7, 2, 1, "", "get"], [7, 2, 1, "", "init"], [7, 2, 1, "", "ptr"], [7, 2, 1, "", "to"], [7, 3, 1, "", "value"]], "Remote._RemoteVarContainer": [[7, 3, 1, "", "containedValue"]], "SimpleDomain": [[8, 6, 1, "", "rect"], [8, 7, 1, "", "zeroTup"]], "SimpleDomain.rect": [[8, 2, 1, "", "init"], [8, 3, 1, "", "offset"], [8, 3, 1, "", "rank"], [8, 3, 1, "", "shape"], [8, 2, 1, "", "size"]], "Standard._domain": [[12, 4, 1, "", "each"], [12, 4, 1, "", "every"], [12, 4, 1, "", "everyZip"], [12, 2, 1, "", "fastNormalDims"], [12, 2, 1, "", "fastShape"], [12, 2, 1, "", "indexAt"], [12, 2, 1, "", "isNormal"], [12, 2, 1, "", "myShape"], [12, 2, 1, "", "normalize"]], "Standard._tuple": [[12, 4, 1, "", "each"], [12, 2, 1, "", "eltType"], [12, 2, 1, "", "imageType"], [12, 2, 1, "", "indexAt"], [12, 2, 1, "", "insertIdx"], [12, 2, 1, "", "map"], [12, 2, 1, "", "removeIdx"], [12, 2, 1, "", "slice"], [12, 2, 1, "", "untuplify"]], "Standard.string": [[12, 2, 1, "", "countOccurrences"], [12, 2, 1, "", "drop"], [12, 2, 1, "", "slice"], [12, 2, 1, "", "take"], [12, 2, 1, "", "takeUntil"], [12, 2, 1, "", "this"]], "StaticTensor": [[9, 7, 1, "", "*"], [9, 7, 1, "", "+"], [9, 7, 1, "", "-"], [9, 7, 1, "", "/"], [9, 7, 1, "", ":"], [9, 3, 1, "", "diag"], [9, 7, 1, "", "main"], [9, 7, 1, "", "matvec"], [9, 3, 1, "", "n"], [9, 3, 1, "", "size"], [9, 6, 1, "", "tensor"], [9, 7, 1, "", "tensorFromCtx"]], "StaticTensor.tensor": [[9, 2, 1, "", "_dom"], [9, 2, 1, "", "_setArrayData"], [9, 2, 1, "", "arange"], [9, 2, 1, "", "convolve"], [9, 2, 1, "", "detach"], [9, 2, 1, "", "dilate"], [9, 5, 1, "", "eltType"], [9, 2, 1, "", "exp"], [9, 2, 1, "", "expand"], [9, 2, 1, "", "fromShape"], [9, 2, 1, "", "init"], [9, 2, 1, "", "matvecmul"], [9, 2, 1, "", "matvecmulFast"], [9, 2, 1, "", "max"], [9, 2, 1, "", "maxPool"], [9, 2, 1, "", "meta"], [9, 2, 1, "", "ones"], [9, 2, 1, "", "pad"], [9, 2, 1, "", "permute"], [9, 3, 1, "", "rank"], [9, 2, 1, "", "read"], [9, 2, 1, "", "relu"], [9, 2, 1, "", "reshape"], [9, 2, 1, "", "reshapeDomain"], [9, 3, 1, "", "resource"], [9, 2, 1, "", "serialize"], [9, 2, 1, "", "shrink"], [9, 2, 1, "", "slice"], [9, 2, 1, "", "softmax"], [9, 2, 1, "", "sum"], [9, 2, 1, "", "this"], [9, 2, 1, "", "unsqueeze"], [9, 2, 1, "", "zeros"]], "Types": [[13, 5, 1, "", "f32"], [13, 5, 1, "", "f64"], [13, 5, 1, "", "stdRange"]], "Utilities": [[11, 7, 1, "", "argsort"], [11, 8, 1, "", "cartesian"], [11, 3, 1, "", "debugPrint"], [11, 7, 1, "", "debugWrite"], [11, 7, 1, "", "domainFromShape"], [11, 7, 1, "", "emptyDomain"], [11, 7, 1, "", "err"], [11, 8, 1, "", "fastEach"], [11, 8, 1, "", "flatIter"], [11, 7, 1, "", "indexAt"], [11, 7, 1, "", "indexAtHelperMultiples"], [11, 7, 1, "", "indexAtHelperProd"], [11, 7, 1, "", "indexInShape"], [11, 3, 1, "", "loopGpuSupport"], [11, 7, 1, "", "nbase"], [11, 7, 1, "", "normalizeArray"], [11, 7, 1, "", "normalizeDomain"], [11, 7, 1, "", "rangeFromBound"], [11, 7, 1, "", "rangeFromStart"], [11, 7, 1, "", "rangesFromBounds"], [11, 7, 1, "", "rangesFromShape"], [11, 7, 1, "", "targetGpu"]]}, "objtypes": {"0": "chpl:module", "1": "chpl:class", "2": "chpl:method", "3": "chpl:data", "4": "chpl:itermethod", "5": "chpl:type", "6": "chpl:record", "7": "chpl:function", "8": "chpl:iterfunction"}, "objnames": {"0": ["chpl", "module", " module"], "1": ["chpl", "class", " class"], "2": ["chpl", "method", " method"], "3": ["chpl", "data", " data"], "4": ["chpl", "itermethod", " itermethod"], "5": ["chpl", "type", " type"], "6": ["chpl", "record", " record"], "7": ["chpl", "function", " function"], "8": ["chpl", "iterfunction", " iterfunction"]}, "titleterms": {"chpldoc": 0, "document": 0, "indic": 0, "tabl": 0, "autograd": 1, "dynamictensor": 2, "loadnumpi": 3, "ndarrai": 4, "network": 5, "ordereddict": 6, "remot": 7, "simpledomain": 8, "statictensor": 9, "tensor": 10, "util": 11, "standard": 12, "type": 13}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx": 60}, "alltitles": {"chpldoc documentation": [[0, "chpldoc-documentation"]], "Indices and tables": [[0, "indices-and-tables"]], "Autograd": [[1, "autograd"]], "DynamicTensor": [[2, "dynamictensor"]], "LoadNumpy": [[3, "loadnumpy"]], "NDArray": [[4, "ndarray"]], "Network": [[5, "network"]], "OrderedDict": [[6, "ordereddict"]], "Remote": [[7, "remote"]], "SimpleDomain": [[8, "simpledomain"]], "StaticTensor": [[9, "statictensor"]], "Tensor": [[10, "tensor"]], "Utilities": [[11, "utilities"]], "Standard": [[12, "standard"]], "Types": [[13, "types"]]}, "indexentries": {"autograd (module)": [[1, "module-Autograd"]], "basetensorresource (class in autograd)": [[1, "Autograd.BaseTensorResource"]], "basetensorresource.dataresource (in module autograd)": [[1, "Autograd.BaseTensorResource.dataResource"]], "basetensorresource.gradresource (in module autograd)": [[1, "Autograd.BaseTensorResource.gradResource"]], "basetensorresource.rank (in module autograd)": [[1, "Autograd.BaseTensorResource.rank"]], "forgetfultensor (class in autograd)": [[1, "Autograd.ForgetfulTensor"]], "forgetfultensor.rank (in module autograd)": [[1, "Autograd.ForgetfulTensor.rank"]], "tensoressence (class in autograd)": [[1, "Autograd.TensorEssence"]], "tensoressence.elttype (in module autograd)": [[1, "Autograd.TensorEssence.eltType"]], "tensorresource (class in autograd)": [[1, "Autograd.TensorResource"]], "tensorresource.operationctx (in module autograd)": [[1, "Autograd.TensorResource.operationCtx"]], "tensorresource.operationtype (in module autograd)": [[1, "Autograd.TensorResource.operationType"]], "_relu() (autograd.reluop method)": [[1, "Autograd.reluOp._relu"]], "addop (record in autograd)": [[1, "Autograd.addOp"]], "addop.elttype (in module autograd)": [[1, "Autograd.addOp.eltType"]], "addop.lhs (in module autograd)": [[1, "Autograd.addOp.lhs"]], "addop.rank (in module autograd)": [[1, "Autograd.addOp.rank"]], "addop.rhs (in module autograd)": [[1, "Autograd.addOp.rhs"]], "array() (autograd.basetensorresource method)": [[1, "Autograd.BaseTensorResource.array"]], "backward() (autograd.basetensorresource method)": [[1, "Autograd.BaseTensorResource.backward"]], "backward() (autograd.addop method)": [[1, "Autograd.addOp.backward"]], "backward() (autograd.conv2dop method)": [[1, "Autograd.conv2DOp.backward"]], "backward() (autograd.expandop method)": [[1, "Autograd.expandOp.backward"]], "backward() (autograd.layersliceop method)": [[1, "Autograd.layerSliceOp.backward"]], "backward() (autograd.maxop method)": [[1, "Autograd.maxOp.backward"]], "backward() (autograd.multop method)": [[1, "Autograd.multOp.backward"]], "backward() (autograd.padop method)": [[1, "Autograd.padOp.backward"]], "backward() (autograd.permuteop method)": [[1, "Autograd.permuteOp.backward"]], "backward() (autograd.reshapeop method)": [[1, "Autograd.reshapeOp.backward"]], "backward() (autograd.shrinkop method)": [[1, "Autograd.shrinkOp.backward"]], "backward() (autograd.sliceop method)": [[1, "Autograd.sliceOp.backward"]], "backward() (autograd.sumop method)": [[1, "Autograd.sumOp.backward"]], "basevalue (record in autograd)": [[1, "Autograd.baseValue"]], "checkrank() (in module autograd)": [[1, "Autograd.checkRank"]], "children() (autograd.tensoressence iterator)": [[1, "Autograd.TensorEssence.children"]], "children() (autograd.tensorresource iterator)": [[1, "Autograd.TensorResource.children"]], "children() (autograd.addop method)": [[1, "Autograd.addOp.children"]], "children() (autograd.basevalue method)": [[1, "Autograd.baseValue.children"]], "children() (autograd.conv2dop method)": [[1, "Autograd.conv2DOp.children"]], "children() (autograd.divop method)": [[1, "Autograd.divOp.children"]], "children() (autograd.expop method)": [[1, "Autograd.expOp.children"]], "children() (autograd.expandop method)": [[1, "Autograd.expandOp.children"]], "children() (autograd.layersliceop method)": [[1, "Autograd.layerSliceOp.children"]], "children() (autograd.maxop method)": [[1, "Autograd.maxOp.children"]], "children() (autograd.multop method)": [[1, "Autograd.multOp.children"]], "children() (autograd.padop method)": [[1, "Autograd.padOp.children"]], "children() (autograd.permuteop method)": [[1, "Autograd.permuteOp.children"]], "children() (autograd.reluop method)": [[1, "Autograd.reluOp.children"]], "children() (autograd.reshapeop method)": [[1, "Autograd.reshapeOp.children"]], "children() (autograd.shrinkop method)": [[1, "Autograd.shrinkOp.children"]], "children() (autograd.sliceop method)": [[1, "Autograd.sliceOp.children"]], "children() (autograd.subop method)": [[1, "Autograd.subOp.children"]], "children() (autograd.sumop method)": [[1, "Autograd.sumOp.children"]], "conv2dop (record in autograd)": [[1, "Autograd.conv2DOp"]], "conv2dop.elttype (in module autograd)": [[1, "Autograd.conv2DOp.eltType"]], "conv2dop.features (in module autograd)": [[1, "Autograd.conv2DOp.features"]], "conv2dop.kernel (in module autograd)": [[1, "Autograd.conv2DOp.kernel"]], "conv2dop.stride (in module autograd)": [[1, "Autograd.conv2DOp.stride"]], "detach() (autograd.basetensorresource method)": [[1, "Autograd.BaseTensorResource.detach"]], "detach() (autograd.tensorresource method)": [[1, "Autograd.TensorResource.detach"]], "device() (autograd.basetensorresource method)": [[1, "Autograd.BaseTensorResource.device"]], "divop (record in autograd)": [[1, "Autograd.divOp"]], "divop.lhs (in module autograd)": [[1, "Autograd.divOp.lhs"]], "divop.rhs (in module autograd)": [[1, "Autograd.divOp.rhs"]], "expop (record in autograd)": [[1, "Autograd.expOp"]], "expop.input (in module autograd)": [[1, "Autograd.expOp.input"]], "expandop (record in autograd)": [[1, "Autograd.expandOp"]], "expandop.elttype (in module autograd)": [[1, "Autograd.expandOp.eltType"]], "expandop.expandedshape (in module autograd)": [[1, "Autograd.expandOp.expandedShape"]], "expandop.input (in module autograd)": [[1, "Autograd.expandOp.input"]], "expandop.rank (in module autograd)": [[1, "Autograd.expandOp.rank"]], "forcerank() (in module autograd)": [[1, "Autograd.forceRank"]], "forward() (autograd.basetensorresource method)": [[1, "Autograd.BaseTensorResource.forward"]], "forward() (autograd.tensorresource method)": [[1, "Autograd.TensorResource.forward"]], "forward() (autograd.addop method)": [[1, "Autograd.addOp.forward"]], "forward() (autograd.basevalue method)": [[1, "Autograd.baseValue.forward"]], "forward() (autograd.conv2dop method)": [[1, "Autograd.conv2DOp.forward"]], "forward() (autograd.divop method)": [[1, "Autograd.divOp.forward"]], "forward() (autograd.expop method)": [[1, "Autograd.expOp.forward"]], "forward() (autograd.expandop method)": [[1, "Autograd.expandOp.forward"]], "forward() (autograd.layersliceop method)": [[1, "Autograd.layerSliceOp.forward"]], "forward() (autograd.maxop method)": [[1, "Autograd.maxOp.forward"]], "forward() (autograd.multop method)": [[1, "Autograd.multOp.forward"]], "forward() (autograd.padop method)": [[1, "Autograd.padOp.forward"]], "forward() (autograd.permuteop method)": [[1, "Autograd.permuteOp.forward"]], "forward() (autograd.reluop method)": [[1, "Autograd.reluOp.forward"]], "forward() (autograd.reshapeop method)": [[1, "Autograd.reshapeOp.forward"]], "forward() (autograd.shrinkop method)": [[1, "Autograd.shrinkOp.forward"]], "forward() (autograd.sliceop method)": [[1, "Autograd.sliceOp.forward"]], "forward() (autograd.subop method)": [[1, "Autograd.subOp.forward"]], "forward() (autograd.sumop method)": [[1, "Autograd.sumOp.forward"]], "getrank() (in module autograd)": [[1, "Autograd.getRank"]], "grad() (autograd.basetensorresource method)": [[1, "Autograd.BaseTensorResource.grad"]], "init() (autograd.basetensorresource method)": [[1, "Autograd.BaseTensorResource.init"]], "init() (autograd.tensorresource method)": [[1, "Autograd.TensorResource.init"]], "layersliceop (record in autograd)": [[1, "Autograd.layerSliceOp"]], "layersliceop.base (in module autograd)": [[1, "Autograd.layerSliceOp.base"]], "layersliceop.elttype (in module autograd)": [[1, "Autograd.layerSliceOp.eltType"]], "layersliceop.mask (in module autograd)": [[1, "Autograd.layerSliceOp.mask"]], "layersliceop.maskdomain (in module autograd)": [[1, "Autograd.layerSliceOp.maskDomain"]], "layersliceop.rank (in module autograd)": [[1, "Autograd.layerSliceOp.rank"]], "maxop (record in autograd)": [[1, "Autograd.maxOp"]], "maxop.axes (in module autograd)": [[1, "Autograd.maxOp.axes"]], "maxop.elttype (in module autograd)": [[1, "Autograd.maxOp.eltType"]], "maxop.input (in module autograd)": [[1, "Autograd.maxOp.input"]], "maxop.maxrank (in module autograd)": [[1, "Autograd.maxOp.maxRank"]], "maxop.rank (in module autograd)": [[1, "Autograd.maxOp.rank"]], "multop (record in autograd)": [[1, "Autograd.multOp"]], "multop.elttype (in module autograd)": [[1, "Autograd.multOp.eltType"]], "multop.lhs (in module autograd)": [[1, "Autograd.multOp.lhs"]], "multop.rank (in module autograd)": [[1, "Autograd.multOp.rank"]], "multop.rhs (in module autograd)": [[1, "Autograd.multOp.rhs"]], "outrank() (autograd.sumop method)": [[1, "Autograd.sumOp.outRank"]], "padop (record in autograd)": [[1, "Autograd.padOp"]], "padop.arg (in module autograd)": [[1, "Autograd.padOp.arg"]], "padop.elttype (in module autograd)": [[1, "Autograd.padOp.eltType"]], "padop.input (in module autograd)": [[1, "Autograd.padOp.input"]], "padop.rank (in module autograd)": [[1, "Autograd.padOp.rank"]], "padop.value (in module autograd)": [[1, "Autograd.padOp.value"]], "permuteop (record in autograd)": [[1, "Autograd.permuteOp"]], "permuteop.elttype (in module autograd)": [[1, "Autograd.permuteOp.eltType"]], "permuteop.input (in module autograd)": [[1, "Autograd.permuteOp.input"]], "permuteop.permutation (in module autograd)": [[1, "Autograd.permuteOp.permutation"]], "permuteop.rank (in module autograd)": [[1, "Autograd.permuteOp.rank"]], "reluop (record in autograd)": [[1, "Autograd.reluOp"]], "reluop.input (in module autograd)": [[1, "Autograd.reluOp.input"]], "reshapeop (record in autograd)": [[1, "Autograd.reshapeOp"]], "reshapeop.elttype (in module autograd)": [[1, "Autograd.reshapeOp.eltType"]], "reshapeop.input (in module autograd)": [[1, "Autograd.reshapeOp.input"]], "reshapeop.newrank (in module autograd)": [[1, "Autograd.reshapeOp.newRank"]], "reshapeop.oldrank (in module autograd)": [[1, "Autograd.reshapeOp.oldRank"]], "reshapeop.shape (in module autograd)": [[1, "Autograd.reshapeOp.shape"]], "runtimerank() (autograd.basetensorresource method)": [[1, "Autograd.BaseTensorResource.runtimeRank"]], "runtimerank() (autograd.tensoressence method)": [[1, "Autograd.TensorEssence.runtimeRank"]], "shrinkop (record in autograd)": [[1, "Autograd.shrinkOp"]], "shrinkop.arg (in module autograd)": [[1, "Autograd.shrinkOp.arg"]], "shrinkop.elttype (in module autograd)": [[1, "Autograd.shrinkOp.eltType"]], "shrinkop.input (in module autograd)": [[1, "Autograd.shrinkOp.input"]], "shrinkop.rank (in module autograd)": [[1, "Autograd.shrinkOp.rank"]], "sliceop (record in autograd)": [[1, "Autograd.sliceOp"]], "sliceop.dom (in module autograd)": [[1, "Autograd.sliceOp.dom"]], "sliceop.elttype (in module autograd)": [[1, "Autograd.sliceOp.eltType"]], "sliceop.input (in module autograd)": [[1, "Autograd.sliceOp.input"]], "sliceop.rank (in module autograd)": [[1, "Autograd.sliceOp.rank"]], "subop (record in autograd)": [[1, "Autograd.subOp"]], "subop.lhs (in module autograd)": [[1, "Autograd.subOp.lhs"]], "subop.rhs (in module autograd)": [[1, "Autograd.subOp.rhs"]], "sumop (record in autograd)": [[1, "Autograd.sumOp"]], "sumop.axes (in module autograd)": [[1, "Autograd.sumOp.axes"]], "sumop.elttype (in module autograd)": [[1, "Autograd.sumOp.eltType"]], "sumop.input (in module autograd)": [[1, "Autograd.sumOp.input"]], "sumop.rank (in module autograd)": [[1, "Autograd.sumOp.rank"]], "sumop.sumrank (in module autograd)": [[1, "Autograd.sumOp.sumRank"]], "to() (autograd.basetensorresource method)": [[1, "Autograd.BaseTensorResource.to"]], "treeheight() (autograd.tensoressence method)": [[1, "Autograd.TensorEssence.treeHeight"]], "*() (in module dynamictensor)": [[2, "DynamicTensor.*"]], "+() (in module dynamictensor)": [[2, "DynamicTensor.+"]], "-() (in module dynamictensor)": [[2, "DynamicTensor.-"]], ":() (in module dynamictensor)": [[2, "DynamicTensor.:"]], "dynamictensor (module)": [[2, "module-DynamicTensor"]], "tensor (record in dynamictensor)": [[2, "DynamicTensor.Tensor"]], "tensor.elttype (in module dynamictensor)": [[2, "DynamicTensor.Tensor.eltType"]], "tensor.meta (in module dynamictensor)": [[2, "DynamicTensor.Tensor.meta"]], "tensor.runtimerank (in module dynamictensor)": [[2, "DynamicTensor.Tensor.runtimeRank"]], "arange() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.arange"]], "argmax() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.argmax"]], "array() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.array"]], "checkrank() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.checkRank"]], "convolve() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.convolve"]], "data() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.data"]], "defaultdetachedmode (in module dynamictensor)": [[2, "DynamicTensor.defaultDetachedMode"]], "detach() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.detach"]], "detachmode() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.detachMode"]], "device() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.device"]], "eraserank() (dynamictensor.tensor method)": [[2, "DynamicTensor.tensor.eraseRank"]], "exp() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.exp"]], "flatten() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.flatten"]], "forcerank() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.forceRank"]], "forcerankmeta() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.forceRankMeta"]], "grad() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.grad"]], "hardcheckrank() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.hardCheckRank"]], "init() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.init"]], "load() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.load"]], "loadfromnumpy() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.loadFromNumpy"]], "main() (in module dynamictensor)": [[2, "DynamicTensor.main"]], "matvecmul() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.matvecmul"]], "matvecmulfast() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.matvecmulFast"]], "max() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.max"]], "maxpool() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.maxPool"]], "maxrank (in module dynamictensor)": [[2, "DynamicTensor.maxRank"]], "multireader() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.multiReader"]], "ones() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.ones"]], "readinplace() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.readInPlace"]], "relu() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.relu"]], "reshape() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.reshape"]], "resource() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.resource"]], "save() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.save"]], "serialize() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.serialize"]], "slice() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.slice"]], "softmax() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.softmax"]], "sum() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.sum"]], "tensorize() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.tensorize"]], "this() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.this"]], "to() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.to"]], "toarray() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.toArray"]], "tondarray() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.toNDArray"]], "totensor() (dynamictensor.ndarray method)": [[2, "DynamicTensor.ndarray.toTensor"]], "write() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.write"]], "zeros() (dynamictensor.tensor method)": [[2, "DynamicTensor.Tensor.zeros"]], "zipbinop() (in module dynamictensor)": [[2, "DynamicTensor.zipBinOp"]], "arrclass (class in loadnumpy)": [[3, "LoadNumpy.ArrClass"]], "arrclass._domain (in module loadnumpy)": [[3, "LoadNumpy.ArrClass._domain"]], "arrclass.data (in module loadnumpy)": [[3, "LoadNumpy.ArrClass.data"]], "arrclass.rank (in module loadnumpy)": [[3, "LoadNumpy.ArrClass.rank"]], "loadnumpy (module)": [[3, "module-LoadNumpy"]], "norankarray (class in loadnumpy)": [[3, "LoadNumpy.NoRankArray"]], "loadnumpyarray() (in module loadnumpy)": [[3, "LoadNumpy.loadNumpyArray"]], "main() (in module loadnumpy)": [[3, "LoadNumpy.main"]], "readdata() (in module loadnumpy)": [[3, "LoadNumpy.readData"]], "readshape() (in module loadnumpy)": [[3, "LoadNumpy.readShape"]], "*() (in module ndarray)": [[4, "NDArray.*"]], "+() (in module ndarray)": [[4, "NDArray.+"]], "-() (in module ndarray)": [[4, "NDArray.-"]], "/() (in module ndarray)": [[4, "NDArray./"]], ":() (in module ndarray)": [[4, "NDArray.:"]], "=() (in module ndarray)": [[4, "NDArray.="]], "ndarray (module)": [[4, "module-NDArray"]], "_dom() (ndarray.ndarray method)": [[4, "NDArray.ndarray._dom"]], "_tensor_resource (class in ndarray)": [[4, "NDArray._tensor_resource"]], "_tensor_resource.data (in module ndarray)": [[4, "NDArray._tensor_resource.data"]], "_tensor_resource.elttype (in module ndarray)": [[4, "NDArray._tensor_resource.eltType"]], "_tensor_resource.rank (in module ndarray)": [[4, "NDArray._tensor_resource.rank"]], "arange() (ndarray.ndarray method)": [[4, "NDArray.ndarray.arange"]], "argmax() (ndarray.ndarray method)": [[4, "NDArray.ndarray.argmax"]], "batchify() (ndarray.ndarray iterator)": [[4, "NDArray.ndarray.batchify"]], "contract() (ndarray.ndarray method)": [[4, "NDArray.ndarray.contract"]], "convolve() (ndarray.ndarray method)": [[4, "NDArray.ndarray.convolve"]], "dilate() (ndarray.ndarray method)": [[4, "NDArray.ndarray.dilate"]], "drop() (in module ndarray)": [[4, "NDArray.drop"]], "einsum() (ndarray.ndarray method)": [[4, "NDArray.ndarray.einsum"]], "expand() (ndarray.ndarray method)": [[4, "NDArray.ndarray.expand"]], "fromranges() (ndarray.ndarray method)": [[4, "NDArray.ndarray.fromRanges"]], "fullouter() (ndarray.ndarray method)": [[4, "NDArray.ndarray.fullOuter"]], "getfirstidx() (in module ndarray)": [[4, "NDArray.getFirstIdx"]], "init() (ndarray.ndarray method)": [[4, "NDArray.ndarray.init"]], "init=() (ndarray.ndarray method)": [[4, "NDArray.ndarray.init="]], "kernelrot() (ndarray.ndarray method)": [[4, "NDArray.ndarray.kernelRot"]], "main() (in module ndarray)": [[4, "NDArray.main"]], "matvecmul() (ndarray.ndarray method)": [[4, "NDArray.ndarray.matvecmul"]], "max() (ndarray.ndarray method)": [[4, "NDArray.ndarray.max"]], "maxpool() (ndarray.ndarray method)": [[4, "NDArray.ndarray.maxPool"]], "ndarray (record in ndarray)": [[4, "NDArray.ndarray"]], "ndarray._domain (in module ndarray)": [[4, "NDArray.ndarray._domain"]], "ndarray.data (in module ndarray)": [[4, "NDArray.ndarray.data"]], "ndarray.elttype (in module ndarray)": [[4, "NDArray.ndarray.eltType"]], "ndarray.rank (in module ndarray)": [[4, "NDArray.ndarray.rank"]], "pad() (ndarray.ndarray method)": [[4, "NDArray.ndarray.pad"]], "permute() (ndarray.ndarray method)": [[4, "NDArray.ndarray.permute"]], "populateremote() (ndarray.ndarray method)": [[4, "NDArray.ndarray.populateRemote"]], "read() (ndarray.ndarray method)": [[4, "NDArray.ndarray.read"]], "relu() (ndarray.ndarray method)": [[4, "NDArray.ndarray.relu"]], "reshape() (ndarray.ndarray method)": [[4, "NDArray.ndarray.reshape"]], "reshapedomain() (ndarray.ndarray method)": [[4, "NDArray.ndarray.reshapeDomain"]], "serialize() (ndarray.ndarray method)": [[4, "NDArray.ndarray.serialize"]], "setdata() (ndarray.ndarray method)": [[4, "NDArray.ndarray.setData"]], "shape() (ndarray.ndarray method)": [[4, "NDArray.ndarray.shape"]], "shrink() (ndarray.ndarray method)": [[4, "NDArray.ndarray.shrink"]], "slice() (ndarray.ndarray method)": [[4, "NDArray.ndarray.slice"]], "slice() (in module ndarray)": [[4, "NDArray.slice"]], "slicegeneric() (in module ndarray)": [[4, "NDArray.sliceGeneric"]], "splitat() (in module ndarray)": [[4, "NDArray.splitAt"]], "squeeze() (ndarray.ndarray method)": [[4, "NDArray.ndarray.squeeze"]], "sum() (ndarray.ndarray method)": [[4, "NDArray.ndarray.sum"]], "sumaxesmask() (ndarray.ndarray method)": [[4, "NDArray.ndarray.sumAxesMask"]], "sumoneaxis() (ndarray.ndarray method)": [[4, "NDArray.ndarray.sumOneAxis"]], "take() (in module ndarray)": [[4, "NDArray.take"]], "this() (ndarray.ndarray method)": [[4, "NDArray.ndarray.this"]], "toremote() (ndarray.ndarray method)": [[4, "NDArray.ndarray.toRemote"]], "write() (ndarray.ndarray method)": [[4, "NDArray.ndarray.write"]], "ziparr() (in module ndarray)": [[4, "NDArray.zipArr"]], ":() (network.moduleattributes method)": [[5, "Network.moduleAttributes.:"]], "conv2d (class in network)": [[5, "Network.Conv2D"]], "conv2d.bias (in module network)": [[5, "Network.Conv2D.bias"]], "conv2d.kernel (in module network)": [[5, "Network.Conv2D.kernel"]], "conv2d.kernelshape (in module network)": [[5, "Network.Conv2D.kernelShape"]], "conv2d.stride (in module network)": [[5, "Network.Conv2D.stride"]], "dropout (class in network)": [[5, "Network.Dropout"]], "flatten (class in network)": [[5, "Network.Flatten"]], "linear (class in network)": [[5, "Network.Linear"]], "linear.m (in module network)": [[5, "Network.Linear.m"]], "maxpool (class in network)": [[5, "Network.MaxPool"]], "maxpool.poolsize (in module network)": [[5, "Network.MaxPool.poolSize"]], "module (class in network)": [[5, "Network.Module"]], "module.elttype (in module network)": [[5, "Network.Module.eltType"]], "module.moduleid (in module network)": [[5, "Network.Module.moduleId"]], "module.modulename (in module network)": [[5, "Network.Module.moduleName"]], "module.ownedmodules (in module network)": [[5, "Network.Module.ownedModules"]], "module.submodules (in module network)": [[5, "Network.Module.subModules"]], "modulespecification (class in network)": [[5, "Network.ModuleSpecification"]], "modulespecification.attributes (in module network)": [[5, "Network.ModuleSpecification.attributes"]], "modulespecification.layertype (in module network)": [[5, "Network.ModuleSpecification.layerType"]], "modulespecification.submoduleorder (in module network)": [[5, "Network.ModuleSpecification.subModuleOrder"]], "modulespecification.submodules (in module network)": [[5, "Network.ModuleSpecification.subModules"]], "net (class in network)": [[5, "Network.Net"]], "network (module)": [[5, "module-Network"]], "parameter (class in network)": [[5, "Network.Parameter"]], "parameter.data (in module network)": [[5, "Network.Parameter.data"]], "relu (class in network)": [[5, "Network.ReLU"]], "sequential (class in network)": [[5, "Network.Sequential"]], "sequential.mds (in module network)": [[5, "Network.Sequential.mds"]], "softmax (class in network)": [[5, "Network.Softmax"]], "add() (network.modulechildren method)": [[5, "Network.moduleChildren.add"]], "addmodule() (network.module method)": [[5, "Network.Module.addModule"]], "addparameter() (network.module method)": [[5, "Network.Module.addParameter"]], "attributes() (network.conv2d method)": [[5, "Network.Conv2D.attributes"]], "attributes() (network.dropout method)": [[5, "Network.Dropout.attributes"]], "attributes() (network.flatten method)": [[5, "Network.Flatten.attributes"]], "attributes() (network.maxpool method)": [[5, "Network.MaxPool.attributes"]], "attributes() (network.module method)": [[5, "Network.Module.attributes"]], "attributes() (network.parameter method)": [[5, "Network.Parameter.attributes"]], "attributes() (network.relu method)": [[5, "Network.ReLU.attributes"]], "attributes() (network.sequential method)": [[5, "Network.Sequential.attributes"]], "attributes() (network.softmax method)": [[5, "Network.Softmax.attributes"]], "attributes() (in module network)": [[5, "Network.attributes"]], "bias (in module network)": [[5, "Network.bias"]], "chain() (in module network)": [[5, "Network.chain"]], "forward() (network.conv2d method)": [[5, "Network.Conv2D.forward"]], "forward() (network.dropout method)": [[5, "Network.Dropout.forward"]], "forward() (network.flatten method)": [[5, "Network.Flatten.forward"]], "forward() (network.maxpool method)": [[5, "Network.MaxPool.forward"]], "forward() (network.module method)": [[5, "Network.Module.forward"]], "forward() (network.net method)": [[5, "Network.Net.forward"]], "forward() (network.relu method)": [[5, "Network.ReLU.forward"]], "forward() (network.sequential method)": [[5, "Network.Sequential.forward"]], "forward() (network.softmax method)": [[5, "Network.Softmax.forward"]], "forward() (in module network)": [[5, "Network.forward"]], "getint() (network.moduleattributes method)": [[5, "Network.moduleAttributes.getInt"]], "getsubmodulename() (network.module method)": [[5, "Network.Module.getSubModuleName"]], "helpfindmodulebyname() (in module network)": [[5, "Network.helpFindModuleByName"]], "helpfindparamdatabyname() (in module network)": [[5, "Network.helpFindParamDataByName"]], "init() (network.conv2d method)": [[5, "Network.Conv2D.init"]], "init() (network.dropout method)": [[5, "Network.Dropout.init"]], "init() (network.flatten method)": [[5, "Network.Flatten.init"]], "init() (network.maxpool method)": [[5, "Network.MaxPool.init"]], "init() (network.module method)": [[5, "Network.Module.init"]], "init() (network.net method)": [[5, "Network.Net.init"]], "init() (network.parameter method)": [[5, "Network.Parameter.init"]], "init() (network.relu method)": [[5, "Network.ReLU.init"]], "init() (network.sequential method)": [[5, "Network.Sequential.init"]], "init() (network.softmax method)": [[5, "Network.Softmax.init"]], "init() (network.moduleattributes method)": [[5, "Network.moduleAttributes.init"]], "init() (network.modulechildren method)": [[5, "Network.moduleChildren.init"]], "init() (in module network)": [[5, "Network.init"]], "items() (network.modulechildren iterator)": [[5, "Network.moduleChildren.items"]], "ith() (network.modulechildren method)": [[5, "Network.moduleChildren.ith"]], "loadmodel() (in module network)": [[5, "Network.loadModel"]], "loadpytorchdump() (network.module method)": [[5, "Network.Module.loadPyTorchDump"]], "main() (in module network)": [[5, "Network.main"]], "mod() (network.module method)": [[5, "Network.Module.mod"]], "modelfromspecfile() (in module network)": [[5, "Network.modelFromSpecFile"]], "moduleattributes (record in network)": [[5, "Network.moduleAttributes"]], "moduleattributes.attributes (in module network)": [[5, "Network.moduleAttributes.attributes"]], "moduleattributes.layertype (in module network)": [[5, "Network.moduleAttributes.layerType"]], "moduleattributes.modulename (in module network)": [[5, "Network.moduleAttributes.moduleName"]], "modulechildren (record in network)": [[5, "Network.moduleChildren"]], "modulechildren.childdict (in module network)": [[5, "Network.moduleChildren.childDict"]], "modulechildren.elttype (in module network)": [[5, "Network.moduleChildren.eltType"]], "modulechildren.order (in module network)": [[5, "Network.moduleChildren.order"]], "modulefieldnames() (network.class iterator)": [[5, "Network.class.moduleFieldNames"]], "modulefields() (network.class iterator)": [[5, "Network.class.moduleFields"]], "modulefromspec() (in module network)": [[5, "Network.moduleFromSpec"]], "moduleinstances (in module network)": [[5, "Network.moduleInstances"]], "modulenames() (network.module iterator)": [[5, "Network.Module.moduleNames"]], "modules() (network.module iterator)": [[5, "Network.Module.modules"]], "n (in module network)": [[5, "Network.n"]], "namedmodules() (network.module iterator)": [[5, "Network.Module.namedModules"]], "par() (network.module method)": [[5, "Network.Module.par"]], "parameternames() (network.module iterator)": [[5, "Network.Module.parameterNames"]], "parameters() (network.module iterator)": [[5, "Network.Module.parameters"]], "postinit() (network.class method)": [[5, "Network.class.postinit"]], "prettyprint() (network.moduleattributes method)": [[5, "Network.moduleAttributes.prettyPrint"]], "prettyprintspec() (network.moduleattributes method)": [[5, "Network.moduleAttributes.prettyPrintSpec"]], "registermodules() (network.class method)": [[5, "Network.class.registerModules"]], "setup() (network.conv2d method)": [[5, "Network.Conv2D.setup"]], "setup() (network.module method)": [[5, "Network.Module.setup"]], "setup() (in module network)": [[5, "Network.setup"]], "signature() (network.module method)": [[5, "Network.Module.signature"]], "these() (network.modulechildren iterator)": [[5, "Network.moduleChildren.these"]], "this() (network.module method)": [[5, "Network.Module.this"]], "this() (network.class method)": [[5, "Network.class.this"]], "weight (in module network)": [[5, "Network.weight"]], "ordereddict (module)": [[6, "module-OrderedDict"]], "dict (record in ordereddict)": [[6, "OrderedDict.dict"]], "dict.keytype (in module ordereddict)": [[6, "OrderedDict.dict.keyType"]], "dict.order (in module ordereddict)": [[6, "OrderedDict.dict.order"]], "dict.table (in module ordereddict)": [[6, "OrderedDict.dict.table"]], "dict.valtype (in module ordereddict)": [[6, "OrderedDict.dict.valType"]], "init() (ordereddict.dict method)": [[6, "OrderedDict.dict.init"]], "insert() (ordereddict.dict method)": [[6, "OrderedDict.dict.insert"]], "keys() (ordereddict.dict iterator)": [[6, "OrderedDict.dict.keys"]], "size() (ordereddict.dict method)": [[6, "OrderedDict.dict.size"]], "these() (ordereddict.dict iterator)": [[6, "OrderedDict.dict.these"]], "values() (ordereddict.dict iterator)": [[6, "OrderedDict.dict.values"]], "remote (class in remote)": [[7, "Remote.Remote"]], "remote (module)": [[7, "module-Remote"]], "remote.elttype (in module remote)": [[7, "Remote.Remote.eltType"]], "remote.value (in module remote)": [[7, "Remote.Remote.value"]], "_remotevarcontainer (class in remote)": [[7, "Remote._RemoteVarContainer"]], "_remotevarcontainer.containedvalue (in module remote)": [[7, "Remote._RemoteVarContainer.containedValue"]], "copy() (remote.remote method)": [[7, "Remote.Remote.copy"]], "copycontainer() (remote.remote method)": [[7, "Remote.Remote.copyContainer"]], "copyto() (remote.remote method)": [[7, "Remote.Remote.copyTo"]], "defaultdevice() (remote.remote method)": [[7, "Remote.Remote.defaultDevice"]], "device() (remote.remote method)": [[7, "Remote.Remote.device"]], "get() (remote.remote method)": [[7, "Remote.Remote.get"]], "init() (remote.remote method)": [[7, "Remote.Remote.init"]], "ptr() (remote.remote method)": [[7, "Remote.Remote.ptr"]], "ref() (in module remote)": [[7, "Remote.ref"]], "to() (remote.remote method)": [[7, "Remote.Remote.to"]], "simpledomain (module)": [[8, "module-SimpleDomain"]], "init() (simpledomain.rect method)": [[8, "SimpleDomain.rect.init"]], "rect (record in simpledomain)": [[8, "SimpleDomain.rect"]], "rect.offset (in module simpledomain)": [[8, "SimpleDomain.rect.offset"]], "rect.rank (in module simpledomain)": [[8, "SimpleDomain.rect.rank"]], "rect.shape (in module simpledomain)": [[8, "SimpleDomain.rect.shape"]], "size() (simpledomain.rect method)": [[8, "SimpleDomain.rect.size"]], "zerotup() (in module simpledomain)": [[8, "SimpleDomain.zeroTup"]], "*() (in module statictensor)": [[9, "StaticTensor.*"]], "+() (in module statictensor)": [[9, "StaticTensor.+"]], "-() (in module statictensor)": [[9, "StaticTensor.-"]], "/() (in module statictensor)": [[9, "StaticTensor./"]], ":() (in module statictensor)": [[9, "StaticTensor.:"]], "statictensor (module)": [[9, "module-StaticTensor"]], "_dom() (statictensor.tensor method)": [[9, "StaticTensor.tensor._dom"]], "_setarraydata() (statictensor.tensor method)": [[9, "StaticTensor.tensor._setArrayData"]], "arange() (statictensor.tensor method)": [[9, "StaticTensor.tensor.arange"]], "convolve() (statictensor.tensor method)": [[9, "StaticTensor.tensor.convolve"]], "detach() (statictensor.tensor method)": [[9, "StaticTensor.tensor.detach"]], "diag (in module statictensor)": [[9, "StaticTensor.diag"]], "dilate() (statictensor.tensor method)": [[9, "StaticTensor.tensor.dilate"]], "exp() (statictensor.tensor method)": [[9, "StaticTensor.tensor.exp"]], "expand() (statictensor.tensor method)": [[9, "StaticTensor.tensor.expand"]], "fromshape() (statictensor.tensor method)": [[9, "StaticTensor.tensor.fromShape"]], "init() (statictensor.tensor method)": [[9, "StaticTensor.tensor.init"]], "main() (in module statictensor)": [[9, "StaticTensor.main"]], "matvec() (in module statictensor)": [[9, "StaticTensor.matvec"]], "matvecmul() (statictensor.tensor method)": [[9, "StaticTensor.tensor.matvecmul"]], "matvecmulfast() (statictensor.tensor method)": [[9, "StaticTensor.tensor.matvecmulFast"]], "max() (statictensor.tensor method)": [[9, "StaticTensor.tensor.max"]], "maxpool() (statictensor.tensor method)": [[9, "StaticTensor.tensor.maxPool"]], "meta() (statictensor.tensor method)": [[9, "StaticTensor.tensor.meta"]], "n (in module statictensor)": [[9, "StaticTensor.n"]], "ones() (statictensor.tensor method)": [[9, "StaticTensor.tensor.ones"]], "pad() (statictensor.tensor method)": [[9, "StaticTensor.tensor.pad"]], "permute() (statictensor.tensor method)": [[9, "StaticTensor.tensor.permute"]], "read() (statictensor.tensor method)": [[9, "StaticTensor.tensor.read"]], "relu() (statictensor.tensor method)": [[9, "StaticTensor.tensor.relu"]], "reshape() (statictensor.tensor method)": [[9, "StaticTensor.tensor.reshape"]], "reshapedomain() (statictensor.tensor method)": [[9, "StaticTensor.tensor.reshapeDomain"]], "serialize() (statictensor.tensor method)": [[9, "StaticTensor.tensor.serialize"]], "shrink() (statictensor.tensor method)": [[9, "StaticTensor.tensor.shrink"]], "size (in module statictensor)": [[9, "StaticTensor.size"]], "slice() (statictensor.tensor method)": [[9, "StaticTensor.tensor.slice"]], "softmax() (statictensor.tensor method)": [[9, "StaticTensor.tensor.softmax"]], "sum() (statictensor.tensor method)": [[9, "StaticTensor.tensor.sum"]], "tensor (record in statictensor)": [[9, "StaticTensor.tensor"]], "tensor.elttype (in module statictensor)": [[9, "StaticTensor.tensor.eltType"]], "tensor.rank (in module statictensor)": [[9, "StaticTensor.tensor.rank"]], "tensor.resource (in module statictensor)": [[9, "StaticTensor.tensor.resource"]], "tensorfromctx() (in module statictensor)": [[9, "StaticTensor.tensorFromCtx"]], "this() (statictensor.tensor method)": [[9, "StaticTensor.tensor.this"]], "unsqueeze() (statictensor.tensor method)": [[9, "StaticTensor.tensor.unsqueeze"]], "zeros() (statictensor.tensor method)": [[9, "StaticTensor.tensor.zeros"]], "tensor (module)": [[10, "module-Tensor"]], "utilities (module)": [[11, "module-Utilities"]], "argsort() (in module utilities)": [[11, "Utilities.argsort"]], "cartesian() (in module utilities)": [[11, "Utilities.cartesian"]], "debugprint (in module utilities)": [[11, "Utilities.debugPrint"]], "debugwrite() (in module utilities)": [[11, "Utilities.debugWrite"]], "domainfromshape() (in module utilities)": [[11, "Utilities.domainFromShape"]], "emptydomain() (in module utilities)": [[11, "Utilities.emptyDomain"]], "err() (in module utilities)": [[11, "Utilities.err"]], "fasteach() (in module utilities)": [[11, "Utilities.fastEach"]], "flatiter() (in module utilities)": [[11, "Utilities.flatIter"]], "indexat() (in module utilities)": [[11, "Utilities.indexAt"]], "indexathelpermultiples() (in module utilities)": [[11, "Utilities.indexAtHelperMultiples"]], "indexathelperprod() (in module utilities)": [[11, "Utilities.indexAtHelperProd"]], "indexinshape() (in module utilities)": [[11, "Utilities.indexInShape"]], "loopgpusupport (in module utilities)": [[11, "Utilities.loopGpuSupport"]], "nbase() (in module utilities)": [[11, "Utilities.nbase"]], "normalizearray() (in module utilities)": [[11, "Utilities.normalizeArray"]], "normalizedomain() (in module utilities)": [[11, "Utilities.normalizeDomain"]], "rangefrombound() (in module utilities)": [[11, "Utilities.rangeFromBound"]], "rangefromstart() (in module utilities)": [[11, "Utilities.rangeFromStart"]], "rangesfrombounds() (in module utilities)": [[11, "Utilities.rangesFromBounds"]], "rangesfromshape() (in module utilities)": [[11, "Utilities.rangesFromShape"]], "targetgpu() (in module utilities)": [[11, "Utilities.targetGpu"]], "standard (module)": [[12, "module-Standard"]], "countoccurrences() (standard.string method)": [[12, "Standard.string.countOccurrences"]], "drop() (standard.string method)": [[12, "Standard.string.drop"]], "each() (standard._domain iterator)": [[12, "Standard._domain.each"]], "each() (standard._tuple iterator)": [[12, "Standard._tuple.each"]], "elttype() (standard._tuple method)": [[12, "Standard._tuple.eltType"]], "every() (standard._domain iterator)": [[12, "Standard._domain.every"]], "everyzip() (standard._domain iterator)": [[12, "Standard._domain.everyZip"]], "fastnormaldims() (standard._domain method)": [[12, "Standard._domain.fastNormalDims"]], "fastshape() (standard._domain method)": [[12, "Standard._domain.fastShape"]], "imagetype() (standard._tuple method)": [[12, "Standard._tuple.imageType"]], "indexat() (standard._domain method)": [[12, "Standard._domain.indexAt"]], "indexat() (standard._tuple method)": [[12, "Standard._tuple.indexAt"]], "insertidx() (standard._tuple method)": [[12, "Standard._tuple.insertIdx"]], "isnormal() (standard._domain method)": [[12, "Standard._domain.isNormal"]], "map() (standard._tuple method)": [[12, "Standard._tuple.map"]], "myshape() (standard._domain method)": [[12, "Standard._domain.myShape"]], "normalize() (standard._domain method)": [[12, "Standard._domain.normalize"]], "removeidx() (standard._tuple method)": [[12, "Standard._tuple.removeIdx"]], "slice() (standard._tuple method)": [[12, "Standard._tuple.slice"]], "slice() (standard.string method)": [[12, "Standard.string.slice"]], "take() (standard.string method)": [[12, "Standard.string.take"]], "takeuntil() (standard.string method)": [[12, "Standard.string.takeUntil"]], "this() (standard.string method)": [[12, "Standard.string.this"]], "untuplify() (standard._tuple method)": [[12, "Standard._tuple.untuplify"]], "types (module)": [[13, "module-Types"]], "f32 (in module types)": [[13, "Types.f32"]], "f64 (in module types)": [[13, "Types.f64"]], "stdrange (in module types)": [[13, "Types.stdRange"]]}})