Search.setIndex({"docnames": ["index", "modules/examples/ConvLayerTest", "modules/examples/MNISTNet", "modules/examples/ModuleSpec", "modules/examples/MultiLocaleInference", "modules/lib/Autograd", "modules/lib/DynamicTensor", "modules/lib/LoadNumpy", "modules/lib/NDArray", "modules/lib/Network", "modules/lib/OrderedDict", "modules/lib/Remote", "modules/lib/SimpleDomain", "modules/lib/StaticTensor", "modules/lib/Tensor", "modules/lib/Utilities", "modules/lib/Utilities/Standard", "modules/lib/Utilities/Types", "modules/src/ChAI"], "filenames": ["index.rst", "modules/examples/ConvLayerTest.rst", "modules/examples/MNISTNet.rst", "modules/examples/ModuleSpec.rst", "modules/examples/MultiLocaleInference.rst", "modules/lib/Autograd.rst", "modules/lib/DynamicTensor.rst", "modules/lib/LoadNumpy.rst", "modules/lib/NDArray.rst", "modules/lib/Network.rst", "modules/lib/OrderedDict.rst", "modules/lib/Remote.rst", "modules/lib/SimpleDomain.rst", "modules/lib/StaticTensor.rst", "modules/lib/Tensor.rst", "modules/lib/Utilities.rst", "modules/lib/Utilities/Standard.rst", "modules/lib/Utilities/Types.rst", "modules/src/ChAI.rst"], "titles": ["chpldoc documentation", "ConvLayerTest", "MNISTNet", "ModuleSpec", "MultiLocaleInference", "Autograd", "DynamicTensor", "LoadNumpy", "NDArray", "Network", "OrderedDict", "Remote", "SimpleDomain", "StaticTensor", "Tensor", "Utilities", "Standard", "Types", "ChAI"], "terms": {"content": 0, "convlayertest": 0, "mnistnet": 0, "modulespec": 0, "multilocaleinfer": 0, "autograd": 0, "dynamictensor": 0, "loadnumpi": 0, "ndarrai": [0, 5, 6, 13], "network": [0, 2], "ordereddict": 0, "remot": [0, 5, 8], "simpledomain": 0, "statictensor": [0, 6], "tensor": [0, 1, 2, 3, 4, 6, 9, 13], "util": [0, 16, 17], "standard": [0, 15], "type": [0, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 16], "chai": 0, "index": 0, "chapel": 0, "modul": [0, 2, 3, 9], "search": 0, "page": 0, "usag": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], "us": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], "import": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], "var": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16], "t": [1, 6, 8, 9, 13, 15], "real": [1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 17], "arang": [1, 6, 8, 13], "1": [1, 2, 3, 4, 5, 6, 8, 9, 12, 13, 15, 16], "8": 1, "conv": 1, "new": [1, 2, 16], "conv2d": [1, 2, 9], "3": [1, 2, 5, 8, 13], "output": [1, 2], "config": [2, 3, 4, 6, 13, 15], "param": [2, 5, 6, 7, 8, 9, 12, 13, 15, 16], "layerdebug": 2, "fals": [2, 3, 4, 5, 6, 8, 9, 13, 15, 16], "dtype": [2, 3, 4, 7, 9], "32": [2, 3, 4, 8, 9, 17], "class": [2, 5, 7, 8, 9, 11], "cnn": [2, 3, 4], "conv1": 2, "own": [2, 3, 5, 7, 8, 9, 11, 13], "elttyp": [2, 5, 6, 8, 9, 11, 12, 13, 16], "conv2": 2, "dropout1": 2, "dropout": [2, 9], "dropout2": 2, "flatten": [2, 6, 9], "fc1": 2, "linear": [2, 9], "fc2": 2, "proc": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18], "init": [2, 5, 6, 8, 9, 10, 11, 12, 13], "overrid": [2, 5, 9], "forward": [2, 5, 9], "input": [2, 5, 9], "const": [2, 3, 4, 8, 12, 13, 16], "diag": [2, 13], "model": [2, 3, 4], "loadmodel": [2, 3, 4, 9], "specfil": [2, 3, 4, 9], "script": [2, 3, 4], "specif": [2, 3, 4], "json": [2, 3, 4], "weightsfold": [2, 3, 4, 9], "testimgs": 2, "28": 2, "img": 2, "load": [2, 3, 4, 6], "data": [2, 3, 4, 5, 6, 7, 8, 9], "dataset": [2, 3, 4], "mnist": [2, 3, 4], "image_idx_0_7_7": 2, "chdata": [2, 3, 4], "modelpath": [2, 9], "mnist_cnn": 2, "imagecount": 2, "0": [2, 3, 4, 8, 9, 13, 16], "imag": [2, 3, 4], "foral": [2, 3, 4, 16], "i": [2, 3, 4, 9, 16], "do": [2, 3, 4, 16], "image_idx_": [2, 3, 4], "string": [2, 3, 4, 6, 7, 8, 9, 16], "pred": [2, 3, 4], "domain": [2, 4, 5, 6, 7, 8, 12, 13, 15], "int": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17], "numtim": [2, 3], "printresult": [2, 3, 4], "cnn2": 2, "sequenti": [2, 9], "channel": [2, 9], "featur": [2, 5, 6, 8, 9, 13], "kernel": [2, 5, 6, 8, 9, 13], "stride": [2, 5, 6, 8, 9, 12, 13, 16, 17], "64": [2, 6, 8, 13, 17], "25": 2, "5": [2, 9], "9216": 2, "128": 2, "10": 2, "detach": [3, 4, 5, 6, 13], "true": [3, 4, 5, 6, 13], "numimag": [3, 4], "time": 3, "imagesd": 4, "blockdist": 4, "createdomain": 4, "localemodelsd": 4, "local": [4, 5, 6, 11], "localemodel": 4, "li": 4, "numtri": 4, "totaltim": 4, "averagetim": 4, "checkrank": [5, 6], "te": 5, "share": [5, 6, 9, 11, 13], "tensoress": [5, 6], "rank": [5, 6, 7, 8, 9, 12, 13, 15, 16], "bool": [5, 6, 12, 13, 15, 16], "getrank": 5, "forcerank": [5, 6], "basetensorresourc": [5, 6, 13], "serializ": [5, 6, 8, 9, 10, 11, 12, 13], "runtimerank": [5, 6], "iter": [5, 8, 9, 10, 12, 15, 16], "children": 5, "borrow": [5, 8, 9], "treeheight": 5, "forgetfultensor": 5, "dataresourc": 5, "gradresourc": 5, "nil": 5, "devic": [5, 6, 11], "defaultdevic": [5, 11], "dest": [5, 11], "arrai": [5, 6, 13], "ref": [5, 6, 8, 9, 10, 11, 12, 13], "grad": [5, 6], "backward": 5, "alreadypopul": 5, "where": [5, 6, 8, 9, 11, 12, 13, 15, 16], "copi": [5, 11, 12, 13], "keepgrad": [5, 13], "tensorresourc": 5, "basevalu": 5, "operationtyp": 5, "operationctx": 5, "bt": 5, "record": [5, 6, 8, 9, 10, 12, 13], "reluop": 5, "_relu": 5, "x": [5, 9, 12, 15, 16], "expop": 5, "addop": 5, "lh": [5, 8], "rh": [5, 8], "subop": 5, "divop": 5, "multop": 5, "reshapeop": 5, "oldrank": 5, "newrank": [5, 8, 13], "shape": [5, 7, 8, 12, 13, 15, 16], "permuteop": 5, "permut": [5, 8, 13], "expandop": 5, "expandedshap": 5, "padop": 5, "arg": [5, 6, 8, 9, 13, 15], "2": [5, 8, 12, 13, 15], "valu": [5, 8, 10, 11, 13], "shrinkop": 5, "sliceop": 5, "dom": [5, 6, 8, 12, 13, 15], "layersliceop": 5, "base": 5, "mask": 5, "maskdomain": 5, "sumop": 5, "sumrank": 5, "ax": [5, 6, 8, 13], "outrank": 5, "maxop": 5, "maxrank": [5, 6], "conv2dop": 5, "4": [5, 8, 9, 13], "6": 6, "defaultdetachedmod": 6, "meta": [6, 13], "detachmod": 6, "arr": [6, 8, 13, 15], "thi": [6, 8, 9, 13, 16], "resourc": [6, 13], "forcerankmeta": 6, "hardcheckrank": 6, "tondarrai": 6, "toarrai": 6, "oper": [6, 8, 9, 12, 13], "totyp": [6, 8, 12, 13], "totensor": 6, "eraserank": 6, "zipbinop": 6, "opnam": 6, "b": [6, 8, 12, 13], "loadfromnumpi": 6, "path": [6, 7, 9], "sum": [6, 8, 13], "r": [6, 13], "relu": [6, 8, 9, 13], "max": [6, 8, 13], "exp": [6, 13], "softmax": [6, 9, 13], "maxpool": [6, 8, 9, 13], "poolsiz": [6, 8, 9, 13], "reshap": [6, 8, 13], "slice": [6, 8, 13, 16], "rng": [6, 8, 13], "rang": [6, 8, 12, 13, 15, 17], "matvecmul": [6, 8, 13], "m": [6, 9, 13], "v": [6, 13], "matvecmulfast": [6, 13], "argmax": [6, 8], "convolv": [6, 8, 13], "bia": [6, 8, 9, 13], "ones": [6, 13], "zero": [6, 13], "main": [6, 7, 8, 9, 13, 18], "serial": [6, 8, 12, 13], "writer": [6, 8, 12, 13], "io": [6, 8, 12, 13], "filewrit": [6, 8, 12, 13], "lock": [6, 8, 13], "defaultseri": [6, 8, 13], "srt2": [6, 13], "write": [6, 8], "fw": [6, 8], "throw": [6, 8, 13], "save": 6, "multiread": 6, "precis": 6, "readinplac": 6, "fr": [6, 7, 8, 13], "fileread": [6, 8, 13], "norankarrai": 7, "arrclass": 7, "_domain": [7, 8, 16], "readdata": 7, "byte": 7, "readshap": 7, "loadnumpyarrai": 7, "domaintyp": 8, "noinit": 8, "_dom": [8, 13], "isdomaintyp": 8, "fill": 8, "rect": [8, 12, 16], "A": 8, "other": [8, 12], "setdata": 8, "reshapedomain": [8, 13], "isregulardomain": [8, 12], "newshap": [8, 13], "expand": [8, 13], "sumoneaxi": 8, "axi": 8, "sumaxesmask": 8, "withaxesmask": 8, "axescount": 8, "shrink": [8, 13], "narg": 8, "exactbound": 8, "pad": [8, 13], "dilat": [8, 13], "dil": [8, 13], "squeez": 8, "populateremot": 8, "re": 8, "toremot": 8, "batchifi": 8, "dim": [8, 12, 13], "kernelrot": 8, "val": 8, "_iteratorrecord": [8, 13], "ziparr": 8, "f": [8, 16], "mat": [8, 13], "vec": [8, 13], "fromrang": 8, "read": [8, 13], "_tensor_resourc": 8, "fullout": 8, "ranka": 8, "rankb": 8, "contract": 8, "axisa": 8, "axisb": 8, "splitat": 8, "": [8, 12], "del": [8, 16], "idx": [8, 12, 15, 16], "getfirstidx": 8, "slicegener": 8, "start": [8, 15, 16], "stop": [8, 16], "take": [8, 16], "count": [8, 15, 16], "drop": [8, 16], "einsum": 8, "subscript": 8, "helpfindmodulebynam": 9, "helpfindparamdatabynam": 9, "modulechildren": 9, "childdict": 9, "map": [9, 10, 16], "order": [9, 10, 12], "list": [9, 10], "item": 9, "add": 9, "name": 9, "ith": 9, "fieldnam": 9, "issubtyp": [9, 11], "paramet": 9, "modulefieldnam": 9, "modulefield": 9, "registermodul": 9, "postinit": 9, "moduleattribut": 9, "layertyp": 9, "modulenam": 9, "attribut": 9, "dict": [9, 10], "attr": 9, "valtyp": [9, 10], "n": [9, 13, 15, 16], "getint": 9, "prettyprint": 9, "prettyprintspec": 9, "ma": 9, "modulespecif": 9, "submodul": [9, 15], "submoduleord": 9, "modulefromspec": 9, "ms_": 9, "modelfromspecfil": 9, "moduleinst": 9, "moduleid": 9, "ownedmodul": 9, "setup": 9, "getsubmodulenam": 9, "addmodul": 9, "addparamet": 9, "par": 9, "paramnam": 9, "mod": 9, "modnam": 9, "parameternam": 9, "namedmodul": 9, "loadpytorchdump": 9, "debug": 9, "signatur": 9, "md": 9, "overridenam": 9, "weight": 9, "kernelshap": 9, "freq": 9, "chain": 9, "net": 9, "keytyp": 10, "tabl": 10, "size": [10, 12, 13, 16], "kei": 10, "insert": 10, "_remotevarcontain": 11, "containedvalu": 11, "get": 11, "ptr": 11, "tr": 11, "_thunkrecord": 11, "copycontain": 11, "copyto": 11, "unmanag": 11, "chpl__buildremotewrapp": 11, "loc": 11, "intyp": 11, "isdomain": 12, "d": [12, 15], "dt": 12, "zerotup": 12, "simpletupletyp": 12, "tupl": 12, "_tupl": [12, 16], "first": 12, "last": 12, "uncon": 12, "head": 12, "tail": 12, "istupleoford": 12, "leaftyp": 12, "tup": [12, 15], "tuptyp": 12, "computestrid": 12, "computes": 12, "computeatindex": 12, "offset": 12, "rnk": 12, "isrectangular": [12, 16], "initi": 12, "from": 12, "shapeoffset": 12, "low": [12, 15, 16], "high": [12, 15, 16], "coord": 12, "shiftedshap": 12, "indexat": [12, 15, 16], "atindex": 12, "serialit": 12, "tag": [12, 15, 16], "iterkind": [12, 15, 16], "standalon": [12, 15, 16], "eachord": [12, 16], "origin": 12, "translat": 12, "chang": 12, "contain": 12, "rct": 12, "tostr": 12, "stdout": 12, "me": 12, "computeblock": 12, "wrap": 12, "unwrap": 12, "_setarraydata": 13, "tensorfromctx": 13, "ctx": 13, "unsqueez": 13, "matvec": 13, "fromshap": 13, "100": 13, "capitalt": 13, "loopgpusupport": [15, 16], "chpl_locale_model": [15, 16], "gpu": [15, 16], "targetgpu": 15, "debugprint": 15, "err": 15, "debugwrit": 15, "cartesian": 15, "y": 15, "flatit": 15, "product": 15, "linearidx": 15, "normalizearrai": 15, "unknown": 15, "isarraytyp": 15, "normalizedomain": 15, "emptydomain": 15, "domainfromshap": 15, "rangefrombound": 15, "rangefromstart": 15, "rangesfrombound": 15, "bound": [15, 17], "rangesfromshap": 15, "nbase": 15, "indexinshap": 15, "indexathelperprod": 15, "prod": [15, 16], "indexathelpermultipl": [15, 16], "div": [15, 16], "fasteach": 15, "argsort": 15, "imagetyp": 16, "ishomogeneoustupl": 16, "removeidx": 16, "untuplifi": 16, "insertidx": 16, "each": 16, "inlin": 16, "simpl": 16, "return": 16, "everi": 16, "foreach": 16, "yield": 16, "everyzip": 16, "leader": 16, "fastshap": 16, "els": 16, "blk": 16, "j": 16, "k": 16, "followthi": 16, "_valu": 16, "assertongpu": 16, "ordertoindex": 16, "follow": 16, "fastnormaldim": 16, "myshap": 16, "normal": 16, "isnorm": 16, "countoccurr": 16, "c": 16, "takeuntil": 16, "keepdel": 16, "stdrang": 17, "idxtyp": 17, "boundkind": 17, "both": 17, "stridekind": 17, "one": 17, "f32": 17, "f64": 17, "document": 18, "gputil": 18}, "objects": {"": [[5, 0, 0, "-", "Autograd"], [18, 0, 0, "-", "ChAI"], [1, 0, 0, "-", "ConvLayerTest"], [6, 0, 0, "-", "DynamicTensor"], [7, 0, 0, "-", "LoadNumpy"], [2, 0, 0, "-", "MNISTNet"], [3, 0, 0, "-", "ModuleSpec"], [4, 0, 0, "-", "MultiLocaleInference"], [8, 0, 0, "-", "NDArray"], [9, 0, 0, "-", "Network"], [10, 0, 0, "-", "OrderedDict"], [11, 0, 0, "-", "Remote"], [12, 0, 0, "-", "SimpleDomain"], [16, 0, 0, "-", "Standard"], [13, 0, 0, "-", "StaticTensor"], [14, 0, 0, "-", "Tensor"], [17, 0, 0, "-", "Types"], [15, 0, 0, "-", "Utilities"]], "Autograd": [[5, 1, 1, "", "BaseTensorResource"], [5, 1, 1, "", "ForgetfulTensor"], [5, 1, 1, "", "TensorEssence"], [5, 1, 1, "", "TensorResource"], [5, 5, 1, "", "addOp"], [5, 5, 1, "", "baseValue"], [5, 6, 1, "", "checkRank"], [5, 5, 1, "", "conv2DOp"], [5, 5, 1, "", "divOp"], [5, 5, 1, "", "expOp"], [5, 5, 1, "", "expandOp"], [5, 6, 1, "", "forceRank"], [5, 6, 1, "", "getRank"], [5, 5, 1, "", "layerSliceOp"], [5, 5, 1, "", "maxOp"], [5, 5, 1, "", "multOp"], [5, 5, 1, "", "padOp"], [5, 5, 1, "", "permuteOp"], [5, 5, 1, "", "reluOp"], [5, 5, 1, "", "reshapeOp"], [5, 5, 1, "", "shrinkOp"], [5, 5, 1, "", "sliceOp"], [5, 5, 1, "", "subOp"], [5, 5, 1, "", "sumOp"]], "Autograd.BaseTensorResource": [[5, 2, 1, "", "array"], [5, 2, 1, "", "backward"], [5, 3, 1, "", "dataResource"], [5, 2, 1, "", "detach"], [5, 2, 1, "", "device"], [5, 2, 1, "", "forward"], [5, 2, 1, "", "grad"], [5, 3, 1, "", "gradResource"], [5, 2, 1, "", "init"], [5, 3, 1, "", "rank"], [5, 2, 1, "", "runtimeRank"], [5, 2, 1, "", "to"]], "Autograd.ForgetfulTensor": [[5, 3, 1, "", "rank"]], "Autograd.TensorEssence": [[5, 4, 1, "", "children"], [5, 3, 1, "", "eltType"], [5, 2, 1, "", "runtimeRank"], [5, 2, 1, "", "treeHeight"]], "Autograd.TensorResource": [[5, 4, 1, "", "children"], [5, 2, 1, "", "detach"], [5, 2, 1, "", "forward"], [5, 2, 1, "", "init"], [5, 3, 1, "", "operationCtx"], [5, 3, 1, "", "operationType"]], "Autograd.addOp": [[5, 2, 1, "", "backward"], [5, 2, 1, "", "children"], [5, 3, 1, "", "eltType"], [5, 2, 1, "", "forward"], [5, 3, 1, "", "lhs"], [5, 3, 1, "", "rank"], [5, 3, 1, "", "rhs"]], "Autograd.baseValue": [[5, 2, 1, "", "children"], [5, 2, 1, "", "forward"]], "Autograd.conv2DOp": [[5, 2, 1, "", "backward"], [5, 2, 1, "", "children"], [5, 3, 1, "", "eltType"], [5, 3, 1, "", "features"], [5, 2, 1, "", "forward"], [5, 3, 1, "", "kernel"], [5, 3, 1, "", "stride"]], "Autograd.divOp": [[5, 2, 1, "", "children"], [5, 2, 1, "", "forward"], [5, 3, 1, "", "lhs"], [5, 3, 1, "", "rhs"]], "Autograd.expOp": [[5, 2, 1, "", "children"], [5, 2, 1, "", "forward"], [5, 3, 1, "", "input"]], "Autograd.expandOp": [[5, 2, 1, "", "backward"], [5, 2, 1, "", "children"], [5, 3, 1, "", "eltType"], [5, 3, 1, "", "expandedShape"], [5, 2, 1, "", "forward"], [5, 3, 1, "", "input"], [5, 3, 1, "", "rank"]], "Autograd.layerSliceOp": [[5, 2, 1, "", "backward"], [5, 3, 1, "", "base"], [5, 2, 1, "", "children"], [5, 3, 1, "", "eltType"], [5, 2, 1, "", "forward"], [5, 3, 1, "", "mask"], [5, 3, 1, "", "maskDomain"], [5, 3, 1, "", "rank"]], "Autograd.maxOp": [[5, 3, 1, "", "axes"], [5, 2, 1, "", "backward"], [5, 2, 1, "", "children"], [5, 3, 1, "", "eltType"], [5, 2, 1, "", "forward"], [5, 3, 1, "", "input"], [5, 3, 1, "", "maxRank"], [5, 3, 1, "", "rank"]], "Autograd.multOp": [[5, 2, 1, "", "backward"], [5, 2, 1, "", "children"], [5, 3, 1, "", "eltType"], [5, 2, 1, "", "forward"], [5, 3, 1, "", "lhs"], [5, 3, 1, "", "rank"], [5, 3, 1, "", "rhs"]], "Autograd.padOp": [[5, 3, 1, "", "arg"], [5, 2, 1, "", "backward"], [5, 2, 1, "", "children"], [5, 3, 1, "", "eltType"], [5, 2, 1, "", "forward"], [5, 3, 1, "", "input"], [5, 3, 1, "", "rank"], [5, 3, 1, "", "value"]], "Autograd.permuteOp": [[5, 2, 1, "", "backward"], [5, 2, 1, "", "children"], [5, 3, 1, "", "eltType"], [5, 2, 1, "", "forward"], [5, 3, 1, "", "input"], [5, 3, 1, "", "permutation"], [5, 3, 1, "", "rank"]], "Autograd.reluOp": [[5, 2, 1, "", "_relu"], [5, 2, 1, "", "children"], [5, 2, 1, "", "forward"], [5, 3, 1, "", "input"]], "Autograd.reshapeOp": [[5, 2, 1, "", "backward"], [5, 2, 1, "", "children"], [5, 3, 1, "", "eltType"], [5, 2, 1, "", "forward"], [5, 3, 1, "", "input"], [5, 3, 1, "", "newRank"], [5, 3, 1, "", "oldRank"], [5, 3, 1, "", "shape"]], "Autograd.shrinkOp": [[5, 3, 1, "", "arg"], [5, 2, 1, "", "backward"], [5, 2, 1, "", "children"], [5, 3, 1, "", "eltType"], [5, 2, 1, "", "forward"], [5, 3, 1, "", "input"], [5, 3, 1, "", "rank"]], "Autograd.sliceOp": [[5, 2, 1, "", "backward"], [5, 2, 1, "", "children"], [5, 3, 1, "", "dom"], [5, 3, 1, "", "eltType"], [5, 2, 1, "", "forward"], [5, 3, 1, "", "input"], [5, 3, 1, "", "rank"]], "Autograd.subOp": [[5, 2, 1, "", "children"], [5, 2, 1, "", "forward"], [5, 3, 1, "", "lhs"], [5, 3, 1, "", "rhs"]], "Autograd.sumOp": [[5, 3, 1, "", "axes"], [5, 2, 1, "", "backward"], [5, 2, 1, "", "children"], [5, 3, 1, "", "eltType"], [5, 2, 1, "", "forward"], [5, 3, 1, "", "input"], [5, 2, 1, "", "outRank"], [5, 3, 1, "", "rank"], [5, 3, 1, "", "sumRank"]], "ChAI": [[18, 6, 1, "", "main"]], "ConvLayerTest": [[1, 7, 1, "", "conv"], [1, 7, 1, "", "output"], [1, 7, 1, "", "t"]], "DynamicTensor": [[6, 6, 1, "", "*"], [6, 6, 1, "", "+"], [6, 6, 1, "", "-"], [6, 6, 1, "", ":"], [6, 8, 1, "", "Tensor"], [6, 7, 1, "", "defaultDetachedMode"], [6, 5, 1, "", "dynamicTensor"], [6, 6, 1, "", "main"], [6, 7, 1, "", "maxRank"], [6, 6, 1, "", "zipBinOp"]], "DynamicTensor.dynamicTensor": [[6, 2, 1, "", "arange"], [6, 2, 1, "", "argmax"], [6, 2, 1, "", "array"], [6, 2, 1, "", "checkRank"], [6, 2, 1, "", "convolve"], [6, 2, 1, "", "data"], [6, 2, 1, "", "detach"], [6, 2, 1, "", "detachMode"], [6, 2, 1, "", "device"], [6, 3, 1, "", "eltType"], [6, 2, 1, "", "exp"], [6, 2, 1, "", "flatten"], [6, 2, 1, "", "forceRank"], [6, 2, 1, "", "forceRankMeta"], [6, 2, 1, "", "grad"], [6, 2, 1, "", "hardCheckRank"], [6, 2, 1, "", "init"], [6, 2, 1, "", "load"], [6, 2, 1, "", "loadFromNumpy"], [6, 2, 1, "", "matvecmul"], [6, 2, 1, "", "matvecmulFast"], [6, 2, 1, "", "max"], [6, 2, 1, "", "maxPool"], [6, 3, 1, "", "meta"], [6, 2, 1, "", "multiReader"], [6, 2, 1, "", "ones"], [6, 2, 1, "", "readInPlace"], [6, 2, 1, "", "relu"], [6, 2, 1, "", "reshape"], [6, 2, 1, "", "resource"], [6, 3, 1, "", "runtimeRank"], [6, 2, 1, "", "save"], [6, 2, 1, "", "serialize"], [6, 2, 1, "", "slice"], [6, 2, 1, "", "softmax"], [6, 2, 1, "", "sum"], [6, 2, 1, "", "tensorize"], [6, 2, 1, "", "this"], [6, 2, 1, "", "to"], [6, 2, 1, "", "toArray"], [6, 2, 1, "", "toNDArray"], [6, 2, 1, "", "write"], [6, 2, 1, "", "zeros"]], "DynamicTensor.ndarray": [[6, 2, 1, "", "toTensor"]], "DynamicTensor.staticTensor": [[6, 2, 1, "", "eraseRank"]], "LoadNumpy": [[7, 1, 1, "", "ArrClass"], [7, 1, 1, "", "NoRankArray"], [7, 6, 1, "", "loadNumpyArray"], [7, 6, 1, "", "main"], [7, 6, 1, "", "readData"], [7, 6, 1, "", "readShape"]], "LoadNumpy.ArrClass": [[7, 3, 1, "", "_domain"], [7, 3, 1, "", "data"], [7, 3, 1, "", "rank"]], "MNISTNet": [[2, 1, 1, "", "CNN"], [2, 7, 1, "", "cnn"], [2, 7, 1, "", "cnn2"], [2, 7, 1, "", "diag"], [2, 8, 1, "", "dtype"], [2, 7, 1, "", "imageCount"], [2, 7, 1, "", "images"], [2, 7, 1, "", "img"], [2, 7, 1, "", "layerDebug"], [2, 7, 1, "", "model"], [2, 7, 1, "", "modelPath"], [2, 7, 1, "", "numTimes"], [2, 7, 1, "", "output"], [2, 7, 1, "", "preds"], [2, 7, 1, "", "printResults"], [2, 7, 1, "", "testImgSize"]], "MNISTNet.CNN": [[2, 3, 1, "", "conv1"], [2, 3, 1, "", "conv2"], [2, 3, 1, "", "dropout1"], [2, 3, 1, "", "dropout2"], [2, 3, 1, "", "fc1"], [2, 3, 1, "", "fc2"], [2, 3, 1, "", "flatten"], [2, 2, 1, "", "forward"], [2, 2, 1, "", "init"]], "ModuleSpec": [[3, 7, 1, "", "detach"], [3, 7, 1, "", "images"], [3, 7, 1, "", "model"], [3, 7, 1, "", "numImages"], [3, 7, 1, "", "numTimes"], [3, 7, 1, "", "preds"], [3, 7, 1, "", "printResults"], [3, 7, 1, "", "time"]], "MultiLocaleInference": [[4, 7, 1, "", "averageTime"], [4, 7, 1, "", "detach"], [4, 8, 1, "", "dtype"], [4, 7, 1, "", "images"], [4, 7, 1, "", "imagesD"], [4, 7, 1, "", "localeModels"], [4, 7, 1, "", "localeModelsD"], [4, 7, 1, "", "numImages"], [4, 7, 1, "", "numTries"], [4, 7, 1, "", "preds"], [4, 7, 1, "", "printResults"], [4, 7, 1, "", "totalTime"]], "NDArray": [[8, 6, 1, "", "*"], [8, 6, 1, "", "+"], [8, 6, 1, "", "-"], [8, 6, 1, "", "/"], [8, 6, 1, "", ":"], [8, 6, 1, "", "="], [8, 1, 1, "", "_tensor_resource"], [8, 8, 1, "", "domainType"], [8, 6, 1, "", "drop"], [8, 6, 1, "", "getFirstIdx"], [8, 6, 1, "", "main"], [8, 5, 1, "", "ndarray"], [8, 6, 1, "", "slice"], [8, 6, 1, "", "sliceGeneric"], [8, 6, 1, "", "splitAt"], [8, 6, 1, "", "take"], [8, 6, 1, "", "zipArr"]], "NDArray._tensor_resource": [[8, 3, 1, "", "data"], [8, 3, 1, "", "eltType"], [8, 3, 1, "", "rank"]], "NDArray.ndarray": [[8, 2, 1, "", "_dom"], [8, 3, 1, "", "_domain"], [8, 2, 1, "", "arange"], [8, 2, 1, "", "argmax"], [8, 4, 1, "", "batchify"], [8, 2, 1, "", "contract"], [8, 2, 1, "", "convolve"], [8, 3, 1, "", "data"], [8, 2, 1, "", "dilate"], [8, 2, 1, "", "einsum"], [8, 3, 1, "", "eltType"], [8, 2, 1, "", "expand"], [8, 2, 1, "", "fromRanges"], [8, 2, 1, "", "fullOuter"], [8, 2, 1, "", "init"], [8, 2, 1, "", "init="], [8, 2, 1, "", "kernelRot"], [8, 2, 1, "", "matvecmul"], [8, 2, 1, "", "max"], [8, 2, 1, "", "maxPool"], [8, 2, 1, "", "pad"], [8, 2, 1, "", "permute"], [8, 2, 1, "", "populateRemote"], [8, 3, 1, "", "rank"], [8, 2, 1, "", "read"], [8, 2, 1, "", "relu"], [8, 2, 1, "", "reshape"], [8, 2, 1, "", "reshapeDomain"], [8, 2, 1, "", "serialize"], [8, 2, 1, "", "setData"], [8, 2, 1, "", "shape"], [8, 2, 1, "", "shrink"], [8, 2, 1, "", "slice"], [8, 2, 1, "", "squeeze"], [8, 2, 1, "", "sum"], [8, 2, 1, "", "sumAxesMask"], [8, 2, 1, "", "sumOneAxis"], [8, 2, 1, "", "this"], [8, 2, 1, "", "toRemote"], [8, 2, 1, "", "write"]], "Network": [[9, 1, 1, "", "Conv2D"], [9, 1, 1, "", "Dropout"], [9, 1, 1, "", "Flatten"], [9, 1, 1, "", "Linear"], [9, 1, 1, "", "MaxPool"], [9, 1, 1, "", "Module"], [9, 1, 1, "", "ModuleSpecification"], [9, 1, 1, "", "Net"], [9, 1, 1, "", "Parameter"], [9, 1, 1, "", "ReLU"], [9, 1, 1, "", "Sequential"], [9, 1, 1, "", "Softmax"], [9, 6, 1, "", "chain"], [9, 6, 1, "", "helpFindModuleByName"], [9, 6, 1, "", "helpFindParamDataByName"], [9, 6, 1, "", "loadModel"], [9, 6, 1, "", "main"], [9, 6, 1, "", "modelFromSpecFile"], [9, 5, 1, "", "moduleAttributes"], [9, 5, 1, "", "moduleChildren"], [9, 6, 1, "", "moduleFromSpec"], [9, 7, 1, "", "moduleInstances"]], "Network.Conv2D": [[9, 2, 1, "", "attributes"], [9, 3, 1, "", "bias"], [9, 2, 1, "", "forward"], [9, 2, 1, "", "init"], [9, 3, 1, "", "kernel"], [9, 3, 1, "", "kernelShape"], [9, 2, 1, "", "setup"], [9, 3, 1, "", "stride"]], "Network.Dropout": [[9, 2, 1, "", "attributes"], [9, 2, 1, "", "forward"], [9, 2, 1, "", "init"]], "Network.Flatten": [[9, 2, 1, "", "attributes"], [9, 2, 1, "", "forward"], [9, 2, 1, "", "init"]], "Network.Linear": [[9, 2, 1, "", "attributes"], [9, 3, 1, "", "bias"], [9, 2, 1, "", "forward"], [9, 2, 1, "", "init"], [9, 3, 1, "", "m"], [9, 3, 1, "", "n"], [9, 2, 1, "", "setup"], [9, 3, 1, "", "weight"]], "Network.MaxPool": [[9, 2, 1, "", "attributes"], [9, 2, 1, "", "forward"], [9, 2, 1, "", "init"], [9, 3, 1, "", "poolSize"]], "Network.Module": [[9, 2, 1, "", "addModule"], [9, 2, 1, "", "addParameter"], [9, 2, 1, "", "attributes"], [9, 3, 1, "", "eltType"], [9, 2, 1, "", "forward"], [9, 2, 1, "", "getSubModuleName"], [9, 2, 1, "", "init"], [9, 2, 1, "", "loadPyTorchDump"], [9, 2, 1, "", "mod"], [9, 3, 1, "", "moduleId"], [9, 3, 1, "", "moduleName"], [9, 4, 1, "", "moduleNames"], [9, 4, 1, "", "modules"], [9, 4, 1, "", "namedModules"], [9, 3, 1, "", "ownedModules"], [9, 2, 1, "", "par"], [9, 4, 1, "", "parameterNames"], [9, 4, 1, "", "parameters"], [9, 2, 1, "", "setup"], [9, 2, 1, "", "signature"], [9, 3, 1, "", "subModules"], [9, 2, 1, "", "this"]], "Network.ModuleSpecification": [[9, 3, 1, "", "attributes"], [9, 3, 1, "", "layerType"], [9, 3, 1, "", "subModuleOrder"], [9, 3, 1, "", "subModules"]], "Network.Net": [[9, 2, 1, "", "forward"], [9, 2, 1, "", "init"]], "Network.Parameter": [[9, 2, 1, "", "attributes"], [9, 3, 1, "", "data"], [9, 2, 1, "", "init"]], "Network.ReLU": [[9, 2, 1, "", "attributes"], [9, 2, 1, "", "forward"], [9, 2, 1, "", "init"]], "Network.Sequential": [[9, 2, 1, "", "attributes"], [9, 2, 1, "", "forward"], [9, 2, 1, "", "init"], [9, 3, 1, "", "mds"]], "Network.Softmax": [[9, 2, 1, "", "attributes"], [9, 2, 1, "", "forward"], [9, 2, 1, "", "init"]], "Network.class": [[9, 4, 1, "", "moduleFieldNames"], [9, 4, 1, "", "moduleFields"], [9, 2, 1, "", "postinit"], [9, 2, 1, "", "registerModules"], [9, 2, 1, "", "this"]], "Network.moduleAttributes": [[9, 2, 1, "", ":"], [9, 3, 1, "", "attributes"], [9, 2, 1, "", "getInt"], [9, 2, 1, "", "init"], [9, 3, 1, "", "layerType"], [9, 3, 1, "", "moduleName"], [9, 2, 1, "", "prettyPrint"], [9, 2, 1, "", "prettyPrintSpec"]], "Network.moduleChildren": [[9, 2, 1, "", "add"], [9, 3, 1, "", "childDict"], [9, 3, 1, "", "eltType"], [9, 2, 1, "", "init"], [9, 4, 1, "", "items"], [9, 2, 1, "", "ith"], [9, 3, 1, "", "order"], [9, 4, 1, "", "these"]], "OrderedDict": [[10, 5, 1, "", "dict"]], "OrderedDict.dict": [[10, 2, 1, "", "init"], [10, 2, 1, "", "insert"], [10, 3, 1, "", "keyType"], [10, 4, 1, "", "keys"], [10, 3, 1, "", "order"], [10, 2, 1, "", "size"], [10, 3, 1, "", "table"], [10, 4, 1, "", "these"], [10, 3, 1, "", "valType"], [10, 4, 1, "", "values"]], "Remote": [[11, 1, 1, "", "Remote"], [11, 1, 1, "", "_RemoteVarContainer"], [11, 6, 1, "", "chpl__buildRemoteWrapper"], [11, 2, 1, "", "ref"]], "Remote.Remote": [[11, 2, 1, "", "copy"], [11, 2, 1, "", "copyContainer"], [11, 2, 1, "", "copyTo"], [11, 2, 1, "", "defaultDevice"], [11, 2, 1, "", "device"], [11, 3, 1, "", "eltType"], [11, 2, 1, "", "get"], [11, 2, 1, "", "init"], [11, 2, 1, "", "ptr"], [11, 2, 1, "", "to"], [11, 3, 1, "", "value"]], "Remote._RemoteVarContainer": [[11, 3, 1, "", "containedValue"]], "SimpleDomain": [[12, 6, 1, "SimpleDomain.&", "&amp;"], [12, 6, 1, "", "+"], [12, 6, 1, "", "-"], [12, 6, 1, "", "="], [12, 6, 1, "", "computeAtIndex"], [12, 6, 1, "", "computeBlocks"], [12, 6, 1, "", "computeSize"], [12, 6, 1, "", "computeStrides"], [12, 6, 1, "", "isDomain"], [12, 6, 1, "", "isRegularDomain"], [12, 6, 1, "", "isTupleOfOrder"], [12, 5, 1, "", "rect"], [12, 6, 1, "", "simpleTupleType"], [12, 8, 1, "", "tuple"], [12, 6, 1, "", "unwrap"], [12, 6, 1, "", "wrap"], [12, 6, 1, "", "zeroTup"]], "SimpleDomain.rect": [[12, 2, 1, "", ":"], [12, 2, 1, "", "atIndex"], [12, 2, 1, "", "contains"], [12, 2, 1, "", "coords"], [12, 2, 1, "", "dims"], [12, 4, 1, "", "eachOrder"], [12, 2, 1, "", "high"], [12, 2, 1, "", "indexAt"], [12, 2, 1, "", "init"], [12, 2, 1, "", "init="], [12, 2, 1, "", "low"], [12, 3, 1, "", "offset"], [12, 2, 1, "", "originate"], [12, 3, 1, "", "rank"], [12, 4, 1, "", "serialIter"], [12, 2, 1, "", "serialize"], [12, 3, 1, "", "shape"], [12, 2, 1, "", "shiftedShape"], [12, 3, 1, "", "size"], [12, 3, 1, "", "strides"], [12, 4, 1, "", "these"], [12, 2, 1, "", "toString"], [12, 2, 1, "", "translate"]], "SimpleDomain.tuple": [[12, 2, 1, "", "eltType"], [12, 2, 1, "", "first"], [12, 2, 1, "", "head"], [12, 2, 1, "", "last"], [12, 2, 1, "", "tail"], [12, 2, 1, "", "uncons"]], "Standard._domain": [[16, 4, 1, "", "each"], [16, 4, 1, "", "every"], [16, 4, 1, "", "everyZip"], [16, 2, 1, "", "fastNormalDims"], [16, 2, 1, "", "fastShape"], [16, 2, 1, "", "indexAt"], [16, 2, 1, "", "isNormal"], [16, 2, 1, "", "myShape"], [16, 2, 1, "", "normalize"]], "Standard._tuple": [[16, 4, 1, "", "each"], [16, 2, 1, "", "eltType"], [16, 2, 1, "", "imageType"], [16, 2, 1, "", "indexAt"], [16, 2, 1, "", "insertIdx"], [16, 2, 1, "", "map"], [16, 2, 1, "", "removeIdx"], [16, 2, 1, "", "slice"], [16, 2, 1, "", "untuplify"]], "Standard.string": [[16, 2, 1, "", "countOccurrences"], [16, 2, 1, "", "drop"], [16, 2, 1, "", "slice"], [16, 2, 1, "", "take"], [16, 2, 1, "", "takeUntil"], [16, 2, 1, "", "this"]], "StaticTensor": [[13, 6, 1, "", "*"], [13, 6, 1, "", "+"], [13, 6, 1, "", "-"], [13, 6, 1, "", "/"], [13, 6, 1, "", ":"], [13, 7, 1, "", "diag"], [13, 6, 1, "", "main"], [13, 6, 1, "", "matvec"], [13, 7, 1, "", "n"], [13, 7, 1, "", "size"], [13, 5, 1, "", "staticTensor"], [13, 8, 1, "", "tensor"], [13, 6, 1, "", "tensorFromCtx"]], "StaticTensor.staticTensor": [[13, 2, 1, "", "_dom"], [13, 2, 1, "", "_setArrayData"], [13, 2, 1, "", "arange"], [13, 2, 1, "", "convolve"], [13, 2, 1, "", "detach"], [13, 2, 1, "", "dilate"], [13, 3, 1, "", "eltType"], [13, 2, 1, "", "exp"], [13, 2, 1, "", "expand"], [13, 2, 1, "", "fromShape"], [13, 2, 1, "", "init"], [13, 2, 1, "", "matvecmul"], [13, 2, 1, "", "matvecmulFast"], [13, 2, 1, "", "max"], [13, 2, 1, "", "maxPool"], [13, 2, 1, "", "meta"], [13, 2, 1, "", "ones"], [13, 2, 1, "", "pad"], [13, 2, 1, "", "permute"], [13, 3, 1, "", "rank"], [13, 2, 1, "", "read"], [13, 2, 1, "", "relu"], [13, 2, 1, "", "reshape"], [13, 2, 1, "", "reshapeDomain"], [13, 3, 1, "", "resource"], [13, 2, 1, "", "serialize"], [13, 2, 1, "", "shrink"], [13, 2, 1, "", "slice"], [13, 2, 1, "", "softmax"], [13, 2, 1, "", "sum"], [13, 2, 1, "", "this"], [13, 2, 1, "", "unsqueeze"], [13, 2, 1, "", "zeros"]], "Types": [[17, 8, 1, "", "f32"], [17, 8, 1, "", "f64"], [17, 8, 1, "", "stdRange"]], "Utilities": [[15, 6, 1, "", "argsort"], [15, 9, 1, "", "cartesian"], [15, 7, 1, "", "debugPrint"], [15, 6, 1, "", "debugWrite"], [15, 6, 1, "", "domainFromShape"], [15, 6, 1, "", "emptyDomain"], [15, 6, 1, "", "err"], [15, 9, 1, "", "fastEach"], [15, 9, 1, "", "flatIter"], [15, 6, 1, "", "indexAt"], [15, 6, 1, "", "indexAtHelperMultiples"], [15, 6, 1, "", "indexAtHelperProd"], [15, 6, 1, "", "indexInShape"], [15, 6, 1, "", "linearIdx"], [15, 7, 1, "", "loopGpuSupport"], [15, 6, 1, "", "nbase"], [15, 6, 1, "", "normalizeArray"], [15, 6, 1, "", "normalizeDomain"], [15, 6, 1, "", "product"], [15, 6, 1, "", "rangeFromBound"], [15, 6, 1, "", "rangeFromStart"], [15, 6, 1, "", "rangesFromBounds"], [15, 6, 1, "", "rangesFromShape"], [15, 6, 1, "", "targetGpu"]]}, "objtypes": {"0": "chpl:module", "1": "chpl:class", "2": "chpl:method", "3": "chpl:attribute", "4": "chpl:itermethod", "5": "chpl:record", "6": "chpl:function", "7": "chpl:data", "8": "chpl:type", "9": "chpl:iterfunction"}, "objnames": {"0": ["chpl", "module", " module"], "1": ["chpl", "class", " class"], "2": ["chpl", "method", " method"], "3": ["chpl", "attribute", " attribute"], "4": ["chpl", "itermethod", " itermethod"], "5": ["chpl", "record", " record"], "6": ["chpl", "function", " function"], "7": ["chpl", "data", " data"], "8": ["chpl", "type", " type"], "9": ["chpl", "iterfunction", " iterfunction"]}, "titleterms": {"chpldoc": 0, "document": 0, "indic": 0, "tabl": 0, "convlayertest": 1, "mnistnet": 2, "modulespec": 3, "multilocaleinfer": 4, "autograd": 5, "dynamictensor": 6, "loadnumpi": 7, "ndarrai": 8, "network": 9, "ordereddict": 10, "remot": 11, "simpledomain": 12, "statictensor": 13, "tensor": 14, "util": 15, "standard": 16, "type": 17, "chai": 18}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx": 60}, "alltitles": {"chpldoc documentation": [[0, "chpldoc-documentation"]], "Indices and tables": [[0, "indices-and-tables"]], "ConvLayerTest": [[1, "convlayertest"]], "MNISTNet": [[2, "mnistnet"]], "ModuleSpec": [[3, "modulespec"]], "MultiLocaleInference": [[4, "multilocaleinference"]], "Autograd": [[5, "autograd"]], "DynamicTensor": [[6, "dynamictensor"]], "LoadNumpy": [[7, "loadnumpy"]], "NDArray": [[8, "ndarray"]], "Network": [[9, "network"]], "OrderedDict": [[10, "ordereddict"]], "Remote": [[11, "remote"]], "SimpleDomain": [[12, "simpledomain"]], "StaticTensor": [[13, "statictensor"]], "Tensor": [[14, "tensor"]], "Utilities": [[15, "utilities"]], "Standard": [[16, "standard"]], "Types": [[17, "types"]], "ChAI": [[18, "chai"]]}, "indexentries": {"convlayertest (module)": [[1, "module-ConvLayerTest"]], "conv (in module convlayertest)": [[1, "ConvLayerTest.conv"]], "output (in module convlayertest)": [[1, "ConvLayerTest.output"]], "t (in module convlayertest)": [[1, "ConvLayerTest.t"]], "cnn (class in mnistnet)": [[2, "MNISTNet.CNN"]], "mnistnet (module)": [[2, "module-MNISTNet"]], "cnn (in module mnistnet)": [[2, "MNISTNet.cnn"]], "cnn2 (in module mnistnet)": [[2, "MNISTNet.cnn2"]], "conv1 (mnistnet.cnn attribute)": [[2, "MNISTNet.CNN.conv1"]], "conv2 (mnistnet.cnn attribute)": [[2, "MNISTNet.CNN.conv2"]], "diag (in module mnistnet)": [[2, "MNISTNet.diag"]], "dropout1 (mnistnet.cnn attribute)": [[2, "MNISTNet.CNN.dropout1"]], "dropout2 (mnistnet.cnn attribute)": [[2, "MNISTNet.CNN.dropout2"]], "dtype (in module mnistnet)": [[2, "MNISTNet.dtype"]], "fc1 (mnistnet.cnn attribute)": [[2, "MNISTNet.CNN.fc1"]], "fc2 (mnistnet.cnn attribute)": [[2, "MNISTNet.CNN.fc2"]], "flatten (mnistnet.cnn attribute)": [[2, "MNISTNet.CNN.flatten"]], "forward() (mnistnet.cnn method)": [[2, "MNISTNet.CNN.forward"]], "imagecount (in module mnistnet)": [[2, "MNISTNet.imageCount"]], "images (in module mnistnet)": [[2, "MNISTNet.images"]], "img (in module mnistnet)": [[2, "MNISTNet.img"]], "init() (mnistnet.cnn method)": [[2, "MNISTNet.CNN.init"]], "layerdebug (in module mnistnet)": [[2, "MNISTNet.layerDebug"]], "model (in module mnistnet)": [[2, "MNISTNet.model"]], "modelpath (in module mnistnet)": [[2, "MNISTNet.modelPath"]], "numtimes (in module mnistnet)": [[2, "MNISTNet.numTimes"]], "output (in module mnistnet)": [[2, "MNISTNet.output"]], "preds (in module mnistnet)": [[2, "MNISTNet.preds"]], "printresults (in module mnistnet)": [[2, "MNISTNet.printResults"]], "testimgsize (in module mnistnet)": [[2, "MNISTNet.testImgSize"]], "modulespec (module)": [[3, "module-ModuleSpec"]], "detach (in module modulespec)": [[3, "ModuleSpec.detach"]], "images (in module modulespec)": [[3, "ModuleSpec.images"]], "model (in module modulespec)": [[3, "ModuleSpec.model"]], "numimages (in module modulespec)": [[3, "ModuleSpec.numImages"]], "numtimes (in module modulespec)": [[3, "ModuleSpec.numTimes"]], "preds (in module modulespec)": [[3, "ModuleSpec.preds"]], "printresults (in module modulespec)": [[3, "ModuleSpec.printResults"]], "time (in module modulespec)": [[3, "ModuleSpec.time"]], "multilocaleinference (module)": [[4, "module-MultiLocaleInference"]], "averagetime (in module multilocaleinference)": [[4, "MultiLocaleInference.averageTime"]], "detach (in module multilocaleinference)": [[4, "MultiLocaleInference.detach"]], "dtype (in module multilocaleinference)": [[4, "MultiLocaleInference.dtype"]], "images (in module multilocaleinference)": [[4, "MultiLocaleInference.images"]], "imagesd (in module multilocaleinference)": [[4, "MultiLocaleInference.imagesD"]], "localemodels (in module multilocaleinference)": [[4, "MultiLocaleInference.localeModels"]], "localemodelsd (in module multilocaleinference)": [[4, "MultiLocaleInference.localeModelsD"]], "numimages (in module multilocaleinference)": [[4, "MultiLocaleInference.numImages"]], "numtries (in module multilocaleinference)": [[4, "MultiLocaleInference.numTries"]], "preds (in module multilocaleinference)": [[4, "MultiLocaleInference.preds"]], "printresults (in module multilocaleinference)": [[4, "MultiLocaleInference.printResults"]], "totaltime (in module multilocaleinference)": [[4, "MultiLocaleInference.totalTime"]], "autograd (module)": [[5, "module-Autograd"]], "basetensorresource (class in autograd)": [[5, "Autograd.BaseTensorResource"]], "forgetfultensor (class in autograd)": [[5, "Autograd.ForgetfulTensor"]], "tensoressence (class in autograd)": [[5, "Autograd.TensorEssence"]], "tensorresource (class in autograd)": [[5, "Autograd.TensorResource"]], "_relu() (autograd.reluop method)": [[5, "Autograd.reluOp._relu"]], "addop (record in autograd)": [[5, "Autograd.addOp"]], "arg (autograd.padop attribute)": [[5, "Autograd.padOp.arg"]], "arg (autograd.shrinkop attribute)": [[5, "Autograd.shrinkOp.arg"]], "array() (autograd.basetensorresource method)": [[5, "Autograd.BaseTensorResource.array"]], "axes (autograd.maxop attribute)": [[5, "Autograd.maxOp.axes"]], "axes (autograd.sumop attribute)": [[5, "Autograd.sumOp.axes"]], "backward() (autograd.basetensorresource method)": [[5, "Autograd.BaseTensorResource.backward"]], "backward() (autograd.addop method)": [[5, "Autograd.addOp.backward"]], "backward() (autograd.conv2dop method)": [[5, "Autograd.conv2DOp.backward"]], "backward() (autograd.expandop method)": [[5, "Autograd.expandOp.backward"]], "backward() (autograd.layersliceop method)": [[5, "Autograd.layerSliceOp.backward"]], "backward() (autograd.maxop method)": [[5, "Autograd.maxOp.backward"]], "backward() (autograd.multop method)": [[5, "Autograd.multOp.backward"]], "backward() (autograd.padop method)": [[5, "Autograd.padOp.backward"]], "backward() (autograd.permuteop method)": [[5, "Autograd.permuteOp.backward"]], "backward() (autograd.reshapeop method)": [[5, "Autograd.reshapeOp.backward"]], "backward() (autograd.shrinkop method)": [[5, "Autograd.shrinkOp.backward"]], "backward() (autograd.sliceop method)": [[5, "Autograd.sliceOp.backward"]], "backward() (autograd.sumop method)": [[5, "Autograd.sumOp.backward"]], "base (autograd.layersliceop attribute)": [[5, "Autograd.layerSliceOp.base"]], "basevalue (record in autograd)": [[5, "Autograd.baseValue"]], "checkrank() (in module autograd)": [[5, "Autograd.checkRank"]], "children() (autograd.tensoressence iterator)": [[5, "Autograd.TensorEssence.children"]], "children() (autograd.tensorresource iterator)": [[5, "Autograd.TensorResource.children"]], "children() (autograd.addop method)": [[5, "Autograd.addOp.children"]], "children() (autograd.basevalue method)": [[5, "Autograd.baseValue.children"]], "children() (autograd.conv2dop method)": [[5, "Autograd.conv2DOp.children"]], "children() (autograd.divop method)": [[5, "Autograd.divOp.children"]], "children() (autograd.expop method)": [[5, "Autograd.expOp.children"]], "children() (autograd.expandop method)": [[5, "Autograd.expandOp.children"]], "children() (autograd.layersliceop method)": [[5, "Autograd.layerSliceOp.children"]], "children() (autograd.maxop method)": [[5, "Autograd.maxOp.children"]], "children() (autograd.multop method)": [[5, "Autograd.multOp.children"]], "children() (autograd.padop method)": [[5, "Autograd.padOp.children"]], "children() (autograd.permuteop method)": [[5, "Autograd.permuteOp.children"]], "children() (autograd.reluop method)": [[5, "Autograd.reluOp.children"]], "children() (autograd.reshapeop method)": [[5, "Autograd.reshapeOp.children"]], "children() (autograd.shrinkop method)": [[5, "Autograd.shrinkOp.children"]], "children() (autograd.sliceop method)": [[5, "Autograd.sliceOp.children"]], "children() (autograd.subop method)": [[5, "Autograd.subOp.children"]], "children() (autograd.sumop method)": [[5, "Autograd.sumOp.children"]], "conv2dop (record in autograd)": [[5, "Autograd.conv2DOp"]], "dataresource (autograd.basetensorresource attribute)": [[5, "Autograd.BaseTensorResource.dataResource"]], "detach() (autograd.basetensorresource method)": [[5, "Autograd.BaseTensorResource.detach"]], "detach() (autograd.tensorresource method)": [[5, "Autograd.TensorResource.detach"]], "device() (autograd.basetensorresource method)": [[5, "Autograd.BaseTensorResource.device"]], "divop (record in autograd)": [[5, "Autograd.divOp"]], "dom (autograd.sliceop attribute)": [[5, "Autograd.sliceOp.dom"]], "elttype (autograd.tensoressence attribute)": [[5, "Autograd.TensorEssence.eltType"]], "elttype (autograd.addop attribute)": [[5, "Autograd.addOp.eltType"]], "elttype (autograd.conv2dop attribute)": [[5, "Autograd.conv2DOp.eltType"]], "elttype (autograd.expandop attribute)": [[5, "Autograd.expandOp.eltType"]], "elttype (autograd.layersliceop attribute)": [[5, "Autograd.layerSliceOp.eltType"]], "elttype (autograd.maxop attribute)": [[5, "Autograd.maxOp.eltType"]], "elttype (autograd.multop attribute)": [[5, "Autograd.multOp.eltType"]], "elttype (autograd.padop attribute)": [[5, "Autograd.padOp.eltType"]], "elttype (autograd.permuteop attribute)": [[5, "Autograd.permuteOp.eltType"]], "elttype (autograd.reshapeop attribute)": [[5, "Autograd.reshapeOp.eltType"]], "elttype (autograd.shrinkop attribute)": [[5, "Autograd.shrinkOp.eltType"]], "elttype (autograd.sliceop attribute)": [[5, "Autograd.sliceOp.eltType"]], "elttype (autograd.sumop attribute)": [[5, "Autograd.sumOp.eltType"]], "expop (record in autograd)": [[5, "Autograd.expOp"]], "expandop (record in autograd)": [[5, "Autograd.expandOp"]], "expandedshape (autograd.expandop attribute)": [[5, "Autograd.expandOp.expandedShape"]], "features (autograd.conv2dop attribute)": [[5, "Autograd.conv2DOp.features"]], "forcerank() (in module autograd)": [[5, "Autograd.forceRank"]], "forward() (autograd.basetensorresource method)": [[5, "Autograd.BaseTensorResource.forward"]], "forward() (autograd.tensorresource method)": [[5, "Autograd.TensorResource.forward"]], "forward() (autograd.addop method)": [[5, "Autograd.addOp.forward"]], "forward() (autograd.basevalue method)": [[5, "Autograd.baseValue.forward"]], "forward() (autograd.conv2dop method)": [[5, "Autograd.conv2DOp.forward"]], "forward() (autograd.divop method)": [[5, "Autograd.divOp.forward"]], "forward() (autograd.expop method)": [[5, "Autograd.expOp.forward"]], "forward() (autograd.expandop method)": [[5, "Autograd.expandOp.forward"]], "forward() (autograd.layersliceop method)": [[5, "Autograd.layerSliceOp.forward"]], "forward() (autograd.maxop method)": [[5, "Autograd.maxOp.forward"]], "forward() (autograd.multop method)": [[5, "Autograd.multOp.forward"]], "forward() (autograd.padop method)": [[5, "Autograd.padOp.forward"]], "forward() (autograd.permuteop method)": [[5, "Autograd.permuteOp.forward"]], "forward() (autograd.reluop method)": [[5, "Autograd.reluOp.forward"]], "forward() (autograd.reshapeop method)": [[5, "Autograd.reshapeOp.forward"]], "forward() (autograd.shrinkop method)": [[5, "Autograd.shrinkOp.forward"]], "forward() (autograd.sliceop method)": [[5, "Autograd.sliceOp.forward"]], "forward() (autograd.subop method)": [[5, "Autograd.subOp.forward"]], "forward() (autograd.sumop method)": [[5, "Autograd.sumOp.forward"]], "getrank() (in module autograd)": [[5, "Autograd.getRank"]], "grad() (autograd.basetensorresource method)": [[5, "Autograd.BaseTensorResource.grad"]], "gradresource (autograd.basetensorresource attribute)": [[5, "Autograd.BaseTensorResource.gradResource"]], "init() (autograd.basetensorresource method)": [[5, "Autograd.BaseTensorResource.init"]], "init() (autograd.tensorresource method)": [[5, "Autograd.TensorResource.init"]], "input (autograd.expop attribute)": [[5, "Autograd.expOp.input"]], "input (autograd.expandop attribute)": [[5, "Autograd.expandOp.input"]], "input (autograd.maxop attribute)": [[5, "Autograd.maxOp.input"]], "input (autograd.padop attribute)": [[5, "Autograd.padOp.input"]], "input (autograd.permuteop attribute)": [[5, "Autograd.permuteOp.input"]], "input (autograd.reluop attribute)": [[5, "Autograd.reluOp.input"]], "input (autograd.reshapeop attribute)": [[5, "Autograd.reshapeOp.input"]], "input (autograd.shrinkop attribute)": [[5, "Autograd.shrinkOp.input"]], "input (autograd.sliceop attribute)": [[5, "Autograd.sliceOp.input"]], "input (autograd.sumop attribute)": [[5, "Autograd.sumOp.input"]], "kernel (autograd.conv2dop attribute)": [[5, "Autograd.conv2DOp.kernel"]], "layersliceop (record in autograd)": [[5, "Autograd.layerSliceOp"]], "lhs (autograd.addop attribute)": [[5, "Autograd.addOp.lhs"]], "lhs (autograd.divop attribute)": [[5, "Autograd.divOp.lhs"]], "lhs (autograd.multop attribute)": [[5, "Autograd.multOp.lhs"]], "lhs (autograd.subop attribute)": [[5, "Autograd.subOp.lhs"]], "mask (autograd.layersliceop attribute)": [[5, "Autograd.layerSliceOp.mask"]], "maskdomain (autograd.layersliceop attribute)": [[5, "Autograd.layerSliceOp.maskDomain"]], "maxop (record in autograd)": [[5, "Autograd.maxOp"]], "maxrank (autograd.maxop attribute)": [[5, "Autograd.maxOp.maxRank"]], "multop (record in autograd)": [[5, "Autograd.multOp"]], "newrank (autograd.reshapeop attribute)": [[5, "Autograd.reshapeOp.newRank"]], "oldrank (autograd.reshapeop attribute)": [[5, "Autograd.reshapeOp.oldRank"]], "operationctx (autograd.tensorresource attribute)": [[5, "Autograd.TensorResource.operationCtx"]], "operationtype (autograd.tensorresource attribute)": [[5, "Autograd.TensorResource.operationType"]], "outrank() (autograd.sumop method)": [[5, "Autograd.sumOp.outRank"]], "padop (record in autograd)": [[5, "Autograd.padOp"]], "permutation (autograd.permuteop attribute)": [[5, "Autograd.permuteOp.permutation"]], "permuteop (record in autograd)": [[5, "Autograd.permuteOp"]], "rank (autograd.basetensorresource attribute)": [[5, "Autograd.BaseTensorResource.rank"]], "rank (autograd.forgetfultensor attribute)": [[5, "Autograd.ForgetfulTensor.rank"]], "rank (autograd.addop attribute)": [[5, "Autograd.addOp.rank"]], "rank (autograd.expandop attribute)": [[5, "Autograd.expandOp.rank"]], "rank (autograd.layersliceop attribute)": [[5, "Autograd.layerSliceOp.rank"]], "rank (autograd.maxop attribute)": [[5, "Autograd.maxOp.rank"]], "rank (autograd.multop attribute)": [[5, "Autograd.multOp.rank"]], "rank (autograd.padop attribute)": [[5, "Autograd.padOp.rank"]], "rank (autograd.permuteop attribute)": [[5, "Autograd.permuteOp.rank"]], "rank (autograd.shrinkop attribute)": [[5, "Autograd.shrinkOp.rank"]], "rank (autograd.sliceop attribute)": [[5, "Autograd.sliceOp.rank"]], "rank (autograd.sumop attribute)": [[5, "Autograd.sumOp.rank"]], "reluop (record in autograd)": [[5, "Autograd.reluOp"]], "reshapeop (record in autograd)": [[5, "Autograd.reshapeOp"]], "rhs (autograd.addop attribute)": [[5, "Autograd.addOp.rhs"]], "rhs (autograd.divop attribute)": [[5, "Autograd.divOp.rhs"]], "rhs (autograd.multop attribute)": [[5, "Autograd.multOp.rhs"]], "rhs (autograd.subop attribute)": [[5, "Autograd.subOp.rhs"]], "runtimerank() (autograd.basetensorresource method)": [[5, "Autograd.BaseTensorResource.runtimeRank"]], "runtimerank() (autograd.tensoressence method)": [[5, "Autograd.TensorEssence.runtimeRank"]], "shape (autograd.reshapeop attribute)": [[5, "Autograd.reshapeOp.shape"]], "shrinkop (record in autograd)": [[5, "Autograd.shrinkOp"]], "sliceop (record in autograd)": [[5, "Autograd.sliceOp"]], "stride (autograd.conv2dop attribute)": [[5, "Autograd.conv2DOp.stride"]], "subop (record in autograd)": [[5, "Autograd.subOp"]], "sumop (record in autograd)": [[5, "Autograd.sumOp"]], "sumrank (autograd.sumop attribute)": [[5, "Autograd.sumOp.sumRank"]], "to() (autograd.basetensorresource method)": [[5, "Autograd.BaseTensorResource.to"]], "treeheight() (autograd.tensoressence method)": [[5, "Autograd.TensorEssence.treeHeight"]], "value (autograd.padop attribute)": [[5, "Autograd.padOp.value"]], "*() (in module dynamictensor)": [[6, "DynamicTensor.*"]], "+() (in module dynamictensor)": [[6, "DynamicTensor.+"]], "-() (in module dynamictensor)": [[6, "DynamicTensor.-"]], ":() (in module dynamictensor)": [[6, "DynamicTensor.:"]], "dynamictensor (module)": [[6, "module-DynamicTensor"]], "tensor (in module dynamictensor)": [[6, "DynamicTensor.Tensor"]], "arange() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.arange"]], "argmax() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.argmax"]], "array() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.array"]], "checkrank() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.checkRank"]], "convolve() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.convolve"]], "data() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.data"]], "defaultdetachedmode (in module dynamictensor)": [[6, "DynamicTensor.defaultDetachedMode"]], "detach() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.detach"]], "detachmode() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.detachMode"]], "device() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.device"]], "dynamictensor (record in dynamictensor)": [[6, "DynamicTensor.dynamicTensor"]], "elttype (dynamictensor.dynamictensor attribute)": [[6, "DynamicTensor.dynamicTensor.eltType"]], "eraserank() (dynamictensor.statictensor method)": [[6, "DynamicTensor.staticTensor.eraseRank"]], "exp() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.exp"]], "flatten() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.flatten"]], "forcerank() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.forceRank"]], "forcerankmeta() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.forceRankMeta"]], "grad() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.grad"]], "hardcheckrank() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.hardCheckRank"]], "init() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.init"]], "load() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.load"]], "loadfromnumpy() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.loadFromNumpy"]], "main() (in module dynamictensor)": [[6, "DynamicTensor.main"]], "matvecmul() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.matvecmul"]], "matvecmulfast() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.matvecmulFast"]], "max() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.max"]], "maxpool() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.maxPool"]], "maxrank (in module dynamictensor)": [[6, "DynamicTensor.maxRank"]], "meta (dynamictensor.dynamictensor attribute)": [[6, "DynamicTensor.dynamicTensor.meta"]], "multireader() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.multiReader"]], "ones() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.ones"]], "readinplace() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.readInPlace"]], "relu() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.relu"]], "reshape() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.reshape"]], "resource() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.resource"]], "runtimerank (dynamictensor.dynamictensor attribute)": [[6, "DynamicTensor.dynamicTensor.runtimeRank"]], "save() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.save"]], "serialize() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.serialize"]], "slice() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.slice"]], "softmax() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.softmax"]], "sum() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.sum"]], "tensorize() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.tensorize"]], "this() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.this"]], "to() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.to"]], "toarray() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.toArray"]], "tondarray() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.toNDArray"]], "totensor() (dynamictensor.ndarray method)": [[6, "DynamicTensor.ndarray.toTensor"]], "write() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.write"]], "zeros() (dynamictensor.dynamictensor method)": [[6, "DynamicTensor.dynamicTensor.zeros"]], "zipbinop() (in module dynamictensor)": [[6, "DynamicTensor.zipBinOp"]], "arrclass (class in loadnumpy)": [[7, "LoadNumpy.ArrClass"]], "loadnumpy (module)": [[7, "module-LoadNumpy"]], "norankarray (class in loadnumpy)": [[7, "LoadNumpy.NoRankArray"]], "_domain (loadnumpy.arrclass attribute)": [[7, "LoadNumpy.ArrClass._domain"]], "data (loadnumpy.arrclass attribute)": [[7, "LoadNumpy.ArrClass.data"]], "loadnumpyarray() (in module loadnumpy)": [[7, "LoadNumpy.loadNumpyArray"]], "main() (in module loadnumpy)": [[7, "LoadNumpy.main"]], "rank (loadnumpy.arrclass attribute)": [[7, "LoadNumpy.ArrClass.rank"]], "readdata() (in module loadnumpy)": [[7, "LoadNumpy.readData"]], "readshape() (in module loadnumpy)": [[7, "LoadNumpy.readShape"]], "*() (in module ndarray)": [[8, "NDArray.*"]], "+() (in module ndarray)": [[8, "NDArray.+"]], "-() (in module ndarray)": [[8, "NDArray.-"]], "/() (in module ndarray)": [[8, "NDArray./"]], ":() (in module ndarray)": [[8, "NDArray.:"]], "=() (in module ndarray)": [[8, "NDArray.="]], "ndarray (module)": [[8, "module-NDArray"]], "_dom() (ndarray.ndarray method)": [[8, "NDArray.ndarray._dom"]], "_domain (ndarray.ndarray attribute)": [[8, "NDArray.ndarray._domain"]], "_tensor_resource (class in ndarray)": [[8, "NDArray._tensor_resource"]], "arange() (ndarray.ndarray method)": [[8, "NDArray.ndarray.arange"]], "argmax() (ndarray.ndarray method)": [[8, "NDArray.ndarray.argmax"]], "batchify() (ndarray.ndarray iterator)": [[8, "NDArray.ndarray.batchify"]], "contract() (ndarray.ndarray method)": [[8, "NDArray.ndarray.contract"]], "convolve() (ndarray.ndarray method)": [[8, "NDArray.ndarray.convolve"]], "data (ndarray._tensor_resource attribute)": [[8, "NDArray._tensor_resource.data"]], "data (ndarray.ndarray attribute)": [[8, "NDArray.ndarray.data"]], "dilate() (ndarray.ndarray method)": [[8, "NDArray.ndarray.dilate"]], "domaintype (in module ndarray)": [[8, "NDArray.domainType"]], "drop() (in module ndarray)": [[8, "NDArray.drop"]], "einsum() (ndarray.ndarray method)": [[8, "NDArray.ndarray.einsum"]], "elttype (ndarray._tensor_resource attribute)": [[8, "NDArray._tensor_resource.eltType"]], "elttype (ndarray.ndarray attribute)": [[8, "NDArray.ndarray.eltType"]], "expand() (ndarray.ndarray method)": [[8, "NDArray.ndarray.expand"]], "fromranges() (ndarray.ndarray method)": [[8, "NDArray.ndarray.fromRanges"]], "fullouter() (ndarray.ndarray method)": [[8, "NDArray.ndarray.fullOuter"]], "getfirstidx() (in module ndarray)": [[8, "NDArray.getFirstIdx"]], "init() (ndarray.ndarray method)": [[8, "NDArray.ndarray.init"]], "init=() (ndarray.ndarray method)": [[8, "NDArray.ndarray.init="]], "kernelrot() (ndarray.ndarray method)": [[8, "NDArray.ndarray.kernelRot"]], "main() (in module ndarray)": [[8, "NDArray.main"]], "matvecmul() (ndarray.ndarray method)": [[8, "NDArray.ndarray.matvecmul"]], "max() (ndarray.ndarray method)": [[8, "NDArray.ndarray.max"]], "maxpool() (ndarray.ndarray method)": [[8, "NDArray.ndarray.maxPool"]], "ndarray (record in ndarray)": [[8, "NDArray.ndarray"]], "pad() (ndarray.ndarray method)": [[8, "NDArray.ndarray.pad"]], "permute() (ndarray.ndarray method)": [[8, "NDArray.ndarray.permute"]], "populateremote() (ndarray.ndarray method)": [[8, "NDArray.ndarray.populateRemote"]], "rank (ndarray._tensor_resource attribute)": [[8, "NDArray._tensor_resource.rank"]], "rank (ndarray.ndarray attribute)": [[8, "NDArray.ndarray.rank"]], "read() (ndarray.ndarray method)": [[8, "NDArray.ndarray.read"]], "relu() (ndarray.ndarray method)": [[8, "NDArray.ndarray.relu"]], "reshape() (ndarray.ndarray method)": [[8, "NDArray.ndarray.reshape"]], "reshapedomain() (ndarray.ndarray method)": [[8, "NDArray.ndarray.reshapeDomain"]], "serialize() (ndarray.ndarray method)": [[8, "NDArray.ndarray.serialize"]], "setdata() (ndarray.ndarray method)": [[8, "NDArray.ndarray.setData"]], "shape() (ndarray.ndarray method)": [[8, "NDArray.ndarray.shape"]], "shrink() (ndarray.ndarray method)": [[8, "NDArray.ndarray.shrink"]], "slice() (ndarray.ndarray method)": [[8, "NDArray.ndarray.slice"]], "slice() (in module ndarray)": [[8, "NDArray.slice"]], "slicegeneric() (in module ndarray)": [[8, "NDArray.sliceGeneric"]], "splitat() (in module ndarray)": [[8, "NDArray.splitAt"]], "squeeze() (ndarray.ndarray method)": [[8, "NDArray.ndarray.squeeze"]], "sum() (ndarray.ndarray method)": [[8, "NDArray.ndarray.sum"]], "sumaxesmask() (ndarray.ndarray method)": [[8, "NDArray.ndarray.sumAxesMask"]], "sumoneaxis() (ndarray.ndarray method)": [[8, "NDArray.ndarray.sumOneAxis"]], "take() (in module ndarray)": [[8, "NDArray.take"]], "this() (ndarray.ndarray method)": [[8, "NDArray.ndarray.this"]], "toremote() (ndarray.ndarray method)": [[8, "NDArray.ndarray.toRemote"]], "write() (ndarray.ndarray method)": [[8, "NDArray.ndarray.write"]], "ziparr() (in module ndarray)": [[8, "NDArray.zipArr"]], ":() (network.moduleattributes method)": [[9, "Network.moduleAttributes.:"]], "conv2d (class in network)": [[9, "Network.Conv2D"]], "dropout (class in network)": [[9, "Network.Dropout"]], "flatten (class in network)": [[9, "Network.Flatten"]], "linear (class in network)": [[9, "Network.Linear"]], "maxpool (class in network)": [[9, "Network.MaxPool"]], "module (class in network)": [[9, "Network.Module"]], "modulespecification (class in network)": [[9, "Network.ModuleSpecification"]], "net (class in network)": [[9, "Network.Net"]], "network (module)": [[9, "module-Network"]], "parameter (class in network)": [[9, "Network.Parameter"]], "relu (class in network)": [[9, "Network.ReLU"]], "sequential (class in network)": [[9, "Network.Sequential"]], "softmax (class in network)": [[9, "Network.Softmax"]], "add() (network.modulechildren method)": [[9, "Network.moduleChildren.add"]], "addmodule() (network.module method)": [[9, "Network.Module.addModule"]], "addparameter() (network.module method)": [[9, "Network.Module.addParameter"]], "attributes (network.modulespecification attribute)": [[9, "Network.ModuleSpecification.attributes"]], "attributes (network.moduleattributes attribute)": [[9, "Network.moduleAttributes.attributes"]], "attributes() (network.conv2d method)": [[9, "Network.Conv2D.attributes"]], "attributes() (network.dropout method)": [[9, "Network.Dropout.attributes"]], "attributes() (network.flatten method)": [[9, "Network.Flatten.attributes"]], "attributes() (network.linear method)": [[9, "Network.Linear.attributes"]], "attributes() (network.maxpool method)": [[9, "Network.MaxPool.attributes"]], "attributes() (network.module method)": [[9, "Network.Module.attributes"]], "attributes() (network.parameter method)": [[9, "Network.Parameter.attributes"]], "attributes() (network.relu method)": [[9, "Network.ReLU.attributes"]], "attributes() (network.sequential method)": [[9, "Network.Sequential.attributes"]], "attributes() (network.softmax method)": [[9, "Network.Softmax.attributes"]], "bias (network.conv2d attribute)": [[9, "Network.Conv2D.bias"]], "bias (network.linear attribute)": [[9, "Network.Linear.bias"]], "chain() (in module network)": [[9, "Network.chain"]], "childdict (network.modulechildren attribute)": [[9, "Network.moduleChildren.childDict"]], "data (network.parameter attribute)": [[9, "Network.Parameter.data"]], "elttype (network.module attribute)": [[9, "Network.Module.eltType"]], "elttype (network.modulechildren attribute)": [[9, "Network.moduleChildren.eltType"]], "forward() (network.conv2d method)": [[9, "Network.Conv2D.forward"]], "forward() (network.dropout method)": [[9, "Network.Dropout.forward"]], "forward() (network.flatten method)": [[9, "Network.Flatten.forward"]], "forward() (network.linear method)": [[9, "Network.Linear.forward"]], "forward() (network.maxpool method)": [[9, "Network.MaxPool.forward"]], "forward() (network.module method)": [[9, "Network.Module.forward"]], "forward() (network.net method)": [[9, "Network.Net.forward"]], "forward() (network.relu method)": [[9, "Network.ReLU.forward"]], "forward() (network.sequential method)": [[9, "Network.Sequential.forward"]], "forward() (network.softmax method)": [[9, "Network.Softmax.forward"]], "getint() (network.moduleattributes method)": [[9, "Network.moduleAttributes.getInt"]], "getsubmodulename() (network.module method)": [[9, "Network.Module.getSubModuleName"]], "helpfindmodulebyname() (in module network)": [[9, "Network.helpFindModuleByName"]], "helpfindparamdatabyname() (in module network)": [[9, "Network.helpFindParamDataByName"]], "init() (network.conv2d method)": [[9, "Network.Conv2D.init"]], "init() (network.dropout method)": [[9, "Network.Dropout.init"]], "init() (network.flatten method)": [[9, "Network.Flatten.init"]], "init() (network.linear method)": [[9, "Network.Linear.init"]], "init() (network.maxpool method)": [[9, "Network.MaxPool.init"]], "init() (network.module method)": [[9, "Network.Module.init"]], "init() (network.net method)": [[9, "Network.Net.init"]], "init() (network.parameter method)": [[9, "Network.Parameter.init"]], "init() (network.relu method)": [[9, "Network.ReLU.init"]], "init() (network.sequential method)": [[9, "Network.Sequential.init"]], "init() (network.softmax method)": [[9, "Network.Softmax.init"]], "init() (network.moduleattributes method)": [[9, "Network.moduleAttributes.init"]], "init() (network.modulechildren method)": [[9, "Network.moduleChildren.init"]], "items() (network.modulechildren iterator)": [[9, "Network.moduleChildren.items"]], "ith() (network.modulechildren method)": [[9, "Network.moduleChildren.ith"]], "kernel (network.conv2d attribute)": [[9, "Network.Conv2D.kernel"]], "kernelshape (network.conv2d attribute)": [[9, "Network.Conv2D.kernelShape"]], "layertype (network.modulespecification attribute)": [[9, "Network.ModuleSpecification.layerType"]], "layertype (network.moduleattributes attribute)": [[9, "Network.moduleAttributes.layerType"]], "loadmodel() (in module network)": [[9, "Network.loadModel"]], "loadpytorchdump() (network.module method)": [[9, "Network.Module.loadPyTorchDump"]], "m (network.linear attribute)": [[9, "Network.Linear.m"]], "main() (in module network)": [[9, "Network.main"]], "mds (network.sequential attribute)": [[9, "Network.Sequential.mds"]], "mod() (network.module method)": [[9, "Network.Module.mod"]], "modelfromspecfile() (in module network)": [[9, "Network.modelFromSpecFile"]], "moduleattributes (record in network)": [[9, "Network.moduleAttributes"]], "modulechildren (record in network)": [[9, "Network.moduleChildren"]], "modulefieldnames() (network.class iterator)": [[9, "Network.class.moduleFieldNames"]], "modulefields() (network.class iterator)": [[9, "Network.class.moduleFields"]], "modulefromspec() (in module network)": [[9, "Network.moduleFromSpec"]], "moduleid (network.module attribute)": [[9, "Network.Module.moduleId"]], "moduleinstances (in module network)": [[9, "Network.moduleInstances"]], "modulename (network.module attribute)": [[9, "Network.Module.moduleName"]], "modulename (network.moduleattributes attribute)": [[9, "Network.moduleAttributes.moduleName"]], "modulenames() (network.module iterator)": [[9, "Network.Module.moduleNames"]], "modules() (network.module iterator)": [[9, "Network.Module.modules"]], "n (network.linear attribute)": [[9, "Network.Linear.n"]], "namedmodules() (network.module iterator)": [[9, "Network.Module.namedModules"]], "order (network.modulechildren attribute)": [[9, "Network.moduleChildren.order"]], "ownedmodules (network.module attribute)": [[9, "Network.Module.ownedModules"]], "par() (network.module method)": [[9, "Network.Module.par"]], "parameternames() (network.module iterator)": [[9, "Network.Module.parameterNames"]], "parameters() (network.module iterator)": [[9, "Network.Module.parameters"]], "poolsize (network.maxpool attribute)": [[9, "Network.MaxPool.poolSize"]], "postinit() (network.class method)": [[9, "Network.class.postinit"]], "prettyprint() (network.moduleattributes method)": [[9, "Network.moduleAttributes.prettyPrint"]], "prettyprintspec() (network.moduleattributes method)": [[9, "Network.moduleAttributes.prettyPrintSpec"]], "registermodules() (network.class method)": [[9, "Network.class.registerModules"]], "setup() (network.conv2d method)": [[9, "Network.Conv2D.setup"]], "setup() (network.linear method)": [[9, "Network.Linear.setup"]], "setup() (network.module method)": [[9, "Network.Module.setup"]], "signature() (network.module method)": [[9, "Network.Module.signature"]], "stride (network.conv2d attribute)": [[9, "Network.Conv2D.stride"]], "submoduleorder (network.modulespecification attribute)": [[9, "Network.ModuleSpecification.subModuleOrder"]], "submodules (network.module attribute)": [[9, "Network.Module.subModules"]], "submodules (network.modulespecification attribute)": [[9, "Network.ModuleSpecification.subModules"]], "these() (network.modulechildren iterator)": [[9, "Network.moduleChildren.these"]], "this() (network.module method)": [[9, "Network.Module.this"]], "this() (network.class method)": [[9, "Network.class.this"]], "weight (network.linear attribute)": [[9, "Network.Linear.weight"]], "ordereddict (module)": [[10, "module-OrderedDict"]], "dict (record in ordereddict)": [[10, "OrderedDict.dict"]], "init() (ordereddict.dict method)": [[10, "OrderedDict.dict.init"]], "insert() (ordereddict.dict method)": [[10, "OrderedDict.dict.insert"]], "keytype (ordereddict.dict attribute)": [[10, "OrderedDict.dict.keyType"]], "keys() (ordereddict.dict iterator)": [[10, "OrderedDict.dict.keys"]], "order (ordereddict.dict attribute)": [[10, "OrderedDict.dict.order"]], "size() (ordereddict.dict method)": [[10, "OrderedDict.dict.size"]], "table (ordereddict.dict attribute)": [[10, "OrderedDict.dict.table"]], "these() (ordereddict.dict iterator)": [[10, "OrderedDict.dict.these"]], "valtype (ordereddict.dict attribute)": [[10, "OrderedDict.dict.valType"]], "values() (ordereddict.dict iterator)": [[10, "OrderedDict.dict.values"]], "remote (class in remote)": [[11, "Remote.Remote"]], "remote (module)": [[11, "module-Remote"]], "_remotevarcontainer (class in remote)": [[11, "Remote._RemoteVarContainer"]], "chpl__buildremotewrapper() (in module remote)": [[11, "Remote.chpl__buildRemoteWrapper"]], "containedvalue (remote._remotevarcontainer attribute)": [[11, "Remote._RemoteVarContainer.containedValue"]], "copy() (remote.remote method)": [[11, "Remote.Remote.copy"]], "copycontainer() (remote.remote method)": [[11, "Remote.Remote.copyContainer"]], "copyto() (remote.remote method)": [[11, "Remote.Remote.copyTo"]], "defaultdevice() (remote.remote method)": [[11, "Remote.Remote.defaultDevice"]], "device() (remote.remote method)": [[11, "Remote.Remote.device"]], "elttype (remote.remote attribute)": [[11, "Remote.Remote.eltType"]], "get() (remote.remote method)": [[11, "Remote.Remote.get"]], "init() (remote.remote method)": [[11, "Remote.Remote.init"]], "ptr() (remote.remote method)": [[11, "Remote.Remote.ptr"]], "ref() (in module remote)": [[11, "Remote.ref"]], "to() (remote.remote method)": [[11, "Remote.Remote.to"]], "value (remote.remote attribute)": [[11, "Remote.Remote.value"]], "&() (in module simpledomain)": [[12, "SimpleDomain.&"]], "+() (in module simpledomain)": [[12, "SimpleDomain.+"]], "-() (in module simpledomain)": [[12, "SimpleDomain.-"]], ":() (simpledomain.rect method)": [[12, "SimpleDomain.rect.:"]], "=() (in module simpledomain)": [[12, "SimpleDomain.="]], "simpledomain (module)": [[12, "module-SimpleDomain"]], "atindex() (simpledomain.rect method)": [[12, "SimpleDomain.rect.atIndex"]], "computeatindex() (in module simpledomain)": [[12, "SimpleDomain.computeAtIndex"]], "computeblocks() (in module simpledomain)": [[12, "SimpleDomain.computeBlocks"]], "computesize() (in module simpledomain)": [[12, "SimpleDomain.computeSize"]], "computestrides() (in module simpledomain)": [[12, "SimpleDomain.computeStrides"]], "contains() (simpledomain.rect method)": [[12, "SimpleDomain.rect.contains"]], "coords() (simpledomain.rect method)": [[12, "SimpleDomain.rect.coords"]], "dims() (simpledomain.rect method)": [[12, "SimpleDomain.rect.dims"]], "eachorder() (simpledomain.rect iterator)": [[12, "SimpleDomain.rect.eachOrder"]], "elttype() (simpledomain.tuple method)": [[12, "SimpleDomain.tuple.eltType"]], "first() (simpledomain.tuple method)": [[12, "SimpleDomain.tuple.first"]], "head() (simpledomain.tuple method)": [[12, "SimpleDomain.tuple.head"]], "high() (simpledomain.rect method)": [[12, "SimpleDomain.rect.high"]], "indexat() (simpledomain.rect method)": [[12, "SimpleDomain.rect.indexAt"]], "init() (simpledomain.rect method)": [[12, "SimpleDomain.rect.init"]], "init=() (simpledomain.rect method)": [[12, "SimpleDomain.rect.init="]], "isdomain() (in module simpledomain)": [[12, "SimpleDomain.isDomain"]], "isregulardomain() (in module simpledomain)": [[12, "SimpleDomain.isRegularDomain"]], "istupleoforder() (in module simpledomain)": [[12, "SimpleDomain.isTupleOfOrder"]], "last() (simpledomain.tuple method)": [[12, "SimpleDomain.tuple.last"]], "low() (simpledomain.rect method)": [[12, "SimpleDomain.rect.low"]], "offset (simpledomain.rect attribute)": [[12, "SimpleDomain.rect.offset"]], "originate() (simpledomain.rect method)": [[12, "SimpleDomain.rect.originate"]], "rank (simpledomain.rect attribute)": [[12, "SimpleDomain.rect.rank"]], "rect (record in simpledomain)": [[12, "SimpleDomain.rect"]], "serialiter() (simpledomain.rect iterator)": [[12, "SimpleDomain.rect.serialIter"]], "serialize() (simpledomain.rect method)": [[12, "SimpleDomain.rect.serialize"]], "shape (simpledomain.rect attribute)": [[12, "SimpleDomain.rect.shape"]], "shiftedshape() (simpledomain.rect method)": [[12, "SimpleDomain.rect.shiftedShape"]], "simpletupletype() (in module simpledomain)": [[12, "SimpleDomain.simpleTupleType"]], "size (simpledomain.rect attribute)": [[12, "SimpleDomain.rect.size"]], "strides (simpledomain.rect attribute)": [[12, "SimpleDomain.rect.strides"]], "tail() (simpledomain.tuple method)": [[12, "SimpleDomain.tuple.tail"]], "these() (simpledomain.rect iterator)": [[12, "SimpleDomain.rect.these"]], "tostring() (simpledomain.rect method)": [[12, "SimpleDomain.rect.toString"]], "translate() (simpledomain.rect method)": [[12, "SimpleDomain.rect.translate"]], "tuple (in module simpledomain)": [[12, "SimpleDomain.tuple"]], "uncons() (simpledomain.tuple method)": [[12, "SimpleDomain.tuple.uncons"]], "unwrap() (in module simpledomain)": [[12, "SimpleDomain.unwrap"]], "wrap() (in module simpledomain)": [[12, "SimpleDomain.wrap"]], "zerotup() (in module simpledomain)": [[12, "SimpleDomain.zeroTup"]], "*() (in module statictensor)": [[13, "StaticTensor.*"]], "+() (in module statictensor)": [[13, "StaticTensor.+"]], "-() (in module statictensor)": [[13, "StaticTensor.-"]], "/() (in module statictensor)": [[13, "StaticTensor./"]], ":() (in module statictensor)": [[13, "StaticTensor.:"]], "statictensor (module)": [[13, "module-StaticTensor"]], "_dom() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor._dom"]], "_setarraydata() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor._setArrayData"]], "arange() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor.arange"]], "convolve() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor.convolve"]], "detach() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor.detach"]], "diag (in module statictensor)": [[13, "StaticTensor.diag"]], "dilate() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor.dilate"]], "elttype (statictensor.statictensor attribute)": [[13, "StaticTensor.staticTensor.eltType"]], "exp() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor.exp"]], "expand() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor.expand"]], "fromshape() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor.fromShape"]], "init() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor.init"]], "main() (in module statictensor)": [[13, "StaticTensor.main"]], "matvec() (in module statictensor)": [[13, "StaticTensor.matvec"]], "matvecmul() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor.matvecmul"]], "matvecmulfast() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor.matvecmulFast"]], "max() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor.max"]], "maxpool() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor.maxPool"]], "meta() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor.meta"]], "n (in module statictensor)": [[13, "StaticTensor.n"]], "ones() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor.ones"]], "pad() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor.pad"]], "permute() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor.permute"]], "rank (statictensor.statictensor attribute)": [[13, "StaticTensor.staticTensor.rank"]], "read() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor.read"]], "relu() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor.relu"]], "reshape() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor.reshape"]], "reshapedomain() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor.reshapeDomain"]], "resource (statictensor.statictensor attribute)": [[13, "StaticTensor.staticTensor.resource"]], "serialize() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor.serialize"]], "shrink() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor.shrink"]], "size (in module statictensor)": [[13, "StaticTensor.size"]], "slice() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor.slice"]], "softmax() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor.softmax"]], "statictensor (record in statictensor)": [[13, "StaticTensor.staticTensor"]], "sum() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor.sum"]], "tensor (in module statictensor)": [[13, "StaticTensor.tensor"]], "tensorfromctx() (in module statictensor)": [[13, "StaticTensor.tensorFromCtx"]], "this() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor.this"]], "unsqueeze() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor.unsqueeze"]], "zeros() (statictensor.statictensor method)": [[13, "StaticTensor.staticTensor.zeros"]], "tensor (module)": [[14, "module-Tensor"]], "utilities (module)": [[15, "module-Utilities"]], "argsort() (in module utilities)": [[15, "Utilities.argsort"]], "cartesian() (in module utilities)": [[15, "Utilities.cartesian"]], "debugprint (in module utilities)": [[15, "Utilities.debugPrint"]], "debugwrite() (in module utilities)": [[15, "Utilities.debugWrite"]], "domainfromshape() (in module utilities)": [[15, "Utilities.domainFromShape"]], "emptydomain() (in module utilities)": [[15, "Utilities.emptyDomain"]], "err() (in module utilities)": [[15, "Utilities.err"]], "fasteach() (in module utilities)": [[15, "Utilities.fastEach"]], "flatiter() (in module utilities)": [[15, "Utilities.flatIter"]], "indexat() (in module utilities)": [[15, "Utilities.indexAt"]], "indexathelpermultiples() (in module utilities)": [[15, "Utilities.indexAtHelperMultiples"]], "indexathelperprod() (in module utilities)": [[15, "Utilities.indexAtHelperProd"]], "indexinshape() (in module utilities)": [[15, "Utilities.indexInShape"]], "linearidx() (in module utilities)": [[15, "Utilities.linearIdx"]], "loopgpusupport (in module utilities)": [[15, "Utilities.loopGpuSupport"]], "nbase() (in module utilities)": [[15, "Utilities.nbase"]], "normalizearray() (in module utilities)": [[15, "Utilities.normalizeArray"]], "normalizedomain() (in module utilities)": [[15, "Utilities.normalizeDomain"]], "product() (in module utilities)": [[15, "Utilities.product"]], "rangefrombound() (in module utilities)": [[15, "Utilities.rangeFromBound"]], "rangefromstart() (in module utilities)": [[15, "Utilities.rangeFromStart"]], "rangesfrombounds() (in module utilities)": [[15, "Utilities.rangesFromBounds"]], "rangesfromshape() (in module utilities)": [[15, "Utilities.rangesFromShape"]], "targetgpu() (in module utilities)": [[15, "Utilities.targetGpu"]], "standard (module)": [[16, "module-Standard"]], "countoccurrences() (standard.string method)": [[16, "Standard.string.countOccurrences"]], "drop() (standard.string method)": [[16, "Standard.string.drop"]], "each() (standard._domain iterator)": [[16, "Standard._domain.each"]], "each() (standard._tuple iterator)": [[16, "Standard._tuple.each"]], "elttype() (standard._tuple method)": [[16, "Standard._tuple.eltType"]], "every() (standard._domain iterator)": [[16, "Standard._domain.every"]], "everyzip() (standard._domain iterator)": [[16, "Standard._domain.everyZip"]], "fastnormaldims() (standard._domain method)": [[16, "Standard._domain.fastNormalDims"]], "fastshape() (standard._domain method)": [[16, "Standard._domain.fastShape"]], "imagetype() (standard._tuple method)": [[16, "Standard._tuple.imageType"]], "indexat() (standard._domain method)": [[16, "Standard._domain.indexAt"]], "indexat() (standard._tuple method)": [[16, "Standard._tuple.indexAt"]], "insertidx() (standard._tuple method)": [[16, "Standard._tuple.insertIdx"]], "isnormal() (standard._domain method)": [[16, "Standard._domain.isNormal"]], "map() (standard._tuple method)": [[16, "Standard._tuple.map"]], "myshape() (standard._domain method)": [[16, "Standard._domain.myShape"]], "normalize() (standard._domain method)": [[16, "Standard._domain.normalize"]], "removeidx() (standard._tuple method)": [[16, "Standard._tuple.removeIdx"]], "slice() (standard._tuple method)": [[16, "Standard._tuple.slice"]], "slice() (standard.string method)": [[16, "Standard.string.slice"]], "take() (standard.string method)": [[16, "Standard.string.take"]], "takeuntil() (standard.string method)": [[16, "Standard.string.takeUntil"]], "this() (standard.string method)": [[16, "Standard.string.this"]], "untuplify() (standard._tuple method)": [[16, "Standard._tuple.untuplify"]], "types (module)": [[17, "module-Types"]], "f32 (in module types)": [[17, "Types.f32"]], "f64 (in module types)": [[17, "Types.f64"]], "stdrange (in module types)": [[17, "Types.stdRange"]], "chai (module)": [[18, "module-ChAI"]], "main() (in module chai)": [[18, "ChAI.main"]]}})