.. default-domain:: chpl

.. module:: Autograd

Autograd
========
**Usage**

.. code-block:: chapel

   use Autograd;


or

.. code-block:: chapel

   import Autograd;

.. function:: proc checkRank(te: shared TensorEssence(?eltType), param rank: int): bool

.. function:: proc getRank(te: shared TensorEssence(?eltType)): int

.. function:: proc forceRank(te: shared TensorEssence(?eltType), param rank: int): shared BaseTensorResource(eltType, rank)

.. class:: TensorEssence : serializable

   .. type:: config type eltType = real

   .. method:: proc runtimeRank: int

   .. itermethod:: iter children(): borrowed TensorEssence(eltType)

   .. method:: proc treeHeight(): int

.. class:: ForgetfulTensor : TensorEssence

   .. data:: config param rank: int

.. class:: BaseTensorResource : TensorEssence, serializable

   .. data:: config param rank: int

   .. data:: config var dataResource: shared Remote(ndarray(rank, eltType))

   .. data:: config var gradResource: shared ?Remote(ndarray(rank, eltType))

   .. method:: proc init(type eltType, param rank: int)

   .. method:: proc init(in dataResource: shared Remote(ndarray(?rank, ?eltType)), in gradResource: shared ?Remote(ndarray(rank, eltType)) = nil)

   .. method:: proc init(data: ndarray(?rank, ?eltType), device: locale = Remote.defaultDevice)

   .. method:: proc to(dest: locale)

   .. method:: proc device: locale

   .. method:: proc array ref: ndarray(rank, eltType)

   .. method:: proc grad ref: ndarray(rank, eltType)

   .. method:: proc forward()

   .. method:: proc backward(grad: remote(ndarray(rank, eltType)), param alreadyPopulated = false)

   .. method:: proc backward() where rank == 1

   .. method:: proc detach(copy: bool = true, keepGrad: bool = false): owned(TensorResource(eltType, rank, baseValue))

   .. method:: override proc runtimeRank: int

.. class:: TensorResource : BaseTensorResource(?), serializable

   .. type:: config type operationType

   .. data:: config var operationCtx: operationType

   .. method:: proc init(type eltType, param rank: int, operationCtx: ?operationType)

   .. method:: proc init(in dataResource: shared Remote(ndarray(?rank, ?eltType)), in gradResource: shared ?Remote(ndarray(rank, eltType)) = nil, operationCtx: ?operationType)

   .. method:: proc init(in dataResource: shared Remote(ndarray(?rank, ?eltType)))

   .. method:: proc init(bt: borrowed BaseTensorResource(?eltType, ?rank), operationCtx: ?operationType)

   .. method:: override proc detach(copy: bool = true, keepGrad: bool = false): owned(TensorResource(eltType, rank, baseValue))

   .. method:: override proc forward()

   .. itermethod:: override iter children(): borrowed TensorEssence(eltType)

.. record:: baseValue : serializable

   .. method:: proc forward()

   .. method:: proc children

.. record:: reluOp : serializable

   .. data:: config var input: shared BaseTensorResource(?)

   .. method:: proc children

   .. method:: proc forward()

   .. method:: proc _relu(x)

.. record:: expOp : serializable

   .. data:: config var input: shared BaseTensorResource(?)

   .. method:: proc children

   .. method:: proc forward()

.. record:: addOp : serializable

   .. data:: config param rank: int

   .. type:: config type eltType

   .. data:: config var lhs: shared BaseTensorResource(eltType, rank)

   .. data:: config var rhs: shared BaseTensorResource(eltType, rank)

   .. method:: proc children

   .. method:: proc forward(): ndarray(rank, eltType)

   .. method:: proc backward(grad: ndarray(rank, eltType)): (ndarray(rank, eltType), ndarray(rank, eltType))

.. record:: subOp : serializable

   .. data:: config var lhs: shared BaseTensorResource(?)

   .. data:: config var rhs: shared BaseTensorResource(?)

   .. method:: proc children

   .. method:: proc forward()

.. record:: divOp : serializable

   .. data:: config var lhs: shared BaseTensorResource(?)

   .. data:: config var rhs: shared BaseTensorResource(?)

   .. method:: proc children

   .. method:: proc forward()

.. record:: multOp : serializable

   .. data:: config param rank: int

   .. type:: config type eltType

   .. data:: config var lhs: shared BaseTensorResource(eltType, rank)

   .. data:: config var rhs: shared BaseTensorResource(eltType, rank)

   .. method:: proc children

   .. method:: proc forward()

   .. method:: proc backward(grad: ndarray(rank, eltType)): (ndarray(rank, eltType), ndarray(rank, eltType))

.. record:: reshapeOp : serializable

   .. data:: config param oldRank: int

   .. data:: config param newRank: int

   .. type:: config type eltType

   .. data:: config var shape: newRank*int

   .. data:: config var input: shared BaseTensorResource(eltType, oldRank)

   .. method:: proc children

   .. method:: proc forward(): ndarray(newRank, eltType)

   .. method:: proc backward(grad: ndarray(newRank, eltType)): (ndarray(oldRank, eltType),)

.. record:: permuteOp : serializable

   .. data:: config param rank: int

   .. type:: config type eltType = real

   .. data:: config var permutation

   .. data:: config var input: shared BaseTensorResource(eltType, rank)

   .. method:: proc children

   .. method:: proc forward()

   .. method:: proc backward(grad: ndarray(rank, eltType)): (ndarray(rank, eltType),)

.. record:: expandOp : serializable

   .. data:: config param rank: int

   .. type:: config type eltType = real

   .. data:: config var expandedShape: rank*int

   .. data:: config var input: shared BaseTensorResource(eltType, rank)

   .. method:: proc children

   .. method:: proc forward()

   .. method:: proc backward(grad: ndarray(rank, eltType)): (ndarray(rank, eltType),)

.. record:: padOp : serializable

   .. data:: config param rank: int

   .. type:: config type eltType = real

   .. data:: config var arg: rank*2*int

   .. data:: config var value: eltType

   .. data:: config var input: shared BaseTensorResource(eltType, rank)

   .. method:: proc children

   .. method:: proc forward(): ndarray(rank, eltType)

   .. method:: proc backward(grad: ndarray(rank, eltType)): (ndarray(rank, eltType),)

.. record:: shrinkOp : serializable

   .. data:: config param rank: int

   .. type:: config type eltType = real

   .. data:: config var arg: rank*2*int

   .. data:: config var input: shared BaseTensorResource(eltType, rank)

   .. method:: proc children

   .. method:: proc forward(): ndarray(rank, eltType)

   .. method:: proc backward(grad: ndarray(rank, eltType)): (ndarray(rank, eltType),)

.. record:: sliceOp : serializable

   .. data:: config param rank: int

   .. type:: config type eltType = real

   .. data:: config var dom: domain(rank, int)

   .. data:: config var input: shared BaseTensorResource(eltType, rank)

   .. method:: proc children

   .. method:: proc forward(): ndarray(rank, eltType)

   .. method:: proc backward(grad: ndarray(rank, eltType)): (ndarray(rank, eltType),)

.. record:: layerSliceOp : serializable

   .. data:: config param rank: int

   .. type:: config type eltType = real

   .. data:: config var base: shared BaseTensorResource(eltType, rank)

   .. data:: config var mask: shared BaseTensorResource(eltType, rank)

   .. data:: config var maskDomain: domain(rank, int)

   .. method:: proc children

   .. method:: proc forward(): ndarray(rank, eltType)

   .. method:: proc backward(grad: ndarray(rank, eltType)): (ndarray(rank, eltType), ndarray(rank, eltType))

.. record:: sumOp : serializable

   .. data:: config param rank: int

   .. type:: config type eltType = real

   .. data:: config param sumRank: int

   .. data:: config var axes: sumRank*int

   .. data:: config var input: shared BaseTensorResource(eltType, rank)

   .. method:: proc children

   .. method:: proc outRank param: int

   .. method:: proc forward()

   .. method:: proc backward(grad: ndarray(outRank, eltType)): (ndarray(rank, eltType),)

.. record:: maxOp : serializable

   .. data:: config param rank: int

   .. type:: config type eltType = real

   .. data:: config param maxRank: int

   .. data:: config var axes: maxRank*int

   .. data:: config var input: shared BaseTensorResource(eltType, rank)

   .. method:: proc children

   .. method:: proc forward()

   .. method:: proc backward(grad): (ndarray(rank, eltType),)

.. record:: conv2DOp : serializable

   .. type:: config type eltType = real

   .. data:: config var features: shared BaseTensorResource(eltType, 3)

   .. data:: config var kernel: shared BaseTensorResource(eltType, 4)

   .. data:: config var stride: int

   .. method:: proc children

   .. method:: proc forward(): ndarray(3, eltType)

   .. method:: proc backward(grad: ndarray(3, eltType)): (ndarray(3, eltType), ndarray(4, eltType))

