AST dump for OwnedObject after pass createTaskFunctions.
Module use list: ChapelStandard HaltWrappers 

{
  function chpl__init_OwnedObject[468375]() : void[4] "insert line file info" "module init"
  {
    (1000971 'resolution point' |writeSerializable[475127])
    (1000973 'end of statement')
    (1000974 'resolution point' |readDeserializable[475132])
    (1000976 'end of statement')
    (598899 return _void[46])
  }
  function _owned[238](?).chpl_forwarding_expr1[79038](arg _mt[79043]:_MT[201], arg this[79041]:_owned[238](?)) : _unknown[42] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[598675] "RVV" "temp"
    (598679 'move' ret[598675](79047 call(422013 call (partial) borrow _mt[203] this[79041])))
    (598677 return ret[598675])
  }
  function _owned[238](?).chpl_t[1004318](arg _mt[1004320]:_MT[201], arg this[1004322]:_owned[238](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[1004341] "RVV" "temp" "type variable"
    unknown call_tmp[1004355] "expr temp" "maybe param" "maybe type" "temp"
    (1004358 'move' call_tmp[1004355](1004327 'is bound' this[1004322] c"chpl_t"))
    if call_tmp[1004355]
    {
      unknown call_tmp[1004360] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1004363 'move' call_tmp[1004360](1004326 '.v' this[1004322] c"chpl_t"))
      (1004346 'move' ret[1004341](1004345 'deref' call_tmp[1004360]))
      gotoReturn _end_chpl_t[1004339] _end_chpl_t[1004339]
    }
    {
      (1004351 'move' ret[1004341](1004350 'deref' _uninstantiated[225]))
      gotoReturn _end_chpl_t[1004339] _end_chpl_t[1004339]
    }
    label _end_chpl_t[1004339]
    (1004343 return ret[1004341])
  }
  function _owned[238](?).chpl_t[1004365](arg _mt[1004367]:_MT[201], arg this[1004369]:_owned[238](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1004388] "RVV" "temp" "type variable"
    unknown call_tmp[1004402] "expr temp" "maybe param" "maybe type" "temp"
    (1004405 'move' call_tmp[1004402](1004374 'is bound' this[1004369] c"chpl_t"))
    if call_tmp[1004402]
    {
      unknown call_tmp[1004407] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1004410 'move' call_tmp[1004407](1004373 '.v' this[1004369] c"chpl_t"))
      (1004393 'move' ret[1004388](1004392 'deref' call_tmp[1004407]))
      gotoReturn _end_chpl_t[1004386] _end_chpl_t[1004386]
    }
    {
      (1004398 'move' ret[1004388](1004397 'deref' _uninstantiated[225]))
      gotoReturn _end_chpl_t[1004386] _end_chpl_t[1004386]
    }
    label _end_chpl_t[1004386]
    (1004390 return ret[1004388])
  }
  function _owned[238](?).chpl_p[1004412](arg _mt[1004414]:_MT[201], ref arg this[1004416]:_owned[238](?)) ref : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[1004426] "RVV" "temp"
    unknown call_tmp[1004433] "expr temp" "maybe param" "maybe type" "temp"
    (1004436 'move' call_tmp[1004433](1004420 '.' this[1004416] c"chpl_p"))
    (1004431 'move' ret[1004426](1004430 'addr of' call_tmp[1004433]))
    (1004428 return ret[1004426])
  }
  function _owned[238](?).hash[1004438](arg _mt[1004441]:_MT[201], arg this[1004440]:_owned[238](?)) : _unknown[42] "compiler generated" "last resort" "method"
  {
    unknown ret[1004455] "RVV" "temp"
    unknown call_tmp[1004462] "expr temp" "maybe param" "maybe type" "temp"
    (1004465 'move' call_tmp[1004462](1004444 call chpl_p _mt[203] this[1004440]))
    unknown call_tmp[1004467] "expr temp" "maybe param" "maybe type" "temp"
    (1004470 'move' call_tmp[1004467](1004448 call chpl__defaultHashWrapperInner call_tmp[1004462]))
    (1004460 'move' ret[1004455](1004459 'deref' call_tmp[1004467]))
    (1004457 return ret[1004455])
  }
  function chpl_fields_are_comparable[1004488](arg _arg1[1004490]:_owned[238](?), arg _arg2[1004491]:_owned[238](?)) param : bool[19] "compiler generated" "last resort" "param"
  {
    val ret[1004509]:bool[19] "RVV" "param" "temp"
    unknown call_tmp[1004516] "expr temp" "maybe param" "maybe type" "temp"
    (1004519 'move' call_tmp[1004516](1004494 call chpl_p _mt[203] _arg1[1004490]))
    unknown call_tmp[1004521] "expr temp" "maybe param" "maybe type" "temp"
    (1004524 'move' call_tmp[1004521](1004498 call chpl_p _mt[203] _arg2[1004491]))
    unknown call_tmp[1004526] "expr temp" "maybe param" "maybe type" "temp"
    (1004529 'move' call_tmp[1004526](1004502 'call resolves' c"==" call_tmp[1004516] call_tmp[1004521]))
    (1004514 'move' ret[1004509](1004513 'deref' call_tmp[1004526]))
    (1004511 return ret[1004509])
  }
  function _owned[238](?).==[1004472](arg _mt[1004474]:_MT[201], arg this[1004476]:_owned[238](?), arg _arg1[1004478]:_owned[238](?), arg _arg2[1004479]:_owned[238](?)) : bool[19] "compiler generated" "last resort" "method" "operator"
  {
    val ret[1004558]:bool[19] "RVV" "temp"
    unknown call_tmp[1004570] "expr temp" "maybe param" "maybe type" "temp"
    (1004573 'move' call_tmp[1004570](1004537 call chpl_p _mt[203] _arg1[1004478]))
    unknown call_tmp[1004575] "expr temp" "maybe param" "maybe type" "temp"
    (1004578 'move' call_tmp[1004575](1004541 call chpl_p _mt[203] _arg2[1004479]))
    unknown call_tmp[1004580] "expr temp" "maybe param" "maybe type" "temp"
    (1004583 'move' call_tmp[1004580](1004545 call chpl_field_neq call_tmp[1004570] call_tmp[1004575]))
    if call_tmp[1004580]
    {
      (1004563 'move' ret[1004558](1004562 'deref' 0))
      gotoReturn _end_==[1004556] _end_==[1004556]
    }
    (1004568 'move' ret[1004558](1004567 'deref' 1))
    label _end_==[1004556]
    (1004560 return ret[1004558])
  }
  where {
    unknown call_tmp[1004585] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1004588 'move' call_tmp[1004585](1004482 'typeof' _arg1[1004478]))
    unknown call_tmp[1004590] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1004593 'move' call_tmp[1004590](1004484 'typeof' _arg2[1004479]))
    unknown call_tmp[1004595] "expr temp" "maybe param" "maybe type" "temp"
    (1004598 'move' call_tmp[1004595](1004486 call == call_tmp[1004585] call_tmp[1004590]))
    unknown call_tmp[1004600] "expr temp" "maybe param" "maybe type" "temp"
    (1004603 'move' call_tmp[1004600](1004531 call chpl_fields_are_comparable[1004488] _arg1[1004478] _arg2[1004479]))
    (1004535 '&' call_tmp[1004595] call_tmp[1004600])
  }
  function chpl_fields_are_comparable[1004621](arg _arg1[1004623]:_owned[238](?), arg _arg2[1004624]:_owned[238](?)) param : bool[19] "compiler generated" "last resort" "param"
  {
    val ret[1004642]:bool[19] "RVV" "param" "temp"
    unknown call_tmp[1004649] "expr temp" "maybe param" "maybe type" "temp"
    (1004652 'move' call_tmp[1004649](1004627 call chpl_p _mt[203] _arg1[1004623]))
    unknown call_tmp[1004654] "expr temp" "maybe param" "maybe type" "temp"
    (1004657 'move' call_tmp[1004654](1004631 call chpl_p _mt[203] _arg2[1004624]))
    unknown call_tmp[1004659] "expr temp" "maybe param" "maybe type" "temp"
    (1004662 'move' call_tmp[1004659](1004635 'call resolves' c"!=" call_tmp[1004649] call_tmp[1004654]))
    (1004647 'move' ret[1004642](1004646 'deref' call_tmp[1004659]))
    (1004644 return ret[1004642])
  }
  function _owned[238](?).!=[1004605](arg _mt[1004607]:_MT[201], arg this[1004609]:_owned[238](?), arg _arg1[1004611]:_owned[238](?), arg _arg2[1004612]:_owned[238](?)) : bool[19] "compiler generated" "last resort" "method" "operator"
  {
    val ret[1004691]:bool[19] "RVV" "temp"
    unknown call_tmp[1004703] "expr temp" "maybe param" "maybe type" "temp"
    (1004706 'move' call_tmp[1004703](1004670 call chpl_p _mt[203] _arg1[1004611]))
    unknown call_tmp[1004708] "expr temp" "maybe param" "maybe type" "temp"
    (1004711 'move' call_tmp[1004708](1004674 call chpl_p _mt[203] _arg2[1004612]))
    unknown call_tmp[1004713] "expr temp" "maybe param" "maybe type" "temp"
    (1004716 'move' call_tmp[1004713](1004678 call chpl_field_neq call_tmp[1004703] call_tmp[1004708]))
    if call_tmp[1004713]
    {
      (1004696 'move' ret[1004691](1004695 'deref' 1))
      gotoReturn _end_!=[1004689] _end_!=[1004689]
    }
    (1004701 'move' ret[1004691](1004700 'deref' 0))
    label _end_!=[1004689]
    (1004693 return ret[1004691])
  }
  where {
    unknown call_tmp[1004718] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1004721 'move' call_tmp[1004718](1004615 'typeof' _arg1[1004611]))
    unknown call_tmp[1004723] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1004726 'move' call_tmp[1004723](1004617 'typeof' _arg2[1004612]))
    unknown call_tmp[1004728] "expr temp" "maybe param" "maybe type" "temp"
    (1004731 'move' call_tmp[1004728](1004619 call == call_tmp[1004718] call_tmp[1004723]))
    unknown call_tmp[1004733] "expr temp" "maybe param" "maybe type" "temp"
    (1004736 'move' call_tmp[1004733](1004664 call chpl_fields_are_comparable[1004621] _arg1[1004611] _arg2[1004612]))
    (1004668 '&' call_tmp[1004728] call_tmp[1004733])
  }
  function chpl_fields_are_comparable[1004754](arg _arg1[1004756]:_owned[238](?), arg _arg2[1004757]:_owned[238](?)) param : bool[19] "compiler generated" "last resort" "param"
  {
    val ret[1004775]:bool[19] "RVV" "param" "temp"
    unknown call_tmp[1004782] "expr temp" "maybe param" "maybe type" "temp"
    (1004785 'move' call_tmp[1004782](1004760 call chpl_p _mt[203] _arg1[1004756]))
    unknown call_tmp[1004787] "expr temp" "maybe param" "maybe type" "temp"
    (1004790 'move' call_tmp[1004787](1004764 call chpl_p _mt[203] _arg2[1004757]))
    unknown call_tmp[1004792] "expr temp" "maybe param" "maybe type" "temp"
    (1004795 'move' call_tmp[1004792](1004768 'call resolves' c"<" call_tmp[1004782] call_tmp[1004787]))
    (1004780 'move' ret[1004775](1004779 'deref' call_tmp[1004792]))
    (1004777 return ret[1004775])
  }
  function _owned[238](?).<[1004738](arg _mt[1004740]:_MT[201], arg this[1004742]:_owned[238](?), arg _arg1[1004744]:_owned[238](?), arg _arg2[1004745]:_owned[238](?)) : bool[19] "compiler generated" "last resort" "method" "operator"
  {
    val ret[1004839]:bool[19] "RVV" "temp"
    unknown call_tmp[1004856] "expr temp" "maybe param" "maybe type" "temp"
    (1004859 'move' call_tmp[1004856](1004803 call chpl_p _mt[203] _arg1[1004744]))
    unknown call_tmp[1004861] "expr temp" "maybe param" "maybe type" "temp"
    (1004864 'move' call_tmp[1004861](1004807 call chpl_p _mt[203] _arg2[1004745]))
    unknown call_tmp[1004866] "expr temp" "maybe param" "maybe type" "temp"
    (1004869 'move' call_tmp[1004866](1004811 call chpl_field_lt call_tmp[1004856] call_tmp[1004861]))
    if call_tmp[1004866]
    {
      (1004844 'move' ret[1004839](1004843 'deref' 1))
      gotoReturn _end_<[1004837] _end_<[1004837]
    }
    unknown call_tmp[1004871] "expr temp" "maybe param" "maybe type" "temp"
    (1004874 'move' call_tmp[1004871](1004817 call chpl_p _mt[203] _arg1[1004744]))
    unknown call_tmp[1004876] "expr temp" "maybe param" "maybe type" "temp"
    (1004879 'move' call_tmp[1004876](1004821 call chpl_p _mt[203] _arg2[1004745]))
    unknown call_tmp[1004881] "expr temp" "maybe param" "maybe type" "temp"
    (1004884 'move' call_tmp[1004881](1004825 call chpl_field_gt call_tmp[1004871] call_tmp[1004876]))
    if call_tmp[1004881]
    {
      (1004849 'move' ret[1004839](1004848 'deref' 0))
      gotoReturn _end_<[1004837] _end_<[1004837]
    }
    (1004854 'move' ret[1004839](1004853 'deref' 0))
    label _end_<[1004837]
    (1004841 return ret[1004839])
  }
  where {
    unknown call_tmp[1004886] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1004889 'move' call_tmp[1004886](1004748 'typeof' _arg1[1004744]))
    unknown call_tmp[1004891] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1004894 'move' call_tmp[1004891](1004750 'typeof' _arg2[1004745]))
    unknown call_tmp[1004896] "expr temp" "maybe param" "maybe type" "temp"
    (1004899 'move' call_tmp[1004896](1004752 call == call_tmp[1004886] call_tmp[1004891]))
    unknown call_tmp[1004901] "expr temp" "maybe param" "maybe type" "temp"
    (1004904 'move' call_tmp[1004901](1004797 call chpl_fields_are_comparable[1004754] _arg1[1004744] _arg2[1004745]))
    (1004801 '&' call_tmp[1004896] call_tmp[1004901])
  }
  function chpl_fields_are_comparable[1004922](arg _arg1[1004924]:_owned[238](?), arg _arg2[1004925]:_owned[238](?)) param : bool[19] "compiler generated" "last resort" "param"
  {
    val ret[1004943]:bool[19] "RVV" "param" "temp"
    unknown call_tmp[1004950] "expr temp" "maybe param" "maybe type" "temp"
    (1004953 'move' call_tmp[1004950](1004928 call chpl_p _mt[203] _arg1[1004924]))
    unknown call_tmp[1004955] "expr temp" "maybe param" "maybe type" "temp"
    (1004958 'move' call_tmp[1004955](1004932 call chpl_p _mt[203] _arg2[1004925]))
    unknown call_tmp[1004960] "expr temp" "maybe param" "maybe type" "temp"
    (1004963 'move' call_tmp[1004960](1004936 'call resolves' c"<=" call_tmp[1004950] call_tmp[1004955]))
    (1004948 'move' ret[1004943](1004947 'deref' call_tmp[1004960]))
    (1004945 return ret[1004943])
  }
  function _owned[238](?).<=[1004906](arg _mt[1004908]:_MT[201], arg this[1004910]:_owned[238](?), arg _arg1[1004912]:_owned[238](?), arg _arg2[1004913]:_owned[238](?)) : bool[19] "compiler generated" "last resort" "method" "operator"
  {
    val ret[1005007]:bool[19] "RVV" "temp"
    unknown call_tmp[1005024] "expr temp" "maybe param" "maybe type" "temp"
    (1005027 'move' call_tmp[1005024](1004971 call chpl_p _mt[203] _arg1[1004912]))
    unknown call_tmp[1005029] "expr temp" "maybe param" "maybe type" "temp"
    (1005032 'move' call_tmp[1005029](1004975 call chpl_p _mt[203] _arg2[1004913]))
    unknown call_tmp[1005034] "expr temp" "maybe param" "maybe type" "temp"
    (1005037 'move' call_tmp[1005034](1004979 call chpl_field_lt call_tmp[1005024] call_tmp[1005029]))
    if call_tmp[1005034]
    {
      (1005012 'move' ret[1005007](1005011 'deref' 1))
      gotoReturn _end_<=[1005005] _end_<=[1005005]
    }
    unknown call_tmp[1005039] "expr temp" "maybe param" "maybe type" "temp"
    (1005042 'move' call_tmp[1005039](1004985 call chpl_p _mt[203] _arg1[1004912]))
    unknown call_tmp[1005044] "expr temp" "maybe param" "maybe type" "temp"
    (1005047 'move' call_tmp[1005044](1004989 call chpl_p _mt[203] _arg2[1004913]))
    unknown call_tmp[1005049] "expr temp" "maybe param" "maybe type" "temp"
    (1005052 'move' call_tmp[1005049](1004993 call chpl_field_gt call_tmp[1005039] call_tmp[1005044]))
    if call_tmp[1005049]
    {
      (1005017 'move' ret[1005007](1005016 'deref' 0))
      gotoReturn _end_<=[1005005] _end_<=[1005005]
    }
    (1005022 'move' ret[1005007](1005021 'deref' 1))
    label _end_<=[1005005]
    (1005009 return ret[1005007])
  }
  where {
    unknown call_tmp[1005054] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1005057 'move' call_tmp[1005054](1004916 'typeof' _arg1[1004912]))
    unknown call_tmp[1005059] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1005062 'move' call_tmp[1005059](1004918 'typeof' _arg2[1004913]))
    unknown call_tmp[1005064] "expr temp" "maybe param" "maybe type" "temp"
    (1005067 'move' call_tmp[1005064](1004920 call == call_tmp[1005054] call_tmp[1005059]))
    unknown call_tmp[1005069] "expr temp" "maybe param" "maybe type" "temp"
    (1005072 'move' call_tmp[1005069](1004965 call chpl_fields_are_comparable[1004922] _arg1[1004912] _arg2[1004913]))
    (1004969 '&' call_tmp[1005064] call_tmp[1005069])
  }
  function chpl_fields_are_comparable[1005090](arg _arg1[1005092]:_owned[238](?), arg _arg2[1005093]:_owned[238](?)) param : bool[19] "compiler generated" "last resort" "param"
  {
    val ret[1005111]:bool[19] "RVV" "param" "temp"
    unknown call_tmp[1005118] "expr temp" "maybe param" "maybe type" "temp"
    (1005121 'move' call_tmp[1005118](1005096 call chpl_p _mt[203] _arg1[1005092]))
    unknown call_tmp[1005123] "expr temp" "maybe param" "maybe type" "temp"
    (1005126 'move' call_tmp[1005123](1005100 call chpl_p _mt[203] _arg2[1005093]))
    unknown call_tmp[1005128] "expr temp" "maybe param" "maybe type" "temp"
    (1005131 'move' call_tmp[1005128](1005104 'call resolves' c">" call_tmp[1005118] call_tmp[1005123]))
    (1005116 'move' ret[1005111](1005115 'deref' call_tmp[1005128]))
    (1005113 return ret[1005111])
  }
  function _owned[238](?).>[1005074](arg _mt[1005076]:_MT[201], arg this[1005078]:_owned[238](?), arg _arg1[1005080]:_owned[238](?), arg _arg2[1005081]:_owned[238](?)) : bool[19] "compiler generated" "last resort" "method" "operator"
  {
    val ret[1005175]:bool[19] "RVV" "temp"
    unknown call_tmp[1005192] "expr temp" "maybe param" "maybe type" "temp"
    (1005195 'move' call_tmp[1005192](1005139 call chpl_p _mt[203] _arg1[1005080]))
    unknown call_tmp[1005197] "expr temp" "maybe param" "maybe type" "temp"
    (1005200 'move' call_tmp[1005197](1005143 call chpl_p _mt[203] _arg2[1005081]))
    unknown call_tmp[1005202] "expr temp" "maybe param" "maybe type" "temp"
    (1005205 'move' call_tmp[1005202](1005147 call chpl_field_gt call_tmp[1005192] call_tmp[1005197]))
    if call_tmp[1005202]
    {
      (1005180 'move' ret[1005175](1005179 'deref' 1))
      gotoReturn _end_>[1005173] _end_>[1005173]
    }
    unknown call_tmp[1005207] "expr temp" "maybe param" "maybe type" "temp"
    (1005210 'move' call_tmp[1005207](1005153 call chpl_p _mt[203] _arg1[1005080]))
    unknown call_tmp[1005212] "expr temp" "maybe param" "maybe type" "temp"
    (1005215 'move' call_tmp[1005212](1005157 call chpl_p _mt[203] _arg2[1005081]))
    unknown call_tmp[1005217] "expr temp" "maybe param" "maybe type" "temp"
    (1005220 'move' call_tmp[1005217](1005161 call chpl_field_lt call_tmp[1005207] call_tmp[1005212]))
    if call_tmp[1005217]
    {
      (1005185 'move' ret[1005175](1005184 'deref' 0))
      gotoReturn _end_>[1005173] _end_>[1005173]
    }
    (1005190 'move' ret[1005175](1005189 'deref' 0))
    label _end_>[1005173]
    (1005177 return ret[1005175])
  }
  where {
    unknown call_tmp[1005222] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1005225 'move' call_tmp[1005222](1005084 'typeof' _arg1[1005080]))
    unknown call_tmp[1005227] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1005230 'move' call_tmp[1005227](1005086 'typeof' _arg2[1005081]))
    unknown call_tmp[1005232] "expr temp" "maybe param" "maybe type" "temp"
    (1005235 'move' call_tmp[1005232](1005088 call == call_tmp[1005222] call_tmp[1005227]))
    unknown call_tmp[1005237] "expr temp" "maybe param" "maybe type" "temp"
    (1005240 'move' call_tmp[1005237](1005133 call chpl_fields_are_comparable[1005090] _arg1[1005080] _arg2[1005081]))
    (1005137 '&' call_tmp[1005232] call_tmp[1005237])
  }
  function chpl_fields_are_comparable[1005258](arg _arg1[1005260]:_owned[238](?), arg _arg2[1005261]:_owned[238](?)) param : bool[19] "compiler generated" "last resort" "param"
  {
    val ret[1005279]:bool[19] "RVV" "param" "temp"
    unknown call_tmp[1005286] "expr temp" "maybe param" "maybe type" "temp"
    (1005289 'move' call_tmp[1005286](1005264 call chpl_p _mt[203] _arg1[1005260]))
    unknown call_tmp[1005291] "expr temp" "maybe param" "maybe type" "temp"
    (1005294 'move' call_tmp[1005291](1005268 call chpl_p _mt[203] _arg2[1005261]))
    unknown call_tmp[1005296] "expr temp" "maybe param" "maybe type" "temp"
    (1005299 'move' call_tmp[1005296](1005272 'call resolves' c">=" call_tmp[1005286] call_tmp[1005291]))
    (1005284 'move' ret[1005279](1005283 'deref' call_tmp[1005296]))
    (1005281 return ret[1005279])
  }
  function _owned[238](?).>=[1005242](arg _mt[1005244]:_MT[201], arg this[1005246]:_owned[238](?), arg _arg1[1005248]:_owned[238](?), arg _arg2[1005249]:_owned[238](?)) : bool[19] "compiler generated" "last resort" "method" "operator"
  {
    val ret[1005343]:bool[19] "RVV" "temp"
    unknown call_tmp[1005360] "expr temp" "maybe param" "maybe type" "temp"
    (1005363 'move' call_tmp[1005360](1005307 call chpl_p _mt[203] _arg1[1005248]))
    unknown call_tmp[1005365] "expr temp" "maybe param" "maybe type" "temp"
    (1005368 'move' call_tmp[1005365](1005311 call chpl_p _mt[203] _arg2[1005249]))
    unknown call_tmp[1005370] "expr temp" "maybe param" "maybe type" "temp"
    (1005373 'move' call_tmp[1005370](1005315 call chpl_field_gt call_tmp[1005360] call_tmp[1005365]))
    if call_tmp[1005370]
    {
      (1005348 'move' ret[1005343](1005347 'deref' 1))
      gotoReturn _end_>=[1005341] _end_>=[1005341]
    }
    unknown call_tmp[1005375] "expr temp" "maybe param" "maybe type" "temp"
    (1005378 'move' call_tmp[1005375](1005321 call chpl_p _mt[203] _arg1[1005248]))
    unknown call_tmp[1005380] "expr temp" "maybe param" "maybe type" "temp"
    (1005383 'move' call_tmp[1005380](1005325 call chpl_p _mt[203] _arg2[1005249]))
    unknown call_tmp[1005385] "expr temp" "maybe param" "maybe type" "temp"
    (1005388 'move' call_tmp[1005385](1005329 call chpl_field_lt call_tmp[1005375] call_tmp[1005380]))
    if call_tmp[1005385]
    {
      (1005353 'move' ret[1005343](1005352 'deref' 0))
      gotoReturn _end_>=[1005341] _end_>=[1005341]
    }
    (1005358 'move' ret[1005343](1005357 'deref' 1))
    label _end_>=[1005341]
    (1005345 return ret[1005343])
  }
  where {
    unknown call_tmp[1005390] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1005393 'move' call_tmp[1005390](1005252 'typeof' _arg1[1005248]))
    unknown call_tmp[1005395] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1005398 'move' call_tmp[1005395](1005254 'typeof' _arg2[1005249]))
    unknown call_tmp[1005400] "expr temp" "maybe param" "maybe type" "temp"
    (1005403 'move' call_tmp[1005400](1005256 call == call_tmp[1005390] call_tmp[1005395]))
    unknown call_tmp[1005405] "expr temp" "maybe param" "maybe type" "temp"
    (1005408 'move' call_tmp[1005405](1005301 call chpl_fields_are_comparable[1005258] _arg1[1005248] _arg2[1005249]))
    (1005305 '&' call_tmp[1005400] call_tmp[1005405])
  }
  type _owned[238](?) unknown chpl_t[79029] "type variable" unknown chpl_p[79032] "owned"(79033 'to nilable class' chpl_t[79029]) forwarding ( )
  type owned?[467987](?)
  type owned[467983](?)
  type _owned[467876](?)
  function _owned[238](?).init[79053](arg _mt[79061]:_MT[201], ref arg this[79056]:_owned[238](?) :
  _owned[238](?), arg chpl_t[79059]:_any[141](?)) : void[4] "leaves this nil" "method" "no return value for void"
  {
    unknown call_tmp[766805] "expr temp" "maybe param" "maybe type" "temp"
    (766808 'move' call_tmp[766805](79073 call isClass chpl_t[79059]))
    unknown call_tmp[766810] "expr temp" "maybe param" "maybe type" "temp"
    (766813 'move' call_tmp[766810](79070 call ! call_tmp[766805]))
    unknown call_tmp[766815] "expr temp" "maybe param" "maybe type" "temp"
    (766818 'move' call_tmp[766815](79075 call _cond_test call_tmp[766810]))
    if call_tmp[766815]
    {
      (79065 call compilerError "owned only works with classes")
    }
    unknown chpl_t[519055] "temp" "type variable"
    (519057 'move' chpl_t[519055](79089 call _to_borrowed chpl_t[79059]))
    (519059 'init field' this[79056] c"chpl_t" chpl_t[519055])
    (549991 'end of statement')
    unknown call_tmp[766820] "expr temp" "maybe param" "maybe type" "temp"
    (766823 'move' call_tmp[766820](519073 '.v' this[79056] c"chpl_t"))
    unknown call_tmp[766825] "maybe param" "maybe type" "temp"
    (766828 'move' call_tmp[766825](519065 'to nilable class' call_tmp[766820]))
    unknown chpl_p[519063] "temp"
    (519067 'init var' chpl_p[519063] nil[32] call_tmp[766825])
    (519069 'init field' this[79056] c"chpl_p" chpl_p[519063])
    (549992 'end of statement')
    (598681 return _void[46])
  }
  function _owned[238](?).init[79102](arg _mt[79112]:_MT[201], ref arg this[79105]:_owned[238](?) :
  _owned[238](?), arg p[79109]:borrowed[174](?)) : void[4] "method" "no return value for void"
  {
    (79116 call compilerError "cannot initialize owned from a borrow")
    (549993 'end of statement')
    unknown call_tmp[766832] "expr temp" "maybe param" "maybe type" "temp"
    (766835 'move' call_tmp[766832](79126 call _to_unmanaged p[79109]))
    (79124 call(79121 call (partial) init _mt[203] this[79105]) call_tmp[766832])
    (598683 return _void[46])
  }
  function _owned[238](?).init[79130](arg _mt[79140]:_MT[201], ref arg this[79133]:_owned[238](?) :
  _owned[238](?), arg p[79137]:unmanaged[183](?)) : void[4] "method" "no return value for void"
  {
    unknown chpl_t[519076] "temp" "type variable"
    unknown call_tmp[766837] "expr temp" "maybe param" "used in type" "maybe type" "temp" "type variable"
    (766840 'move' call_tmp[766837](79152 'typeof' p[79137]))
    (519078 'move' chpl_t[519076](79150 call _to_borrowed call_tmp[766837]))
    (519080 'init field' this[79133] c"chpl_t" chpl_t[519076])
    (549995 'end of statement')
    unknown call_tmp[766842] "maybe param" "maybe type" "temp"
    (766845 'move' call_tmp[766842](79160 call _to_borrowed p[79137]))
    unknown call_tmp[766847] "expr temp" "maybe param" "maybe type" "temp"
    (766850 'move' call_tmp[766847](519094 '.v' this[79133] c"chpl_t"))
    unknown call_tmp[766852] "maybe param" "maybe type" "temp"
    (766855 'move' call_tmp[766852](519086 'to nilable class' call_tmp[766847]))
    unknown chpl_p[519084] "temp"
    (519088 'init var' chpl_p[519084] call_tmp[766842] call_tmp[766852])
    (519090 'init field' this[79133] c"chpl_p" chpl_p[519084])
    (549996 'end of statement')
    (598685 return _void[46])
  }
  function _owned[238](?).init[79164](arg _mt[79175]:_MT[201], ref arg this[79167]:_owned[238](?) :
  _owned[238](?), arg p[79172]:_any[141](?)) : void[4] "method" "no return value for void"
  {
    (79202 call compilerError "owned only works with classes")
    (549997 'end of statement')
    unknown chpl_t[519103] "temp" "type variable"
    (519105 'move' chpl_t[519103](519097 'typeof' p[79172]))
    (519107 'init field' this[79167] c"chpl_t" chpl_t[519103])
    (549998 'end of statement')
    unknown call_tmp[766857] "expr temp" "maybe param" "maybe type" "temp"
    (766860 'move' call_tmp[766857](519121 '.v' this[79167] c"chpl_t"))
    unknown call_tmp[766862] "maybe param" "maybe type" "temp"
    (766865 'move' call_tmp[766862](519113 'to nilable class' call_tmp[766857]))
    unknown chpl_p[519111] "temp"
    (519115 'init var' chpl_p[519111] p[79172] call_tmp[766862])
    (519117 'init field' this[79167] c"chpl_p" chpl_p[519111])
    (549999 'end of statement')
    (598687 return _void[46])
  }
  where {
    unknown tmp[481659] "maybe param" "temp"
    unknown tmp[481680] "maybe param" "temp"
    unknown call_tmp[766867] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (766870 'move' call_tmp[766867](519099 'typeof' p[79172]))
    unknown call_tmp[766872] "expr temp" "maybe param" "maybe type" "temp"
    (766875 'move' call_tmp[766872](79184 call isClass call_tmp[766867]))
    (481691 'move' tmp[481680](79181 call == call_tmp[766872] 0))
    unknown call_tmp[766877] "expr temp" "maybe param" "maybe type" "temp"
    (766880 'move' call_tmp[766877](481693 call _cond_invalid tmp[481680]))
    if call_tmp[766877]
    {
      (481696 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[668733] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[668734] "maybe param" "temp"
    unknown call_tmp[766882] "expr temp" "maybe param" "maybe type" "temp"
    (766885 'move' call_tmp[766882](481681 call isTrue tmp[481680]))
    (668739 'move' tmp[668734](668737 call _cond_test call_tmp[766882]))
    if tmp[668734]
    {
      unknown tmp[668741] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[766887] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (766890 'move' call_tmp[766887](519101 'typeof' p[79172]))
      unknown call_tmp[766892] "expr temp" "maybe param" "maybe type" "temp"
      (766895 'move' call_tmp[766892](394732 'is_subtype' _owned[238](?) call_tmp[766887]))
      unknown call_tmp[766897] "expr temp" "maybe param" "maybe type" "temp"
      (766900 'move' call_tmp[766897](79187 call == call_tmp[766892] 0))
      (668743 'move' tmp[668741](481684 call isTrue call_tmp[766897]))
      (668748 'move' tmp[668733](668745 '_paramFoldLogical' tmp[668734] tmp[668741]))
    }
    {
      (668753 'move' tmp[668733](668750 '_paramFoldLogical' tmp[668734] 0))
    }
    (481670 'move' tmp[481659] tmp[668733])
    unknown call_tmp[766902] "expr temp" "maybe param" "maybe type" "temp"
    (766905 'move' call_tmp[766902](481672 call _cond_invalid tmp[481659]))
    if call_tmp[766902]
    {
      (481675 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[668760] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[668761] "maybe param" "temp"
    unknown call_tmp[766907] "expr temp" "maybe param" "maybe type" "temp"
    (766910 'move' call_tmp[766907](481660 call isTrue tmp[481659]))
    (668766 'move' tmp[668761](668764 call _cond_test call_tmp[766907]))
    if tmp[668761]
    {
      unknown tmp[668768] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[766912] "expr temp" "maybe param" "maybe type" "temp"
      (766915 'move' call_tmp[766912](79197 call isIterator p[79172]))
      unknown call_tmp[766917] "expr temp" "maybe param" "maybe type" "temp"
      (766920 'move' call_tmp[766917](79194 call == call_tmp[766912] 0))
      (668770 'move' tmp[668768](481663 call isTrue call_tmp[766917]))
      (668775 'move' tmp[668760](668772 '_paramFoldLogical' tmp[668761] tmp[668768]))
    }
    {
      (668780 'move' tmp[668760](668777 '_paramFoldLogical' tmp[668761] 0))
    }
    (1001352 call chpl_statementLevelSymbol tmp[668760])
  }
  function _owned[238](?).init=[79221](arg _mt[79231]:_MT[201], ref arg this[79224]:_owned[238](?) :
  _owned[238](?), ref arg src[79228]:_owned[238](?)) : void[4] "method" "no return value for void"
  {
    unknown chpl_t[519124] "temp" "type variable"
    unknown tmp[668787] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[668788] "maybe param" "temp"
    unknown call_tmp[766922] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (766925 'move' call_tmp[766922](79243 'typeof' this[79224]))
    unknown call_tmp[766929] "expr temp" "maybe param" "maybe type" "temp"
    (766932 'move' call_tmp[766929](79244 call chpl_t _mt[203] call_tmp[766922]))
    unknown call_tmp[766934] "expr temp" "marked generic" "maybe param" "maybe type" "temp"
    (766937 'move' call_tmp[766934](79240 call != call_tmp[766929] ?[227]))
    (668793 'move' tmp[668788](668791 call _cond_test call_tmp[766934]))
    if tmp[668788]
    {
      unknown tmp[668795] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[766939] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (766942 'move' call_tmp[766939](79249 'typeof' this[79224]))
      (668797 'move' tmp[668795](79250 call chpl_t _mt[203] call_tmp[766939]))
      (668802 'move' tmp[668787](668799 '_paramFoldLogical' tmp[668788] tmp[668795]))
    }
    {
      unknown tmp[668804] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[766946] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (766949 'move' call_tmp[766946](79256 'typeof' src[79228]))
      (668806 'move' tmp[668804](79254 call _to_borrowed call_tmp[766946]))
      (668811 'move' tmp[668787](668808 '_paramFoldLogical' tmp[668788] tmp[668804]))
    }
    (519126 'move' chpl_t[519124] tmp[668787])
    (519128 'init field' this[79224] c"chpl_t" chpl_t[519124])
    (550000 'end of statement')
    unknown call_tmp[766951] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (766954 'move' call_tmp[766951](79289 'typeof' this[79224]))
    unknown call_tmp[766958] "expr temp" "maybe param" "maybe type" "temp"
    (766961 'move' call_tmp[766958](79290 call chpl_t _mt[203] call_tmp[766951]))
    unknown call_tmp[766965] "expr temp" "maybe param" "maybe type" "temp"
    (766968 'move' call_tmp[766965](79285 call chpl_t _mt[203] src[79228]))
    unknown call_tmp[766970] "expr temp" "maybe param" "maybe type" "temp"
    (766973 'move' call_tmp[766970](394733 'is_coercible' call_tmp[766958] call_tmp[766965]))
    unknown call_tmp[766975] "expr temp" "maybe param" "maybe type" "temp"
    (766978 'move' call_tmp[766975](79280 call == call_tmp[766970] 0))
    unknown call_tmp[766980] "expr temp" "maybe param" "maybe type" "temp"
    (766983 'move' call_tmp[766980](79294 call _cond_test call_tmp[766975]))
    if call_tmp[766980]
    {
      unknown call_tmp[766985] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (766988 'move' call_tmp[766985](79268 'typeof' this[79224]))
      unknown call_tmp[766990] "expr temp" "maybe param" "maybe type" "temp"
      (766993 'move' call_tmp[766990](79265 call : call_tmp[766985] string[244]))
      unknown call_tmp[766995] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (766998 'move' call_tmp[766995](79276 'typeof' src[79228]))
      unknown call_tmp[767000] "expr temp" "maybe param" "maybe type" "temp"
      (767003 'move' call_tmp[767000](79273 call : call_tmp[766995] string[244]))
      (79261 call compilerError "cannot initialize '" call_tmp[766990] "' from a '" call_tmp[767000] "'")
    }
    unknown call_tmp[767007] "maybe param" "maybe type" "temp"
    (767010 'move' call_tmp[767007](79309 call(79306 call (partial) release _mt[203] _owned[238](?)) src[79228]))
    unknown call_tmp[767012] "expr temp" "maybe param" "maybe type" "temp"
    (767015 'move' call_tmp[767012](519142 '.v' this[79224] c"chpl_t"))
    unknown call_tmp[767017] "maybe param" "maybe type" "temp"
    (767020 'move' call_tmp[767017](519134 'to nilable class' call_tmp[767012]))
    unknown chpl_p[519132] "temp"
    (519136 'init var' chpl_p[519132] call_tmp[767007] call_tmp[767017])
    (519138 'init field' this[79224] c"chpl_p" chpl_p[519132])
    (550002 'end of statement')
    (519145 'init done')
    (550003 'end of statement')
    unknown tmp[481701] "maybe param" "temp"
    unknown call_tmp[767022] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (767025 'move' call_tmp[767022](79337 'typeof' this[79224]))
    (481712 'move' tmp[481701](79335 call isNonNilableClass call_tmp[767022]))
    unknown call_tmp[767027] "expr temp" "maybe param" "maybe type" "temp"
    (767030 'move' call_tmp[767027](481714 call _cond_invalid tmp[481701]))
    if call_tmp[767027]
    {
      (481717 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[668818] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[668819] "maybe param" "temp"
    unknown call_tmp[767032] "expr temp" "maybe param" "maybe type" "temp"
    (767035 'move' call_tmp[767032](481702 call isTrue tmp[481701]))
    (668824 'move' tmp[668819](668822 call _cond_test call_tmp[767032]))
    if tmp[668819]
    {
      unknown tmp[668826] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[767037] "expr temp" "maybe param" "maybe type" "temp"
      (767040 'move' call_tmp[767037](79339 call isNilableClass src[79228]))
      (668828 'move' tmp[668826](481705 call isTrue call_tmp[767037]))
      (668833 'move' tmp[668818](668830 '_paramFoldLogical' tmp[668819] tmp[668826]))
    }
    {
      (668838 'move' tmp[668818](668835 '_paramFoldLogical' tmp[668819] 0))
    }
    unknown call_tmp[767042] "expr temp" "maybe param" "maybe type" "temp"
    (767045 'move' call_tmp[767042](79341 call _cond_test tmp[668818]))
    if call_tmp[767042]
    {
      unknown call_tmp[767047] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (767050 'move' call_tmp[767047](79322 'typeof' this[79224]))
      unknown call_tmp[767052] "expr temp" "maybe param" "maybe type" "temp"
      (767055 'move' call_tmp[767052](79319 call : call_tmp[767047] string[244]))
      unknown call_tmp[767057] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (767060 'move' call_tmp[767057](79328 'typeof' src[79228]))
      unknown call_tmp[767062] "expr temp" "maybe param" "maybe type" "temp"
      (767065 'move' call_tmp[767062](79325 call : call_tmp[767057] string[244]))
      (79317 call compilerError "cannot initialize '" call_tmp[767052] "' from a '" call_tmp[767062] "'")
    }
    (598689 return _void[46])
  }
  function _owned[238](?).init=[79348](arg _mt[79358]:_MT[201], ref arg this[79351]:_owned[238](?) :
  _owned[238](?), arg src[79355]:_shared[242](?)) : void[4] "method" "no return value for void"
  {
    unknown call_tmp[767067] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (767070 'move' call_tmp[767067](79367 'typeof' this[79351]))
    unknown call_tmp[767072] "expr temp" "maybe param" "maybe type" "temp"
    (767075 'move' call_tmp[767072](79364 call : call_tmp[767067] string[244]))
    unknown call_tmp[767077] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (767080 'move' call_tmp[767077](79373 'typeof' src[79355]))
    unknown call_tmp[767082] "expr temp" "maybe param" "maybe type" "temp"
    (767085 'move' call_tmp[767082](79370 call : call_tmp[767077] string[244]))
    (79362 call compilerError "cannot initialize '" call_tmp[767072] "' from a '" call_tmp[767082] "'")
    (550006 'end of statement')
    unknown chpl_t[519146] "temp" "type variable"
    unknown tmp[668845] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[668846] "maybe param" "temp"
    unknown call_tmp[767087] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (767090 'move' call_tmp[767087](79385 'typeof' this[79351]))
    unknown call_tmp[767094] "expr temp" "maybe param" "maybe type" "temp"
    (767097 'move' call_tmp[767094](79386 call chpl_t _mt[203] call_tmp[767087]))
    unknown call_tmp[767099] "expr temp" "marked generic" "maybe param" "maybe type" "temp"
    (767102 'move' call_tmp[767099](79382 call != call_tmp[767094] ?[227]))
    (668851 'move' tmp[668846](668849 call _cond_test call_tmp[767099]))
    if tmp[668846]
    {
      unknown tmp[668853] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[767104] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (767107 'move' call_tmp[767104](79391 'typeof' this[79351]))
      (668855 'move' tmp[668853](79392 call chpl_t _mt[203] call_tmp[767104]))
      (668860 'move' tmp[668845](668857 '_paramFoldLogical' tmp[668846] tmp[668853]))
    }
    {
      unknown tmp[668862] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[767111] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (767114 'move' call_tmp[767111](79398 'typeof' src[79355]))
      (668864 'move' tmp[668862](79396 call _to_borrowed call_tmp[767111]))
      (668869 'move' tmp[668845](668866 '_paramFoldLogical' tmp[668846] tmp[668862]))
    }
    (519148 'move' chpl_t[519146] tmp[668845])
    (519150 'init field' this[79351] c"chpl_t" chpl_t[519146])
    (550007 'end of statement')
    unknown chpl_p[519155] "temp"
    unknown call_tmp[767116] "expr temp" "maybe param" "maybe type" "temp"
    (767119 'move' call_tmp[767116](519165 '.v' this[79351] c"chpl_t"))
    unknown call_tmp[767121] "expr temp" "maybe param" "maybe type" "temp"
    (767124 'move' call_tmp[767121](519157 'to nilable class' call_tmp[767116]))
    (519159 'default init var' chpl_p[519155] call_tmp[767121])
    (519161 '.=' this[79351] c"chpl_p" chpl_p[519155])
    (550008 'end of statement')
    (598691 return _void[46])
  }
  function _owned[238](?).init=[79404](arg _mt[79414]:_MT[201], ref arg this[79407]:_owned[238](?) :
  _owned[238](?), arg src[79411]:borrowed[174](?)) : void[4] "method" "no return value for void"
  {
    unknown call_tmp[767126] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (767129 'move' call_tmp[767126](79423 'typeof' this[79407]))
    unknown call_tmp[767131] "expr temp" "maybe param" "maybe type" "temp"
    (767134 'move' call_tmp[767131](79420 call : call_tmp[767126] string[244]))
    unknown call_tmp[767136] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (767139 'move' call_tmp[767136](79429 'typeof' src[79411]))
    unknown call_tmp[767141] "expr temp" "maybe param" "maybe type" "temp"
    (767144 'move' call_tmp[767141](79426 call : call_tmp[767136] string[244]))
    (79418 call compilerError "cannot initialize '" call_tmp[767131] "' from a '" call_tmp[767141] "'")
    (550009 'end of statement')
    unknown chpl_t[519168] "temp" "type variable"
    unknown tmp[668876] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[668877] "maybe param" "temp"
    unknown call_tmp[767146] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (767149 'move' call_tmp[767146](79441 'typeof' this[79407]))
    unknown call_tmp[767153] "expr temp" "maybe param" "maybe type" "temp"
    (767156 'move' call_tmp[767153](79442 call chpl_t _mt[203] call_tmp[767146]))
    unknown call_tmp[767158] "expr temp" "marked generic" "maybe param" "maybe type" "temp"
    (767161 'move' call_tmp[767158](79438 call != call_tmp[767153] ?[227]))
    (668882 'move' tmp[668877](668880 call _cond_test call_tmp[767158]))
    if tmp[668877]
    {
      unknown tmp[668884] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[767163] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (767166 'move' call_tmp[767163](79447 'typeof' this[79407]))
      (668886 'move' tmp[668884](79448 call chpl_t _mt[203] call_tmp[767163]))
      (668891 'move' tmp[668876](668888 '_paramFoldLogical' tmp[668877] tmp[668884]))
    }
    {
      unknown tmp[668893] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[767170] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (767173 'move' call_tmp[767170](79454 'typeof' src[79411]))
      (668895 'move' tmp[668893](79452 call _to_borrowed call_tmp[767170]))
      (668900 'move' tmp[668876](668897 '_paramFoldLogical' tmp[668877] tmp[668893]))
    }
    (519170 'move' chpl_t[519168] tmp[668876])
    (519172 'init field' this[79407] c"chpl_t" chpl_t[519168])
    (550010 'end of statement')
    unknown chpl_p[519177] "temp"
    unknown call_tmp[767175] "expr temp" "maybe param" "maybe type" "temp"
    (767178 'move' call_tmp[767175](519187 '.v' this[79407] c"chpl_t"))
    unknown call_tmp[767180] "expr temp" "maybe param" "maybe type" "temp"
    (767183 'move' call_tmp[767180](519179 'to nilable class' call_tmp[767175]))
    (519181 'default init var' chpl_p[519177] call_tmp[767180])
    (519183 '.=' this[79407] c"chpl_p" chpl_p[519177])
    (550011 'end of statement')
    (598693 return _void[46])
  }
  function _owned[238](?).init=[79460](arg _mt[79470]:_MT[201], ref arg this[79463]:_owned[238](?) :
  _owned[238](?), arg src[79467]:unmanaged[183](?)) : void[4] "method" "no return value for void"
  {
    unknown call_tmp[767185] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (767188 'move' call_tmp[767185](79479 'typeof' this[79463]))
    unknown call_tmp[767190] "expr temp" "maybe param" "maybe type" "temp"
    (767193 'move' call_tmp[767190](79476 call : call_tmp[767185] string[244]))
    unknown call_tmp[767195] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (767198 'move' call_tmp[767195](79485 'typeof' src[79467]))
    unknown call_tmp[767200] "expr temp" "maybe param" "maybe type" "temp"
    (767203 'move' call_tmp[767200](79482 call : call_tmp[767195] string[244]))
    (79474 call compilerError "cannot initialize '" call_tmp[767190] "' from a '" call_tmp[767200] "'")
    (550012 'end of statement')
    unknown chpl_t[519190] "temp" "type variable"
    unknown tmp[668907] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[668908] "maybe param" "temp"
    unknown call_tmp[767205] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (767208 'move' call_tmp[767205](79497 'typeof' this[79463]))
    unknown call_tmp[767212] "expr temp" "maybe param" "maybe type" "temp"
    (767215 'move' call_tmp[767212](79498 call chpl_t _mt[203] call_tmp[767205]))
    unknown call_tmp[767217] "expr temp" "marked generic" "maybe param" "maybe type" "temp"
    (767220 'move' call_tmp[767217](79494 call != call_tmp[767212] ?[227]))
    (668913 'move' tmp[668908](668911 call _cond_test call_tmp[767217]))
    if tmp[668908]
    {
      unknown tmp[668915] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[767222] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (767225 'move' call_tmp[767222](79503 'typeof' this[79463]))
      (668917 'move' tmp[668915](79504 call chpl_t _mt[203] call_tmp[767222]))
      (668922 'move' tmp[668907](668919 '_paramFoldLogical' tmp[668908] tmp[668915]))
    }
    {
      unknown tmp[668924] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[767229] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (767232 'move' call_tmp[767229](79510 'typeof' src[79467]))
      (668926 'move' tmp[668924](79508 call _to_borrowed call_tmp[767229]))
      (668931 'move' tmp[668907](668928 '_paramFoldLogical' tmp[668908] tmp[668924]))
    }
    (519192 'move' chpl_t[519190] tmp[668907])
    (519194 'init field' this[79463] c"chpl_t" chpl_t[519190])
    (550013 'end of statement')
    unknown chpl_p[519199] "temp"
    unknown call_tmp[767234] "expr temp" "maybe param" "maybe type" "temp"
    (767237 'move' call_tmp[767234](519209 '.v' this[79463] c"chpl_t"))
    unknown call_tmp[767239] "expr temp" "maybe param" "maybe type" "temp"
    (767242 'move' call_tmp[767239](519201 'to nilable class' call_tmp[767234]))
    (519203 'default init var' chpl_p[519199] call_tmp[767239])
    (519205 '.=' this[79463] c"chpl_p" chpl_p[519199])
    (550014 'end of statement')
    (598695 return _void[46])
  }
  function _owned[238](?).init=[79516](arg _mt[79526]:_MT[201], ref arg this[79519]:_owned[238](?) :
  _owned[238](?), arg src[79523]:_nilType[30]) : void[4] "leaves this nil" "method" "no return value for void"
  {
    unknown call_tmp[767244] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (767247 'move' call_tmp[767244](79538 'typeof' this[79519]))
    unknown call_tmp[767251] "expr temp" "maybe param" "maybe type" "temp"
    (767254 'move' call_tmp[767251](79539 call chpl_t _mt[203] call_tmp[767244]))
    unknown call_tmp[767256] "expr temp" "marked generic" "maybe param" "maybe type" "temp"
    (767259 'move' call_tmp[767256](79535 call == call_tmp[767251] ?[227]))
    unknown call_tmp[767261] "expr temp" "marked generic" "maybe param" "maybe type" "temp"
    (767264 'move' call_tmp[767261](79543 call _cond_test call_tmp[767256]))
    if call_tmp[767261]
    {
      (79530 call compilerError "Cannot establish type of owned when initializing with 'nil'")
    }
    unknown call_tmp[767268] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (767271 'move' call_tmp[767268](79554 'typeof' this[79519]))
    unknown call_tmp[767275] "expr temp" "maybe param" "maybe type" "temp"
    (767278 'move' call_tmp[767275](79555 call chpl_t _mt[203] call_tmp[767268]))
    (79552 call(79549 call (partial) init _mt[203] this[79519]) call_tmp[767275])
    (550016 'end of statement')
    unknown call_tmp[767282] "expr temp" "maybe param" "maybe type" "temp"
    (767285 'move' call_tmp[767282](422063 call chpl_t _mt[203] this[79519]))
    unknown call_tmp[767287] "expr temp" "maybe param" "maybe type" "temp"
    (767290 'move' call_tmp[767287](79571 call isNonNilableClass call_tmp[767282]))
    unknown call_tmp[767292] "expr temp" "maybe param" "maybe type" "temp"
    (767295 'move' call_tmp[767292](79573 call _cond_test call_tmp[767287]))
    if call_tmp[767292]
    {
      unknown call_tmp[767297] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (767300 'move' call_tmp[767297](79564 'typeof' this[79519]))
      unknown call_tmp[767302] "expr temp" "maybe param" "maybe type" "temp"
      (767305 'move' call_tmp[767302](79561 call : call_tmp[767297] string[244]))
      (79559 call compilerError "cannot initialize '" call_tmp[767302] "' from 'nil'")
    }
    (598697 return _void[46])
  }
  function _owned[238](?).init[79580](arg _mt[79590]:_MT[201], ref arg this[79583]:_owned[238](?) :
  _owned[238](?), ref arg src[79587]:_owned[238](?)) : void[4] "method" "no return value for void"
  {
    unknown chpl_t[519212] "temp" "type variable"
    (519214 'move' chpl_t[519212](79600 call chpl_t _mt[203] src[79587]))
    (519216 'init field' this[79583] c"chpl_t" chpl_t[519212])
    (550018 'end of statement')
    unknown call_tmp[767311] "maybe param" "maybe type" "temp"
    (767314 'move' call_tmp[767311](79613 call(79610 call (partial) release _mt[203] _owned[238](?)) src[79587]))
    unknown call_tmp[767316] "expr temp" "maybe param" "maybe type" "temp"
    (767319 'move' call_tmp[767316](519230 '.v' this[79583] c"chpl_t"))
    unknown call_tmp[767321] "maybe param" "maybe type" "temp"
    (767324 'move' call_tmp[767321](519222 'to nilable class' call_tmp[767316]))
    unknown chpl_p[519220] "temp"
    (519224 'init var' chpl_p[519220] call_tmp[767311] call_tmp[767321])
    (519226 'init field' this[79583] c"chpl_p" chpl_p[519220])
    (550019 'end of statement')
    (598699 return _void[46])
  }
  function _owned[467876](?).adopt[79617](arg _mt[79625]:_MT[201], arg this[79620]:_owned[467876](?), arg source[79623]:_any[141](?)) : _unknown[42] "method" "no return value for void"
  {
    unknown call_tmp[767326] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (767329 'move' call_tmp[767326](79636 'typeof' source[79623]))
    unknown call_tmp[767331] "expr temp" "maybe param" "maybe type" "temp"
    (767334 'move' call_tmp[767331](79633 call : call_tmp[767326] string[244]))
    (79629 call compilerError "cannot adopt a " call_tmp[767331])
    (598701 return _void[46])
  }
  function _owned[467876](?).adopt[79640](arg _mt[79650]:_MT[201], arg this[79643]:_owned[467876](?), in arg obj[79647]:unmanaged[183](?)) : _unknown[42] "inline" "method"
  {
    unknown ret[598705] "RVV" "temp"
    unknown call_tmp[767336] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (767339 'move' call_tmp[767336](1000016 'new' _owned[238](?) obj[79647]))
    (598710 'move' ret[598705](598709 'deref' call_tmp[767336]))
    (598707 return ret[598705])
  }
  function _owned[467876](?).release[79660](arg _mt[79668]:_MT[201], arg this[79663]:_owned[467876](?), arg source[79666]:_any[141](?)) : _unknown[42] "method" "no return value for void"
  {
    unknown call_tmp[767341] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (767344 'move' call_tmp[767341](79679 'typeof' source[79666]))
    unknown call_tmp[767346] "expr temp" "maybe param" "maybe type" "temp"
    (767349 'move' call_tmp[767346](79676 call : call_tmp[767341] string[244]))
    (79672 call compilerError "cannot release a " call_tmp[767346])
    (598712 return _void[46])
  }
  function _owned[467876](?).release[79683](arg _mt[79693]:_MT[201], arg this[79686]:_owned[467876](?), ref arg obj[79690]:_owned[238](?)) : _unknown[42] "inline" "method"
  {
    unknown ret[598716] "RVV" "temp"
    unknown call_tmp[767353] "maybe param" "maybe type" "temp"
    (767356 'move' call_tmp[767353](79699 call chpl_p _mt[203] obj[79690]))
    unknown oldPtr[79697] "dead at end of block" "insert auto destroy"
    (644421 'init var' oldPtr[79697] call_tmp[767353])
    (79703 'end of statement')
    unknown t[79705] "dead at end of block" "insert auto destroy" "type variable"
    (644427 'move' t[79705](644424 call chpl_t _mt[203] obj[79690]))
    (550023 'end of statement')
    unknown call_tmp[767362] "expr temp" "maybe param" "maybe type" "temp"
    (767365 'move' call_tmp[767362](79714 call chpl_p _mt[203] obj[79690]))
    (79711 call = call_tmp[767362] nil[32])
    (550024 'end of statement')
    unknown tmp[668938] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[668939] "maybe param" "temp"
    unknown call_tmp[767367] "expr temp" "maybe param" "maybe type" "temp"
    (767370 'move' call_tmp[767367](79722 call _to_nilable t[79705]))
    unknown call_tmp[767372] "expr temp" "maybe param" "maybe type" "temp"
    (767375 'move' call_tmp[767372](79719 call == call_tmp[767367] t[79705]))
    (668944 'move' tmp[668939](668942 call _cond_test call_tmp[767372]))
    if tmp[668939]
    {
      unknown tmp[668946] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (668948 'move' tmp[668946](79726 call _to_unmanaged oldPtr[79697]))
      (668953 'move' tmp[668938](668950 '_paramFoldLogical' tmp[668939] tmp[668946]))
    }
    {
      unknown tmp[668955] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[767377] "expr temp" "maybe param" "maybe type" "temp"
      (767380 'move' call_tmp[767377](79730 call postfix! oldPtr[79697]))
      (668957 'move' tmp[668955](79729 call _to_unmanaged call_tmp[767377]))
      (668962 'move' tmp[668938](668959 '_paramFoldLogical' tmp[668939] tmp[668955]))
    }
    (598721 'move' ret[598716](598720 'deref' tmp[668938]))
    gotoReturn _end_release[598714] _end_release[598714]
    (550025 'end of statement' t[79705] oldPtr[79697])
    label _end_release[598714]
    (598718 return ret[598716])
  }
  function _owned[238](?).deinit[79738](arg _mt[79744]:_MT[201], arg this[79741]:_owned[238](?) :
  _owned[238](?)) : _unknown[42] "destructor" "method" "no return value for void"
  {
    unknown call_tmp[767384] "expr temp" "maybe param" "maybe type" "temp"
    (767387 'move' call_tmp[767384](422089 call chpl_p _mt[203] this[79741]))
    unknown call_tmp[767389] "expr temp" "maybe param" "maybe type" "temp"
    (767392 'move' call_tmp[767389](79765 call isClass call_tmp[767384]))
    unknown call_tmp[767394] "expr temp" "maybe param" "maybe type" "temp"
    (767397 'move' call_tmp[767394](79767 call _cond_test call_tmp[767389]))
    if call_tmp[767394]
    {
      unknown call_tmp[767401] "expr temp" "maybe param" "maybe type" "temp"
      (767404 'move' call_tmp[767401](422084 call chpl_p _mt[203] this[79741]))
      unknown call_tmp[767406] "expr temp" "maybe param" "maybe type" "temp"
      (767409 'move' call_tmp[767406](79755 call != call_tmp[767401] nil[32]))
      unknown call_tmp[767411] "expr temp" "maybe param" "maybe type" "temp"
      (767414 'move' call_tmp[767411](79759 call _cond_test call_tmp[767406]))
      if call_tmp[767411]
      {
        unknown call_tmp[767418] "expr temp" "maybe param" "maybe type" "temp"
        (767421 'move' call_tmp[767418](422079 call chpl_p _mt[203] this[79741]))
        unknown call_tmp[767423] "expr temp" "maybe param" "maybe type" "temp"
        (767426 'move' call_tmp[767423](79750 call _to_unmanaged call_tmp[767418]))
        (79752 call chpl__delete call_tmp[767423])
      }
    }
    (598725 return _void[46])
  }
  function _owned[238](?).borrow[79773](arg _mt[79779]:_MT[201], arg this[79776]:_owned[238](?) :
  _owned[238](?)) : _unknown[42] "nil from this" "method"
  {
    unknown ret[598729] "RVV" "temp"
    unknown call_tmp[767430] "expr temp" "maybe param" "maybe type" "temp"
    (767433 'move' call_tmp[767430](422104 call chpl_t _mt[203] this[79776]))
    unknown call_tmp[767435] "expr temp" "maybe param" "maybe type" "temp"
    (767438 'move' call_tmp[767435](79793 call _to_nilable call_tmp[767430]))
    unknown call_tmp[767442] "expr temp" "maybe param" "maybe type" "temp"
    (767445 'move' call_tmp[767442](422109 call chpl_t _mt[203] this[79776]))
    unknown call_tmp[767447] "expr temp" "maybe param" "maybe type" "temp"
    (767450 'move' call_tmp[767447](79790 call == call_tmp[767435] call_tmp[767442]))
    unknown call_tmp[767452] "expr temp" "maybe param" "maybe type" "temp"
    (767455 'move' call_tmp[767452](79796 call _cond_test call_tmp[767447]))
    if call_tmp[767452]
    {
      unknown call_tmp[767459] "expr temp" "maybe param" "maybe type" "temp"
      (767462 'move' call_tmp[767459](422094 call chpl_p _mt[203] this[79776]))
      (598734 'move' ret[598729](598733 'deref' call_tmp[767459]))
      gotoReturn _end_borrow[598727] _end_borrow[598727]
    }
    {
      unknown call_tmp[767466] "expr temp" "maybe param" "maybe type" "temp"
      (767469 'move' call_tmp[767466](422099 call chpl_p _mt[203] this[79776]))
      unknown call_tmp[767471] "expr temp" "maybe param" "maybe type" "temp"
      (767474 'move' call_tmp[767471](79787 call postfix! call_tmp[767466]))
      (598739 'move' ret[598729](598738 'deref' call_tmp[767471]))
      gotoReturn _end_borrow[598727] _end_borrow[598727]
    }
    label _end_borrow[598727]
    (598731 return ret[598729])
  }
  function =[79802](ref arg lhs[79805]:_owned[238](?), ref arg rhs[79809]:_owned[238](?)) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    unknown tmp[481743] "maybe param" "temp"
    unknown call_tmp[767478] "expr temp" "maybe param" "maybe type" "temp"
    (767481 'move' call_tmp[767478](79833 call chpl_p _mt[203] lhs[79805]))
    (481754 'move' tmp[481743](79830 call == call_tmp[767478] nil[32]))
    unknown call_tmp[767483] "expr temp" "maybe param" "maybe type" "temp"
    (767486 'move' call_tmp[767483](481756 call _cond_invalid tmp[481743]))
    if call_tmp[767483]
    {
      (481759 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[668969] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[668970] "maybe param" "temp"
    unknown call_tmp[767488] "expr temp" "maybe param" "maybe type" "temp"
    (767491 'move' call_tmp[767488](481744 call isTrue tmp[481743]))
    (668975 'move' tmp[668970](668973 call _cond_test call_tmp[767488]))
    if tmp[668970]
    {
      unknown tmp[668977] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[767495] "expr temp" "maybe param" "maybe type" "temp"
      (767498 'move' call_tmp[767495](79840 call chpl_p _mt[203] rhs[79809]))
      unknown call_tmp[767500] "expr temp" "maybe param" "maybe type" "temp"
      (767503 'move' call_tmp[767500](79837 call == call_tmp[767495] nil[32]))
      (668979 'move' tmp[668977](481747 call isTrue call_tmp[767500]))
      (668984 'move' tmp[668969](668981 '_paramFoldLogical' tmp[668970] tmp[668977]))
    }
    {
      (668989 'move' tmp[668969](668986 '_paramFoldLogical' tmp[668970] 0))
    }
    unknown call_tmp[767505] "expr temp" "maybe param" "maybe type" "temp"
    (767508 'move' call_tmp[767505](79844 call _cond_test tmp[668969]))
    if call_tmp[767505]
    {
      gotoReturn _end_=[598743] _end_=[598743]
    }
    unknown tmp[481764] "maybe param" "temp"
    (481775 'move' tmp[481764] 1)
    unknown call_tmp[767510] "expr temp" "maybe param" "maybe type" "temp"
    (767513 'move' call_tmp[767510](481777 call _cond_invalid tmp[481764]))
    if call_tmp[767510]
    {
      (481780 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[668996] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[668997] "maybe param" "temp"
    unknown call_tmp[767515] "expr temp" "maybe param" "maybe type" "temp"
    (767518 'move' call_tmp[767515](481765 call isTrue tmp[481764]))
    (669002 'move' tmp[668997](669000 call _cond_test call_tmp[767515]))
    if tmp[668997]
    {
      (669007 'move' tmp[668996](669004 '_paramFoldLogical' tmp[668997] 1))
    }
    {
      unknown tmp[669009] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (669011 'move' tmp[669009](481769 call isTrue enablePostfixBangChecks[52057]))
      (669016 'move' tmp[668996](669013 '_paramFoldLogical' tmp[668997] tmp[669009]))
    }
    unknown call_tmp[767520] "expr temp" "maybe param" "maybe type" "temp"
    (767523 'move' call_tmp[767520](79885 call _cond_test tmp[668996]))
    if call_tmp[767520]
    {
      unknown call_tmp[767527] "expr temp" "maybe param" "maybe type" "temp"
      (767530 'move' call_tmp[767527](79874 call chpl_t _mt[203] lhs[79805]))
      unknown call_tmp[767532] "expr temp" "maybe param" "maybe type" "temp"
      (767535 'move' call_tmp[767532](79872 call isNonNilableClass call_tmp[767527]))
      unknown call_tmp[767537] "expr temp" "maybe param" "maybe type" "temp"
      (767540 'move' call_tmp[767537](79877 call _cond_test call_tmp[767532]))
      if call_tmp[767537]
      {
        unknown call_tmp[767544] "expr temp" "maybe param" "maybe type" "temp"
        (767547 'move' call_tmp[767544](79863 call chpl_p _mt[203] rhs[79809]))
        unknown call_tmp[767549] "expr temp" "maybe param" "maybe type" "temp"
        (767552 'move' call_tmp[767549](79860 call == call_tmp[767544] nil[32]))
        unknown call_tmp[767554] "expr temp" "maybe param" "maybe type" "temp"
        (767557 'move' call_tmp[767554](79867 call _cond_test call_tmp[767549]))
        if call_tmp[767554]
        {
          (79856 call nilCheckHalt module=[222] HaltWrappers[518] "assigning nil to non-nilable owned")
          (400214 'referenced modules list' HaltWrappers[518])
        }
      }
    }
    unknown call_tmp[767561] "expr temp" "maybe param" "maybe type" "temp"
    (767564 'move' call_tmp[767561](79931 call chpl_t _mt[203] lhs[79805]))
    unknown call_tmp[767568] "expr temp" "maybe param" "maybe type" "temp"
    (767571 'move' call_tmp[767568](79927 call chpl_t _mt[203] rhs[79809]))
    unknown call_tmp[767573] "expr temp" "maybe param" "maybe type" "temp"
    (767576 'move' call_tmp[767573](394735 'is_coercible' call_tmp[767561] call_tmp[767568]))
    unknown call_tmp[767578] "expr temp" "maybe param" "maybe type" "temp"
    (767581 'move' call_tmp[767578](79922 call ! call_tmp[767573]))
    unknown call_tmp[767583] "expr temp" "maybe param" "maybe type" "temp"
    (767586 'move' call_tmp[767583](79934 call _cond_test call_tmp[767578]))
    if call_tmp[767583]
    {
      unknown call_tmp[767588] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (767591 'move' call_tmp[767588](79907 'typeof' lhs[79805]))
      unknown call_tmp[767593] "expr temp" "maybe param" "maybe type" "temp"
      (767596 'move' call_tmp[767593](79904 call : call_tmp[767588] string[244]))
      unknown call_tmp[767598] "expr temp" "maybe param" "maybe type" "temp"
      (767601 'move' call_tmp[767598](79899 call + "cannot assign to '" call_tmp[767593]))
      unknown call_tmp[767603] "expr temp" "maybe param" "maybe type" "temp"
      (767606 'move' call_tmp[767603](79897 call + call_tmp[767598] "' "))
      unknown call_tmp[767608] "expr temp" "maybe param" "maybe type" "temp"
      (767611 'move' call_tmp[767608](79895 call + call_tmp[767603] "from '"))
      unknown call_tmp[767613] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (767616 'move' call_tmp[767613](79918 'typeof' rhs[79809]))
      unknown call_tmp[767618] "expr temp" "maybe param" "maybe type" "temp"
      (767621 'move' call_tmp[767618](79915 call : call_tmp[767613] string[244]))
      unknown call_tmp[767623] "expr temp" "maybe param" "maybe type" "temp"
      (767626 'move' call_tmp[767623](79893 call + call_tmp[767608] call_tmp[767618]))
      unknown call_tmp[767628] "expr temp" "maybe param" "maybe type" "temp"
      (767631 'move' call_tmp[767628](79891 call + call_tmp[767623] "'"))
      (79890 call compilerError call_tmp[767628])
    }
    unknown call_tmp[767635] "expr temp" "maybe param" "maybe type" "temp"
    (767638 'move' call_tmp[767635](79944 call chpl_p _mt[203] lhs[79805]))
    unknown call_tmp[767640] "maybe param" "maybe type" "temp"
    (767643 'move' call_tmp[767640](79942 call _to_unmanaged call_tmp[767635]))
    unknown oldPtr[79940] "dead at end of block" "insert auto destroy"
    (644429 'init var' oldPtr[79940] call_tmp[767640])
    (79948 'end of statement')
    unknown call_tmp[767647] "expr temp" "maybe param" "maybe type" "temp"
    (767650 'move' call_tmp[767647](79952 call chpl_p _mt[203] lhs[79805]))
    unknown call_tmp[767654] "expr temp" "maybe param" "maybe type" "temp"
    (767657 'move' call_tmp[767654](79959 call(79956 call (partial) release _mt[203] _owned[238](?)) rhs[79809]))
    (79949 call = call_tmp[767647] call_tmp[767654])
    (550036 'end of statement')
    (79963 call chpl__delete oldPtr[79940])
    (550037 'end of statement' oldPtr[79940])
    label _end_=[598743]
    (598745 return _void[46])
    (396066 'used modules list'(79825 'import' HaltWrappers[518]))
  }
  where {
    unknown tmp[481722] "maybe param" "temp"
    (481733 'move' tmp[481722](79817 call isNonNilableClass lhs[79805]))
    unknown call_tmp[767659] "expr temp" "maybe param" "maybe type" "temp"
    (767662 'move' call_tmp[767659](481735 call _cond_invalid tmp[481722]))
    if call_tmp[767659]
    {
      (481738 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[669023] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[669024] "maybe param" "temp"
    unknown call_tmp[767664] "expr temp" "maybe param" "maybe type" "temp"
    (767667 'move' call_tmp[767664](481723 call isTrue tmp[481722]))
    (669029 'move' tmp[669024](669027 call _cond_test call_tmp[767664]))
    if tmp[669024]
    {
      unknown tmp[669031] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[767669] "expr temp" "maybe param" "maybe type" "temp"
      (767672 'move' call_tmp[767669](79820 call isNilableClass rhs[79809]))
      (669033 'move' tmp[669031](481726 call isTrue call_tmp[767669]))
      (669038 'move' tmp[669023](669035 '_paramFoldLogical' tmp[669024] tmp[669031]))
    }
    {
      (669043 'move' tmp[669023](669040 '_paramFoldLogical' tmp[669024] 0))
    }
    (79812 call ! tmp[669023])
  }
  function =[79969](ref arg lhs[79972]:_owned[238](?), arg rhs[79976]:_nilType[30]) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    unknown call_tmp[767676] "expr temp" "maybe param" "maybe type" "temp"
    (767679 'move' call_tmp[767676](79985 call(79982 call (partial) release _mt[203] _owned[238](?)) lhs[79972]))
    (79987 call chpl__delete call_tmp[767676])
    (598749 return _void[46])
  }
  function <=>[79992](ref arg lhs[79995]:_owned[238](?), ref arg rhs[80000]:_owned[238](?)) : _unknown[42] "operator" "no return value for void"
  {
    unknown call_tmp[767683] "expr temp" "maybe param" "maybe type" "temp"
    (767686 'move' call_tmp[767683](80007 call chpl_p _mt[203] lhs[79995]))
    unknown call_tmp[767690] "expr temp" "maybe param" "maybe type" "temp"
    (767693 'move' call_tmp[767690](80011 call chpl_p _mt[203] rhs[80000]))
    (80004 call <=> call_tmp[767683] call_tmp[767690])
    (598751 return _void[46])
  }
  function chpl__initCopy[80016](ref arg src[80019]:_owned[238](?), arg definedConst[80023]:bool[19]) : _unknown[42] "init copy fn"
  {
    unknown ret[598755] "RVV" "temp"
    unknown call_tmp[767695] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (767698 'move' call_tmp[767695](1000017 'new' _owned[238](?) src[80019]))
    unknown ret[80028] "dead at end of block" "insert auto destroy"
    (644431 'init var' ret[80028] call_tmp[767695])
    (80034 'end of statement')
    (598760 'move' ret[598755](598759 'deref' ret[80028]))
    gotoReturn _end_chpl__initCopy[598753] _end_chpl__initCopy[598753]
    (550041 'end of statement' ret[80028])
    label _end_chpl__initCopy[598753]
    (598757 return ret[598755])
  }
  function chpl__autoCopy[80039](ref arg src[80042]:_owned[238](?), arg definedConst[80046]:bool[19]) : _unknown[42] "auto copy fn"
  {
    unknown ret[598766] "RVV" "temp"
    unknown call_tmp[767700] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (767703 'move' call_tmp[767700](1000018 'new' _owned[238](?) src[80042]))
    unknown ret[80051] "dead at end of block" "insert auto destroy"
    (644433 'init var' ret[80051] call_tmp[767700])
    (80057 'end of statement')
    (598771 'move' ret[598766](598770 'deref' ret[80051]))
    gotoReturn _end_chpl__autoCopy[598764] _end_chpl__autoCopy[598764]
    (550043 'end of statement' ret[80051])
    label _end_chpl__autoCopy[598764]
    (598768 return ret[598766])
  }
  function chpl__autoDestroy[80062](ref arg x[80065]:_owned[238](?)) : _unknown[42] "auto destroy fn" "no return value for void"
  {
    unknown call_tmp[767705] "expr temp" "maybe param" "maybe type" "temp"
    (767708 'move' call_tmp[767705](80070 'deref' x[80065]))
    (80069 'call destructor' call_tmp[767705])
    (598775 return _void[46])
  }
  function _owned[238](?).serialize[80074](arg _mt[80084]:_MT[201], arg this[80077]:_owned[238](?) :
  _owned[238](?), arg writer[80080]:_any[141](?), ref arg serializer[80082]:_any[141](?)) : _unknown[42] throws "method" "no return value for void"
  {
    (80088 call(422142 call (partial) _readWriteHelper _mt[203] this[80077]) writer[80080])
    (598777 return _void[46])
  }
  function _owned[238](?)._readWriteHelper[80092](arg _mt[80100]:_MT[201], arg this[80095]:_owned[238](?) :
  _owned[238](?), arg f[80098]:_any[141](?)) : _unknown[42] throws "method" "no return value for void"
  {
    unknown call_tmp[767714] "expr temp" "maybe param" "maybe type" "temp"
    (767717 'move' call_tmp[767714](80256 call chpl_t _mt[203] this[80095]))
    unknown call_tmp[767719] "expr temp" "maybe param" "maybe type" "temp"
    (767722 'move' call_tmp[767719](80254 call isNonNilableClass call_tmp[767714]))
    unknown call_tmp[767724] "expr temp" "maybe param" "maybe type" "temp"
    (767727 'move' call_tmp[767724](80259 call _cond_test call_tmp[767719]))
    if call_tmp[767724]
    {
      unknown call_tmp[767731] "expr temp" "maybe param" "maybe type" "temp"
      (767734 'move' call_tmp[767731](80111 call chpl_p _mt[203] this[80095]))
      unknown call_tmp[767736] "expr temp" "maybe param" "maybe type" "temp"
      (767739 'move' call_tmp[767736](80108 call postfix! call_tmp[767731]))
      unknown call_tmp[767741] "maybe param" "maybe type" "temp"
      (767744 'move' call_tmp[767741](80106 call : call_tmp[767736] _borrowedNonNilable[177](?)))
      unknown tmp[80105] "dead at end of block" "insert auto destroy"
      (644435 'init var' tmp[80105] call_tmp[767741])
      (80117 'end of statement')
      unknown call_tmp[767748] "expr temp" "maybe param" "maybe type" "temp"
      (767751 'move' call_tmp[767748](80139 call _writing _mt[203] f[80098]))
      unknown call_tmp[767753] "expr temp" "maybe param" "maybe type" "temp"
      (767756 'move' call_tmp[767753](80142 call _cond_test call_tmp[767748]))
      if call_tmp[767753]
      {
        (80122 call(80119 call (partial) write _mt[203] f[80098]) tmp[80105])
        (550047 'end of statement' tmp[80105])
      }
      {
        unknown call_tmp[767762] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (767765 'move' call_tmp[767762](80134 'typeof' tmp[80105]))
        unknown call_tmp[767767] "expr temp" "maybe param" "maybe type" "temp"
        (767770 'move' call_tmp[767767](80132 call(80129 call (partial) read _mt[203] f[80098]) call_tmp[767762]))
        (80125 call = tmp[80105] call_tmp[767767])
        (550049 'end of statement' tmp[80105])
      }
      unknown call_tmp[767772] "expr temp" "maybe param" "maybe type" "temp"
      (767775 'move' call_tmp[767772](80154 call == tmp[80105] nil[32]))
      unknown call_tmp[767777] "expr temp" "maybe param" "maybe type" "temp"
      (767780 'move' call_tmp[767777](80158 call _cond_test call_tmp[767772]))
      if call_tmp[767777]
      {
        (80149 call halt "internal error - read nil")
      }
      unknown call_tmp[767784] "expr temp" "maybe param" "maybe type" "temp"
      (767787 'move' call_tmp[767784](80173 call chpl_p _mt[203] this[80095]))
      unknown call_tmp[767789] "expr temp" "maybe param" "maybe type" "temp"
      (767792 'move' call_tmp[767789](80169 call != tmp[80105] call_tmp[767784]))
      unknown call_tmp[767794] "expr temp" "maybe param" "maybe type" "temp"
      (767797 'move' call_tmp[767794](80176 call _cond_test call_tmp[767789]))
      if call_tmp[767794]
      {
        (80164 call halt "internal error - read changed ptr")
      }
    }
    {
      unknown call_tmp[767801] "expr temp" "maybe param" "maybe type" "temp"
      (767804 'move' call_tmp[767801](80187 call chpl_p _mt[203] this[80095]))
      unknown call_tmp[767806] "maybe param" "maybe type" "temp"
      (767809 'move' call_tmp[767806](80184 call : call_tmp[767801] _borrowedNilable[180](?)))
      unknown tmp[80183] "dead at end of block" "insert auto destroy"
      (644437 'init var' tmp[80183] call_tmp[767806])
      (80194 'end of statement')
      unknown call_tmp[767813] "expr temp" "maybe param" "maybe type" "temp"
      (767816 'move' call_tmp[767813](80214 call _writing _mt[203] f[80098]))
      unknown call_tmp[767818] "expr temp" "maybe param" "maybe type" "temp"
      (767821 'move' call_tmp[767818](80217 call _cond_test call_tmp[767813]))
      if call_tmp[767818]
      {
        (80199 call(80196 call (partial) write _mt[203] f[80098]) tmp[80183])
        (550053 'end of statement' tmp[80183])
      }
      {
        unknown call_tmp[767827] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (767830 'move' call_tmp[767827](80211 'typeof' tmp[80183]))
        unknown call_tmp[767832] "expr temp" "maybe param" "maybe type" "temp"
        (767835 'move' call_tmp[767832](80209 call(80206 call (partial) read _mt[203] f[80098]) call_tmp[767827]))
        (80202 call = tmp[80183] call_tmp[767832])
        (550055 'end of statement' tmp[80183])
      }
      unknown call_tmp[767839] "expr temp" "maybe param" "maybe type" "temp"
      (767842 'move' call_tmp[767839](80231 call chpl_p _mt[203] this[80095]))
      unknown call_tmp[767844] "expr temp" "maybe param" "maybe type" "temp"
      (767847 'move' call_tmp[767844](80227 call != tmp[80183] call_tmp[767839]))
      unknown call_tmp[767849] "expr temp" "maybe param" "maybe type" "temp"
      (767852 'move' call_tmp[767849](80234 call _cond_test call_tmp[767844]))
      if call_tmp[767849]
      {
        (80224 call halt "internal error - read changed ptr")
      }
      unknown call_tmp[767854] "expr temp" "maybe param" "maybe type" "temp"
      (767857 'move' call_tmp[767854](80244 call == tmp[80183] nil[32]))
      unknown call_tmp[767859] "expr temp" "maybe param" "maybe type" "temp"
      (767862 'move' call_tmp[767859](80248 call _cond_test call_tmp[767854]))
      if call_tmp[767859]
      {
        (80239 call = this[80095] nil[32])
      }
    }
    (598779 return _void[46])
  }
  function _owned[238](?).deserialize[80265](arg _mt[80275]:_MT[201], arg this[80268]:_owned[238](?) :
  _owned[238](?), arg reader[80271]:_any[141](?), ref arg deserializer[80273]:_any[141](?)) : _unknown[42] throws "method" "no return value for void"
  {
    unknown call_tmp[767866] "expr temp" "maybe param" "maybe type" "temp"
    (767869 'move' call_tmp[767866](80285 call chpl_p _mt[203] this[80268]))
    unknown call_tmp[767871] "expr temp" "maybe param" "maybe type" "temp"
    (767874 'move' call_tmp[767871](80282 call postfix! call_tmp[767866]))
    unknown call_tmp[767876] "maybe param" "maybe type" "temp"
    (767879 'move' call_tmp[767876](80280 call : call_tmp[767871] _borrowedNonNilable[177](?)))
    unknown tmp[80279] "dead at end of block" "insert auto destroy"
    (644439 'init var' tmp[80279] call_tmp[767876])
    (80291 'end of statement')
    (80296 call(80293 call (partial) read _mt[203] reader[80271]) tmp[80279])
    (550059 'end of statement' tmp[80279])
    (598781 return _void[46])
  }
  function :[80300](in arg x[80305]:owned[467983](?), arg t[80312]:owned?[467987](?)) : _unknown[42] "inline" "operator"
  {
    unknown ret[598785] "RVV" "temp"
    unknown call_tmp[767885] "expr temp" "maybe param" "maybe type" "temp"
    (767888 'move' call_tmp[767885](80333 call chpl_p _mt[203] x[80305]))
    unknown call_tmp[767892] "expr temp" "maybe param" "maybe type" "temp"
    (767895 'move' call_tmp[767892](80341 call chpl_t _mt[203] t[80312]))
    unknown call_tmp[767897] "expr temp" "maybe param" "maybe type" "temp"
    (767900 'move' call_tmp[767897](80339 call _to_unmanaged call_tmp[767892]))
    unknown call_tmp[767902] "expr temp" "maybe param" "maybe type" "temp"
    (767905 'move' call_tmp[767902](80337 call _to_nilable call_tmp[767897]))
    unknown call_tmp[767907] "maybe param" "maybe type" "temp"
    (767910 'move' call_tmp[767907](80330 call : call_tmp[767885] call_tmp[767902]))
    unknown castPtr[80329] "dead at end of block" "insert auto destroy"
    (644441 'init var' castPtr[80329] call_tmp[767907])
    (80345 'end of statement')
    unknown call_tmp[767914] "expr temp" "maybe param" "maybe type" "temp"
    (767917 'move' call_tmp[767914](80349 call chpl_p _mt[203] x[80305]))
    (80346 call = call_tmp[767914] nil[32])
    (550061 'end of statement')
    unknown call_tmp[767919] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (767922 'move' call_tmp[767919](1000019 'new' _owned[238](?) castPtr[80329]))
    (598790 'move' ret[598785](598789 'deref' call_tmp[767919]))
    gotoReturn _end_:[598783] _end_:[598783]
    (550062 'end of statement' castPtr[80329])
    label _end_:[598783]
    (598787 return ret[598785])
  }
  where {
    unknown call_tmp[767926] "expr temp" "maybe param" "maybe type" "temp"
    (767929 'move' call_tmp[767926](80324 call chpl_t _mt[203] t[80312]))
    unknown call_tmp[767931] "expr temp" "maybe param" "maybe type" "temp"
    (767934 'move' call_tmp[767931](80322 call _to_nonnil call_tmp[767926]))
    unknown call_tmp[767938] "expr temp" "maybe param" "maybe type" "temp"
    (767941 'move' call_tmp[767938](80318 call chpl_t _mt[203] x[80305]))
    (394736 'is_subtype' call_tmp[767931] call_tmp[767938])
  }
  function :[80361](in arg x[80367]:owned?[467987](?), arg t[80374]:owned?[467987](?)) : _unknown[42] "inline" "operator"
  {
    unknown ret[598796] "RVV" "temp"
    unknown call_tmp[767945] "expr temp" "maybe param" "maybe type" "temp"
    (767948 'move' call_tmp[767945](80393 call chpl_p _mt[203] x[80367]))
    unknown call_tmp[767952] "expr temp" "maybe param" "maybe type" "temp"
    (767955 'move' call_tmp[767952](80401 call chpl_t _mt[203] t[80374]))
    unknown call_tmp[767957] "expr temp" "maybe param" "maybe type" "temp"
    (767960 'move' call_tmp[767957](80399 call _to_unmanaged call_tmp[767952]))
    unknown call_tmp[767962] "expr temp" "maybe param" "maybe type" "temp"
    (767965 'move' call_tmp[767962](80397 call _to_nilable call_tmp[767957]))
    unknown call_tmp[767967] "maybe param" "maybe type" "temp"
    (767970 'move' call_tmp[767967](80390 call : call_tmp[767945] call_tmp[767962]))
    unknown castPtr[80389] "dead at end of block" "insert auto destroy"
    (644443 'init var' castPtr[80389] call_tmp[767967])
    (80405 'end of statement')
    unknown call_tmp[767974] "expr temp" "maybe param" "maybe type" "temp"
    (767977 'move' call_tmp[767974](80409 call chpl_p _mt[203] x[80367]))
    (80406 call = call_tmp[767974] nil[32])
    (550064 'end of statement')
    unknown call_tmp[767979] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (767982 'move' call_tmp[767979](1000020 'new' _owned[238](?) castPtr[80389]))
    (598801 'move' ret[598796](598800 'deref' call_tmp[767979]))
    gotoReturn _end_:[598794] _end_:[598794]
    (550065 'end of statement' castPtr[80389])
    label _end_:[598794]
    (598798 return ret[598796])
  }
  where {
    unknown call_tmp[767986] "expr temp" "maybe param" "maybe type" "temp"
    (767989 'move' call_tmp[767986](80384 call chpl_t _mt[203] t[80374]))
    unknown call_tmp[767993] "expr temp" "maybe param" "maybe type" "temp"
    (767996 'move' call_tmp[767993](80380 call chpl_t _mt[203] x[80367]))
    (394737 'is_subtype' call_tmp[767986] call_tmp[767993])
  }
  function :[80421](in arg x[80426]:owned[467983](?), arg t[80432]:owned[467983](?)) : _unknown[42] "inline" "operator"
  {
    unknown ret[598807] "RVV" "temp"
    unknown call_tmp[768000] "expr temp" "maybe param" "maybe type" "temp"
    (768003 'move' call_tmp[768000](80451 call chpl_p _mt[203] x[80426]))
    unknown call_tmp[768007] "expr temp" "maybe param" "maybe type" "temp"
    (768010 'move' call_tmp[768007](80459 call chpl_t _mt[203] t[80432]))
    unknown call_tmp[768012] "expr temp" "maybe param" "maybe type" "temp"
    (768015 'move' call_tmp[768012](80457 call _to_unmanaged call_tmp[768007]))
    unknown call_tmp[768017] "expr temp" "maybe param" "maybe type" "temp"
    (768020 'move' call_tmp[768017](80455 call _to_nilable call_tmp[768012]))
    unknown call_tmp[768022] "maybe param" "maybe type" "temp"
    (768025 'move' call_tmp[768022](80448 call : call_tmp[768000] call_tmp[768017]))
    unknown castPtr[80447] "dead at end of block" "insert auto destroy"
    (644445 'init var' castPtr[80447] call_tmp[768022])
    (80463 'end of statement')
    unknown call_tmp[768029] "expr temp" "maybe param" "maybe type" "temp"
    (768032 'move' call_tmp[768029](80467 call chpl_p _mt[203] x[80426]))
    (80464 call = call_tmp[768029] nil[32])
    (550067 'end of statement')
    unknown call_tmp[768034] "expr temp" "maybe param" "maybe type" "temp"
    (768037 'move' call_tmp[768034](80475 call postfix! castPtr[80447]))
    unknown call_tmp[768039] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (768042 'move' call_tmp[768039](1000021 'new' _owned[238](?) call_tmp[768034]))
    (598812 'move' ret[598807](598811 'deref' call_tmp[768039]))
    gotoReturn _end_:[598805] _end_:[598805]
    (550068 'end of statement' castPtr[80447])
    label _end_:[598805]
    (598809 return ret[598807])
  }
  where {
    unknown call_tmp[768046] "expr temp" "maybe param" "maybe type" "temp"
    (768049 'move' call_tmp[768046](80442 call chpl_t _mt[203] t[80432]))
    unknown call_tmp[768053] "expr temp" "maybe param" "maybe type" "temp"
    (768056 'move' call_tmp[768053](80438 call chpl_t _mt[203] x[80426]))
    (394738 'is_subtype' call_tmp[768046] call_tmp[768053])
  }
  function :[80481](in arg x[80487]:owned?[467987](?), arg t[80493]:owned[467983](?)) : _unknown[42] throws "inline" "operator"
  {
    unknown ret[598818] "RVV" "temp"
    unknown call_tmp[768060] "expr temp" "maybe param" "maybe type" "temp"
    (768063 'move' call_tmp[768060](80514 call chpl_p _mt[203] x[80487]))
    unknown call_tmp[768067] "expr temp" "maybe param" "maybe type" "temp"
    (768070 'move' call_tmp[768067](80522 call chpl_t _mt[203] t[80493]))
    unknown call_tmp[768072] "expr temp" "maybe param" "maybe type" "temp"
    (768075 'move' call_tmp[768072](80520 call _to_unmanaged call_tmp[768067]))
    unknown call_tmp[768077] "expr temp" "maybe param" "maybe type" "temp"
    (768080 'move' call_tmp[768077](80518 call _to_nilable call_tmp[768072]))
    unknown call_tmp[768082] "maybe param" "maybe type" "temp"
    (768085 'move' call_tmp[768082](80511 call : call_tmp[768060] call_tmp[768077]))
    unknown castPtr[80510] "dead at end of block" "insert auto destroy"
    (644447 'init var' castPtr[80510] call_tmp[768082])
    (80526 'end of statement')
    unknown call_tmp[768087] "expr temp" "maybe param" "maybe type" "temp"
    (768090 'move' call_tmp[768087](80534 call == castPtr[80510] nil[32]))
    unknown call_tmp[768092] "expr temp" "maybe param" "maybe type" "temp"
    (768095 'move' call_tmp[768092](80538 call _cond_test call_tmp[768087]))
    if call_tmp[768092]
    {
      unknown call_tmp[768097] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (768100 'move' call_tmp[768097](1000022 'new' NilClassError[421132](?)(_chpl_manager = _owned[238](?))))
      unknown call_tmp[768102] "expr temp" "maybe param" "maybe type" "temp"
      (768105 'move' call_tmp[768102](542235 call chpl_fix_thrown_error call_tmp[768097]))
      (80528 'throw' call_tmp[768102])
    }
    unknown call_tmp[768109] "expr temp" "maybe param" "maybe type" "temp"
    (768112 'move' call_tmp[768109](80545 call chpl_p _mt[203] x[80487]))
    (80542 call = call_tmp[768109] nil[32])
    (550071 'end of statement')
    unknown call_tmp[768114] "expr temp" "maybe param" "maybe type" "temp"
    (768117 'move' call_tmp[768114](80553 call postfix! castPtr[80510]))
    unknown call_tmp[768119] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (768122 'move' call_tmp[768119](1000023 'new' _owned[238](?) call_tmp[768114]))
    (598823 'move' ret[598818](598822 'deref' call_tmp[768119]))
    gotoReturn _end_:[598816] _end_:[598816]
    (550072 'end of statement' castPtr[80510])
    label _end_:[598816]
    (598820 return ret[598818])
  }
  where {
    unknown call_tmp[768126] "expr temp" "maybe param" "maybe type" "temp"
    (768129 'move' call_tmp[768126](80505 call chpl_t _mt[203] t[80493]))
    unknown call_tmp[768133] "expr temp" "maybe param" "maybe type" "temp"
    (768136 'move' call_tmp[768133](80501 call chpl_t _mt[203] x[80487]))
    unknown call_tmp[768138] "expr temp" "maybe param" "maybe type" "temp"
    (768141 'move' call_tmp[768138](80499 call _to_nonnil call_tmp[768133]))
    (394739 'is_subtype' call_tmp[768126] call_tmp[768138])
  }
  function :[80559](ref arg x[80565]:owned?[467987](?), arg t[80571]:owned[467983](?)) : _unknown[42] throws "inline" "operator"
  {
    unknown ret[598829] "RVV" "temp"
    unknown call_tmp[768145] "expr temp" "maybe param" "maybe type" "temp"
    (768148 'move' call_tmp[768145](80597 call chpl_p _mt[203] x[80565]))
    unknown call_tmp[768150] "expr temp" "maybe param" "maybe type" "temp"
    (768153 'move' call_tmp[768150](80594 call == call_tmp[768145] nil[32]))
    unknown call_tmp[768155] "expr temp" "maybe param" "maybe type" "temp"
    (768158 'move' call_tmp[768155](80601 call _cond_test call_tmp[768150]))
    if call_tmp[768155]
    {
      unknown call_tmp[768160] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (768163 'move' call_tmp[768160](1000024 'new' NilClassError[421132](?)(_chpl_manager = _owned[238](?))))
      unknown call_tmp[768165] "expr temp" "maybe param" "maybe type" "temp"
      (768168 'move' call_tmp[768165](542237 call chpl_fix_thrown_error call_tmp[768160]))
      (80588 'throw' call_tmp[768165])
    }
    unknown call_tmp[768172] "expr temp" "maybe param" "maybe type" "temp"
    (768175 'move' call_tmp[768172](80610 call chpl_p _mt[203] x[80565]))
    unknown call_tmp[768179] "expr temp" "maybe param" "maybe type" "temp"
    (768182 'move' call_tmp[768179](80618 call chpl_t _mt[203] t[80571]))
    unknown call_tmp[768184] "expr temp" "maybe param" "maybe type" "temp"
    (768187 'move' call_tmp[768184](80616 call _to_unmanaged call_tmp[768179]))
    unknown call_tmp[768189] "expr temp" "maybe param" "maybe type" "temp"
    (768192 'move' call_tmp[768189](80614 call _to_nonnil call_tmp[768184]))
    unknown call_tmp[768194] "maybe param" "maybe type" "temp"
    (768197 'move' call_tmp[768194](80607 call : call_tmp[768172] call_tmp[768189]))
    unknown castPtr[80606] "dead at end of block" "insert auto destroy"
    (644449 'init var' castPtr[80606] call_tmp[768194])
    (80623 'end of statement')
    unknown call_tmp[768201] "expr temp" "maybe param" "maybe type" "temp"
    (768204 'move' call_tmp[768201](80627 call chpl_p _mt[203] x[80565]))
    (80624 call = call_tmp[768201] nil[32])
    (550075 'end of statement')
    unknown call_tmp[768206] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (768209 'move' call_tmp[768206](1000025 'new' _owned[238](?) castPtr[80606]))
    (598834 'move' ret[598829](598833 'deref' call_tmp[768206]))
    gotoReturn _end_:[598827] _end_:[598827]
    (550076 'end of statement' castPtr[80606])
    label _end_:[598827]
    (598831 return ret[598829])
  }
  where {
    unknown call_tmp[768213] "expr temp" "maybe param" "maybe type" "temp"
    (768216 'move' call_tmp[768213](80583 call chpl_t _mt[203] x[80565]))
    unknown call_tmp[768218] "expr temp" "maybe param" "maybe type" "temp"
    (768221 'move' call_tmp[768218](80581 call _to_nonnil call_tmp[768213]))
    unknown call_tmp[768225] "expr temp" "maybe param" "maybe type" "temp"
    (768228 'move' call_tmp[768225](80577 call chpl_t _mt[203] t[80571]))
    (394740 'is_proper_subtype' call_tmp[768218] call_tmp[768225])
  }
  function :[80639](ref arg x[80644]:owned[467983](?), arg t[80650]:owned[467983](?)) : _unknown[42] throws "inline" "operator"
  {
    unknown ret[598840] "RVV" "temp"
    unknown call_tmp[768232] "expr temp" "maybe param" "maybe type" "temp"
    (768235 'move' call_tmp[768232](80669 call chpl_p _mt[203] x[80644]))
    unknown call_tmp[768239] "expr temp" "maybe param" "maybe type" "temp"
    (768242 'move' call_tmp[768239](80677 call chpl_t _mt[203] t[80650]))
    unknown call_tmp[768244] "expr temp" "maybe param" "maybe type" "temp"
    (768247 'move' call_tmp[768244](80675 call _to_unmanaged call_tmp[768239]))
    unknown call_tmp[768249] "expr temp" "maybe param" "maybe type" "temp"
    (768252 'move' call_tmp[768249](80673 call _to_nonnil call_tmp[768244]))
    unknown call_tmp[768254] "maybe param" "maybe type" "temp"
    (768257 'move' call_tmp[768254](80666 call : call_tmp[768232] call_tmp[768249]))
    unknown castPtr[80665] "dead at end of block" "insert auto destroy"
    (644451 'init var' castPtr[80665] call_tmp[768254])
    (80682 'end of statement')
    unknown call_tmp[768261] "expr temp" "maybe param" "maybe type" "temp"
    (768264 'move' call_tmp[768261](80686 call chpl_p _mt[203] x[80644]))
    (80683 call = call_tmp[768261] nil[32])
    (550078 'end of statement')
    unknown call_tmp[768266] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (768269 'move' call_tmp[768266](1000026 'new' _owned[238](?) castPtr[80665]))
    (598845 'move' ret[598840](598844 'deref' call_tmp[768266]))
    gotoReturn _end_:[598838] _end_:[598838]
    (550079 'end of statement' castPtr[80665])
    label _end_:[598838]
    (598842 return ret[598840])
  }
  where {
    unknown call_tmp[768273] "expr temp" "maybe param" "maybe type" "temp"
    (768276 'move' call_tmp[768273](80660 call chpl_t _mt[203] x[80644]))
    unknown call_tmp[768280] "expr temp" "maybe param" "maybe type" "temp"
    (768283 'move' call_tmp[768280](80656 call chpl_t _mt[203] t[80650]))
    (394741 'is_proper_subtype' call_tmp[768273] call_tmp[768280])
  }
  function :[80698](ref arg x[80704]:owned?[467987](?), arg t[80711]:owned?[467987](?)) : _unknown[42] "inline" "operator"
  {
    unknown ret[598851] "RVV" "temp"
    unknown call_tmp[768287] "expr temp" "maybe param" "maybe type" "temp"
    (768290 'move' call_tmp[768287](80730 call chpl_p _mt[203] x[80704]))
    unknown call_tmp[768294] "expr temp" "maybe param" "maybe type" "temp"
    (768297 'move' call_tmp[768294](80738 call chpl_t _mt[203] t[80711]))
    unknown call_tmp[768299] "expr temp" "maybe param" "maybe type" "temp"
    (768302 'move' call_tmp[768299](80736 call _to_unmanaged call_tmp[768294]))
    unknown call_tmp[768304] "expr temp" "maybe param" "maybe type" "temp"
    (768307 'move' call_tmp[768304](80734 call _to_nilable call_tmp[768299]))
    unknown call_tmp[768309] "maybe param" "maybe type" "temp"
    (768312 'move' call_tmp[768309](80727 call : call_tmp[768287] call_tmp[768304]))
    unknown castPtr[80726] "dead at end of block" "insert auto destroy"
    (644453 'init var' castPtr[80726] call_tmp[768309])
    (80742 'end of statement')
    unknown call_tmp[768314] "expr temp" "maybe param" "maybe type" "temp"
    (768317 'move' call_tmp[768314](80751 call != castPtr[80726] nil[32]))
    unknown call_tmp[768319] "expr temp" "maybe param" "maybe type" "temp"
    (768322 'move' call_tmp[768319](80755 call _cond_test call_tmp[768314]))
    if call_tmp[768319]
    {
      unknown call_tmp[768326] "expr temp" "maybe param" "maybe type" "temp"
      (768329 'move' call_tmp[768326](80747 call chpl_p _mt[203] x[80704]))
      (80744 call = call_tmp[768326] nil[32])
    }
    unknown call_tmp[768331] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (768334 'move' call_tmp[768331](1000027 'new' _owned[238](?) castPtr[80726]))
    (598856 'move' ret[598851](598855 'deref' call_tmp[768331]))
    gotoReturn _end_:[598849] _end_:[598849]
    (550082 'end of statement' castPtr[80726])
    label _end_:[598849]
    (598853 return ret[598851])
  }
  where {
    unknown call_tmp[768338] "expr temp" "maybe param" "maybe type" "temp"
    (768341 'move' call_tmp[768338](80721 call chpl_t _mt[203] x[80704]))
    unknown call_tmp[768345] "expr temp" "maybe param" "maybe type" "temp"
    (768348 'move' call_tmp[768345](80717 call chpl_t _mt[203] t[80711]))
    (394742 'is_proper_subtype' call_tmp[768338] call_tmp[768345])
  }
  function :[80767](ref arg x[80772]:owned[467983](?), arg t[80779]:owned?[467987](?)) : _unknown[42] "inline" "operator"
  {
    unknown ret[598862] "RVV" "temp"
    unknown call_tmp[768352] "expr temp" "maybe param" "maybe type" "temp"
    (768355 'move' call_tmp[768352](80800 call chpl_p _mt[203] x[80772]))
    unknown call_tmp[768359] "expr temp" "maybe param" "maybe type" "temp"
    (768362 'move' call_tmp[768359](80808 call chpl_t _mt[203] t[80779]))
    unknown call_tmp[768364] "expr temp" "maybe param" "maybe type" "temp"
    (768367 'move' call_tmp[768364](80806 call _to_unmanaged call_tmp[768359]))
    unknown call_tmp[768369] "expr temp" "maybe param" "maybe type" "temp"
    (768372 'move' call_tmp[768369](80804 call _to_nilable call_tmp[768364]))
    unknown call_tmp[768374] "maybe param" "maybe type" "temp"
    (768377 'move' call_tmp[768374](80797 call : call_tmp[768352] call_tmp[768369]))
    unknown castPtr[80796] "dead at end of block" "insert auto destroy"
    (644455 'init var' castPtr[80796] call_tmp[768374])
    (80812 'end of statement')
    unknown call_tmp[768379] "expr temp" "maybe param" "maybe type" "temp"
    (768382 'move' call_tmp[768379](80821 call != castPtr[80796] nil[32]))
    unknown call_tmp[768384] "expr temp" "maybe param" "maybe type" "temp"
    (768387 'move' call_tmp[768384](80825 call _cond_test call_tmp[768379]))
    if call_tmp[768384]
    {
      unknown call_tmp[768391] "expr temp" "maybe param" "maybe type" "temp"
      (768394 'move' call_tmp[768391](80817 call chpl_p _mt[203] x[80772]))
      (80814 call = call_tmp[768391] nil[32])
    }
    unknown call_tmp[768396] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (768399 'move' call_tmp[768396](1000028 'new' _owned[238](?) castPtr[80796]))
    (598867 'move' ret[598862](598866 'deref' call_tmp[768396]))
    gotoReturn _end_:[598860] _end_:[598860]
    (550085 'end of statement' castPtr[80796])
    label _end_:[598860]
    (598864 return ret[598862])
  }
  where {
    unknown call_tmp[768403] "expr temp" "maybe param" "maybe type" "temp"
    (768406 'move' call_tmp[768403](80791 call chpl_t _mt[203] x[80772]))
    unknown call_tmp[768410] "expr temp" "maybe param" "maybe type" "temp"
    (768413 'move' call_tmp[768410](80787 call chpl_t _mt[203] t[80779]))
    unknown call_tmp[768415] "expr temp" "maybe param" "maybe type" "temp"
    (768418 'move' call_tmp[768415](80785 call _to_nonnil call_tmp[768410]))
    (394743 'is_proper_subtype' call_tmp[768403] call_tmp[768415])
  }
  function :[80837](arg x[80840]:_nilType[30], arg t[80844]:_owned[238](?)) : _unknown[42] "inline" "operator"
  {
    unknown ret[598873] "RVV" "temp"
    unknown call_tmp[768422] "expr temp" "maybe param" "maybe type" "temp"
    (768425 'move' call_tmp[768422](80857 call chpl_t _mt[203] t[80844]))
    unknown call_tmp[768427] "expr temp" "maybe param" "maybe type" "temp"
    (768430 'move' call_tmp[768427](80855 call isNonNilableClass call_tmp[768422]))
    unknown call_tmp[768432] "expr temp" "maybe param" "maybe type" "temp"
    (768435 'move' call_tmp[768432](80860 call _cond_test call_tmp[768427]))
    if call_tmp[768432]
    {
      (80849 call compilerError "Illegal cast from nil to non-nilable owned type")
    }
    unknown call_tmp[768437] "expr temp" "maybe param" "maybe type" "temp"
    (768440 'move' call_tmp[768437](80872 call isGenericType t[80844]))
    unknown call_tmp[768442] "expr temp" "maybe param" "maybe type" "temp"
    (768445 'move' call_tmp[768442](80874 call _cond_test call_tmp[768437]))
    if call_tmp[768442]
    {
      (80866 call compilerError "illegal cast from nil to a generic owned type")
    }
    unknown tmp[80880] "dead at end of block" "insert auto destroy"
    (644457 'default init var' tmp[80880] t[80844])
    (80883 'end of statement')
    (598878 'move' ret[598873](598877 'deref' tmp[80880]))
    gotoReturn _end_:[598871] _end_:[598871]
    (550089 'end of statement' tmp[80880])
    label _end_:[598871]
    (598875 return ret[598873])
  }
  function postfix![80888](const  ref arg x[80891]:_owned[238](?)) : _unknown[42] "always propagate line file info" "inline"
  {
    unknown ret[598884] "RVV" "temp"
    unknown call_tmp[768447] "expr temp" "maybe param" "maybe type" "temp"
    (768450 'move' call_tmp[768447](80935 call _cond_test 1))
    if call_tmp[768447]
    {
      unknown call_tmp[768454] "expr temp" "maybe param" "maybe type" "temp"
      (768457 'move' call_tmp[768454](80923 call chpl_t _mt[203] x[80891]))
      unknown call_tmp[768459] "expr temp" "maybe param" "maybe type" "temp"
      (768462 'move' call_tmp[768459](80921 call _to_nilable call_tmp[768454]))
      unknown call_tmp[768466] "expr temp" "maybe param" "maybe type" "temp"
      (768469 'move' call_tmp[768466](80927 call chpl_t _mt[203] x[80891]))
      unknown call_tmp[768471] "expr temp" "maybe param" "maybe type" "temp"
      (768474 'move' call_tmp[768471](80918 call == call_tmp[768459] call_tmp[768466]))
      unknown call_tmp[768476] "expr temp" "maybe param" "maybe type" "temp"
      (768479 'move' call_tmp[768476](80930 call _cond_test call_tmp[768471]))
      if call_tmp[768476]
      {
        unknown call_tmp[768483] "expr temp" "maybe param" "maybe type" "temp"
        (768486 'move' call_tmp[768483](80910 call chpl_p _mt[203] x[80891]))
        unknown call_tmp[768488] "expr temp" "maybe param" "maybe type" "temp"
        (768491 'move' call_tmp[768488](80907 call == call_tmp[768483] nil[32]))
        unknown call_tmp[768493] "expr temp" "maybe param" "maybe type" "temp"
        (768496 'move' call_tmp[768493](80914 call _cond_test call_tmp[768488]))
        if call_tmp[768493]
        {
          (80905 call nilCheckHalt module=[222] HaltWrappers[518] "argument to ! is nil")
          (400285 'referenced modules list' HaltWrappers[518])
        }
      }
    }
    unknown call_tmp[768500] "expr temp" "maybe param" "maybe type" "temp"
    (768503 'move' call_tmp[768500](80943 call chpl_p _mt[203] x[80891]))
    unknown call_tmp[768505] "expr temp" "maybe param" "maybe type" "temp"
    (768508 'move' call_tmp[768505](80941 call _to_nonnil call_tmp[768500]))
    (598889 'move' ret[598884](598888 'deref' call_tmp[768505]))
    (598886 return ret[598884])
    (396068 'used modules list'(80897 'import' HaltWrappers[518]))
  }
  function |writeSerializable[475127]() : _unknown[42] "ImplementsStmt wrapper"
  { writeSerializable[310070] _owned[238](?)
    {
    }
    (598893 return _void[46])
  }
  function |readDeserializable[475132]() : _unknown[42] "ImplementsStmt wrapper"
  { readDeserializable[310078] _owned[238](?)
    {
    }
    (598897 return _void[46])
  }
  (396064 'used modules list'(79023 'use' ChapelStandard[315387]))
}