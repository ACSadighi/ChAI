AST dump for OwnedObject after pass parseAndConvertUast.
Module use list: 

{
  (79023 'use' ChapelStandard)
  type _owned[238](?) unknown chpl_t[79029] "type variable" unknown chpl_p[79032] "owned"(79033 'to nilable class' chpl_t) function _owned[238](?).chpl_forwarding_expr1[79038](arg _mt[79043]:_MT[201], arg this[79041]:_owned[238](?)) : _unknown[42] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    (79048 return(79047 call borrow))
  } writeSerializable readDeserializable forwarding ( )
  function _unknown[42].init[79053](arg _mt[79061]:_MT[201], arg this[79056] :
  _owned, arg chpl_t[79059]:_any[141](?)) : _unknown[42] "leaves this nil" "method"
  {
    if(79075 call _cond_test(79070 call !(79073 call isClass chpl_t)))
    {
      { scopeless
        (79065 call compilerError "owned only works with classes")
      }
    }
    (79080 call =(79085 call . this c"chpl_t")(79089 call _to_borrowed chpl_t))
    (79091 call =(79096 call . this c"chpl_p") nil[32])
  }
  function _unknown[42].init[79102](arg _mt[79112]:_MT[201], arg this[79105] :
  _owned, arg p[79109] :
  borrowed) : _unknown[42] "method"
  {
    (79116 call compilerError "cannot initialize owned from a borrow")
    (79124 call(79121 call . this c"init")(79126 call _to_unmanaged p))
  }
  function _unknown[42].init[79130](arg _mt[79140]:_MT[201], arg this[79133] :
  _owned, arg p[79137] :
  unmanaged[183](?)) : _unknown[42] "method"
  {
    (79143 call =(79146 call . this c"chpl_t")(79150 call _to_borrowed(79152 'typeof' p)))
    (79153 call =(79156 call . this c"chpl_p")(79160 call _to_borrowed p))
  }
  function _unknown[42].init[79164](arg _mt[79175]:_MT[201], arg this[79167] :
  _owned, arg p[79172] :
  unknown T[79170]) : _unknown[42] "method"
  {
    (79202 call compilerError "owned only works with classes")
    (79204 call =(79207 call . this c"chpl_t") T)
    (79211 call =(79214 call . this c"chpl_p") p)
  }
  where {
    (79177 call &&(79179 call &&(79181 call ==(79184 call isClass T) 0)(79187 call ==(79190 call isSubtype T _owned) 0))(79194 call ==(79197 call isIterator p) 0))
  }
  function _unknown[42].init=[79221](arg _mt[79231]:_MT[201], arg this[79224] :
  _owned, ref arg src[79228] :
  _owned) : _unknown[42] "method"
  {
    (79234 call =(79237 call . this c"chpl_t")(79257 IfExpr (79240 call !=(79244 call .(79243 'typeof' this) c"chpl_t") ?[227]) then
    { scopeless
      (79250 call .(79249 'typeof' this) c"chpl_t")
    } else
    { scopeless
      (79254 call _to_borrowed(79256 'typeof' src))
    } ))
    if(79294 call _cond_test(79280 call ==(79283 call isCoercible(79285 call . src c"chpl_t")(79290 call .(79289 'typeof' this) c"chpl_t")) 0))
    {
      { scopeless
        (79261 call compilerError "cannot initialize '"(79265 call :(79268 'typeof' this) string[244]) "' from a '"(79273 call :(79276 'typeof' src) string[244]) "'")
      }
    }
    (79299 call =(79302 call . this c"chpl_p")(79309 call(79306 call . _owned c"release") src))
    (79315 call(79312 call . this c"chpl__initThisType"))
    if(79341 call _cond_test(79332 call &&(79335 call isNonNilableClass(79337 'typeof' this))(79339 call isNilableClass src)))
    {
      { scopeless
        (79317 call compilerError "cannot initialize '"(79319 call :(79322 'typeof' this) string[244]) "' from a '"(79325 call :(79328 'typeof' src) string[244]) "'")
      }
    }
  }
  function _unknown[42].init=[79348](arg _mt[79358]:_MT[201], arg this[79351] :
  _owned, arg src[79355] :
  _shared) : _unknown[42] "method"
  {
    (79362 call compilerError "cannot initialize '"(79364 call :(79367 'typeof' this) string[244]) "' from a '"(79370 call :(79373 'typeof' src) string[244]) "'")
    (79376 call =(79379 call . this c"chpl_t")(79399 IfExpr (79382 call !=(79386 call .(79385 'typeof' this) c"chpl_t") ?[227]) then
    { scopeless
      (79392 call .(79391 'typeof' this) c"chpl_t")
    } else
    { scopeless
      (79396 call _to_borrowed(79398 'typeof' src))
    } ))
  }
  function _unknown[42].init=[79404](arg _mt[79414]:_MT[201], arg this[79407] :
  _owned, arg src[79411] :
  borrowed) : _unknown[42] "method"
  {
    (79418 call compilerError "cannot initialize '"(79420 call :(79423 'typeof' this) string[244]) "' from a '"(79426 call :(79429 'typeof' src) string[244]) "'")
    (79432 call =(79435 call . this c"chpl_t")(79455 IfExpr (79438 call !=(79442 call .(79441 'typeof' this) c"chpl_t") ?[227]) then
    { scopeless
      (79448 call .(79447 'typeof' this) c"chpl_t")
    } else
    { scopeless
      (79452 call _to_borrowed(79454 'typeof' src))
    } ))
  }
  function _unknown[42].init=[79460](arg _mt[79470]:_MT[201], arg this[79463] :
  _owned, arg src[79467] :
  unmanaged[183](?)) : _unknown[42] "method"
  {
    (79474 call compilerError "cannot initialize '"(79476 call :(79479 'typeof' this) string[244]) "' from a '"(79482 call :(79485 'typeof' src) string[244]) "'")
    (79488 call =(79491 call . this c"chpl_t")(79511 IfExpr (79494 call !=(79498 call .(79497 'typeof' this) c"chpl_t") ?[227]) then
    { scopeless
      (79504 call .(79503 'typeof' this) c"chpl_t")
    } else
    { scopeless
      (79508 call _to_borrowed(79510 'typeof' src))
    } ))
  }
  function _unknown[42].init=[79516](arg _mt[79526]:_MT[201], arg this[79519] :
  _owned, arg src[79523] :
  _nilType) : _unknown[42] "leaves this nil" "method"
  {
    if(79543 call _cond_test(79535 call ==(79539 call .(79538 'typeof' this) c"chpl_t") ?[227]))
    {
      { scopeless
        (79530 call compilerError "Cannot establish type of owned when initializing with 'nil'")
      }
    }
    (79552 call(79549 call . this c"init")(79555 call .(79554 'typeof' this) c"chpl_t"))
    if(79573 call _cond_test(79571 call isNonNilableClass chpl_t))
    {
      { scopeless
        (79559 call compilerError "cannot initialize '"(79561 call :(79564 'typeof' this) string[244]) "' from 'nil'")
      }
    }
  }
  function _unknown[42].init[79580](arg _mt[79590]:_MT[201], arg this[79583] :
  _owned, ref arg src[79587] :
  _owned) : _unknown[42] "method"
  {
    (79593 call =(79596 call . this c"chpl_t")(79600 call . src c"chpl_t"))
    (79603 call =(79606 call . this c"chpl_p")(79613 call(79610 call . _owned c"release") src))
  }
  function _unknown[42].adopt[79617](arg _mt[79625]:_MT[201], arg this[79620] :
  _owned, arg source[79623]:_any[141](?)) : _unknown[42] "method"
  {
    (79629 call compilerError "cannot adopt a "(79633 call :(79636 'typeof' source) string[244]))
  }
  function _unknown[42].adopt[79640](arg _mt[79650]:_MT[201], arg this[79643] :
  _owned, in arg obj[79647] :
  unmanaged[183](?)) : _unknown[42] "inline" "method"
  {
    (79653 return(79654 'new'(79656 call _owned obj)))
  }
  function _unknown[42].release[79660](arg _mt[79668]:_MT[201], arg this[79663] :
  _owned, arg source[79666]:_any[141](?)) : _unknown[42] "method"
  {
    (79672 call compilerError "cannot release a "(79676 call :(79679 'typeof' source) string[244]))
  }
  function _unknown[42].release[79683](arg _mt[79693]:_MT[201], arg this[79686] :
  _owned, ref arg obj[79690] :
  _owned) : _unknown[42] "inline" "method"
  {
    { scopeless
      unknown oldPtr[79697](79699 call . obj c"chpl_p")
      (79703 'end of statement')
    }
    unknown t[79705] "type variable"(79707 call . obj c"chpl_t")
    (79711 call =(79714 call . obj c"chpl_p") nil[32])
    (79718 return(79733 IfExpr (79719 call ==(79722 call _to_nilable t) t) then
    { scopeless
      (79726 call _to_unmanaged oldPtr)
    } else
    { scopeless
      (79729 call _to_unmanaged(79730 call postfix! oldPtr))
    } ))
  }
  function _unknown[42].deinit[79738](arg _mt[79744]:_MT[201], arg this[79741] :
  _owned) : _unknown[42] "destructor" "method"
  {
    if(79767 call _cond_test(79765 call isClass chpl_p))
    {
      if(79759 call _cond_test(79755 call != chpl_p nil[32]))
      {
        { scopeless
          (79752 call chpl__delete(79750 call _to_unmanaged chpl_p))
        }
      }
    }
  }
  function _unknown[42].borrow[79773](arg _mt[79779]:_MT[201], arg this[79776] :
  _owned) : _unknown[42] "nil from this" "method"
  {
    if(79796 call _cond_test(79790 call ==(79793 call _to_nilable chpl_t) chpl_t))
    {
      (79783 return chpl_p)
    }
    {
      (79786 return(79787 call postfix! chpl_p))
    }
  }
  function =[79802](ref arg lhs[79805] :
  _owned, ref arg rhs[79809] :
  _owned) : _unknown[42] "assignop" "operator"
  {
    (79825 'import' HaltWrappers)
    if(79844 call _cond_test(79828 call &&(79830 call ==(79833 call . lhs c"chpl_p") nil[32])(79837 call ==(79840 call . rhs c"chpl_p") nil[32])))
    {
      { scopeless
        (79826 return)
      }
    }
    if(79885 call _cond_test(79881 call || chpl_checkNilDereferences enablePostfixBangChecks))
    {
      if(79877 call _cond_test(79872 call isNonNilableClass(79874 call . lhs c"chpl_t")))
      {
        if(79867 call _cond_test(79860 call ==(79863 call . rhs c"chpl_p") nil[32]))
        {
          (79856 call(79853 call . HaltWrappers c"nilCheckHalt") "assigning nil to non-nilable owned")
        }
      }
    }
    if(79934 call _cond_test(79922 call !(79925 call isCoercible(79927 call . rhs c"chpl_t")(79931 call . lhs c"chpl_t"))))
    {
      { scopeless
        (79890 call compilerError(79891 call +(79893 call +(79895 call +(79897 call +(79899 call + "cannot assign to '"(79904 call :(79907 'typeof' lhs) string[244])) "' ") "from '")(79915 call :(79918 'typeof' rhs) string[244])) "'"))
      }
    }
    { scopeless
      unknown oldPtr[79940](79942 call _to_unmanaged(79944 call . lhs c"chpl_p"))
      (79948 'end of statement')
    }
    (79949 call =(79952 call . lhs c"chpl_p")(79959 call(79956 call . _owned c"release") rhs))
    (79963 call chpl__delete oldPtr)
  }
  where {
    (79812 call !(79814 call &&(79817 call isNonNilableClass lhs)(79820 call isNilableClass rhs)))
  }
  function =[79969](ref arg lhs[79972] :
  _owned, arg rhs[79976] :
  _nilType) : _unknown[42] "assignop" "operator"
  {
    (79987 call chpl__delete(79985 call(79982 call . _owned c"release") lhs))
  }
  function <=>[79992](ref arg lhs[79995] :
  _owned, ref arg rhs[80000] :
  (79999 'typeof' lhs)) : _unknown[42] "operator"
  {
    (80004 call <=>(80007 call . lhs c"chpl_p")(80011 call . rhs c"chpl_p"))
  }
  function chpl__initCopy[80016](ref arg src[80019] :
  _owned, arg definedConst[80023] :
  bool) : _unknown[42] "init copy fn"
  {
    { scopeless
      unknown ret[80028](80029 'new'(80031 call _owned src))
      (80034 'end of statement')
    }
    (80035 return ret)
  }
  function chpl__autoCopy[80039](ref arg src[80042] :
  _owned, arg definedConst[80046] :
  bool) : _unknown[42] "auto copy fn"
  {
    { scopeless
      unknown ret[80051](80052 'new'(80054 call _owned src))
      (80057 'end of statement')
    }
    (80058 return ret)
  }
  function chpl__autoDestroy[80062](ref arg x[80065] :
  _owned) : _unknown[42] "auto destroy fn"
  {
    (80069 'call destructor'(80070 'deref' x))
  }
  function _unknown[42].serialize[80074](arg _mt[80084]:_MT[201], arg this[80077] :
  _owned, arg writer[80080]:_any[141](?), ref arg serializer[80082]:_any[141](?)) : _unknown[42] throws "method"
  {
    (80088 call _readWriteHelper writer)
  }
  function _unknown[42]._readWriteHelper[80092](arg _mt[80100]:_MT[201], arg this[80095] :
  _owned, arg f[80098]:_any[141](?)) : _unknown[42] throws "method"
  {
    if(80259 call _cond_test(80254 call isNonNilableClass(80256 call . this c"chpl_t")))
    {
      { scopeless
        unknown tmp[80105](80106 call :(80108 call postfix!(80111 call . this c"chpl_p"))(80114 'to borrowed class from unknown' class))
        (80117 'end of statement')
      }
      if(80142 call _cond_test(80139 call . f c"_writing"))
      {
        { scopeless
          (80122 call(80119 call . f c"write") tmp)
        }
      }
      {
        { scopeless
          (80125 call = tmp(80132 call(80129 call . f c"read")(80134 'typeof' tmp)))
        }
      }
      if(80158 call _cond_test(80154 call == tmp nil[32]))
      {
        { scopeless
          (80149 call halt "internal error - read nil")
        }
      }
      if(80176 call _cond_test(80169 call != tmp(80173 call . this c"chpl_p")))
      {
        { scopeless
          (80164 call halt "internal error - read changed ptr")
        }
      }
    }
    {
      { scopeless
        unknown tmp[80183](80184 call :(80187 call . this c"chpl_p")(80190 'to borrowed class from unknown'(80192 'to nilable class from type' class)))
        (80194 'end of statement')
      }
      if(80217 call _cond_test(80214 call . f c"_writing"))
      {
        { scopeless
          (80199 call(80196 call . f c"write") tmp)
        }
      }
      {
        { scopeless
          (80202 call = tmp(80209 call(80206 call . f c"read")(80211 'typeof' tmp)))
        }
      }
      if(80234 call _cond_test(80227 call != tmp(80231 call . this c"chpl_p")))
      {
        { scopeless
          (80224 call halt "internal error - read changed ptr")
        }
      }
      if(80248 call _cond_test(80244 call == tmp nil[32]))
      {
        { scopeless
          (80239 call = this nil[32])
        }
      }
    }
  }
  function _unknown[42].deserialize[80265](arg _mt[80275]:_MT[201], arg this[80268] :
  _owned, arg reader[80271]:_any[141](?), ref arg deserializer[80273]:_any[141](?)) : _unknown[42] throws "method"
  {
    { scopeless
      unknown tmp[80279](80280 call :(80282 call postfix!(80285 call . this c"chpl_p"))(80288 'to borrowed class from unknown' class))
      (80291 'end of statement')
    }
    (80296 call(80293 call . reader c"read") tmp)
  }
  function :[80300](in arg x[80305] :
  (80303 call _owned class), arg t[80312] :
  (80309 call _owned(80311 'to nilable class from type' class))) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown castPtr[80329](80330 call :(80333 call . x c"chpl_p")(80337 call _to_nilable(80339 call _to_unmanaged(80341 call . t c"chpl_t"))))
      (80345 'end of statement')
    }
    (80346 call =(80349 call . x c"chpl_p") nil[32])
    (80353 return(80354 'new'(80356 call _owned castPtr)))
  }
  where {
    (80316 call isSubtype(80318 call . x c"chpl_t")(80322 call _to_nonnil(80324 call . t c"chpl_t")))
  }
  function :[80361](in arg x[80367] :
  (80364 call _owned(80366 'to nilable class from type' class)), arg t[80374] :
  (80371 call _owned(80373 'to nilable class from type' class))) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown castPtr[80389](80390 call :(80393 call . x c"chpl_p")(80397 call _to_nilable(80399 call _to_unmanaged(80401 call . t c"chpl_t"))))
      (80405 'end of statement')
    }
    (80406 call =(80409 call . x c"chpl_p") nil[32])
    (80413 return(80414 'new'(80416 call _owned castPtr)))
  }
  where {
    (80378 call isSubtype(80380 call . x c"chpl_t")(80384 call . t c"chpl_t"))
  }
  function :[80421](in arg x[80426] :
  (80424 call _owned class), arg t[80432] :
  (80430 call _owned class)) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown castPtr[80447](80448 call :(80451 call . x c"chpl_p")(80455 call _to_nilable(80457 call _to_unmanaged(80459 call . t c"chpl_t"))))
      (80463 'end of statement')
    }
    (80464 call =(80467 call . x c"chpl_p") nil[32])
    (80471 return(80472 'new'(80474 call _owned(80475 call postfix! castPtr))))
  }
  where {
    (80436 call isSubtype(80438 call . x c"chpl_t")(80442 call . t c"chpl_t"))
  }
  function :[80481](in arg x[80487] :
  (80484 call _owned(80486 'to nilable class from type' class)), arg t[80493] :
  (80491 call _owned class)) : _unknown[42] throws "inline" "operator"
  {
    { scopeless
      unknown castPtr[80510](80511 call :(80514 call . x c"chpl_p")(80518 call _to_nilable(80520 call _to_unmanaged(80522 call . t c"chpl_t"))))
      (80526 'end of statement')
    }
    if(80538 call _cond_test(80534 call == castPtr nil[32]))
    {
      (80528 'throw'(80529 'new'(_chpl_manager = _owned[238](?))(80533 call NilClassError)))
    }
    (80542 call =(80545 call . x c"chpl_p") nil[32])
    (80549 return(80550 'new'(80552 call _owned(80553 call postfix! castPtr))))
  }
  where {
    (80497 call isSubtype(80499 call _to_nonnil(80501 call . x c"chpl_t"))(80505 call . t c"chpl_t"))
  }
  function :[80559](ref arg x[80565] :
  (80562 call _owned(80564 'to nilable class from type' class)), arg t[80571] :
  (80569 call _owned class)) : _unknown[42] throws "inline" "operator"
  {
    if(80601 call _cond_test(80594 call ==(80597 call . x c"chpl_p") nil[32]))
    {
      (80588 'throw'(80589 'new'(_chpl_manager = _owned[238](?))(80593 call NilClassError)))
    }
    { scopeless
      unknown castPtr[80606](80621 'try-expr'(80607 call :(80610 call . x c"chpl_p")(80614 call _to_nonnil(80616 call _to_unmanaged(80618 call . t c"chpl_t")))))
      (80623 'end of statement')
    }
    (80624 call =(80627 call . x c"chpl_p") nil[32])
    (80631 return(80632 'new'(80634 call _owned castPtr)))
  }
  where {
    (80575 call isProperSubtype(80577 call . t c"chpl_t")(80581 call _to_nonnil(80583 call . x c"chpl_t")))
  }
  function :[80639](ref arg x[80644] :
  (80642 call _owned class), arg t[80650] :
  (80648 call _owned class)) : _unknown[42] throws "inline" "operator"
  {
    { scopeless
      unknown castPtr[80665](80680 'try-expr'(80666 call :(80669 call . x c"chpl_p")(80673 call _to_nonnil(80675 call _to_unmanaged(80677 call . t c"chpl_t")))))
      (80682 'end of statement')
    }
    (80683 call =(80686 call . x c"chpl_p") nil[32])
    (80690 return(80691 'new'(80693 call _owned castPtr)))
  }
  where {
    (80654 call isProperSubtype(80656 call . t c"chpl_t")(80660 call . x c"chpl_t"))
  }
  function :[80698](ref arg x[80704] :
  (80701 call _owned(80703 'to nilable class from type' class)), arg t[80711] :
  (80708 call _owned(80710 'to nilable class from type' class))) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown castPtr[80726](80727 call :(80730 call . x c"chpl_p")(80734 call _to_nilable(80736 call _to_unmanaged(80738 call . t c"chpl_t"))))
      (80742 'end of statement')
    }
    if(80755 call _cond_test(80751 call != castPtr nil[32]))
    {
      (80744 call =(80747 call . x c"chpl_p") nil[32])
    }
    (80759 return(80760 'new'(80762 call _owned castPtr)))
  }
  where {
    (80715 call isProperSubtype(80717 call . t c"chpl_t")(80721 call . x c"chpl_t"))
  }
  function :[80767](ref arg x[80772] :
  (80770 call _owned class), arg t[80779] :
  (80776 call _owned(80778 'to nilable class from type' class))) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown castPtr[80796](80797 call :(80800 call . x c"chpl_p")(80804 call _to_nilable(80806 call _to_unmanaged(80808 call . t c"chpl_t"))))
      (80812 'end of statement')
    }
    if(80825 call _cond_test(80821 call != castPtr nil[32]))
    {
      (80814 call =(80817 call . x c"chpl_p") nil[32])
    }
    (80829 return(80830 'new'(80832 call _owned castPtr)))
  }
  where {
    (80783 call isProperSubtype(80785 call _to_nonnil(80787 call . t c"chpl_t"))(80791 call . x c"chpl_t"))
  }
  function :[80837](arg x[80840] :
  _nilType, arg t[80844] :
  _owned) : _unknown[42] "inline" "operator"
  {
    if(80860 call _cond_test(80855 call isNonNilableClass(80857 call . t c"chpl_t")))
    {
      { scopeless
        (80849 call compilerError "Illegal cast from nil to non-nilable owned type")
      }
    }
    if(80874 call _cond_test(80872 call isGenericType t))
    {
      { scopeless
        (80866 call compilerError "illegal cast from nil to a generic owned type")
      }
    }
    { scopeless
      unknown tmp[80880] t
      (80883 'end of statement')
    }
    (80884 return tmp)
  }
  function postfix![80888](const  ref arg x[80891] :
  _owned) : _unknown[42] "always propagate line file info" "inline"
  {
    (80897 'import' HaltWrappers)
    if(80935 call _cond_test chpl_checkNilDereferences)
    {
      if(80930 call _cond_test(80918 call ==(80921 call _to_nilable(80923 call . x c"chpl_t"))(80927 call . x c"chpl_t")))
      {
        if(80914 call _cond_test(80907 call ==(80910 call . x c"chpl_p") nil[32]))
        {
          (80905 call(80902 call . HaltWrappers c"nilCheckHalt") "argument to ! is nil")
        }
      }
    }
    (80939 return(80941 call _to_nonnil(80943 call . x c"chpl_p")))
  }
}