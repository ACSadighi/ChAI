AST dump for AggregationPrimitives after pass readExternC.
Module use list: 

{
  (387064 'use' ChapelStandard)
  (313666 'use' CTypes)
  (313669 'use' Communication)
  (313676 'import'(313673 call . Communication c"get") 'as' GET)
  (313684 'import'(313681 call . Communication c"put") 'as' PUT)
  function getAddr[313685](const  ref arg p[313687]:_any[141](?)) : _unknown[42] "inline"
  {
    (313694 return(313695 call :(313697 '_wide_get_addr' p)(313700 call c_ptr(313702 'typeof' p))))
  }
  { scopeless type
    (313690 call c_ptr(313692 'typeof' p))
  }
  function bufferIdxAlloc[313706]() : _unknown[42] "inline"
  {
    { scopeless
      const cachePaddedLocales[313710] "const"(313711 call &(313713 call + numLocales 7)(313717 call ~ 7))
      (313721 'end of statement')
    }
    (313722 return(313724 call allocate int[10] cachePaddedLocales(alignment = 64)))
  }
  function getEnvInt[313731](arg name[313734] :
  string[244], arg default[313738] :
  int[10]) : _unknown[42]
  {
    function getenv[313743](arg name[313748] :
    (313746 call c_ptrConst c_char)) : _unknown[42] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (313752 call c_ptrConst c_char)
    }
    { scopeless
      const envValue[313758] "const"(313760 call getenv(313769 call(313766 call .(313765 call(313762 call . name c"localize")) c"c_str")))
      (313771 'end of statement')
    }
    { scopeless
      const len[313773] "const"(313775 call strLen envValue)
      (313778 'end of statement')
    }
    { scopeless
      const strval[313780] "const"(313789 'try!-expr'(313785 call(313782 call . string[244] c"createAdoptingBuffer") envValue(length = len)))
      (313791 'end of statement')
    }
    if(313800 call _cond_test(313799 call(313796 call . strval c"isEmpty")))
    {
      (313793 return default)
    }
    (313804 return(313809 'try!-expr'(313805 call : strval int[10])))
  }
  { scopeless type
    int[10]
  }
  type remoteBuffer[314390](?) unknown elemType[313815] "type variable" unknown size[313818] int[10] unknown loc[313823] int[10] unknown data[313828](313830 call c_ptr elemType) function remoteBuffer[314390](?).cachedAlloc[313834](arg _mt[313838]:_MT[201], ref arg this[313836]:remoteBuffer[314390](?)) : _unknown[42] "method" "primary method"
  {
    if(313881 call _cond_test(313877 call == data nil[32]))
    {
      { scopeless
        const rvf_size[313846] "const"(313851 call(313848 call . size c"safeCast") c_size_t)
        (313854 'end of statement')
      }
      {
        const tmp[313869] "const" "temp"
        (313870 'move' tmp[313869](313867 'deref'(313866 '_wide_get_locale'(313856 call Locales loc))))
        {
          (313859 call = data(313863 call allocate elemType rvf_size))
        }
        (313873 'elided on block' 0 tmp[313869])
      }
    }
    (313885 return data)
  }
  { scopeless type
    (313841 call c_ptr elemType)
  } function remoteBuffer[314390](?).localIter[313890](arg _mt[313904]:_MT[201], arg this[313892]:remoteBuffer[314390](?), arg data[313897] :
  (313895 call c_ptr elemType), arg size[313901] :
  int[10]) ref : _unknown[42] "iterator fn" "method" "primary method"
  {
    if(313939 call _cond_test boundsChecking)
    {
      (313910 call assert(313911 call ==(313916 call . this c"loc")(313920 call . here c"id")))
      (313924 call assert(313925 call ==(313928 call . this c"data") data))
      (313933 call assert(313934 call != data nil[32]))
    }
    {
      unknown _indexOfInterest[313958] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[313959] "expr temp" "temp"
      (313968 'move' _iterator[313959](313966 call _getIterator(313974 call chpl_direct_range_iter 0(313972 call chpl__nudgeHighBound size))))
      Defer
      {
        {
          (313989 call _freeIterator _iterator[313959])
        }
      }
      { scopeless type
        (313979 'move' _indexOfInterest[313958](313976 call iteratorIndex _iterator[313959]))
      }
      ForLoop[313960] order-independent
      {
        unknown i[313943] "index var" "insert auto destroy"
        (313984 'move' i[313943] _indexOfInterest[313958])
        {
          (313952 yield(313954 call data i))
        }
        label _continueLabel[313963]
        _indexOfInterest[313958]
        _iterator[313959]
      }
      label _breakLabel[313964]
    }
  }
  { scopeless type
    elemType
  } function remoteBuffer[314390](?).localFree[313999](arg _mt[314009]:_MT[201], arg this[314001]:remoteBuffer[314390](?), arg data[314006] :
  (314004 call c_ptr elemType)) : _unknown[42] "inline" "method" "primary method"
  {
    if(314041 call _cond_test boundsChecking)
    {
      (314014 call assert(314015 call ==(314018 call . this c"loc")(314022 call . here c"id")))
      (314026 call assert(314027 call ==(314030 call . this c"data") data))
      (314035 call assert(314036 call != data nil[32]))
    }
    (314046 call deallocate data)
  } function remoteBuffer[314390](?).markFreed[314050](arg _mt[314054]:_MT[201], ref arg this[314052]:remoteBuffer[314390](?)) : _unknown[42] "inline" "method" "primary method"
  {
    if(314072 call _cond_test boundsChecking)
    {
      (314059 call assert(314060 call ==(314066 '_wide_get_node' this)(314068 call . here c"id")))
    }
    (314076 call = data nil[32])
  } function remoteBuffer[314390](?).PUT[314082](arg _mt[314097]:_MT[201], arg this[314084]:remoteBuffer[314390](?), ref arg lArr[314090] :
  (314088 call chpl__buildArrayRuntimeType nil[32] elemType), arg size[314094] :
  int[10]) : _unknown[42] "method" "primary method"
  {
    if(314153 call _cond_test boundsChecking)
    {
      (314107 call assert(314108 call <= size(314112 call . this c"size")))
      (314116 call assert(314117 call ==(314120 call . this c"size")(314124 call . lArr c"size")))
      (314128 call assert(314129 call ==(314135 call .(314132 call . lArr c"_dom") c"lowBound") 0))
      (314140 call assert(314141 call ==(314147 '_wide_get_node' lArr)(314149 call . here c"id")))
    }
    { scopeless
      const byte_size[314158] "const"(314159 call *(314161 call : size c_size_t)(314166 call c_sizeof elemType))
      (314169 'end of statement')
    }
    (314174 call(314171 call . AggregationPrimitives c"PUT") data(314177 call c_ptrTo(314179 call lArr 0)) loc byte_size)
  }
  where {
    (314103 call(314100 call . lArr c"isDefaultRectangular"))
  } function remoteBuffer[314390](?).PUT[314186](arg _mt[314200]:_MT[201], arg this[314188]:remoteBuffer[314390](?), arg lArr[314193] :
  (314191 call c_ptr elemType), arg size[314197] :
  int[10]) : _unknown[42] "method" "primary method"
  {
    if(314214 call _cond_test boundsChecking)
    {
      (314205 call assert(314206 call <= size(314210 call . this c"size")))
    }
    { scopeless
      const byte_size[314219] "const"(314220 call *(314222 call : size c_size_t)(314227 call c_sizeof elemType))
      (314230 'end of statement')
    }
    (314235 call(314232 call . AggregationPrimitives c"PUT") data lArr loc byte_size)
  } function remoteBuffer[314390](?).GET[314242](arg _mt[314257]:_MT[201], arg this[314244]:remoteBuffer[314390](?), ref arg lArr[314250] :
  (314248 call chpl__buildArrayRuntimeType nil[32] elemType), arg size[314254] :
  int[10]) : _unknown[42] "method" "primary method"
  {
    if(314313 call _cond_test boundsChecking)
    {
      (314267 call assert(314268 call <= size(314272 call . this c"size")))
      (314276 call assert(314277 call ==(314280 call . this c"size")(314284 call . lArr c"size")))
      (314288 call assert(314289 call ==(314295 call .(314292 call . lArr c"_dom") c"lowBound") 0))
      (314300 call assert(314301 call ==(314307 '_wide_get_node' lArr)(314309 call . here c"id")))
    }
    { scopeless
      const byte_size[314318] "const"(314319 call *(314321 call : size c_size_t)(314326 call c_sizeof elemType))
      (314329 'end of statement')
    }
    (314334 call(314331 call . AggregationPrimitives c"GET")(314336 call c_ptrTo(314338 call lArr 0)) data loc byte_size)
  }
  where {
    (314263 call(314260 call . lArr c"isDefaultRectangular"))
  } function remoteBuffer[314390](?).deinit[314346](arg _mt[314350]:_MT[201], ref arg this[314348]:remoteBuffer[314390](?)) : _unknown[42] "destructor" "method" "primary method"
  {
    if(314383 call _cond_test(314379 call != data nil[32]))
    {
      { scopeless
        const rvf_data[314355] "const" data
        (314358 'end of statement')
      }
      {
        const tmp[314369] "const" "temp"
        (314370 'move' tmp[314369](314367 'deref'(314366 '_wide_get_locale'(314360 call Locales loc))))
        {
          (314364 call localFree rvf_data)
        }
        (314373 'elided on block' 0 tmp[314369])
      }
      (314378 call markFreed)
    }
  }
}