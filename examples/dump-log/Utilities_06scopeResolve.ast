AST dump for Utilities after pass scopeResolve.
Module use list: ChapelStandard IO ChapelArray Math ChplConfig 

{
  unknown loopGpuSupport[316236] "config" "param"(316237 call == CHPL_LOCALE_MODEL[29682] "gpu")
  (316242 'end of statement')
  function targetGpu[316243]() param : _unknown[42]
  {
    if(316285 call _cond_test(316278 call && loopGpuSupport[316236](316281 call == CHPL_LOCALE_MODEL[29682] "gpu")))
    {
      (316248 return 1)
    }
    {
      if(316273 call _cond_test(316269 call == CHPL_LOCALE_MODEL[29682] "gpu"))
      {
        (316251 return 1)
      }
      {
        if(316265 call _cond_test loopGpuSupport[316236])
        {
          (316255 call compilerError "loopGpuSupport should be enabled if CHPL_LOCALE_MODEL is set to 'gpu'.")
          (316259 return 0)
        }
        {
          (316262 return 0)
        }
      }
    }
  }
  { scopeless type
    bool[19]
  }
  def module Types[316323]  
  unknown debugPrint[316335] "param" 0
  (316338 'end of statement')
  function err[316339](arg args[316343]:_any[141](?) ...) : _unknown[42] "no return value for void"
  {
    unknown s[316348] ""
    (316351 'end of statement')
    {
      unknown i[316352] "index var" 0
      unknown tmp[316370] "maybe param" "temp"
      (316382 'move' tmp[316370](316380 call chpl_compute_low_param_loop_bound 0(316356 call chpl__nudgeHighBound n[316341])))
      unknown tmp[316371] "maybe param" "temp"
      (316391 'move' tmp[316371](316389 call chpl_compute_high_param_loop_bound 0(316387 call chpl__nudgeHighBound n[316341])))
      unknown tmp[316372] "maybe param" "temp"
      (316394 'move' tmp[316372] 1)
      ParamForLoop[316396]
      { i[316352] tmp[316370] tmp[316371] tmp[316372]
        {
          (316361 call += s[316348](316364 call :(316367 call args[316343] i[316352]) string[244]))
        }
      }
      label _unused_continueLabel[316374]
      label _breakLabel[316373]
    }
    Try!
    {
      {
        (316406 'throw'(316407 'new'(316412 call Error[316409](?) s[316348])))
      }
    }
  }
  function debugWrite[316419](arg args[316423]:_any[141](?) ...) : _unknown[42] "no return value for void"
  {
    if(316512 call _cond_test debugPrint[316335])
    {
      unknown s[316429] ""
      (316432 'end of statement')
      {
        unknown i[316433] "index var" 0
        unknown tmp[316451] "maybe param" "temp"
        (316463 'move' tmp[316451](316461 call chpl_compute_low_param_loop_bound 0(316437 call chpl__nudgeHighBound n[316421])))
        unknown tmp[316452] "maybe param" "temp"
        (316472 'move' tmp[316452](316470 call chpl_compute_high_param_loop_bound 0(316468 call chpl__nudgeHighBound n[316421])))
        unknown tmp[316453] "maybe param" "temp"
        (316475 'move' tmp[316453] 1)
        ParamForLoop[316477]
        { i[316433] tmp[316451] tmp[316452] tmp[316453]
          {
            (316442 call += s[316429](316445 call :(316448 call args[316423] i[316433]) string[244]))
          }
        }
        label _unused_continueLabel[316455]
        label _breakLabel[316454]
      }
      Try!
      {
        {
          (316494 call(316491 call . stdout[196765] c"write") s[316429])
          (316488 'referenced modules list' IO[208303])
        }
      }
      Try!
      {
        {
          (316507 call(316504 call . stdout[196765] c"flush"))
          (316501 'referenced modules list' IO[208303])
        }
      }
    }
  }
  function cartesian[316518](arg X[316520]:_any[141](?), arg Y[316522]:_any[141](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    {
      unknown _indexOfInterest[316571] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[316572] "expr temp" "temp"
      (316581 'move' _iterator[316572](316579 call _getIterator X[316520]))
      Defer
      {
        {
          (316596 call _freeIterator _iterator[316572])
        }
      }
      { scopeless type
        (316586 'move' _indexOfInterest[316571](316583 call iteratorIndex _iterator[316572]))
      }
      ForLoop[316573]
      {
        unknown x[316525] "index var" "insert auto destroy"
        (316591 'move' x[316525] _indexOfInterest[316571])
        {
          {
            unknown _indexOfInterest[316539] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[316540] "expr temp" "temp"
            (316549 'move' _iterator[316540](316547 call _getIterator Y[316522]))
            Defer
            {
              {
                (316564 call _freeIterator _iterator[316540])
              }
            }
            { scopeless type
              (316554 'move' _indexOfInterest[316539](316551 call iteratorIndex _iterator[316540]))
            }
            ForLoop[316541]
            {
              unknown y[316529] "index var" "insert auto destroy"
              (316559 'move' y[316529] _indexOfInterest[316539])
              {
                (316533 yield(316537 call _build_tuple x[316525] y[316529]))
              }
              label _continueLabel[316544]
              _indexOfInterest[316539]
              _iterator[316540]
            }
            label _breakLabel[316545]
          }
        }
        label _continueLabel[316576]
        _indexOfInterest[316571]
        _iterator[316572]
      }
      label _breakLabel[316577]
    }
  }
  function cartesian[316605](param arg tag[316608] :
  iterKind[52144], arg X[316611]:_any[141](?), arg Y[316613]:_any[141](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    Forall[316644] {
      induction variables:
        
        unknown x[316623] "index var" "insert auto destroy"
      iterated expressions:
        X[316611]
      shadow variables:
      other variables
        forall body
      {
        Forall[316639] {
          induction variables:
            
            unknown y[316627] "index var" "insert auto destroy"
          iterated expressions:
            Y[316613]
          shadow variables:
          other variables
            forall body
          {
            (316631 yield(316635 call _build_tuple x[316623] y[316627]))
          }
        }
      }
    }
  }
  where {
    (316615 call == tag[316608] standalone[52142])
  }
  function flatIter[316650](arg D[316655] :
  (316653 call _domain[225034](?) ?[227])) : _unknown[42] "iterator fn" "no return value for void"
  {
    {
      unknown _indexOfInterest[316678] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[316679] "expr temp" "temp"
      (316688 'move' _iterator[316679](316686 call _getIterator(316697 call chpl_direct_range_iter 0(316692 call chpl__nudgeHighBound(316694 call . D[316655] c"size")))))
      Defer
      {
        {
          (316712 call _freeIterator _iterator[316679])
        }
      }
      { scopeless type
        (316702 'move' _indexOfInterest[316678](316699 call iteratorIndex _iterator[316679]))
      }
      ForLoop[316680]
      {
        unknown i[316659] "index var" "insert auto destroy"
        (316707 'move' i[316659] _indexOfInterest[316678])
        {
          (316671 yield(316676 call(316673 call . D[316655] c"orderToIndex") i[316659]))
        }
        label _continueLabel[316683]
        _indexOfInterest[316678]
        _iterator[316679]
      }
      label _breakLabel[316684]
    }
  }
  function flatIter[316721](param arg tag[316724] :
  iterKind[52144], arg D[316730] :
  (316728 call _domain[225034](?) ?[227])) : _unknown[42] "inline" "iterator fn" "no return value for void"
  {
    Forall[316762] {
      induction variables:
        
        unknown i[316741] "index var" "insert auto destroy"
      iterated expressions:
        (316750 call chpl_build_bounded_range 0(316748 call chpl__nudgeHighBound(316745 call . D[316730] c"size")))
      shadow variables:
      other variables
        forall body
      {
        (316753 yield(316758 call(316755 call . D[316730] c"orderToIndex") i[316741]))
      }
    }
  }
  where {
    (316733 call == tag[316724] standalone[52142])
  }
  function normalizeArray[316768](arg arr[316773] :
  (316771 call chpl__buildArrayRuntimeType nil[32])) : _unknown[42] "inline"
  {
    const arrDom[316778] "const"(316780 call . arr[316773] c"_dom")
    (316784 'end of statement')
    const normalDomain[316786] "const"(316788 call normalizeDomain arrDom[316778])
    (316791 'end of statement')
    (316793 call compilerWarning "normalizeArray should be used sparingly.")
    (316797 return(316810 forall (316802 call _build_tuple chpl__tuple_blank unknown a[316800] "index var")  in  zip(316807 call _build_tuple normalDomain[316786] arr[316773]) do
    {
      a[316800]
    } ))
  }
  function normalizeArray[316814](arg unknown[316818] :
  unknown t[316816]) : _unknown[42] "inline"
  {
    const arr[316828] "const" unknown[316818] _array[255540](?)
    (316835 'end of statement')
    const arrDom[316837] "const"(316839 call . arr[316828] c"_dom")
    (316843 'end of statement')
    const normalDomain[316845] "const"(316847 call normalizeDomain arrDom[316837])
    (316850 'end of statement')
    (316851 return(316864 for (316856 call _build_tuple chpl__tuple_blank unknown a[316854] "index var")  in  zip(316861 call _build_tuple normalDomain[316845] arr[316828]) do
    {
      a[316854]
    } ))
    (316867 'referenced modules list' ChapelArray[264652])
  }
  where {
    (316821 call !(316824 call isArrayType t[316816]))
  }
  function normalizeDomain[316871](arg dom[316876] :
  (316874 call _domain[225034](?) ?[227])) : _unknown[42] "inline"
  {
    (316888 return(316892 call . dom[316876] c"normalize"))
  }
  { scopeless type
    (316880 call chpl__buildDomainRuntimeType defaultDist[288287](316883 call . dom[316876] c"rank") int(64)[10])
  }
  function emptyDomain[316898](param arg rank[316901] :
  int(64)[10]) : _unknown[42] "inline"
  {
    unknown shape[316911](316912 call * rank[316901] range[240](?))
    (316917 'end of statement')
    const nullRange[316919] "const"(316920 call #(316923 call chpl_build_low_bounded_range 0) 0)
    (316927 'end of statement')
    {
      unknown d[316928] "index var" 0
      unknown tmp[316943] "maybe param" "temp"
      (316955 'move' tmp[316943](316953 call chpl_compute_low_param_loop_bound 0(316932 call chpl__nudgeHighBound rank[316901])))
      unknown tmp[316944] "maybe param" "temp"
      (316964 'move' tmp[316944](316962 call chpl_compute_high_param_loop_bound 0(316960 call chpl__nudgeHighBound rank[316901])))
      unknown tmp[316945] "maybe param" "temp"
      (316967 'move' tmp[316945] 1)
      ParamForLoop[316969]
      { d[316928] tmp[316943] tmp[316944] tmp[316945]
        (316936 call =(316939 call shape[316911] d[316928]) nullRange[316919])
      }
      label _unused_continueLabel[316947]
      label _breakLabel[316946]
    }
    (316978 return(316983 call chpl__buildDomainExpr(316981 'expand_tuple' shape[316911]) 1))
  }
  { scopeless type
    (316905 call chpl__buildDomainRuntimeType defaultDist[288287] rank[316901] int(64)[10])
  }
  function domainFromShape[316988](arg shape[316993] ... :
  int(64)[10]) : _unknown[42] "inline"
  {
    const _shape[317004] "const" shape[316993]
    (317007 'end of statement')
    unknown ranges[317009](317010 call * rank[316991] range[240](?))
    (317015 'end of statement')
    {
      unknown i[317016] "index var" 0
      unknown tmp[317038] "maybe param" "temp"
      (317050 'move' tmp[317038](317048 call chpl_compute_low_param_loop_bound 0(317020 call chpl__nudgeHighBound rank[316991])))
      unknown tmp[317039] "maybe param" "temp"
      (317059 'move' tmp[317039](317057 call chpl_compute_high_param_loop_bound 0(317055 call chpl__nudgeHighBound rank[316991])))
      unknown tmp[317040] "maybe param" "temp"
      (317062 'move' tmp[317040] 1)
      ParamForLoop[317064]
      { i[317016] tmp[317038] tmp[317039] tmp[317040]
        (317024 call =(317027 call ranges[317009] i[317016])(317035 call chpl_build_bounded_range 0(317033 call chpl__nudgeHighBound(317031 call _shape[317004] i[317016]))))
      }
      label _unused_continueLabel[317042]
      label _breakLabel[317041]
    }
    (317073 return(317078 call chpl__buildDomainExpr(317076 'expand_tuple' ranges[317009]) 1))
  }
  { scopeless type
    (316998 call chpl__buildDomainRuntimeType defaultDist[288287] rank[316991] int(64)[10])
  }
  function rangeFromBound[317083](arg high[317086] :
  int(64)[10]) : _unknown[42] "inline"
  {
    (317091 return(317096 call chpl_build_bounded_range 0(317094 call chpl__nudgeHighBound high[317086])))
  }
  { scopeless type
    range[240](?)
  }
  function rangeFromBound[317101](arg low[317104] :
  int(64)[10], arg high[317108] :
  int(64)[10]) : _unknown[42] "inline"
  {
    (317113 return(317118 call chpl_build_bounded_range low[317104](317116 call chpl__nudgeHighBound high[317108])))
  }
  { scopeless type
    range[240](?)
  }
  function rangeFromStart[317123](arg start[317126] :
  int(64)[10], arg count[317130] :
  int(64)[10]) : _unknown[42] "inline"
  {
    (317134 return(317135 call #(317138 call chpl_build_low_bounded_range start[317126]) count[317130]))
  }
  function rangesFromBounds[317143](arg bounds[317151] ... :
  (317145 call * 2 int(64)[10])) : _unknown[42] "inline"
  {
    (317160 return(317167 call(317164 call . bounds[317151] c"map")(460867 'capture fn' rangeFromBound)))
  }
  { scopeless type
    (317155 call * rank[317149] range[240](?))
  }
  function rangesFromShape[317172](arg shape[317177] ... :
  int(64)[10]) : _unknown[42] "inline"
  {
    (317186 return(317191 call(317188 call . shape[317177] c"map")(460870 'capture fn' rangeFromBound)))
  }
  { scopeless type
    (317181 call * rank[317175] range[240](?))
  }
  function nbase[317196](arg bounds[317203] :
  (317198 call * unknown rank[317200] int(64)[10]), arg n[317207] :
  int(64)[10]) : _unknown[42]
  {
    unknown filled[317216](317217 call * rank[317200] int(64)[10])
    (317222 'end of statement')
    unknown idx[317224](317226 call - rank[317200] 1) int(64)[10]
    (317231 'end of statement')
    unknown curr[317233] 0 int(64)[10]
    (317237 'end of statement')
    unknown carry[317239] 0 bool[19]
    (317243 'end of statement')
    {
      unknown tmp[317317] "temp"
      (317341 'move' tmp[317317](317336 call _cond_test(317338 call < curr[317233] n[317207])))
      WhileDo[317322]
      {
        {
          (317249 call +=(317252 call filled[317216] idx[317224]) 1)
          if(317313 call _cond_test(317305 call >=(317308 call filled[317216] idx[317224])(317311 call bounds[317203] idx[317224])))
          {
            (317256 call = carry[317239] 1)
            (317260 call =(317263 call filled[317216] idx[317224]) 0)
            (317266 call -= idx[317224] 1)
            if(317284 call _cond_test(317280 call < idx[317224] 0))
            {
              (317271 call err "Error in nbase: " n[317207] " is too large for bounds.")
            }
          }
          {
            (317290 call = carry[317239] 0)
            (317294 call = idx[317224](317297 call - rank[317200] 1))
            (317301 call += curr[317233] 1)
          }
        }
        label _continueLabel[317320]
        (317331 'move' tmp[317317](317326 call _cond_test(317328 call < curr[317233] n[317207])))
        tmp[317317]
      }
      label _breakLabel[317321]
    }
    (317344 return filled[317216])
  }
  { scopeless type
    (317210 call * rank[317200] int(64)[10])
  }
  function indexInShape[317349](arg shape[317356] :
  (317351 call * unknown rank[317353] int(64)[10]), in arg n[317360] :
  int(64)[10]) : _unknown[42]
  {
    unknown idxs[317369](317370 call * rank[317353] int(64)[10])
    (317375 'end of statement')
    const size[317377] "const"(317380 'reduce' ProductReduceScanOp[429559](?) shape[317356] 0)
    (317383 'end of statement')
    if(317398 call _cond_test(317394 call > n[317360] size[317377]))
    {
      (317385 call err "Error in indexInShape: " n[317360] " is too large for shape.")
    }
    {
      unknown i[317403] "index var" 0
      unknown tmp[317451] "maybe param" "temp"
      (317468 'move' tmp[317451](317466 call chpl_compute_low_param_loop_bound 0(317461 call chpl_high_bound_count_for_param_loop 0(317458 call chpl_compute_count_param_loop rank[317353]))))
      unknown tmp[317452] "maybe param" "temp"
      (317480 'move' tmp[317452](317478 call chpl_compute_high_param_loop_bound 0(317473 call chpl_high_bound_count_for_param_loop 0(317476 call chpl_compute_count_param_loop rank[317353]))))
      unknown tmp[317453] "maybe param" "temp"
      (317483 'move' tmp[317453] 1)
      ParamForLoop[317485]
      { i[317403] tmp[317451] tmp[317452] tmp[317453]
        {
          const dim[317413] "const"(317415 call shape[317356](317416 call -(317418 call - rank[317353] i[317403]) 1))
          (317424 'end of statement')
          (317425 call =(317428 call idxs[317369](317429 call -(317431 call - rank[317353] i[317403]) 1))(317436 call % n[317360] dim[317413]))
          (317440 call = n[317360](317446 call divFloor module=[222] Math[10521] n[317360] dim[317413]))
          (317443 'referenced modules list' Math[10521])
        }
      }
      label _unused_continueLabel[317455]
      label _breakLabel[317454]
    }
    (317494 return idxs[317369])
  }
  { scopeless type
    (317363 call * rank[317353] int(64)[10])
  }
  function indexAtHelperProd[317499](arg n[317502] :
  int(64)[10], arg prod[317506] :
  int(64)[10], arg shape[317512] ... :
  int(64)[10]) : _unknown[42] "inline"
  {
    unknown idx[317526](317527 call * rank[317510] int(64)[10])
    (317532 'end of statement')
    unknown order[317534] n[317502]
    (317537 'end of statement')
    unknown div[317539] prod[317506]
    (317542 'end of statement')
    {
      unknown i[317543] "index var" 0
      unknown tmp[317571] "maybe param" "temp"
      (317583 'move' tmp[317571](317581 call chpl_compute_low_param_loop_bound 0(317547 call chpl__nudgeHighBound rank[317510])))
      unknown tmp[317572] "maybe param" "temp"
      (317592 'move' tmp[317572](317590 call chpl_compute_high_param_loop_bound 0(317588 call chpl__nudgeHighBound rank[317510])))
      unknown tmp[317573] "maybe param" "temp"
      (317595 'move' tmp[317573] 1)
      ParamForLoop[317597]
      { i[317543] tmp[317571] tmp[317572] tmp[317573]
        {
          (317552 call /= div[317539](317556 call shape[317512] i[317543]))
          (317558 call =(317561 call idx[317526] i[317543])(317563 call / order[317534] div[317539]))
          (317567 call %= order[317534] div[317539])
        }
      }
      label _unused_continueLabel[317575]
      label _breakLabel[317574]
    }
    (317606 return idx[317526])
  }
  where {
    (317520 call > rank[317510] 1)
  }
  { scopeless type
    (317516 call * rank[317510] int(64)[10])
  }
  function indexAtHelperMultiples[317612](arg n[317615] :
  int(64)[10], arg divs[317621] ... :
  int(64)[10]) : _unknown[42] "inline"
  {
    unknown idx[317631](317632 call * rank[317619] int(64)[10])
    (317637 'end of statement')
    unknown order[317639] n[317615]
    (317642 'end of statement')
    {
      unknown i[317643] "index var" 0
      unknown tmp[317669] "maybe param" "temp"
      (317681 'move' tmp[317669](317679 call chpl_compute_low_param_loop_bound 0(317647 call chpl__nudgeHighBound rank[317619])))
      unknown tmp[317670] "maybe param" "temp"
      (317690 'move' tmp[317670](317688 call chpl_compute_high_param_loop_bound 0(317686 call chpl__nudgeHighBound rank[317619])))
      unknown tmp[317671] "maybe param" "temp"
      (317693 'move' tmp[317671] 1)
      ParamForLoop[317695]
      { i[317643] tmp[317669] tmp[317670] tmp[317671]
        {
          (317652 call =(317655 call idx[317631] i[317643])(317657 call / order[317639](317661 call divs[317621] i[317643])))
          (317663 call %= order[317639](317667 call divs[317621] i[317643]))
        }
      }
      label _unused_continueLabel[317673]
      label _breakLabel[317672]
    }
    (317704 return idx[317631])
  }
  { scopeless type
    (317625 call * rank[317619] int(64)[10])
  }
  function indexAt[317709](arg n[317712] :
  int(64)[10], arg shape[317716] :
  int(64)[10]) : _unknown[42] "inline"
  {
    (317720 return n[317712])
  }
  function indexAt[317724](arg n[317727] :
  int(64)[10], arg shape[317733] ... :
  int(64)[10]) : _unknown[42] "inline"
  {
    unknown result[317747](317748 call * rank[317731] int(64)[10])
    (317753 'end of statement')
    unknown strides[317755](317756 call * rank[317731] int(64)[10])
    (317761 'end of statement')
    unknown idx[317763] n[317727]
    (317766 'end of statement')
    unknown stride[317768] 1
    (317771 'end of statement')
    {
      unknown i[317772] "index var" 0
      unknown tmp[317804] "maybe param" "temp"
      (317816 'move' tmp[317804](317814 call chpl_compute_low_param_loop_bound 0(317776 call chpl__nudgeHighBound rank[317731])))
      unknown tmp[317805] "maybe param" "temp"
      (317825 'move' tmp[317805](317823 call chpl_compute_high_param_loop_bound 0(317821 call chpl__nudgeHighBound rank[317731])))
      unknown tmp[317806] "maybe param" "temp"
      (317828 'move' tmp[317806] 1)
      ParamForLoop[317830]
      { i[317772] tmp[317804] tmp[317805] tmp[317806]
        {
          unknown j[317782] "param"(317783 call -(317785 call - rank[317731] 1) i[317772])
          (317791 'end of statement')
          (317792 call =(317795 call strides[317755] j[317782]) stride[317768])
          (317798 call *= stride[317768](317802 call shape[317733] j[317782]))
        }
      }
      label _unused_continueLabel[317808]
      label _breakLabel[317807]
    }
    {
      unknown i[317839] "index var" 0
      unknown tmp[317865] "maybe param" "temp"
      (317877 'move' tmp[317865](317875 call chpl_compute_low_param_loop_bound 0(317843 call chpl__nudgeHighBound rank[317731])))
      unknown tmp[317866] "maybe param" "temp"
      (317886 'move' tmp[317866](317884 call chpl_compute_high_param_loop_bound 0(317882 call chpl__nudgeHighBound rank[317731])))
      unknown tmp[317867] "maybe param" "temp"
      (317889 'move' tmp[317867] 1)
      ParamForLoop[317891]
      { i[317839] tmp[317865] tmp[317866] tmp[317867]
        {
          (317848 call =(317851 call result[317747] i[317839])(317853 call / idx[317763](317857 call strides[317755] i[317839])))
          (317859 call %= idx[317763](317863 call strides[317755] i[317839]))
        }
      }
      label _unused_continueLabel[317869]
      label _breakLabel[317868]
    }
    (317900 return result[317747])
  }
  where {
    (317741 call > rank[317731] 1)
  }
  { scopeless type
    (317737 call * rank[317731] int(64)[10])
  }
  function fastEach[317906](arg shape[317911] ... :
  int(64)[10]) : _unknown[42] "inline" "iterator fn" "no return value for void"
  {
    unknown prod[317921] 1
    (317924 'end of statement')
    unknown divs[317926](317927 call * rank[317909] int(64)[10])
    (317932 'end of statement')
    {
      unknown j[317933] "index var" 0
      unknown tmp[317965] "maybe param" "temp"
      (317977 'move' tmp[317965](317975 call chpl_compute_low_param_loop_bound 0(317937 call chpl__nudgeHighBound rank[317909])))
      unknown tmp[317966] "maybe param" "temp"
      (317986 'move' tmp[317966](317984 call chpl_compute_high_param_loop_bound 0(317982 call chpl__nudgeHighBound rank[317909])))
      unknown tmp[317967] "maybe param" "temp"
      (317989 'move' tmp[317967] 1)
      ParamForLoop[317991]
      { j[317933] tmp[317965] tmp[317966] tmp[317967]
        {
          unknown i[317943] "param"(317944 call -(317946 call - rank[317909] j[317933]) 1)
          (317952 'end of statement')
          (317953 call =(317956 call divs[317926] i[317943]) prod[317921])
          (317959 call *= prod[317921](317963 call shape[317911] i[317943]))
        }
      }
      label _unused_continueLabel[317969]
      label _breakLabel[317968]
    }
    {
      unknown _indexOfInterest[318017] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[318018] "expr temp" "temp"
      (318027 'move' _iterator[318018](318025 call _getIterator(318033 call chpl_direct_range_iter 0(318031 call chpl__nudgeHighBound prod[317921]))))
      Defer
      {
        {
          (318048 call _freeIterator _iterator[318018])
        }
      }
      { scopeless type
        (318038 'move' _indexOfInterest[318017](318035 call iteratorIndex _iterator[318018]))
      }
      ForLoop[318019] order-independent
      {
        unknown i[318000] "index var" "insert auto destroy"
        (318043 'move' i[318000] _indexOfInterest[318017])
        {
          (318009 yield(318011 call indexAtHelperMultiples i[318000](318014 'expand_tuple' divs[317926])))
        }
        label _continueLabel[318022]
        _indexOfInterest[318017]
        _iterator[318018]
      }
      label _breakLabel[318023]
    }
  }
  { scopeless type
    (317915 call * rank[317909] int(64)[10])
  }
  function argsort[318058](arg tup[318063] ... :
  int(64)[10]) : _unknown[42]
  {
    (318069 call writeln "IAIN: just do it, it's not that hard. (tuple argsort)")
    (318073 return tup[318063])
  }
  def module Standard[320395]  
  (397100 'used modules list'(387068 'use' ChapelStandard[315387])(316233 'use' ChplConfig[29952] 'only' CHPL_LOCALE_MODEL)(316327 'import' IO[208303])(316330 'import' ChapelArray[264652])(316333 'import' Math[10521]))
}