AST dump for MNISTNet after pass readExternC.
Module use list: Time Network 

{
  (387104 'use' ChapelStandard)
  (385123 'use' Tensor)
  (385126 'use' Network)
  (385129 'use' Reflection)
  (385133 'import' TOML)
  (385136 'import' Time)
  { scopeless
    unknown layerDebug[385138] "config" "param" 0
    (385141 'end of statement')
  }
  unknown dtype[385143] "type variable"(385145 call real[13] 32)
  type CNN[386349] unknown conv1[385152](385154 call _owned(385156 call Conv2D[364808](?) eltType)) unknown conv2[385161](385163 call _owned(385165 call Conv2D[364808](?) eltType)) unknown dropout1[385170](385172 call _owned(385174 call Dropout[365329](?) eltType)) unknown dropout2[385179](385181 call _owned(385183 call Dropout[365329](?) eltType)) unknown flatten[385188](385190 call _owned(385192 call Flatten[365034](?) eltType)) unknown fc1[385197](385199 call _owned(385201 call Linear[365043](?) eltType)) unknown fc2[385206](385208 call _owned(385210 call Linear[365043](?) eltType)) function CNN[386349].init[385214](arg _mt[385222]:_MT[201], arg this[385216]:CNN[386349], arg eltType[385219]:_any[141](?) =
  dtype[385143]) : _unknown[42] "method" "primary method"
  {
    (385232 call(385229 call .(385226 call . this[385216] c"super") c"init") eltType[385219])
    (385234 call =(385239 call . this[385216] c"conv1")(385242 'new'(385244 call Conv2D[364808](?) eltType[385219](channels = 1)(features = 32)(kernel = 3)(stride = 1))))
    (385254 call =(385259 call . this[385216] c"conv2")(385262 'new'(385264 call Conv2D[364808](?) eltType[385219](channels = 32)(features = 64)(kernel = 3)(stride = 1))))
    (385274 call =(385279 call . this[385216] c"dropout1")(385282 'new'(385284 call Dropout[365329](?) eltType[385219] 0.25)))
    (385289 call =(385294 call . this[385216] c"dropout2")(385297 'new'(385299 call Dropout[365329](?) eltType[385219] 0.5)))
    (385302 call =(385305 call . this[385216] c"flatten")(385308 'new'(385310 call Flatten[365034](?) eltType[385219])))
    (385312 call =(385317 call . this[385216] c"fc1")(385320 'new'(385322 call Linear[365043](?) eltType[385219] 9216 128)))
    (385328 call =(385333 call . this[385216] c"fc2")(385336 'new'(385338 call Linear[365043](?) eltType[385219] 128 10)))
    (385346 call(385343 call . this[385216] c"chpl__initThisType"))
    (385347 call =(385350 call . this[385216] c"moduleName") "cnn")
    {
      unknown _indexOfInterest[385373] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[385374] "expr temp" "temp"
      (385383 'move' _iterator[385374](385381 call _getIterator(385367 call(385363 call . this[385216] c"moduleFields"))))
      Defer
      {
        {
          (385411 call _freeIterator _iterator[385374])
        }
      }
      { scopeless type
        (385388 'move' _indexOfInterest[385373](385385 call iteratorIndex _iterator[385374]))
      }
      ForLoop[385375]
      {
        (385393 call _check_tuple_var_decl _indexOfInterest[385373] 2)
        unknown n[385357] "index var" "insert auto destroy"
        (385400 'move' n[385357](385397 call _indexOfInterest[385373] 0))
        unknown m[385359] "index var" "insert auto destroy"
        (385406 'move' m[385359](385403 call _indexOfInterest[385373] 1))
        {
          (385370 call addModule n[385357] m[385359])
        }
        label _continueLabel[385378]
        _indexOfInterest[385373]
        _iterator[385374]
      }
      label _breakLabel[385379]
    }
  } function CNN[386349].forward[385420](arg _mt[385433]:_MT[201], arg this[385422]:CNN[386349], arg input[385430] :
  (385425 call Tensor(385426 call . this[385422] c"eltType"))) : _unknown[42] "method" "primary method" "method overrides"
  {
    { scopeless
      unknown st[385443](385444 'new'(385449 call stopwatch[377049]))
      (385451 'end of statement')
    }
    if(385457 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385453 call writeln "conv1")
      }
    }
    if(385469 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385466 call(385463 call . st[385443] c"start"))
      }
    }
    { scopeless
      unknown x[385475](385480 call(385477 call . this[385422] c"conv1") input[385430])
      (385483 'end of statement')
    }
    if(385493 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385490 call(385487 call . st[385443] c"stop"))
      }
    }
    if(385512 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385499 call writeln "conv1 "(385509 call(385506 call . st[385443] c"elapsed")))
      }
    }
    if(385524 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385521 call(385518 call . st[385443] c"clear"))
      }
    }
    if(385536 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385530 call writeln "relu")
      }
    }
    if(385548 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385545 call(385542 call . st[385443] c"start"))
      }
    }
    (385553 call = x[385475](385560 call(385557 call . x[385475] c"relu")))
    if(385568 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385565 call(385562 call . st[385443] c"stop"))
      }
    }
    if(385585 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385574 call writeln "relu "(385582 call(385579 call . st[385443] c"elapsed")))
      }
    }
    if(385597 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385594 call(385591 call . st[385443] c"clear"))
      }
    }
    if(385607 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385603 call writeln "conv2")
      }
    }
    if(385619 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385616 call(385613 call . st[385443] c"start"))
      }
    }
    (385624 call = x[385475](385631 call(385628 call . this[385422] c"conv2") x[385475]))
    if(385640 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385637 call(385634 call . st[385443] c"stop"))
      }
    }
    if(385657 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385646 call writeln "conv2 "(385654 call(385651 call . st[385443] c"elapsed")))
      }
    }
    if(385669 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385666 call(385663 call . st[385443] c"clear"))
      }
    }
    if(385679 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385675 call writeln "relu")
      }
    }
    if(385691 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385688 call(385685 call . st[385443] c"start"))
      }
    }
    (385696 call = x[385475](385703 call(385700 call . x[385475] c"relu")))
    if(385711 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385708 call(385705 call . st[385443] c"stop"))
      }
    }
    if(385726 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385717 call writeln "relu "(385723 call(385720 call . st[385443] c"elapsed")))
      }
    }
    if(385738 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385735 call(385732 call . st[385443] c"clear"))
      }
    }
    if(385750 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385744 call writeln "maxpool")
      }
    }
    if(385762 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385759 call(385756 call . st[385443] c"start"))
      }
    }
    (385767 call = x[385475](385774 call(385771 call . x[385475] c"maxPool") 2))
    if(385783 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385780 call(385777 call . st[385443] c"stop"))
      }
    }
    if(385800 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385789 call writeln "maxpool "(385797 call(385794 call . st[385443] c"elapsed")))
      }
    }
    if(385812 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385809 call(385806 call . st[385443] c"clear"))
      }
    }
    if(385824 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385818 call writeln "dropout1")
      }
    }
    if(385836 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385833 call(385830 call . st[385443] c"start"))
      }
    }
    (385841 call = x[385475](385848 call(385845 call . this[385422] c"dropout1") x[385475]))
    if(385857 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385854 call(385851 call . st[385443] c"stop"))
      }
    }
    if(385874 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385863 call writeln "dropout "(385871 call(385868 call . st[385443] c"elapsed")))
      }
    }
    if(385886 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385883 call(385880 call . st[385443] c"clear"))
      }
    }
    if(385898 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385892 call writeln "flatten")
      }
    }
    if(385910 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385907 call(385904 call . st[385443] c"start"))
      }
    }
    (385915 call = x[385475](385922 call(385919 call . x[385475] c"flatten")))
    if(385930 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385927 call(385924 call . st[385443] c"stop"))
      }
    }
    if(385947 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385936 call writeln "flatten "(385944 call(385941 call . st[385443] c"elapsed")))
      }
    }
    if(385959 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385956 call(385953 call . st[385443] c"clear"))
      }
    }
    if(385971 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385965 call writeln "fc1")
      }
    }
    if(385983 call _cond_test layerDebug[385138])
    {
      { scopeless
        (385980 call(385977 call . st[385443] c"start"))
      }
    }
    (385988 call = x[385475](385995 call(385992 call . this[385422] c"fc1") x[385475]))
    if(386004 call _cond_test layerDebug[385138])
    {
      { scopeless
        (386001 call(385998 call . st[385443] c"stop"))
      }
    }
    if(386021 call _cond_test layerDebug[385138])
    {
      { scopeless
        (386010 call writeln "fc1 "(386018 call(386015 call . st[385443] c"elapsed")))
      }
    }
    if(386033 call _cond_test layerDebug[385138])
    {
      { scopeless
        (386030 call(386027 call . st[385443] c"clear"))
      }
    }
    if(386043 call _cond_test layerDebug[385138])
    {
      { scopeless
        (386039 call writeln "relu")
      }
    }
    if(386055 call _cond_test layerDebug[385138])
    {
      { scopeless
        (386052 call(386049 call . st[385443] c"start"))
      }
    }
    (386060 call = x[385475](386067 call(386064 call . x[385475] c"relu")))
    if(386075 call _cond_test layerDebug[385138])
    {
      { scopeless
        (386072 call(386069 call . st[385443] c"stop"))
      }
    }
    if(386090 call _cond_test layerDebug[385138])
    {
      { scopeless
        (386081 call writeln "relu "(386087 call(386084 call . st[385443] c"elapsed")))
      }
    }
    if(386102 call _cond_test layerDebug[385138])
    {
      { scopeless
        (386099 call(386096 call . st[385443] c"clear"))
      }
    }
    if(386114 call _cond_test layerDebug[385138])
    {
      { scopeless
        (386108 call writeln "dropout2")
      }
    }
    if(386126 call _cond_test layerDebug[385138])
    {
      { scopeless
        (386123 call(386120 call . st[385443] c"start"))
      }
    }
    (386131 call = x[385475](386138 call(386135 call . this[385422] c"dropout2") x[385475]))
    if(386147 call _cond_test layerDebug[385138])
    {
      { scopeless
        (386144 call(386141 call . st[385443] c"stop"))
      }
    }
    if(386164 call _cond_test layerDebug[385138])
    {
      { scopeless
        (386153 call writeln "dropout2 "(386161 call(386158 call . st[385443] c"elapsed")))
      }
    }
    if(386176 call _cond_test layerDebug[385138])
    {
      { scopeless
        (386173 call(386170 call . st[385443] c"clear"))
      }
    }
    if(386188 call _cond_test layerDebug[385138])
    {
      { scopeless
        (386182 call writeln "fc2")
      }
    }
    if(386200 call _cond_test layerDebug[385138])
    {
      { scopeless
        (386197 call(386194 call . st[385443] c"start"))
      }
    }
    (386205 call = x[385475](386212 call(386209 call . this[385422] c"fc2") x[385475]))
    if(386221 call _cond_test layerDebug[385138])
    {
      { scopeless
        (386218 call(386215 call . st[385443] c"stop"))
      }
    }
    if(386238 call _cond_test layerDebug[385138])
    {
      { scopeless
        (386227 call writeln "fc2 "(386235 call(386232 call . st[385443] c"elapsed")))
      }
    }
    if(386250 call _cond_test layerDebug[385138])
    {
      { scopeless
        (386247 call(386244 call . st[385443] c"clear"))
      }
    }
    if(386262 call _cond_test layerDebug[385138])
    {
      { scopeless
        (386259 call(386256 call . st[385443] c"start"))
      }
    }
    if(386274 call _cond_test layerDebug[385138])
    {
      { scopeless
        (386268 call writeln "softmax")
      }
    }
    if(386286 call _cond_test layerDebug[385138])
    {
      { scopeless
        (386283 call(386280 call . st[385443] c"start"))
      }
    }
    { scopeless
      unknown output[386292](386297 call(386294 call . x[385475] c"softmax"))
      (386299 'end of statement')
    }
    if(386307 call _cond_test layerDebug[385138])
    {
      { scopeless
        (386304 call(386301 call . st[385443] c"stop"))
      }
    }
    if(386324 call _cond_test layerDebug[385138])
    {
      { scopeless
        (386313 call writeln "softmax "(386321 call(386318 call . st[385443] c"elapsed")))
      }
    }
    if(386336 call _cond_test layerDebug[385138])
    {
      { scopeless
        (386333 call(386330 call . st[385443] c"clear"))
      }
    }
    (386341 return output[386292])
    (386344 'referenced modules list' Time[377133])
  }
  { scopeless type
    (385436 call Tensor(385437 call . this[385422] c"eltType"))
  } Module[362662](?)
  type CNN[386373](?)
  { scopeless
    const diag[386352] "config" "const" 0
    (386355 'end of statement')
  }
  if(386365 call _cond_test diag[386352])
  {
    (386358 'use' GpuDiagnostics)
    (386361 call startGpuDiagnostics)
    (386363 call startVerboseGpu)
  }
  { scopeless
    unknown cnn[386370](386371 'new'(386375 call CNN[386373](?) dtype[385143]))
    (386378 'end of statement')
  }
  {
    unknown _indexOfInterest[386395] "an _indexOfInterest or chpl__followIdx variable" "temp"
    unknown _iterator[386396] "expr temp" "temp"
    (386405 'move' _iterator[386396](386403 call _getIterator(386390 call(386387 call . cnn[386370] c"moduleFields"))))
    Defer
    {
      {
        (386433 call _freeIterator _iterator[386396])
      }
    }
    { scopeless type
      (386410 'move' _indexOfInterest[386395](386407 call iteratorIndex _iterator[386396]))
    }
    ForLoop[386397]
    {
      (386415 call _check_tuple_var_decl _indexOfInterest[386395] 2)
      unknown n[386380] "index var" "insert auto destroy"
      (386422 'move' n[386380](386419 call _indexOfInterest[386395] 0))
      unknown m[386382] "index var" "insert auto destroy"
      (386428 'move' m[386382](386425 call _indexOfInterest[386395] 1))
      {
        (386393 call writeln n[386380])
      }
      label _continueLabel[386400]
      _indexOfInterest[386395]
      _iterator[386396]
    }
    label _breakLabel[386401]
  }
  { scopeless
    unknown model[386441](386445 call loadModel module=[222] Network[365327](specFile = "../scripts/models/cnn/specification.json")(weightsFolder = "../scripts/models/cnn/")(dtype = dtype[385143]))
    (386459 'end of statement')
  }
  { scopeless
    const testImgSize[386461] "config" "const" 28
    (386464 'end of statement')
  }
  { scopeless
    unknown img[386466](386467 call :(386473 call(386470 call . Tensor[345586](?) c"load") "data/datasets/mnist/image_idx_0_7_7.chdata") dtype[385143])
    (386479 'end of statement')
  }
  (386481 call writeln img[386466])
  (386484 call writeln(386489 call(386486 call . img[386466] c"tensorize") 3))
  { scopeless
    const modelPath[386492] "const" "data/models/mnist_cnn/"
    (386497 'end of statement')
  }
  (386502 call(386499 call . cnn[386370] c"loadPyTorchDump") modelPath[386492])
  { scopeless
    unknown output[386505](386507 call cnn[386370] img[386466])
    (386510 'end of statement')
  }
  (386512 call writeln output[386505])
  { scopeless
    const imageCount[386515] "config" "const" 0
    (386518 'end of statement')
  }
  { scopeless
    unknown images[386520](386549 forall  unknown i[386521] "index var"  in (386527 call chpl_build_bounded_range 0(386525 call chpl__nudgeHighBound imageCount[386515])) do
    {
      (386529 call :(386535 call(386532 call . Tensor[345586](?) c"load")(386536 call +(386538 call + "data/datasets/mnist/image_idx_"(386543 call : i[386521] string[244])) ".chdata")) dtype[385143])
    } )
    (386552 'end of statement')
  }
  { scopeless
    unknown preds[386554](386562 call chpl__buildArrayRuntimeType(386559 call chpl__ensureDomainExpr(386556 call . images[386520] c"_dom")) int[10])
    (386565 'end of statement')
  }
  { scopeless
    const numTimes[386567] "config" "const" 1
    (386570 'end of statement')
  }
  {
    unknown _indexOfInterest[386698] "an _indexOfInterest or chpl__followIdx variable" "temp"
    unknown _iterator[386699] "expr temp" "temp"
    (386708 'move' _iterator[386699](386706 call _getIterator(386714 call chpl_direct_range_iter 0(386712 call chpl__nudgeHighBound numTimes[386567]))))
    Defer
    {
      {
        (386729 call _freeIterator _iterator[386699])
      }
    }
    { scopeless type
      (386719 'move' _indexOfInterest[386698](386716 call iteratorIndex _iterator[386699]))
    }
    ForLoop[386700]
    {
      unknown i[386571] "index var" "insert auto destroy"
      (386724 'move' i[386571] _indexOfInterest[386698])
      {
        { scopeless
          unknown st[386581](386582 'new'(386587 call stopwatch[377049]))
          (386589 'end of statement')
        }
        (386594 call(386591 call . st[386581] c"start"))
        {
          unknown _indexOfInterest[386625] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[386626] "expr temp" "temp"
          (386640 'move' _iterator[386626](386605 call _build_tuple(386635 call _getIterator images[386520])(386638 call _getIterator preds[386554])))
          Defer
          {
            {
              (386668 call _freeIterator _iterator[386626])
            }
          }
          { scopeless type
            (386645 'move' _indexOfInterest[386625](386642 call iteratorIndex _iterator[386626]))
          }
          ForLoop[386627]
          {
            (386650 call _check_tuple_var_decl _indexOfInterest[386625] 2)
            unknown img[386596] "index var" "insert auto destroy"
            (386657 'move' img[386596](386654 call _indexOfInterest[386625] 0))
            unknown pred[386598] "index var" "insert auto destroy"
            (386663 'move' pred[386598](386660 call _indexOfInterest[386625] 1))
            {
              { scopeless
                unknown output[386608](386613 call model[386441] img[386596])(386610 call Tensor dtype[385143])
                (386616 'end of statement')
              }
              (386617 call = pred[386598](386624 call(386621 call . output[386608] c"argmax")))
            }
            label _continueLabel[386630]
            _indexOfInterest[386625]
            _iterator[386626]
          }
          label _breakLabel[386631]
        }
        { scopeless
          const tm[386676] "const"(386681 call(386678 call . st[386581] c"elapsed"))
          (386683 'end of statement')
        }
        (386688 call(386685 call . st[386581] c"stop"))
        (386690 call writeln "Time: " tm[386676] " seconds.")
        (386584 'referenced modules list' Time[377133])
      }
      label _continueLabel[386703]
      _indexOfInterest[386698]
      _iterator[386699]
    }
    label _breakLabel[386704]
  }
  { scopeless
    const printResults[386737] "config" "const" 0
    (386740 'end of statement')
  }
  if(386791 call _cond_test printResults[386737])
  {
    {
      unknown _indexOfInterest[386758] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[386759] "expr temp" "temp"
      (386768 'move' _iterator[386759](386766 call _getIterator(386745 call . images[386520] c"_dom")))
      Defer
      {
        {
          (386783 call _freeIterator _iterator[386759])
        }
      }
      { scopeless type
        (386773 'move' _indexOfInterest[386758](386770 call iteratorIndex _iterator[386759]))
      }
      ForLoop[386760]
      {
        unknown i[386742] "index var" "insert auto destroy"
        (386778 'move' i[386742] _indexOfInterest[386758])
        {
          (386750 call writeln(386756 call _build_tuple i[386742](386754 call preds[386554] i[386742])))
        }
        label _continueLabel[386763]
        _indexOfInterest[386758]
        _iterator[386759]
      }
      label _breakLabel[386764]
    }
  }
  { scopeless
    unknown cnn2[386796](386797 'new'(386799 call Sequential[365331](?) real[13](386859 call _build_tuple(386802 'new'(386814 'to nilable class from type'(386804 call Conv2D[364808](?) real[13](channels = 1)(features = 32)(kernel = 3)(stride = 1))))(386815 'new'(386827 'to nilable class from type'(386817 call Conv2D[364808](?) real[13](channels = 32)(features = 64)(kernel = 3)(stride = 1))))(386828 'new'(386833 'to nilable class from type'(386830 call Dropout[365329](?) real[13] 0.25)))(386834 'new'(386839 'to nilable class from type'(386836 call Dropout[365329](?) real[13] 0.5)))(386840 'new'(386844 'to nilable class from type'(386842 call Flatten[365034](?) real[13])))(386845 'new'(386851 'to nilable class from type'(386847 call Linear[365043](?) real[13] 9216 128)))(386852 'new'(386858 'to nilable class from type'(386854 call Linear[365043](?) real[13] 128 10))))))
    (386862 'end of statement')
  }
  (386442 'referenced modules list' Network[365327])
}