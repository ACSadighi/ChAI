AST dump for BytesStringCommon after pass cleanup.
Module use list: 

{
  (37891 'use' ChapelStandard)
  (37894 'use' CTypes)
  (37897 'use' ByteBufferHelpers)
  (37903 'use'(37900 call . String c"NVStringFactory"))
  (37908 'use' ChplConfig 'only' compiledForSingleLocale)
  const CHPL_SHORT_STRING_SIZE[37911] "const" "extern" c_int
  (37914 'end of statement')
  type chpl__inPlaceBuffer[37917]
  {
  }
  function chpl__getInPlaceBufferData[37920](const  ref arg data[37923] :
  chpl__inPlaceBuffer) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
  {
  }
  { scopeless type
    bufferType
  }
  function chpl__getInPlaceBufferDataForWrite[37930](ref arg data[37933] :
  chpl__inPlaceBuffer) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
  {
  }
  { scopeless type
    bufferType
  }
  type __serializeHelper[37973] unknown buffLen[37942] int[10] unknown buff[37947] bufferType unknown size[37952] int[10] unknown locale_id[37957](37959 'typeof' chpl_nodeID) unknown shortData[37963] chpl__inPlaceBuffer unknown cachedNumCodepoints[37968] int[10]
  type decodePolicy[37984] def strict[37976]:decodePolicy[37984] def replace[37978]:decodePolicy[37984] def drop[37980]:decodePolicy[37984] def escape[37982]:decodePolicy[37984]
  type encodePolicy[37992] def unescape[37988]:encodePolicy[37992] def pass[37990]:encodePolicy[37992]
  {
  }
  unknown showStringBytesInitDeprWarnings[37997] "config" "param" 1
  (38000 'end of statement')
  unknown surrogateEscape[38002] "param"(38003 call : 220 byteType)
  (38010 'end of statement')
  function isBytesOrStringType[38011](arg t[38013]:_any[141](?)) param : _unknown[42] "private"
  {
    (38017 return(38018 call ||(38020 call == t bytes[232])(38024 call == t string[244])))
  }
  { scopeless type
    bool
  }
  function assertArgType[38031](arg t[38033]:_any[141](?), param arg methodName[38036] :
  string[244]) param : _unknown[42] "private" "no return value for void"
  {
    if(38059 call _cond_test(38054 call !(38057 call isBytesOrStringType t)))
    {
      (38042 call compilerError(38043 call +(38045 call + "BytesStringCommon." methodName) " can only be called with bytes or string argument(s)"))
    }
  }
  function getCStr[38065](const  ref arg x[38069] :
  unknown t[38067]) : _unknown[42] "inline"
  {
    (38077 call assertArgType t "getCStr")
    if(38107 call _cond_test(38094 call &&(38096 call !(38099 call compiledForSingleLocale))(38100 call !=(38103 call . x c"locale_id") chpl_nodeID)))
    {
      (38083 call halt(38084 call + "Cannot call '.c_str()' on a remote "(38089 call : t string[244])))
    }
    unknown buff[38113](38116 call . x c"buff") bufferType
    (38120 'end of statement')
    unknown asCString[38122](38123 'cast'(38125 call c_ptrConst c_char) buff)
    (38129 'end of statement')
    (38130 return asCString)
  }
  { scopeless type
    (38073 call c_ptrConst c_char)
  }
  function decodeByteBuffer[38135](arg buff[38138] :
  bufferType, arg length[38142] :
  int[10], arg policy[38146] :
  decodePolicy) : _unknown[42] throws
  {
    (38153 'import' OS.{errorCode})
    function qio_encode_char_buf[38154](arg dst[38159] :
    (38157 call c_ptr void[4]), arg chr[38165] :
    (38163 call int[10] 32)) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      errorCode
    }
    function qio_nbytes_char[38172](arg chr[38177] :
    (38175 call int[10] 32)) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    if(38191 call _cond_test(38187 call == length 0))
    {
      (38184 return "")
    }
    unknown tmp[38207] "temp"(38202 call bufferAlloc(38203 call + length 1))
    (38214 call _check_tuple_var_decl tmp[38207] 2)
    unknown newBuff[38197](38208 call tmp[38207] 0)
    unknown allocSize[38199](38211 call tmp[38207] 1)
    (38219 'end of statement')
    unknown hasEscapes[38221] 0
    (38224 'end of statement')
    unknown numCodepoints[38226] 0
    (38229 'end of statement')
    unknown expectedSize[38231] allocSize
    (38234 'end of statement')
    unknown thisIdx[38236] 0
    (38239 'end of statement')
    unknown decodedIdx[38241] 0
    (38244 'end of statement')
    {
      unknown tmp[38520] "temp"
      (38544 'move' tmp[38520](38539 call _cond_test(38541 call < thisIdx length)))
      WhileDo[38525]
      {
        {
          const tmp[38264] "const" "temp"(38258 call decodeHelp buff length thisIdx(allowEsc = 0))
          (38274 call _check_tuple_var_decl tmp[38264] 3)
          const decodeRet[38251] "const"(38265 call tmp[38264] 0)
          const cp[38253] "const"(38268 call tmp[38264] 1)
          const nBytes[38255] "const"(38271 call tmp[38264] 2)
          (38279 'end of statement')
          unknown buffToDecode[38281](38282 call + buff thisIdx)
          (38287 'end of statement')
          (38288 call += numCodepoints 1)
          if(38516 call _cond_test(38512 call != decodeRet 0))
          {
            if(38489 call _cond_test(38482 call == policy(38486 call . decodePolicy c"strict")))
            {
              (38295 call bufferFree newBuff)
              (38297 'throw'(38298 'new'(_chpl_manager = _owned[238](?))(38302 call DecodeError)))
            }
            {
              const nInvalidBytes[38305] "const"(38315 IfExpr (38306 call == nBytes 1) then
              { scopeless
                nBytes
              } else
              { scopeless
                (38311 call - nBytes 1)
              } )
              (38319 'end of statement')
              (38320 call += thisIdx nInvalidBytes)
              if(38477 call _cond_test(38468 call == policy(38474 call . decodePolicy c"replace")))
              {
                unknown replChar[38326] "param" 65533(38328 call int[10] 32)
                (38332 'end of statement')
                (38333 call += expectedSize(38336 call - 3 nInvalidBytes))
                (38350 call =(38343 call _build_tuple newBuff allocSize)(38346 call bufferEnsureSize newBuff allocSize expectedSize))
                (38353 call qio_encode_char_buf(38354 call + newBuff decodedIdx) replChar)
                (38359 call += decodedIdx 3)
              }
              {
                if(38464 call _cond_test(38455 call == policy(38461 call . decodePolicy c"escape")))
                {
                  (38364 call = hasEscapes 1)
                  (38368 call += expectedSize(38371 call * 2 nInvalidBytes))
                  (38385 call =(38378 call _build_tuple newBuff allocSize)(38381 call bufferEnsureSize newBuff allocSize expectedSize))
                  unknown i[38388] int[10]
                  (38391 'end of statement')
                  CForLoop[38431]
                  {
                    {
                      (38404 call qio_encode_char_buf(38405 call + newBuff decodedIdx)(38409 call + 56320(38412 call :(38415 call buff(38416 call +(38418 call - thisIdx nInvalidBytes) i))(38424 call int[10] 32))))
                      (38426 call += decodedIdx 3)
                    }
                    label _continueLabel[38444]
                    {
                      (38432 '=' i 0)
                    }
                    {
                      (38435 '<' i nInvalidBytes)
                    }
                    {
                      (38438 '+=' i 1)
                    }
                  }
                  label _breakLabel[38445]
                  (38448 call += numCodepoints(38451 call - nInvalidBytes 1))
                }
              }
            }
          }
          {
            (38495 call bufferMemcpyLocal(dst = newBuff)(src = buffToDecode)(len = nBytes)(dst_off = decodedIdx))
            (38504 call += thisIdx nBytes)
            (38508 call += decodedIdx nBytes)
          }
        }
        label _continueLabel[38523]
        (38534 'move' tmp[38520](38529 call _cond_test(38531 call < thisIdx length)))
        tmp[38520]
      }
      label _breakLabel[38524]
    }
    (38547 call =(38550 call newBuff decodedIdx) 0)
    unknown ret[38554](38556 call chpl_createStringWithOwnedBufferNV(x = newBuff)(length = decodedIdx)(size = allocSize)(numCodepoints = numCodepoints))
    (38566 'end of statement')
    (38567 call =(38570 call . ret c"hasEscapes") hasEscapes)
    (38574 return ret)
  }
  function decodeHelp[38578](arg buff[38585] :
  (38581 call c_ptr(38583 call uint[86] 8)), arg buffLen[38589] :
  int[10], arg offset[38593] :
  int[10], arg allowEsc[38597] :
  bool) : _unknown[42]
  {
    (38604 'import' OS.{errorCode})
    function qio_decode_char_buf[38605](ref arg chr[38610] :
    (38608 call int[10] 32), ref arg nBytes[38614] :
    c_int, arg buf[38620] :
    (38618 call c_ptr c_uchar), arg buflen[38624] :
    c_ssize_t) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      errorCode
    }
    function qio_decode_char_buf_esc[38631](ref arg chr[38636] :
    (38634 call int[10] 32), ref arg nBytes[38640] :
    c_int, arg buf[38646] :
    (38644 call c_ptr c_uchar), arg buffLen[38650] :
    c_ssize_t) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      errorCode
    }
    unknown chr[38658](38660 call int[10] 32)
    (38663 'end of statement')
    unknown nBytes[38665] c_int
    (38668 'end of statement')
    unknown start[38670](38671 call : offset c_int)
    (38676 'end of statement')
    unknown multibytes[38678](38679 call :(38681 call + buff start)(38686 call c_ptr c_uchar))
    (38689 'end of statement')
    unknown maxbytes[38691](38692 call :(38694 call - buffLen start) c_ssize_t)
    (38700 'end of statement')
    unknown decodeRet[38702] errorCode
    (38705 'end of statement')
    if(38727 call _cond_test allowEsc)
    {
      (38706 call = decodeRet(38710 call qio_decode_char_buf_esc chr nBytes multibytes maxbytes))
    }
    {
      (38716 call = decodeRet(38720 call qio_decode_char_buf chr nBytes multibytes maxbytes))
    }
    (38733 return(38738 call _build_tuple decodeRet chr nBytes))
  }
  function initWithBorrowedBuffer[38742](ref arg x[38746] :
  unknown t[38744], arg other[38750] :
  t) : _unknown[42] "no return value for void"
  {
    (38755 call assertArgType t "initWithBorrowedBuffer")
    (38760 call =(38763 call . x c"isOwned") 0)
    if(38782 call _cond_test(38778 call == t string[244]))
    {
      (38767 call =(38770 call . x c"hasEscapes")(38774 call . other c"hasEscapes"))
    }
    const otherRemote[38788] "const"(38789 call !=(38792 call . other c"locale_id") chpl_nodeID)
    (38797 'end of statement')
    const otherLen[38799] "const"(38801 call . other c"numBytes")
    (38805 'end of statement')
    if(38919 call _cond_test(38915 call > otherLen 0))
    {
      (38807 call =(38810 call . x c"buffLen") otherLen)
      if(38911 call _cond_test otherRemote)
      {
        (38815 call =(38818 call . x c"isOwned") 1)
        (38822 call =(38825 call . x c"buff")(38829 call bufferCopyRemote(38831 call . other c"locale_id")(38835 call . other c"buff") otherLen))
        (38839 call =(38842 call . x c"buffSize")(38845 call + otherLen 1))
        if(38864 call _cond_test(38860 call == t string[244]))
        {
          (38849 call =(38852 call . x c"cachedNumCodepoints")(38856 call . other c"cachedNumCodepoints"))
        }
      }
      {
        (38870 call =(38873 call . x c"buff")(38877 call . other c"buff"))
        (38880 call =(38883 call . x c"buffSize")(38887 call . other c"buffSize"))
        if(38905 call _cond_test(38901 call == t string[244]))
        {
          (38890 call =(38893 call . x c"cachedNumCodepoints")(38897 call . other c"cachedNumCodepoints"))
        }
      }
    }
  }
  function initWithBorrowedBuffer[38925](ref arg x[38929] :
  unknown t[38927], arg other[38933] :
  bufferType, arg length[38937] :
  int[10], arg size[38941] :
  int[10]) : _unknown[42] "no return value for void"
  {
    (38946 call assertArgType t "initWithBorrowedBuffer")
    (38949 call =(38952 call . x c"isOwned") 0)
    (38956 call =(38959 call . x c"buff") other)
    (38963 call =(38966 call . x c"buffSize") size)
    (38970 call =(38973 call . x c"buffLen") length)
  }
  function initWithOwnedBuffer[38979](ref arg x[38983] :
  unknown t[38981], arg other[38987] :
  bufferType, arg length[38991] :
  int[10], arg size[38995] :
  int[10]) : _unknown[42] "inline" "no return value for void"
  {
    (39000 call assertArgType t "initWithOwnedBuffer")
    (39005 call =(39008 call . x c"isOwned") 1)
    (39012 call =(39015 call . x c"buff") other)
    (39019 call =(39022 call . x c"buffSize") size)
    (39026 call =(39029 call . x c"buffLen") length)
  }
  function initWithNewBuffer[39035](ref arg x[39039] :
  unknown t[39037], arg other[39043] :
  t) : _unknown[42] "inline" "no return value for void"
  {
    (39048 call assertArgType t "initWithNewBuffer")
    const otherRemote[39054] "const"(39055 call !=(39058 call . other c"locale_id") chpl_nodeID)
    (39063 'end of statement')
    const otherLen[39065] "const"(39067 call . other c"numBytes")
    (39071 'end of statement')
    (39072 call =(39075 call . x c"isOwned") 1)
    if(39094 call _cond_test(39090 call == t string[244]))
    {
      (39079 call =(39082 call . x c"hasEscapes")(39086 call . other c"hasEscapes"))
    }
    if(39114 call _cond_test(39110 call == t string[244]))
    {
      (39099 call =(39102 call . x c"cachedNumCodepoints")(39106 call . other c"cachedNumCodepoints"))
    }
    if(39222 call _cond_test(39218 call > otherLen 0))
    {
      (39120 call =(39123 call . x c"buffLen") otherLen)
      if(39214 call _cond_test(39207 call &&(39209 call !(39212 call compiledForSingleLocale)) otherRemote))
      {
        (39128 call =(39131 call . x c"buff")(39135 call bufferCopyRemote(39137 call . other c"locale_id")(39141 call . other c"buff") otherLen))
        (39145 call =(39148 call . x c"buffSize")(39151 call + otherLen 1))
      }
      {
        const tmp[39168] "const" "temp"(39162 call bufferCopyLocal(39164 call . other c"buff") otherLen)
        (39175 call _check_tuple_var_decl tmp[39168] 2)
        const buff[39157] "const"(39169 call tmp[39168] 0)
        const allocSize[39159] "const"(39172 call tmp[39168] 1)
        (39180 'end of statement')
        (39181 call =(39184 call . x c"buff") buff)
        (39188 call =(39194 call(39191 call . x c"buff")(39196 call . x c"buffLen")) 0)
        (39200 call =(39203 call . x c"buffSize") allocSize)
      }
    }
  }
  function initWithNewBuffer[39228](ref arg x[39232] :
  unknown t[39230], arg other[39236] :
  bufferType, arg length[39240] :
  int[10], arg size[39244] :
  int[10]) : _unknown[42] "no return value for void"
  {
    (39249 call assertArgType t "initWithNewBuffer")
    const otherLen[39253] "const" length
    (39256 'end of statement')
    (39257 call =(39260 call . x c"isOwned") 1)
    if(39327 call _cond_test(39323 call > otherLen 0))
    {
      const tmp[39277] "const" "temp"(39271 call bufferCopyLocal(39272 call : other bufferType) otherLen)
      (39284 call _check_tuple_var_decl tmp[39277] 2)
      const buff[39266] "const"(39278 call tmp[39277] 0)
      const allocSize[39268] "const"(39281 call tmp[39277] 1)
      (39289 'end of statement')
      (39290 call =(39293 call . x c"buff") buff)
      (39297 call =(39300 call . x c"buffLen") otherLen)
      (39304 call =(39310 call(39307 call . x c"buff")(39312 call . x c"buffLen")) 0)
      (39316 call =(39319 call . x c"buffSize") allocSize)
    }
  }
  function getView[39333](const  ref arg x[39337] :
  unknown t[39335], arg r[39343] :
  (39341 call range ?[227]), param arg checkMisaligned[39347] =
  1) : _unknown[42] throws
  {
    (39352 call assertArgType t "getView")
    if(39376 call _cond_test(39363 call &&(39365 call == t bytes[232])(39369 call ==(39372 call . r c"idxType") codepointIndex)))
    {
      (39359 call compilerError "codepointIndex ranges cannot be used with bytes in getView")
    }
    function simpleCaseHelper[39380]() : _unknown[42]
    {
      const intR[39384] "const"(39385 call : r(39389 call range int[10](39394 call . r c"bounds")(39400 call . r c"strides")))
      (39404 'end of statement')
      if(39449 call _cond_test boundsChecking)
      {
        if(39444 call _cond_test(39431 call !(39442 call(39439 call .(39434 call . x c"byteIndices") c"chpl_boundsCheck") intR)))
        {
          (39408 call halt "range " r(39413 call +(39415 call + " out of bounds for "(39420 call : t string[244])) " with length ")(39428 call . x c"numBytes"))
        }
      }
      if(39494 call _cond_test(39487 call ==(39490 call . r c"idxType") byteIndex))
      {
        (39454 return(39465 call _build_tuple(39457 call intR(39459 call . x c"byteIndices"))(39462 call - 1)))
      }
      {
        const retRange[39469] "const"(39471 call intR(39473 call . x c"byteIndices"))
        (39477 'end of statement')
        (39478 return(39485 call _build_tuple retRange(39482 call . retRange c"size")))
      }
    }
    if(40018 call _cond_test(40011 call ==(40014 call . r c"idxType") byteIndex))
    {
      if(39659 call _cond_test(39652 call && checkMisaligned(39655 call == t string[244])))
      {
        if(39573 call _cond_test(39531 call &&(39533 call &&(39539 call(39536 call . r c"hasLowBound"))(39549 call(39546 call .(39541 call . x c"byteIndices") c"contains")(39550 call :(39553 call . r c"lowBound") int[10])))(39557 call !(39560 call isInitialByte(39565 call(39562 call . x c"byte")(39566 call :(39569 call . r c"lowBound") int[10]))))))
        {
          (39503 'throw'(39504 'new'(39506 call CodepointSplitError(39507 call +(39509 call +(39511 call + "Byte-based string slice is not aligned to codepoint boundaries. " "The byte at low boundary ")(39519 call :(39524 call . r c"lowBound") string[244])) " is not the first byte of a UTF-8 codepoint"))))
        }
        if(39648 call _cond_test(39602 call &&(39604 call &&(39610 call(39607 call . r c"hasHighBound"))(39618 call(39615 call .(39612 call . x c"byteIndices") c"contains")(39619 call +(39621 call :(39624 call . r c"highBound") int[10]) 1)))(39629 call !(39632 call isInitialByte(39637 call(39634 call . x c"byte")(39638 call +(39640 call :(39643 call . r c"highBound") int[10]) 1))))))
        {
          (39578 'throw'(39579 'new'(39581 call CodepointSplitError(39582 call +(39584 call +(39586 call + "Byte-based string slice is not aligned to codepoint boundaries. " "The byte at high boundary ")(39592 call :(39597 call . r c"highBound") string[244])) " is not the first byte of a UTF-8 codepoint"))))
        }
      }
      (39663 return(39665 call simpleCaseHelper))
    }
    {
      if(40007 call _cond_test(39990 call ||(39992 call == t bytes[232])(39996 call &&(39998 call == t string[244])(40006 call(40003 call . x c"isASCII")))))
      {
        (39667 return(39669 call simpleCaseHelper))
      }
      {
        if(39686 call _cond_test(39677 call !(39685 call(39682 call . r c"hasUnitStride"))))
        {
          (39673 call compilerError "string slicing doesn't support stridable codepoint ranges")
        }
        if(39710 call _cond_test(39703 call == r(39707 call . x c"indices")))
        {
          (39690 return(39700 call _build_tuple(39693 call . x c"byteIndices")(39697 call . x c"cachedNumCodepoints")))
        }
        const intR[39716] "const"(39717 call : r(39721 call range int[10](39724 call . r c"bounds")(39728 call . r c"strides")))
        (39732 'end of statement')
        if(39760 call _cond_test boundsChecking)
        {
          if(39755 call _cond_test(39744 call !(39753 call(39750 call .(39747 call . x c"indices") c"chpl_boundsCheck") intR)))
          {
            (39736 call halt "range " r " out of bounds for string with length "(39741 call . x c"size"))
          }
        }
        unknown cpCount[39765] 0
        (39768 'end of statement')
        const cpIdxLow[39770] "const"(39796 IfExpr (39771 call &&(39777 call(39774 call . intR c"hasLowBound"))(39778 call >=(39780 call :(39783 call . intR c"low") int[10]) 0)) then
        { scopeless
          (39788 call :(39791 call . intR c"low") int[10])
        } else
        { scopeless
          0
        } )
        (39800 'end of statement')
        const cpIdxHigh[39802] "const"(39822 IfExpr (39807 call(39804 call . intR c"hasHighBound")) then
        { scopeless
          (39808 call :(39811 call . intR c"high") int[10])
        } else
        { scopeless
          (39815 call -(39818 call . x c"buffLen") 1)
        } )
        (39826 'end of statement')
        unknown byteLow[39828](39830 call . x c"buffLen")
        (39834 'end of statement')
        unknown byteHigh[39836](39837 call -(39840 call . x c"buffLen") 1)
        (39845 'end of statement')
        if(39971 call _cond_test(39967 call >= cpIdxHigh 0))
        {
          {
            unknown _indexOfInterest[39922] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[39923] "expr temp" "temp"
            (39932 'move' _iterator[39923](39930 call _getIterator(39860 call(39857 call . x c"_indexLen"))))
            Defer
            {
              {
                (39960 call _freeIterator _iterator[39923])
              }
            }
            { scopeless type
              (39937 'move' _indexOfInterest[39922](39934 call iteratorIndex _iterator[39923]))
            }
            ForLoop[39924]
            {
              (39942 call _check_tuple_var_decl _indexOfInterest[39922] 2)
              unknown i[39848] "index var" "insert auto destroy"
              (39949 'move' i[39848](39946 call _indexOfInterest[39922] 0))
              unknown nBytes[39850] "index var" "insert auto destroy"
              (39955 'move' nBytes[39850](39952 call _indexOfInterest[39922] 1))
              {
                if(39889 call _cond_test(39885 call == cpCount cpIdxLow))
                {
                  (39863 call = byteLow(39866 call : i int[10]))
                  if(39880 call _cond_test(39873 call !(39879 call(39876 call . r c"hasHighBound"))))
                  {
                    break nil[32]
                  }
                }
                if(39914 call _cond_test(39910 call == cpCount cpIdxHigh))
                {
                  (39894 call = byteHigh(39897 call -(39899 call +(39901 call : i int[10]) nBytes) 1))
                  break nil[32]
                }
                (39918 call += cpCount 1)
              }
              label _continueLabel[39927]
              _indexOfInterest[39922]
              _iterator[39923]
            }
            label _breakLabel[39928]
          }
        }
        (39975 return(39988 call _build_tuple(39979 call chpl_build_bounded_range byteLow byteHigh)(39981 call +(39983 call - cpIdxHigh cpIdxLow) 1)))
      }
    }
  }
  function getSlice[40025](const  ref arg x[40029] :
  unknown t[40027], arg r[40035] :
  (40033 call range ?[227])) : _unknown[42] throws
  {
    (40040 call assertArgType t "getSlice")
    if(40058 call _cond_test(40057 call(40054 call . x c"isEmpty")))
    {
      unknown ret[40047] t
      (40050 'end of statement')
      (40051 return ret)
    }
    const tmp[40071] "const" "temp"(40068 call getView x r)
    (40078 call _check_tuple_var_decl tmp[40071] 2)
    const r2[40063] "const"(40072 call tmp[40071] 0)
    const numChars[40065] "const"(40075 call tmp[40071] 1)
    (40083 'end of statement')
    if(40099 call _cond_test(40092 call <=(40095 call . r2 c"size") 0))
    {
      unknown ret[40086] t
      (40089 'end of statement')
      (40090 return ret)
    }
    unknown buff[40104] bufferType
    (40107 'end of statement')
    unknown buffSize[40109] int[10]
    (40112 'end of statement')
    const copyLen[40114] "const"(40115 call +(40117 call -(40120 call . r2 c"highBound")(40124 call . r2 c"lowBound")) 1)
    (40129 'end of statement')
    unknown tmp[40154] "temp"(40136 call bufferCopy(buf =(40138 call . x c"buff"))(off =(40143 call . r2 c"lowBound"))(len = copyLen)(loc =(40150 call . x c"locale_id")))
    (40161 call _check_tuple_var_decl tmp[40154] 2)
    unknown copyBuf[40131](40155 call tmp[40154] 0)
    unknown copySize[40133](40158 call tmp[40154] 1)
    (40166 'end of statement')
    if(40302 call _cond_test(40295 call ==(40298 call . r2 c"stride") 1))
    {
      (40168 call = buff copyBuf)
      (40172 call = buffSize copySize)
    }
    {
      unknown tmp[40191] "temp"(40183 call bufferAlloc(40184 call +(40187 call . r2 c"size") 1))
      (40198 call _check_tuple_var_decl tmp[40191] 2)
      unknown newBuff[40178](40192 call tmp[40191] 0)
      unknown allocSize[40180](40195 call tmp[40191] 1)
      (40203 'end of statement')
      {
        unknown _indexOfInterest[40232] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[40233] "expr temp" "temp"
        (40249 'move' _iterator[40233](40216 call _build_tuple(40242 call _getIterator r2)(40247 call _getIterator(40245 call chpl_build_low_bounded_range 0))))
        Defer
        {
          {
            (40277 call _freeIterator _iterator[40233])
          }
        }
        { scopeless type
          (40254 'move' _indexOfInterest[40232](40251 call iteratorIndex _iterator[40233]))
        }
        ForLoop[40234]
        {
          (40259 call _check_tuple_var_decl _indexOfInterest[40232] 2)
          unknown r2_i[40205] "index var" "insert auto destroy"
          (40266 'move' r2_i[40205](40263 call _indexOfInterest[40232] 0))
          unknown i[40207] "index var" "insert auto destroy"
          (40272 'move' i[40207](40269 call _indexOfInterest[40232] 1))
          {
            (40218 call =(40221 call newBuff i)(40224 call copyBuf(40225 call - r2_i(40229 call . r2 c"lowBound"))))
          }
          label _continueLabel[40237]
          _indexOfInterest[40232]
          _iterator[40233]
        }
        label _breakLabel[40238]
      }
      (40284 call = buff newBuff)
      (40288 call = buffSize allocSize)
      (40293 call bufferFree copyBuf)
    }
    const buffLen[40307] "const"(40309 call . r2 c"size")
    (40313 'end of statement')
    (40314 call =(40317 call buff buffLen) 0)
    if(40372 call _cond_test(40368 call == t string[244]))
    {
      unknown numCodepoints[40322] numChars
      (40325 'end of statement')
      if(40340 call _cond_test(40334 call == numCodepoints(40337 call - 1)))
      {
        (40327 call = numCodepoints(40331 call countNumCodepoints buff buffLen))
      }
      (40344 return(40346 call chpl_createStringWithOwnedBufferNV(x = buff)(length = buffLen)(size = buffSize)(numCodepoints = numCodepoints)))
    }
    {
      (40356 return(40361 call(40358 call . bytes[232] c"createAdoptingBuffer")(x = buff)(length = buffLen)(size = buffSize)))
    }
  }
  function getIndexType[40378](arg t[40380]:_any[141](?)) type : _unknown[42]
  {
    (40385 'import' Bytes)
    (40387 'import' String)
    if(40419 call _cond_test(40415 call == t bytes[232]))
    {
      (40388 return int[10])
    }
    {
      if(40409 call _cond_test(40405 call == t string[244]))
      {
        (40391 return(40395 call . String c"byteIndex"))
      }
      {
        (40400 call compilerError "This function should only be used by bytes or string")
      }
    }
  }
  function doReplace[40427](const  ref arg x[40431] :
  unknown t[40429], arg needle[40435] :
  t, arg replacement[40439] :
  t, arg count[40446] :
  int[10] =
  (40443 call - 1)) : _unknown[42]
  {
    (40453 call assertArgType t "doReplace")
    unknown _idxt[40459] "type variable"(40461 call getIndexType t)
    unknown result[40465] x t
    (40469 'end of statement')
    unknown found[40471] 0 int[10]
    (40475 'end of statement')
    unknown startIdx[40477] 0 _idxt
    (40481 'end of statement')
    const localNeedle[40483] "const"(40489 call(40486 call . needle c"localize")) t
    (40491 'end of statement')
    const localReplacement[40493] "const"(40499 call(40496 call . replacement c"localize")) t
    (40501 'end of statement')
    {
      unknown tmp[40587] "temp"
      (40623 'move' tmp[40587](40612 call _cond_test(40614 call ||(40616 call < count 0)(40620 call < found count))))
      WhileDo[40592]
      {
        {
          const idx[40514] "const"(40521 call(40518 call . result c"find") localNeedle(40524 call chpl_build_low_bounded_range startIdx))
          (40527 'end of statement')
          if(40537 call _cond_test(40531 call == idx(40534 call - 1)))
          {
            break nil[32]
          }
          (40542 call += found 1)
          Try!
          {
            {
              (40547 call = result(40550 call +(40552 call +(40555 call result(40560 call chpl_build_high_bounded_range(40556 call - idx 1))) localReplacement)(40564 call result(40572 call chpl_build_low_bounded_range(40565 call + idx(40569 call . localNeedle c"numBytes"))))))
            }
          }
          (40577 call = startIdx(40580 call + idx(40584 call . localReplacement c"numBytes")))
        }
        label _continueLabel[40590]
        (40607 'move' tmp[40587](40596 call _cond_test(40598 call ||(40600 call < count 0)(40604 call < found count))))
        tmp[40587]
      }
      label _breakLabel[40591]
    }
    (40626 return result)
  }
  { scopeless type
    t
  }
  function doSplitHelp[40631](const  ref arg localx[40635] :
  unknown t[40633], const  ref arg localSep[40639] :
  t, const arg maxsplit[40646] :
  int[10] =
  (40643 call - 1), const arg ignoreEmpty[40652] :
  bool =
  0, ref arg start[40659] :
  (40657 call getIndexType t), const arg splitCount[40663] :
  int[10]) : _unknown[42]
  {
    unknown _idxt[40669] "type variable"(40671 call getIndexType t)
    unknown splitAll[40675](40677 call <= maxsplit 0) bool
    (40682 'end of statement')
    unknown chunk[40684] t
    (40687 'end of statement')
    unknown end[40689](40691 call - 1) _idxt
    (40695 'end of statement')
    unknown done[40697] 0
    (40700 'end of statement')
    if(40778 call _cond_test(40774 call == maxsplit 0))
    {
      (40702 call = chunk localx)
      (40706 call = done 1)
    }
    {
      if(40731 call _cond_test(40724 call || splitAll(40727 call < splitCount maxsplit)))
      {
        (40711 call = end(40718 call(40715 call . localx c"find") localSep(40721 call chpl_build_low_bounded_range start)))
      }
      if(40770 call _cond_test(40764 call == end(40767 call - 1)))
      {
        (40737 call = chunk(40745 'try!-expr'(40741 call localx(40743 call chpl_build_low_bounded_range start))))
        (40746 call = done 1)
      }
      {
        (40751 call = chunk(40763 'try!-expr'(40755 call localx(40761 call chpl_build_bounded_range start(40757 call - end 1)))))
      }
    }
    if(40805 call _cond_test done)
    {
      (40783 call = start(40786 call +(40789 call . localx c"numBytes") 1))
    }
    {
      (40794 call = start(40797 call + end(40801 call . localSep c"numBytes")))
    }
    (40809 return chunk)
  }
  { scopeless type
    t
  }
  function doSplit[40814](const  ref arg x[40818] :
  unknown t[40816], arg sep[40822] :
  t, arg maxsplit[40829] :
  int[10] =
  (40826 call - 1), arg ignoreEmpty[40835] :
  bool =
  0) : _unknown[42] "iterator fn" "no return value for void"
  {
    (40842 call assertArgType t "doSplit")
    unknown _idxt[40848] "type variable"(40850 call getIndexType t)
    if(40976 call _cond_test(40960 call !(40962 call &&(40964 call &&(40966 call == maxsplit 0) ignoreEmpty)(40975 call(40972 call . x c"isEmpty")))))
    {
      const localx[40855] "const"(40861 call(40858 call . x c"localize")) t
      (40863 'end of statement')
      const localSep[40865] "const"(40871 call(40868 call . sep c"localize")) t
      (40873 'end of statement')
      unknown splitCount[40875] 0 int[10]
      (40879 'end of statement')
      unknown start[40881] 0 _idxt
      (40885 'end of statement')
      {
        unknown tmp[40927] "temp"
        (40957 'move' tmp[40927](40949 call _cond_test(40951 call <= start(40954 call . localx c"numBytes"))))
        WhileDo[40932]
        {
          {
            const chunk[40895] "const"(40897 call doSplitHelp localx localSep maxsplit ignoreEmpty start splitCount)
            (40905 'end of statement')
            if(40923 call _cond_test(40913 call !(40915 call && ignoreEmpty(40922 call(40919 call . chunk c"isEmpty")))))
            {
              (40907 yield chunk)
              (40909 call += splitCount 1)
            }
          }
          label _continueLabel[40930]
          (40944 'move' tmp[40927](40936 call _cond_test(40938 call <= start(40941 call . localx c"numBytes"))))
          tmp[40927]
        }
        label _breakLabel[40931]
      }
    }
  }
  { scopeless type
    t
  }
  function doSplitWSNoEncHelp[40983](const  ref arg localx[40987] :
  unknown t[40985], arg maxsplit[40994] :
  int[10] =
  (40991 call - 1), ref arg i[40999] :
  int[10], const arg splitCount[41003] :
  int[10], const arg noSplits[41007] :
  bool, const arg limitSplits[41011] :
  bool, const arg iEnd[41015] :
  byteIndex) : _unknown[42]
  {
    unknown done[41021] 0 bool
    (41025 'end of statement')
    unknown yieldChunk[41027] 0 bool
    (41031 'end of statement')
    unknown chunk[41033] t
    (41036 'end of statement')
    unknown inChunk[41038] 0 bool
    (41042 'end of statement')
    unknown chunkStart[41044] int[10]
    (41047 'end of statement')
    {
      unknown tmp[41262] "temp"
      (41292 'move' tmp[41262](41284 call _cond_test(41286 call < i(41289 call . localx c"size"))))
      WhileDo[41267]
      {
        {
          unknown c[41057](41062 call(41059 call . localx c"byte") i)
          (41065 'end of statement')
          if(41232 call _cond_test noSplits)
          {
            (41067 call = done 1)
            if(41087 call _cond_test(41080 call !(41086 call(41083 call . localx c"isSpace"))))
            {
              (41072 call = chunk localx)
              (41076 call = yieldChunk 1)
            }
          }
          {
            unknown cSpace[41093](41095 call byte_isWhitespace c)
            (41098 'end of statement')
            if(41226 call _cond_test(41220 call !(41222 call || inChunk cSpace)))
            {
              (41100 call = chunkStart i)
              (41104 call = inChunk 1)
              if(41129 call _cond_test(41125 call > i iEnd))
              {
                (41109 call = chunk(41113 call localx(41115 call chpl_build_low_bounded_range chunkStart)))
                (41117 call = yieldChunk 1)
                (41121 call = done 1)
              }
            }
            {
              if(41216 call _cond_test inChunk)
              {
                if(41210 call _cond_test cSpace)
                {
                  if(41180 call _cond_test(41173 call && limitSplits(41176 call >= splitCount maxsplit)))
                  {
                    (41136 call = chunk(41140 call localx(41142 call chpl_build_low_bounded_range chunkStart)))
                    (41144 call = yieldChunk 1)
                    (41148 call = done 1)
                  }
                  {
                    (41153 call = chunk(41157 call localx(41163 call chpl_build_bounded_range chunkStart(41159 call - i 1))))
                    (41165 call = yieldChunk 1)
                    (41169 call = inChunk 0)
                  }
                }
                {
                  if(41205 call _cond_test(41201 call > i iEnd))
                  {
                    (41185 call = chunk(41189 call localx(41191 call chpl_build_low_bounded_range chunkStart)))
                    (41193 call = yieldChunk 1)
                    (41197 call = done 1)
                  }
                }
              }
            }
          }
          if(41245 call _cond_test done)
          {
            (41237 call = i(41241 call . localx c"size"))
          }
          if(41258 call _cond_test yieldChunk)
          {
            (41250 return chunk)
          }
          {
            (41253 call += i 1)
          }
        }
        label _continueLabel[41265]
        (41279 'move' tmp[41262](41271 call _cond_test(41273 call < i(41276 call . localx c"size"))))
        tmp[41262]
      }
      label _breakLabel[41266]
    }
    (41295 return "")
  }
  { scopeless type
    t
  }
  function doSplitWSNoEnc[41300](const  ref arg x[41304] :
  unknown t[41302], arg maxsplit[41311] :
  int[10] =
  (41308 call - 1)) : _unknown[42] "iterator fn" "no return value for void"
  {
    (41318 call assertArgType t "doSplitWSNoEnc")
    if(41442 call _cond_test(41435 call !(41441 call(41438 call . x c"isEmpty"))))
    {
      const localx[41325] "const"(41331 call(41328 call . x c"localize")) t
      (41333 'end of statement')
      unknown splitCount[41335] 0 int[10]
      (41339 'end of statement')
      unknown i[41341] 0
      (41344 'end of statement')
      {
        unknown tmp[41402] "temp"
        (41432 'move' tmp[41402](41424 call _cond_test(41426 call < i(41429 call . localx c"numBytes"))))
        WhileDo[41407]
        {
          {
            const chunk[41354] "const"(41356 call doSplitWSNoEncHelp localx maxsplit i splitCount(noSplits =(41361 call == maxsplit 0))(limitSplits =(41366 call > maxsplit 0))(iEnd =(41371 call :(41373 call -(41376 call . localx c"buffLen") 2) byteIndex)))
            (41383 'end of statement')
            if(41398 call _cond_test(41391 call !(41397 call(41394 call . chunk c"isEmpty"))))
            {
              (41385 yield chunk)
              (41387 call += splitCount 1)
            }
          }
          label _continueLabel[41405]
          (41419 'move' tmp[41402](41411 call _cond_test(41413 call < i(41416 call . localx c"numBytes"))))
          tmp[41402]
        }
        label _breakLabel[41406]
      }
    }
  }
  { scopeless type
    t
  }
  function doSearchNoEnc[41449](const  ref arg x[41453] :
  unknown t[41451], arg needle[41457] :
  t, arg region[41463] :
  (41461 call range ?[227]), param arg count[41467] :
  bool, param arg fromLeft[41472] :
  bool =
  1) : _unknown[42]
  {
    (41478 call assertArgType t "doSearch")
    unknown ret[41484](41486 call - 1) int[10]
    (41490 'end of statement')
    {
      const tmp[41875] "const" "temp"
      (41876 'move' tmp[41875](41873 'deref'(41491 'chpl_on_locale_num'(41493 call chpl_buildLocaleID(41495 call . x c"locale_id") c_sublocid_any))))
      {
        unknown localRet[41501](41503 call - 2) int[10]
        (41507 'end of statement')
        const nLen[41509] "const"(41511 call . needle c"buffLen")
        (41515 'end of statement')
        const tmp[41526] "const" "temp"(41525 'try!-expr'(41522 call getView x region))
        (41530 call _check_tuple_var_decl tmp[41526] 2)
        const view[41517] "const"(41527 call tmp[41526] 0)
        (41535 'end of statement')
        const xLen[41537] "const"(41539 call . view c"size")
        (41543 'end of statement')
        if(41599 call _cond_test count)
        {
          if(41557 call _cond_test(41553 call == nLen 0))
          {
            (41546 call = localRet(41550 call . view c"size"))
          }
        }
        {
          if(41594 call _cond_test(41590 call == nLen 0))
          {
            if(41586 call _cond_test fromLeft)
            {
              (41564 call = localRet(41567 call - 1))
            }
            {
              (41571 call = localRet(41582 IfExpr (41574 call == xLen 0) then
              { scopeless
                (41578 call - 1)
              } else
              { scopeless
                xLen
              } ))
            }
          }
        }
        if(41614 call _cond_test(41610 call > nLen xLen))
        {
          (41604 call = localRet(41607 call - 1))
        }
        if(41854 call _cond_test(41848 call == localRet(41851 call - 2)))
        {
          (41619 call = localRet(41622 call - 1))
          const localNeedle[41626] "const"(41631 call(41628 call . needle c"localize"))
          (41633 'end of statement')
          const needleLen[41635] "const"(41637 call . localNeedle c"buffLen")
          (41641 'end of statement')
          const numPossible[41643] "const"(41644 call +(41646 call - xLen nLen) 1)
          (41652 'end of statement')
          const searchSpace[41654] "const"(41673 IfExpr  fromLeft then
          { scopeless
            (41656 call #(41659 call chpl_build_low_bounded_range 0) numPossible)
          } else
          { scopeless
            (41662 call chpl_by(41664 call #(41667 call chpl_build_low_bounded_range 0) numPossible)(41670 call - 1))
          } )
          (41677 'end of statement')
          {
            unknown _indexOfInterest[41816] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[41817] "expr temp" "temp"
            (41826 'move' _iterator[41817](41824 call _getIterator searchSpace))
            Defer
            {
              {
                (41841 call _freeIterator _iterator[41817])
              }
            }
            { scopeless type
              (41831 'move' _indexOfInterest[41816](41828 call iteratorIndex _iterator[41817]))
            }
            ForLoop[41818]
            {
              unknown i[41678] "index var" "insert auto destroy"
              (41836 'move' i[41678] _indexOfInterest[41816])
              {
                {
                  unknown _indexOfInterest[41758] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[41759] "expr temp" "temp"
                  (41768 'move' _iterator[41759](41766 call _getIterator(41775 call chpl_direct_counted_range_iter 0 nLen)))
                  Defer
                  {
                    {
                      (41790 call _freeIterator _iterator[41759])
                    }
                  }
                  { scopeless type
                    (41780 'move' _indexOfInterest[41758](41777 call iteratorIndex _iterator[41759]))
                  }
                  ForLoop[41760]
                  {
                    unknown j[41682] "index var" "insert auto destroy"
                    (41785 'move' j[41682] _indexOfInterest[41758])
                    {
                      const idx[41692] "const"(41697 call(41694 call . view c"orderToIndex")(41698 call + i j))
                      (41703 'end of statement')
                      if(41721 call _cond_test(41707 call !=(41713 call(41710 call . x c"buff") idx)(41719 call(41716 call . localNeedle c"buff") j)))
                      {
                        break nil[32]
                      }
                      if(41754 call _cond_test(41747 call == j(41750 call - nLen 1)))
                      {
                        if(41743 call _cond_test count)
                        {
                          (41728 call += localRet 1)
                        }
                        {
                          (41733 call = localRet(41740 call(41737 call . view c"orderToIndex") i))
                        }
                      }
                    }
                    label _continueLabel[41763]
                    _indexOfInterest[41758]
                    _iterator[41759]
                  }
                  label _breakLabel[41764]
                }
                if(41811 call _cond_test(41800 call &&(41802 call ! count)(41805 call != localRet(41808 call - 1))))
                {
                  break nil[32]
                }
              }
              label _continueLabel[41821]
              _indexOfInterest[41816]
              _iterator[41817]
            }
            label _breakLabel[41822]
          }
        }
        if(41864 call _cond_test count)
        {
          (41858 call += localRet 1)
        }
        (41869 call = ret localRet)
      }
      (41879 'elided on block' 0 tmp[41875])
    }
    (41883 return ret)
  }
  function startsEndsWith[41887](const  ref arg x[41891] :
  unknown t[41889], arg needles[41894]:_any[141](?), param arg fromLeft[41897] :
  bool) : _unknown[42] "inline"
  {
    (41915 call assertArgType t "startsEndsWith")
    unknown ret[41921] 0 bool
    (41925 'end of statement')
    {
      const tmp[42093] "const" "temp"
      (42094 'move' tmp[42093](42091 'deref'(41926 'chpl_on_locale_num'(41928 call chpl_buildLocaleID(41930 call . x c"locale_id") c_sublocid_any))))
      {
        {
          unknown _indexOfInterest[42059] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[42060] "expr temp" "temp"
          (42069 'move' _iterator[42060](42067 call _getIterator needles))
          Defer
          {
            {
              (42084 call _freeIterator _iterator[42060])
            }
          }
          { scopeless type
            (42074 'move' _indexOfInterest[42059](42071 call iteratorIndex _iterator[42060]))
          }
          ForLoop[42061]
          {
            unknown needle[41935] "index var" "insert auto destroy"
            (42079 'move' needle[41935] _indexOfInterest[42059])
            {
              const needleLen[41940] "const"(41942 call . needle c"buffLen")
              (41946 'end of statement')
              if(41959 call _cond_test(41955 call == needleLen 0))
              {
                (41948 call = ret 1)
                break nil[32]
              }
              if(41973 call _cond_test(41966 call > needleLen(41970 call . x c"buffLen")))
              {
                continue nil[32]
              }
              const localNeedle[41979] "const"(41984 call(41981 call . needle c"localize"))
              (41986 'end of statement')
              if(42043 call _cond_test fromLeft)
              {
                (41988 call = ret(41992 call bufferEqualsLocal(buf1 =(41994 call . x c"buff"))(off1 = 0)(buf2 =(42001 call . localNeedle c"buff"))(off2 = 0)(len = needleLen)))
              }
              {
                unknown offset[42011](42012 call -(42015 call . x c"buffLen") needleLen)
                (42020 'end of statement')
                (42021 call = ret(42025 call bufferEqualsLocal(buf1 =(42027 call . x c"buff"))(off1 = offset)(buf2 =(42034 call . localNeedle c"buff"))(off2 = 0)(len = needleLen)))
              }
              if(42054 call _cond_test(42050 call == ret 1))
              {
                break nil[32]
              }
            }
            label _continueLabel[42064]
            _indexOfInterest[42059]
            _iterator[42060]
          }
          label _breakLabel[42065]
        }
      }
      (42097 'elided on block' 0 tmp[42093])
    }
    (42101 return ret)
  }
  where {
    (41901 call &&(41904 call isHomogeneousTuple needles)(41906 call ==(41911 'typeof'(41909 call needles 0)) t))
  }
  { scopeless type
    bool
  }
  function doJoinIterator[42107](const  ref arg x[42111] :
  unknown t[42109], arg ir[42115] :
  _iteratorRecord) : _unknown[42]
  {
    (42121 call assertArgType t "doJoinIterator")
    unknown s[42127] t
    (42130 'end of statement')
    unknown first[42132] 1 bool
    (42136 'end of statement')
    {
      unknown _indexOfInterest[42162] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[42163] "expr temp" "temp"
      (42172 'move' _iterator[42163](42170 call _getIterator ir))
      Defer
      {
        {
          (42187 call _freeIterator _iterator[42163])
        }
      }
      { scopeless type
        (42177 'move' _indexOfInterest[42162](42174 call iteratorIndex _iterator[42163]))
      }
      ForLoop[42164]
      {
        unknown i[42137] "index var" "insert auto destroy"
        (42182 'move' i[42137] _indexOfInterest[42162])
        {
          if(42152 call _cond_test first)
          {
            (42141 call = first 0)
          }
          {
            (42146 call += s x)
          }
          (42158 call += s i)
        }
        label _continueLabel[42167]
        _indexOfInterest[42162]
        _iterator[42163]
      }
      label _breakLabel[42168]
    }
    (42194 return s)
  }
  { scopeless type
    t
  }
  function doJoin[42199](const  ref arg x[42203] :
  unknown t[42201], const  ref arg S[42206]:_any[141](?)) : _unknown[42]
  {
    (42219 call assertArgType t "doJoin")
    if(42597 call _cond_test(42590 call ==(42593 call . S c"size") 0))
    {
      (42225 return(42226 call : "" t))
    }
    {
      if(42586 call _cond_test(42579 call ==(42582 call . S c"size") 1))
      {
        unknown ret[42232] t
        (42235 'end of statement')
        if(42263 call _cond_test(42261 call isArray S))
        {
          (42237 call = ret(42241 call S(42250 call .(42245 call . S c"_dom") c"first")))
        }
        {
          (42254 call = ret(42258 call S 0))
        }
        (42267 return ret)
      }
      {
        unknown joinedSize[42271](42273 call *(42276 call . x c"buffLen")(42279 call -(42282 call . S c"size") 1)) int[10]
        (42287 'end of statement')
        {
          unknown _indexOfInterest[42299] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[42300] "expr temp" "temp"
          (42309 'move' _iterator[42300](42307 call _getIterator S))
          Defer
          {
            {
              (42324 call _freeIterator _iterator[42300])
            }
          }
          { scopeless type
            (42314 'move' _indexOfInterest[42299](42311 call iteratorIndex _iterator[42300]))
          }
          ForLoop[42301]
          {
            unknown s[42288] "index var" "insert auto destroy"
            (42319 'move' s[42288] _indexOfInterest[42299])
            (42291 call += joinedSize(42295 call . s c"numBytes"))
            label _continueLabel[42304]
            _indexOfInterest[42299]
            _iterator[42300]
          }
          label _breakLabel[42305]
        }
        unknown numCodepoints[42332] 0
        (42335 'end of statement')
        if(42346 call _cond_test(42342 call == joinedSize 0))
        {
          (42336 return(42337 call : "" t))
        }
        unknown tmp[42362] "temp"(42357 call bufferAlloc(42358 call + joinedSize 1))
        (42369 call _check_tuple_var_decl tmp[42362] 2)
        unknown newBuff[42352](42363 call tmp[42362] 0)
        unknown allocSize[42354](42366 call tmp[42362] 1)
        (42374 'end of statement')
        unknown first[42376] 1
        (42379 'end of statement')
        unknown offset[42381] 0
        (42384 'end of statement')
        {
          unknown _indexOfInterest[42508] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[42509] "expr temp" "temp"
          (42518 'move' _iterator[42509](42516 call _getIterator S))
          Defer
          {
            {
              (42533 call _freeIterator _iterator[42509])
            }
          }
          { scopeless type
            (42523 'move' _indexOfInterest[42508](42520 call iteratorIndex _iterator[42509]))
          }
          ForLoop[42510]
          {
            unknown s[42385] "index var" "insert auto destroy"
            (42528 'move' s[42385] _indexOfInterest[42508])
            {
              const sLen[42390] "const"(42392 call . s c"buffLen")
              (42396 'end of statement')
              if(42455 call _cond_test first)
              {
                (42398 call = first 0)
              }
              {
                if(42450 call _cond_test(42443 call !=(42446 call . x c"buffLen") 0))
                {
                  (42404 call bufferMemcpyLocal(dst = newBuff)(src =(42408 call . x c"buff"))(len =(42413 call . x c"buffLen"))(dst_off = offset))
                  (42419 call += offset(42423 call . x c"buffLen"))
                  if(42438 call _cond_test(42434 call == t string[244]))
                  {
                    (42426 call += numCodepoints(42430 call . x c"numCodepoints"))
                  }
                }
              }
              if(42504 call _cond_test(42500 call != sLen 0))
              {
                (42462 call bufferMemcpy(dst = newBuff)(dst_off = offset)(src_loc =(42468 call . s c"locale_id"))(src =(42473 call . s c"buff"))(len = sLen))
                (42479 call += offset sLen)
                if(42495 call _cond_test(42491 call == t string[244]))
                {
                  (42483 call += numCodepoints(42487 call . s c"numCodepoints"))
                }
              }
            }
            label _continueLabel[42513]
            _indexOfInterest[42508]
            _iterator[42509]
          }
          label _breakLabel[42514]
        }
        (42540 call =(42543 call newBuff joinedSize) 0)
        if(42575 call _cond_test(42571 call == t string[244]))
        {
          (42547 return(42549 call chpl_createStringWithOwnedBufferNV(x = newBuff)(length = joinedSize)(size = allocSize)(numCodepoints = numCodepoints)))
        }
        {
          (42559 return(42564 call(42561 call . bytes[232] c"createAdoptingBuffer")(x = newBuff)(length = joinedSize)(size = allocSize)))
        }
      }
    }
  }
  where {
    (42209 call ||(42212 call isTuple S)(42215 call isArray S))
  }
  { scopeless type
    t
  }
  function doPartition[42606](const  ref arg x[42610] :
  unknown t[42608], arg sep[42614] :
  t) : _unknown[42]
  {
    (42623 call assertArgType t "doPartition")
    const idx[42629] "const"(42634 call(42631 call . x c"find") sep)
    (42637 'end of statement')
    if(42684 call _cond_test(42678 call != idx(42681 call - 1)))
    {
      (42639 return(42663 'try!-expr'(42661 call _build_tuple(42642 call x(42647 call chpl_build_high_bounded_range(42643 call - idx 1))) sep(42651 call x(42659 call chpl_build_low_bounded_range(42652 call + idx(42656 call . sep c"numBytes")))))))
    }
    {
      (42665 return(42676 call _build_tuple x(42668 call : "" t)(42672 call : "" t)))
    }
  }
  { scopeless type
    (42617 call * 3 t)
  }
  function doDedent[42691](const  ref arg x[42695] :
  unknown t[42693], arg columns[42699] =
  0, arg ignoreFirst[42703] =
  1) : _unknown[42]
  {
    const low[42709] "const"(42713 IfExpr  ignoreFirst then
    { scopeless
      1
    } else
    { scopeless
      0
    } )
    (42717 'end of statement')
    const newline[42719] "const"(42720 call : "\n" t)
    (42727 'end of statement')
    unknown lines[42729](42736 call(42733 call . x c"split") newline)
    (42739 'end of statement')
    unknown ret[42741](42742 call : "" t)
    (42747 'end of statement')
    if(43013 call _cond_test(43009 call <= columns 0))
    {
      const margin[42750] "const"(42752 call computeMargin(42754 call lines(42756 call chpl_build_low_bounded_range low)))
      (42759 'end of statement')
      if(42924 call _cond_test(42917 call >(42920 call . margin c"size") 0))
      {
        {
          unknown _indexOfInterest[42885] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[42886] "expr temp" "temp"
          (42895 'move' _iterator[42886](42893 call _getIterator(42764 call lines(42766 call chpl_build_low_bounded_range low))))
          Defer
          {
            {
              (42910 call _freeIterator _iterator[42886])
            }
          }
          { scopeless type
            (42900 'move' _indexOfInterest[42885](42897 call iteratorIndex _iterator[42886]))
          }
          ForLoop[42887]
          {
            unknown line[42761] "index var" "insert auto destroy"
            (42905 'move' line[42761] _indexOfInterest[42885])
            {
              unknown offset[42770] 0
              (42773 'end of statement')
              if(42873 call _cond_test(42868 call !(42871 call isDedentWhitespaceOnly line)))
              {
                (42775 call = offset(42779 call . margin c"size"))
              }
              {
                {
                  unknown _indexOfInterest[42821] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[42822] "expr temp" "temp"
                  (42831 'move' _iterator[42822](42829 call _getIterator(42846 call chpl_direct_range_iter 0(42835 call chpl__nudgeHighBound(42837 call min(42839 call . margin c"size")(42843 call . line c"size"))))))
                  Defer
                  {
                    {
                      (42861 call _freeIterator _iterator[42822])
                    }
                  }
                  { scopeless type
                    (42851 'move' _indexOfInterest[42821](42848 call iteratorIndex _iterator[42822]))
                  }
                  ForLoop[42823]
                  {
                    unknown i[42783] "index var" "insert auto destroy"
                    (42856 'move' i[42783] _indexOfInterest[42821])
                    {
                      if(42812 call _cond_test(42804 call !=(42807 call line i)(42810 call margin i)))
                      {
                        break nil[32]
                      }
                      (42817 call += offset 1)
                    }
                    label _continueLabel[42826]
                    _indexOfInterest[42821]
                    _iterator[42822]
                  }
                  label _breakLabel[42827]
                }
              }
              (42877 call = line(42881 call line(42883 call chpl_build_low_bounded_range offset)))
            }
            label _continueLabel[42890]
            _indexOfInterest[42885]
            _iterator[42886]
          }
          label _breakLabel[42891]
        }
      }
    }
    {
      {
        unknown _indexOfInterest[42977] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[42978] "expr temp" "temp"
        (42987 'move' _iterator[42978](42985 call _getIterator(42932 call lines(42934 call chpl_build_low_bounded_range low))))
        Defer
        {
          {
            (43002 call _freeIterator _iterator[42978])
          }
        }
        { scopeless type
          (42992 'move' _indexOfInterest[42977](42989 call iteratorIndex _iterator[42978]))
        }
        ForLoop[42979]
        {
          unknown line[42929] "index var" "insert auto destroy"
          (42997 'move' line[42929] _indexOfInterest[42977])
          {
            const indent[42938] "const"(42939 call -(42942 call . line c"size")(42956 call .(42949 call(42946 call . line c"strip")(42950 call : " " t)(trailing = 0)) c"size"))
            (42960 'end of statement')
            const offset[42962] "const"(42964 call min indent columns)
            (42968 'end of statement')
            (42969 call = line(42973 call line(42975 call chpl_build_low_bounded_range offset)))
          }
          label _continueLabel[42982]
          _indexOfInterest[42977]
          _iterator[42978]
        }
        label _breakLabel[42983]
      }
    }
    (43017 call = ret(43029 call(43026 call .(43020 call : "\n" t) c"join") lines))
    (43031 return ret)
  }
  { scopeless type
    t
  }
  function computeMargin[43036](arg lines[43043] :
  (43041 call chpl__buildArrayRuntimeType nil[32] unknown t[43039])) : _unknown[42] "private"
  {
    unknown margin[43049](43050 call : "" t)
    (43055 'end of statement')
    {
      unknown _indexOfInterest[43302] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[43303] "expr temp" "temp"
      (43312 'move' _iterator[43303](43310 call _getIterator lines))
      Defer
      {
        {
          (43327 call _freeIterator _iterator[43303])
        }
      }
      { scopeless type
        (43317 'move' _indexOfInterest[43302](43314 call iteratorIndex _iterator[43303]))
      }
      ForLoop[43304]
      {
        unknown line[43056] "index var" "insert auto destroy"
        (43322 'move' line[43056] _indexOfInterest[43302])
        {
          if(43067 call _cond_test(43065 call isDedentWhitespaceOnly line))
          {
            continue nil[32]
          }
          unknown curMargin[43072](43073 call : "" t)
          (43078 'end of statement')
          const space[43080] "const"(43081 call : " " t)
          (43086 'end of statement')
          const tab[43088] "const"(43089 call : "\t" t)
          (43096 'end of statement')
          {
            unknown _indexOfInterest[43132] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[43133] "expr temp" "temp"
            (43142 'move' _iterator[43133](43140 call _getIterator(43103 call(43100 call . line c"items"))))
            Defer
            {
              {
                (43157 call _freeIterator _iterator[43133])
              }
            }
            { scopeless type
              (43147 'move' _indexOfInterest[43132](43144 call iteratorIndex _iterator[43133]))
            }
            ForLoop[43134]
            {
              unknown char[43097] "index var" "insert auto destroy"
              (43152 'move' char[43097] _indexOfInterest[43132])
              {
                if(43126 call _cond_test(43116 call &&(43118 call != char space)(43122 call != char tab)))
                {
                  break nil[32]
                }
                {
                  (43108 call += curMargin(43111 call : char t))
                }
              }
              label _continueLabel[43137]
              _indexOfInterest[43132]
              _iterator[43133]
            }
            label _breakLabel[43138]
          }
          if(43297 call _cond_test(43290 call == curMargin(43293 call : "" t)))
          {
            (43165 call = margin(43168 call : "" t))
            break nil[32]
          }
          {
            if(43285 call _cond_test(43278 call == margin(43281 call : "" t)))
            {
              (43176 call = margin curMargin)
            }
            {
              if(43273 call _cond_test(43271 call(43268 call . curMargin c"startsWith") margin))
              {
                continue nil[32]
              }
              {
                if(43263 call _cond_test(43261 call(43258 call . margin c"startsWith") curMargin))
                {
                  (43185 call = margin curMargin)
                }
                {
                  {
                    unknown _indexOfInterest[43223] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[43224] "expr temp" "temp"
                    (43233 'move' _iterator[43224](43231 call _getIterator(43193 call . margin c"indices")))
                    Defer
                    {
                      {
                        (43248 call _freeIterator _iterator[43224])
                      }
                    }
                    { scopeless type
                      (43238 'move' _indexOfInterest[43223](43235 call iteratorIndex _iterator[43224]))
                    }
                    ForLoop[43225]
                    {
                      unknown i[43190] "index var" "insert auto destroy"
                      (43243 'move' i[43190] _indexOfInterest[43223])
                      {
                        if(43219 call _cond_test(43211 call !=(43214 call margin i)(43217 call curMargin i)))
                        {
                          (43198 call = margin(43202 call margin(43206 call chpl_build_high_bounded_range(43204 call chpl__nudgeHighBound i))))
                          break nil[32]
                        }
                      }
                      label _continueLabel[43228]
                      _indexOfInterest[43223]
                      _iterator[43224]
                    }
                    label _breakLabel[43229]
                  }
                }
              }
            }
          }
        }
        label _continueLabel[43307]
        _indexOfInterest[43302]
        _iterator[43303]
      }
      label _breakLabel[43308]
    }
    (43334 return margin)
  }
  { scopeless type
    t
  }
  function isDedentWhitespaceOnly[43339](arg s[43343] :
  unknown t[43341]) : _unknown[42] "private"
  {
    const space[43349] "const"(43350 call : " " t)
    (43355 'end of statement')
    const tab[43357] "const"(43358 call : "\t" t)
    (43363 'end of statement')
    {
      unknown _indexOfInterest[43390] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[43391] "expr temp" "temp"
      (43400 'move' _iterator[43391](43398 call _getIterator(43370 call(43367 call . s c"items"))))
      Defer
      {
        {
          (43415 call _freeIterator _iterator[43391])
        }
      }
      { scopeless type
        (43405 'move' _indexOfInterest[43390](43402 call iteratorIndex _iterator[43391]))
      }
      ForLoop[43392]
      {
        unknown char[43364] "index var" "insert auto destroy"
        (43410 'move' char[43364] _indexOfInterest[43390])
        {
          if(43385 call _cond_test(43375 call &&(43377 call != char space)(43381 call != char tab)))
          {
            (43372 return 0)
          }
        }
        label _continueLabel[43395]
        _indexOfInterest[43390]
        _iterator[43391]
      }
      label _breakLabel[43396]
    }
    (43422 return 1)
  }
  { scopeless type
    bool
  }
  function resizeBufferForAppend[43427](ref arg lhs[43431] :
  unknown t[43429], arg n[43435] :
  int[10]) : _unknown[42]
  {
    (43441 call assertArgType t "resizeBufferForAppend")
    if(43461 call _cond_test(43452 call !(43455 call safeAdd(43457 call . lhs c"buffLen") n)))
    {
      (43447 call halt "Buffer overflow allocating string copy data")
    }
    const newLength[43467] "const"(43468 call +(43471 call . lhs c"buffLen") n)
    (43476 'end of statement')
    if(43609 call _cond_test(43602 call <=(43605 call . lhs c"buffSize") newLength))
    {
      const requestedSize[43479] "const"(43481 call max(43482 call + newLength 1)(43486 call :(43488 call *(43491 call . lhs c"buffLen") chpl_stringGrowthFactor) int[10]))
      (43497 'end of statement')
      if(43598 call _cond_test(43595 call . lhs c"isOwned"))
      {
        unknown tmp[43511] "temp"(43505 call bufferRealloc(43507 call . lhs c"buff") requestedSize)
        (43518 call _check_tuple_var_decl tmp[43511] 2)
        unknown newBuff[43500](43512 call tmp[43511] 0)
        unknown allocSize[43502](43515 call tmp[43511] 1)
        (43523 'end of statement')
        (43524 call =(43527 call . lhs c"buff") newBuff)
        (43531 call =(43534 call . lhs c"buffSize") allocSize)
      }
      {
        unknown tmp[43547] "temp"(43545 call bufferAlloc requestedSize)
        (43554 call _check_tuple_var_decl tmp[43547] 2)
        unknown newBuff[43540](43548 call tmp[43547] 0)
        unknown allocSize[43542](43551 call tmp[43547] 1)
        (43559 'end of statement')
        (43561 call bufferMemcpyLocal(dst = newBuff)(src =(43565 call . lhs c"buff"))(43570 call . lhs c"buffLen"))
        (43573 call =(43576 call . lhs c"buff") newBuff)
        (43580 call =(43583 call . lhs c"buffSize") allocSize)
        (43587 call =(43590 call . lhs c"isOwned") 1)
      }
    }
    (43613 return newLength)
  }
  { scopeless type
    int[10]
  }
  function doAppend[43618](ref arg lhs[43622] :
  unknown t[43620], const  ref arg rhs[43626] :
  t) : _unknown[42] "no return value for void"
  {
    (43631 call assertArgType t "doAppend")
    if(43645 call _cond_test(43638 call ==(43641 call . rhs c"buffLen") 0))
    {
      (43636 return _void[46])
    }
    {
      const tmp[43733] "const" "temp"
      (43734 'move' tmp[43733](43731 'deref'(43650 'chpl_on_locale_num'(43652 call chpl_buildLocaleID(43654 call . lhs c"locale_id") c_sublocid_any))))
      {
        const newLength[43660] "const"(43662 call resizeBufferForAppend lhs(43665 call . rhs c"buffLen"))
        (43669 'end of statement')
        (43671 call bufferMemcpy(dst =(43673 call . lhs c"buff"))(src_loc =(43678 call . rhs c"locale_id"))(43683 call . rhs c"buff")(43687 call . rhs c"buffLen")(dst_off =(43691 call . lhs c"buffLen")))
        (43695 call =(43698 call . lhs c"buffLen") newLength)
        (43702 call =(43708 call(43705 call . lhs c"buff") newLength) 0)
        if(43726 call _cond_test(43722 call == t string[244]))
        {
          (43711 call +=(43714 call . lhs c"cachedNumCodepoints")(43718 call . rhs c"cachedNumCodepoints"))
        }
      }
      (43737 'elided on block' 0 tmp[43733])
    }
  }
  function doAppendSomeBytes[43743](ref arg lhs[43747] :
  unknown t[43745], arg n[43751] :
  int[10], arg byteCArr[43760] :
  (43755 call c_array(43757 call uint[86] 8) ?[227]), arg nCodepoints[43764] :
  int[10]) : _unknown[42] "no return value for void"
  {
    (43769 call assertArgType t "doAppendSomeBytes")
    {
      const tmp[43851] "const" "temp"
      (43852 'move' tmp[43851](43849 'deref'(43774 'chpl_on_locale_num'(43776 call chpl_buildLocaleID(43778 call . lhs c"locale_id") c_sublocid_any))))
      {
        const newLength[43784] "const"(43786 call resizeBufferForAppend lhs n)
        (43790 'end of statement')
        unknown byteCArrCopy[43792] byteCArr
        (43795 'end of statement')
        (43797 call bufferMemcpyLocal(dst =(43799 call . lhs c"buff"))(src =(43804 call c_ptrTo(43806 call byteCArrCopy 0)))(len = n)(dst_off =(43812 call . lhs c"buffLen")))
        (43816 call =(43819 call . lhs c"buffLen") newLength)
        (43823 call =(43829 call(43826 call . lhs c"buff") newLength) 0)
        if(43844 call _cond_test(43840 call == t string[244]))
        {
          (43832 call +=(43835 call . lhs c"cachedNumCodepoints") nCodepoints)
        }
      }
      (43855 'elided on block' 0 tmp[43851])
    }
  }
  function resizeBuffer[43861](ref arg lhs[43865] :
  unknown t[43863], arg buffLen[43869] :
  int[10]) : _unknown[42] "no return value for void"
  {
    if(43886 call _cond_test(43875 call &&(43881 call(43878 call . lhs c"isEmpty"))(43882 call == buffLen 0)))
    {
      (43873 return _void[46])
    }
    if(44029 call _cond_test(44025 call != buffLen 0))
    {
      if(43981 call _cond_test(43963 call ||(43965 call !(43968 call . lhs c"isOwned"))(43971 call >(43973 call + buffLen 1)(43978 call . lhs c"buffSize"))))
      {
        if(43913 call _cond_test(43900 call &&(43903 call . lhs c"isOwned")(43906 call !(43912 call(43909 call . lhs c"isEmpty")))))
        {
          (43894 call bufferFree(43896 call . lhs c"buff"))
        }
        const tmp[43929] "const" "temp"(43924 call bufferAlloc(43925 call + buffLen 1))
        (43936 call _check_tuple_var_decl tmp[43929] 2)
        const buff[43919] "const"(43930 call tmp[43929] 0)
        const allocSize[43921] "const"(43933 call tmp[43929] 1)
        (43941 'end of statement')
        (43942 call =(43945 call . lhs c"buff") buff)
        (43949 call =(43952 call . lhs c"buffSize") allocSize)
        (43956 call =(43959 call . lhs c"isOwned") 1)
      }
    }
    {
      if(44006 call _cond_test(43993 call &&(43996 call . lhs c"isOwned")(43999 call !(44005 call(44002 call . lhs c"isEmpty")))))
      {
        (43987 call bufferFree(43989 call . lhs c"buff"))
      }
      (44011 call =(44014 call . lhs c"buffSize") 0)
      (44018 call =(44021 call . lhs c"buff") nil[32])
    }
  }
  function reinitWithNewBuffer[44035](ref arg lhs[44039] :
  unknown t[44037], arg buff[44043] :
  bufferType, arg buffLen[44047] :
  int[10], arg buffSize[44051] :
  int[10], arg numCodepoints[44056] :
  int[10] =
  0) : _unknown[42] "no return value for void"
  {
    if(44074 call _cond_test(44063 call &&(44069 call(44066 call . lhs c"isEmpty"))(44070 call == buff nil[32])))
    {
      (44061 return _void[46])
    }
    (44080 call resizeBuffer lhs buffLen)
    if(44105 call _cond_test(44101 call != buffLen 0))
    {
      (44085 call bufferMemmoveLocal(44087 call . lhs c"buff") buff buffLen)
      (44092 call =(44098 call(44095 call . lhs c"buff") buffLen) 0)
    }
    (44109 call =(44112 call . lhs c"buffLen") buffLen)
    if(44128 call _cond_test(44124 call == t string[244]))
    {
      (44116 call =(44119 call . lhs c"cachedNumCodepoints") numCodepoints)
    }
  }
  function reinitWithOwnedBuffer[44135](ref arg lhs[44139] :
  unknown t[44137], arg buff[44143] :
  bufferType, arg buffLen[44147] :
  int[10], arg buffSize[44151] :
  int[10], arg numCodepoints[44156] :
  int[10] =
  0) : _unknown[42] "no return value for void"
  {
    if(44174 call _cond_test(44163 call &&(44169 call(44166 call . lhs c"isEmpty"))(44170 call == buff nil[32])))
    {
      (44161 return _void[46])
    }
    if(44263 call _cond_test(44259 call != buffLen 0))
    {
      if(44200 call _cond_test(44187 call &&(44190 call . lhs c"isOwned")(44193 call !(44199 call(44196 call . lhs c"isEmpty")))))
      {
        (44181 call bufferFree(44183 call . lhs c"buff"))
      }
      (44205 call =(44208 call . lhs c"buff") buff)
      (44212 call =(44215 call . lhs c"buffSize") buffSize)
    }
    {
      if(44240 call _cond_test(44227 call &&(44230 call . lhs c"isOwned")(44233 call !(44239 call(44236 call . lhs c"isEmpty")))))
      {
        (44221 call bufferFree(44223 call . lhs c"buff"))
      }
      (44245 call =(44248 call . lhs c"buff") buff)
      (44252 call =(44255 call . lhs c"buffSize") 0)
    }
    (44267 call =(44270 call . lhs c"isOwned") 1)
    (44274 call =(44277 call . lhs c"buffLen") buffLen)
    if(44293 call _cond_test(44289 call == t string[244]))
    {
      (44281 call =(44284 call . lhs c"cachedNumCodepoints") numCodepoints)
    }
  }
  function doAssign[44300](ref arg lhs[44304] :
  unknown t[44302], arg rhs[44308] :
  t) : _unknown[42] "no return value for void"
  {
    (44313 call assertArgType t "doAssign")
    function helpMe[44318](ref arg lhs[44321] :
    t, arg rhs[44325] :
    t) : _unknown[42] "inline" "no return value for void"
    {
      if(44456 call _cond_test(44445 call ||(44448 call compiledForSingleLocale)(44449 call ==(44452 call . rhs c"locale_id") chpl_nodeID)))
      {
        if(44370 call _cond_test(44366 call == t string[244]))
        {
          (44332 call reinitWithNewBuffer lhs(44335 call . rhs c"buff")(44339 call . rhs c"buffLen")(44343 call . rhs c"buffSize")(44347 call . rhs c"numCodepoints"))
        }
        {
          (44352 call reinitWithNewBuffer lhs(44355 call . rhs c"buff")(44359 call . rhs c"buffLen")(44363 call . rhs c"buffSize"))
        }
      }
      {
        const len[44376] "const"(44378 call . rhs c"buffLen")
        (44382 'end of statement')
        unknown remote_buf[44384] nil[32] bufferType
        (44388 'end of statement')
        if(44408 call _cond_test(44404 call != len 0))
        {
          (44389 call = remote_buf(44393 call bufferCopyRemote(44395 call . rhs c"locale_id")(44399 call . rhs c"buff") len))
        }
        if(44441 call _cond_test(44437 call == t string[244]))
        {
          (44415 call reinitWithOwnedBuffer lhs remote_buf len(44419 call + len 1)(44424 call . rhs c"cachedNumCodepoints"))
        }
        {
          (44429 call reinitWithOwnedBuffer lhs remote_buf len(44433 call + len 1))
        }
      }
    }
    if(44502 call _cond_test(44491 call ||(44494 call compiledForSingleLocale)(44495 call ==(44498 call . lhs c"locale_id") chpl_nodeID)))
    {
      (44464 call helpMe lhs rhs)
    }
    {
      {
        const tmp[44483] "const" "temp"
        (44484 'move' tmp[44483](44481 'deref'(44468 'chpl_on_locale_num'(44470 call chpl_buildLocaleID(44472 call . lhs c"locale_id") c_sublocid_any))))
        {
          (44478 call helpMe lhs rhs)
        }
        (44487 'elided on block' 0 tmp[44483])
      }
    }
  }
  function doMultiply[44508](const  ref arg x[44512] :
  unknown t[44510], arg n[44516] :
  integral) : _unknown[42]
  {
    (44521 call assertArgType t "doMultiply")
    const sLen[44527] "const"(44529 call . x c"numBytes")
    (44533 'end of statement')
    if(44602 call _cond_test(44600 call isBytesType t))
    {
      if(44544 call _cond_test(44540 call <= n 0))
      {
        (44535 return b"")
      }
      if(44556 call _cond_test(44552 call == sLen 0))
      {
        (44549 return b"")
      }
    }
    {
      if(44595 call _cond_test(44593 call isStringType t))
      {
        if(44569 call _cond_test(44565 call <= n 0))
        {
          (44562 return "")
        }
        if(44581 call _cond_test(44577 call == sLen 0))
        {
          (44574 return "")
        }
      }
      {
        (44588 call compilerError "Unexpected type")
      }
    }
    if(44617 call _cond_test(44611 call !(44614 call safeMul sLen n)))
    {
      (44608 call halt "Buffer overflow allocating string copy data")
    }
    const buffLen[44623] "const"(44624 call * sLen n)
    (44629 'end of statement')
    unknown tmp[44641] "temp"(44636 call bufferAlloc(44637 call + buffLen 1))
    (44648 call _check_tuple_var_decl tmp[44641] 2)
    unknown buff[44631](44642 call tmp[44641] 0)
    unknown allocSize[44633](44645 call tmp[44641] 1)
    (44653 'end of statement')
    (44655 call bufferMemcpy(dst = buff)(src_loc =(44659 call . x c"locale_id"))(src =(44664 call . x c"buff"))(len =(44669 call . x c"buffLen")))
    unknown offset[44674] sLen
    (44677 'end of statement')
    {
      unknown _indexOfInterest[44705] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[44706] "expr temp" "temp"
      (44715 'move' _iterator[44706](44713 call _getIterator(44722 call chpl_direct_range_iter 1(44719 call - n 1))))
      Defer
      {
        {
          (44737 call _freeIterator _iterator[44706])
        }
      }
      { scopeless type
        (44727 'move' _indexOfInterest[44705](44724 call iteratorIndex _iterator[44706]))
      }
      ForLoop[44707]
      {
        unknown i[44678] "index var" "insert auto destroy"
        (44732 'move' i[44678] _indexOfInterest[44705])
        {
          (44689 call bufferMemcpyLocal(dst = buff)(src = buff)(len =(44695 call . x c"buffLen"))(dst_off = offset))
          (44701 call += offset sLen)
        }
        label _continueLabel[44710]
        _indexOfInterest[44705]
        _iterator[44706]
      }
      label _breakLabel[44711]
    }
    (44744 call =(44747 call buff buffLen) 0)
    if(44778 call _cond_test(44774 call == t string[244]))
    {
      (44751 return(44753 call chpl_createStringWithOwnedBufferNV buff buffLen allocSize(44757 call *(44760 call . x c"cachedNumCodepoints") n)))
    }
    {
      (44765 return(44770 call(44767 call . bytes[232] c"createAdoptingBuffer") buff buffLen allocSize))
    }
  }
  function doConcat[44784](arg s0[44788] :
  unknown t[44786], arg s1[44792] :
  t) : _unknown[42]
  {
    (44798 call assertArgType t "doConcat")
    const s0len[44804] "const"(44806 call . s0 c"buffLen")
    (44810 'end of statement')
    if(44821 call _cond_test(44817 call == s0len 0))
    {
      (44811 return(44812 call : s1 t))
    }
    const s1len[44827] "const"(44829 call . s1 c"buffLen")
    (44833 'end of statement')
    if(44841 call _cond_test(44837 call == s1len 0))
    {
      (44834 return s0)
    }
    const buffLen[44847] "const"(44848 call + s0len s1len)
    (44853 'end of statement')
    unknown tmp[44865] "temp"(44860 call bufferAlloc(44861 call + buffLen 1))
    (44872 call _check_tuple_var_decl tmp[44865] 2)
    unknown buff[44855](44866 call tmp[44865] 0)
    unknown buffSize[44857](44869 call tmp[44865] 1)
    (44877 'end of statement')
    (44879 call bufferMemcpy(dst = buff)(src_loc =(44883 call . s0 c"locale_id"))(src =(44888 call . s0 c"buff"))(len = s0len))
    (44895 call bufferMemcpy(dst = buff)(src_loc =(44899 call . s1 c"locale_id"))(src =(44904 call . s1 c"buff"))(len = s1len)(dst_off = s0len))
    (44912 call =(44915 call buff buffLen) 0)
    unknown ret[44919] t
    (44922 'end of statement')
    if(44944 call _cond_test(44940 call == t string[244]))
    {
      (44924 call =(44927 call . ret c"cachedNumCodepoints")(44930 call +(44933 call . s0 c"cachedNumCodepoints")(44937 call . s1 c"cachedNumCodepoints")))
    }
    (44949 call initWithOwnedBuffer ret buff buffLen buffSize)
    (44954 return ret)
  }
  { scopeless type
    t
  }
  function doStripNoEnc[44959](const  ref arg x[44963] :
  unknown t[44961], arg chars[44967] :
  t, arg leading[44971] :
  bool, arg trailing[44975] :
  bool) : _unknown[42]
  {
    if(44996 call _cond_test(44995 call(44992 call . x c"isEmpty")))
    {
      (44980 return(44987 IfExpr (44981 call == t string[244]) then
      { scopeless
        ""
      } else
      { scopeless
        b""
      } ))
    }
    if(45009 call _cond_test(45008 call(45005 call . chars c"isEmpty")))
    {
      (45001 return x)
    }
    const localX[45015] "const"(45021 call(45018 call . x c"localize")) t
    (45023 'end of statement')
    const localChars[45025] "const"(45031 call(45028 call . chars c"localize")) t
    (45033 'end of statement')
    unknown start[45035] 0 int[10]
    (45039 'end of statement')
    unknown end[45041](45043 call -(45046 call . localX c"buffLen") 1) int[10]
    (45051 'end of statement')
    if(45192 call _cond_test leading)
    {
      {
        unknown _indexOfInterest[45134] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[45135] "expr temp" "temp"
        (45156 'move' _iterator[45135](45070 call _build_tuple(45147 call _getIterator(45144 call . x c"indices"))(45154 call _getIterator(45153 call(45150 call . localX c"chpl_bytes")))))
        Defer
        {
          {
            (45184 call _freeIterator _iterator[45135])
          }
        }
        { scopeless type
          (45161 'move' _indexOfInterest[45134](45158 call iteratorIndex _iterator[45135]))
        }
        ForLoop[45136]
        {
          (45166 call _check_tuple_var_decl _indexOfInterest[45134] 2)
          unknown i[45054] "index var" "insert auto destroy"
          (45173 'move' i[45054](45170 call _indexOfInterest[45134] 0))
          unknown xChar[45056] "index var" "insert auto destroy"
          (45179 'move' xChar[45056](45176 call _indexOfInterest[45134] 1))
          {
            {
              unknown _indexOfInterest[45099] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[45100] "expr temp" "temp"
              (45109 'move' _iterator[45100](45107 call _getIterator(45078 call(45075 call . localChars c"chpl_bytes"))))
              Defer
              {
                {
                  (45124 call _freeIterator _iterator[45100])
                }
              }
              { scopeless type
                (45114 'move' _indexOfInterest[45099](45111 call iteratorIndex _iterator[45100]))
              }
              ForLoop[45101]
              {
                unknown removeChar[45072] "index var" "insert auto destroy"
                (45119 'move' removeChar[45072] _indexOfInterest[45099])
                {
                  if(45095 call _cond_test(45091 call == xChar removeChar))
                  {
                    (45081 call = start(45084 call + i 1))
                    continue outer
                  }
                }
                label _continueLabel[45104]
                _indexOfInterest[45099]
                _iterator[45100]
              }
              label _breakLabel[45105]
            }
            break nil[32]
          }
          label _continueLabel[45139]
          _indexOfInterest[45134]
          _iterator[45135]
        }
        label _breakLabel[45140]
      }
    }
    if(45336 call _cond_test trailing)
    {
      (45197 call = end(45200 call - 1))
      {
        unknown _indexOfInterest[45278] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[45279] "expr temp" "temp"
        (45300 'move' _iterator[45279](45220 call _build_tuple(45291 call _getIterator(45288 call . x c"indices"))(45298 call _getIterator(45297 call(45294 call . localX c"chpl_bytes")))))
        Defer
        {
          {
            (45328 call _freeIterator _iterator[45279])
          }
        }
        { scopeless type
          (45305 'move' _indexOfInterest[45278](45302 call iteratorIndex _iterator[45279]))
        }
        ForLoop[45280]
        {
          (45310 call _check_tuple_var_decl _indexOfInterest[45278] 2)
          unknown i[45204] "index var" "insert auto destroy"
          (45317 'move' i[45204](45314 call _indexOfInterest[45278] 0))
          unknown xChar[45206] "index var" "insert auto destroy"
          (45323 'move' xChar[45206](45320 call _indexOfInterest[45278] 1))
          {
            {
              unknown _indexOfInterest[45242] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[45243] "expr temp" "temp"
              (45252 'move' _iterator[45243](45250 call _getIterator(45228 call(45225 call . localChars c"chpl_bytes"))))
              Defer
              {
                {
                  (45267 call _freeIterator _iterator[45243])
                }
              }
              { scopeless type
                (45257 'move' _indexOfInterest[45242](45254 call iteratorIndex _iterator[45243]))
              }
              ForLoop[45244]
              {
                unknown removeChar[45222] "index var" "insert auto destroy"
                (45262 'move' removeChar[45222] _indexOfInterest[45242])
                {
                  if(45238 call _cond_test(45234 call == xChar removeChar))
                  {
                    continue outer
                  }
                }
                label _continueLabel[45247]
                _indexOfInterest[45242]
                _iterator[45243]
              }
              label _breakLabel[45248]
            }
            (45274 call = end i)
          }
          label _continueLabel[45283]
          _indexOfInterest[45278]
          _iterator[45279]
        }
        label _breakLabel[45284]
      }
    }
    (45340 return(45342 call localX(45345 call chpl_build_bounded_range start end)))
  }
  { scopeless type
    t
  }
  function doEq[45350](arg a[45354] :
  unknown t1[45352], arg b[45359] :
  unknown t2[45357]) : _unknown[42] "inline"
  {
    (45364 call assertArgType t1 "doEq")
    (45370 call assertArgType t2 "doEq")
    (45373 return(45374 call ==(45377 call _strcmp(45379 call . a c"buff")(45383 call . a c"buffLen")(45387 call . a c"locale_id")(45391 call . b c"buff")(45395 call . b c"buffLen")(45399 call . b c"locale_id")) 0))
  }
  function doLessThan[45405](arg a[45409] :
  unknown t1[45407], arg b[45414] :
  unknown t2[45412]) : _unknown[42] "inline"
  {
    (45419 call assertArgType t1 "doEq")
    (45423 call assertArgType t2 "doEq")
    (45426 return(45427 call <(45430 call _strcmp(45432 call . a c"buff")(45436 call . a c"buffLen")(45440 call . a c"locale_id")(45444 call . b c"buff")(45448 call . b c"buffLen")(45452 call . b c"locale_id")) 0))
  }
  function doGreaterThan[45458](arg a[45462] :
  unknown t1[45460], arg b[45467] :
  unknown t2[45465]) : _unknown[42] "inline"
  {
    (45472 call assertArgType t1 "doEq")
    (45476 call assertArgType t2 "doEq")
    (45479 return(45480 call >(45483 call _strcmp(45485 call . a c"buff")(45489 call . a c"buffLen")(45493 call . a c"locale_id")(45497 call . b c"buff")(45501 call . b c"buffLen")(45505 call . b c"locale_id")) 0))
  }
  function doLessThanOrEq[45511](arg a[45515] :
  unknown t1[45513], arg b[45520] :
  unknown t2[45518]) : _unknown[42] "inline"
  {
    (45525 call assertArgType t1 "doEq")
    (45529 call assertArgType t2 "doEq")
    (45532 return(45533 call <=(45536 call _strcmp(45538 call . a c"buff")(45542 call . a c"buffLen")(45546 call . a c"locale_id")(45550 call . b c"buff")(45554 call . b c"buffLen")(45558 call . b c"locale_id")) 0))
  }
  function doGreaterThanOrEq[45564](arg a[45568] :
  unknown t1[45566], arg b[45573] :
  unknown t2[45571]) : _unknown[42] "inline"
  {
    (45578 call assertArgType t1 "doEq")
    (45582 call assertArgType t2 "doEq")
    (45585 return(45586 call >=(45589 call _strcmp(45591 call . a c"buff")(45595 call . a c"buffLen")(45599 call . a c"locale_id")(45603 call . b c"buff")(45607 call . b c"buffLen")(45611 call . b c"locale_id")) 0))
  }
  function getHash[45617](arg x[45621] :
  unknown t[45619]) : _unknown[42] "inline"
  {
    (45626 call assertArgType t "getHash")
    unknown hash[45632](45634 call int[10] 64)
    (45637 'end of statement')
    {
      const tmp[45737] "const" "temp"
      (45738 'move' tmp[45737](45735 'deref'(45638 'chpl_on_locale_num'(45640 call chpl_buildLocaleID(45642 call . x c"locale_id") c_sublocid_any))))
      {
        unknown locHash[45648] 5381(45650 call int[10] 64)
        (45656 'end of statement')
        {
          unknown _indexOfInterest[45689] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[45690] "expr temp" "temp"
          (45699 'move' _iterator[45690](45697 call _getIterator(45709 call chpl_direct_counted_range_iter 0(45705 call . x c"numBytes"))))
          Defer
          {
            {
              (45724 call _freeIterator _iterator[45690])
            }
          }
          { scopeless type
            (45714 'move' _indexOfInterest[45689](45711 call iteratorIndex _iterator[45690]))
          }
          ForLoop[45691]
          {
            unknown c[45657] "index var" "insert auto destroy"
            (45719 'move' c[45657] _indexOfInterest[45689])
            {
              (45669 call = locHash(45672 call ^(45674 call +(45676 call << locHash 5) locHash)(45687 call(45684 call . x c"buff") c)))
            }
            label _continueLabel[45694]
            _indexOfInterest[45689]
            _iterator[45690]
          }
          label _breakLabel[45695]
        }
        (45731 call = hash locHash)
      }
      (45741 'elided on block' 0 tmp[45737])
    }
    (45745 return(45746 call : hash uint[86]))
  }
  function incrementCodepoints[45752](ref arg lhs[45755] :
  string[244], arg rhs[45759] :
  string[244]) : _unknown[42] "private" "no return value for void"
  {
    if(45810 call _cond_test(45790 call ||(45792 call ==(45795 call . lhs c"cachedNumCodepoints")(45798 call - 1))(45801 call ==(45804 call . rhs c"cachedNumCodepoints")(45807 call - 1))))
    {
      (45764 call =(45767 call . lhs c"cachedNumCodepoints")(45770 call - 1))
    }
    {
      (45774 call =(45777 call . lhs c"cachedNumCodepoints")(45780 call +(45783 call . lhs c"cachedNumCodepoints")(45787 call . rhs c"cachedNumCodepoints")))
    }
  }
  function countNumCodepoints[45816](arg x[45819] :
  string[244]) : _unknown[42]
  {
    unknown ret[45824] int[10]
    (45827 'end of statement')
    {
      const tmp[45852] "const" "temp"
      (45853 'move' tmp[45852](45850 'deref'(45828 'chpl_on_locale_num'(45830 call chpl_buildLocaleID(45832 call . x c"locale_id") c_sublocid_any))))
      {
        (45837 call = ret(45841 call countNumCodepoints(45843 call . x c"buff")(45847 call . x c"buffLen")))
      }
      (45856 'elided on block' 0 tmp[45852])
    }
    (45860 return ret)
  }
  function countNumCodepoints[45864](arg buff[45867] :
  bufferType, arg buffLen[45871] :
  int[10]) : _unknown[42]
  {
    unknown n[45876] 0
    (45879 'end of statement')
    unknown i[45881] 0
    (45884 'end of statement')
    {
      unknown tmp[45961] "temp"
      (45985 'move' tmp[45961](45980 call _cond_test(45982 call < i buffLen)))
      WhileDo[45966]
      {
        {
          (45890 call += i 1)
          {
            unknown tmp[45912] "temp"
            (45954 'move' tmp[45912](45940 call _cond_test(45942 call &&(45944 call < i buffLen)(45948 call !(45950 call isInitialByte(45952 call buff i))))))
            WhileDo[45917]
            {
              (45907 call += i 1)
              label _continueLabel[45915]
              (45935 'move' tmp[45912](45921 call _cond_test(45923 call &&(45925 call < i buffLen)(45929 call !(45931 call isInitialByte(45933 call buff i))))))
              tmp[45912]
            }
            label _breakLabel[45916]
          }
          (45957 call += n 1)
        }
        label _continueLabel[45964]
        (45975 'move' tmp[45961](45970 call _cond_test(45972 call < i buffLen)))
        tmp[45961]
      }
      label _breakLabel[45965]
    }
    (45988 return n)
  }
  function isInitialByte[45992](arg b[45997] :
  (45995 call uint[86] 8)) : _unknown[42] "inline"
  {
    (46002 return(46003 call !=(46005 call & b 192) 128))
  }
  { scopeless type
    bool
  }
  function _findStartOfNextCodepointFromByte[46015](arg x[46018] :
  string[244], arg i[46022] :
  byteIndex) : _unknown[42]
  {
    unknown ret[46027](46028 call : i int[10])
    (46033 'end of statement')
    if(46120 call _cond_test(46116 call > ret 0))
    {
      {
        unknown tmp[46059] "temp"
        (46113 'move' tmp[46059](46093 call _cond_test(46095 call &&(46097 call < ret(46100 call . x c"buffLen"))(46104 call !(46106 call isInitialByte(46111 call(46108 call . x c"buff") ret))))))
        WhileDo[46064]
        {
          {
            (46055 call += ret 1)
          }
          label _continueLabel[46062]
          (46088 'move' tmp[46059](46068 call _cond_test(46070 call &&(46072 call < ret(46075 call . x c"buffLen"))(46079 call !(46081 call isInitialByte(46086 call(46083 call . x c"buff") ret))))))
          tmp[46059]
        }
        label _breakLabel[46063]
      }
    }
    (46124 return ret)
  }
  function _cleanupForNumericCast[46128](ref arg x[46132] :
  unknown t[46130]) : _unknown[42] "no return value for void"
  {
    (46137 call assertArgType t "_cleanupForNumericCast")
    unknown underscore[46143] "param"(46150 call(46147 call . "_" c"toByte"))
    (46152 'end of statement')
    unknown hasUnderscores[46154] 0
    (46157 'end of statement')
    {
      unknown _indexOfInterest[46191] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[46192] "expr temp" "temp"
      (46201 'move' _iterator[46192](46199 call _getIterator(46210 call chpl_direct_range_iter 1(46205 call chpl__nudgeHighBound(46207 call . x c"numBytes")))))
      Defer
      {
        {
          (46225 call _freeIterator _iterator[46192])
        }
      }
      { scopeless type
        (46215 'move' _indexOfInterest[46191](46212 call iteratorIndex _iterator[46192]))
      }
      ForLoop[46193]
      {
        unknown bIdx[46158] "index var" "insert auto destroy"
        (46220 'move' bIdx[46158] _indexOfInterest[46191])
        {
          if(46187 call _cond_test(46178 call ==(46184 call(46181 call . x c"byte") bIdx) underscore))
          {
            (46171 call = hasUnderscores 1)
            break nil[32]
          }
        }
        label _continueLabel[46196]
        _indexOfInterest[46191]
        _iterator[46192]
      }
      label _breakLabel[46197]
    }
    if(46332 call _cond_test hasUnderscores)
    {
      (46233 call = x(46240 call(46237 call . x c"strip")))
      if(46327 call _cond_test(46325 call _isSingleWord x))
      {
        unknown len[46243](46245 call . x c"size")
        (46249 'end of statement')
        if(46320 call _cond_test(46316 call >= len 2))
        {
          if(46312 call _cond_test(46297 call &&(46299 call > len 2)(46303 call ==(46309 call(46306 call . x c"byte") 0) underscore)))
          {
            (46252 call = x(46255 call +(46261 call(46258 call . x c"item") 0)(46271 call(46268 call .(46264 call x(46266 call chpl_build_low_bounded_range 1)) c"replace")(46272 call : "_" t)(46276 call : "" t))))
          }
          {
            (46281 call = x(46288 call(46285 call . x c"replace")(46289 call : "_" t)(46293 call : "" t)))
          }
        }
      }
    }
    if(46356 call _cond_test(46349 call >(46352 call . x c"buffLen") 0))
    {
      (46336 call =(46342 call(46339 call . x c"buff")(46344 call . x c"buffLen")) 0)
    }
  }
  function _isSingleWord[46363](const  ref arg x[46367] :
  unknown t[46365]) : _unknown[42] "private"
  {
    (46372 call assertArgType t "_isSingleWord")
    {
      unknown _indexOfInterest[46396] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[46397] "expr temp" "temp"
      (46406 'move' _iterator[46397](46404 call _getIterator(46383 call(46380 call . x c"chpl_bytes"))))
      Defer
      {
        {
          (46421 call _freeIterator _iterator[46397])
        }
      }
      { scopeless type
        (46411 'move' _indexOfInterest[46396](46408 call iteratorIndex _iterator[46397]))
      }
      ForLoop[46398]
      {
        unknown b[46377] "index var" "insert auto destroy"
        (46416 'move' b[46377] _indexOfInterest[46396])
        {
          if(46391 call _cond_test(46389 call byte_isWhitespace b))
          {
            (46385 return 0)
          }
        }
        label _continueLabel[46401]
        _indexOfInterest[46396]
        _iterator[46397]
      }
      label _breakLabel[46402]
    }
    (46428 return 1)
  }
  (46436 'require' "ctype.h")
  function byte_isAscii[46438](arg c[46441] :
  byteType) : _unknown[42] "inline"
  {
    function isascii[46446](arg c[46449] :
    c_int) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (46456 return(46457 call !=(46460 call isascii(46461 call : c c_int)) 0))
  }
  { scopeless type
    bool
  }
  function byte_isWhitespace[46469](arg c[46472] :
  byteType) : _unknown[42] "inline"
  {
    function isspace[46477](arg c[46480] :
    c_int) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (46487 return(46488 call !=(46491 call isspace(46492 call : c c_int)) 0))
  }
  { scopeless type
    bool
  }
  function byte_isPrintable[46500](arg c[46503] :
  byteType) : _unknown[42] "inline"
  {
    function isprint[46508](arg c[46511] :
    c_int) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (46518 return(46519 call !=(46522 call isprint(46523 call : c c_int)) 0))
  }
  { scopeless type
    bool
  }
  function byte_isAlpha[46531](arg c[46534] :
  byteType) : _unknown[42] "inline"
  {
    function isalpha[46539](arg c[46542] :
    c_int) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (46549 return(46550 call !=(46553 call isalpha(46554 call : c c_int)) 0))
  }
  { scopeless type
    bool
  }
  function byte_isUpper[46562](arg c[46565] :
  byteType) : _unknown[42] "inline"
  {
    function isupper[46570](arg c[46573] :
    c_int) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (46580 return(46581 call !=(46584 call isupper(46585 call : c c_int)) 0))
  }
  { scopeless type
    bool
  }
  function byte_isLower[46593](arg c[46596] :
  byteType) : _unknown[42] "inline"
  {
    function islower[46601](arg c[46604] :
    c_int) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (46611 return(46612 call !=(46615 call islower(46616 call : c c_int)) 0))
  }
  { scopeless type
    bool
  }
  function byte_isDigit[46624](arg c[46627] :
  byteType) : _unknown[42] "inline"
  {
    function isdigit[46632](arg c[46635] :
    c_int) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (46642 return(46643 call !=(46646 call isdigit(46647 call : c c_int)) 0))
  }
  { scopeless type
    bool
  }
  function byte_isAlnum[46655](arg c[46658] :
  byteType) : _unknown[42] "inline"
  {
    function isalnum[46663](arg c[46666] :
    c_int) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (46673 return(46674 call !=(46677 call isalnum(46678 call : c c_int)) 0))
  }
  { scopeless type
    bool
  }
  function byte_toUpper[46686](arg c[46689] :
  byteType) : _unknown[42] "inline"
  {
    function toupper[46694](arg c[46697] :
    c_int) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (46704 return(46705 call :(46708 call toupper(46709 call : c c_int)) byteType))
  }
  { scopeless type
    byteType
  }
  function byte_toLower[46717](arg c[46720] :
  byteType) : _unknown[42] "inline"
  {
    function tolower[46725](arg c[46728] :
    c_int) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (46735 return(46736 call :(46739 call tolower(46740 call : c c_int)) byteType))
  }
  { scopeless type
    byteType
  }
}