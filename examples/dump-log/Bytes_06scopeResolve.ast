AST dump for Bytes after pass scopeResolve.
Module use list: ChapelStandard ByteBufferHelpers BytesStringCommon CTypes ChplConfig BytesCasts POSIX 

{
  function bytes[232].createBorrowingBuffer[32952](arg _mt[32962]:_MT[201], arg this[32955]:bytes[232] :
  bytes[232], arg x[32959] :
  bytes[232]) : _unknown[42] "inline" "method" "@unstable"
  {
    unknown ret[32967] bytes[232]
    (32970 'end of statement')
    (32972 call initWithBorrowedBuffer ret[32967] x[32959])
    (32975 return ret[32967])
  }
  { scopeless type
    bytes[232]
  }
  function bytes[232].createBorrowingBuffer[32980](arg _mt[32997]:_MT[201], arg this[32983]:bytes[232] :
  bytes[232], arg x[32987] :
  chpl_c_string[16], arg length[32994] =
  (32991 call . x[32987] c"size")) : _unknown[42] "deprecated" "inline" "method"
  {
    (33001 return(33006 call(33003 call . bytes[232] c"createBorrowingBuffer")(33007 call : x[32987] bufferType[30212])(length = length[32994])(size =(33013 call + length[32994] 1))))
  }
  { scopeless type
    bytes[232]
  }
  function bytes[232].createBorrowingBuffer[33021](arg _mt[33040]:_MT[201], arg this[33024]:bytes[232] :
  bytes[232], arg x[33031] :
  (33028 call c_ptr[46891](?) unknown t[33029]), arg length[33037] =
  (33035 call strLen x[33031])) : _unknown[42] "inline" "method" "@unstable"
  {
    (33044 return(33049 call(33046 call . bytes[232] c"createBorrowingBuffer")(33050 call : x[33031] bufferType[30212])(length = length[33037])(size =(33056 call + length[33037] 1))))
  }
  { scopeless type
    bytes[232]
  }
  function bytes[232].createBorrowingBuffer[33064](arg _mt[33083]:_MT[201], arg this[33067]:bytes[232] :
  bytes[232], arg x[33074] :
  (33071 call c_ptrConst[46990](?) unknown t[33072]), arg length[33080] =
  (33078 call strLen x[33074])) : _unknown[42] "inline" "method" "@unstable"
  {
    (33087 return(33092 call(33089 call . bytes[232] c"createBorrowingBuffer")(33093 call : x[33074] bufferType[30212])(length = length[33080])(size =(33099 call + length[33080] 1))))
  }
  { scopeless type
    bytes[232]
  }
  function chpl_createBytesWithLiteral[33107](arg buffer[33110] :
  chpl_c_string[16], arg offset[33114] :
  int(64)[10], arg x[33118] :
  chpl_c_string[16], arg length[33122] :
  int(64)[10]) : _unknown[42]
  {
    unknown buf[33127](33128 call :(33130 call : buffer[33110](33134 call c_ptr[46891](?) void[4]))(33137 call c_ptr[46891](?)(33139 call uint(64)[86] 8)))
    (33142 'end of statement')
    (33143 call = buf[33127](33146 call + buf[33127] offset[33114]))
    (33160 call memcpy(33161 call : buf[33127](33165 call c_ptr[46891](?) void[4]))(33167 call : x[33118](33171 call c_ptr[46891](?) void[4]))(33177 call(33174 call . length[33122] c"safeCast") c_size_t[614]))
    (33179 call =(33182 call buf[33127] length[33122]) 0)
    (33185 return(33190 call(33187 call . bytes[232] c"createBorrowingBuffer") buf[33127] length[33122]))
    (396019 'used modules list'(33158 'import' POSIX[12822].{memcpy}))
  }
  function bytes[232].createBorrowingBuffer[33195](arg _mt[33216]:_MT[201], arg this[33198]:bytes[232] :
  bytes[232], arg x[33205] :
  (33202 call c_ptr[46891](?) unknown t[33203]), arg length[33209] :
  int(64)[10], arg size[33213] :
  int(64)[10]) : _unknown[42] "inline" "method" "@unstable"
  {
    if(33244 call _cond_test(33230 call &&(33232 call != t[33203](33236 call uint(64)[86] 8))(33238 call != t[33203](33242 call int(64)[10] 8))))
    {
      (33222 call compilerError "Cannot create a bytes with a buffer of "(33226 call : t[33203] string[244]))
    }
    unknown ret[33249] bytes[232]
    (33252 'end of statement')
    (33254 call initWithBorrowedBuffer ret[33249](33256 call : x[33205] bufferType[30212]) length[33209] size[33213])
    (33262 return ret[33249])
  }
  { scopeless type
    bytes[232]
  }
  function bytes[232].createAdoptingBuffer[33267](arg _mt[33286]:_MT[201], arg this[33270]:bytes[232] :
  bytes[232], arg x[33277] :
  (33274 call c_ptr[46891](?) unknown t[33275]), arg length[33283] =
  (33281 call strLen x[33277])) : _unknown[42] "inline" "method"
  {
    (33290 return(33295 call(33292 call . bytes[232] c"createAdoptingBuffer")(33296 call : x[33277] bufferType[30212])(length = length[33283])(size =(33302 call + length[33283] 1))))
  }
  { scopeless type
    bytes[232]
  }
  function bytes[232].createAdoptingBuffer[33310](arg _mt[33327]:_MT[201], arg this[33313]:bytes[232] :
  bytes[232], arg x[33317] :
  chpl_c_string[16], arg length[33324] =
  (33321 call . x[33317] c"size")) : _unknown[42] "deprecated" "inline" "method"
  {
    (33331 return(33336 call(33333 call . bytes[232] c"createAdoptingBuffer")(33337 call : x[33317] bufferType[30212])(length = length[33324])(size =(33343 call + length[33324] 1))))
  }
  { scopeless type
    bytes[232]
  }
  function bytes[232].createAdoptingBuffer[33351](arg _mt[33370]:_MT[201], arg this[33354]:bytes[232] :
  bytes[232], arg x[33361] :
  (33358 call c_ptrConst[46990](?) unknown t[33359]), arg length[33367] =
  (33365 call strLen x[33361])) : _unknown[42] "inline" "method"
  {
    (33374 return(33379 call(33376 call . bytes[232] c"createAdoptingBuffer")(33380 call : x[33361] bufferType[30212])(length = length[33367])(size =(33386 call + length[33367] 1))))
  }
  { scopeless type
    bytes[232]
  }
  function bytes[232].createAdoptingBuffer[33394](arg _mt[33415]:_MT[201], arg this[33397]:bytes[232] :
  bytes[232], arg x[33404] :
  (33401 call c_ptr[46891](?) unknown t[33402]), arg length[33408] :
  int(64)[10], arg size[33412] :
  int(64)[10]) : _unknown[42] "inline" "method"
  {
    if(33441 call _cond_test(33427 call &&(33429 call != t[33402](33433 call uint(64)[86] 8))(33435 call != t[33402](33439 call int(64)[10] 8))))
    {
      (33421 call compilerError "Cannot create a bytes with a buffer of "(33423 call : t[33402] string[244]))
    }
    unknown ret[33446] bytes[232]
    (33449 'end of statement')
    (33451 call initWithOwnedBuffer ret[33446] x[33404] length[33408] size[33412])
    (33456 return ret[33446])
  }
  { scopeless type
    bytes[232]
  }
  function bytes[232].createCopyingBuffer[33461](arg _mt[33480]:_MT[201], arg this[33464]:bytes[232] :
  bytes[232], arg x[33471] :
  (33468 call c_ptrConst[46990](?) unknown t[33469]), arg length[33477] =
  (33475 call strLen x[33471])) : _unknown[42] "inline" "method"
  {
    (33484 return(33489 call(33486 call . bytes[232] c"createCopyingBuffer")(33490 call : x[33471] bufferType[30212])(length = length[33477])(size =(33496 call + length[33477] 1))))
  }
  { scopeless type
    bytes[232]
  }
  function bytes[232].createCopyingBuffer[33504](arg _mt[33521]:_MT[201], arg this[33507]:bytes[232] :
  bytes[232], arg x[33511] :
  chpl_c_string[16], arg length[33518] =
  (33515 call . x[33511] c"size")) : _unknown[42] "deprecated" "inline" "method"
  {
    (33525 return(33530 call(33527 call . bytes[232] c"createCopyingBuffer")(33531 call : x[33511] bufferType[30212])(length = length[33518])(size =(33537 call + length[33518] 1))))
  }
  { scopeless type
    bytes[232]
  }
  function bytes[232].createCopyingBuffer[33545](arg _mt[33571]:_MT[201], arg this[33548]:bytes[232] :
  bytes[232], arg x[33555] :
  (33552 call c_ptr[46891](?) unknown t[33553]), arg length[33561] =
  (33559 call strLen x[33555]), arg size[33568] =
  (33564 call + length[33561] 1)) : _unknown[42] "inline" "method"
  {
    if(33597 call _cond_test(33583 call &&(33585 call != t[33553](33589 call uint(64)[86] 8))(33591 call != t[33553](33595 call int(64)[10] 8))))
    {
      (33577 call compilerError "Cannot create a bytes with a buffer of "(33579 call : t[33553] string[244]))
    }
    unknown ret[33602] bytes[232]
    (33605 'end of statement')
    (33607 call initWithNewBuffer ret[33602] x[33555] length[33561] size[33568])
    (33612 return ret[33602])
  }
  { scopeless type
    bytes[232]
  }
  function bytes[232].init[33649](arg _mt[33653]:_MT[201], arg this[33651]:bytes[232]) : _unknown[42] "method" "primary method" "no return value for void"
  {
  }
  function bytes[232].deinit[33658](arg _mt[33662]:_MT[201], ref arg this[33660]:bytes[232]) : _unknown[42] "destructor" "method" "primary method" "no return value for void"
  {
    if(33701 call _cond_test(33691 call &&(416905 call . this[33660] c"isOwned")(33694 call !=(33697 call . this[33660] c"buff") nil[32])))
    {
      {
        const tmp[33683] "const" "temp"
        (33684 'move' tmp[33683](33681 'deref'(33666 'chpl_on_locale_num'(33668 call chpl_buildLocaleID(33670 call . this[33660] c"locale_id") c_sublocid_any[135202]))))
        {
          (33676 call chpl_here_free(33678 call . this[33660] c"buff"))
        }
        (33687 'elided on block' 0 tmp[33683])
      }
    }
  }
  function bytes[232].chpl__serialize[33707](arg _mt[33711]:_MT[201], arg this[33709]:bytes[232]) : _unknown[42] "method" "primary method"
  {
    unknown data[33715] chpl__inPlaceBuffer[37917]
    (33718 'end of statement')
    if(33732 call _cond_test(33728 call <=(416927 call . this[33709] c"buffLen") CHPL_SHORT_STRING_SIZE[37911]))
    {
      (33721 call chpl_string_comm_get(33723 call chpl__getInPlaceBufferDataForWrite data[33715])(416912 call . this[33709] c"locale_id")(416917 call . this[33709] c"buff")(416922 call . this[33709] c"buffLen"))
    }
    (33736 return(33737 'new'(33739 call __serializeHelper[37973](416934 call . this[33709] c"buffLen")(416939 call . this[33709] c"buff")(416944 call . this[33709] c"buffSize")(416949 call . this[33709] c"locale_id") data[33715](416955 call . this[33709] c"buffLen"))))
  }
  function bytes[232].chpl__deserialize[33748](arg _mt[33754]:_MT[201], arg this[33750]:bytes[232], arg data[33752]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    if(33850 call _cond_test(33843 call !=(33846 call . data[33752] c"locale_id")(416960 call chpl_nodeID[305038])))
    {
      if(33820 call _cond_test(33813 call <=(33816 call . data[33752] c"buffLen") CHPL_SHORT_STRING_SIZE[37911]))
      {
        (33759 return(33764 call(33761 call . bytes[232] c"createCopyingBuffer")(33766 call chpl__getInPlaceBufferData(33768 call . data[33752] c"shortData"))(33772 call . data[33752] c"buffLen")(33776 call . data[33752] c"size")))
      }
      {
        unknown localBuff[33781](33783 call bufferCopyRemote(33785 call . data[33752] c"locale_id")(33789 call . data[33752] c"buff")(33793 call . data[33752] c"buffLen"))
        (33797 'end of statement')
        (33798 return(33803 call(33800 call . bytes[232] c"createAdoptingBuffer") localBuff[33781](33806 call . data[33752] c"buffLen")(33810 call . data[33752] c"size")))
      }
    }
    {
      (33825 return(33830 call(33827 call . bytes[232] c"createBorrowingBuffer")(33832 call . data[33752] c"buff")(33836 call . data[33752] c"buffLen")(33840 call . data[33752] c"size")))
    }
  }
  function bytes[232].serialize[33856](arg _mt[33864]:_MT[201], arg this[33858]:bytes[232], arg writer[33860]:_any[141](?), ref arg serializer[33862]:_any[141](?)) : _unknown[42] throws "method" "primary method" "no return value for void"
  {
    (33868 call compilerError "not implemented: serialize")
  }
  function bytes[232].deserialize[33872](arg _mt[33880]:_MT[201], ref arg this[33874]:bytes[232], arg reader[33876]:_any[141](?), ref arg deserialize[33878]:_any[141](?)) : _unknown[42] throws "method" "primary method" "no return value for void"
  {
    (33884 call compilerError "not implemented: deserialize")
  }
  function bytes[232].init=[33890](arg _mt[33898]:_MT[201], arg this[33892]:bytes[232], arg b[33895] :
  bytes[232]) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (33905 call(33902 call . this[33892] c"chpl__initThisType"))
    (33907 call initWithNewBuffer this[33892] b[33895])
  }
  function bytes[232].init=[33912](arg _mt[33920]:_MT[201], arg this[33914]:bytes[232], arg b[33917] :
  string[244]) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (33927 call(33924 call . this[33914] c"chpl__initThisType"))
    (33929 call initWithNewBuffer this[33914](33932 call . b[33917] c"buff")(length =(33936 call . b[33917] c"numBytes"))(size =(33940 call +(33943 call . b[33917] c"numBytes") 1)))
  }
  function bytes[232].init=[33950](arg _mt[33958]:_MT[201], arg this[33952]:bytes[232], arg b[33955] :
  c_string[51978]) : _unknown[42] "deprecated" "method" "primary method" "no return value for void"
  {
    (33965 call(33962 call . this[33952] c"chpl__initThisType"))
    unknown length[33967](33969 call . b[33955] c"size")
    (33973 'end of statement')
    (33975 call initWithNewBuffer this[33952](33977 call : b[33955] bufferType[30212])(length = length[33967])(size =(33983 call + length[33967] 1)))
  }
  function bytes[232].byteIndices[33990](arg _mt[33994]:_MT[201], arg this[33992]:bytes[232]) : _unknown[42] "inline" "method" "primary method" "no parens"
  {
    (33997 return(34002 call chpl_build_bounded_range 0(34000 call chpl__nudgeHighBound(416972 call . this[33992] c"size"))))
  }
  function bytes[232].size[34006](arg _mt[34010]:_MT[201], param arg this[34008]:bytes[232]) param : _unknown[42] "inline" "method" "primary method" "no parens"
  {
    (34013 return(34014 'string_length_bytes' this[34008]))
  }
  function bytes[232].numBytes[34018](arg _mt[34022]:_MT[201], param arg this[34020]:bytes[232]) param : _unknown[42] "inline" "method" "primary method" "no parens"
  {
    (34025 return(34026 'string_length_bytes' this[34020]))
  }
  function bytes[232].this[34030](arg _mt[34038]:_MT[201], param arg this[34032]:bytes[232], param arg i[34035] :
  int(64)[10]) param : _unknown[42] "inline" "method" "primary method"
  {
    if(34082 call _cond_test(34066 call ||(34068 call < i[34035] 0)(34072 call > i[34035](34075 call -(34078 call . this[34032] c"size") 1))))
    {
      (34043 call compilerError(34044 call +(34046 call +(34048 call + "index "(34051 call : i[34035] string[244])) " out of bounds for bytes with length ")(34058 call :(34061 call . this[34032] c"numBytes") string[244])))
    }
    (34087 return(34088 'ascii' this[34032] i[34035]))
  }
  { scopeless type
    int(64)[10]
  }
  function bytes[232].item[34094](arg _mt[34102]:_MT[201], param arg this[34096]:bytes[232], param arg i[34099] :
  int(64)[10]) param : _unknown[42] "inline" "method" "primary method"
  {
    if(34144 call _cond_test(34128 call ||(34130 call < i[34099] 0)(34134 call > i[34099](34137 call -(34140 call . this[34096] c"size") 1))))
    {
      (34107 call compilerError(34108 call +(34110 call +(34112 call + "index "(34115 call : i[34099] string[244])) " out of bounds for bytes with length ")(34120 call :(34123 call . this[34096] c"numBytes") string[244])))
    }
    (34149 return(34150 'bytes item' this[34096] i[34099]))
  }
  { scopeless type
    bytes[232]
  }
  function bytes[232].item[34156](arg _mt[34164]:_MT[201], arg this[34158]:bytes[232], arg i[34161] :
  byteIndex[18611]) : _unknown[42] "method" "primary method"
  {
    (34168 return(34173 call(34170 call . this[34158] c"item")(34174 call : i[34161] int(64)[10])))
  }
  { scopeless type
    bytes[232]
  }
  function bytes[232].this[34181](arg _mt[34189]:_MT[201], arg this[34183]:bytes[232], arg i[34186] :
  byteIndex[18611]) : _unknown[42] "method" "primary method"
  {
    (34195 return(34200 call(34197 call . this[34183] c"byte")(34201 call : i[34186] int(64)[10])))
  }
  { scopeless type
    (34192 call uint(64)[86] 8)
  }
  function bytes[232].toByte[34208](arg _mt[34212]:_MT[201], param arg this[34210]:bytes[232]) param : _unknown[42] "inline" "method" "primary method"
  {
    if(34231 call _cond_test(34224 call !=(34227 call . this[34210] c"numBytes") 1))
    {
      (34219 call compilerError "bytes.toByte() only accepts single-byte bytes")
    }
    (34236 return(34237 'ascii' this[34210]))
  }
  { scopeless type
    (34215 call uint(64)[86] 8)
  }
  function bytes[232].byte[34242](arg _mt[34250]:_MT[201], param arg this[34244]:bytes[232], param arg i[34247] :
  int(64)[10]) param : _unknown[42] "inline" "method" "primary method"
  {
    if(34291 call _cond_test(34278 call ||(34280 call < i[34247] 0)(34284 call >= i[34247](34288 call . this[34244] c"numBytes"))))
    {
      (34257 call compilerError(34258 call +(34260 call +(34262 call + "index "(34265 call : i[34247] string[244])) " out of bounds for bytes with length ")(34270 call :(34273 call . this[34244] c"numBytes") string[244])))
    }
    (34296 return(34297 'ascii' this[34244] i[34247]))
  }
  { scopeless type
    (34253 call uint(64)[86] 8)
  }
  function bytes[232].join[34303](arg _mt[34314]:_MT[201], arg this[34305]:bytes[232], const  ref arg x[34311] :
  (34309 call chpl__buildArrayRuntimeType nil[32] bytes[232])) : _unknown[42] "inline" "method" "primary method"
  {
    (34318 return(34320 call doJoin this[34305] x[34311]))
  }
  { scopeless type
    bytes[232]
  }
  function bytes[232].join[34326](arg _mt[34332]:_MT[201], arg this[34328]:bytes[232], const  ref arg x[34330]:_any[141](?)) : _unknown[42] "inline" "method" "primary method"
  {
    if(34358 call _cond_test(34344 call ||(34346 call !(34349 call isHomogeneousTuple x[34330]))(34351 call !(34354 call isBytes(34356 call x[34330] 0)))))
    {
      (34339 call compilerError "join() on tuples only handles homogeneous tuples of bytes")
    }
    (34363 return(34365 call doJoin this[34328] x[34330]))
  }
  where {
    (34335 call isTuple x[34330])
  }
  function bytes[232].join[34371](arg _mt[34379]:_MT[201], arg this[34373]:bytes[232], arg ir[34376] :
  _iteratorRecord[165](?)) : _unknown[42] "inline" "method" "primary method"
  {
    (34383 return(34385 call doJoinIterator this[34373] ir[34376]))
  }
  { scopeless type
    bytes[232]
  }
  type bytes[232] unknown buffLen[33621] 0 int(64)[10] unknown buffSize[33627] 0 int(64)[10] unknown buff[33633] nil[32] bufferType[30212] unknown isOwned[33639] 1 bool[19] unknown locale_id[33645](416900 call chpl_nodeID[305038])
  function bytes[232].size[34393](arg _mt[34399]:_MT[201], arg this[34396]:bytes[232] :
  bytes[232]) : _unknown[42] "inline" "method" "no parens"
  {
    (34403 return(417009 call . this[34396] c"buffLen"))
  }
  { scopeless type
    int(64)[10]
  }
  function bytes[232].indices[34408](arg _mt[34414]:_MT[201], arg this[34411]:bytes[232] :
  bytes[232]) : _unknown[42] "method" "no parens"
  {
    (34418 return(34423 call chpl_build_bounded_range 0(34421 call chpl__nudgeHighBound(417014 call . this[34411] c"size"))))
  }
  { scopeless type
    range[240](?)
  }
  function bytes[232].numBytes[34428](arg _mt[34434]:_MT[201], arg this[34431]:bytes[232] :
  bytes[232]) : _unknown[42] "inline" "method" "no parens"
  {
    (34438 return(417019 call . this[34431] c"buffLen"))
  }
  { scopeless type
    int(64)[10]
  }
  function bytes[232].localize[34443](arg _mt[34449]:_MT[201], arg this[34446]:bytes[232] :
  bytes[232]) : _unknown[42] "inline" "method" "@unstable"
  {
    if(34481 call _cond_test(34470 call ||(34473 call compiledForSingleLocale)(34474 call ==(34477 call . this[34446] c"locale_id")(417025 call chpl_nodeID[305038]))))
    {
      (34454 return(34459 call(34456 call . bytes[232] c"createBorrowingBuffer") this[34446]))
    }
    {
      const x[34463] "const" this[34446] bytes[232]
      (34467 'end of statement')
      (34468 return x[34463])
    }
  }
  { scopeless type
    bytes[232]
  }
  function bytes[232].c_str[34488](arg _mt[34494]:_MT[201], arg this[34491]:bytes[232] :
  bytes[232]) : _unknown[42] "deprecated" "inline" "last resort" "method"
  {
    (34505 return(34510 call(34507 call . this[34491] c"c_str")))
    (396021 'used modules list'(34503 'use' CTypes[51217] 'only' c_str))
  }
  { scopeless type
    (34497 call c_ptrConst[46990](?) c_char[562])
  }
  function bytes[232].item[34514](arg _mt[34524]:_MT[201], arg this[34517]:bytes[232] :
  bytes[232], arg i[34521] :
  int(64)[10]) : _unknown[42] "method"
  {
    if(34554 call _cond_test(34538 call && 1(34541 call ||(34543 call < i[34521] 0)(34547 call >= i[34521](34551 call . this[34517] c"buffLen")))))
    {
      (34529 call halt "index " i[34521] " out of bounds for bytes with length "(34534 call . this[34517] c"buffLen"))
    }
    unknown tmp[34580] "temp"(34565 call bufferCopy(buf =(34567 call . this[34517] c"buff"))(off = i[34521])(len = 1)(loc =(34576 call . this[34517] c"locale_id")))
    (34587 call _check_tuple_var_decl tmp[34580] 2)
    unknown buf[34560](34581 call tmp[34580] 0)
    unknown size[34562](34584 call tmp[34580] 1)
    (34592 'end of statement')
    (34593 return(34598 call(34595 call . bytes[232] c"createAdoptingBuffer") buf[34560](length = 1)(size = size[34562])))
  }
  { scopeless type
    bytes[232]
  }
  function bytes[232].this[34607](arg _mt[34617]:_MT[201], arg this[34610]:bytes[232] :
  bytes[232], arg i[34614] :
  int(64)[10]) : _unknown[42] "method"
  {
    (34623 return(34628 call(34625 call . this[34610] c"byte") i[34614]))
  }
  { scopeless type
    (34620 call uint(64)[86] 8)
  }
  function bytes[232].toByte[34633](arg _mt[34639]:_MT[201], arg this[34636]:bytes[232] :
  bytes[232]) : _unknown[42] "method"
  {
    if(34656 call _cond_test(34649 call !=(34652 call . this[34636] c"buffLen") 1))
    {
      (34647 call halt "bytes.toByte() only accepts single-byte bytes")
    }
    (34660 return(34662 call bufferGetByte(buf =(34664 call . this[34636] c"buff"))(off = 0)(loc =(34671 call . this[34636] c"locale_id"))))
  }
  { scopeless type
    (34642 call uint(64)[86] 8)
  }
  function bytes[232].byte[34678](arg _mt[34688]:_MT[201], arg this[34681]:bytes[232] :
  bytes[232], arg i[34685] :
  int(64)[10]) : _unknown[42] "method"
  {
    if(34720 call _cond_test(34704 call && 1(34707 call ||(34709 call < i[34685] 0)(34713 call >= i[34685](34717 call . this[34681] c"buffLen")))))
    {
      (34695 call halt "index " i[34685] " out of bounds for bytes with length "(34700 call . this[34681] c"buffLen"))
    }
    (34725 return(34727 call bufferGetByte(buf =(34729 call . this[34681] c"buff"))(off = i[34685])(loc =(34736 call . this[34681] c"locale_id"))))
  }
  { scopeless type
    (34691 call uint(64)[86] 8)
  }
  function bytes[232].items[34743](arg _mt[34749]:_MT[201], arg this[34746]:bytes[232] :
  bytes[232]) : _unknown[42] "iterator fn" "method" "no return value for void"
  {
    if(34760 call _cond_test(34759 call(34756 call . this[34746] c"isEmpty")))
    {
      (34753 return _void[46])
    }
    {
      unknown _indexOfInterest[34781] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[34782] "expr temp" "temp"
      (34791 'move' _iterator[34782](34789 call _getIterator(34768 call . this[34746] c"indices")))
      Defer
      {
        {
          (34806 call _freeIterator _iterator[34782])
        }
      }
      { scopeless type
        (34796 'move' _indexOfInterest[34781](34793 call iteratorIndex _iterator[34782]))
      }
      ForLoop[34783] order-independent
      {
        unknown i[34765] "index var" "insert auto destroy"
        (34801 'move' i[34765] _indexOfInterest[34781])
        (34771 yield(34776 call(34773 call . this[34746] c"item") i[34765]))
        label _continueLabel[34786]
        _indexOfInterest[34781]
        _iterator[34782]
      }
      label _breakLabel[34787]
    }
  }
  { scopeless type
    bytes[232]
  }
  function bytes[232].these[34816](arg _mt[34822]:_MT[201], arg this[34819]:bytes[232] :
  bytes[232]) : _unknown[42] "iterator fn" "method" "no return value for void"
  {
    {
      unknown _indexOfInterest[34840] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[34841] "expr temp" "temp"
      (34850 'move' _iterator[34841](34848 call _getIterator(34836 call(34833 call . this[34819] c"chpl_bytes"))))
      Defer
      {
        {
          (34865 call _freeIterator _iterator[34841])
        }
      }
      { scopeless type
        (34855 'move' _indexOfInterest[34840](34852 call iteratorIndex _iterator[34841]))
      }
      ForLoop[34842]
      {
        unknown i[34828] "index var" "insert auto destroy"
        (34860 'move' i[34828] _indexOfInterest[34840])
        (34837 yield i[34828])
        label _continueLabel[34845]
        _indexOfInterest[34840]
        _iterator[34841]
      }
      label _breakLabel[34846]
    }
  }
  { scopeless type
    (34825 call uint(64)[86] 8)
  }
  function bytes[232].chpl_bytes[34875](arg _mt[34881]:_MT[201], arg this[34878]:bytes[232] :
  bytes[232]) : _unknown[42] "chpldoc ignore chpl prefix" "iterator fn" "method" "no return value for void"
  {
    {
      unknown _indexOfInterest[34903] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[34904] "expr temp" "temp"
      (34913 'move' _iterator[34904](34911 call _getIterator(34890 call . this[34878] c"indices")))
      Defer
      {
        {
          (34928 call _freeIterator _iterator[34904])
        }
      }
      { scopeless type
        (34918 'move' _indexOfInterest[34903](34915 call iteratorIndex _iterator[34904]))
      }
      ForLoop[34905] order-independent
      {
        unknown i[34887] "index var" "insert auto destroy"
        (34923 'move' i[34887] _indexOfInterest[34903])
        (34893 yield(34898 call(34895 call . this[34878] c"byte") i[34887]))
        label _continueLabel[34908]
        _indexOfInterest[34903]
        _iterator[34904]
      }
      label _breakLabel[34909]
    }
  }
  { scopeless type
    (34884 call uint(64)[86] 8)
  }
  function bytes[232].this[34938](arg _mt[34950]:_MT[201], arg this[34941]:bytes[232] :
  bytes[232], arg r[34947] :
  (34945 call range[240](?) ?[227])) : _unknown[42] "inline" "method"
  {
    (34954 return(34959 'try!-expr'(34956 call getSlice this[34941] r[34947])))
  }
  { scopeless type
    bytes[232]
  }
  function bytes[232].isEmpty[34963](arg _mt[34969]:_MT[201], arg this[34966]:bytes[232] :
  bytes[232]) : _unknown[42] "inline" "method"
  {
    (34973 return(34974 call ==(34977 call . this[34966] c"buffLen") 0))
  }
  { scopeless type
    bool[19]
  }
  function bytes[232].startsWith[34984](arg _mt[34996]:_MT[201], arg this[34987]:bytes[232] :
  bytes[232], arg patterns[34992] ... :
  bytes[232]) : _unknown[42] "inline" "method"
  {
    (35000 return(35002 call startsEndsWith this[34987] patterns[34992](fromLeft = 1)))
  }
  { scopeless type
    bool[19]
  }
  function bytes[232].endsWith[35010](arg _mt[35022]:_MT[201], arg this[35013]:bytes[232] :
  bytes[232], arg patterns[35018] ... :
  bytes[232]) : _unknown[42] "inline" "method"
  {
    (35026 return(35028 call startsEndsWith this[35013] patterns[35018](fromLeft = 0)))
  }
  { scopeless type
    bool[19]
  }
  function bytes[232].find[35036](arg _mt[35057]:_MT[201], arg this[35039]:bytes[232] :
  bytes[232], arg pattern[35043] :
  bytes[232], arg indices[35053] :
  (35047 call range[240](?) ?[227]) =
  (35050 call . this[35039] c"indices")) : _unknown[42] "inline" "method"
  {
    (35061 return(35063 call doSearchNoEnc this[35039] pattern[35043] indices[35053](count = 0)))
  }
  { scopeless type
    int(64)[10]
  }
  function bytes[232].rfind[35072](arg _mt[35093]:_MT[201], arg this[35075]:bytes[232] :
  bytes[232], arg pattern[35079] :
  bytes[232], arg indices[35089] :
  (35083 call range[240](?) ?[227]) =
  (35086 call . this[35075] c"indices")) : _unknown[42] "inline" "method"
  {
    (35097 return(35099 call doSearchNoEnc this[35075] pattern[35079] indices[35089](count = 0)(fromLeft = 0)))
  }
  { scopeless type
    int(64)[10]
  }
  function bytes[232].count[35110](arg _mt[35131]:_MT[201], arg this[35113]:bytes[232] :
  bytes[232], arg pattern[35117] :
  bytes[232], arg indices[35127] :
  (35121 call range[240](?) ?[227]) =
  (35124 call . this[35113] c"indices")) : _unknown[42] "inline" "method"
  {
    (35135 return(35137 call doSearchNoEnc this[35113] pattern[35117] indices[35127](count = 1)))
  }
  { scopeless type
    int(64)[10]
  }
  function bytes[232].replace[35146](arg _mt[35168]:_MT[201], arg this[35149]:bytes[232] :
  bytes[232], arg pattern[35153] :
  bytes[232], arg replacement[35157] :
  bytes[232], arg count[35164] :
  int(64)[10] =
  (35161 call - 1)) : _unknown[42] "inline" "method"
  {
    (35172 return(35174 call doReplace this[35149] pattern[35153] replacement[35157] count[35164]))
  }
  { scopeless type
    bytes[232]
  }
  function bytes[232].split[35182](arg _mt[35206]:_MT[201], arg this[35185]:bytes[232] :
  bytes[232], arg sep[35189] :
  bytes[232], arg maxsplit[35196] :
  int(64)[10] =
  (35193 call - 1), arg ignoreEmpty[35202] :
  bool[19] =
  0) : _unknown[42] "iterator fn" "method" "no return value for void"
  {
    {
      unknown _indexOfInterest[35221] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[35222] "expr temp" "temp"
      (35231 'move' _iterator[35222](35229 call _getIterator(35213 call doSplit this[35185] sep[35189] maxsplit[35196] ignoreEmpty[35202])))
      Defer
      {
        {
          (35246 call _freeIterator _iterator[35222])
        }
      }
      { scopeless type
        (35236 'move' _indexOfInterest[35221](35233 call iteratorIndex _iterator[35222]))
      }
      ForLoop[35223]
      {
        unknown s[35210] "index var" "insert auto destroy"
        (35241 'move' s[35210] _indexOfInterest[35221])
        (35218 yield s[35210])
        label _continueLabel[35226]
        _indexOfInterest[35221]
        _iterator[35222]
      }
      label _breakLabel[35227]
    }
  }
  { scopeless type
    bytes[232]
  }
  function bytes[232].split[35256](arg _mt[35270]:_MT[201], arg this[35259]:bytes[232] :
  bytes[232], arg maxsplit[35266] :
  int(64)[10] =
  (35263 call - 1)) : _unknown[42] "iterator fn" "method" "no return value for void"
  {
    {
      unknown _indexOfInterest[35283] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[35284] "expr temp" "temp"
      (35293 'move' _iterator[35284](35291 call _getIterator(35277 call doSplitWSNoEnc this[35259] maxsplit[35266])))
      Defer
      {
        {
          (35308 call _freeIterator _iterator[35284])
        }
      }
      { scopeless type
        (35298 'move' _indexOfInterest[35283](35295 call iteratorIndex _iterator[35284]))
      }
      ForLoop[35285]
      {
        unknown s[35274] "index var" "insert auto destroy"
        (35303 'move' s[35274] _indexOfInterest[35283])
        (35280 yield s[35274])
        label _continueLabel[35288]
        _indexOfInterest[35283]
        _iterator[35284]
      }
      label _breakLabel[35289]
    }
  }
  { scopeless type
    bytes[232]
  }
  function bytes[232].join[35318](arg _mt[35330]:_MT[201], arg this[35321]:bytes[232] :
  bytes[232], const  ref arg x[35326] ... :
  bytes[232]) : _unknown[42] "inline" "method"
  {
    (35334 return(35336 call doJoin this[35321] x[35326]))
  }
  { scopeless type
    bytes[232]
  }
  function bytes[232].join[35342](arg _mt[35350]:_MT[201], arg this[35345]:bytes[232] :
  bytes[232], const  ref arg x[35348]:_any[141](?)) : _unknown[42] "inline" "method" "no return value for void"
  {
    (35355 call compilerError(35356 call + "bytes.join() accepts any number of bytes, homogeneous " "tuple of bytes, or array of bytes as an argument"))
  }
  { scopeless type
    bytes[232]
  }
  function bytes[232].strip[35367](arg _mt[35387]:_MT[201], arg this[35370]:bytes[232] :
  bytes[232], arg chars[35376] =
  b" \t\r\n", arg leading[35380] =
  1, arg trailing[35384] =
  1) : _unknown[42] "method"
  {
    (35391 return(35393 call doStripNoEnc this[35370] chars[35376] leading[35380] trailing[35384]))
  }
  { scopeless type
    bytes[232]
  }
  function bytes[232].partition[35401](arg _mt[35411]:_MT[201], const arg this[35404]:bytes[232] :
  bytes[232], arg sep[35408] :
  bytes[232]) : _unknown[42] "inline" "method"
  {
    (35418 return(35420 call doPartition this[35404] sep[35408]))
  }
  { scopeless type
    (35413 call * 3 bytes[232])
  }
  function bytes[232].dedent[35426](arg _mt[35440]:_MT[201], arg this[35429]:bytes[232] :
  bytes[232], arg columns[35433] =
  0, arg ignoreFirst[35437] =
  1) : _unknown[42] "method" "@unstable"
  {
    (35444 return(35446 call doDedent this[35429] columns[35433] ignoreFirst[35437]))
  }
  { scopeless type
    bytes[232]
  }
  function bytes[232].decode[35453](arg _mt[35466]:_MT[201], arg this[35456]:bytes[232] :
  bytes[232], arg policy[35463] =
  strict[37976]) : _unknown[42] throws "method"
  {
    unknown localThis[35471](35477 call(35474 call . this[35456] c"localize")) bytes[232]
    (35479 'end of statement')
    (35480 return(35482 call decodeByteBuffer(35484 call . localThis[35471] c"buff")(35488 call . localThis[35471] c"buffLen") policy[35463]))
  }
  { scopeless type
    string[244]
  }
  function bytes[232].isUpper[35495](arg _mt[35501]:_MT[201], arg this[35498]:bytes[232] :
  bytes[232]) : _unknown[42] "method"
  {
    if(35513 call _cond_test(35512 call(35509 call . this[35498] c"isEmpty")))
    {
      (35505 return 0)
    }
    unknown result[35519] 1 bool[19]
    (35523 'end of statement')
    {
      const tmp[35592] "const" "temp"
      (35593 'move' tmp[35592](35590 'deref'(35524 'chpl_on_locale_num'(35526 call chpl_buildLocaleID(35528 call . this[35498] c"locale_id") c_sublocid_any[135202]))))
      {
        {
          unknown _indexOfInterest[35558] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[35559] "expr temp" "temp"
          (35568 'move' _iterator[35559](35566 call _getIterator(35539 call(35536 call . this[35498] c"chpl_bytes"))))
          Defer
          {
            {
              (35583 call _freeIterator _iterator[35559])
            }
          }
          { scopeless type
            (35573 'move' _indexOfInterest[35558](35570 call iteratorIndex _iterator[35559]))
          }
          ForLoop[35560]
          {
            unknown b[35533] "index var" "insert auto destroy"
            (35578 'move' b[35533] _indexOfInterest[35558])
            {
              if(35554 call _cond_test(35549 call !(35552 call byte_isUpper b[35533])))
              {
                (35542 call = result[35519] 0)
                break _breakLabel[35564] _breakLabel[35564]
              }
            }
            label _continueLabel[35563]
            _indexOfInterest[35558]
            _iterator[35559]
          }
          label _breakLabel[35564]
        }
      }
      (35596 'elided on block' 0 tmp[35592])
    }
    (35600 return result[35519])
  }
  { scopeless type
    bool[19]
  }
  function bytes[232].isLower[35605](arg _mt[35611]:_MT[201], arg this[35608]:bytes[232] :
  bytes[232]) : _unknown[42] "method"
  {
    if(35623 call _cond_test(35622 call(35619 call . this[35608] c"isEmpty")))
    {
      (35615 return 0)
    }
    unknown result[35629] 1 bool[19]
    (35633 'end of statement')
    {
      const tmp[35702] "const" "temp"
      (35703 'move' tmp[35702](35700 'deref'(35634 'chpl_on_locale_num'(35636 call chpl_buildLocaleID(35638 call . this[35608] c"locale_id") c_sublocid_any[135202]))))
      {
        {
          unknown _indexOfInterest[35668] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[35669] "expr temp" "temp"
          (35678 'move' _iterator[35669](35676 call _getIterator(35649 call(35646 call . this[35608] c"chpl_bytes"))))
          Defer
          {
            {
              (35693 call _freeIterator _iterator[35669])
            }
          }
          { scopeless type
            (35683 'move' _indexOfInterest[35668](35680 call iteratorIndex _iterator[35669]))
          }
          ForLoop[35670]
          {
            unknown b[35643] "index var" "insert auto destroy"
            (35688 'move' b[35643] _indexOfInterest[35668])
            {
              if(35664 call _cond_test(35659 call !(35662 call byte_isLower b[35643])))
              {
                (35652 call = result[35629] 0)
                break _breakLabel[35674] _breakLabel[35674]
              }
            }
            label _continueLabel[35673]
            _indexOfInterest[35668]
            _iterator[35669]
          }
          label _breakLabel[35674]
        }
      }
      (35706 'elided on block' 0 tmp[35702])
    }
    (35710 return result[35629])
  }
  { scopeless type
    bool[19]
  }
  function bytes[232].isSpace[35715](arg _mt[35721]:_MT[201], arg this[35718]:bytes[232] :
  bytes[232]) : _unknown[42] "method"
  {
    if(35733 call _cond_test(35732 call(35729 call . this[35718] c"isEmpty")))
    {
      (35725 return 0)
    }
    unknown result[35739] 1 bool[19]
    (35743 'end of statement')
    {
      const tmp[35812] "const" "temp"
      (35813 'move' tmp[35812](35810 'deref'(35744 'chpl_on_locale_num'(35746 call chpl_buildLocaleID(35748 call . this[35718] c"locale_id") c_sublocid_any[135202]))))
      {
        {
          unknown _indexOfInterest[35778] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[35779] "expr temp" "temp"
          (35788 'move' _iterator[35779](35786 call _getIterator(35759 call(35756 call . this[35718] c"chpl_bytes"))))
          Defer
          {
            {
              (35803 call _freeIterator _iterator[35779])
            }
          }
          { scopeless type
            (35793 'move' _indexOfInterest[35778](35790 call iteratorIndex _iterator[35779]))
          }
          ForLoop[35780]
          {
            unknown b[35753] "index var" "insert auto destroy"
            (35798 'move' b[35753] _indexOfInterest[35778])
            {
              if(35774 call _cond_test(35769 call !(35772 call byte_isWhitespace b[35753])))
              {
                (35762 call = result[35739] 0)
                break _breakLabel[35784] _breakLabel[35784]
              }
            }
            label _continueLabel[35783]
            _indexOfInterest[35778]
            _iterator[35779]
          }
          label _breakLabel[35784]
        }
      }
      (35816 'elided on block' 0 tmp[35812])
    }
    (35820 return result[35739])
  }
  { scopeless type
    bool[19]
  }
  function bytes[232].isAlpha[35825](arg _mt[35831]:_MT[201], arg this[35828]:bytes[232] :
  bytes[232]) : _unknown[42] "method"
  {
    if(35843 call _cond_test(35842 call(35839 call . this[35828] c"isEmpty")))
    {
      (35835 return 0)
    }
    unknown result[35849] 1 bool[19]
    (35853 'end of statement')
    {
      const tmp[35922] "const" "temp"
      (35923 'move' tmp[35922](35920 'deref'(35854 'chpl_on_locale_num'(35856 call chpl_buildLocaleID(35858 call . this[35828] c"locale_id") c_sublocid_any[135202]))))
      {
        {
          unknown _indexOfInterest[35888] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[35889] "expr temp" "temp"
          (35898 'move' _iterator[35889](35896 call _getIterator(35869 call(35866 call . this[35828] c"chpl_bytes"))))
          Defer
          {
            {
              (35913 call _freeIterator _iterator[35889])
            }
          }
          { scopeless type
            (35903 'move' _indexOfInterest[35888](35900 call iteratorIndex _iterator[35889]))
          }
          ForLoop[35890]
          {
            unknown b[35863] "index var" "insert auto destroy"
            (35908 'move' b[35863] _indexOfInterest[35888])
            {
              if(35884 call _cond_test(35879 call !(35882 call byte_isAlpha b[35863])))
              {
                (35872 call = result[35849] 0)
                break _breakLabel[35894] _breakLabel[35894]
              }
            }
            label _continueLabel[35893]
            _indexOfInterest[35888]
            _iterator[35889]
          }
          label _breakLabel[35894]
        }
      }
      (35926 'elided on block' 0 tmp[35922])
    }
    (35930 return result[35849])
  }
  { scopeless type
    bool[19]
  }
  function bytes[232].isDigit[35935](arg _mt[35941]:_MT[201], arg this[35938]:bytes[232] :
  bytes[232]) : _unknown[42] "method"
  {
    if(35953 call _cond_test(35952 call(35949 call . this[35938] c"isEmpty")))
    {
      (35945 return 0)
    }
    unknown result[35959] 1 bool[19]
    (35963 'end of statement')
    {
      const tmp[36032] "const" "temp"
      (36033 'move' tmp[36032](36030 'deref'(35964 'chpl_on_locale_num'(35966 call chpl_buildLocaleID(35968 call . this[35938] c"locale_id") c_sublocid_any[135202]))))
      {
        {
          unknown _indexOfInterest[35998] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[35999] "expr temp" "temp"
          (36008 'move' _iterator[35999](36006 call _getIterator(35979 call(35976 call . this[35938] c"chpl_bytes"))))
          Defer
          {
            {
              (36023 call _freeIterator _iterator[35999])
            }
          }
          { scopeless type
            (36013 'move' _indexOfInterest[35998](36010 call iteratorIndex _iterator[35999]))
          }
          ForLoop[36000]
          {
            unknown b[35973] "index var" "insert auto destroy"
            (36018 'move' b[35973] _indexOfInterest[35998])
            {
              if(35994 call _cond_test(35989 call !(35992 call byte_isDigit b[35973])))
              {
                (35982 call = result[35959] 0)
                break _breakLabel[36004] _breakLabel[36004]
              }
            }
            label _continueLabel[36003]
            _indexOfInterest[35998]
            _iterator[35999]
          }
          label _breakLabel[36004]
        }
      }
      (36036 'elided on block' 0 tmp[36032])
    }
    (36040 return result[35959])
  }
  { scopeless type
    bool[19]
  }
  function bytes[232].isAlnum[36045](arg _mt[36051]:_MT[201], arg this[36048]:bytes[232] :
  bytes[232]) : _unknown[42] "method"
  {
    if(36063 call _cond_test(36062 call(36059 call . this[36048] c"isEmpty")))
    {
      (36055 return 0)
    }
    unknown result[36069] 1 bool[19]
    (36073 'end of statement')
    {
      const tmp[36142] "const" "temp"
      (36143 'move' tmp[36142](36140 'deref'(36074 'chpl_on_locale_num'(36076 call chpl_buildLocaleID(36078 call . this[36048] c"locale_id") c_sublocid_any[135202]))))
      {
        {
          unknown _indexOfInterest[36108] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[36109] "expr temp" "temp"
          (36118 'move' _iterator[36109](36116 call _getIterator(36089 call(36086 call . this[36048] c"chpl_bytes"))))
          Defer
          {
            {
              (36133 call _freeIterator _iterator[36109])
            }
          }
          { scopeless type
            (36123 'move' _indexOfInterest[36108](36120 call iteratorIndex _iterator[36109]))
          }
          ForLoop[36110]
          {
            unknown b[36083] "index var" "insert auto destroy"
            (36128 'move' b[36083] _indexOfInterest[36108])
            {
              if(36104 call _cond_test(36099 call !(36102 call byte_isAlnum b[36083])))
              {
                (36092 call = result[36069] 0)
                break _breakLabel[36114] _breakLabel[36114]
              }
            }
            label _continueLabel[36113]
            _indexOfInterest[36108]
            _iterator[36109]
          }
          label _breakLabel[36114]
        }
      }
      (36146 'elided on block' 0 tmp[36142])
    }
    (36150 return result[36069])
  }
  { scopeless type
    bool[19]
  }
  function bytes[232].isPrintable[36155](arg _mt[36161]:_MT[201], arg this[36158]:bytes[232] :
  bytes[232]) : _unknown[42] "method"
  {
    if(36173 call _cond_test(36172 call(36169 call . this[36158] c"isEmpty")))
    {
      (36165 return 0)
    }
    unknown result[36179] 1 bool[19]
    (36183 'end of statement')
    {
      const tmp[36252] "const" "temp"
      (36253 'move' tmp[36252](36250 'deref'(36184 'chpl_on_locale_num'(36186 call chpl_buildLocaleID(36188 call . this[36158] c"locale_id") c_sublocid_any[135202]))))
      {
        {
          unknown _indexOfInterest[36218] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[36219] "expr temp" "temp"
          (36228 'move' _iterator[36219](36226 call _getIterator(36199 call(36196 call . this[36158] c"chpl_bytes"))))
          Defer
          {
            {
              (36243 call _freeIterator _iterator[36219])
            }
          }
          { scopeless type
            (36233 'move' _indexOfInterest[36218](36230 call iteratorIndex _iterator[36219]))
          }
          ForLoop[36220]
          {
            unknown b[36193] "index var" "insert auto destroy"
            (36238 'move' b[36193] _indexOfInterest[36218])
            {
              if(36214 call _cond_test(36209 call !(36212 call byte_isPrintable b[36193])))
              {
                (36202 call = result[36179] 0)
                break _breakLabel[36224] _breakLabel[36224]
              }
            }
            label _continueLabel[36223]
            _indexOfInterest[36218]
            _iterator[36219]
          }
          label _breakLabel[36224]
        }
      }
      (36256 'elided on block' 0 tmp[36252])
    }
    (36260 return result[36179])
  }
  { scopeless type
    bool[19]
  }
  function bytes[232].isTitle[36265](arg _mt[36271]:_MT[201], arg this[36268]:bytes[232] :
  bytes[232]) : _unknown[42] "method"
  {
    if(36283 call _cond_test(36282 call(36279 call . this[36268] c"isEmpty")))
    {
      (36275 return 0)
    }
    unknown result[36289] 1 bool[19]
    (36293 'end of statement')
    {
      const tmp[36434] "const" "temp"
      (36435 'move' tmp[36434](36432 'deref'(36294 'chpl_on_locale_num'(36296 call chpl_buildLocaleID(36298 call . this[36268] c"locale_id") c_sublocid_any[135202]))))
      {
        unknown UN[36313] "param" 0
        unknown UPPER[36309] "param" 1
        unknown LOWER[36305] "param" 2
        (36316 'end of statement')
        unknown last[36318] UN[36313]
        (36321 'end of statement')
        {
          unknown _indexOfInterest[36400] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[36401] "expr temp" "temp"
          (36410 'move' _iterator[36401](36408 call _getIterator(36328 call(36325 call . this[36268] c"chpl_bytes"))))
          Defer
          {
            {
              (36425 call _freeIterator _iterator[36401])
            }
          }
          { scopeless type
            (36415 'move' _indexOfInterest[36400](36412 call iteratorIndex _iterator[36401]))
          }
          ForLoop[36402]
          {
            unknown b[36322] "index var" "insert auto destroy"
            (36420 'move' b[36322] _indexOfInterest[36400])
            {
              if(36395 call _cond_test(36393 call byte_isLower b[36322]))
              {
                if(36354 call _cond_test(36344 call ||(36346 call == last[36318] UPPER[36309])(36350 call == last[36318] LOWER[36305])))
                {
                  (36332 call = last[36318] LOWER[36305])
                }
                {
                  (36337 call = result[36289] 0)
                  break _breakLabel[36406] _breakLabel[36406]
                }
              }
              {
                if(36388 call _cond_test(36386 call byte_isUpper b[36322]))
                {
                  if(36376 call _cond_test(36372 call == last[36318] UN[36313]))
                  {
                    (36360 call = last[36318] UPPER[36309])
                  }
                  {
                    (36365 call = result[36289] 0)
                    break _breakLabel[36406] _breakLabel[36406]
                  }
                }
                {
                  (36381 call = last[36318] UN[36313])
                }
              }
            }
            label _continueLabel[36405]
            _indexOfInterest[36400]
            _iterator[36401]
          }
          label _breakLabel[36406]
        }
      }
      (36438 'elided on block' 0 tmp[36434])
    }
    (36442 return result[36289])
  }
  { scopeless type
    bool[19]
  }
  function bytes[232].toLower[36447](arg _mt[36453]:_MT[201], arg this[36450]:bytes[232] :
  bytes[232]) : _unknown[42] "method"
  {
    unknown result[36458] this[36450] bytes[232]
    (36462 'end of statement')
    if(36471 call _cond_test(36470 call(36467 call . result[36458] c"isEmpty")))
    {
      (36463 return result[36458])
    }
    {
      unknown _indexOfInterest[36505] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[36506] "expr temp" "temp"
      (36526 'move' _iterator[36506](36492 call _build_tuple(36519 call _getIterator(36518 call(36515 call . result[36458] c"chpl_bytes")))(36524 call _getIterator(36522 call chpl_build_low_bounded_range 0))))
      Defer
      {
        {
          (36554 call _freeIterator _iterator[36506])
        }
      }
      { scopeless type
        (36531 'move' _indexOfInterest[36505](36528 call iteratorIndex _iterator[36506]))
      }
      ForLoop[36507]
      {
        (36536 call _check_tuple_var_decl _indexOfInterest[36505] 2)
        unknown b[36477] "index var" "insert auto destroy"
        (36543 'move' b[36477](36540 call _indexOfInterest[36505] 0))
        unknown i[36479] "index var" "insert auto destroy"
        (36549 'move' i[36479](36546 call _indexOfInterest[36505] 1))
        {
          (36494 call =(36500 call(36497 call . result[36458] c"buff") i[36479])(36503 call byte_toLower b[36477]))
        }
        label _continueLabel[36510]
        _indexOfInterest[36505]
        _iterator[36506]
      }
      label _breakLabel[36511]
    }
    (36561 return result[36458])
  }
  { scopeless type
    bytes[232]
  }
  function bytes[232].toUpper[36566](arg _mt[36572]:_MT[201], arg this[36569]:bytes[232] :
  bytes[232]) : _unknown[42] "method"
  {
    unknown result[36577] this[36569] bytes[232]
    (36581 'end of statement')
    if(36590 call _cond_test(36589 call(36586 call . result[36577] c"isEmpty")))
    {
      (36582 return result[36577])
    }
    {
      unknown _indexOfInterest[36624] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[36625] "expr temp" "temp"
      (36645 'move' _iterator[36625](36611 call _build_tuple(36638 call _getIterator(36637 call(36634 call . result[36577] c"chpl_bytes")))(36643 call _getIterator(36641 call chpl_build_low_bounded_range 0))))
      Defer
      {
        {
          (36673 call _freeIterator _iterator[36625])
        }
      }
      { scopeless type
        (36650 'move' _indexOfInterest[36624](36647 call iteratorIndex _iterator[36625]))
      }
      ForLoop[36626]
      {
        (36655 call _check_tuple_var_decl _indexOfInterest[36624] 2)
        unknown b[36596] "index var" "insert auto destroy"
        (36662 'move' b[36596](36659 call _indexOfInterest[36624] 0))
        unknown i[36598] "index var" "insert auto destroy"
        (36668 'move' i[36598](36665 call _indexOfInterest[36624] 1))
        {
          (36613 call =(36619 call(36616 call . result[36577] c"buff") i[36598])(36622 call byte_toUpper b[36596]))
        }
        label _continueLabel[36629]
        _indexOfInterest[36624]
        _iterator[36625]
      }
      label _breakLabel[36630]
    }
    (36680 return result[36577])
  }
  { scopeless type
    bytes[232]
  }
  function bytes[232].toTitle[36685](arg _mt[36691]:_MT[201], arg this[36688]:bytes[232] :
  bytes[232]) : _unknown[42] "method"
  {
    unknown result[36696] this[36688] bytes[232]
    (36700 'end of statement')
    if(36709 call _cond_test(36708 call(36705 call . result[36696] c"isEmpty")))
    {
      (36701 return result[36696])
    }
    unknown UN[36720] "param" 0
    unknown LETTER[36716] "param" 1
    (36723 'end of statement')
    unknown last[36725] UN[36720]
    (36728 'end of statement')
    {
      unknown _indexOfInterest[36796] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[36797] "expr temp" "temp"
      (36817 'move' _iterator[36797](36745 call _build_tuple(36810 call _getIterator(36809 call(36806 call . result[36696] c"chpl_bytes")))(36815 call _getIterator(36813 call chpl_build_low_bounded_range 0))))
      Defer
      {
        {
          (36845 call _freeIterator _iterator[36797])
        }
      }
      { scopeless type
        (36822 'move' _indexOfInterest[36796](36819 call iteratorIndex _iterator[36797]))
      }
      ForLoop[36798]
      {
        (36827 call _check_tuple_var_decl _indexOfInterest[36796] 2)
        unknown b[36730] "index var" "insert auto destroy"
        (36834 'move' b[36730](36831 call _indexOfInterest[36796] 0))
        unknown i[36732] "index var" "insert auto destroy"
        (36840 'move' i[36732](36837 call _indexOfInterest[36796] 1))
        {
          if(36792 call _cond_test(36790 call byte_isAlpha b[36730]))
          {
            if(36780 call _cond_test(36776 call == last[36725] UN[36720]))
            {
              (36749 call = last[36725] LETTER[36716])
              (36753 call =(36759 call(36756 call . result[36696] c"buff") i[36732])(36762 call byte_toUpper b[36730]))
            }
            {
              (36765 call =(36771 call(36768 call . result[36696] c"buff") i[36732])(36774 call byte_toLower b[36730]))
            }
          }
          {
            (36785 call = last[36725] UN[36720])
          }
        }
        label _continueLabel[36801]
        _indexOfInterest[36796]
        _iterator[36797]
      }
      label _breakLabel[36802]
    }
    (36852 return result[36696])
  }
  { scopeless type
    bytes[232]
  }
  function :[36857](arg x[36860] :
  string[244], arg t[36864] :
  bytes[232]) : _unknown[42] "inline" "operator"
  {
    (36868 return(36873 call(36870 call . bytes[232] c"createCopyingBuffer")(36875 call . x[36860] c"buff")(length =(36879 call . x[36860] c"numBytes"))(size =(36883 call +(36886 call . x[36860] c"numBytes") 1))))
  }
  function :[36893](arg x[36896] :
  c_string[51978], arg t[36900] :
  bytes[232]) : _unknown[42] "deprecated" "inline" "operator"
  {
    unknown length[36905](36907 call . x[36896] c"size")
    (36911 'end of statement')
    (36912 return(36917 call(36914 call . bytes[232] c"createCopyingBuffer")(36918 call : x[36896] bufferType[30212])(length = length[36905])(size =(36924 call + length[36905] 1))))
  }
  function bytes[232].+=[36931](arg _mt[36945]:_MT[201], arg this[36934]:bytes[232] :
  bytes[232], ref arg lhs[36938] :
  bytes[232], const  ref arg rhs[36942] :
  bytes[232]) : _unknown[42] "assignop" "method" "operator" "no return value for void"
  {
    (36950 call doAppend lhs[36938] rhs[36942])
  }
  { scopeless type
    void[4]
  }
  function bytes[232].appendByteValues[36956](arg _mt[36970]:_MT[201], ref arg this[36959]:bytes[232] :
  bytes[232], arg x[36966] ... :
  (36963 call uint(64)[86] 8)) : _unknown[42] "method" "@unstable" "no return value for void"
  {
    unknown buf[36975](36977 call c_array[47643](?)(36979 call uint(64)[86] 8)(36982 call . x[36966] c"size"))
    (36986 'end of statement')
    {
      unknown i[36987] "index var" 0
      unknown tmp[37007] "maybe param" "temp"
      (37019 'move' tmp[37007](37017 call chpl_compute_low_param_loop_bound 0(36994 call chpl__nudgeHighBound(36991 call . x[36966] c"size"))))
      unknown tmp[37008] "maybe param" "temp"
      (37031 'move' tmp[37008](37029 call chpl_compute_high_param_loop_bound 0(37024 call chpl__nudgeHighBound(37026 call . x[36966] c"size"))))
      unknown tmp[37009] "maybe param" "temp"
      (37034 'move' tmp[37009] 1)
      ParamForLoop[37036]
      { i[36987] tmp[37007] tmp[37008] tmp[37009]
        {
          (36999 call =(37002 call buf[36975] i[36987])(37005 call x[36966] i[36987]))
        }
      }
      label _unused_continueLabel[37011]
      label _breakLabel[37010]
    }
    (37046 call doAppendSomeBytes this[36959](37049 call . x[36966] c"size") buf[36975](nCodepoints = 0))
  }
  { scopeless type
    void[4]
  }
  function convertNibble[37058](in arg nib[37063] :
  (37061 call uint(64)[86] 8), arg uppercase[37067] :
  bool[19]) : _unknown[42] "private"
  {
    (37074 call = nib[37063](37077 call & nib[37063] 15))
    if(37167 call _cond_test(37155 call &&(37157 call <= 0 nib[37063])(37161 call <= nib[37063] 9)))
    {
      unknown zero[37085] "param"(37092 call b"0" 0)(37087 call uint(64)[86] 8)
      (37095 'end of statement')
      (37096 return(37097 call + zero[37085] nib[37063]))
    }
    {
      if(37151 call _cond_test(37141 call &&(37143 call <= 10 nib[37063])(37147 call <= nib[37063] 15)))
      {
        unknown a[37103] "param"(37110 call b"a" 0)(37105 call uint(64)[86] 8)
        (37113 'end of statement')
        unknown A[37115] "param"(37122 call b"A" 0)(37117 call uint(64)[86] 8)
        (37125 'end of statement')
        (37126 return(37127 call -(37129 call +(37134 IfExpr  uppercase[37067] then
        { scopeless
          A[37115]
        } else
        { scopeless
          a[37103]
        } ) nib[37063]) 10))
      }
    }
    (37172 return 0)
  }
  { scopeless type
    (37071 call uint(64)[86] 8)
  }
  function bytes[232].toHexadecimal[37177](arg _mt[37193]:_MT[201], arg this[37180]:bytes[232] :
  bytes[232], arg uppercase[37185] :
  bool[19] =
  0, arg resultType[37190]:_any[141](?) =
  bytes[232]) : _unknown[42] "method" "@unstable"
  {
    unknown result[37198] resultType[37190]
    (37201 'end of statement')
    {
      unknown _indexOfInterest[37267] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[37268] "expr temp" "temp"
      (37277 'move' _iterator[37268](37275 call _getIterator this[37180]))
      Defer
      {
        {
          (37292 call _freeIterator _iterator[37268])
        }
      }
      { scopeless type
        (37282 'move' _indexOfInterest[37267](37279 call iteratorIndex _iterator[37268]))
      }
      ForLoop[37269]
      {
        unknown byte[37202] "index var" "insert auto destroy"
        (37287 'move' byte[37202] _indexOfInterest[37267])
        {
          const nib1[37207] "const"(37209 call convertNibble(37210 call &(37212 call >> byte[37202] 4) 15) uppercase[37185])
          (37219 'end of statement')
          const nib2[37221] "const"(37223 call convertNibble(37224 call & byte[37202] 15) uppercase[37185])
          (37230 'end of statement')
          if(37245 call _cond_test(37241 call == resultType[37190] bytes[232]))
          {
            (37238 call(37235 call . result[37198] c"appendByteValues") nib1[37207] nib2[37221])
          }
          if(37263 call _cond_test(37259 call == resultType[37190] string[244]))
          {
            (37256 call(37253 call . result[37198] c"appendCodepointValues") nib1[37207] nib2[37221])
          }
        }
        label _continueLabel[37272]
        _indexOfInterest[37267]
        _iterator[37268]
      }
      label _breakLabel[37273]
    }
    (37299 return result[37198])
  }
  { scopeless type
    resultType[37190]
  }
  function bytes[232].=[37304](arg _mt[37318]:_MT[201], arg this[37307]:bytes[232] :
  bytes[232], ref arg lhs[37311] :
  bytes[232], arg rhs[37315] :
  bytes[232]) : _unknown[42] "assignop" "method" "operator" "no return value for void"
  {
    (37323 call doAssign lhs[37311] rhs[37315])
  }
  { scopeless type
    void[4]
  }
  function bytes[232].=[37329](arg _mt[37343]:_MT[201], arg this[37332]:bytes[232] :
  bytes[232], ref arg lhs[37336] :
  bytes[232], arg rhs_c[37340] :
  c_string[51978]) : _unknown[42] "assignop" "deprecated" "method" "operator" "no return value for void"
  {
    (37347 call = lhs[37336](37354 call(37351 call . bytes[232] c"createCopyingBuffer")(37355 call : rhs_c[37340](37359 call c_ptrConst[46990](?) c_char[562]))))
  }
  { scopeless type
    void[4]
  }
  function bytes[232].+[37364](arg _mt[37378]:_MT[201], arg this[37367]:bytes[232] :
  bytes[232], arg s0[37371] :
  bytes[232], arg s1[37375] :
  bytes[232]) : _unknown[42] "method" "operator"
  {
    (37382 return(37384 call doConcat s0[37371] s1[37375]))
  }
  { scopeless type
    bytes[232]
  }
  function bytes[232].+[37390](arg _mt[37404]:_MT[201], arg this[37393]:bytes[232] :
  bytes[232], param arg s0[37397] :
  bytes[232], param arg s1[37401] :
  bytes[232]) param : _unknown[42] "inline" "method" "operator"
  {
    (37407 return(37408 'string_concat' s0[37397] s1[37401]))
  }
  function *[37413](arg s[37416] :
  bytes[232], arg n[37420] :
  integral[159](?)) : _unknown[42] "operator"
  {
    (37425 return(37427 call doMultiply s[37416] n[37420]))
  }
  { scopeless type
    bytes[232]
  }
  function *[37433](arg n[37436] :
  integral[159](?), arg s[37440] :
  bytes[232]) : _unknown[42] "operator"
  {
    (37444 return(37446 call doMultiply s[37440] n[37436]))
  }
  function bytes[232].==[37451](arg _mt[37465]:_MT[201], arg this[37454]:bytes[232] :
  bytes[232], arg a[37458] :
  bytes[232], arg b[37462] :
  bytes[232]) : _unknown[42] "method" "operator"
  {
    (37469 return(37471 call doEq a[37458] b[37462]))
  }
  { scopeless type
    bool[19]
  }
  function bytes[232].!=[37477](arg _mt[37491]:_MT[201], arg this[37480]:bytes[232] :
  bytes[232], arg a[37484] :
  bytes[232], arg b[37488] :
  bytes[232]) : _unknown[42] "inline" "method" "operator"
  {
    (37495 return(37496 call !(37499 call doEq a[37484] b[37488])))
  }
  { scopeless type
    bool[19]
  }
  function bytes[232].<[37505](arg _mt[37519]:_MT[201], arg this[37508]:bytes[232] :
  bytes[232], arg a[37512] :
  bytes[232], arg b[37516] :
  bytes[232]) : _unknown[42] "inline" "method" "operator"
  {
    (37523 return(37525 call doLessThan a[37512] b[37516]))
  }
  { scopeless type
    bool[19]
  }
  function bytes[232].>[37531](arg _mt[37545]:_MT[201], arg this[37534]:bytes[232] :
  bytes[232], arg a[37538] :
  bytes[232], arg b[37542] :
  bytes[232]) : _unknown[42] "inline" "method" "operator"
  {
    (37549 return(37551 call doGreaterThan a[37538] b[37542]))
  }
  { scopeless type
    bool[19]
  }
  function bytes[232].<=[37557](arg _mt[37571]:_MT[201], arg this[37560]:bytes[232] :
  bytes[232], arg a[37564] :
  bytes[232], arg b[37568] :
  bytes[232]) : _unknown[42] "inline" "method" "operator"
  {
    (37575 return(37577 call doLessThanOrEq a[37564] b[37568]))
  }
  { scopeless type
    bool[19]
  }
  function bytes[232].>=[37583](arg _mt[37597]:_MT[201], arg this[37586]:bytes[232] :
  bytes[232], arg a[37590] :
  bytes[232], arg b[37594] :
  bytes[232]) : _unknown[42] "inline" "method" "operator"
  {
    (37601 return(37603 call doGreaterThanOrEq a[37590] b[37594]))
  }
  { scopeless type
    bool[19]
  }
  function bytes[232].==[37609](arg _mt[37623]:_MT[201], arg this[37612]:bytes[232] :
  bytes[232], param arg s0[37616] :
  bytes[232], param arg s1[37620] :
  bytes[232]) param : _unknown[42] "inline" "method" "operator"
  {
    (37626 return(37627 call ==(37629 'string_compare' s0[37616] s1[37620]) 0))
  }
  function bytes[232].!=[37635](arg _mt[37649]:_MT[201], arg this[37638]:bytes[232] :
  bytes[232], param arg s0[37642] :
  bytes[232], param arg s1[37646] :
  bytes[232]) param : _unknown[42] "inline" "method" "operator"
  {
    (37652 return(37653 call !=(37655 'string_compare' s0[37642] s1[37646]) 0))
  }
  function bytes[232].<=[37661](arg _mt[37675]:_MT[201], arg this[37664]:bytes[232] :
  bytes[232], param arg a[37668] :
  bytes[232], param arg b[37672] :
  bytes[232]) param : _unknown[42] "inline" "method" "operator"
  {
    (37678 return(37679 call <=(37681 'string_compare' a[37668] b[37672]) 0))
  }
  function bytes[232].>=[37687](arg _mt[37701]:_MT[201], arg this[37690]:bytes[232] :
  bytes[232], param arg a[37694] :
  bytes[232], param arg b[37698] :
  bytes[232]) param : _unknown[42] "inline" "method" "operator"
  {
    (37704 return(37705 call >=(37707 'string_compare' a[37694] b[37698]) 0))
  }
  function bytes[232].<[37713](arg _mt[37727]:_MT[201], arg this[37716]:bytes[232] :
  bytes[232], param arg a[37720] :
  bytes[232], param arg b[37724] :
  bytes[232]) param : _unknown[42] "inline" "method" "operator"
  {
    (37730 return(37731 call <(37733 'string_compare' a[37720] b[37724]) 0))
  }
  function bytes[232].>[37739](arg _mt[37753]:_MT[201], arg this[37742]:bytes[232] :
  bytes[232], param arg a[37746] :
  bytes[232], param arg b[37750] :
  bytes[232]) param : _unknown[42] "inline" "method" "operator"
  {
    (37756 return(37757 call >(37759 'string_compare' a[37746] b[37750]) 0))
  }
  function bytes[232].hash[37765](arg _mt[37771]:_MT[201], arg this[37768]:bytes[232] :
  bytes[232]) : _unknown[42] "inline" "method"
  {
    (37775 return(37777 call getHash this[37768]))
  }
  { scopeless type
    uint(64)[86]
  } hashable[279734] bytes[232]
  {
  }
  function bytes[232].<=>[37789](arg _mt[37803]:_MT[201], arg this[37792]:bytes[232] :
  bytes[232], ref arg x[37796] :
  bytes[232], ref arg y[37800] :
  bytes[232]) : _unknown[42] "method" "operator" "no return value for void"
  {
    if(37881 call _cond_test(37871 call !=(37874 call . x[37796] c"locale_id")(37878 call . y[37800] c"locale_id")))
    {
      unknown tmp[37808] x[37796]
      (37811 'end of statement')
      (37812 call = x[37796] y[37800])
      (37816 call = y[37800] tmp[37808])
    }
    {
      (37821 call <=>(37824 call . x[37796] c"buffLen")(37828 call . y[37800] c"buffLen"))
      (37831 call <=>(37834 call . x[37796] c"buffSize")(37838 call . y[37800] c"buffSize"))
      (37841 call <=>(37844 call . x[37796] c"buff")(37848 call . y[37800] c"buff"))
      (37851 call <=>(37854 call . x[37796] c"isOwned")(37858 call . y[37800] c"isOwned"))
      (37861 call <=>(37864 call . x[37796] c"locale_id")(37868 call . y[37800] c"locale_id"))
    }
  } writeSerializable[310070] bytes[232]
  {
  } readDeserializable[310078] bytes[232]
  {
  }
  (396011 'used modules list'(32928 'use' ChapelStandard[315387])(32931 'use' ByteBufferHelpers[31230])(32934 'use' BytesStringCommon[46748])(32937 'use' CTypes[51217])(32942 'use' ChplConfig[29952] 'only' compiledForSingleLocale)(32945 'use' BytesCasts[32924])(32950 'use' BytesStringCommon[46748] 'only' decodePolicy))
}