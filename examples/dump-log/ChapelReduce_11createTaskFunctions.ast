AST dump for ChapelReduce after pass createTaskFunctions.
Module use list: ChapelStandard ChapelLocks Reflection 

{
  function chpl__init_ChapelReduce[468423]() : void[4] "insert line file info" "module init"
  {
    (607544 return _void[46])
  }
  function chpl__scanStateResTypesMatch[129924](arg op[129926]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[607005] "RVV" "param" "temp"
    { scopeless type
      unknown call_type_tmp[577557] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[804659] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (804662 'move' call_tmp[804659](129937 call(129934 call (partial) generate _mt[203] op[129926])))
      (577561 'move' call_type_tmp[577557](129938 'typeof' call_tmp[804659]))
    }
    unknown resType[129930] "dead at end of block" "insert auto destroy" "type variable"
    (645784 'move' resType[129930] call_type_tmp[577557])
    (553552 'end of statement')
    { scopeless type
      unknown call_type_tmp[577563] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[804666] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (804669 'move' call_tmp[804666](129945 call identity _mt[203] op[129926]))
      (577567 'move' call_type_tmp[577563](129948 'typeof' call_tmp[804666]))
    }
    unknown stateType[129941] "dead at end of block" "insert auto destroy" "type variable"
    (645787 'move' stateType[129941] call_type_tmp[577563])
    (553553 'end of statement')
    unknown call_tmp[804671] "expr temp" "maybe param" "maybe type" "temp"
    (804674 'move' call_tmp[804671](129951 call == resType[129930] stateType[129941]))
    (607010 'move' ret[607005](607009 'deref' call_tmp[804671]))
    gotoReturn _end_chpl__scanStateResTypesMatch[607003] _end_chpl__scanStateResTypesMatch[607003]
    (553554 'end of statement' resType[129930] stateType[129941])
    label _end_chpl__scanStateResTypesMatch[607003]
    (607007 return ret[607005])
  }
  function chpl__scanIteratorZip[129957](arg op[129959]:_any[141](?), arg data[129961]:_any[141](?)) : _unknown[42] "@unstable"
  {
    unknown ret[607016] "RVV" "temp"
    (129965 call compilerWarning "scan has been serialized (see issue #12482)")
    (553557 'end of statement')
    unknown arr[129970] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter1[715113](arg iterator[715115]:_any[141](?), arg op[715152]:_any[141](?)) : _unknown[42] "do not unref for yields" "compiler generated" "iterator fn"
    {
      unknown ret[715163] "RVV" "temp"
      {
        unknown _indexOfInterest[715120] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[715121] "expr temp" "temp"
        (715130 'move' _iterator[715121](715128 call _getIteratorZip iterator[715115]))
        Defer
        {
          {
            (715145 call _freeIterator _iterator[715121])
          }
        }
        { scopeless type
          (715135 'move' _indexOfInterest[715120](715132 call iteratorIndex _iterator[715121]))
        }
        ForLoop[715122] order-independent for-expr
        {
          unknown d[129971] "index var" "insert auto destroy"
          (715156 'end of statement')
          (715140 'move' d[129971] _indexOfInterest[715120])
          (715157 'end of statement' d[129971])
          {
            {
              unknown yret[715167] "YVV" "temp"
              unknown call_tmp[715173] "expr temp" "maybe param" "maybe type" "temp"
              (715176 'move' call_tmp[715173](129978 call chpl__accumgen op[715152] d[129971]))
              (715170 'move' yret[715167](715169 'deref' call_tmp[715173]))
              (715117 yield yret[715167])
              (715159 'end of statement' d[129971])
            }
          }
          label _continueLabel[715125]
          _indexOfInterest[715120]
          _iterator[715121]
        }
        label _breakLabel[715126]
      }
      (715165 return ret[715163])
    }
    function chpl__forexpr1[715093](arg iterExpr[715096]:_any[141](?), arg op[715100]:_any[141](?)) : _unknown[42] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[715181] "RVV" "temp"
      unknown _iterator[715103] "expr temp" "maybe ref" "temp"
      (715105 'move' _iterator[715103] iterExpr[715096])
      unknown call_tmp[715188] "expr temp" "maybe param" "maybe type" "temp"
      (715191 'move' call_tmp[715188](715108 call chpl__loopexpr_iter1 _iterator[715103] op[715100]))
      (715186 'move' ret[715181](715185 'deref' call_tmp[715188]))
      (715183 return ret[715181])
    }
    unknown call_tmp[715193] "expr temp" "maybe param" "maybe type" "temp"
    (715196 'move' call_tmp[715193](129976 call _build_tuple(129975 'expand_tuple' data[129961])))
    unknown call_tmp[715198] "maybe param" "maybe type" "temp"
    (715201 'move' call_tmp[715198](715098 call chpl__forexpr1 call_tmp[715193] op[129959]))
    (715206 'iterator record set shape' call_tmp[715198](715204 'expand_tuple' data[129961]) 0)
    (645789 'init var' arr[129970] call_tmp[715198])
    (129985 'end of statement')
    (129988 call chpl__delete op[129959])
    (553558 'end of statement')
    (607021 'move' ret[607016](607020 'deref' arr[129970]))
    gotoReturn _end_chpl__scanIteratorZip[607014] _end_chpl__scanIteratorZip[607014]
    (553559 'end of statement' arr[129970])
    label _end_chpl__scanIteratorZip[607014]
    (607018 return ret[607016])
  }
  function chpl__scanIterator[129995](arg op[129997]:_any[141](?), arg data[129999]:_any[141](?)) : _unknown[42] "@unstable"
  {
    unknown ret[607027] "RVV" "temp"
    unknown tmp[486993] "maybe param" "temp"
    (487004 'move' tmp[486993](130010 call isArray data[129999]))
    unknown call_tmp[804676] "expr temp" "maybe param" "maybe type" "temp"
    (804679 'move' call_tmp[804676](487006 call _cond_invalid tmp[486993]))
    if call_tmp[804676]
    {
      (487009 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown supportsPar[130006] "dead at end of block" "param"
    unknown tmp[678744] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[678745] "maybe param" "temp"
    unknown call_tmp[804681] "expr temp" "maybe param" "maybe type" "temp"
    (804684 'move' call_tmp[804681](486994 call isTrue tmp[486993]))
    (678750 'move' tmp[678745](678748 call _cond_test call_tmp[804681]))
    if tmp[678745]
    {
      unknown tmp[678752] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[804686] "expr temp" "maybe param" "maybe type" "temp"
      (804689 'move' call_tmp[804686](130013 call canResolveMethod data[129999] "_scan" op[129997]))
      (678754 'move' tmp[678752](486997 call isTrue call_tmp[804686]))
      (678759 'move' tmp[678744](678756 '_paramFoldLogical' tmp[678745] tmp[678752]))
    }
    {
      (678764 'move' tmp[678744](678761 '_paramFoldLogical' tmp[678745] 0))
    }
    (645791 'init var' supportsPar[130006] tmp[678744])
    (130020 'end of statement')
    unknown call_tmp[804691] "expr temp" "maybe param" "maybe type" "temp"
    (804694 'move' call_tmp[804691](130056 call _cond_test supportsPar[130006]))
    if call_tmp[804691]
    {
      unknown call_tmp[804698] "expr temp" "maybe param" "maybe type" "temp"
      (804701 'move' call_tmp[804698](130029 call(130026 call (partial) _scan _mt[203] data[129999]) op[129997]))
      (607032 'move' ret[607027](607031 'deref' call_tmp[804698]))
      gotoReturn _end_chpl__scanIterator[607025] _end_chpl__scanIterator[607025]
    }
    {
      (130033 call compilerWarning "scan has been serialized (see issue #12482)")
      (553563 'end of statement')
      unknown arr[130036] "dead at end of block" "insert auto destroy"
      function chpl__loopexpr_iter2[715228](arg iterator[715230]:_any[141](?), arg op[715267]:_any[141](?)) : _unknown[42] "do not unref for yields" "compiler generated" "iterator fn"
      {
        unknown ret[715278] "RVV" "temp"
        {
          unknown _indexOfInterest[715235] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[715236] "expr temp" "temp"
          (715245 'move' _iterator[715236](715243 call _getIterator iterator[715230]))
          Defer
          {
            {
              (715260 call _freeIterator _iterator[715236])
            }
          }
          { scopeless type
            (715250 'move' _indexOfInterest[715235](715247 call iteratorIndex _iterator[715236]))
          }
          ForLoop[715237] order-independent for-expr
          {
            unknown d[130037] "index var" "insert auto destroy"
            (715271 'end of statement')
            (715255 'move' d[130037] _indexOfInterest[715235])
            (715272 'end of statement' d[130037])
            {
              {
                unknown yret[715282] "YVV" "temp"
                unknown call_tmp[715288] "expr temp" "maybe param" "maybe type" "temp"
                (715291 'move' call_tmp[715288](130041 call chpl__accumgen op[715267] d[130037]))
                (715285 'move' yret[715282](715284 'deref' call_tmp[715288]))
                (715232 yield yret[715282])
                (715274 'end of statement' d[130037])
              }
            }
            label _continueLabel[715240]
            _indexOfInterest[715235]
            _iterator[715236]
          }
          label _breakLabel[715241]
        }
        (715280 return ret[715278])
      }
      function chpl__forexpr2[715208](arg iterExpr[715211]:_any[141](?), arg op[715215]:_any[141](?)) : _unknown[42] "compiler generated" "compiler nested function" "fn returns iterator"
      {
        unknown ret[715296] "RVV" "temp"
        unknown _iterator[715218] "expr temp" "maybe ref" "temp"
        (715220 'move' _iterator[715218] iterExpr[715211])
        unknown call_tmp[715303] "expr temp" "maybe param" "maybe type" "temp"
        (715306 'move' call_tmp[715303](715223 call chpl__loopexpr_iter2 _iterator[715218] op[715215]))
        (715301 'move' ret[715296](715300 'deref' call_tmp[715303]))
        (715298 return ret[715296])
      }
      unknown call_tmp[715308] "maybe param" "maybe type" "temp"
      (715311 'move' call_tmp[715308](715213 call chpl__forexpr2 data[129999] op[129997]))
      (715315 'iterator record set shape' call_tmp[715308] data[129999] 0)
      (645793 'init var' arr[130036] call_tmp[715308])
      (130047 'end of statement')
      (130050 call chpl__delete op[129997])
      (553564 'end of statement')
      (607037 'move' ret[607027](607036 'deref' arr[130036]))
      gotoReturn _end_chpl__scanIterator[607025] _end_chpl__scanIterator[607025]
      (553565 'end of statement' arr[130036])
    }
    label _end_chpl__scanIterator[607025]
    (607029 return ret[607027])
    (396134 'used modules list'(130003 'use' Reflection[1804]))
  }
  function chpl__accumgen[130062](arg op[130064]:_any[141](?), arg d[130066]:_any[141](?)) : _unknown[42]
  {
    unknown ret[607043] "RVV" "temp"
    (130075 call(130072 call (partial) accumulate _mt[203] op[130064]) d[130066])
    (553567 'end of statement')
    unknown call_tmp[804707] "expr temp" "maybe param" "maybe type" "temp"
    (804710 'move' call_tmp[804707](130082 call(130079 call (partial) generate _mt[203] op[130064])))
    (607048 'move' ret[607043](607047 'deref' call_tmp[804707]))
    (607045 return ret[607043])
  }
  function chpl__reduceCombine[130085](arg globalOp[130087]:_any[141](?), arg localOp[130089]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    {
      const tmp[130121] "const" "temp"
      unknown call_tmp[804712] "expr temp" "maybe param" "maybe type" "temp"
      (804715 'move' call_tmp[804712](130118 '_wide_get_locale' globalOp[130087]))
      (130122 'move' tmp[130121](130119 'deref' call_tmp[804712]))
      {
        unknown call_tmp[804719] "expr temp" "maybe param" "maybe type" "temp"
        (804722 'move' call_tmp[804719](130095 call l _mt[203] globalOp[130087]))
        (130101 call(130098 call (partial) lock _mt[203] call_tmp[804719]))
        (553569 'end of statement')
        (130108 call(130105 call (partial) combine _mt[203] globalOp[130087]) localOp[130089])
        (553570 'end of statement')
        unknown call_tmp[804730] "expr temp" "maybe param" "maybe type" "temp"
        (804733 'move' call_tmp[804730](130111 call l _mt[203] globalOp[130087]))
        (130117 call(130114 call (partial) unlock _mt[203] call_tmp[804730]))
      }
      (130125 'elided on block' 0 tmp[130121])
    }
    (607050 return _void[46])
  }
  function chpl__cleanupLocalOp[130131](arg globalOp[130133]:_any[141](?), arg localOp[130135]:_any[141](?)) : _unknown[42] "inline" "no return value for void"
  {
    (130140 call chpl__delete localOp[130135])
    (607052 return _void[46])
  }
  function chpl_sumTypeIsSame[130145](arg eltType[130147]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[607056] "RVV" "param" "temp"
    unknown tmp[487014] "maybe param" "temp"
    (487025 'move' tmp[487014](130215 call isNumeric eltType[130147]))
    unknown call_tmp[804737] "expr temp" "maybe param" "maybe type" "temp"
    (804740 'move' call_tmp[804737](487027 call _cond_invalid tmp[487014]))
    if call_tmp[804737]
    {
      (487030 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[678771] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[678772] "maybe param" "temp"
    unknown call_tmp[804742] "expr temp" "maybe param" "maybe type" "temp"
    (804745 'move' call_tmp[804742](487015 call isTrue tmp[487014]))
    (678777 'move' tmp[678772](678775 call _cond_test call_tmp[804742]))
    if tmp[678772]
    {
      (678782 'move' tmp[678771](678779 '_paramFoldLogical' tmp[678772] 1))
    }
    {
      unknown tmp[678784] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[804747] "expr temp" "maybe param" "maybe type" "temp"
      (804750 'move' call_tmp[804747](130218 call isString eltType[130147]))
      (678786 'move' tmp[678784](487019 call isTrue call_tmp[804747]))
      (678791 'move' tmp[678771](678788 '_paramFoldLogical' tmp[678772] tmp[678784]))
    }
    unknown call_tmp[804752] "expr temp" "maybe param" "maybe type" "temp"
    (804755 'move' call_tmp[804752](130220 call _cond_test tmp[678771]))
    if call_tmp[804752]
    {
      (607061 'move' ret[607056](607060 'deref' 1))
      gotoReturn _end_chpl_sumTypeIsSame[607054] _end_chpl_sumTypeIsSame[607054]
    }
    {
      unknown call_tmp[804757] "expr temp" "maybe param" "maybe type" "temp"
      (804760 'move' call_tmp[804757](130205 call isDomain eltType[130147]))
      unknown call_tmp[804762] "expr temp" "maybe param" "maybe type" "temp"
      (804765 'move' call_tmp[804762](130207 call _cond_test call_tmp[804757]))
      if call_tmp[804762]
      {
        unknown d[130155] "dead at end of block" "insert auto destroy"
        (645795 'default init var' d[130155] eltType[130147])
        (130158 'end of statement')
        unknown call_tmp[804769] "expr temp" "maybe param" "maybe type" "temp"
        (804772 'move' call_tmp[804769](130166 call(130163 call (partial) isAssociative _mt[203] d[130155])))
        (607066 'move' ret[607056](607065 'deref' call_tmp[804769]))
        gotoReturn _end_chpl_sumTypeIsSame[607054] _end_chpl_sumTypeIsSame[607054]
        (553575 'end of statement' d[130155])
      }
      {
        unknown call_tmp[804774] "expr temp" "maybe param" "maybe type" "temp"
        (804777 'move' call_tmp[804774](130198 call isArray eltType[130147]))
        unknown call_tmp[804779] "expr temp" "maybe param" "maybe type" "temp"
        (804782 'move' call_tmp[804779](130200 call _cond_test call_tmp[804774]))
        if call_tmp[804779]
        {
          unknown arrInstType[130169] "dead at end of block" "insert auto destroy" "type variable"
          (645800 'move' arrInstType[130169](645797 'static field type' eltType[130147] "_instance"))
          unknown instanceObj[130175] "dead at end of block" "insert auto destroy"
          unknown call_tmp[804784] "expr temp" "maybe param" "maybe type" "temp"
          (804787 'move' call_tmp[804784](130177 'to nilable class from type' arrInstType[130169]))
          (645802 'default init var' instanceObj[130175] call_tmp[804784])
          (130179 'end of statement' arrInstType[130169])
          unknown instanceEltType[130181] "dead at end of block" "insert auto destroy" "type variable"
          (645811 'move' instanceEltType[130181](645804 'static typeof'(645806 call .(645808 call postfix! instanceObj[130175]) c"eltType")))
          (553578 'end of statement' instanceObj[130175])
          unknown call_tmp[804789] "expr temp" "maybe param" "maybe type" "temp"
          (804792 'move' call_tmp[804789](130192 call chpl_sumTypeIsSame instanceEltType[130181]))
          (607071 'move' ret[607056](607070 'deref' call_tmp[804789]))
          gotoReturn _end_chpl_sumTypeIsSame[607054] _end_chpl_sumTypeIsSame[607054]
          (553580 'end of statement' instanceEltType[130181])
        }
        {
          (607076 'move' ret[607056](607075 'deref' 0))
          gotoReturn _end_chpl_sumTypeIsSame[607054] _end_chpl_sumTypeIsSame[607054]
        }
      }
    }
    label _end_chpl_sumTypeIsSame[607054]
    (607058 return ret[607056])
  }
  function chpl__sumType[130227](arg eltType[130229]:_any[141](?)) type : _unknown[42]
  {
    unknown ret[607082] "RVV" "temp" "type variable"
    unknown call_tmp[804794] "expr temp" "maybe param" "maybe type" "temp"
    (804797 'move' call_tmp[804794](130319 call chpl_sumTypeIsSame eltType[130229]))
    unknown call_tmp[804799] "expr temp" "maybe param" "maybe type" "temp"
    (804802 'move' call_tmp[804799](130321 call _cond_test call_tmp[804794]))
    if call_tmp[804799]
    {
      (607087 'move' ret[607082](607086 'deref' eltType[130229]))
      gotoReturn _end_chpl__sumType[607080] _end_chpl__sumType[607080]
    }
    {
      unknown x[130237] "dead at end of block" "insert auto destroy"
      (645813 'default init var' x[130237] eltType[130229])
      (130240 'end of statement')
      unknown call_tmp[804804] "expr temp" "maybe param" "maybe type" "temp"
      (804807 'move' call_tmp[804804](130312 call isArray x[130237]))
      unknown call_tmp[804809] "expr temp" "maybe param" "maybe type" "temp"
      (804812 'move' call_tmp[804809](130314 call _cond_test call_tmp[804804]))
      if call_tmp[804809]
      {
        unknown xET[130243] "dead at end of block" "insert auto destroy" "type variable"
        (645819 'move' xET[130243](645816 call eltType _mt[203] x[130237]))
        (553584 'end of statement' x[130237])
        unknown xST[130250] "dead at end of block" "insert auto destroy" "type variable"
        (645824 'move' xST[130250](645822 call chpl__sumType xET[130243]))
        (553586 'end of statement' xET[130243])
        unknown call_tmp[804816] "expr temp" "maybe param" "maybe type" "temp"
        (804819 'move' call_tmp[804816](130267 call == xET[130243] xST[130250]))
        unknown call_tmp[804821] "expr temp" "maybe param" "maybe type" "temp"
        (804824 'move' call_tmp[804821](130271 call _cond_test call_tmp[804816]))
        if call_tmp[804821]
        {
          (607092 'move' ret[607082](607091 'deref' eltType[130229]))
          gotoReturn _end_chpl__sumType[607080] _end_chpl__sumType[607080]
        }
        {
          function chpl__loopexpr_iter3[715408](arg iterator[715410]:_any[141](?)) : _unknown[42] "do not unref for yields" "compiler generated" "iterator fn"
          {
            unknown ret[715548] "RVV" "temp"
            {
              unknown _indexOfInterest[715415] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[715416] "expr temp" "temp"
              (715425 'move' _iterator[715416](715423 call _getIterator iterator[715410]))
              Defer
              {
                {
                  (715442 call _freeIterator _iterator[715416])
                }
              }
              { scopeless type
                (715430 'move' _indexOfInterest[715415](715427 call iteratorIndex _iterator[715416]))
              }
              ForLoop[715417] for-expr
              {
                unknown chpl__elidedIdx[715432] "index var" "insert auto destroy"
                (715542 'end of statement')
                (715437 'move' chpl__elidedIdx[715432] _indexOfInterest[715415])
                (715543 'end of statement' chpl__elidedIdx[715432])
                {
                  {
                    unknown yret[715552] "YVV" "temp"
                    (715555 'move' yret[715552](715554 'deref' xST[130250]))
                    (715412 yield yret[715552])
                  }
                }
                label _continueLabel[715420]
                _indexOfInterest[715415]
                _iterator[715416]
              }
              label _breakLabel[715421]
            }
            (715550 return ret[715548])
          }
          function chpl__loopexpr_iter3[715449](param arg tag[715453]:iterKind[52144], arg iterator[715456]:_any[141](?)) : _unknown[42] "compiler generated" "fn returns iterator"
          {
            unknown ret[715583] "RVV" "temp"
            const _leaderIterator[715468] "const" "expr temp" "temp"
            (715473 'move' _leaderIterator[715468](715470 call _toLeader iterator[715456]))
            (715588 'move' ret[715583](715587 'deref' _leaderIterator[715468]))
            (715585 return ret[715583])
          }
          where {
            unknown tmp[715559] "maybe param" "temp"
            (715570 'move' tmp[715559](715458 call == tag[715453] leader[52138]))
            unknown call_tmp[715617] "expr temp" "maybe param" "maybe type" "temp"
            (715620 'move' call_tmp[715617](715572 call _cond_invalid tmp[715559]))
            if call_tmp[715617]
            {
              (715575 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[715590] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[715591] "maybe param" "temp"
            unknown call_tmp[715622] "expr temp" "maybe param" "maybe type" "temp"
            (715625 'move' call_tmp[715622](715560 call isTrue tmp[715559]))
            (715596 'move' tmp[715591](715594 call _cond_test call_tmp[715622]))
            if tmp[715591]
            {
              unknown tmp[715598] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[715627] "expr temp" "maybe param" "maybe type" "temp"
              (715630 'move' call_tmp[715627](715462 'call resolves' "_toLeader" iterator[715456]))
              (715600 'move' tmp[715598](715563 call isTrue call_tmp[715627]))
              (715605 'move' tmp[715590](715602 '_paramFoldLogical' tmp[715591] tmp[715598]))
            }
            {
              (715610 'move' tmp[715590](715607 '_paramFoldLogical' tmp[715591] 0))
            }
            (1001684 call chpl_statementLevelSymbol tmp[715590])
          }
          function chpl__loopexpr_iter3[715477](param arg tag[715481]:iterKind[52144], arg followThis[715484]:_any[141](?), arg iterator[715486]:_any[141](?)) : _unknown[42] "do not unref for yields" "compiler generated" "iterator fn"
          {
            unknown ret[715640] "RVV" "temp"
            const _followerIterator[715493] "const" "expr temp" "temp"
            (715499 'move' _followerIterator[715493](715495 call _toFollower iterator[715486] followThis[715484]))
            {
              unknown _indexOfInterest[715506] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[715507] "expr temp" "temp"
              (715516 'move' _iterator[715507](715514 call _getIterator _followerIterator[715493]))
              Defer
              {
                {
                  (715533 call _freeIterator _iterator[715507])
                }
              }
              { scopeless type
                (715521 'move' _indexOfInterest[715506](715518 call iteratorIndex _iterator[715507]))
              }
              ForLoop[715508] order-independent lowered-forall for-expr
              {
                unknown chpl__elidedIdx[715523] "index var" "insert auto destroy"
                (715634 'end of statement')
                (715528 'move' chpl__elidedIdx[715523] _indexOfInterest[715506])
                (715635 'end of statement' chpl__elidedIdx[715523])
                {
                  {
                    unknown yret[715644] "YVV" "temp"
                    (715647 'move' yret[715644](715646 'deref' xST[130250]))
                    (715502 yield yret[715644])
                  }
                }
                label _continueLabel[715511]
                _indexOfInterest[715506]
                _iterator[715507]
              }
              label _breakLabel[715512]
            }
            (715642 return ret[715640])
          }
          where {
            (715489 call == tag[715481] follower[52140])
          }
          function chpl__forallexpr3[715317](arg iterExpr[715320]:_any[141](?)) : _unknown[42] "compiler generated" "compiler nested function" "maybe array type" "maybe type" "fn returns iterator"
          {
            unknown ret[715657] "RVV" "maybe type" "temp"
            function _isArrayTypeFn[715327]() : _unknown[42] "compiler generated" "inline"
            {
              unknown _iterator[715332] "temp"
              (715337 'move' _iterator[715332](715334 call _getIterator iterExpr[715320]))
              unknown _indexOfInterest[715339] "an _indexOfInterest or chpl__followIdx variable" "temp"
              (715344 'move' _indexOfInterest[715339](715341 call iteratorIndex _iterator[715332]))
              unknown chpl__elidedIdx[715347] "index var" "insert auto destroy"
              (715352 'move' chpl__elidedIdx[715347] _indexOfInterest[715339])
              unknown isType_result[715354] "param" "temp"
              { scopeless
                Try!
                {
                  {
                    {
                      (715360 'move' isType_result[715354](715358 call isType xST[130250]))
                    }
                  }
                }
              }
              if isType_result[715354]
              {
                (715366 'move' _isArrayType[715330] 1)
              }
              {
                (715369 'move' _isArrayType[715330] 0)
              }
              (715653 return _void[46])
            }
            unknown _isArrayType[715330] "maybe param" "temp"
            { scopeless type
              (715376 call _isArrayTypeFn[715327])
            }
            if _isArrayType[715330]
            {
              unknown _arrayType[715378] "expr temp" "maybe type" "temp"
              unknown _domain[715381] "expr temp" "no auto destroy" "temp"
              (715386 'move' _domain[715381](715383 call chpl__ensureDomainExpr iterExpr[715320]))
              {
                (715393 'move' _arrayType[715378](715390 call chpl__buildArrayRuntimeType _domain[715381] xST[130250]))
              }
              (715662 'move' ret[715657](715661 'deref' _arrayType[715378]))
              gotoReturn _end_chpl__forallexpr3[715655] _end_chpl__forallexpr3[715655]
            }
            {
              unknown _iterator[715399] "expr temp" "maybe ref" "temp"
              (715401 'move' _iterator[715399] iterExpr[715320])
              unknown call_tmp[715671] "expr temp" "maybe param" "maybe type" "temp"
              (715674 'move' call_tmp[715671](715404 call chpl__loopexpr_iter3 _iterator[715399]))
              (715667 'move' ret[715657](715666 'deref' call_tmp[715671]))
              gotoReturn _end_chpl__forallexpr3[715655] _end_chpl__forallexpr3[715655]
            }
            label _end_chpl__forallexpr3[715655]
            (715659 return ret[715657])
          }
          unknown call_tmp[715678] "expr temp" "maybe param" "used in type" "maybe type" "temp"
          (715681 'move' call_tmp[715678](130260 call _dom _mt[203] x[130237]))
          unknown call_tmp[715683] "expr temp" "maybe param" "used in type" "maybe type" "temp"
          (715686 'move' call_tmp[715683](715322 call chpl__forallexpr3 call_tmp[715678]))
          (715690 'iterator record set shape' call_tmp[715683] call_tmp[715678] 2)
          (607097 'move' ret[607082](607096 'deref' call_tmp[715683]))
          gotoReturn _end_chpl__sumType[607080] _end_chpl__sumType[607080]
          (553589 'end of statement' x[130237] xST[130250])
        }
      }
      {
        unknown call_tmp[804826] "expr temp" "maybe param" "maybe type" "temp"
        (804829 'move' call_tmp[804826](130294 call canResolve "+" x[130237] x[130237]))
        unknown call_tmp[804831] "expr temp" "maybe param" "maybe type" "temp"
        (804834 'move' call_tmp[804831](130291 call ! call_tmp[804826]))
        unknown call_tmp[804836] "expr temp" "maybe param" "maybe type" "temp"
        (804839 'move' call_tmp[804836](130300 call _cond_test call_tmp[804831]))
        if call_tmp[804836]
        {
          unknown call_tmp[804841] "expr temp" "maybe param" "maybe type" "temp"
          (804844 'move' call_tmp[804841](130286 call : eltType[130229] string[244]))
          (130282 call compilerError "+ reduce cannot be used on values of the type " call_tmp[804841])
        }
        { scopeless type
          unknown call_type_tmp[577569] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[804846] "expr temp" "maybe param" "used in type" "maybe type" "temp"
          (804849 'move' call_tmp[804846](130306 call + x[130237] x[130237]))
          (577573 'move' call_type_tmp[577569](130310 'typeof' call_tmp[804846]))
        }
        (607102 'move' ret[607082](607101 'deref' call_type_tmp[577569]))
        gotoReturn _end_chpl__sumType[607080] _end_chpl__sumType[607080]
        (553593 'end of statement' x[130237])
        (396136 'used modules list'(130279 'use' Reflection[1804]))
      }
    }
    label _end_chpl__sumType[607080]
    (607084 return ret[607082])
  }
  function ReduceScanOp[130334].super[1074999](arg _mt[1075001]:_MT[201], arg this[1075003]:ReduceScanOp[130334]) : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1075013] "RVV" "temp"
    unknown call_tmp[1075020] "expr temp" "maybe param" "maybe type" "temp"
    (1075023 'move' call_tmp[1075020](1075007 '.v' this[1075003] c"super"))
    (1075018 'move' ret[1075013](1075017 'deref' call_tmp[1075020]))
    (1075015 return ret[1075013])
  }
  function ReduceScanOp[130334].l[1075025](arg _mt[1075027]:_MT[201], arg this[1075029]:ReduceScanOp[130334]) ref : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1075039] "RVV" "temp"
    unknown call_tmp[1075046] "expr temp" "maybe param" "maybe type" "temp"
    (1075049 'move' call_tmp[1075046](1075033 '.' this[1075029] c"l"))
    (1075044 'move' ret[1075039](1075043 'addr of' call_tmp[1075046]))
    (1075041 return ret[1075039])
  }
  function ReduceScanOp[130334].init[1075051](arg _mt[1075053]:_MT[201], arg this[1075054]:ReduceScanOp[130334], in arg l[1075065]:chpl_LocalSpinlock[85418] =
  _typeDefaultT[217]) : void[4] "compiler generated" "default initializer" "inline" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[1075078] "temporary of super field" "temp"
    (1075080 'move' super_tmp[1075078](1075077 '.v' this[1075054] c"super"))
    (1075064 call(1075062 call (partial) init _mt[203] super_tmp[1075078]))
    (1075104 'end of statement')
    unknown tmp[1075083] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[1075107] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[1075119] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1075122 'move' call_tmp[1075119](1075085 '.v' this[1075054] c"super"))
      (1075111 'move' call_type_tmp[1075107](1075088 'typeof' call_tmp[1075119]))
    }
    (1075089 'move' tmp[1075083] call_type_tmp[1075107])
    unknown call_tmp[1075124] "maybe param" "maybe type" "temp"
    (1075127 'move' call_tmp[1075124](1075094 'cast' tmp[1075083] this[1075054]))
    unknown chpl__thisAsParent[1075091] "dead at end of block" "insert auto destroy" "temp"
    (1075115 'init var' chpl__thisAsParent[1075091] call_tmp[1075124] tmp[1075083])
    (1075097 'setcid' chpl__thisAsParent[1075091])
    (1075099 'init field' this[1075054] c"l" l[1075065])
    (1075105 'end of statement')
    (1075102 'setcid' this[1075054])
    (1075113 return _void[46])
  }
  function ReduceScanOp[130334].deinit[1075129](arg _mt[1075131]:_MT[201], arg this[1075133]:ReduceScanOp[130334]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (1075141 return _void[46])
  }
  function ReduceScanOp[130334].serialize[1075143](arg _mt[1075147]:_MT[201], arg this[1075145]:ReduceScanOp[130334], arg writer[1075146]:_any[141](?), ref arg serializer[1075151]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (1075154 call serializeDefaultImpl writer[1075146] serializer[1075151] this[1075145])
    (1075160 return _void[46])
  }
  function ReduceScanOp[130334].deserialize[1075162](arg _mt[1075166]:_MT[201], arg this[1075164]:ReduceScanOp[130334], arg reader[1075165]:_any[141](?), ref arg deserializer[1075171]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    unknown _deser_temp[1075173] "temp"
    (1075175 'move' _deser_temp[1075173] this[1075164])
    (1075178 call deserializeDefaultImpl reader[1075165] deserializer[1075171] _deser_temp[1075173])
    (1075184 return _void[46])
  }
  type ReduceScanOp[130334] val super[397462]:RootClass[236] "super class" val l[130329]:chpl_LocalSpinlock[85418] chpl_LocalSpinlock[85418]
  function SumReduceScanOp[130447](?).identity[130348](arg _mt[130352]:_MT[201], arg this[130350]:SumReduceScanOp[130447](?)) : _unknown[42] "inline" "method" "primary method" "no parens"
  {
    unknown ret[607108] "RVV" "temp"
    unknown x[130356] "dead at end of block" "insert auto destroy"
    unknown call_tmp[804853] "expr temp" "maybe param" "maybe type" "temp"
    (804856 'move' call_tmp[804853](429503 call eltType _mt[203] this[130350]))
    unknown call_tmp[804858] "expr temp" "maybe param" "maybe type" "temp"
    (804861 'move' call_tmp[804858](130358 call chpl__sumType call_tmp[804853]))
    (645826 'default init var' x[130356] call_tmp[804858])
    (130361 'end of statement')
    (607113 'move' ret[607108](607112 'deref' x[130356]))
    gotoReturn _end_identity[607106] _end_identity[607106]
    (553595 'end of statement' x[130356])
    label _end_identity[607106]
    (607110 return ret[607108])
  }
  function SumReduceScanOp[130447](?).accumulate[130366](arg _mt[130372]:_MT[201], arg this[130368]:SumReduceScanOp[130447](?), arg x[130370]:_any[141](?)) : _unknown[42] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[804865] "expr temp" "maybe param" "maybe type" "temp"
    (804868 'move' call_tmp[804865](429509 call value _mt[203] this[130368]))
    (130375 call += call_tmp[804865] x[130370])
    (607117 return _void[46])
  }
  function SumReduceScanOp[130447](?).accumulateOntoState[130381](arg _mt[130389]:_MT[201], arg this[130383]:SumReduceScanOp[130447](?), ref arg state[130385]:_any[141](?), arg x[130387]:_any[141](?)) : _unknown[42] "inline" "method" "primary method" "no return value for void"
  {
    (130392 call += state[130385] x[130387])
    (607119 return _void[46])
  }
  function SumReduceScanOp[130447](?).combine[130398](arg _mt[130404]:_MT[201], arg this[130400]:SumReduceScanOp[130447](?), arg x[130402]:_any[141](?)) : _unknown[42] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[804872] "expr temp" "maybe param" "maybe type" "temp"
    (804875 'move' call_tmp[804872](429517 call value _mt[203] this[130400]))
    unknown call_tmp[804879] "expr temp" "maybe param" "maybe type" "temp"
    (804882 'move' call_tmp[804879](130413 call value _mt[203] x[130402]))
    (130407 call += call_tmp[804872] call_tmp[804879])
    (607121 return _void[46])
  }
  function SumReduceScanOp[130447](?).generate[130418](arg _mt[130422]:_MT[201], arg this[130420]:SumReduceScanOp[130447](?)) : _unknown[42] "inline" "method" "primary method"
  {
    unknown ret[607125] "RVV" "temp"
    unknown call_tmp[804886] "expr temp" "maybe param" "maybe type" "temp"
    (804889 'move' call_tmp[804886](429522 call value _mt[203] this[130420]))
    (607130 'move' ret[607125](607129 'deref' call_tmp[804886]))
    (607127 return ret[607125])
  }
  function SumReduceScanOp[130447](?).clone[130429](arg _mt[130433]:_MT[201], arg this[130431]:SumReduceScanOp[130447](?)) : _unknown[42] "inline" "method" "primary method"
  {
    unknown ret[607134] "RVV" "temp"
    unknown call_tmp[804893] "expr temp" "maybe param" "maybe type" "temp"
    (804896 'move' call_tmp[804893](429531 call eltType _mt[203] this[130431]))
    unknown call_tmp[804898] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (804901 'move' call_tmp[804898](1000102 'new' SumReduceScanOp[429526](?)(eltType = call_tmp[804893])(_chpl_manager = unmanaged[183](?))))
    (607139 'move' ret[607134](607138 'deref' call_tmp[804898]))
    (607136 return ret[607134])
  }
  function SumReduceScanOp[130447](?).super[1075186](arg _mt[1075188]:_MT[201], arg this[1075190]:SumReduceScanOp[130447](?)) : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1075200] "RVV" "temp"
    unknown call_tmp[1075207] "expr temp" "maybe param" "maybe type" "temp"
    (1075210 'move' call_tmp[1075207](1075194 '.v' this[1075190] c"super"))
    (1075205 'move' ret[1075200](1075204 'deref' call_tmp[1075207]))
    (1075202 return ret[1075200])
  }
  function SumReduceScanOp[1075217](?).eltType[1075212](arg _mt[1075214]:_MT[201], arg this[1075219]:SumReduceScanOp[1075217](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1075254] "RVV" "temp" "type variable"
    unknown borrowOfThis[1075221]
    (1075246 'end of statement')
    (1075227 'move' borrowOfThis[1075221](1075223 call : this[1075219] _borrowedNonNilable[177](?)))
    (1075247 'end of statement' borrowOfThis[1075221])
    unknown call_tmp[1075268] "expr temp" "maybe param" "maybe type" "temp"
    (1075271 'move' call_tmp[1075268](1075236 'is bound' borrowOfThis[1075221] c"eltType"))
    if call_tmp[1075268]
    {
      unknown call_tmp[1075273] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1075276 'move' call_tmp[1075273](1075231 '.v' borrowOfThis[1075221] c"eltType"))
      unknown call_tmp[1075278] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1075281 'move' call_tmp[1075278](1075232 call chpl_checkLegalTypeFieldAccessor this[1075219] call_tmp[1075273] "eltType"))
      (1075259 'move' ret[1075254](1075258 'deref' call_tmp[1075278]))
      gotoReturn _end_eltType[1075252] _end_eltType[1075252]
      (1075249 'end of statement' borrowOfThis[1075221])
    }
    {
      (1075264 'move' ret[1075254](1075263 'deref' _uninstantiated[225]))
      gotoReturn _end_eltType[1075252] _end_eltType[1075252]
    }
    label _end_eltType[1075252]
    (1075256 return ret[1075254])
  }
  function SumReduceScanOp[1075217](?).eltType[1075283](arg _mt[1075285]:_MT[201], arg this[1075287]:SumReduceScanOp[1075217](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1075322] "RVV" "temp" "type variable"
    unknown borrowOfThis[1075289] "type variable"
    (1075314 'end of statement')
    (1075295 'move' borrowOfThis[1075289](1075291 call : this[1075287] _borrowedNonNilable[177](?)))
    (1075315 'end of statement' borrowOfThis[1075289])
    unknown call_tmp[1075336] "expr temp" "maybe param" "maybe type" "temp"
    (1075339 'move' call_tmp[1075336](1075304 'is bound' borrowOfThis[1075289] c"eltType"))
    if call_tmp[1075336]
    {
      unknown call_tmp[1075341] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1075344 'move' call_tmp[1075341](1075299 '.v' borrowOfThis[1075289] c"eltType"))
      unknown call_tmp[1075346] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1075349 'move' call_tmp[1075346](1075300 call chpl_checkLegalTypeFieldAccessor this[1075287] call_tmp[1075341] "eltType"))
      (1075327 'move' ret[1075322](1075326 'deref' call_tmp[1075346]))
      gotoReturn _end_eltType[1075320] _end_eltType[1075320]
      (1075317 'end of statement' borrowOfThis[1075289])
    }
    {
      (1075332 'move' ret[1075322](1075331 'deref' _uninstantiated[225]))
      gotoReturn _end_eltType[1075320] _end_eltType[1075320]
    }
    label _end_eltType[1075320]
    (1075324 return ret[1075322])
  }
  function SumReduceScanOp[130447](?).value[1075351](arg _mt[1075353]:_MT[201], arg this[1075355]:SumReduceScanOp[130447](?)) ref : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1075365] "RVV" "temp"
    unknown call_tmp[1075372] "expr temp" "maybe param" "maybe type" "temp"
    (1075375 'move' call_tmp[1075372](1075359 '.' this[1075355] c"value"))
    (1075370 'move' ret[1075365](1075369 'addr of' call_tmp[1075372]))
    (1075367 return ret[1075365])
  }
  function SumReduceScanOp[130447](?).init[1075377](arg _mt[1075379]:_MT[201], arg this[1075380]:SumReduceScanOp[130447](?), in arg l[1075393]:chpl_LocalSpinlock[85418] =
  _typeDefaultT[217], arg eltType[1075396]:_any[141](?), in arg value[1075405] :
  (1075408 call chpl__sumType eltType[1075396]) =
  _typeDefaultT[217]) : void[4] "compiler generated" "default initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[1075422] "temporary of super field" "temp"
    (1075424 'move' super_tmp[1075422](1075421 '.v' this[1075380] c"super"))
    (1075390 call(1075388 call (partial) init _mt[203] super_tmp[1075422]) l[1075393])
    (1075451 'end of statement')
    unknown tmp[1075427] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[1075455] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[1075467] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1075470 'move' call_tmp[1075467](1075429 '.v' this[1075380] c"super"))
      (1075459 'move' call_type_tmp[1075455](1075432 'typeof' call_tmp[1075467]))
    }
    (1075433 'move' tmp[1075427] call_type_tmp[1075455])
    unknown call_tmp[1075472] "maybe param" "maybe type" "temp"
    (1075475 'move' call_tmp[1075472](1075438 'cast' tmp[1075427] this[1075380]))
    unknown chpl__thisAsParent[1075435] "dead at end of block" "insert auto destroy" "temp"
    (1075463 'init var' chpl__thisAsParent[1075435] call_tmp[1075472] tmp[1075427])
    (1075441 'setcid' chpl__thisAsParent[1075435])
    (1075443 'init field' this[1075380] c"eltType" eltType[1075396])
    (1075452 'end of statement')
    (1075446 'init field' this[1075380] c"value" value[1075405])
    (1075453 'end of statement')
    (1075449 'setcid' this[1075380])
    (1075461 return _void[46])
  }
  function SumReduceScanOp[130447](?).deinit[1075477](arg _mt[1075479]:_MT[201], arg this[1075481]:SumReduceScanOp[130447](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (1075489 return _void[46])
  }
  function SumReduceScanOp[130447](?).serialize[1075491](arg _mt[1075495]:_MT[201], arg this[1075493]:SumReduceScanOp[130447](?), arg writer[1075494]:_any[141](?), ref arg serializer[1075499]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (1075502 call serializeDefaultImpl writer[1075494] serializer[1075499] this[1075493])
    (1075508 return _void[46])
  }
  function SumReduceScanOp[130447](?).deserialize[1075510](arg _mt[1075514]:_MT[201], arg this[1075512]:SumReduceScanOp[130447](?), arg reader[1075513]:_any[141](?), ref arg deserializer[1075519]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    unknown _deser_temp[1075521] "temp"
    (1075523 'move' _deser_temp[1075521] this[1075512])
    (1075526 call deserializeDefaultImpl reader[1075513] deserializer[1075519] _deser_temp[1075521])
    (1075532 return _void[46])
  }
  type SumReduceScanOp[130447](?) val super[397464]:ReduceScanOp[130334] "super class" unknown eltType[130339] "type variable" unknown value[130342](130344 call chpl__sumType eltType[130339])
  type SumReduceScanOp[1075217](?)
  type SumReduceScanOp[429526](?)
  function ProductReduceScanOp[130553](?).identity[130461](arg _mt[130465]:_MT[201], arg this[130463]:ProductReduceScanOp[130553](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[607143] "RVV" "temp"
    unknown call_tmp[804905] "expr temp" "maybe param" "maybe type" "temp"
    (804908 'move' call_tmp[804905](429537 call eltType _mt[203] this[130463]))
    unknown call_tmp[804910] "expr temp" "maybe param" "maybe type" "temp"
    (804913 'move' call_tmp[804910](130470 call _prod_id call_tmp[804905]))
    (607148 'move' ret[607143](607147 'deref' call_tmp[804910]))
    (607145 return ret[607143])
  }
  function ProductReduceScanOp[130553](?).accumulate[130474](arg _mt[130480]:_MT[201], arg this[130476]:ProductReduceScanOp[130553](?), arg x[130478]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[804917] "expr temp" "maybe param" "maybe type" "temp"
    (804920 'move' call_tmp[804917](429542 call value _mt[203] this[130476]))
    (130483 call *= call_tmp[804917] x[130478])
    (607150 return _void[46])
  }
  function ProductReduceScanOp[130553](?).accumulateOntoState[130489](arg _mt[130497]:_MT[201], arg this[130491]:ProductReduceScanOp[130553](?), ref arg state[130493]:_any[141](?), arg x[130495]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (130500 call *= state[130493] x[130495])
    (607152 return _void[46])
  }
  function ProductReduceScanOp[130553](?).combine[130506](arg _mt[130512]:_MT[201], arg this[130508]:ProductReduceScanOp[130553](?), arg x[130510]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[804924] "expr temp" "maybe param" "maybe type" "temp"
    (804927 'move' call_tmp[804924](429550 call value _mt[203] this[130508]))
    unknown call_tmp[804931] "expr temp" "maybe param" "maybe type" "temp"
    (804934 'move' call_tmp[804931](130519 call value _mt[203] x[130510]))
    (130515 call *= call_tmp[804924] call_tmp[804931])
    (607154 return _void[46])
  }
  function ProductReduceScanOp[130553](?).generate[130524](arg _mt[130528]:_MT[201], arg this[130526]:ProductReduceScanOp[130553](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[607158] "RVV" "temp"
    unknown call_tmp[804938] "expr temp" "maybe param" "maybe type" "temp"
    (804941 'move' call_tmp[804938](429555 call value _mt[203] this[130526]))
    (607163 'move' ret[607158](607162 'deref' call_tmp[804938]))
    (607160 return ret[607158])
  }
  function ProductReduceScanOp[130553](?).clone[130535](arg _mt[130539]:_MT[201], arg this[130537]:ProductReduceScanOp[130553](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[607167] "RVV" "temp"
    unknown call_tmp[804945] "expr temp" "maybe param" "maybe type" "temp"
    (804948 'move' call_tmp[804945](429564 call eltType _mt[203] this[130537]))
    unknown call_tmp[804950] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (804953 'move' call_tmp[804950](1000103 'new' ProductReduceScanOp[429559](?)(eltType = call_tmp[804945])(_chpl_manager = unmanaged[183](?))))
    (607172 'move' ret[607167](607171 'deref' call_tmp[804950]))
    (607169 return ret[607167])
  }
  function ProductReduceScanOp[130553](?).super[1075534](arg _mt[1075536]:_MT[201], arg this[1075538]:ProductReduceScanOp[130553](?)) : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1075548] "RVV" "temp"
    unknown call_tmp[1075555] "expr temp" "maybe param" "maybe type" "temp"
    (1075558 'move' call_tmp[1075555](1075542 '.v' this[1075538] c"super"))
    (1075553 'move' ret[1075548](1075552 'deref' call_tmp[1075555]))
    (1075550 return ret[1075548])
  }
  function ProductReduceScanOp[1075565](?).eltType[1075560](arg _mt[1075562]:_MT[201], arg this[1075567]:ProductReduceScanOp[1075565](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1075602] "RVV" "temp" "type variable"
    unknown borrowOfThis[1075569]
    (1075594 'end of statement')
    (1075575 'move' borrowOfThis[1075569](1075571 call : this[1075567] _borrowedNonNilable[177](?)))
    (1075595 'end of statement' borrowOfThis[1075569])
    unknown call_tmp[1075616] "expr temp" "maybe param" "maybe type" "temp"
    (1075619 'move' call_tmp[1075616](1075584 'is bound' borrowOfThis[1075569] c"eltType"))
    if call_tmp[1075616]
    {
      unknown call_tmp[1075621] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1075624 'move' call_tmp[1075621](1075579 '.v' borrowOfThis[1075569] c"eltType"))
      unknown call_tmp[1075626] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1075629 'move' call_tmp[1075626](1075580 call chpl_checkLegalTypeFieldAccessor this[1075567] call_tmp[1075621] "eltType"))
      (1075607 'move' ret[1075602](1075606 'deref' call_tmp[1075626]))
      gotoReturn _end_eltType[1075600] _end_eltType[1075600]
      (1075597 'end of statement' borrowOfThis[1075569])
    }
    {
      (1075612 'move' ret[1075602](1075611 'deref' _uninstantiated[225]))
      gotoReturn _end_eltType[1075600] _end_eltType[1075600]
    }
    label _end_eltType[1075600]
    (1075604 return ret[1075602])
  }
  function ProductReduceScanOp[1075565](?).eltType[1075631](arg _mt[1075633]:_MT[201], arg this[1075635]:ProductReduceScanOp[1075565](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1075670] "RVV" "temp" "type variable"
    unknown borrowOfThis[1075637] "type variable"
    (1075662 'end of statement')
    (1075643 'move' borrowOfThis[1075637](1075639 call : this[1075635] _borrowedNonNilable[177](?)))
    (1075663 'end of statement' borrowOfThis[1075637])
    unknown call_tmp[1075684] "expr temp" "maybe param" "maybe type" "temp"
    (1075687 'move' call_tmp[1075684](1075652 'is bound' borrowOfThis[1075637] c"eltType"))
    if call_tmp[1075684]
    {
      unknown call_tmp[1075689] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1075692 'move' call_tmp[1075689](1075647 '.v' borrowOfThis[1075637] c"eltType"))
      unknown call_tmp[1075694] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1075697 'move' call_tmp[1075694](1075648 call chpl_checkLegalTypeFieldAccessor this[1075635] call_tmp[1075689] "eltType"))
      (1075675 'move' ret[1075670](1075674 'deref' call_tmp[1075694]))
      gotoReturn _end_eltType[1075668] _end_eltType[1075668]
      (1075665 'end of statement' borrowOfThis[1075637])
    }
    {
      (1075680 'move' ret[1075670](1075679 'deref' _uninstantiated[225]))
      gotoReturn _end_eltType[1075668] _end_eltType[1075668]
    }
    label _end_eltType[1075668]
    (1075672 return ret[1075670])
  }
  function ProductReduceScanOp[130553](?).value[1075699](arg _mt[1075701]:_MT[201], arg this[1075703]:ProductReduceScanOp[130553](?)) ref : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1075713] "RVV" "temp"
    unknown call_tmp[1075720] "expr temp" "maybe param" "maybe type" "temp"
    (1075723 'move' call_tmp[1075720](1075707 '.' this[1075703] c"value"))
    (1075718 'move' ret[1075713](1075717 'addr of' call_tmp[1075720]))
    (1075715 return ret[1075713])
  }
  function ProductReduceScanOp[130553](?).init[1075725](arg _mt[1075727]:_MT[201], arg this[1075728]:ProductReduceScanOp[130553](?), in arg l[1075741]:chpl_LocalSpinlock[85418] =
  _typeDefaultT[217], arg eltType[1075744]:_any[141](?), in arg value[1075753] :
  (1075760 call _prod_id eltType[1075744]) =
  (1075755 call _prod_id eltType[1075744])) : void[4] "compiler generated" "default initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[1075772] "temporary of super field" "temp"
    (1075774 'move' super_tmp[1075772](1075771 '.v' this[1075728] c"super"))
    (1075738 call(1075736 call (partial) init _mt[203] super_tmp[1075772]) l[1075741])
    (1075801 'end of statement')
    unknown tmp[1075777] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[1075805] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[1075817] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1075820 'move' call_tmp[1075817](1075779 '.v' this[1075728] c"super"))
      (1075809 'move' call_type_tmp[1075805](1075782 'typeof' call_tmp[1075817]))
    }
    (1075783 'move' tmp[1075777] call_type_tmp[1075805])
    unknown call_tmp[1075822] "maybe param" "maybe type" "temp"
    (1075825 'move' call_tmp[1075822](1075788 'cast' tmp[1075777] this[1075728]))
    unknown chpl__thisAsParent[1075785] "dead at end of block" "insert auto destroy" "temp"
    (1075813 'init var' chpl__thisAsParent[1075785] call_tmp[1075822] tmp[1075777])
    (1075791 'setcid' chpl__thisAsParent[1075785])
    (1075793 'init field' this[1075728] c"eltType" eltType[1075744])
    (1075802 'end of statement')
    (1075796 '.=' this[1075728] c"value" value[1075753])
    (1075803 'end of statement')
    (1075799 'setcid' this[1075728])
    (1075811 return _void[46])
  }
  function ProductReduceScanOp[130553](?).deinit[1075827](arg _mt[1075829]:_MT[201], arg this[1075831]:ProductReduceScanOp[130553](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (1075839 return _void[46])
  }
  function ProductReduceScanOp[130553](?).serialize[1075841](arg _mt[1075845]:_MT[201], arg this[1075843]:ProductReduceScanOp[130553](?), arg writer[1075844]:_any[141](?), ref arg serializer[1075849]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (1075852 call serializeDefaultImpl writer[1075844] serializer[1075849] this[1075843])
    (1075858 return _void[46])
  }
  function ProductReduceScanOp[130553](?).deserialize[1075860](arg _mt[1075864]:_MT[201], arg this[1075862]:ProductReduceScanOp[130553](?), arg reader[1075863]:_any[141](?), ref arg deserializer[1075869]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    unknown _deser_temp[1075871] "temp"
    (1075873 'move' _deser_temp[1075871] this[1075862])
    (1075876 call deserializeDefaultImpl reader[1075863] deserializer[1075869] _deser_temp[1075871])
    (1075882 return _void[46])
  }
  type ProductReduceScanOp[130553](?) val super[397466]:ReduceScanOp[130334] "super class" unknown eltType[130452] "type variable" unknown value[130455](130457 call _prod_id eltType[130452])
  type ProductReduceScanOp[1075565](?)
  type ProductReduceScanOp[429559](?)
  function MaxReduceScanOp[130668](?).identity[130567](arg _mt[130571]:_MT[201], arg this[130569]:MaxReduceScanOp[130668](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[607176] "RVV" "temp"
    unknown call_tmp[804957] "expr temp" "maybe param" "maybe type" "temp"
    (804960 'move' call_tmp[804957](429570 call eltType _mt[203] this[130569]))
    unknown call_tmp[804962] "expr temp" "maybe param" "maybe type" "temp"
    (804965 'move' call_tmp[804962](130576 call min call_tmp[804957]))
    (607181 'move' ret[607176](607180 'deref' call_tmp[804962]))
    (607178 return ret[607176])
  }
  function MaxReduceScanOp[130668](?).accumulate[130580](arg _mt[130586]:_MT[201], arg this[130582]:MaxReduceScanOp[130668](?), arg x[130584]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[804969] "expr temp" "maybe param" "maybe type" "temp"
    (804972 'move' call_tmp[804969](429575 call value _mt[203] this[130582]))
    unknown call_tmp[804976] "expr temp" "maybe param" "maybe type" "temp"
    (804979 'move' call_tmp[804976](429581 call value _mt[203] this[130582]))
    unknown call_tmp[804981] "expr temp" "maybe param" "maybe type" "temp"
    (804984 'move' call_tmp[804981](130593 call max x[130584] call_tmp[804976]))
    (130589 call = call_tmp[804969] call_tmp[804981])
    (607183 return _void[46])
  }
  function MaxReduceScanOp[130668](?).accumulateOntoState[130598](arg _mt[130606]:_MT[201], arg this[130600]:MaxReduceScanOp[130668](?), ref arg state[130602]:_any[141](?), arg x[130604]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[804986] "expr temp" "maybe param" "maybe type" "temp"
    (804989 'move' call_tmp[804986](130613 call max state[130602] x[130604]))
    (130609 call = state[130602] call_tmp[804986])
    (607185 return _void[46])
  }
  function MaxReduceScanOp[130668](?).combine[130618](arg _mt[130624]:_MT[201], arg this[130620]:MaxReduceScanOp[130668](?), arg x[130622]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[804993] "expr temp" "maybe param" "maybe type" "temp"
    (804996 'move' call_tmp[804993](429589 call value _mt[203] this[130620]))
    unknown call_tmp[805000] "expr temp" "maybe param" "maybe type" "temp"
    (805003 'move' call_tmp[805000](429594 call value _mt[203] this[130620]))
    unknown call_tmp[805007] "expr temp" "maybe param" "maybe type" "temp"
    (805010 'move' call_tmp[805007](130634 call value _mt[203] x[130622]))
    unknown call_tmp[805012] "expr temp" "maybe param" "maybe type" "temp"
    (805015 'move' call_tmp[805012](130631 call max call_tmp[805000] call_tmp[805007]))
    (130627 call = call_tmp[804993] call_tmp[805012])
    (607187 return _void[46])
  }
  function MaxReduceScanOp[130668](?).generate[130639](arg _mt[130643]:_MT[201], arg this[130641]:MaxReduceScanOp[130668](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[607191] "RVV" "temp"
    unknown call_tmp[805019] "expr temp" "maybe param" "maybe type" "temp"
    (805022 'move' call_tmp[805019](429599 call value _mt[203] this[130641]))
    (607196 'move' ret[607191](607195 'deref' call_tmp[805019]))
    (607193 return ret[607191])
  }
  function MaxReduceScanOp[130668](?).clone[130650](arg _mt[130654]:_MT[201], arg this[130652]:MaxReduceScanOp[130668](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[607200] "RVV" "temp"
    unknown call_tmp[805026] "expr temp" "maybe param" "maybe type" "temp"
    (805029 'move' call_tmp[805026](429608 call eltType _mt[203] this[130652]))
    unknown call_tmp[805031] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (805034 'move' call_tmp[805031](1000104 'new' MaxReduceScanOp[429603](?)(eltType = call_tmp[805026])(_chpl_manager = unmanaged[183](?))))
    (607205 'move' ret[607200](607204 'deref' call_tmp[805031]))
    (607202 return ret[607200])
  }
  function MaxReduceScanOp[130668](?).super[1075884](arg _mt[1075886]:_MT[201], arg this[1075888]:MaxReduceScanOp[130668](?)) : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1075898] "RVV" "temp"
    unknown call_tmp[1075905] "expr temp" "maybe param" "maybe type" "temp"
    (1075908 'move' call_tmp[1075905](1075892 '.v' this[1075888] c"super"))
    (1075903 'move' ret[1075898](1075902 'deref' call_tmp[1075905]))
    (1075900 return ret[1075898])
  }
  function MaxReduceScanOp[1075915](?).eltType[1075910](arg _mt[1075912]:_MT[201], arg this[1075917]:MaxReduceScanOp[1075915](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1075952] "RVV" "temp" "type variable"
    unknown borrowOfThis[1075919]
    (1075944 'end of statement')
    (1075925 'move' borrowOfThis[1075919](1075921 call : this[1075917] _borrowedNonNilable[177](?)))
    (1075945 'end of statement' borrowOfThis[1075919])
    unknown call_tmp[1075966] "expr temp" "maybe param" "maybe type" "temp"
    (1075969 'move' call_tmp[1075966](1075934 'is bound' borrowOfThis[1075919] c"eltType"))
    if call_tmp[1075966]
    {
      unknown call_tmp[1075971] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1075974 'move' call_tmp[1075971](1075929 '.v' borrowOfThis[1075919] c"eltType"))
      unknown call_tmp[1075976] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1075979 'move' call_tmp[1075976](1075930 call chpl_checkLegalTypeFieldAccessor this[1075917] call_tmp[1075971] "eltType"))
      (1075957 'move' ret[1075952](1075956 'deref' call_tmp[1075976]))
      gotoReturn _end_eltType[1075950] _end_eltType[1075950]
      (1075947 'end of statement' borrowOfThis[1075919])
    }
    {
      (1075962 'move' ret[1075952](1075961 'deref' _uninstantiated[225]))
      gotoReturn _end_eltType[1075950] _end_eltType[1075950]
    }
    label _end_eltType[1075950]
    (1075954 return ret[1075952])
  }
  function MaxReduceScanOp[1075915](?).eltType[1075981](arg _mt[1075983]:_MT[201], arg this[1075985]:MaxReduceScanOp[1075915](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1076020] "RVV" "temp" "type variable"
    unknown borrowOfThis[1075987] "type variable"
    (1076012 'end of statement')
    (1075993 'move' borrowOfThis[1075987](1075989 call : this[1075985] _borrowedNonNilable[177](?)))
    (1076013 'end of statement' borrowOfThis[1075987])
    unknown call_tmp[1076034] "expr temp" "maybe param" "maybe type" "temp"
    (1076037 'move' call_tmp[1076034](1076002 'is bound' borrowOfThis[1075987] c"eltType"))
    if call_tmp[1076034]
    {
      unknown call_tmp[1076039] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1076042 'move' call_tmp[1076039](1075997 '.v' borrowOfThis[1075987] c"eltType"))
      unknown call_tmp[1076044] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1076047 'move' call_tmp[1076044](1075998 call chpl_checkLegalTypeFieldAccessor this[1075985] call_tmp[1076039] "eltType"))
      (1076025 'move' ret[1076020](1076024 'deref' call_tmp[1076044]))
      gotoReturn _end_eltType[1076018] _end_eltType[1076018]
      (1076015 'end of statement' borrowOfThis[1075987])
    }
    {
      (1076030 'move' ret[1076020](1076029 'deref' _uninstantiated[225]))
      gotoReturn _end_eltType[1076018] _end_eltType[1076018]
    }
    label _end_eltType[1076018]
    (1076022 return ret[1076020])
  }
  function MaxReduceScanOp[130668](?).value[1076049](arg _mt[1076051]:_MT[201], arg this[1076053]:MaxReduceScanOp[130668](?)) ref : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1076063] "RVV" "temp"
    unknown call_tmp[1076070] "expr temp" "maybe param" "maybe type" "temp"
    (1076073 'move' call_tmp[1076070](1076057 '.' this[1076053] c"value"))
    (1076068 'move' ret[1076063](1076067 'addr of' call_tmp[1076070]))
    (1076065 return ret[1076063])
  }
  function MaxReduceScanOp[130668](?).init[1076075](arg _mt[1076077]:_MT[201], arg this[1076078]:MaxReduceScanOp[130668](?), in arg l[1076091]:chpl_LocalSpinlock[85418] =
  _typeDefaultT[217], arg eltType[1076094]:_any[141](?), in arg value[1076103] :
  (1076110 call min eltType[1076094]) =
  (1076105 call min eltType[1076094])) : void[4] "compiler generated" "default initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[1076122] "temporary of super field" "temp"
    (1076124 'move' super_tmp[1076122](1076121 '.v' this[1076078] c"super"))
    (1076088 call(1076086 call (partial) init _mt[203] super_tmp[1076122]) l[1076091])
    (1076151 'end of statement')
    unknown tmp[1076127] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[1076155] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[1076167] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1076170 'move' call_tmp[1076167](1076129 '.v' this[1076078] c"super"))
      (1076159 'move' call_type_tmp[1076155](1076132 'typeof' call_tmp[1076167]))
    }
    (1076133 'move' tmp[1076127] call_type_tmp[1076155])
    unknown call_tmp[1076172] "maybe param" "maybe type" "temp"
    (1076175 'move' call_tmp[1076172](1076138 'cast' tmp[1076127] this[1076078]))
    unknown chpl__thisAsParent[1076135] "dead at end of block" "insert auto destroy" "temp"
    (1076163 'init var' chpl__thisAsParent[1076135] call_tmp[1076172] tmp[1076127])
    (1076141 'setcid' chpl__thisAsParent[1076135])
    (1076143 'init field' this[1076078] c"eltType" eltType[1076094])
    (1076152 'end of statement')
    (1076146 '.=' this[1076078] c"value" value[1076103])
    (1076153 'end of statement')
    (1076149 'setcid' this[1076078])
    (1076161 return _void[46])
  }
  function MaxReduceScanOp[130668](?).deinit[1076177](arg _mt[1076179]:_MT[201], arg this[1076181]:MaxReduceScanOp[130668](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (1076189 return _void[46])
  }
  function MaxReduceScanOp[130668](?).serialize[1076191](arg _mt[1076195]:_MT[201], arg this[1076193]:MaxReduceScanOp[130668](?), arg writer[1076194]:_any[141](?), ref arg serializer[1076199]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (1076202 call serializeDefaultImpl writer[1076194] serializer[1076199] this[1076193])
    (1076208 return _void[46])
  }
  function MaxReduceScanOp[130668](?).deserialize[1076210](arg _mt[1076214]:_MT[201], arg this[1076212]:MaxReduceScanOp[130668](?), arg reader[1076213]:_any[141](?), ref arg deserializer[1076219]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    unknown _deser_temp[1076221] "temp"
    (1076223 'move' _deser_temp[1076221] this[1076212])
    (1076226 call deserializeDefaultImpl reader[1076213] deserializer[1076219] _deser_temp[1076221])
    (1076232 return _void[46])
  }
  type MaxReduceScanOp[130668](?) val super[397468]:ReduceScanOp[130334] "super class" unknown eltType[130558] "type variable" unknown value[130561](130563 call min eltType[130558])
  type MaxReduceScanOp[1075915](?)
  type MaxReduceScanOp[429603](?)
  function MinReduceScanOp[130783](?).identity[130682](arg _mt[130686]:_MT[201], arg this[130684]:MinReduceScanOp[130783](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[607209] "RVV" "temp"
    unknown call_tmp[805038] "expr temp" "maybe param" "maybe type" "temp"
    (805041 'move' call_tmp[805038](429614 call eltType _mt[203] this[130684]))
    unknown call_tmp[805043] "expr temp" "maybe param" "maybe type" "temp"
    (805046 'move' call_tmp[805043](130691 call max call_tmp[805038]))
    (607214 'move' ret[607209](607213 'deref' call_tmp[805043]))
    (607211 return ret[607209])
  }
  function MinReduceScanOp[130783](?).accumulate[130695](arg _mt[130701]:_MT[201], arg this[130697]:MinReduceScanOp[130783](?), arg x[130699]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[805050] "expr temp" "maybe param" "maybe type" "temp"
    (805053 'move' call_tmp[805050](429619 call value _mt[203] this[130697]))
    unknown call_tmp[805057] "expr temp" "maybe param" "maybe type" "temp"
    (805060 'move' call_tmp[805057](429625 call value _mt[203] this[130697]))
    unknown call_tmp[805062] "expr temp" "maybe param" "maybe type" "temp"
    (805065 'move' call_tmp[805062](130708 call min x[130699] call_tmp[805057]))
    (130704 call = call_tmp[805050] call_tmp[805062])
    (607216 return _void[46])
  }
  function MinReduceScanOp[130783](?).accumulateOntoState[130713](arg _mt[130721]:_MT[201], arg this[130715]:MinReduceScanOp[130783](?), ref arg state[130717]:_any[141](?), arg x[130719]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[805067] "expr temp" "maybe param" "maybe type" "temp"
    (805070 'move' call_tmp[805067](130728 call min state[130717] x[130719]))
    (130724 call = state[130717] call_tmp[805067])
    (607218 return _void[46])
  }
  function MinReduceScanOp[130783](?).combine[130733](arg _mt[130739]:_MT[201], arg this[130735]:MinReduceScanOp[130783](?), arg x[130737]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[805074] "expr temp" "maybe param" "maybe type" "temp"
    (805077 'move' call_tmp[805074](429633 call value _mt[203] this[130735]))
    unknown call_tmp[805081] "expr temp" "maybe param" "maybe type" "temp"
    (805084 'move' call_tmp[805081](429638 call value _mt[203] this[130735]))
    unknown call_tmp[805088] "expr temp" "maybe param" "maybe type" "temp"
    (805091 'move' call_tmp[805088](130749 call value _mt[203] x[130737]))
    unknown call_tmp[805093] "expr temp" "maybe param" "maybe type" "temp"
    (805096 'move' call_tmp[805093](130746 call min call_tmp[805081] call_tmp[805088]))
    (130742 call = call_tmp[805074] call_tmp[805093])
    (607220 return _void[46])
  }
  function MinReduceScanOp[130783](?).generate[130754](arg _mt[130758]:_MT[201], arg this[130756]:MinReduceScanOp[130783](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[607224] "RVV" "temp"
    unknown call_tmp[805100] "expr temp" "maybe param" "maybe type" "temp"
    (805103 'move' call_tmp[805100](429643 call value _mt[203] this[130756]))
    (607229 'move' ret[607224](607228 'deref' call_tmp[805100]))
    (607226 return ret[607224])
  }
  function MinReduceScanOp[130783](?).clone[130765](arg _mt[130769]:_MT[201], arg this[130767]:MinReduceScanOp[130783](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[607233] "RVV" "temp"
    unknown call_tmp[805107] "expr temp" "maybe param" "maybe type" "temp"
    (805110 'move' call_tmp[805107](429652 call eltType _mt[203] this[130767]))
    unknown call_tmp[805112] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (805115 'move' call_tmp[805112](1000105 'new' MinReduceScanOp[429647](?)(eltType = call_tmp[805107])(_chpl_manager = unmanaged[183](?))))
    (607238 'move' ret[607233](607237 'deref' call_tmp[805112]))
    (607235 return ret[607233])
  }
  function MinReduceScanOp[130783](?).super[1076234](arg _mt[1076236]:_MT[201], arg this[1076238]:MinReduceScanOp[130783](?)) : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1076248] "RVV" "temp"
    unknown call_tmp[1076255] "expr temp" "maybe param" "maybe type" "temp"
    (1076258 'move' call_tmp[1076255](1076242 '.v' this[1076238] c"super"))
    (1076253 'move' ret[1076248](1076252 'deref' call_tmp[1076255]))
    (1076250 return ret[1076248])
  }
  function MinReduceScanOp[1076265](?).eltType[1076260](arg _mt[1076262]:_MT[201], arg this[1076267]:MinReduceScanOp[1076265](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1076302] "RVV" "temp" "type variable"
    unknown borrowOfThis[1076269]
    (1076294 'end of statement')
    (1076275 'move' borrowOfThis[1076269](1076271 call : this[1076267] _borrowedNonNilable[177](?)))
    (1076295 'end of statement' borrowOfThis[1076269])
    unknown call_tmp[1076316] "expr temp" "maybe param" "maybe type" "temp"
    (1076319 'move' call_tmp[1076316](1076284 'is bound' borrowOfThis[1076269] c"eltType"))
    if call_tmp[1076316]
    {
      unknown call_tmp[1076321] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1076324 'move' call_tmp[1076321](1076279 '.v' borrowOfThis[1076269] c"eltType"))
      unknown call_tmp[1076326] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1076329 'move' call_tmp[1076326](1076280 call chpl_checkLegalTypeFieldAccessor this[1076267] call_tmp[1076321] "eltType"))
      (1076307 'move' ret[1076302](1076306 'deref' call_tmp[1076326]))
      gotoReturn _end_eltType[1076300] _end_eltType[1076300]
      (1076297 'end of statement' borrowOfThis[1076269])
    }
    {
      (1076312 'move' ret[1076302](1076311 'deref' _uninstantiated[225]))
      gotoReturn _end_eltType[1076300] _end_eltType[1076300]
    }
    label _end_eltType[1076300]
    (1076304 return ret[1076302])
  }
  function MinReduceScanOp[1076265](?).eltType[1076331](arg _mt[1076333]:_MT[201], arg this[1076335]:MinReduceScanOp[1076265](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1076370] "RVV" "temp" "type variable"
    unknown borrowOfThis[1076337] "type variable"
    (1076362 'end of statement')
    (1076343 'move' borrowOfThis[1076337](1076339 call : this[1076335] _borrowedNonNilable[177](?)))
    (1076363 'end of statement' borrowOfThis[1076337])
    unknown call_tmp[1076384] "expr temp" "maybe param" "maybe type" "temp"
    (1076387 'move' call_tmp[1076384](1076352 'is bound' borrowOfThis[1076337] c"eltType"))
    if call_tmp[1076384]
    {
      unknown call_tmp[1076389] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1076392 'move' call_tmp[1076389](1076347 '.v' borrowOfThis[1076337] c"eltType"))
      unknown call_tmp[1076394] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1076397 'move' call_tmp[1076394](1076348 call chpl_checkLegalTypeFieldAccessor this[1076335] call_tmp[1076389] "eltType"))
      (1076375 'move' ret[1076370](1076374 'deref' call_tmp[1076394]))
      gotoReturn _end_eltType[1076368] _end_eltType[1076368]
      (1076365 'end of statement' borrowOfThis[1076337])
    }
    {
      (1076380 'move' ret[1076370](1076379 'deref' _uninstantiated[225]))
      gotoReturn _end_eltType[1076368] _end_eltType[1076368]
    }
    label _end_eltType[1076368]
    (1076372 return ret[1076370])
  }
  function MinReduceScanOp[130783](?).value[1076399](arg _mt[1076401]:_MT[201], arg this[1076403]:MinReduceScanOp[130783](?)) ref : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1076413] "RVV" "temp"
    unknown call_tmp[1076420] "expr temp" "maybe param" "maybe type" "temp"
    (1076423 'move' call_tmp[1076420](1076407 '.' this[1076403] c"value"))
    (1076418 'move' ret[1076413](1076417 'addr of' call_tmp[1076420]))
    (1076415 return ret[1076413])
  }
  function MinReduceScanOp[130783](?).init[1076425](arg _mt[1076427]:_MT[201], arg this[1076428]:MinReduceScanOp[130783](?), in arg l[1076441]:chpl_LocalSpinlock[85418] =
  _typeDefaultT[217], arg eltType[1076444]:_any[141](?), in arg value[1076453] :
  (1076460 call max eltType[1076444]) =
  (1076455 call max eltType[1076444])) : void[4] "compiler generated" "default initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[1076472] "temporary of super field" "temp"
    (1076474 'move' super_tmp[1076472](1076471 '.v' this[1076428] c"super"))
    (1076438 call(1076436 call (partial) init _mt[203] super_tmp[1076472]) l[1076441])
    (1076501 'end of statement')
    unknown tmp[1076477] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[1076505] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[1076517] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1076520 'move' call_tmp[1076517](1076479 '.v' this[1076428] c"super"))
      (1076509 'move' call_type_tmp[1076505](1076482 'typeof' call_tmp[1076517]))
    }
    (1076483 'move' tmp[1076477] call_type_tmp[1076505])
    unknown call_tmp[1076522] "maybe param" "maybe type" "temp"
    (1076525 'move' call_tmp[1076522](1076488 'cast' tmp[1076477] this[1076428]))
    unknown chpl__thisAsParent[1076485] "dead at end of block" "insert auto destroy" "temp"
    (1076513 'init var' chpl__thisAsParent[1076485] call_tmp[1076522] tmp[1076477])
    (1076491 'setcid' chpl__thisAsParent[1076485])
    (1076493 'init field' this[1076428] c"eltType" eltType[1076444])
    (1076502 'end of statement')
    (1076496 '.=' this[1076428] c"value" value[1076453])
    (1076503 'end of statement')
    (1076499 'setcid' this[1076428])
    (1076511 return _void[46])
  }
  function MinReduceScanOp[130783](?).deinit[1076527](arg _mt[1076529]:_MT[201], arg this[1076531]:MinReduceScanOp[130783](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (1076539 return _void[46])
  }
  function MinReduceScanOp[130783](?).serialize[1076541](arg _mt[1076545]:_MT[201], arg this[1076543]:MinReduceScanOp[130783](?), arg writer[1076544]:_any[141](?), ref arg serializer[1076549]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (1076552 call serializeDefaultImpl writer[1076544] serializer[1076549] this[1076543])
    (1076558 return _void[46])
  }
  function MinReduceScanOp[130783](?).deserialize[1076560](arg _mt[1076564]:_MT[201], arg this[1076562]:MinReduceScanOp[130783](?), arg reader[1076563]:_any[141](?), ref arg deserializer[1076569]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    unknown _deser_temp[1076571] "temp"
    (1076573 'move' _deser_temp[1076571] this[1076562])
    (1076576 call deserializeDefaultImpl reader[1076563] deserializer[1076569] _deser_temp[1076571])
    (1076582 return _void[46])
  }
  type MinReduceScanOp[130783](?) val super[397470]:ReduceScanOp[130334] "super class" unknown eltType[130673] "type variable" unknown value[130676](130678 call max eltType[130673])
  type MinReduceScanOp[1076265](?)
  type MinReduceScanOp[429647](?)
  function minmax[130991](?).identity[130803](arg _mt[130807]:_MT[201], arg this[130805]:minmax[130991](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[607242] "RVV" "temp"
    unknown call_tmp[805119] "expr temp" "maybe param" "maybe type" "temp"
    (805122 'move' call_tmp[805119](429659 call eltType _mt[203] this[130805]))
    unknown call_tmp[805124] "expr temp" "maybe param" "maybe type" "temp"
    (805127 'move' call_tmp[805124](130813 call max call_tmp[805119]))
    unknown call_tmp[805131] "expr temp" "maybe param" "maybe type" "temp"
    (805134 'move' call_tmp[805131](429664 call eltType _mt[203] this[130805]))
    unknown call_tmp[805136] "expr temp" "maybe param" "maybe type" "temp"
    (805139 'move' call_tmp[805136](130816 call min call_tmp[805131]))
    unknown call_tmp[805141] "expr temp" "maybe param" "maybe type" "temp"
    (805144 'move' call_tmp[805141](130818 call _build_tuple call_tmp[805124] call_tmp[805136]))
    (607247 'move' ret[607242](607246 'deref' call_tmp[805141]))
    (607244 return ret[607242])
  }
  function minmax[130991](?).accumulateOntoState[130822](arg _mt[130832]:_MT[201], arg this[130824]:minmax[130991](?), ref arg state[130826]:_any[141](?), arg x[130829] :
  (429669 call eltType _mt[203] this[130824])) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[805148] "expr temp" "maybe param" "maybe type" "temp"
    (805151 'move' call_tmp[805148](130838 call state[130826] 0))
    unknown call_tmp[805153] "expr temp" "maybe param" "maybe type" "temp"
    (805156 'move' call_tmp[805153](130843 call state[130826] 0))
    unknown call_tmp[805158] "expr temp" "maybe param" "maybe type" "temp"
    (805161 'move' call_tmp[805158](130841 call min call_tmp[805153] x[130829]))
    (130835 call = call_tmp[805148] call_tmp[805158])
    (553621 'end of statement')
    unknown call_tmp[805163] "expr temp" "maybe param" "maybe type" "temp"
    (805166 'move' call_tmp[805163](130849 call state[130826] 1))
    unknown call_tmp[805168] "expr temp" "maybe param" "maybe type" "temp"
    (805171 'move' call_tmp[805168](130854 call state[130826] 1))
    unknown call_tmp[805173] "expr temp" "maybe param" "maybe type" "temp"
    (805176 'move' call_tmp[805173](130852 call max call_tmp[805168] x[130829]))
    (130846 call = call_tmp[805163] call_tmp[805173])
    (607249 return _void[46])
  }
  function minmax[130991](?).accumulateOntoState[130859](arg _mt[130872]:_MT[201], arg this[130861]:minmax[130991](?), ref arg state[130863]:_any[141](?), arg other[130869] :
  unknown call_tmp[805180] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[805185] "expr temp" "maybe param" "maybe type" "temp"
    (805188 'move' call_tmp[805185](130878 call state[130863] 0))
    unknown call_tmp[805190] "expr temp" "maybe param" "maybe type" "temp"
    (805193 'move' call_tmp[805190](130883 call state[130863] 0))
    unknown call_tmp[805195] "expr temp" "maybe param" "maybe type" "temp"
    (805198 'move' call_tmp[805195](130886 call other[130869] 0))
    unknown call_tmp[805200] "expr temp" "maybe param" "maybe type" "temp"
    (805203 'move' call_tmp[805200](130881 call min call_tmp[805190] call_tmp[805195]))
    (130875 call = call_tmp[805185] call_tmp[805200])
    (553623 'end of statement')
    unknown call_tmp[805205] "expr temp" "maybe param" "maybe type" "temp"
    (805208 'move' call_tmp[805205](130891 call state[130863] 1))
    unknown call_tmp[805210] "expr temp" "maybe param" "maybe type" "temp"
    (805213 'move' call_tmp[805210](130896 call state[130863] 1))
    unknown call_tmp[805215] "expr temp" "maybe param" "maybe type" "temp"
    (805218 'move' call_tmp[805215](130899 call other[130869] 1))
    unknown call_tmp[805220] "expr temp" "maybe param" "maybe type" "temp"
    (805223 'move' call_tmp[805220](130894 call max call_tmp[805210] call_tmp[805215]))
    (130888 call = call_tmp[805205] call_tmp[805220])
    (607251 return _void[46])
  }
  function minmax[130991](?).accumulate[130903](arg _mt[130911]:_MT[201], arg this[130905]:minmax[130991](?), arg x[130908] :
  (429691 call eltType _mt[203] this[130905])) : _unknown[42] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[805231] "expr temp" "maybe param" "maybe type" "temp"
    (805234 'move' call_tmp[805231](429700 call value _mt[203] this[130905]))
    (130915 call(429695 call (partial) accumulateOntoState _mt[203] this[130905]) call_tmp[805231] x[130908])
    (607253 return _void[46])
  }
  function minmax[130991](?).accumulate[130920](arg _mt[130931]:_MT[201], arg this[130922]:minmax[130991](?), arg state[130928] :
  unknown call_tmp[805238] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[805247] "expr temp" "maybe param" "maybe type" "temp"
    (805250 'move' call_tmp[805247](429715 call value _mt[203] this[130922]))
    (130935 call(429710 call (partial) accumulateOntoState _mt[203] this[130922]) call_tmp[805247] state[130928])
    (607255 return _void[46])
  }
  function minmax[130991](?).combine[130940](arg _mt[130950]:_MT[201], arg this[130942]:minmax[130991](?), arg other[130947] :
  unknown call_tmp[805254] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[805263] "expr temp" "maybe param" "maybe type" "temp"
    (805266 'move' call_tmp[805263](429734 call value _mt[203] this[130942]))
    unknown call_tmp[805270] "expr temp" "maybe param" "maybe type" "temp"
    (805273 'move' call_tmp[805270](130957 call value _mt[203] other[130947]))
    (130954 call(429729 call (partial) accumulateOntoState _mt[203] this[130942]) call_tmp[805263] call_tmp[805270])
    (607257 return _void[46])
  }
  function minmax[130991](?).generate[130962](arg _mt[130966]:_MT[201], arg this[130964]:minmax[130991](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[607261] "RVV" "temp"
    unknown call_tmp[805277] "expr temp" "maybe param" "maybe type" "temp"
    (805280 'move' call_tmp[805277](429739 call value _mt[203] this[130964]))
    (607266 'move' ret[607261](607265 'deref' call_tmp[805277]))
    (607263 return ret[607261])
  }
  function minmax[130991](?).clone[130973](arg _mt[130977]:_MT[201], arg this[130975]:minmax[130991](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[607270] "RVV" "temp"
    unknown call_tmp[805284] "expr temp" "maybe param" "maybe type" "temp"
    (805287 'move' call_tmp[805284](429745 call eltType _mt[203] this[130975]))
    unknown call_tmp[805289] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (805292 'move' call_tmp[805289](1000106 'new' minmax[429720](?)(eltType = call_tmp[805284])(_chpl_manager = unmanaged[183](?))))
    (607275 'move' ret[607270](607274 'deref' call_tmp[805289]))
    (607272 return ret[607270])
  }
  function minmax[130991](?).super[1076584](arg _mt[1076586]:_MT[201], arg this[1076588]:minmax[130991](?)) : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1076598] "RVV" "temp"
    unknown call_tmp[1076605] "expr temp" "maybe param" "maybe type" "temp"
    (1076608 'move' call_tmp[1076605](1076592 '.v' this[1076588] c"super"))
    (1076603 'move' ret[1076598](1076602 'deref' call_tmp[1076605]))
    (1076600 return ret[1076598])
  }
  function minmax[1076615](?).eltType[1076610](arg _mt[1076612]:_MT[201], arg this[1076617]:minmax[1076615](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1076652] "RVV" "temp" "type variable"
    unknown borrowOfThis[1076619]
    (1076644 'end of statement')
    (1076625 'move' borrowOfThis[1076619](1076621 call : this[1076617] _borrowedNonNilable[177](?)))
    (1076645 'end of statement' borrowOfThis[1076619])
    unknown call_tmp[1076666] "expr temp" "maybe param" "maybe type" "temp"
    (1076669 'move' call_tmp[1076666](1076634 'is bound' borrowOfThis[1076619] c"eltType"))
    if call_tmp[1076666]
    {
      unknown call_tmp[1076671] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1076674 'move' call_tmp[1076671](1076629 '.v' borrowOfThis[1076619] c"eltType"))
      unknown call_tmp[1076676] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1076679 'move' call_tmp[1076676](1076630 call chpl_checkLegalTypeFieldAccessor this[1076617] call_tmp[1076671] "eltType"))
      (1076657 'move' ret[1076652](1076656 'deref' call_tmp[1076676]))
      gotoReturn _end_eltType[1076650] _end_eltType[1076650]
      (1076647 'end of statement' borrowOfThis[1076619])
    }
    {
      (1076662 'move' ret[1076652](1076661 'deref' _uninstantiated[225]))
      gotoReturn _end_eltType[1076650] _end_eltType[1076650]
    }
    label _end_eltType[1076650]
    (1076654 return ret[1076652])
  }
  function minmax[1076615](?).eltType[1076681](arg _mt[1076683]:_MT[201], arg this[1076685]:minmax[1076615](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1076720] "RVV" "temp" "type variable"
    unknown borrowOfThis[1076687] "type variable"
    (1076712 'end of statement')
    (1076693 'move' borrowOfThis[1076687](1076689 call : this[1076685] _borrowedNonNilable[177](?)))
    (1076713 'end of statement' borrowOfThis[1076687])
    unknown call_tmp[1076734] "expr temp" "maybe param" "maybe type" "temp"
    (1076737 'move' call_tmp[1076734](1076702 'is bound' borrowOfThis[1076687] c"eltType"))
    if call_tmp[1076734]
    {
      unknown call_tmp[1076739] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1076742 'move' call_tmp[1076739](1076697 '.v' borrowOfThis[1076687] c"eltType"))
      unknown call_tmp[1076744] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1076747 'move' call_tmp[1076744](1076698 call chpl_checkLegalTypeFieldAccessor this[1076685] call_tmp[1076739] "eltType"))
      (1076725 'move' ret[1076720](1076724 'deref' call_tmp[1076744]))
      gotoReturn _end_eltType[1076718] _end_eltType[1076718]
      (1076715 'end of statement' borrowOfThis[1076687])
    }
    {
      (1076730 'move' ret[1076720](1076729 'deref' _uninstantiated[225]))
      gotoReturn _end_eltType[1076718] _end_eltType[1076718]
    }
    label _end_eltType[1076718]
    (1076722 return ret[1076720])
  }
  function minmax[130991](?).value[1076749](arg _mt[1076751]:_MT[201], arg this[1076753]:minmax[130991](?)) ref : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1076763] "RVV" "temp"
    unknown call_tmp[1076770] "expr temp" "maybe param" "maybe type" "temp"
    (1076773 'move' call_tmp[1076770](1076757 '.' this[1076753] c"value"))
    (1076768 'move' ret[1076763](1076767 'addr of' call_tmp[1076770]))
    (1076765 return ret[1076763])
  }
  function minmax[130991](?).init[1076775](arg _mt[1076777]:_MT[201], arg this[1076778]:minmax[130991](?), in arg l[1076791]:chpl_LocalSpinlock[85418] =
  _typeDefaultT[217], arg eltType[1076794]:_any[141](?), in arg value[1076803] :
  unknown call_tmp[1076875] "expr temp" "maybe param" "maybe type" "temp" =
  unknown call_tmp[1076885] "expr temp" "maybe param" "maybe type" "temp") : void[4] "compiler generated" "default initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[1076832] "temporary of super field" "temp"
    (1076834 'move' super_tmp[1076832](1076831 '.v' this[1076778] c"super"))
    (1076788 call(1076786 call (partial) init _mt[203] super_tmp[1076832]) l[1076791])
    (1076861 'end of statement')
    unknown tmp[1076837] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[1076865] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[1076897] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1076900 'move' call_tmp[1076897](1076839 '.v' this[1076778] c"super"))
      (1076869 'move' call_type_tmp[1076865](1076842 'typeof' call_tmp[1076897]))
    }
    (1076843 'move' tmp[1076837] call_type_tmp[1076865])
    unknown call_tmp[1076902] "maybe param" "maybe type" "temp"
    (1076905 'move' call_tmp[1076902](1076848 'cast' tmp[1076837] this[1076778]))
    unknown chpl__thisAsParent[1076845] "dead at end of block" "insert auto destroy" "temp"
    (1076873 'init var' chpl__thisAsParent[1076845] call_tmp[1076902] tmp[1076837])
    (1076851 'setcid' chpl__thisAsParent[1076845])
    (1076853 'init field' this[1076778] c"eltType" eltType[1076794])
    (1076862 'end of statement')
    (1076856 '.=' this[1076778] c"value" value[1076803])
    (1076863 'end of statement')
    (1076859 'setcid' this[1076778])
    (1076871 return _void[46])
  }
  function minmax[130991](?).deinit[1076907](arg _mt[1076909]:_MT[201], arg this[1076911]:minmax[130991](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (1076919 return _void[46])
  }
  function minmax[130991](?).serialize[1076921](arg _mt[1076925]:_MT[201], arg this[1076923]:minmax[130991](?), arg writer[1076924]:_any[141](?), ref arg serializer[1076929]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (1076932 call serializeDefaultImpl writer[1076924] serializer[1076929] this[1076923])
    (1076938 return _void[46])
  }
  function minmax[130991](?).deserialize[1076940](arg _mt[1076944]:_MT[201], arg this[1076942]:minmax[130991](?), arg reader[1076943]:_any[141](?), ref arg deserializer[1076949]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    unknown _deser_temp[1076951] "temp"
    (1076953 'move' _deser_temp[1076951] this[1076942])
    (1076956 call deserializeDefaultImpl reader[1076943] deserializer[1076949] _deser_temp[1076951])
    (1076962 return _void[46])
  }
  type minmax[130991](?) val super[397472]:ReduceScanOp[130334] "super class" unknown eltType[130788] "type variable" unknown value[130791](130799 call _build_tuple(130794 call max eltType[130788])(130797 call min eltType[130788]))
  type minmax[1076615](?)
  type minmax[429720](?)
  function LogicalAndReduceScanOp[131127](?).identity[131005](arg _mt[131009]:_MT[201], arg this[131007]:LogicalAndReduceScanOp[131127](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[607279] "RVV" "temp"
    unknown call_tmp[805296] "expr temp" "maybe param" "maybe type" "temp"
    (805299 'move' call_tmp[805296](429751 call eltType _mt[203] this[131007]))
    unknown call_tmp[805301] "expr temp" "maybe param" "maybe type" "temp"
    (805304 'move' call_tmp[805301](131014 call _land_id call_tmp[805296]))
    (607284 'move' ret[607279](607283 'deref' call_tmp[805301]))
    (607281 return ret[607279])
  }
  function LogicalAndReduceScanOp[131127](?).accumulate[131018](arg _mt[131024]:_MT[201], arg this[131020]:LogicalAndReduceScanOp[131127](?), arg x[131022]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[131030] "temp"
      unknown call_tmp[805308] "expr temp" "maybe param" "maybe type" "temp"
      (805311 'move' call_tmp[805308](429756 call value _mt[203] this[131020]))
      (131033 'move' tmp[131030](131032 'addr of' call_tmp[805308]))
      unknown tmp[487035] "maybe param" "temp"
      (487046 'move' tmp[487035] tmp[131030])
      unknown call_tmp[805313] "expr temp" "maybe param" "maybe type" "temp"
      (805316 'move' call_tmp[805313](487048 call _cond_invalid tmp[487035]))
      if call_tmp[805313]
      {
        (487051 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[678798] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[678799] "maybe param" "temp"
      unknown call_tmp[805318] "expr temp" "maybe param" "maybe type" "temp"
      (805321 'move' call_tmp[805318](487036 call isTrue tmp[487035]))
      (678804 'move' tmp[678799](678802 call _cond_test call_tmp[805318]))
      if tmp[678799]
      {
        unknown tmp[678806] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (678808 'move' tmp[678806](487039 call isTrue x[131022]))
        (678813 'move' tmp[678798](678810 '_paramFoldLogical' tmp[678799] tmp[678806]))
      }
      {
        (678818 'move' tmp[678798](678815 '_paramFoldLogical' tmp[678799] 0))
      }
      (131038 call = tmp[131030] tmp[678798])
    }
    (607286 return _void[46])
  }
  function LogicalAndReduceScanOp[131127](?).accumulateOntoState[131043](arg _mt[131051]:_MT[201], arg this[131045]:LogicalAndReduceScanOp[131127](?), ref arg state[131047]:_any[141](?), arg x[131049]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[131057] "temp"
      (131060 'move' tmp[131057](131059 'addr of' state[131047]))
      unknown tmp[487056] "maybe param" "temp"
      (487067 'move' tmp[487056] tmp[131057])
      unknown call_tmp[805323] "expr temp" "maybe param" "maybe type" "temp"
      (805326 'move' call_tmp[805323](487069 call _cond_invalid tmp[487056]))
      if call_tmp[805323]
      {
        (487072 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[678825] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[678826] "maybe param" "temp"
      unknown call_tmp[805328] "expr temp" "maybe param" "maybe type" "temp"
      (805331 'move' call_tmp[805328](487057 call isTrue tmp[487056]))
      (678831 'move' tmp[678826](678829 call _cond_test call_tmp[805328]))
      if tmp[678826]
      {
        unknown tmp[678833] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (678835 'move' tmp[678833](487060 call isTrue x[131049]))
        (678840 'move' tmp[678825](678837 '_paramFoldLogical' tmp[678826] tmp[678833]))
      }
      {
        (678845 'move' tmp[678825](678842 '_paramFoldLogical' tmp[678826] 0))
      }
      (131065 call = tmp[131057] tmp[678825])
    }
    (607288 return _void[46])
  }
  function LogicalAndReduceScanOp[131127](?).combine[131070](arg _mt[131076]:_MT[201], arg this[131072]:LogicalAndReduceScanOp[131127](?), arg x[131074]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[131085] "temp"
      unknown call_tmp[805335] "expr temp" "maybe param" "maybe type" "temp"
      (805338 'move' call_tmp[805335](429764 call value _mt[203] this[131072]))
      (131088 'move' tmp[131085](131087 'addr of' call_tmp[805335]))
      unknown tmp[487077] "maybe param" "temp"
      (487088 'move' tmp[487077] tmp[131085])
      unknown call_tmp[805340] "expr temp" "maybe param" "maybe type" "temp"
      (805343 'move' call_tmp[805340](487090 call _cond_invalid tmp[487077]))
      if call_tmp[805340]
      {
        (487093 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[678852] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[678853] "maybe param" "temp"
      unknown call_tmp[805345] "expr temp" "maybe param" "maybe type" "temp"
      (805348 'move' call_tmp[805345](487078 call isTrue tmp[487077]))
      (678858 'move' tmp[678853](678856 call _cond_test call_tmp[805345]))
      if tmp[678853]
      {
        unknown tmp[678860] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[805352] "expr temp" "maybe param" "maybe type" "temp"
        (805355 'move' call_tmp[805352](131081 call value _mt[203] x[131074]))
        (678862 'move' tmp[678860](487081 call isTrue call_tmp[805352]))
        (678867 'move' tmp[678852](678864 '_paramFoldLogical' tmp[678853] tmp[678860]))
      }
      {
        (678872 'move' tmp[678852](678869 '_paramFoldLogical' tmp[678853] 0))
      }
      (131093 call = tmp[131085] tmp[678852])
    }
    (607290 return _void[46])
  }
  function LogicalAndReduceScanOp[131127](?).generate[131098](arg _mt[131102]:_MT[201], arg this[131100]:LogicalAndReduceScanOp[131127](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[607294] "RVV" "temp"
    unknown call_tmp[805359] "expr temp" "maybe param" "maybe type" "temp"
    (805362 'move' call_tmp[805359](429769 call value _mt[203] this[131100]))
    (607299 'move' ret[607294](607298 'deref' call_tmp[805359]))
    (607296 return ret[607294])
  }
  function LogicalAndReduceScanOp[131127](?).clone[131109](arg _mt[131113]:_MT[201], arg this[131111]:LogicalAndReduceScanOp[131127](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[607303] "RVV" "temp"
    unknown call_tmp[805366] "expr temp" "maybe param" "maybe type" "temp"
    (805369 'move' call_tmp[805366](429778 call eltType _mt[203] this[131111]))
    unknown call_tmp[805371] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (805374 'move' call_tmp[805371](1000107 'new' LogicalAndReduceScanOp[429773](?)(eltType = call_tmp[805366])(_chpl_manager = unmanaged[183](?))))
    (607308 'move' ret[607303](607307 'deref' call_tmp[805371]))
    (607305 return ret[607303])
  }
  function LogicalAndReduceScanOp[131127](?).super[1076964](arg _mt[1076966]:_MT[201], arg this[1076968]:LogicalAndReduceScanOp[131127](?)) : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1076978] "RVV" "temp"
    unknown call_tmp[1076985] "expr temp" "maybe param" "maybe type" "temp"
    (1076988 'move' call_tmp[1076985](1076972 '.v' this[1076968] c"super"))
    (1076983 'move' ret[1076978](1076982 'deref' call_tmp[1076985]))
    (1076980 return ret[1076978])
  }
  function LogicalAndReduceScanOp[1076995](?).eltType[1076990](arg _mt[1076992]:_MT[201], arg this[1076997]:LogicalAndReduceScanOp[1076995](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1077032] "RVV" "temp" "type variable"
    unknown borrowOfThis[1076999]
    (1077024 'end of statement')
    (1077005 'move' borrowOfThis[1076999](1077001 call : this[1076997] _borrowedNonNilable[177](?)))
    (1077025 'end of statement' borrowOfThis[1076999])
    unknown call_tmp[1077046] "expr temp" "maybe param" "maybe type" "temp"
    (1077049 'move' call_tmp[1077046](1077014 'is bound' borrowOfThis[1076999] c"eltType"))
    if call_tmp[1077046]
    {
      unknown call_tmp[1077051] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1077054 'move' call_tmp[1077051](1077009 '.v' borrowOfThis[1076999] c"eltType"))
      unknown call_tmp[1077056] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1077059 'move' call_tmp[1077056](1077010 call chpl_checkLegalTypeFieldAccessor this[1076997] call_tmp[1077051] "eltType"))
      (1077037 'move' ret[1077032](1077036 'deref' call_tmp[1077056]))
      gotoReturn _end_eltType[1077030] _end_eltType[1077030]
      (1077027 'end of statement' borrowOfThis[1076999])
    }
    {
      (1077042 'move' ret[1077032](1077041 'deref' _uninstantiated[225]))
      gotoReturn _end_eltType[1077030] _end_eltType[1077030]
    }
    label _end_eltType[1077030]
    (1077034 return ret[1077032])
  }
  function LogicalAndReduceScanOp[1076995](?).eltType[1077061](arg _mt[1077063]:_MT[201], arg this[1077065]:LogicalAndReduceScanOp[1076995](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1077100] "RVV" "temp" "type variable"
    unknown borrowOfThis[1077067] "type variable"
    (1077092 'end of statement')
    (1077073 'move' borrowOfThis[1077067](1077069 call : this[1077065] _borrowedNonNilable[177](?)))
    (1077093 'end of statement' borrowOfThis[1077067])
    unknown call_tmp[1077114] "expr temp" "maybe param" "maybe type" "temp"
    (1077117 'move' call_tmp[1077114](1077082 'is bound' borrowOfThis[1077067] c"eltType"))
    if call_tmp[1077114]
    {
      unknown call_tmp[1077119] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1077122 'move' call_tmp[1077119](1077077 '.v' borrowOfThis[1077067] c"eltType"))
      unknown call_tmp[1077124] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1077127 'move' call_tmp[1077124](1077078 call chpl_checkLegalTypeFieldAccessor this[1077065] call_tmp[1077119] "eltType"))
      (1077105 'move' ret[1077100](1077104 'deref' call_tmp[1077124]))
      gotoReturn _end_eltType[1077098] _end_eltType[1077098]
      (1077095 'end of statement' borrowOfThis[1077067])
    }
    {
      (1077110 'move' ret[1077100](1077109 'deref' _uninstantiated[225]))
      gotoReturn _end_eltType[1077098] _end_eltType[1077098]
    }
    label _end_eltType[1077098]
    (1077102 return ret[1077100])
  }
  function LogicalAndReduceScanOp[131127](?).value[1077129](arg _mt[1077131]:_MT[201], arg this[1077133]:LogicalAndReduceScanOp[131127](?)) ref : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1077143] "RVV" "temp"
    unknown call_tmp[1077150] "expr temp" "maybe param" "maybe type" "temp"
    (1077153 'move' call_tmp[1077150](1077137 '.' this[1077133] c"value"))
    (1077148 'move' ret[1077143](1077147 'addr of' call_tmp[1077150]))
    (1077145 return ret[1077143])
  }
  function LogicalAndReduceScanOp[131127](?).init[1077155](arg _mt[1077157]:_MT[201], arg this[1077158]:LogicalAndReduceScanOp[131127](?), in arg l[1077171]:chpl_LocalSpinlock[85418] =
  _typeDefaultT[217], arg eltType[1077174]:_any[141](?), in arg value[1077183] :
  (1077190 call _land_id eltType[1077174]) =
  (1077185 call _land_id eltType[1077174])) : void[4] "compiler generated" "default initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[1077202] "temporary of super field" "temp"
    (1077204 'move' super_tmp[1077202](1077201 '.v' this[1077158] c"super"))
    (1077168 call(1077166 call (partial) init _mt[203] super_tmp[1077202]) l[1077171])
    (1077231 'end of statement')
    unknown tmp[1077207] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[1077235] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[1077247] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1077250 'move' call_tmp[1077247](1077209 '.v' this[1077158] c"super"))
      (1077239 'move' call_type_tmp[1077235](1077212 'typeof' call_tmp[1077247]))
    }
    (1077213 'move' tmp[1077207] call_type_tmp[1077235])
    unknown call_tmp[1077252] "maybe param" "maybe type" "temp"
    (1077255 'move' call_tmp[1077252](1077218 'cast' tmp[1077207] this[1077158]))
    unknown chpl__thisAsParent[1077215] "dead at end of block" "insert auto destroy" "temp"
    (1077243 'init var' chpl__thisAsParent[1077215] call_tmp[1077252] tmp[1077207])
    (1077221 'setcid' chpl__thisAsParent[1077215])
    (1077223 'init field' this[1077158] c"eltType" eltType[1077174])
    (1077232 'end of statement')
    (1077226 '.=' this[1077158] c"value" value[1077183])
    (1077233 'end of statement')
    (1077229 'setcid' this[1077158])
    (1077241 return _void[46])
  }
  function LogicalAndReduceScanOp[131127](?).deinit[1077257](arg _mt[1077259]:_MT[201], arg this[1077261]:LogicalAndReduceScanOp[131127](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (1077269 return _void[46])
  }
  function LogicalAndReduceScanOp[131127](?).serialize[1077271](arg _mt[1077275]:_MT[201], arg this[1077273]:LogicalAndReduceScanOp[131127](?), arg writer[1077274]:_any[141](?), ref arg serializer[1077279]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (1077282 call serializeDefaultImpl writer[1077274] serializer[1077279] this[1077273])
    (1077288 return _void[46])
  }
  function LogicalAndReduceScanOp[131127](?).deserialize[1077290](arg _mt[1077294]:_MT[201], arg this[1077292]:LogicalAndReduceScanOp[131127](?), arg reader[1077293]:_any[141](?), ref arg deserializer[1077299]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    unknown _deser_temp[1077301] "temp"
    (1077303 'move' _deser_temp[1077301] this[1077292])
    (1077306 call deserializeDefaultImpl reader[1077293] deserializer[1077299] _deser_temp[1077301])
    (1077312 return _void[46])
  }
  type LogicalAndReduceScanOp[131127](?) val super[397474]:ReduceScanOp[130334] "super class" unknown eltType[130996] "type variable" unknown value[130999](131001 call _land_id eltType[130996])
  type LogicalAndReduceScanOp[1076995](?)
  type LogicalAndReduceScanOp[429773](?)
  function LogicalOrReduceScanOp[131263](?).identity[131141](arg _mt[131145]:_MT[201], arg this[131143]:LogicalOrReduceScanOp[131263](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[607312] "RVV" "temp"
    unknown call_tmp[805378] "expr temp" "maybe param" "maybe type" "temp"
    (805381 'move' call_tmp[805378](429784 call eltType _mt[203] this[131143]))
    unknown call_tmp[805383] "expr temp" "maybe param" "maybe type" "temp"
    (805386 'move' call_tmp[805383](131150 call _lor_id call_tmp[805378]))
    (607317 'move' ret[607312](607316 'deref' call_tmp[805383]))
    (607314 return ret[607312])
  }
  function LogicalOrReduceScanOp[131263](?).accumulate[131154](arg _mt[131160]:_MT[201], arg this[131156]:LogicalOrReduceScanOp[131263](?), arg x[131158]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[131166] "temp"
      unknown call_tmp[805390] "expr temp" "maybe param" "maybe type" "temp"
      (805393 'move' call_tmp[805390](429789 call value _mt[203] this[131156]))
      (131169 'move' tmp[131166](131168 'addr of' call_tmp[805390]))
      unknown tmp[487098] "maybe param" "temp"
      (487109 'move' tmp[487098] tmp[131166])
      unknown call_tmp[805395] "expr temp" "maybe param" "maybe type" "temp"
      (805398 'move' call_tmp[805395](487111 call _cond_invalid tmp[487098]))
      if call_tmp[805395]
      {
        (487114 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[678879] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[678880] "maybe param" "temp"
      unknown call_tmp[805400] "expr temp" "maybe param" "maybe type" "temp"
      (805403 'move' call_tmp[805400](487099 call isTrue tmp[487098]))
      (678885 'move' tmp[678880](678883 call _cond_test call_tmp[805400]))
      if tmp[678880]
      {
        (678890 'move' tmp[678879](678887 '_paramFoldLogical' tmp[678880] 1))
      }
      {
        unknown tmp[678892] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (678894 'move' tmp[678892](487103 call isTrue x[131158]))
        (678899 'move' tmp[678879](678896 '_paramFoldLogical' tmp[678880] tmp[678892]))
      }
      (131174 call = tmp[131166] tmp[678879])
    }
    (607319 return _void[46])
  }
  function LogicalOrReduceScanOp[131263](?).accumulateOntoState[131179](arg _mt[131187]:_MT[201], arg this[131181]:LogicalOrReduceScanOp[131263](?), ref arg state[131183]:_any[141](?), arg x[131185]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[131193] "temp"
      (131196 'move' tmp[131193](131195 'addr of' state[131183]))
      unknown tmp[487119] "maybe param" "temp"
      (487130 'move' tmp[487119] tmp[131193])
      unknown call_tmp[805405] "expr temp" "maybe param" "maybe type" "temp"
      (805408 'move' call_tmp[805405](487132 call _cond_invalid tmp[487119]))
      if call_tmp[805405]
      {
        (487135 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[678906] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[678907] "maybe param" "temp"
      unknown call_tmp[805410] "expr temp" "maybe param" "maybe type" "temp"
      (805413 'move' call_tmp[805410](487120 call isTrue tmp[487119]))
      (678912 'move' tmp[678907](678910 call _cond_test call_tmp[805410]))
      if tmp[678907]
      {
        (678917 'move' tmp[678906](678914 '_paramFoldLogical' tmp[678907] 1))
      }
      {
        unknown tmp[678919] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (678921 'move' tmp[678919](487124 call isTrue x[131185]))
        (678926 'move' tmp[678906](678923 '_paramFoldLogical' tmp[678907] tmp[678919]))
      }
      (131201 call = tmp[131193] tmp[678906])
    }
    (607321 return _void[46])
  }
  function LogicalOrReduceScanOp[131263](?).combine[131206](arg _mt[131212]:_MT[201], arg this[131208]:LogicalOrReduceScanOp[131263](?), arg x[131210]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[131221] "temp"
      unknown call_tmp[805417] "expr temp" "maybe param" "maybe type" "temp"
      (805420 'move' call_tmp[805417](429797 call value _mt[203] this[131208]))
      (131224 'move' tmp[131221](131223 'addr of' call_tmp[805417]))
      unknown tmp[487140] "maybe param" "temp"
      (487151 'move' tmp[487140] tmp[131221])
      unknown call_tmp[805422] "expr temp" "maybe param" "maybe type" "temp"
      (805425 'move' call_tmp[805422](487153 call _cond_invalid tmp[487140]))
      if call_tmp[805422]
      {
        (487156 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[678933] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[678934] "maybe param" "temp"
      unknown call_tmp[805427] "expr temp" "maybe param" "maybe type" "temp"
      (805430 'move' call_tmp[805427](487141 call isTrue tmp[487140]))
      (678939 'move' tmp[678934](678937 call _cond_test call_tmp[805427]))
      if tmp[678934]
      {
        (678944 'move' tmp[678933](678941 '_paramFoldLogical' tmp[678934] 1))
      }
      {
        unknown tmp[678946] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[805434] "expr temp" "maybe param" "maybe type" "temp"
        (805437 'move' call_tmp[805434](131217 call value _mt[203] x[131210]))
        (678948 'move' tmp[678946](487145 call isTrue call_tmp[805434]))
        (678953 'move' tmp[678933](678950 '_paramFoldLogical' tmp[678934] tmp[678946]))
      }
      (131229 call = tmp[131221] tmp[678933])
    }
    (607323 return _void[46])
  }
  function LogicalOrReduceScanOp[131263](?).generate[131234](arg _mt[131238]:_MT[201], arg this[131236]:LogicalOrReduceScanOp[131263](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[607327] "RVV" "temp"
    unknown call_tmp[805441] "expr temp" "maybe param" "maybe type" "temp"
    (805444 'move' call_tmp[805441](429802 call value _mt[203] this[131236]))
    (607332 'move' ret[607327](607331 'deref' call_tmp[805441]))
    (607329 return ret[607327])
  }
  function LogicalOrReduceScanOp[131263](?).clone[131245](arg _mt[131249]:_MT[201], arg this[131247]:LogicalOrReduceScanOp[131263](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[607336] "RVV" "temp"
    unknown call_tmp[805448] "expr temp" "maybe param" "maybe type" "temp"
    (805451 'move' call_tmp[805448](429808 call eltType _mt[203] this[131247]))
    unknown call_tmp[805453] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (805456 'move' call_tmp[805453](1000108 'new' LogicalOrReduceScanOp[421904](?)(eltType = call_tmp[805448])(_chpl_manager = unmanaged[183](?))))
    (607341 'move' ret[607336](607340 'deref' call_tmp[805453]))
    (607338 return ret[607336])
  }
  function LogicalOrReduceScanOp[131263](?).super[1077314](arg _mt[1077316]:_MT[201], arg this[1077318]:LogicalOrReduceScanOp[131263](?)) : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1077328] "RVV" "temp"
    unknown call_tmp[1077335] "expr temp" "maybe param" "maybe type" "temp"
    (1077338 'move' call_tmp[1077335](1077322 '.v' this[1077318] c"super"))
    (1077333 'move' ret[1077328](1077332 'deref' call_tmp[1077335]))
    (1077330 return ret[1077328])
  }
  function LogicalOrReduceScanOp[1077345](?).eltType[1077340](arg _mt[1077342]:_MT[201], arg this[1077347]:LogicalOrReduceScanOp[1077345](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1077382] "RVV" "temp" "type variable"
    unknown borrowOfThis[1077349]
    (1077374 'end of statement')
    (1077355 'move' borrowOfThis[1077349](1077351 call : this[1077347] _borrowedNonNilable[177](?)))
    (1077375 'end of statement' borrowOfThis[1077349])
    unknown call_tmp[1077396] "expr temp" "maybe param" "maybe type" "temp"
    (1077399 'move' call_tmp[1077396](1077364 'is bound' borrowOfThis[1077349] c"eltType"))
    if call_tmp[1077396]
    {
      unknown call_tmp[1077401] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1077404 'move' call_tmp[1077401](1077359 '.v' borrowOfThis[1077349] c"eltType"))
      unknown call_tmp[1077406] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1077409 'move' call_tmp[1077406](1077360 call chpl_checkLegalTypeFieldAccessor this[1077347] call_tmp[1077401] "eltType"))
      (1077387 'move' ret[1077382](1077386 'deref' call_tmp[1077406]))
      gotoReturn _end_eltType[1077380] _end_eltType[1077380]
      (1077377 'end of statement' borrowOfThis[1077349])
    }
    {
      (1077392 'move' ret[1077382](1077391 'deref' _uninstantiated[225]))
      gotoReturn _end_eltType[1077380] _end_eltType[1077380]
    }
    label _end_eltType[1077380]
    (1077384 return ret[1077382])
  }
  function LogicalOrReduceScanOp[1077345](?).eltType[1077411](arg _mt[1077413]:_MT[201], arg this[1077415]:LogicalOrReduceScanOp[1077345](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1077450] "RVV" "temp" "type variable"
    unknown borrowOfThis[1077417] "type variable"
    (1077442 'end of statement')
    (1077423 'move' borrowOfThis[1077417](1077419 call : this[1077415] _borrowedNonNilable[177](?)))
    (1077443 'end of statement' borrowOfThis[1077417])
    unknown call_tmp[1077464] "expr temp" "maybe param" "maybe type" "temp"
    (1077467 'move' call_tmp[1077464](1077432 'is bound' borrowOfThis[1077417] c"eltType"))
    if call_tmp[1077464]
    {
      unknown call_tmp[1077469] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1077472 'move' call_tmp[1077469](1077427 '.v' borrowOfThis[1077417] c"eltType"))
      unknown call_tmp[1077474] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1077477 'move' call_tmp[1077474](1077428 call chpl_checkLegalTypeFieldAccessor this[1077415] call_tmp[1077469] "eltType"))
      (1077455 'move' ret[1077450](1077454 'deref' call_tmp[1077474]))
      gotoReturn _end_eltType[1077448] _end_eltType[1077448]
      (1077445 'end of statement' borrowOfThis[1077417])
    }
    {
      (1077460 'move' ret[1077450](1077459 'deref' _uninstantiated[225]))
      gotoReturn _end_eltType[1077448] _end_eltType[1077448]
    }
    label _end_eltType[1077448]
    (1077452 return ret[1077450])
  }
  function LogicalOrReduceScanOp[131263](?).value[1077479](arg _mt[1077481]:_MT[201], arg this[1077483]:LogicalOrReduceScanOp[131263](?)) ref : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1077493] "RVV" "temp"
    unknown call_tmp[1077500] "expr temp" "maybe param" "maybe type" "temp"
    (1077503 'move' call_tmp[1077500](1077487 '.' this[1077483] c"value"))
    (1077498 'move' ret[1077493](1077497 'addr of' call_tmp[1077500]))
    (1077495 return ret[1077493])
  }
  function LogicalOrReduceScanOp[131263](?).init[1077505](arg _mt[1077507]:_MT[201], arg this[1077508]:LogicalOrReduceScanOp[131263](?), in arg l[1077521]:chpl_LocalSpinlock[85418] =
  _typeDefaultT[217], arg eltType[1077524]:_any[141](?), in arg value[1077533] :
  (1077540 call _lor_id eltType[1077524]) =
  (1077535 call _lor_id eltType[1077524])) : void[4] "compiler generated" "default initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[1077552] "temporary of super field" "temp"
    (1077554 'move' super_tmp[1077552](1077551 '.v' this[1077508] c"super"))
    (1077518 call(1077516 call (partial) init _mt[203] super_tmp[1077552]) l[1077521])
    (1077581 'end of statement')
    unknown tmp[1077557] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[1077585] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[1077597] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1077600 'move' call_tmp[1077597](1077559 '.v' this[1077508] c"super"))
      (1077589 'move' call_type_tmp[1077585](1077562 'typeof' call_tmp[1077597]))
    }
    (1077563 'move' tmp[1077557] call_type_tmp[1077585])
    unknown call_tmp[1077602] "maybe param" "maybe type" "temp"
    (1077605 'move' call_tmp[1077602](1077568 'cast' tmp[1077557] this[1077508]))
    unknown chpl__thisAsParent[1077565] "dead at end of block" "insert auto destroy" "temp"
    (1077593 'init var' chpl__thisAsParent[1077565] call_tmp[1077602] tmp[1077557])
    (1077571 'setcid' chpl__thisAsParent[1077565])
    (1077573 'init field' this[1077508] c"eltType" eltType[1077524])
    (1077582 'end of statement')
    (1077576 '.=' this[1077508] c"value" value[1077533])
    (1077583 'end of statement')
    (1077579 'setcid' this[1077508])
    (1077591 return _void[46])
  }
  function LogicalOrReduceScanOp[131263](?).deinit[1077607](arg _mt[1077609]:_MT[201], arg this[1077611]:LogicalOrReduceScanOp[131263](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (1077619 return _void[46])
  }
  function LogicalOrReduceScanOp[131263](?).serialize[1077621](arg _mt[1077625]:_MT[201], arg this[1077623]:LogicalOrReduceScanOp[131263](?), arg writer[1077624]:_any[141](?), ref arg serializer[1077629]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (1077632 call serializeDefaultImpl writer[1077624] serializer[1077629] this[1077623])
    (1077638 return _void[46])
  }
  function LogicalOrReduceScanOp[131263](?).deserialize[1077640](arg _mt[1077644]:_MT[201], arg this[1077642]:LogicalOrReduceScanOp[131263](?), arg reader[1077643]:_any[141](?), ref arg deserializer[1077649]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    unknown _deser_temp[1077651] "temp"
    (1077653 'move' _deser_temp[1077651] this[1077642])
    (1077656 call deserializeDefaultImpl reader[1077643] deserializer[1077649] _deser_temp[1077651])
    (1077662 return _void[46])
  }
  type LogicalOrReduceScanOp[131263](?) val super[397476]:ReduceScanOp[130334] "super class" unknown eltType[131132] "type variable" unknown value[131135](131137 call _lor_id eltType[131132])
  type LogicalOrReduceScanOp[1077345](?)
  type LogicalOrReduceScanOp[421904](?)
  function BitwiseAndReduceScanOp[131369](?).identity[131277](arg _mt[131281]:_MT[201], arg this[131279]:BitwiseAndReduceScanOp[131369](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[607345] "RVV" "temp"
    unknown call_tmp[805460] "expr temp" "maybe param" "maybe type" "temp"
    (805463 'move' call_tmp[805460](429814 call eltType _mt[203] this[131279]))
    unknown call_tmp[805465] "expr temp" "maybe param" "maybe type" "temp"
    (805468 'move' call_tmp[805465](131286 call _band_id call_tmp[805460]))
    (607350 'move' ret[607345](607349 'deref' call_tmp[805465]))
    (607347 return ret[607345])
  }
  function BitwiseAndReduceScanOp[131369](?).accumulate[131290](arg _mt[131296]:_MT[201], arg this[131292]:BitwiseAndReduceScanOp[131369](?), arg x[131294]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[805472] "expr temp" "maybe param" "maybe type" "temp"
    (805475 'move' call_tmp[805472](429819 call value _mt[203] this[131292]))
    (131299 call &= call_tmp[805472] x[131294])
    (607352 return _void[46])
  }
  function BitwiseAndReduceScanOp[131369](?).accumulateOntoState[131305](arg _mt[131313]:_MT[201], arg this[131307]:BitwiseAndReduceScanOp[131369](?), ref arg state[131309]:_any[141](?), arg x[131311]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (131316 call &= state[131309] x[131311])
    (607354 return _void[46])
  }
  function BitwiseAndReduceScanOp[131369](?).combine[131322](arg _mt[131328]:_MT[201], arg this[131324]:BitwiseAndReduceScanOp[131369](?), arg x[131326]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[805479] "expr temp" "maybe param" "maybe type" "temp"
    (805482 'move' call_tmp[805479](429827 call value _mt[203] this[131324]))
    unknown call_tmp[805486] "expr temp" "maybe param" "maybe type" "temp"
    (805489 'move' call_tmp[805486](131335 call value _mt[203] x[131326]))
    (131331 call &= call_tmp[805479] call_tmp[805486])
    (607356 return _void[46])
  }
  function BitwiseAndReduceScanOp[131369](?).generate[131340](arg _mt[131344]:_MT[201], arg this[131342]:BitwiseAndReduceScanOp[131369](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[607360] "RVV" "temp"
    unknown call_tmp[805493] "expr temp" "maybe param" "maybe type" "temp"
    (805496 'move' call_tmp[805493](429832 call value _mt[203] this[131342]))
    (607365 'move' ret[607360](607364 'deref' call_tmp[805493]))
    (607362 return ret[607360])
  }
  function BitwiseAndReduceScanOp[131369](?).clone[131351](arg _mt[131355]:_MT[201], arg this[131353]:BitwiseAndReduceScanOp[131369](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[607369] "RVV" "temp"
    unknown call_tmp[805500] "expr temp" "maybe param" "maybe type" "temp"
    (805503 'move' call_tmp[805500](429841 call eltType _mt[203] this[131353]))
    unknown call_tmp[805505] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (805508 'move' call_tmp[805505](1000109 'new' BitwiseAndReduceScanOp[429836](?)(eltType = call_tmp[805500])(_chpl_manager = unmanaged[183](?))))
    (607374 'move' ret[607369](607373 'deref' call_tmp[805505]))
    (607371 return ret[607369])
  }
  function BitwiseAndReduceScanOp[131369](?).super[1077664](arg _mt[1077666]:_MT[201], arg this[1077668]:BitwiseAndReduceScanOp[131369](?)) : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1077678] "RVV" "temp"
    unknown call_tmp[1077685] "expr temp" "maybe param" "maybe type" "temp"
    (1077688 'move' call_tmp[1077685](1077672 '.v' this[1077668] c"super"))
    (1077683 'move' ret[1077678](1077682 'deref' call_tmp[1077685]))
    (1077680 return ret[1077678])
  }
  function BitwiseAndReduceScanOp[1077695](?).eltType[1077690](arg _mt[1077692]:_MT[201], arg this[1077697]:BitwiseAndReduceScanOp[1077695](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1077732] "RVV" "temp" "type variable"
    unknown borrowOfThis[1077699]
    (1077724 'end of statement')
    (1077705 'move' borrowOfThis[1077699](1077701 call : this[1077697] _borrowedNonNilable[177](?)))
    (1077725 'end of statement' borrowOfThis[1077699])
    unknown call_tmp[1077746] "expr temp" "maybe param" "maybe type" "temp"
    (1077749 'move' call_tmp[1077746](1077714 'is bound' borrowOfThis[1077699] c"eltType"))
    if call_tmp[1077746]
    {
      unknown call_tmp[1077751] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1077754 'move' call_tmp[1077751](1077709 '.v' borrowOfThis[1077699] c"eltType"))
      unknown call_tmp[1077756] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1077759 'move' call_tmp[1077756](1077710 call chpl_checkLegalTypeFieldAccessor this[1077697] call_tmp[1077751] "eltType"))
      (1077737 'move' ret[1077732](1077736 'deref' call_tmp[1077756]))
      gotoReturn _end_eltType[1077730] _end_eltType[1077730]
      (1077727 'end of statement' borrowOfThis[1077699])
    }
    {
      (1077742 'move' ret[1077732](1077741 'deref' _uninstantiated[225]))
      gotoReturn _end_eltType[1077730] _end_eltType[1077730]
    }
    label _end_eltType[1077730]
    (1077734 return ret[1077732])
  }
  function BitwiseAndReduceScanOp[1077695](?).eltType[1077761](arg _mt[1077763]:_MT[201], arg this[1077765]:BitwiseAndReduceScanOp[1077695](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1077800] "RVV" "temp" "type variable"
    unknown borrowOfThis[1077767] "type variable"
    (1077792 'end of statement')
    (1077773 'move' borrowOfThis[1077767](1077769 call : this[1077765] _borrowedNonNilable[177](?)))
    (1077793 'end of statement' borrowOfThis[1077767])
    unknown call_tmp[1077814] "expr temp" "maybe param" "maybe type" "temp"
    (1077817 'move' call_tmp[1077814](1077782 'is bound' borrowOfThis[1077767] c"eltType"))
    if call_tmp[1077814]
    {
      unknown call_tmp[1077819] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1077822 'move' call_tmp[1077819](1077777 '.v' borrowOfThis[1077767] c"eltType"))
      unknown call_tmp[1077824] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1077827 'move' call_tmp[1077824](1077778 call chpl_checkLegalTypeFieldAccessor this[1077765] call_tmp[1077819] "eltType"))
      (1077805 'move' ret[1077800](1077804 'deref' call_tmp[1077824]))
      gotoReturn _end_eltType[1077798] _end_eltType[1077798]
      (1077795 'end of statement' borrowOfThis[1077767])
    }
    {
      (1077810 'move' ret[1077800](1077809 'deref' _uninstantiated[225]))
      gotoReturn _end_eltType[1077798] _end_eltType[1077798]
    }
    label _end_eltType[1077798]
    (1077802 return ret[1077800])
  }
  function BitwiseAndReduceScanOp[131369](?).value[1077829](arg _mt[1077831]:_MT[201], arg this[1077833]:BitwiseAndReduceScanOp[131369](?)) ref : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1077843] "RVV" "temp"
    unknown call_tmp[1077850] "expr temp" "maybe param" "maybe type" "temp"
    (1077853 'move' call_tmp[1077850](1077837 '.' this[1077833] c"value"))
    (1077848 'move' ret[1077843](1077847 'addr of' call_tmp[1077850]))
    (1077845 return ret[1077843])
  }
  function BitwiseAndReduceScanOp[131369](?).init[1077855](arg _mt[1077857]:_MT[201], arg this[1077858]:BitwiseAndReduceScanOp[131369](?), in arg l[1077871]:chpl_LocalSpinlock[85418] =
  _typeDefaultT[217], arg eltType[1077874]:_any[141](?), in arg value[1077883] :
  (1077890 call _band_id eltType[1077874]) =
  (1077885 call _band_id eltType[1077874])) : void[4] "compiler generated" "default initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[1077902] "temporary of super field" "temp"
    (1077904 'move' super_tmp[1077902](1077901 '.v' this[1077858] c"super"))
    (1077868 call(1077866 call (partial) init _mt[203] super_tmp[1077902]) l[1077871])
    (1077931 'end of statement')
    unknown tmp[1077907] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[1077935] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[1077947] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1077950 'move' call_tmp[1077947](1077909 '.v' this[1077858] c"super"))
      (1077939 'move' call_type_tmp[1077935](1077912 'typeof' call_tmp[1077947]))
    }
    (1077913 'move' tmp[1077907] call_type_tmp[1077935])
    unknown call_tmp[1077952] "maybe param" "maybe type" "temp"
    (1077955 'move' call_tmp[1077952](1077918 'cast' tmp[1077907] this[1077858]))
    unknown chpl__thisAsParent[1077915] "dead at end of block" "insert auto destroy" "temp"
    (1077943 'init var' chpl__thisAsParent[1077915] call_tmp[1077952] tmp[1077907])
    (1077921 'setcid' chpl__thisAsParent[1077915])
    (1077923 'init field' this[1077858] c"eltType" eltType[1077874])
    (1077932 'end of statement')
    (1077926 '.=' this[1077858] c"value" value[1077883])
    (1077933 'end of statement')
    (1077929 'setcid' this[1077858])
    (1077941 return _void[46])
  }
  function BitwiseAndReduceScanOp[131369](?).deinit[1077957](arg _mt[1077959]:_MT[201], arg this[1077961]:BitwiseAndReduceScanOp[131369](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (1077969 return _void[46])
  }
  function BitwiseAndReduceScanOp[131369](?).serialize[1077971](arg _mt[1077975]:_MT[201], arg this[1077973]:BitwiseAndReduceScanOp[131369](?), arg writer[1077974]:_any[141](?), ref arg serializer[1077979]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (1077982 call serializeDefaultImpl writer[1077974] serializer[1077979] this[1077973])
    (1077988 return _void[46])
  }
  function BitwiseAndReduceScanOp[131369](?).deserialize[1077990](arg _mt[1077994]:_MT[201], arg this[1077992]:BitwiseAndReduceScanOp[131369](?), arg reader[1077993]:_any[141](?), ref arg deserializer[1077999]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    unknown _deser_temp[1078001] "temp"
    (1078003 'move' _deser_temp[1078001] this[1077992])
    (1078006 call deserializeDefaultImpl reader[1077993] deserializer[1077999] _deser_temp[1078001])
    (1078012 return _void[46])
  }
  type BitwiseAndReduceScanOp[131369](?) val super[397478]:ReduceScanOp[130334] "super class" unknown eltType[131268] "type variable" unknown value[131271](131273 call _band_id eltType[131268])
  type BitwiseAndReduceScanOp[1077695](?)
  type BitwiseAndReduceScanOp[429836](?)
  function BitwiseOrReduceScanOp[131475](?).identity[131383](arg _mt[131387]:_MT[201], arg this[131385]:BitwiseOrReduceScanOp[131475](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[607378] "RVV" "temp"
    unknown call_tmp[805512] "expr temp" "maybe param" "maybe type" "temp"
    (805515 'move' call_tmp[805512](429847 call eltType _mt[203] this[131385]))
    unknown call_tmp[805517] "expr temp" "maybe param" "maybe type" "temp"
    (805520 'move' call_tmp[805517](131392 call _bor_id call_tmp[805512]))
    (607383 'move' ret[607378](607382 'deref' call_tmp[805517]))
    (607380 return ret[607378])
  }
  function BitwiseOrReduceScanOp[131475](?).accumulate[131396](arg _mt[131402]:_MT[201], arg this[131398]:BitwiseOrReduceScanOp[131475](?), arg x[131400]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[805524] "expr temp" "maybe param" "maybe type" "temp"
    (805527 'move' call_tmp[805524](429852 call value _mt[203] this[131398]))
    (131405 call |= call_tmp[805524] x[131400])
    (607385 return _void[46])
  }
  function BitwiseOrReduceScanOp[131475](?).accumulateOntoState[131411](arg _mt[131419]:_MT[201], arg this[131413]:BitwiseOrReduceScanOp[131475](?), ref arg state[131415]:_any[141](?), arg x[131417]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (131422 call |= state[131415] x[131417])
    (607387 return _void[46])
  }
  function BitwiseOrReduceScanOp[131475](?).combine[131428](arg _mt[131434]:_MT[201], arg this[131430]:BitwiseOrReduceScanOp[131475](?), arg x[131432]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[805531] "expr temp" "maybe param" "maybe type" "temp"
    (805534 'move' call_tmp[805531](429860 call value _mt[203] this[131430]))
    unknown call_tmp[805538] "expr temp" "maybe param" "maybe type" "temp"
    (805541 'move' call_tmp[805538](131441 call value _mt[203] x[131432]))
    (131437 call |= call_tmp[805531] call_tmp[805538])
    (607389 return _void[46])
  }
  function BitwiseOrReduceScanOp[131475](?).generate[131446](arg _mt[131450]:_MT[201], arg this[131448]:BitwiseOrReduceScanOp[131475](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[607393] "RVV" "temp"
    unknown call_tmp[805545] "expr temp" "maybe param" "maybe type" "temp"
    (805548 'move' call_tmp[805545](429865 call value _mt[203] this[131448]))
    (607398 'move' ret[607393](607397 'deref' call_tmp[805545]))
    (607395 return ret[607393])
  }
  function BitwiseOrReduceScanOp[131475](?).clone[131457](arg _mt[131461]:_MT[201], arg this[131459]:BitwiseOrReduceScanOp[131475](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[607402] "RVV" "temp"
    unknown call_tmp[805552] "expr temp" "maybe param" "maybe type" "temp"
    (805555 'move' call_tmp[805552](429874 call eltType _mt[203] this[131459]))
    unknown call_tmp[805557] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (805560 'move' call_tmp[805557](1000110 'new' BitwiseOrReduceScanOp[429869](?)(eltType = call_tmp[805552])(_chpl_manager = unmanaged[183](?))))
    (607407 'move' ret[607402](607406 'deref' call_tmp[805557]))
    (607404 return ret[607402])
  }
  function BitwiseOrReduceScanOp[131475](?).super[1078014](arg _mt[1078016]:_MT[201], arg this[1078018]:BitwiseOrReduceScanOp[131475](?)) : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1078028] "RVV" "temp"
    unknown call_tmp[1078035] "expr temp" "maybe param" "maybe type" "temp"
    (1078038 'move' call_tmp[1078035](1078022 '.v' this[1078018] c"super"))
    (1078033 'move' ret[1078028](1078032 'deref' call_tmp[1078035]))
    (1078030 return ret[1078028])
  }
  function BitwiseOrReduceScanOp[1078045](?).eltType[1078040](arg _mt[1078042]:_MT[201], arg this[1078047]:BitwiseOrReduceScanOp[1078045](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1078082] "RVV" "temp" "type variable"
    unknown borrowOfThis[1078049]
    (1078074 'end of statement')
    (1078055 'move' borrowOfThis[1078049](1078051 call : this[1078047] _borrowedNonNilable[177](?)))
    (1078075 'end of statement' borrowOfThis[1078049])
    unknown call_tmp[1078096] "expr temp" "maybe param" "maybe type" "temp"
    (1078099 'move' call_tmp[1078096](1078064 'is bound' borrowOfThis[1078049] c"eltType"))
    if call_tmp[1078096]
    {
      unknown call_tmp[1078101] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1078104 'move' call_tmp[1078101](1078059 '.v' borrowOfThis[1078049] c"eltType"))
      unknown call_tmp[1078106] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1078109 'move' call_tmp[1078106](1078060 call chpl_checkLegalTypeFieldAccessor this[1078047] call_tmp[1078101] "eltType"))
      (1078087 'move' ret[1078082](1078086 'deref' call_tmp[1078106]))
      gotoReturn _end_eltType[1078080] _end_eltType[1078080]
      (1078077 'end of statement' borrowOfThis[1078049])
    }
    {
      (1078092 'move' ret[1078082](1078091 'deref' _uninstantiated[225]))
      gotoReturn _end_eltType[1078080] _end_eltType[1078080]
    }
    label _end_eltType[1078080]
    (1078084 return ret[1078082])
  }
  function BitwiseOrReduceScanOp[1078045](?).eltType[1078111](arg _mt[1078113]:_MT[201], arg this[1078115]:BitwiseOrReduceScanOp[1078045](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1078150] "RVV" "temp" "type variable"
    unknown borrowOfThis[1078117] "type variable"
    (1078142 'end of statement')
    (1078123 'move' borrowOfThis[1078117](1078119 call : this[1078115] _borrowedNonNilable[177](?)))
    (1078143 'end of statement' borrowOfThis[1078117])
    unknown call_tmp[1078164] "expr temp" "maybe param" "maybe type" "temp"
    (1078167 'move' call_tmp[1078164](1078132 'is bound' borrowOfThis[1078117] c"eltType"))
    if call_tmp[1078164]
    {
      unknown call_tmp[1078169] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1078172 'move' call_tmp[1078169](1078127 '.v' borrowOfThis[1078117] c"eltType"))
      unknown call_tmp[1078174] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1078177 'move' call_tmp[1078174](1078128 call chpl_checkLegalTypeFieldAccessor this[1078115] call_tmp[1078169] "eltType"))
      (1078155 'move' ret[1078150](1078154 'deref' call_tmp[1078174]))
      gotoReturn _end_eltType[1078148] _end_eltType[1078148]
      (1078145 'end of statement' borrowOfThis[1078117])
    }
    {
      (1078160 'move' ret[1078150](1078159 'deref' _uninstantiated[225]))
      gotoReturn _end_eltType[1078148] _end_eltType[1078148]
    }
    label _end_eltType[1078148]
    (1078152 return ret[1078150])
  }
  function BitwiseOrReduceScanOp[131475](?).value[1078179](arg _mt[1078181]:_MT[201], arg this[1078183]:BitwiseOrReduceScanOp[131475](?)) ref : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1078193] "RVV" "temp"
    unknown call_tmp[1078200] "expr temp" "maybe param" "maybe type" "temp"
    (1078203 'move' call_tmp[1078200](1078187 '.' this[1078183] c"value"))
    (1078198 'move' ret[1078193](1078197 'addr of' call_tmp[1078200]))
    (1078195 return ret[1078193])
  }
  function BitwiseOrReduceScanOp[131475](?).init[1078205](arg _mt[1078207]:_MT[201], arg this[1078208]:BitwiseOrReduceScanOp[131475](?), in arg l[1078221]:chpl_LocalSpinlock[85418] =
  _typeDefaultT[217], arg eltType[1078224]:_any[141](?), in arg value[1078233] :
  (1078240 call _bor_id eltType[1078224]) =
  (1078235 call _bor_id eltType[1078224])) : void[4] "compiler generated" "default initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[1078252] "temporary of super field" "temp"
    (1078254 'move' super_tmp[1078252](1078251 '.v' this[1078208] c"super"))
    (1078218 call(1078216 call (partial) init _mt[203] super_tmp[1078252]) l[1078221])
    (1078281 'end of statement')
    unknown tmp[1078257] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[1078285] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[1078297] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1078300 'move' call_tmp[1078297](1078259 '.v' this[1078208] c"super"))
      (1078289 'move' call_type_tmp[1078285](1078262 'typeof' call_tmp[1078297]))
    }
    (1078263 'move' tmp[1078257] call_type_tmp[1078285])
    unknown call_tmp[1078302] "maybe param" "maybe type" "temp"
    (1078305 'move' call_tmp[1078302](1078268 'cast' tmp[1078257] this[1078208]))
    unknown chpl__thisAsParent[1078265] "dead at end of block" "insert auto destroy" "temp"
    (1078293 'init var' chpl__thisAsParent[1078265] call_tmp[1078302] tmp[1078257])
    (1078271 'setcid' chpl__thisAsParent[1078265])
    (1078273 'init field' this[1078208] c"eltType" eltType[1078224])
    (1078282 'end of statement')
    (1078276 '.=' this[1078208] c"value" value[1078233])
    (1078283 'end of statement')
    (1078279 'setcid' this[1078208])
    (1078291 return _void[46])
  }
  function BitwiseOrReduceScanOp[131475](?).deinit[1078307](arg _mt[1078309]:_MT[201], arg this[1078311]:BitwiseOrReduceScanOp[131475](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (1078319 return _void[46])
  }
  function BitwiseOrReduceScanOp[131475](?).serialize[1078321](arg _mt[1078325]:_MT[201], arg this[1078323]:BitwiseOrReduceScanOp[131475](?), arg writer[1078324]:_any[141](?), ref arg serializer[1078329]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (1078332 call serializeDefaultImpl writer[1078324] serializer[1078329] this[1078323])
    (1078338 return _void[46])
  }
  function BitwiseOrReduceScanOp[131475](?).deserialize[1078340](arg _mt[1078344]:_MT[201], arg this[1078342]:BitwiseOrReduceScanOp[131475](?), arg reader[1078343]:_any[141](?), ref arg deserializer[1078349]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    unknown _deser_temp[1078351] "temp"
    (1078353 'move' _deser_temp[1078351] this[1078342])
    (1078356 call deserializeDefaultImpl reader[1078343] deserializer[1078349] _deser_temp[1078351])
    (1078362 return _void[46])
  }
  type BitwiseOrReduceScanOp[131475](?) val super[397480]:ReduceScanOp[130334] "super class" unknown eltType[131374] "type variable" unknown value[131377](131379 call _bor_id eltType[131374])
  type BitwiseOrReduceScanOp[1078045](?)
  type BitwiseOrReduceScanOp[429869](?)
  function BitwiseXorReduceScanOp[131581](?).identity[131489](arg _mt[131493]:_MT[201], arg this[131491]:BitwiseXorReduceScanOp[131581](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[607411] "RVV" "temp"
    unknown call_tmp[805564] "expr temp" "maybe param" "maybe type" "temp"
    (805567 'move' call_tmp[805564](429880 call eltType _mt[203] this[131491]))
    unknown call_tmp[805569] "expr temp" "maybe param" "maybe type" "temp"
    (805572 'move' call_tmp[805569](131498 call _bxor_id call_tmp[805564]))
    (607416 'move' ret[607411](607415 'deref' call_tmp[805569]))
    (607413 return ret[607411])
  }
  function BitwiseXorReduceScanOp[131581](?).accumulate[131502](arg _mt[131508]:_MT[201], arg this[131504]:BitwiseXorReduceScanOp[131581](?), arg x[131506]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[805576] "expr temp" "maybe param" "maybe type" "temp"
    (805579 'move' call_tmp[805576](429885 call value _mt[203] this[131504]))
    (131511 call ^= call_tmp[805576] x[131506])
    (607418 return _void[46])
  }
  function BitwiseXorReduceScanOp[131581](?).accumulateOntoState[131517](arg _mt[131525]:_MT[201], arg this[131519]:BitwiseXorReduceScanOp[131581](?), ref arg state[131521]:_any[141](?), arg x[131523]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (131528 call ^= state[131521] x[131523])
    (607420 return _void[46])
  }
  function BitwiseXorReduceScanOp[131581](?).combine[131534](arg _mt[131540]:_MT[201], arg this[131536]:BitwiseXorReduceScanOp[131581](?), arg x[131538]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[805583] "expr temp" "maybe param" "maybe type" "temp"
    (805586 'move' call_tmp[805583](429893 call value _mt[203] this[131536]))
    unknown call_tmp[805590] "expr temp" "maybe param" "maybe type" "temp"
    (805593 'move' call_tmp[805590](131547 call value _mt[203] x[131538]))
    (131543 call ^= call_tmp[805583] call_tmp[805590])
    (607422 return _void[46])
  }
  function BitwiseXorReduceScanOp[131581](?).generate[131552](arg _mt[131556]:_MT[201], arg this[131554]:BitwiseXorReduceScanOp[131581](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[607426] "RVV" "temp"
    unknown call_tmp[805597] "expr temp" "maybe param" "maybe type" "temp"
    (805600 'move' call_tmp[805597](429898 call value _mt[203] this[131554]))
    (607431 'move' ret[607426](607430 'deref' call_tmp[805597]))
    (607428 return ret[607426])
  }
  function BitwiseXorReduceScanOp[131581](?).clone[131563](arg _mt[131567]:_MT[201], arg this[131565]:BitwiseXorReduceScanOp[131581](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[607435] "RVV" "temp"
    unknown call_tmp[805604] "expr temp" "maybe param" "maybe type" "temp"
    (805607 'move' call_tmp[805604](429907 call eltType _mt[203] this[131565]))
    unknown call_tmp[805609] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (805612 'move' call_tmp[805609](1000111 'new' BitwiseXorReduceScanOp[429902](?)(eltType = call_tmp[805604])(_chpl_manager = unmanaged[183](?))))
    (607440 'move' ret[607435](607439 'deref' call_tmp[805609]))
    (607437 return ret[607435])
  }
  function BitwiseXorReduceScanOp[131581](?).super[1078364](arg _mt[1078366]:_MT[201], arg this[1078368]:BitwiseXorReduceScanOp[131581](?)) : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1078378] "RVV" "temp"
    unknown call_tmp[1078385] "expr temp" "maybe param" "maybe type" "temp"
    (1078388 'move' call_tmp[1078385](1078372 '.v' this[1078368] c"super"))
    (1078383 'move' ret[1078378](1078382 'deref' call_tmp[1078385]))
    (1078380 return ret[1078378])
  }
  function BitwiseXorReduceScanOp[1078395](?).eltType[1078390](arg _mt[1078392]:_MT[201], arg this[1078397]:BitwiseXorReduceScanOp[1078395](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1078432] "RVV" "temp" "type variable"
    unknown borrowOfThis[1078399]
    (1078424 'end of statement')
    (1078405 'move' borrowOfThis[1078399](1078401 call : this[1078397] _borrowedNonNilable[177](?)))
    (1078425 'end of statement' borrowOfThis[1078399])
    unknown call_tmp[1078446] "expr temp" "maybe param" "maybe type" "temp"
    (1078449 'move' call_tmp[1078446](1078414 'is bound' borrowOfThis[1078399] c"eltType"))
    if call_tmp[1078446]
    {
      unknown call_tmp[1078451] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1078454 'move' call_tmp[1078451](1078409 '.v' borrowOfThis[1078399] c"eltType"))
      unknown call_tmp[1078456] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1078459 'move' call_tmp[1078456](1078410 call chpl_checkLegalTypeFieldAccessor this[1078397] call_tmp[1078451] "eltType"))
      (1078437 'move' ret[1078432](1078436 'deref' call_tmp[1078456]))
      gotoReturn _end_eltType[1078430] _end_eltType[1078430]
      (1078427 'end of statement' borrowOfThis[1078399])
    }
    {
      (1078442 'move' ret[1078432](1078441 'deref' _uninstantiated[225]))
      gotoReturn _end_eltType[1078430] _end_eltType[1078430]
    }
    label _end_eltType[1078430]
    (1078434 return ret[1078432])
  }
  function BitwiseXorReduceScanOp[1078395](?).eltType[1078461](arg _mt[1078463]:_MT[201], arg this[1078465]:BitwiseXorReduceScanOp[1078395](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1078500] "RVV" "temp" "type variable"
    unknown borrowOfThis[1078467] "type variable"
    (1078492 'end of statement')
    (1078473 'move' borrowOfThis[1078467](1078469 call : this[1078465] _borrowedNonNilable[177](?)))
    (1078493 'end of statement' borrowOfThis[1078467])
    unknown call_tmp[1078514] "expr temp" "maybe param" "maybe type" "temp"
    (1078517 'move' call_tmp[1078514](1078482 'is bound' borrowOfThis[1078467] c"eltType"))
    if call_tmp[1078514]
    {
      unknown call_tmp[1078519] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1078522 'move' call_tmp[1078519](1078477 '.v' borrowOfThis[1078467] c"eltType"))
      unknown call_tmp[1078524] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1078527 'move' call_tmp[1078524](1078478 call chpl_checkLegalTypeFieldAccessor this[1078465] call_tmp[1078519] "eltType"))
      (1078505 'move' ret[1078500](1078504 'deref' call_tmp[1078524]))
      gotoReturn _end_eltType[1078498] _end_eltType[1078498]
      (1078495 'end of statement' borrowOfThis[1078467])
    }
    {
      (1078510 'move' ret[1078500](1078509 'deref' _uninstantiated[225]))
      gotoReturn _end_eltType[1078498] _end_eltType[1078498]
    }
    label _end_eltType[1078498]
    (1078502 return ret[1078500])
  }
  function BitwiseXorReduceScanOp[131581](?).value[1078529](arg _mt[1078531]:_MT[201], arg this[1078533]:BitwiseXorReduceScanOp[131581](?)) ref : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1078543] "RVV" "temp"
    unknown call_tmp[1078550] "expr temp" "maybe param" "maybe type" "temp"
    (1078553 'move' call_tmp[1078550](1078537 '.' this[1078533] c"value"))
    (1078548 'move' ret[1078543](1078547 'addr of' call_tmp[1078550]))
    (1078545 return ret[1078543])
  }
  function BitwiseXorReduceScanOp[131581](?).init[1078555](arg _mt[1078557]:_MT[201], arg this[1078558]:BitwiseXorReduceScanOp[131581](?), in arg l[1078571]:chpl_LocalSpinlock[85418] =
  _typeDefaultT[217], arg eltType[1078574]:_any[141](?), in arg value[1078583] :
  (1078590 call _bxor_id eltType[1078574]) =
  (1078585 call _bxor_id eltType[1078574])) : void[4] "compiler generated" "default initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[1078602] "temporary of super field" "temp"
    (1078604 'move' super_tmp[1078602](1078601 '.v' this[1078558] c"super"))
    (1078568 call(1078566 call (partial) init _mt[203] super_tmp[1078602]) l[1078571])
    (1078631 'end of statement')
    unknown tmp[1078607] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[1078635] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[1078647] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1078650 'move' call_tmp[1078647](1078609 '.v' this[1078558] c"super"))
      (1078639 'move' call_type_tmp[1078635](1078612 'typeof' call_tmp[1078647]))
    }
    (1078613 'move' tmp[1078607] call_type_tmp[1078635])
    unknown call_tmp[1078652] "maybe param" "maybe type" "temp"
    (1078655 'move' call_tmp[1078652](1078618 'cast' tmp[1078607] this[1078558]))
    unknown chpl__thisAsParent[1078615] "dead at end of block" "insert auto destroy" "temp"
    (1078643 'init var' chpl__thisAsParent[1078615] call_tmp[1078652] tmp[1078607])
    (1078621 'setcid' chpl__thisAsParent[1078615])
    (1078623 'init field' this[1078558] c"eltType" eltType[1078574])
    (1078632 'end of statement')
    (1078626 '.=' this[1078558] c"value" value[1078583])
    (1078633 'end of statement')
    (1078629 'setcid' this[1078558])
    (1078641 return _void[46])
  }
  function BitwiseXorReduceScanOp[131581](?).deinit[1078657](arg _mt[1078659]:_MT[201], arg this[1078661]:BitwiseXorReduceScanOp[131581](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (1078669 return _void[46])
  }
  function BitwiseXorReduceScanOp[131581](?).serialize[1078671](arg _mt[1078675]:_MT[201], arg this[1078673]:BitwiseXorReduceScanOp[131581](?), arg writer[1078674]:_any[141](?), ref arg serializer[1078679]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (1078682 call serializeDefaultImpl writer[1078674] serializer[1078679] this[1078673])
    (1078688 return _void[46])
  }
  function BitwiseXorReduceScanOp[131581](?).deserialize[1078690](arg _mt[1078694]:_MT[201], arg this[1078692]:BitwiseXorReduceScanOp[131581](?), arg reader[1078693]:_any[141](?), ref arg deserializer[1078699]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    unknown _deser_temp[1078701] "temp"
    (1078703 'move' _deser_temp[1078701] this[1078692])
    (1078706 call deserializeDefaultImpl reader[1078693] deserializer[1078699] _deser_temp[1078701])
    (1078712 return _void[46])
  }
  type BitwiseXorReduceScanOp[131581](?) val super[397482]:ReduceScanOp[130334] "super class" unknown eltType[131480] "type variable" unknown value[131483](131485 call _bxor_id eltType[131480])
  type BitwiseXorReduceScanOp[1078395](?)
  type BitwiseXorReduceScanOp[429902](?)
  function _maxloc_id[131583](arg eltType[131585]:_any[141](?)) : _unknown[42]
  {
    unknown ret[607444] "RVV" "temp"
    unknown call_tmp[805614] "expr temp" "maybe param" "maybe type" "temp"
    (805617 'move' call_tmp[805614](131593 call eltType[131585] 0))
    unknown call_tmp[805619] "expr temp" "maybe param" "maybe type" "temp"
    (805622 'move' call_tmp[805619](131591 call min call_tmp[805614]))
    unknown call_tmp[805624] "expr temp" "maybe param" "maybe type" "temp"
    (805627 'move' call_tmp[805624](131598 call eltType[131585] 1))
    unknown call_tmp[805629] "expr temp" "maybe param" "maybe type" "temp"
    (805632 'move' call_tmp[805629](131596 call max call_tmp[805624]))
    unknown call_tmp[805634] "expr temp" "maybe param" "maybe type" "temp"
    (805637 'move' call_tmp[805634](131600 call _build_tuple call_tmp[805619] call_tmp[805629]))
    (607449 'move' ret[607444](607448 'deref' call_tmp[805634]))
    (607446 return ret[607444])
  }
  function _minloc_id[131604](arg eltType[131606]:_any[141](?)) : _unknown[42]
  {
    unknown ret[607453] "RVV" "temp"
    unknown call_tmp[805639] "expr temp" "maybe param" "maybe type" "temp"
    (805642 'move' call_tmp[805639](131611 call max eltType[131606]))
    (607458 'move' ret[607453](607457 'deref' call_tmp[805639]))
    (607455 return ret[607453])
  }
  function maxloc[131779](?).identity[131627](arg _mt[131631]:_MT[201], arg this[131629]:maxloc[131779](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[607462] "RVV" "temp"
    unknown call_tmp[805646] "expr temp" "maybe param" "maybe type" "temp"
    (805649 'move' call_tmp[805646](429916 call eltType _mt[203] this[131629]))
    unknown call_tmp[805651] "expr temp" "maybe param" "maybe type" "temp"
    (805654 'move' call_tmp[805651](131636 call _maxloc_id call_tmp[805646]))
    (607467 'move' ret[607462](607466 'deref' call_tmp[805651]))
    (607464 return ret[607462])
  }
  function maxloc[131779](?).accumulate[131640](arg _mt[131646]:_MT[201], arg this[131642]:maxloc[131779](?), arg x[131644]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[805660] "expr temp" "maybe param" "maybe type" "temp"
    (805663 'move' call_tmp[805660](429925 call value _mt[203] this[131642]))
    (131650 call(429920 call (partial) accumulateOntoState _mt[203] this[131642]) call_tmp[805660] x[131644])
    (607469 return _void[46])
  }
  function maxloc[131779](?).accumulateOntoState[131655](arg _mt[131663]:_MT[201], arg this[131657]:maxloc[131779](?), ref arg state[131659]:_any[141](?), arg x[131661]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown tmp[487161] "maybe param" "temp"
    unknown tmp[487182] "maybe param" "temp"
    unknown call_tmp[805665] "expr temp" "maybe param" "maybe type" "temp"
    (805668 'move' call_tmp[805665](131678 call x[131661] 0))
    unknown call_tmp[805670] "expr temp" "maybe param" "maybe type" "temp"
    (805673 'move' call_tmp[805670](131681 call state[131659] 0))
    (487193 'move' tmp[487182](131675 call > call_tmp[805665] call_tmp[805670]))
    unknown call_tmp[805675] "expr temp" "maybe param" "maybe type" "temp"
    (805678 'move' call_tmp[805675](487195 call _cond_invalid tmp[487182]))
    if call_tmp[805675]
    {
      (487198 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[678987] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[678988] "maybe param" "temp"
    unknown call_tmp[805680] "expr temp" "maybe param" "maybe type" "temp"
    (805683 'move' call_tmp[805680](487183 call isTrue tmp[487182]))
    (678993 'move' tmp[678988](678991 call _cond_test call_tmp[805680]))
    if tmp[678988]
    {
      (678998 'move' tmp[678987](678995 '_paramFoldLogical' tmp[678988] 1))
    }
    {
      unknown tmp[487203] "maybe param" "temp"
      unknown call_tmp[805685] "expr temp" "maybe param" "maybe type" "temp"
      (805688 'move' call_tmp[805685](131688 call x[131661] 0))
      unknown call_tmp[805690] "expr temp" "maybe param" "maybe type" "temp"
      (805693 'move' call_tmp[805690](131691 call state[131659] 0))
      (487214 'move' tmp[487203](131685 call == call_tmp[805685] call_tmp[805690]))
      unknown call_tmp[805695] "expr temp" "maybe param" "maybe type" "temp"
      (805698 'move' call_tmp[805695](487216 call _cond_invalid tmp[487203]))
      if call_tmp[805695]
      {
        (487219 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[678960] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[678961] "maybe param" "temp"
      unknown call_tmp[805700] "expr temp" "maybe param" "maybe type" "temp"
      (805703 'move' call_tmp[805700](487204 call isTrue tmp[487203]))
      (678966 'move' tmp[678961](678964 call _cond_test call_tmp[805700]))
      if tmp[678961]
      {
        unknown tmp[678968] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[805705] "expr temp" "maybe param" "maybe type" "temp"
        (805708 'move' call_tmp[805705](131696 call x[131661] 1))
        unknown call_tmp[805710] "expr temp" "maybe param" "maybe type" "temp"
        (805713 'move' call_tmp[805710](131699 call state[131659] 1))
        unknown call_tmp[805715] "expr temp" "maybe param" "maybe type" "temp"
        (805718 'move' call_tmp[805715](131693 call < call_tmp[805705] call_tmp[805710]))
        (678970 'move' tmp[678968](487207 call isTrue call_tmp[805715]))
        (678975 'move' tmp[678960](678972 '_paramFoldLogical' tmp[678961] tmp[678968]))
      }
      {
        (678980 'move' tmp[678960](678977 '_paramFoldLogical' tmp[678961] 0))
      }
      unknown tmp[679000] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (679002 'move' tmp[679000](487187 call isTrue tmp[678960]))
      (679007 'move' tmp[678987](679004 '_paramFoldLogical' tmp[678988] tmp[679000]))
    }
    (487172 'move' tmp[487161] tmp[678987])
    unknown call_tmp[805720] "expr temp" "maybe param" "maybe type" "temp"
    (805723 'move' call_tmp[805720](487174 call _cond_invalid tmp[487161]))
    if call_tmp[805720]
    {
      (487177 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[679068] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[679069] "maybe param" "temp"
    unknown call_tmp[805725] "expr temp" "maybe param" "maybe type" "temp"
    (805728 'move' call_tmp[805725](487162 call isTrue tmp[487161]))
    (679074 'move' tmp[679069](679072 call _cond_test call_tmp[805725]))
    if tmp[679069]
    {
      (679079 'move' tmp[679068](679076 '_paramFoldLogical' tmp[679069] 1))
    }
    {
      unknown tmp[487224] "maybe param" "temp"
      unknown call_tmp[805730] "expr temp" "maybe param" "maybe type" "temp"
      (805733 'move' call_tmp[805730](131706 call x[131661] 0))
      (487235 'move' tmp[487224](131704 call gotNaN call_tmp[805730]))
      unknown call_tmp[805735] "expr temp" "maybe param" "maybe type" "temp"
      (805738 'move' call_tmp[805735](487237 call _cond_invalid tmp[487224]))
      if call_tmp[805735]
      {
        (487240 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[679041] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[679042] "maybe param" "temp"
      unknown call_tmp[805740] "expr temp" "maybe param" "maybe type" "temp"
      (805743 'move' call_tmp[805740](487225 call isTrue tmp[487224]))
      (679047 'move' tmp[679042](679045 call _cond_test call_tmp[805740]))
      if tmp[679042]
      {
        unknown tmp[487245] "maybe param" "temp"
        unknown call_tmp[805745] "expr temp" "maybe param" "maybe type" "temp"
        (805748 'move' call_tmp[805745](131715 call state[131659] 0))
        unknown call_tmp[805750] "expr temp" "maybe param" "maybe type" "temp"
        (805753 'move' call_tmp[805750](131713 call gotNaN call_tmp[805745]))
        (487256 'move' tmp[487245](131710 call ! call_tmp[805750]))
        unknown call_tmp[805755] "expr temp" "maybe param" "maybe type" "temp"
        (805758 'move' call_tmp[805755](487258 call _cond_invalid tmp[487245]))
        if call_tmp[805755]
        {
          (487261 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[679014] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[679015] "maybe param" "temp"
        unknown call_tmp[805760] "expr temp" "maybe param" "maybe type" "temp"
        (805763 'move' call_tmp[805760](487246 call isTrue tmp[487245]))
        (679020 'move' tmp[679015](679018 call _cond_test call_tmp[805760]))
        if tmp[679015]
        {
          (679025 'move' tmp[679014](679022 '_paramFoldLogical' tmp[679015] 1))
        }
        {
          unknown tmp[679027] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[805765] "expr temp" "maybe param" "maybe type" "temp"
          (805768 'move' call_tmp[805765](131720 call x[131661] 1))
          unknown call_tmp[805770] "expr temp" "maybe param" "maybe type" "temp"
          (805773 'move' call_tmp[805770](131723 call state[131659] 1))
          unknown call_tmp[805775] "expr temp" "maybe param" "maybe type" "temp"
          (805778 'move' call_tmp[805775](131717 call < call_tmp[805765] call_tmp[805770]))
          (679029 'move' tmp[679027](487250 call isTrue call_tmp[805775]))
          (679034 'move' tmp[679014](679031 '_paramFoldLogical' tmp[679015] tmp[679027]))
        }
        unknown tmp[679049] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (679051 'move' tmp[679049](487228 call isTrue tmp[679014]))
        (679056 'move' tmp[679041](679053 '_paramFoldLogical' tmp[679042] tmp[679049]))
      }
      {
        (679061 'move' tmp[679041](679058 '_paramFoldLogical' tmp[679042] 0))
      }
      unknown tmp[679081] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (679083 'move' tmp[679081](487166 call isTrue tmp[679041]))
      (679088 'move' tmp[679068](679085 '_paramFoldLogical' tmp[679069] tmp[679081]))
    }
    unknown call_tmp[805780] "expr temp" "maybe param" "maybe type" "temp"
    (805783 'move' call_tmp[805780](131725 call _cond_test tmp[679068]))
    if call_tmp[805780]
    {
      (131666 call = state[131659] x[131661])
    }
    (607471 return _void[46])
  }
  function maxloc[131779](?).combine[131732](arg _mt[131738]:_MT[201], arg this[131734]:maxloc[131779](?), arg x[131736]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[805789] "expr temp" "maybe param" "maybe type" "temp"
    (805792 'move' call_tmp[805789](429947 call value _mt[203] this[131734]))
    unknown call_tmp[805796] "expr temp" "maybe param" "maybe type" "temp"
    (805799 'move' call_tmp[805796](131745 call value _mt[203] x[131736]))
    (131742 call(429942 call (partial) accumulateOntoState _mt[203] this[131734]) call_tmp[805789] call_tmp[805796])
    (607473 return _void[46])
  }
  function maxloc[131779](?).generate[131750](arg _mt[131754]:_MT[201], arg this[131752]:maxloc[131779](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[607477] "RVV" "temp"
    unknown call_tmp[805803] "expr temp" "maybe param" "maybe type" "temp"
    (805806 'move' call_tmp[805803](429952 call value _mt[203] this[131752]))
    (607482 'move' ret[607477](607481 'deref' call_tmp[805803]))
    (607479 return ret[607477])
  }
  function maxloc[131779](?).clone[131761](arg _mt[131765]:_MT[201], arg this[131763]:maxloc[131779](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[607486] "RVV" "temp"
    unknown call_tmp[805810] "expr temp" "maybe param" "maybe type" "temp"
    (805813 'move' call_tmp[805810](429961 call eltType _mt[203] this[131763]))
    unknown call_tmp[805815] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (805818 'move' call_tmp[805815](1000112 'new' maxloc[429956](?)(eltType = call_tmp[805810])(_chpl_manager = unmanaged[183](?))))
    (607491 'move' ret[607486](607490 'deref' call_tmp[805815]))
    (607488 return ret[607486])
  }
  function maxloc[131779](?).super[1078714](arg _mt[1078716]:_MT[201], arg this[1078718]:maxloc[131779](?)) : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1078728] "RVV" "temp"
    unknown call_tmp[1078735] "expr temp" "maybe param" "maybe type" "temp"
    (1078738 'move' call_tmp[1078735](1078722 '.v' this[1078718] c"super"))
    (1078733 'move' ret[1078728](1078732 'deref' call_tmp[1078735]))
    (1078730 return ret[1078728])
  }
  function maxloc[1078745](?).eltType[1078740](arg _mt[1078742]:_MT[201], arg this[1078747]:maxloc[1078745](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1078782] "RVV" "temp" "type variable"
    unknown borrowOfThis[1078749]
    (1078774 'end of statement')
    (1078755 'move' borrowOfThis[1078749](1078751 call : this[1078747] _borrowedNonNilable[177](?)))
    (1078775 'end of statement' borrowOfThis[1078749])
    unknown call_tmp[1078796] "expr temp" "maybe param" "maybe type" "temp"
    (1078799 'move' call_tmp[1078796](1078764 'is bound' borrowOfThis[1078749] c"eltType"))
    if call_tmp[1078796]
    {
      unknown call_tmp[1078801] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1078804 'move' call_tmp[1078801](1078759 '.v' borrowOfThis[1078749] c"eltType"))
      unknown call_tmp[1078806] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1078809 'move' call_tmp[1078806](1078760 call chpl_checkLegalTypeFieldAccessor this[1078747] call_tmp[1078801] "eltType"))
      (1078787 'move' ret[1078782](1078786 'deref' call_tmp[1078806]))
      gotoReturn _end_eltType[1078780] _end_eltType[1078780]
      (1078777 'end of statement' borrowOfThis[1078749])
    }
    {
      (1078792 'move' ret[1078782](1078791 'deref' _uninstantiated[225]))
      gotoReturn _end_eltType[1078780] _end_eltType[1078780]
    }
    label _end_eltType[1078780]
    (1078784 return ret[1078782])
  }
  function maxloc[1078745](?).eltType[1078811](arg _mt[1078813]:_MT[201], arg this[1078815]:maxloc[1078745](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1078850] "RVV" "temp" "type variable"
    unknown borrowOfThis[1078817] "type variable"
    (1078842 'end of statement')
    (1078823 'move' borrowOfThis[1078817](1078819 call : this[1078815] _borrowedNonNilable[177](?)))
    (1078843 'end of statement' borrowOfThis[1078817])
    unknown call_tmp[1078864] "expr temp" "maybe param" "maybe type" "temp"
    (1078867 'move' call_tmp[1078864](1078832 'is bound' borrowOfThis[1078817] c"eltType"))
    if call_tmp[1078864]
    {
      unknown call_tmp[1078869] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1078872 'move' call_tmp[1078869](1078827 '.v' borrowOfThis[1078817] c"eltType"))
      unknown call_tmp[1078874] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1078877 'move' call_tmp[1078874](1078828 call chpl_checkLegalTypeFieldAccessor this[1078815] call_tmp[1078869] "eltType"))
      (1078855 'move' ret[1078850](1078854 'deref' call_tmp[1078874]))
      gotoReturn _end_eltType[1078848] _end_eltType[1078848]
      (1078845 'end of statement' borrowOfThis[1078817])
    }
    {
      (1078860 'move' ret[1078850](1078859 'deref' _uninstantiated[225]))
      gotoReturn _end_eltType[1078848] _end_eltType[1078848]
    }
    label _end_eltType[1078848]
    (1078852 return ret[1078850])
  }
  function maxloc[131779](?).value[1078879](arg _mt[1078881]:_MT[201], arg this[1078883]:maxloc[131779](?)) ref : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1078893] "RVV" "temp"
    unknown call_tmp[1078900] "expr temp" "maybe param" "maybe type" "temp"
    (1078903 'move' call_tmp[1078900](1078887 '.' this[1078883] c"value"))
    (1078898 'move' ret[1078893](1078897 'addr of' call_tmp[1078900]))
    (1078895 return ret[1078893])
  }
  function maxloc[131779](?).init[1078905](arg _mt[1078907]:_MT[201], arg this[1078908]:maxloc[131779](?), in arg l[1078921]:chpl_LocalSpinlock[85418] =
  _typeDefaultT[217], arg eltType[1078924]:_any[141](?), in arg value[1078933] :
  (1078940 call _maxloc_id eltType[1078924]) =
  (1078935 call _maxloc_id eltType[1078924])) : void[4] "compiler generated" "default initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[1078952] "temporary of super field" "temp"
    (1078954 'move' super_tmp[1078952](1078951 '.v' this[1078908] c"super"))
    (1078918 call(1078916 call (partial) init _mt[203] super_tmp[1078952]) l[1078921])
    (1078981 'end of statement')
    unknown tmp[1078957] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[1078985] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[1078997] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1079000 'move' call_tmp[1078997](1078959 '.v' this[1078908] c"super"))
      (1078989 'move' call_type_tmp[1078985](1078962 'typeof' call_tmp[1078997]))
    }
    (1078963 'move' tmp[1078957] call_type_tmp[1078985])
    unknown call_tmp[1079002] "maybe param" "maybe type" "temp"
    (1079005 'move' call_tmp[1079002](1078968 'cast' tmp[1078957] this[1078908]))
    unknown chpl__thisAsParent[1078965] "dead at end of block" "insert auto destroy" "temp"
    (1078993 'init var' chpl__thisAsParent[1078965] call_tmp[1079002] tmp[1078957])
    (1078971 'setcid' chpl__thisAsParent[1078965])
    (1078973 'init field' this[1078908] c"eltType" eltType[1078924])
    (1078982 'end of statement')
    (1078976 '.=' this[1078908] c"value" value[1078933])
    (1078983 'end of statement')
    (1078979 'setcid' this[1078908])
    (1078991 return _void[46])
  }
  function maxloc[131779](?).deinit[1079007](arg _mt[1079009]:_MT[201], arg this[1079011]:maxloc[131779](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (1079019 return _void[46])
  }
  function maxloc[131779](?).serialize[1079021](arg _mt[1079025]:_MT[201], arg this[1079023]:maxloc[131779](?), arg writer[1079024]:_any[141](?), ref arg serializer[1079029]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (1079032 call serializeDefaultImpl writer[1079024] serializer[1079029] this[1079023])
    (1079038 return _void[46])
  }
  function maxloc[131779](?).deserialize[1079040](arg _mt[1079044]:_MT[201], arg this[1079042]:maxloc[131779](?), arg reader[1079043]:_any[141](?), ref arg deserializer[1079049]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    unknown _deser_temp[1079051] "temp"
    (1079053 'move' _deser_temp[1079051] this[1079042])
    (1079056 call deserializeDefaultImpl reader[1079043] deserializer[1079049] _deser_temp[1079051])
    (1079062 return _void[46])
  }
  type maxloc[131779](?) val super[397484]:ReduceScanOp[130334] "super class" unknown eltType[131618] "type variable" unknown value[131621](131623 call _maxloc_id eltType[131618])
  type maxloc[1078745](?)
  type maxloc[429956](?)
  function minloc[131945](?).identity[131793](arg _mt[131797]:_MT[201], arg this[131795]:minloc[131945](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[607495] "RVV" "temp"
    unknown call_tmp[805822] "expr temp" "maybe param" "maybe type" "temp"
    (805825 'move' call_tmp[805822](429967 call eltType _mt[203] this[131795]))
    unknown call_tmp[805827] "expr temp" "maybe param" "maybe type" "temp"
    (805830 'move' call_tmp[805827](131802 call _minloc_id call_tmp[805822]))
    (607500 'move' ret[607495](607499 'deref' call_tmp[805827]))
    (607497 return ret[607495])
  }
  function minloc[131945](?).accumulate[131806](arg _mt[131812]:_MT[201], arg this[131808]:minloc[131945](?), arg x[131810]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[805836] "expr temp" "maybe param" "maybe type" "temp"
    (805839 'move' call_tmp[805836](429976 call value _mt[203] this[131808]))
    (131816 call(429971 call (partial) accumulateOntoState _mt[203] this[131808]) call_tmp[805836] x[131810])
    (607502 return _void[46])
  }
  function minloc[131945](?).accumulateOntoState[131821](arg _mt[131829]:_MT[201], arg this[131823]:minloc[131945](?), ref arg state[131825]:_any[141](?), arg x[131827]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown tmp[487266] "maybe param" "temp"
    unknown tmp[487287] "maybe param" "temp"
    unknown call_tmp[805841] "expr temp" "maybe param" "maybe type" "temp"
    (805844 'move' call_tmp[805841](131844 call x[131827] 0))
    unknown call_tmp[805846] "expr temp" "maybe param" "maybe type" "temp"
    (805849 'move' call_tmp[805846](131847 call state[131825] 0))
    (487298 'move' tmp[487287](131841 call < call_tmp[805841] call_tmp[805846]))
    unknown call_tmp[805851] "expr temp" "maybe param" "maybe type" "temp"
    (805854 'move' call_tmp[805851](487300 call _cond_invalid tmp[487287]))
    if call_tmp[805851]
    {
      (487303 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[679122] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[679123] "maybe param" "temp"
    unknown call_tmp[805856] "expr temp" "maybe param" "maybe type" "temp"
    (805859 'move' call_tmp[805856](487288 call isTrue tmp[487287]))
    (679128 'move' tmp[679123](679126 call _cond_test call_tmp[805856]))
    if tmp[679123]
    {
      (679133 'move' tmp[679122](679130 '_paramFoldLogical' tmp[679123] 1))
    }
    {
      unknown tmp[487308] "maybe param" "temp"
      unknown call_tmp[805861] "expr temp" "maybe param" "maybe type" "temp"
      (805864 'move' call_tmp[805861](131854 call x[131827] 0))
      unknown call_tmp[805866] "expr temp" "maybe param" "maybe type" "temp"
      (805869 'move' call_tmp[805866](131857 call state[131825] 0))
      (487319 'move' tmp[487308](131851 call == call_tmp[805861] call_tmp[805866]))
      unknown call_tmp[805871] "expr temp" "maybe param" "maybe type" "temp"
      (805874 'move' call_tmp[805871](487321 call _cond_invalid tmp[487308]))
      if call_tmp[805871]
      {
        (487324 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[679095] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[679096] "maybe param" "temp"
      unknown call_tmp[805876] "expr temp" "maybe param" "maybe type" "temp"
      (805879 'move' call_tmp[805876](487309 call isTrue tmp[487308]))
      (679101 'move' tmp[679096](679099 call _cond_test call_tmp[805876]))
      if tmp[679096]
      {
        unknown tmp[679103] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[805881] "expr temp" "maybe param" "maybe type" "temp"
        (805884 'move' call_tmp[805881](131862 call x[131827] 1))
        unknown call_tmp[805886] "expr temp" "maybe param" "maybe type" "temp"
        (805889 'move' call_tmp[805886](131865 call state[131825] 1))
        unknown call_tmp[805891] "expr temp" "maybe param" "maybe type" "temp"
        (805894 'move' call_tmp[805891](131859 call < call_tmp[805881] call_tmp[805886]))
        (679105 'move' tmp[679103](487312 call isTrue call_tmp[805891]))
        (679110 'move' tmp[679095](679107 '_paramFoldLogical' tmp[679096] tmp[679103]))
      }
      {
        (679115 'move' tmp[679095](679112 '_paramFoldLogical' tmp[679096] 0))
      }
      unknown tmp[679135] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (679137 'move' tmp[679135](487292 call isTrue tmp[679095]))
      (679142 'move' tmp[679122](679139 '_paramFoldLogical' tmp[679123] tmp[679135]))
    }
    (487277 'move' tmp[487266] tmp[679122])
    unknown call_tmp[805896] "expr temp" "maybe param" "maybe type" "temp"
    (805899 'move' call_tmp[805896](487279 call _cond_invalid tmp[487266]))
    if call_tmp[805896]
    {
      (487282 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[679203] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[679204] "maybe param" "temp"
    unknown call_tmp[805901] "expr temp" "maybe param" "maybe type" "temp"
    (805904 'move' call_tmp[805901](487267 call isTrue tmp[487266]))
    (679209 'move' tmp[679204](679207 call _cond_test call_tmp[805901]))
    if tmp[679204]
    {
      (679214 'move' tmp[679203](679211 '_paramFoldLogical' tmp[679204] 1))
    }
    {
      unknown tmp[487329] "maybe param" "temp"
      unknown call_tmp[805906] "expr temp" "maybe param" "maybe type" "temp"
      (805909 'move' call_tmp[805906](131872 call x[131827] 0))
      (487340 'move' tmp[487329](131870 call gotNaN call_tmp[805906]))
      unknown call_tmp[805911] "expr temp" "maybe param" "maybe type" "temp"
      (805914 'move' call_tmp[805911](487342 call _cond_invalid tmp[487329]))
      if call_tmp[805911]
      {
        (487345 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[679176] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[679177] "maybe param" "temp"
      unknown call_tmp[805916] "expr temp" "maybe param" "maybe type" "temp"
      (805919 'move' call_tmp[805916](487330 call isTrue tmp[487329]))
      (679182 'move' tmp[679177](679180 call _cond_test call_tmp[805916]))
      if tmp[679177]
      {
        unknown tmp[487350] "maybe param" "temp"
        unknown call_tmp[805921] "expr temp" "maybe param" "maybe type" "temp"
        (805924 'move' call_tmp[805921](131881 call state[131825] 0))
        unknown call_tmp[805926] "expr temp" "maybe param" "maybe type" "temp"
        (805929 'move' call_tmp[805926](131879 call gotNaN call_tmp[805921]))
        (487361 'move' tmp[487350](131876 call ! call_tmp[805926]))
        unknown call_tmp[805931] "expr temp" "maybe param" "maybe type" "temp"
        (805934 'move' call_tmp[805931](487363 call _cond_invalid tmp[487350]))
        if call_tmp[805931]
        {
          (487366 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[679149] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[679150] "maybe param" "temp"
        unknown call_tmp[805936] "expr temp" "maybe param" "maybe type" "temp"
        (805939 'move' call_tmp[805936](487351 call isTrue tmp[487350]))
        (679155 'move' tmp[679150](679153 call _cond_test call_tmp[805936]))
        if tmp[679150]
        {
          (679160 'move' tmp[679149](679157 '_paramFoldLogical' tmp[679150] 1))
        }
        {
          unknown tmp[679162] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[805941] "expr temp" "maybe param" "maybe type" "temp"
          (805944 'move' call_tmp[805941](131886 call x[131827] 1))
          unknown call_tmp[805946] "expr temp" "maybe param" "maybe type" "temp"
          (805949 'move' call_tmp[805946](131889 call state[131825] 1))
          unknown call_tmp[805951] "expr temp" "maybe param" "maybe type" "temp"
          (805954 'move' call_tmp[805951](131883 call < call_tmp[805941] call_tmp[805946]))
          (679164 'move' tmp[679162](487355 call isTrue call_tmp[805951]))
          (679169 'move' tmp[679149](679166 '_paramFoldLogical' tmp[679150] tmp[679162]))
        }
        unknown tmp[679184] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (679186 'move' tmp[679184](487333 call isTrue tmp[679149]))
        (679191 'move' tmp[679176](679188 '_paramFoldLogical' tmp[679177] tmp[679184]))
      }
      {
        (679196 'move' tmp[679176](679193 '_paramFoldLogical' tmp[679177] 0))
      }
      unknown tmp[679216] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (679218 'move' tmp[679216](487271 call isTrue tmp[679176]))
      (679223 'move' tmp[679203](679220 '_paramFoldLogical' tmp[679204] tmp[679216]))
    }
    unknown call_tmp[805956] "expr temp" "maybe param" "maybe type" "temp"
    (805959 'move' call_tmp[805956](131891 call _cond_test tmp[679203]))
    if call_tmp[805956]
    {
      (131832 call = state[131825] x[131827])
    }
    (607504 return _void[46])
  }
  function minloc[131945](?).combine[131898](arg _mt[131904]:_MT[201], arg this[131900]:minloc[131945](?), arg x[131902]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[805965] "expr temp" "maybe param" "maybe type" "temp"
    (805968 'move' call_tmp[805965](429998 call value _mt[203] this[131900]))
    unknown call_tmp[805972] "expr temp" "maybe param" "maybe type" "temp"
    (805975 'move' call_tmp[805972](131911 call value _mt[203] x[131902]))
    (131908 call(429993 call (partial) accumulateOntoState _mt[203] this[131900]) call_tmp[805965] call_tmp[805972])
    (607506 return _void[46])
  }
  function minloc[131945](?).generate[131916](arg _mt[131920]:_MT[201], arg this[131918]:minloc[131945](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[607510] "RVV" "temp"
    unknown call_tmp[805979] "expr temp" "maybe param" "maybe type" "temp"
    (805982 'move' call_tmp[805979](430003 call value _mt[203] this[131918]))
    (607515 'move' ret[607510](607514 'deref' call_tmp[805979]))
    (607512 return ret[607510])
  }
  function minloc[131945](?).clone[131927](arg _mt[131931]:_MT[201], arg this[131929]:minloc[131945](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[607519] "RVV" "temp"
    unknown call_tmp[805986] "expr temp" "maybe param" "maybe type" "temp"
    (805989 'move' call_tmp[805986](430012 call eltType _mt[203] this[131929]))
    unknown call_tmp[805991] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (805994 'move' call_tmp[805991](1000113 'new' minloc[430007](?)(eltType = call_tmp[805986])(_chpl_manager = unmanaged[183](?))))
    (607524 'move' ret[607519](607523 'deref' call_tmp[805991]))
    (607521 return ret[607519])
  }
  function minloc[131945](?).super[1079064](arg _mt[1079066]:_MT[201], arg this[1079068]:minloc[131945](?)) : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1079078] "RVV" "temp"
    unknown call_tmp[1079085] "expr temp" "maybe param" "maybe type" "temp"
    (1079088 'move' call_tmp[1079085](1079072 '.v' this[1079068] c"super"))
    (1079083 'move' ret[1079078](1079082 'deref' call_tmp[1079085]))
    (1079080 return ret[1079078])
  }
  function minloc[1079095](?).eltType[1079090](arg _mt[1079092]:_MT[201], arg this[1079097]:minloc[1079095](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1079132] "RVV" "temp" "type variable"
    unknown borrowOfThis[1079099]
    (1079124 'end of statement')
    (1079105 'move' borrowOfThis[1079099](1079101 call : this[1079097] _borrowedNonNilable[177](?)))
    (1079125 'end of statement' borrowOfThis[1079099])
    unknown call_tmp[1079146] "expr temp" "maybe param" "maybe type" "temp"
    (1079149 'move' call_tmp[1079146](1079114 'is bound' borrowOfThis[1079099] c"eltType"))
    if call_tmp[1079146]
    {
      unknown call_tmp[1079151] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1079154 'move' call_tmp[1079151](1079109 '.v' borrowOfThis[1079099] c"eltType"))
      unknown call_tmp[1079156] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1079159 'move' call_tmp[1079156](1079110 call chpl_checkLegalTypeFieldAccessor this[1079097] call_tmp[1079151] "eltType"))
      (1079137 'move' ret[1079132](1079136 'deref' call_tmp[1079156]))
      gotoReturn _end_eltType[1079130] _end_eltType[1079130]
      (1079127 'end of statement' borrowOfThis[1079099])
    }
    {
      (1079142 'move' ret[1079132](1079141 'deref' _uninstantiated[225]))
      gotoReturn _end_eltType[1079130] _end_eltType[1079130]
    }
    label _end_eltType[1079130]
    (1079134 return ret[1079132])
  }
  function minloc[1079095](?).eltType[1079161](arg _mt[1079163]:_MT[201], arg this[1079165]:minloc[1079095](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1079200] "RVV" "temp" "type variable"
    unknown borrowOfThis[1079167] "type variable"
    (1079192 'end of statement')
    (1079173 'move' borrowOfThis[1079167](1079169 call : this[1079165] _borrowedNonNilable[177](?)))
    (1079193 'end of statement' borrowOfThis[1079167])
    unknown call_tmp[1079214] "expr temp" "maybe param" "maybe type" "temp"
    (1079217 'move' call_tmp[1079214](1079182 'is bound' borrowOfThis[1079167] c"eltType"))
    if call_tmp[1079214]
    {
      unknown call_tmp[1079219] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1079222 'move' call_tmp[1079219](1079177 '.v' borrowOfThis[1079167] c"eltType"))
      unknown call_tmp[1079224] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1079227 'move' call_tmp[1079224](1079178 call chpl_checkLegalTypeFieldAccessor this[1079165] call_tmp[1079219] "eltType"))
      (1079205 'move' ret[1079200](1079204 'deref' call_tmp[1079224]))
      gotoReturn _end_eltType[1079198] _end_eltType[1079198]
      (1079195 'end of statement' borrowOfThis[1079167])
    }
    {
      (1079210 'move' ret[1079200](1079209 'deref' _uninstantiated[225]))
      gotoReturn _end_eltType[1079198] _end_eltType[1079198]
    }
    label _end_eltType[1079198]
    (1079202 return ret[1079200])
  }
  function minloc[131945](?).value[1079229](arg _mt[1079231]:_MT[201], arg this[1079233]:minloc[131945](?)) ref : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1079243] "RVV" "temp"
    unknown call_tmp[1079250] "expr temp" "maybe param" "maybe type" "temp"
    (1079253 'move' call_tmp[1079250](1079237 '.' this[1079233] c"value"))
    (1079248 'move' ret[1079243](1079247 'addr of' call_tmp[1079250]))
    (1079245 return ret[1079243])
  }
  function minloc[131945](?).init[1079255](arg _mt[1079257]:_MT[201], arg this[1079258]:minloc[131945](?), in arg l[1079271]:chpl_LocalSpinlock[85418] =
  _typeDefaultT[217], arg eltType[1079274]:_any[141](?), in arg value[1079283] :
  (1079290 call _minloc_id eltType[1079274]) =
  (1079285 call _minloc_id eltType[1079274])) : void[4] "compiler generated" "default initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[1079302] "temporary of super field" "temp"
    (1079304 'move' super_tmp[1079302](1079301 '.v' this[1079258] c"super"))
    (1079268 call(1079266 call (partial) init _mt[203] super_tmp[1079302]) l[1079271])
    (1079331 'end of statement')
    unknown tmp[1079307] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[1079335] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[1079347] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1079350 'move' call_tmp[1079347](1079309 '.v' this[1079258] c"super"))
      (1079339 'move' call_type_tmp[1079335](1079312 'typeof' call_tmp[1079347]))
    }
    (1079313 'move' tmp[1079307] call_type_tmp[1079335])
    unknown call_tmp[1079352] "maybe param" "maybe type" "temp"
    (1079355 'move' call_tmp[1079352](1079318 'cast' tmp[1079307] this[1079258]))
    unknown chpl__thisAsParent[1079315] "dead at end of block" "insert auto destroy" "temp"
    (1079343 'init var' chpl__thisAsParent[1079315] call_tmp[1079352] tmp[1079307])
    (1079321 'setcid' chpl__thisAsParent[1079315])
    (1079323 'init field' this[1079258] c"eltType" eltType[1079274])
    (1079332 'end of statement')
    (1079326 '.=' this[1079258] c"value" value[1079283])
    (1079333 'end of statement')
    (1079329 'setcid' this[1079258])
    (1079341 return _void[46])
  }
  function minloc[131945](?).deinit[1079357](arg _mt[1079359]:_MT[201], arg this[1079361]:minloc[131945](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (1079369 return _void[46])
  }
  function minloc[131945](?).serialize[1079371](arg _mt[1079375]:_MT[201], arg this[1079373]:minloc[131945](?), arg writer[1079374]:_any[141](?), ref arg serializer[1079379]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (1079382 call serializeDefaultImpl writer[1079374] serializer[1079379] this[1079373])
    (1079388 return _void[46])
  }
  function minloc[131945](?).deserialize[1079390](arg _mt[1079394]:_MT[201], arg this[1079392]:minloc[131945](?), arg reader[1079393]:_any[141](?), ref arg deserializer[1079399]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    unknown _deser_temp[1079401] "temp"
    (1079403 'move' _deser_temp[1079401] this[1079392])
    (1079406 call deserializeDefaultImpl reader[1079393] deserializer[1079399] _deser_temp[1079401])
    (1079412 return _void[46])
  }
  type minloc[131945](?) val super[397486]:ReduceScanOp[130334] "super class" unknown eltType[131784] "type variable" unknown value[131787](131789 call _minloc_id eltType[131784])
  type minloc[1079095](?)
  type minloc[430007](?)
  function gotNaN[131947](arg value[131949]:_any[141](?)) : _unknown[42] "inline" "private"
  {
    unknown ret[607528] "RVV" "temp"
    unknown call_tmp[805996] "expr temp" "maybe param" "maybe type" "temp"
    (805999 'move' call_tmp[805996](131957 call isNan value[131949]))
    (607533 'move' ret[607528](607532 'deref' call_tmp[805996]))
    (607530 return ret[607528])
  }
  where {
    (131952 call isReal value[131949])
  }
  function gotNaN[131962](arg value[131964]:_any[141](?)) param : _unknown[42] "private"
  {
    unknown ret[607537] "RVV" "param" "temp"
    (607542 'move' ret[607537](607541 'deref' 0))
    (607539 return ret[607537])
  }
  (396131 'used modules list'(129919 'use' ChapelStandard[315387])(129922 'use' ChapelLocks[85420]))
}