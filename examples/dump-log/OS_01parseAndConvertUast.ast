AST dump for OS after pass parseAndConvertUast.
Module use list: 

{
  (387002 'use' ChapelStandard)
  def module POSIX[12822]  
  type errorCode[12828]
  function qio_err_eq[12830](arg a[12833] :
  errorCode, arg b[12837] :
  errorCode) : _unknown[42] "extern" "local args" "no fn body" "private"
  {
  }
  { scopeless type
    c_int
  }
  function qio_err_to_int[12844](arg a[12847] :
  errorCode) : _unknown[42] "extern" "local args" "no fn body" "private"
  {
  }
  { scopeless type
    (12851 call int[10] 32)
  }
  function qio_int_to_err[12856](arg a[12861] :
  (12859 call int[10] 32)) : _unknown[42] "extern" "local args" "no fn body" "private"
  {
  }
  { scopeless type
    errorCode
  }
  function qio_err_iserr[12868](arg a[12871] :
  errorCode) : _unknown[42] "extern" "local args" "no fn body" "private"
  {
  }
  { scopeless type
    c_int
  }
  function _unknown[42].==[12878](arg _mt[12892]:_MT[201], arg this[12881] :
  errorCode, arg a[12885] :
  errorCode, arg b[12889] :
  errorCode) : _unknown[42] "inline" "method" "operator"
  {
    (12895 return(12896 call !=(12899 call qio_err_eq a b)(12902 call : 0 c_int)))
  }
  function _unknown[42].==[12908](arg _mt[12924]:_MT[201], arg this[12911] :
  errorCode, arg a[12915] :
  errorCode, arg b[12921] :
  (12919 call int[10] 32)) : _unknown[42] "inline" "method" "operator"
  {
    (12927 return(12928 call ==(12931 call qio_err_to_int a)(12933 call : b(12937 call int[10] 32))))
  }
  function _unknown[42].==[12941](arg _mt[12957]:_MT[201], arg this[12944] :
  errorCode, arg a[12948] :
  errorCode, arg b[12954] :
  (12952 call int[10] 64)) : _unknown[42] "inline" "method" "operator"
  {
    (12960 return(12961 call ==(12964 call qio_err_to_int a)(12966 call : b(12970 call int[10] 32))))
  }
  function _unknown[42].==[12974](arg _mt[12990]:_MT[201], arg this[12977] :
  errorCode, arg a[12983] :
  (12981 call int[10] 32), arg b[12987] :
  errorCode) : _unknown[42] "inline" "method" "operator"
  {
    (12993 return(12994 call ==(12996 call : a(13000 call int[10] 32))(13003 call qio_err_to_int b)))
  }
  function _unknown[42].==[13007](arg _mt[13023]:_MT[201], arg this[13010] :
  errorCode, arg a[13016] :
  (13014 call int[10] 64), arg b[13020] :
  errorCode) : _unknown[42] "inline" "method" "operator"
  {
    (13026 return(13027 call ==(13029 call : a(13033 call int[10] 32))(13036 call qio_err_to_int b)))
  }
  function _unknown[42].!=[13040](arg _mt[13054]:_MT[201], arg this[13043] :
  errorCode, arg a[13047] :
  errorCode, arg b[13051] :
  errorCode) : _unknown[42] "inline" "method" "operator"
  {
    (13057 return(13058 call !(13060 call == a b)))
  }
  function _unknown[42].!=[13066](arg _mt[13082]:_MT[201], arg this[13069] :
  errorCode, arg a[13073] :
  errorCode, arg b[13079] :
  (13077 call int[10] 32)) : _unknown[42] "inline" "method" "operator"
  {
    (13085 return(13086 call !(13088 call == a b)))
  }
  function _unknown[42].!=[13094](arg _mt[13110]:_MT[201], arg this[13097] :
  errorCode, arg a[13101] :
  errorCode, arg b[13107] :
  (13105 call int[10] 64)) : _unknown[42] "inline" "method" "operator"
  {
    (13113 return(13114 call !(13116 call == a b)))
  }
  function _unknown[42].!=[13122](arg _mt[13138]:_MT[201], arg this[13125] :
  errorCode, arg a[13131] :
  (13129 call int[10] 32), arg b[13135] :
  errorCode) : _unknown[42] "inline" "method" "operator"
  {
    (13141 return(13142 call !(13144 call == a b)))
  }
  function _unknown[42].!=[13150](arg _mt[13166]:_MT[201], arg this[13153] :
  errorCode, arg a[13159] :
  (13157 call int[10] 64), arg b[13163] :
  errorCode) : _unknown[42] "inline" "method" "operator"
  {
    (13169 return(13170 call !(13172 call == a b)))
  }
  function _unknown[42].![13178](arg _mt[13188]:_MT[201], arg this[13181] :
  errorCode, arg a[13185] :
  errorCode) : _unknown[42] "inline" "method" "operator"
  {
    (13191 return(13192 call ==(13195 call qio_err_iserr a)(13197 call : 0 c_int)))
  }
  function _unknown[42].chpl_cond_test_method[13203](arg _mt[13209]:_MT[201], arg this[13206] :
  errorCode) : _unknown[42] "inline" "method"
  {
    (13212 return(13213 call !=(13216 call qio_err_iserr this)(13218 call : 0 c_int)))
  }
  function :[13224](arg x[13227] :
  errorCode, arg t[13233] :
  (13231 call int[10] 32)) : _unknown[42] "inline" "operator"
  {
    (13237 return(13239 call qio_err_to_int x))
  }
  function :[13243](arg x[13246] :
  errorCode, arg t[13252] :
  (13250 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (13256 return(13257 call :(13260 call qio_err_to_int x)(13263 call int[10] 64)))
  }
  function :[13267](arg x[13272] :
  (13270 call int[10] 32), arg t[13276] :
  errorCode) : _unknown[42] "inline" "operator"
  {
    (13280 return(13282 call qio_int_to_err x))
  }
  function :[13286](arg x[13291] :
  (13289 call int[10] 64), arg t[13295] :
  errorCode) : _unknown[42] "inline" "operator"
  {
    (13299 return(13301 call qio_int_to_err(13302 call : x(13306 call int[10] 32))))
  }
  function _unknown[42].=[13310](arg _mt[13324]:_MT[201], arg this[13313] :
  errorCode, ref arg ret[13317] :
  errorCode, arg x[13321] :
  errorCode) : _unknown[42] "assignop" "inline" "method" "operator"
  {
    (13327 '=' ret x)
  }
  function _unknown[42].=[13332](arg _mt[13348]:_MT[201], arg this[13335] :
  errorCode, ref arg ret[13339] :
  errorCode, arg x[13345] :
  (13343 call int[10] 32)) : _unknown[42] "assignop" "inline" "method" "operator"
  {
    (13351 '=' ret(13354 call qio_int_to_err x))
  }
  function _unknown[42].=[13358](arg _mt[13374]:_MT[201], arg this[13361] :
  errorCode, ref arg ret[13365] :
  errorCode, arg x[13371] :
  (13369 call int[10] 64)) : _unknown[42] "assignop" "inline" "method" "operator"
  {
    (13377 '=' ret(13380 call qio_int_to_err(13381 call : x(13385 call int[10] 32))))
  }
  function _unknown[42].=[13389](arg _mt[13403]:_MT[201], arg this[13392] :
  errorCode, ref arg ret[13396] :
  c_int, arg x[13400] :
  errorCode) : _unknown[42] "assignop" "inline" "method" "operator"
  {
    (13406 '=' ret(13408 call :(13411 call qio_err_to_int x) c_int))
  }
  (13417 'use' CTypes)
  (13420 'use' POSIX)
  function chpl_macro_int_EEOF[13422]() : _unknown[42] "extern" "local args" "no fn body" "private"
  {
  }
  { scopeless type
    c_int
  }
  function chpl_macro_int_ESHORT[13428]() : _unknown[42] "extern" "local args" "no fn body" "private"
  {
  }
  { scopeless type
    c_int
  }
  function chpl_macro_int_EFORMAT[13434]() : _unknown[42] "extern" "local args" "no fn body" "private"
  {
  }
  { scopeless type
    c_int
  }
  function EEOF[13440]() : _unknown[42] "inline" "no parens" "private"
  {
    (13443 return(13444 call :(13447 call chpl_macro_int_EEOF) c_int))
  }
  function ESHORT[13451]() : _unknown[42] "inline" "no parens" "private"
  {
    (13454 return(13455 call :(13458 call chpl_macro_int_ESHORT) c_int))
  }
  function EFORMAT[13462]() : _unknown[42] "inline" "no parens" "private"
  {
    (13465 return(13466 call :(13469 call chpl_macro_int_EFORMAT) c_int))
  }
  type SystemError[13599] unknown err[13476] errorCode unknown details[13481] string[244] function SystemError[13599].init[13485](arg _mt[13501]:_MT[201], arg this[13487]:SystemError[13599], arg err[13490] :
  errorCode, arg details[13497] :
  string[244] =
  "") : _unknown[42] "method" "primary method"
  {
    (13504 call =(13509 call . this c"err") err)
    (13513 call =(13518 call . this c"details") details)
  } function SystemError[13599].message[13524](arg _mt[13528]:_MT[201], arg this[13526]:SystemError[13599]) : _unknown[42] "method" "primary method" "method overrides"
  {
    { scopeless
      unknown strerror_err[13532] 0 c_int
      (13536 'end of statement')
    }
    { scopeless
      unknown errstr[13538](13540 call sys_strerror_syserr_str err strerror_err)
      (13544 'end of statement')
    }
    { scopeless
      unknown err_msg[13546] string[244]
      (13549 'end of statement')
    }
    Try!
    {
      {
        (13551 call = err_msg(13560 call(13557 call . string[244] c"createAdoptingBuffer") errstr))
      }
    }
    if(13589 call _cond_test(13580 call !(13588 call(13585 call . details c"isEmpty"))))
    {
      { scopeless
        (13565 call += err_msg(13568 call +(13570 call + " (" details) ")"))
      }
    }
    (13594 return err_msg)
  } Error
  function createSystemOrChplError[13601](arg err[13604] :
  errorCode, arg details[13609] :
  string[244] =
  "") : _unknown[42] "always propagate line file info" "insert line file info"
  {
    { scopeless
      unknown strerror_err[13616] 0 c_int
      (13620 'end of statement')
    }
    { scopeless
      unknown errstr[13622](13624 call sys_strerror_syserr_str err strerror_err)
      (13628 'end of statement')
    }
    { scopeless
      unknown err_msg[13630] string[244]
      (13633 'end of statement')
    }
    Try!
    {
      {
        (13635 call = err_msg(13642 call(13639 call . string[244] c"createAdoptingBuffer") errstr))
      }
    }
    {
      unknown tmp[13702] "expr temp" "maybe param" "maybe type" "temp"
      (13704 'move' tmp[13702] err)
      if(13709 call _cond_test(13706 call == tmp[13702] EEOF))
      {
        { scopeless
          (13652 return(13653 'new'(_chpl_manager = _owned[238](?))(13657 call EofError details err_msg)))
        }
      }
      {
        if(13715 call _cond_test(13712 call == tmp[13702] ESHORT))
        {
          { scopeless
            (13666 return(13667 'new'(_chpl_manager = _owned[238](?))(13671 call UnexpectedEofError details err_msg)))
          }
        }
        {
          if(13722 call _cond_test(13719 call == tmp[13702] EFORMAT))
          {
            { scopeless
              (13680 return(13681 'new'(_chpl_manager = _owned[238](?))(13685 call BadFormatError details err_msg)))
            }
          }
          {
            { scopeless
              (13693 return(13695 call createSystemError err details))
            }
          }
        }
      }
    }
  }
  { scopeless type
    Error
  }
  function createSystemOrChplError[13729](arg err[13732] :
  int[10], arg details[13737] :
  string[244] =
  "") : _unknown[42] "always propagate line file info" "insert line file info"
  {
    (13743 return(13745 call createSystemOrChplError(13746 call : err errorCode) details))
  }
  { scopeless type
    Error
  }
  function createSystemError[13754](arg err[13757] :
  errorCode, arg details[13762] :
  string[244] =
  "") : _unknown[42] "always propagate line file info" "insert line file info"
  {
    if(14056 call _cond_test(14034 call ||(14036 call ||(14038 call ||(14040 call == err EAGAIN)(14044 call == err EALREADY))(14048 call == err EWOULDBLOCK))(14052 call == err EINPROGRESS)))
    {
      (13769 return(13770 'new'(_chpl_manager = _owned[238](?))(13774 call BlockingIoError details err)))
    }
    {
      { scopeless
        if(14029 call _cond_test(14025 call == err ECHILD))
        {
          (13778 return(13779 'new'(_chpl_manager = _owned[238](?))(13783 call ChildProcessError details err)))
        }
        {
          { scopeless
            if(14020 call _cond_test(14016 call == err EPIPE))
            {
              (13787 return(13788 'new'(_chpl_manager = _owned[238](?))(13792 call BrokenPipeError details err)))
            }
            {
              { scopeless
                if(14011 call _cond_test(14007 call == err ECONNABORTED))
                {
                  (13796 return(13797 'new'(_chpl_manager = _owned[238](?))(13801 call ConnectionAbortedError details err)))
                }
                {
                  { scopeless
                    if(14002 call _cond_test(13998 call == err ECONNREFUSED))
                    {
                      (13805 return(13806 'new'(_chpl_manager = _owned[238](?))(13810 call ConnectionRefusedError details err)))
                    }
                    {
                      { scopeless
                        if(13993 call _cond_test(13989 call == err ECONNRESET))
                        {
                          (13814 return(13815 'new'(_chpl_manager = _owned[238](?))(13819 call ConnectionResetError details err)))
                        }
                        {
                          { scopeless
                            if(13984 call _cond_test(13980 call == err EEXIST))
                            {
                              (13823 return(13824 'new'(_chpl_manager = _owned[238](?))(13828 call FileExistsError details err)))
                            }
                            {
                              { scopeless
                                if(13975 call _cond_test(13971 call == err ENOENT))
                                {
                                  (13832 return(13833 'new'(_chpl_manager = _owned[238](?))(13837 call FileNotFoundError details err)))
                                }
                                {
                                  { scopeless
                                    if(13966 call _cond_test(13962 call == err EINTR))
                                    {
                                      (13841 return(13842 'new'(_chpl_manager = _owned[238](?))(13846 call InterruptedError details err)))
                                    }
                                    {
                                      { scopeless
                                        if(13957 call _cond_test(13953 call == err EISDIR))
                                        {
                                          (13850 return(13851 'new'(_chpl_manager = _owned[238](?))(13855 call IsADirectoryError details err)))
                                        }
                                        {
                                          { scopeless
                                            if(13948 call _cond_test(13944 call == err ENOTDIR))
                                            {
                                              (13859 return(13860 'new'(_chpl_manager = _owned[238](?))(13864 call NotADirectoryError details err)))
                                            }
                                            {
                                              { scopeless
                                                if(13939 call _cond_test(13929 call ||(13931 call == err EACCES)(13935 call == err EPERM)))
                                                {
                                                  (13868 return(13869 'new'(_chpl_manager = _owned[238](?))(13873 call PermissionError details err)))
                                                }
                                                {
                                                  { scopeless
                                                    if(13924 call _cond_test(13920 call == err ESRCH))
                                                    {
                                                      (13877 return(13878 'new'(_chpl_manager = _owned[238](?))(13882 call ProcessLookupError details err)))
                                                    }
                                                    {
                                                      { scopeless
                                                        if(13915 call _cond_test(13911 call == err ETIMEDOUT))
                                                        {
                                                          (13886 return(13887 'new'(_chpl_manager = _owned[238](?))(13891 call TimeoutError details err)))
                                                        }
                                                        {
                                                          { scopeless
                                                            if(13907 call _cond_test(13903 call == err EIO))
                                                            {
                                                              (13895 return(13896 'new'(_chpl_manager = _owned[238](?))(13900 call IoError err details)))
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    (14061 return(14062 'new'(_chpl_manager = _owned[238](?))(14066 call SystemError err details)))
  }
  { scopeless type
    SystemError
  }
  function createSystemError[14072](arg err[14075] :
  int[10], arg details[14080] :
  string[244] =
  "") : _unknown[42] "always propagate line file info" "insert line file info"
  {
    (14085 return(14087 call createSystemError(14088 call : err errorCode) details))
  }
  type BlockingIoError[14131] function BlockingIoError[14131].init[14097](arg _mt[14116]:_MT[201], arg this[14099]:BlockingIoError[14131], arg details[14103] :
  string[244] =
  "", arg err[14112] :
  errorCode =
  (14108 call : EWOULDBLOCK errorCode)) : _unknown[42] "method" "primary method"
  {
    (14125 call(14122 call . super c"init") err details)
  } SystemError
  type ChildProcessError[14167] function ChildProcessError[14167].init[14135](arg _mt[14154]:_MT[201], arg this[14137]:ChildProcessError[14167], arg details[14141] :
  string[244] =
  "", arg err[14150] :
  errorCode =
  (14146 call : ECHILD errorCode)) : _unknown[42] "method" "primary method"
  {
    (14161 call(14158 call . super c"init") err details)
  } SystemError
  type ConnectionError[14198] function ConnectionError[14198].init[14171](arg _mt[14185]:_MT[201], arg this[14173]:ConnectionError[14198], arg err[14176] :
  errorCode, arg details[14181] :
  string[244] =
  "") : _unknown[42] "method" "primary method"
  {
    (14192 call(14189 call . super c"init") err details)
  } SystemError
  type BrokenPipeError[14234] function BrokenPipeError[14234].init[14202](arg _mt[14221]:_MT[201], arg this[14204]:BrokenPipeError[14234], arg details[14208] :
  string[244] =
  "", arg err[14217] :
  errorCode =
  (14213 call : EPIPE errorCode)) : _unknown[42] "method" "primary method"
  {
    (14228 call(14225 call . super c"init") err details)
  } ConnectionError
  type ConnectionAbortedError[14270] function ConnectionAbortedError[14270].init[14238](arg _mt[14257]:_MT[201], arg this[14240]:ConnectionAbortedError[14270], arg details[14244] :
  string[244] =
  "", arg err[14253] :
  errorCode =
  (14249 call : ECONNABORTED errorCode)) : _unknown[42] "method" "primary method"
  {
    (14264 call(14261 call . super c"init") err details)
  } ConnectionError
  type ConnectionRefusedError[14306] function ConnectionRefusedError[14306].init[14274](arg _mt[14293]:_MT[201], arg this[14276]:ConnectionRefusedError[14306], arg details[14280] :
  string[244] =
  "", arg err[14289] :
  errorCode =
  (14285 call : ECONNREFUSED errorCode)) : _unknown[42] "method" "primary method"
  {
    (14300 call(14297 call . super c"init") err details)
  } ConnectionError
  type ConnectionResetError[14342] function ConnectionResetError[14342].init[14310](arg _mt[14329]:_MT[201], arg this[14312]:ConnectionResetError[14342], arg details[14316] :
  string[244] =
  "", arg err[14325] :
  errorCode =
  (14321 call : ECONNRESET errorCode)) : _unknown[42] "method" "primary method"
  {
    (14336 call(14333 call . super c"init") err details)
  } ConnectionError
  type FileExistsError[14378] function FileExistsError[14378].init[14346](arg _mt[14365]:_MT[201], arg this[14348]:FileExistsError[14378], arg details[14352] :
  string[244] =
  "", arg err[14361] :
  errorCode =
  (14357 call : EEXIST errorCode)) : _unknown[42] "method" "primary method"
  {
    (14372 call(14369 call . super c"init") err details)
  } SystemError
  type FileNotFoundError[14414] function FileNotFoundError[14414].init[14382](arg _mt[14401]:_MT[201], arg this[14384]:FileNotFoundError[14414], arg details[14388] :
  string[244] =
  "", arg err[14397] :
  errorCode =
  (14393 call : ENOENT errorCode)) : _unknown[42] "method" "primary method"
  {
    (14408 call(14405 call . super c"init") err details)
  } SystemError
  type InterruptedError[14450] function InterruptedError[14450].init[14418](arg _mt[14437]:_MT[201], arg this[14420]:InterruptedError[14450], arg details[14424] :
  string[244] =
  "", arg err[14433] :
  errorCode =
  (14429 call : EINTR errorCode)) : _unknown[42] "method" "primary method"
  {
    (14444 call(14441 call . super c"init") err details)
  } SystemError
  type IsADirectoryError[14486] function IsADirectoryError[14486].init[14454](arg _mt[14473]:_MT[201], arg this[14456]:IsADirectoryError[14486], arg details[14460] :
  string[244] =
  "", arg err[14469] :
  errorCode =
  (14465 call : EISDIR errorCode)) : _unknown[42] "method" "primary method"
  {
    (14480 call(14477 call . super c"init") err details)
  } SystemError
  type NotADirectoryError[14522] function NotADirectoryError[14522].init[14490](arg _mt[14509]:_MT[201], arg this[14492]:NotADirectoryError[14522], arg details[14496] :
  string[244] =
  "", arg err[14505] :
  errorCode =
  (14501 call : ENOTDIR errorCode)) : _unknown[42] "method" "primary method"
  {
    (14516 call(14513 call . super c"init") err details)
  } SystemError
  type PermissionError[14558] function PermissionError[14558].init[14526](arg _mt[14545]:_MT[201], arg this[14528]:PermissionError[14558], arg details[14532] :
  string[244] =
  "", arg err[14541] :
  errorCode =
  (14537 call : EPERM errorCode)) : _unknown[42] "method" "primary method"
  {
    (14552 call(14549 call . super c"init") err details)
  } SystemError
  type ProcessLookupError[14594] function ProcessLookupError[14594].init[14562](arg _mt[14581]:_MT[201], arg this[14564]:ProcessLookupError[14594], arg details[14568] :
  string[244] =
  "", arg err[14577] :
  errorCode =
  (14573 call : ESRCH errorCode)) : _unknown[42] "method" "primary method"
  {
    (14588 call(14585 call . super c"init") err details)
  } SystemError
  type TimeoutError[14630] function TimeoutError[14630].init[14598](arg _mt[14617]:_MT[201], arg this[14600]:TimeoutError[14630], arg details[14604] :
  string[244] =
  "", arg err[14613] :
  errorCode =
  (14609 call : ETIMEDOUT errorCode)) : _unknown[42] "method" "primary method"
  {
    (14624 call(14621 call . super c"init") err details)
  } SystemError
  type IoError[14663] function IoError[14663].init[14634](arg _mt[14650]:_MT[201], arg this[14636]:IoError[14663], arg err[14640] :
  errorCode =
  EIO, arg details[14646] :
  string[244] =
  "") : _unknown[42] "method" "primary method"
  {
    (14657 call(14654 call . super c"init") err details)
  } SystemError
  type EofError[14808] unknown details[14668] string[244] function EofError[14808].init[14672](arg _mt[14688]:_MT[201], arg this[14674]:EofError[14808], arg details[14678] :
  string[244] =
  "", arg err_msg[14684] :
  string[244] =
  "") : _unknown[42] "method" "primary method"
  {
    (14691 call =(14694 call . this c"details") details)
    (14698 call =(14703 call . this c"_msg") err_msg)
  } function EofError[14808].message[14709](arg _mt[14713]:_MT[201], arg this[14711]:EofError[14808]) : _unknown[42] "method" "primary method" "method overrides"
  {
    { scopeless
      unknown generatedMsg[14717] string[244]
      (14720 'end of statement')
    }
    if(14776 call _cond_test(14769 call !(14775 call(14772 call . _msg c"isEmpty"))))
    {
      (14722 call += generatedMsg _msg)
    }
    {
      { scopeless
        unknown err[14728] EEOF errorCode
        (14732 'end of statement')
      }
      { scopeless
        unknown strerror_err_ignore[14734] 0 c_int
        (14738 'end of statement')
      }
      { scopeless
        unknown errstr[14740](14742 call sys_strerror_syserr_str err strerror_err_ignore)
        (14746 'end of statement')
      }
      { scopeless
        unknown errorcode_msg[14748] string[244]
        (14751 'end of statement')
      }
      Try!
      {
        {
          (14753 call = errorcode_msg(14760 call(14757 call . string[244] c"createAdoptingBuffer") errstr))
        }
      }
      (14765 call += generatedMsg errorcode_msg)
    }
    if(14798 call _cond_test(14791 call !(14797 call(14794 call . details c"isEmpty"))))
    {
      { scopeless
        (14780 call += generatedMsg(14783 call +(14785 call + " (" details) ")"))
      }
    }
    (14803 return generatedMsg)
  } Error
  type UnexpectedEofError[14951] unknown details[14813] string[244] function UnexpectedEofError[14951].init[14817](arg _mt[14833]:_MT[201], arg this[14819]:UnexpectedEofError[14951], arg details[14823] :
  string[244] =
  "", arg err_msg[14829] :
  string[244] =
  "") : _unknown[42] "method" "primary method"
  {
    (14836 call =(14839 call . this c"details") details)
    (14843 call =(14846 call . this c"_msg") err_msg)
  } function UnexpectedEofError[14951].message[14852](arg _mt[14856]:_MT[201], arg this[14854]:UnexpectedEofError[14951]) : _unknown[42] "method" "primary method" "method overrides"
  {
    { scopeless
      unknown generatedMsg[14860] string[244]
      (14863 'end of statement')
    }
    if(14919 call _cond_test(14912 call !(14918 call(14915 call . _msg c"isEmpty"))))
    {
      (14865 call += generatedMsg _msg)
    }
    {
      { scopeless
        unknown err[14871] ESHORT errorCode
        (14875 'end of statement')
      }
      { scopeless
        unknown strerror_err_ignore[14877] 0 c_int
        (14881 'end of statement')
      }
      { scopeless
        unknown errstr[14883](14885 call sys_strerror_syserr_str err strerror_err_ignore)
        (14889 'end of statement')
      }
      { scopeless
        unknown errorcode_msg[14891] string[244]
        (14894 'end of statement')
      }
      Try!
      {
        {
          (14896 call = errorcode_msg(14903 call(14900 call . string[244] c"createAdoptingBuffer") errstr))
        }
      }
      (14908 call += generatedMsg errorcode_msg)
    }
    if(14941 call _cond_test(14934 call !(14940 call(14937 call . details c"isEmpty"))))
    {
      { scopeless
        (14923 call += generatedMsg(14926 call +(14928 call + " (" details) ")"))
      }
    }
    (14946 return generatedMsg)
  } Error
  type UnexpectedEofError[348557](?)
  type BadFormatError[15094] unknown details[14956] string[244] function BadFormatError[15094].init[14960](arg _mt[14976]:_MT[201], arg this[14962]:BadFormatError[15094], arg details[14966] :
  string[244] =
  "", arg err_msg[14972] :
  string[244] =
  "") : _unknown[42] "method" "primary method"
  {
    (14979 call =(14982 call . this c"details") details)
    (14986 call =(14989 call . this c"_msg") err_msg)
  } function BadFormatError[15094].message[14995](arg _mt[14999]:_MT[201], arg this[14997]:BadFormatError[15094]) : _unknown[42] "method" "primary method" "method overrides"
  {
    { scopeless
      unknown generatedMsg[15003] string[244]
      (15006 'end of statement')
    }
    if(15062 call _cond_test(15055 call !(15061 call(15058 call . _msg c"isEmpty"))))
    {
      (15008 call += generatedMsg _msg)
    }
    {
      { scopeless
        unknown err[15014] EFORMAT errorCode
        (15018 'end of statement')
      }
      { scopeless
        unknown strerror_err_ignore[15020] 0 c_int
        (15024 'end of statement')
      }
      { scopeless
        unknown errstr[15026](15028 call sys_strerror_syserr_str err strerror_err_ignore)
        (15032 'end of statement')
      }
      { scopeless
        unknown errorcode_msg[15034] string[244]
        (15037 'end of statement')
      }
      Try!
      {
        {
          (15039 call = errorcode_msg(15046 call(15043 call . string[244] c"createAdoptingBuffer") errstr))
        }
      }
      (15051 call += generatedMsg errorcode_msg)
    }
    if(15084 call _cond_test(15077 call !(15083 call(15080 call . details c"isEmpty"))))
    {
      { scopeless
        (15066 call += generatedMsg(15069 call +(15071 call + " (" details) ")"))
      }
    }
    (15089 return generatedMsg)
  } Error
  type InsufficientCapacityError[15146] function InsufficientCapacityError[15146].init[15098](arg _mt[15108]:_MT[201], arg this[15100]:InsufficientCapacityError[15146], arg details[15104] :
  string[244] =
  "") : _unknown[42] "method" "primary method"
  {
    (15115 call(15112 call . super c"init")(15116 call : ERANGE errorCode) details)
  } function InsufficientCapacityError[15146].message[15123](arg _mt[15127]:_MT[201], arg this[15125]:InsufficientCapacityError[15146]) : _unknown[42] "method" "primary method" "method overrides"
  {
    (15130 return(15140 IfExpr (15135 call(15132 call . details c"isEmpty")) then
    { scopeless
      "Result too large"
    } else
    { scopeless
      details
    } ))
  } IoError
  function sys_strerror_syserr_str[15148](arg error[15151] :
  errorCode, out arg err_in_strerror[15155] :
  c_int) : _unknown[42] "extern" "local args" "no fn body" "private"
  {
  }
  { scopeless type
    (15159 call c_ptrConst c_char)
  }
  function quote_string[15164](arg s[15167] :
  string[244], arg len[15171] :
  c_ssize_t) : _unknown[42] "private"
  {
    { scopeless
      const QIO_STRING_FORMAT_CHPL[15176] "const" "extern"(15178 call uint[86] 8)
      (15181 'end of statement')
    }
    function qio_quote_string[15182](arg s[15187] :
    (15185 call uint[86] 8), arg e[15193] :
    (15191 call uint[86] 8), arg f[15199] :
    (15197 call uint[86] 8), arg ptr[15205] :
    (15203 call c_ptrConst c_char), arg len[15209] :
    c_ssize_t, ref arg ret[15215] :
    (15213 call c_ptrConst c_char), arg ti[15221] :
    (15219 call c_ptr void[4])) : _unknown[42] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      errorCode
    }
    function qio_strdup[15228](arg s[15230]:_any[141](?)) : _unknown[42] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (15233 call c_ptrConst c_char)
    }
    { scopeless
      unknown ret[15239](15241 call c_ptrConst c_char)
      (15244 'end of statement')
    }
    { scopeless
      unknown err[15246](15249 call qio_quote_string(15250 call : 34(15256 call uint[86] 8))(15258 call : 34(15262 call uint[86] 8)) QIO_STRING_FORMAT_CHPL(15273 call(15270 call .(15269 call(15266 call . s c"localize")) c"c_str")) len ret nil[32]) errorCode
      (15278 'end of statement')
    }
    Try!
    {
      {
        if(15293 call _cond_test err)
        {
          { scopeless
            (15280 return(15285 call(15282 call . string[244] c"createAdoptingBuffer")(15287 call qio_strdup "<error>")))
          }
        }
        (15298 return(15303 call(15300 call . string[244] c"createAdoptingBuffer") ret))
      }
    }
  }
  function ioerror[15310](arg error[15313] :
  errorCode, arg msg[15317] :
  string[244], arg path[15321] :
  string[244], arg offset[15327] :
  (15325 call int[10] 64)) : _unknown[42] throws "always propagate line file info" "insert line file info"
  {
    if(15378 call _cond_test error)
    {
      { scopeless
        const quotedpath[15333] "const"(15335 call quote_string path(15337 call :(15342 call . path c"numBytes") c_ssize_t))
        (15347 'end of statement')
      }
      { scopeless
        unknown details[15349](15350 call +(15352 call +(15354 call +(15356 call + msg " with path ") quotedpath) " offset ")(15366 call : offset string[244]))
        (15371 'end of statement')
      }
      (15372 'throw'(15374 call createSystemOrChplError error details))
    }
  }
  function ioerror[15384](arg error[15387] :
  errorCode, arg msg[15391] :
  string[244], arg path[15395] :
  string[244]) : _unknown[42] throws "always propagate line file info" "insert line file info"
  {
    if(15431 call _cond_test error)
    {
      { scopeless
        const quotedpath[15401] "const"(15403 call quote_string path(15405 call :(15408 call . path c"numBytes") c_ssize_t))
        (15413 'end of statement')
      }
      { scopeless
        unknown details[15415](15416 call +(15418 call + msg " with path ") quotedpath)
        (15424 'end of statement')
      }
      (15425 'throw'(15427 call createSystemOrChplError error details))
    }
  }
  function ioerror[15437](arg error[15440] :
  errorCode, arg msg[15444] :
  string[244]) : _unknown[42] throws "always propagate line file info" "insert line file info"
  {
    if(15455 call _cond_test error)
    {
      { scopeless
        (15448 'throw'(15450 call createSystemOrChplError error msg))
      }
    }
  }
  function ioerror[15462](arg errstr[15465] :
  string[244], arg msg[15469] :
  string[244], arg path[15473] :
  string[244], arg offset[15479] :
  (15477 call int[10] 64)) : _unknown[42] throws "always propagate line file info" "insert line file info"
  {
    { scopeless
      const quotedpath[15484] "const"(15486 call quote_string path(15488 call :(15491 call . path c"numBytes") c_ssize_t))
      (15496 'end of statement')
    }
    { scopeless
      const details[15498] "const"(15499 call +(15501 call +(15503 call +(15505 call +(15507 call +(15509 call + errstr " ") msg) " with path ") quotedpath) " offset ")(15519 call : offset string[244]))
      (15524 'end of statement')
    }
    (15525 'throw'(15527 call createSystemOrChplError(15528 call : EIO errorCode) details))
  }
  function errorToString[15535](arg error[15538] :
  errorCode) : _unknown[42]
  {
    { scopeless
      unknown strerror_err[15544] 0 c_int
      (15548 'end of statement')
    }
    { scopeless
      const errstr[15550] "const"(15552 call sys_strerror_syserr_str error strerror_err)
      (15556 'end of statement')
    }
    Try!
    {
      {
        (15558 return(15563 call(15560 call . string[244] c"createAdoptingBuffer") errstr))
      }
    }
  }
  { scopeless type
    string[244]
  }
}