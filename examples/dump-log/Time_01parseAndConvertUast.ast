AST dump for Time after pass parseAndConvertUast.
Module use list: 

{
  (387096 'use' ChapelStandard)
  (365336 'import' HaltWrappers)
  (365338 'use' CTypes)
  function chpl_now_time[365340]() : _unknown[42] "extern" "local args" "no fn body" "private"
  {
  }
  { scopeless type
    real[13]
  }
  type _timevalue[365350]
  function chpl_null_timevalue[365352]() : _unknown[42] "extern" "local args" "no fn body" "private"
  {
  }
  { scopeless type
    _timevalue
  }
  function chpl_now_timevalue[365358]() : _unknown[42] "extern" "local args" "no fn body" "private"
  {
  }
  { scopeless type
    _timevalue
  }
  function chpl_timevalue_parts[365364](arg t[365367] :
  _timevalue, out arg seconds[365373] :
  (365371 call int[10] 32), out arg minutes[365379] :
  (365377 call int[10] 32), out arg hours[365385] :
  (365383 call int[10] 32), out arg mday[365391] :
  (365389 call int[10] 32), out arg month[365397] :
  (365395 call int[10] 32), out arg year[365403] :
  (365401 call int[10] 32), out arg wday[365409] :
  (365407 call int[10] 32), out arg yday[365415] :
  (365413 call int[10] 32), out arg isdst[365421] :
  (365419 call int[10] 32)) : void[4] "extern" "local args" "no fn body" "private"
  {
  }
  { scopeless
    unknown cIsoDayOfWeek[365427] "config" "deprecated" "param" 1
    (365430 'end of statement')
  }
  type dayOfWeek[365447] def Monday[365433]:dayOfWeek[365447] 1 def Tuesday[365435]:dayOfWeek[365447] def Wednesday[365437]:dayOfWeek[365447] def Thursday[365439]:dayOfWeek[365447] def Friday[365441]:dayOfWeek[365447] def Saturday[365443]:dayOfWeek[365447] def Sunday[365445]:dayOfWeek[365447]
  { scopeless
    unknown _MINYEAR[365451] "param" 1
    (365454 'end of statement')
  }
  { scopeless
    unknown _MAXYEAR[365456] "param" 9999
    (365461 'end of statement')
  }
  { scopeless
    const DAYS_IN_MONTH[365463] "const" "private"(365482 call _build_tuple(365465 call - 1) 31 28 31 30 31 30 31 31 30 31 30 31)
    (365485 'end of statement')
  }
  { scopeless
    const DAYS_BEFORE_MONTH[365487] "const" "private"(365489 call init_days_before_month)
    (365491 'end of statement')
  }
  { scopeless
    const unixEpoch[365493] "const"(365494 'new'(365496 call dateTime 1970 1 1))
    (365503 'end of statement')
  }
  { scopeless
    const DI400Y[365505] "const" "private"(365507 call daysBeforeYear 401)
    (365512 'end of statement')
  }
  { scopeless
    const DI100Y[365514] "const" "private"(365516 call daysBeforeYear 101)
    (365519 'end of statement')
  }
  { scopeless
    const DI4Y[365521] "const" "private"(365523 call daysBeforeYear 5)
    (365526 'end of statement')
  }
  function getTimeOfDay[365527]() : _unknown[42] "private"
  {
    type time_t[365539]
    type suseconds_t[365545]
    type timeval[365559] unknown tv_sec[365549] time_t unknown tv_usec[365554] suseconds_t
    function gettimeofday[365561](ref arg tv[365564] :
    timeval, arg tz[365567]:_any[141](?)) : _unknown[42] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      int[10]
    }
    { scopeless
      unknown tv[365574] timeval
      (365577 'end of statement')
    }
    { scopeless
      unknown ret[365579](365581 call gettimeofday tv nil[32])
      (365585 'end of statement')
    }
    (365587 call assert(365588 call == ret 0))
    (365592 return(365606 call _build_tuple(365594 'cast' int[10](365597 call . tv c"tv_sec"))(365600 'cast' int[10](365603 call . tv c"tv_usec"))))
  }
  { scopeless type
    (365532 call _build_tuple int[10] int[10])
  }
  function tm_zoneType[365611]() type : _unknown[42] "no parens" "private"
  {
    (365615 'use' ChplConfig)
    if(365633 call _cond_test(365627 call == CHPL_TARGET_PLATFORM "darwin"))
    {
      { scopeless
        (365617 return(365619 call c_ptr c_char))
      }
    }
    {
      { scopeless
        (365622 return(365624 call c_ptrConst c_char))
      }
    }
  }
  function timeSinceEpoch[365641]() : _unknown[42]
  {
    { scopeless
      unknown tmp[365657] "temp"(365656 call getTimeOfDay)(365653 call _build_tuple real[13] real[13])
      (365664 call _check_tuple_var_decl tmp[365657] 2)
      unknown seconds[365646](365658 call tmp[365657] 0)
      unknown microseconds[365648](365661 call tmp[365657] 1)
      (365669 'end of statement')
    }
    (365670 call = microseconds(365673 call / microseconds 1e+06))
    (365679 return(365680 'new'(365682 call timeDelta(365683 call + seconds microseconds))))
  }
  { scopeless type
    timeDelta
  }
  type tm[365747] unknown tm_sec[365692] c_int unknown tm_min[365697] c_int unknown tm_hour[365702] c_int unknown tm_mday[365707] c_int unknown tm_mon[365712] c_int unknown tm_year[365717] c_int unknown tm_wday[365722] c_int unknown tm_yday[365727] c_int unknown tm_isdst[365732] c_int unknown tm_gmtoff[365737] c_long unknown tm_zone[365742] tm_zoneType
  function assertInRange[365749](arg val[365751]:_any[141](?), arg low[365753]:_any[141](?), arg high[365755]:_any[141](?)) : _unknown[42] "private"
  {
    (365759 call assert(365760 call &&(365762 call >= val low)(365766 call <= val high)))
  }
  function getLocalTime[365772](arg t[365778] :
  (365774 call * 2 int[10])) : _unknown[42] "private"
  {
    type time_t[365786]
    function localtime_r[365788](const  ref arg t[365791] :
    time_t, ref arg resultp[365795] :
    tm) : _unknown[42] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      void[4]
    }
    { scopeless
      const t1[365803] "const"(365805 'cast' time_t(365808 call t 0)) time_t
      (365811 'end of statement')
    }
    { scopeless
      unknown breakDownTime[365813] tm
      (365816 'end of statement')
    }
    (365818 call localtime_r t1 breakDownTime)
    (365821 return breakDownTime)
  }
  function init_days_before_month[365825]() : _unknown[42] "private"
  {
    { scopeless
      unknown DBM[365829](365830 call * 13 int[10])
      (365837 'end of statement')
    }
    {
      unknown _indexOfInterest[365866] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[365867] "expr temp" "temp"
      (365876 'move' _iterator[365867](365874 call _getIterator(365880 call chpl_direct_range_iter 2 12)))
      Defer
      {
        {
          (365895 call _freeIterator _iterator[365867])
        }
      }
      { scopeless type
        (365885 'move' _indexOfInterest[365866](365882 call iteratorIndex _iterator[365867]))
      }
      ForLoop[365868]
      {
        unknown i[365838] "index var" "insert auto destroy"
        (365890 'move' i[365838] _indexOfInterest[365866])
        {
          (365847 call =(365850 call DBM i)(365852 call +(365855 call DBM(365856 call - i 1))(365861 call DAYS_IN_MONTH(365862 call - i 1))))
        }
        label _continueLabel[365871]
        _indexOfInterest[365866]
        _iterator[365867]
      }
      label _breakLabel[365872]
    }
    (365902 return DBM)
  }
  function daysBeforeYear[365906](arg year[365909] :
  int[10]) : _unknown[42] "private"
  {
    { scopeless
      const y[365914] "const"(365915 call - year 1)
      (365920 'end of statement')
    }
    (365921 return(365922 call +(365924 call -(365926 call +(365928 call * y 365)(365934 call / y 4))(365938 call / y 100))(365942 call / y 400)))
  }
  function daysBeforeMonth[365950](arg year[365953] :
  int[10], arg month[365957] :
  int[10]) : _unknown[42] "private"
  {
    (365962 call assertInRange month 1 12)
    (365966 return(365967 call +(365970 call DAYS_BEFORE_MONTH month)(365983 IfExpr (365972 call &&(365974 call > month 2)(365979 call isLeapYear year)) then
    { scopeless
      1
    } else
    { scopeless
      0
    } )))
  }
  function ymdToOrd[365988](arg year[365991] :
  int[10], arg month[365995] :
  int[10], arg day[365999] :
  int[10]) : _unknown[42] "private"
  {
    (366004 call assertInRange month 1 12)
    { scopeless
      const dim[366009] "const"(366014 'try!-expr'(366011 call daysInMonth year month))
      (366016 'end of statement')
    }
    (366018 call assertInRange day 1 dim)
    (366022 return(366023 call +(366025 call +(366028 call daysBeforeYear year)(366031 call daysBeforeMonth year month)) day))
  }
  function ordToYmd[366037](in arg n[366040] :
  int[10]) : _unknown[42] "private"
  {
    (366044 call -= n 1)
    { scopeless
      const n400[366049] "const"(366050 call / n DI400Y)
      (366055 'end of statement')
    }
    (366056 call = n(366059 call % n DI400Y))
    { scopeless
      unknown year[366064](366065 call +(366067 call * n400 400) 1)
      (366073 'end of statement')
    }
    { scopeless
      const n100[366075] "const"(366076 call / n DI100Y)
      (366081 'end of statement')
    }
    (366082 call = n(366085 call % n DI100Y))
    { scopeless
      const n4[366090] "const"(366091 call / n DI4Y)
      (366096 'end of statement')
    }
    (366097 call = n(366100 call % n DI4Y))
    { scopeless
      const n1[366105] "const"(366106 call / n 365)
      (366111 'end of statement')
    }
    (366112 call = n(366115 call % n 365))
    (366119 call += year(366122 call +(366124 call +(366126 call * n100 100)(366130 call * n4 4)) n1))
    if(366162 call _cond_test(366152 call ||(366154 call == n1 4)(366158 call == n100 4)))
    {
      (366137 call assert(366138 call == n 0))
      (366142 return(366150 call _build_tuple(366144 call - year 1) 12 31))
    }
    { scopeless
      const leapyear[366167] "const"(366168 call &&(366170 call == n1 3)(366174 call ||(366176 call != n4 24)(366180 call == n100 3)))
      (366185 'end of statement')
    }
    (366187 call assert(366188 call == leapyear(366192 call isLeapYear year)))
    { scopeless
      unknown month[366195](366196 call >>(366198 call + n 50) 5)
      (366206 'end of statement')
    }
    { scopeless
      unknown preceding[366208](366210 call daysBeforeMonth year month)
      (366214 'end of statement')
    }
    if(366254 call _cond_test(366250 call > preceding n))
    {
      (366216 call -= month 1)
      if(366233 call _cond_test(366229 call == month 0))
      {
        (366221 call = month 12)
        (366225 call -= year 1)
      }
      { scopeless
        const dim[366238] "const"(366243 'try!-expr'(366240 call daysInMonth year month))
        (366245 'end of statement')
      }
      (366246 call -= preceding dim)
    }
    (366258 call -= n preceding)
    { scopeless
      const dim[366263] "const"(366268 'try!-expr'(366265 call daysInMonth year month))
      (366270 'end of statement')
    }
    (366272 call assertInRange(366273 call + n 1) 1 dim)
    (366279 return(366287 call _build_tuple year month(366283 call + n 1)))
  }
  function isLeapYear[366291](arg year[366294] :
  int[10]) : _unknown[42]
  {
    (366299 return(366300 call &&(366302 call ==(366304 call % year 4) 0)(366309 call ||(366311 call !=(366313 call % year 100) 0)(366318 call ==(366320 call % year 400) 0))))
  }
  { scopeless type
    bool
  }
  function daysInMonth[366328](arg year[366331] :
  int[10], arg month[366335] :
  int[10]) : _unknown[42] throws
  {
    if(366360 call _cond_test(366350 call ||(366352 call < month 1)(366356 call > month 12)))
    {
      { scopeless
        (366340 'throw'(366341 'new'(_chpl_manager = _owned[238](?))(366345 call IllegalArgumentError "month must be between 1 and 12")))
      }
    }
    if(366384 call _cond_test(366375 call &&(366377 call == month 2)(366382 call isLeapYear year)))
    {
      { scopeless
        (366365 return 29)
      }
    }
    {
      { scopeless
        (366370 return(366372 call DAYS_IN_MONTH month))
      }
    }
  }
  { scopeless type
    int[10]
  }
  type date[366497] unknown chpl_year[366401] int[10] unknown chpl_month[366399](366502 'typeof' chpl_year) unknown chpl_day[366396](366500 'typeof' chpl_month) function date[366497].year[366404](arg _mt[366408]:_MT[201], arg this[366406]:date[366497]) : _unknown[42] "method" "primary method" "no parens"
  {
    (366412 return chpl_year)
  }
  { scopeless type
    int[10]
  } function date[366497].month[366417](arg _mt[366421]:_MT[201], arg this[366419]:date[366497]) : _unknown[42] "method" "primary method" "no parens"
  {
    (366425 return chpl_month)
  }
  { scopeless type
    int[10]
  } function date[366497].day[366430](arg _mt[366434]:_MT[201], arg this[366432]:date[366497]) : _unknown[42] "method" "primary method" "no parens"
  {
    (366438 return chpl_day)
  }
  { scopeless type
    int[10]
  } function date[366497].min[366443](arg _mt[366447]:_MT[201], arg this[366445]:date[366497]) : _unknown[42] "method" "primary method" "no parens"
  {
    (366451 return(366452 'new'(366454 call date _MINYEAR 1 1)))
  }
  { scopeless type
    date
  } function date[366497].max[366461](arg _mt[366465]:_MT[201], arg this[366463]:date[366497]) : _unknown[42] "method" "primary method" "no parens"
  {
    (366469 return(366470 'new'(366472 call date _MAXYEAR 12 31)))
  }
  { scopeless type
    date
  } function date[366497].resolution[366479](arg _mt[366483]:_MT[201], arg this[366481]:date[366497]) : _unknown[42] "method" "primary method" "no parens"
  {
    (366487 return(366488 'new'(366490 call timeDelta(days = 1))))
  }
  { scopeless type
    timeDelta
  } serializable
  function _unknown[42].init[366503](arg _mt[366509]:_MT[201], arg this[366506] :
  date) : _unknown[42] "method" "@unstable"
  {
  }
  function _unknown[42].init[366514](arg _mt[366532]:_MT[201], arg this[366517] :
  date, arg year[366521] :
  int[10], arg month[366525] :
  int[10], arg day[366529] :
  int[10]) : _unknown[42] "method"
  {
    if(366562 call _cond_test(366546 call ||(366548 call < year(366551 call - _MINYEAR 1))(366555 call > year(366558 call + _MAXYEAR 1))))
    {
      { scopeless
        (366541 call(366538 call . HaltWrappers c"initHalt") "year is out of the valid range")
      }
    }
    if(366586 call _cond_test(366576 call ||(366578 call < month 1)(366582 call > month 12)))
    {
      { scopeless
        (366571 call(366568 call . HaltWrappers c"initHalt") "month is out of the valid range")
      }
    }
    { scopeless
      const dim[366592] "const"(366597 'try!-expr'(366594 call daysInMonth year month))
      (366599 'end of statement')
    }
    if(366619 call _cond_test(366609 call ||(366611 call < day 1)(366615 call > day dim)))
    {
      { scopeless
        (366604 call(366601 call . HaltWrappers c"initHalt") "day is out of the valid range")
      }
    }
    (366624 call =(366629 call . this c"chpl_year") year)
    (366633 call =(366638 call . this c"chpl_month") month)
    (366642 call =(366647 call . this c"chpl_day") day)
  }
  function _unknown[42].today[366653](arg _mt[366659]:_MT[201], arg this[366656] :
  date) : _unknown[42] "method"
  {
    { scopeless
      const timeSinceEpoch[366664] "const"(366666 call getTimeOfDay)
      (366668 'end of statement')
    }
    { scopeless
      const td[366670] "const"(366671 'new'(366673 call timeDelta(seconds =(366675 call timeSinceEpoch 0))(microseconds =(366679 call timeSinceEpoch 1))))
      (366683 'end of statement')
    }
    (366684 return(366685 call +(366693 call(366690 call . unixEpoch c"getDate")) td))
  }
  { scopeless type
    date
  }
  function _unknown[42].utcToday[366698](arg _mt[366704]:_MT[201], arg this[366701] :
  date) : _unknown[42] "method"
  {
    { scopeless
      unknown now[366709](366711 call chpl_now_timevalue)
      (366713 'end of statement')
    }
    { scopeless
      { scopeless
        unknown type_tmp[366723] "temp" "type variable"(366718 call int[10] 32)
        unknown seconds[366753] type_tmp[366723]
      }
      { scopeless
        unknown minutes[366749] type_tmp[366723]
      }
      { scopeless
        unknown hours[366745] type_tmp[366723]
      }
      { scopeless
        unknown mday[366741] type_tmp[366723]
      }
      { scopeless
        unknown month[366737] type_tmp[366723]
      }
      { scopeless
        unknown year[366733] type_tmp[366723]
      }
      { scopeless
        unknown wday[366729] type_tmp[366723]
      }
      { scopeless
        unknown yday[366722] type_tmp[366723]
      }
      { scopeless
        unknown isdst[366716] type_tmp[366723]
      }
      (366756 'end of statement')
    }
    (366758 call chpl_timevalue_parts now seconds minutes hours mday month year wday yday isdst)
    (366769 return(366770 'new'(366772 call date(366773 call + year 1900)(366779 call + month 1) mday)))
  }
  { scopeless type
    date
  }
  function _unknown[42].createFromOrdinal[366787](arg _mt[366797]:_MT[201], arg this[366790] :
  date, arg ordinal[366794] :
  int[10]) : _unknown[42] "method"
  {
    if(366833 call _cond_test(366811 call ||(366813 call < ordinal 0)(366817 call > ordinal(366820 call + 1(366832 call(366829 call .(366824 call . date c"max") c"toOrdinal"))))))
    {
      { scopeless
        (366802 call halt "ordinal (" ordinal ") out of range")
      }
    }
    { scopeless
      const tmp[366848] "const" "temp"(366846 call ordToYmd ordinal)
      (366858 call _check_tuple_var_decl tmp[366848] 3)
      const y[366839] "const"(366849 call tmp[366848] 0)
      const m[366841] "const"(366852 call tmp[366848] 1)
      const d[366843] "const"(366855 call tmp[366848] 2)
      (366863 'end of statement')
    }
    (366864 return(366865 'new'(366867 call date y m d)))
  }
  { scopeless type
    date
  }
  function _unknown[42].replace[366874](arg _mt[366898]:_MT[201], arg this[366877] :
  date, arg year[366883] =
  (366880 call - 1), arg month[366889] =
  (366886 call - 1), arg day[366895] =
  (366892 call - 1)) : _unknown[42] "method"
  {
    { scopeless
      const newYear[366903] "const"(366917 IfExpr (366904 call != year(366907 call - 1)) then
      { scopeless
        year
      } else
      { scopeless
        (366914 call . this c"year")
      } )
      (366921 'end of statement')
    }
    { scopeless
      const newMonth[366923] "const"(366937 IfExpr (366924 call != month(366927 call - 1)) then
      { scopeless
        month
      } else
      { scopeless
        (366934 call . this c"month")
      } )
      (366941 'end of statement')
    }
    { scopeless
      const newDay[366943] "const"(366957 IfExpr (366944 call != day(366947 call - 1)) then
      { scopeless
        day
      } else
      { scopeless
        (366954 call . this c"day")
      } )
      (366961 'end of statement')
    }
    (366962 return(366963 'new'(366965 call date newYear newMonth newDay)))
  }
  { scopeless type
    date
  }
  function _unknown[42].timetuple[366972](arg _mt[366978]:_MT[201], arg this[366975] :
  date) : _unknown[42] "method" "@unstable"
  {
    { scopeless
      unknown timeStruct[366983] tm
      (366986 'end of statement')
    }
    (366987 call =(366992 call . timeStruct c"tm_hour") 0)
    (366996 call =(367001 call . timeStruct c"tm_min") 0)
    (367005 call =(367010 call . timeStruct c"tm_sec") 0)
    (367014 call =(367019 call . timeStruct c"tm_mday")(367022 call : day(367026 call int[10] 32)))
    (367028 call =(367033 call . timeStruct c"tm_mon")(367036 call : month(367040 call int[10] 32)))
    (367042 call =(367047 call . timeStruct c"tm_year")(367050 call : year(367054 call int[10] 32)))
    (367056 call =(367061 call . timeStruct c"tm_wday")(367064 call -(367066 call :(367074 call(367071 call . this c"weekday"))(367076 call int[10] 32)) 1))
    (367079 call =(367084 call . timeStruct c"tm_yday")(367087 call :(367089 call +(367091 call -(367094 call toOrdinal)(367104 call(367101 call .(367095 'new'(367097 call date year 1 1)) c"toOrdinal"))) 1)(367107 call int[10] 32)))
    (367109 call =(367114 call . timeStruct c"tm_isdst")(367117 call :(367119 call - 1)(367123 call int[10] 32)))
    (367125 return timeStruct)
  }
  { scopeless type
    tm
  }
  function _unknown[42].toOrdinal[367130](arg _mt[367136]:_MT[201], arg this[367133] :
  date) : _unknown[42] "method"
  {
    (367140 return(367142 call ymdToOrd year month day))
  }
  { scopeless type
    int[10]
  }
  function _unknown[42].weekday[367149](arg _mt[367155]:_MT[201], arg this[367152] :
  date) : _unknown[42] "method"
  {
    (367159 return(367174 'try!-expr'(367160 call :(367162 call +(367164 call %(367166 call +(367169 call toOrdinal) 6) 7) 1) dayOfWeek)))
  }
  { scopeless type
    dayOfWeek
  }
  function _unknown[42].isoWeekDate[367178](arg _mt[367184]:_MT[201], arg this[367181] :
  date) : _unknown[42] "method"
  {
    function findThursday[367193](arg d[367196] :
    date) : _unknown[42]
    {
      { scopeless
        unknown wd[367201](367206 call(367203 call . d c"weekday"))
        (367208 'end of statement')
      }
      (367209 return(367210 call + d(367213 'new'(367215 call timeDelta(days =(367216 call -(367218 call :(367223 call . dayOfWeek c"Thursday") int[10])(367227 call : wd int[10])))))))
    }
    function findyear[367234](arg d[367237] :
    date) : _unknown[42]
    {
      (367241 return(367245 call .(367243 call findThursday d) c"year"))
    }
    function findFirstDayOfYear[367250](arg year[367252]:_any[141](?)) : _unknown[42]
    {
      { scopeless
        unknown thu[367256](367258 call findThursday(367259 'new'(367261 call date year 1 1)))
        (367266 'end of statement')
      }
      if(367296 call _cond_test(367289 call <(367292 call . thu c"year") year))
      {
        (367268 return(367269 call + thu(367272 'new'(367274 call timeDelta(days = 4)))))
      }
      {
        (367278 return(367279 call + thu(367282 'new'(367284 call timeDelta(days =(367285 call - 3))))))
      }
    }
    { scopeless
      const y[367303] "const"(367305 call findyear this)
      (367308 'end of statement')
    }
    { scopeless
      const firstDay[367310] "const"(367312 call findFirstDayOfYear y)
      (367315 'end of statement')
    }
    { scopeless
      const delta[367317] "const"(367318 call - this firstDay)
      (367323 'end of statement')
    }
    (367324 return(367344 call _build_tuple y(367327 call + 1(367330 call /(367335 call . delta c"days") 7))(367339 call :(367342 call weekday) int[10])))
  }
  { scopeless type
    (367190 call _build_tuple int[10] int[10] int[10])
  }
  function _unknown[42].:[367349](arg _mt[367363]:_MT[201], arg this[367352] :
  date, arg x[367356] :
  date, arg t[367360] :
  string[244]) : _unknown[42] "method" "operator"
  {
    { scopeless
      unknown yearstr[367367](367368 call :(367371 call . x c"year") string[244])
      (367376 'end of statement')
    }
    { scopeless
      unknown monthstr[367378](367379 call :(367382 call . x c"month") string[244])
      (367387 'end of statement')
    }
    { scopeless
      unknown daystr[367389](367390 call :(367393 call . x c"day") string[244])
      (367398 'end of statement')
    }
    if(367463 call _cond_test(367456 call <(367459 call . x c"year") 10))
    {
      { scopeless
        (367399 call = yearstr(367402 call + "000" yearstr))
      }
    }
    {
      { scopeless
        if(367450 call _cond_test(367443 call <(367446 call . x c"year") 100))
        {
          { scopeless
            (367409 call = yearstr(367412 call + "00" yearstr))
          }
        }
        {
          { scopeless
            if(367438 call _cond_test(367429 call <(367432 call . x c"year") 1000))
            {
              { scopeless
                (367419 call = yearstr(367422 call + "0" yearstr))
              }
            }
          }
        }
      }
    }
    if(367484 call _cond_test(367477 call <(367480 call . x c"month") 10))
    {
      { scopeless
        (367469 call = monthstr(367472 call + "0" monthstr))
      }
    }
    if(367504 call _cond_test(367497 call <(367500 call . x c"day") 10))
    {
      { scopeless
        (367489 call = daystr(367492 call + "0" daystr))
      }
    }
    (367509 return(367510 call +(367512 call +(367514 call +(367516 call + yearstr "-") monthstr) "-") daystr))
  }
  function _unknown[42].ctime[367525](arg _mt[367531]:_MT[201], arg this[367528] :
  date) : _unknown[42] "method" "@unstable"
  {
    { scopeless
      const month[367536] "const"(367538 call strftime "%b")
      (367543 'end of statement')
    }
    { scopeless
      const wday[367545] "const"(367547 call strftime "%a")
      (367552 'end of statement')
    }
    { scopeless
      const extraSpace[367554] "const"(367561 IfExpr (367555 call < day 10) then
      { scopeless
        " "
      } else
      { scopeless
        ""
      } )
      (367565 'end of statement')
    }
    (367566 return(367567 call +(367569 call +(367571 call +(367573 call +(367575 call +(367577 call +(367579 call + wday " ") month) " ") extraSpace)(367586 call : day string[244])) " 00:00:00 ")(367593 call : year string[244])))
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].strftime[367600](arg _mt[367610]:_MT[201], arg this[367603] :
  date, arg fmt[367607] :
  string[244]) : _unknown[42] "method" "@unstable"
  {
    function strftime[367614](arg s[367619] :
    (367617 call c_ptr void[4]), arg size[367623] :
    c_size_t, arg format[367629] :
    (367627 call c_ptrConst c_char), ref arg timeStruct[367633] :
    tm) : void[4] "extern" "local args" "no fn body"
    {
    }
    { scopeless
      const bufLen[367639] "const" 100 c_size_t
      (367643 'end of statement')
    }
    { scopeless
      unknown buf[367645](367653 call chpl__buildArrayRuntimeType(367650 call chpl__ensureDomainExpr(367648 call chpl_build_bounded_range 1 bufLen)) c_char)
      (367656 'end of statement')
    }
    { scopeless
      unknown timeStruct[367658] tm
      (367661 'end of statement')
    }
    (367662 call =(367665 call . timeStruct c"tm_sec") 0)
    (367669 call =(367672 call . timeStruct c"tm_min") 0)
    (367676 call =(367679 call . timeStruct c"tm_hour") 0)
    (367683 call =(367686 call . timeStruct c"tm_isdst") 0)
    (367690 call =(367695 call . timeStruct c"tm_gmtoff") 0)
    (367699 call =(367704 call . timeStruct c"tm_zone") nil[32])
    (367708 call =(367711 call . timeStruct c"tm_year")(367714 call :(367716 call - year 1900)(367721 call int[10] 32)))
    (367723 call =(367726 call . timeStruct c"tm_mon")(367729 call :(367731 call - month 1)(367736 call int[10] 32)))
    (367738 call =(367741 call . timeStruct c"tm_mday")(367744 call : day(367748 call int[10] 32)))
    (367750 call =(367753 call . timeStruct c"tm_wday")(367756 call %(367758 call :(367761 call weekday)(367763 call int[10] 32)) 7))
    (367766 call =(367769 call . timeStruct c"tm_yday")(367772 call :(367783 call .(367774 call - this(367777 'new'(367779 call date year 1 1))) c"days")(367787 call int[10] 32)))
    (367790 call strftime(367792 call c_ptrTo buf) bufLen(367799 call(367796 call . fmt c"c_str")) timeStruct)
    { scopeless
      unknown str[367802] string[244]
      (367805 'end of statement')
    }
    Try!
    {
      {
        (367807 call = str(367814 call(367811 call . string[244] c"createCopyingBuffer")(367816 call c_ptrTo buf)))
      }
    }
    (367821 return str)
  }
  { scopeless type
    string[244]
  }
  (367827 'use' IO)
  function _unknown[42]._chpldoc_workaround[367829](arg _mt[367835]:_MT[201], arg this[367832] :
  date) : _unknown[42] "method"
  {
  }
  function _unknown[42].serialize[367840](arg _mt[367850]:_MT[201], arg this[367843] :
  date, arg writer[367846]:_any[141](?), ref arg serializer[367848]:_any[141](?)) : _unknown[42] throws "method"
  {
    (367857 call(367854 call . writer c"write")(367858 call : this string[244]))
  }
  function _unknown[42]._readCore[367864](arg _mt[367872]:_MT[201], ref arg this[367867] :
  date, arg f[367870]:_any[141](?)) : _unknown[42] throws "method"
  {
    { scopeless
      const dash[367876] "const" "-"
      (367879 'end of statement')
    }
    (367880 call = chpl_year(367887 call(367884 call . f c"read") int[10]))
    (367893 call(367890 call . f c"readLiteral") dash)
    (367895 call = chpl_month(367902 call(367899 call . f c"read") int[10]))
    (367908 call(367905 call . f c"readLiteral") dash)
    (367910 call = chpl_day(367917 call(367914 call . f c"read") int[10]))
  }
  function _unknown[42].deserialize[367921](arg _mt[367931]:_MT[201], ref arg this[367924] :
  date, arg reader[367927]:_any[141](?), ref arg deserializer[367929]:_any[141](?)) : _unknown[42] throws "method"
  {
    (367941 'import'(367938 call . JSON c"jsonDeserializer"))
    { scopeless
      { scopeless
        const binary[367974] "const"(367979 call(367976 call . reader c"_binary"))
      }
      { scopeless
        const arrayStyle[367965] "const"(367970 call(367967 call . reader c"styleElement") QIO_STYLE_ELEMENT_ARRAY)
      }
      { scopeless
        const isjson[367944] "const"(367945 call ||(367947 call &&(367949 call == arrayStyle QIO_ARRAY_FORMAT_JSON)(367953 call ! binary))(367957 call isSubtype(367959 call . reader c"deserializerType") jsonDeserializer))
      }
      (367981 'end of statement')
    }
    if(367990 call _cond_test isjson)
    {
      { scopeless
        (367986 call(367983 call . reader c"readLiteral") "\"")
      }
    }
    (368001 call(367998 call . this c"_readCore") reader)
    if(368011 call _cond_test isjson)
    {
      { scopeless
        (368007 call(368004 call . reader c"readLiteral") "\"")
      }
    }
  }
  function _unknown[42].init[368018](arg _mt[368030]:_MT[201], arg this[368021] :
  date, arg reader[368025] :
  fileReader, ref arg deserializer[368028]:_any[141](?)) : _unknown[42] throws "method"
  {
    (368037 call(368034 call . this c"init"))
    (368042 call(368039 call . this c"deserialize") reader deserializer)
  }
  function _unknown[42].+[368047](arg _mt[368061]:_MT[201], arg this[368050] :
  date, arg d[368054] :
  date, arg t[368058] :
  timeDelta) : _unknown[42] "method" "operator"
  {
    (368065 return(368072 call(368069 call . date c"createFromOrdinal")(368073 call +(368079 call(368076 call . d c"toOrdinal"))(368081 call . t c"days"))))
  }
  { scopeless type
    date
  }
  function _unknown[42].+[368087](arg _mt[368101]:_MT[201], arg this[368090] :
  date, arg t[368094] :
  timeDelta, arg d[368098] :
  date) : _unknown[42] "method" "operator"
  {
    (368105 return(368106 call + d t))
  }
  { scopeless type
    date
  }
  function _unknown[42].-[368113](arg _mt[368127]:_MT[201], arg this[368116] :
  date, arg d[368120] :
  date, arg t[368124] :
  timeDelta) : _unknown[42] "method" "operator"
  {
    (368131 return(368136 call(368133 call . date c"createFromOrdinal")(368137 call -(368143 call(368140 call . d c"toOrdinal"))(368145 call . t c"days"))))
  }
  { scopeless type
    date
  }
  function _unknown[42].-[368151](arg _mt[368165]:_MT[201], arg this[368154] :
  date, arg d1[368158] :
  date, arg d2[368162] :
  date) : _unknown[42] "method" "operator"
  {
    (368169 return(368170 'new'(368172 call timeDelta(days =(368173 call -(368179 call(368176 call . d1 c"toOrdinal"))(368184 call(368181 call . d2 c"toOrdinal")))))))
  }
  { scopeless type
    timeDelta
  }
  function _unknown[42].<[368189](arg _mt[368203]:_MT[201], arg this[368192] :
  date, arg d1[368196] :
  date, arg d2[368200] :
  date) : _unknown[42] "method" "operator"
  {
    (368207 return(368208 call <(368214 call(368211 call . d1 c"toOrdinal"))(368219 call(368216 call . d2 c"toOrdinal"))))
  }
  { scopeless type
    bool
  }
  function _unknown[42].<=[368223](arg _mt[368237]:_MT[201], arg this[368226] :
  date, arg d1[368230] :
  date, arg d2[368234] :
  date) : _unknown[42] "method" "operator"
  {
    (368241 return(368242 call <=(368248 call(368245 call . d1 c"toOrdinal"))(368253 call(368250 call . d2 c"toOrdinal"))))
  }
  { scopeless type
    bool
  }
  function _unknown[42].>[368257](arg _mt[368271]:_MT[201], arg this[368260] :
  date, arg d1[368264] :
  date, arg d2[368268] :
  date) : _unknown[42] "method" "operator"
  {
    (368275 return(368276 call >(368282 call(368279 call . d1 c"toOrdinal"))(368287 call(368284 call . d2 c"toOrdinal"))))
  }
  { scopeless type
    bool
  }
  function _unknown[42].>=[368291](arg _mt[368305]:_MT[201], arg this[368294] :
  date, arg d1[368298] :
  date, arg d2[368302] :
  date) : _unknown[42] "method" "operator"
  {
    (368309 return(368310 call >=(368316 call(368313 call . d1 c"toOrdinal"))(368321 call(368318 call . d2 c"toOrdinal"))))
  }
  { scopeless type
    bool
  }
  type time[368470] unknown chpl_hour[368335] int[10] unknown chpl_minute[368333](368477 'typeof' chpl_hour) unknown chpl_second[368331](368475 'typeof' chpl_minute) unknown chpl_microsecond[368328](368473 'typeof' chpl_second) unknown chpl_tz[368339](368341 call _shared(368343 'to nilable class from type' Timezone)) function time[368470].hour[368346](arg _mt[368350]:_MT[201], arg this[368348]:time[368470]) : _unknown[42] "method" "primary method" "no parens"
  {
    (368354 return chpl_hour)
  }
  { scopeless type
    int[10]
  } function time[368470].minute[368359](arg _mt[368363]:_MT[201], arg this[368361]:time[368470]) : _unknown[42] "method" "primary method" "no parens"
  {
    (368367 return chpl_minute)
  }
  { scopeless type
    int[10]
  } function time[368470].second[368372](arg _mt[368376]:_MT[201], arg this[368374]:time[368470]) : _unknown[42] "method" "primary method" "no parens"
  {
    (368380 return chpl_second)
  }
  { scopeless type
    int[10]
  } function time[368470].microsecond[368385](arg _mt[368389]:_MT[201], arg this[368387]:time[368470]) : _unknown[42] "method" "primary method" "no parens"
  {
    (368393 return chpl_microsecond)
  }
  { scopeless type
    int[10]
  } function time[368470].timezone[368398](arg _mt[368402]:_MT[201], arg this[368400]:time[368470]) : _unknown[42] "method" "primary method" "no parens" "@unstable"
  {
    (368409 return chpl_tz)
  }
  { scopeless type
    (368405 call _shared(368407 'to nilable class from type' Timezone))
  } function time[368470].min[368414](arg _mt[368418]:_MT[201], arg this[368416]:time[368470]) : _unknown[42] "method" "primary method" "no parens"
  {
    (368422 return(368423 'new'(368425 call time)))
  }
  { scopeless type
    time
  } function time[368470].max[368429](arg _mt[368433]:_MT[201], arg this[368431]:time[368470]) : _unknown[42] "method" "primary method" "no parens"
  {
    (368437 return(368438 'new'(368440 call time 23 59 59 999999)))
  }
  { scopeless type
    time
  } function time[368470].resolution[368452](arg _mt[368456]:_MT[201], arg this[368454]:time[368470]) : _unknown[42] "method" "primary method" "no parens"
  {
    (368460 return(368461 'new'(368463 call timeDelta(microseconds = 1))))
  }
  { scopeless type
    timeDelta
  } serializable
  function _unknown[42].init[368478](arg _mt[368515]:_MT[201], arg this[368481] :
  time, arg hour[368486] :
  int[10] =
  0, arg minute[368492] :
  int[10] =
  0, arg second[368498] :
  int[10] =
  0, arg microsecond[368504] :
  int[10] =
  0, in arg tz[368512] :
  (368509 call _shared(368511 'to nilable class from type' Timezone))) : _unknown[42] "method" "@unstable"
  {
    if(368537 call _cond_test(368527 call ||(368529 call < hour 0)(368533 call >= hour 24)))
    {
      { scopeless
        (368522 call(368519 call . HaltWrappers c"initHalt") "hour out of range")
      }
    }
    if(368561 call _cond_test(368551 call ||(368553 call < minute 0)(368557 call >= minute 60)))
    {
      { scopeless
        (368546 call(368543 call . HaltWrappers c"initHalt") "minute out of range")
      }
    }
    if(368585 call _cond_test(368575 call ||(368577 call < second 0)(368581 call >= second 60)))
    {
      { scopeless
        (368570 call(368567 call . HaltWrappers c"initHalt") "second out of range")
      }
    }
    if(368611 call _cond_test(368599 call ||(368601 call < microsecond 0)(368605 call >= microsecond 1000000)))
    {
      { scopeless
        (368594 call(368591 call . HaltWrappers c"initHalt") "microsecond out of range")
      }
    }
    (368616 call =(368621 call . this c"chpl_hour") hour)
    (368625 call =(368630 call . this c"chpl_minute") minute)
    (368634 call =(368639 call . this c"chpl_second") second)
    (368643 call =(368648 call . this c"chpl_microsecond") microsecond)
    (368652 call =(368657 call . this c"chpl_tz") tz)
  }
  function _unknown[42].init[368663](arg _mt[368693]:_MT[201], arg this[368666] :
  time, arg hour[368671] :
  int[10] =
  0, arg minute[368677] :
  int[10] =
  0, arg second[368683] :
  int[10] =
  0, arg microsecond[368689] :
  int[10] =
  0) : _unknown[42] "method"
  {
    if(368713 call _cond_test(368703 call ||(368705 call < hour 0)(368709 call >= hour 24)))
    {
      { scopeless
        (368700 call(368697 call . HaltWrappers c"initHalt") "hour out of range")
      }
    }
    if(368735 call _cond_test(368725 call ||(368727 call < minute 0)(368731 call >= minute 60)))
    {
      { scopeless
        (368722 call(368719 call . HaltWrappers c"initHalt") "minute out of range")
      }
    }
    if(368757 call _cond_test(368747 call ||(368749 call < second 0)(368753 call >= second 60)))
    {
      { scopeless
        (368744 call(368741 call . HaltWrappers c"initHalt") "second out of range")
      }
    }
    if(368779 call _cond_test(368769 call ||(368771 call < microsecond 0)(368775 call >= microsecond 1000000)))
    {
      { scopeless
        (368766 call(368763 call . HaltWrappers c"initHalt") "microsecond out of range")
      }
    }
    (368784 call =(368787 call . this c"chpl_hour") hour)
    (368791 call =(368794 call . this c"chpl_minute") minute)
    (368798 call =(368801 call . this c"chpl_second") second)
    (368805 call =(368808 call . this c"chpl_microsecond") microsecond)
    (368812 call =(368815 call . this c"chpl_tz") nil[32])
  }
  function _unknown[42].deinit[368821](arg _mt[368827]:_MT[201], arg this[368824] :
  time) : _unknown[42] "destructor" "method"
  {
  }
  function _unknown[42].replace[368832](arg _mt[368862]:_MT[201], arg this[368835] :
  time, arg hour[368841] =
  (368838 call - 1), arg minute[368847] =
  (368844 call - 1), arg second[368853] =
  (368850 call - 1), arg microsecond[368859] =
  (368856 call - 1)) : _unknown[42] "method"
  {
    { scopeless
      const newhour[368867] "const"(368881 IfExpr (368868 call != hour(368871 call - 1)) then
      { scopeless
        hour
      } else
      { scopeless
        (368878 call . this c"hour")
      } )
      (368885 'end of statement')
    }
    { scopeless
      const newminute[368887] "const"(368901 IfExpr (368888 call != minute(368891 call - 1)) then
      { scopeless
        minute
      } else
      { scopeless
        (368898 call . this c"minute")
      } )
      (368905 'end of statement')
    }
    { scopeless
      const newsecond[368907] "const"(368921 IfExpr (368908 call != second(368911 call - 1)) then
      { scopeless
        second
      } else
      { scopeless
        (368918 call . this c"second")
      } )
      (368925 'end of statement')
    }
    { scopeless
      const newmicrosecond[368927] "const"(368941 IfExpr (368928 call != microsecond(368931 call - 1)) then
      { scopeless
        microsecond
      } else
      { scopeless
        (368938 call . this c"microsecond")
      } )
      (368945 'end of statement')
    }
    (368946 return(368947 'new'(368949 call time newhour newminute newsecond newmicrosecond)))
  }
  { scopeless type
    time
  }
  function _unknown[42].replace[368957](arg _mt[368989]:_MT[201], arg this[368960] :
  time, arg hour[368966] =
  (368963 call - 1), arg minute[368972] =
  (368969 call - 1), arg second[368978] =
  (368975 call - 1), arg microsecond[368984] =
  (368981 call - 1), in arg tz[368987]:_any[141](?)) : _unknown[42] "method" "@unstable"
  {
    { scopeless
      const newhour[368994] "const"(369006 IfExpr (368995 call != hour(368998 call - 1)) then
      { scopeless
        hour
      } else
      { scopeless
        (369003 call . this c"hour")
      } )
      (369010 'end of statement')
    }
    { scopeless
      const newminute[369012] "const"(369024 IfExpr (369013 call != minute(369016 call - 1)) then
      { scopeless
        minute
      } else
      { scopeless
        (369021 call . this c"minute")
      } )
      (369028 'end of statement')
    }
    { scopeless
      const newsecond[369030] "const"(369042 IfExpr (369031 call != second(369034 call - 1)) then
      { scopeless
        second
      } else
      { scopeless
        (369039 call . this c"second")
      } )
      (369046 'end of statement')
    }
    { scopeless
      const newmicrosecond[369048] "const"(369060 IfExpr (369049 call != microsecond(369052 call - 1)) then
      { scopeless
        microsecond
      } else
      { scopeless
        (369057 call . this c"microsecond")
      } )
      (369064 'end of statement')
    }
    (369065 return(369066 'new'(369068 call time newhour newminute newsecond newmicrosecond tz)))
  }
  { scopeless type
    time
  }
  function _unknown[42].:[369077](arg _mt[369091]:_MT[201], arg this[369080] :
  time, arg x[369084] :
  time, arg t[369088] :
  string[244]) : _unknown[42] "method" "operator"
  {
    function makeNDigits[369094](arg n[369096]:_any[141](?), arg d[369098]:_any[141](?)) : _unknown[42]
    {
      { scopeless
        unknown ret[369102](369103 call : d string[244])
        (369108 'end of statement')
      }
      {
        unknown tmp[369124] "temp"
        (369154 'move' tmp[369124](369146 call _cond_test(369148 call <(369150 call . ret c"size") n)))
        WhileDo[369129]
        {
          {
            (369117 call = ret(369120 call + "0" ret))
          }
          label _continueLabel[369127]
          (369141 'move' tmp[369124](369133 call _cond_test(369135 call <(369137 call . ret c"size") n)))
          tmp[369124]
        }
        label _breakLabel[369128]
      }
      (369157 return ret)
    }
    { scopeless
      unknown ret[369162](369163 call +(369165 call +(369167 call +(369169 call +(369172 call makeNDigits 2(369175 call . x c"hour")) ":")(369180 call makeNDigits 2(369183 call . x c"minute"))) ":")(369188 call makeNDigits 2(369191 call . x c"second")))
      (369195 'end of statement')
    }
    if(369220 call _cond_test(369213 call !=(369216 call . x c"microsecond") 0))
    {
      (369197 call = ret(369200 call +(369202 call + ret ".")(369207 call makeNDigits 6(369210 call . x c"microsecond"))))
    }
    { scopeless
      unknown offset[369225](369232 call(369229 call . x c"utcOffset"))
      (369234 'end of statement')
    }
    if(369326 call _cond_test(369313 call !=(369324 call(369321 call .(369318 call . x c"timezone") c"borrow")) nil[32]))
    {
      { scopeless
        unknown sign[369237] string[244]
        (369240 'end of statement')
      }
      if(369264 call _cond_test(369257 call <(369260 call . offset c"days") 0))
      {
        (369242 call = offset(369245 call - offset))
        (369248 call = sign "-")
      }
      {
        (369253 call = sign "+")
      }
      (369268 call = ret(369271 call +(369273 call +(369275 call +(369277 call + ret sign)(369282 call makeNDigits 2(369284 call /(369289 call . offset c"seconds")(369292 call * 60 60)))) ":")(369298 call makeNDigits 2(369300 call /(369302 call %(369305 call . offset c"seconds")(369308 call * 60 60)) 60))))
    }
    (369330 return ret)
  }
  function _unknown[42].utcOffset[369334](arg _mt[369340]:_MT[201], arg this[369337] :
  time) : _unknown[42] "method" "@unstable"
  {
    if(369373 call _cond_test(369365 call ==(369371 call(369368 call . timezone c"borrow")) nil[32]))
    {
      (369345 return(369346 'new'(369348 call timeDelta)))
    }
    {
      (369350 return(369357 call(369354 call .(369351 call postfix! timezone) c"utcOffset")(369364 call(369361 call . dateTime c"now"))))
    }
  }
  { scopeless type
    timeDelta
  }
  function _unknown[42].dst[369380](arg _mt[369386]:_MT[201], arg this[369383] :
  time) : _unknown[42] "method" "@unstable"
  {
    if(369419 call _cond_test(369411 call ==(369417 call(369414 call . timezone c"borrow")) nil[32]))
    {
      (369391 return(369392 'new'(369394 call timeDelta)))
    }
    {
      (369396 return(369405 call(369402 call .(369397 call postfix! timezone) c"dst")(369410 call(369407 call . dateTime c"now"))))
    }
  }
  { scopeless type
    timeDelta
  }
  function _unknown[42].tzname[369426](arg _mt[369432]:_MT[201], arg this[369429] :
  time) : _unknown[42] "method" "@unstable"
  {
    if(369464 call _cond_test(369456 call ==(369462 call(369459 call . timezone c"borrow")) nil[32]))
    {
      { scopeless
        (369436 return "")
      }
    }
    {
      { scopeless
        (369439 return(369448 call(369445 call .(369440 call postfix! timezone) c"tzname")(369449 'new'(369451 call dateTime 1 1 1))))
      }
    }
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].strftime[369473](arg _mt[369483]:_MT[201], arg this[369476] :
  time, arg fmt[369480] :
  string[244]) : _unknown[42] "method" "@unstable"
  {
    function strftime[369487](arg s[369492] :
    (369490 call c_ptr void[4]), arg size[369496] :
    c_size_t, arg format[369502] :
    (369500 call c_ptrConst c_char), ref arg timeStruct[369506] :
    tm) : void[4] "extern" "local args" "no fn body"
    {
    }
    { scopeless
      const bufLen[369512] "const" 100 c_size_t
      (369516 'end of statement')
    }
    { scopeless
      unknown buf[369518](369526 call chpl__buildArrayRuntimeType(369523 call chpl__ensureDomainExpr(369521 call chpl_build_bounded_range 1 bufLen)) c_char)
      (369529 'end of statement')
    }
    { scopeless
      unknown timeStruct[369531] tm
      (369534 'end of statement')
    }
    (369535 call =(369538 call . timeStruct c"tm_sec")(369541 call : second(369545 call int[10] 32)))
    (369547 call =(369550 call . timeStruct c"tm_min")(369553 call : minute(369557 call int[10] 32)))
    (369559 call =(369562 call . timeStruct c"tm_hour")(369565 call : hour(369569 call int[10] 32)))
    (369571 call =(369574 call . timeStruct c"tm_year") 0)
    (369578 call =(369581 call . timeStruct c"tm_mday") 1)
    (369585 call =(369588 call . timeStruct c"tm_mon") 1)
    (369592 call =(369595 call . timeStruct c"tm_wday")(369598 call %(369600 call :(369611 call(369608 call .(369602 'new'(369604 call date 1900 1 1)) c"weekday"))(369613 call int[10] 32)) 7))
    (369616 call =(369619 call . timeStruct c"tm_yday") 0)
    if(369712 call _cond_test(369704 call !=(369710 call(369707 call . timezone c"borrow")) nil[32]))
    {
      (369624 call =(369627 call . timeStruct c"tm_gmtoff")(369630 call :(369640 call .(369639 call(369636 call .(369633 call utcOffset) c"abs")) c"seconds") c_long))
      (369644 call =(369647 call . timeStruct c"tm_zone")(369650 'cast' tm_zoneType(369657 call(369654 call .(369653 call tzname) c"c_str"))))
      (369658 call =(369661 call . timeStruct c"tm_isdst")(369664 call :(369668 call .(369667 call dst) c"seconds")(369672 call int[10] 32)))
    }
    {
      (369675 call =(369678 call . timeStruct c"tm_gmtoff") 0)
      (369682 call =(369685 call . timeStruct c"tm_zone")(369688 'cast' tm_zoneType(369694 call(369691 call . "" c"c_str"))))
      (369695 call =(369698 call . timeStruct c"tm_isdst")(369701 call - 1))
    }
    (369717 call strftime(369719 call c_ptrTo buf) bufLen(369726 call(369723 call . fmt c"c_str")) timeStruct)
    { scopeless
      unknown str[369729] string[244]
      (369732 'end of statement')
    }
    Try!
    {
      {
        (369734 call = str(369741 call(369738 call . string[244] c"createCopyingBuffer")(369743 call c_ptrTo buf)))
      }
    }
    (369748 return str)
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].serialize[369753](arg _mt[369763]:_MT[201], arg this[369756] :
  time, arg writer[369759]:_any[141](?), ref arg serializer[369761]:_any[141](?)) : _unknown[42] throws "method"
  {
    (369770 call(369767 call . writer c"write")(369771 call : this string[244]))
  }
  function _unknown[42]._readCore[369777](arg _mt[369785]:_MT[201], ref arg this[369780] :
  time, arg f[369783]:_any[141](?)) : _unknown[42] throws "method"
  {
    { scopeless
      const colon[369789] "const" ":"
      (369792 'end of statement')
    }
    (369793 call = chpl_hour(369800 call(369797 call . f c"read") int[10]))
    (369806 call(369803 call . f c"readLiteral") colon)
    (369808 call = chpl_minute(369815 call(369812 call . f c"read") int[10]))
    (369821 call(369818 call . f c"readLiteral") colon)
    (369823 call = chpl_second(369830 call(369827 call . f c"read") int[10]))
    (369836 call(369833 call . f c"readLiteral") ".")
    (369838 call = chpl_microsecond(369845 call(369842 call . f c"read") int[10]))
  }
  function _unknown[42].deserialize[369849](arg _mt[369859]:_MT[201], ref arg this[369852] :
  time, arg reader[369855]:_any[141](?), ref arg deserializer[369857]:_any[141](?)) : _unknown[42] throws "method"
  {
    (369867 'import'(369864 call . JSON c"jsonDeserializer"))
    { scopeless
      { scopeless
        const binary[369900] "const"(369905 call(369902 call . reader c"_binary"))
      }
      { scopeless
        const arrayStyle[369891] "const"(369896 call(369893 call . reader c"styleElement") QIO_STYLE_ELEMENT_ARRAY)
      }
      { scopeless
        const isjson[369870] "const"(369871 call ||(369873 call &&(369875 call == arrayStyle QIO_ARRAY_FORMAT_JSON)(369879 call ! binary))(369883 call isSubtype(369885 call . reader c"deserializerType") jsonDeserializer))
      }
      (369907 'end of statement')
    }
    if(369916 call _cond_test isjson)
    {
      { scopeless
        (369912 call(369909 call . reader c"readLiteral") "\"")
      }
    }
    (369925 call(369922 call . this c"_readCore") reader)
    if(369935 call _cond_test isjson)
    {
      { scopeless
        (369931 call(369928 call . reader c"readLiteral") "\"")
      }
    }
  }
  function _unknown[42].init[369942](arg _mt[369954]:_MT[201], arg this[369945] :
  time, arg reader[369949] :
  fileReader, ref arg deserializer[369952]:_any[141](?)) : _unknown[42] throws "method"
  {
    (369961 call(369958 call . this c"init"))
    (369966 call(369963 call . this c"deserialize") reader deserializer)
  }
  function _unknown[42].==[369971](arg _mt[369985]:_MT[201], arg this[369974] :
  time, arg t1[369978] :
  time, arg t2[369982] :
  time) : _unknown[42] "method" "operator"
  {
    { scopeless
      unknown dt1[369990](369991 'new'(369993 call dateTime(d =(369994 'new'(369996 call date 2000 1 1)))(t = t1)))
      (370006 'end of statement')
    }
    { scopeless
      unknown dt2[370008](370009 'new'(370011 call dateTime(d =(370012 'new'(370014 call date 2000 1 1)))(t = t2)))
      (370022 'end of statement')
    }
    (370023 return(370024 call == dt1 dt2))
  }
  { scopeless type
    bool
  }
  function _unknown[42].!=[370031](arg _mt[370045]:_MT[201], arg this[370034] :
  time, arg t1[370038] :
  time, arg t2[370042] :
  time) : _unknown[42] "method" "operator"
  {
    (370049 return(370050 call !(370052 call == t1 t2)))
  }
  { scopeless type
    bool
  }
  function _unknown[42].<[370059](arg _mt[370073]:_MT[201], arg this[370062] :
  time, arg t1[370066] :
  time, arg t2[370070] :
  time) : _unknown[42] "method" "operator"
  {
    if(370284 call _cond_test(370234 call ||(370236 call &&(370238 call !=(370247 call(370244 call .(370241 call . t1 c"timezone") c"borrow")) nil[32])(370249 call ==(370258 call(370255 call .(370252 call . t2 c"timezone") c"borrow")) nil[32]))(370260 call &&(370262 call ==(370271 call(370268 call .(370265 call . t1 c"timezone") c"borrow")) nil[32])(370273 call !=(370282 call(370279 call .(370276 call . t2 c"timezone") c"borrow")) nil[32]))))
    {
      (370079 call halt "both dateTimes must both be either naive or aware")
    }
    {
      { scopeless
        if(370230 call _cond_test(370220 call ==(370223 call . t1 c"timezone")(370227 call . t2 c"timezone")))
        {
          { scopeless
            const sec1[370085] "const"(370086 call +(370088 call +(370090 call *(370093 call . t1 c"hour") 3600)(370099 call *(370102 call . t1 c"minute") 60))(370107 call . t1 c"second"))
            (370111 'end of statement')
          }
          { scopeless
            const usec1[370113] "const"(370115 call . t1 c"microsecond")
            (370119 'end of statement')
          }
          { scopeless
            const sec2[370121] "const"(370122 call +(370124 call +(370126 call *(370129 call . t2 c"hour") 3600)(370133 call *(370136 call . t2 c"minute") 60))(370141 call . t2 c"second"))
            (370145 'end of statement')
          }
          { scopeless
            const usec2[370147] "const"(370149 call . t2 c"microsecond")
            (370153 'end of statement')
          }
          if(370180 call _cond_test(370176 call < sec1 sec2))
          {
            { scopeless
              (370154 return 1)
            }
          }
          {
            { scopeless
              if(370170 call _cond_test(370166 call == sec1 sec2))
              {
                { scopeless
                  (370157 return(370158 call < usec1 usec2))
                }
              }
              {
                { scopeless
                  (370163 return 0)
                }
              }
            }
          }
        }
        {
          { scopeless
            const dt1[370188] "const"(370189 'new'(370191 call dateTime(370192 'new'(370194 call date 1900 1 1)) t1))
            (370200 'end of statement')
          }
          { scopeless
            const dt2[370202] "const"(370203 'new'(370205 call dateTime(370206 'new'(370208 call date 1900 1 1)) t2))
            (370214 'end of statement')
          }
          (370215 return(370216 call < dt1 dt2))
        }
      }
    }
  }
  { scopeless type
    bool
  }
  function _unknown[42].<=[370292](arg _mt[370306]:_MT[201], arg this[370295] :
  time, arg t1[370299] :
  time, arg t2[370303] :
  time) : _unknown[42] "method" "operator"
  {
    if(370513 call _cond_test(370463 call ||(370465 call &&(370467 call !=(370476 call(370473 call .(370470 call . t1 c"timezone") c"borrow")) nil[32])(370478 call ==(370487 call(370484 call .(370481 call . t2 c"timezone") c"borrow")) nil[32]))(370489 call &&(370491 call ==(370500 call(370497 call .(370494 call . t1 c"timezone") c"borrow")) nil[32])(370502 call !=(370511 call(370508 call .(370505 call . t2 c"timezone") c"borrow")) nil[32]))))
    {
      (370312 call halt "both dateTimes must both be either naive or aware")
    }
    {
      { scopeless
        if(370459 call _cond_test(370449 call ==(370452 call . t1 c"timezone")(370456 call . t2 c"timezone")))
        {
          { scopeless
            const sec1[370316] "const"(370317 call +(370319 call +(370321 call *(370324 call . t1 c"hour") 3600)(370328 call *(370331 call . t1 c"minute") 60))(370336 call . t1 c"second"))
            (370340 'end of statement')
          }
          { scopeless
            const usec1[370342] "const"(370344 call . t1 c"microsecond")
            (370348 'end of statement')
          }
          { scopeless
            const sec2[370350] "const"(370351 call +(370353 call +(370355 call *(370358 call . t2 c"hour") 3600)(370362 call *(370365 call . t2 c"minute") 60))(370370 call . t2 c"second"))
            (370374 'end of statement')
          }
          { scopeless
            const usec2[370376] "const"(370378 call . t2 c"microsecond")
            (370382 'end of statement')
          }
          if(370409 call _cond_test(370405 call < sec1 sec2))
          {
            { scopeless
              (370383 return 1)
            }
          }
          {
            { scopeless
              if(370399 call _cond_test(370395 call == sec1 sec2))
              {
                { scopeless
                  (370386 return(370387 call <= usec1 usec2))
                }
              }
              {
                { scopeless
                  (370392 return 0)
                }
              }
            }
          }
        }
        {
          { scopeless
            const dt1[370417] "const"(370418 'new'(370420 call dateTime(370421 'new'(370423 call date 1900 1 1)) t1))
            (370429 'end of statement')
          }
          { scopeless
            const dt2[370431] "const"(370432 'new'(370434 call dateTime(370435 'new'(370437 call date 1900 1 1)) t2))
            (370443 'end of statement')
          }
          (370444 return(370445 call <= dt1 dt2))
        }
      }
    }
  }
  { scopeless type
    bool
  }
  function _unknown[42].>[370521](arg _mt[370535]:_MT[201], arg this[370524] :
  time, arg t1[370528] :
  time, arg t2[370532] :
  time) : _unknown[42] "method" "operator"
  {
    if(370742 call _cond_test(370692 call ||(370694 call &&(370696 call !=(370705 call(370702 call .(370699 call . t1 c"timezone") c"borrow")) nil[32])(370707 call ==(370716 call(370713 call .(370710 call . t2 c"timezone") c"borrow")) nil[32]))(370718 call &&(370720 call ==(370729 call(370726 call .(370723 call . t1 c"timezone") c"borrow")) nil[32])(370731 call !=(370740 call(370737 call .(370734 call . t2 c"timezone") c"borrow")) nil[32]))))
    {
      (370541 call halt "both dateTimes must both be either naive or aware")
    }
    {
      { scopeless
        if(370688 call _cond_test(370678 call ==(370681 call . t1 c"timezone")(370685 call . t2 c"timezone")))
        {
          { scopeless
            const sec1[370545] "const"(370546 call +(370548 call +(370550 call *(370553 call . t1 c"hour") 3600)(370557 call *(370560 call . t1 c"minute") 60))(370565 call . t1 c"second"))
            (370569 'end of statement')
          }
          { scopeless
            const usec1[370571] "const"(370573 call . t1 c"microsecond")
            (370577 'end of statement')
          }
          { scopeless
            const sec2[370579] "const"(370580 call +(370582 call +(370584 call *(370587 call . t2 c"hour") 3600)(370591 call *(370594 call . t2 c"minute") 60))(370599 call . t2 c"second"))
            (370603 'end of statement')
          }
          { scopeless
            const usec2[370605] "const"(370607 call . t2 c"microsecond")
            (370611 'end of statement')
          }
          if(370638 call _cond_test(370634 call > sec1 sec2))
          {
            { scopeless
              (370612 return 1)
            }
          }
          {
            { scopeless
              if(370628 call _cond_test(370624 call == sec1 sec2))
              {
                { scopeless
                  (370615 return(370616 call > usec1 usec2))
                }
              }
              {
                { scopeless
                  (370621 return 0)
                }
              }
            }
          }
        }
        {
          { scopeless
            const dt1[370646] "const"(370647 'new'(370649 call dateTime(370650 'new'(370652 call date 1900 1 1)) t1))
            (370658 'end of statement')
          }
          { scopeless
            const dt2[370660] "const"(370661 'new'(370663 call dateTime(370664 'new'(370666 call date 1900 1 1)) t2))
            (370672 'end of statement')
          }
          (370673 return(370674 call > dt1 dt2))
        }
      }
    }
  }
  { scopeless type
    bool
  }
  function _unknown[42].>=[370750](arg _mt[370764]:_MT[201], arg this[370753] :
  time, arg t1[370757] :
  time, arg t2[370761] :
  time) : _unknown[42] "method" "operator"
  {
    if(370971 call _cond_test(370921 call ||(370923 call &&(370925 call !=(370934 call(370931 call .(370928 call . t1 c"timezone") c"borrow")) nil[32])(370936 call ==(370945 call(370942 call .(370939 call . t2 c"timezone") c"borrow")) nil[32]))(370947 call &&(370949 call ==(370958 call(370955 call .(370952 call . t1 c"timezone") c"borrow")) nil[32])(370960 call !=(370969 call(370966 call .(370963 call . t2 c"timezone") c"borrow")) nil[32]))))
    {
      (370770 call halt "both dateTimes must both be either naive or aware")
    }
    {
      { scopeless
        if(370917 call _cond_test(370907 call ==(370910 call . t1 c"timezone")(370914 call . t2 c"timezone")))
        {
          { scopeless
            const sec1[370774] "const"(370775 call +(370777 call +(370779 call *(370782 call . t1 c"hour") 3600)(370786 call *(370789 call . t1 c"minute") 60))(370794 call . t1 c"second"))
            (370798 'end of statement')
          }
          { scopeless
            const usec1[370800] "const"(370802 call . t1 c"microsecond")
            (370806 'end of statement')
          }
          { scopeless
            const sec2[370808] "const"(370809 call +(370811 call +(370813 call *(370816 call . t2 c"hour") 3600)(370820 call *(370823 call . t2 c"minute") 60))(370828 call . t2 c"second"))
            (370832 'end of statement')
          }
          { scopeless
            const usec2[370834] "const"(370836 call . t2 c"microsecond")
            (370840 'end of statement')
          }
          if(370867 call _cond_test(370863 call > sec1 sec2))
          {
            { scopeless
              (370841 return 1)
            }
          }
          {
            { scopeless
              if(370857 call _cond_test(370853 call == sec1 sec2))
              {
                { scopeless
                  (370844 return(370845 call >= usec1 usec2))
                }
              }
              {
                { scopeless
                  (370850 return 0)
                }
              }
            }
          }
        }
        {
          { scopeless
            const dt1[370875] "const"(370876 'new'(370878 call dateTime(370879 'new'(370881 call date 1900 1 1)) t1))
            (370887 'end of statement')
          }
          { scopeless
            const dt2[370889] "const"(370890 'new'(370892 call dateTime(370893 'new'(370895 call date 1900 1 1)) t2))
            (370901 'end of statement')
          }
          (370902 return(370903 call >= dt1 dt2))
        }
      }
    }
  }
  { scopeless type
    bool
  }
  type dateTime[371188] unknown chpl_date[370982] date unknown chpl_time[370987] time function dateTime[371188].min[370991](arg _mt[370995]:_MT[201], arg this[370993]:dateTime[371188]) : _unknown[42] "method" "primary method" "no parens"
  {
    (370999 return(371000 'new'(371002 call dateTime(371006 call . date c"min")(371010 call . time c"min"))))
  }
  { scopeless type
    dateTime
  } function dateTime[371188].max[371016](arg _mt[371020]:_MT[201], arg this[371018]:dateTime[371188]) : _unknown[42] "method" "primary method" "no parens"
  {
    (371024 return(371025 'new'(371027 call dateTime(371029 call . date c"max")(371033 call . time c"max"))))
  }
  { scopeless type
    dateTime
  } function dateTime[371188].resolution[371039](arg _mt[371043]:_MT[201], arg this[371041]:dateTime[371188]) : _unknown[42] "method" "primary method" "no parens"
  {
    (371047 return(371048 'new'(371050 call timeDelta(microseconds = 1))))
  }
  { scopeless type
    timeDelta
  } function dateTime[371188].year[371056](arg _mt[371060]:_MT[201], arg this[371058]:dateTime[371188]) : _unknown[42] "method" "primary method" "no parens"
  {
    (371064 return(371066 call . chpl_date c"year"))
  }
  { scopeless type
    int[10]
  } function dateTime[371188].month[371072](arg _mt[371076]:_MT[201], arg this[371074]:dateTime[371188]) : _unknown[42] "method" "primary method" "no parens"
  {
    (371080 return(371082 call . chpl_date c"month"))
  }
  { scopeless type
    int[10]
  } function dateTime[371188].day[371088](arg _mt[371092]:_MT[201], arg this[371090]:dateTime[371188]) : _unknown[42] "method" "primary method" "no parens"
  {
    (371096 return(371098 call . chpl_date c"day"))
  }
  { scopeless type
    int[10]
  } function dateTime[371188].hour[371104](arg _mt[371108]:_MT[201], arg this[371106]:dateTime[371188]) : _unknown[42] "method" "primary method" "no parens"
  {
    (371112 return(371114 call . chpl_time c"hour"))
  }
  { scopeless type
    int[10]
  } function dateTime[371188].minute[371120](arg _mt[371124]:_MT[201], arg this[371122]:dateTime[371188]) : _unknown[42] "method" "primary method" "no parens"
  {
    (371128 return(371130 call . chpl_time c"minute"))
  }
  { scopeless type
    int[10]
  } function dateTime[371188].second[371136](arg _mt[371140]:_MT[201], arg this[371138]:dateTime[371188]) : _unknown[42] "method" "primary method" "no parens"
  {
    (371144 return(371146 call . chpl_time c"second"))
  }
  { scopeless type
    int[10]
  } function dateTime[371188].microsecond[371152](arg _mt[371156]:_MT[201], arg this[371154]:dateTime[371188]) : _unknown[42] "method" "primary method" "no parens"
  {
    (371160 return(371162 call . chpl_time c"microsecond"))
  }
  { scopeless type
    int[10]
  } function dateTime[371188].timezone[371168](arg _mt[371172]:_MT[201], arg this[371170]:dateTime[371188]) : _unknown[42] "method" "primary method" "no parens" "@unstable"
  {
    (371179 return(371181 call . chpl_time c"timezone"))
  }
  { scopeless type
    (371175 call _shared(371177 'to nilable class from type' Timezone))
  } serializable
  function _unknown[42].init[371190](arg _mt[371196]:_MT[201], arg this[371193] :
  dateTime) : _unknown[42] "method" "@unstable"
  {
  }
  function _unknown[42].init[371201](arg _mt[371245]:_MT[201], arg this[371204] :
  dateTime, arg year[371208] :
  int[10], arg month[371212] :
  int[10], arg day[371216] :
  int[10], arg hour[371221] :
  int[10] =
  0, arg minute[371227] :
  int[10] =
  0, arg second[371233] :
  int[10] =
  0, arg microsecond[371239] :
  int[10] =
  0, in arg tz[371243]:_any[141](?)) : _unknown[42] "method" "@unstable"
  {
    (371248 call = chpl_date(371251 'new'(371253 call date year month day)))
    (371257 call = chpl_time(371260 'new'(371262 call time hour minute second microsecond tz)))
  }
  function _unknown[42].init[371270](arg _mt[371312]:_MT[201], arg this[371273] :
  dateTime, arg year[371277] :
  int[10], arg month[371281] :
  int[10], arg day[371285] :
  int[10], arg hour[371290] :
  int[10] =
  0, arg minute[371296] :
  int[10] =
  0, arg second[371302] :
  int[10] =
  0, arg microsecond[371308] :
  int[10] =
  0) : _unknown[42] "method"
  {
    (371315 call = chpl_date(371318 'new'(371320 call date year month day)))
    (371324 call = chpl_time(371327 'new'(371329 call time hour minute second microsecond)))
  }
  function _unknown[42].init[371336](arg _mt[371354]:_MT[201], arg this[371339] :
  dateTime, arg d[371343] :
  date, arg t[371350] :
  time =
  (371347 'new'(371349 call time))) : _unknown[42] "method"
  {
    (371357 call = chpl_date d)
    (371361 call = chpl_time t)
  }
  function _unknown[42].now[371367](arg _mt[371373]:_MT[201], arg this[371370] :
  dateTime) : _unknown[42] "method"
  {
    { scopeless
      const timeSinceEpoch[371378] "const"(371380 call getTimeOfDay)
      (371382 'end of statement')
    }
    { scopeless
      const lt[371384] "const"(371386 call getLocalTime timeSinceEpoch)
      (371389 'end of statement')
    }
    (371390 return(371391 'new'(371393 call dateTime(year =(371394 call +(371397 call . lt c"tm_year") 1900))(month =(371402 call +(371405 call . lt c"tm_mon") 1))(day =(371411 call . lt c"tm_mday"))(hour =(371416 call . lt c"tm_hour"))(minute =(371421 call . lt c"tm_min"))(second =(371426 call . lt c"tm_sec"))(microsecond =(371431 call timeSinceEpoch 1)))))
  }
  { scopeless type
    dateTime
  }
  function _unknown[42].now[371437](arg _mt[371450]:_MT[201], arg this[371440] :
  dateTime, in arg tz[371447] :
  (371444 call _shared(371446 'to nilable class from type' Timezone))) : _unknown[42] "method" "@unstable"
  {
    if(371568 call _cond_test(371560 call ==(371566 call(371563 call . tz c"borrow")) nil[32]))
    {
      { scopeless
        const timeSinceEpoch[371456] "const"(371458 call getTimeOfDay)
        (371460 'end of statement')
      }
      { scopeless
        const lt[371462] "const"(371464 call getLocalTime timeSinceEpoch)
        (371467 'end of statement')
      }
      (371468 return(371469 'new'(371471 call dateTime(year =(371472 call +(371475 call . lt c"tm_year") 1900))(month =(371480 call +(371483 call . lt c"tm_mon") 1))(day =(371489 call . lt c"tm_mday"))(hour =(371494 call . lt c"tm_hour"))(minute =(371499 call . lt c"tm_min"))(second =(371504 call . lt c"tm_sec"))(microsecond =(371509 call timeSinceEpoch 1)))))
    }
    {
      { scopeless
        const timeSinceEpoch[371514] "const"(371516 call getTimeOfDay)
        (371518 'end of statement')
      }
      { scopeless
        const td[371520] "const"(371521 'new'(371523 call timeDelta(seconds =(371525 call timeSinceEpoch 0))(microseconds =(371529 call timeSinceEpoch 1))))
        (371533 'end of statement')
      }
      { scopeless
        const utcNow[371535] "const"(371536 call + unixEpoch td)
        (371541 'end of statement')
      }
      (371542 return(371557 call(371554 call .(371543 call + utcNow(371552 call(371549 call .(371546 call postfix! tz) c"utcOffset") utcNow)) c"replace")(tz = tz)))
    }
  }
  { scopeless type
    dateTime
  }
  function _unknown[42].utcNow[371575](arg _mt[371581]:_MT[201], arg this[371578] :
  dateTime) : _unknown[42] "method"
  {
    { scopeless
      const timeSinceEpoch[371586] "const"(371588 call getTimeOfDay)
      (371590 'end of statement')
    }
    { scopeless
      const td[371592] "const"(371593 'new'(371595 call timeDelta(seconds =(371597 call timeSinceEpoch 0))(microseconds =(371601 call timeSinceEpoch 1))))
      (371605 'end of statement')
    }
    (371606 return(371607 call + unixEpoch td))
  }
  { scopeless type
    dateTime
  }
  function _unknown[42].createFromTimestamp[371614](arg _mt[371624]:_MT[201], arg this[371617] :
  dateTime, arg timestamp[371621] :
  real[13]) : _unknown[42] "method"
  {
    (371628 return(371635 call(371632 call . dateTime c"createFromTimestamp") timestamp nil[32]))
  }
  { scopeless type
    dateTime
  }
  function _unknown[42].createFromTimestamp[371641](arg _mt[371658]:_MT[201], arg this[371644] :
  dateTime, arg timestamp[371648] :
  real[13], in arg tz[371655] :
  (371652 call _shared(371654 'to nilable class from type' Timezone))) : _unknown[42] "method" "@unstable"
  {
    if(371777 call _cond_test(371769 call ==(371775 call(371772 call . tz c"borrow")) nil[32]))
    {
      { scopeless
        unknown t[371664](371683 call _build_tuple(371666 call : timestamp int[10])(371670 call :(371672 call *(371674 call - timestamp(371677 call : timestamp int[10])) 1000000) int[10]))
        (371686 'end of statement')
      }
      { scopeless
        const lt[371688] "const"(371690 call getLocalTime t)
        (371693 'end of statement')
      }
      (371694 return(371695 'new'(371697 call dateTime(year =(371698 call +(371701 call . lt c"tm_year") 1900))(month =(371706 call +(371709 call . lt c"tm_mon") 1))(day =(371715 call . lt c"tm_mday"))(hour =(371720 call . lt c"tm_hour"))(minute =(371725 call . lt c"tm_min"))(second =(371730 call . lt c"tm_sec"))(microsecond =(371735 call t 1)))))
    }
    {
      { scopeless
        unknown dt[371740](371747 call(371744 call . dateTime c"createUtcFromTimestamp") timestamp)
        (371750 'end of statement')
      }
      (371751 return(371766 call(371763 call .(371752 call + dt(371761 call(371758 call .(371755 call postfix! tz) c"utcOffset") dt)) c"replace")(tz = tz)))
    }
  }
  { scopeless type
    dateTime
  }
  function _unknown[42].createUtcFromTimestamp[371784](arg _mt[371792]:_MT[201], arg this[371787] :
  dateTime, arg timestamp[371790]:_any[141](?)) : _unknown[42] "method"
  {
    (371796 return(371797 call + unixEpoch(371800 'new'(371802 call timeDelta(seconds =(371803 call : timestamp int[10]))(microseconds =(371808 call :(371810 call *(371812 call - timestamp(371815 call : timestamp int[10])) 1000000) int[10]))))))
  }
  { scopeless type
    dateTime
  }
  function _unknown[42].getDate[371825](arg _mt[371831]:_MT[201], arg this[371828] :
  dateTime) : _unknown[42] "method"
  {
    (371835 return chpl_date)
  }
  { scopeless type
    date
  }
  function _unknown[42].getTime[371840](arg _mt[371846]:_MT[201], arg this[371843] :
  dateTime) : _unknown[42] "method"
  {
    if(371877 call _cond_test(371866 call ==(371875 call(371872 call .(371869 call . chpl_time c"timezone") c"borrow")) nil[32]))
    {
      { scopeless
        (371850 return chpl_time)
      }
    }
    {
      { scopeless
        (371853 return(371854 'new'(371856 call time(hour = hour)(minute = minute)(second = second)(microsecond = microsecond))))
      }
    }
  }
  { scopeless type
    time
  }
  function _unknown[42].timetz[371886](arg _mt[371892]:_MT[201], arg this[371889] :
  dateTime) : _unknown[42] "method" "@unstable"
  {
    (371896 return chpl_time)
  }
  { scopeless type
    time
  }
  function _unknown[42].replace[371901](arg _mt[371949]:_MT[201], arg this[371904] :
  dateTime, arg year[371910] =
  (371907 call - 1), arg month[371916] =
  (371913 call - 1), arg day[371922] =
  (371919 call - 1), arg hour[371928] =
  (371925 call - 1), arg minute[371934] =
  (371931 call - 1), arg second[371940] =
  (371937 call - 1), arg microsecond[371946] =
  (371943 call - 1)) : _unknown[42] "method"
  {
    (371953 return(371954 'new'(371956 call dateTime(371961 call(371958 call . chpl_date c"replace") year month day)(371969 call(371966 call . chpl_time c"replace") hour minute second microsecond))))
  }
  { scopeless type
    dateTime
  }
  function _unknown[42].replace[371977](arg _mt[372032]:_MT[201], arg this[371980] :
  dateTime, arg year[371986] =
  (371983 call - 1), arg month[371992] =
  (371989 call - 1), arg day[371998] =
  (371995 call - 1), arg hour[372004] =
  (372001 call - 1), arg minute[372010] =
  (372007 call - 1), arg second[372016] =
  (372013 call - 1), arg microsecond[372022] =
  (372019 call - 1), in arg tz[372029] =
  (372026 call . this c"timezone")) : _unknown[42] "method" "@unstable"
  {
    (372036 return(372037 'new'(372039 call dateTime(372044 call(372041 call . chpl_date c"replace") year month day)(372052 call(372049 call . chpl_time c"replace") hour minute second microsecond tz))))
  }
  { scopeless type
    dateTime
  }
  function _unknown[42].astimezone[372061](arg _mt[372073]:_MT[201], arg this[372064] :
  dateTime, in arg tz[372070] :
  (372068 call _shared Timezone)) : _unknown[42] "method" "@unstable"
  {
    if(372084 call _cond_test(372080 call == timezone tz))
    {
      (372078 return this)
    }
    { scopeless
      const utc[372089] "const"(372101 call(372098 call .(372090 call - this(372097 call(372094 call . this c"utcOffset"))) c"replace")(tz = tz))
      (372105 'end of statement')
    }
    (372106 return(372117 call(372114 call .(372111 call(372108 call . tz c"borrow")) c"fromUtc") utc))
  }
  { scopeless type
    dateTime
  }
  function _unknown[42].utcOffset[372122](arg _mt[372128]:_MT[201], arg this[372125] :
  dateTime) : _unknown[42] "method" "@unstable"
  {
    if(372156 call _cond_test(372148 call ==(372154 call(372151 call . timezone c"borrow")) nil[32]))
    {
      (372134 call halt "utcOffset called on naive dateTime")
    }
    {
      (372139 return(372146 call(372143 call .(372140 call postfix! timezone) c"utcOffset") this))
    }
  }
  { scopeless type
    timeDelta
  }
  function _unknown[42].dst[372163](arg _mt[372169]:_MT[201], arg this[372166] :
  dateTime) : _unknown[42] "method" "@unstable"
  {
    if(372187 call _cond_test(372179 call ==(372185 call(372182 call . timezone c"borrow")) nil[32]))
    {
      { scopeless
        (372174 call halt "dst() called with nil timezone")
      }
    }
    (372192 return(372199 call(372196 call .(372193 call postfix! timezone) c"dst") this))
  }
  { scopeless type
    timeDelta
  }
  function _unknown[42].tzname[372204](arg _mt[372210]:_MT[201], arg this[372207] :
  dateTime) : _unknown[42] "method" "@unstable"
  {
    if(372225 call _cond_test(372217 call ==(372223 call(372220 call . timezone c"borrow")) nil[32]))
    {
      { scopeless
        (372214 return "")
      }
    }
    (372230 return(372237 call(372234 call .(372231 call postfix! timezone) c"tzname") this))
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].timetuple[372242](arg _mt[372248]:_MT[201], arg this[372245] :
  dateTime) : _unknown[42] "method" "@unstable"
  {
    { scopeless
      unknown timeStruct[372253] tm
      (372256 'end of statement')
    }
    (372257 call =(372260 call . timeStruct c"tm_sec")(372263 call : second(372267 call int[10] 32)))
    (372269 call =(372272 call . timeStruct c"tm_min")(372275 call : minute(372279 call int[10] 32)))
    (372281 call =(372284 call . timeStruct c"tm_hour")(372287 call : hour(372291 call int[10] 32)))
    (372293 call =(372296 call . timeStruct c"tm_mday")(372299 call : day(372303 call int[10] 32)))
    (372305 call =(372308 call . timeStruct c"tm_mon")(372311 call : month(372315 call int[10] 32)))
    (372317 call =(372320 call . timeStruct c"tm_year")(372323 call : year(372327 call int[10] 32)))
    (372329 call =(372332 call . timeStruct c"tm_wday")(372335 call -(372337 call :(372344 call(372341 call .(372340 call getDate) c"weekday"))(372346 call int[10] 32)) 1))
    (372349 call =(372352 call . timeStruct c"tm_yday")(372355 call :(372357 call +(372359 call -(372366 call(372363 call .(372362 call getDate) c"toOrdinal"))(372376 call(372373 call .(372367 'new'(372369 call date year 1 1)) c"toOrdinal"))) 1)(372379 call int[10] 32)))
    if(372427 call _cond_test(372419 call ==(372425 call(372422 call . timezone c"borrow")) nil[32]))
    {
      (372382 call =(372385 call . timeStruct c"tm_isdst")(372388 call - 1))
    }
    {
      { scopeless
        if(372415 call _cond_test(372407 call ==(372410 call dst)(372411 'new'(372413 call timeDelta 0))))
        {
          (372392 call =(372395 call . timeStruct c"tm_isdst") 0)
        }
        {
          (372400 call =(372403 call . timeStruct c"tm_isdst") 1)
        }
      }
    }
    (372432 return timeStruct)
  }
  { scopeless type
    tm
  }
  function _unknown[42].utctimetuple[372437](arg _mt[372443]:_MT[201], arg this[372440] :
  dateTime) : _unknown[42] "method" "@unstable"
  {
    if(372507 call _cond_test(372499 call ==(372505 call(372502 call . timezone c"borrow")) nil[32]))
    {
      { scopeless
        unknown ret[372449](372451 call timetuple)
        (372453 'end of statement')
      }
      (372454 call =(372457 call . ret c"tm_isdst") 0)
      (372461 return ret)
    }
    {
      { scopeless
        const utc[372465] "const"(372466 call -(372472 call(372469 call . this c"replace")(tz = nil[32]))(372476 call utcOffset))
        (372478 'end of statement')
      }
      { scopeless
        unknown ret[372480](372487 call(372484 call . utc c"timetuple"))
        (372489 'end of statement')
      }
      (372490 call =(372493 call . ret c"tm_isdst") 0)
      (372497 return ret)
    }
  }
  { scopeless type
    tm
  }
  function _unknown[42].:[372514](arg _mt[372528]:_MT[201], arg this[372517] :
  dateTime, arg x[372521] :
  dateTime, arg t[372525] :
  string[244]) : _unknown[42] "method" "operator"
  {
    function zeroPad[372531](arg nDigits[372534] :
    int[10], arg i[372538] :
    int[10]) : _unknown[42]
    {
      { scopeless
        unknown numStr[372543](372544 call : i string[244])
        (372549 'end of statement')
      }
      {
        unknown _indexOfInterest[372568] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[372569] "expr temp" "temp"
        (372578 'move' _iterator[372569](372576 call _getIterator(372588 call chpl_direct_range_iter 1(372582 call - nDigits(372585 call . numStr c"size")))))
        Defer
        {
          {
            (372605 call _freeIterator _iterator[372569])
          }
        }
        { scopeless type
          (372593 'move' _indexOfInterest[372568](372590 call iteratorIndex _iterator[372569]))
        }
        ForLoop[372570]
        {
          unknown chpl__elidedIdx[372595] "index var" "insert auto destroy"
          (372600 'move' chpl__elidedIdx[372595] _indexOfInterest[372568])
          {
            (372561 call = numStr(372564 call + "0" numStr))
          }
          label _continueLabel[372573]
          _indexOfInterest[372568]
          _iterator[372569]
        }
        label _breakLabel[372574]
      }
      (372612 return numStr)
    }
    { scopeless
      unknown micro[372617](372636 IfExpr (372618 call >(372621 call . x c"microsecond") 0) then
      { scopeless
        (372625 call + "."(372629 call zeroPad 6(372632 call . x c"microsecond")))
      } else
      { scopeless
        ""
      } )
      (372640 'end of statement')
    }
    { scopeless
      unknown offset[372642] string[244]
      (372645 'end of statement')
    }
    if(372779 call _cond_test(372768 call !=(372777 call(372774 call .(372771 call . x c"timezone") c"borrow")) nil[32]))
    {
      { scopeless
        unknown utcoff[372648](372653 call(372650 call . x c"utcOffset"))
        (372655 'end of statement')
      }
      { scopeless
        unknown sign[372657] string[244]
        (372660 'end of statement')
      }
      if(372686 call _cond_test(372679 call < utcoff(372682 'new'(372684 call timeDelta 0))))
      {
        (372662 call = sign "-")
        (372666 call = utcoff(372673 call(372670 call . utcoff c"abs")))
      }
      {
        (372675 call = sign "+")
      }
      { scopeless
        unknown hours[372691](372692 call /(372695 call . utcoff c"seconds")(372698 call * 60 60))
        (372703 'end of statement')
      }
      { scopeless
        unknown minutes[372705](372706 call /(372708 call %(372711 call . utcoff c"seconds")(372714 call * 60 60)) 60)
        (372720 'end of statement')
      }
      (372721 call = offset(372724 call +(372726 call +(372728 call + sign(372746 IfExpr (372731 call < hours 10) then
      { scopeless
        (372735 call + "0"(372738 call : hours string[244]))
      } else
      { scopeless
        (372742 call : hours string[244])
      } )) ":")(372765 IfExpr (372750 call < minutes 10) then
      { scopeless
        (372754 call + "0"(372757 call : minutes string[244]))
      } else
      { scopeless
        (372761 call : minutes string[244])
      } )))
    }
    { scopeless
      unknown year[372784](372786 call zeroPad 4(372801 'try!-expr'(372788 call :(372796 call(372793 call . x c"strftime") "%Y") int[10])))
      (372803 'end of statement')
    }
    (372804 return(372809 call(372806 call . x c"strftime")(372810 call +(372812 call +(372814 call +(372816 call +(372818 call + year "-%m-%d") "T") "%H:%M:%S") micro) offset)))
  }
  function _unknown[42].strptime[372834](arg _mt[372848]:_MT[201], arg this[372837] :
  dateTime, arg date_string[372841] :
  string[244], arg format[372845] :
  string[244]) : _unknown[42] "method" "@unstable"
  {
    function strptime[372852](arg buf[372857] :
    (372855 call c_ptrConst c_char), arg format[372863] :
    (372861 call c_ptrConst c_char), ref arg ts[372867] :
    tm) : void[4] "extern" "local args" "no fn body"
    {
    }
    { scopeless
      unknown timeStruct[372873] tm
      (372876 'end of statement')
    }
    (372878 call strptime(372883 call(372880 call . date_string c"c_str"))(372888 call(372885 call . format c"c_str")) timeStruct)
    (372890 return(372891 'new'(372893 call dateTime(372894 call +(372897 call . timeStruct c"tm_year") 1900)(372901 call +(372904 call . timeStruct c"tm_mon") 1)(372909 call . timeStruct c"tm_mday")(372913 call . timeStruct c"tm_hour")(372917 call . timeStruct c"tm_min")(372921 call . timeStruct c"tm_sec"))))
  }
  { scopeless type
    dateTime
  }
  function _unknown[42].strftime[372927](arg _mt[372937]:_MT[201], arg this[372930] :
  dateTime, arg fmt[372934] :
  string[244]) : _unknown[42] "method" "@unstable"
  {
    function strftime[372941](arg s[372946] :
    (372944 call c_ptr void[4]), arg size[372950] :
    c_size_t, arg format[372956] :
    (372954 call c_ptrConst c_char), ref arg timeStruct[372960] :
    tm) : void[4] "extern" "local args" "no fn body"
    {
    }
    { scopeless
      const bufLen[372966] "const" 100 c_size_t
      (372970 'end of statement')
    }
    { scopeless
      unknown buf[372972](372980 call chpl__buildArrayRuntimeType(372977 call chpl__ensureDomainExpr(372975 call chpl_build_bounded_range 1 bufLen)) c_char)
      (372983 'end of statement')
    }
    { scopeless
      unknown timeStruct[372985] tm
      (372988 'end of statement')
    }
    (372989 call =(372992 call . timeStruct c"tm_hour")(372995 call : hour(372999 call int[10] 32)))
    (373001 call =(373004 call . timeStruct c"tm_min")(373007 call : minute(373011 call int[10] 32)))
    (373013 call =(373016 call . timeStruct c"tm_sec")(373019 call : second(373023 call int[10] 32)))
    if(373112 call _cond_test(373104 call !=(373110 call(373107 call . timezone c"borrow")) nil[32]))
    {
      (373026 call =(373029 call . timeStruct c"tm_isdst")(373032 call :(373042 call .(373040 call(373037 call .(373034 call postfix! timezone) c"dst") this) c"seconds")(373046 call int[10] 32)))
      (373048 call =(373051 call . timeStruct c"tm_gmtoff")(373054 call :(373064 call .(373062 call(373059 call .(373056 call postfix! timezone) c"utcOffset") this) c"seconds") c_long))
      (373068 call =(373071 call . timeStruct c"tm_zone") nil[32])
    }
    {
      (373076 call =(373079 call . timeStruct c"tm_isdst")(373082 call -(373084 call : 1(373088 call int[10] 32))))
      (373090 call =(373093 call . timeStruct c"tm_gmtoff") 0)
      (373097 call =(373100 call . timeStruct c"tm_zone") nil[32])
    }
    (373116 call =(373119 call . timeStruct c"tm_year")(373122 call :(373124 call - year 1900)(373129 call int[10] 32)))
    (373131 call =(373134 call . timeStruct c"tm_mon")(373137 call :(373139 call - month 1)(373144 call int[10] 32)))
    (373146 call =(373149 call . timeStruct c"tm_mday")(373152 call : day(373156 call int[10] 32)))
    (373158 call =(373161 call . timeStruct c"tm_wday")(373164 call %(373166 call :(373176 call(373173 call .(373172 call(373169 call . this c"getDate")) c"weekday"))(373178 call int[10] 32)) 7))
    (373181 call =(373184 call . timeStruct c"tm_yday")(373187 call :(373204 call .(373189 call -(373195 call(373192 call . this c"replace")(tz = nil[32]))(373198 'new'(373200 call dateTime year 1 1))) c"days")(373208 call int[10] 32)))
    function strftok[373210](const  ref arg s[373213] :
    string[244]) : _unknown[42] "iterator fn"
    {
      { scopeless
        unknown per[373218] ""
        (373221 'end of statement')
      }
      {
        unknown _indexOfInterest[373362] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[373363] "expr temp" "temp"
        (373372 'move' _iterator[373363](373370 call _getIterator s))
        Defer
        {
          {
            (373387 call _freeIterator _iterator[373363])
          }
        }
        { scopeless type
          (373377 'move' _indexOfInterest[373362](373374 call iteratorIndex _iterator[373363]))
        }
        ForLoop[373364]
        {
          unknown c[373222] "index var" "insert auto destroy"
          (373382 'move' c[373222] _indexOfInterest[373362])
          {
            if(373358 call _cond_test(373354 call == per ""))
            {
              if(373241 call _cond_test(373237 call == c "%"))
              {
                (373228 call = per "%")
              }
              {
                (373235 yield c)
              }
            }
            {
              (373246 call += per c)
              if(373350 call _cond_test(373312 call &&(373314 call &&(373316 call &&(373318 call &&(373320 call != per "%-")(373326 call != per "%0"))(373332 call != per "%_"))(373338 call != per "%E"))(373344 call != per "%O")))
              {
                if(373304 call _cond_test(373300 call == c "f"))
                {
                  { scopeless
                    const fmt[373253] "const"(373278 IfExpr (373254 call == per "%-f") then
                    { scopeless
                      "%i"
                    } else
                    { scopeless(373275 IfExpr (373263 call == per "%_f") then
                      { scopeless
                        "%6i"
                      } else
                      { scopeless
                        "%06i"
                      } )
                    } )
                    (373282 'end of statement')
                  }
                  Try!
                  {
                    {
                      (373284 yield(373289 call(373286 call . fmt c"format")(373291 call . chpl_time c"chpl_microsecond")))
                    }
                  }
                }
                {
                  (373298 yield per)
                }
                (373308 call = per "")
              }
            }
          }
          label _continueLabel[373367]
          _indexOfInterest[373362]
          _iterator[373363]
        }
        label _breakLabel[373368]
      }
      if(373401 call _cond_test(373397 call != per ""))
      {
        (373395 yield per)
      }
    }
    (373408 call strftime(373410 call c_ptrTo buf) bufLen(373424 call(373421 call .(373417 call(373414 call . "" c"join")(373419 call strftok fmt)) c"c_str")) timeStruct)
    { scopeless
      unknown str[373427] string[244]
      (373430 'end of statement')
    }
    Try!
    {
      {
        (373432 call = str(373439 call(373436 call . string[244] c"createCopyingBuffer")(373441 call c_ptrTo buf)))
      }
    }
    (373446 return str)
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].ctime[373451](arg _mt[373457]:_MT[201], arg this[373454] :
  dateTime) : _unknown[42] "method" "@unstable"
  {
    (373461 return(373466 call(373463 call . this c"strftime") "%a %b %e %T %Y"))
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].serialize[373473](arg _mt[373483]:_MT[201], arg this[373476] :
  dateTime, arg writer[373479]:_any[141](?), ref arg serializer[373481]:_any[141](?)) : _unknown[42] throws "method"
  {
    (373490 call(373487 call . writer c"write")(373491 call : this string[244]))
  }
  function _unknown[42].deserialize[373497](arg _mt[373507]:_MT[201], ref arg this[373500] :
  dateTime, arg reader[373503]:_any[141](?), ref arg deserializer[373505]:_any[141](?)) : _unknown[42] throws "method"
  {
    (373515 'import'(373512 call . JSON c"jsonDeserializer"))
    { scopeless
      { scopeless
        const binary[373548] "const"(373553 call(373550 call . reader c"_binary"))
      }
      { scopeless
        const arrayStyle[373539] "const"(373544 call(373541 call . reader c"styleElement") QIO_STYLE_ELEMENT_ARRAY)
      }
      { scopeless
        const isjson[373518] "const"(373519 call ||(373521 call &&(373523 call == arrayStyle QIO_ARRAY_FORMAT_JSON)(373527 call ! binary))(373531 call isSubtype(373533 call . reader c"deserializerType") jsonDeserializer))
      }
      (373555 'end of statement')
    }
    if(373564 call _cond_test isjson)
    {
      { scopeless
        (373560 call(373557 call . reader c"readLiteral") "\"")
      }
    }
    (373573 call(373570 call . chpl_date c"_readCore") reader)
    (373579 call(373576 call . reader c"readLiteral") "T")
    (373585 call(373582 call . chpl_time c"_readCore") reader)
    if(373595 call _cond_test isjson)
    {
      { scopeless
        (373591 call(373588 call . reader c"readLiteral") "\"")
      }
    }
  }
  function _unknown[42].init[373602](arg _mt[373614]:_MT[201], arg this[373605] :
  dateTime, arg reader[373609] :
  fileReader, ref arg deserializer[373612]:_any[141](?)) : _unknown[42] throws "method"
  {
    (373621 call(373618 call . this c"init"))
    (373626 call(373623 call . this c"deserialize") reader deserializer)
  }
  function _unknown[42].+[373631](arg _mt[373645]:_MT[201], arg this[373634] :
  dateTime, arg td[373638] :
  timeDelta, arg dt[373642] :
  dateTime) : _unknown[42] "method" "operator"
  {
    { scopeless
      unknown newmicro[373650](373651 call +(373654 call . dt c"microsecond")(373660 call . td c"microseconds"))
      (373664 'end of statement')
    }
    { scopeless
      unknown newsec[373666](373667 call +(373670 call . dt c"second")(373674 call . td c"seconds"))
      (373678 'end of statement')
    }
    { scopeless
      unknown newmin[373680](373682 call . dt c"minute")
      (373686 'end of statement')
    }
    { scopeless
      unknown newhour[373688](373690 call . dt c"hour")
      (373694 'end of statement')
    }
    (373695 call += newsec(373698 call / newmicro 1000000))
    (373702 call %= newmicro 1000000)
    (373706 call += newmin(373709 call / newsec 60))
    (373713 call %= newsec 60)
    (373717 call += newhour(373720 call / newmin 60))
    (373724 call %= newmin 60)
    { scopeless
      unknown adddays[373729](373730 call +(373733 call . td c"days")(373736 call / newhour 24))
      (373741 'end of statement')
    }
    (373742 call %= newhour 24)
    (373746 return(373747 'new'(373749 call dateTime(373754 call(373751 call . date c"createFromOrdinal")(373755 call +(373765 call(373762 call .(373761 call(373758 call . dt c"getDate")) c"toOrdinal")) adddays))(373767 'new'(373769 call time(hour = newhour)(minute = newmin)(second = newsec)(microsecond = newmicro)(tz =(373779 call . dt c"timezone")))))))
  }
  { scopeless type
    dateTime
  }
  function _unknown[42].+[373786](arg _mt[373800]:_MT[201], arg this[373789] :
  dateTime, arg dt[373793] :
  dateTime, arg td[373797] :
  timeDelta) : _unknown[42] "method" "operator"
  {
    (373804 return(373805 call + td dt))
  }
  { scopeless type
    dateTime
  }
  function _unknown[42].-[373812](arg _mt[373826]:_MT[201], arg this[373815] :
  dateTime, arg dt[373819] :
  dateTime, arg td[373823] :
  timeDelta) : _unknown[42] "method" "operator"
  {
    { scopeless
      unknown deltasec[373831](373832 call %(373835 call . td c"seconds") 60)
      (373840 'end of statement')
    }
    { scopeless
      unknown deltamin[373842](373843 call %(373845 call /(373848 call . td c"seconds") 60) 60)
      (373854 'end of statement')
    }
    { scopeless
      unknown deltahour[373856](373857 call /(373860 call . td c"seconds")(373863 call * 60 60))
      (373868 'end of statement')
    }
    { scopeless
      unknown newmicro[373870](373871 call -(373874 call . dt c"microsecond")(373878 call . td c"microseconds"))
      (373882 'end of statement')
    }
    { scopeless
      unknown newsec[373884](373885 call -(373888 call . dt c"second") deltasec)
      (373893 'end of statement')
    }
    { scopeless
      unknown newmin[373895](373896 call -(373899 call . dt c"minute") deltamin)
      (373904 'end of statement')
    }
    { scopeless
      unknown newhour[373906](373907 call -(373910 call . dt c"hour") deltahour)
      (373915 'end of statement')
    }
    { scopeless
      unknown subDays[373917](373919 call . td c"days")
      (373923 'end of statement')
    }
    if(373937 call _cond_test(373933 call < newmicro 0))
    {
      (373925 call -= newsec 1)
      (373929 call += newmicro 1000000)
    }
    if(373954 call _cond_test(373950 call < newsec 0))
    {
      (373942 call -= newmin 1)
      (373946 call += newsec 60)
    }
    if(373971 call _cond_test(373967 call < newmin 0))
    {
      (373959 call -= newhour 1)
      (373963 call += newmin 60)
    }
    if(373988 call _cond_test(373984 call < newhour 0))
    {
      (373976 call += subDays 1)
      (373980 call += newhour 24)
    }
    (373992 return(373993 'new'(373995 call dateTime(374000 call(373997 call . date c"createFromOrdinal")(374001 call -(374011 call(374008 call .(374007 call(374004 call . dt c"getDate")) c"toOrdinal")) subDays))(374013 'new'(374015 call time(hour = newhour)(minute = newmin)(second = newsec)(microsecond = newmicro)(tz =(374025 call . dt c"timezone")))))))
  }
  { scopeless type
    dateTime
  }
  function _unknown[42].-[374032](arg _mt[374046]:_MT[201], arg this[374035] :
  dateTime, arg dt1[374039] :
  dateTime, arg dt2[374043] :
  dateTime) : _unknown[42] "method" "operator"
  {
    if(374104 call _cond_test(374054 call ||(374056 call &&(374058 call !=(374067 call(374064 call .(374061 call . dt1 c"timezone") c"borrow")) nil[32])(374069 call ==(374078 call(374075 call .(374072 call . dt2 c"timezone") c"borrow")) nil[32]))(374080 call &&(374082 call ==(374091 call(374088 call .(374085 call . dt1 c"timezone") c"borrow")) nil[32])(374093 call !=(374102 call(374099 call .(374096 call . dt2 c"timezone") c"borrow")) nil[32]))))
    {
      (374052 call halt "both dateTimes must both be either naive or aware")
    }
    if(374242 call _cond_test(374232 call ==(374235 call . dt1 c"timezone")(374239 call . dt2 c"timezone")))
    {
      { scopeless
        { scopeless
          const newmicro[374173] "const"(374174 call -(374177 call . dt1 c"microsecond")(374181 call . dt2 c"microsecond"))
        }
        { scopeless
          const newsec[374160] "const"(374161 call -(374164 call . dt1 c"second")(374168 call . dt2 c"second"))
        }
        { scopeless
          const newmin[374147] "const"(374148 call -(374151 call . dt1 c"minute")(374155 call . dt2 c"minute"))
        }
        { scopeless
          const newhour[374134] "const"(374135 call -(374138 call . dt1 c"hour")(374142 call . dt2 c"hour"))
        }
        { scopeless
          const newday[374111] "const"(374112 call -(374122 call(374119 call .(374118 call(374115 call . dt1 c"getDate")) c"toOrdinal"))(374131 call(374128 call .(374127 call(374124 call . dt2 c"getDate")) c"toOrdinal")))
        }
        (374185 'end of statement')
      }
      (374186 return(374187 'new'(374189 call timeDelta(days = newday)(hours = newhour)(minutes = newmin)(seconds = newsec)(microseconds = newmicro))))
    }
    {
      (374201 return(374202 call -(374204 call +(374206 call -(374212 call(374209 call . dt1 c"replace")(tz = nil[32]))(374219 call(374216 call . dt2 c"replace")(tz = nil[32])))(374226 call(374223 call . dt2 c"utcOffset")))(374231 call(374228 call . dt1 c"utcOffset"))))
    }
  }
  { scopeless type
    timeDelta
  }
  function _unknown[42].==[374249](arg _mt[374263]:_MT[201], arg this[374252] :
  dateTime, arg dt1[374256] :
  dateTime, arg dt2[374260] :
  dateTime) : _unknown[42] "method" "operator"
  {
    if(374519 call _cond_test(374469 call ||(374471 call &&(374473 call ==(374482 call(374479 call .(374476 call . dt1 c"timezone") c"borrow")) nil[32])(374484 call !=(374493 call(374490 call .(374487 call . dt2 c"timezone") c"borrow")) nil[32]))(374495 call &&(374497 call !=(374506 call(374503 call .(374500 call . dt1 c"timezone") c"borrow")) nil[32])(374508 call ==(374517 call(374514 call .(374511 call . dt2 c"timezone") c"borrow")) nil[32]))))
    {
      (374269 call halt "Cannot compare naive dateTime to aware dateTime")
    }
    {
      { scopeless
        if(374465 call _cond_test(374455 call ==(374458 call . dt1 c"timezone")(374462 call . dt2 c"timezone")))
        {
          { scopeless
            { scopeless
              unknown d1[374291](374303 call(374300 call .(374297 call(374294 call . dt1 c"replace")(tz = nil[32])) c"getDate")) date
            }
            { scopeless
              unknown d2[374276](374288 call(374285 call .(374282 call(374279 call . dt2 c"replace")(tz = nil[32])) c"getDate")) date
            }
            (374305 'end of statement')
          }
          { scopeless
            { scopeless
              unknown t1[374325](374337 call(374334 call .(374331 call(374328 call . dt1 c"replace")(tz = nil[32])) c"getTime")) time
            }
            { scopeless
              unknown t2[374308](374322 call(374319 call .(374314 call(374311 call . dt2 c"replace")(tz = nil[32])) c"getTime")) time
            }
            (374339 'end of statement')
          }
          (374340 return(374341 call &&(374343 call &&(374345 call &&(374347 call &&(374349 call &&(374351 call &&(374353 call ==(374356 call . d1 c"year")(374360 call . d2 c"year"))(374363 call ==(374366 call . d1 c"month")(374370 call . d2 c"month")))(374373 call ==(374376 call . d1 c"day")(374380 call . d2 c"day")))(374383 call ==(374386 call . t1 c"hour")(374390 call . t2 c"hour")))(374393 call ==(374396 call . t1 c"minute")(374400 call . t2 c"minute")))(374403 call ==(374406 call . t1 c"second")(374410 call . t2 c"second")))(374413 call ==(374416 call . t1 c"microsecond")(374420 call . t2 c"microsecond"))))
        }
        {
          (374424 return(374425 call ==(374427 call -(374433 call(374430 call . dt1 c"replace")(tz = nil[32]))(374440 call(374437 call . dt1 c"utcOffset")))(374441 call -(374447 call(374444 call . dt2 c"replace")(tz = nil[32]))(374454 call(374451 call . dt2 c"utcOffset")))))
        }
      }
    }
  }
  { scopeless type
    bool
  }
  function _unknown[42].!=[374527](arg _mt[374541]:_MT[201], arg this[374530] :
  dateTime, arg dt1[374534] :
  dateTime, arg dt2[374538] :
  dateTime) : _unknown[42] "method" "operator"
  {
    (374545 return(374546 call !(374548 call == dt1 dt2)))
  }
  { scopeless type
    bool
  }
  function _unknown[42].<[374555](arg _mt[374569]:_MT[201], arg this[374558] :
  dateTime, arg dt1[374562] :
  dateTime, arg dt2[374566] :
  dateTime) : _unknown[42] "method" "operator"
  {
    if(374732 call _cond_test(374682 call ||(374684 call &&(374686 call !=(374695 call(374692 call .(374689 call . dt1 c"timezone") c"borrow")) nil[32])(374697 call ==(374706 call(374703 call .(374700 call . dt2 c"timezone") c"borrow")) nil[32]))(374708 call &&(374710 call ==(374719 call(374716 call .(374713 call . dt1 c"timezone") c"borrow")) nil[32])(374721 call !=(374730 call(374727 call .(374724 call . dt2 c"timezone") c"borrow")) nil[32]))))
    {
      (374575 call halt "both dateTimes must both be either naive or aware")
    }
    {
      { scopeless
        if(374678 call _cond_test(374668 call ==(374671 call . dt1 c"timezone")(374675 call . dt2 c"timezone")))
        {
          { scopeless
            { scopeless
              const date1[374588] "const"(374593 call(374590 call . dt1 c"getDate"))
            }
            { scopeless
              const date2[374580] "const"(374585 call(374582 call . dt2 c"getDate"))
            }
            (374595 'end of statement')
          }
          if(374630 call _cond_test(374626 call < date1 date2))
          {
            { scopeless
              (374596 return 1)
            }
          }
          {
            { scopeless
              if(374620 call _cond_test(374616 call < date2 date1))
              {
                { scopeless
                  (374599 return 0)
                }
              }
              {
                { scopeless
                  (374602 return(374603 call <(374609 call(374606 call . dt1 c"getTime"))(374614 call(374611 call . dt2 c"getTime"))))
                }
              }
            }
          }
        }
        {
          (374637 return(374638 call <(374640 call -(374646 call(374643 call . dt1 c"replace")(tz = nil[32]))(374653 call(374650 call . dt1 c"utcOffset")))(374654 call -(374660 call(374657 call . dt2 c"replace")(tz = nil[32]))(374667 call(374664 call . dt2 c"utcOffset")))))
        }
      }
    }
  }
  { scopeless type
    bool
  }
  function _unknown[42].<=[374740](arg _mt[374754]:_MT[201], arg this[374743] :
  dateTime, arg dt1[374747] :
  dateTime, arg dt2[374751] :
  dateTime) : _unknown[42] "method" "operator"
  {
    if(374917 call _cond_test(374867 call ||(374869 call &&(374871 call !=(374880 call(374877 call .(374874 call . dt1 c"timezone") c"borrow")) nil[32])(374882 call ==(374891 call(374888 call .(374885 call . dt2 c"timezone") c"borrow")) nil[32]))(374893 call &&(374895 call ==(374904 call(374901 call .(374898 call . dt1 c"timezone") c"borrow")) nil[32])(374906 call !=(374915 call(374912 call .(374909 call . dt2 c"timezone") c"borrow")) nil[32]))))
    {
      (374760 call halt "both dateTimes must both be either naive or aware")
    }
    {
      { scopeless
        if(374863 call _cond_test(374853 call ==(374856 call . dt1 c"timezone")(374860 call . dt2 c"timezone")))
        {
          { scopeless
            { scopeless
              const date1[374773] "const"(374778 call(374775 call . dt1 c"getDate"))
            }
            { scopeless
              const date2[374765] "const"(374770 call(374767 call . dt2 c"getDate"))
            }
            (374780 'end of statement')
          }
          if(374815 call _cond_test(374811 call < date1 date2))
          {
            { scopeless
              (374781 return 1)
            }
          }
          {
            { scopeless
              if(374805 call _cond_test(374801 call < date2 date1))
              {
                { scopeless
                  (374784 return 0)
                }
              }
              {
                { scopeless
                  (374787 return(374788 call <=(374794 call(374791 call . dt1 c"getTime"))(374799 call(374796 call . dt2 c"getTime"))))
                }
              }
            }
          }
        }
        {
          (374822 return(374823 call <=(374825 call -(374831 call(374828 call . dt1 c"replace")(tz = nil[32]))(374838 call(374835 call . dt1 c"utcOffset")))(374839 call -(374845 call(374842 call . dt2 c"replace")(tz = nil[32]))(374852 call(374849 call . dt2 c"utcOffset")))))
        }
      }
    }
  }
  { scopeless type
    bool
  }
  function _unknown[42].>[374925](arg _mt[374939]:_MT[201], arg this[374928] :
  dateTime, arg dt1[374932] :
  dateTime, arg dt2[374936] :
  dateTime) : _unknown[42] "method" "operator"
  {
    if(375102 call _cond_test(375052 call ||(375054 call &&(375056 call !=(375065 call(375062 call .(375059 call . dt1 c"timezone") c"borrow")) nil[32])(375067 call ==(375076 call(375073 call .(375070 call . dt2 c"timezone") c"borrow")) nil[32]))(375078 call &&(375080 call ==(375089 call(375086 call .(375083 call . dt1 c"timezone") c"borrow")) nil[32])(375091 call !=(375100 call(375097 call .(375094 call . dt2 c"timezone") c"borrow")) nil[32]))))
    {
      (374945 call halt "both dateTimes must both be either naive or aware")
    }
    {
      { scopeless
        if(375048 call _cond_test(375038 call ==(375041 call . dt1 c"timezone")(375045 call . dt2 c"timezone")))
        {
          { scopeless
            { scopeless
              const date1[374958] "const"(374963 call(374960 call . dt1 c"getDate"))
            }
            { scopeless
              const date2[374950] "const"(374955 call(374952 call . dt2 c"getDate"))
            }
            (374965 'end of statement')
          }
          if(375000 call _cond_test(374996 call > date1 date2))
          {
            { scopeless
              (374966 return 1)
            }
          }
          {
            { scopeless
              if(374990 call _cond_test(374986 call > date2 date1))
              {
                { scopeless
                  (374969 return 0)
                }
              }
              {
                { scopeless
                  (374972 return(374973 call >(374979 call(374976 call . dt1 c"getTime"))(374984 call(374981 call . dt2 c"getTime"))))
                }
              }
            }
          }
        }
        {
          (375007 return(375008 call >(375010 call -(375016 call(375013 call . dt1 c"replace")(tz = nil[32]))(375023 call(375020 call . dt1 c"utcOffset")))(375024 call -(375030 call(375027 call . dt2 c"replace")(tz = nil[32]))(375037 call(375034 call . dt2 c"utcOffset")))))
        }
      }
    }
  }
  { scopeless type
    bool
  }
  function _unknown[42].>=[375110](arg _mt[375124]:_MT[201], arg this[375113] :
  dateTime, arg dt1[375117] :
  dateTime, arg dt2[375121] :
  dateTime) : _unknown[42] "method" "operator"
  {
    if(375287 call _cond_test(375237 call ||(375239 call &&(375241 call !=(375250 call(375247 call .(375244 call . dt1 c"timezone") c"borrow")) nil[32])(375252 call ==(375261 call(375258 call .(375255 call . dt2 c"timezone") c"borrow")) nil[32]))(375263 call &&(375265 call ==(375274 call(375271 call .(375268 call . dt1 c"timezone") c"borrow")) nil[32])(375276 call !=(375285 call(375282 call .(375279 call . dt2 c"timezone") c"borrow")) nil[32]))))
    {
      (375130 call halt "both dateTimes must both be either naive or aware")
    }
    {
      { scopeless
        if(375233 call _cond_test(375223 call ==(375226 call . dt1 c"timezone")(375230 call . dt2 c"timezone")))
        {
          { scopeless
            { scopeless
              const date1[375143] "const"(375148 call(375145 call . dt1 c"getDate"))
            }
            { scopeless
              const date2[375135] "const"(375140 call(375137 call . dt2 c"getDate"))
            }
            (375150 'end of statement')
          }
          if(375185 call _cond_test(375181 call > date1 date2))
          {
            { scopeless
              (375151 return 1)
            }
          }
          {
            { scopeless
              if(375175 call _cond_test(375171 call > date2 date1))
              {
                { scopeless
                  (375154 return 0)
                }
              }
              {
                { scopeless
                  (375157 return(375158 call >=(375164 call(375161 call . dt1 c"getTime"))(375169 call(375166 call . dt2 c"getTime"))))
                }
              }
            }
          }
        }
        {
          (375192 return(375193 call >=(375195 call -(375201 call(375198 call . dt1 c"replace")(tz = nil[32]))(375208 call(375205 call . dt1 c"utcOffset")))(375209 call -(375215 call(375212 call . dt2 c"replace")(tz = nil[32]))(375222 call(375219 call . dt2 c"utcOffset")))))
        }
      }
    }
  }
  { scopeless type
    bool
  }
  type timeDelta[375414] unknown chpl_days[375297] int[10] unknown chpl_seconds[375302] int[10] unknown chpl_microseconds[375307] int[10] function timeDelta[375414].days[375311](arg _mt[375315]:_MT[201], arg this[375313]:timeDelta[375414]) : _unknown[42] "method" "primary method" "no parens"
  {
    (375319 return chpl_days)
  }
  { scopeless type
    int[10]
  } function timeDelta[375414].seconds[375324](arg _mt[375328]:_MT[201], arg this[375326]:timeDelta[375414]) : _unknown[42] "method" "primary method" "no parens"
  {
    (375332 return chpl_seconds)
  }
  { scopeless type
    int[10]
  } function timeDelta[375414].microseconds[375337](arg _mt[375341]:_MT[201], arg this[375339]:timeDelta[375414]) : _unknown[42] "method" "primary method" "no parens"
  {
    (375345 return chpl_microseconds)
  }
  { scopeless type
    int[10]
  } function timeDelta[375414].min[375350](arg _mt[375354]:_MT[201], arg this[375352]:timeDelta[375414]) : _unknown[42] "method" "primary method" "no parens"
  {
    (375358 return(375359 'new'(375361 call timeDelta(days =(375362 call - 999999999)))))
  }
  { scopeless type
    timeDelta
  } function timeDelta[375414].max[375371](arg _mt[375375]:_MT[201], arg this[375373]:timeDelta[375414]) : _unknown[42] "method" "primary method" "no parens"
  {
    (375379 return(375380 'new'(375382 call timeDelta(days = 999999999)(hours = 23)(minutes = 59)(seconds = 59)(microseconds = 999999))))
  }
  { scopeless type
    timeDelta
  } function timeDelta[375414].resolution[375396](arg _mt[375400]:_MT[201], arg this[375398]:timeDelta[375414]) : _unknown[42] "method" "primary method" "no parens"
  {
    (375404 return(375405 'new'(375407 call timeDelta(microseconds = 1))))
  }
  { scopeless type
    timeDelta
  }
  function _unknown[42].init[375416](arg _mt[375464]:_MT[201], arg this[375419] :
  timeDelta, arg days[375424] :
  int[10] =
  0, arg seconds[375430] :
  int[10] =
  0, arg microseconds[375436] :
  int[10] =
  0, arg milliseconds[375442] :
  int[10] =
  0, arg minutes[375448] :
  int[10] =
  0, arg hours[375454] :
  int[10] =
  0, arg weeks[375460] :
  int[10] =
  0) : _unknown[42] "method"
  {
    { scopeless
      { scopeless
        unknown usps[375483] "param" 1000000
      }
      { scopeless
        unknown uspms[375479] "param" 1000
      }
      { scopeless
        unknown spd[375469] "param"(375470 call *(375472 call * 24 60) 60)
      }
      (375486 'end of statement')
    }
    { scopeless
      unknown us[375488](375489 call +(375491 call +(375493 call * usps(375496 call +(375498 call * 60(375501 call +(375503 call * hours 60) minutes)) seconds))(375509 call * uspms milliseconds)) microseconds)
      (375515 'end of statement')
    }
    { scopeless
      unknown sec[375517](375518 call / us usps)
      (375523 'end of statement')
    }
    (375524 call = us(375527 call % us usps))
    if(375547 call _cond_test(375543 call < us 0))
    {
      (375532 call -= sec 1)
      (375536 call = us(375539 call + usps us))
    }
    { scopeless
      unknown day[375552](375553 call +(375555 call +(375557 call * weeks 7) days)(375562 call / sec spd))
      (375567 'end of statement')
    }
    (375568 call = sec(375571 call % sec spd))
    if(375591 call _cond_test(375587 call < sec 0))
    {
      (375576 call -= day 1)
      (375580 call = sec(375583 call + spd sec))
    }
    (375595 call =(375600 call . this c"chpl_days") day)
    (375604 call =(375609 call . this c"chpl_seconds") sec)
    (375613 call =(375618 call . this c"chpl_microseconds") us)
    if(375640 call _cond_test(375631 call <(375634 call . this c"days")(375637 call - 999999999)))
    {
      { scopeless
        (375626 call(375623 call . HaltWrappers c"initHalt") "Overflow: days < -999999999")
      }
    }
    if(375661 call _cond_test(375654 call >(375657 call . this c"days") 999999999))
    {
      { scopeless
        (375649 call(375646 call . HaltWrappers c"initHalt") "Overflow: days > 999999999")
      }
    }
  }
  function _unknown[42].init[375668](arg _mt[375678]:_MT[201], arg this[375671] :
  timeDelta, arg timestamp[375675] :
  real[13]) : _unknown[42] "method"
  {
    (375685 call(375682 call . this c"init")(seconds =(375686 call : timestamp int[10]))(microseconds =(375691 call :(375693 call *(375695 call - timestamp(375698 call : timestamp int[10])) 1000000) int[10])))
  }
  function _unknown[42].totalSeconds[375707](arg _mt[375713]:_MT[201], arg this[375710] :
  timeDelta) : _unknown[42] "method"
  {
    (375717 return(375718 call +(375720 call +(375722 call * days(375725 call *(375727 call * 24 60) 60)) seconds)(375733 call / microseconds 1e+06)))
  }
  { scopeless type
    real[13]
  }
  function _unknown[42].*[375740](arg _mt[375754]:_MT[201], arg this[375743] :
  timeDelta, arg i[375747] :
  int[10], arg t[375751] :
  timeDelta) : _unknown[42] "method" "operator"
  {
    (375758 return(375759 'new'(375761 call timeDelta(days =(375762 call * i(375766 call . t c"days")))(seconds =(375770 call * i(375774 call . t c"seconds")))(microseconds =(375778 call * i(375782 call . t c"microseconds"))))))
  }
  { scopeless type
    timeDelta
  }
  function _unknown[42].*[375789](arg _mt[375803]:_MT[201], arg this[375792] :
  timeDelta, arg t[375796] :
  timeDelta, arg i[375800] :
  int[10]) : _unknown[42] "method" "operator"
  {
    (375807 return(375808 'new'(375810 call timeDelta(days =(375811 call * i(375815 call . t c"days")))(seconds =(375819 call * i(375823 call . t c"seconds")))(microseconds =(375827 call * i(375831 call . t c"microseconds"))))))
  }
  { scopeless type
    timeDelta
  }
  function _unknown[42]./[375838](arg _mt[375852]:_MT[201], arg this[375841] :
  timeDelta, arg t[375845] :
  timeDelta, arg i[375849] :
  int[10]) : _unknown[42] "method" "operator"
  {
    { scopeless
      unknown day[375857](375858 call /(375861 call . t c"days") i)
      (375866 'end of statement')
    }
    { scopeless
      unknown second[375868](375869 call +(375872 call . t c"seconds")(375875 call *(375877 call *(375879 call *(375881 call %(375884 call . t c"days") i) 24) 60) 60))
      (375892 'end of statement')
    }
    { scopeless
      unknown microsecond[375894](375895 call +(375898 call . t c"microseconds")(375901 call *(375903 call % second i) 1000000))
      (375909 'end of statement')
    }
    { scopeless
      unknown us_remainder[375911](375912 call % microsecond i)
      (375917 'end of statement')
    }
    (375918 call /= second i)
    (375922 call /= microsecond i)
    if(375938 call _cond_test(375931 call >=(375933 call * us_remainder 2) i))
    {
      { scopeless
        (375926 call += microsecond 1)
      }
    }
    (375943 return(375944 'new'(375946 call timeDelta(days = day)(seconds = second)(microseconds = microsecond))))
  }
  { scopeless type
    timeDelta
  }
  function _unknown[42].+[375956](arg _mt[375966]:_MT[201], arg this[375959] :
  timeDelta, arg t[375963] :
  timeDelta) : _unknown[42] "method" "operator"
  {
    (375970 return t)
  }
  { scopeless type
    timeDelta
  }
  function _unknown[42].-[375975](arg _mt[375985]:_MT[201], arg this[375978] :
  timeDelta, arg t[375982] :
  timeDelta) : _unknown[42] "method" "operator"
  {
    (375989 return(375990 'new'(375992 call timeDelta(days =(375993 call -(375996 call . t c"days")))(seconds =(376000 call -(376003 call . t c"seconds")))(microseconds =(376007 call -(376010 call . t c"microseconds"))))))
  }
  { scopeless type
    timeDelta
  }
  function _unknown[42].+[376017](arg _mt[376031]:_MT[201], arg this[376020] :
  timeDelta, arg lhs[376024] :
  timeDelta, arg rhs[376028] :
  timeDelta) : _unknown[42] "method" "operator"
  {
    (376035 return(376036 'new'(376038 call timeDelta(days =(376039 call +(376042 call . lhs c"days")(376046 call . rhs c"days")))(seconds =(376050 call +(376053 call . lhs c"seconds")(376057 call . rhs c"seconds")))(microseconds =(376061 call +(376064 call . lhs c"microseconds")(376068 call . rhs c"microseconds"))))))
  }
  { scopeless type
    timeDelta
  }
  function _unknown[42].-[376075](arg _mt[376089]:_MT[201], arg this[376078] :
  timeDelta, arg lhs[376082] :
  timeDelta, arg rhs[376086] :
  timeDelta) : _unknown[42] "method" "operator"
  {
    (376093 return(376094 'new'(376096 call timeDelta(days =(376097 call -(376100 call . lhs c"days")(376104 call . rhs c"days")))(seconds =(376108 call -(376111 call . lhs c"seconds")(376115 call . rhs c"seconds")))(microseconds =(376119 call -(376122 call . lhs c"microseconds")(376126 call . rhs c"microseconds"))))))
  }
  { scopeless type
    timeDelta
  }
  function _unknown[42].>[376133](arg _mt[376147]:_MT[201], arg this[376136] :
  timeDelta, arg lhs[376140] :
  timeDelta, arg rhs[376144] :
  timeDelta) : _unknown[42] "method" "operator"
  {
    { scopeless
      const ls[376152] "const"(376153 call +(376155 call *(376158 call . lhs c"days")(376161 call *(376163 call * 24 60) 60))(376169 call . lhs c"seconds"))
      (376173 'end of statement')
    }
    { scopeless
      const rs[376175] "const"(376176 call +(376178 call *(376181 call . rhs c"days")(376184 call *(376186 call * 24 60) 60))(376192 call . rhs c"seconds"))
      (376196 'end of statement')
    }
    if(376204 call _cond_test(376200 call > ls rs))
    {
      { scopeless
        (376197 return 1)
      }
    }
    if(376216 call _cond_test(376212 call > rs ls))
    {
      { scopeless
        (376209 return 0)
      }
    }
    (376221 return(376222 call >(376225 call . lhs c"microseconds")(376229 call . rhs c"microseconds")))
  }
  { scopeless type
    bool
  }
  function _unknown[42].>=[376235](arg _mt[376249]:_MT[201], arg this[376238] :
  timeDelta, arg lhs[376242] :
  timeDelta, arg rhs[376246] :
  timeDelta) : _unknown[42] "method" "operator"
  {
    (376253 return(376254 call ||(376256 call > lhs rhs)(376260 call == lhs rhs)))
  }
  { scopeless type
    bool
  }
  function _unknown[42].<[376267](arg _mt[376281]:_MT[201], arg this[376270] :
  timeDelta, arg lhs[376274] :
  timeDelta, arg rhs[376278] :
  timeDelta) : _unknown[42] "method" "operator"
  {
    { scopeless
      const ls[376286] "const"(376287 call +(376289 call *(376292 call . lhs c"days")(376295 call *(376297 call * 24 60) 60))(376303 call . lhs c"seconds"))
      (376307 'end of statement')
    }
    { scopeless
      const rs[376309] "const"(376310 call +(376312 call *(376315 call . rhs c"days")(376318 call *(376320 call * 24 60) 60))(376326 call . rhs c"seconds"))
      (376330 'end of statement')
    }
    if(376338 call _cond_test(376334 call < ls rs))
    {
      { scopeless
        (376331 return 1)
      }
    }
    if(376350 call _cond_test(376346 call < rs ls))
    {
      { scopeless
        (376343 return 0)
      }
    }
    (376355 return(376356 call <(376359 call . lhs c"microseconds")(376363 call . rhs c"microseconds")))
  }
  { scopeless type
    bool
  }
  function _unknown[42].<=[376369](arg _mt[376383]:_MT[201], arg this[376372] :
  timeDelta, arg lhs[376376] :
  timeDelta, arg rhs[376380] :
  timeDelta) : _unknown[42] "method" "operator"
  {
    (376387 return(376388 call ||(376390 call < lhs rhs)(376394 call == lhs rhs)))
  }
  { scopeless type
    bool
  }
  function _unknown[42].abs[376401](arg _mt[376407]:_MT[201], arg this[376404] :
  timeDelta) : _unknown[42] "method"
  {
    if(376426 call _cond_test(376419 call <(376422 call . this c"days") 0))
    {
      { scopeless
        (376411 return(376412 call - this))
      }
    }
    {
      { scopeless
        (376416 return this)
      }
    }
  }
  { scopeless type
    timeDelta
  }
  function :[376435](arg t[376438] :
  timeDelta, arg s[376442] :
  string[244]) : _unknown[42] "operator"
  {
    (376449 'import' Math)
    { scopeless
      unknown str[376451] string[244]
      (376454 'end of statement')
    }
    if(376512 call _cond_test(376505 call !=(376508 call . t c"days") 0))
    {
      (376456 call = str(376459 call +(376461 call :(376464 call . t c"days") string[244]) " day"))
      if(376496 call _cond_test(376478 call &&(376480 call !=(376483 call . t c"days") 1)(376487 call !=(376490 call . t c"days")(376493 call - 1))))
      {
        { scopeless
          (376471 call += str "s")
        }
      }
      (376501 call += str ", ")
    }
    { scopeless
      const seconds[376517] "const"(376518 call %(376521 call . t c"seconds") 60)
      (376526 'end of statement')
    }
    { scopeless
      const minutes[376528] "const"(376529 call %(376531 call /(376534 call . t c"seconds") 60) 60)
      (376540 'end of statement')
    }
    { scopeless
      const hours[376542] "const"(376543 call /(376546 call . t c"seconds")(376549 call * 60 60))
      (376554 'end of statement')
    }
    { scopeless
      const microseconds[376556] "const"(376558 call . t c"microseconds")
      (376562 'end of statement')
    }
    (376563 call += str(376566 call +(376568 call : hours string[244]) ":"))
    if(376582 call _cond_test(376578 call < minutes 10))
    {
      { scopeless
        (376573 call += str "0")
      }
    }
    (376587 call += str(376590 call +(376592 call : minutes string[244]) ":"))
    if(376606 call _cond_test(376602 call < seconds 10))
    {
      { scopeless
        (376597 call += str "0")
      }
    }
    (376611 call += str(376614 call : seconds string[244]))
    if(376702 call _cond_test(376698 call != microseconds 0))
    {
      (376619 call += str ".")
      { scopeless
        const usLog10[376624] "const"(376625 call :(376633 call(376630 call . Math c"log10") microseconds) int[10])
        (376637 'end of statement')
      }
      {
        unknown _indexOfInterest[376650] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[376651] "expr temp" "temp"
        (376660 'move' _iterator[376651](376658 call _getIterator(376667 call chpl_direct_range_iter 1(376664 call - 5 usLog10))))
        Defer
        {
          {
            (376684 call _freeIterator _iterator[376651])
          }
        }
        { scopeless type
          (376672 'move' _indexOfInterest[376650](376669 call iteratorIndex _iterator[376651]))
        }
        ForLoop[376652]
        {
          unknown chpl__elidedIdx[376674] "index var" "insert auto destroy"
          (376679 'move' chpl__elidedIdx[376674] _indexOfInterest[376650])
          {
            (376646 call += str "0")
          }
          label _continueLabel[376655]
          _indexOfInterest[376650]
          _iterator[376651]
        }
        label _breakLabel[376656]
      }
      (376691 call += str(376694 call : microseconds string[244]))
    }
    (376706 return str)
  }
  { scopeless type
    string[244]
  }
  type Timezone[376793] function Timezone[376793].utcOffset[376712](arg _mt[376720]:_MT[201], arg this[376714]:Timezone[376793], arg dt[376717] :
  dateTime) : _unknown[42] "method" "primary method"
  {
    (376728 call(376725 call . HaltWrappers c"pureVirtualMethodHalt"))
  }
  { scopeless type
    timeDelta
  } function Timezone[376793].dst[376732](arg _mt[376740]:_MT[201], arg this[376734]:Timezone[376793], arg dt[376737] :
  dateTime) : _unknown[42] "method" "primary method"
  {
    (376748 call(376745 call . HaltWrappers c"pureVirtualMethodHalt"))
  }
  { scopeless type
    timeDelta
  } function Timezone[376793].tzname[376752](arg _mt[376760]:_MT[201], arg this[376754]:Timezone[376793], arg dt[376757] :
  dateTime) : _unknown[42] "method" "primary method" "@unstable"
  {
    (376768 call(376765 call . HaltWrappers c"pureVirtualMethodHalt"))
  }
  { scopeless type
    string[244]
  } function Timezone[376793].fromUtc[376772](arg _mt[376780]:_MT[201], arg this[376774]:Timezone[376793], arg dt[376777] :
  dateTime) : _unknown[42] "method" "primary method"
  {
    (376788 call(376785 call . HaltWrappers c"pureVirtualMethodHalt"))
  }
  { scopeless type
    dateTime
  }
  function sleep[376795](arg t[376798] :
  real[13]) : _unknown[42] "inline"
  {
    (376804 'use' CTypes)
    function chpl_task_sleep[376806](arg s[376809] :
    c_double) : _unknown[42] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      void[4]
    }
    if(376829 call _cond_test(376825 call < t 0))
    {
      (376818 call warning "sleep() called with negative time parameter: '" t "'")
      (376824 return)
    }
    (376834 call chpl_task_sleep(376835 call : t c_double))
  }
  { scopeless type
    void[4]
  }
  type stopwatch[377049] unknown time[376844](376847 call chpl_null_timevalue) _timevalue unknown accumulated[376851] 0.0 real[13] unknown running[376857] 0 bool function stopwatch[377049].clear[376862](arg _mt[376866]:_MT[201], ref arg this[376864]:stopwatch[377049]) : _unknown[42] "method" "primary method"
  {
    (376870 call = accumulated 0.0)
    if(376881 call _cond_test running)
    {
      (376875 call = time(376879 call chpl_now_timevalue))
    }
  }
  { scopeless type
    void[4]
  } function stopwatch[377049].start[376888](arg _mt[376892]:_MT[201], ref arg this[376890]:stopwatch[377049]) : _unknown[42] "method" "primary method"
  {
    if(376915 call _cond_test(376912 call ! running))
    {
      (376897 call = running 1)
      (376901 call = time(376905 call chpl_now_timevalue))
    }
    {
      (376908 call warning "start called on a timer that has not been stopped")
    }
  }
  { scopeless type
    void[4]
  } function stopwatch[377049].stop[376922](arg _mt[376926]:_MT[201], ref arg this[376924]:stopwatch[377049]) : _unknown[42] "method" "primary method"
  {
    if(376956 call _cond_test running)
    {
      { scopeless
        unknown time2[376932](376935 call chpl_now_timevalue) _timevalue
        (376937 'end of statement')
      }
      (376938 call += accumulated(376942 call _diff_time time2 time))
      (376945 call = running 0)
    }
    {
      (376951 call warning "stop called on a timer that has not been started")
    }
  }
  { scopeless type
    void[4]
  } function stopwatch[377049].reset[376963](arg _mt[376967]:_MT[201], ref arg this[376965]:stopwatch[377049]) : _unknown[42] "method" "primary method"
  {
    if(376975 call _cond_test running)
    {
      (376973 call stop)
    }
    (376980 call clear)
  }
  { scopeless type
    void[4]
  } function stopwatch[377049].restart[376984](arg _mt[376988]:_MT[201], ref arg this[376986]:stopwatch[377049]) : _unknown[42] "method" "primary method"
  {
    (376993 call clear)
    if(377000 call _cond_test(376997 call ! running))
    {
      (376996 call start)
    }
  }
  { scopeless type
    void[4]
  } function stopwatch[377049].elapsed[377007](arg _mt[377011]:_MT[201], arg this[377009]:stopwatch[377049]) : _unknown[42] "method" "primary method"
  {
    if(377041 call _cond_test running)
    {
      { scopeless
        unknown time2[377017](377020 call chpl_now_timevalue) _timevalue
        (377022 'end of statement')
      }
      (377023 return(377024 call /(377026 call + accumulated(377030 call _diff_time time2 time)) 1e+06))
    }
    {
      (377035 return(377036 call / accumulated 1e+06))
    }
  }
  { scopeless type
    real[13]
  }
  function _diff_time[377051](arg t1[377054] :
  _timevalue, arg t2[377058] :
  _timevalue) : _unknown[42] "inline" "private"
  {
    function chpl_timevalue_seconds[377062](arg t[377065] :
    _timevalue) : _unknown[42] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (377069 call int[10] 64)
    }
    function chpl_timevalue_microseconds[377074](arg t[377077] :
    _timevalue) : _unknown[42] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (377081 call int[10] 64)
    }
    { scopeless
      unknown s1[377087](377089 call chpl_timevalue_seconds t1)
      (377092 'end of statement')
    }
    { scopeless
      unknown us1[377094](377096 call chpl_timevalue_microseconds t1)
      (377099 'end of statement')
    }
    { scopeless
      unknown s2[377101](377103 call chpl_timevalue_seconds t2)
      (377106 'end of statement')
    }
    { scopeless
      unknown us2[377108](377110 call chpl_timevalue_microseconds t2)
      (377113 'end of statement')
    }
    (377114 return(377115 call -(377117 call +(377119 call * s1 1e+06) us1)(377124 call +(377126 call * s2 1e+06) us2)))
  }
}