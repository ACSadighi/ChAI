AST dump for ChapelShortArrayTransfer after pass parseAndConvertUast.
Module use list: 

{
  (247208 'use' ChapelBase)
  (247213 'use' ChplConfig 'only' CHPL_LOCALE_MODEL)
  { scopeless
    unknown debugShortArrayTransfer[247216] "config" "param" 0
    (247219 'end of statement')
  }
  { scopeless
    unknown disableShortArrayTransfer[247221] "config" "param" 0
    (247224 'end of statement')
  }
  { scopeless
    unknown shortArrayTransferThreshold[247226] "config" "param" 60
    (247231 'end of statement')
  }
  function chpl__staticCheckShortArrayTransfer[247232](arg a[247234]:_any[141](?), arg b[247236]:_any[141](?)) param : _unknown[42]
  {
    (247239 return(247240 call &&(247242 call &&(247244 call ! disableShortArrayTransfer)(247248 call isProtoSlice a))(247251 call isProtoSlice b)))
  }
  function chpl__dynamicCheckShortArrayTransfer[247255](arg a[247257]:_any[141](?), arg b[247259]:_any[141](?)) : _unknown[42] "inline"
  {
    { scopeless
      unknown msgHeader[247263] "param" "<ShortArrayTransfer> "
      (247268 'end of statement')
    }
    { scopeless
      unknown localCompilation[247270] "param"(247271 call && _local(247274 call == CHPL_LOCALE_MODEL "flat"))
      (247281 'end of statement')
    }
    { scopeless
      const sizeOk[247283] "const"(247284 call <(247290 call(247287 call . a c"sizeAs") uint[86]) shortArrayTransferThreshold)
      (247294 'end of statement')
    }
    (247296 call debug "Size: "(247304 call(247301 call . a c"sizeAs") uint[86]) " Threshold: " shortArrayTransferThreshold)
    if(247323 call _cond_test sizeOk)
    {
      { scopeless
        (247311 call debug "size qualifies")
      }
    }
    {
      { scopeless
        (247317 call debug "size doesn't qualify")
      }
    }
    if(247405 call _cond_test localCompilation)
    {
      (247330 return sizeOk)
    }
    {
      function chpl_task_getRequestedSubloc[247333]() : _unknown[42] "extern" "local args" "no fn body"
      {
      }
      { scopeless type
        (247336 call int[10] 32)
      }
      { scopeless
        const bothLocal[247342] "const"(247344 call chpl__bothLocal a b)
        (247348 'end of statement')
      }
      { scopeless
        const notGpu[247350] "const"(247351 call ||(247353 call == CHPL_LOCALE_MODEL "flat")(247357 call <(247360 call chpl_task_getRequestedSubloc) 0))
        (247363 'end of statement')
      }
      if(247390 call _cond_test bothLocal)
      {
        { scopeless
          if(247377 call _cond_test notGpu)
          {
            { scopeless
              (247365 call debug "locality qualifies")
            }
          }
          {
            { scopeless
              (247371 call debug "GPU arrays shouldn't be SAT'ed")
            }
          }
        }
      }
      {
        { scopeless
          (247384 call debug "locality does not qualify")
        }
      }
      (247396 return(247397 call &&(247399 call && sizeOk bothLocal) notGpu))
    }
  }
  function debug[247411](arg s[247414]:_any[141](?) ...) : _unknown[42] "private"
  {
    (247421 'use' ChapelDebugPrint 'only' chpl_debug_writeln)
    if(247430 call _cond_test debugShortArrayTransfer)
    {
      (247425 call chpl_debug_writeln "<ShortArrayTransfer> "(247428 'expand_tuple' s))
    }
  }
}