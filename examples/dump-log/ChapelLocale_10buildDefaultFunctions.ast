AST dump for ChapelLocale after pass buildDefaultFunctions.
Module use list: LocaleModel HaltWrappers CTypes 

{
  function chpl__init_ChapelLocale[468438]() : void[4] "insert line file info" "module init"
  {
    unknown tmp[487770] "maybe param" "temp"
    (487781 'move' tmp[487770](135172 call ! localeModelHasSublocales[306867]))
    unknown call_tmp[808122] "expr temp" "maybe param" "maybe type" "temp"
    (808125 'move' call_tmp[808122](487783 call _cond_invalid tmp[487770]))
    if call_tmp[808122]
    {
      (487786 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[679743] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[679744] "maybe param" "temp"
    unknown call_tmp[808127] "expr temp" "maybe param" "maybe type" "temp"
    (808130 'move' call_tmp[808127](487771 call isTrue tmp[487770]))
    (679749 'move' tmp[679744](679747 call _cond_test call_tmp[808127]))
    if tmp[679744]
    {
      unknown tmp[679751] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (679753 'move' tmp[679751](487774 call isTrue localeModelPartitionsIterationOnSublocales[306872]))
      (679758 'move' tmp[679743](679755 '_paramFoldLogical' tmp[679744] tmp[679751]))
    }
    {
      (679763 'move' tmp[679743](679760 '_paramFoldLogical' tmp[679744] 0))
    }
    unknown call_tmp[808132] "expr temp" "maybe param" "maybe type" "temp"
    (808135 'move' call_tmp[808132](135168 call ! tmp[679743]))
    unknown call_tmp[808137] "expr temp" "maybe param" "maybe type" "temp"
    (808140 'move' call_tmp[808137](135176 call + "Locale model without sublocales can not have " "localeModelPartitionsIterationOnSublocales set to true."))
    (135167 call compilerAssert call_tmp[808132] call_tmp[808137])
    (553947 'end of statement')
    (645897 'move' chpl_nodeID_t[135185](645895 call int(64)[10] 32))
    (645902 'move' chpl_sublocID_t[135191](645900 call int(64)[10] 32))
    { scopeless type extern
      (645904 'default init var' c_sublocid_none[135197] chpl_sublocID_t[135191])
    }
    (135200 'end of statement')
    { scopeless type extern
      (645907 'default init var' c_sublocid_any[135202] chpl_sublocID_t[135191])
    }
    (135205 'end of statement')
    { scopeless type extern
      (645910 'default init var' c_sublocid_all[135207] chpl_sublocID_t[135191])
    }
    (135210 'end of statement')
    {
    }
    unknown call_tmp[808172] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (808175 'move' call_tmp[808172](1000119 'new' locale[234] nilLocale[135242]))
    (645913 'init var' nilLocale[135253] call_tmp[808172])
    (135264 'end of statement')
    unknown call_tmp[808177] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (808180 'move' call_tmp[808177](1000120 'new' locale[234] default[135246]))
    (645915 'init var' defaultLocale[135266] call_tmp[808177])
    (135277 'end of statement')
    unknown call_tmp[808182] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (808185 'move' call_tmp[808182](1000121 'new' locale[234] dummy[135244]))
    (645917 'init var' dummyLocale[135279] call_tmp[808182])
    (135290 'end of statement')
    (645935 'init var' rootLocale[136464] nilLocale[135253])
    (136467 'end of statement')
    (645937 'init var' replicateRootLocale[136469] 1)
    (136472 'end of statement')
    (645939 'init var' origRootLocale[136474] nilLocale[135253])
    (136477 'end of statement' chpl_sublocID_t[135191] nilLocale[135253])
    (1001007 'resolution point' |writeSerializable[475227])
    (1001009 'end of statement')
    (608462 return _void[46])
  }
  function chpl__deinit_ChapelLocale[137367]() : _unknown[42] "no return value for void"
  {
    unknown call_tmp[809342] "expr temp" "maybe param" "maybe type" "temp"
    (809345 'move' call_tmp[809342](137372 call _instance _mt[203] origRootLocale[136474]))
    (137375 call chpl__delete call_tmp[809342])
    (554184 'end of statement')
    unknown call_tmp[809349] "expr temp" "maybe param" "maybe type" "temp"
    (809352 'move' call_tmp[809349](137380 call _instance _mt[203] dummyLocale[135279]))
    (137383 call chpl__delete call_tmp[809349])
    (608464 return _void[46])
  }
  unknown chpl_nodeID_t[135185] "dead at end of block" "insert auto destroy" "type variable"
  unknown chpl_sublocID_t[135191] "dead at end of block" "insert auto destroy" "type variable"
  const c_sublocid_none[135197] "dead at end of block" "const" "extern" "insert auto destroy"
  const c_sublocid_any[135202] "dead at end of block" "const" "extern" "insert auto destroy"
  const c_sublocid_all[135207] "dead at end of block" "const" "extern" "insert auto destroy"
  function chpl_isActualSublocID[135211](arg subloc[135214] :
  chpl_sublocID_t[135191]) : _unknown[42] "inline"
  {
    unknown ret[607994] "RVV" "temp"
    unknown tmp[487791] "maybe param" "temp"
    unknown tmp[487812] "maybe param" "temp"
    (487823 'move' tmp[487812](135223 call != subloc[135214] c_sublocid_none[135197]))
    unknown call_tmp[808142] "expr temp" "maybe param" "maybe type" "temp"
    (808145 'move' call_tmp[808142](487825 call _cond_invalid tmp[487812]))
    if call_tmp[808142]
    {
      (487828 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[679770] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[679771] "maybe param" "temp"
    unknown call_tmp[808147] "expr temp" "maybe param" "maybe type" "temp"
    (808150 'move' call_tmp[808147](487813 call isTrue tmp[487812]))
    (679776 'move' tmp[679771](679774 call _cond_test call_tmp[808147]))
    if tmp[679771]
    {
      unknown tmp[679778] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[808152] "expr temp" "maybe param" "maybe type" "temp"
      (808155 'move' call_tmp[808152](135227 call != subloc[135214] c_sublocid_any[135202]))
      (679780 'move' tmp[679778](487816 call isTrue call_tmp[808152]))
      (679785 'move' tmp[679770](679782 '_paramFoldLogical' tmp[679771] tmp[679778]))
    }
    {
      (679790 'move' tmp[679770](679787 '_paramFoldLogical' tmp[679771] 0))
    }
    (487802 'move' tmp[487791] tmp[679770])
    unknown call_tmp[808157] "expr temp" "maybe param" "maybe type" "temp"
    (808160 'move' call_tmp[808157](487804 call _cond_invalid tmp[487791]))
    if call_tmp[808157]
    {
      (487807 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[679797] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[679798] "maybe param" "temp"
    unknown call_tmp[808162] "expr temp" "maybe param" "maybe type" "temp"
    (808165 'move' call_tmp[808162](487792 call isTrue tmp[487791]))
    (679803 'move' tmp[679798](679801 call _cond_test call_tmp[808162]))
    if tmp[679798]
    {
      unknown tmp[679805] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[808167] "expr temp" "maybe param" "maybe type" "temp"
      (808170 'move' call_tmp[808167](135231 call != subloc[135214] c_sublocid_all[135207]))
      (679807 'move' tmp[679805](487795 call isTrue call_tmp[808167]))
      (679812 'move' tmp[679797](679809 '_paramFoldLogical' tmp[679798] tmp[679805]))
    }
    {
      (679817 'move' tmp[679797](679814 '_paramFoldLogical' tmp[679798] 0))
    }
    (607999 'move' ret[607994](607998 'deref' tmp[679797]))
    (607996 return ret[607994])
  }
  type localeKind[135248] def regular[135238]:localeKind[135248] def any[135240]:localeKind[135248] def nilLocale[135242]:localeKind[135248] def dummy[135244]:localeKind[135248] def default[135246]:localeKind[135248]
  const nilLocale[135253] "dead at end of block" "const" "insert auto destroy" "locale private"
  unknown defaultLocale[135266] "dead at end of block" "insert auto destroy" "locale private"
  unknown dummyLocale[135279] "dead at end of block" "insert auto destroy"
  function locale[234]._value[135299](arg _mt[135303]:_MT[201], arg this[135301]:locale[234]) : _unknown[42] "inline" "method" "primary method" "no parens"
  {
    unknown ret[608003] "RVV" "temp"
    unknown call_tmp[808189] "expr temp" "maybe param" "maybe type" "temp"
    (808192 'move' call_tmp[808189](430787 call _instance _mt[203] this[135301]))
    unknown call_tmp[808194] "expr temp" "maybe param" "maybe type" "temp"
    (808197 'move' call_tmp[808194](135307 call postfix! call_tmp[808189]))
    (608008 'move' ret[608003](608007 'deref' call_tmp[808194]))
    (608005 return ret[608003])
  }
  function locale[234].chpl_forwarding_expr1[135313](arg _mt[135318]:_MT[201], arg this[135316]:locale[234]) : _unknown[42] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[608012] "RVV" "temp"
    (608016 'move' ret[608012](430791 call _value _mt[203] this[135316]))
    (608014 return ret[608012])
  }
  function locale[234].init[135325](arg _mt[135329]:_MT[201], ref arg this[135327]:locale[234]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[808201] "expr temp" "maybe param" "maybe type" "temp"
    (808204 'move' call_tmp[808201](135352 call _cond_test rootLocaleInitialized[52042]))
    if call_tmp[808201]
    {
      unknown call_tmp[808208] "maybe param" "maybe type" "temp"
      (808211 'move' call_tmp[808208](135340 call _instance _mt[203] defaultLocale[135266]))
      unknown _instance[525258] "temp"
      (525261 'init var' _instance[525258] call_tmp[808208] unmanaged BaseLocale?[468079])
      (525263 'init field' this[135327] c"_instance" _instance[525258])
      (553953 'end of statement')
    }
    {
      unknown _instance[525267] "temp"
      (525270 'init var' _instance[525267] nil[32] unmanaged BaseLocale?[468079])
      (525272 'init field' this[135327] c"_instance" _instance[525267])
      (553954 'end of statement')
    }
    (608018 return _void[46])
  }
  function locale[234].init[135358](arg _mt[135366]:_MT[201], ref arg this[135360]:locale[234], arg _instance[135363]:BaseLocale[397505](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[808213] "maybe param" "maybe type" "temp"
    (808216 'move' call_tmp[808213](135376 call _to_unmanaged _instance[135363]))
    unknown _instance[525276] "temp"
    (525279 'init var' _instance[525276] call_tmp[808213] unmanaged BaseLocale?[468079])
    (525281 'init field' this[135360] c"_instance" _instance[525276])
    (553955 'end of statement')
    (608020 return _void[46])
  }
  function locale[234].init[135380](arg _mt[135386]:_MT[201], ref arg this[135382]:locale[234], param arg kind[135384]:_any[141](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[808218] "expr temp" "maybe param" "maybe type" "temp"
    (808221 'move' call_tmp[808218](135443 call == kind[135384] regular[135238]))
    unknown call_tmp[808223] "expr temp" "maybe param" "maybe type" "temp"
    (808226 'move' call_tmp[808223](135452 call _cond_test call_tmp[808218]))
    if call_tmp[808223]
    {
      (135390 call compilerError "locale.init(kind) can not be used to create " "a regular locale instance")
      (553956 'end of statement')
      val _instance[525315]:unmanaged BaseLocale?[468079] "temp"
      (525318 'default init var' _instance[525315] unmanaged BaseLocale?[468079])
      (525320 '.=' this[135382] c"_instance" _instance[525315])
      (553957 'end of statement')
    }
    {
      unknown call_tmp[808228] "expr temp" "maybe param" "maybe type" "temp"
      (808231 'move' call_tmp[808228](135430 call == kind[135384] dummy[135244]))
      unknown call_tmp[808233] "expr temp" "maybe param" "maybe type" "temp"
      (808236 'move' call_tmp[808233](135437 call _cond_test call_tmp[808228]))
      if call_tmp[808233]
      {
        unknown call_tmp[808238] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (808241 'move' call_tmp[808238](1000122 'new' DummyLocale[430798](?)(_chpl_manager = unmanaged[183](?))))
        unknown _instance[525285] "temp"
        (525288 'init var' _instance[525285] call_tmp[808238] unmanaged BaseLocale?[468079])
        (525290 'init field' this[135382] c"_instance" _instance[525285])
        (553958 'end of statement')
      }
      {
        unknown call_tmp[808243] "expr temp" "maybe param" "maybe type" "temp"
        (808246 'move' call_tmp[808243](135418 call == kind[135384] default[135246]))
        unknown call_tmp[808248] "expr temp" "maybe param" "maybe type" "temp"
        (808251 'move' call_tmp[808248](135425 call _cond_test call_tmp[808243]))
        if call_tmp[808248]
        {
          unknown _instance[525294] "temp"
          (525297 'init var' _instance[525294] nil[32] unmanaged BaseLocale?[468079])
          (525299 'init field' this[135382] c"_instance" _instance[525294])
          (553959 'end of statement')
        }
        {
          val _instance[525305]:unmanaged BaseLocale?[468079] "temp"
          (525308 'default init var' _instance[525305] unmanaged BaseLocale?[468079])
          (525310 '.=' this[135382] c"_instance" _instance[525305])
          (553960 'end of statement')
        }
      }
    }
    (608022 return _void[46])
  }
  function locale[234].init=[135460](arg _mt[135468]:_MT[201], ref arg this[135462]:locale[234], arg other[135465]:locale[234]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[808255] "maybe param" "maybe type" "temp"
    (808258 'move' call_tmp[808255](135478 call _instance _mt[203] other[135465]))
    unknown _instance[525324] "temp"
    (525327 'init var' _instance[525324] call_tmp[808255] unmanaged BaseLocale?[468079])
    (525329 'init field' this[135462] c"_instance" _instance[525324])
    (553961 'end of statement')
    (608024 return _void[46])
  }
  function locale[234].deinit[135483](arg _mt[135487]:_MT[201], arg this[135485]:locale[234]) : _unknown[42] "destructor" "method" "primary method" "no return value for void"
  {
    (608026 return _void[46])
  }
  function locale[234].localeid[135492](arg _mt[135496]:_MT[201], arg this[135494]:locale[234]) : _unknown[42] "inline" "method" "primary method" "no parens"
  {
    unknown ret[608030] "RVV" "temp"
    unknown call_tmp[808262] "expr temp" "maybe param" "maybe type" "temp"
    (808265 'move' call_tmp[808262](135501 call _value _mt[203] this[135494]))
    unknown call_tmp[808269] "expr temp" "maybe param" "maybe type" "temp"
    (808272 'move' call_tmp[808269](135506 call localeid _mt[203] call_tmp[808262]))
    (608035 'move' ret[608030](608034 'deref' call_tmp[808269]))
    (608032 return ret[608030])
  }
  function locale[234].chpl_id[135511](arg _mt[135515]:_MT[201], arg this[135513]:locale[234]) : _unknown[42] "inline" "method" "primary method"
  {
    unknown ret[608039] "RVV" "temp"
    unknown call_tmp[808276] "expr temp" "maybe param" "maybe type" "temp"
    (808279 'move' call_tmp[808276](135520 call _value _mt[203] this[135513]))
    unknown call_tmp[808283] "expr temp" "maybe param" "maybe type" "temp"
    (808286 'move' call_tmp[808283](135528 call(135525 call (partial) chpl_id _mt[203] call_tmp[808276])))
    (608044 'move' ret[608039](608043 'deref' call_tmp[808283]))
    (608041 return ret[608039])
  }
  function locale[234].chpl_localeid[135531](arg _mt[135535]:_MT[201], arg this[135533]:locale[234]) : _unknown[42] "inline" "method" "primary method"
  {
    unknown ret[608048] "RVV" "temp"
    unknown call_tmp[808290] "expr temp" "maybe param" "maybe type" "temp"
    (808293 'move' call_tmp[808290](135540 call _value _mt[203] this[135533]))
    unknown call_tmp[808297] "expr temp" "maybe param" "maybe type" "temp"
    (808300 'move' call_tmp[808297](135548 call(135545 call (partial) chpl_localeid _mt[203] call_tmp[808290])))
    (608053 'move' ret[608048](608052 'deref' call_tmp[808297]))
    (608050 return ret[608048])
  }
  function locale[234].chpl_name[135551](arg _mt[135555]:_MT[201], arg this[135553]:locale[234]) : _unknown[42] "inline" "method" "primary method"
  {
    unknown ret[608057] "RVV" "temp"
    unknown call_tmp[808304] "expr temp" "maybe param" "maybe type" "temp"
    (808307 'move' call_tmp[808304](135560 call _value _mt[203] this[135553]))
    unknown call_tmp[808311] "expr temp" "maybe param" "maybe type" "temp"
    (808314 'move' call_tmp[808311](135568 call(135565 call (partial) chpl_name _mt[203] call_tmp[808304])))
    (608062 'move' ret[608057](608061 'deref' call_tmp[808311]))
    (608059 return ret[608057])
  }
  function locale[234]._getChildCount[135571](arg _mt[135575]:_MT[201], arg this[135573]:locale[234]) : _unknown[42] "inline" "method" "primary method"
  {
    unknown ret[608066] "RVV" "temp"
    unknown call_tmp[808318] "expr temp" "maybe param" "maybe type" "temp"
    (808321 'move' call_tmp[808318](135580 call _value _mt[203] this[135573]))
    unknown call_tmp[808325] "expr temp" "maybe param" "maybe type" "temp"
    (808328 'move' call_tmp[808325](135586 call(135583 call (partial) _getChildCount _mt[203] call_tmp[808318])))
    (608071 'move' ret[608066](608070 'deref' call_tmp[808325]))
    (608068 return ret[608066])
  }
  function locale[234]._instance[1003250](arg _mt[1003252]:_MT[201], ref arg this[1003254]:locale[234]) ref : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[1003264] "RVV" "temp"
    unknown call_tmp[1003271] "expr temp" "maybe param" "maybe type" "temp"
    (1003274 'move' call_tmp[1003271](1003258 '.' this[1003254] c"_instance"))
    (1003269 'move' ret[1003264](1003268 'addr of' call_tmp[1003271]))
    (1003266 return ret[1003264])
  }
  function locale[234].deserialize[1003276](arg _mt[1003280]:_MT[201], ref arg this[1003278]:locale[234], arg reader[1003279]:_any[141](?), ref arg deserializer[1003285]:_any[141](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (1003289 call compilerError "'deserialize' methods are not compiler-generated when a type has a user-defined 'serialize' method.")
    (1003293 return _void[46])
  }
  function chpl_fields_are_comparable[1003313](arg _arg1[1003315]:locale[234], arg _arg2[1003316]:locale[234]) param : bool[19] "compiler generated" "last resort" "param"
  {
    val ret[1003334]:bool[19] "RVV" "param" "temp"
    unknown call_tmp[1003341] "expr temp" "maybe param" "maybe type" "temp"
    (1003344 'move' call_tmp[1003341](1003319 call _instance _mt[203] _arg1[1003315]))
    unknown call_tmp[1003346] "expr temp" "maybe param" "maybe type" "temp"
    (1003349 'move' call_tmp[1003346](1003323 call _instance _mt[203] _arg2[1003316]))
    unknown call_tmp[1003351] "expr temp" "maybe param" "maybe type" "temp"
    (1003354 'move' call_tmp[1003351](1003327 'call resolves' c"==" call_tmp[1003341] call_tmp[1003346]))
    (1003339 'move' ret[1003334](1003338 'deref' call_tmp[1003351]))
    (1003336 return ret[1003334])
  }
  function locale[234].==[1003295](arg _mt[1003297]:_MT[201], arg this[1003299]:locale[234], arg _arg1[1003301]:locale[234], arg _arg2[1003302]:locale[234]) : bool[19] "compiler generated" "last resort" "method" "operator"
  {
    val ret[1003383]:bool[19] "RVV" "temp"
    unknown call_tmp[1003395] "expr temp" "maybe param" "maybe type" "temp"
    (1003398 'move' call_tmp[1003395](1003362 call _instance _mt[203] _arg1[1003301]))
    unknown call_tmp[1003400] "expr temp" "maybe param" "maybe type" "temp"
    (1003403 'move' call_tmp[1003400](1003366 call _instance _mt[203] _arg2[1003302]))
    unknown call_tmp[1003405] "expr temp" "maybe param" "maybe type" "temp"
    (1003408 'move' call_tmp[1003405](1003370 call chpl_field_neq call_tmp[1003395] call_tmp[1003400]))
    if call_tmp[1003405]
    {
      (1003388 'move' ret[1003383](1003387 'deref' 0))
      gotoReturn _end_==[1003381] _end_==[1003381]
    }
    (1003393 'move' ret[1003383](1003392 'deref' 1))
    label _end_==[1003381]
    (1003385 return ret[1003383])
  }
  where {
    unknown call_tmp[1003410] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1003413 'move' call_tmp[1003410](1003305 'typeof' _arg1[1003301]))
    unknown call_tmp[1003415] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1003418 'move' call_tmp[1003415](1003307 'typeof' _arg2[1003302]))
    unknown call_tmp[1003420] "expr temp" "maybe param" "maybe type" "temp"
    (1003423 'move' call_tmp[1003420](1003309 call == call_tmp[1003410] call_tmp[1003415]))
    unknown call_tmp[1003425] "expr temp" "maybe param" "maybe type" "temp"
    (1003428 'move' call_tmp[1003425](1003356 call chpl_fields_are_comparable[1003313] _arg1[1003301] _arg2[1003302]))
    (1003360 '&' call_tmp[1003420] call_tmp[1003425])
  }
  function chpl_fields_are_comparable[1003448](arg _arg1[1003450]:locale[234], arg _arg2[1003451]:locale[234]) param : bool[19] "compiler generated" "last resort" "param"
  {
    val ret[1003469]:bool[19] "RVV" "param" "temp"
    unknown call_tmp[1003476] "expr temp" "maybe param" "maybe type" "temp"
    (1003479 'move' call_tmp[1003476](1003454 call _instance _mt[203] _arg1[1003450]))
    unknown call_tmp[1003481] "expr temp" "maybe param" "maybe type" "temp"
    (1003484 'move' call_tmp[1003481](1003458 call _instance _mt[203] _arg2[1003451]))
    unknown call_tmp[1003486] "expr temp" "maybe param" "maybe type" "temp"
    (1003489 'move' call_tmp[1003486](1003462 'call resolves' c"!=" call_tmp[1003476] call_tmp[1003481]))
    (1003474 'move' ret[1003469](1003473 'deref' call_tmp[1003486]))
    (1003471 return ret[1003469])
  }
  function locale[234].!=[1003430](arg _mt[1003432]:_MT[201], arg this[1003434]:locale[234], arg _arg1[1003436]:locale[234], arg _arg2[1003437]:locale[234]) : bool[19] "compiler generated" "last resort" "method" "operator"
  {
    val ret[1003518]:bool[19] "RVV" "temp"
    unknown call_tmp[1003530] "expr temp" "maybe param" "maybe type" "temp"
    (1003533 'move' call_tmp[1003530](1003497 call _instance _mt[203] _arg1[1003436]))
    unknown call_tmp[1003535] "expr temp" "maybe param" "maybe type" "temp"
    (1003538 'move' call_tmp[1003535](1003501 call _instance _mt[203] _arg2[1003437]))
    unknown call_tmp[1003540] "expr temp" "maybe param" "maybe type" "temp"
    (1003543 'move' call_tmp[1003540](1003505 call chpl_field_neq call_tmp[1003530] call_tmp[1003535]))
    if call_tmp[1003540]
    {
      (1003523 'move' ret[1003518](1003522 'deref' 1))
      gotoReturn _end_!=[1003516] _end_!=[1003516]
    }
    (1003528 'move' ret[1003518](1003527 'deref' 0))
    label _end_!=[1003516]
    (1003520 return ret[1003518])
  }
  where {
    unknown call_tmp[1003545] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1003548 'move' call_tmp[1003545](1003440 'typeof' _arg1[1003436]))
    unknown call_tmp[1003550] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1003553 'move' call_tmp[1003550](1003442 'typeof' _arg2[1003437]))
    unknown call_tmp[1003555] "expr temp" "maybe param" "maybe type" "temp"
    (1003558 'move' call_tmp[1003555](1003444 call == call_tmp[1003545] call_tmp[1003550]))
    unknown call_tmp[1003560] "expr temp" "maybe param" "maybe type" "temp"
    (1003563 'move' call_tmp[1003560](1003491 call chpl_fields_are_comparable[1003448] _arg1[1003436] _arg2[1003437]))
    (1003495 '&' call_tmp[1003555] call_tmp[1003560])
  }
  function chpl_fields_are_comparable[1003583](arg _arg1[1003585]:locale[234], arg _arg2[1003586]:locale[234]) param : bool[19] "compiler generated" "last resort" "param"
  {
    val ret[1003604]:bool[19] "RVV" "param" "temp"
    unknown call_tmp[1003611] "expr temp" "maybe param" "maybe type" "temp"
    (1003614 'move' call_tmp[1003611](1003589 call _instance _mt[203] _arg1[1003585]))
    unknown call_tmp[1003616] "expr temp" "maybe param" "maybe type" "temp"
    (1003619 'move' call_tmp[1003616](1003593 call _instance _mt[203] _arg2[1003586]))
    unknown call_tmp[1003621] "expr temp" "maybe param" "maybe type" "temp"
    (1003624 'move' call_tmp[1003621](1003597 'call resolves' c"<" call_tmp[1003611] call_tmp[1003616]))
    (1003609 'move' ret[1003604](1003608 'deref' call_tmp[1003621]))
    (1003606 return ret[1003604])
  }
  function locale[234].<[1003565](arg _mt[1003567]:_MT[201], arg this[1003569]:locale[234], arg _arg1[1003571]:locale[234], arg _arg2[1003572]:locale[234]) : bool[19] "compiler generated" "last resort" "method" "operator"
  {
    val ret[1003668]:bool[19] "RVV" "temp"
    unknown call_tmp[1003685] "expr temp" "maybe param" "maybe type" "temp"
    (1003688 'move' call_tmp[1003685](1003632 call _instance _mt[203] _arg1[1003571]))
    unknown call_tmp[1003690] "expr temp" "maybe param" "maybe type" "temp"
    (1003693 'move' call_tmp[1003690](1003636 call _instance _mt[203] _arg2[1003572]))
    unknown call_tmp[1003695] "expr temp" "maybe param" "maybe type" "temp"
    (1003698 'move' call_tmp[1003695](1003640 call chpl_field_lt call_tmp[1003685] call_tmp[1003690]))
    if call_tmp[1003695]
    {
      (1003673 'move' ret[1003668](1003672 'deref' 1))
      gotoReturn _end_<[1003666] _end_<[1003666]
    }
    unknown call_tmp[1003700] "expr temp" "maybe param" "maybe type" "temp"
    (1003703 'move' call_tmp[1003700](1003646 call _instance _mt[203] _arg1[1003571]))
    unknown call_tmp[1003705] "expr temp" "maybe param" "maybe type" "temp"
    (1003708 'move' call_tmp[1003705](1003650 call _instance _mt[203] _arg2[1003572]))
    unknown call_tmp[1003710] "expr temp" "maybe param" "maybe type" "temp"
    (1003713 'move' call_tmp[1003710](1003654 call chpl_field_gt call_tmp[1003700] call_tmp[1003705]))
    if call_tmp[1003710]
    {
      (1003678 'move' ret[1003668](1003677 'deref' 0))
      gotoReturn _end_<[1003666] _end_<[1003666]
    }
    (1003683 'move' ret[1003668](1003682 'deref' 0))
    label _end_<[1003666]
    (1003670 return ret[1003668])
  }
  where {
    unknown call_tmp[1003715] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1003718 'move' call_tmp[1003715](1003575 'typeof' _arg1[1003571]))
    unknown call_tmp[1003720] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1003723 'move' call_tmp[1003720](1003577 'typeof' _arg2[1003572]))
    unknown call_tmp[1003725] "expr temp" "maybe param" "maybe type" "temp"
    (1003728 'move' call_tmp[1003725](1003579 call == call_tmp[1003715] call_tmp[1003720]))
    unknown call_tmp[1003730] "expr temp" "maybe param" "maybe type" "temp"
    (1003733 'move' call_tmp[1003730](1003626 call chpl_fields_are_comparable[1003583] _arg1[1003571] _arg2[1003572]))
    (1003630 '&' call_tmp[1003725] call_tmp[1003730])
  }
  function chpl_fields_are_comparable[1003753](arg _arg1[1003755]:locale[234], arg _arg2[1003756]:locale[234]) param : bool[19] "compiler generated" "last resort" "param"
  {
    val ret[1003774]:bool[19] "RVV" "param" "temp"
    unknown call_tmp[1003781] "expr temp" "maybe param" "maybe type" "temp"
    (1003784 'move' call_tmp[1003781](1003759 call _instance _mt[203] _arg1[1003755]))
    unknown call_tmp[1003786] "expr temp" "maybe param" "maybe type" "temp"
    (1003789 'move' call_tmp[1003786](1003763 call _instance _mt[203] _arg2[1003756]))
    unknown call_tmp[1003791] "expr temp" "maybe param" "maybe type" "temp"
    (1003794 'move' call_tmp[1003791](1003767 'call resolves' c"<=" call_tmp[1003781] call_tmp[1003786]))
    (1003779 'move' ret[1003774](1003778 'deref' call_tmp[1003791]))
    (1003776 return ret[1003774])
  }
  function locale[234].<=[1003735](arg _mt[1003737]:_MT[201], arg this[1003739]:locale[234], arg _arg1[1003741]:locale[234], arg _arg2[1003742]:locale[234]) : bool[19] "compiler generated" "last resort" "method" "operator"
  {
    val ret[1003838]:bool[19] "RVV" "temp"
    unknown call_tmp[1003855] "expr temp" "maybe param" "maybe type" "temp"
    (1003858 'move' call_tmp[1003855](1003802 call _instance _mt[203] _arg1[1003741]))
    unknown call_tmp[1003860] "expr temp" "maybe param" "maybe type" "temp"
    (1003863 'move' call_tmp[1003860](1003806 call _instance _mt[203] _arg2[1003742]))
    unknown call_tmp[1003865] "expr temp" "maybe param" "maybe type" "temp"
    (1003868 'move' call_tmp[1003865](1003810 call chpl_field_lt call_tmp[1003855] call_tmp[1003860]))
    if call_tmp[1003865]
    {
      (1003843 'move' ret[1003838](1003842 'deref' 1))
      gotoReturn _end_<=[1003836] _end_<=[1003836]
    }
    unknown call_tmp[1003870] "expr temp" "maybe param" "maybe type" "temp"
    (1003873 'move' call_tmp[1003870](1003816 call _instance _mt[203] _arg1[1003741]))
    unknown call_tmp[1003875] "expr temp" "maybe param" "maybe type" "temp"
    (1003878 'move' call_tmp[1003875](1003820 call _instance _mt[203] _arg2[1003742]))
    unknown call_tmp[1003880] "expr temp" "maybe param" "maybe type" "temp"
    (1003883 'move' call_tmp[1003880](1003824 call chpl_field_gt call_tmp[1003870] call_tmp[1003875]))
    if call_tmp[1003880]
    {
      (1003848 'move' ret[1003838](1003847 'deref' 0))
      gotoReturn _end_<=[1003836] _end_<=[1003836]
    }
    (1003853 'move' ret[1003838](1003852 'deref' 1))
    label _end_<=[1003836]
    (1003840 return ret[1003838])
  }
  where {
    unknown call_tmp[1003885] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1003888 'move' call_tmp[1003885](1003745 'typeof' _arg1[1003741]))
    unknown call_tmp[1003890] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1003893 'move' call_tmp[1003890](1003747 'typeof' _arg2[1003742]))
    unknown call_tmp[1003895] "expr temp" "maybe param" "maybe type" "temp"
    (1003898 'move' call_tmp[1003895](1003749 call == call_tmp[1003885] call_tmp[1003890]))
    unknown call_tmp[1003900] "expr temp" "maybe param" "maybe type" "temp"
    (1003903 'move' call_tmp[1003900](1003796 call chpl_fields_are_comparable[1003753] _arg1[1003741] _arg2[1003742]))
    (1003800 '&' call_tmp[1003895] call_tmp[1003900])
  }
  function chpl_fields_are_comparable[1003923](arg _arg1[1003925]:locale[234], arg _arg2[1003926]:locale[234]) param : bool[19] "compiler generated" "last resort" "param"
  {
    val ret[1003944]:bool[19] "RVV" "param" "temp"
    unknown call_tmp[1003951] "expr temp" "maybe param" "maybe type" "temp"
    (1003954 'move' call_tmp[1003951](1003929 call _instance _mt[203] _arg1[1003925]))
    unknown call_tmp[1003956] "expr temp" "maybe param" "maybe type" "temp"
    (1003959 'move' call_tmp[1003956](1003933 call _instance _mt[203] _arg2[1003926]))
    unknown call_tmp[1003961] "expr temp" "maybe param" "maybe type" "temp"
    (1003964 'move' call_tmp[1003961](1003937 'call resolves' c">" call_tmp[1003951] call_tmp[1003956]))
    (1003949 'move' ret[1003944](1003948 'deref' call_tmp[1003961]))
    (1003946 return ret[1003944])
  }
  function locale[234].>[1003905](arg _mt[1003907]:_MT[201], arg this[1003909]:locale[234], arg _arg1[1003911]:locale[234], arg _arg2[1003912]:locale[234]) : bool[19] "compiler generated" "last resort" "method" "operator"
  {
    val ret[1004008]:bool[19] "RVV" "temp"
    unknown call_tmp[1004025] "expr temp" "maybe param" "maybe type" "temp"
    (1004028 'move' call_tmp[1004025](1003972 call _instance _mt[203] _arg1[1003911]))
    unknown call_tmp[1004030] "expr temp" "maybe param" "maybe type" "temp"
    (1004033 'move' call_tmp[1004030](1003976 call _instance _mt[203] _arg2[1003912]))
    unknown call_tmp[1004035] "expr temp" "maybe param" "maybe type" "temp"
    (1004038 'move' call_tmp[1004035](1003980 call chpl_field_gt call_tmp[1004025] call_tmp[1004030]))
    if call_tmp[1004035]
    {
      (1004013 'move' ret[1004008](1004012 'deref' 1))
      gotoReturn _end_>[1004006] _end_>[1004006]
    }
    unknown call_tmp[1004040] "expr temp" "maybe param" "maybe type" "temp"
    (1004043 'move' call_tmp[1004040](1003986 call _instance _mt[203] _arg1[1003911]))
    unknown call_tmp[1004045] "expr temp" "maybe param" "maybe type" "temp"
    (1004048 'move' call_tmp[1004045](1003990 call _instance _mt[203] _arg2[1003912]))
    unknown call_tmp[1004050] "expr temp" "maybe param" "maybe type" "temp"
    (1004053 'move' call_tmp[1004050](1003994 call chpl_field_lt call_tmp[1004040] call_tmp[1004045]))
    if call_tmp[1004050]
    {
      (1004018 'move' ret[1004008](1004017 'deref' 0))
      gotoReturn _end_>[1004006] _end_>[1004006]
    }
    (1004023 'move' ret[1004008](1004022 'deref' 0))
    label _end_>[1004006]
    (1004010 return ret[1004008])
  }
  where {
    unknown call_tmp[1004055] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1004058 'move' call_tmp[1004055](1003915 'typeof' _arg1[1003911]))
    unknown call_tmp[1004060] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1004063 'move' call_tmp[1004060](1003917 'typeof' _arg2[1003912]))
    unknown call_tmp[1004065] "expr temp" "maybe param" "maybe type" "temp"
    (1004068 'move' call_tmp[1004065](1003919 call == call_tmp[1004055] call_tmp[1004060]))
    unknown call_tmp[1004070] "expr temp" "maybe param" "maybe type" "temp"
    (1004073 'move' call_tmp[1004070](1003966 call chpl_fields_are_comparable[1003923] _arg1[1003911] _arg2[1003912]))
    (1003970 '&' call_tmp[1004065] call_tmp[1004070])
  }
  function chpl_fields_are_comparable[1004093](arg _arg1[1004095]:locale[234], arg _arg2[1004096]:locale[234]) param : bool[19] "compiler generated" "last resort" "param"
  {
    val ret[1004114]:bool[19] "RVV" "param" "temp"
    unknown call_tmp[1004121] "expr temp" "maybe param" "maybe type" "temp"
    (1004124 'move' call_tmp[1004121](1004099 call _instance _mt[203] _arg1[1004095]))
    unknown call_tmp[1004126] "expr temp" "maybe param" "maybe type" "temp"
    (1004129 'move' call_tmp[1004126](1004103 call _instance _mt[203] _arg2[1004096]))
    unknown call_tmp[1004131] "expr temp" "maybe param" "maybe type" "temp"
    (1004134 'move' call_tmp[1004131](1004107 'call resolves' c">=" call_tmp[1004121] call_tmp[1004126]))
    (1004119 'move' ret[1004114](1004118 'deref' call_tmp[1004131]))
    (1004116 return ret[1004114])
  }
  function locale[234].>=[1004075](arg _mt[1004077]:_MT[201], arg this[1004079]:locale[234], arg _arg1[1004081]:locale[234], arg _arg2[1004082]:locale[234]) : bool[19] "compiler generated" "last resort" "method" "operator"
  {
    val ret[1004178]:bool[19] "RVV" "temp"
    unknown call_tmp[1004195] "expr temp" "maybe param" "maybe type" "temp"
    (1004198 'move' call_tmp[1004195](1004142 call _instance _mt[203] _arg1[1004081]))
    unknown call_tmp[1004200] "expr temp" "maybe param" "maybe type" "temp"
    (1004203 'move' call_tmp[1004200](1004146 call _instance _mt[203] _arg2[1004082]))
    unknown call_tmp[1004205] "expr temp" "maybe param" "maybe type" "temp"
    (1004208 'move' call_tmp[1004205](1004150 call chpl_field_gt call_tmp[1004195] call_tmp[1004200]))
    if call_tmp[1004205]
    {
      (1004183 'move' ret[1004178](1004182 'deref' 1))
      gotoReturn _end_>=[1004176] _end_>=[1004176]
    }
    unknown call_tmp[1004210] "expr temp" "maybe param" "maybe type" "temp"
    (1004213 'move' call_tmp[1004210](1004156 call _instance _mt[203] _arg1[1004081]))
    unknown call_tmp[1004215] "expr temp" "maybe param" "maybe type" "temp"
    (1004218 'move' call_tmp[1004215](1004160 call _instance _mt[203] _arg2[1004082]))
    unknown call_tmp[1004220] "expr temp" "maybe param" "maybe type" "temp"
    (1004223 'move' call_tmp[1004220](1004164 call chpl_field_lt call_tmp[1004210] call_tmp[1004215]))
    if call_tmp[1004220]
    {
      (1004188 'move' ret[1004178](1004187 'deref' 0))
      gotoReturn _end_>=[1004176] _end_>=[1004176]
    }
    (1004193 'move' ret[1004178](1004192 'deref' 1))
    label _end_>=[1004176]
    (1004180 return ret[1004178])
  }
  where {
    unknown call_tmp[1004225] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1004228 'move' call_tmp[1004225](1004085 'typeof' _arg1[1004081]))
    unknown call_tmp[1004230] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1004233 'move' call_tmp[1004230](1004087 'typeof' _arg2[1004082]))
    unknown call_tmp[1004235] "expr temp" "maybe param" "maybe type" "temp"
    (1004238 'move' call_tmp[1004235](1004089 call == call_tmp[1004225] call_tmp[1004230]))
    unknown call_tmp[1004240] "expr temp" "maybe param" "maybe type" "temp"
    (1004243 'move' call_tmp[1004240](1004136 call chpl_fields_are_comparable[1004093] _arg1[1004081] _arg2[1004082]))
    (1004140 '&' call_tmp[1004235] call_tmp[1004240])
  }
  type locale[234] val _instance[135293]:unmanaged BaseLocale?[468079] unmanaged BaseLocale?[468079] forwarding ( )
  function here[135591]() : _unknown[42] "inline" "no parens"
  {
    unknown ret[608075] "RVV" "temp"
    unknown call_tmp[808330] "expr temp" "maybe param" "maybe type" "temp"
    (808333 'move' call_tmp[808330](430804 call here_id[137226]))
    unknown call_tmp[808335] "expr temp" "maybe param" "maybe type" "temp"
    (808338 'move' call_tmp[808335](135596 call chpl_localeID_to_locale call_tmp[808330]))
    (608080 'move' ret[608075](608079 'deref' call_tmp[808335]))
    (608077 return ret[608075])
  }
  function locale[234].hostname[135600](arg _mt[135606]:_MT[201], arg this[135603]:locale[234] :
  locale[234]) : _unknown[42] "inline" "method" "no parens"
  {
    unknown ret[608084] "RVV" "temp"
    unknown call_tmp[808342] "expr temp" "maybe param" "maybe type" "temp"
    (808345 'move' call_tmp[808342](135612 call _value _mt[203] this[135603]))
    unknown call_tmp[808349] "expr temp" "maybe param" "maybe type" "temp"
    (808352 'move' call_tmp[808349](135617 call hostname _mt[203] call_tmp[808342]))
    (608090 'move' ret[608084](608089 'coerce' call_tmp[808349] string[244]))
    (608086 return ret[608084])
  }
  { scopeless type
    string[244]
  }
  function locale[234].name[135623](arg _mt[135629]:_MT[201], arg this[135626]:locale[234] :
  locale[234]) : _unknown[42] "inline" "method" "no parens"
  {
    unknown ret[608094] "RVV" "temp"
    unknown call_tmp[808356] "expr temp" "maybe param" "maybe type" "temp"
    (808359 'move' call_tmp[808356](135635 call _value _mt[203] this[135626]))
    unknown call_tmp[808363] "expr temp" "maybe param" "maybe type" "temp"
    (808366 'move' call_tmp[808363](135640 call name _mt[203] call_tmp[808356]))
    (608100 'move' ret[608094](608099 'coerce' call_tmp[808363] string[244]))
    (608096 return ret[608094])
  }
  { scopeless type
    string[244]
  }
  function locale[234].id[135646](arg _mt[135652]:_MT[201], arg this[135649]:locale[234] :
  locale[234]) : _unknown[42] "inline" "method" "no parens"
  {
    unknown ret[608104] "RVV" "temp"
    unknown call_tmp[808370] "expr temp" "maybe param" "maybe type" "temp"
    (808373 'move' call_tmp[808370](135658 call _value _mt[203] this[135649]))
    unknown call_tmp[808377] "expr temp" "maybe param" "maybe type" "temp"
    (808380 'move' call_tmp[808377](135661 call id _mt[203] call_tmp[808370]))
    (608110 'move' ret[608104](608109 'coerce' call_tmp[808377] int(64)[10]))
    (608106 return ret[608104])
  }
  { scopeless type
    int(64)[10]
  }
  function locale[234].maxTaskPar[135667](arg _mt[135673]:_MT[201], arg this[135670]:locale[234] :
  locale[234]) : _unknown[42] "inline" "method" "no parens"
  {
    unknown ret[608114] "RVV" "temp"
    unknown call_tmp[808384] "expr temp" "maybe param" "maybe type" "temp"
    (808387 'move' call_tmp[808384](135679 call _value _mt[203] this[135670]))
    unknown call_tmp[808391] "expr temp" "maybe param" "maybe type" "temp"
    (808394 'move' call_tmp[808391](135682 call maxTaskPar _mt[203] call_tmp[808384]))
    (608120 'move' ret[608114](608119 'coerce' call_tmp[808391] int(64)[10]))
    (608116 return ret[608114])
  }
  { scopeless type
    int(64)[10]
  }
  function locale[234].numPUs[135688](arg _mt[135706]:_MT[201], arg this[135691]:locale[234] :
  locale[234], arg logical[135696]:bool[19] =
  0, arg accessible[135702]:bool[19] =
  1) : _unknown[42] "inline" "method" "@unstable"
  {
    unknown ret[608124] "RVV" "temp"
    unknown call_tmp[808398] "expr temp" "maybe param" "maybe type" "temp"
    (808401 'move' call_tmp[808398](135712 call _value _mt[203] this[135691]))
    unknown call_tmp[808405] "expr temp" "maybe param" "maybe type" "temp"
    (808408 'move' call_tmp[808405](135720 call(135717 call (partial) numPUs _mt[203] call_tmp[808398]) logical[135696] accessible[135702]))
    (608130 'move' ret[608124](608129 'coerce' call_tmp[808405] int(64)[10]))
    (608126 return ret[608124])
  }
  { scopeless type
    int(64)[10]
  }
  function locale[234].runningTasks[135726](arg _mt[135732]:_MT[201], arg this[135729]:locale[234] :
  locale[234]) : _unknown[42] "method" "fn synchronization free"
  {
    unknown ret[608134] "RVV" "temp"
    unknown call_tmp[808412] "expr temp" "maybe param" "maybe type" "temp"
    (808415 'move' call_tmp[808412](135743 call(135740 call (partial) runningTaskCnt _mt[203] this[135729])))
    (608140 'move' ret[608134](608139 'coerce' call_tmp[808412] int(64)[10]))
    (608136 return ret[608134])
  }
  { scopeless type
    int(64)[10]
  }
  function locale[234].=[135747](arg _mt[135761]:_MT[201], arg this[135750]:locale[234] :
  locale[234], ref arg l1[135754]:locale[234], const  ref arg l2[135758]:locale[234]) : _unknown[42] "assignop" "method" "operator" "no return value for void"
  {
    unknown call_tmp[808419] "expr temp" "maybe param" "maybe type" "temp"
    (808422 'move' call_tmp[808419](135767 call _instance _mt[203] l1[135754]))
    unknown call_tmp[808426] "expr temp" "maybe param" "maybe type" "temp"
    (808429 'move' call_tmp[808426](135771 call _instance _mt[203] l2[135758]))
    (135764 call = call_tmp[808419] call_tmp[808426])
    (608142 return _void[46])
  }
  function BaseLocale[136243].init[135778](arg _mt[135782]:_MT[201], arg this[135780]:BaseLocale[136243]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[525420] "temporary of super field" "temp"
    (525428 'move' super_tmp[525420](525421 '.v' this[135780] c"super"))
    (525424 call init _mt[203] super_tmp[525420])
    (553975 'end of statement')
    unknown tmp[525337] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[577593] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[808431] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (808434 'move' call_tmp[808431](525339 '.v' this[135780] c"super"))
      (577597 'move' call_type_tmp[577593](525342 'typeof' call_tmp[808431]))
    }
    (525343 'move' tmp[525337] call_type_tmp[577593])
    unknown call_tmp[808436] "maybe param" "maybe type" "temp"
    (808439 'move' call_tmp[808436](525348 'cast' tmp[525337] this[135780]))
    unknown chpl__thisAsParent[525345] "dead at end of block" "insert auto destroy" "temp"
    (645919 'init var' chpl__thisAsParent[525345] call_tmp[808436] tmp[525337])
    (525351 'setcid' chpl__thisAsParent[525345])
    (553976 'end of statement')
    unknown parent[525355] "temp"
    (525358 'init var' parent[525355] nilLocale[135253] locale[234])
    (525360 'init field' this[135780] c"parent" parent[525355])
    (553977 'end of statement')
    val nPUsLogAcc[525364]:int(64)[10] "temp"
    (525367 'default init var' nPUsLogAcc[525364] int(64)[10])
    (525369 '.=' this[135780] c"nPUsLogAcc" nPUsLogAcc[525364])
    (553978 'end of statement')
    val nPUsLogAll[525373]:int(64)[10] "temp"
    (525376 'default init var' nPUsLogAll[525373] int(64)[10])
    (525378 '.=' this[135780] c"nPUsLogAll" nPUsLogAll[525373])
    (553979 'end of statement')
    val nPUsPhysAcc[525382]:int(64)[10] "temp"
    (525385 'default init var' nPUsPhysAcc[525382] int(64)[10])
    (525387 '.=' this[135780] c"nPUsPhysAcc" nPUsPhysAcc[525382])
    (553980 'end of statement')
    val nPUsPhysAll[525391]:int(64)[10] "temp"
    (525394 'default init var' nPUsPhysAll[525391] int(64)[10])
    (525396 '.=' this[135780] c"nPUsPhysAll" nPUsPhysAll[525391])
    (553981 'end of statement')
    val maxTaskPar[525400]:int(64)[10] "temp"
    (525403 'default init var' maxTaskPar[525400] int(64)[10])
    (525405 '.=' this[135780] c"maxTaskPar" maxTaskPar[525400])
    (553982 'end of statement')
    unknown runningTaskCounter[525409] "temp"
    unknown call_tmp[808441] "expr temp" "maybe param" "maybe type" "temp"
    (808444 'move' call_tmp[808441](525412 call chpl__processorAtomicType int(64)[10]))
    (525414 'default init var' runningTaskCounter[525409] call_tmp[808441])
    (525416 '.=' this[135780] c"runningTaskCounter" runningTaskCounter[525409])
    (553983 'end of statement')
    (525431 'setcid' this[135780])
    (608144 return _void[46])
  }
  function BaseLocale[136243].init[135787](arg _mt[135795]:_MT[201], arg this[135789]:BaseLocale[136243], arg parent[135792]:locale[234]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[525519] "temporary of super field" "temp"
    (525527 'move' super_tmp[525519](525520 '.v' this[135789] c"super"))
    (525523 call init _mt[203] super_tmp[525519])
    (553985 'end of statement')
    unknown tmp[525437] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[577599] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[808446] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (808449 'move' call_tmp[808446](525439 '.v' this[135789] c"super"))
      (577603 'move' call_type_tmp[577599](525442 'typeof' call_tmp[808446]))
    }
    (525443 'move' tmp[525437] call_type_tmp[577599])
    unknown call_tmp[808451] "maybe param" "maybe type" "temp"
    (808454 'move' call_tmp[808451](525448 'cast' tmp[525437] this[135789]))
    unknown chpl__thisAsParent[525445] "dead at end of block" "insert auto destroy" "temp"
    (645921 'init var' chpl__thisAsParent[525445] call_tmp[808451] tmp[525437])
    (525451 'setcid' chpl__thisAsParent[525445])
    (553986 'end of statement')
    unknown parent[525453] "temp"
    (525456 'init var' parent[525453] parent[135792] locale[234])
    (525458 'init field' this[135789] c"parent" parent[525453])
    (553987 'end of statement')
    val nPUsLogAcc[525463]:int(64)[10] "temp"
    (525466 'default init var' nPUsLogAcc[525463] int(64)[10])
    (525468 '.=' this[135789] c"nPUsLogAcc" nPUsLogAcc[525463])
    (553988 'end of statement')
    val nPUsLogAll[525472]:int(64)[10] "temp"
    (525475 'default init var' nPUsLogAll[525472] int(64)[10])
    (525477 '.=' this[135789] c"nPUsLogAll" nPUsLogAll[525472])
    (553989 'end of statement')
    val nPUsPhysAcc[525481]:int(64)[10] "temp"
    (525484 'default init var' nPUsPhysAcc[525481] int(64)[10])
    (525486 '.=' this[135789] c"nPUsPhysAcc" nPUsPhysAcc[525481])
    (553990 'end of statement')
    val nPUsPhysAll[525490]:int(64)[10] "temp"
    (525493 'default init var' nPUsPhysAll[525490] int(64)[10])
    (525495 '.=' this[135789] c"nPUsPhysAll" nPUsPhysAll[525490])
    (553991 'end of statement')
    val maxTaskPar[525499]:int(64)[10] "temp"
    (525502 'default init var' maxTaskPar[525499] int(64)[10])
    (525504 '.=' this[135789] c"maxTaskPar" maxTaskPar[525499])
    (553992 'end of statement')
    unknown runningTaskCounter[525508] "temp"
    unknown call_tmp[808456] "expr temp" "maybe param" "maybe type" "temp"
    (808459 'move' call_tmp[808456](525511 call chpl__processorAtomicType int(64)[10]))
    (525513 'default init var' runningTaskCounter[525508] call_tmp[808456])
    (525515 '.=' this[135789] c"runningTaskCounter" runningTaskCounter[525508])
    (553993 'end of statement')
    (525530 'setcid' this[135789])
    (608146 return _void[46])
  }
  function BaseLocale[136243].numPUs[135835](arg _mt[135851]:_MT[201], arg this[135837]:BaseLocale[136243], arg logical[135841]:bool[19] =
  0, arg accessible[135847]:bool[19] =
  1) : _unknown[42] "inline" "method" "primary method"
  {
    unknown ret[608150] "RVV" "temp"
    unknown tmp[679886] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[679887] "maybe param" "temp"
    (679892 'move' tmp[679887](679890 call _cond_test logical[135841]))
    if tmp[679887]
    {
      unknown tmp[679824] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[679825] "maybe param" "temp"
      (679830 'move' tmp[679825](679828 call _cond_test accessible[135847]))
      if tmp[679825]
      {
        unknown tmp[679832] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (679834 'move' tmp[679832](430818 call nPUsLogAcc _mt[203] this[135837]))
        (679839 'move' tmp[679824](679836 '_paramFoldLogical' tmp[679825] tmp[679832]))
      }
      {
        unknown tmp[679841] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (679843 'move' tmp[679841](430823 call nPUsLogAll _mt[203] this[135837]))
        (679848 'move' tmp[679824](679845 '_paramFoldLogical' tmp[679825] tmp[679841]))
      }
      (679897 'move' tmp[679886](679894 '_paramFoldLogical' tmp[679887] tmp[679824]))
    }
    {
      unknown tmp[679855] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[679856] "maybe param" "temp"
      (679861 'move' tmp[679856](679859 call _cond_test accessible[135847]))
      if tmp[679856]
      {
        unknown tmp[679863] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (679865 'move' tmp[679863](430829 call nPUsPhysAcc _mt[203] this[135837]))
        (679870 'move' tmp[679855](679867 '_paramFoldLogical' tmp[679856] tmp[679863]))
      }
      {
        unknown tmp[679872] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (679874 'move' tmp[679872](430834 call nPUsPhysAll _mt[203] this[135837]))
        (679879 'move' tmp[679855](679876 '_paramFoldLogical' tmp[679856] tmp[679872]))
      }
      (679902 'move' tmp[679886](679899 '_paramFoldLogical' tmp[679887] tmp[679855]))
    }
    (608155 'move' ret[608150](608154 'deref' tmp[679886]))
    (608152 return ret[608150])
  }
  function BaseLocale[136243].id[135878](arg _mt[135882]:_MT[201], arg this[135880]:BaseLocale[136243]) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[608159] "RVV" "temp"
    unknown call_tmp[808469] "expr temp" "maybe param" "maybe type" "temp"
    (808472 'move' call_tmp[808469](135889 '_wide_get_locale' this[135880]))
    unknown call_tmp[808474] "expr temp" "maybe param" "maybe type" "temp"
    (808477 'move' call_tmp[808474](135888 call chpl_nodeFromLocaleID call_tmp[808469]))
    (608165 'move' ret[608159](608164 'coerce' call_tmp[808474] int(64)[10]))
    (608161 return ret[608159])
  }
  { scopeless type
    int(64)[10]
  }
  function BaseLocale[136243].localeid[135894](arg _mt[135898]:_MT[201], arg this[135896]:BaseLocale[136243]) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[608169] "RVV" "temp"
    unknown call_tmp[808479] "expr temp" "maybe param" "maybe type" "temp"
    (808482 'move' call_tmp[808479](135903 '_wide_get_locale' this[135896]))
    (608175 'move' ret[608169](608174 'coerce' call_tmp[808479] chpl_localeID_t[306449]))
    (608171 return ret[608169])
  }
  { scopeless type
    chpl_localeID_t[306449]
  }
  function BaseLocale[136243].hostname[135908](arg _mt[135912]:_MT[201], arg this[135910]:BaseLocale[136243]) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[608179] "RVV" "temp"
    function chpl_nodeName[135916]() : _unknown[42] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (135919 call c_ptrConst[46990](?) c_char[562])
    }
    unknown hname[135925] "dead at end of block" "insert auto destroy"
    (645923 'default init var' hname[135925] string[244])
    (135928 'end of statement')
    {
      const tmp[135948] "const" "temp"
      unknown call_tmp[808484] "expr temp" "maybe param" "maybe type" "temp"
      (808487 'move' call_tmp[808484](135945 '_wide_get_locale' this[135910]))
      (135949 'move' tmp[135948](135946 'deref' call_tmp[808484]))
      {
        Try!
        {
          {
            unknown call_tmp[808491] "expr temp" "maybe param" "maybe type" "temp"
            (808494 'move' call_tmp[808491](135941 call chpl_nodeName))
            unknown call_tmp[808496] "expr temp" "maybe param" "maybe type" "temp"
            (808499 'move' call_tmp[808496](135939 call(135936 call (partial) createCopyingBuffer _mt[203] string[244]) call_tmp[808491]))
            (135932 call = hname[135925] call_tmp[808496])
            (553998 'end of statement' hname[135925])
          }
        }
      }
      (135952 'elided on block' 0 tmp[135948])
    }
    (608185 'move' ret[608179](608184 'coerce' hname[135925] string[244]))
    gotoReturn _end_hostname[608177] _end_hostname[608177]
    (554000 'end of statement' hname[135925])
    label _end_hostname[608177]
    (608181 return ret[608179])
  }
  { scopeless type
    string[244]
  }
  function BaseLocale[136243].serialize[135961](arg _mt[135969]:_MT[201], arg this[135963]:BaseLocale[136243], arg writer[135965]:_any[141](?), ref arg serializer[135967]:_any[141](?)) : _unknown[42] throws "method" "primary method" "method overrides" "no return value for void"
  {
    (135978 call pureVirtualMethodHalt module=[222] HaltWrappers[518])
    (608189 return _void[46])
    (402441 'referenced modules list' HaltWrappers[518])
  }
  function BaseLocale[136243].name[135981](arg _mt[135985]:_MT[201], arg this[135983]:BaseLocale[136243]) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[608193] "RVV" "temp"
    unknown call_tmp[808503] "expr temp" "maybe param" "maybe type" "temp"
    (808506 'move' call_tmp[808503](135992 call(430846 call (partial) chpl_name _mt[203] this[135983])))
    unknown call_tmp[808508] "expr temp" "maybe param" "maybe type" "temp"
    (808511 'move' call_tmp[808508](135989 call : call_tmp[808503] string[244]))
    (608198 'move' ret[608193](608197 'deref' call_tmp[808508]))
    (608195 return ret[608193])
  }
  function BaseLocale[136243].runningTaskCntSet[136003](arg _mt[136011]:_MT[201], arg this[136005]:BaseLocale[136243], arg val[136008]:int(64)[10]) : _unknown[42] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[808515] "expr temp" "maybe param" "maybe type" "temp"
    (808518 'move' call_tmp[808515](402450 call runningTaskCounter _mt[203] this[136005]))
    (136018 call(136015 call (partial) write _mt[203] call_tmp[808515]) val[136008] relaxed[81224])
    (608200 return _void[46])
  }
  function BaseLocale[136243].runningTaskCntAdd[136026](arg _mt[136034]:_MT[201], arg this[136028]:BaseLocale[136243], arg val[136031]:int(64)[10]) : _unknown[42] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[808524] "expr temp" "maybe param" "maybe type" "temp"
    (808527 'move' call_tmp[808524](402456 call runningTaskCounter _mt[203] this[136028]))
    (136041 call(136038 call (partial) add _mt[203] call_tmp[808524]) val[136031] relaxed[81224])
    (608202 return _void[46])
  }
  function BaseLocale[136243].runningTaskCntSub[136049](arg _mt[136057]:_MT[201], arg this[136051]:BaseLocale[136243], arg val[136054]:int(64)[10]) : _unknown[42] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[808533] "expr temp" "maybe param" "maybe type" "temp"
    (808536 'move' call_tmp[808533](402462 call runningTaskCounter _mt[203] this[136051]))
    (136064 call(136061 call (partial) sub _mt[203] call_tmp[808533]) val[136054] relaxed[81224])
    (608204 return _void[46])
  }
  function BaseLocale[136243].runningTaskCnt[136072](arg _mt[136076]:_MT[201], arg this[136074]:BaseLocale[136243]) : _unknown[42] "inline" "method" "primary method"
  {
    unknown ret[608208] "RVV" "temp"
    unknown call_tmp[808542] "expr temp" "maybe param" "maybe type" "temp"
    (808545 'move' call_tmp[808542](402468 call runningTaskCounter _mt[203] this[136074]))
    unknown call_tmp[808549] "maybe param" "maybe type" "temp"
    (808552 'move' call_tmp[808549](136085 call(136082 call (partial) read _mt[203] call_tmp[808542]) relaxed[81224]))
    unknown rtc[136080] "dead at end of block" "insert auto destroy"
    (645925 'init var' rtc[136080] call_tmp[808549])
    (136091 'end of statement')
    unknown tmp[679909] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[679910] "maybe param" "temp"
    unknown call_tmp[808554] "expr temp" "maybe param" "maybe type" "temp"
    (808557 'move' call_tmp[808554](136093 call <= rtc[136080] 0))
    (679915 'move' tmp[679910](679913 call _cond_test call_tmp[808554]))
    if tmp[679910]
    {
      (679920 'move' tmp[679909](679917 '_paramFoldLogical' tmp[679910] 1))
    }
    {
      (679925 'move' tmp[679909](679922 '_paramFoldLogical' tmp[679910] rtc[136080]))
    }
    (608213 'move' ret[608208](608212 'deref' tmp[679909]))
    gotoReturn _end_runningTaskCnt[608206] _end_runningTaskCnt[608206]
    (554007 'end of statement' rtc[136080])
    label _end_runningTaskCnt[608206]
    (608210 return ret[608208])
  }
  function BaseLocale[136243].chpl_id[136104](arg _mt[136108]:_MT[201], arg this[136106]:BaseLocale[136243]) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown ret[608219] "RVV" "temp"
    (136116 call pureVirtualMethodHalt module=[222] HaltWrappers[518])
    (608221 return ret[608219])
    (402473 'referenced modules list' HaltWrappers[518])
  }
  { scopeless type
    int(64)[10]
  }
  function BaseLocale[136243].chpl_localeid[136120](arg _mt[136124]:_MT[201], arg this[136122]:BaseLocale[136243]) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown ret[608225] "RVV" "temp"
    (136132 call pureVirtualMethodHalt module=[222] HaltWrappers[518])
    (608227 return ret[608225])
    (402479 'referenced modules list' HaltWrappers[518])
  }
  { scopeless type
    chpl_localeID_t[306449]
  }
  function BaseLocale[136243].chpl_name[136136](arg _mt[136140]:_MT[201], arg this[136138]:BaseLocale[136243]) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown ret[608231] "RVV" "temp"
    (136148 call pureVirtualMethodHalt module=[222] HaltWrappers[518])
    (608233 return ret[608231])
    (402485 'referenced modules list' HaltWrappers[518])
  }
  { scopeless type
    string[244]
  }
  function BaseLocale[136243]._getChildCount[136152](arg _mt[136156]:_MT[201], arg this[136154]:BaseLocale[136243]) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown ret[608237] "RVV" "temp"
    (136164 call pureVirtualMethodHalt module=[222] HaltWrappers[518])
    (608239 return ret[608237])
    (402491 'referenced modules list' HaltWrappers[518])
  }
  { scopeless type
    int(64)[10]
  }
  function BaseLocale[136243].addChild[136168](arg _mt[136176]:_MT[201], arg this[136170]:BaseLocale[136243], arg loc[136173]:locale[234]) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (136183 call pureVirtualMethodHalt module=[222] HaltWrappers[518])
    (608241 return _void[46])
    (402497 'referenced modules list' HaltWrappers[518])
  }
  function BaseLocale[136243]._getChild[136186](arg _mt[136194]:_MT[201], arg this[136188]:BaseLocale[136243], arg idx[136191]:int(64)[10]) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown ret[608245] "RVV" "temp"
    (136202 call pureVirtualMethodHalt module=[222] HaltWrappers[518])
    (608247 return ret[608245])
    (402503 'referenced modules list' HaltWrappers[518])
  }
  { scopeless type
    locale[234]
  }
  function BaseLocale[136243].gpus[136206](arg _mt[136210]:_MT[201], arg this[136208]:BaseLocale[136243]) const ref : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[608251] "RVV" "temp"
    unknown call_tmp[808561] "expr temp" "maybe param" "maybe type" "temp"
    (808564 'move' call_tmp[808561](136215 call(430858 call (partial) gpusImpl _mt[203] this[136208])))
    (608256 'move' ret[608251](608255 'addr of' call_tmp[808561]))
    (608253 return ret[608251])
  }
  function BaseLocale[136243].gpusImpl[136218](arg _mt[136222]:_MT[201], arg this[136220]:BaseLocale[136243]) const ref : _unknown[42] "method" "primary method"
  {
    unknown ret[608260] "RVV" "temp"
    (608265 'move' ret[608260](608264 'addr of' chpl_emptyLocales[308774]))
    (608262 return ret[608260])
  }
  function BaseLocale[136243].isGpu[136229](arg _mt[136233]:_MT[201], arg this[136231]:BaseLocale[136243]) : _unknown[42] "method" "primary method"
  {
    unknown ret[608269] "RVV" "temp"
    (608275 'move' ret[608269](608274 'coerce' 0 bool[19]))
    (608271 return ret[608269])
  }
  { scopeless type
    bool[19]
  }
  function BaseLocale[136243].super[1083684](arg _mt[1083686]:_MT[201], arg this[1083688]:BaseLocale[136243]) : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1083698] "RVV" "temp"
    unknown call_tmp[1083705] "expr temp" "maybe param" "maybe type" "temp"
    (1083708 'move' call_tmp[1083705](1083692 '.v' this[1083688] c"super"))
    (1083703 'move' ret[1083698](1083702 'deref' call_tmp[1083705]))
    (1083700 return ret[1083698])
  }
  function BaseLocale[136243].parent[1083710](arg _mt[1083712]:_MT[201], arg this[1083714]:BaseLocale[136243]) const ref : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to a const"
  {
    unknown ret[1083724] "RVV" "temp"
    unknown call_tmp[1083731] "expr temp" "maybe param" "maybe type" "temp"
    (1083734 'move' call_tmp[1083731](1083718 '.' this[1083714] c"parent"))
    (1083729 'move' ret[1083724](1083728 'addr of' call_tmp[1083731]))
    (1083726 return ret[1083724])
  }
  function BaseLocale[136243].nPUsLogAcc[1083736](arg _mt[1083738]:_MT[201], arg this[1083740]:BaseLocale[136243]) ref : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1083750] "RVV" "temp"
    unknown call_tmp[1083757] "expr temp" "maybe param" "maybe type" "temp"
    (1083760 'move' call_tmp[1083757](1083744 '.' this[1083740] c"nPUsLogAcc"))
    (1083755 'move' ret[1083750](1083754 'addr of' call_tmp[1083757]))
    (1083752 return ret[1083750])
  }
  function BaseLocale[136243].nPUsLogAll[1083762](arg _mt[1083764]:_MT[201], arg this[1083766]:BaseLocale[136243]) ref : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1083776] "RVV" "temp"
    unknown call_tmp[1083783] "expr temp" "maybe param" "maybe type" "temp"
    (1083786 'move' call_tmp[1083783](1083770 '.' this[1083766] c"nPUsLogAll"))
    (1083781 'move' ret[1083776](1083780 'addr of' call_tmp[1083783]))
    (1083778 return ret[1083776])
  }
  function BaseLocale[136243].nPUsPhysAcc[1083788](arg _mt[1083790]:_MT[201], arg this[1083792]:BaseLocale[136243]) ref : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1083802] "RVV" "temp"
    unknown call_tmp[1083809] "expr temp" "maybe param" "maybe type" "temp"
    (1083812 'move' call_tmp[1083809](1083796 '.' this[1083792] c"nPUsPhysAcc"))
    (1083807 'move' ret[1083802](1083806 'addr of' call_tmp[1083809]))
    (1083804 return ret[1083802])
  }
  function BaseLocale[136243].nPUsPhysAll[1083814](arg _mt[1083816]:_MT[201], arg this[1083818]:BaseLocale[136243]) ref : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1083828] "RVV" "temp"
    unknown call_tmp[1083835] "expr temp" "maybe param" "maybe type" "temp"
    (1083838 'move' call_tmp[1083835](1083822 '.' this[1083818] c"nPUsPhysAll"))
    (1083833 'move' ret[1083828](1083832 'addr of' call_tmp[1083835]))
    (1083830 return ret[1083828])
  }
  function BaseLocale[136243].maxTaskPar[1083840](arg _mt[1083842]:_MT[201], arg this[1083844]:BaseLocale[136243]) ref : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1083854] "RVV" "temp"
    unknown call_tmp[1083861] "expr temp" "maybe param" "maybe type" "temp"
    (1083864 'move' call_tmp[1083861](1083848 '.' this[1083844] c"maxTaskPar"))
    (1083859 'move' ret[1083854](1083858 'addr of' call_tmp[1083861]))
    (1083856 return ret[1083854])
  }
  function BaseLocale[136243].runningTaskCounter[1083866](arg _mt[1083868]:_MT[201], arg this[1083870]:BaseLocale[136243]) ref : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1083880] "RVV" "temp"
    unknown call_tmp[1083887] "expr temp" "maybe param" "maybe type" "temp"
    (1083890 'move' call_tmp[1083887](1083874 '.' this[1083870] c"runningTaskCounter"))
    (1083885 'move' ret[1083880](1083884 'addr of' call_tmp[1083887]))
    (1083882 return ret[1083880])
  }
  function BaseLocale[136243].deinit[1083892](arg _mt[1083894]:_MT[201], arg this[1083896]:BaseLocale[136243]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (1083904 return _void[46])
  }
  function BaseLocale[136243].deserialize[1083906](arg _mt[1083910]:_MT[201], arg this[1083908]:BaseLocale[136243], arg reader[1083909]:_any[141](?), ref arg deserializer[1083915]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (1083917 call compilerError "'deserialize' methods are not compiler-generated when a type has a user-defined 'serialize' method.")
    (1083921 return _void[46])
  }
  type BaseLocale[136243] val super[397513]:RootClass[236] "super class" const-val parent[135810]:locale[234] "const" nilLocale[135253] locale[234] val nPUsLogAcc[135816]:int(64)[10] int(64)[10] val nPUsLogAll[135821]:int(64)[10] int(64)[10] val nPUsPhysAcc[135826]:int(64)[10] int(64)[10] val nPUsPhysAll[135831]:int(64)[10] int(64)[10] val maxTaskPar[135874]:int(64)[10] int(64)[10] unknown runningTaskCounter[135997](135999 call chpl__processorAtomicType int(64)[10])
  type unmanaged BaseLocale?[468079]
  type BaseLocale?[468076](?)
  type BaseLocale[397505](?)
  function DummyLocale[136365].init[136247](arg _mt[136251]:_MT[201], arg this[136249]:DummyLocale[136365]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[525533] "temporary of super field" "temp"
    (525535 'move' super_tmp[525533](525532 '.v' this[136249] c"super"))
    (136258 call(136255 call (partial) init _mt[203] super_tmp[525533]) nilLocale[135253])
    (554018 'end of statement')
    unknown tmp[525538] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[577605] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[808568] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (808571 'move' call_tmp[808568](525540 '.v' this[136249] c"super"))
      (577609 'move' call_type_tmp[577605](525543 'typeof' call_tmp[808568]))
    }
    (525544 'move' tmp[525538] call_type_tmp[577605])
    unknown call_tmp[808573] "maybe param" "maybe type" "temp"
    (808576 'move' call_tmp[808573](525549 'cast' tmp[525538] this[136249]))
    unknown chpl__thisAsParent[525546] "dead at end of block" "insert auto destroy" "temp"
    (645927 'init var' chpl__thisAsParent[525546] call_tmp[808573] tmp[525538])
    (525552 'setcid' chpl__thisAsParent[525546])
    (554019 'end of statement')
    (525554 'setcid' this[136249])
    (608277 return _void[46])
  }
  function DummyLocale[136365].chpl_id[136262](arg _mt[136266]:_MT[201], arg this[136264]:DummyLocale[136365]) : _unknown[42] "method" "primary method" "method overrides"
  {
    unknown ret[608281] "RVV" "temp"
    unknown call_tmp[808578] "expr temp" "maybe param" "maybe type" "temp"
    (808581 'move' call_tmp[808578](136271 call - 1))
    (608287 'move' ret[608281](608286 'coerce' call_tmp[808578] int(64)[10]))
    (608283 return ret[608281])
  }
  { scopeless type
    int(64)[10]
  }
  function DummyLocale[136365].chpl_localeid[136277](arg _mt[136281]:_MT[201], arg this[136279]:DummyLocale[136365]) : _unknown[42] "method" "primary method" "method overrides"
  {
    unknown ret[608291] "RVV" "temp"
    unknown call_tmp[808583] "expr temp" "maybe param" "maybe type" "temp"
    (808586 'move' call_tmp[808583](136290 call : 1 chpl_nodeID_t[135185]))
    unknown call_tmp[808588] "expr temp" "maybe param" "maybe type" "temp"
    (808591 'move' call_tmp[808588](136288 call - call_tmp[808583]))
    unknown call_tmp[808593] "expr temp" "maybe param" "maybe type" "temp"
    (808596 'move' call_tmp[808593](136287 call chpl_buildLocaleID call_tmp[808588] c_sublocid_none[135197]))
    (608297 'move' ret[608291](608296 'coerce' call_tmp[808593] chpl_localeID_t[306449]))
    (608293 return ret[608291])
  }
  { scopeless type
    chpl_localeID_t[306449]
  }
  function DummyLocale[136365].chpl_name[136298](arg _mt[136302]:_MT[201], arg this[136300]:DummyLocale[136365]) : _unknown[42] "method" "primary method" "method overrides"
  {
    unknown ret[608301] "RVV" "temp"
    (608307 'move' ret[608301](608306 'coerce' "dummy-locale" string[244]))
    (608303 return ret[608301])
  }
  { scopeless type
    string[244]
  }
  function DummyLocale[136365]._getChildCount[136313](arg _mt[136317]:_MT[201], arg this[136315]:DummyLocale[136365]) : _unknown[42] "method" "primary method" "method overrides"
  {
    unknown ret[608311] "RVV" "temp"
    (608317 'move' ret[608311](608316 'coerce' 0 int(64)[10]))
    (608313 return ret[608311])
  }
  { scopeless type
    int(64)[10]
  }
  function DummyLocale[136365]._getChild[136326](arg _mt[136334]:_MT[201], arg this[136328]:DummyLocale[136365], arg idx[136331]:int(64)[10]) : _unknown[42] "method" "primary method" "method overrides"
  {
    unknown ret[608321] "RVV" "temp"
    unknown call_tmp[808598] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (808601 'move' call_tmp[808598](1000123 'new' locale[234] this[136328]))
    (608327 'move' ret[608321](608326 'coerce' call_tmp[808598] locale[234]))
    (608323 return ret[608321])
  }
  { scopeless type
    locale[234]
  }
  function DummyLocale[136365].addChild[136346](arg _mt[136354]:_MT[201], arg this[136348]:DummyLocale[136365], arg loc[136351]:locale[234]) : _unknown[42] "method" "primary method" "method overrides" "no return value for void"
  {
    (136358 call halt "addChild on DummyLocale")
    (608329 return _void[46])
  }
  function DummyLocale[136365].super[1083923](arg _mt[1083925]:_MT[201], arg this[1083927]:DummyLocale[136365]) : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1083937] "RVV" "temp"
    unknown call_tmp[1083944] "expr temp" "maybe param" "maybe type" "temp"
    (1083947 'move' call_tmp[1083944](1083931 '.v' this[1083927] c"super"))
    (1083942 'move' ret[1083937](1083941 'deref' call_tmp[1083944]))
    (1083939 return ret[1083937])
  }
  function DummyLocale[136365].deinit[1083949](arg _mt[1083951]:_MT[201], arg this[1083953]:DummyLocale[136365]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (1083961 return _void[46])
  }
  function DummyLocale[136365].serialize[1083963](arg _mt[1083967]:_MT[201], arg this[1083965]:DummyLocale[136365], arg writer[1083966]:_any[141](?), ref arg serializer[1083971]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (1083974 call serializeDefaultImpl writer[1083966] serializer[1083971] this[1083965])
    (1083980 return _void[46])
  }
  function DummyLocale[136365].deserialize[1083982](arg _mt[1083986]:_MT[201], arg this[1083984]:DummyLocale[136365], arg reader[1083985]:_any[141](?), ref arg deserializer[1083991]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    unknown _deser_temp[1083993] "temp"
    (1083995 'move' _deser_temp[1083993] this[1083984])
    (1083998 call deserializeDefaultImpl reader[1083985] deserializer[1083991] _deser_temp[1083993])
    (1084004 return _void[46])
  }
  type DummyLocale[136365] val super[397515]:BaseLocale[136243] "super class"
  type DummyLocale[430798](?)
  function chpl_getSingletonLocaleArray[136367](arg arg[136370]:locale[234]) const ref : _unknown[42]
  {
    unknown ret[608333] "RVV" "temp"
    unknown call_tmp[808605] "expr temp" "maybe param" "maybe type" "temp"
    (808608 'move' call_tmp[808605](136382 call _instance _mt[203] arg[136370]))
    unknown call_tmp[808610] "maybe param" "maybe type" "temp"
    (808613 'move' call_tmp[808610](136379 call : call_tmp[808605] borrowed AbstractLocaleModel?[468085]))
    unknown casted[136378] "dead at end of block" "insert auto destroy"
    (645929 'init var' casted[136378] call_tmp[808610])
    (136389 'end of statement')
    unknown call_tmp[808615] "expr temp" "maybe param" "maybe type" "temp"
    (808618 'move' call_tmp[808615](136396 call == casted[136378] nil[32]))
    unknown call_tmp[808620] "expr temp" "maybe param" "maybe type" "temp"
    (808623 'move' call_tmp[808620](136400 call _cond_test call_tmp[808615]))
    if call_tmp[808620]
    {
      (136391 call halt "cannot call chpl_getSingletonCurrentLocaleArray on nil or rootLocale")
    }
    unknown call_tmp[808625] "expr temp" "maybe param" "maybe type" "temp"
    (808628 'move' call_tmp[808625](136406 call postfix! casted[136378]))
    unknown call_tmp[808632] "expr temp" "maybe param" "maybe type" "temp"
    (808635 'move' call_tmp[808632](136411 call chpl_singletonThisLocaleArray _mt[203] call_tmp[808625]))
    (608338 'move' ret[608333](608337 'addr of' call_tmp[808632]))
    gotoReturn _end_chpl_getSingletonLocaleArray[608331] _end_chpl_getSingletonLocaleArray[608331]
    (554028 'end of statement' casted[136378])
    label _end_chpl_getSingletonLocaleArray[608331]
    (608335 return ret[608333])
  }
  {
    (136375 return(136374 'lifetime_of' c_sublocid_none[135197]))
  }
  function AbstractLocaleModel[136461].init[136432](arg _mt[136440]:_MT[201], arg this[136434]:AbstractLocaleModel[136461], arg parent_loc[136437]:locale[234]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[525557] "temporary of super field" "temp"
    (525559 'move' super_tmp[525557](525556 '.v' this[136434] c"super"))
    (136447 call(136444 call (partial) init _mt[203] super_tmp[525557]) parent_loc[136437])
    (554030 'end of statement')
    unknown tmp[525562] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[577611] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[808639] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (808642 'move' call_tmp[808639](525564 '.v' this[136434] c"super"))
      (577615 'move' call_type_tmp[577611](525567 'typeof' call_tmp[808639]))
    }
    (525568 'move' tmp[525562] call_type_tmp[577611])
    unknown call_tmp[808644] "maybe param" "maybe type" "temp"
    (808647 'move' call_tmp[808644](525573 'cast' tmp[525562] this[136434]))
    unknown chpl__thisAsParent[525570] "dead at end of block" "insert auto destroy" "temp"
    (645931 'init var' chpl__thisAsParent[525570] call_tmp[808644] tmp[525562])
    (525576 'setcid' chpl__thisAsParent[525570])
    (554031 'end of statement')
    unknown chpl_singletonThisLocaleArray[525579] "temp"
    unknown call_tmp[808649] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (808652 'move' call_tmp[808649](525586 call chpl_build_bounded_range 0 0))
    unknown call_tmp[808654] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (808657 'move' call_tmp[808654](525584 call chpl__ensureDomainExpr call_tmp[808649]))
    unknown call_tmp[808659] "expr temp" "maybe param" "maybe type" "temp"
    (808662 'move' call_tmp[808659](525582 call chpl__buildArrayRuntimeType call_tmp[808654] locale[234]))
    (525590 'default init var' chpl_singletonThisLocaleArray[525579] call_tmp[808659])
    (525592 '.=' this[136434] c"chpl_singletonThisLocaleArray" chpl_singletonThisLocaleArray[525579])
    (554032 'end of statement')
    (525596 'setcid' this[136434])
    (608342 return _void[46])
  }
  function AbstractLocaleModel[136461].init[136451](arg _mt[136455]:_MT[201], arg this[136453]:AbstractLocaleModel[136461]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[525636] "temporary of super field" "temp"
    (525644 'move' super_tmp[525636](525637 '.v' this[136453] c"super"))
    (525640 call init _mt[203] super_tmp[525636])
    (554034 'end of statement')
    unknown tmp[525602] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[577617] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[808664] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (808667 'move' call_tmp[808664](525604 '.v' this[136453] c"super"))
      (577621 'move' call_type_tmp[577617](525607 'typeof' call_tmp[808664]))
    }
    (525608 'move' tmp[525602] call_type_tmp[577617])
    unknown call_tmp[808669] "maybe param" "maybe type" "temp"
    (808672 'move' call_tmp[808669](525613 'cast' tmp[525602] this[136453]))
    unknown chpl__thisAsParent[525610] "dead at end of block" "insert auto destroy" "temp"
    (645933 'init var' chpl__thisAsParent[525610] call_tmp[808669] tmp[525602])
    (525616 'setcid' chpl__thisAsParent[525610])
    (554035 'end of statement')
    unknown chpl_singletonThisLocaleArray[525619] "temp"
    unknown call_tmp[808674] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (808677 'move' call_tmp[808674](525626 call chpl_build_bounded_range 0 0))
    unknown call_tmp[808679] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (808682 'move' call_tmp[808679](525624 call chpl__ensureDomainExpr call_tmp[808674]))
    unknown call_tmp[808684] "expr temp" "maybe param" "maybe type" "temp"
    (808687 'move' call_tmp[808684](525622 call chpl__buildArrayRuntimeType call_tmp[808679] locale[234]))
    (525630 'default init var' chpl_singletonThisLocaleArray[525619] call_tmp[808684])
    (525632 '.=' this[136453] c"chpl_singletonThisLocaleArray" chpl_singletonThisLocaleArray[525619])
    (554036 'end of statement')
    (525647 'setcid' this[136453])
    (608344 return _void[46])
  }
  function AbstractLocaleModel[136461].super[1084006](arg _mt[1084008]:_MT[201], arg this[1084010]:AbstractLocaleModel[136461]) : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1084020] "RVV" "temp"
    unknown call_tmp[1084027] "expr temp" "maybe param" "maybe type" "temp"
    (1084030 'move' call_tmp[1084027](1084014 '.v' this[1084010] c"super"))
    (1084025 'move' ret[1084020](1084024 'deref' call_tmp[1084027]))
    (1084022 return ret[1084020])
  }
  function AbstractLocaleModel[136461].chpl_singletonThisLocaleArray[1084032](arg _mt[1084034]:_MT[201], arg this[1084036]:AbstractLocaleModel[136461]) ref : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1084046] "RVV" "temp"
    unknown call_tmp[1084053] "expr temp" "maybe param" "maybe type" "temp"
    (1084056 'move' call_tmp[1084053](1084040 '.' this[1084036] c"chpl_singletonThisLocaleArray"))
    (1084051 'move' ret[1084046](1084050 'addr of' call_tmp[1084053]))
    (1084048 return ret[1084046])
  }
  function AbstractLocaleModel[136461].deinit[1084058](arg _mt[1084060]:_MT[201], arg this[1084062]:AbstractLocaleModel[136461]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (1084070 return _void[46])
  }
  function AbstractLocaleModel[136461].serialize[1084072](arg _mt[1084076]:_MT[201], arg this[1084074]:AbstractLocaleModel[136461], arg writer[1084075]:_any[141](?), ref arg serializer[1084080]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (1084083 call serializeDefaultImpl writer[1084075] serializer[1084080] this[1084074])
    (1084089 return _void[46])
  }
  function AbstractLocaleModel[136461].deserialize[1084091](arg _mt[1084095]:_MT[201], arg this[1084093]:AbstractLocaleModel[136461], arg reader[1084094]:_any[141](?), ref arg deserializer[1084100]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    unknown _deser_temp[1084102] "temp"
    (1084104 'move' _deser_temp[1084102] this[1084093])
    (1084107 call deserializeDefaultImpl reader[1084094] deserializer[1084100] _deser_temp[1084102])
    (1084113 return _void[46])
  }
  type AbstractLocaleModel[136461] val super[397517]:BaseLocale[136243] "super class" unknown chpl_singletonThisLocaleArray[136420](136428 call chpl__buildArrayRuntimeType(136425 call chpl__ensureDomainExpr(136423 call chpl_build_bounded_range 0 0)) locale[234])
  type unmanaged AbstractLocaleModel?[468094]
  type borrowed AbstractLocaleModel?[468085]
  type AbstractLocaleModel?[468082](?)
  type AbstractLocaleModel[430870](?)
  unknown rootLocale[136464] "dead at end of block" "insert auto destroy" "locale private"
  unknown replicateRootLocale[136469] "config" "param"
  unknown origRootLocale[136474] "dead at end of block" "insert auto destroy"
  function AbstractRootLocale[136746].init[136480](arg _mt[136484]:_MT[201], arg this[136482]:AbstractRootLocale[136746]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[525669] "temporary of super field" "temp"
    (525677 'move' super_tmp[525669](525670 '.v' this[136482] c"super"))
    (525673 call init _mt[203] super_tmp[525669])
    (554039 'end of statement')
    unknown tmp[525653] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[577623] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[808689] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (808692 'move' call_tmp[808689](525655 '.v' this[136482] c"super"))
      (577627 'move' call_type_tmp[577623](525658 'typeof' call_tmp[808689]))
    }
    (525659 'move' tmp[525653] call_type_tmp[577623])
    unknown call_tmp[808694] "maybe param" "maybe type" "temp"
    (808697 'move' call_tmp[808694](525664 'cast' tmp[525653] this[136482]))
    unknown chpl__thisAsParent[525661] "dead at end of block" "insert auto destroy" "temp"
    (645941 'init var' chpl__thisAsParent[525661] call_tmp[808694] tmp[525653])
    (525667 'setcid' chpl__thisAsParent[525661])
    (554040 'end of statement')
    (525680 'setcid' this[136482])
    (608346 return _void[46])
  }
  function AbstractRootLocale[136746].init[136489](arg _mt[136497]:_MT[201], arg this[136491]:AbstractRootLocale[136746], arg parent_loc[136494]:locale[234]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[525683] "temporary of super field" "temp"
    (525685 'move' super_tmp[525683](525682 '.v' this[136491] c"super"))
    (136504 call(136501 call (partial) init _mt[203] super_tmp[525683]) parent_loc[136494])
    (554042 'end of statement')
    unknown tmp[525688] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[577629] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[808701] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (808704 'move' call_tmp[808701](525690 '.v' this[136491] c"super"))
      (577633 'move' call_type_tmp[577629](525693 'typeof' call_tmp[808701]))
    }
    (525694 'move' tmp[525688] call_type_tmp[577629])
    unknown call_tmp[808706] "maybe param" "maybe type" "temp"
    (808709 'move' call_tmp[808706](525699 'cast' tmp[525688] this[136491]))
    unknown chpl__thisAsParent[525696] "dead at end of block" "insert auto destroy" "temp"
    (645943 'init var' chpl__thisAsParent[525696] call_tmp[808706] tmp[525688])
    (525702 'setcid' chpl__thisAsParent[525696])
    (554043 'end of statement')
    (525704 'setcid' this[136491])
    (608348 return _void[46])
  }
  function AbstractRootLocale[136746].getDefaultLocaleSpace[136508](arg _mt[136512]:_MT[201], arg this[136510]:AbstractRootLocale[136746]) const ref : _unknown[42] "method" "primary method"
  {
    unknown ret[608352] "RVV" "temp"
    (136521 call pureVirtualMethodHalt module=[222] HaltWrappers[518])
    (554045 'end of statement')
    (608357 'move' ret[608352](608356 'addr of' chpl_emptyLocaleSpace[308758]))
    (608354 return ret[608352])
    (402525 'referenced modules list' HaltWrappers[518])
  }
  { scopeless type
    (136515 'typeof' chpl_emptyLocaleSpace[308758])
  }
  function AbstractRootLocale[136746].getDefaultLocaleArray[136527](arg _mt[136531]:_MT[201], arg this[136529]:AbstractRootLocale[136746]) const ref : _unknown[42] "method" "primary method"
  {
    unknown ret[608361] "RVV" "temp"
    (136540 call pureVirtualMethodHalt module=[222] HaltWrappers[518])
    (554047 'end of statement')
    (608366 'move' ret[608361](608365 'addr of' chpl_emptyLocales[308774]))
    (608363 return ret[608361])
    (402531 'referenced modules list' HaltWrappers[518])
  }
  { scopeless type
    (136534 'typeof' chpl_emptyLocales[308774])
  }
  function AbstractRootLocale[136746].localeIDtoLocale[136546](arg _mt[136554]:_MT[201], arg this[136548]:AbstractRootLocale[136746], arg id[136551]:chpl_localeID_t[306449]) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown ret[608370] "RVV" "temp"
    (136562 call pureVirtualMethodHalt module=[222] HaltWrappers[518])
    (608372 return ret[608370])
    (402537 'referenced modules list' HaltWrappers[518])
  }
  { scopeless type
    locale[234]
  }
  function AbstractRootLocale[136746].chpl_initOnLocales[136566](arg _mt[136570]:_MT[201], arg this[136568]:AbstractRootLocale[136746]) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[608376] "RVV" "temp"
    unknown call_tmp[808711] "expr temp" "maybe param" "maybe type" "temp"
    (808714 'move' call_tmp[808711](136579 call > numLocales[305007] 1))
    unknown call_tmp[808716] "expr temp" "maybe param" "maybe type" "temp"
    (808719 'move' call_tmp[808716](136583 call _cond_test call_tmp[808711]))
    if call_tmp[808716]
    {
      (136574 call halt "The locales must be initialized in parallel")
    }
    {
      unknown _indexOfInterest[136618] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[136619] "expr temp" "temp"
      unknown call_tmp[808723] "expr temp" "maybe param" "maybe type" "temp"
      (808726 'move' call_tmp[808723](136595 call _instance _mt[203] origRootLocale[136474]))
      unknown call_tmp[808728] "expr temp" "maybe param" "maybe type" "temp"
      (808731 'move' call_tmp[808728](136592 call : call_tmp[808723] borrowed RootLocale?[468091]))
      unknown call_tmp[808733] "expr temp" "maybe param" "maybe type" "temp"
      (808736 'move' call_tmp[808733](136590 call postfix! call_tmp[808728]))
      unknown call_tmp[808740] "expr temp" "maybe param" "maybe type" "temp"
      (808743 'move' call_tmp[808740](136606 call(136603 call (partial) getDefaultLocaleSpace _mt[203] call_tmp[808733])))
      (136628 'move' _iterator[136619](136626 call _getIterator call_tmp[808740]))
      Defer
      {
        {
          (136643 call _freeIterator _iterator[136619])
        }
      }
      { scopeless type
        (136633 'move' _indexOfInterest[136618](136630 call iteratorIndex _iterator[136619]))
      }
      ForLoop[136620]
      {
        unknown locIdx[136588] "index var" "insert auto destroy"
        (554052 'end of statement')
        (136638 'move' locIdx[136588] _indexOfInterest[136618])
        (554053 'end of statement' locIdx[136588])
        {
          unknown yret[608380] "YVV" "temp"
          (608383 'move' yret[608380](608382 'deref' locIdx[136588]))
          (136608 yield yret[608380])
          (554055 'end of statement' locIdx[136588])
          (136610 call = rootLocale[136464] origRootLocale[136474])
          (554057 'end of statement')
          (136614 call = rootLocaleInitialized[52042] 1)
        }
        label _continueLabel[136623]
        _indexOfInterest[136618]
        _iterator[136619]
      }
      label _breakLabel[136624]
    }
    (608378 return ret[608376])
  }
  function AbstractRootLocale[136746].chpl_initOnLocales[136652](arg _mt[136660]:_MT[201], arg this[136654]:AbstractRootLocale[136746], param arg tag[136657]:iterKind[52144]) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[608388] "RVV" "temp"
    {
      unknown tmpIter[388605] "expr temp" "maybe ref" "no copy" "temp"
      unknown call_tmp[808745] "expr temp" "maybe param" "maybe type" "temp"
      (808748 'move' call_tmp[808745](136675 call chpl_build_low_bounded_range 0))
      (388608 'move' tmpIter[388605](136672 call # call_tmp[808745] numLocales[305007]))
      unknown isBounded[388768] "maybe param" "temp"
      (388774 'move' isBounded[388768](388770 call chpl_supportsBoundedCoforall tmpIter[388605] 0))
      if isBounded[388768]
      {
        const _coforallCount[388637] "const" "end count" "temp"
        (388705 'move' _coforallCount[388637](388702 call _endCountAlloc 1))
        unknown numTasks[388638] "temp"
        (388689 'move' numTasks[388638](388685 call chpl_boundedCoforallSize tmpIter[388605] 0))
        (388680 call _upEndCount _coforallCount[388637] 1 numTasks[388638])
        (554059 'end of statement')
        (388677 call chpl_resetTaskSpawn numTasks[388638])
        (554060 'end of statement')
        unknown _indexOfInterest[388645] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[388646] "expr temp" "temp"
        (388655 'move' _iterator[388646](388653 call _getIterator tmpIter[388605]))
        Defer
        {
          {
            (388670 call _freeIterator _iterator[388646])
          }
        }
        { scopeless type
          (388660 'move' _indexOfInterest[388645](388657 call iteratorIndex _iterator[388646]))
        }
        ForLoop[388647]
        {
          unknown locIdx[388612] "coforall index var" "index var" "insert auto destroy"
          (554062 'end of statement')
          (388665 'move' locIdx[388612] _indexOfInterest[388645])
          (554063 'end of statement' locIdx[388612])
          {
            {
              const tmp[388618] "const" "temp"
              unknown call_tmp[808750] "expr temp" "maybe param" "maybe type" "temp"
              (808753 'move' call_tmp[808750](388627 call : locIdx[388612] chpl_nodeID_t[135185]))
              unknown call_tmp[808755] "expr temp" "maybe param" "maybe type" "temp"
              (808758 'move' call_tmp[808755](388625 call chpl_buildLocaleID call_tmp[808750] c_sublocid_any[135202]))
              unknown call_tmp[808760] "expr temp" "maybe param" "maybe type" "temp"
              (808763 'move' call_tmp[808760](388623 'chpl_on_locale_num' call_tmp[808755]))
              (388620 'move' tmp[388618](388622 'deref' call_tmp[808760]))
              {
                (388633 call chpl_defaultDistInitPrivate)
                (554065 'end of statement')
                unknown yret[608392] "YVV" "temp"
                (608395 'move' yret[608392](608394 'deref' locIdx[388612]))
                (388634 yield yret[608392])
                (554066 'end of statement' locIdx[388612])
              }
              (388615 'elided on block' 0 tmp[388618])
            }
            (388640 call _downEndCount _coforallCount[388637] nil[32])
            (388639 'coforall loop')
          }
          label _continueLabel[388650]
          _indexOfInterest[388645]
          _iterator[388646]
        }
        label _breakLabel[388651]
        Defer
        {
          {
            (388692 call _endCountFree _coforallCount[388637])
          }
        }
        (388697 call _waitEndCount _coforallCount[388637] 1 numTasks[388638])
      }
      {
        const _coforallCount[388709] "const" "end count" "temp"
        (388765 'move' _coforallCount[388709](388762 call _endCountAlloc 1))
        unknown _indexOfInterest[388717] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[388718] "expr temp" "temp"
        (388727 'move' _iterator[388718](388725 call _getIterator tmpIter[388605]))
        Defer
        {
          {
            (388742 call _freeIterator _iterator[388718])
          }
        }
        { scopeless type
          (388732 'move' _indexOfInterest[388717](388729 call iteratorIndex _iterator[388718]))
        }
        ForLoop[388719]
        {
          unknown locIdx[136670] "coforall index var" "index var" "insert auto destroy"
          (554072 'end of statement')
          (388737 'move' locIdx[136670] _indexOfInterest[388717])
          (554073 'end of statement' locIdx[136670])
          (388749 call _upEndCount _coforallCount[388709] 1)
          (554075 'end of statement')
          {
            {
              const tmp[136694] "const" "temp"
              unknown call_tmp[808765] "expr temp" "maybe param" "maybe type" "temp"
              (808768 'move' call_tmp[808765](136682 call : locIdx[136670] chpl_nodeID_t[135185]))
              unknown call_tmp[808770] "expr temp" "maybe param" "maybe type" "temp"
              (808773 'move' call_tmp[808770](136681 call chpl_buildLocaleID call_tmp[808765] c_sublocid_any[135202]))
              unknown call_tmp[808775] "expr temp" "maybe param" "maybe type" "temp"
              (808778 'move' call_tmp[808775](136679 'chpl_on_locale_num' call_tmp[808770]))
              (136695 'move' tmp[136694](136692 'deref' call_tmp[808775]))
              {
                (136689 call chpl_defaultDistInitPrivate)
                (554076 'end of statement')
                unknown yret[608398] "YVV" "temp"
                (608401 'move' yret[608398](608400 'deref' locIdx[136670]))
                (136690 yield yret[608398])
                (554077 'end of statement' locIdx[136670])
              }
              (136698 'elided on block' 0 tmp[136694])
            }
            (388712 call _downEndCount _coforallCount[388709] nil[32])
            (388711 'coforall loop')
          }
          label _continueLabel[388722]
          _indexOfInterest[388717]
          _iterator[388718]
        }
        label _breakLabel[388723]
        Defer
        {
          {
            (388753 call _endCountFree _coforallCount[388709])
          }
        }
        (388758 call _waitEndCount _coforallCount[388709] 1)
      }
    }
    {
      unknown tmpIter[388778] "expr temp" "maybe ref" "no copy" "temp"
      unknown call_tmp[808780] "expr temp" "maybe param" "maybe type" "temp"
      (808783 'move' call_tmp[808780](136708 call chpl_build_low_bounded_range 0))
      (388781 'move' tmpIter[388778](136705 call # call_tmp[808780] numLocales[305007]))
      unknown isBounded[388947] "maybe param" "temp"
      (388953 'move' isBounded[388947](388949 call chpl_supportsBoundedCoforall tmpIter[388778] 0))
      if isBounded[388947]
      {
        const _coforallCount[388816] "const" "end count" "temp"
        (388884 'move' _coforallCount[388816](388881 call _endCountAlloc 1))
        unknown numTasks[388817] "temp"
        (388868 'move' numTasks[388817](388864 call chpl_boundedCoforallSize tmpIter[388778] 0))
        (388859 call _upEndCount _coforallCount[388816] 1 numTasks[388817])
        (554082 'end of statement')
        (388856 call chpl_resetTaskSpawn numTasks[388817])
        (554083 'end of statement')
        unknown _indexOfInterest[388824] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[388825] "expr temp" "temp"
        (388834 'move' _iterator[388825](388832 call _getIterator tmpIter[388778]))
        Defer
        {
          {
            (388849 call _freeIterator _iterator[388825])
          }
        }
        { scopeless type
          (388839 'move' _indexOfInterest[388824](388836 call iteratorIndex _iterator[388825]))
        }
        ForLoop[388826]
        {
          unknown locIdx[388785] "coforall index var" "index var" "insert auto destroy"
          (554085 'end of statement')
          (388844 'move' locIdx[388785] _indexOfInterest[388824])
          (554086 'end of statement' locIdx[388785])
          {
            {
              const tmp[388791] "const" "temp"
              unknown call_tmp[808785] "expr temp" "maybe param" "maybe type" "temp"
              (808788 'move' call_tmp[808785](388800 call : locIdx[388785] chpl_nodeID_t[135185]))
              unknown call_tmp[808790] "expr temp" "maybe param" "maybe type" "temp"
              (808793 'move' call_tmp[808790](388798 call chpl_buildLocaleID call_tmp[808785] c_sublocid_any[135202]))
              unknown call_tmp[808795] "expr temp" "maybe param" "maybe type" "temp"
              (808798 'move' call_tmp[808795](388796 'chpl_on_locale_num' call_tmp[808790]))
              (388793 'move' tmp[388791](388795 'deref' call_tmp[808795]))
              {
                (388806 call chpl_rootLocaleInitPrivate locIdx[388785])
                (554088 'end of statement' locIdx[388785])
                (388809 call chpl_defaultLocaleInitPrivate)
                (554090 'end of statement')
                (388811 call chpl_singletonCurrentLocaleInitPrivate locIdx[388785])
                (554091 'end of statement' locIdx[388785])
                (388814 call warmupRuntime)
              }
              (388788 'elided on block' 0 tmp[388791])
            }
            (388819 call _downEndCount _coforallCount[388816] nil[32])
            (388818 'coforall loop')
          }
          label _continueLabel[388829]
          _indexOfInterest[388824]
          _iterator[388825]
        }
        label _breakLabel[388830]
        Defer
        {
          {
            (388871 call _endCountFree _coforallCount[388816])
          }
        }
        (388876 call _waitEndCount _coforallCount[388816] 1 numTasks[388817])
      }
      {
        const _coforallCount[388888] "const" "end count" "temp"
        (388944 'move' _coforallCount[388888](388941 call _endCountAlloc 1))
        unknown _indexOfInterest[388896] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[388897] "expr temp" "temp"
        (388906 'move' _iterator[388897](388904 call _getIterator tmpIter[388778]))
        Defer
        {
          {
            (388921 call _freeIterator _iterator[388897])
          }
        }
        { scopeless type
          (388911 'move' _indexOfInterest[388896](388908 call iteratorIndex _iterator[388897]))
        }
        ForLoop[388898]
        {
          unknown locIdx[136703] "coforall index var" "index var" "insert auto destroy"
          (554098 'end of statement')
          (388916 'move' locIdx[136703] _indexOfInterest[388896])
          (554099 'end of statement' locIdx[136703])
          (388928 call _upEndCount _coforallCount[388888] 1)
          (554101 'end of statement')
          {
            {
              const tmp[136733] "const" "temp"
              unknown call_tmp[808800] "expr temp" "maybe param" "maybe type" "temp"
              (808803 'move' call_tmp[808800](136715 call : locIdx[136703] chpl_nodeID_t[135185]))
              unknown call_tmp[808805] "expr temp" "maybe param" "maybe type" "temp"
              (808808 'move' call_tmp[808805](136714 call chpl_buildLocaleID call_tmp[808800] c_sublocid_any[135202]))
              unknown call_tmp[808810] "expr temp" "maybe param" "maybe type" "temp"
              (808813 'move' call_tmp[808810](136712 'chpl_on_locale_num' call_tmp[808805]))
              (136734 'move' tmp[136733](136731 'deref' call_tmp[808810]))
              {
                (136722 call chpl_rootLocaleInitPrivate locIdx[136703])
                (554102 'end of statement' locIdx[136703])
                (136725 call chpl_defaultLocaleInitPrivate)
                (554104 'end of statement')
                (136727 call chpl_singletonCurrentLocaleInitPrivate locIdx[136703])
                (554105 'end of statement' locIdx[136703])
                (136730 call warmupRuntime)
              }
              (136737 'elided on block' 0 tmp[136733])
            }
            (388891 call _downEndCount _coforallCount[388888] nil[32])
            (388890 'coforall loop')
          }
          label _continueLabel[388901]
          _indexOfInterest[388896]
          _iterator[388897]
        }
        label _breakLabel[388902]
        Defer
        {
          {
            (388932 call _endCountFree _coforallCount[388888])
          }
        }
        (388937 call _waitEndCount _coforallCount[388888] 1)
      }
    }
    (608390 return ret[608388])
  }
  where {
    (136662 call == tag[136657] standalone[52142])
  }
  function AbstractRootLocale[136746].super[1084115](arg _mt[1084117]:_MT[201], arg this[1084119]:AbstractRootLocale[136746]) : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1084129] "RVV" "temp"
    unknown call_tmp[1084136] "expr temp" "maybe param" "maybe type" "temp"
    (1084139 'move' call_tmp[1084136](1084123 '.v' this[1084119] c"super"))
    (1084134 'move' ret[1084129](1084133 'deref' call_tmp[1084136]))
    (1084131 return ret[1084129])
  }
  function AbstractRootLocale[136746].deinit[1084141](arg _mt[1084143]:_MT[201], arg this[1084145]:AbstractRootLocale[136746]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (1084153 return _void[46])
  }
  function AbstractRootLocale[136746].serialize[1084155](arg _mt[1084159]:_MT[201], arg this[1084157]:AbstractRootLocale[136746], arg writer[1084158]:_any[141](?), ref arg serializer[1084163]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (1084166 call serializeDefaultImpl writer[1084158] serializer[1084163] this[1084157])
    (1084172 return _void[46])
  }
  function AbstractRootLocale[136746].deserialize[1084174](arg _mt[1084178]:_MT[201], arg this[1084176]:AbstractRootLocale[136746], arg reader[1084177]:_any[141](?), ref arg deserializer[1084183]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    unknown _deser_temp[1084185] "temp"
    (1084187 'move' _deser_temp[1084185] this[1084176])
    (1084190 call deserializeDefaultImpl reader[1084177] deserializer[1084183] _deser_temp[1084185])
    (1084196 return _void[46])
  }
  type AbstractRootLocale[136746] val super[397519]:BaseLocale[136243] "super class"
  type borrowed AbstractRootLocale?[468100]
  type AbstractRootLocale?[468097](?)
  type AbstractRootLocale[430955](?)
  function warmupRuntime[136748]() : _unknown[42] "private" "no return value for void"
  {
    function chpl_task_getFixedNumThreads[136751]() : _unknown[42] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (136754 call uint(64)[86] 32)
    }
    {
      unknown tmpIter[388957] "expr temp" "maybe ref" "no copy" "temp"
      unknown call_tmp[808815] "expr temp" "maybe param" "maybe type" "temp"
      (808818 'move' call_tmp[808815](136764 call chpl_build_low_bounded_range 0))
      unknown call_tmp[808820] "expr temp" "maybe param" "maybe type" "temp"
      (808823 'move' call_tmp[808820](136767 call chpl_task_getFixedNumThreads))
      (388960 'move' tmpIter[388957](136761 call # call_tmp[808815] call_tmp[808820]))
      unknown isBounded[389116] "maybe param" "temp"
      (389122 'move' isBounded[389116](389118 call chpl_supportsBoundedCoforall tmpIter[388957] 0))
      if isBounded[389116]
      {
        const _coforallCount[388985] "const" "end count" "temp"
        (389053 'move' _coforallCount[388985](389050 call _endCountAlloc 1))
        unknown numTasks[388986] "temp"
        (389037 'move' numTasks[388986](389033 call chpl_boundedCoforallSize tmpIter[388957] 0))
        (389028 call _upEndCount _coforallCount[388985] 1 numTasks[388986])
        (554111 'end of statement')
        (389025 call chpl_resetTaskSpawn numTasks[388986])
        (554112 'end of statement')
        unknown _indexOfInterest[388993] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[388994] "expr temp" "temp"
        (389003 'move' _iterator[388994](389001 call _getIterator tmpIter[388957]))
        Defer
        {
          {
            (389018 call _freeIterator _iterator[388994])
          }
        }
        { scopeless type
          (389008 'move' _indexOfInterest[388993](389005 call iteratorIndex _iterator[388994]))
        }
        ForLoop[388995]
        {
          unknown i[388964] "coforall index var" "index var" "insert auto destroy"
          (554114 'end of statement')
          (389013 'move' i[388964] _indexOfInterest[388993])
          (554115 'end of statement' i[388964])
          {
            {
              unknown call_tmp[808825] "maybe param" "maybe type" "temp"
              (808828 'move' call_tmp[808825](388970 call allocate int(64)[10] 1))
              unknown p[388968] "dead at end of block" "insert auto destroy"
              (645945 'init var' p[388968] call_tmp[808825])
              (388974 'end of statement')
              unknown call_tmp[808830] "expr temp" "maybe param" "maybe type" "temp"
              (808833 'move' call_tmp[808830](388978 call p[388968] 0))
              (388976 call = call_tmp[808830] i[388964])
              (554117 'end of statement' p[388968] i[388964])
              (388982 call deallocate p[388968])
              (554120 'end of statement' p[388968])
            }
            (388988 call _downEndCount _coforallCount[388985] nil[32])
            (388987 'coforall loop')
          }
          label _continueLabel[388998]
          _indexOfInterest[388993]
          _iterator[388994]
        }
        label _breakLabel[388999]
        Defer
        {
          {
            (389040 call _endCountFree _coforallCount[388985])
          }
        }
        (389045 call _waitEndCount _coforallCount[388985] 1 numTasks[388986])
      }
      {
        const _coforallCount[389057] "const" "end count" "temp"
        (389113 'move' _coforallCount[389057](389110 call _endCountAlloc 1))
        unknown _indexOfInterest[389065] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[389066] "expr temp" "temp"
        (389075 'move' _iterator[389066](389073 call _getIterator tmpIter[388957]))
        Defer
        {
          {
            (389090 call _freeIterator _iterator[389066])
          }
        }
        { scopeless type
          (389080 'move' _indexOfInterest[389065](389077 call iteratorIndex _iterator[389066]))
        }
        ForLoop[389067]
        {
          unknown i[136759] "coforall index var" "index var" "insert auto destroy"
          (554126 'end of statement')
          (389085 'move' i[136759] _indexOfInterest[389065])
          (554127 'end of statement' i[136759])
          (389097 call _upEndCount _coforallCount[389057] 1)
          (554129 'end of statement')
          {
            {
              unknown call_tmp[808835] "maybe param" "maybe type" "temp"
              (808838 'move' call_tmp[808835](136772 call allocate int(64)[10] 1))
              unknown p[136770] "dead at end of block" "insert auto destroy"
              (645947 'init var' p[136770] call_tmp[808835])
              (136776 'end of statement')
              unknown call_tmp[808840] "expr temp" "maybe param" "maybe type" "temp"
              (808843 'move' call_tmp[808840](136780 call p[136770] 0))
              (136777 call = call_tmp[808840] i[136759])
              (554130 'end of statement' p[136770] i[136759])
              (136784 call deallocate p[136770])
              (554133 'end of statement' p[136770])
            }
            (389060 call _downEndCount _coforallCount[389057] nil[32])
            (389059 'coforall loop')
          }
          label _continueLabel[389070]
          _indexOfInterest[389065]
          _iterator[389066]
        }
        label _breakLabel[389071]
        Defer
        {
          {
            (389101 call _endCountFree _coforallCount[389057])
          }
        }
        (389106 call _waitEndCount _coforallCount[389057] 1)
      }
    }
    (608404 return _void[46])
  }
  function chpl_init_rootLocale[136789]() : _unknown[42] "no return value for void"
  {
    unknown tmp[487833] "maybe param" "temp"
    (487844 'move' tmp[487833](136800 call > numLocales[305007] 1))
    unknown call_tmp[808845] "expr temp" "maybe param" "maybe type" "temp"
    (808848 'move' call_tmp[808845](487846 call _cond_invalid tmp[487833]))
    if call_tmp[808845]
    {
      (487849 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[679932] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[679933] "maybe param" "temp"
    unknown call_tmp[808850] "expr temp" "maybe param" "maybe type" "temp"
    (808853 'move' call_tmp[808850](487834 call isTrue tmp[487833]))
    (679938 'move' tmp[679933](679936 call _cond_test call_tmp[808850]))
    if tmp[679933]
    {
      unknown tmp[679940] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (679942 'move' tmp[679940](487837 call isTrue 1))
      (679947 'move' tmp[679932](679944 '_paramFoldLogical' tmp[679933] tmp[679940]))
    }
    {
      (679952 'move' tmp[679932](679949 '_paramFoldLogical' tmp[679933] 0))
    }
    unknown call_tmp[808855] "expr temp" "maybe param" "maybe type" "temp"
    (808858 'move' call_tmp[808855](136805 call _cond_test tmp[679932]))
    if call_tmp[808855]
    {
      (136793 call halt "Cannot run a program compiled with --local in more than 1 locale")
    }
    unknown call_tmp[808862] "expr temp" "maybe param" "maybe type" "temp"
    (808865 'move' call_tmp[808862](136813 call _instance _mt[203] origRootLocale[136474]))
    unknown call_tmp[808867] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (808870 'move' call_tmp[808867](1000124 'new' RootLocale[397722](?)(_chpl_manager = unmanaged[183](?))))
    (136810 call = call_tmp[808862] call_tmp[808867])
    (554140 'end of statement')
    unknown call_tmp[808874] "expr temp" "maybe param" "maybe type" "temp"
    (808877 'move' call_tmp[808874](136826 call _instance _mt[203] origRootLocale[136474]))
    unknown call_tmp[808879] "expr temp" "maybe param" "maybe type" "temp"
    (808882 'move' call_tmp[808879](136823 call : call_tmp[808874] borrowed RootLocale?[468091]))
    unknown call_tmp[808884] "expr temp" "maybe param" "maybe type" "temp"
    (808887 'move' call_tmp[808884](136821 call postfix! call_tmp[808879]))
    (136837 call(136834 call (partial) setup _mt[203] call_tmp[808884]))
    (608406 return _void[46])
  }
  function chpl_rootLocaleInitPrivate[136840](arg locIdx[136842]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    (136845 call = rootLocale[136464] origRootLocale[136474])
    (554142 'end of statement')
    unknown tmp[487854] "maybe param" "temp"
    (487865 'move' tmp[487854] replicateRootLocale[136469])
    unknown call_tmp[808891] "expr temp" "maybe param" "maybe type" "temp"
    (808894 'move' call_tmp[808891](487867 call _cond_invalid tmp[487854]))
    if call_tmp[808891]
    {
      (487870 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[679959] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[679960] "maybe param" "temp"
    unknown call_tmp[808896] "expr temp" "maybe param" "maybe type" "temp"
    (808899 'move' call_tmp[808896](487855 call isTrue tmp[487854]))
    (679965 'move' tmp[679960](679963 call _cond_test call_tmp[808896]))
    if tmp[679960]
    {
      unknown tmp[679967] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[808901] "expr temp" "maybe param" "maybe type" "temp"
      (808904 'move' call_tmp[808901](136930 call != locIdx[136842] 0))
      (679969 'move' tmp[679967](487858 call isTrue call_tmp[808901]))
      (679974 'move' tmp[679959](679971 '_paramFoldLogical' tmp[679960] tmp[679967]))
    }
    {
      (679979 'move' tmp[679959](679976 '_paramFoldLogical' tmp[679960] 0))
    }
    unknown call_tmp[808906] "expr temp" "maybe param" "maybe type" "temp"
    (808909 'move' call_tmp[808906](136934 call _cond_test tmp[679959]))
    if call_tmp[808906]
    {
      unknown call_tmp[808911] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (808914 'move' call_tmp[808911](1000125 'new' RootLocale[397722](?)(_chpl_manager = unmanaged[183](?))))
      unknown newRootLocale[136851] "dead at end of block" "insert auto destroy"
      (645949 'init var' newRootLocale[136851] call_tmp[808911])
      (136858 'end of statement')
      const origLocales[136860] "dead at end of block" "const" "no auto destroy" "no copy" "ref var"
      (645954 'init ref decl' origLocales[136860])
      unknown call_tmp[808918] "expr temp" "maybe param" "maybe type" "temp"
      (808921 'move' call_tmp[808918](136866 call _instance _mt[203] origRootLocale[136474]))
      unknown call_tmp[808923] "expr temp" "maybe param" "maybe type" "temp"
      (808926 'move' call_tmp[808923](136863 call : call_tmp[808918] borrowed RootLocale?[468091]))
      unknown call_tmp[808928] "expr temp" "maybe param" "maybe type" "temp"
      (808931 'move' call_tmp[808928](136861 call postfix! call_tmp[808923]))
      unknown call_tmp[808935] "expr temp" "maybe param" "maybe type" "temp"
      (808938 'move' call_tmp[808935](136877 call(136874 call (partial) getDefaultLocaleArray _mt[203] call_tmp[808928])))
      (645952 'move' origLocales[136860](645951 'addr of' call_tmp[808935]))
      (136879 'end of statement')
      unknown call_tmp[808942] "expr temp" "maybe param" "maybe type" "temp"
      (808945 'move' call_tmp[808942](136883 call _value _mt[203] origLocales[136860]))
      unknown call_tmp[808949] "maybe param" "maybe type" "temp"
      (808952 'move' call_tmp[808949](136888 call theData _mt[203] call_tmp[808942]))
      unknown origRL[136881] "dead at end of block" "insert auto destroy"
      (645956 'init var' origRL[136881] call_tmp[808949])
      (136892 'end of statement')
      unknown call_tmp[808956] "expr temp" "maybe param" "maybe type" "temp"
      (808959 'move' call_tmp[808956](136899 call(136896 call (partial) getDefaultLocaleArray _mt[203] newRootLocale[136851])))
      unknown call_tmp[808963] "expr temp" "maybe param" "maybe type" "temp"
      (808966 'move' call_tmp[808963](136900 call _value _mt[203] call_tmp[808956]))
      unknown call_tmp[808970] "maybe param" "maybe type" "temp"
      (808973 'move' call_tmp[808970](136903 call theData _mt[203] call_tmp[808963]))
      unknown newRL[136894] "dead at end of block" "insert auto destroy"
      (645958 'init var' newRL[136894] call_tmp[808970])
      (136907 'end of statement' origLocales[136860] newRootLocale[136851])
      unknown call_tmp[808975] "expr temp" "maybe param" "maybe type" "temp"
      (808978 'move' call_tmp[808975](136909 'array_get' newRL[136894] 0))
      unknown call_tmp[808980] "expr temp" "maybe param" "maybe type" "temp"
      (808983 'move' call_tmp[808980](136913 'array_get' origRL[136881] 0))
      unknown call_tmp[808985] "expr temp" "maybe param" "maybe type" "temp"
      (808988 'move' call_tmp[808985](136916 call : numLocales[305007] c_size_t[614]))
      (136908 'chpl_comm_array_get' call_tmp[808975] 0 call_tmp[808980] call_tmp[808985])
      (554146 'end of statement' newRL[136894] origRL[136881])
      unknown call_tmp[808992] "expr temp" "maybe param" "maybe type" "temp"
      (808995 'move' call_tmp[808992](136923 call _instance _mt[203] rootLocale[136464]))
      (136920 call = call_tmp[808992] newRootLocale[136851])
      (554149 'end of statement' newRootLocale[136851])
    }
    unknown call_tmp[808997] "expr temp" "maybe param" "maybe type" "temp"
    (809000 'move' call_tmp[808997](136961 call != locIdx[136842] 0))
    unknown call_tmp[809002] "expr temp" "maybe param" "maybe type" "temp"
    (809005 'move' call_tmp[809002](136965 call _cond_test call_tmp[808997]))
    if call_tmp[809002]
    {
      const tmp[136940] "dead at end of block" "const" "no auto destroy" "ref var"
      (645963 'init ref decl' tmp[136940])
      unknown call_tmp[809009] "expr temp" "maybe param" "maybe type" "temp"
      (809012 'move' call_tmp[809009](136946 call _instance _mt[203] rootLocale[136464]))
      unknown call_tmp[809014] "expr temp" "maybe param" "maybe type" "temp"
      (809017 'move' call_tmp[809014](136943 call : call_tmp[809009] borrowed RootLocale?[468091]))
      unknown call_tmp[809019] "expr temp" "maybe param" "maybe type" "temp"
      (809022 'move' call_tmp[809019](136941 call postfix! call_tmp[809014]))
      unknown call_tmp[809026] "expr temp" "maybe param" "maybe type" "temp"
      (809029 'move' call_tmp[809026](136955 call(136952 call (partial) getDefaultLocaleArray _mt[203] call_tmp[809019])))
      (645961 'move' tmp[136940](645960 'addr of' call_tmp[809026]))
      (136957 'end of statement')
      (136958 'move' Locales[309572] tmp[136940])
      (554151 'end of statement' tmp[136940])
    }
    (136969 call = rootLocaleInitialized[52042] 1)
    (608408 return _void[46])
  }
  function chpl_defaultLocaleInitPrivate[136975]() : _unknown[42] "no return value for void"
  {
    const rl[136979] "dead at end of block" "const" "no auto destroy" "no copy" "ref var"
    (645968 'init ref decl' rl[136979])
    unknown call_tmp[809033] "expr temp" "maybe param" "maybe type" "temp"
    (809036 'move' call_tmp[809033](136985 call _instance _mt[203] rootLocale[136464]))
    unknown call_tmp[809038] "expr temp" "maybe param" "maybe type" "temp"
    (809041 'move' call_tmp[809038](136982 call : call_tmp[809033] borrowed RootLocale?[468091]))
    unknown call_tmp[809043] "expr temp" "maybe param" "maybe type" "temp"
    (809046 'move' call_tmp[809043](136980 call postfix! call_tmp[809038]))
    unknown call_tmp[809050] "expr temp" "maybe param" "maybe type" "temp"
    (809053 'move' call_tmp[809050](136994 call(136991 call (partial) getDefaultLocaleArray _mt[203] call_tmp[809043])))
    (645966 'move' rl[136979](645965 'addr of' call_tmp[809050]))
    (136996 'end of statement')
    unknown call_tmp[809057] "expr temp" "maybe param" "maybe type" "temp"
    (809060 'move' call_tmp[809057](137000 call _instance _mt[203] defaultLocale[135266]))
    unknown call_tmp[809062] "expr temp" "maybe param" "maybe type" "temp"
    (809065 'move' call_tmp[809062](137004 call rl[136979] 0))
    unknown call_tmp[809069] "expr temp" "maybe param" "maybe type" "temp"
    (809072 'move' call_tmp[809069](137006 call _instance _mt[203] call_tmp[809062]))
    (136997 call = call_tmp[809057] call_tmp[809069])
    (554154 'end of statement' rl[136979])
    (608410 return _void[46])
  }
  function chpl_singletonCurrentLocaleInitPrivateSublocs[137011](arg arg[137014]:locale[234]) : _unknown[42] "no return value for void"
  {
    {
      unknown _indexOfInterest[137086] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[137087] "expr temp" "temp"
      unknown call_tmp[809076] "expr temp" "maybe param" "maybe type" "temp"
      (809079 'move' call_tmp[809076](137105 call(137102 call (partial) _getChildCount _mt[203] arg[137014])))
      unknown call_tmp[809081] "expr temp" "maybe param" "maybe type" "temp"
      (809084 'move' call_tmp[809081](137107 call chpl_direct_counted_range_iter 0 call_tmp[809076]))
      (137096 'move' _iterator[137087](137094 call _getIterator call_tmp[809081]))
      Defer
      {
        {
          (137122 call _freeIterator _iterator[137087])
        }
      }
      { scopeless type
        (137112 'move' _indexOfInterest[137086](137109 call iteratorIndex _iterator[137087]))
      }
      ForLoop[137088]
      {
        unknown i[137018] "index var" "insert auto destroy"
        (554157 'end of statement')
        (137117 'move' i[137018] _indexOfInterest[137086])
        (554158 'end of statement' i[137018])
        {
          unknown call_tmp[809088] "maybe param" "maybe type" "temp"
          (809091 'move' call_tmp[809088](137037 call(137034 call (partial) _getChild _mt[203] arg[137014]) i[137018]))
          unknown subloc[137032] "dead at end of block" "insert auto destroy"
          (645970 'init var' subloc[137032] call_tmp[809088])
          (137040 'end of statement')
          unknown call_tmp[809095] "expr temp" "maybe param" "maybe type" "temp"
          (809098 'move' call_tmp[809095](137046 call _instance _mt[203] subloc[137032]))
          unknown call_tmp[809100] "maybe param" "maybe type" "temp"
          (809103 'move' call_tmp[809100](137043 call : call_tmp[809095] unmanaged AbstractLocaleModel?[468094]))
          unknown val[137042] "dead at end of block" "insert auto destroy"
          (645972 'init var' val[137042] call_tmp[809100])
          (137053 'end of statement' i[137018] subloc[137032])
          unknown call_tmp[809105] "expr temp" "maybe param" "maybe type" "temp"
          (809108 'move' call_tmp[809105](137060 call == val[137042] nil[32]))
          unknown call_tmp[809110] "expr temp" "maybe param" "maybe type" "temp"
          (809113 'move' call_tmp[809110](137064 call _cond_test call_tmp[809105]))
          if call_tmp[809110]
          {
            (137055 call halt "error in locale initialization")
          }
          unknown call_tmp[809115] "expr temp" "maybe param" "maybe type" "temp"
          (809118 'move' call_tmp[809115](137071 call postfix! val[137042]))
          unknown call_tmp[809122] "expr temp" "maybe param" "maybe type" "temp"
          (809125 'move' call_tmp[809122](137077 call(137074 call (partial) chpl_singletonThisLocaleArray _mt[203] call_tmp[809115]) 0))
          unknown call_tmp[809129] "expr temp" "maybe param" "maybe type" "temp"
          (809132 'move' call_tmp[809129](137079 call _instance _mt[203] call_tmp[809122]))
          (137069 call = call_tmp[809129] val[137042])
          (554163 'end of statement' val[137042])
          (137084 call chpl_singletonCurrentLocaleInitPrivateSublocs subloc[137032])
          (554165 'end of statement' subloc[137032])
        }
        label _continueLabel[137091]
        _indexOfInterest[137086]
        _iterator[137087]
      }
      label _breakLabel[137092]
    }
    (608412 return _void[46])
  }
  function chpl_singletonCurrentLocaleInitPrivate[137131](arg locIdx[137133]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    const rl[137137] "dead at end of block" "const" "no auto destroy" "no copy" "ref var"
    (645977 'init ref decl' rl[137137])
    unknown call_tmp[809136] "expr temp" "maybe param" "maybe type" "temp"
    (809139 'move' call_tmp[809136](137143 call _instance _mt[203] rootLocale[136464]))
    unknown call_tmp[809141] "expr temp" "maybe param" "maybe type" "temp"
    (809144 'move' call_tmp[809141](137140 call : call_tmp[809136] borrowed RootLocale?[468091]))
    unknown call_tmp[809146] "expr temp" "maybe param" "maybe type" "temp"
    (809149 'move' call_tmp[809146](137138 call postfix! call_tmp[809141]))
    unknown call_tmp[809153] "expr temp" "maybe param" "maybe type" "temp"
    (809156 'move' call_tmp[809153](137152 call(137149 call (partial) getDefaultLocaleArray _mt[203] call_tmp[809146])))
    (645975 'move' rl[137137](645974 'addr of' call_tmp[809153]))
    (137154 'end of statement')
    unknown call_tmp[809158] "maybe param" "maybe type" "temp"
    (809161 'move' call_tmp[809158](137158 call rl[137137] locIdx[137133]))
    unknown loc[137156] "dead at end of block" "insert auto destroy"
    (645979 'init var' loc[137156] call_tmp[809158])
    (137161 'end of statement')
    unknown call_tmp[809165] "expr temp" "maybe param" "maybe type" "temp"
    (809168 'move' call_tmp[809165](137167 call _instance _mt[203] loc[137156]))
    unknown call_tmp[809170] "maybe param" "maybe type" "temp"
    (809173 'move' call_tmp[809170](137164 call : call_tmp[809165] unmanaged AbstractLocaleModel?[468094]))
    unknown val[137163] "dead at end of block" "insert auto destroy"
    (645981 'init var' val[137163] call_tmp[809170])
    (137174 'end of statement' rl[137137] loc[137156])
    unknown call_tmp[809175] "expr temp" "maybe param" "maybe type" "temp"
    (809178 'move' call_tmp[809175](137179 call == val[137163] nil[32]))
    unknown call_tmp[809180] "expr temp" "maybe param" "maybe type" "temp"
    (809183 'move' call_tmp[809180](137183 call _cond_test call_tmp[809175]))
    if call_tmp[809180]
    {
      (137176 call halt "error in locale initialization")
    }
    unknown call_tmp[809185] "expr temp" "maybe param" "maybe type" "temp"
    (809188 'move' call_tmp[809185](137190 call postfix! val[137163]))
    unknown call_tmp[809192] "expr temp" "maybe param" "maybe type" "temp"
    (809195 'move' call_tmp[809192](137196 call(137193 call (partial) chpl_singletonThisLocaleArray _mt[203] call_tmp[809185]) 0))
    unknown call_tmp[809199] "expr temp" "maybe param" "maybe type" "temp"
    (809202 'move' call_tmp[809199](137198 call _instance _mt[203] call_tmp[809192]))
    (137188 call = call_tmp[809199] val[137163])
    (554170 'end of statement' val[137163])
    (137203 call chpl_singletonCurrentLocaleInitPrivateSublocs loc[137156])
    (554172 'end of statement' loc[137156])
    (608414 return _void[46])
  }
  function chpl_task_getRequestedSubloc[137207]() : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
  {
  }
  { scopeless type
    chpl_sublocID_t[135191]
  }
  function chpl_getLocaleID[137213](ref arg localeID[137216]:chpl_localeID_t[306449]) : _unknown[42] "export" "insert line file info" "local args" "no return value for void"
  {
    unknown call_tmp[809204] "expr temp" "maybe param" "maybe type" "temp"
    (809207 'move' call_tmp[809204](430945 call here_id[137226]))
    (137220 call = localeID[137216] call_tmp[809204])
    (608416 return _void[46])
  }
  function here_id[137226]() : _unknown[42] "inline" "no parens"
  {
    unknown ret[608420] "RVV" "temp"
    unknown call_tmp[809209] "expr temp" "maybe param" "maybe type" "temp"
    (809212 'move' call_tmp[809209](137243 call _cond_test localeModelHasSublocales[306867]))
    if call_tmp[809209]
    {
      unknown call_tmp[809214] "expr temp" "maybe param" "maybe type" "temp"
      (809217 'move' call_tmp[809214](430947 call chpl_nodeID[305038]))
      unknown call_tmp[809219] "expr temp" "maybe param" "maybe type" "temp"
      (809222 'move' call_tmp[809219](137234 call chpl_task_getRequestedSubloc))
      unknown call_tmp[809224] "expr temp" "maybe param" "maybe type" "temp"
      (809227 'move' call_tmp[809224](137231 call chpl_rt_buildLocaleID call_tmp[809214] call_tmp[809219]))
      (608425 'move' ret[608420](608424 'deref' call_tmp[809224]))
      gotoReturn _end_here_id[608418] _end_here_id[608418]
    }
    {
      unknown call_tmp[809229] "expr temp" "maybe param" "maybe type" "temp"
      (809232 'move' call_tmp[809229](430949 call chpl_nodeID[305038]))
      unknown call_tmp[809234] "expr temp" "maybe param" "maybe type" "temp"
      (809237 'move' call_tmp[809234](137238 call chpl_rt_buildLocaleID call_tmp[809229] c_sublocid_any[135202]))
      (608430 'move' ret[608420](608429 'deref' call_tmp[809234]))
      gotoReturn _end_here_id[608418] _end_here_id[608418]
    }
    label _end_here_id[608418]
    (608422 return ret[608420])
  }
  function chpl_localeID_to_locale[137251](arg id[137254]:chpl_localeID_t[306449]) : _unknown[42] "fn returns infinite lifetime"
  {
    unknown ret[608436] "RVV" "temp"
    unknown call_tmp[809241] "expr temp" "maybe param" "maybe type" "temp"
    (809244 'move' call_tmp[809241](137308 call _instance _mt[203] rootLocale[136464]))
    unknown call_tmp[809246] "expr temp" "maybe param" "maybe type" "temp"
    (809249 'move' call_tmp[809246](137305 call != call_tmp[809241] nil[32]))
    unknown call_tmp[809251] "expr temp" "maybe param" "maybe type" "temp"
    (809254 'move' call_tmp[809251](137312 call _cond_test call_tmp[809246]))
    if call_tmp[809251]
    {
      unknown call_tmp[809258] "expr temp" "maybe param" "maybe type" "temp"
      (809261 'move' call_tmp[809258](137265 call _instance _mt[203] rootLocale[136464]))
      unknown call_tmp[809263] "expr temp" "maybe param" "maybe type" "temp"
      (809266 'move' call_tmp[809263](137262 call : call_tmp[809258] borrowed AbstractRootLocale?[468100]))
      unknown call_tmp[809268] "expr temp" "maybe param" "maybe type" "temp"
      (809271 'move' call_tmp[809268](137260 call postfix! call_tmp[809263]))
      unknown call_tmp[809275] "expr temp" "maybe param" "maybe type" "temp"
      (809278 'move' call_tmp[809275](137276 call(137273 call (partial) localeIDtoLocale _mt[203] call_tmp[809268]) id[137254]))
      (608442 'move' ret[608436](608441 'coerce' call_tmp[809275] locale[234]))
      gotoReturn _end_chpl_localeID_to_locale[608434] _end_chpl_localeID_to_locale[608434]
    }
    {
      unknown call_tmp[809282] "expr temp" "maybe param" "maybe type" "temp"
      (809285 'move' call_tmp[809282](137295 call _instance _mt[203] dummyLocale[135279]))
      unknown call_tmp[809287] "expr temp" "maybe param" "maybe type" "temp"
      (809290 'move' call_tmp[809287](137292 call == call_tmp[809282] nil[32]))
      unknown call_tmp[809292] "expr temp" "maybe param" "maybe type" "temp"
      (809295 'move' call_tmp[809292](137299 call _cond_test call_tmp[809287]))
      if call_tmp[809292]
      {
        unknown call_tmp[809299] "expr temp" "maybe param" "maybe type" "temp"
        (809302 'move' call_tmp[809299](137284 call _instance _mt[203] dummyLocale[135279]))
        unknown call_tmp[809304] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (809307 'move' call_tmp[809304](1000126 'new' DummyLocale[430798](?)(_chpl_manager = unmanaged[183](?))))
        (137281 call = call_tmp[809299] call_tmp[809304])
      }
      (608448 'move' ret[608436](608447 'coerce' dummyLocale[135279] locale[234]))
      gotoReturn _end_chpl_localeID_to_locale[608434] _end_chpl_localeID_to_locale[608434]
    }
    label _end_chpl_localeID_to_locale[608434]
    (608438 return ret[608436])
  }
  { scopeless type
    locale[234]
  }
  function chpl_taskRunningCntInc[137320]() : _unknown[42] "export" "insert line file info" "inc running task" "local args" "no return value for void"
  {
    unknown call_tmp[809309] "expr temp" "maybe param" "maybe type" "temp"
    (809312 'move' call_tmp[809309](137331 call _cond_test rootLocaleInitialized[52042]))
    if call_tmp[809309]
    {
      unknown call_tmp[809314] "expr temp" "maybe param" "maybe type" "temp"
      (809317 'move' call_tmp[809314](402562 call here[135591]))
      (137328 call(137325 call (partial) runningTaskCntAdd _mt[203] call_tmp[809314]) 1)
    }
    (608452 return _void[46])
  }
  function chpl_taskRunningCntDec[137337]() : _unknown[42] "export" "insert line file info" "dec running task" "local args" "no return value for void"
  {
    unknown call_tmp[809321] "expr temp" "maybe param" "maybe type" "temp"
    (809324 'move' call_tmp[809321](137348 call _cond_test rootLocaleInitialized[52042]))
    if call_tmp[809321]
    {
      unknown call_tmp[809326] "expr temp" "maybe param" "maybe type" "temp"
      (809329 'move' call_tmp[809326](402564 call here[135591]))
      (137345 call(137342 call (partial) runningTaskCntSub _mt[203] call_tmp[809326]) 1)
    }
    (608454 return _void[46])
  }
  function chpl_taskRunningCntReset[137354]() : _unknown[42] "export" "insert line file info" "local args" "no return value for void"
  {
    unknown call_tmp[809333] "expr temp" "maybe param" "maybe type" "temp"
    (809336 'move' call_tmp[809333](402566 call here[135591]))
    (137363 call(137360 call (partial) runningTaskCntSet _mt[203] call_tmp[809333]) 0)
    (608456 return _void[46])
  }
  function |writeSerializable[475227]() : _unknown[42] "ImplementsStmt wrapper"
  { writeSerializable[310070] BaseLocale[397505](?)
    {
    }
    (608460 return _void[46])
  }
  (396156 'used modules list'(135158 'use' LocaleModel[309563] 'as' _)(135162 'import' HaltWrappers[518])(135164 'use' CTypes[51217]))
}