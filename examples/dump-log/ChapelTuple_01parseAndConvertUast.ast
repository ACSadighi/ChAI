AST dump for ChapelTuple after pass parseAndConvertUast.
Module use list: 

{
  { scopeless
    (99452 'use' ChapelStandard)
    (99454 'use' DSIUtil)
  }
  type _tuple[246](?) unknown size[99457] "param" int[10]
  function chpl__init_tuple[99463](param arg size[99466] :
  int[10]) : _unknown[42] "tuple init fn" "inline"
  {
  }
  function _build_tuple[99472](arg t[99475]:_any[141](?) ...) type : _unknown[42] "build tuple" "build tuple type" "inline"
  {
  }
  function _build_tuple[99481](arg x[99484]:_any[141](?) ...) : _unknown[42] "build tuple" "inline"
  {
    (99488 return x)
  }
  function _build_tuple_noref[99492](arg t[99495]:_any[141](?) ...) type : _unknown[42] "do not allow ref" "build tuple" "build tuple type" "inline"
  {
  }
  function _build_tuple_always_allow_ref[99501](arg x[99504]:_any[141](?) ...) : _unknown[42] "allow ref" "build tuple" "inline" "suppress lvalue error"
  {
    (99508 return x)
  }
  function chpl__unref[99512](arg t[99514]:_any[141](?)) type : _unknown[42] "inline"
  {
    if(99529 call _cond_test(99527 call isTupleType t))
    {
      { scopeless
        (99517 return(99519 call _build_tuple_noref(99521 'expand_tuple' t)))
      }
    }
    {
      { scopeless
        (99523 return t)
      }
    }
  }
  function *[99537](param arg p[99540] :
  int[10], arg t[99543]:_any[141](?)) type : _unknown[42] "build tuple" "build tuple type" "operator" "star tuple"
  {
  }
  function *[99548](param arg p[99551] :
  uint[86], arg t[99554]:_any[141](?)) type : _unknown[42] "operator"
  {
    if(99582 call _cond_test(99576 call > p(99580 call max int[10])))
    {
      { scopeless
        (99558 call compilerError(99559 call +(99561 call + "Tuples of size >"(99566 call :(99569 call max int[10]) string[244])) " are not currently supported"))
      }
    }
    { scopeless
      unknown pAsInt[99588] "param"(99589 call : p int[10])
      (99594 'end of statement')
    }
    (99595 return(99596 call * pAsInt t))
  }
  function *[99602](param arg p[99605] :
  bool, arg t[99608]:_any[141](?)) type : _unknown[42] "last resort" "operator"
  {
    (99612 call compilerError "Tuple types cannot be defined using boolean sizes")
  }
  function *[99618](arg p[99621] :
  bool, arg t[99624]:_any[141](?)) type : _unknown[42] "last resort" "operator"
  {
    (99628 call compilerError "Tuple types cannot be defined using boolean sizes")
  }
  function _build_star_tuple_noref[99632](param arg p[99635] :
  int[10], arg t[99638]:_any[141](?)) type : _unknown[42] "do not allow ref" "build tuple" "build tuple type" "star tuple"
  {
  }
  function *[99643](arg t[99645]:_any[141](?), param arg p[99648] :
  int[10]) : _unknown[42] "last resort" "operator"
  {
    (99653 call compilerError "<type>*<param int> not supported.  If you're trying to specify a homogeneous tuple type, use <param int>*<type>.")
  }
  function *[99659](arg p[99662] :
  integral, arg t[99665]:_any[141](?)) type : _unknown[42] "last resort" "operator"
  {
    (99669 call compilerError "tuple size must be known at compile-time")
  }
  function chpl__tuplify[99675](arg x[99677]:_any[141](?)) : _unknown[42] "inline"
  {
    if(99692 call _cond_test(99690 call isTuple x))
    {
      { scopeless
        (99680 return x)
      }
    }
    {
      { scopeless
        (99683 return(99686 call _build_tuple x))
      }
    }
  }
  function _check_tuple_var_decl[99700](const  ref arg x[99703] :
  _tuple, param arg p[99706]:_any[141](?)) param : _unknown[42]
  {
    if(99750 call _cond_test(99743 call == p(99747 call . x c"size")))
    {
      (99710 return 1)
    }
    {
      (99714 call compilerError(99715 call +(99717 call +(99719 call +(99721 call + "tuple size ("(99726 call :(99729 call . x c"size") string[244])) ") must match the number of grouped variables (")(99736 call : p string[244])) ")"))
      (99741 return 0)
    }
  }
  function _check_tuple_var_decl[99756](const  ref arg x[99758]:_any[141](?), param arg p[99760]:_any[141](?)) param : _unknown[42]
  {
    (99764 call compilerError "illegal tuple variable declaration with non-tuple initializer")
    (99768 return 0)
  }
  function =[99772](ref arg x[99775] :
  _tuple, arg y[99779] :
  _tuple) : _unknown[42] "no array view elision" "assignop" "compiler generated" "inline" "last resort" "operator"
  {
    {
      unknown i[99793] "index var" 0
      unknown tmp[99814] "maybe param" "temp"
      (99826 'move' tmp[99814](99824 call chpl_compute_low_param_loop_bound 0(99796 call -(99799 call . x c"size") 1)))
      unknown tmp[99815] "maybe param" "temp"
      (99839 'move' tmp[99815](99837 call chpl_compute_high_param_loop_bound 0(99831 call -(99833 call . x c"size") 1)))
      unknown tmp[99816] "maybe param" "temp"
      (99842 'move' tmp[99816] 1)
      ParamForLoop[99844]
      { i[99793] tmp[99814] tmp[99815] tmp[99816]
        { scopeless
          (99805 call =(99808 call x i)(99811 call y i))
        }
      }
      label _unused_continueLabel[99818]
      label _breakLabel[99817]
    }
  }
  where {
    (99782 call ==(99785 call . x c"size")(99789 call . y c"size"))
  }
  function _unknown[42].this[99856](arg _mt[99866]:_MT[201], arg this[99859] :
  _tuple, arg i[99863] :
  integral) ref : _unknown[42] "method" "reference to const when const this" "star tuple accessor"
  {
    if(99880 call _cond_test(99875 call !(99878 call isHomogeneousTuple this)))
    {
      { scopeless
        (99870 call compilerError "invalid access of non-homogeneous tuple by runtime value")
      }
    }
    if(99911 call _cond_test boundsChecking)
    {
      { scopeless
        if(99905 call _cond_test(99892 call ||(99894 call < i 0)(99898 call > i(99901 call - size 1))))
        {
          { scopeless
            (99886 call halt "tuple access out of bounds: " i)
          }
        }
      }
    }
    (99916 return(99917 'get svec member' this i))
  }
  function _unknown[42].this[99922](arg _mt[99932]:_MT[201], arg this[99925] :
  _tuple, arg i[99929] :
  bool) ref : _unknown[42] "method" "reference to const when const this" "star tuple accessor"
  {
    if(99944 call _cond_test(99939 call !(99942 call isHomogeneousTuple this)))
    {
      { scopeless
        (99936 call compilerError "invalid access of non-homogeneous tuple by runtime value")
      }
    }
    if(99973 call _cond_test boundsChecking)
    {
      { scopeless
        if(99967 call _cond_test(99954 call ||(99956 call < i 0)(99960 call > i(99963 call - size 1))))
        {
          { scopeless
            (99950 call halt "tuple access out of bounds: " i)
          }
        }
      }
    }
    (99978 return(99979 'get svec member' this i))
  }
  { scopeless
    unknown CHPL_WARN_TUPLE_ITERATION[99985] "config" "param" "unset"
    (99990 'end of statement')
  }
  function _unknown[42].these[99991](arg _mt[99997]:_MT[201], ref arg this[99994] :
  _tuple) ref : _unknown[42] "iterator fn" "method" "reference to const when const this"
  {
    if(100011 call _cond_test(100006 call !(100009 call isHomogeneousTuple this)))
    {
      { scopeless
        (100001 call compilerError "Heterogeneous tuples don't support this style of loop yet")
      }
    }
    if(100026 call _cond_test(100022 call == CHPL_WARN_TUPLE_ITERATION "true"))
    {
      { scopeless
        (100017 call compilerWarning "Iterating over tuples. If you intended to use zippered iteration, add the new keyword 'zip' before the tuple of iteratable exp)
      }
    }
    {
      unknown _indexOfInterest[100055] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[100056] "expr temp" "temp"
      (100065 'move' _iterator[100056](100063 call _getIterator(100075 call chpl_direct_counted_range_iter 0(100071 call . this c"size"))))
      Defer
      {
        {
          (100090 call _freeIterator _iterator[100056])
        }
      }
      { scopeless type
        (100080 'move' _indexOfInterest[100055](100077 call iteratorIndex _iterator[100056]))
      }
      ForLoop[100057] order-independent
      {
        unknown i[100031] "index var" "insert auto destroy"
        (100085 'move' i[100031] _indexOfInterest[100055])
        {
          (100049 yield(100051 call this i))
        }
        label _continueLabel[100060]
        _indexOfInterest[100055]
        _iterator[100056]
      }
      label _breakLabel[100061]
    }
  }
  function _unknown[42].these[100099](arg _mt[100109]:_MT[201], arg this[100102] :
  _tuple, param arg tag[100106] :
  iterKind) : _unknown[42] "iterator fn" "method"
  {
    { scopeless
      const numTasks[100122] "const"(100132 IfExpr (100123 call == dataParTasksPerLocale 0) then
      { scopeless
        (100128 call . here c"maxTaskPar")
      } else
      { scopeless
        dataParTasksPerLocale
      } )
      (100136 'end of statement')
    }
    { scopeless
      const ignoreRunning[100138] "const" dataParIgnoreRunningTasks
      (100141 'end of statement')
    }
    { scopeless
      const minIndicesPerTask[100143] "const" dataParMinGranularity
      (100146 'end of statement')
    }
    { scopeless
      const length[100148] "const"(100150 call . this c"size")
      (100154 'end of statement')
    }
    { scopeless
      const myRange[100156] "const"(100164 call _build_tuple(100158 call #(100161 call chpl_build_low_bounded_range 0) length))
      (100167 'end of statement')
    }
    { scopeless
      unknown tmp[100179] "temp"(100174 call _computeChunkStuff numTasks ignoreRunning minIndicesPerTask myRange)
      (100183 call _check_tuple_var_decl tmp[100179] 2)
      unknown numChunks[100169](100180 call tmp[100179] 0)
      (100188 'end of statement')
    }
    {
      unknown tmpIter[387126] "expr temp" "maybe ref" "no copy" "temp"
      (387129 'move' tmpIter[387126](100191 call #(100194 call chpl_build_low_bounded_range 0) numChunks))
      unknown isBounded[387302] "maybe param" "temp"
      (387308 'move' isBounded[387302](387304 call chpl_supportsBoundedCoforall tmpIter[387126] 0))
      if isBounded[387302]
      {
        const _coforallCount[387171] "const" "end count" "temp"
        (387239 'move' _coforallCount[387171](387236 call _endCountAlloc 1))
        unknown numTasks[387172] "temp"
        (387223 'move' numTasks[387172](387219 call chpl_boundedCoforallSize tmpIter[387126] 0))
        (387214 call _upEndCount _coforallCount[387171] 1 numTasks[387172])
        (387211 call chpl_resetTaskSpawn numTasks[387172])
        unknown _indexOfInterest[387179] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[387180] "expr temp" "temp"
        (387189 'move' _iterator[387180](387187 call _getIterator tmpIter[387126]))
        Defer
        {
          {
            (387204 call _freeIterator _iterator[387180])
          }
        }
        { scopeless type
          (387194 'move' _indexOfInterest[387179](387191 call iteratorIndex _iterator[387180]))
        }
        ForLoop[387181]
        {
          unknown chunk[387133] "coforall index var" "index var" "insert auto destroy"
          (387199 'move' chunk[387133] _indexOfInterest[387179])
          {
            {
              { scopeless
                const tmp[387137] "const" "temp"(387139 call _computeBlock length numChunks chunk(387144 call - length 1))
                (387149 call _check_tuple_var_decl tmp[387137] 2)
                const lo[387152] "const"(387154 call tmp[387137] 0)
                const hi[387157] "const"(387159 call tmp[387137] 1)
                (387162 'end of statement')
              }
              (387163 yield(387165 call _build_tuple(387167 call chpl_build_bounded_range lo hi)))
            }
            (387174 call _downEndCount _coforallCount[387171] nil[32])
            (387173 'coforall loop')
          }
          label _continueLabel[387184]
          _indexOfInterest[387179]
          _iterator[387180]
        }
        label _breakLabel[387185]
        Defer
        {
          {
            (387226 call _endCountFree _coforallCount[387171])
          }
        }
        (387231 call _waitEndCount _coforallCount[387171] 1 numTasks[387172])
      }
      {
        const _coforallCount[387243] "const" "end count" "temp"
        (387299 'move' _coforallCount[387243](387296 call _endCountAlloc 1))
        unknown _indexOfInterest[387251] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[387252] "expr temp" "temp"
        (387261 'move' _iterator[387252](387259 call _getIterator tmpIter[387126]))
        Defer
        {
          {
            (387276 call _freeIterator _iterator[387252])
          }
        }
        { scopeless type
          (387266 'move' _indexOfInterest[387251](387263 call iteratorIndex _iterator[387252]))
        }
        ForLoop[387253]
        {
          unknown chunk[100189] "coforall index var" "index var" "insert auto destroy"
          (387271 'move' chunk[100189] _indexOfInterest[387251])
          (387283 call _upEndCount _coforallCount[387243] 1)
          {
            {
              { scopeless
                const tmp[100212] "const" "temp"(100204 call _computeBlock length numChunks chunk(100208 call - length 1))
                (100219 call _check_tuple_var_decl tmp[100212] 2)
                const lo[100199] "const"(100213 call tmp[100212] 0)
                const hi[100201] "const"(100216 call tmp[100212] 1)
                (100224 'end of statement')
              }
              (100225 yield(100231 call _build_tuple(100229 call chpl_build_bounded_range lo hi)))
            }
            (387246 call _downEndCount _coforallCount[387243] nil[32])
            (387245 'coforall loop')
          }
          label _continueLabel[387256]
          _indexOfInterest[387251]
          _iterator[387252]
        }
        label _breakLabel[387257]
        Defer
        {
          {
            (387287 call _endCountFree _coforallCount[387243])
          }
        }
        (387292 call _waitEndCount _coforallCount[387243] 1)
      }
    }
  }
  where {
    (100111 call == tag(100117 call . iterKind c"leader"))
  }
  function _unknown[42].these[100237](arg _mt[100251]:_MT[201], ref arg this[100240] :
  _tuple, param arg tag[100244] :
  iterKind, arg followThis[100248] :
  _tuple) ref : _unknown[42] "iterator fn" "method" "reference to const when const this"
  {
    if(100276 call _cond_test(100269 call !=(100272 call . followThis c"size") 1))
    {
      { scopeless
        (100264 call compilerError "Tuple zipped with incompatible iterator expression.")
      }
    }
    { scopeless
      unknown fThis[100282](100284 call followThis 0)
      (100287 'end of statement')
    }
    {
      unknown _indexOfInterest[100304] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[100305] "expr temp" "temp"
      (100314 'move' _iterator[100305](100312 call _getIterator fThis))
      Defer
      {
        {
          (100329 call _freeIterator _iterator[100305])
        }
      }
      { scopeless type
        (100319 'move' _indexOfInterest[100304](100316 call iteratorIndex _iterator[100305]))
      }
      ForLoop[100306] order-independent
      {
        unknown i[100288] "index var" "insert auto destroy"
        (100324 'move' i[100288] _indexOfInterest[100304])
        {
          (100298 yield(100300 call this i))
        }
        label _continueLabel[100309]
        _indexOfInterest[100304]
        _iterator[100305]
      }
      label _breakLabel[100310]
    }
  }
  where {
    (100253 call == tag(100259 call . iterKind c"follower"))
  }
  function _unknown[42].indices[100339](arg _mt[100345]:_MT[201], arg this[100342] :
  _tuple) : _unknown[42] "method" "no parens"
  {
    (100348 return(100356 call chpl_build_bounded_range 0(100354 call chpl__nudgeHighBound(100351 call . this c"size"))))
  }
  function :[100360](arg x[100367] :
  (100365 call _build_tuple ?[227] ?[227]), arg t[100373] :
  (100371 call complex[111] 64)) : _unknown[42] "inline" "operator"
  {
    function _chpl_complex64[100377](arg re[100382] :
    (100380 call real[13] 32), arg im[100388] :
    (100386 call real[13] 32)) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      (100392 call complex[111] 64)
    }
    (100397 return(100399 call _chpl_complex64(100400 call :(100403 call x 0)(100406 call real[13] 32))(100408 call :(100411 call x 1)(100414 call real[13] 32))))
  }
  function :[100418](arg x[100425] :
  (100423 call _build_tuple ?[227] ?[227]), arg t[100431] :
  (100429 call complex[111] 128)) : _unknown[42] "inline" "operator"
  {
    function _chpl_complex128[100435](arg re[100440] :
    (100438 call real[13] 64), arg im[100446] :
    (100444 call real[13] 64)) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      (100450 call complex[111] 128)
    }
    (100455 return(100457 call _chpl_complex128(100458 call :(100461 call x 0)(100464 call real[13] 64))(100466 call :(100469 call x 1)(100472 call real[13] 64))))
  }
  function :[100476](arg x[100479] :
  _tuple, arg t[100483] :
  _tuple) : _unknown[42] "inline" "operator" "tuple cast fn" "unsafe"
  {
  }
  function chpl__tupleRest[100489](arg t[100492] :
  _tuple) : _unknown[42] "inline"
  {
    function chpl__tupleRestHelper[100496](arg first[100498]:_any[141](?), arg rest[100501]:_any[141](?) ...) : _unknown[42] "inline"
    {
      (100505 return rest)
    }
    (100509 return(100511 call chpl__tupleRestHelper(100513 'expand_tuple' t)))
  }
  function +[100516](arg a[100519] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown result[100524](100526 'typeof' a)
      (100528 'end of statement')
    }
    {
      unknown d[100529] "index var" 0
      unknown tmp[100552] "maybe param" "temp"
      (100564 'move' tmp[100552](100562 call chpl_compute_low_param_loop_bound 0(100532 call -(100535 call . a c"size") 1)))
      unknown tmp[100553] "maybe param" "temp"
      (100577 'move' tmp[100553](100575 call chpl_compute_high_param_loop_bound 0(100569 call -(100571 call . a c"size") 1)))
      unknown tmp[100554] "maybe param" "temp"
      (100580 'move' tmp[100554] 1)
      ParamForLoop[100582]
      { d[100529] tmp[100552] tmp[100553] tmp[100554]
        { scopeless
          (100541 call =(100544 call result d)(100546 call +(100549 call a d)))
        }
      }
      label _unused_continueLabel[100556]
      label _breakLabel[100555]
    }
    (100591 return result)
  }
  function -[100595](arg a[100598] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown result[100603](100605 'typeof' a)
      (100607 'end of statement')
    }
    {
      unknown d[100608] "index var" 0
      unknown tmp[100631] "maybe param" "temp"
      (100643 'move' tmp[100631](100641 call chpl_compute_low_param_loop_bound 0(100611 call -(100614 call . a c"size") 1)))
      unknown tmp[100632] "maybe param" "temp"
      (100656 'move' tmp[100632](100654 call chpl_compute_high_param_loop_bound 0(100648 call -(100650 call . a c"size") 1)))
      unknown tmp[100633] "maybe param" "temp"
      (100659 'move' tmp[100633] 1)
      ParamForLoop[100661]
      { d[100608] tmp[100631] tmp[100632] tmp[100633]
        { scopeless
          (100620 call =(100623 call result d)(100625 call -(100628 call a d)))
        }
      }
      label _unused_continueLabel[100635]
      label _breakLabel[100634]
    }
    (100670 return result)
  }
  function ~[100674](arg a[100677] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown result[100682](100684 'typeof' a)
      (100686 'end of statement')
    }
    {
      unknown d[100687] "index var" 0
      unknown tmp[100710] "maybe param" "temp"
      (100722 'move' tmp[100710](100720 call chpl_compute_low_param_loop_bound 0(100690 call -(100693 call . a c"size") 1)))
      unknown tmp[100711] "maybe param" "temp"
      (100735 'move' tmp[100711](100733 call chpl_compute_high_param_loop_bound 0(100727 call -(100729 call . a c"size") 1)))
      unknown tmp[100712] "maybe param" "temp"
      (100738 'move' tmp[100712] 1)
      ParamForLoop[100740]
      { d[100687] tmp[100710] tmp[100711] tmp[100712]
        { scopeless
          (100699 call =(100702 call result d)(100704 call ~(100707 call a d)))
        }
      }
      label _unused_continueLabel[100714]
      label _breakLabel[100713]
    }
    (100749 return result)
  }
  function ![100753](arg a[100756] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown result[100761](100763 'typeof' a)
      (100765 'end of statement')
    }
    {
      unknown d[100766] "index var" 0
      unknown tmp[100789] "maybe param" "temp"
      (100801 'move' tmp[100789](100799 call chpl_compute_low_param_loop_bound 0(100769 call -(100772 call . a c"size") 1)))
      unknown tmp[100790] "maybe param" "temp"
      (100814 'move' tmp[100790](100812 call chpl_compute_high_param_loop_bound 0(100806 call -(100808 call . a c"size") 1)))
      unknown tmp[100791] "maybe param" "temp"
      (100817 'move' tmp[100791] 1)
      ParamForLoop[100819]
      { d[100766] tmp[100789] tmp[100790] tmp[100791]
        { scopeless
          (100778 call =(100781 call result d)(100783 call !(100786 call a d)))
        }
      }
      label _unused_continueLabel[100793]
      label _breakLabel[100792]
    }
    (100828 return result)
  }
  function max[100832](arg t[100834]:_any[141](?)) : _unknown[42]
  {
    { scopeless
      unknown result[100842] t
      (100845 'end of statement')
    }
    {
      unknown i[100846] "index var" 0
      unknown tmp[100869] "maybe param" "temp"
      (100881 'move' tmp[100869](100879 call chpl_compute_low_param_loop_bound 0(100849 call -(100852 call . result c"size") 1)))
      unknown tmp[100870] "maybe param" "temp"
      (100894 'move' tmp[100870](100892 call chpl_compute_high_param_loop_bound 0(100886 call -(100888 call . result c"size") 1)))
      unknown tmp[100871] "maybe param" "temp"
      (100897 'move' tmp[100871] 1)
      ParamForLoop[100899]
      { i[100846] tmp[100869] tmp[100870] tmp[100871]
        {
          (100859 call =(100862 call result i)(100865 call max(100867 call t i)))
        }
      }
      label _unused_continueLabel[100873]
      label _breakLabel[100872]
    }
    (100908 return result)
  }
  where {
    (100838 call isTupleType t)
  }
  { scopeless type
    t
  }
  function min[100914](arg t[100916]:_any[141](?)) : _unknown[42]
  {
    { scopeless
      unknown result[100924] t
      (100927 'end of statement')
    }
    {
      unknown i[100928] "index var" 0
      unknown tmp[100951] "maybe param" "temp"
      (100963 'move' tmp[100951](100961 call chpl_compute_low_param_loop_bound 0(100931 call -(100934 call . result c"size") 1)))
      unknown tmp[100952] "maybe param" "temp"
      (100976 'move' tmp[100952](100974 call chpl_compute_high_param_loop_bound 0(100968 call -(100970 call . result c"size") 1)))
      unknown tmp[100953] "maybe param" "temp"
      (100979 'move' tmp[100953] 1)
      ParamForLoop[100981]
      { i[100928] tmp[100951] tmp[100952] tmp[100953]
        {
          (100941 call =(100944 call result i)(100947 call min(100949 call t i)))
        }
      }
      label _unused_continueLabel[100955]
      label _breakLabel[100954]
    }
    (100990 return result)
  }
  where {
    (100920 call isTupleType t)
  }
  { scopeless type
    t
  }
  function chpl_TwoHomogTuples[100996](arg t1[100998]:_any[141](?), arg t2[101000]:_any[141](?)) param : _unknown[42]
  {
    (101003 return(101004 call &&(101007 call isHomogeneousTuple t1)(101010 call isHomogeneousTuple t2)))
  }
  function +[101014](arg a[101017] :
  _tuple, arg b[101021] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    if(101045 call _cond_test(101035 call !=(101038 call . a c"size")(101042 call . b c"size")))
    {
      { scopeless
        (101030 call compilerError "tuple operands to + have different sizes")
      }
    }
    { scopeless
      unknown result[101051](101052 call *(101055 call . a c"size")(101066 'typeof'(101058 call +(101061 call a 0)(101064 call b 0))))
      (101068 'end of statement')
    }
    {
      unknown d[101069] "index var" 0
      unknown tmp[101095] "maybe param" "temp"
      (101107 'move' tmp[101095](101105 call chpl_compute_low_param_loop_bound 0(101072 call -(101075 call . a c"size") 1)))
      unknown tmp[101096] "maybe param" "temp"
      (101120 'move' tmp[101096](101118 call chpl_compute_high_param_loop_bound 0(101112 call -(101114 call . a c"size") 1)))
      unknown tmp[101097] "maybe param" "temp"
      (101123 'move' tmp[101097] 1)
      ParamForLoop[101125]
      { d[101069] tmp[101095] tmp[101096] tmp[101097]
        { scopeless
          (101081 call =(101084 call result d)(101086 call +(101089 call a d)(101092 call b d)))
        }
      }
      label _unused_continueLabel[101099]
      label _breakLabel[101098]
    }
    (101134 return result)
  }
  where {
    (101025 call chpl_TwoHomogTuples a b)
  }
  function +[101139](arg a[101142] :
  _tuple, arg b[101146] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    if(101164 call _cond_test(101154 call !=(101157 call . a c"size")(101161 call . b c"size")))
    {
      { scopeless
        (101151 call compilerError "tuple operands to + have different sizes")
      }
    }
    if(101211 call _cond_test(101204 call ==(101207 call . a c"size") 1))
    {
      { scopeless
        (101169 return(101179 call _build_tuple(101171 call +(101174 call a 0)(101177 call b 0))))
      }
    }
    {
      { scopeless
        (101182 return(101201 call _build_tuple(101184 call +(101187 call a 0)(101190 call b 0))(101200 'expand_tuple'(101192 call +(101195 call chpl__tupleRest a)(101198 call chpl__tupleRest b)))))
      }
    }
  }
  function -[101219](arg a[101222] :
  _tuple, arg b[101226] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    if(101250 call _cond_test(101240 call !=(101243 call . a c"size")(101247 call . b c"size")))
    {
      { scopeless
        (101235 call compilerError "tuple operands to - have different sizes")
      }
    }
    { scopeless
      unknown result[101256](101257 call *(101260 call . a c"size")(101271 'typeof'(101263 call -(101266 call a 0)(101269 call b 0))))
      (101273 'end of statement')
    }
    {
      unknown d[101274] "index var" 0
      unknown tmp[101300] "maybe param" "temp"
      (101312 'move' tmp[101300](101310 call chpl_compute_low_param_loop_bound 0(101277 call -(101280 call . a c"size") 1)))
      unknown tmp[101301] "maybe param" "temp"
      (101325 'move' tmp[101301](101323 call chpl_compute_high_param_loop_bound 0(101317 call -(101319 call . a c"size") 1)))
      unknown tmp[101302] "maybe param" "temp"
      (101328 'move' tmp[101302] 1)
      ParamForLoop[101330]
      { d[101274] tmp[101300] tmp[101301] tmp[101302]
        { scopeless
          (101286 call =(101289 call result d)(101291 call -(101294 call a d)(101297 call b d)))
        }
      }
      label _unused_continueLabel[101304]
      label _breakLabel[101303]
    }
    (101339 return result)
  }
  where {
    (101230 call chpl_TwoHomogTuples a b)
  }
  function -[101344](arg a[101347] :
  _tuple, arg b[101351] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    if(101369 call _cond_test(101359 call !=(101362 call . a c"size")(101366 call . b c"size")))
    {
      { scopeless
        (101356 call compilerError "tuple operands to - have different sizes")
      }
    }
    if(101416 call _cond_test(101409 call ==(101412 call . a c"size") 1))
    {
      { scopeless
        (101374 return(101384 call _build_tuple(101376 call -(101379 call a 0)(101382 call b 0))))
      }
    }
    {
      { scopeless
        (101387 return(101406 call _build_tuple(101389 call -(101392 call a 0)(101395 call b 0))(101405 'expand_tuple'(101397 call -(101400 call chpl__tupleRest a)(101403 call chpl__tupleRest b)))))
      }
    }
  }
  function *[101424](arg a[101427] :
  _tuple, arg b[101431] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    if(101455 call _cond_test(101445 call !=(101448 call . a c"size")(101452 call . b c"size")))
    {
      { scopeless
        (101440 call compilerError "tuple operands to * have different sizes")
      }
    }
    { scopeless
      unknown result[101461](101462 call *(101465 call . a c"size")(101476 'typeof'(101468 call *(101471 call a 0)(101474 call b 0))))
      (101478 'end of statement')
    }
    {
      unknown d[101479] "index var" 0
      unknown tmp[101505] "maybe param" "temp"
      (101517 'move' tmp[101505](101515 call chpl_compute_low_param_loop_bound 0(101482 call -(101485 call . a c"size") 1)))
      unknown tmp[101506] "maybe param" "temp"
      (101530 'move' tmp[101506](101528 call chpl_compute_high_param_loop_bound 0(101522 call -(101524 call . a c"size") 1)))
      unknown tmp[101507] "maybe param" "temp"
      (101533 'move' tmp[101507] 1)
      ParamForLoop[101535]
      { d[101479] tmp[101505] tmp[101506] tmp[101507]
        { scopeless
          (101491 call =(101494 call result d)(101496 call *(101499 call a d)(101502 call b d)))
        }
      }
      label _unused_continueLabel[101509]
      label _breakLabel[101508]
    }
    (101544 return result)
  }
  where {
    (101435 call chpl_TwoHomogTuples a b)
  }
  function *[101549](arg a[101552] :
  _tuple, arg b[101556] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    if(101574 call _cond_test(101564 call !=(101567 call . a c"size")(101571 call . b c"size")))
    {
      { scopeless
        (101561 call compilerError "tuple operands to * have different sizes")
      }
    }
    if(101621 call _cond_test(101614 call ==(101617 call . a c"size") 1))
    {
      { scopeless
        (101579 return(101589 call _build_tuple(101581 call *(101584 call a 0)(101587 call b 0))))
      }
    }
    {
      { scopeless
        (101592 return(101611 call _build_tuple(101594 call *(101597 call a 0)(101600 call b 0))(101610 'expand_tuple'(101602 call *(101605 call chpl__tupleRest a)(101608 call chpl__tupleRest b)))))
      }
    }
  }
  function /[101629](arg a[101632] :
  _tuple, arg b[101636] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    if(101660 call _cond_test(101650 call !=(101653 call . a c"size")(101657 call . b c"size")))
    {
      { scopeless
        (101645 call compilerError "tuple operands to / have different sizes")
      }
    }
    { scopeless
      unknown result[101666](101667 call *(101670 call . a c"size")(101681 'typeof'(101673 call /(101676 call a 0)(101679 call b 0))))
      (101683 'end of statement')
    }
    {
      unknown d[101684] "index var" 0
      unknown tmp[101710] "maybe param" "temp"
      (101722 'move' tmp[101710](101720 call chpl_compute_low_param_loop_bound 0(101687 call -(101690 call . a c"size") 1)))
      unknown tmp[101711] "maybe param" "temp"
      (101735 'move' tmp[101711](101733 call chpl_compute_high_param_loop_bound 0(101727 call -(101729 call . a c"size") 1)))
      unknown tmp[101712] "maybe param" "temp"
      (101738 'move' tmp[101712] 1)
      ParamForLoop[101740]
      { d[101684] tmp[101710] tmp[101711] tmp[101712]
        { scopeless
          (101696 call =(101699 call result d)(101701 call /(101704 call a d)(101707 call b d)))
        }
      }
      label _unused_continueLabel[101714]
      label _breakLabel[101713]
    }
    (101749 return result)
  }
  where {
    (101640 call chpl_TwoHomogTuples a b)
  }
  function /[101754](arg a[101757] :
  _tuple, arg b[101761] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    if(101779 call _cond_test(101769 call !=(101772 call . a c"size")(101776 call . b c"size")))
    {
      { scopeless
        (101766 call compilerError "tuple operands to / have different sizes")
      }
    }
    if(101826 call _cond_test(101819 call ==(101822 call . a c"size") 1))
    {
      { scopeless
        (101784 return(101794 call _build_tuple(101786 call /(101789 call a 0)(101792 call b 0))))
      }
    }
    {
      { scopeless
        (101797 return(101816 call _build_tuple(101799 call /(101802 call a 0)(101805 call b 0))(101815 'expand_tuple'(101807 call /(101810 call chpl__tupleRest a)(101813 call chpl__tupleRest b)))))
      }
    }
  }
  function %[101834](arg a[101837] :
  _tuple, arg b[101841] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    if(101865 call _cond_test(101855 call !=(101858 call . a c"size")(101862 call . b c"size")))
    {
      { scopeless
        (101850 call compilerError "tuple operands to % have different sizes")
      }
    }
    { scopeless
      unknown result[101871](101872 call *(101875 call . a c"size")(101886 'typeof'(101878 call %(101881 call a 0)(101884 call b 0))))
      (101888 'end of statement')
    }
    {
      unknown d[101889] "index var" 0
      unknown tmp[101915] "maybe param" "temp"
      (101927 'move' tmp[101915](101925 call chpl_compute_low_param_loop_bound 0(101892 call -(101895 call . a c"size") 1)))
      unknown tmp[101916] "maybe param" "temp"
      (101940 'move' tmp[101916](101938 call chpl_compute_high_param_loop_bound 0(101932 call -(101934 call . a c"size") 1)))
      unknown tmp[101917] "maybe param" "temp"
      (101943 'move' tmp[101917] 1)
      ParamForLoop[101945]
      { d[101889] tmp[101915] tmp[101916] tmp[101917]
        { scopeless
          (101901 call =(101904 call result d)(101906 call %(101909 call a d)(101912 call b d)))
        }
      }
      label _unused_continueLabel[101919]
      label _breakLabel[101918]
    }
    (101954 return result)
  }
  where {
    (101845 call chpl_TwoHomogTuples a b)
  }
  function %[101959](arg a[101962] :
  _tuple, arg b[101966] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    if(101984 call _cond_test(101974 call !=(101977 call . a c"size")(101981 call . b c"size")))
    {
      { scopeless
        (101971 call compilerError "tuple operands to % have different sizes")
      }
    }
    if(102031 call _cond_test(102024 call ==(102027 call . a c"size") 1))
    {
      { scopeless
        (101989 return(101999 call _build_tuple(101991 call %(101994 call a 0)(101997 call b 0))))
      }
    }
    {
      { scopeless
        (102002 return(102021 call _build_tuple(102004 call %(102007 call a 0)(102010 call b 0))(102020 'expand_tuple'(102012 call %(102015 call chpl__tupleRest a)(102018 call chpl__tupleRest b)))))
      }
    }
  }
  function **[102039](arg a[102042] :
  _tuple, arg b[102046] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    if(102070 call _cond_test(102060 call !=(102063 call . a c"size")(102067 call . b c"size")))
    {
      { scopeless
        (102055 call compilerError "tuple operands to ** have different sizes")
      }
    }
    { scopeless
      unknown result[102076](102077 call *(102080 call . a c"size")(102091 'typeof'(102083 call **(102086 call a 0)(102089 call b 0))))
      (102093 'end of statement')
    }
    {
      unknown d[102094] "index var" 0
      unknown tmp[102120] "maybe param" "temp"
      (102132 'move' tmp[102120](102130 call chpl_compute_low_param_loop_bound 0(102097 call -(102100 call . a c"size") 1)))
      unknown tmp[102121] "maybe param" "temp"
      (102145 'move' tmp[102121](102143 call chpl_compute_high_param_loop_bound 0(102137 call -(102139 call . a c"size") 1)))
      unknown tmp[102122] "maybe param" "temp"
      (102148 'move' tmp[102122] 1)
      ParamForLoop[102150]
      { d[102094] tmp[102120] tmp[102121] tmp[102122]
        { scopeless
          (102106 call =(102109 call result d)(102111 call **(102114 call a d)(102117 call b d)))
        }
      }
      label _unused_continueLabel[102124]
      label _breakLabel[102123]
    }
    (102159 return result)
  }
  where {
    (102050 call chpl_TwoHomogTuples a b)
  }
  function **[102164](arg a[102167] :
  _tuple, arg b[102171] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    if(102189 call _cond_test(102179 call !=(102182 call . a c"size")(102186 call . b c"size")))
    {
      { scopeless
        (102176 call compilerError "tuple operands to ** have different sizes")
      }
    }
    if(102236 call _cond_test(102229 call ==(102232 call . a c"size") 1))
    {
      { scopeless
        (102194 return(102204 call _build_tuple(102196 call **(102199 call a 0)(102202 call b 0))))
      }
    }
    {
      { scopeless
        (102207 return(102226 call _build_tuple(102209 call **(102212 call a 0)(102215 call b 0))(102225 'expand_tuple'(102217 call **(102220 call chpl__tupleRest a)(102223 call chpl__tupleRest b)))))
      }
    }
  }
  function &[102244](arg a[102247] :
  _tuple, arg b[102251] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    if(102275 call _cond_test(102265 call !=(102268 call . a c"size")(102272 call . b c"size")))
    {
      { scopeless
        (102260 call compilerError "tuple operands to & have different sizes")
      }
    }
    { scopeless
      unknown result[102281](102282 call *(102285 call . a c"size")(102296 'typeof'(102288 call &(102291 call a 0)(102294 call b 0))))
      (102298 'end of statement')
    }
    {
      unknown d[102299] "index var" 0
      unknown tmp[102325] "maybe param" "temp"
      (102337 'move' tmp[102325](102335 call chpl_compute_low_param_loop_bound 0(102302 call -(102305 call . a c"size") 1)))
      unknown tmp[102326] "maybe param" "temp"
      (102350 'move' tmp[102326](102348 call chpl_compute_high_param_loop_bound 0(102342 call -(102344 call . a c"size") 1)))
      unknown tmp[102327] "maybe param" "temp"
      (102353 'move' tmp[102327] 1)
      ParamForLoop[102355]
      { d[102299] tmp[102325] tmp[102326] tmp[102327]
        { scopeless
          (102311 call =(102314 call result d)(102316 call &(102319 call a d)(102322 call b d)))
        }
      }
      label _unused_continueLabel[102329]
      label _breakLabel[102328]
    }
    (102364 return result)
  }
  where {
    (102255 call chpl_TwoHomogTuples a b)
  }
  function &[102369](arg a[102372] :
  _tuple, arg b[102376] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    if(102394 call _cond_test(102384 call !=(102387 call . a c"size")(102391 call . b c"size")))
    {
      { scopeless
        (102381 call compilerError "tuple operands to & have different sizes")
      }
    }
    if(102441 call _cond_test(102434 call ==(102437 call . a c"size") 1))
    {
      { scopeless
        (102399 return(102409 call _build_tuple(102401 call &(102404 call a 0)(102407 call b 0))))
      }
    }
    {
      { scopeless
        (102412 return(102431 call _build_tuple(102414 call &(102417 call a 0)(102420 call b 0))(102430 'expand_tuple'(102422 call &(102425 call chpl__tupleRest a)(102428 call chpl__tupleRest b)))))
      }
    }
  }
  function |[102449](arg a[102452] :
  _tuple, arg b[102456] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    if(102480 call _cond_test(102470 call !=(102473 call . a c"size")(102477 call . b c"size")))
    {
      { scopeless
        (102465 call compilerError "tuple operands to | have different sizes")
      }
    }
    { scopeless
      unknown result[102486](102487 call *(102490 call . a c"size")(102501 'typeof'(102493 call |(102496 call a 0)(102499 call b 0))))
      (102503 'end of statement')
    }
    {
      unknown d[102504] "index var" 0
      unknown tmp[102530] "maybe param" "temp"
      (102542 'move' tmp[102530](102540 call chpl_compute_low_param_loop_bound 0(102507 call -(102510 call . a c"size") 1)))
      unknown tmp[102531] "maybe param" "temp"
      (102555 'move' tmp[102531](102553 call chpl_compute_high_param_loop_bound 0(102547 call -(102549 call . a c"size") 1)))
      unknown tmp[102532] "maybe param" "temp"
      (102558 'move' tmp[102532] 1)
      ParamForLoop[102560]
      { d[102504] tmp[102530] tmp[102531] tmp[102532]
        { scopeless
          (102516 call =(102519 call result d)(102521 call |(102524 call a d)(102527 call b d)))
        }
      }
      label _unused_continueLabel[102534]
      label _breakLabel[102533]
    }
    (102569 return result)
  }
  where {
    (102460 call chpl_TwoHomogTuples a b)
  }
  function |[102574](arg a[102577] :
  _tuple, arg b[102581] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    if(102599 call _cond_test(102589 call !=(102592 call . a c"size")(102596 call . b c"size")))
    {
      { scopeless
        (102586 call compilerError "tuple operands to | have different sizes")
      }
    }
    if(102646 call _cond_test(102639 call ==(102642 call . a c"size") 1))
    {
      { scopeless
        (102604 return(102614 call _build_tuple(102606 call |(102609 call a 0)(102612 call b 0))))
      }
    }
    {
      { scopeless
        (102617 return(102636 call _build_tuple(102619 call |(102622 call a 0)(102625 call b 0))(102635 'expand_tuple'(102627 call |(102630 call chpl__tupleRest a)(102633 call chpl__tupleRest b)))))
      }
    }
  }
  function ^[102654](arg a[102657] :
  _tuple, arg b[102661] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    if(102685 call _cond_test(102675 call !=(102678 call . a c"size")(102682 call . b c"size")))
    {
      { scopeless
        (102670 call compilerError "tuple operands to ^ have different sizes")
      }
    }
    { scopeless
      unknown result[102691](102692 call *(102695 call . a c"size")(102706 'typeof'(102698 call ^(102701 call a 0)(102704 call b 0))))
      (102708 'end of statement')
    }
    {
      unknown d[102709] "index var" 0
      unknown tmp[102735] "maybe param" "temp"
      (102747 'move' tmp[102735](102745 call chpl_compute_low_param_loop_bound 0(102712 call -(102715 call . a c"size") 1)))
      unknown tmp[102736] "maybe param" "temp"
      (102760 'move' tmp[102736](102758 call chpl_compute_high_param_loop_bound 0(102752 call -(102754 call . a c"size") 1)))
      unknown tmp[102737] "maybe param" "temp"
      (102763 'move' tmp[102737] 1)
      ParamForLoop[102765]
      { d[102709] tmp[102735] tmp[102736] tmp[102737]
        { scopeless
          (102721 call =(102724 call result d)(102726 call ^(102729 call a d)(102732 call b d)))
        }
      }
      label _unused_continueLabel[102739]
      label _breakLabel[102738]
    }
    (102774 return result)
  }
  where {
    (102665 call chpl_TwoHomogTuples a b)
  }
  function ^[102779](arg a[102782] :
  _tuple, arg b[102786] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    if(102804 call _cond_test(102794 call !=(102797 call . a c"size")(102801 call . b c"size")))
    {
      { scopeless
        (102791 call compilerError "tuple operands to ^ have different sizes")
      }
    }
    if(102851 call _cond_test(102844 call ==(102847 call . a c"size") 1))
    {
      { scopeless
        (102809 return(102819 call _build_tuple(102811 call ^(102814 call a 0)(102817 call b 0))))
      }
    }
    {
      { scopeless
        (102822 return(102841 call _build_tuple(102824 call ^(102827 call a 0)(102830 call b 0))(102840 'expand_tuple'(102832 call ^(102835 call chpl__tupleRest a)(102838 call chpl__tupleRest b)))))
      }
    }
  }
  function <<[102859](arg a[102862] :
  _tuple, arg b[102866] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    if(102890 call _cond_test(102880 call !=(102883 call . a c"size")(102887 call . b c"size")))
    {
      { scopeless
        (102875 call compilerError "tuple operands to << have different sizes")
      }
    }
    { scopeless
      unknown result[102896](102897 call *(102900 call . a c"size")(102911 'typeof'(102903 call <<(102906 call a 0)(102909 call b 0))))
      (102913 'end of statement')
    }
    {
      unknown d[102914] "index var" 0
      unknown tmp[102940] "maybe param" "temp"
      (102952 'move' tmp[102940](102950 call chpl_compute_low_param_loop_bound 0(102917 call -(102920 call . a c"size") 1)))
      unknown tmp[102941] "maybe param" "temp"
      (102965 'move' tmp[102941](102963 call chpl_compute_high_param_loop_bound 0(102957 call -(102959 call . a c"size") 1)))
      unknown tmp[102942] "maybe param" "temp"
      (102968 'move' tmp[102942] 1)
      ParamForLoop[102970]
      { d[102914] tmp[102940] tmp[102941] tmp[102942]
        { scopeless
          (102926 call =(102929 call result d)(102931 call <<(102934 call a d)(102937 call b d)))
        }
      }
      label _unused_continueLabel[102944]
      label _breakLabel[102943]
    }
    (102979 return result)
  }
  where {
    (102870 call chpl_TwoHomogTuples a b)
  }
  function <<[102984](arg a[102987] :
  _tuple, arg b[102991] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    if(103009 call _cond_test(102999 call !=(103002 call . a c"size")(103006 call . b c"size")))
    {
      { scopeless
        (102996 call compilerError "tuple operands to << have different sizes")
      }
    }
    if(103056 call _cond_test(103049 call ==(103052 call . a c"size") 1))
    {
      { scopeless
        (103014 return(103024 call _build_tuple(103016 call <<(103019 call a 0)(103022 call b 0))))
      }
    }
    {
      { scopeless
        (103027 return(103046 call _build_tuple(103029 call <<(103032 call a 0)(103035 call b 0))(103045 'expand_tuple'(103037 call <<(103040 call chpl__tupleRest a)(103043 call chpl__tupleRest b)))))
      }
    }
  }
  function >>[103064](arg a[103067] :
  _tuple, arg b[103071] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    if(103095 call _cond_test(103085 call !=(103088 call . a c"size")(103092 call . b c"size")))
    {
      { scopeless
        (103080 call compilerError "tuple operands to >> have different sizes")
      }
    }
    { scopeless
      unknown result[103101](103102 call *(103105 call . a c"size")(103116 'typeof'(103108 call >>(103111 call a 0)(103114 call b 0))))
      (103118 'end of statement')
    }
    {
      unknown d[103119] "index var" 0
      unknown tmp[103145] "maybe param" "temp"
      (103157 'move' tmp[103145](103155 call chpl_compute_low_param_loop_bound 0(103122 call -(103125 call . a c"size") 1)))
      unknown tmp[103146] "maybe param" "temp"
      (103170 'move' tmp[103146](103168 call chpl_compute_high_param_loop_bound 0(103162 call -(103164 call . a c"size") 1)))
      unknown tmp[103147] "maybe param" "temp"
      (103173 'move' tmp[103147] 1)
      ParamForLoop[103175]
      { d[103119] tmp[103145] tmp[103146] tmp[103147]
        { scopeless
          (103131 call =(103134 call result d)(103136 call >>(103139 call a d)(103142 call b d)))
        }
      }
      label _unused_continueLabel[103149]
      label _breakLabel[103148]
    }
    (103184 return result)
  }
  where {
    (103075 call chpl_TwoHomogTuples a b)
  }
  function >>[103189](arg a[103192] :
  _tuple, arg b[103196] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    if(103214 call _cond_test(103204 call !=(103207 call . a c"size")(103211 call . b c"size")))
    {
      { scopeless
        (103201 call compilerError "tuple operands to >> have different sizes")
      }
    }
    if(103261 call _cond_test(103254 call ==(103257 call . a c"size") 1))
    {
      { scopeless
        (103219 return(103229 call _build_tuple(103221 call >>(103224 call a 0)(103227 call b 0))))
      }
    }
    {
      { scopeless
        (103232 return(103251 call _build_tuple(103234 call >>(103237 call a 0)(103240 call b 0))(103250 'expand_tuple'(103242 call >>(103245 call chpl__tupleRest a)(103248 call chpl__tupleRest b)))))
      }
    }
  }
  function >[103269](arg a[103272] :
  _tuple, arg b[103276] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    if(103296 call _cond_test(103286 call !=(103289 call . a c"size")(103293 call . b c"size")))
    {
      { scopeless
        (103281 call compilerError "tuple operands to > have different sizes")
      }
    }
    {
      unknown i[103301] "index var" 0
      unknown tmp[103346] "maybe param" "temp"
      (103358 'move' tmp[103346](103356 call chpl_compute_low_param_loop_bound 0(103304 call -(103307 call . a c"size") 1)))
      unknown tmp[103347] "maybe param" "temp"
      (103371 'move' tmp[103347](103369 call chpl_compute_high_param_loop_bound 0(103363 call -(103365 call . a c"size") 1)))
      unknown tmp[103348] "maybe param" "temp"
      (103374 'move' tmp[103348] 1)
      ParamForLoop[103376]
      { i[103301] tmp[103346] tmp[103347] tmp[103348]
        { scopeless
          if(103340 call _cond_test(103332 call >(103335 call a i)(103338 call b i)))
          {
            { scopeless
              (103313 return 1)
            }
          }
          {
            { scopeless
              if(103327 call _cond_test(103319 call <(103322 call a i)(103325 call b i)))
              {
                { scopeless
                  (103316 return 0)
                }
              }
            }
          }
        }
      }
      label _unused_continueLabel[103350]
      label _breakLabel[103349]
    }
    (103385 return 0)
  }
  function >=[103389](arg a[103392] :
  _tuple, arg b[103396] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    if(103416 call _cond_test(103406 call !=(103409 call . a c"size")(103413 call . b c"size")))
    {
      { scopeless
        (103401 call compilerError "tuple operands to >= have different sizes")
      }
    }
    {
      unknown i[103421] "index var" 0
      unknown tmp[103466] "maybe param" "temp"
      (103478 'move' tmp[103466](103476 call chpl_compute_low_param_loop_bound 0(103424 call -(103427 call . a c"size") 1)))
      unknown tmp[103467] "maybe param" "temp"
      (103491 'move' tmp[103467](103489 call chpl_compute_high_param_loop_bound 0(103483 call -(103485 call . a c"size") 1)))
      unknown tmp[103468] "maybe param" "temp"
      (103494 'move' tmp[103468] 1)
      ParamForLoop[103496]
      { i[103421] tmp[103466] tmp[103467] tmp[103468]
        { scopeless
          if(103460 call _cond_test(103452 call >(103455 call a i)(103458 call b i)))
          {
            { scopeless
              (103433 return 1)
            }
          }
          {
            { scopeless
              if(103447 call _cond_test(103439 call <(103442 call a i)(103445 call b i)))
              {
                { scopeless
                  (103436 return 0)
                }
              }
            }
          }
        }
      }
      label _unused_continueLabel[103470]
      label _breakLabel[103469]
    }
    (103505 return 1)
  }
  function <[103509](arg a[103512] :
  _tuple, arg b[103516] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    if(103536 call _cond_test(103526 call !=(103529 call . a c"size")(103533 call . b c"size")))
    {
      { scopeless
        (103521 call compilerError "tuple operands to < have different sizes")
      }
    }
    {
      unknown i[103541] "index var" 0
      unknown tmp[103586] "maybe param" "temp"
      (103598 'move' tmp[103586](103596 call chpl_compute_low_param_loop_bound 0(103544 call -(103547 call . a c"size") 1)))
      unknown tmp[103587] "maybe param" "temp"
      (103611 'move' tmp[103587](103609 call chpl_compute_high_param_loop_bound 0(103603 call -(103605 call . a c"size") 1)))
      unknown tmp[103588] "maybe param" "temp"
      (103614 'move' tmp[103588] 1)
      ParamForLoop[103616]
      { i[103541] tmp[103586] tmp[103587] tmp[103588]
        { scopeless
          if(103580 call _cond_test(103572 call <(103575 call a i)(103578 call b i)))
          {
            { scopeless
              (103553 return 1)
            }
          }
          {
            { scopeless
              if(103567 call _cond_test(103559 call >(103562 call a i)(103565 call b i)))
              {
                { scopeless
                  (103556 return 0)
                }
              }
            }
          }
        }
      }
      label _unused_continueLabel[103590]
      label _breakLabel[103589]
    }
    (103625 return 0)
  }
  function <=[103629](arg a[103632] :
  _tuple, arg b[103636] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    if(103656 call _cond_test(103646 call !=(103649 call . a c"size")(103653 call . b c"size")))
    {
      { scopeless
        (103641 call compilerError "tuple operands to <= have different sizes")
      }
    }
    {
      unknown i[103661] "index var" 0
      unknown tmp[103706] "maybe param" "temp"
      (103718 'move' tmp[103706](103716 call chpl_compute_low_param_loop_bound 0(103664 call -(103667 call . a c"size") 1)))
      unknown tmp[103707] "maybe param" "temp"
      (103731 'move' tmp[103707](103729 call chpl_compute_high_param_loop_bound 0(103723 call -(103725 call . a c"size") 1)))
      unknown tmp[103708] "maybe param" "temp"
      (103734 'move' tmp[103708] 1)
      ParamForLoop[103736]
      { i[103661] tmp[103706] tmp[103707] tmp[103708]
        { scopeless
          if(103700 call _cond_test(103692 call <(103695 call a i)(103698 call b i)))
          {
            { scopeless
              (103673 return 1)
            }
          }
          {
            { scopeless
              if(103687 call _cond_test(103679 call >(103682 call a i)(103685 call b i)))
              {
                { scopeless
                  (103676 return 0)
                }
              }
            }
          }
        }
      }
      label _unused_continueLabel[103710]
      label _breakLabel[103709]
    }
    (103745 return 1)
  }
  function ==[103749](arg a[103752] :
  _tuple, arg b[103756] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    if(103841 call _cond_test(103831 call !=(103834 call . a c"size")(103838 call . b c"size")))
    {
      (103761 return 0)
    }
    {
      {
        unknown i[103764] "index var" 0
        unknown tmp[103792] "maybe param" "temp"
        (103804 'move' tmp[103792](103802 call chpl_compute_low_param_loop_bound 0(103767 call -(103770 call . a c"size") 1)))
        unknown tmp[103793] "maybe param" "temp"
        (103817 'move' tmp[103793](103815 call chpl_compute_high_param_loop_bound 0(103809 call -(103811 call . a c"size") 1)))
        unknown tmp[103794] "maybe param" "temp"
        (103820 'move' tmp[103794] 1)
        ParamForLoop[103822]
        { i[103764] tmp[103792] tmp[103793] tmp[103794]
          { scopeless
            if(103787 call _cond_test(103779 call !=(103782 call a i)(103785 call b i)))
            {
              { scopeless
                (103776 return 0)
              }
            }
          }
        }
        label _unused_continueLabel[103796]
        label _breakLabel[103795]
      }
    }
    (103845 return 1)
  }
  function !=[103849](arg a[103852] :
  _tuple, arg b[103856] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    if(103941 call _cond_test(103931 call !=(103934 call . a c"size")(103938 call . b c"size")))
    {
      (103861 return 1)
    }
    {
      {
        unknown i[103864] "index var" 0
        unknown tmp[103892] "maybe param" "temp"
        (103904 'move' tmp[103892](103902 call chpl_compute_low_param_loop_bound 0(103867 call -(103870 call . a c"size") 1)))
        unknown tmp[103893] "maybe param" "temp"
        (103917 'move' tmp[103893](103915 call chpl_compute_high_param_loop_bound 0(103909 call -(103911 call . a c"size") 1)))
        unknown tmp[103894] "maybe param" "temp"
        (103920 'move' tmp[103894] 1)
        ParamForLoop[103922]
        { i[103864] tmp[103892] tmp[103893] tmp[103894]
          { scopeless
            if(103887 call _cond_test(103879 call !=(103882 call a i)(103885 call b i)))
            {
              { scopeless
                (103876 return 1)
              }
            }
          }
        }
        label _unused_continueLabel[103896]
        label _breakLabel[103895]
      }
    }
    (103945 return 0)
  }
  function +[103949](arg x[103952] :
  _tuple, arg y[103959] :
  (103958 'typeof'(103956 call x 0))) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown result[103967](103968 call *(103971 call . x c"size")(103977 'typeof'(103975 call x 0)))
      (103979 'end of statement')
    }
    {
      unknown d[103980] "index var" 0
      unknown tmp[104004] "maybe param" "temp"
      (104016 'move' tmp[104004](104014 call chpl_compute_low_param_loop_bound 0(103983 call -(103986 call . x c"size") 1)))
      unknown tmp[104005] "maybe param" "temp"
      (104029 'move' tmp[104005](104027 call chpl_compute_high_param_loop_bound 0(104021 call -(104023 call . x c"size") 1)))
      unknown tmp[104006] "maybe param" "temp"
      (104032 'move' tmp[104006] 1)
      ParamForLoop[104034]
      { d[103980] tmp[104004] tmp[104005] tmp[104006]
        { scopeless
          (103992 call =(103995 call result d)(103997 call +(104000 call x d) y))
        }
      }
      label _unused_continueLabel[104008]
      label _breakLabel[104007]
    }
    (104043 return result)
  }
  where {
    (103963 call isHomogeneousTuple x)
  }
  function +[104048](arg x[104052] :
  unknown t[104050], arg y[104056] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown result[104073](104074 call *(104077 call . y c"size")(104083 'typeof'(104081 call y 0)))
      (104085 'end of statement')
    }
    {
      unknown d[104086] "index var" 0
      unknown tmp[104110] "maybe param" "temp"
      (104122 'move' tmp[104110](104120 call chpl_compute_low_param_loop_bound 0(104089 call -(104092 call . y c"size") 1)))
      unknown tmp[104111] "maybe param" "temp"
      (104135 'move' tmp[104111](104133 call chpl_compute_high_param_loop_bound 0(104127 call -(104129 call . y c"size") 1)))
      unknown tmp[104112] "maybe param" "temp"
      (104138 'move' tmp[104112] 1)
      ParamForLoop[104140]
      { d[104086] tmp[104110] tmp[104111] tmp[104112]
        { scopeless
          (104098 call =(104101 call result d)(104103 call + x(104107 call y d)))
        }
      }
      label _unused_continueLabel[104114]
      label _breakLabel[104113]
    }
    (104149 return result)
  }
  where {
    (104059 call &&(104062 call isHomogeneousTuple y)(104065 call isCoercible t(104070 'typeof'(104068 call y 0))))
  }
  function -[104154](arg x[104157] :
  _tuple, arg y[104164] :
  (104163 'typeof'(104161 call x 0))) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown result[104172](104173 call *(104176 call . x c"size")(104182 'typeof'(104180 call x 0)))
      (104184 'end of statement')
    }
    {
      unknown d[104185] "index var" 0
      unknown tmp[104209] "maybe param" "temp"
      (104221 'move' tmp[104209](104219 call chpl_compute_low_param_loop_bound 0(104188 call -(104191 call . x c"size") 1)))
      unknown tmp[104210] "maybe param" "temp"
      (104234 'move' tmp[104210](104232 call chpl_compute_high_param_loop_bound 0(104226 call -(104228 call . x c"size") 1)))
      unknown tmp[104211] "maybe param" "temp"
      (104237 'move' tmp[104211] 1)
      ParamForLoop[104239]
      { d[104185] tmp[104209] tmp[104210] tmp[104211]
        { scopeless
          (104197 call =(104200 call result d)(104202 call -(104205 call x d) y))
        }
      }
      label _unused_continueLabel[104213]
      label _breakLabel[104212]
    }
    (104248 return result)
  }
  where {
    (104168 call isHomogeneousTuple x)
  }
  function -[104253](arg x[104257] :
  unknown t[104255], arg y[104261] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown result[104278](104279 call *(104282 call . y c"size")(104288 'typeof'(104286 call y 0)))
      (104290 'end of statement')
    }
    {
      unknown d[104291] "index var" 0
      unknown tmp[104315] "maybe param" "temp"
      (104327 'move' tmp[104315](104325 call chpl_compute_low_param_loop_bound 0(104294 call -(104297 call . y c"size") 1)))
      unknown tmp[104316] "maybe param" "temp"
      (104340 'move' tmp[104316](104338 call chpl_compute_high_param_loop_bound 0(104332 call -(104334 call . y c"size") 1)))
      unknown tmp[104317] "maybe param" "temp"
      (104343 'move' tmp[104317] 1)
      ParamForLoop[104345]
      { d[104291] tmp[104315] tmp[104316] tmp[104317]
        { scopeless
          (104303 call =(104306 call result d)(104308 call - x(104312 call y d)))
        }
      }
      label _unused_continueLabel[104319]
      label _breakLabel[104318]
    }
    (104354 return result)
  }
  where {
    (104264 call &&(104267 call isHomogeneousTuple y)(104270 call isCoercible t(104275 'typeof'(104273 call y 0))))
  }
  function *[104359](arg x[104362] :
  _tuple, arg y[104369] :
  (104368 'typeof'(104366 call x 0))) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown result[104377](104378 call *(104381 call . x c"size")(104387 'typeof'(104385 call x 0)))
      (104389 'end of statement')
    }
    {
      unknown d[104390] "index var" 0
      unknown tmp[104414] "maybe param" "temp"
      (104426 'move' tmp[104414](104424 call chpl_compute_low_param_loop_bound 0(104393 call -(104396 call . x c"size") 1)))
      unknown tmp[104415] "maybe param" "temp"
      (104439 'move' tmp[104415](104437 call chpl_compute_high_param_loop_bound 0(104431 call -(104433 call . x c"size") 1)))
      unknown tmp[104416] "maybe param" "temp"
      (104442 'move' tmp[104416] 1)
      ParamForLoop[104444]
      { d[104390] tmp[104414] tmp[104415] tmp[104416]
        { scopeless
          (104402 call =(104405 call result d)(104407 call *(104410 call x d) y))
        }
      }
      label _unused_continueLabel[104418]
      label _breakLabel[104417]
    }
    (104453 return result)
  }
  where {
    (104373 call isHomogeneousTuple x)
  }
  function *[104458](arg x[104462] :
  unknown t[104460], arg y[104466] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown result[104483](104484 call *(104487 call . y c"size")(104493 'typeof'(104491 call y 0)))
      (104495 'end of statement')
    }
    {
      unknown d[104496] "index var" 0
      unknown tmp[104520] "maybe param" "temp"
      (104532 'move' tmp[104520](104530 call chpl_compute_low_param_loop_bound 0(104499 call -(104502 call . y c"size") 1)))
      unknown tmp[104521] "maybe param" "temp"
      (104545 'move' tmp[104521](104543 call chpl_compute_high_param_loop_bound 0(104537 call -(104539 call . y c"size") 1)))
      unknown tmp[104522] "maybe param" "temp"
      (104548 'move' tmp[104522] 1)
      ParamForLoop[104550]
      { d[104496] tmp[104520] tmp[104521] tmp[104522]
        { scopeless
          (104508 call =(104511 call result d)(104513 call * x(104517 call y d)))
        }
      }
      label _unused_continueLabel[104524]
      label _breakLabel[104523]
    }
    (104559 return result)
  }
  where {
    (104469 call &&(104472 call isHomogeneousTuple y)(104475 call isCoercible t(104480 'typeof'(104478 call y 0))))
  }
  function /[104564](arg x[104567] :
  _tuple, arg y[104574] :
  (104573 'typeof'(104571 call x 0))) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown result[104582](104583 call *(104586 call . x c"size")(104592 'typeof'(104590 call x 0)))
      (104594 'end of statement')
    }
    {
      unknown d[104595] "index var" 0
      unknown tmp[104619] "maybe param" "temp"
      (104631 'move' tmp[104619](104629 call chpl_compute_low_param_loop_bound 0(104598 call -(104601 call . x c"size") 1)))
      unknown tmp[104620] "maybe param" "temp"
      (104644 'move' tmp[104620](104642 call chpl_compute_high_param_loop_bound 0(104636 call -(104638 call . x c"size") 1)))
      unknown tmp[104621] "maybe param" "temp"
      (104647 'move' tmp[104621] 1)
      ParamForLoop[104649]
      { d[104595] tmp[104619] tmp[104620] tmp[104621]
        { scopeless
          (104607 call =(104610 call result d)(104612 call /(104615 call x d) y))
        }
      }
      label _unused_continueLabel[104623]
      label _breakLabel[104622]
    }
    (104658 return result)
  }
  where {
    (104578 call isHomogeneousTuple x)
  }
  function /[104663](arg x[104667] :
  unknown t[104665], arg y[104671] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown result[104688](104689 call *(104692 call . y c"size")(104698 'typeof'(104696 call y 0)))
      (104700 'end of statement')
    }
    {
      unknown d[104701] "index var" 0
      unknown tmp[104725] "maybe param" "temp"
      (104737 'move' tmp[104725](104735 call chpl_compute_low_param_loop_bound 0(104704 call -(104707 call . y c"size") 1)))
      unknown tmp[104726] "maybe param" "temp"
      (104750 'move' tmp[104726](104748 call chpl_compute_high_param_loop_bound 0(104742 call -(104744 call . y c"size") 1)))
      unknown tmp[104727] "maybe param" "temp"
      (104753 'move' tmp[104727] 1)
      ParamForLoop[104755]
      { d[104701] tmp[104725] tmp[104726] tmp[104727]
        { scopeless
          (104713 call =(104716 call result d)(104718 call / x(104722 call y d)))
        }
      }
      label _unused_continueLabel[104729]
      label _breakLabel[104728]
    }
    (104764 return result)
  }
  where {
    (104674 call &&(104677 call isHomogeneousTuple y)(104680 call isCoercible t(104685 'typeof'(104683 call y 0))))
  }
  function %[104769](arg x[104772] :
  _tuple, arg y[104779] :
  (104778 'typeof'(104776 call x 0))) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown result[104787](104788 call *(104791 call . x c"size")(104797 'typeof'(104795 call x 0)))
      (104799 'end of statement')
    }
    {
      unknown d[104800] "index var" 0
      unknown tmp[104824] "maybe param" "temp"
      (104836 'move' tmp[104824](104834 call chpl_compute_low_param_loop_bound 0(104803 call -(104806 call . x c"size") 1)))
      unknown tmp[104825] "maybe param" "temp"
      (104849 'move' tmp[104825](104847 call chpl_compute_high_param_loop_bound 0(104841 call -(104843 call . x c"size") 1)))
      unknown tmp[104826] "maybe param" "temp"
      (104852 'move' tmp[104826] 1)
      ParamForLoop[104854]
      { d[104800] tmp[104824] tmp[104825] tmp[104826]
        { scopeless
          (104812 call =(104815 call result d)(104817 call %(104820 call x d) y))
        }
      }
      label _unused_continueLabel[104828]
      label _breakLabel[104827]
    }
    (104863 return result)
  }
  where {
    (104783 call isHomogeneousTuple x)
  }
  function %[104868](arg x[104872] :
  unknown t[104870], arg y[104876] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown result[104893](104894 call *(104897 call . y c"size")(104903 'typeof'(104901 call y 0)))
      (104905 'end of statement')
    }
    {
      unknown d[104906] "index var" 0
      unknown tmp[104930] "maybe param" "temp"
      (104942 'move' tmp[104930](104940 call chpl_compute_low_param_loop_bound 0(104909 call -(104912 call . y c"size") 1)))
      unknown tmp[104931] "maybe param" "temp"
      (104955 'move' tmp[104931](104953 call chpl_compute_high_param_loop_bound 0(104947 call -(104949 call . y c"size") 1)))
      unknown tmp[104932] "maybe param" "temp"
      (104958 'move' tmp[104932] 1)
      ParamForLoop[104960]
      { d[104906] tmp[104930] tmp[104931] tmp[104932]
        { scopeless
          (104918 call =(104921 call result d)(104923 call % x(104927 call y d)))
        }
      }
      label _unused_continueLabel[104934]
      label _breakLabel[104933]
    }
    (104969 return result)
  }
  where {
    (104879 call &&(104882 call isHomogeneousTuple y)(104885 call isCoercible t(104890 'typeof'(104888 call y 0))))
  }
  function **[104974](arg x[104977] :
  _tuple, arg y[104984] :
  (104983 'typeof'(104981 call x 0))) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown result[104992](104993 call *(104996 call . x c"size")(105002 'typeof'(105000 call x 0)))
      (105004 'end of statement')
    }
    {
      unknown d[105005] "index var" 0
      unknown tmp[105029] "maybe param" "temp"
      (105041 'move' tmp[105029](105039 call chpl_compute_low_param_loop_bound 0(105008 call -(105011 call . x c"size") 1)))
      unknown tmp[105030] "maybe param" "temp"
      (105054 'move' tmp[105030](105052 call chpl_compute_high_param_loop_bound 0(105046 call -(105048 call . x c"size") 1)))
      unknown tmp[105031] "maybe param" "temp"
      (105057 'move' tmp[105031] 1)
      ParamForLoop[105059]
      { d[105005] tmp[105029] tmp[105030] tmp[105031]
        { scopeless
          (105017 call =(105020 call result d)(105022 call **(105025 call x d) y))
        }
      }
      label _unused_continueLabel[105033]
      label _breakLabel[105032]
    }
    (105068 return result)
  }
  where {
    (104988 call isHomogeneousTuple x)
  }
  function **[105073](arg x[105077] :
  unknown t[105075], arg y[105081] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown result[105098](105099 call *(105102 call . y c"size")(105108 'typeof'(105106 call y 0)))
      (105110 'end of statement')
    }
    {
      unknown d[105111] "index var" 0
      unknown tmp[105135] "maybe param" "temp"
      (105147 'move' tmp[105135](105145 call chpl_compute_low_param_loop_bound 0(105114 call -(105117 call . y c"size") 1)))
      unknown tmp[105136] "maybe param" "temp"
      (105160 'move' tmp[105136](105158 call chpl_compute_high_param_loop_bound 0(105152 call -(105154 call . y c"size") 1)))
      unknown tmp[105137] "maybe param" "temp"
      (105163 'move' tmp[105137] 1)
      ParamForLoop[105165]
      { d[105111] tmp[105135] tmp[105136] tmp[105137]
        { scopeless
          (105123 call =(105126 call result d)(105128 call ** x(105132 call y d)))
        }
      }
      label _unused_continueLabel[105139]
      label _breakLabel[105138]
    }
    (105174 return result)
  }
  where {
    (105084 call &&(105087 call isHomogeneousTuple y)(105090 call isCoercible t(105095 'typeof'(105093 call y 0))))
  }
  function &[105179](arg x[105182] :
  _tuple, arg y[105189] :
  (105188 'typeof'(105186 call x 0))) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown result[105197](105198 call *(105201 call . x c"size")(105207 'typeof'(105205 call x 0)))
      (105209 'end of statement')
    }
    {
      unknown d[105210] "index var" 0
      unknown tmp[105234] "maybe param" "temp"
      (105246 'move' tmp[105234](105244 call chpl_compute_low_param_loop_bound 0(105213 call -(105216 call . x c"size") 1)))
      unknown tmp[105235] "maybe param" "temp"
      (105259 'move' tmp[105235](105257 call chpl_compute_high_param_loop_bound 0(105251 call -(105253 call . x c"size") 1)))
      unknown tmp[105236] "maybe param" "temp"
      (105262 'move' tmp[105236] 1)
      ParamForLoop[105264]
      { d[105210] tmp[105234] tmp[105235] tmp[105236]
        { scopeless
          (105222 call =(105225 call result d)(105227 call &(105230 call x d) y))
        }
      }
      label _unused_continueLabel[105238]
      label _breakLabel[105237]
    }
    (105273 return result)
  }
  where {
    (105193 call isHomogeneousTuple x)
  }
  function &[105278](arg x[105282] :
  unknown t[105280], arg y[105286] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown result[105303](105304 call *(105307 call . y c"size")(105313 'typeof'(105311 call y 0)))
      (105315 'end of statement')
    }
    {
      unknown d[105316] "index var" 0
      unknown tmp[105340] "maybe param" "temp"
      (105352 'move' tmp[105340](105350 call chpl_compute_low_param_loop_bound 0(105319 call -(105322 call . y c"size") 1)))
      unknown tmp[105341] "maybe param" "temp"
      (105365 'move' tmp[105341](105363 call chpl_compute_high_param_loop_bound 0(105357 call -(105359 call . y c"size") 1)))
      unknown tmp[105342] "maybe param" "temp"
      (105368 'move' tmp[105342] 1)
      ParamForLoop[105370]
      { d[105316] tmp[105340] tmp[105341] tmp[105342]
        { scopeless
          (105328 call =(105331 call result d)(105333 call & x(105337 call y d)))
        }
      }
      label _unused_continueLabel[105344]
      label _breakLabel[105343]
    }
    (105379 return result)
  }
  where {
    (105289 call &&(105292 call isHomogeneousTuple y)(105295 call isCoercible t(105300 'typeof'(105298 call y 0))))
  }
  function |[105384](arg x[105387] :
  _tuple, arg y[105394] :
  (105393 'typeof'(105391 call x 0))) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown result[105402](105403 call *(105406 call . x c"size")(105412 'typeof'(105410 call x 0)))
      (105414 'end of statement')
    }
    {
      unknown d[105415] "index var" 0
      unknown tmp[105439] "maybe param" "temp"
      (105451 'move' tmp[105439](105449 call chpl_compute_low_param_loop_bound 0(105418 call -(105421 call . x c"size") 1)))
      unknown tmp[105440] "maybe param" "temp"
      (105464 'move' tmp[105440](105462 call chpl_compute_high_param_loop_bound 0(105456 call -(105458 call . x c"size") 1)))
      unknown tmp[105441] "maybe param" "temp"
      (105467 'move' tmp[105441] 1)
      ParamForLoop[105469]
      { d[105415] tmp[105439] tmp[105440] tmp[105441]
        { scopeless
          (105427 call =(105430 call result d)(105432 call |(105435 call x d) y))
        }
      }
      label _unused_continueLabel[105443]
      label _breakLabel[105442]
    }
    (105478 return result)
  }
  where {
    (105398 call isHomogeneousTuple x)
  }
  function |[105483](arg x[105487] :
  unknown t[105485], arg y[105491] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown result[105508](105509 call *(105512 call . y c"size")(105518 'typeof'(105516 call y 0)))
      (105520 'end of statement')
    }
    {
      unknown d[105521] "index var" 0
      unknown tmp[105545] "maybe param" "temp"
      (105557 'move' tmp[105545](105555 call chpl_compute_low_param_loop_bound 0(105524 call -(105527 call . y c"size") 1)))
      unknown tmp[105546] "maybe param" "temp"
      (105570 'move' tmp[105546](105568 call chpl_compute_high_param_loop_bound 0(105562 call -(105564 call . y c"size") 1)))
      unknown tmp[105547] "maybe param" "temp"
      (105573 'move' tmp[105547] 1)
      ParamForLoop[105575]
      { d[105521] tmp[105545] tmp[105546] tmp[105547]
        { scopeless
          (105533 call =(105536 call result d)(105538 call | x(105542 call y d)))
        }
      }
      label _unused_continueLabel[105549]
      label _breakLabel[105548]
    }
    (105584 return result)
  }
  where {
    (105494 call &&(105497 call isHomogeneousTuple y)(105500 call isCoercible t(105505 'typeof'(105503 call y 0))))
  }
  function ^[105589](arg x[105592] :
  _tuple, arg y[105599] :
  (105598 'typeof'(105596 call x 0))) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown result[105607](105608 call *(105611 call . x c"size")(105617 'typeof'(105615 call x 0)))
      (105619 'end of statement')
    }
    {
      unknown d[105620] "index var" 0
      unknown tmp[105644] "maybe param" "temp"
      (105656 'move' tmp[105644](105654 call chpl_compute_low_param_loop_bound 0(105623 call -(105626 call . x c"size") 1)))
      unknown tmp[105645] "maybe param" "temp"
      (105669 'move' tmp[105645](105667 call chpl_compute_high_param_loop_bound 0(105661 call -(105663 call . x c"size") 1)))
      unknown tmp[105646] "maybe param" "temp"
      (105672 'move' tmp[105646] 1)
      ParamForLoop[105674]
      { d[105620] tmp[105644] tmp[105645] tmp[105646]
        { scopeless
          (105632 call =(105635 call result d)(105637 call ^(105640 call x d) y))
        }
      }
      label _unused_continueLabel[105648]
      label _breakLabel[105647]
    }
    (105683 return result)
  }
  where {
    (105603 call isHomogeneousTuple x)
  }
  function ^[105688](arg x[105692] :
  unknown t[105690], arg y[105696] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown result[105713](105714 call *(105717 call . y c"size")(105723 'typeof'(105721 call y 0)))
      (105725 'end of statement')
    }
    {
      unknown d[105726] "index var" 0
      unknown tmp[105750] "maybe param" "temp"
      (105762 'move' tmp[105750](105760 call chpl_compute_low_param_loop_bound 0(105729 call -(105732 call . y c"size") 1)))
      unknown tmp[105751] "maybe param" "temp"
      (105775 'move' tmp[105751](105773 call chpl_compute_high_param_loop_bound 0(105767 call -(105769 call . y c"size") 1)))
      unknown tmp[105752] "maybe param" "temp"
      (105778 'move' tmp[105752] 1)
      ParamForLoop[105780]
      { d[105726] tmp[105750] tmp[105751] tmp[105752]
        { scopeless
          (105738 call =(105741 call result d)(105743 call ^ x(105747 call y d)))
        }
      }
      label _unused_continueLabel[105754]
      label _breakLabel[105753]
    }
    (105789 return result)
  }
  where {
    (105699 call &&(105702 call isHomogeneousTuple y)(105705 call isCoercible t(105710 'typeof'(105708 call y 0))))
  }
  function <<[105794](arg x[105797] :
  _tuple, arg y[105804] :
  (105803 'typeof'(105801 call x 0))) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown result[105812](105813 call *(105816 call . x c"size")(105822 'typeof'(105820 call x 0)))
      (105824 'end of statement')
    }
    {
      unknown d[105825] "index var" 0
      unknown tmp[105849] "maybe param" "temp"
      (105861 'move' tmp[105849](105859 call chpl_compute_low_param_loop_bound 0(105828 call -(105831 call . x c"size") 1)))
      unknown tmp[105850] "maybe param" "temp"
      (105874 'move' tmp[105850](105872 call chpl_compute_high_param_loop_bound 0(105866 call -(105868 call . x c"size") 1)))
      unknown tmp[105851] "maybe param" "temp"
      (105877 'move' tmp[105851] 1)
      ParamForLoop[105879]
      { d[105825] tmp[105849] tmp[105850] tmp[105851]
        { scopeless
          (105837 call =(105840 call result d)(105842 call <<(105845 call x d) y))
        }
      }
      label _unused_continueLabel[105853]
      label _breakLabel[105852]
    }
    (105888 return result)
  }
  where {
    (105808 call isHomogeneousTuple x)
  }
  function <<[105893](arg x[105897] :
  unknown t[105895], arg y[105901] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown result[105918](105919 call *(105922 call . y c"size")(105928 'typeof'(105926 call y 0)))
      (105930 'end of statement')
    }
    {
      unknown d[105931] "index var" 0
      unknown tmp[105955] "maybe param" "temp"
      (105967 'move' tmp[105955](105965 call chpl_compute_low_param_loop_bound 0(105934 call -(105937 call . y c"size") 1)))
      unknown tmp[105956] "maybe param" "temp"
      (105980 'move' tmp[105956](105978 call chpl_compute_high_param_loop_bound 0(105972 call -(105974 call . y c"size") 1)))
      unknown tmp[105957] "maybe param" "temp"
      (105983 'move' tmp[105957] 1)
      ParamForLoop[105985]
      { d[105931] tmp[105955] tmp[105956] tmp[105957]
        { scopeless
          (105943 call =(105946 call result d)(105948 call << x(105952 call y d)))
        }
      }
      label _unused_continueLabel[105959]
      label _breakLabel[105958]
    }
    (105994 return result)
  }
  where {
    (105904 call &&(105907 call isHomogeneousTuple y)(105910 call isCoercible t(105915 'typeof'(105913 call y 0))))
  }
  function >>[105999](arg x[106002] :
  _tuple, arg y[106009] :
  (106008 'typeof'(106006 call x 0))) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown result[106017](106018 call *(106021 call . x c"size")(106027 'typeof'(106025 call x 0)))
      (106029 'end of statement')
    }
    {
      unknown d[106030] "index var" 0
      unknown tmp[106054] "maybe param" "temp"
      (106066 'move' tmp[106054](106064 call chpl_compute_low_param_loop_bound 0(106033 call -(106036 call . x c"size") 1)))
      unknown tmp[106055] "maybe param" "temp"
      (106079 'move' tmp[106055](106077 call chpl_compute_high_param_loop_bound 0(106071 call -(106073 call . x c"size") 1)))
      unknown tmp[106056] "maybe param" "temp"
      (106082 'move' tmp[106056] 1)
      ParamForLoop[106084]
      { d[106030] tmp[106054] tmp[106055] tmp[106056]
        { scopeless
          (106042 call =(106045 call result d)(106047 call >>(106050 call x d) y))
        }
      }
      label _unused_continueLabel[106058]
      label _breakLabel[106057]
    }
    (106093 return result)
  }
  where {
    (106013 call isHomogeneousTuple x)
  }
  function >>[106098](arg x[106102] :
  unknown t[106100], arg y[106106] :
  _tuple) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown result[106123](106124 call *(106127 call . y c"size")(106133 'typeof'(106131 call y 0)))
      (106135 'end of statement')
    }
    {
      unknown d[106136] "index var" 0
      unknown tmp[106160] "maybe param" "temp"
      (106172 'move' tmp[106160](106170 call chpl_compute_low_param_loop_bound 0(106139 call -(106142 call . y c"size") 1)))
      unknown tmp[106161] "maybe param" "temp"
      (106185 'move' tmp[106161](106183 call chpl_compute_high_param_loop_bound 0(106177 call -(106179 call . y c"size") 1)))
      unknown tmp[106162] "maybe param" "temp"
      (106188 'move' tmp[106162] 1)
      ParamForLoop[106190]
      { d[106136] tmp[106160] tmp[106161] tmp[106162]
        { scopeless
          (106148 call =(106151 call result d)(106153 call >> x(106157 call y d)))
        }
      }
      label _unused_continueLabel[106164]
      label _breakLabel[106163]
    }
    (106199 return result)
  }
  where {
    (106109 call &&(106112 call isHomogeneousTuple y)(106115 call isCoercible t(106120 'typeof'(106118 call y 0))))
  }
}