AST dump for TwoArrayPartitioning after pass normalize.
Module use list: ChapelStandard Math List Sort MSBRadixSort ShallowCopy RadixSortHelp ShellSort 

{
  function chpl__init_TwoArrayPartitioning[468504]() : void[4] "insert line file info" "module init"
  {
    (650666 'init var' debug[240176] 0)
    (240179 'end of statement')
    (650668 'init var' maxBuckets[240181] 512)
    (240186 'end of statement')
    (623399 return _void[46])
  }
  unknown debug[240176] "dead at end of block" "param" "private"
  unknown maxBuckets[240181] "dead at end of block" "param"
  function TwoArraySortTask[240295].init[240213](arg _mt[240217]:_MT[201], ref arg this[240215]:TwoArraySortTask[240295]) : void[4] "method" "primary method" "no return value for void"
  {
    val start[530761]:int(64)[10] "temp"
    (530764 'default init var' start[530761] int(64)[10])
    (530766 '.=' this[240215] c"start" start[530761])
    (562450 'end of statement')
    val size[530770]:int(64)[10] "temp"
    (530773 'default init var' size[530770] int(64)[10])
    (530775 '.=' this[240215] c"size" size[530770])
    (562451 'end of statement')
    val startbit[530779]:int(64)[10] "temp"
    (530782 'default init var' startbit[530779] int(64)[10])
    (530784 '.=' this[240215] c"startbit" startbit[530779])
    (562452 'end of statement')
    val inA[530788]:bool[19] "temp"
    (530791 'default init var' inA[530788] bool[19])
    (530793 '.=' this[240215] c"inA" inA[530788])
    (562453 'end of statement')
    val doSort[530797]:bool[19] "temp"
    (530800 'default init var' doSort[530797] bool[19])
    (530802 '.=' this[240215] c"doSort" doSort[530797])
    (562454 'end of statement')
    (623320 return _void[46])
  }
  function TwoArraySortTask[240295].init[240222](arg _mt[240246]:_MT[201], ref arg this[240224]:TwoArraySortTask[240295], arg start[240227]:int(64)[10], arg size[240231]:int(64)[10], arg startbit[240235]:int(64)[10], arg inA[240239]:bool[19], arg doSort[240243]:bool[19]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown start[530806] "temp"
    (530809 'init var' start[530806] start[240227] int(64)[10])
    (530811 'init field' this[240224] c"start" start[530806])
    (562455 'end of statement')
    unknown size[530815] "temp"
    (530818 'init var' size[530815] size[240231] int(64)[10])
    (530820 'init field' this[240224] c"size" size[530815])
    (562456 'end of statement')
    unknown startbit[530824] "temp"
    (530827 'init var' startbit[530824] startbit[240235] int(64)[10])
    (530829 'init field' this[240224] c"startbit" startbit[530824])
    (562457 'end of statement')
    unknown inA[530833] "temp"
    (530836 'init var' inA[530833] inA[240239] bool[19])
    (530838 'init field' this[240224] c"inA" inA[530833])
    (562458 'end of statement')
    unknown doSort[530842] "temp"
    (530845 'init var' doSort[530842] doSort[240243] bool[19])
    (530847 'init field' this[240224] c"doSort" doSort[530842])
    (562459 'end of statement')
    (623322 return _void[46])
  }
  type TwoArraySortTask[240295] val start[240189]:int(64)[10] int(64)[10] val size[240194]:int(64)[10] int(64)[10] val startbit[240199]:int(64)[10] int(64)[10] val inA[240204]:bool[19] bool[19] val doSort[240209]:bool[19] bool[19]
  type TwoArrayBucketizerPerTaskState[240314] unknown localCounts[240299](240309 call chpl__buildArrayRuntimeType(240306 call chpl__ensureDomainExpr(240300 call #(240303 call chpl_build_low_bounded_range 0) maxBuckets[240181])) int(64)[10])
  function defaultNumTasks[240316]() : _unknown[42]
  {
    unknown ret[623326] "RVV" "temp"
    unknown call_tmp[887999] "expr temp" "maybe param" "maybe type" "temp"
    (888002 'move' call_tmp[887999](240322 'task_get_serial'))
    unknown call_tmp[888004] "expr temp" "maybe param" "maybe type" "temp"
    (888007 'move' call_tmp[888004](240323 call _cond_test call_tmp[887999]))
    if call_tmp[888004]
    {
      (623331 'move' ret[623326](623330 'deref' 1))
      gotoReturn _end_defaultNumTasks[623324] _end_defaultNumTasks[623324]
    }
    const tasksPerLocale[240328] "dead at end of block" "const" "insert auto destroy"
    (650670 'init var' tasksPerLocale[240328] dataParTasksPerLocale[287582])
    (240331 'end of statement')
    const ignoreRunning[240333] "dead at end of block" "const" "insert auto destroy"
    (650672 'init var' ignoreRunning[240333] dataParIgnoreRunningTasks[287587])
    (240336 'end of statement')
    unknown nTasks[240338] "dead at end of block" "insert auto destroy"
    unknown tmp[697482] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[697483] "maybe param" "temp"
    unknown call_tmp[888009] "expr temp" "maybe param" "maybe type" "temp"
    (888012 'move' call_tmp[888009](240339 call > tasksPerLocale[240328] 0))
    (697488 'move' tmp[697483](697486 call _cond_test call_tmp[888009]))
    if tmp[697483]
    {
      (697493 'move' tmp[697482](697490 '_paramFoldLogical' tmp[697483] tasksPerLocale[240328]))
    }
    {
      unknown tmp[697495] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[888014] "expr temp" "maybe param" "maybe type" "temp"
      (888017 'move' call_tmp[888014](407331 call here[135591]))
      (697497 'move' tmp[697495](240345 call maxTaskPar _mt[203] call_tmp[888014]))
      (697502 'move' tmp[697482](697499 '_paramFoldLogical' tmp[697483] tmp[697495]))
    }
    (650674 'init var' nTasks[240338] tmp[697482])
    (240352 'end of statement' tasksPerLocale[240328])
    unknown call_tmp[888021] "expr temp" "maybe param" "maybe type" "temp"
    (888024 'move' call_tmp[888021](240384 call ! ignoreRunning[240333]))
    unknown call_tmp[888026] "expr temp" "maybe param" "maybe type" "temp"
    (888029 'move' call_tmp[888026](240387 call _cond_test call_tmp[888021]))
    if call_tmp[888026]
    {
      unknown call_tmp[888031] "expr temp" "maybe param" "maybe type" "temp"
      (888034 'move' call_tmp[888031](407333 call here[135591]))
      unknown call_tmp[888038] "expr temp" "maybe param" "maybe type" "temp"
      (888041 'move' call_tmp[888038](240362 call(240359 call (partial) runningTasks _mt[203] call_tmp[888031])))
      unknown call_tmp[888043] "maybe param" "maybe type" "temp"
      (888046 'move' call_tmp[888043](240356 call - call_tmp[888038] 1))
      const otherTasks[240355] "dead at end of block" "const" "insert auto destroy"
      (650676 'init var' otherTasks[240355] call_tmp[888043])
      (240365 'end of statement')
      unknown tmp[697509] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[697510] "maybe param" "temp"
      unknown call_tmp[888048] "expr temp" "maybe param" "maybe type" "temp"
      (888051 'move' call_tmp[888048](240369 call < otherTasks[240355] nTasks[240338]))
      (697515 'move' tmp[697510](697513 call _cond_test call_tmp[888048]))
      if tmp[697510]
      {
        unknown tmp[697517] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[888053] "expr temp" "maybe param" "maybe type" "temp"
        (888056 'move' call_tmp[888053](240375 call - nTasks[240338] otherTasks[240355]))
        (697519 'move' tmp[697517](240373 call : call_tmp[888053] int(64)[10]))
        (697524 'move' tmp[697509](697521 '_paramFoldLogical' tmp[697510] tmp[697517]))
      }
      {
        (697529 'move' tmp[697509](697526 '_paramFoldLogical' tmp[697510] 1))
      }
      (240366 call = nTasks[240338] tmp[697509])
      (562462 'end of statement' nTasks[240338] otherTasks[240355])
    }
    (623336 'move' ret[623326](623335 'deref' nTasks[240338]))
    gotoReturn _end_defaultNumTasks[623324] _end_defaultNumTasks[623324]
    (562465 'end of statement' nTasks[240338])
    label _end_defaultNumTasks[623324]
    (623328 return ret[623326])
  }
  function TwoArrayBucketizerSharedState[240640](?).init[240544](arg _mt[240550]:_MT[201], ref arg this[240546]:TwoArrayBucketizerSharedState[240640](?), arg bucketizerType[240548]:_any[141](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[888058] "maybe param" "maybe type" "temp"
    (888061 'move' call_tmp[888058](530852 call defaultNumTasks))
    unknown nTasks[530853] "temp"
    (530856 'init var' nTasks[530853] call_tmp[888058] int(64)[10])
    (530858 'init field' this[240546] c"nTasks" nTasks[530853])
    (562467 'end of statement')
    unknown call_tmp[888063] "expr temp" "maybe param" "maybe type" "temp"
    (888066 'move' call_tmp[888063](530877 '.' this[240546] c"nTasks"))
    unknown call_tmp[888068] "maybe param" "maybe type" "temp"
    (888071 'move' call_tmp[888068](530863 call * call_tmp[888063] maxBuckets[240181]))
    unknown countsSize[530866] "temp"
    (530869 'init var' countsSize[530866] call_tmp[888068] int(64)[10])
    (530873 'init field' this[240546] c"countsSize" countsSize[530866])
    (562468 'end of statement')
    unknown bucketizerType[530880] "temp" "type variable"
    (530882 'move' bucketizerType[530880] bucketizerType[240548])
    (530884 'init field' this[240546] c"bucketizerType" bucketizerType[530880])
    (562469 'end of statement')
    unknown bucketizer[530889] "temp"
    unknown call_tmp[888073] "expr temp" "maybe param" "maybe type" "temp"
    (888076 'move' call_tmp[888073](530898 '.v' this[240546] c"bucketizerType"))
    (530892 'default init var' bucketizer[530889] call_tmp[888073])
    (530894 '.=' this[240546] c"bucketizer" bucketizer[530889])
    (562470 'end of statement')
    unknown globalCounts[530901] "temp"
    unknown call_tmp[888078] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888081 'move' call_tmp[888078](530910 call chpl_build_low_bounded_range 0))
    unknown call_tmp[888083] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888086 'move' call_tmp[888083](530920 '.' this[240546] c"countsSize"))
    unknown call_tmp[888088] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888091 'move' call_tmp[888088](530908 call # call_tmp[888078] call_tmp[888083]))
    unknown call_tmp[888093] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888096 'move' call_tmp[888093](530906 call chpl__ensureDomainExpr call_tmp[888088]))
    unknown call_tmp[888098] "expr temp" "maybe param" "maybe type" "temp"
    (888101 'move' call_tmp[888098](530904 call chpl__buildArrayRuntimeType call_tmp[888093] int(64)[10]))
    (530914 'default init var' globalCounts[530901] call_tmp[888098])
    (530916 '.=' this[240546] c"globalCounts" globalCounts[530901])
    (562471 'end of statement')
    unknown globalEnds[530923] "temp"
    unknown call_tmp[888103] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888106 'move' call_tmp[888103](530932 call chpl_build_low_bounded_range 0))
    unknown call_tmp[888108] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888111 'move' call_tmp[888108](530942 '.' this[240546] c"countsSize"))
    unknown call_tmp[888113] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888116 'move' call_tmp[888113](530930 call # call_tmp[888103] call_tmp[888108]))
    unknown call_tmp[888118] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888121 'move' call_tmp[888118](530928 call chpl__ensureDomainExpr call_tmp[888113]))
    unknown call_tmp[888123] "expr temp" "maybe param" "maybe type" "temp"
    (888126 'move' call_tmp[888123](530926 call chpl__buildArrayRuntimeType call_tmp[888118] int(64)[10]))
    (530936 'default init var' globalEnds[530923] call_tmp[888123])
    (530938 '.=' this[240546] c"globalEnds" globalEnds[530923])
    (562472 'end of statement')
    unknown localState[530945] "temp"
    unknown call_tmp[888128] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888131 'move' call_tmp[888128](530954 call chpl_build_low_bounded_range 0))
    unknown call_tmp[888133] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888136 'move' call_tmp[888133](530964 '.' this[240546] c"nTasks"))
    unknown call_tmp[888138] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888141 'move' call_tmp[888138](530952 call # call_tmp[888128] call_tmp[888133]))
    unknown call_tmp[888143] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888146 'move' call_tmp[888143](530950 call chpl__ensureDomainExpr call_tmp[888138]))
    unknown call_tmp[888148] "expr temp" "maybe param" "maybe type" "temp"
    (888151 'move' call_tmp[888148](530948 call chpl__buildArrayRuntimeType call_tmp[888143] TwoArrayBucketizerPerTaskState[240314]))
    (530958 'default init var' localState[530945] call_tmp[888148])
    (530960 '.=' this[240546] c"localState" localState[530945])
    (562473 'end of statement')
    unknown counts[530967] "temp"
    unknown call_tmp[888153] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888156 'move' call_tmp[888153](530976 call chpl_build_low_bounded_range 0))
    unknown call_tmp[888158] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888161 'move' call_tmp[888158](530974 call # call_tmp[888153] maxBuckets[240181]))
    unknown call_tmp[888163] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888166 'move' call_tmp[888163](530972 call chpl__ensureDomainExpr call_tmp[888158]))
    unknown call_tmp[888168] "expr temp" "maybe param" "maybe type" "temp"
    (888171 'move' call_tmp[888168](530970 call chpl__buildArrayRuntimeType call_tmp[888163] int(64)[10]))
    (530980 'default init var' counts[530967] call_tmp[888168])
    (530982 '.=' this[240546] c"counts" counts[530967])
    (562474 'end of statement')
    unknown ends[530986] "temp"
    unknown call_tmp[888173] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888176 'move' call_tmp[888173](530995 call chpl_build_low_bounded_range 0))
    unknown call_tmp[888178] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888181 'move' call_tmp[888178](530993 call # call_tmp[888173] maxBuckets[240181]))
    unknown call_tmp[888183] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888186 'move' call_tmp[888183](530991 call chpl__ensureDomainExpr call_tmp[888178]))
    unknown call_tmp[888188] "expr temp" "maybe param" "maybe type" "temp"
    (888191 'move' call_tmp[888188](530989 call chpl__buildArrayRuntimeType call_tmp[888183] int(64)[10]))
    (530999 'default init var' ends[530986] call_tmp[888188])
    (531001 '.=' this[240546] c"ends" ends[530986])
    (562475 'end of statement')
    unknown outputInA[531005] "temp"
    unknown call_tmp[888193] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888196 'move' call_tmp[888193](531014 call chpl_build_low_bounded_range 0))
    unknown call_tmp[888198] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888201 'move' call_tmp[888198](531012 call # call_tmp[888193] maxBuckets[240181]))
    unknown call_tmp[888203] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888206 'move' call_tmp[888203](531010 call chpl__ensureDomainExpr call_tmp[888198]))
    unknown call_tmp[888208] "expr temp" "maybe param" "maybe type" "temp"
    (888211 'move' call_tmp[888208](531008 call chpl__buildArrayRuntimeType call_tmp[888203] bool[19]))
    (531018 'default init var' outputInA[531005] call_tmp[888208])
    (531022 '.=' this[240546] c"outputInA" outputInA[531005])
    (562476 'end of statement')
    unknown bigTasks[531026] "temp"
    unknown call_tmp[888213] "expr temp" "maybe param" "maybe type" "temp"
    (888216 'move' call_tmp[888213](531029 call list[231871](?) TwoArraySortTask[240295]))
    (531031 'default init var' bigTasks[531026] call_tmp[888213])
    (531033 '.=' this[240546] c"bigTasks" bigTasks[531026])
    (562477 'end of statement')
    unknown smallTasks[531037] "temp"
    unknown call_tmp[888218] "expr temp" "maybe param" "maybe type" "temp"
    (888221 'move' call_tmp[888218](531040 call list[231871](?) TwoArraySortTask[240295]))
    (531042 'default init var' smallTasks[531037] call_tmp[888218])
    (531044 '.=' this[240546] c"smallTasks" smallTasks[531037])
    (562478 'end of statement')
    unknown baseCaseSize[531049] "temp"
    (531052 'init var' baseCaseSize[531049] 16 int(64)[10])
    (531054 'init field' this[240546] c"baseCaseSize" baseCaseSize[531049])
    (562479 'end of statement')
    unknown sequentialSizePerTask[531059] "temp"
    (531062 'init var' sequentialSizePerTask[531059] 4096 int(64)[10])
    (531064 'init field' this[240546] c"sequentialSizePerTask" sequentialSizePerTask[531059])
    (562480 'end of statement')
    unknown call_tmp[888223] "maybe param" "maybe type" "temp"
    (888226 'move' call_tmp[888223](531069 call max int(64)[10]))
    unknown endbit[531071] "temp"
    (531074 'init var' endbit[531071] call_tmp[888223] int(64)[10])
    (531076 'init field' this[240546] c"endbit" endbit[531071])
    (562481 'end of statement')
    (623340 return _void[46])
  }
  function TwoArrayBucketizerSharedState[240640](?).init[240564](arg _mt[240590]:_MT[201], ref arg this[240566]:TwoArrayBucketizerSharedState[240640](?), in arg bucketizer[240568]:_any[141](?), arg baseCaseSize[240572]:int(64)[10] =
  16, arg sequentialSizePerTask[240578]:int(64)[10] =
  4096, arg endbit[240586]:int(64)[10] =
  (240584 call max int(64)[10])) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[888228] "maybe param" "maybe type" "temp"
    (888231 'move' call_tmp[888228](531081 call defaultNumTasks))
    unknown nTasks[531082] "temp"
    (531085 'init var' nTasks[531082] call_tmp[888228] int(64)[10])
    (531087 'init field' this[240566] c"nTasks" nTasks[531082])
    (562482 'end of statement')
    unknown call_tmp[888233] "expr temp" "maybe param" "maybe type" "temp"
    (888236 'move' call_tmp[888233](531104 '.' this[240566] c"nTasks"))
    unknown call_tmp[888238] "maybe param" "maybe type" "temp"
    (888241 'move' call_tmp[888238](531092 call * call_tmp[888233] maxBuckets[240181]))
    unknown countsSize[531095] "temp"
    (531098 'init var' countsSize[531095] call_tmp[888238] int(64)[10])
    (531100 'init field' this[240566] c"countsSize" countsSize[531095])
    (562483 'end of statement')
    unknown bucketizerType[531107] "temp" "type variable"
    (531109 'move' bucketizerType[531107](240600 'typeof' bucketizer[240568]))
    (531111 'init field' this[240566] c"bucketizerType" bucketizerType[531107])
    (562484 'end of statement')
    unknown call_tmp[888243] "maybe param" "maybe type" "temp"
    (888246 'move' call_tmp[888243](531124 '.v' this[240566] c"bucketizerType"))
    unknown bucketizer[531115] "temp"
    (531118 'init var' bucketizer[531115] bucketizer[240568] call_tmp[888243])
    (531120 'init field' this[240566] c"bucketizer" bucketizer[531115])
    (562485 'end of statement')
    unknown globalCounts[531127] "temp"
    unknown call_tmp[888248] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888251 'move' call_tmp[888248](531136 call chpl_build_low_bounded_range 0))
    unknown call_tmp[888253] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888256 'move' call_tmp[888253](531146 '.' this[240566] c"countsSize"))
    unknown call_tmp[888258] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888261 'move' call_tmp[888258](531134 call # call_tmp[888248] call_tmp[888253]))
    unknown call_tmp[888263] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888266 'move' call_tmp[888263](531132 call chpl__ensureDomainExpr call_tmp[888258]))
    unknown call_tmp[888268] "expr temp" "maybe param" "maybe type" "temp"
    (888271 'move' call_tmp[888268](531130 call chpl__buildArrayRuntimeType call_tmp[888263] int(64)[10]))
    (531140 'default init var' globalCounts[531127] call_tmp[888268])
    (531142 '.=' this[240566] c"globalCounts" globalCounts[531127])
    (562486 'end of statement')
    unknown globalEnds[531149] "temp"
    unknown call_tmp[888273] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888276 'move' call_tmp[888273](531158 call chpl_build_low_bounded_range 0))
    unknown call_tmp[888278] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888281 'move' call_tmp[888278](531168 '.' this[240566] c"countsSize"))
    unknown call_tmp[888283] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888286 'move' call_tmp[888283](531156 call # call_tmp[888273] call_tmp[888278]))
    unknown call_tmp[888288] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888291 'move' call_tmp[888288](531154 call chpl__ensureDomainExpr call_tmp[888283]))
    unknown call_tmp[888293] "expr temp" "maybe param" "maybe type" "temp"
    (888296 'move' call_tmp[888293](531152 call chpl__buildArrayRuntimeType call_tmp[888288] int(64)[10]))
    (531162 'default init var' globalEnds[531149] call_tmp[888293])
    (531164 '.=' this[240566] c"globalEnds" globalEnds[531149])
    (562487 'end of statement')
    unknown localState[531171] "temp"
    unknown call_tmp[888298] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888301 'move' call_tmp[888298](531180 call chpl_build_low_bounded_range 0))
    unknown call_tmp[888303] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888306 'move' call_tmp[888303](531190 '.' this[240566] c"nTasks"))
    unknown call_tmp[888308] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888311 'move' call_tmp[888308](531178 call # call_tmp[888298] call_tmp[888303]))
    unknown call_tmp[888313] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888316 'move' call_tmp[888313](531176 call chpl__ensureDomainExpr call_tmp[888308]))
    unknown call_tmp[888318] "expr temp" "maybe param" "maybe type" "temp"
    (888321 'move' call_tmp[888318](531174 call chpl__buildArrayRuntimeType call_tmp[888313] TwoArrayBucketizerPerTaskState[240314]))
    (531184 'default init var' localState[531171] call_tmp[888318])
    (531186 '.=' this[240566] c"localState" localState[531171])
    (562488 'end of statement')
    unknown counts[531193] "temp"
    unknown call_tmp[888323] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888326 'move' call_tmp[888323](531202 call chpl_build_low_bounded_range 0))
    unknown call_tmp[888328] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888331 'move' call_tmp[888328](531200 call # call_tmp[888323] maxBuckets[240181]))
    unknown call_tmp[888333] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888336 'move' call_tmp[888333](531198 call chpl__ensureDomainExpr call_tmp[888328]))
    unknown call_tmp[888338] "expr temp" "maybe param" "maybe type" "temp"
    (888341 'move' call_tmp[888338](531196 call chpl__buildArrayRuntimeType call_tmp[888333] int(64)[10]))
    (531206 'default init var' counts[531193] call_tmp[888338])
    (531208 '.=' this[240566] c"counts" counts[531193])
    (562489 'end of statement')
    unknown ends[531212] "temp"
    unknown call_tmp[888343] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888346 'move' call_tmp[888343](531221 call chpl_build_low_bounded_range 0))
    unknown call_tmp[888348] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888351 'move' call_tmp[888348](531219 call # call_tmp[888343] maxBuckets[240181]))
    unknown call_tmp[888353] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888356 'move' call_tmp[888353](531217 call chpl__ensureDomainExpr call_tmp[888348]))
    unknown call_tmp[888358] "expr temp" "maybe param" "maybe type" "temp"
    (888361 'move' call_tmp[888358](531215 call chpl__buildArrayRuntimeType call_tmp[888353] int(64)[10]))
    (531225 'default init var' ends[531212] call_tmp[888358])
    (531227 '.=' this[240566] c"ends" ends[531212])
    (562490 'end of statement')
    unknown outputInA[531231] "temp"
    unknown call_tmp[888363] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888366 'move' call_tmp[888363](531240 call chpl_build_low_bounded_range 0))
    unknown call_tmp[888368] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888371 'move' call_tmp[888368](531238 call # call_tmp[888363] maxBuckets[240181]))
    unknown call_tmp[888373] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (888376 'move' call_tmp[888373](531236 call chpl__ensureDomainExpr call_tmp[888368]))
    unknown call_tmp[888378] "expr temp" "maybe param" "maybe type" "temp"
    (888381 'move' call_tmp[888378](531234 call chpl__buildArrayRuntimeType call_tmp[888373] bool[19]))
    (531244 'default init var' outputInA[531231] call_tmp[888378])
    (531246 '.=' this[240566] c"outputInA" outputInA[531231])
    (562491 'end of statement')
    unknown bigTasks[531250] "temp"
    unknown call_tmp[888383] "expr temp" "maybe param" "maybe type" "temp"
    (888386 'move' call_tmp[888383](531253 call list[231871](?) TwoArraySortTask[240295]))
    (531255 'default init var' bigTasks[531250] call_tmp[888383])
    (531257 '.=' this[240566] c"bigTasks" bigTasks[531250])
    (562492 'end of statement')
    unknown smallTasks[531261] "temp"
    unknown call_tmp[888388] "expr temp" "maybe param" "maybe type" "temp"
    (888391 'move' call_tmp[888388](531264 call list[231871](?) TwoArraySortTask[240295]))
    (531266 'default init var' smallTasks[531261] call_tmp[888388])
    (531268 '.=' this[240566] c"smallTasks" smallTasks[531261])
    (562493 'end of statement')
    unknown baseCaseSize[531272] "temp"
    (531275 'init var' baseCaseSize[531272] baseCaseSize[240572] int(64)[10])
    (531277 'init field' this[240566] c"baseCaseSize" baseCaseSize[531272])
    (562494 'end of statement')
    unknown sequentialSizePerTask[531281] "temp"
    (531284 'init var' sequentialSizePerTask[531281] sequentialSizePerTask[240578] int(64)[10])
    (531286 'init field' this[240566] c"sequentialSizePerTask" sequentialSizePerTask[531281])
    (562495 'end of statement')
    unknown endbit[531290] "temp"
    (531293 'init var' endbit[531290] endbit[240586] int(64)[10])
    (531295 'init field' this[240566] c"endbit" endbit[531290])
    (562496 'end of statement')
    (623342 return _void[46])
  }
  type TwoArrayBucketizerSharedState[240640](?) val nTasks[240397]:int(64)[10](240400 call defaultNumTasks) int(64)[10] val countsSize[240404]:int(64)[10](240406 call * nTasks[240397] maxBuckets[240181]) int(64)[10] unknown bucketizerType[240413] "type variable" unknown bucketizer[240416] bucketizerType[240413] unknown globalCounts[240421](240431 call chpl__buildArrayRuntimeType(240428 call chpl__ensureDomainExpr(240422 call #(240425 call chpl_build_low_bounded_range 0) countsSize[240404])) int(64)[10]) unknown globalEnds[240436](240446 call chpl__buildArrayRuntimeType(240443 call chpl__ensureDomainExpr(240437 call #(240440 call chpl_build_low_bounded_range 0) countsSize[240404])) int(64)[10]) unknown localState[240451](240461 call chpl__buildArrayRuntimeType(240458 call chpl__ensureDomainExpr(240452 call #(240455 call chpl_build_low_bounded_range 0) nTasks[240397])) TwoArrayBucketizerPerTaskState[240314]) unknown counts[240466](240476 call chpl__buildArrayRuntimeType(240473 call chpl__ensureDomainExpr(240467 call #(240470 call chpl_build_low_bounded_range 0) maxBuckets[240181])) int(64)[10]) unknown ends[240481](240491 call chpl__buildArrayRuntimeType(240488 call chpl__ensureDomainExpr(240482 call #(240485 call chpl_build_low_bounded_range 0) maxBuckets[240181])) int(64)[10]) unknown outputInA[240496](240506 call chpl__buildArrayRuntimeType(240503 call chpl__ensureDomainExpr(240497 call #(240500 call chpl_build_low_bounded_range 0) maxBuckets[240181])) bool[19]) unknown bigTasks[240511](240513 call list[231871](?) TwoArraySortTask[240295]) unknown smallTasks[240518](240520 call list[231871](?) TwoArraySortTask[240295]) val baseCaseSize[240525]:int(64)[10] 16 int(64)[10] val sequentialSizePerTask[240531]:int(64)[10] 4096 int(64)[10] val endbit[240537]:int(64)[10](240540 call max int(64)[10]) int(64)[10]
  function bucketize[240642](arg start_n[240645]:int(64)[10], arg end_n[240649]:int(64)[10], ref arg dst[240655]:_array[255540](?), arg src[240661]:_array[255540](?), ref arg state[240665]:TwoArrayBucketizerSharedState[240640](?), arg criterion[240668]:_any[141](?), inout arg startbit[240671]:int(64)[10], arg allowSkipahead[240675] :
  0 =
  0) : _unknown[42] "no return value for void"
  {
    unknown call_tmp[888393] "expr temp" "maybe param" "maybe type" "temp"
    (888396 'move' call_tmp[888393](240694 call _cond_test debug[240176]))
    if call_tmp[888393]
    {
      unknown call_tmp[888398] "expr temp" "maybe param" "maybe type" "temp"
      (888401 'move' call_tmp[888398](240686 call chpl_build_bounded_range start_n[240645] end_n[240649]))
      (240680 call writeln "bucketize " call_tmp[888398] " startbit=" startbit[240671])
    }
    unknown idxType[240700] "dead at end of block" "insert auto destroy" "type variable"
    (650682 'move' idxType[240700](650679 call idxType _mt[203] dst[240655]))
    unknown call_tmp[888407] "expr temp" "maybe param" "maybe type" "temp"
    (888410 'move' call_tmp[888407](240709 call bucketizer _mt[203] state[240665]))
    unknown call_tmp[888414] "maybe param" "maybe type" "temp"
    (888417 'move' call_tmp[888414](240717 call(240714 call (partial) getNumBuckets _mt[203] call_tmp[888407])))
    const nBuckets[240707] "dead at end of block" "const" "insert auto destroy"
    (650684 'init var' nBuckets[240707] call_tmp[888414])
    (240719 'end of statement')
    unknown call_tmp[888419] "expr temp" "maybe param" "maybe type" "temp"
    (888422 'move' call_tmp[888419](240724 call - end_n[240649] start_n[240645]))
    unknown call_tmp[888424] "maybe param" "maybe type" "temp"
    (888427 'move' call_tmp[888424](240722 call + call_tmp[888419] 1))
    const n[240721] "dead at end of block" "const" "insert auto destroy"
    (650686 'init var' n[240721] call_tmp[888424])
    (240730 'end of statement')
    const nTasks[240732] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[697536] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[697537] "maybe param" "temp"
    unknown call_tmp[888431] "expr temp" "maybe param" "maybe type" "temp"
    (888434 'move' call_tmp[888431](240739 call nTasks _mt[203] state[240665]))
    unknown call_tmp[888436] "expr temp" "maybe param" "maybe type" "temp"
    (888439 'move' call_tmp[888436](240733 call >= n[240721] call_tmp[888431]))
    (697542 'move' tmp[697537](697540 call _cond_test call_tmp[888436]))
    if tmp[697537]
    {
      unknown tmp[697544] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (697546 'move' tmp[697544](240743 call nTasks _mt[203] state[240665]))
      (697551 'move' tmp[697536](697548 '_paramFoldLogical' tmp[697537] tmp[697544]))
    }
    {
      (697556 'move' tmp[697536](697553 '_paramFoldLogical' tmp[697537] 1))
    }
    (650688 'init var' nTasks[240732] tmp[697536])
    (240751 'end of statement')
    unknown call_tmp[888443] "expr temp" "maybe param" "maybe type" "temp"
    (888446 'move' call_tmp[888443](240754 call > nTasks[240732] 0))
    (240753 call assert call_tmp[888443])
    (562499 'end of statement' nTasks[240732])
    unknown call_tmp[888448] "expr temp" "maybe param" "maybe type" "temp"
    (888451 'move' call_tmp[888448](240769 call == n[240721] 0))
    unknown call_tmp[888453] "expr temp" "maybe param" "maybe type" "temp"
    (888456 'move' call_tmp[888453](240773 call _cond_test call_tmp[888448]))
    if call_tmp[888453]
    {
      unknown call_tmp[888460] "expr temp" "maybe param" "maybe type" "temp"
      (888463 'move' call_tmp[888460](240764 call counts _mt[203] state[240665]))
      (240759 call = call_tmp[888460] 0)
      (562501 'end of statement')
      gotoReturn _end_bucketize[623353] _end_bucketize[623353]
    }
    unknown call_tmp[888465] "maybe param" "maybe type" "temp"
    (888468 'move' call_tmp[888465](240779 call * nTasks[240732] nBuckets[240707]))
    const countsSize[240778] "dead at end of block" "const" "insert auto destroy"
    (650690 'init var' countsSize[240778] call_tmp[888465])
    (240784 'end of statement')
    unknown call_tmp[888470] "maybe param" "maybe type" "temp"
    (888473 'move' call_tmp[888470](240788 call divCeil n[240721] nTasks[240732]))
    const blockSize[240786] "dead at end of block" "const" "insert auto destroy"
    (650692 'init var' blockSize[240786] call_tmp[888470])
    (240792 'end of statement')
    unknown call_tmp[888475] "maybe param" "maybe type" "temp"
    (888478 'move' call_tmp[888475](240796 call divCeil n[240721] blockSize[240786]))
    const nBlocks[240794] "dead at end of block" "const" "insert auto destroy"
    (650694 'init var' nBlocks[240794] call_tmp[888475])
    (240800 'end of statement')
    {
      unknown tmpIter[389495] "expr temp" "maybe ref" "no copy" "temp"
      unknown call_tmp[888480] "expr temp" "maybe param" "maybe type" "temp"
      (888483 'move' call_tmp[888480](240806 call chpl_build_low_bounded_range 0))
      (389498 'move' tmpIter[389495](240803 call # call_tmp[888480] nTasks[240732]))
      unknown isBounded[389863] "maybe param" "temp"
      (389869 'move' isBounded[389863](389865 call chpl_supportsBoundedCoforall tmpIter[389495] 0))
      if isBounded[389863]
      {
        const _coforallCount[389732] "const" "end count" "temp"
        (389800 'move' _coforallCount[389732](389797 call _endCountAlloc 1))
        unknown numTasks[389733] "temp"
        (389784 'move' numTasks[389733](389780 call chpl_boundedCoforallSize tmpIter[389495] 0))
        (389775 call _upEndCount _coforallCount[389732] 1 numTasks[389733])
        (562507 'end of statement')
        (389772 call chpl_resetTaskSpawn numTasks[389733])
        (562508 'end of statement')
        unknown _indexOfInterest[389740] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[389741] "expr temp" "temp"
        (389750 'move' _iterator[389741](389748 call _getIterator tmpIter[389495]))
        Defer
        {
          {
            (389765 call _freeIterator _iterator[389741])
          }
        }
        { scopeless type
          (389755 'move' _indexOfInterest[389740](389752 call iteratorIndex _iterator[389741]))
        }
        ForLoop[389742]
        {
          unknown tid[389502] "coforall index var" "index var" "insert auto destroy"
          (562510 'end of statement')
          (389760 'move' tid[389502] _indexOfInterest[389740])
          (562511 'end of statement' tid[389502])
          {
            {
              unknown call_tmp[888485] "expr temp" "maybe param" "maybe type" "temp"
              (888488 'move' call_tmp[888485](389511 call * tid[389502] blockSize[240786]))
              unknown call_tmp[888490] "maybe param" "maybe type" "temp"
              (888493 'move' call_tmp[888490](389508 call + start_n[240645] call_tmp[888485]))
              unknown start[389506] "dead at end of block" "insert auto destroy"
              (650696 'init var' start[389506] call_tmp[888490])
              (389515 'end of statement')
              unknown call_tmp[888495] "expr temp" "maybe param" "maybe type" "temp"
              (888498 'move' call_tmp[888495](389521 call + start[389506] blockSize[240786]))
              unknown call_tmp[888500] "maybe param" "maybe type" "temp"
              (888503 'move' call_tmp[888500](389519 call - call_tmp[888495] 1))
              unknown end[389517] "dead at end of block" "insert auto destroy"
              (650698 'init var' end[389517] call_tmp[888500])
              (389526 'end of statement')
              unknown call_tmp[888505] "expr temp" "maybe param" "maybe type" "temp"
              (888508 'move' call_tmp[888505](389530 call > end[389517] end_n[240649]))
              unknown call_tmp[888510] "expr temp" "maybe param" "maybe type" "temp"
              (888513 'move' call_tmp[888510](389528 call _cond_test call_tmp[888505]))
              if call_tmp[888510]
              {
                (389535 call = end[389517] end_n[240649])
                (562517 'end of statement' end[389517])
              }
              unknown call_tmp[888515] "expr temp" "maybe param" "maybe type" "temp"
              (888518 'move' call_tmp[888515](389540 call _cond_test debug[240176]))
              if call_tmp[888515]
              {
                unknown call_tmp[888520] "expr temp" "maybe param" "maybe type" "temp"
                (888523 'move' call_tmp[888520](389550 call chpl_build_bounded_range start[389506] end[389517]))
                (389545 call writeln "tid " tid[389502] " considering " call_tmp[888520])
                (562519 'end of statement' tid[389502] start[389506] end[389517])
              }
              unknown counts[389555] "dead at end of block" "ref var"
              (650703 'init ref decl' counts[389555])
              unknown call_tmp[888527] "expr temp" "maybe param" "maybe type" "temp"
              (888530 'move' call_tmp[888527](389562 call(389559 call (partial) localState _mt[203] state[240665]) tid[389502]))
              unknown call_tmp[888534] "expr temp" "maybe param" "maybe type" "temp"
              (888537 'move' call_tmp[888534](389557 call localCounts _mt[203] call_tmp[888527]))
              (650701 'move' counts[389555](650700 'addr of' call_tmp[888534]))
              (389566 'end of statement' tid[389502] blockSize[240786] start[389506] blockSize[240786])
              {
                unknown _indexOfInterest[389568] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[389570] "expr temp" "temp"
                unknown call_tmp[888539] "expr temp" "maybe param" "maybe type" "temp"
                (888542 'move' call_tmp[888539](389577 call chpl_direct_counted_range_iter 0 nBuckets[240707]))
                (389572 'move' _iterator[389570](389575 call _getIterator call_tmp[888539]))
                Defer
                {
                  {
                    (389582 call _freeIterator _iterator[389570])
                  }
                }
                { scopeless type
                  (389586 'move' _indexOfInterest[389568](389589 call iteratorIndex _iterator[389570]))
                }
                ForLoop[389591]
                {
                  unknown bin[389594] "index var" "insert auto destroy"
                  (562524 'end of statement')
                  (389596 'move' bin[389594] _indexOfInterest[389568])
                  (562525 'end of statement' bin[389594])
                  {
                    unknown call_tmp[888544] "expr temp" "maybe param" "maybe type" "temp"
                    (888547 'move' call_tmp[888544](389603 call counts[389555] bin[389594]))
                    (389601 call = call_tmp[888544] 0)
                    (562527 'end of statement' counts[389555] bin[389594])
                  }
                  label _continueLabel[389606]
                  _indexOfInterest[389568]
                  _iterator[389570]
                }
                label _breakLabel[389608]
              }
              {
                unknown _indexOfInterest[389611] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[389613] "expr temp" "temp"
                unknown call_tmp[888551] "expr temp" "maybe param" "maybe type" "temp"
                (888554 'move' call_tmp[888551](389622 call bucketizer _mt[203] state[240665]))
                unknown call_tmp[888558] "expr temp" "maybe param" "maybe type" "temp"
                (888561 'move' call_tmp[888558](389626 call(389620 call (partial) classify _mt[203] call_tmp[888551]) src[240661] start[389506] end[389517] criterion[240668] startbit[240671]))
                (389615 'move' _iterator[389613](389618 call _getIterator call_tmp[888558]))
                Defer
                {
                  {
                    (389634 call _freeIterator _iterator[389613])
                  }
                }
                { scopeless type
                  (389638 'move' _indexOfInterest[389611](389641 call iteratorIndex _iterator[389613]))
                }
                ForLoop[389643]
                {
                  (389647 call _check_tuple_var_decl _indexOfInterest[389611] 2)
                  (562531 'end of statement')
                  unknown bin[389650] "index var" "insert auto destroy"
                  (562532 'end of statement')
                  (389652 'move' bin[389650](389655 call _indexOfInterest[389611] 1))
                  (562533 'end of statement' bin[389650])
                  {
                    unknown call_tmp[888563] "expr temp" "maybe param" "maybe type" "temp"
                    (888566 'move' call_tmp[888563](389661 call counts[389555] bin[389650]))
                    (389659 call += call_tmp[888563] 1)
                    (562535 'end of statement' counts[389555] bin[389650])
                  }
                  label _continueLabel[389664]
                  _indexOfInterest[389611]
                  _iterator[389613]
                }
                label _breakLabel[389666]
              }
              {
                unknown _indexOfInterest[389669] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[389671] "expr temp" "temp"
                unknown call_tmp[888568] "expr temp" "maybe param" "maybe type" "temp"
                (888571 'move' call_tmp[888568](389678 call chpl_direct_counted_range_iter 0 nBuckets[240707]))
                (389673 'move' _iterator[389671](389676 call _getIterator call_tmp[888568]))
                Defer
                {
                  {
                    (389683 call _freeIterator _iterator[389671])
                  }
                }
                { scopeless type
                  (389687 'move' _indexOfInterest[389669](389690 call iteratorIndex _iterator[389671]))
                }
                ForLoop[389692] order-independent
                {
                  unknown bin[389701] "index var" "insert auto destroy"
                  (562539 'end of statement')
                  (389703 'move' bin[389701] _indexOfInterest[389669])
                  (562540 'end of statement' bin[389701])
                  {
                    unknown call_tmp[888575] "expr temp" "maybe param" "maybe type" "temp"
                    (888578 'move' call_tmp[888575](389717 call * bin[389701] nTasks[240732]))
                    unknown call_tmp[888580] "expr temp" "maybe param" "maybe type" "temp"
                    (888583 'move' call_tmp[888580](389715 call + call_tmp[888575] tid[389502]))
                    unknown call_tmp[888585] "expr temp" "maybe param" "maybe type" "temp"
                    (888588 'move' call_tmp[888585](389713 call(389710 call (partial) globalCounts _mt[203] state[389693]) call_tmp[888580]))
                    unknown call_tmp[888590] "expr temp" "maybe param" "maybe type" "temp"
                    (888593 'move' call_tmp[888590](389722 call counts[389555] bin[389701]))
                    (389708 call = call_tmp[888585] call_tmp[888590])
                    (562542 'end of statement' state[389693] bin[389701] nTasks[240732] tid[389502] counts[389555] bin[389701])
                  }
                  label _continueLabel[389724]
                  _indexOfInterest[389669]
                  _iterator[389671]
                }
                label _breakLabel[389726]
              }
            }
            (389735 call _downEndCount _coforallCount[389732] nil[32])
            (389734 'coforall loop')
            (389728 'actuals list' tiMarkRef[283] state[240665])
          }
          label _continueLabel[389745]
          _indexOfInterest[389740]
          _iterator[389741]
        }
        label _breakLabel[389746]
        Defer
        {
          {
            (389787 call _endCountFree _coforallCount[389732])
          }
        }
        (389792 call _waitEndCount _coforallCount[389732] 1 numTasks[389733])
      }
      {
        const _coforallCount[389804] "const" "end count" "temp"
        (389860 'move' _coforallCount[389804](389857 call _endCountAlloc 1))
        unknown _indexOfInterest[389812] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[389813] "expr temp" "temp"
        (389822 'move' _iterator[389813](389820 call _getIterator tmpIter[389495]))
        Defer
        {
          {
            (389837 call _freeIterator _iterator[389813])
          }
        }
        { scopeless type
          (389827 'move' _indexOfInterest[389812](389824 call iteratorIndex _iterator[389813]))
        }
        ForLoop[389814]
        {
          unknown tid[240801] "coforall index var" "index var" "insert auto destroy"
          (562553 'end of statement')
          (389832 'move' tid[240801] _indexOfInterest[389812])
          (562554 'end of statement' tid[240801])
          (389844 call _upEndCount _coforallCount[389804] 1)
          (562556 'end of statement')
          {
            {
              unknown call_tmp[888595] "expr temp" "maybe param" "maybe type" "temp"
              (888598 'move' call_tmp[888595](240823 call * tid[240801] blockSize[240786]))
              unknown call_tmp[888600] "maybe param" "maybe type" "temp"
              (888603 'move' call_tmp[888600](240820 call + start_n[240645] call_tmp[888595]))
              unknown start[240819] "dead at end of block" "insert auto destroy"
              (650705 'init var' start[240819] call_tmp[888600])
              (240828 'end of statement')
              unknown call_tmp[888605] "expr temp" "maybe param" "maybe type" "temp"
              (888608 'move' call_tmp[888605](240833 call + start[240819] blockSize[240786]))
              unknown call_tmp[888610] "maybe param" "maybe type" "temp"
              (888613 'move' call_tmp[888610](240831 call - call_tmp[888605] 1))
              unknown end[240830] "dead at end of block" "insert auto destroy"
              (650707 'init var' end[240830] call_tmp[888610])
              (240839 'end of statement')
              unknown call_tmp[888615] "expr temp" "maybe param" "maybe type" "temp"
              (888618 'move' call_tmp[888615](240845 call > end[240830] end_n[240649]))
              unknown call_tmp[888620] "expr temp" "maybe param" "maybe type" "temp"
              (888623 'move' call_tmp[888620](240849 call _cond_test call_tmp[888615]))
              if call_tmp[888620]
              {
                (240841 call = end[240830] end_n[240649])
                (562561 'end of statement' end[240830])
              }
              unknown call_tmp[888625] "expr temp" "maybe param" "maybe type" "temp"
              (888628 'move' call_tmp[888625](240868 call _cond_test debug[240176]))
              if call_tmp[888625]
              {
                unknown call_tmp[888630] "expr temp" "maybe param" "maybe type" "temp"
                (888633 'move' call_tmp[888630](240864 call chpl_build_bounded_range start[240819] end[240830]))
                (240854 call writeln "tid " tid[240801] " considering " call_tmp[888630])
                (562563 'end of statement' tid[240801] start[240819] end[240830])
              }
              unknown counts[240874] "dead at end of block" "ref var"
              (650712 'init ref decl' counts[240874])
              unknown call_tmp[888637] "expr temp" "maybe param" "maybe type" "temp"
              (888640 'move' call_tmp[888637](240881 call(240878 call (partial) localState _mt[203] state[240665]) tid[240801]))
              unknown call_tmp[888644] "expr temp" "maybe param" "maybe type" "temp"
              (888647 'move' call_tmp[888644](240885 call localCounts _mt[203] call_tmp[888637]))
              (650710 'move' counts[240874](650709 'addr of' call_tmp[888644]))
              (240889 'end of statement' tid[240801] blockSize[240786] start[240819] blockSize[240786])
              {
                unknown _indexOfInterest[240905] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[240906] "expr temp" "temp"
                unknown call_tmp[888649] "expr temp" "maybe param" "maybe type" "temp"
                (888652 'move' call_tmp[888649](240922 call chpl_direct_counted_range_iter 0 nBuckets[240707]))
                (240915 'move' _iterator[240906](240913 call _getIterator call_tmp[888649]))
                Defer
                {
                  {
                    (240937 call _freeIterator _iterator[240906])
                  }
                }
                { scopeless type
                  (240927 'move' _indexOfInterest[240905](240924 call iteratorIndex _iterator[240906]))
                }
                ForLoop[240907]
                {
                  unknown bin[240890] "index var" "insert auto destroy"
                  (562568 'end of statement')
                  (240932 'move' bin[240890] _indexOfInterest[240905])
                  (562569 'end of statement' bin[240890])
                  {
                    unknown call_tmp[888654] "expr temp" "maybe param" "maybe type" "temp"
                    (888657 'move' call_tmp[888654](240902 call counts[240874] bin[240890]))
                    (240899 call = call_tmp[888654] 0)
                    (562571 'end of statement' counts[240874] bin[240890])
                  }
                  label _continueLabel[240910]
                  _indexOfInterest[240905]
                  _iterator[240906]
                }
                label _breakLabel[240911]
              }
              {
                unknown _indexOfInterest[240972] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[240973] "expr temp" "temp"
                unknown call_tmp[888661] "expr temp" "maybe param" "maybe type" "temp"
                (888664 'move' call_tmp[888661](240951 call bucketizer _mt[203] state[240665]))
                unknown call_tmp[888668] "expr temp" "maybe param" "maybe type" "temp"
                (888671 'move' call_tmp[888668](240959 call(240956 call (partial) classify _mt[203] call_tmp[888661]) src[240661] start[240819] end[240830] criterion[240668] startbit[240671]))
                (240982 'move' _iterator[240973](240980 call _getIterator call_tmp[888668]))
                Defer
                {
                  {
                    (241004 call _freeIterator _iterator[240973])
                  }
                }
                { scopeless type
                  (240987 'move' _indexOfInterest[240972](240984 call iteratorIndex _iterator[240973]))
                }
                ForLoop[240974]
                {
                  (240992 call _check_tuple_var_decl _indexOfInterest[240972] 2)
                  (562575 'end of statement')
                  unknown bin[240946] "index var" "insert auto destroy"
                  (562576 'end of statement')
                  (240999 'move' bin[240946](240996 call _indexOfInterest[240972] 1))
                  (562577 'end of statement' bin[240946])
                  {
                    unknown call_tmp[888673] "expr temp" "maybe param" "maybe type" "temp"
                    (888676 'move' call_tmp[888673](240969 call counts[240874] bin[240946]))
                    (240966 call += call_tmp[888673] 1)
                    (562579 'end of statement' counts[240874] bin[240946])
                  }
                  label _continueLabel[240977]
                  _indexOfInterest[240972]
                  _iterator[240973]
                }
                label _breakLabel[240978]
              }
              {
                unknown _indexOfInterest[241047] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[241048] "expr temp" "temp"
                unknown call_tmp[888678] "expr temp" "maybe param" "maybe type" "temp"
                (888681 'move' call_tmp[888678](241064 call chpl_direct_counted_range_iter 0 nBuckets[240707]))
                (241057 'move' _iterator[241048](241055 call _getIterator call_tmp[888678]))
                Defer
                {
                  {
                    (241079 call _freeIterator _iterator[241048])
                  }
                }
                { scopeless type
                  (241069 'move' _indexOfInterest[241047](241066 call iteratorIndex _iterator[241048]))
                }
                ForLoop[241049] order-independent
                {
                  unknown bin[241011] "index var" "insert auto destroy"
                  (562583 'end of statement')
                  (241074 'move' bin[241011] _indexOfInterest[241047])
                  (562584 'end of statement' bin[241011])
                  {
                    unknown call_tmp[888685] "expr temp" "maybe param" "maybe type" "temp"
                    (888688 'move' call_tmp[888685](241037 call * bin[241011] nTasks[240732]))
                    unknown call_tmp[888690] "expr temp" "maybe param" "maybe type" "temp"
                    (888693 'move' call_tmp[888690](241035 call + call_tmp[888685] tid[240801]))
                    unknown call_tmp[888695] "expr temp" "maybe param" "maybe type" "temp"
                    (888698 'move' call_tmp[888695](241034 call(241031 call (partial) globalCounts _mt[203] state[241021]) call_tmp[888690]))
                    unknown call_tmp[888700] "expr temp" "maybe param" "maybe type" "temp"
                    (888703 'move' call_tmp[888700](241043 call counts[240874] bin[241011]))
                    (241026 call = call_tmp[888695] call_tmp[888700])
                    (562586 'end of statement' state[241021] bin[241011] nTasks[240732] tid[240801] counts[240874] bin[241011])
                  }
                  label _continueLabel[241052]
                  _indexOfInterest[241047]
                  _iterator[241048]
                }
                label _breakLabel[241053]
              }
            }
            (389807 call _downEndCount _coforallCount[389804] nil[32])
            (389806 'coforall loop')
            (240809 'actuals list' tiMarkRef[283] state[240665])
          }
          label _continueLabel[389817]
          _indexOfInterest[389812]
          _iterator[389813]
        }
        label _breakLabel[389818]
        Defer
        {
          {
            (389848 call _endCountFree _coforallCount[389804])
          }
        }
        (389853 call _waitEndCount _coforallCount[389804] 1)
      }
    }
    unknown counts[241088] "dead at end of block" "ref var"
    (650717 'init ref decl' counts[241088])
    unknown call_tmp[888707] "expr temp" "maybe param" "maybe type" "temp"
    (888710 'move' call_tmp[888707](241090 call counts _mt[203] state[240665]))
    (650715 'move' counts[241088](650714 'addr of' call_tmp[888707]))
    (241094 'end of statement' n[240721] nTasks[240732] nBuckets[240707] nTasks[240732] blockSize[240786])
    unknown call_tmp[469513] "expr temp" "maybe param" "maybe type" "temp"
    unknown call_tmp[888712] "expr temp" "maybe param" "maybe type" "temp"
    (888715 'move' call_tmp[888712](241100 call chpl_build_low_bounded_range 0))
    (469516 'move' call_tmp[469513](241097 call # call_tmp[888712] nBuckets[240707]))
    unknown call_tmp[888717] "maybe param" "maybe type" "temp"
    (888720 'move' call_tmp[888717](469668 call chpl__staticAutoLocalCheck counts[241088] call_tmp[469513]))
    unknown chpl__staticAutoLocalCheckSym[469667] "dead at end of block" "param" "temp"
    (650719 'init var' chpl__staticAutoLocalCheckSym[469667] call_tmp[888717])
    if chpl__staticAutoLocalCheckSym[469667]
    {
      unknown tmp[507909] "maybe param" "temp"
      (507920 'move' tmp[507909] chpl__staticAutoLocalCheckSym[469667])
      unknown call_tmp[888722] "expr temp" "maybe param" "maybe type" "temp"
      (888725 'move' call_tmp[888722](507922 call _cond_invalid tmp[507909]))
      if call_tmp[888722]
      {
        (507925 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[697590] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[697591] "maybe param" "temp"
      unknown call_tmp[888727] "expr temp" "maybe param" "maybe type" "temp"
      (888730 'move' call_tmp[888727](507910 call isTrue tmp[507909]))
      (697596 'move' tmp[697591](697594 call _cond_test call_tmp[888727]))
      if tmp[697591]
      {
        unknown tmp[507930] "maybe param" "temp"
        (507941 'move' tmp[507930](469679 'u!' chpl__staticAutoLocalCheckSym[469667]))
        unknown call_tmp[888732] "expr temp" "maybe param" "maybe type" "temp"
        (888735 'move' call_tmp[888732](507943 call _cond_invalid tmp[507930]))
        if call_tmp[888732]
        {
          (507946 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[697563] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[697564] "maybe param" "temp"
        unknown call_tmp[888737] "expr temp" "maybe param" "maybe type" "temp"
        (888740 'move' call_tmp[888737](507931 call isTrue tmp[507930]))
        (697569 'move' tmp[697564](697567 call _cond_test call_tmp[888737]))
        if tmp[697564]
        {
          (697574 'move' tmp[697563](697571 '_paramFoldLogical' tmp[697564] 1))
        }
        {
          unknown tmp[697576] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[888742] "expr temp" "maybe param" "maybe type" "temp"
          (888745 'move' call_tmp[888742](469674 call chpl__dynamicAutoLocalCheck counts[241088] call_tmp[469513]))
          (697578 'move' tmp[697576](507935 call isTrue call_tmp[888742]))
          (697583 'move' tmp[697563](697580 '_paramFoldLogical' tmp[697564] tmp[697576]))
        }
        unknown tmp[697598] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (697600 'move' tmp[697598](507913 call isTrue tmp[697563]))
        (697605 'move' tmp[697590](697602 '_paramFoldLogical' tmp[697591] tmp[697598]))
      }
      {
        (697610 'move' tmp[697590](697607 '_paramFoldLogical' tmp[697591] 0))
      }
      if tmp[697590]
      {
        Forall[241186] {
          induction variables:
            
            unknown bin[241095] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[469513]
          shadow variables:
            counts[241105] 'ref' intent outer var counts[241088]
              init block
              {
              }
              deinit block
              {
              }
          other variables
            forall body
          {
            unknown total[241111] "dead at end of block" "insert auto destroy"
            (650721 'init var' total[241111] 0)
            (241114 'end of statement')
            {
              unknown _indexOfInterest[241139] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[241140] "expr temp" "temp"
              unknown call_tmp[888747] "expr temp" "maybe param" "maybe type" "temp"
              (888750 'move' call_tmp[888747](241156 call chpl_direct_counted_range_iter 0 nTasks[240732]))
              (241149 'move' _iterator[241140](241147 call _getIterator call_tmp[888747]))
              Defer
              {
                {
                  (241171 call _freeIterator _iterator[241140])
                }
              }
              { scopeless type
                (241161 'move' _indexOfInterest[241139](241158 call iteratorIndex _iterator[241140]))
              }
              ForLoop[241141]
              {
                unknown tid[241115] "index var" "insert auto destroy"
                (562598 'end of statement')
                (241166 'move' tid[241115] _indexOfInterest[241139])
                (562599 'end of statement' tid[241115])
                {
                  unknown call_tmp[888754] "expr temp" "maybe param" "maybe type" "temp"
                  (888757 'move' call_tmp[888754](241134 call * bin[241095] nTasks[240732]))
                  unknown call_tmp[888759] "expr temp" "maybe param" "maybe type" "temp"
                  (888762 'move' call_tmp[888759](241132 call + call_tmp[888754] tid[241115]))
                  unknown call_tmp[888764] "expr temp" "maybe param" "maybe type" "temp"
                  (888767 'move' call_tmp[888764](241131 call(241128 call (partial) globalCounts _mt[203] state[240665]) call_tmp[888759]))
                  (241124 call += total[241111] call_tmp[888764])
                  (562601 'end of statement' total[241111] bin[241095] nTasks[240732] tid[241115])
                }
                label _continueLabel[241144]
                _indexOfInterest[241139]
                _iterator[241140]
              }
              label _breakLabel[241145]
            }
            unknown call_tmp[888769] "expr temp" "maybe param" "maybe type" "temp"
            (888772 'move' call_tmp[888769](469683 'may be local access' counts[241088] bin[241095] chpl__staticAutoLocalCheckSym[469667] 0))
            (241178 call = call_tmp[888769] total[241111])
            (562606 'end of statement' counts[241088] bin[241095] total[241111])
          }
        }
      }
      {
        Forall[469656] {
          induction variables:
            
            unknown bin[469657] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[469513]
          shadow variables:
            counts[469661] 'ref' intent outer var counts[241088]
              init block
              {
              }
              deinit block
              {
              }
          other variables
            forall body
          {
            unknown total[469594] "dead at end of block" "insert auto destroy"
            (650723 'init var' total[469594] 0)
            (469597 'end of statement')
            {
              unknown _indexOfInterest[469599] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[469601] "expr temp" "temp"
              unknown call_tmp[888774] "expr temp" "maybe param" "maybe type" "temp"
              (888777 'move' call_tmp[888774](469608 call chpl_direct_counted_range_iter 0 nTasks[240732]))
              (469603 'move' _iterator[469601](469606 call _getIterator call_tmp[888774]))
              Defer
              {
                {
                  (469613 call _freeIterator _iterator[469601])
                }
              }
              { scopeless type
                (469617 'move' _indexOfInterest[469599](469620 call iteratorIndex _iterator[469601]))
              }
              ForLoop[469622]
              {
                unknown tid[469625] "index var" "insert auto destroy"
                (562611 'end of statement')
                (469627 'move' tid[469625] _indexOfInterest[469599])
                (562612 'end of statement' tid[469625])
                {
                  unknown call_tmp[888781] "expr temp" "maybe param" "maybe type" "temp"
                  (888784 'move' call_tmp[888781](469642 call * bin[469657] nTasks[240732]))
                  unknown call_tmp[888786] "expr temp" "maybe param" "maybe type" "temp"
                  (888789 'move' call_tmp[888786](469640 call + call_tmp[888781] tid[469625]))
                  unknown call_tmp[888791] "expr temp" "maybe param" "maybe type" "temp"
                  (888794 'move' call_tmp[888791](469638 call(469635 call (partial) globalCounts _mt[203] state[240665]) call_tmp[888786]))
                  (469632 call += total[469594] call_tmp[888791])
                  (562614 'end of statement' total[469594] bin[469657] nTasks[240732] tid[469625])
                }
                label _continueLabel[469646]
                _indexOfInterest[469599]
                _iterator[469601]
              }
              label _breakLabel[469648]
            }
            unknown call_tmp[888796] "expr temp" "maybe param" "maybe type" "temp"
            (888799 'move' call_tmp[888796](469653 call counts[469661] bin[469657]))
            (469651 call = call_tmp[888796] total[469594])
            (562619 'end of statement' counts[469661] bin[469657] total[469594])
          }
        }
      }
    }
    {
      Forall[469582] {
        induction variables:
          
          unknown bin[469583] "index var" "insert auto destroy"
        iterated expressions:
          call_tmp[469513]
        shadow variables:
          counts[469587] 'ref' intent outer var counts[241088]
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          unknown total[469520] "dead at end of block" "insert auto destroy"
          (650725 'init var' total[469520] 0)
          (469523 'end of statement')
          {
            unknown _indexOfInterest[469525] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[469527] "expr temp" "temp"
            unknown call_tmp[888801] "expr temp" "maybe param" "maybe type" "temp"
            (888804 'move' call_tmp[888801](469534 call chpl_direct_counted_range_iter 0 nTasks[240732]))
            (469529 'move' _iterator[469527](469532 call _getIterator call_tmp[888801]))
            Defer
            {
              {
                (469539 call _freeIterator _iterator[469527])
              }
            }
            { scopeless type
              (469543 'move' _indexOfInterest[469525](469546 call iteratorIndex _iterator[469527]))
            }
            ForLoop[469548]
            {
              unknown tid[469551] "index var" "insert auto destroy"
              (562624 'end of statement')
              (469553 'move' tid[469551] _indexOfInterest[469525])
              (562625 'end of statement' tid[469551])
              {
                unknown call_tmp[888808] "expr temp" "maybe param" "maybe type" "temp"
                (888811 'move' call_tmp[888808](469568 call * bin[469583] nTasks[240732]))
                unknown call_tmp[888813] "expr temp" "maybe param" "maybe type" "temp"
                (888816 'move' call_tmp[888813](469566 call + call_tmp[888808] tid[469551]))
                unknown call_tmp[888818] "expr temp" "maybe param" "maybe type" "temp"
                (888821 'move' call_tmp[888818](469564 call(469561 call (partial) globalCounts _mt[203] state[240665]) call_tmp[888813]))
                (469558 call += total[469520] call_tmp[888818])
                (562627 'end of statement' total[469520] bin[469583] nTasks[240732] tid[469551])
              }
              label _continueLabel[469572]
              _indexOfInterest[469525]
              _iterator[469527]
            }
            label _breakLabel[469574]
          }
          unknown call_tmp[888823] "expr temp" "maybe param" "maybe type" "temp"
          (888826 'move' call_tmp[888823](469579 call counts[469587] bin[469583]))
          (469577 call = call_tmp[888823] total[469520])
          (562632 'end of statement' counts[469587] bin[469583] total[469520])
        }
      }
    }
    unknown tmp[498480] "maybe param" "temp"
    unknown call_tmp[888830] "expr temp" "maybe param" "maybe type" "temp"
    (888833 'move' call_tmp[888830](241361 call bucketizer _mt[203] state[240665]))
    unknown call_tmp[888837] "expr temp" "maybe param" "maybe type" "temp"
    (888840 'move' call_tmp[888837](241366 call isSampleSort _mt[203] call_tmp[888830]))
    (498491 'move' tmp[498480](241358 call ! call_tmp[888837]))
    unknown call_tmp[888842] "expr temp" "maybe param" "maybe type" "temp"
    (888845 'move' call_tmp[888842](498493 call _cond_invalid tmp[498480]))
    if call_tmp[888842]
    {
      (498496 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[697617] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[697618] "maybe param" "temp"
    unknown call_tmp[888847] "expr temp" "maybe param" "maybe type" "temp"
    (888850 'move' call_tmp[888847](498481 call isTrue tmp[498480]))
    (697623 'move' tmp[697618](697621 call _cond_test call_tmp[888847]))
    if tmp[697618]
    {
      unknown tmp[697625] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (697627 'move' tmp[697625](498484 call isTrue allowSkipahead[240675]))
      (697632 'move' tmp[697617](697629 '_paramFoldLogical' tmp[697618] tmp[697625]))
    }
    {
      (697637 'move' tmp[697617](697634 '_paramFoldLogical' tmp[697618] 0))
    }
    unknown call_tmp[888852] "expr temp" "maybe param" "maybe type" "temp"
    (888855 'move' call_tmp[888852](241370 call _cond_test tmp[697617]))
    if call_tmp[888852]
    {
      unknown call_tmp[888857] "maybe param" "maybe type" "temp"
      (888860 'move' call_tmp[888857](241193 call - 1))
      unknown onlyBin[241191] "dead at end of block" "insert auto destroy"
      (650727 'init var' onlyBin[241191] call_tmp[888857] int(64)[10])
      (241197 'end of statement')
      {
        unknown _indexOfInterest[241244] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[241245] "expr temp" "temp"
        unknown call_tmp[888862] "expr temp" "maybe param" "maybe type" "temp"
        (888865 'move' call_tmp[888862](241261 call chpl_direct_counted_range_iter 0 nBuckets[240707]))
        (241254 'move' _iterator[241245](241252 call _getIterator call_tmp[888862]))
        Defer
        {
          {
            (241276 call _freeIterator _iterator[241245])
          }
        }
        { scopeless type
          (241266 'move' _indexOfInterest[241244](241263 call iteratorIndex _iterator[241245]))
        }
        ForLoop[241246]
        {
          unknown bin[241198] "index var" "insert auto destroy"
          (562638 'end of statement')
          (241271 'move' bin[241198] _indexOfInterest[241244])
          (562639 'end of statement' bin[241198])
          {
            unknown call_tmp[888867] "maybe param" "maybe type" "temp"
            (888870 'move' call_tmp[888867](241210 call counts[241088] bin[241198]))
            unknown total[241208] "dead at end of block" "insert auto destroy"
            (650729 'init var' total[241208] call_tmp[888867])
            (241213 'end of statement' counts[241088] bin[241198])
            unknown call_tmp[888872] "expr temp" "maybe param" "maybe type" "temp"
            (888875 'move' call_tmp[888872](241235 call == total[241208] 0))
            unknown call_tmp[888877] "expr temp" "maybe param" "maybe type" "temp"
            (888880 'move' call_tmp[888877](241239 call _cond_test call_tmp[888872]))
            if call_tmp[888877]
            {
            }
            {
              unknown call_tmp[888882] "expr temp" "maybe param" "maybe type" "temp"
              (888885 'move' call_tmp[888882](241227 call == total[241208] n[240721]))
              unknown call_tmp[888887] "expr temp" "maybe param" "maybe type" "temp"
              (888890 'move' call_tmp[888887](241231 call _cond_test call_tmp[888882]))
              if call_tmp[888887]
              {
                (241216 call = onlyBin[241191] bin[241198])
                (562643 'end of statement' onlyBin[241191] bin[241198])
                break _breakLabel[241250] _breakLabel[241250]
              }
              {
                break _breakLabel[241250] _breakLabel[241250]
              }
            }
          }
          label _continueLabel[241249]
          _indexOfInterest[241244]
          _iterator[241245]
        }
        label _breakLabel[241250]
      }
      unknown call_tmp[888892] "expr temp" "maybe param" "maybe type" "temp"
      (888895 'move' call_tmp[888892](241348 call >= onlyBin[241191] 0))
      unknown call_tmp[888897] "expr temp" "maybe param" "maybe type" "temp"
      (888900 'move' call_tmp[888897](241352 call _cond_test call_tmp[888892]))
      if call_tmp[888897]
      {
        unknown call_tmp[888904] "expr temp" "maybe param" "maybe type" "temp"
        (888907 'move' call_tmp[888904](241288 call bucketizer _mt[203] state[240665]))
        unknown call_tmp[888911] "expr temp" "maybe param" "maybe type" "temp"
        (888914 'move' call_tmp[888911](241296 call(241293 call (partial) getNextStartBit _mt[203] call_tmp[888904]) startbit[240671]))
        (241284 call = startbit[240671] call_tmp[888911])
        (562646 'end of statement')
        unknown call_tmp[888918] "expr temp" "maybe param" "maybe type" "temp"
        (888921 'move' call_tmp[888918](241304 call endbit _mt[203] state[240665]))
        unknown call_tmp[888923] "expr temp" "maybe param" "maybe type" "temp"
        (888926 'move' call_tmp[888923](241300 call > startbit[240671] call_tmp[888918]))
        unknown call_tmp[888928] "expr temp" "maybe param" "maybe type" "temp"
        (888931 'move' call_tmp[888928](241307 call _cond_test call_tmp[888923]))
        if call_tmp[888928]
        {
          gotoReturn _end_bucketize[623353] _end_bucketize[623353]
        }
        unknown call_tmp[888935] "expr temp" "maybe param" "maybe type" "temp"
        (888938 'move' call_tmp[888935](241317 call bucketizer _mt[203] state[240665]))
        unknown call_tmp[888942] "expr temp" "maybe param" "maybe type" "temp"
        (888945 'move' call_tmp[888942](241325 call(241322 call (partial) getBinsToRecursivelySort _mt[203] call_tmp[888935])))
        unknown call_tmp[888949] "expr temp" "maybe param" "maybe type" "temp"
        (888952 'move' call_tmp[888949](241329 call(241326 call (partial) contains _mt[203] call_tmp[888942]) onlyBin[241191]))
        unknown call_tmp[888954] "expr temp" "maybe param" "maybe type" "temp"
        (888957 'move' call_tmp[888954](241314 call ! call_tmp[888949]))
        unknown call_tmp[888959] "expr temp" "maybe param" "maybe type" "temp"
        (888962 'move' call_tmp[888959](241331 call _cond_test call_tmp[888954]))
        if call_tmp[888959]
        {
          gotoReturn _end_bucketize[623353] _end_bucketize[623353]
        }
        (241337 call bucketize start_n[240645] end_n[240649] dst[240655] src[240661] state[240665] criterion[240668] startbit[240671](allowSkipahead = 1))
        (562649 'end of statement')
        gotoReturn _end_bucketize[623353] _end_bucketize[623353]
      }
    }
    function chpl__scan1[241389](arg chpl_toScan[241391]:_any[141](?)) : _unknown[42] "compiler nested function" "fn returns iterator"
    {
      unknown ret[623346] "RVV" "temp"
      unknown chpl_eltType[241393] "maybe type" "temp"
      { scopeless type
        unknown call_tmp[888964] "expr temp" "maybe param" "maybe type" "temp"
        (888967 'move' call_tmp[888964](241405 call _getIterator chpl_toScan[241391]))
        unknown call_tmp[888969] "maybe param" "maybe type" "temp"
        (888972 'move' call_tmp[888969](241403 call iteratorIndex call_tmp[888964]))
        unknown call_tmp[888974] "expr temp" "maybe param" "maybe type" "temp"
        (888977 'move' call_tmp[888974](241401 call chpl__initCopy call_tmp[888969] 0))
        (241397 'move' chpl_eltType[241393](241399 'typeof' call_tmp[888974]))
      }
      const tmp[241394] "const" "temp"
      (241415 'move' tmp[241394](1000414 'new' SumReduceScanOp[429526](?)(eltType = chpl_eltType[241393])(_chpl_manager = unmanaged[183](?))))
      unknown call_tmp[888979] "expr temp" "maybe param" "maybe type" "temp"
      (888982 'move' call_tmp[888979](241419 call chpl__scanIterator tmp[241394] chpl_toScan[241391]))
      (623351 'move' ret[623346](623350 'deref' call_tmp[888979]))
      (623348 return ret[623346])
    }
    unknown call_tmp[888986] "expr temp" "maybe param" "maybe type" "temp"
    (888989 'move' call_tmp[888986](241379 call globalEnds _mt[203] state[240665]))
    unknown call_tmp[888993] "expr temp" "maybe param" "maybe type" "temp"
    (888996 'move' call_tmp[888993](241386 call globalCounts _mt[203] state[240665]))
    unknown call_tmp[888998] "expr temp" "maybe param" "maybe type" "temp"
    (889001 'move' call_tmp[888998](241423 call chpl__scan1[241389] call_tmp[888993]))
    unknown call_tmp[889003] "expr temp" "maybe param" "maybe type" "temp"
    (889006 'move' call_tmp[889003](241382 call + call_tmp[888998] start_n[240645]))
    (241374 call = call_tmp[888986] call_tmp[889003])
    (562652 'end of statement')
    unknown call_tmp[889008] "expr temp" "maybe param" "maybe type" "temp"
    (889011 'move' call_tmp[889008](241577 call _cond_test debug[240176]))
    if call_tmp[889008]
    {
      {
        unknown _indexOfInterest[241537] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[241538] "expr temp" "temp"
        unknown call_tmp[889013] "expr temp" "maybe param" "maybe type" "temp"
        (889016 'move' call_tmp[889013](241554 call chpl_direct_counted_range_iter 0 nBuckets[240707]))
        (241547 'move' _iterator[241538](241545 call _getIterator call_tmp[889013]))
        Defer
        {
          {
            (241569 call _freeIterator _iterator[241538])
          }
        }
        { scopeless type
          (241559 'move' _indexOfInterest[241537](241556 call iteratorIndex _iterator[241538]))
        }
        ForLoop[241539]
        {
          unknown bin[241426] "index var" "insert auto destroy"
          (562654 'end of statement')
          (241564 'move' bin[241426] _indexOfInterest[241537])
          (562655 'end of statement' bin[241426])
          {
            {
              unknown _indexOfInterest[241498] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[241499] "expr temp" "temp"
              unknown call_tmp[889018] "expr temp" "maybe param" "maybe type" "temp"
              (889021 'move' call_tmp[889018](241515 call chpl_direct_counted_range_iter 0 nTasks[240732]))
              (241508 'move' _iterator[241499](241506 call _getIterator call_tmp[889018]))
              Defer
              {
                {
                  (241530 call _freeIterator _iterator[241499])
                }
              }
              { scopeless type
                (241520 'move' _indexOfInterest[241498](241517 call iteratorIndex _iterator[241499]))
              }
              ForLoop[241500]
              {
                unknown tid[241435] "index var" "insert auto destroy"
                (562658 'end of statement')
                (241525 'move' tid[241435] _indexOfInterest[241498])
                (562659 'end of statement' tid[241435])
                {
                  unknown call_tmp[889023] "expr temp" "maybe param" "maybe type" "temp"
                  (889026 'move' call_tmp[889023](241448 call * bin[241426] nTasks[240732]))
                  unknown call_tmp[889028] "maybe param" "maybe type" "temp"
                  (889031 'move' call_tmp[889028](241446 call + call_tmp[889023] tid[241435]))
                  unknown gb[241445] "dead at end of block" "insert auto destroy"
                  (650731 'init var' gb[241445] call_tmp[889028])
                  (241454 'end of statement' bin[241426] nTasks[240732] tid[241435])
                  unknown call_tmp[889035] "expr temp" "maybe param" "maybe type" "temp"
                  (889038 'move' call_tmp[889035](241491 call(241488 call (partial) globalCounts _mt[203] state[240665]) gb[241445]))
                  unknown call_tmp[889040] "expr temp" "maybe param" "maybe type" "temp"
                  (889043 'move' call_tmp[889040](241485 call != call_tmp[889035] 0))
                  unknown call_tmp[889045] "expr temp" "maybe param" "maybe type" "temp"
                  (889048 'move' call_tmp[889045](241494 call _cond_test call_tmp[889040]))
                  if call_tmp[889045]
                  {
                    unknown call_tmp[889052] "expr temp" "maybe param" "maybe type" "temp"
                    (889055 'move' call_tmp[889052](241471 call(241468 call (partial) globalCounts _mt[203] state[240665]) gb[241445]))
                    unknown call_tmp[889059] "expr temp" "maybe param" "maybe type" "temp"
                    (889062 'move' call_tmp[889059](241482 call(241479 call (partial) globalEnds _mt[203] state[240665]) gb[241445]))
                    unknown call_tmp[889064] "expr temp" "maybe param" "maybe type" "temp"
                    (889067 'move' call_tmp[889064](241476 call - call_tmp[889059] 1))
                    (241457 call writeln "tid " tid[241435] " count[" bin[241426] "] = " call_tmp[889052] " end = " call_tmp[889064])
                    (562664 'end of statement' tid[241435] bin[241426] gb[241445])
                  }
                }
                label _continueLabel[241503]
                _indexOfInterest[241498]
                _iterator[241499]
              }
              label _breakLabel[241504]
            }
          }
          label _continueLabel[241542]
          _indexOfInterest[241537]
          _iterator[241538]
        }
        label _breakLabel[241543]
      }
    }
    {
      unknown tmpIter[389873] "expr temp" "maybe ref" "no copy" "temp"
      unknown call_tmp[889069] "expr temp" "maybe param" "maybe type" "temp"
      (889072 'move' call_tmp[889069](241586 call chpl_build_low_bounded_range 0))
      (389876 'move' tmpIter[389873](241583 call # call_tmp[889069] nTasks[240732]))
      unknown isBounded[390264] "maybe param" "temp"
      (390270 'move' isBounded[390264](390266 call chpl_supportsBoundedCoforall tmpIter[389873] 0))
      if isBounded[390264]
      {
        const _coforallCount[390133] "const" "end count" "temp"
        (390201 'move' _coforallCount[390133](390198 call _endCountAlloc 1))
        unknown numTasks[390134] "temp"
        (390185 'move' numTasks[390134](390181 call chpl_boundedCoforallSize tmpIter[389873] 0))
        (390176 call _upEndCount _coforallCount[390133] 1 numTasks[390134])
        (562668 'end of statement')
        (390173 call chpl_resetTaskSpawn numTasks[390134])
        (562669 'end of statement')
        unknown _indexOfInterest[390141] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[390142] "expr temp" "temp"
        (390151 'move' _iterator[390142](390149 call _getIterator tmpIter[389873]))
        Defer
        {
          {
            (390166 call _freeIterator _iterator[390142])
          }
        }
        { scopeless type
          (390156 'move' _indexOfInterest[390141](390153 call iteratorIndex _iterator[390142]))
        }
        ForLoop[390143]
        {
          unknown tid[389880] "coforall index var" "index var" "insert auto destroy"
          (562671 'end of statement')
          (390161 'move' tid[389880] _indexOfInterest[390141])
          (562672 'end of statement' tid[389880])
          {
            {
              unknown call_tmp[889074] "expr temp" "maybe param" "maybe type" "temp"
              (889077 'move' call_tmp[889074](389889 call * tid[389880] blockSize[240786]))
              unknown call_tmp[889079] "maybe param" "maybe type" "temp"
              (889082 'move' call_tmp[889079](389886 call + start_n[240645] call_tmp[889074]))
              unknown start[389884] "dead at end of block" "insert auto destroy"
              (650733 'init var' start[389884] call_tmp[889079])
              (389893 'end of statement')
              unknown call_tmp[889084] "expr temp" "maybe param" "maybe type" "temp"
              (889087 'move' call_tmp[889084](389899 call + start[389884] blockSize[240786]))
              unknown call_tmp[889089] "maybe param" "maybe type" "temp"
              (889092 'move' call_tmp[889089](389897 call - call_tmp[889084] 1))
              unknown end[389895] "dead at end of block" "insert auto destroy"
              (650735 'init var' end[389895] call_tmp[889089])
              (389904 'end of statement')
              unknown call_tmp[889094] "expr temp" "maybe param" "maybe type" "temp"
              (889097 'move' call_tmp[889094](389908 call > end[389895] end_n[240649]))
              unknown call_tmp[889099] "expr temp" "maybe param" "maybe type" "temp"
              (889102 'move' call_tmp[889099](389906 call _cond_test call_tmp[889094]))
              if call_tmp[889099]
              {
                (389913 call = end[389895] end_n[240649])
                (562678 'end of statement' end[389895])
              }
              unknown nextOffsets[389918] "dead at end of block" "ref var"
              (650740 'init ref decl' nextOffsets[389918])
              unknown call_tmp[889106] "expr temp" "maybe param" "maybe type" "temp"
              (889109 'move' call_tmp[889106](389925 call(389922 call (partial) localState _mt[203] state[240665]) tid[389880]))
              unknown call_tmp[889113] "expr temp" "maybe param" "maybe type" "temp"
              (889116 'move' call_tmp[889113](389920 call localCounts _mt[203] call_tmp[889106]))
              (650738 'move' nextOffsets[389918](650737 'addr of' call_tmp[889113]))
              (389929 'end of statement' tid[389880] blockSize[240786] start[389884] blockSize[240786])
              {
                unknown _indexOfInterest[389931] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[389933] "expr temp" "temp"
                unknown call_tmp[889118] "expr temp" "maybe param" "maybe type" "temp"
                (889121 'move' call_tmp[889118](389940 call chpl_direct_counted_range_iter 0 nBuckets[240707]))
                (389935 'move' _iterator[389933](389938 call _getIterator call_tmp[889118]))
                Defer
                {
                  {
                    (389945 call _freeIterator _iterator[389933])
                  }
                }
                { scopeless type
                  (389949 'move' _indexOfInterest[389931](389952 call iteratorIndex _iterator[389933]))
                }
                ForLoop[389954]
                {
                  unknown bin[389957] "index var" "insert auto destroy"
                  (562681 'end of statement')
                  (389959 'move' bin[389957] _indexOfInterest[389931])
                  (562682 'end of statement' bin[389957])
                  {
                    unknown call_tmp[889123] "expr temp" "maybe param" "maybe type" "temp"
                    (889126 'move' call_tmp[889123](389968 call * bin[389957] nTasks[240732]))
                    unknown call_tmp[889128] "maybe param" "maybe type" "temp"
                    (889131 'move' call_tmp[889128](389966 call + call_tmp[889123] tid[389880]))
                    unknown globalBin[389964] "dead at end of block" "insert auto destroy"
                    (650742 'init var' globalBin[389964] call_tmp[889128])
                    (389973 'end of statement' bin[389957] nTasks[240732] tid[389880])
                    unknown tmp[697644] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                    unknown tmp[697645] "maybe param" "temp"
                    unknown call_tmp[889133] "expr temp" "maybe param" "maybe type" "temp"
                    (889136 'move' call_tmp[889133](389980 call > globalBin[389964] 0))
                    (697650 'move' tmp[697645](697648 call _cond_test call_tmp[889133]))
                    if tmp[697645]
                    {
                      unknown tmp[697652] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                      unknown call_tmp[889140] "expr temp" "maybe param" "maybe type" "temp"
                      (889143 'move' call_tmp[889140](389990 call - globalBin[389964] 1))
                      (697654 'move' tmp[697652](389988 call(389985 call (partial) globalEnds _mt[203] state[240665]) call_tmp[889140]))
                      (697659 'move' tmp[697644](697656 '_paramFoldLogical' tmp[697645] tmp[697652]))
                    }
                    {
                      (697664 'move' tmp[697644](697661 '_paramFoldLogical' tmp[697645] start_n[240645]))
                    }
                    unknown call_tmp[889145] "expr temp" "maybe param" "maybe type" "temp"
                    (889148 'move' call_tmp[889145](389977 call nextOffsets[389918] bin[389957]))
                    (389975 call = call_tmp[889145] tmp[697644])
                    (562687 'end of statement' nextOffsets[389918] bin[389957] globalBin[389964])
                    unknown call_tmp[889150] "expr temp" "maybe param" "maybe type" "temp"
                    (889153 'move' call_tmp[889150](389997 call _cond_test debug[240176]))
                    if call_tmp[889150]
                    {
                      unknown call_tmp[889157] "expr temp" "maybe param" "maybe type" "temp"
                      (889160 'move' call_tmp[889157](390008 call(390005 call (partial) globalCounts _mt[203] state[240665]) globalBin[389964]))
                      unknown call_tmp[889162] "expr temp" "maybe param" "maybe type" "temp"
                      (889165 'move' call_tmp[889162](390003 call != call_tmp[889157] 0))
                      unknown call_tmp[889167] "expr temp" "maybe param" "maybe type" "temp"
                      (889170 'move' call_tmp[889167](390001 call _cond_test call_tmp[889162]))
                      if call_tmp[889167]
                      {
                        unknown call_tmp[889172] "expr temp" "maybe param" "maybe type" "temp"
                        (889175 'move' call_tmp[889172](390020 call nextOffsets[389918] bin[389957]))
                        (390013 call writeln "tid " tid[389880] " nextOffsets[" bin[389957] "] = " call_tmp[889172])
                        (562691 'end of statement' tid[389880] bin[389957] nextOffsets[389918] bin[389957])
                      }
                    }
                  }
                  label _continueLabel[390024]
                  _indexOfInterest[389931]
                  _iterator[389933]
                }
                label _breakLabel[390026]
              }
              {
                unknown _indexOfInterest[390029] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[390031] "expr temp" "temp"
                unknown call_tmp[889179] "expr temp" "maybe param" "maybe type" "temp"
                (889182 'move' call_tmp[889179](390040 call bucketizer _mt[203] state[240665]))
                unknown call_tmp[889186] "expr temp" "maybe param" "maybe type" "temp"
                (889189 'move' call_tmp[889186](390044 call(390038 call (partial) classify _mt[203] call_tmp[889179]) src[240661] start[389884] end[389895] criterion[240668] startbit[240671]))
                (390033 'move' _iterator[390031](390036 call _getIterator call_tmp[889186]))
                Defer
                {
                  {
                    (390052 call _freeIterator _iterator[390031])
                  }
                }
                { scopeless type
                  (390056 'move' _indexOfInterest[390029](390059 call iteratorIndex _iterator[390031]))
                }
                ForLoop[390061]
                {
                  (390065 call _check_tuple_var_decl _indexOfInterest[390029] 2)
                  (562697 'end of statement')
                  unknown i[390068] "index var" "insert auto destroy"
                  (562698 'end of statement')
                  (390070 'move' i[390068](390073 call _indexOfInterest[390029] 0))
                  (562699 'end of statement' i[390068])
                  unknown bin[390075] "index var" "insert auto destroy"
                  (562701 'end of statement')
                  (390077 'move' bin[390075](390080 call _indexOfInterest[390029] 1))
                  (562702 'end of statement' bin[390075])
                  {
                    unknown next[390084] "dead at end of block" "ref var"
                    (650747 'init ref decl' next[390084])
                    unknown call_tmp[889191] "expr temp" "maybe param" "maybe type" "temp"
                    (889194 'move' call_tmp[889191](390086 call nextOffsets[389918] bin[390075]))
                    (650745 'move' next[390084](650744 'addr of' call_tmp[889191]))
                    (390089 'end of statement' nextOffsets[389918] bin[390075])
                    unknown call_tmp[889196] "expr temp" "maybe param" "maybe type" "temp"
                    (889199 'move' call_tmp[889196](390091 call _cond_test debug[240176]))
                    if call_tmp[889196]
                    {
                      (390095 call writeln "tid " tid[389880] " dst[" next[390084] "] = src[" i[390068] "] bin " bin[390075])
                      (562706 'end of statement' tid[389880] next[390084] i[390068] bin[390075])
                    }
                    unknown call_tmp[889201] "expr temp" "maybe param" "maybe type" "temp"
                    (889204 'move' call_tmp[889201](390114 call : i[390068] idxType[240700]))
                    unknown call_tmp[889206] "expr temp" "maybe param" "maybe type" "temp"
                    (889209 'move' call_tmp[889206](390118 call : 1 idxType[240700]))
                    (390109 call shallowCopy module=[222] ShallowCopy[240148] dst[240655] next[390084] src[240661] call_tmp[889201] call_tmp[889206])
                    (562711 'end of statement' next[390084] i[390068] idxType[240700])
                    (390122 call += next[390084] 1)
                    (562715 'end of statement' next[390084])
                    (412867 'referenced modules list' ShallowCopy[240148])
                  }
                  label _continueLabel[390125]
                  _indexOfInterest[390029]
                  _iterator[390031]
                }
                label _breakLabel[390127]
              }
            }
            (390136 call _downEndCount _coforallCount[390133] nil[32])
            (390135 'coforall loop')
            (390129 'actuals list' tiMarkRef[283] state[240665])
          }
          label _continueLabel[390146]
          _indexOfInterest[390141]
          _iterator[390142]
        }
        label _breakLabel[390147]
        Defer
        {
          {
            (390188 call _endCountFree _coforallCount[390133])
          }
        }
        (390193 call _waitEndCount _coforallCount[390133] 1 numTasks[390134])
      }
      {
        const _coforallCount[390205] "const" "end count" "temp"
        (390261 'move' _coforallCount[390205](390258 call _endCountAlloc 1))
        unknown _indexOfInterest[390213] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[390214] "expr temp" "temp"
        (390223 'move' _iterator[390214](390221 call _getIterator tmpIter[389873]))
        Defer
        {
          {
            (390238 call _freeIterator _iterator[390214])
          }
        }
        { scopeless type
          (390228 'move' _indexOfInterest[390213](390225 call iteratorIndex _iterator[390214]))
        }
        ForLoop[390215]
        {
          unknown tid[241581] "coforall index var" "index var" "insert auto destroy"
          (562721 'end of statement')
          (390233 'move' tid[241581] _indexOfInterest[390213])
          (562722 'end of statement' tid[241581])
          (390245 call _upEndCount _coforallCount[390205] 1)
          (562724 'end of statement')
          {
            {
              unknown call_tmp[889211] "expr temp" "maybe param" "maybe type" "temp"
              (889214 'move' call_tmp[889211](241603 call * tid[241581] blockSize[240786]))
              unknown call_tmp[889216] "maybe param" "maybe type" "temp"
              (889219 'move' call_tmp[889216](241600 call + start_n[240645] call_tmp[889211]))
              unknown start[241599] "dead at end of block" "insert auto destroy"
              (650749 'init var' start[241599] call_tmp[889216])
              (241608 'end of statement')
              unknown call_tmp[889221] "expr temp" "maybe param" "maybe type" "temp"
              (889224 'move' call_tmp[889221](241613 call + start[241599] blockSize[240786]))
              unknown call_tmp[889226] "maybe param" "maybe type" "temp"
              (889229 'move' call_tmp[889226](241611 call - call_tmp[889221] 1))
              unknown end[241610] "dead at end of block" "insert auto destroy"
              (650751 'init var' end[241610] call_tmp[889226])
              (241619 'end of statement')
              unknown call_tmp[889231] "expr temp" "maybe param" "maybe type" "temp"
              (889234 'move' call_tmp[889231](241625 call > end[241610] end_n[240649]))
              unknown call_tmp[889236] "expr temp" "maybe param" "maybe type" "temp"
              (889239 'move' call_tmp[889236](241629 call _cond_test call_tmp[889231]))
              if call_tmp[889236]
              {
                (241621 call = end[241610] end_n[240649])
                (562729 'end of statement' end[241610])
              }
              unknown nextOffsets[241634] "dead at end of block" "ref var"
              (650756 'init ref decl' nextOffsets[241634])
              unknown call_tmp[889243] "expr temp" "maybe param" "maybe type" "temp"
              (889246 'move' call_tmp[889243](241639 call(241636 call (partial) localState _mt[203] state[240665]) tid[241581]))
              unknown call_tmp[889250] "expr temp" "maybe param" "maybe type" "temp"
              (889253 'move' call_tmp[889250](241641 call localCounts _mt[203] call_tmp[889243]))
              (650754 'move' nextOffsets[241634](650753 'addr of' call_tmp[889250]))
              (241645 'end of statement' tid[241581] blockSize[240786] start[241599] blockSize[240786])
              {
                unknown _indexOfInterest[241720] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[241721] "expr temp" "temp"
                unknown call_tmp[889255] "expr temp" "maybe param" "maybe type" "temp"
                (889258 'move' call_tmp[889255](241737 call chpl_direct_counted_range_iter 0 nBuckets[240707]))
                (241730 'move' _iterator[241721](241728 call _getIterator call_tmp[889255]))
                Defer
                {
                  {
                    (241752 call _freeIterator _iterator[241721])
                  }
                }
                { scopeless type
                  (241742 'move' _indexOfInterest[241720](241739 call iteratorIndex _iterator[241721]))
                }
                ForLoop[241722]
                {
                  unknown bin[241646] "index var" "insert auto destroy"
                  (562732 'end of statement')
                  (241747 'move' bin[241646] _indexOfInterest[241720])
                  (562733 'end of statement' bin[241646])
                  {
                    unknown call_tmp[889260] "expr temp" "maybe param" "maybe type" "temp"
                    (889263 'move' call_tmp[889260](241659 call * bin[241646] nTasks[240732]))
                    unknown call_tmp[889265] "maybe param" "maybe type" "temp"
                    (889268 'move' call_tmp[889265](241657 call + call_tmp[889260] tid[241581]))
                    unknown globalBin[241656] "dead at end of block" "insert auto destroy"
                    (650758 'init var' globalBin[241656] call_tmp[889265])
                    (241665 'end of statement' bin[241646] nTasks[240732] tid[241581])
                    unknown tmp[697671] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                    unknown tmp[697672] "maybe param" "temp"
                    unknown call_tmp[889270] "expr temp" "maybe param" "maybe type" "temp"
                    (889273 'move' call_tmp[889270](241671 call > globalBin[241656] 0))
                    (697677 'move' tmp[697672](697675 call _cond_test call_tmp[889270]))
                    if tmp[697672]
                    {
                      unknown tmp[697679] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                      unknown call_tmp[889277] "expr temp" "maybe param" "maybe type" "temp"
                      (889280 'move' call_tmp[889277](241680 call - globalBin[241656] 1))
                      (697681 'move' tmp[697679](241679 call(241676 call (partial) globalEnds _mt[203] state[240665]) call_tmp[889277]))
                      (697686 'move' tmp[697671](697683 '_paramFoldLogical' tmp[697672] tmp[697679]))
                    }
                    {
                      (697691 'move' tmp[697671](697688 '_paramFoldLogical' tmp[697672] start_n[240645]))
                    }
                    unknown call_tmp[889282] "expr temp" "maybe param" "maybe type" "temp"
                    (889285 'move' call_tmp[889282](241669 call nextOffsets[241634] bin[241646]))
                    (241666 call = call_tmp[889282] tmp[697671])
                    (562738 'end of statement' nextOffsets[241634] bin[241646] globalBin[241656])
                    unknown call_tmp[889287] "expr temp" "maybe param" "maybe type" "temp"
                    (889290 'move' call_tmp[889287](241716 call _cond_test debug[240176]))
                    if call_tmp[889287]
                    {
                      unknown call_tmp[889294] "expr temp" "maybe param" "maybe type" "temp"
                      (889297 'move' call_tmp[889294](241708 call(241705 call (partial) globalCounts _mt[203] state[240665]) globalBin[241656]))
                      unknown call_tmp[889299] "expr temp" "maybe param" "maybe type" "temp"
                      (889302 'move' call_tmp[889299](241702 call != call_tmp[889294] 0))
                      unknown call_tmp[889304] "expr temp" "maybe param" "maybe type" "temp"
                      (889307 'move' call_tmp[889304](241711 call _cond_test call_tmp[889299]))
                      if call_tmp[889304]
                      {
                        unknown call_tmp[889309] "expr temp" "maybe param" "maybe type" "temp"
                        (889312 'move' call_tmp[889309](241700 call nextOffsets[241634] bin[241646]))
                        (241691 call writeln "tid " tid[241581] " nextOffsets[" bin[241646] "] = " call_tmp[889309])
                        (562742 'end of statement' tid[241581] bin[241646] nextOffsets[241634] bin[241646])
                      }
                    }
                  }
                  label _continueLabel[241725]
                  _indexOfInterest[241720]
                  _iterator[241721]
                }
                label _breakLabel[241726]
              }
              {
                unknown _indexOfInterest[241829] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[241830] "expr temp" "temp"
                unknown call_tmp[889316] "expr temp" "maybe param" "maybe type" "temp"
                (889319 'move' call_tmp[889316](241767 call bucketizer _mt[203] state[240665]))
                unknown call_tmp[889323] "expr temp" "maybe param" "maybe type" "temp"
                (889326 'move' call_tmp[889323](241773 call(241770 call (partial) classify _mt[203] call_tmp[889316]) src[240661] start[241599] end[241610] criterion[240668] startbit[240671]))
                (241839 'move' _iterator[241830](241837 call _getIterator call_tmp[889323]))
                Defer
                {
                  {
                    (241867 call _freeIterator _iterator[241830])
                  }
                }
                { scopeless type
                  (241844 'move' _indexOfInterest[241829](241841 call iteratorIndex _iterator[241830]))
                }
                ForLoop[241831]
                {
                  (241849 call _check_tuple_var_decl _indexOfInterest[241829] 2)
                  (562748 'end of statement')
                  unknown i[241760] "index var" "insert auto destroy"
                  (562749 'end of statement')
                  (241856 'move' i[241760](241853 call _indexOfInterest[241829] 0))
                  (562750 'end of statement' i[241760])
                  unknown bin[241762] "index var" "insert auto destroy"
                  (562752 'end of statement')
                  (241862 'move' bin[241762](241859 call _indexOfInterest[241829] 1))
                  (562753 'end of statement' bin[241762])
                  {
                    unknown next[241781] "dead at end of block" "ref var"
                    (650763 'init ref decl' next[241781])
                    unknown call_tmp[889328] "expr temp" "maybe param" "maybe type" "temp"
                    (889331 'move' call_tmp[889328](241783 call nextOffsets[241634] bin[241762]))
                    (650761 'move' next[241781](650760 'addr of' call_tmp[889328]))
                    (241786 'end of statement' nextOffsets[241634] bin[241762])
                    unknown call_tmp[889333] "expr temp" "maybe param" "maybe type" "temp"
                    (889336 'move' call_tmp[889333](241805 call _cond_test debug[240176]))
                    if call_tmp[889333]
                    {
                      (241789 call writeln "tid " tid[241581] " dst[" next[241781] "] = src[" i[241760] "] bin " bin[241762])
                      (562757 'end of statement' tid[241581] next[241781] i[241760] bin[241762])
                    }
                    unknown call_tmp[889338] "expr temp" "maybe param" "maybe type" "temp"
                    (889341 'move' call_tmp[889338](241817 call : i[241760] idxType[240700]))
                    unknown call_tmp[889343] "expr temp" "maybe param" "maybe type" "temp"
                    (889346 'move' call_tmp[889343](241821 call : 1 idxType[240700]))
                    (241813 call shallowCopy module=[222] ShallowCopy[240148] dst[240655] next[241781] src[240661] call_tmp[889338] call_tmp[889343])
                    (562762 'end of statement' next[241781] i[241760] idxType[240700])
                    (241825 call += next[241781] 1)
                    (562766 'end of statement' next[241781])
                    (407365 'referenced modules list' ShallowCopy[240148])
                  }
                  label _continueLabel[241834]
                  _indexOfInterest[241829]
                  _iterator[241830]
                }
                label _breakLabel[241835]
              }
            }
            (390208 call _downEndCount _coforallCount[390205] nil[32])
            (390207 'coforall loop')
            (241589 'actuals list' tiMarkRef[283] state[240665])
          }
          label _continueLabel[390218]
          _indexOfInterest[390213]
          _iterator[390214]
        }
        label _breakLabel[390219]
        Defer
        {
          {
            (390249 call _endCountFree _coforallCount[390205])
          }
        }
        (390254 call _waitEndCount _coforallCount[390205] 1)
      }
    }
    label _end_bucketize[623353]
    (623355 return _void[46])
  }
  function testBucketize[241877](arg start_n[241880]:int(64)[10], arg end_n[241884]:int(64)[10], ref arg dst[241890]:_array[255540](?), arg src[241896]:_array[255540](?), arg bucketizer[241899]:_any[141](?), arg criterion[241901]:_any[141](?), arg startbit[241904]:int(64)[10]) : _unknown[42]
  {
    unknown ret[623367] "RVV" "temp"
    unknown call_tmp[889348] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (889351 'move' call_tmp[889348](1000415 'new' TwoArrayBucketizerSharedState[240640](?)(bucketizer = bucketizer[241899])))
    unknown state[241909] "dead at end of block" "insert auto destroy"
    (650765 'init var' state[241909] call_tmp[889348])
    (241916 'end of statement')
    unknown myStartBit[241918] "dead at end of block" "insert auto destroy"
    (650767 'init var' myStartBit[241918] startbit[241904])
    (241921 'end of statement')
    (241923 call bucketize start_n[241880] end_n[241884] dst[241890] src[241896] state[241909] criterion[241901] myStartBit[241918])
    (562771 'end of statement' state[241909] myStartBit[241918])
    unknown call_tmp[889355] "expr temp" "maybe param" "maybe type" "temp"
    (889358 'move' call_tmp[889355](241933 call counts _mt[203] state[241909]))
    (623372 'move' ret[623367](623371 'deref' call_tmp[889355]))
    gotoReturn _end_testBucketize[623365] _end_testBucketize[623365]
    (562774 'end of statement' state[241909])
    label _end_testBucketize[623365]
    (623369 return ret[623367])
  }
  function partitioningSortWithScratchSpaceHandleSampling[241938](arg start_n[241941]:int(64)[10], arg end_n[241945]:int(64)[10], ref arg A[241951]:_array[255540](?), ref arg Scratch[241957]:_array[255540](?), ref arg state[241961]:TwoArrayBucketizerSharedState[240640](?), arg criterion[241964]:_any[141](?), arg startbit[241967]:int(64)[10]) : _unknown[42] "no return value for void"
  {
    unknown ret[623378] "RVV" "temp"
    unknown call_tmp[889362] "expr temp" "maybe param" "maybe type" "temp"
    (889365 'move' call_tmp[889362](242147 call bucketizer _mt[203] state[241961]))
    unknown call_tmp[889369] "expr temp" "maybe param" "maybe type" "temp"
    (889372 'move' call_tmp[889369](242150 call isSampleSort _mt[203] call_tmp[889362]))
    unknown call_tmp[889374] "expr temp" "maybe param" "maybe type" "temp"
    (889377 'move' call_tmp[889374](242153 call _cond_test call_tmp[889369]))
    if call_tmp[889374]
    {
      unknown call_tmp[889379] "expr temp" "maybe param" "maybe type" "temp"
      (889382 'move' call_tmp[889379](241977 call + 1 end_n[241945]))
      unknown call_tmp[889384] "maybe param" "maybe type" "temp"
      (889387 'move' call_tmp[889384](241975 call - call_tmp[889379] start_n[241941]))
      unknown n[241974] "dead at end of block" "insert auto destroy"
      (650769 'init var' n[241974] call_tmp[889384])
      (241983 'end of statement')
      unknown call_tmp[889389] "maybe param" "maybe type" "temp"
      (889392 'move' call_tmp[889389](241987 call computeLogBucketSize n[241974]))
      unknown logNumBuckets[241985] "dead at end of block" "insert auto destroy"
      (650771 'init var' logNumBuckets[241985] call_tmp[889389])
      (241990 'end of statement')
      unknown call_tmp[889394] "maybe param" "maybe type" "temp"
      (889397 'move' call_tmp[889394](241993 call << 1 logNumBuckets[241985]))
      unknown numBuckets[241992] "dead at end of block" "insert auto destroy"
      (650773 'init var' numBuckets[241992] call_tmp[889394])
      (241998 'end of statement')
      unknown call_tmp[889399] "maybe param" "maybe type" "temp"
      (889402 'move' call_tmp[889399](242002 call chooseSampleStep n[241974] logNumBuckets[241985]))
      unknown sampleStep[242000] "dead at end of block" "insert auto destroy"
      (650775 'init var' sampleStep[242000] call_tmp[889399])
      (242006 'end of statement')
      unknown call_tmp[889404] "expr temp" "maybe param" "maybe type" "temp"
      (889407 'move' call_tmp[889404](242011 call * sampleStep[242000] numBuckets[241992]))
      unknown call_tmp[889409] "maybe param" "maybe type" "temp"
      (889412 'move' call_tmp[889409](242009 call - call_tmp[889404] 1))
      unknown sampleSize[242008] "dead at end of block" "insert auto destroy"
      (650777 'init var' sampleSize[242008] call_tmp[889409])
      (242017 'end of statement' n[241974] logNumBuckets[241985] sampleStep[242000] numBuckets[241992])
      unknown call_tmp[889414] "expr temp" "maybe param" "maybe type" "temp"
      (889417 'move' call_tmp[889414](242041 call >= sampleSize[242008] n[241974]))
      unknown call_tmp[889419] "expr temp" "maybe param" "maybe type" "temp"
      (889422 'move' call_tmp[889419](242045 call _cond_test call_tmp[889414]))
      if call_tmp[889419]
      {
        unknown call_tmp[889424] "expr temp" "maybe param" "maybe type" "temp"
        (889427 'move' call_tmp[889424](242026 call _cond_test debug[240176]))
        if call_tmp[889424]
        {
          (242020 call writeln "Reducing sample size because it was too big")
        }
        unknown call_tmp[889429] "expr temp" "maybe param" "maybe type" "temp"
        (889432 'move' call_tmp[889429](242037 call / n[241974] 2))
        unknown call_tmp[889434] "expr temp" "maybe param" "maybe type" "temp"
        (889437 'move' call_tmp[889434](242035 call max 1 call_tmp[889429]))
        (242031 call = sampleSize[242008] call_tmp[889434])
        (562781 'end of statement' sampleSize[242008] n[241974])
      }
      (242050 call putRandomSampleAtArrayStart start_n[241941] end_n[241945] A[241951] sampleSize[242008])
      (562784 'end of statement' sampleSize[242008])
      unknown call_tmp[889439] "expr temp" "maybe param" "maybe type" "temp"
      (889442 'move' call_tmp[889439](242062 call _cond_test debug[240176]))
      if call_tmp[889439]
      {
        (242056 call writeln "recursing to sort the sample")
      }
      unknown call_tmp[889444] "expr temp" "maybe param" "maybe type" "temp"
      (889447 'move' call_tmp[889444](242077 call chpl_build_low_bounded_range start_n[241941]))
      unknown call_tmp[889449] "expr temp" "maybe param" "maybe type" "temp"
      (889452 'move' call_tmp[889449](242074 call # call_tmp[889444] sampleSize[242008]))
      unknown call_tmp[889454] "expr temp" "maybe param" "maybe type" "temp"
      (889457 'move' call_tmp[889454](242073 call A[241951] call_tmp[889449]))
      (242071 call sort module=[222] Sort[247204] call_tmp[889454](comparator = criterion[241964]))
      (562787 'end of statement' sampleSize[242008])
      unknown call_tmp[889459] "expr temp" "maybe param" "maybe type" "temp"
      (889462 'move' call_tmp[889459](242102 call _cond_test debug[240176]))
      if call_tmp[889459]
      {
        unknown call_tmp[889464] "expr temp" "maybe param" "maybe type" "temp"
        (889467 'move' call_tmp[889464](242093 call + start_n[241941] sampleSize[242008]))
        unknown call_tmp[889469] "expr temp" "maybe param" "maybe type" "temp"
        (889472 'move' call_tmp[889469](242091 call - call_tmp[889464] 1))
        (242089 call checkSorted module=[222] RadixSortHelp[239281] start_n[241941] call_tmp[889469] A[241951] criterion[241964] startbit[241967])
        (562789 'end of statement' sampleSize[242008])
        (407378 'referenced modules list' RadixSortHelp[239281])
      }
      unknown call_tmp[889476] "expr temp" "maybe param" "maybe type" "temp"
      (889479 'move' call_tmp[889476](242110 call bucketizer _mt[203] state[241961]))
      (242107 call createSplittersFromSample A[241951] call_tmp[889476] criterion[241964] start_n[241941] sampleSize[242008] sampleStep[242000] numBuckets[241992])
      (562791 'end of statement' sampleSize[242008] sampleStep[242000] numBuckets[241992])
      unknown call_tmp[889481] "expr temp" "maybe param" "maybe type" "temp"
      (889484 'move' call_tmp[889481](242142 call _cond_test debug[240176]))
      if call_tmp[889481]
      {
        unknown call_tmp[889488] "expr temp" "maybe param" "maybe type" "temp"
        (889491 'move' call_tmp[889488](242125 call bucketizer _mt[203] state[241961]))
        (242120 call writeln "sample bucketizer " call_tmp[889488])
        (562795 'end of statement')
        unknown call_tmp[889493] "expr temp" "maybe param" "maybe type" "temp"
        (889496 'move' call_tmp[889493](242139 call chpl_build_bounded_range start_n[241941] end_n[241945]))
        unknown call_tmp[889498] "expr temp" "maybe param" "maybe type" "temp"
        (889501 'move' call_tmp[889498](242136 call A[241951] call_tmp[889493]))
        (242129 call writef "A %i %i A=%\?\n" start_n[241941] end_n[241945] call_tmp[889498])
      }
      (407372 'referenced modules list' Sort[247204])
    }
    (623380 return ret[623378])
  }
  { scopeless type
    void[4]
  }
  function partitioningSortWithScratchSpace[242160](arg start_n[242163]:int(64)[10], arg end_n[242167]:int(64)[10], ref arg A[242173]:_array[255540](?), ref arg Scratch[242179]:_array[255540](?), ref arg state[242183]:TwoArrayBucketizerSharedState[240640](?), arg criterion[242186]:_any[141](?), arg startbit[242189]:int(64)[10]) : _unknown[42] "no return value for void"
  {
    unknown call_tmp[889505] "expr temp" "maybe param" "maybe type" "temp"
    (889508 'move' call_tmp[889505](242200 call endbit _mt[203] state[242183]))
    unknown call_tmp[889510] "expr temp" "maybe param" "maybe type" "temp"
    (889513 'move' call_tmp[889510](242196 call > startbit[242189] call_tmp[889505]))
    unknown call_tmp[889515] "expr temp" "maybe param" "maybe type" "temp"
    (889518 'move' call_tmp[889515](242203 call _cond_test call_tmp[889510]))
    if call_tmp[889515]
    {
      gotoReturn _end_partitioningSortWithScratchSpace[623391] _end_partitioningSortWithScratchSpace[623391]
    }
    unknown call_tmp[889520] "expr temp" "maybe param" "maybe type" "temp"
    (889523 'move' call_tmp[889520](242225 call - end_n[242167] start_n[242163]))
    unknown call_tmp[889527] "expr temp" "maybe param" "maybe type" "temp"
    (889530 'move' call_tmp[889527](242230 call baseCaseSize _mt[203] state[242183]))
    unknown call_tmp[889532] "expr temp" "maybe param" "maybe type" "temp"
    (889535 'move' call_tmp[889532](242223 call < call_tmp[889520] call_tmp[889527]))
    unknown call_tmp[889537] "expr temp" "maybe param" "maybe type" "temp"
    (889540 'move' call_tmp[889537](242233 call _cond_test call_tmp[889532]))
    if call_tmp[889537]
    {
      (242215 call shellSortMoveEltsIntIdx module=[222] ShellSort[237914] A[242173] criterion[242186](start = start_n[242163])(end = end_n[242167]))
      (562798 'end of statement')
      gotoReturn _end_partitioningSortWithScratchSpace[623391] _end_partitioningSortWithScratchSpace[623391]
      (407388 'referenced modules list' ShellSort[237914])
    }
    unknown call_tmp[889542] "expr temp" "maybe param" "maybe type" "temp"
    (889545 'move' call_tmp[889542](242259 call _cond_test debug[240176]))
    if call_tmp[889542]
    {
      (242239 call writeln "partitioningSortWithScratchSpace(" start_n[242163] "," end_n[242167] ")")
      (562800 'end of statement')
      unknown call_tmp[889547] "expr temp" "maybe param" "maybe type" "temp"
      (889550 'move' call_tmp[889547](242256 call chpl_build_bounded_range start_n[242163] end_n[242167]))
      unknown call_tmp[889552] "expr temp" "maybe param" "maybe type" "temp"
      (889555 'move' call_tmp[889552](242253 call A[242173] call_tmp[889547]))
      (242248 call writef "A %i %i A=%\?\n" start_n[242163] end_n[242167] call_tmp[889552])
    }
    unknown call_tmp[889557] "expr temp" "maybe param" "maybe type" "temp"
    (889560 'move' call_tmp[889557](242267 call - end_n[242167] start_n[242163]))
    unknown call_tmp[889562] "maybe param" "maybe type" "temp"
    (889565 'move' call_tmp[889562](242265 call + call_tmp[889557] 1))
    const n[242264] "dead at end of block" "const" "insert auto destroy"
    (650779 'init var' n[242264] call_tmp[889562])
    (242273 'end of statement')
    unknown call_tmp[889569] "expr temp" "maybe param" "maybe type" "temp"
    (889572 'move' call_tmp[889569](242282 call nTasks _mt[203] state[242183]))
    unknown call_tmp[889574] "expr temp" "maybe param" "maybe type" "temp"
    (889577 'move' call_tmp[889574](242278 call / n[242264] call_tmp[889569]))
    unknown call_tmp[889581] "expr temp" "maybe param" "maybe type" "temp"
    (889584 'move' call_tmp[889581](242288 call nTasks _mt[203] state[242183]))
    unknown call_tmp[889588] "expr temp" "maybe param" "maybe type" "temp"
    (889591 'move' call_tmp[889588](242292 call sequentialSizePerTask _mt[203] state[242183]))
    unknown call_tmp[889593] "expr temp" "maybe param" "maybe type" "temp"
    (889596 'move' call_tmp[889593](242285 call * call_tmp[889581] call_tmp[889588]))
    unknown call_tmp[889598] "maybe param" "maybe type" "temp"
    (889601 'move' call_tmp[889598](242277 call max call_tmp[889574] call_tmp[889593]))
    const maxSequentialSize[242275] "dead at end of block" "const" "insert auto destroy"
    (650781 'init var' maxSequentialSize[242275] call_tmp[889598])
    (242296 'end of statement' n[242264])
    unknown call_tmp[889605] "expr temp" "maybe param" "maybe type" "temp"
    (889608 'move' call_tmp[889605](242300 call bigTasks _mt[203] state[242183]))
    unknown call_tmp[889612] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (889615 'move' call_tmp[889612](1000416 'new' TwoArraySortTask[240295] start_n[242163] n[242264] startbit[242189](inA = 1)(doSort = 1)))
    (242306 call(242303 call (partial) pushBack _mt[203] call_tmp[889605]) call_tmp[889612])
    (562803 'end of statement' n[242264])
    unknown call_tmp[889619] "expr temp" "maybe param" "maybe type" "temp"
    (889622 'move' call_tmp[889619](242322 call bigTasks _mt[203] state[242183]))
    unknown call_tmp[889626] "expr temp" "maybe param" "maybe type" "temp"
    (889629 'move' call_tmp[889626](242325 call size _mt[203] call_tmp[889619]))
    unknown call_tmp[889631] "expr temp" "maybe param" "maybe type" "temp"
    (889634 'move' call_tmp[889631](242319 call == call_tmp[889626] 1))
    (242318 call assert call_tmp[889631])
    (562805 'end of statement')
    unknown call_tmp[889638] "expr temp" "maybe param" "maybe type" "temp"
    (889641 'move' call_tmp[889638](242336 call smallTasks _mt[203] state[242183]))
    unknown call_tmp[889645] "expr temp" "maybe param" "maybe type" "temp"
    (889648 'move' call_tmp[889645](242339 call size _mt[203] call_tmp[889638]))
    unknown call_tmp[889650] "expr temp" "maybe param" "maybe type" "temp"
    (889653 'move' call_tmp[889650](242331 call == call_tmp[889645] 0))
    (242330 call assert call_tmp[889650])
    (562806 'end of statement')
    {
      unknown tmp[242876] "temp"
      unknown call_tmp[889657] "expr temp" "maybe param" "maybe type" "temp"
      (889660 'move' call_tmp[889657](242907 call bigTasks _mt[203] state[242183]))
      unknown call_tmp[889664] "expr temp" "maybe param" "maybe type" "temp"
      (889667 'move' call_tmp[889664](242911 call(242905 call (partial) isEmpty _mt[203] call_tmp[889657])))
      unknown call_tmp[889669] "expr temp" "maybe param" "maybe type" "temp"
      (889672 'move' call_tmp[889669](242903 call ! call_tmp[889664]))
      (242912 'move' tmp[242876](242901 call _cond_test call_tmp[889669]))
      WhileDo[242881]
      {
        {
          unknown call_tmp[889676] "expr temp" "maybe param" "maybe type" "temp"
          (889679 'move' call_tmp[889676](242357 call bigTasks _mt[203] state[242183]))
          unknown call_tmp[889683] "maybe param" "maybe type" "temp"
          (889686 'move' call_tmp[889683](242365 call(242362 call (partial) popBack _mt[203] call_tmp[889676])))
          const task[242355] "dead at end of block" "const" "insert auto destroy"
          (650783 'init var' task[242355] call_tmp[889683])
          (242367 'end of statement')
          unknown call_tmp[889690] "expr temp" "maybe param" "maybe type" "temp"
          (889693 'move' call_tmp[889690](242375 call start _mt[203] task[242355]))
          unknown call_tmp[889697] "expr temp" "maybe param" "maybe type" "temp"
          (889700 'move' call_tmp[889697](242379 call size _mt[203] task[242355]))
          unknown call_tmp[889702] "expr temp" "maybe param" "maybe type" "temp"
          (889705 'move' call_tmp[889702](242372 call + call_tmp[889690] call_tmp[889697]))
          unknown call_tmp[889707] "maybe param" "maybe type" "temp"
          (889710 'move' call_tmp[889707](242370 call - call_tmp[889702] 1))
          const taskEnd[242369] "dead at end of block" "const" "insert auto destroy"
          (650785 'init var' taskEnd[242369] call_tmp[889707])
          (242384 'end of statement')
          unknown call_tmp[889714] "maybe param" "maybe type" "temp"
          (889717 'move' call_tmp[889714](242388 call startbit _mt[203] task[242355]))
          unknown taskStartBit[242386] "dead at end of block" "insert auto destroy"
          (650787 'init var' taskStartBit[242386] call_tmp[889714])
          (242392 'end of statement')
          unknown call_tmp[889721] "expr temp" "maybe param" "maybe type" "temp"
          (889724 'move' call_tmp[889721](242396 call doSort _mt[203] task[242355]))
          (242394 call assert call_tmp[889721])
          (562808 'end of statement' task[242355])
          unknown call_tmp[889726] "expr temp" "maybe param" "maybe type" "temp"
          (889729 'move' call_tmp[889726](242413 call _cond_test debug[240176]))
          if call_tmp[889726]
          {
            unknown call_tmp[889733] "expr temp" "maybe param" "maybe type" "temp"
            (889736 'move' call_tmp[889733](242406 call start _mt[203] task[242355]))
            unknown call_tmp[889738] "expr temp" "maybe param" "maybe type" "temp"
            (889741 'move' call_tmp[889738](242410 call chpl_build_bounded_range call_tmp[889733] taskEnd[242369]))
            (242401 call writeln "doing big task " call_tmp[889738])
            (562810 'end of statement' task[242355] taskEnd[242369])
          }
          unknown call_tmp[889745] "expr temp" "maybe param" "maybe type" "temp"
          (889748 'move' call_tmp[889745](242522 call inA _mt[203] task[242355]))
          unknown call_tmp[889750] "expr temp" "maybe param" "maybe type" "temp"
          (889753 'move' call_tmp[889750](242525 call _cond_test call_tmp[889745]))
          if call_tmp[889750]
          {
            unknown call_tmp[889757] "expr temp" "maybe param" "maybe type" "temp"
            (889760 'move' call_tmp[889757](242421 call start _mt[203] task[242355]))
            (242419 call partitioningSortWithScratchSpaceHandleSampling call_tmp[889757] taskEnd[242369] A[242173] Scratch[242179] state[242183] criterion[242186] taskStartBit[242386])
            (562813 'end of statement' task[242355] taskEnd[242369] taskStartBit[242386])
            unknown call_tmp[889764] "expr temp" "maybe param" "maybe type" "temp"
            (889767 'move' call_tmp[889764](242433 call start _mt[203] task[242355]))
            (242431 call bucketize call_tmp[889764] taskEnd[242369] Scratch[242179] A[242173] state[242183] criterion[242186] taskStartBit[242386](allowSkipahead = 1))
            (562817 'end of statement' task[242355] taskEnd[242369] taskStartBit[242386])
            unknown call_tmp[889769] "expr temp" "maybe param" "maybe type" "temp"
            (889772 'move' call_tmp[889769](242465 call _cond_test debug[240176]))
            if call_tmp[889769]
            {
              unknown call_tmp[889776] "expr temp" "maybe param" "maybe type" "temp"
              (889779 'move' call_tmp[889776](242451 call start _mt[203] task[242355]))
              unknown call_tmp[889783] "expr temp" "maybe param" "maybe type" "temp"
              (889786 'move' call_tmp[889783](242458 call start _mt[203] task[242355]))
              unknown call_tmp[889788] "expr temp" "maybe param" "maybe type" "temp"
              (889791 'move' call_tmp[889788](242462 call chpl_build_bounded_range call_tmp[889783] taskEnd[242369]))
              unknown call_tmp[889793] "expr temp" "maybe param" "maybe type" "temp"
              (889796 'move' call_tmp[889793](242456 call Scratch[242179] call_tmp[889788]))
              (242446 call writef "pb %i %i Scratch=%\?\n" call_tmp[889776] taskEnd[242369] call_tmp[889793])
              (562821 'end of statement' task[242355] taskEnd[242369])
            }
          }
          {
            unknown call_tmp[889800] "expr temp" "maybe param" "maybe type" "temp"
            (889803 'move' call_tmp[889800](242473 call start _mt[203] task[242355]))
            (242471 call partitioningSortWithScratchSpaceHandleSampling call_tmp[889800] taskEnd[242369] Scratch[242179] A[242173] state[242183] criterion[242186] taskStartBit[242386])
            (562824 'end of statement' task[242355] taskEnd[242369] taskStartBit[242386])
            unknown call_tmp[889807] "expr temp" "maybe param" "maybe type" "temp"
            (889810 'move' call_tmp[889807](242485 call start _mt[203] task[242355]))
            (242483 call bucketize call_tmp[889807] taskEnd[242369] A[242173] Scratch[242179] state[242183] criterion[242186] taskStartBit[242386](allowSkipahead = 1))
            (562828 'end of statement' task[242355] taskEnd[242369] taskStartBit[242386])
            unknown call_tmp[889812] "expr temp" "maybe param" "maybe type" "temp"
            (889815 'move' call_tmp[889812](242517 call _cond_test debug[240176]))
            if call_tmp[889812]
            {
              unknown call_tmp[889819] "expr temp" "maybe param" "maybe type" "temp"
              (889822 'move' call_tmp[889819](242503 call start _mt[203] task[242355]))
              unknown call_tmp[889826] "expr temp" "maybe param" "maybe type" "temp"
              (889829 'move' call_tmp[889826](242510 call start _mt[203] task[242355]))
              unknown call_tmp[889831] "expr temp" "maybe param" "maybe type" "temp"
              (889834 'move' call_tmp[889831](242514 call chpl_build_bounded_range call_tmp[889826] taskEnd[242369]))
              unknown call_tmp[889836] "expr temp" "maybe param" "maybe type" "temp"
              (889839 'move' call_tmp[889836](242508 call A[242173] call_tmp[889831]))
              (242498 call writef "pb %i %i A=%\?\n" call_tmp[889819] taskEnd[242369] call_tmp[889836])
              (562832 'end of statement' task[242355] taskEnd[242369])
            }
          }
          unknown call_tmp[889843] "expr temp" "maybe param" "maybe type" "temp"
          (889846 'move' call_tmp[889843](242534 call inA _mt[203] task[242355]))
          unknown call_tmp[889848] "maybe param" "maybe type" "temp"
          (889851 'move' call_tmp[889848](242531 call ! call_tmp[889843]))
          const nowInA[242530] "dead at end of block" "const" "insert auto destroy"
          (650789 'init var' nowInA[242530] call_tmp[889848])
          (242538 'end of statement')
          function chpl__scan2[242554](arg chpl_toScan[242556]:_any[141](?)) : _unknown[42] "compiler nested function" "fn returns iterator"
          {
            unknown ret[623384] "RVV" "temp"
            unknown chpl_eltType[242558] "maybe type" "temp"
            { scopeless type
              unknown call_tmp[889853] "expr temp" "maybe param" "maybe type" "temp"
              (889856 'move' call_tmp[889853](242570 call _getIterator chpl_toScan[242556]))
              unknown call_tmp[889858] "maybe param" "maybe type" "temp"
              (889861 'move' call_tmp[889858](242568 call iteratorIndex call_tmp[889853]))
              unknown call_tmp[889863] "expr temp" "maybe param" "maybe type" "temp"
              (889866 'move' call_tmp[889863](242566 call chpl__initCopy call_tmp[889858] 0))
              (242562 'move' chpl_eltType[242558](242564 'typeof' call_tmp[889863]))
            }
            const tmp[242559] "const" "temp"
            (242580 'move' tmp[242559](1000417 'new' SumReduceScanOp[429526](?)(eltType = chpl_eltType[242558])(_chpl_manager = unmanaged[183](?))))
            unknown call_tmp[889868] "expr temp" "maybe param" "maybe type" "temp"
            (889871 'move' call_tmp[889868](242584 call chpl__scanIterator tmp[242559] chpl_toScan[242556]))
            (623389 'move' ret[623384](623388 'deref' call_tmp[889868]))
            (623386 return ret[623384])
          }
          unknown call_tmp[889875] "expr temp" "maybe param" "maybe type" "temp"
          (889878 'move' call_tmp[889875](242544 call ends _mt[203] state[242183]))
          unknown call_tmp[889882] "expr temp" "maybe param" "maybe type" "temp"
          (889885 'move' call_tmp[889882](242551 call counts _mt[203] state[242183]))
          unknown call_tmp[889887] "expr temp" "maybe param" "maybe type" "temp"
          (889890 'move' call_tmp[889887](242588 call chpl__scan2[242554] call_tmp[889882]))
          unknown call_tmp[889894] "expr temp" "maybe param" "maybe type" "temp"
          (889897 'move' call_tmp[889894](242590 call start _mt[203] task[242355]))
          unknown call_tmp[889899] "expr temp" "maybe param" "maybe type" "temp"
          (889902 'move' call_tmp[889899](242547 call + call_tmp[889887] call_tmp[889894]))
          (242539 call = call_tmp[889875] call_tmp[889899])
          (562836 'end of statement' task[242355])
          unknown call_tmp[889906] "expr temp" "maybe param" "maybe type" "temp"
          (889909 'move' call_tmp[889906](242596 call bucketizer _mt[203] state[242183]))
          unknown call_tmp[889913] "maybe param" "maybe type" "temp"
          (889916 'move' call_tmp[889913](242602 call(242599 call (partial) getNumBuckets _mt[203] call_tmp[889906])))
          const nBuckets[242594] "dead at end of block" "const" "insert auto destroy"
          (650791 'init var' nBuckets[242594] call_tmp[889913])
          (242604 'end of statement' task[242355])
          {
            unknown _indexOfInterest[242837] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[242838] "expr temp" "temp"
            unknown call_tmp[889918] "expr temp" "maybe param" "maybe type" "temp"
            (889921 'move' call_tmp[889918](242854 call chpl_direct_counted_range_iter 0 nBuckets[242594]))
            (242847 'move' _iterator[242838](242845 call _getIterator call_tmp[889918]))
            Defer
            {
              {
                (242869 call _freeIterator _iterator[242838])
              }
            }
            { scopeless type
              (242859 'move' _indexOfInterest[242837](242856 call iteratorIndex _iterator[242838]))
            }
            ForLoop[242839]
            {
              unknown bin[242605] "index var" "insert auto destroy"
              (562839 'end of statement')
              (242864 'move' bin[242605] _indexOfInterest[242837])
              (562840 'end of statement' bin[242605])
              {
                unknown call_tmp[889925] "maybe param" "maybe type" "temp"
                (889928 'move' call_tmp[889925](242620 call(242617 call (partial) counts _mt[203] state[242183]) bin[242605]))
                const binSize[242615] "dead at end of block" "const" "insert auto destroy"
                (650793 'init var' binSize[242615] call_tmp[889925])
                (242623 'end of statement')
                unknown call_tmp[889932] "expr temp" "maybe param" "maybe type" "temp"
                (889935 'move' call_tmp[889932](242632 call(242629 call (partial) ends _mt[203] state[242183]) bin[242605]))
                unknown call_tmp[889937] "maybe param" "maybe type" "temp"
                (889940 'move' call_tmp[889937](242626 call - call_tmp[889932] binSize[242615]))
                const binStart[242625] "dead at end of block" "const" "insert auto destroy"
                (650795 'init var' binStart[242625] call_tmp[889937])
                (242636 'end of statement')
                unknown call_tmp[889942] "expr temp" "maybe param" "maybe type" "temp"
                (889945 'move' call_tmp[889942](242641 call + binStart[242625] binSize[242615]))
                unknown call_tmp[889947] "maybe param" "maybe type" "temp"
                (889950 'move' call_tmp[889947](242639 call - call_tmp[889942] 1))
                const binEnd[242638] "dead at end of block" "const" "insert auto destroy"
                (650797 'init var' binEnd[242638] call_tmp[889947])
                (242647 'end of statement')
                unknown call_tmp[889954] "expr temp" "maybe param" "maybe type" "temp"
                (889957 'move' call_tmp[889954](242651 call bucketizer _mt[203] state[242183]))
                unknown call_tmp[889961] "maybe param" "maybe type" "temp"
                (889964 'move' call_tmp[889961](242657 call(242654 call (partial) getNextStartBit _mt[203] call_tmp[889954]) taskStartBit[242386]))
                const binStartBit[242649] "dead at end of block" "const" "insert auto destroy"
                (650799 'init var' binStartBit[242649] call_tmp[889961])
                (242660 'end of statement')
                unknown tmp[498501] "maybe param" "temp"
                unknown tmp[498522] "maybe param" "temp"
                (498533 'move' tmp[498522](242667 call > binSize[242615] 1))
                unknown call_tmp[889966] "expr temp" "maybe param" "maybe type" "temp"
                (889969 'move' call_tmp[889966](498535 call _cond_invalid tmp[498522]))
                if call_tmp[889966]
                {
                  (498538 call compilerError "cannot promote short-circuiting && operator")
                }
                unknown tmp[697698] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                unknown tmp[697699] "maybe param" "temp"
                unknown call_tmp[889971] "expr temp" "maybe param" "maybe type" "temp"
                (889974 'move' call_tmp[889971](498523 call isTrue tmp[498522]))
                (697704 'move' tmp[697699](697702 call _cond_test call_tmp[889971]))
                if tmp[697699]
                {
                  unknown tmp[697706] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                  unknown call_tmp[889978] "expr temp" "maybe param" "maybe type" "temp"
                  (889981 'move' call_tmp[889978](242675 call endbit _mt[203] state[242183]))
                  unknown call_tmp[889983] "expr temp" "maybe param" "maybe type" "temp"
                  (889986 'move' call_tmp[889983](242671 call <= binStartBit[242649] call_tmp[889978]))
                  (697708 'move' tmp[697706](498526 call isTrue call_tmp[889983]))
                  (697713 'move' tmp[697698](697710 '_paramFoldLogical' tmp[697699] tmp[697706]))
                }
                {
                  (697718 'move' tmp[697698](697715 '_paramFoldLogical' tmp[697699] 0))
                }
                (498512 'move' tmp[498501] tmp[697698])
                unknown call_tmp[889988] "expr temp" "maybe param" "maybe type" "temp"
                (889991 'move' call_tmp[889988](498514 call _cond_invalid tmp[498501]))
                if call_tmp[889988]
                {
                  (498517 call compilerError "cannot promote short-circuiting && operator")
                }
                const sortit[242662] "dead at end of block" "const" "insert auto destroy"
                unknown tmp[697725] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                unknown tmp[697726] "maybe param" "temp"
                unknown call_tmp[889993] "expr temp" "maybe param" "maybe type" "temp"
                (889996 'move' call_tmp[889993](498502 call isTrue tmp[498501]))
                (697731 'move' tmp[697726](697729 call _cond_test call_tmp[889993]))
                if tmp[697726]
                {
                  unknown tmp[697733] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                  unknown call_tmp[890000] "expr temp" "maybe param" "maybe type" "temp"
                  (890003 'move' call_tmp[890000](242679 call bucketizer _mt[203] state[242183]))
                  unknown call_tmp[890007] "expr temp" "maybe param" "maybe type" "temp"
                  (890010 'move' call_tmp[890007](242685 call(242682 call (partial) getBinsToRecursivelySort _mt[203] call_tmp[890000])))
                  unknown call_tmp[890014] "expr temp" "maybe param" "maybe type" "temp"
                  (890017 'move' call_tmp[890014](242689 call(242686 call (partial) contains _mt[203] call_tmp[890007]) bin[242605]))
                  (697735 'move' tmp[697733](498505 call isTrue call_tmp[890014]))
                  (697740 'move' tmp[697725](697737 '_paramFoldLogical' tmp[697726] tmp[697733]))
                }
                {
                  (697745 'move' tmp[697725](697742 '_paramFoldLogical' tmp[697726] 0))
                }
                (650801 'init var' sortit[242662] tmp[697725])
                (242692 'end of statement' bin[242605] binSize[242615] binStart[242625] binSize[242615] taskStartBit[242386])
                unknown call_tmp[890019] "expr temp" "maybe param" "maybe type" "temp"
                (890022 'move' call_tmp[890019](242828 call == binSize[242615] 0))
                unknown call_tmp[890024] "expr temp" "maybe param" "maybe type" "temp"
                (890027 'move' call_tmp[890024](242832 call _cond_test call_tmp[890019]))
                if call_tmp[890024]
                {
                }
                {
                  unknown tmp[498606] "maybe param" "temp"
                  (498617 'move' tmp[498606] nowInA[242530])
                  unknown call_tmp[890029] "expr temp" "maybe param" "maybe type" "temp"
                  (890032 'move' call_tmp[890029](498619 call _cond_invalid tmp[498606]))
                  if call_tmp[890029]
                  {
                    (498622 call compilerError "cannot promote short-circuiting && operator")
                  }
                  unknown tmp[697752] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                  unknown tmp[697753] "maybe param" "temp"
                  unknown call_tmp[890034] "expr temp" "maybe param" "maybe type" "temp"
                  (890037 'move' call_tmp[890034](498607 call isTrue tmp[498606]))
                  (697758 'move' tmp[697753](697756 call _cond_test call_tmp[890034]))
                  if tmp[697753]
                  {
                    unknown tmp[697760] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                    unknown call_tmp[890039] "expr temp" "maybe param" "maybe type" "temp"
                    (890042 'move' call_tmp[890039](242820 call ! sortit[242662]))
                    (697762 'move' tmp[697760](498610 call isTrue call_tmp[890039]))
                    (697767 'move' tmp[697752](697764 '_paramFoldLogical' tmp[697753] tmp[697760]))
                  }
                  {
                    (697772 'move' tmp[697752](697769 '_paramFoldLogical' tmp[697753] 0))
                  }
                  unknown call_tmp[890044] "expr temp" "maybe param" "maybe type" "temp"
                  (890047 'move' call_tmp[890044](242823 call _cond_test tmp[697752]))
                  if call_tmp[890044]
                  {
                  }
                  {
                    unknown tmp[498585] "maybe param" "temp"
                    (498596 'move' tmp[498585](242806 call ! nowInA[242530]))
                    unknown call_tmp[890049] "expr temp" "maybe param" "maybe type" "temp"
                    (890052 'move' call_tmp[890049](498598 call _cond_invalid tmp[498585]))
                    if call_tmp[890049]
                    {
                      (498601 call compilerError "cannot promote short-circuiting && operator")
                    }
                    unknown tmp[697779] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                    unknown tmp[697780] "maybe param" "temp"
                    unknown call_tmp[890054] "expr temp" "maybe param" "maybe type" "temp"
                    (890057 'move' call_tmp[890054](498586 call isTrue tmp[498585]))
                    (697785 'move' tmp[697780](697783 call _cond_test call_tmp[890054]))
                    if tmp[697780]
                    {
                      unknown tmp[697787] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                      unknown call_tmp[890059] "expr temp" "maybe param" "maybe type" "temp"
                      (890062 'move' call_tmp[890059](242809 call ! sortit[242662]))
                      (697789 'move' tmp[697787](498589 call isTrue call_tmp[890059]))
                      (697794 'move' tmp[697779](697791 '_paramFoldLogical' tmp[697780] tmp[697787]))
                    }
                    {
                      (697799 'move' tmp[697779](697796 '_paramFoldLogical' tmp[697780] 0))
                    }
                    unknown call_tmp[890064] "expr temp" "maybe param" "maybe type" "temp"
                    (890067 'move' call_tmp[890064](242812 call _cond_test tmp[697779]))
                    if call_tmp[890064]
                    {
                      unknown call_tmp[890071] "expr temp" "maybe param" "maybe type" "temp"
                      (890074 'move' call_tmp[890071](242697 call smallTasks _mt[203] state[242183]))
                      unknown call_tmp[890078] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                      (890081 'move' call_tmp[890078](1000418 'new' TwoArraySortTask[240295] binStart[242625] binSize[242615] binStartBit[242649] nowInA[242530] sortit[242662]))
                      (242703 call(242700 call (partial) pushBack _mt[203] call_tmp[890071]) call_tmp[890078])
                      (562851 'end of statement' binStart[242625] binSize[242615] binStartBit[242649] nowInA[242530] sortit[242662])
                    }
                    {
                      unknown call_tmp[890083] "expr temp" "maybe param" "maybe type" "temp"
                      (890086 'move' call_tmp[890083](242796 call <= binSize[242615] maxSequentialSize[242275]))
                      unknown call_tmp[890088] "expr temp" "maybe param" "maybe type" "temp"
                      (890091 'move' call_tmp[890088](242800 call _cond_test call_tmp[890083]))
                      if call_tmp[890088]
                      {
                        unknown tmp[498543] "maybe param" "temp"
                        (498554 'move' tmp[498543] debug[240176])
                        unknown call_tmp[890093] "expr temp" "maybe param" "maybe type" "temp"
                        (890096 'move' call_tmp[890093](498556 call _cond_invalid tmp[498543]))
                        if call_tmp[890093]
                        {
                          (498559 call compilerError "cannot promote short-circuiting && operator")
                        }
                        unknown tmp[697806] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                        unknown tmp[697807] "maybe param" "temp"
                        unknown call_tmp[890098] "expr temp" "maybe param" "maybe type" "temp"
                        (890101 'move' call_tmp[890098](498544 call isTrue tmp[498543]))
                        (697812 'move' tmp[697807](697810 call _cond_test call_tmp[890098]))
                        if tmp[697807]
                        {
                          unknown tmp[697814] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                          unknown call_tmp[890103] "expr temp" "maybe param" "maybe type" "temp"
                          (890106 'move' call_tmp[890103](242731 call > binSize[242615] 0))
                          (697816 'move' tmp[697814](498547 call isTrue call_tmp[890103]))
                          (697821 'move' tmp[697806](697818 '_paramFoldLogical' tmp[697807] tmp[697814]))
                        }
                        {
                          (697826 'move' tmp[697806](697823 '_paramFoldLogical' tmp[697807] 0))
                        }
                        unknown call_tmp[890108] "expr temp" "maybe param" "maybe type" "temp"
                        (890111 'move' call_tmp[890108](242735 call _cond_test tmp[697806]))
                        if call_tmp[890108]
                        {
                          unknown call_tmp[890113] "expr temp" "maybe param" "maybe type" "temp"
                          (890116 'move' call_tmp[890113](242723 call chpl_build_bounded_range binStart[242625] binEnd[242638]))
                          (242715 call writeln "handling bin " bin[242605] " " call_tmp[890113] " as small")
                          (562858 'end of statement' bin[242605] binStart[242625] binEnd[242638])
                        }
                        unknown call_tmp[890120] "expr temp" "maybe param" "maybe type" "temp"
                        (890123 'move' call_tmp[890120](242740 call smallTasks _mt[203] state[242183]))
                        unknown call_tmp[890127] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                        (890130 'move' call_tmp[890127](1000419 'new' TwoArraySortTask[240295] binStart[242625] binSize[242615] binStartBit[242649] nowInA[242530] sortit[242662]))
                        (242746 call(242743 call (partial) pushBack _mt[203] call_tmp[890120]) call_tmp[890127])
                        (562862 'end of statement' binStart[242625] binSize[242615] binStartBit[242649] nowInA[242530] sortit[242662])
                      }
                      {
                        unknown tmp[498564] "maybe param" "temp"
                        (498575 'move' tmp[498564] debug[240176])
                        unknown call_tmp[890132] "expr temp" "maybe param" "maybe type" "temp"
                        (890135 'move' call_tmp[890132](498577 call _cond_invalid tmp[498564]))
                        if call_tmp[890132]
                        {
                          (498580 call compilerError "cannot promote short-circuiting && operator")
                        }
                        unknown tmp[697833] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                        unknown tmp[697834] "maybe param" "temp"
                        unknown call_tmp[890137] "expr temp" "maybe param" "maybe type" "temp"
                        (890140 'move' call_tmp[890137](498565 call isTrue tmp[498564]))
                        (697839 'move' tmp[697834](697837 call _cond_test call_tmp[890137]))
                        if tmp[697834]
                        {
                          unknown tmp[697841] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                          unknown call_tmp[890142] "expr temp" "maybe param" "maybe type" "temp"
                          (890145 'move' call_tmp[890142](242772 call > binSize[242615] 0))
                          (697843 'move' tmp[697841](498568 call isTrue call_tmp[890142]))
                          (697848 'move' tmp[697833](697845 '_paramFoldLogical' tmp[697834] tmp[697841]))
                        }
                        {
                          (697853 'move' tmp[697833](697850 '_paramFoldLogical' tmp[697834] 0))
                        }
                        unknown call_tmp[890147] "expr temp" "maybe param" "maybe type" "temp"
                        (890150 'move' call_tmp[890147](242776 call _cond_test tmp[697833]))
                        if call_tmp[890147]
                        {
                          unknown call_tmp[890152] "expr temp" "maybe param" "maybe type" "temp"
                          (890155 'move' call_tmp[890152](242764 call chpl_build_bounded_range binStart[242625] binEnd[242638]))
                          (242758 call writeln "handling bin " bin[242605] " " call_tmp[890152] " as big")
                          (562869 'end of statement' bin[242605] binStart[242625] binEnd[242638])
                        }
                        unknown call_tmp[890159] "expr temp" "maybe param" "maybe type" "temp"
                        (890162 'move' call_tmp[890159](242781 call bigTasks _mt[203] state[242183]))
                        unknown call_tmp[890166] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                        (890169 'move' call_tmp[890166](1000420 'new' TwoArraySortTask[240295] binStart[242625] binSize[242615] binStartBit[242649] nowInA[242530] sortit[242662]))
                        (242787 call(242784 call (partial) pushBack _mt[203] call_tmp[890159]) call_tmp[890166])
                        (562873 'end of statement' binStart[242625] binSize[242615] binStartBit[242649] nowInA[242530] sortit[242662])
                      }
                    }
                  }
                }
              }
              label _continueLabel[242842]
              _indexOfInterest[242837]
              _iterator[242838]
            }
            label _breakLabel[242843]
          }
        }
        label _continueLabel[242879]
        unknown call_tmp[890173] "expr temp" "maybe param" "maybe type" "temp"
        (890176 'move' call_tmp[890173](242891 call bigTasks _mt[203] state[242183]))
        unknown call_tmp[890180] "expr temp" "maybe param" "maybe type" "temp"
        (890183 'move' call_tmp[890180](242895 call(242889 call (partial) isEmpty _mt[203] call_tmp[890173])))
        unknown call_tmp[890185] "expr temp" "maybe param" "maybe type" "temp"
        (890188 'move' call_tmp[890185](242887 call ! call_tmp[890180]))
        (242896 'move' tmp[242876](242885 call _cond_test call_tmp[890185]))
        tmp[242876]
      }
      label _breakLabel[242880]
    }
    unknown call_tmp[469696] "expr temp" "maybe param" "maybe type" "temp"
    (469699 'move' call_tmp[469696](242918 call smallTasks _mt[203] state[242183]))
    Forall[243048] {
      induction variables:
        
        unknown task[242915] "index var" "insert auto destroy"
      iterated expressions:
        call_tmp[469696]
      shadow variables:
        A[242923] 'ref' intent outer var A[242173]
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        unknown call_tmp[890194] "maybe param" "maybe type" "temp"
        (890197 'move' call_tmp[890194](242931 call size _mt[203] task[242915]))
        const size[242929] "dead at end of block" "const" "insert auto destroy"
        (650803 'init var' size[242929] call_tmp[890194])
        (242935 'end of statement')
        unknown call_tmp[890201] "expr temp" "maybe param" "maybe type" "temp"
        (890204 'move' call_tmp[890201](242943 call start _mt[203] task[242915]))
        unknown call_tmp[890206] "expr temp" "maybe param" "maybe type" "temp"
        (890209 'move' call_tmp[890206](242940 call + call_tmp[890201] size[242929]))
        unknown call_tmp[890211] "maybe param" "maybe type" "temp"
        (890214 'move' call_tmp[890211](242938 call - call_tmp[890206] 1))
        const taskEnd[242937] "dead at end of block" "const" "insert auto destroy"
        (650805 'init var' taskEnd[242937] call_tmp[890211])
        (242949 'end of statement' task[242915] size[242929])
        unknown call_tmp[890216] "expr temp" "maybe param" "maybe type" "temp"
        (890219 'move' call_tmp[890216](242971 call _cond_test debug[240176]))
        if call_tmp[890216]
        {
          unknown call_tmp[890223] "expr temp" "maybe param" "maybe type" "temp"
          (890226 'move' call_tmp[890223](242957 call start _mt[203] task[242915]))
          unknown call_tmp[890230] "expr temp" "maybe param" "maybe type" "temp"
          (890233 'move' call_tmp[890230](242964 call start _mt[203] task[242915]))
          unknown call_tmp[890235] "expr temp" "maybe param" "maybe type" "temp"
          (890238 'move' call_tmp[890235](242968 call chpl_build_bounded_range call_tmp[890230] taskEnd[242937]))
          unknown call_tmp[890240] "expr temp" "maybe param" "maybe type" "temp"
          (890243 'move' call_tmp[890240](242962 call A[242923] call_tmp[890235]))
          (242952 call writef "doing small task %i %i A=%\?\n" call_tmp[890223] taskEnd[242937] call_tmp[890240])
          (562881 'end of statement' task[242915] taskEnd[242937] A[242923] taskEnd[242937])
        }
        unknown call_tmp[890247] "expr temp" "maybe param" "maybe type" "temp"
        (890250 'move' call_tmp[890247](242995 call inA _mt[203] task[242915]))
        unknown call_tmp[890252] "expr temp" "maybe param" "maybe type" "temp"
        (890255 'move' call_tmp[890252](242992 call ! call_tmp[890247]))
        unknown call_tmp[890257] "expr temp" "maybe param" "maybe type" "temp"
        (890260 'move' call_tmp[890257](242998 call _cond_test call_tmp[890252]))
        if call_tmp[890257]
        {
          unknown call_tmp[890264] "expr temp" "maybe param" "maybe type" "temp"
          (890267 'move' call_tmp[890264](242983 call start _mt[203] task[242915]))
          unknown call_tmp[890271] "expr temp" "maybe param" "maybe type" "temp"
          (890274 'move' call_tmp[890271](242988 call start _mt[203] task[242915]))
          (242980 call shallowCopy module=[222] ShallowCopy[240148] A[242923] call_tmp[890264] Scratch[242179] call_tmp[890271] size[242929])
          (562886 'end of statement' A[242923] task[242915] size[242929])
          (407436 'referenced modules list' ShallowCopy[240148])
        }
        unknown call_tmp[890278] "expr temp" "maybe param" "maybe type" "temp"
        (890281 'move' call_tmp[890278](243039 call doSort _mt[203] task[242915]))
        unknown call_tmp[890283] "expr temp" "maybe param" "maybe type" "temp"
        (890286 'move' call_tmp[890283](243042 call _cond_test call_tmp[890278]))
        if call_tmp[890283]
        {
          unknown call_tmp[890290] "expr temp" "maybe param" "maybe type" "temp"
          (890293 'move' call_tmp[890290](243009 call start _mt[203] task[242915]))
          unknown call_tmp[890297] "expr temp" "maybe param" "maybe type" "temp"
          (890300 'move' call_tmp[890297](243013 call idxType _mt[203] A[242923]))
          unknown call_tmp[890302] "expr temp" "maybe param" "maybe type" "temp"
          (890305 'move' call_tmp[890302](243006 call : call_tmp[890290] call_tmp[890297]))
          unknown call_tmp[890309] "expr temp" "maybe param" "maybe type" "temp"
          (890312 'move' call_tmp[890309](243020 call idxType _mt[203] A[242923]))
          unknown call_tmp[890314] "expr temp" "maybe param" "maybe type" "temp"
          (890317 'move' call_tmp[890314](243016 call : taskEnd[242937] call_tmp[890309]))
          unknown call_tmp[890321] "expr temp" "maybe param" "maybe type" "temp"
          (890324 'move' call_tmp[890321](243025 call startbit _mt[203] task[242915]))
          unknown call_tmp[890328] "expr temp" "maybe param" "maybe type" "temp"
          (890331 'move' call_tmp[890328](243029 call endbit _mt[203] state[242183]))
          unknown call_tmp[890333] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
          (890336 'move' call_tmp[890333](1000421 'new' MSBRadixSortSettings[243363](?)(alwaysSerial = 1)))
          (243004 call msbRadixSort A[242923] call_tmp[890302] call_tmp[890314] criterion[242186] call_tmp[890321] call_tmp[890328](settings = call_tmp[890333]))
          (562890 'end of statement' A[242923] task[242915] taskEnd[242937] task[242915])
        }
      }
    }
    unknown call_tmp[890338] "expr temp" "maybe param" "maybe type" "temp"
    (890341 'move' call_tmp[890338](243089 call _cond_test debug[240176]))
    if call_tmp[890338]
    {
      unknown call_tmp[890343] "expr temp" "maybe param" "maybe type" "temp"
      (890346 'move' call_tmp[890343](243063 call chpl_build_bounded_range start_n[242163] end_n[242167]))
      unknown call_tmp[890348] "expr temp" "maybe param" "maybe type" "temp"
      (890351 'move' call_tmp[890348](243060 call A[242173] call_tmp[890343]))
      (243053 call writef "ps %i %i A=%\?\n" start_n[242163] end_n[242167] call_tmp[890348])
      (562895 'end of statement')
      unknown call_tmp[890353] "expr temp" "maybe param" "maybe type" "temp"
      (890356 'move' call_tmp[890353](243076 call chpl_build_bounded_range start_n[242163] end_n[242167]))
      unknown call_tmp[890358] "expr temp" "maybe param" "maybe type" "temp"
      (890361 'move' call_tmp[890358](243073 call Scratch[242179] call_tmp[890353]))
      (243066 call writef "ps %i %i Scratch=%\?\n" start_n[242163] end_n[242167] call_tmp[890358])
      (562896 'end of statement')
      (243082 call checkSorted module=[222] RadixSortHelp[239281] start_n[242163] end_n[242167] A[242173] criterion[242186] startbit[242189])
      (407451 'referenced modules list' RadixSortHelp[239281])
    }
    label _end_partitioningSortWithScratchSpace[623391]
    (623393 return _void[46])
  }
  { scopeless type
    void[4]
  }
  (396863 'used modules list'(387046 'use' ChapelStandard[315387])(240152 'use' Math[10521])(240157 'use' List[232161] 'only' list)(240163 'import' Sort[247204].{ShellSort, MSBRadixSort})(240168 'import' Sort[247204].{RadixSortHelp, ShallowCopy})(240171 'import' Sort[247204])(240173 'use' MSBRadixSort[245084]))
}