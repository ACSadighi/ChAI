AST dump for ChapelIteratorSupport after pass parseAndConvertUast.
Module use list: 

{
  (92039 'use' ChapelStandard)
  (92042 'use' Reflection)
  (92047 'use' CTypes 'only' c_ptr)
  function iteratorIndex[92049](arg ic[92052] :
  _iteratorClass) : _unknown[42] "allow ref" "fn returns iterator"
  {
    (92062 call(92059 call . ic c"advance"))
    (92063 return(92070 call(92067 call . ic c"getValue")))
  }
  function iteratorIndex[92073](arg t[92076] :
  _tuple) : _unknown[42] "expand tuples with values" "fn returns iterator"
  {
    function iteratorIndexHelp[92080](arg t[92083] :
    _tuple, param arg dim[92087] :
    int[10]) : _unknown[42] "expand tuples with values"
    {
      if(92127 call _cond_test(92117 call == dim(92120 call -(92123 call . t c"size") 1)))
      {
        { scopeless
          (92091 return(92093 call _build_tuple_always_allow_ref(92095 call iteratorIndex(92097 call t dim))))
        }
      }
      {
        { scopeless
          (92100 return(92102 call _build_tuple_always_allow_ref(92104 call iteratorIndex(92106 call t dim))(92115 'expand_tuple'(92109 call iteratorIndexHelp t(92111 call + dim 1)))))
        }
      }
    }
    (92135 return(92137 call iteratorIndexHelp t 0))
  }
  function iteratorIndexType[92142](arg x[92144]:_any[141](?)) type : _unknown[42]
  {
    if(92236 call _cond_test(92234 call isArray x))
    {
      (92148 return(92150 call . x c"eltType"))
    }
    {
      { scopeless
        if(92229 call _cond_test(92227 call isDomain x))
        {
          (92154 return(92178 IfExpr (92155 call ==(92160 call . x c"rank") 1) then
          { scopeless
            (92165 call . x c"idxType")
          } else
          { scopeless
            (92168 call *(92171 call . x c"rank")(92175 call . x c"idxType"))
          } ))
        }
        {
          {
            unknown _indexOfInterest[92189] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[92190] "expr temp" "temp"
            (92199 'move' _iterator[92190](92197 call _getIterator x))
            Defer
            {
              {
                (92214 call _freeIterator _iterator[92190])
              }
            }
            { scopeless type
              (92204 'move' _indexOfInterest[92189](92201 call iteratorIndex _iterator[92190]))
            }
            ForLoop[92191]
            {
              unknown i[92182] "index var" "insert auto destroy"
              (92209 'move' i[92182] _indexOfInterest[92189])
              { scopeless
                (92185 return(92187 'typeof' i))
              }
              label _continueLabel[92194]
              _indexOfInterest[92189]
              _iterator[92190]
            }
            label _breakLabel[92195]
          }
          (92222 call halt "the iterator yields no elements, cannot determine its index type")
        }
      }
    }
  }
  function iteratorIndexTypeZip[92243](arg xs[92246]:_any[141](?) ...) type : _unknown[42]
  {
    function iteratorIndexTypeZipHelp[92250](param arg dim[92252]:_any[141](?)) type : _unknown[42]
    {
      if(92292 call _cond_test(92282 call == dim(92285 call -(92288 call . xs c"size") 1)))
      {
        { scopeless
          (92255 return(92262 call _build_tuple(92258 call iteratorIndexType(92260 call xs dim))))
        }
      }
      {
        { scopeless
          (92265 return(92279 call _build_tuple(92268 call iteratorIndexType(92270 call xs dim))(92278 'expand_tuple'(92273 call iteratorIndexTypeZipHelp(92274 call + dim 1)))))
        }
      }
    }
    (92300 return(92302 call iteratorIndexTypeZipHelp 0))
  }
  function iteratorToArrayElementType[92306](arg t[92309] :
  _iteratorRecord) type : _unknown[42]
  {
    (92313 return(92315 call chpl__unref(92317 call chpl_buildStandInRTT(92318 'scalar promotion type' t))))
  }
  function thunkToReturnType[92322](arg t[92325] :
  _thunkRecord) type : _unknown[42]
  {
    (92329 return(92331 call chpl__unref(92333 call chpl_buildStandInRTT(92334 'thunk result type' t))))
  }
  function chpl_elemTypeForReducingIterables[92338](arg x[92340]:_any[141](?)) type : _unknown[42]
  {
    {
      unknown _indexOfInterest[92426] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[92427] "expr temp" "temp"
      (92436 'move' _iterator[92427](92434 call _getIterator x))
      Defer
      {
        {
          (92451 call _freeIterator _iterator[92427])
        }
      }
      { scopeless type
        (92441 'move' _indexOfInterest[92426](92438 call iteratorIndex _iterator[92427]))
      }
      ForLoop[92428]
      {
        unknown i[92343] "index var" "insert auto destroy"
        (92446 'move' i[92343] _indexOfInterest[92426])
        {
          (92348 call compilerAssert(92350 call isSubtype(92352 'typeof' i) _iteratorRecord))
          if(92368 call _cond_test(92363 call !(92366 call chpl_iteratorHasDomainShape i)))
          {
            { scopeless
              (92355 call compilerError "unsupported elements of the expression being reduced " "-- they are iterable expressions without a domain shape")
            }
          }
          { scopeless
            unknown shape[92374](92375 'new'(92377 call _domain(92381 call . i c"_shape_")))
            (92385 'end of statement')
          }
          (92386 call =(92391 call . shape c"_unowned") 1)
          unknown arrElt[92396] "type variable"(92398 call iteratorIndexType i)
          if(92416 call _cond_test(92408 call ||(92411 call isArray arrElt)(92414 call isDomain arrElt)))
          {
            { scopeless
              (92402 call compilerError "unsupported elements of the expression being reduced " "-- they are iterable expressions consisting of arrays or domains")
            }
          }
          (92421 return(92423 call chpl__buildArrayRuntimeType shape arrElt))
        }
        label _continueLabel[92431]
        _indexOfInterest[92426]
        _iterator[92427]
      }
      label _breakLabel[92432]
    }
    (92459 call halt "the expression being reduced contains no elements," " which is currently not supported")
  }
  function chpl_buildStandInRTT[92468](arg domType[92471] :
  _domain) type : _unknown[42] "unsafe"
  {
    { scopeless
      unknown instanceObj[92476](92477 'static field type' domType "_instance")
      (92483 'end of statement')
    }
    (92484 return(92486 call chpl_buildStandInRTT instanceObj))
  }
  function chpl_buildStandInRTT[92490](arg arrType[92495] :
  (92493 call chpl__buildArrayRuntimeType nil[32])) type : _unknown[42] "unsafe"
  {
    unknown arrInstType[92500] "type variable"(92501 'static field type' arrType "_instance")
    unknown domInstType[92506] "type variable"(92507 'static field type' arrInstType "dom")
    { scopeless
      unknown domInstance[92514] domInstType
      (92517 'end of statement')
    }
    { scopeless
      unknown standinDomain[92519] "no auto destroy"(92521 call chpl_buildStandInRTT domInstance)
      (92524 'end of statement')
    }
    { scopeless
      unknown instanceObj[92526] arrInstType
      (92529 'end of statement')
    }
    unknown instanceEltType[92531] "type variable"(92532 'static typeof'(92534 call . instanceObj c"eltType"))
    (92538 return(92540 call chpl__buildArrayRuntimeType standinDomain(92543 call chpl_buildStandInRTT instanceEltType)))
  }
  function chpl_buildStandInRTT[92547](arg irType[92550] :
  _iteratorRecord) type : _unknown[42]
  {
    unknown shapeType[92555] "type variable"(92557 call chpl_iteratorShapeStaticTypeOrNothing irType)
    function standinType[92560]() type : _unknown[42] "unsafe"
    {
      if(92610 call _cond_test(92606 call == shapeType nothing))
      {
        (92564 return(92566 call chpl__buildDomainRuntimeType defaultDist 1))
      }
      {
        { scopeless
          if(92602 call _cond_test(92600 call isRange shapeType))
          {
            (92570 return(92572 call chpl__buildDomainRuntimeType defaultDist 1))
          }
          {
            { scopeless
              unknown domInstance[92577] shapeType
              (92580 'end of statement')
            }
            (92582 call compilerAssert(92583 call &&(92585 call !(92588 call isDomain domInstance))(92590 call !(92593 call isArray domInstance))))
            (92595 return(92597 call chpl_buildStandInRTT domInstance))
          }
        }
      }
    }
    { scopeless
      unknown standinDomain[92618] "no auto destroy"(92620 call standinType)
      (92622 'end of statement')
    }
    (92623 return(92625 call chpl__buildArrayRuntimeType standinDomain(92628 call chpl_buildStandInRTT(92629 'scalar promotion type' irType))))
  }
  function chpl_buildStandInRTT[92633](arg nonRTtype[92635]:_any[141](?)) type : _unknown[42]
  {
    (92638 return nonRTtype)
  }
  function chpl_buildStandInRTT[92642](arg domInst[92644]:_any[141](?)) type : _unknown[42]
  {
    (92653 return(92655 call chpl__buildDomainRuntimeType defaultDist(92658 call . domInst c"rank")(92662 call . domInst c"idxType")(92666 call . domInst c"strides")))
  }
  where {
    (92647 call isSubtype(92649 'typeof' domInst)(92650 'to unmanaged class from unknown' DefaultRectangularDom))
  }
  function chpl_buildStandInRTT[92672](arg domInst[92674]:_any[141](?)) type : _unknown[42]
  {
    if(92703 call _cond_test(92698 call isSubtype(92700 'typeof' domInst)(92701 'to unmanaged class from unknown' BaseDom)))
    {
      { scopeless
        (92678 call compilerError "for/forall/promoted expressions are not implemented when the elements are or contain non-DefaultRectangular domains or arrays")
      }
    }
    {
      { scopeless
        (92684 call compilerError "unexpected argument of type "(92688 call :(92691 'typeof' domInst) string[244]) " for chpl_buildStandInRTT()")
      }
    }
  }
  function chpl_trivialLeader[92711]() : _unknown[42] "iterator fn"
  {
    (92714 yield 0)
  }
  function chpl_computeIteratorShape[92718](arg arg[92723] :
  (92721 call chpl__buildArrayRuntimeType nil[32])) : _unknown[42] "inline"
  {
    (92727 return(92729 call chpl_computeIteratorShape(92731 call . arg c"_dom")))
  }
  function chpl_computeIteratorShape[92736](arg arg[92739] :
  _domain) : _unknown[42] "inline"
  {
    (92743 return(92747 call . arg c"_instance"))
  }
  function chpl_computeIteratorShape[92752](arg arg[92757] :
  (92755 call range ?[227])) : _unknown[42] "inline"
  {
    (92761 return arg)
  }
  function chpl_computeIteratorShape[92765](arg arg[92768] :
  _iteratorRecord) : _unknown[42] "inline"
  {
    if(92784 call _cond_test(92782 call chpl_iteratorHasShape arg))
    {
      { scopeless
        (92772 return(92774 call . arg c"_shape_"))
      }
    }
    {
      { scopeless
        (92778 return none)
      }
    }
  }
  function chpl_computeIteratorShape[92792](arg arg[92794]:_any[141](?)) : _unknown[42] "inline"
  {
    (92797 return none)
  }
  function chpl_iteratorHasShape[92801](arg ir[92804] :
  _iteratorRecord) param : _unknown[42]
  {
    if(92828 call _cond_test(92822 call hasField(92824 'typeof' ir) "_shape_"))
    {
      { scopeless
        (92808 return(92809 call !=(92815 'typeof'(92812 call . ir c"_shape_")) void[4]))
      }
    }
    {
      { scopeless
        (92818 return 0)
      }
    }
  }
  function chpl_iteratorHasDomainShape[92836](arg ir[92839] :
  _iteratorRecord) param : _unknown[42] "inline"
  {
    if(92861 call _cond_test(92857 call hasField(92859 'typeof' ir) "_shape_"))
    {
      { scopeless
        (92843 return(92845 call isSubtype(92850 'typeof'(92847 call . ir c"_shape_")) BaseDom))
      }
    }
    {
      { scopeless
        (92853 return 0)
      }
    }
  }
  function chpl_iteratorHasRangeShape[92869](arg ir[92872] :
  _iteratorRecord) param : _unknown[42] "inline"
  {
    if(92893 call _cond_test(92889 call hasField(92891 'typeof' ir) "_shape_"))
    {
      { scopeless
        (92876 return(92878 call isRange(92883 'typeof'(92880 call . ir c"_shape_"))))
      }
    }
    {
      { scopeless
        (92885 return 0)
      }
    }
  }
  function chpl_iteratorShapeStaticTypeOrNothing[92901](arg ir[92904] :
  _iteratorRecord) type : _unknown[42]
  {
    if(92920 call _cond_test(92917 call hasField ir "_shape_"))
    {
      { scopeless
        (92908 return(92909 'static field type' ir "_shape_"))
      }
    }
    {
      { scopeless
        (92913 return nothing)
      }
    }
  }
  function chpl_iteratorFromForExpr[92928](arg ir[92931] :
  _iteratorRecord) param : _unknown[42]
  {
    if(92957 call _cond_test(92952 call(92949 call . Reflection c"canResolveMethod") ir "_fromForExpr_"))
    {
      { scopeless
        (92935 return(92939 call . ir c"_fromForExpr_"))
      }
    }
    {
      { scopeless
        (92943 return 0)
      }
    }
  }
  function chpl_iteratorFromForExpr[92965](arg arg[92967]:_any[141](?)) param : _unknown[42]
  {
    (92970 return 0)
  }
  function chpl_iteratorFromForeachExpr[92974](arg ir[92977] :
  _iteratorRecord) param : _unknown[42]
  {
    if(93001 call _cond_test(92996 call(92993 call . Reflection c"canResolveMethod") ir "_fromForeachExpr_"))
    {
      { scopeless
        (92981 return(92985 call . ir c"_fromForeachExpr_"))
      }
    }
    {
      { scopeless
        (92989 return 0)
      }
    }
  }
  function chpl_iteratorFromForeachExpr[93009](arg arg[93011]:_any[141](?)) param : _unknown[42]
  {
    (93014 return 0)
  }
  function =[93018](ref arg ic[93021] :
  _iteratorRecord, arg xs[93024]:_any[141](?)) : _unknown[42] "assignop" "operator"
  {
    {
      unknown _indexOfInterest[93043] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[93044] "expr temp" "temp"
      (93058 'move' _iterator[93044](93037 call _build_tuple(93053 call _getIterator ic)(93056 call _getIterator xs)))
      Defer
      {
        {
          (93086 call _freeIterator _iterator[93044])
        }
      }
      { scopeless type
        (93063 'move' _indexOfInterest[93043](93060 call iteratorIndex _iterator[93044]))
      }
      ForLoop[93045]
      {
        (93068 call _check_tuple_var_decl _indexOfInterest[93043] 2)
        unknown e[93028] "index var" "insert auto destroy"
        (93075 'move' e[93028](93072 call _indexOfInterest[93043] 0))
        unknown x[93030] "index var" "insert auto destroy"
        (93081 'move' x[93030](93078 call _indexOfInterest[93043] 1))
        { scopeless
          (93038 call = e x)
        }
        label _continueLabel[93048]
        _indexOfInterest[93043]
        _iterator[93044]
      }
      label _breakLabel[93049]
    }
  }
  function =[93095](ref arg ic[93098] :
  _iteratorRecord, arg x[93104] :
  (93102 call iteratorIndexType ic)) : _unknown[42] "assignop" "operator" "suppress lvalue error"
  {
    {
      unknown _indexOfInterest[93116] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[93117] "expr temp" "temp"
      (93126 'move' _iterator[93117](93124 call _getIterator ic))
      Defer
      {
        {
          (93141 call _freeIterator _iterator[93117])
        }
      }
      { scopeless type
        (93131 'move' _indexOfInterest[93116](93128 call iteratorIndex _iterator[93117]))
      }
      ForLoop[93118]
      {
        unknown e[93108] "index var" "insert auto destroy"
        (93136 'move' e[93108] _indexOfInterest[93116])
        { scopeless
          (93111 call = e x)
        }
        label _continueLabel[93121]
        _indexOfInterest[93116]
        _iterator[93117]
      }
      label _breakLabel[93122]
    }
  }
  function _getIterator[93150](const  ref arg x[93152]:_any[141](?)) : _unknown[42] "inline" "no borrow convert" "suppress lvalue error"
  {
    (93155 return(93157 call _getIterator(93164 call(93161 call . x c"these"))))
  }
  function _getIterator[93167](arg t[93169]:_any[141](?)) : _unknown[42] "inline"
  {
    (93172 return(93174 call _getIterator(93179 call(93176 call . t c"these"))))
  }
  function _getIteratorZip[93182](arg x[93184]:_any[141](?)) : _unknown[42] "inline"
  {
    (93187 return(93189 call _getIterator x))
  }
  function _getIteratorZip[93193](arg t[93195]:_any[141](?)) : _unknown[42] "inline"
  {
    (93198 return(93200 call _getIterator t))
  }
  function _getIteratorZip[93204](arg x[93207] :
  _tuple) : _unknown[42] "inline"
  {
    function _getIteratorZipInternal[93211](arg x[93214] :
    _tuple, param arg dim[93218] :
    int[10]) : _unknown[42] "inline"
    {
      if(93242 call _cond_test(93228 call &&(93231 call isTuple(93233 call x dim))(93235 call !(93238 call isHomogeneousTuple(93240 call x dim)))))
      {
        { scopeless
          (93223 call compilerError "Heterogeneous tuples don't support zippered iteration yet")
        }
      }
      if(93285 call _cond_test(93275 call == dim(93278 call -(93281 call . x c"size") 1)))
      {
        { scopeless
          (93247 return(93254 call _build_tuple(93250 call _getIterator(93252 call x dim))))
        }
      }
      {
        { scopeless
          (93257 return(93272 call _build_tuple(93260 call _getIterator(93262 call x dim))(93271 'expand_tuple'(93265 call _getIteratorZipInternal x(93267 call + dim 1)))))
        }
      }
    }
    if(93313 call _cond_test(93306 call ==(93309 call . x c"size") 1))
    {
      { scopeless
        (93293 return(93295 call _getIterator(93297 call x 0)))
      }
    }
    {
      { scopeless
        (93300 return(93302 call _getIteratorZipInternal x 0))
      }
    }
  }
  function _getIteratorZip[93321](arg t[93324] :
  _tuple) : _unknown[42] "inline"
  {
    function _getIteratorZipInternal[93328](arg t[93331] :
    _tuple, param arg dim[93335] :
    int[10]) : _unknown[42] "inline"
    {
      if(93377 call _cond_test(93367 call == dim(93370 call -(93373 call . t c"size") 1)))
      {
        { scopeless
          (93339 return(93346 call _build_tuple(93342 call _getIterator(93344 call t dim))))
        }
      }
      {
        { scopeless
          (93349 return(93364 call _build_tuple(93352 call _getIterator(93354 call t dim))(93363 'expand_tuple'(93357 call _getIteratorZipInternal t(93359 call + dim 1)))))
        }
      }
    }
    if(93405 call _cond_test(93398 call ==(93401 call . t c"size") 1))
    {
      { scopeless
        (93385 return(93387 call _getIterator(93389 call t 0)))
      }
    }
    {
      { scopeless
        (93392 return(93394 call _getIteratorZipInternal t 0))
      }
    }
  }
  function _freeIterator[93413](arg ic[93416] :
  _iteratorClass) : _unknown[42] "inline"
  {
    (93421 call chpl_here_free(93422 'cast'(93424 call c_ptr void[4]) ic))
  }
  function _freeIterator[93429](arg x[93432] :
  _tuple) : _unknown[42] "inline"
  {
    {
      unknown i[93436] "index var" 0
      unknown tmp[93454] "maybe param" "temp"
      (93466 'move' tmp[93454](93464 call chpl_compute_low_param_loop_bound 0(93439 call -(93442 call . x c"size") 1)))
      unknown tmp[93455] "maybe param" "temp"
      (93479 'move' tmp[93455](93477 call chpl_compute_high_param_loop_bound 0(93471 call -(93473 call . x c"size") 1)))
      unknown tmp[93456] "maybe param" "temp"
      (93482 'move' tmp[93456] 1)
      ParamForLoop[93484]
      { i[93436] tmp[93454] tmp[93455] tmp[93456]
        { scopeless
          (93449 call _freeIterator(93451 call x i))
        }
      }
      label _unused_continueLabel[93458]
      label _breakLabel[93457]
    }
  }
  function _toLeader[93495](const arg ir[93498] :
  _iteratorRecord) : _unknown[42] "inline" "no implicit copy" "fn returns iterator"
  {
    (93504 return(93506 call chpl__autoCopy(93507 'to leader' ir)(definedConst = 0)))
  }
  where {
    (93501 'has leader' ir)
  }
  function _toLeader[93514](const arg x[93516]:_any[141](?)) : _unknown[42] "inline" "fn returns iterator" "suppress lvalue error"
  {
    (93534 return(93536 call _toLeader(93541 call(93538 call . x c"these"))))
  }
  where {
    (93518 call &&(93520 call !(93523 call isSubtype(93525 'typeof' x) _iteratorRecord))(93527 'has leader'(93532 call(93529 call . x c"these"))))
  }
  function _toLeaderZip[93545](arg x[93547]:_any[141](?)) : _unknown[42] "inline" "fn returns iterator"
  {
    (93568 return(93570 call _toLeader x))
  }
  where {
    (93549 call &&(93551 call !(93554 call isTuple x))(93562 call(93559 call . Reflection c"canResolve") "_toLeader" x))
  }
  function _toLeaderZip[93575](arg x[93578] :
  _tuple) : _unknown[42] "inline" "fn returns iterator"
  {
    (93591 return(93593 call _toLeader(93595 call x 0)))
  }
  where {
    (93585 call(93582 call . Reflection c"canResolve") "_toLeader"(93588 call x 0))
  }
  function _toStandalone[93600](arg iterator[93603] :
  _iteratorClass) : _unknown[42] "inline" "no implicit copy" "fn returns iterator"
  {
    (93607 return(93609 call chpl__autoCopy(93610 'to standalone' iterator)(definedConst = 0)))
  }
  function _toStandalone[93616](arg ir[93619] :
  _iteratorRecord) : _unknown[42] "inline" "fn returns iterator"
  {
    { scopeless
      unknown ic[93624] "no copy"(93626 call _getIterator ir)
      (93629 'end of statement')
    }
    { scopeless
      unknown standalone[93631] "no copy"(93633 call _toStandalone ic)
      (93636 'end of statement')
    }
    (93638 call _freeIterator ic)
    (93640 return standalone)
  }
  function _toStandalone[93644](arg x[93646]:_any[141](?)) : _unknown[42] "inline" "fn returns iterator" "suppress lvalue error"
  {
    (93649 return(93651 call _toStandalone(93656 call(93653 call . x c"these"))))
  }
  function _toLeader[93659](arg ir[93662] :
  _iteratorRecord, arg args[93666]:_any[141](?) ...) : _unknown[42] "expand tuples with values" "inline" "no implicit copy" "fn returns iterator"
  {
    (93670 return(93672 call chpl__autoCopy(93673 'to leader' ir(93676 'expand_tuple' args))(definedConst = 0)))
  }
  function _toLeader[93681](arg x[93683]:_any[141](?), arg args[93686]:_any[141](?) ...) : _unknown[42] "expand tuples with values" "inline" "fn returns iterator" "suppress lvalue error"
  {
    (93690 return(93692 call _toLeader(93697 call(93694 call . x c"these"))(93699 'expand_tuple' args)))
  }
  function _toLeaderZip[93702](arg x[93704]:_any[141](?), arg args[93707]:_any[141](?) ...) : _unknown[42] "expand tuples with values" "inline" "fn returns iterator"
  {
    (93711 return(93713 call _toLeader x(93716 'expand_tuple' args)))
  }
  function _toLeaderZip[93719](arg x[93722] :
  _tuple, arg args[93726]:_any[141](?) ...) : _unknown[42] "expand tuples with values" "inline" "fn returns iterator"
  {
    (93730 return(93732 call _toLeader(93734 call x 0)(93737 'expand_tuple' args)))
  }
  function _toStandalone[93740](arg iterator[93743] :
  _iteratorClass, arg args[93747]:_any[141](?) ...) : _unknown[42] "expand tuples with values" "inline" "no implicit copy" "fn returns iterator"
  {
    (93751 return(93753 call chpl__autoCopy(93754 'to standalone' iterator(93757 'expand_tuple' args))(definedConst = 0)))
  }
  function _toStandalone[93762](arg ir[93765] :
  _iteratorRecord, arg args[93769]:_any[141](?) ...) : _unknown[42] "expand tuples with values" "inline" "fn returns iterator"
  {
    { scopeless
      unknown ic[93774] "no copy"(93776 call _getIterator ir)
      (93779 'end of statement')
    }
    { scopeless
      unknown standalone[93781] "no copy"(93783 call _toStandalone ic(93786 'expand_tuple' args))
      (93788 'end of statement')
    }
    (93790 call _freeIterator ic)
    (93792 return standalone)
  }
  function _toStandalone[93796](arg x[93798]:_any[141](?), arg args[93801]:_any[141](?) ...) : _unknown[42] "expand tuples with values" "inline" "fn returns iterator" "suppress lvalue error"
  {
    (93805 return(93807 call _toStandalone(93812 call(93809 call . x c"these"))(93814 'expand_tuple' args)))
  }
  function chpl__canHaveFastFollowers[93817](arg x[93819]:_any[141](?)) param : _unknown[42]
  {
    (93822 return(93824 call isArray x))
  }
  function chpl__canLeadFastFollowers[93828](arg x[93830]:_any[141](?)) param : _unknown[42]
  {
    (93833 return(93834 call ||(93837 call isDomain x)(93840 call isArray x)))
  }
  function chpl__staticFastFollowCheck[93844](arg x[93846]:_any[141](?)) param : _unknown[42]
  {
    { scopeless
      const lead[93850] "const" "no copy" x
      (93853 'end of statement')
    }
    if(93866 call _cond_test(93864 call chpl__canHaveFastFollowers lead))
    {
      (93855 return(93857 call chpl__staticFastFollowCheck x lead))
    }
    {
      (93861 return 0)
    }
  }
  function chpl__staticFastFollowCheck[93872](arg x[93874]:_any[141](?), arg lead[93876]:_any[141](?)) param : _unknown[42]
  {
    if(93913 call _cond_test(93911 call chpl__canLeadFastFollowers lead))
    {
      if(93903 call _cond_test(93901 call isArray x))
      {
        (93881 return(93891 call(93888 call .(93883 call . x c"_value") c"dsiStaticFastFollowCheck")(93896 'typeof'(93893 call . lead c"_value"))))
      }
      {
        (93898 return 1)
      }
    }
    {
      (93908 return 0)
    }
  }
  function chpl__dynamicFastFollowCheck[93919](arg x[93921]:_any[141](?)) : _unknown[42]
  {
    if(93936 call _cond_test(93934 call chpl__canHaveFastFollowers x))
    {
      (93925 return(93927 call chpl__dynamicFastFollowCheck x x))
    }
    {
      (93931 return 0)
    }
  }
  function chpl__dynamicFastFollowCheck[93942](arg x[93944]:_any[141](?), arg lead[93946]:_any[141](?)) : _unknown[42]
  {
    if(93991 call _cond_test(93989 call chpl__canLeadFastFollowers lead))
    {
      if(93981 call _cond_test(93979 call isArray x))
      {
        if(93971 call _cond_test(93968 call chpl__staticFastFollowCheck x lead))
        {
          (93952 return(93962 call(93959 call .(93954 call . x c"_value") c"dsiDynamicFastFollowCheck") lead))
        }
        {
          (93965 return 0)
        }
      }
      {
        (93976 return 1)
      }
    }
    {
      (93986 return 0)
    }
  }
  function _toFollower[93997](arg iterator[94000] :
  _iteratorClass, arg leaderIndex[94003]:_any[141](?)) : _unknown[42] "inline" "no implicit copy" "fn returns iterator"
  {
    (94006 return(94008 call chpl__autoCopy(94009 'to follower' iterator leaderIndex)(definedConst = 0)))
  }
  function _toFollower[94016](arg ir[94019] :
  _iteratorRecord, arg leaderIndex[94022]:_any[141](?)) : _unknown[42] "inline" "fn returns iterator"
  {
    { scopeless
      unknown ic[94026] "no copy"(94028 call _getIterator ir)
      (94031 'end of statement')
    }
    { scopeless
      unknown follower[94033] "no copy"(94035 call _toFollower ic leaderIndex)
      (94039 'end of statement')
    }
    (94041 call _freeIterator ic)
    (94043 return follower)
  }
  function _toFollower[94047](const  ref arg x[94049]:_any[141](?), arg leaderIndex[94051]:_any[141](?)) : _unknown[42] "inline" "fn returns iterator" "suppress lvalue error"
  {
    (94054 return(94056 call _toFollower(94061 call(94058 call . x c"these")) leaderIndex))
  }
  function _toFollowerZip[94065](arg x[94067]:_any[141](?), arg leaderIndex[94069]:_any[141](?)) : _unknown[42] "inline" "fn returns iterator"
  {
    (94072 return(94074 call _toFollower x leaderIndex))
  }
  function _toFollowerZip[94079](arg x[94082] :
  _tuple, arg leaderIndex[94085]:_any[141](?)) : _unknown[42] "inline" "fn returns iterator"
  {
    (94088 return(94090 call _toFollowerZipInternal x leaderIndex 0))
  }
  function _toFollowerZipInternal[94096](arg x[94099] :
  _tuple, arg leaderIndex[94102]:_any[141](?), param arg dim[94105] :
  int[10]) : _unknown[42] "inline" "fn returns iterator"
  {
    if(94150 call _cond_test(94140 call == dim(94143 call -(94146 call . x c"size") 1)))
    {
      { scopeless
        (94109 return(94117 call _build_tuple(94112 call _toFollower(94114 call x dim) leaderIndex)))
      }
    }
    {
      { scopeless
        (94120 return(94137 call _build_tuple(94123 call _toFollower(94125 call x dim) leaderIndex)(94136 'expand_tuple'(94129 call _toFollowerZipInternal x leaderIndex(94132 call + dim 1)))))
      }
    }
  }
  function _toFastFollower[94158](arg iterator[94161] :
  _iteratorClass, arg leaderIndex[94164]:_any[141](?), arg fast[94167] :
  bool) : _unknown[42] "inline" "no implicit copy" "fn returns iterator"
  {
    (94171 return(94173 call chpl__autoCopy(94174 'to follower' iterator leaderIndex 1)(definedConst = 0)))
  }
  function _toFastFollower[94182](arg ir[94185] :
  _iteratorRecord, arg leaderIndex[94188]:_any[141](?), arg fast[94191] :
  bool) : _unknown[42] "inline" "fn returns iterator"
  {
    { scopeless
      unknown ic[94196] "no copy"(94198 call _getIterator ir)
      (94201 'end of statement')
    }
    { scopeless
      unknown follower[94203] "no copy"(94205 call _toFastFollower ic leaderIndex(fast = 1))
      (94211 'end of statement')
    }
    (94213 call _freeIterator ic)
    (94215 return follower)
  }
  function _toFastFollower[94219](arg x[94221]:_any[141](?), arg leaderIndex[94223]:_any[141](?)) : _unknown[42] "inline" "fn returns iterator"
  {
    if(94247 call _cond_test(94245 call chpl__canHaveFastFollowers x))
    {
      { scopeless
        (94226 return(94228 call _toFastFollower(94230 call _getIterator x) leaderIndex(fast = 1)))
      }
    }
    {
      { scopeless
        (94236 return(94238 call _toFollower(94240 call _getIterator x) leaderIndex))
      }
    }
  }
  function singleValIter[94255](arg iterables[94258] :
  _tuple) param : _unknown[42]
  {
    (94262 return(94263 call &&(94265 call ==(94268 call . iterables c"size") 1)(94272 call !(94275 call isRefIter(94277 call _getIterator(94279 call iterables 0))))))
  }
  function singleRefIter[94283](arg iterables[94286] :
  _tuple) param : _unknown[42]
  {
    (94290 return(94291 call &&(94293 call ==(94296 call . iterables c"size") 1)(94301 call isRefIter(94303 call _getIterator(94305 call iterables 0)))))
  }
}