AST dump for ChapelLocks after pass normalize.
Module use list: Atomics ChapelBase MemConsistency currentTask 

{
  function chpl__init_ChapelLocks[468384]() : void[4] "insert line file info" "module init"
  {
    (599582 return _void[46])
  }
  function chpl_LocalSpinlock[85418].init[85249](arg _mt[85253]:_MT[201], ref arg this[85251]:chpl_LocalSpinlock[85418]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown l[519339] "temp"
    unknown call_tmp[770520] "expr temp" "maybe param" "maybe type" "temp"
    (770523 'move' call_tmp[770520](519342 call chpl__processorAtomicType bool[19]))
    (519344 'default init var' l[519339] call_tmp[770520])
    (519346 '.=' this[85251] c"l" l[519339])
    (550297 'end of statement')
    (599574 return _void[46])
  }
  function chpl_LocalSpinlock[85418].init=[85258](arg _mt[85266]:_MT[201], ref arg this[85260]:chpl_LocalSpinlock[85418], arg other[85263]:chpl_LocalSpinlock[85418]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown l[519350] "temp"
    unknown call_tmp[770525] "expr temp" "maybe param" "maybe type" "temp"
    (770528 'move' call_tmp[770525](519353 call chpl__processorAtomicType bool[19]))
    (519355 'default init var' l[519350] call_tmp[770525])
    (519357 '.=' this[85260] c"l" l[519350])
    (550298 'end of statement')
    (519361 'init done')
    (550299 'end of statement')
    unknown call_tmp[770532] "expr temp" "maybe param" "maybe type" "temp"
    (770535 'move' call_tmp[770532](85277 call l _mt[203] this[85260]))
    unknown call_tmp[770541] "expr temp" "maybe param" "maybe type" "temp"
    (770544 'move' call_tmp[770541](85287 call l _mt[203] other[85263]))
    unknown call_tmp[770548] "expr temp" "maybe param" "maybe type" "temp"
    (770551 'move' call_tmp[770548](85293 call(85290 call (partial) read _mt[203] call_tmp[770541])))
    (85285 call(85282 call (partial) init_helper _mt[203] call_tmp[770532]) call_tmp[770548])
    (599576 return _void[46])
  }
  function chpl_LocalSpinlock[85418].lock[85296](arg _mt[85300]:_MT[201], ref arg this[85298]:chpl_LocalSpinlock[85418]) : _unknown[42] "inline" "method" "primary method" "no return value for void"
  {
    {
      const tmp[85387] "const" "temp"
      unknown call_tmp[770553] "expr temp" "maybe param" "maybe type" "temp"
      (770556 'move' call_tmp[770553](85384 '_wide_get_locale' this[85298]))
      (85388 'move' tmp[85387](85385 'deref' call_tmp[770553]))
      {
        unknown tmp[85333] "temp"
        unknown tmp[481890] "maybe param" "temp"
        unknown call_tmp[770560] "expr temp" "maybe param" "maybe type" "temp"
        (770563 'move' call_tmp[770560](400403 call l _mt[203] this[85298]))
        (481901 'move' tmp[481890](85371 call(85368 call (partial) read _mt[203] call_tmp[770560])))
        unknown call_tmp[770567] "expr temp" "maybe param" "maybe type" "temp"
        (770570 'move' call_tmp[770567](481903 call _cond_invalid tmp[481890]))
        if call_tmp[770567]
        {
          (481906 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[669158] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[669159] "maybe param" "temp"
        unknown call_tmp[770572] "expr temp" "maybe param" "maybe type" "temp"
        (770575 'move' call_tmp[770572](481891 call isTrue tmp[481890]))
        (669164 'move' tmp[669159](669162 call _cond_test call_tmp[770572]))
        if tmp[669159]
        {
          (669169 'move' tmp[669158](669166 '_paramFoldLogical' tmp[669159] 1))
        }
        {
          unknown tmp[669171] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[770579] "expr temp" "maybe param" "maybe type" "temp"
          (770582 'move' call_tmp[770579](400408 call l _mt[203] this[85298]))
          unknown call_tmp[770586] "expr temp" "maybe param" "maybe type" "temp"
          (770589 'move' call_tmp[770586](85376 call(85373 call (partial) testAndSet _mt[203] call_tmp[770579]) acquire[81222]))
          (669173 'move' tmp[669171](481895 call isTrue call_tmp[770586]))
          (669178 'move' tmp[669158](669175 '_paramFoldLogical' tmp[669159] tmp[669171]))
        }
        (85381 'move' tmp[85333](85364 call _cond_test tmp[669158]))
        WhileDo[85338]
        {
          (85331 call yieldExecution)
          (550302 'end of statement')
          label _continueLabel[85336]
          unknown tmp[481869] "maybe param" "temp"
          unknown call_tmp[770593] "expr temp" "maybe param" "maybe type" "temp"
          (770596 'move' call_tmp[770593](400392 call l _mt[203] this[85298]))
          (481880 'move' tmp[481869](85349 call(85346 call (partial) read _mt[203] call_tmp[770593])))
          unknown call_tmp[770600] "expr temp" "maybe param" "maybe type" "temp"
          (770603 'move' call_tmp[770600](481882 call _cond_invalid tmp[481869]))
          if call_tmp[770600]
          {
            (481885 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[669185] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[669186] "maybe param" "temp"
          unknown call_tmp[770605] "expr temp" "maybe param" "maybe type" "temp"
          (770608 'move' call_tmp[770605](481870 call isTrue tmp[481869]))
          (669191 'move' tmp[669186](669189 call _cond_test call_tmp[770605]))
          if tmp[669186]
          {
            (669196 'move' tmp[669185](669193 '_paramFoldLogical' tmp[669186] 1))
          }
          {
            unknown tmp[669198] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[770612] "expr temp" "maybe param" "maybe type" "temp"
            (770615 'move' call_tmp[770612](400397 call l _mt[203] this[85298]))
            unknown call_tmp[770619] "expr temp" "maybe param" "maybe type" "temp"
            (770622 'move' call_tmp[770619](85354 call(85351 call (partial) testAndSet _mt[203] call_tmp[770612]) acquire[81222]))
            (669200 'move' tmp[669198](481874 call isTrue call_tmp[770619]))
            (669205 'move' tmp[669185](669202 '_paramFoldLogical' tmp[669186] tmp[669198]))
          }
          (85359 'move' tmp[85333](85342 call _cond_test tmp[669185]))
          tmp[85333]
        }
        label _breakLabel[85337]
      }
      (85391 'elided on block' 0 tmp[85387])
    }
    (599578 return _void[46])
    (396081 'used modules list'(85309 'use' currentTask[68749]))
  }
  function chpl_LocalSpinlock[85418].unlock[85397](arg _mt[85401]:_MT[201], ref arg this[85399]:chpl_LocalSpinlock[85418]) : _unknown[42] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[770626] "expr temp" "maybe param" "maybe type" "temp"
    (770629 'move' call_tmp[770626](400414 call l _mt[203] this[85399]))
    (85410 call(85407 call (partial) clear _mt[203] call_tmp[770626]) release[81220])
    (599580 return _void[46])
  }
  type chpl_LocalSpinlock[85418] unknown l[85243](85245 call chpl__processorAtomicType bool[19])
  (396077 'used modules list'(85235 'use' Atomics[85230])(85237 'use' ChapelBase[77907])(85239 'use' MemConsistency[81470]))
}