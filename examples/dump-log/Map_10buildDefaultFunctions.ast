AST dump for Map after pass buildDefaultFunctions.
Module use list: ChapelStandard ChapelLocks ChapelHashtable HaltWrappers IO FormattedIO Reflection 

{
  function chpl__init_Map[468660]() : void[4] "insert line file info" "module init"
  {
    (656542 'move' _lockType[348724] chpl_LocalSpinlock[85418])
    (656544 'init var' warnForMapParsafeMismatch[348877] 1)
    (348880 'end of statement')
    (1001223 'resolution point' |serializable[475457])
    (1001225 'end of statement')
    (637521 return _void[46])
  }
  unknown _lockType[348724] "dead at end of block" "insert auto destroy" "type variable"
  function _LockWrapper[348767].lock[348738](arg _mt[348742]:_MT[201], arg this[348740]:_LockWrapper[348767]) : _unknown[42] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[970118] "expr temp" "maybe param" "maybe type" "temp"
    (970121 'move' call_tmp[970118](410672 call lockVar _mt[203] this[348740]))
    (348749 call(348746 call (partial) lock _mt[203] call_tmp[970118]))
    (637098 return _void[46])
  }
  function _LockWrapper[348767].unlock[348752](arg _mt[348756]:_MT[201], arg this[348754]:_LockWrapper[348767]) : _unknown[42] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[970127] "expr temp" "maybe param" "maybe type" "temp"
    (970130 'move' call_tmp[970127](410677 call lockVar _mt[203] this[348754]))
    (348763 call(348760 call (partial) unlock _mt[203] call_tmp[970127]))
    (637100 return _void[46])
  }
  function _LockWrapper[348767].super[1388064](arg _mt[1388066]:_MT[201], arg this[1388068]:_LockWrapper[348767]) : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1388078] "RVV" "temp"
    unknown call_tmp[1388085] "expr temp" "maybe param" "maybe type" "temp"
    (1388088 'move' call_tmp[1388085](1388072 '.v' this[1388068] c"super"))
    (1388083 'move' ret[1388078](1388082 'deref' call_tmp[1388085]))
    (1388080 return ret[1388078])
  }
  function _LockWrapper[348767].lockVar[1388090](arg _mt[1388092]:_MT[201], arg this[1388094]:_LockWrapper[348767]) ref : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1388104] "RVV" "temp"
    unknown call_tmp[1388111] "expr temp" "maybe param" "maybe type" "temp"
    (1388114 'move' call_tmp[1388111](1388098 '.' this[1388094] c"lockVar"))
    (1388109 'move' ret[1388104](1388108 'addr of' call_tmp[1388111]))
    (1388106 return ret[1388104])
  }
  function _LockWrapper[348767].init[1388116](arg _mt[1388118]:_MT[201], arg this[1388119]:_LockWrapper[348767], in arg lockVar[1388130] :
  (1388200 'new' _lockType[348724]) =
  (1388201 'new' _lockType[348724])) : void[4] "compiler generated" "default initializer" "inline" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[1388149] "temporary of super field" "temp"
    (1388151 'move' super_tmp[1388149](1388148 '.v' this[1388119] c"super"))
    (1388129 call(1388127 call (partial) init _mt[203] super_tmp[1388149]))
    (1388175 'end of statement')
    unknown tmp[1388154] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[1388178] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[1388190] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1388193 'move' call_tmp[1388190](1388156 '.v' this[1388119] c"super"))
      (1388182 'move' call_type_tmp[1388178](1388159 'typeof' call_tmp[1388190]))
    }
    (1388160 'move' tmp[1388154] call_type_tmp[1388178])
    unknown call_tmp[1388195] "maybe param" "maybe type" "temp"
    (1388198 'move' call_tmp[1388195](1388165 'cast' tmp[1388154] this[1388119]))
    unknown chpl__thisAsParent[1388162] "dead at end of block" "insert auto destroy" "temp"
    (1388186 'init var' chpl__thisAsParent[1388162] call_tmp[1388195] tmp[1388154])
    (1388168 'setcid' chpl__thisAsParent[1388162])
    (1388170 '.=' this[1388119] c"lockVar" lockVar[1388130])
    (1388176 'end of statement')
    (1388173 'setcid' this[1388119])
    (1388184 return _void[46])
  }
  function _LockWrapper[348767].init[1388202](arg _mt[1388204]:_MT[201], arg this[1388205]:_LockWrapper[348767], arg reader[1388206]:_any[141](?), ref arg deserializer[1388207]:_any[141](?)) : void[4] "compiler generated" "inline" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown call_tmp[1388323] "expr temp" "maybe param" "maybe type" "temp"
    (1388326 'move' call_tmp[1388323](1388217 'simple type name' this[1388205]))
    unknown call_tmp[1388328] "maybe param" "maybe type" "temp"
    (1388331 'move' call_tmp[1388328](1388219 call startClass _mt[203] deserializer[1388207] reader[1388206] call_tmp[1388323]))
    unknown _chpl_des_helper[1388224] "dead at end of block" "insert auto destroy"
    (1388319 'init var' _chpl_des_helper[1388224] call_tmp[1388328])
    (1388297 'end of statement')
    unknown super_tmp[1388266] "temporary of super field" "temp"
    (1388268 'move' super_tmp[1388266](1388265 '.v' this[1388205] c"super"))
    (1388233 call(1388231 call (partial) init _mt[203] super_tmp[1388266]))
    (1388298 'end of statement')
    unknown tmp[1388271] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[1388305] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[1388335] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1388338 'move' call_tmp[1388335](1388273 '.v' this[1388205] c"super"))
      (1388309 'move' call_type_tmp[1388305](1388276 'typeof' call_tmp[1388335]))
    }
    (1388277 'move' tmp[1388271] call_type_tmp[1388305])
    unknown call_tmp[1388340] "maybe param" "maybe type" "temp"
    (1388343 'move' call_tmp[1388340](1388282 'cast' tmp[1388271] this[1388205]))
    unknown chpl__thisAsParent[1388279] "dead at end of block" "insert auto destroy" "temp"
    (1388321 'init var' chpl__thisAsParent[1388279] call_tmp[1388340] tmp[1388271])
    (1388285 'setcid' chpl__thisAsParent[1388279])
    (1388299 'end of statement')
    { scopeless type
      unknown call_type_tmp[1388311] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[1388345] "insert auto destroy for explicit new" "maybe param" "used in type" "maybe type" "temp"
      (1388348 'move' call_tmp[1388345](1388365 'new' _lockType[348724]))
      (1388315 'move' call_type_tmp[1388311](1388246 'typeof' call_tmp[1388345]))
    }
    unknown call_tmp[1388350] "expr temp" "maybe param" "maybe type" "temp"
    (1388353 'move' call_tmp[1388350](1388247 'field num to name' this[1388205] 1))
    unknown call_tmp[1388355] "maybe param" "maybe type" "temp"
    (1388358 'move' call_tmp[1388355](1388250 call readField _mt[203] _chpl_des_helper[1388224] call_tmp[1388350] call_type_tmp[1388311]))
    unknown lockVar[1388287] "temp"
    (1388289 'init var' lockVar[1388287] call_tmp[1388355])
    (1388291 '.=' this[1388205] c"lockVar" lockVar[1388287])
    (1388300 'end of statement' _chpl_des_helper[1388224])
    (1388260 call endClass _mt[203] _chpl_des_helper[1388224])
    (1388302 'end of statement' _chpl_des_helper[1388224])
    (1388295 'setcid' this[1388205])
    (1388317 return _void[46])
  }
  where {
    unknown call_tmp[1388360] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1388363 'move' call_tmp[1388360](1388208 'typeof' reader[1388206]))
    (1388210 call chpl__isFileReader call_tmp[1388360])
  }
  function _LockWrapper[348767].deinit[1388368](arg _mt[1388370]:_MT[201], arg this[1388372]:_LockWrapper[348767]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (1388380 return _void[46])
  }
  function _LockWrapper[348767].serialize[1388382](arg _mt[1388386]:_MT[201], arg this[1388384]:_LockWrapper[348767], arg writer[1388385]:_any[141](?), ref arg serializer[1388390]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (1388393 call serializeDefaultImpl writer[1388385] serializer[1388390] this[1388384])
    (1388399 return _void[46])
  }
  function _LockWrapper[348767].deserialize[1388401](arg _mt[1388405]:_MT[201], arg this[1388403]:_LockWrapper[348767], arg reader[1388404]:_any[141](?), ref arg deserializer[1388410]:_any[141](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    unknown _deser_temp[1388412] "temp"
    (1388414 'move' _deser_temp[1388412] this[1388403])
    (1388417 call deserializeDefaultImpl reader[1388404] deserializer[1388410] _deser_temp[1388412])
    (1388423 return _void[46])
  }
  type _LockWrapper[348767] val super[397908]:RootClass[236] "super class" unknown lockVar[348732](348733 'new'(348735 call _lockType[348724]))
  type _LockWrapper[461512](?)
  function _checkKeyAndValType[348769](arg K[348771]:_any[141](?), arg V[348773]:_any[141](?)) : _unknown[42] "private" "no return value for void"
  {
    unknown call_tmp[970134] "expr temp" "maybe param" "maybe type" "temp"
    (970137 'move' call_tmp[970134](348821 call isGenericType K[348771]))
    unknown call_tmp[970139] "expr temp" "maybe param" "maybe type" "temp"
    (970142 'move' call_tmp[970139](348823 call _cond_test call_tmp[970134]))
    if call_tmp[970139]
    {
      unknown call_tmp[970144] "expr temp" "maybe param" "maybe type" "temp"
      (970147 'move' call_tmp[970144](348782 call : K[348771] string[244]))
      (348778 call compilerWarning "creating a map with key type " call_tmp[970144] 2)
      (573002 'end of statement')
      unknown tmp[505326] "maybe param" "temp"
      (505337 'move' tmp[505326](348800 call isClassType K[348771]))
      unknown call_tmp[970149] "expr temp" "maybe param" "maybe type" "temp"
      (970152 'move' call_tmp[970149](505339 call _cond_invalid tmp[505326]))
      if call_tmp[970149]
      {
        (505342 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[711390] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[711391] "maybe param" "temp"
      unknown call_tmp[970154] "expr temp" "maybe param" "maybe type" "temp"
      (970157 'move' call_tmp[970154](505327 call isTrue tmp[505326]))
      (711396 'move' tmp[711391](711394 call _cond_test call_tmp[970154]))
      if tmp[711391]
      {
        unknown tmp[711398] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[970159] "expr temp" "maybe param" "maybe type" "temp"
        (970162 'move' call_tmp[970159](348806 call : K[348771] borrowed[174](?)))
        unknown call_tmp[970164] "expr temp" "maybe param" "maybe type" "temp"
        (970167 'move' call_tmp[970164](348805 call isGenericType call_tmp[970159]))
        unknown call_tmp[970169] "expr temp" "maybe param" "maybe type" "temp"
        (970172 'move' call_tmp[970169](348802 call ! call_tmp[970164]))
        (711400 'move' tmp[711398](505330 call isTrue call_tmp[970169]))
        (711405 'move' tmp[711390](711402 '_paramFoldLogical' tmp[711391] tmp[711398]))
      }
      {
        (711410 'move' tmp[711390](711407 '_paramFoldLogical' tmp[711391] 0))
      }
      unknown call_tmp[970174] "expr temp" "maybe param" "maybe type" "temp"
      (970177 'move' call_tmp[970174](348810 call _cond_test tmp[711390]))
      if call_tmp[970174]
      {
        (348789 call compilerWarning "which is a class type with generic " "management" 2)
      }
      (348815 call compilerError "map key type cannot currently be generic" 2)
    }
    unknown call_tmp[970179] "expr temp" "maybe param" "maybe type" "temp"
    (970182 'move' call_tmp[970179](348868 call isGenericType V[348773]))
    unknown call_tmp[970184] "expr temp" "maybe param" "maybe type" "temp"
    (970187 'move' call_tmp[970184](348870 call _cond_test call_tmp[970179]))
    if call_tmp[970184]
    {
      unknown call_tmp[970189] "expr temp" "maybe param" "maybe type" "temp"
      (970192 'move' call_tmp[970189](348833 call : V[348773] string[244]))
      (348829 call compilerWarning "creating a map with value type " call_tmp[970189] 2)
      (573006 'end of statement')
      unknown tmp[505347] "maybe param" "temp"
      (505358 'move' tmp[505347](348847 call isClassType V[348773]))
      unknown call_tmp[970194] "expr temp" "maybe param" "maybe type" "temp"
      (970197 'move' call_tmp[970194](505360 call _cond_invalid tmp[505347]))
      if call_tmp[970194]
      {
        (505363 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[711417] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[711418] "maybe param" "temp"
      unknown call_tmp[970199] "expr temp" "maybe param" "maybe type" "temp"
      (970202 'move' call_tmp[970199](505348 call isTrue tmp[505347]))
      (711423 'move' tmp[711418](711421 call _cond_test call_tmp[970199]))
      if tmp[711418]
      {
        unknown tmp[711425] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[970204] "expr temp" "maybe param" "maybe type" "temp"
        (970207 'move' call_tmp[970204](348853 call : V[348773] borrowed[174](?)))
        unknown call_tmp[970209] "expr temp" "maybe param" "maybe type" "temp"
        (970212 'move' call_tmp[970209](348852 call isGenericType call_tmp[970204]))
        unknown call_tmp[970214] "expr temp" "maybe param" "maybe type" "temp"
        (970217 'move' call_tmp[970214](348849 call ! call_tmp[970209]))
        (711427 'move' tmp[711425](505351 call isTrue call_tmp[970214]))
        (711432 'move' tmp[711417](711429 '_paramFoldLogical' tmp[711418] tmp[711425]))
      }
      {
        (711437 'move' tmp[711417](711434 '_paramFoldLogical' tmp[711418] 0))
      }
      unknown call_tmp[970219] "expr temp" "maybe param" "maybe type" "temp"
      (970222 'move' call_tmp[970219](348857 call _cond_test tmp[711417]))
      if call_tmp[970219]
      {
        (348840 call compilerWarning "which is a class type with generic " "management" 2)
      }
      (348862 call compilerError "map value type cannot currently be generic" 2)
    }
    (637102 return _void[46])
  }
  unknown warnForMapParsafeMismatch[348877] "config" "param"
  function map[352283](?)._enter[348919](arg _mt[348923]:_MT[201], arg this[348921]:map[352283](?)) : _unknown[42] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[970226] "expr temp" "maybe param" "maybe type" "temp"
    (970229 'move' call_tmp[970226](461518 call parSafe _mt[203] this[348921]))
    unknown call_tmp[970231] "expr temp" "maybe param" "maybe type" "temp"
    (970234 'move' call_tmp[970231](348933 call _cond_test call_tmp[970226]))
    if call_tmp[970231]
    {
      unknown call_tmp[970238] "expr temp" "maybe param" "maybe type" "temp"
      (970241 'move' call_tmp[970238](410682 call _lock _mt[203] this[348921]))
      (348930 call(348927 call (partial) lock _mt[203] call_tmp[970238]))
    }
    (637104 return _void[46])
  }
  function map[352283](?)._leave[348940](arg _mt[348944]:_MT[201], arg this[348942]:map[352283](?)) : _unknown[42] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[970247] "expr temp" "maybe param" "maybe type" "temp"
    (970250 'move' call_tmp[970247](461523 call parSafe _mt[203] this[348942]))
    unknown call_tmp[970252] "expr temp" "maybe param" "maybe type" "temp"
    (970255 'move' call_tmp[970252](348954 call _cond_test call_tmp[970247]))
    if call_tmp[970252]
    {
      unknown call_tmp[970259] "expr temp" "maybe param" "maybe type" "temp"
      (970262 'move' call_tmp[970259](410687 call _lock _mt[203] this[348942]))
      (348951 call(348948 call (partial) unlock _mt[203] call_tmp[970259]))
    }
    (637106 return _void[46])
  }
  function map[352283](?).init[348961](arg _mt[348977]:_MT[201], ref arg this[348963]:map[352283](?), arg keyType[348965]:_any[141](?), arg valType[348967]:_any[141](?), arg resizeThreshold[348970] :
  defaultHashTableResizeThreshold[209951] =
  defaultHashTableResizeThreshold[209951], arg initialCapacity[348974] :
  16 =
  16) : void[4] "method" "primary method" "no return value for void"
  {
    (348981 call _checkKeyAndValType keyType[348965] valType[348967])
    (573012 'end of statement')
    unknown keyType[537485] "temp" "type variable"
    (537487 'move' keyType[537485] keyType[348965])
    (537489 'init field' this[348963] c"keyType" keyType[537485])
    (573013 'end of statement')
    unknown valType[537493] "temp" "type variable"
    (537495 'move' valType[537493] valType[348967])
    (537497 'init field' this[348963] c"valType" valType[537493])
    (573014 'end of statement')
    unknown parSafe[537501] "param" "temp"
    (537503 'init var' parSafe[537501] 0)
    (537505 'init field' this[348963] c"parSafe" parSafe[537501])
    (573015 'end of statement')
    unknown tmp[505368] "maybe param" "temp"
    (505379 'move' tmp[505368](349031 call <= resizeThreshold[348970] 0))
    unknown call_tmp[970266] "expr temp" "maybe param" "maybe type" "temp"
    (970269 'move' call_tmp[970266](505381 call _cond_invalid tmp[505368]))
    if call_tmp[970266]
    {
      (505384 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[711444] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[711445] "maybe param" "temp"
    unknown call_tmp[970271] "expr temp" "maybe param" "maybe type" "temp"
    (970274 'move' call_tmp[970271](505369 call isTrue tmp[505368]))
    (711450 'move' tmp[711445](711448 call _cond_test call_tmp[970271]))
    if tmp[711445]
    {
      (711455 'move' tmp[711444](711452 '_paramFoldLogical' tmp[711445] 1))
    }
    {
      unknown tmp[711457] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[970276] "expr temp" "maybe param" "maybe type" "temp"
      (970279 'move' call_tmp[970276](349035 call >= resizeThreshold[348970] 1))
      (711459 'move' tmp[711457](505373 call isTrue call_tmp[970276]))
      (711464 'move' tmp[711444](711461 '_paramFoldLogical' tmp[711445] tmp[711457]))
    }
    unknown call_tmp[970281] "expr temp" "maybe param" "maybe type" "temp"
    (970284 'move' call_tmp[970281](349039 call _cond_test tmp[711444]))
    if call_tmp[970281]
    {
      (349007 call warning "'resizeThreshold' must be between 0 and 1." " 'resizeThreshold' will be set to 0.5")
      (573017 'end of statement')
      unknown resizeThreshold[537509] "temp"
      (537511 'init var' resizeThreshold[537509] 0.5)
      (537513 '.=' this[348963] c"resizeThreshold" resizeThreshold[537509])
      (573018 'end of statement')
    }
    {
      unknown resizeThreshold[537517] "temp"
      (537519 'init var' resizeThreshold[537517] resizeThreshold[348970])
      (537521 '.=' this[348963] c"resizeThreshold" resizeThreshold[537517])
      (573019 'end of statement')
    }
    unknown call_tmp[970286] "expr temp" "maybe param" "maybe type" "temp"
    (970289 'move' call_tmp[970286](349052 '.' this[348963] c"resizeThreshold"))
    unknown call_tmp[970291] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (970294 'move' call_tmp[970291](1000646 'new' chpl__hashtable[267644](?) keyType[348965] valType[348967] call_tmp[970286] initialCapacity[348974]))
    unknown call_tmp[970296] "expr temp" "maybe param" "maybe type" "temp"
    (970299 'move' call_tmp[970296](537537 '.v' this[348963] c"keyType"))
    unknown call_tmp[970301] "expr temp" "maybe param" "maybe type" "temp"
    (970304 'move' call_tmp[970301](537540 '.v' this[348963] c"valType"))
    unknown call_tmp[970306] "maybe param" "maybe type" "temp"
    (970309 'move' call_tmp[970306](537528 call chpl__hashtable[267644](?) call_tmp[970296] call_tmp[970301]))
    unknown table[537525] "temp"
    (537531 'init var' table[537525] call_tmp[970291] call_tmp[970306])
    (537533 'init field' this[348963] c"table" table[537525])
    (573020 'end of statement')
    unknown _lock[537552] "temp"
    unknown tmp[711471] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[711472] "maybe param" "temp"
    unknown call_tmp[970311] "expr temp" "maybe param" "maybe type" "temp"
    (970314 'move' call_tmp[970311](537560 '.v' this[348963] c"parSafe"))
    (711477 'move' tmp[711472](711475 call _cond_test call_tmp[970311]))
    if tmp[711472]
    {
      unknown tmp[711479] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (711481 'move' tmp[711479](1000647 'new' _LockWrapper[461512](?)))
      (711486 'move' tmp[711471](711483 '_paramFoldLogical' tmp[711472] tmp[711479]))
    }
    {
      (711491 'move' tmp[711471](711488 '_paramFoldLogical' tmp[711472] none[48]))
    }
    (537554 'init var' _lock[537552] tmp[711471])
    (537556 '.=' this[348963] c"_lock" _lock[537552])
    (573021 'end of statement')
    (637108 return _void[46])
  }
  function map[352283](?).init[349058](arg _mt[349076]:_MT[201], ref arg this[349060]:map[352283](?), arg keyType[349062]:_any[141](?), arg valType[349064]:_any[141](?), param arg parSafe[349066]:_any[141](?), arg resizeThreshold[349069] :
  defaultHashTableResizeThreshold[209951] =
  defaultHashTableResizeThreshold[209951], arg initialCapacity[349073] :
  16 =
  16) : void[4] "method" "primary method" "@unstable" "no return value for void"
  {
    (349080 call _checkKeyAndValType keyType[349062] valType[349064])
    (573022 'end of statement')
    unknown keyType[537563] "temp" "type variable"
    (537565 'move' keyType[537563] keyType[349062])
    (537567 'init field' this[349060] c"keyType" keyType[537563])
    (573023 'end of statement')
    unknown valType[537571] "temp" "type variable"
    (537573 'move' valType[537571] valType[349064])
    (537575 'init field' this[349060] c"valType" valType[537571])
    (573024 'end of statement')
    unknown parSafe[537579] "param" "temp"
    (537581 'init var' parSafe[537579] parSafe[349066])
    (537583 'init field' this[349060] c"parSafe" parSafe[537579])
    (573025 'end of statement')
    unknown tmp[505389] "maybe param" "temp"
    (505400 'move' tmp[505389](349126 call <= resizeThreshold[349069] 0))
    unknown call_tmp[970316] "expr temp" "maybe param" "maybe type" "temp"
    (970319 'move' call_tmp[970316](505402 call _cond_invalid tmp[505389]))
    if call_tmp[970316]
    {
      (505405 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[711498] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[711499] "maybe param" "temp"
    unknown call_tmp[970321] "expr temp" "maybe param" "maybe type" "temp"
    (970324 'move' call_tmp[970321](505390 call isTrue tmp[505389]))
    (711504 'move' tmp[711499](711502 call _cond_test call_tmp[970321]))
    if tmp[711499]
    {
      (711509 'move' tmp[711498](711506 '_paramFoldLogical' tmp[711499] 1))
    }
    {
      unknown tmp[711511] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[970326] "expr temp" "maybe param" "maybe type" "temp"
      (970329 'move' call_tmp[970326](349130 call >= resizeThreshold[349069] 1))
      (711513 'move' tmp[711511](505394 call isTrue call_tmp[970326]))
      (711518 'move' tmp[711498](711515 '_paramFoldLogical' tmp[711499] tmp[711511]))
    }
    unknown call_tmp[970331] "expr temp" "maybe param" "maybe type" "temp"
    (970334 'move' call_tmp[970331](349134 call _cond_test tmp[711498]))
    if call_tmp[970331]
    {
      (349106 call warning "'resizeThreshold' must be between 0 and 1." " 'resizeThreshold' will be set to 0.5")
      (573027 'end of statement')
      unknown resizeThreshold[537587] "temp"
      (537589 'init var' resizeThreshold[537587] 0.5)
      (537591 '.=' this[349060] c"resizeThreshold" resizeThreshold[537587])
      (573028 'end of statement')
    }
    {
      unknown resizeThreshold[537595] "temp"
      (537597 'init var' resizeThreshold[537595] resizeThreshold[349069])
      (537599 '.=' this[349060] c"resizeThreshold" resizeThreshold[537595])
      (573029 'end of statement')
    }
    unknown call_tmp[970336] "expr temp" "maybe param" "maybe type" "temp"
    (970339 'move' call_tmp[970336](349147 '.' this[349060] c"resizeThreshold"))
    unknown call_tmp[970341] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (970344 'move' call_tmp[970341](1000648 'new' chpl__hashtable[267644](?) keyType[349062] valType[349064] call_tmp[970336] initialCapacity[349073]))
    unknown call_tmp[970346] "expr temp" "maybe param" "maybe type" "temp"
    (970349 'move' call_tmp[970346](537615 '.v' this[349060] c"keyType"))
    unknown call_tmp[970351] "expr temp" "maybe param" "maybe type" "temp"
    (970354 'move' call_tmp[970351](537618 '.v' this[349060] c"valType"))
    unknown call_tmp[970356] "maybe param" "maybe type" "temp"
    (970359 'move' call_tmp[970356](537606 call chpl__hashtable[267644](?) call_tmp[970346] call_tmp[970351]))
    unknown table[537603] "temp"
    (537609 'init var' table[537603] call_tmp[970341] call_tmp[970356])
    (537611 'init field' this[349060] c"table" table[537603])
    (573030 'end of statement')
    unknown _lock[537630] "temp"
    unknown tmp[711525] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[711526] "maybe param" "temp"
    unknown call_tmp[970361] "expr temp" "maybe param" "maybe type" "temp"
    (970364 'move' call_tmp[970361](537638 '.v' this[349060] c"parSafe"))
    (711531 'move' tmp[711526](711529 call _cond_test call_tmp[970361]))
    if tmp[711526]
    {
      unknown tmp[711533] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (711535 'move' tmp[711533](1000649 'new' _LockWrapper[461512](?)))
      (711540 'move' tmp[711525](711537 '_paramFoldLogical' tmp[711526] tmp[711533]))
    }
    {
      (711545 'move' tmp[711525](711542 '_paramFoldLogical' tmp[711526] none[48]))
    }
    (537632 'init var' _lock[537630] tmp[711525])
    (537634 '.=' this[349060] c"_lock" _lock[537630])
    (573031 'end of statement')
    (637110 return _void[46])
  }
  function map[352283](?).init=[349153](arg _mt[349168]:_MT[201], ref arg this[349155]:map[352283](?), ref arg other[349165]:map[352283](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown keyType[537669] "temp" "type variable"
    unknown tmp[711552] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[711553] "maybe param" "temp"
    unknown call_tmp[970366] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (970369 'move' call_tmp[970366](349186 'typeof' this[349155]))
    unknown call_tmp[970373] "expr temp" "maybe param" "maybe type" "temp"
    (970376 'move' call_tmp[970373](349187 call keyType _mt[203] call_tmp[970366]))
    unknown call_tmp[970378] "expr temp" "marked generic" "maybe param" "maybe type" "temp"
    (970381 'move' call_tmp[970378](349183 call != call_tmp[970373] ?[227]))
    (711558 'move' tmp[711553](711556 call _cond_test call_tmp[970378]))
    if tmp[711553]
    {
      unknown tmp[711560] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[970383] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (970386 'move' call_tmp[970383](349192 'typeof' this[349155]))
      (711562 'move' tmp[711560](349193 call keyType _mt[203] call_tmp[970383]))
      (711567 'move' tmp[711552](711564 '_paramFoldLogical' tmp[711553] tmp[711560]))
    }
    {
      unknown tmp[711569] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (711571 'move' tmp[711569](537647 'query' other[349165] 1))
      (711576 'move' tmp[711552](711573 '_paramFoldLogical' tmp[711553] tmp[711569]))
    }
    (537671 'move' keyType[537669] tmp[711552])
    (537673 'init field' this[349155] c"keyType" keyType[537669])
    (573032 'end of statement')
    unknown valType[537677] "temp" "type variable"
    unknown tmp[711583] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[711584] "maybe param" "temp"
    unknown call_tmp[970390] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (970393 'move' call_tmp[970390](349209 'typeof' this[349155]))
    unknown call_tmp[970397] "expr temp" "maybe param" "maybe type" "temp"
    (970400 'move' call_tmp[970397](349210 call valType _mt[203] call_tmp[970390]))
    unknown call_tmp[970402] "expr temp" "marked generic" "maybe param" "maybe type" "temp"
    (970405 'move' call_tmp[970402](349206 call != call_tmp[970397] ?[227]))
    (711589 'move' tmp[711584](711587 call _cond_test call_tmp[970402]))
    if tmp[711584]
    {
      unknown tmp[711591] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[970407] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (970410 'move' call_tmp[970407](349215 'typeof' this[349155]))
      (711593 'move' tmp[711591](349216 call valType _mt[203] call_tmp[970407]))
      (711598 'move' tmp[711583](711595 '_paramFoldLogical' tmp[711584] tmp[711591]))
    }
    {
      unknown tmp[711600] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (711602 'move' tmp[711600](537656 'query' other[349165] 2))
      (711607 'move' tmp[711583](711604 '_paramFoldLogical' tmp[711584] tmp[711600]))
    }
    (537679 'move' valType[537677] tmp[711583])
    (537681 'init field' this[349155] c"valType" valType[537677])
    (573033 'end of statement')
    unknown parSafe[537685] "param" "temp"
    unknown tmp[711614] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[711615] "maybe param" "temp"
    unknown call_tmp[970414] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (970417 'move' call_tmp[970414](349232 'typeof' this[349155]))
    unknown call_tmp[970421] "expr temp" "maybe param" "maybe type" "temp"
    (970424 'move' call_tmp[970421](349233 call parSafe _mt[203] call_tmp[970414]))
    unknown call_tmp[970426] "expr temp" "marked generic" "maybe param" "maybe type" "temp"
    (970429 'move' call_tmp[970426](349229 call != call_tmp[970421] ?[227]))
    (711620 'move' tmp[711615](711618 call _cond_test call_tmp[970426]))
    if tmp[711615]
    {
      unknown tmp[711622] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[970431] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (970434 'move' call_tmp[970431](349238 'typeof' this[349155]))
      (711624 'move' tmp[711622](349239 call parSafe _mt[203] call_tmp[970431]))
      (711629 'move' tmp[711614](711626 '_paramFoldLogical' tmp[711615] tmp[711622]))
    }
    {
      unknown tmp[711631] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (711633 'move' tmp[711631](537665 'query' other[349165] 3))
      (711638 'move' tmp[711614](711635 '_paramFoldLogical' tmp[711615] tmp[711631]))
    }
    (537687 'init var' parSafe[537685] tmp[711614])
    (537689 'init field' this[349155] c"parSafe" parSafe[537685])
    (573034 'end of statement')
    unknown tmp[505410] "maybe param" "temp"
    unknown call_tmp[970438] "expr temp" "maybe param" "maybe type" "temp"
    (970441 'move' call_tmp[970438](349268 '.' this[349155] c"parSafe"))
    unknown call_tmp[970445] "expr temp" "maybe param" "maybe type" "temp"
    (970448 'move' call_tmp[970445](349272 call parSafe _mt[203] other[349165]))
    (505421 'move' tmp[505410](349265 call != call_tmp[970438] call_tmp[970445]))
    unknown call_tmp[970450] "expr temp" "maybe param" "maybe type" "temp"
    (970453 'move' call_tmp[970450](505423 call _cond_invalid tmp[505410]))
    if call_tmp[970450]
    {
      (505426 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[711645] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[711646] "maybe param" "temp"
    unknown call_tmp[970455] "expr temp" "maybe param" "maybe type" "temp"
    (970458 'move' call_tmp[970455](505411 call isTrue tmp[505410]))
    (711651 'move' tmp[711646](711649 call _cond_test call_tmp[970455]))
    if tmp[711646]
    {
      unknown tmp[711653] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (711655 'move' tmp[711653](505414 call isTrue warnForMapParsafeMismatch[348877]))
      (711660 'move' tmp[711645](711657 '_paramFoldLogical' tmp[711646] tmp[711653]))
    }
    {
      (711665 'move' tmp[711645](711662 '_paramFoldLogical' tmp[711646] 0))
    }
    unknown call_tmp[970460] "expr temp" "maybe param" "maybe type" "temp"
    (970463 'move' call_tmp[970460](349276 call _cond_test tmp[711645]))
    if call_tmp[970460]
    {
      unknown call_tmp[970465] "expr temp" "maybe param" "maybe type" "temp"
      (970468 'move' call_tmp[970465](349253 call + "initializing between two maps with different " "parSafe settings\n"))
      unknown call_tmp[970470] "expr temp" "maybe param" "maybe type" "temp"
      (970473 'move' call_tmp[970470](349251 call + call_tmp[970465] "Note: this warning can be "))
      unknown call_tmp[970475] "expr temp" "maybe param" "maybe type" "temp"
      (970478 'move' call_tmp[970475](349249 call + call_tmp[970470] "silenced with '-swarnForMapParsafeMismatch=false'"))
      (349248 call compilerWarning call_tmp[970475])
    }
    unknown call_tmp[970482] "maybe param" "maybe type" "temp"
    (970485 'move' call_tmp[970482](349287 call resizeThreshold _mt[203] other[349165]))
    unknown resizeThreshold[537693] "temp"
    (537695 'init var' resizeThreshold[537693] call_tmp[970482])
    (537697 '.=' this[349155] c"resizeThreshold" resizeThreshold[537693])
    (573037 'end of statement')
    unknown call_tmp[970487] "expr temp" "maybe param" "maybe type" "temp"
    (970490 'move' call_tmp[970487](461577 '.' this[349155] c"keyType"))
    unknown call_tmp[970492] "expr temp" "maybe param" "maybe type" "temp"
    (970495 'move' call_tmp[970492](461582 '.' this[349155] c"valType"))
    unknown call_tmp[970497] "expr temp" "maybe param" "maybe type" "temp"
    (970500 'move' call_tmp[970497](461587 '.' this[349155] c"resizeThreshold"))
    unknown call_tmp[970502] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (970505 'move' call_tmp[970502](1000650 'new' chpl__hashtable[267644](?) call_tmp[970487] call_tmp[970492] call_tmp[970497]))
    unknown call_tmp[970507] "expr temp" "maybe param" "maybe type" "temp"
    (970510 'move' call_tmp[970507](537713 '.v' this[349155] c"keyType"))
    unknown call_tmp[970512] "expr temp" "maybe param" "maybe type" "temp"
    (970515 'move' call_tmp[970512](537716 '.v' this[349155] c"valType"))
    unknown call_tmp[970517] "maybe param" "maybe type" "temp"
    (970520 'move' call_tmp[970517](537704 call chpl__hashtable[267644](?) call_tmp[970507] call_tmp[970512]))
    unknown table[537701] "temp"
    (537707 'init var' table[537701] call_tmp[970502] call_tmp[970517])
    (537709 'init field' this[349155] c"table" table[537701])
    (573038 'end of statement')
    unknown _lock[537727] "temp"
    unknown tmp[711672] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[711673] "maybe param" "temp"
    unknown call_tmp[970522] "expr temp" "maybe param" "maybe type" "temp"
    (970525 'move' call_tmp[970522](537735 '.v' this[349155] c"parSafe"))
    (711678 'move' tmp[711673](711676 call _cond_test call_tmp[970522]))
    if tmp[711673]
    {
      unknown tmp[711680] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (711682 'move' tmp[711680](1000651 'new' _LockWrapper[461512](?)))
      (711687 'move' tmp[711672](711684 '_paramFoldLogical' tmp[711673] tmp[711680]))
    }
    {
      (711692 'move' tmp[711672](711689 '_paramFoldLogical' tmp[711673] none[48]))
    }
    (537729 'init var' _lock[537727] tmp[711672])
    (537731 '.=' this[349155] c"_lock" _lock[537727])
    (573039 'end of statement')
    (537738 'init done')
    (573040 'end of statement')
    unknown call_tmp[970529] "expr temp" "maybe param" "maybe type" "temp"
    (970532 'move' call_tmp[970529](461631 call keyType _mt[203] this[349155]))
    unknown call_tmp[970534] "expr temp" "maybe param" "maybe type" "temp"
    (970537 'move' call_tmp[970534](537650 'query' other[349165] 1))
    unknown call_tmp[970539] "expr temp" "maybe param" "maybe type" "temp"
    (970542 'move' call_tmp[970539](349526 call != call_tmp[970529] call_tmp[970534]))
    unknown call_tmp[970544] "expr temp" "maybe param" "maybe type" "temp"
    (970547 'move' call_tmp[970544](349530 call _cond_test call_tmp[970539]))
    if call_tmp[970544]
    {
      unknown call_tmp[970549] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (970552 'move' call_tmp[970549](349314 'typeof' this[349155]))
      unknown call_tmp[970554] "expr temp" "maybe param" "maybe type" "temp"
      (970557 'move' call_tmp[970554](349311 call : call_tmp[970549] string[244]))
      unknown call_tmp[970559] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (970562 'move' call_tmp[970559](349320 'typeof' other[349165]))
      unknown call_tmp[970564] "expr temp" "maybe param" "maybe type" "temp"
      (970567 'move' call_tmp[970564](349317 call : call_tmp[970559] string[244]))
      (349309 call compilerError "cannot initialize " call_tmp[970554] " from " call_tmp[970564] " due to key type mismatch")
    }
    {
      unknown call_tmp[970571] "expr temp" "maybe param" "maybe type" "temp"
      (970574 'move' call_tmp[970571](461625 call valType _mt[203] this[349155]))
      unknown call_tmp[970576] "expr temp" "maybe param" "maybe type" "temp"
      (970579 'move' call_tmp[970576](537659 'query' other[349165] 2))
      unknown call_tmp[970581] "expr temp" "maybe param" "maybe type" "temp"
      (970584 'move' call_tmp[970581](349517 call != call_tmp[970571] call_tmp[970576]))
      unknown call_tmp[970586] "expr temp" "maybe param" "maybe type" "temp"
      (970589 'move' call_tmp[970586](349521 call _cond_test call_tmp[970581]))
      if call_tmp[970586]
      {
        unknown call_tmp[970591] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (970594 'move' call_tmp[970591](349332 'typeof' this[349155]))
        unknown call_tmp[970596] "expr temp" "maybe param" "maybe type" "temp"
        (970599 'move' call_tmp[970596](349329 call : call_tmp[970591] string[244]))
        unknown call_tmp[970601] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (970604 'move' call_tmp[970601](349338 'typeof' other[349165]))
        unknown call_tmp[970606] "expr temp" "maybe param" "maybe type" "temp"
        (970609 'move' call_tmp[970606](349335 call : call_tmp[970601] string[244]))
        (349327 call compilerError "cannot initialize " call_tmp[970596] " from " call_tmp[970606] " due to value type mismatch")
      }
      {
        unknown call_tmp[970613] "expr temp" "maybe param" "maybe type" "temp"
        (970616 'move' call_tmp[970613](461620 call keyType _mt[203] this[349155]))
        unknown call_tmp[970618] "expr temp" "maybe param" "maybe type" "temp"
        (970621 'move' call_tmp[970618](349510 call isCopyableType call_tmp[970613]))
        unknown call_tmp[970623] "expr temp" "maybe param" "maybe type" "temp"
        (970626 'move' call_tmp[970623](349507 call ! call_tmp[970618]))
        unknown call_tmp[970628] "expr temp" "maybe param" "maybe type" "temp"
        (970631 'move' call_tmp[970628](349512 call _cond_test call_tmp[970623]))
        if call_tmp[970628]
        {
          unknown call_tmp[970633] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (970636 'move' call_tmp[970633](349350 'typeof' this[349155]))
          unknown call_tmp[970638] "expr temp" "maybe param" "maybe type" "temp"
          (970641 'move' call_tmp[970638](349347 call : call_tmp[970633] string[244]))
          unknown call_tmp[970643] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (970646 'move' call_tmp[970643](349356 'typeof' other[349165]))
          unknown call_tmp[970648] "expr temp" "maybe param" "maybe type" "temp"
          (970651 'move' call_tmp[970648](349353 call : call_tmp[970643] string[244]))
          unknown call_tmp[970655] "expr temp" "maybe param" "maybe type" "temp"
          (970658 'move' call_tmp[970655](461598 call keyType _mt[203] this[349155]))
          unknown call_tmp[970660] "expr temp" "maybe param" "maybe type" "temp"
          (970663 'move' call_tmp[970660](349361 call : call_tmp[970655] string[244]))
          (349345 call compilerError "cannot initialize " call_tmp[970638] " from " call_tmp[970648] " because key type " call_tmp[970660] " is not copyable")
        }
        {
          unknown call_tmp[970667] "expr temp" "maybe param" "maybe type" "temp"
          (970670 'move' call_tmp[970667](461615 call valType _mt[203] this[349155]))
          unknown call_tmp[970672] "expr temp" "maybe param" "maybe type" "temp"
          (970675 'move' call_tmp[970672](349501 call isCopyableType call_tmp[970667]))
          unknown call_tmp[970677] "expr temp" "maybe param" "maybe type" "temp"
          (970680 'move' call_tmp[970677](349498 call ! call_tmp[970672]))
          unknown call_tmp[970682] "expr temp" "maybe param" "maybe type" "temp"
          (970685 'move' call_tmp[970682](349503 call _cond_test call_tmp[970677]))
          if call_tmp[970682]
          {
            unknown call_tmp[970687] "expr temp" "maybe param" "maybe type" "temp" "type variable"
            (970690 'move' call_tmp[970687](349375 'typeof' this[349155]))
            unknown call_tmp[970692] "expr temp" "maybe param" "maybe type" "temp"
            (970695 'move' call_tmp[970692](349372 call : call_tmp[970687] string[244]))
            unknown call_tmp[970697] "expr temp" "maybe param" "maybe type" "temp" "type variable"
            (970700 'move' call_tmp[970697](349381 'typeof' other[349165]))
            unknown call_tmp[970702] "expr temp" "maybe param" "maybe type" "temp"
            (970705 'move' call_tmp[970702](349378 call : call_tmp[970697] string[244]))
            unknown call_tmp[970709] "expr temp" "maybe param" "maybe type" "temp"
            (970712 'move' call_tmp[970709](461605 call valType _mt[203] this[349155]))
            unknown call_tmp[970714] "expr temp" "maybe param" "maybe type" "temp"
            (970717 'move' call_tmp[970714](349386 call : call_tmp[970709] string[244]))
            (349370 call compilerError "cannot initialize " call_tmp[970692] " from " call_tmp[970702] " because value type " call_tmp[970714] " is not copyable")
          }
          {
            {
              unknown _indexOfInterest[349466] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[349467] "expr temp" "temp"
              unknown call_tmp[970721] "expr temp" "maybe param" "maybe type" "temp"
              (970724 'move' call_tmp[970721](349400 call(349397 call (partial) keys _mt[203] other[349165])))
              (349476 'move' _iterator[349467](349474 call _getIterator call_tmp[970721]))
              Defer
              {
                {
                  (349491 call _freeIterator _iterator[349467])
                }
              }
              { scopeless type
                (349481 'move' _indexOfInterest[349466](349478 call iteratorIndex _iterator[349467]))
              }
              ForLoop[349468]
              {
                unknown key[349392] "index var" "insert auto destroy"
                (573046 'end of statement')
                (349486 'move' key[349392] _indexOfInterest[349466])
                (573047 'end of statement' key[349392])
                {
                  unknown call_tmp[970728] "expr temp" "maybe param" "maybe type" "temp"
                  (970731 'move' call_tmp[970728](410714 call table _mt[203] this[349155]))
                  unknown call_tmp[970735] "maybe param" "maybe type" "temp"
                  (970738 'move' call_tmp[970735](349411 call(349408 call (partial) findAvailableSlot _mt[203] call_tmp[970728]) key[349392]))
                  const tmp[349413] "dead at end of block" "const" "insert auto destroy" "temp"
                  (656546 'init var' tmp[349413] call_tmp[970735])
                  (349417 call _check_tuple_var_decl tmp[349413] 2)
                  (573049 'end of statement')
                  unknown call_tmp[970740] "maybe param" "maybe type" "temp"
                  (970743 'move' call_tmp[970740](349414 call tmp[349413] 1))
                  const slot[349405] "dead at end of block" "const" "insert auto destroy"
                  (656548 'init var' slot[349405] call_tmp[970740])
                  (349422 'end of statement')
                  unknown call_tmp[970747] "expr temp" "maybe param" "maybe type" "temp"
                  (970750 'move' call_tmp[970747](349429 call table _mt[203] other[349165]))
                  unknown call_tmp[970754] "maybe param" "maybe type" "temp"
                  (970757 'move' call_tmp[970754](349435 call(349432 call (partial) findFullSlot _mt[203] call_tmp[970747]) key[349392]))
                  const tmp[349437] "dead at end of block" "const" "insert auto destroy" "temp"
                  (656550 'init var' tmp[349437] call_tmp[970754])
                  (349441 call _check_tuple_var_decl tmp[349437] 2)
                  (573050 'end of statement')
                  unknown call_tmp[970759] "maybe param" "maybe type" "temp"
                  (970762 'move' call_tmp[970759](349438 call tmp[349437] 1))
                  const slot2[349426] "dead at end of block" "const" "insert auto destroy"
                  (656552 'init var' slot2[349426] call_tmp[970759])
                  (349446 'end of statement')
                  unknown call_tmp[970766] "expr temp" "maybe param" "maybe type" "temp"
                  (970769 'move' call_tmp[970766](410720 call table _mt[203] this[349155]))
                  unknown call_tmp[970775] "expr temp" "maybe param" "maybe type" "temp"
                  (970778 'move' call_tmp[970775](349455 call table _mt[203] other[349165]))
                  unknown call_tmp[970782] "expr temp" "maybe param" "maybe type" "temp"
                  (970785 'move' call_tmp[970782](349461 call(349458 call (partial) table _mt[203] call_tmp[970775]) slot2[349426]))
                  unknown call_tmp[970789] "expr temp" "maybe param" "maybe type" "temp"
                  (970792 'move' call_tmp[970789](349463 call val _mt[203] call_tmp[970782]))
                  (349451 call(349448 call (partial) fillSlot _mt[203] call_tmp[970766]) slot[349405] key[349392] call_tmp[970789])
                  (573051 'end of statement' slot[349405] key[349392] slot2[349426])
                }
                label _continueLabel[349471]
                _indexOfInterest[349466]
                _iterator[349467]
              }
              label _breakLabel[349472]
            }
          }
        }
      }
    }
    (637112 return _void[46])
  }
  {
    (349174 call <(349171 'lifetime_of' this[349155])(349173 'lifetime_of' other[349165]))
  }
  function map[352283](?).clear[349538](arg _mt[349542]:_MT[201], ref arg this[349540]:map[352283](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (349546 call(461636 call (partial) _enter _mt[203] this[349540]))
    (573055 'end of statement')
    Defer
    {
      { scopeless
        (349548 call(461640 call (partial) _leave _mt[203] this[349540]))
      }
    }
    {
      unknown _indexOfInterest[349589] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[349590] "expr temp" "temp"
      unknown call_tmp[970800] "expr temp" "maybe param" "maybe type" "temp"
      (970803 'move' call_tmp[970800](410726 call table _mt[203] this[349540]))
      unknown call_tmp[970807] "expr temp" "maybe param" "maybe type" "temp"
      (970810 'move' call_tmp[970807](349558 call(349555 call (partial) allSlots _mt[203] call_tmp[970800])))
      (349599 'move' _iterator[349590](349597 call _getIterator call_tmp[970807]))
      Defer
      {
        {
          (349614 call _freeIterator _iterator[349590])
        }
      }
      { scopeless type
        (349604 'move' _indexOfInterest[349589](349601 call iteratorIndex _iterator[349590]))
      }
      ForLoop[349591]
      {
        unknown slot[349552] "index var" "insert auto destroy"
        (573058 'end of statement')
        (349609 'move' slot[349552] _indexOfInterest[349589])
        (573059 'end of statement' slot[349552])
        {
          unknown call_tmp[970814] "expr temp" "maybe param" "maybe type" "temp"
          (970817 'move' call_tmp[970814](410736 call table _mt[203] this[349540]))
          unknown call_tmp[970821] "expr temp" "maybe param" "maybe type" "temp"
          (970824 'move' call_tmp[970821](349583 call(349580 call (partial) isSlotFull _mt[203] call_tmp[970814]) slot[349552]))
          unknown call_tmp[970826] "expr temp" "maybe param" "maybe type" "temp"
          (970829 'move' call_tmp[970826](349585 call _cond_test call_tmp[970821]))
          if call_tmp[970826]
          {
            unknown key[349562] "dead at end of block" "insert auto destroy"
            unknown call_tmp[970833] "expr temp" "maybe param" "maybe type" "temp"
            (970836 'move' call_tmp[970833](461645 call keyType _mt[203] this[349540]))
            (656554 'default init var' key[349562] call_tmp[970833])
            (349565 'end of statement')
            unknown val[349567] "dead at end of block" "insert auto destroy"
            unknown call_tmp[970840] "expr temp" "maybe param" "maybe type" "temp"
            (970843 'move' call_tmp[970840](461650 call valType _mt[203] this[349540]))
            (656556 'default init var' val[349567] call_tmp[970840])
            (349570 'end of statement')
            unknown call_tmp[970847] "expr temp" "maybe param" "maybe type" "temp"
            (970850 'move' call_tmp[970847](410731 call table _mt[203] this[349540]))
            (349575 call(349572 call (partial) clearSlot _mt[203] call_tmp[970847]) slot[349552] key[349562] val[349567])
            (573061 'end of statement' slot[349552] key[349562] val[349567])
          }
        }
        label _continueLabel[349594]
        _indexOfInterest[349589]
        _iterator[349590]
      }
      label _breakLabel[349595]
    }
    unknown call_tmp[970856] "expr temp" "maybe param" "maybe type" "temp"
    (970859 'move' call_tmp[970856](410741 call table _mt[203] this[349540]))
    (349625 call(349622 call (partial) maybeShrinkAfterRemove _mt[203] call_tmp[970856]))
    (637114 return _void[46])
  }
  function map[352283](?).size[349628](arg _mt[349632]:_MT[201], const arg this[349630]:map[352283](?)) : _unknown[42] "inline" "method" "primary method" "no parens"
  {
    unknown ret[637118] "RVV" "temp"
    (349636 call(461658 call (partial) _enter _mt[203] this[349630]))
    (573066 'end of statement')
    Defer
    {
      { scopeless
        (349638 call(461662 call (partial) _leave _mt[203] this[349630]))
      }
    }
    unknown call_tmp[970869] "expr temp" "maybe param" "maybe type" "temp"
    (970872 'move' call_tmp[970869](461666 call _size _mt[203] this[349630]))
    (637123 'move' ret[637118](637122 'deref' call_tmp[970869]))
    (637120 return ret[637118])
  }
  function map[352283](?)._size[349646](arg _mt[349650]:_MT[201], const arg this[349648]:map[352283](?)) : _unknown[42] "inline" "method" "primary method" "no parens"
  {
    unknown ret[637127] "RVV" "temp"
    unknown call_tmp[970876] "expr temp" "maybe param" "maybe type" "temp"
    (970879 'move' call_tmp[970876](410746 call table _mt[203] this[349648]))
    unknown call_tmp[970883] "expr temp" "maybe param" "maybe type" "temp"
    (970886 'move' call_tmp[970883](349655 call tableNumFullSlots _mt[203] call_tmp[970876]))
    (637132 'move' ret[637127](637131 'deref' call_tmp[970883]))
    (637129 return ret[637127])
  }
  function map[352283](?).isEmpty[349660](arg _mt[349664]:_MT[201], const arg this[349662]:map[352283](?)) : _unknown[42] "inline" "method" "primary method"
  {
    unknown ret[637136] "RVV" "temp"
    unknown call_tmp[970890] "expr temp" "maybe param" "maybe type" "temp"
    (970893 'move' call_tmp[970890](461671 call size _mt[203] this[349662]))
    unknown call_tmp[970895] "expr temp" "maybe param" "maybe type" "temp"
    (970898 'move' call_tmp[970895](349669 call == call_tmp[970890] 0))
    (637142 'move' ret[637136](637141 'coerce' call_tmp[970895] bool[19]))
    (637138 return ret[637136])
  }
  { scopeless type
    bool[19]
  }
  function map[352283](?).contains[349676](arg _mt[349684]:_MT[201], const arg this[349678]:map[352283](?), const arg k[349681] :
  (461676 call keyType _mt[203] this[349678])) : _unknown[42] "method" "primary method"
  {
    unknown ret[637146] "RVV" "temp"
    (349689 call(461681 call (partial) _enter _mt[203] this[349678]))
    (573071 'end of statement')
    Defer
    {
      { scopeless
        (349691 call(461685 call (partial) _leave _mt[203] this[349678]))
      }
    }
    unknown call_tmp[970908] "expr temp" "maybe param" "maybe type" "temp"
    (970911 'move' call_tmp[970908](410751 call table _mt[203] this[349678]))
    unknown call_tmp[970915] "maybe param" "maybe type" "temp"
    (970918 'move' call_tmp[970915](349704 call(349701 call (partial) findFullSlot _mt[203] call_tmp[970908]) k[349681]))
    unknown tmp[349706] "dead at end of block" "insert auto destroy" "temp"
    (656558 'init var' tmp[349706] call_tmp[970915])
    (349710 call _check_tuple_var_decl tmp[349706] 2)
    (573073 'end of statement')
    unknown call_tmp[970920] "maybe param" "maybe type" "temp"
    (970923 'move' call_tmp[970920](349707 call tmp[349706] 0))
    unknown result[349696] "dead at end of block" "insert auto destroy"
    (656560 'init var' result[349696] call_tmp[970920])
    (349715 'end of statement')
    (637152 'move' ret[637146](637151 'coerce' result[349696] bool[19]))
    gotoReturn _end_contains[637144] _end_contains[637144]
    (573074 'end of statement' result[349696])
    label _end_contains[637144]
    (637148 return ret[637146])
  }
  { scopeless type
    bool[19]
  }
  function map[352283](?).extend[349721](arg _mt[349733]:_MT[201], ref arg this[349723]:map[352283](?), ref arg m[349730] :
  unknown call_tmp[970927] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "method" "primary method" "no return value for void"
  {
    (349737 call(461707 call (partial) _enter _mt[203] this[349723]))
    (573076 'end of statement')
    Defer
    {
      { scopeless
        (349739 call(461711 call (partial) _leave _mt[203] this[349723]))
      }
    }
    unknown tmp[505431] "maybe param" "temp"
    unknown call_tmp[970952] "expr temp" "maybe param" "maybe type" "temp"
    (970955 'move' call_tmp[970952](461716 call keyType _mt[203] this[349723]))
    unknown call_tmp[970957] "expr temp" "maybe param" "maybe type" "temp"
    (970960 'move' call_tmp[970957](349754 call isCopyableType call_tmp[970952]))
    (505442 'move' tmp[505431](349751 call ! call_tmp[970957]))
    unknown call_tmp[970962] "expr temp" "maybe param" "maybe type" "temp"
    (970965 'move' call_tmp[970962](505444 call _cond_invalid tmp[505431]))
    if call_tmp[970962]
    {
      (505447 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[711699] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[711700] "maybe param" "temp"
    unknown call_tmp[970967] "expr temp" "maybe param" "maybe type" "temp"
    (970970 'move' call_tmp[970967](505432 call isTrue tmp[505431]))
    (711705 'move' tmp[711700](711703 call _cond_test call_tmp[970967]))
    if tmp[711700]
    {
      (711710 'move' tmp[711699](711707 '_paramFoldLogical' tmp[711700] 1))
    }
    {
      unknown tmp[711712] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[970974] "expr temp" "maybe param" "maybe type" "temp"
      (970977 'move' call_tmp[970974](461721 call valType _mt[203] this[349723]))
      unknown call_tmp[970979] "expr temp" "maybe param" "maybe type" "temp"
      (970982 'move' call_tmp[970979](349759 call isCopyableType call_tmp[970974]))
      unknown call_tmp[970984] "expr temp" "maybe param" "maybe type" "temp"
      (970987 'move' call_tmp[970984](349756 call ! call_tmp[970979]))
      (711714 'move' tmp[711712](505436 call isTrue call_tmp[970984]))
      (711719 'move' tmp[711699](711716 '_paramFoldLogical' tmp[711700] tmp[711712]))
    }
    unknown call_tmp[970989] "expr temp" "maybe param" "maybe type" "temp"
    (970992 'move' call_tmp[970989](349761 call _cond_test tmp[711699]))
    if call_tmp[970989]
    {
      (349744 call compilerError "extending map with non-copyable type")
    }
    {
      unknown _indexOfInterest[349838] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[349839] "expr temp" "temp"
      unknown call_tmp[970996] "expr temp" "maybe param" "maybe type" "temp"
      (970999 'move' call_tmp[970996](349772 call(349769 call (partial) keys _mt[203] m[349730])))
      (349848 'move' _iterator[349839](349846 call _getIterator call_tmp[970996]))
      Defer
      {
        {
          (349863 call _freeIterator _iterator[349839])
        }
      }
      { scopeless type
        (349853 'move' _indexOfInterest[349838](349850 call iteratorIndex _iterator[349839]))
      }
      ForLoop[349840]
      {
        unknown key[349766] "index var" "insert auto destroy"
        (573081 'end of statement')
        (349858 'move' key[349766] _indexOfInterest[349838])
        (573082 'end of statement' key[349766])
        {
          unknown call_tmp[971003] "expr temp" "maybe param" "maybe type" "temp"
          (971006 'move' call_tmp[971003](410757 call table _mt[203] this[349723]))
          unknown call_tmp[971010] "maybe param" "maybe type" "temp"
          (971013 'move' call_tmp[971010](349783 call(349780 call (partial) findAvailableSlot _mt[203] call_tmp[971003]) key[349766]))
          unknown tmp[349785] "dead at end of block" "insert auto destroy" "temp"
          (656562 'init var' tmp[349785] call_tmp[971010])
          (349789 call _check_tuple_var_decl tmp[349785] 2)
          (573084 'end of statement')
          unknown call_tmp[971015] "maybe param" "maybe type" "temp"
          (971018 'move' call_tmp[971015](349786 call tmp[349785] 1))
          unknown slot[349777] "dead at end of block" "insert auto destroy"
          (656564 'init var' slot[349777] call_tmp[971015])
          (349794 'end of statement')
          unknown call_tmp[971022] "expr temp" "maybe param" "maybe type" "temp"
          (971025 'move' call_tmp[971022](349801 call table _mt[203] m[349730]))
          unknown call_tmp[971029] "maybe param" "maybe type" "temp"
          (971032 'move' call_tmp[971029](349807 call(349804 call (partial) findAvailableSlot _mt[203] call_tmp[971022]) key[349766]))
          unknown tmp[349809] "dead at end of block" "insert auto destroy" "temp"
          (656566 'init var' tmp[349809] call_tmp[971029])
          (349813 call _check_tuple_var_decl tmp[349809] 2)
          (573085 'end of statement')
          unknown call_tmp[971034] "maybe param" "maybe type" "temp"
          (971037 'move' call_tmp[971034](349810 call tmp[349809] 1))
          unknown slot2[349798] "dead at end of block" "insert auto destroy"
          (656568 'init var' slot2[349798] call_tmp[971034])
          (349818 'end of statement')
          unknown call_tmp[971041] "expr temp" "maybe param" "maybe type" "temp"
          (971044 'move' call_tmp[971041](410763 call table _mt[203] this[349723]))
          unknown call_tmp[971050] "expr temp" "maybe param" "maybe type" "temp"
          (971053 'move' call_tmp[971050](349827 call table _mt[203] m[349730]))
          unknown call_tmp[971057] "expr temp" "maybe param" "maybe type" "temp"
          (971060 'move' call_tmp[971057](349833 call(349830 call (partial) table _mt[203] call_tmp[971050]) slot2[349798]))
          unknown call_tmp[971064] "expr temp" "maybe param" "maybe type" "temp"
          (971067 'move' call_tmp[971064](349835 call val _mt[203] call_tmp[971057]))
          (349823 call(349820 call (partial) fillSlot _mt[203] call_tmp[971041]) slot[349777] key[349766] call_tmp[971064])
          (573086 'end of statement' slot[349777] key[349766] slot2[349798])
        }
        label _continueLabel[349843]
        _indexOfInterest[349838]
        _iterator[349839]
      }
      label _breakLabel[349844]
    }
    (637156 return _void[46])
  }
  function map[352283](?).update[349872](arg _mt[349882]:_MT[201], arg this[349874]:map[352283](?), const  ref arg k[349877] :
  (461731 call keyType _mt[203] this[349874]), arg updater[349880]:_any[141](?)) : _unknown[42] throws "method" "primary method"
  {
    unknown ret[637160] "RVV" "temp"
    (349886 call(461735 call (partial) _enter _mt[203] this[349874]))
    (573090 'end of statement')
    Defer
    {
      { scopeless
        (349888 call(461739 call (partial) _leave _mt[203] this[349874]))
      }
    }
    unknown call_tmp[971077] "expr temp" "maybe param" "maybe type" "temp"
    (971080 'move' call_tmp[971077](410769 call table _mt[203] this[349874]))
    unknown call_tmp[971084] "maybe param" "maybe type" "temp"
    (971087 'move' call_tmp[971084](349901 call(349898 call (partial) findFullSlot _mt[203] call_tmp[971077]) k[349877]))
    unknown tmp[349903] "dead at end of block" "insert auto destroy" "temp"
    (656570 'init var' tmp[349903] call_tmp[971084])
    (349910 call _check_tuple_var_decl tmp[349903] 2)
    (573092 'end of statement')
    unknown call_tmp[971089] "maybe param" "maybe type" "temp"
    (971092 'move' call_tmp[971089](349904 call tmp[349903] 0))
    unknown isFull[349893] "dead at end of block" "insert auto destroy"
    (656572 'init var' isFull[349893] call_tmp[971089])
    unknown call_tmp[971094] "maybe param" "maybe type" "temp"
    (971097 'move' call_tmp[971094](349907 call tmp[349903] 1))
    unknown slot[349895] "dead at end of block" "insert auto destroy"
    (656574 'init var' slot[349895] call_tmp[971094])
    (349915 'end of statement')
    unknown call_tmp[971099] "expr temp" "maybe param" "maybe type" "temp"
    (971102 'move' call_tmp[971099](349922 call ! isFull[349893]))
    unknown call_tmp[971104] "expr temp" "maybe param" "maybe type" "temp"
    (971107 'move' call_tmp[971104](349925 call _cond_test call_tmp[971099]))
    if call_tmp[971104]
    {
      unknown call_tmp[971109] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (971112 'move' call_tmp[971109](1000652 'new' KeyNotFoundError[461744](?) k[349877]))
      unknown call_tmp[971114] "expr temp" "maybe param" "maybe type" "temp"
      (971117 'move' call_tmp[971114](542465 call chpl_fix_thrown_error call_tmp[971109]))
      (349916 'throw' call_tmp[971114])
    }
    const key[349931] "dead at end of block" "const" "ref var"
    (656579 'init ref decl' key[349931])
    unknown call_tmp[971121] "expr temp" "maybe param" "maybe type" "temp"
    (971124 'move' call_tmp[971121](410774 call table _mt[203] this[349874]))
    unknown call_tmp[971128] "expr temp" "maybe param" "maybe type" "temp"
    (971131 'move' call_tmp[971128](349936 call(349933 call (partial) table _mt[203] call_tmp[971121]) slot[349895]))
    unknown call_tmp[971135] "expr temp" "maybe param" "maybe type" "temp"
    (971138 'move' call_tmp[971135](349938 call key _mt[203] call_tmp[971128]))
    (656577 'move' key[349931](656576 'addr of' call_tmp[971135]))
    (349942 'end of statement')
    unknown val[349944] "dead at end of block" "ref var"
    (656584 'init ref decl' val[349944])
    unknown call_tmp[971142] "expr temp" "maybe param" "maybe type" "temp"
    (971145 'move' call_tmp[971142](410779 call table _mt[203] this[349874]))
    unknown call_tmp[971149] "expr temp" "maybe param" "maybe type" "temp"
    (971152 'move' call_tmp[971149](349949 call(349946 call (partial) table _mt[203] call_tmp[971142]) slot[349895]))
    unknown call_tmp[971156] "expr temp" "maybe param" "maybe type" "temp"
    (971159 'move' call_tmp[971156](349951 call val _mt[203] call_tmp[971149]))
    (656582 'move' val[349944](656581 'addr of' call_tmp[971156]))
    (349955 'end of statement' slot[349895])
    unknown call_tmp[971161] "expr temp" "maybe param" "maybe type" "temp"
    (971164 'move' call_tmp[971161](350001 call canResolveMethod module=[222] Reflection[1804] updater[349880] "this" key[349931] val[349944]))
    unknown call_tmp[971166] "expr temp" "maybe param" "maybe type" "temp"
    (971169 'move' call_tmp[971166](349995 call ! call_tmp[971161]))
    unknown call_tmp[971171] "expr temp" "maybe param" "maybe type" "temp"
    (971174 'move' call_tmp[971171](350006 call _cond_test call_tmp[971166]))
    if call_tmp[971171]
    {
      unknown call_tmp[971176] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (971179 'move' call_tmp[971176](349979 'typeof' updater[349880]))
      unknown call_tmp[971181] "expr temp" "maybe param" "maybe type" "temp"
      (971184 'move' call_tmp[971181](349976 call : call_tmp[971176] string[244]))
      unknown call_tmp[971186] "expr temp" "maybe param" "maybe type" "temp"
      (971189 'move' call_tmp[971186](349971 call + "`map.update()` failed to resolve method " call_tmp[971181]))
      unknown call_tmp[971191] "expr temp" "maybe param" "maybe type" "temp"
      (971194 'move' call_tmp[971191](349969 call + call_tmp[971186] ".this() for arguments ("))
      unknown call_tmp[971196] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (971199 'move' call_tmp[971196](349985 'typeof' key[349931]))
      unknown call_tmp[971201] "expr temp" "maybe param" "maybe type" "temp"
      (971204 'move' call_tmp[971201](349982 call : call_tmp[971196] string[244]))
      unknown call_tmp[971206] "expr temp" "maybe param" "maybe type" "temp"
      (971209 'move' call_tmp[971206](349967 call + call_tmp[971191] call_tmp[971201]))
      unknown call_tmp[971211] "expr temp" "maybe param" "maybe type" "temp"
      (971214 'move' call_tmp[971211](349965 call + call_tmp[971206] ", "))
      unknown call_tmp[971216] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (971219 'move' call_tmp[971216](349991 'typeof' val[349944]))
      unknown call_tmp[971221] "expr temp" "maybe param" "maybe type" "temp"
      (971224 'move' call_tmp[971221](349988 call : call_tmp[971216] string[244]))
      unknown call_tmp[971226] "expr temp" "maybe param" "maybe type" "temp"
      (971229 'move' call_tmp[971226](349963 call + call_tmp[971211] call_tmp[971221]))
      unknown call_tmp[971231] "expr temp" "maybe param" "maybe type" "temp"
      (971234 'move' call_tmp[971231](349961 call + call_tmp[971226] ")"))
      (349960 call compilerError call_tmp[971231])
      (573095 'end of statement' key[349931] val[349944])
    }
    unknown call_tmp[971236] "expr temp" "maybe param" "maybe type" "temp"
    (971239 'move' call_tmp[971236](350013 call updater[349880] key[349931] val[349944]))
    (637165 'move' ret[637160](637164 'deref' call_tmp[971236]))
    gotoReturn _end_update[637158] _end_update[637158]
    (573098 'end of statement' key[349931] val[349944])
    label _end_update[637158]
    (637162 return ret[637160])
    (397185 'used modules list'(349958 'import' Reflection[1804]))
    (410783 'referenced modules list' Reflection[1804])
  }
  function map[352283](?)._warnForParSafeIndexing[350018](arg _mt[350022]:_MT[201], arg this[350020]:map[352283](?)) : _unknown[42] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[971243] "expr temp" "maybe param" "maybe type" "temp"
    (971246 'move' call_tmp[971243](461762 call parSafe _mt[203] this[350020]))
    unknown call_tmp[971248] "expr temp" "maybe param" "maybe type" "temp"
    (971251 'move' call_tmp[971248](350036 call _cond_test call_tmp[971243]))
    if call_tmp[971248]
    {
      (350026 call compilerError "cannot index into a map initialized with " "`parSafe=true`" 2)
    }
    (637169 return _void[46])
  }
  function map[352283](?).this[350043](arg _mt[350051]:_MT[201], ref arg this[350045]:map[352283](?), arg k[350048] :
  (461767 call keyType _mt[203] this[350045])) ref : _unknown[42] "method" "primary method"
  {
    unknown ret[637173] "RVV" "temp"
    (350058 call(461776 call (partial) _warnForParSafeIndexing _mt[203] this[350045]))
    (573102 'end of statement')
    (350060 call(461780 call (partial) _enter _mt[203] this[350045]))
    (573103 'end of statement')
    Defer
    {
      { scopeless
        (350062 call(461784 call (partial) _leave _mt[203] this[350045]))
      }
    }
    unknown call_tmp[971263] "expr temp" "maybe param" "maybe type" "temp"
    (971266 'move' call_tmp[971263](410790 call table _mt[203] this[350045]))
    unknown call_tmp[971270] "maybe param" "maybe type" "temp"
    (971273 'move' call_tmp[971270](350075 call(350072 call (partial) findAvailableSlot _mt[203] call_tmp[971263]) k[350048]))
    unknown tmp[350077] "dead at end of block" "insert auto destroy" "temp"
    (656586 'init var' tmp[350077] call_tmp[971270])
    (350081 call _check_tuple_var_decl tmp[350077] 2)
    (573105 'end of statement')
    unknown call_tmp[971275] "maybe param" "maybe type" "temp"
    (971278 'move' call_tmp[971275](350078 call tmp[350077] 1))
    unknown slot[350069] "dead at end of block" "insert auto destroy"
    (656588 'init var' slot[350069] call_tmp[971275])
    (350086 'end of statement')
    unknown call_tmp[971282] "expr temp" "maybe param" "maybe type" "temp"
    (971285 'move' call_tmp[971282](410800 call table _mt[203] this[350045]))
    unknown call_tmp[971289] "expr temp" "maybe param" "maybe type" "temp"
    (971292 'move' call_tmp[971289](350107 call(350104 call (partial) isSlotFull _mt[203] call_tmp[971282]) slot[350069]))
    unknown call_tmp[971294] "expr temp" "maybe param" "maybe type" "temp"
    (971297 'move' call_tmp[971294](350101 call ! call_tmp[971289]))
    unknown call_tmp[971299] "expr temp" "maybe param" "maybe type" "temp"
    (971302 'move' call_tmp[971299](350109 call _cond_test call_tmp[971294]))
    if call_tmp[971299]
    {
      unknown val[350089] "dead at end of block" "insert auto destroy"
      unknown call_tmp[971306] "expr temp" "maybe param" "maybe type" "temp"
      (971309 'move' call_tmp[971306](461790 call valType _mt[203] this[350045]))
      (656590 'default init var' val[350089] call_tmp[971306])
      (350092 'end of statement')
      unknown call_tmp[971313] "expr temp" "maybe param" "maybe type" "temp"
      (971316 'move' call_tmp[971313](410795 call table _mt[203] this[350045]))
      (350097 call(350094 call (partial) fillSlot _mt[203] call_tmp[971313]) slot[350069] k[350048] val[350089])
      (573106 'end of statement' slot[350069] val[350089])
    }
    unknown call_tmp[971322] "expr temp" "maybe param" "maybe type" "temp"
    (971325 'move' call_tmp[971322](410805 call table _mt[203] this[350045]))
    unknown call_tmp[971329] "expr temp" "maybe param" "maybe type" "temp"
    (971332 'move' call_tmp[971329](350118 call(350115 call (partial) table _mt[203] call_tmp[971322]) slot[350069]))
    unknown call_tmp[971336] "expr temp" "maybe param" "maybe type" "temp"
    (971339 'move' call_tmp[971336](350120 call val _mt[203] call_tmp[971329]))
    (637178 'move' ret[637173](637177 'addr of' call_tmp[971336]))
    gotoReturn _end_this[637171] _end_this[637171]
    (573109 'end of statement' slot[350069])
    label _end_this[637171]
    (637175 return ret[637173])
  }
  where {
    unknown call_tmp[971343] "expr temp" "maybe param" "maybe type" "temp"
    (971346 'move' call_tmp[971343](461772 call valType _mt[203] this[350045]))
    (350054 call isDefaultInitializable call_tmp[971343])
  }
  function map[352283](?).this[350126](arg _mt[350134]:_MT[201], ref arg this[350128]:map[352283](?), arg k[350131] :
  (461800 call keyType _mt[203] this[350128])) ref : _unknown[42] throws "method" "primary method"
  {
    unknown ret[637184] "RVV" "temp"
    (350138 call(461804 call (partial) _warnForParSafeIndexing _mt[203] this[350128]))
    (573111 'end of statement')
    (350140 call(461808 call (partial) _enter _mt[203] this[350128]))
    (573112 'end of statement')
    Defer
    {
      { scopeless
        (350142 call(461812 call (partial) _leave _mt[203] this[350128]))
      }
    }
    unknown call_tmp[971358] "expr temp" "maybe param" "maybe type" "temp"
    (971361 'move' call_tmp[971358](410810 call table _mt[203] this[350128]))
    unknown call_tmp[971365] "maybe param" "maybe type" "temp"
    (971368 'move' call_tmp[971365](350155 call(350152 call (partial) findAvailableSlot _mt[203] call_tmp[971358]) k[350131]))
    unknown tmp[350157] "dead at end of block" "insert auto destroy" "temp"
    (656592 'init var' tmp[350157] call_tmp[971365])
    (350161 call _check_tuple_var_decl tmp[350157] 2)
    (573114 'end of statement')
    unknown call_tmp[971370] "maybe param" "maybe type" "temp"
    (971373 'move' call_tmp[971370](350158 call tmp[350157] 1))
    unknown slot[350149] "dead at end of block" "insert auto destroy"
    (656594 'init var' slot[350149] call_tmp[971370])
    (350166 'end of statement')
    unknown call_tmp[971377] "expr temp" "maybe param" "maybe type" "temp"
    (971380 'move' call_tmp[971377](410815 call table _mt[203] this[350128]))
    unknown call_tmp[971384] "expr temp" "maybe param" "maybe type" "temp"
    (971387 'move' call_tmp[971384](350179 call(350176 call (partial) isSlotFull _mt[203] call_tmp[971377]) slot[350149]))
    unknown call_tmp[971389] "expr temp" "maybe param" "maybe type" "temp"
    (971392 'move' call_tmp[971389](350173 call ! call_tmp[971384]))
    unknown call_tmp[971394] "expr temp" "maybe param" "maybe type" "temp"
    (971397 'move' call_tmp[971394](350181 call _cond_test call_tmp[971389]))
    if call_tmp[971394]
    {
      unknown call_tmp[971399] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (971402 'move' call_tmp[971399](1000653 'new' KeyNotFoundError[461744](?) k[350131]))
      unknown call_tmp[971404] "expr temp" "maybe param" "maybe type" "temp"
      (971407 'move' call_tmp[971404](542467 call chpl_fix_thrown_error call_tmp[971399]))
      (350168 'throw' call_tmp[971404])
    }
    unknown result[350186] "dead at end of block" "ref var"
    (656599 'init ref decl' result[350186])
    unknown call_tmp[971411] "expr temp" "maybe param" "maybe type" "temp"
    (971414 'move' call_tmp[971411](410820 call table _mt[203] this[350128]))
    unknown call_tmp[971418] "expr temp" "maybe param" "maybe type" "temp"
    (971421 'move' call_tmp[971418](350191 call(350188 call (partial) table _mt[203] call_tmp[971411]) slot[350149]))
    unknown call_tmp[971425] "expr temp" "maybe param" "maybe type" "temp"
    (971428 'move' call_tmp[971425](350193 call val _mt[203] call_tmp[971418]))
    (656597 'move' result[350186](656596 'addr of' call_tmp[971425]))
    (350197 'end of statement' slot[350149])
    (637189 'move' ret[637184](637188 'addr of' result[350186]))
    gotoReturn _end_this[637182] _end_this[637182]
    (573117 'end of statement' result[350186])
    label _end_this[637182]
    (637186 return ret[637184])
  }
  function map[352283](?).this[350202](arg _mt[350210]:_MT[201], const arg this[350204]:map[352283](?), arg k[350207] :
  (461823 call keyType _mt[203] this[350204])) const ref : _unknown[42] throws "method" "primary method"
  {
    unknown ret[637195] "RVV" "temp"
    (350214 call(461827 call (partial) _warnForParSafeIndexing _mt[203] this[350204]))
    (573119 'end of statement')
    (350216 call(461831 call (partial) _enter _mt[203] this[350204]))
    (573120 'end of statement')
    Defer
    {
      { scopeless
        (350218 call(461835 call (partial) _leave _mt[203] this[350204]))
      }
    }
    unknown call_tmp[971440] "expr temp" "maybe param" "maybe type" "temp"
    (971443 'move' call_tmp[971440](410825 call table _mt[203] this[350204]))
    unknown call_tmp[971447] "maybe param" "maybe type" "temp"
    (971450 'move' call_tmp[971447](350231 call(350228 call (partial) findFullSlot _mt[203] call_tmp[971440]) k[350207]))
    unknown tmp[350233] "dead at end of block" "insert auto destroy" "temp"
    (656601 'init var' tmp[350233] call_tmp[971447])
    (350240 call _check_tuple_var_decl tmp[350233] 2)
    (573122 'end of statement')
    unknown call_tmp[971452] "maybe param" "maybe type" "temp"
    (971455 'move' call_tmp[971452](350234 call tmp[350233] 0))
    unknown found[350223] "dead at end of block" "insert auto destroy"
    (656603 'init var' found[350223] call_tmp[971452])
    unknown call_tmp[971457] "maybe param" "maybe type" "temp"
    (971460 'move' call_tmp[971457](350237 call tmp[350233] 1))
    unknown slot[350225] "dead at end of block" "insert auto destroy"
    (656605 'init var' slot[350225] call_tmp[971457])
    (350245 'end of statement')
    unknown call_tmp[971462] "expr temp" "maybe param" "maybe type" "temp"
    (971465 'move' call_tmp[971462](350252 call ! found[350223]))
    unknown call_tmp[971467] "expr temp" "maybe param" "maybe type" "temp"
    (971470 'move' call_tmp[971467](350255 call _cond_test call_tmp[971462]))
    if call_tmp[971467]
    {
      unknown call_tmp[971472] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (971475 'move' call_tmp[971472](1000654 'new' KeyNotFoundError[461744](?) k[350207]))
      unknown call_tmp[971477] "expr temp" "maybe param" "maybe type" "temp"
      (971480 'move' call_tmp[971477](542469 call chpl_fix_thrown_error call_tmp[971472]))
      (350246 'throw' call_tmp[971477])
    }
    const result[350261] "dead at end of block" "const" "ref var"
    (656610 'init ref decl' result[350261])
    unknown call_tmp[971484] "expr temp" "maybe param" "maybe type" "temp"
    (971487 'move' call_tmp[971484](410830 call table _mt[203] this[350204]))
    unknown call_tmp[971491] "expr temp" "maybe param" "maybe type" "temp"
    (971494 'move' call_tmp[971491](350266 call(350263 call (partial) table _mt[203] call_tmp[971484]) slot[350225]))
    unknown call_tmp[971498] "expr temp" "maybe param" "maybe type" "temp"
    (971501 'move' call_tmp[971498](350268 call val _mt[203] call_tmp[971491]))
    (656608 'move' result[350261](656607 'addr of' call_tmp[971498]))
    (350272 'end of statement' slot[350225])
    (637200 'move' ret[637195](637199 'addr of' result[350261]))
    gotoReturn _end_this[637193] _end_this[637193]
    (573125 'end of statement' result[350261])
    label _end_this[637193]
    (637197 return ret[637195])
  }
  function map[352283](?).getBorrowed[350277](arg _mt[350285]:_MT[201], arg this[350279]:map[352283](?), arg k[350282] :
  (461846 call keyType _mt[203] this[350279])) : _unknown[42] "deprecated" "method" "primary method"
  {
    unknown ret[637206] "RVV" "temp"
    (350292 call(461855 call (partial) _enter _mt[203] this[350279]))
    (573127 'end of statement')
    Defer
    {
      { scopeless
        (350294 call(461859 call (partial) _leave _mt[203] this[350279]))
      }
    }
    unknown call_tmp[971511] "expr temp" "maybe param" "maybe type" "temp"
    (971514 'move' call_tmp[971511](410835 call table _mt[203] this[350279]))
    unknown call_tmp[971518] "maybe param" "maybe type" "temp"
    (971521 'move' call_tmp[971518](350307 call(350304 call (partial) findFullSlot _mt[203] call_tmp[971511]) k[350282]))
    unknown tmp[350309] "dead at end of block" "insert auto destroy" "temp"
    (656612 'init var' tmp[350309] call_tmp[971518])
    (350316 call _check_tuple_var_decl tmp[350309] 2)
    (573129 'end of statement')
    unknown call_tmp[971523] "maybe param" "maybe type" "temp"
    (971526 'move' call_tmp[971523](350310 call tmp[350309] 0))
    unknown found[350299] "dead at end of block" "insert auto destroy"
    (656614 'init var' found[350299] call_tmp[971523])
    unknown call_tmp[971528] "maybe param" "maybe type" "temp"
    (971531 'move' call_tmp[971528](350313 call tmp[350309] 1))
    unknown slot[350301] "dead at end of block" "insert auto destroy"
    (656616 'init var' slot[350301] call_tmp[971528])
    (350321 'end of statement')
    unknown call_tmp[971533] "expr temp" "maybe param" "maybe type" "temp"
    (971536 'move' call_tmp[971533](350334 call ! found[350299]))
    unknown call_tmp[971538] "expr temp" "maybe param" "maybe type" "temp"
    (971541 'move' call_tmp[971538](350337 call _cond_test call_tmp[971533]))
    if call_tmp[971538]
    {
      unknown call_tmp[971545] "expr temp" "maybe param" "maybe type" "temp"
      (971548 'move' call_tmp[971545](350330 call(350327 call (partial) format _mt[203] "map index %\? out of bounds") k[350282]))
      (350323 call boundsCheckHalt call_tmp[971545])
    }
    Try!
    {
      {
        unknown call_tmp[971552] "expr temp" "maybe param" "maybe type" "temp"
        (971555 'move' call_tmp[971552](410840 call table _mt[203] this[350279]))
        unknown call_tmp[971559] "expr temp" "maybe param" "maybe type" "temp"
        (971562 'move' call_tmp[971559](350349 call(350346 call (partial) table _mt[203] call_tmp[971552]) slot[350301]))
        unknown call_tmp[971566] "expr temp" "maybe param" "maybe type" "temp"
        (971569 'move' call_tmp[971566](350351 call val _mt[203] call_tmp[971559]))
        unknown call_tmp[971573] "maybe param" "maybe type" "temp"
        (971576 'move' call_tmp[971573](350357 call(350354 call (partial) borrow _mt[203] call_tmp[971566])))
        unknown result[350344] "dead at end of block" "insert auto destroy"
        (656618 'init var' result[350344] call_tmp[971573])
        (350359 'end of statement' slot[350301])
        unknown call_tmp[971580] "expr temp" "maybe param" "maybe type" "temp"
        (971583 'move' call_tmp[971580](461870 call valType _mt[203] this[350279]))
        unknown call_tmp[971585] "expr temp" "maybe param" "maybe type" "temp"
        (971588 'move' call_tmp[971585](350369 call isNonNilableClass call_tmp[971580]))
        unknown call_tmp[971590] "expr temp" "maybe param" "maybe type" "temp"
        (971593 'move' call_tmp[971590](350371 call _cond_test call_tmp[971585]))
        if call_tmp[971590]
        {
          unknown call_tmp[971595] "expr temp" "maybe param" "maybe type" "temp"
          (971598 'move' call_tmp[971595](350362 call postfix! result[350344]))
          (637211 'move' ret[637206](637210 'deref' call_tmp[971595]))
          gotoReturn _end_getBorrowed[637204] _end_getBorrowed[637204]
          (573132 'end of statement' result[350344])
        }
        {
          (637216 'move' ret[637206](637215 'deref' result[350344]))
          gotoReturn _end_getBorrowed[637204] _end_getBorrowed[637204]
          (573134 'end of statement' result[350344])
        }
      }
    }
    label _end_getBorrowed[637204]
    (637208 return ret[637206])
  }
  where {
    unknown call_tmp[971602] "expr temp" "maybe param" "maybe type" "temp"
    (971605 'move' call_tmp[971602](461851 call valType _mt[203] this[350279]))
    (350288 call isClass call_tmp[971602])
  }
  function map[352283](?).getReference[350381](arg _mt[350389]:_MT[201], arg this[350383]:map[352283](?), arg k[350386] :
  (461875 call keyType _mt[203] this[350383])) ref : _unknown[42] "deprecated" "method" "primary method"
  {
    unknown ret[637222] "RVV" "temp"
    unknown call_tmp[971611] "expr temp" "maybe param" "maybe type" "temp"
    (971614 'move' call_tmp[971611](461880 call parSafe _mt[203] this[350383]))
    unknown call_tmp[971616] "expr temp" "maybe param" "maybe type" "temp"
    (971619 'move' call_tmp[971616](350402 call _cond_test call_tmp[971611]))
    if call_tmp[971616]
    {
      (350393 call compilerError "cannot call `getReference()` on maps initialized " "with `parSafe=true`")
    }
    (350408 call(461884 call (partial) _enter _mt[203] this[350383]))
    (573137 'end of statement')
    Defer
    {
      { scopeless
        (350410 call(461888 call (partial) _leave _mt[203] this[350383]))
      }
    }
    unknown call_tmp[971627] "expr temp" "maybe param" "maybe type" "temp"
    (971630 'move' call_tmp[971627](410845 call table _mt[203] this[350383]))
    unknown call_tmp[971634] "maybe param" "maybe type" "temp"
    (971637 'move' call_tmp[971634](350423 call(350420 call (partial) findFullSlot _mt[203] call_tmp[971627]) k[350386]))
    unknown tmp[350425] "dead at end of block" "insert auto destroy" "temp"
    (656620 'init var' tmp[350425] call_tmp[971634])
    (350432 call _check_tuple_var_decl tmp[350425] 2)
    (573139 'end of statement')
    unknown call_tmp[971639] "maybe param" "maybe type" "temp"
    (971642 'move' call_tmp[971639](350426 call tmp[350425] 0))
    unknown found[350415] "dead at end of block" "insert auto destroy"
    (656622 'init var' found[350415] call_tmp[971639])
    unknown call_tmp[971644] "maybe param" "maybe type" "temp"
    (971647 'move' call_tmp[971644](350429 call tmp[350425] 1))
    unknown slot[350417] "dead at end of block" "insert auto destroy"
    (656624 'init var' slot[350417] call_tmp[971644])
    (350437 'end of statement')
    unknown call_tmp[971649] "expr temp" "maybe param" "maybe type" "temp"
    (971652 'move' call_tmp[971649](350448 call ! found[350415]))
    unknown call_tmp[971654] "expr temp" "maybe param" "maybe type" "temp"
    (971657 'move' call_tmp[971654](350451 call _cond_test call_tmp[971649]))
    if call_tmp[971654]
    {
      unknown call_tmp[971661] "expr temp" "maybe param" "maybe type" "temp"
      (971664 'move' call_tmp[971661](350444 call(350441 call (partial) format _mt[203] "map index %\? out of bounds") k[350386]))
      (350439 call boundsCheckHalt call_tmp[971661])
    }
    unknown result[350457] "dead at end of block" "ref var"
    (656629 'init ref decl' result[350457])
    unknown call_tmp[971668] "expr temp" "maybe param" "maybe type" "temp"
    (971671 'move' call_tmp[971668](410850 call table _mt[203] this[350383]))
    unknown call_tmp[971675] "expr temp" "maybe param" "maybe type" "temp"
    (971678 'move' call_tmp[971675](350462 call(350459 call (partial) table _mt[203] call_tmp[971668]) slot[350417]))
    unknown call_tmp[971682] "expr temp" "maybe param" "maybe type" "temp"
    (971685 'move' call_tmp[971682](350464 call val _mt[203] call_tmp[971675]))
    (656627 'move' result[350457](656626 'addr of' call_tmp[971682]))
    (350468 'end of statement' slot[350417])
    (637227 'move' ret[637222](637226 'addr of' result[350457]))
    gotoReturn _end_getReference[637220] _end_getReference[637220]
    (573142 'end of statement' result[350457])
    label _end_getReference[637220]
    (637224 return ret[637222])
  }
  function map[352283](?).getValue[350473](arg _mt[350481]:_MT[201], arg this[350475]:map[352283](?), arg k[350478] :
  (461898 call keyType _mt[203] this[350475])) : _unknown[42] throws "deprecated" "method" "primary method"
  {
    unknown ret[637233] "RVV" "temp"
    unknown call_tmp[971691] "expr temp" "maybe param" "maybe type" "temp"
    (971694 'move' call_tmp[971691](461908 call valType _mt[203] this[350475]))
    unknown call_tmp[971696] "expr temp" "maybe param" "maybe type" "temp"
    (971699 'move' call_tmp[971696](350504 call isCopyableType call_tmp[971691]))
    unknown call_tmp[971701] "expr temp" "maybe param" "maybe type" "temp"
    (971704 'move' call_tmp[971701](350501 call ! call_tmp[971696]))
    unknown call_tmp[971706] "expr temp" "maybe param" "maybe type" "temp"
    (971709 'move' call_tmp[971706](350506 call _cond_test call_tmp[971701]))
    if call_tmp[971706]
    {
      unknown call_tmp[971711] "expr temp" "maybe param" "maybe type" "temp"
      (971714 'move' call_tmp[971711](350488 call + "cannot call `getValue()` for non-copyable " "map value type: "))
      unknown call_tmp[971718] "expr temp" "maybe param" "maybe type" "temp"
      (971721 'move' call_tmp[971718](461903 call valType _mt[203] this[350475]))
      unknown call_tmp[971723] "expr temp" "maybe param" "maybe type" "temp"
      (971726 'move' call_tmp[971723](350496 call : call_tmp[971718] string[244]))
      unknown call_tmp[971728] "expr temp" "maybe param" "maybe type" "temp"
      (971731 'move' call_tmp[971728](350486 call + call_tmp[971711] call_tmp[971723]))
      (350485 call compilerError call_tmp[971728])
    }
    (350512 call(461912 call (partial) _enter _mt[203] this[350475]))
    (573145 'end of statement')
    Defer
    {
      { scopeless
        (350514 call(461916 call (partial) _leave _mt[203] this[350475]))
      }
    }
    unknown call_tmp[971739] "expr temp" "maybe param" "maybe type" "temp"
    (971742 'move' call_tmp[971739](410855 call table _mt[203] this[350475]))
    unknown call_tmp[971746] "maybe param" "maybe type" "temp"
    (971749 'move' call_tmp[971746](350527 call(350524 call (partial) findFullSlot _mt[203] call_tmp[971739]) k[350478]))
    unknown tmp[350529] "dead at end of block" "insert auto destroy" "temp"
    (656631 'init var' tmp[350529] call_tmp[971746])
    (350536 call _check_tuple_var_decl tmp[350529] 2)
    (573147 'end of statement')
    unknown call_tmp[971751] "maybe param" "maybe type" "temp"
    (971754 'move' call_tmp[971751](350530 call tmp[350529] 0))
    unknown found[350519] "dead at end of block" "insert auto destroy"
    (656633 'init var' found[350519] call_tmp[971751])
    unknown call_tmp[971756] "maybe param" "maybe type" "temp"
    (971759 'move' call_tmp[971756](350533 call tmp[350529] 1))
    unknown slot[350521] "dead at end of block" "insert auto destroy"
    (656635 'init var' slot[350521] call_tmp[971756])
    (350541 'end of statement')
    unknown call_tmp[971761] "expr temp" "maybe param" "maybe type" "temp"
    (971764 'move' call_tmp[971761](350548 call ! found[350519]))
    unknown call_tmp[971766] "expr temp" "maybe param" "maybe type" "temp"
    (971769 'move' call_tmp[971766](350551 call _cond_test call_tmp[971761]))
    if call_tmp[971766]
    {
      unknown call_tmp[971771] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (971774 'move' call_tmp[971771](1000655 'new' KeyNotFoundError[461744](?) k[350478]))
      unknown call_tmp[971776] "expr temp" "maybe param" "maybe type" "temp"
      (971779 'move' call_tmp[971776](542471 call chpl_fix_thrown_error call_tmp[971771]))
      (350542 'throw' call_tmp[971776])
    }
    Try!
    {
      {
        unknown call_tmp[971783] "expr temp" "maybe param" "maybe type" "temp"
        (971786 'move' call_tmp[971783](410860 call table _mt[203] this[350475]))
        unknown call_tmp[971790] "expr temp" "maybe param" "maybe type" "temp"
        (971793 'move' call_tmp[971790](350565 call(350562 call (partial) table _mt[203] call_tmp[971783]) slot[350521]))
        unknown call_tmp[971797] "expr temp" "maybe param" "maybe type" "temp"
        (971800 'move' call_tmp[971797](350567 call val _mt[203] call_tmp[971790]))
        unknown call_tmp[971804] "expr temp" "maybe param" "maybe type" "temp"
        (971807 'move' call_tmp[971804](461926 call valType _mt[203] this[350475]))
        unknown call_tmp[971809] "maybe param" "maybe type" "temp"
        (971812 'move' call_tmp[971809](350559 call : call_tmp[971797] call_tmp[971804]))
        const result[350558] "dead at end of block" "const" "insert auto destroy"
        (656637 'init var' result[350558] call_tmp[971809])
        (350572 'end of statement' slot[350521])
        (637238 'move' ret[637233](637237 'deref' result[350558]))
        gotoReturn _end_getValue[637231] _end_getValue[637231]
        (573150 'end of statement' result[350558])
      }
    }
    label _end_getValue[637231]
    (637235 return ret[637233])
  }
  function map[352283](?).get[350580](arg _mt[350592]:_MT[201], arg this[350582]:map[352283](?), arg k[350585] :
  (461932 call keyType _mt[203] this[350582]), const arg sentinel[350589] :
  (461937 call valType _mt[203] this[350582])) : _unknown[42] "method" "primary method"
  {
    unknown ret[637244] "RVV" "temp"
    unknown call_tmp[971820] "expr temp" "maybe param" "maybe type" "temp"
    (971823 'move' call_tmp[971820](461947 call valType _mt[203] this[350582]))
    unknown call_tmp[971825] "expr temp" "maybe param" "maybe type" "temp"
    (971828 'move' call_tmp[971825](350613 call isCopyableType call_tmp[971820]))
    unknown call_tmp[971830] "expr temp" "maybe param" "maybe type" "temp"
    (971833 'move' call_tmp[971830](350610 call ! call_tmp[971825]))
    unknown call_tmp[971835] "expr temp" "maybe param" "maybe type" "temp"
    (971838 'move' call_tmp[971835](350615 call _cond_test call_tmp[971830]))
    if call_tmp[971835]
    {
      unknown call_tmp[971840] "expr temp" "maybe param" "maybe type" "temp"
      (971843 'move' call_tmp[971840](350599 call + "cannot call `get()` for non-copyable " "map value type: "))
      unknown call_tmp[971847] "expr temp" "maybe param" "maybe type" "temp"
      (971850 'move' call_tmp[971847](461942 call valType _mt[203] this[350582]))
      unknown call_tmp[971852] "expr temp" "maybe param" "maybe type" "temp"
      (971855 'move' call_tmp[971852](350605 call : call_tmp[971847] string[244]))
      unknown call_tmp[971857] "expr temp" "maybe param" "maybe type" "temp"
      (971860 'move' call_tmp[971857](350597 call + call_tmp[971840] call_tmp[971852]))
      (350596 call compilerError call_tmp[971857])
    }
    (350621 call(461951 call (partial) _enter _mt[203] this[350582]))
    (573153 'end of statement')
    Defer
    {
      { scopeless
        (350623 call(461955 call (partial) _leave _mt[203] this[350582]))
      }
    }
    unknown call_tmp[971868] "expr temp" "maybe param" "maybe type" "temp"
    (971871 'move' call_tmp[971868](410865 call table _mt[203] this[350582]))
    unknown call_tmp[971875] "maybe param" "maybe type" "temp"
    (971878 'move' call_tmp[971875](350636 call(350633 call (partial) findFullSlot _mt[203] call_tmp[971868]) k[350585]))
    unknown tmp[350638] "dead at end of block" "insert auto destroy" "temp"
    (656639 'init var' tmp[350638] call_tmp[971875])
    (350645 call _check_tuple_var_decl tmp[350638] 2)
    (573155 'end of statement')
    unknown call_tmp[971880] "maybe param" "maybe type" "temp"
    (971883 'move' call_tmp[971880](350639 call tmp[350638] 0))
    unknown found[350628] "dead at end of block" "insert auto destroy"
    (656641 'init var' found[350628] call_tmp[971880])
    unknown call_tmp[971885] "maybe param" "maybe type" "temp"
    (971888 'move' call_tmp[971885](350642 call tmp[350638] 1))
    unknown slot[350630] "dead at end of block" "insert auto destroy"
    (656643 'init var' slot[350630] call_tmp[971885])
    (350650 'end of statement')
    unknown call_tmp[971890] "expr temp" "maybe param" "maybe type" "temp"
    (971893 'move' call_tmp[971890](350654 call ! found[350628]))
    unknown call_tmp[971895] "expr temp" "maybe param" "maybe type" "temp"
    (971898 'move' call_tmp[971895](350657 call _cond_test call_tmp[971890]))
    if call_tmp[971895]
    {
      (637249 'move' ret[637244](637248 'deref' sentinel[350589]))
      gotoReturn _end_get[637242] _end_get[637242]
    }
    Try!
    {
      {
        unknown call_tmp[971902] "expr temp" "maybe param" "maybe type" "temp"
        (971905 'move' call_tmp[971902](410870 call table _mt[203] this[350582]))
        unknown call_tmp[971909] "expr temp" "maybe param" "maybe type" "temp"
        (971912 'move' call_tmp[971909](350671 call(350668 call (partial) table _mt[203] call_tmp[971902]) slot[350630]))
        unknown call_tmp[971916] "expr temp" "maybe param" "maybe type" "temp"
        (971919 'move' call_tmp[971916](350673 call val _mt[203] call_tmp[971909]))
        unknown call_tmp[971923] "expr temp" "maybe param" "maybe type" "temp"
        (971926 'move' call_tmp[971923](461964 call valType _mt[203] this[350582]))
        unknown call_tmp[971928] "maybe param" "maybe type" "temp"
        (971931 'move' call_tmp[971928](350665 call : call_tmp[971916] call_tmp[971923]))
        const result[350664] "dead at end of block" "const" "insert auto destroy"
        (656645 'init var' result[350664] call_tmp[971928])
        (350678 'end of statement' slot[350630])
        (637254 'move' ret[637244](637253 'deref' result[350664]))
        gotoReturn _end_get[637242] _end_get[637242]
        (573158 'end of statement' result[350664])
      }
    }
    label _end_get[637242]
    (637246 return ret[637244])
  }
  function map[352283](?).getValue[350686](arg _mt[350698]:_MT[201], arg this[350688]:map[352283](?), arg k[350691] :
  (461970 call keyType _mt[203] this[350688]), const arg sentinel[350695] :
  (461975 call valType _mt[203] this[350688])) : _unknown[42] "deprecated" "method" "primary method"
  {
    unknown ret[637260] "RVV" "temp"
    unknown call_tmp[971939] "expr temp" "maybe param" "maybe type" "temp"
    (971942 'move' call_tmp[971939](461985 call valType _mt[203] this[350688]))
    unknown call_tmp[971944] "expr temp" "maybe param" "maybe type" "temp"
    (971947 'move' call_tmp[971944](350717 call isCopyableType call_tmp[971939]))
    unknown call_tmp[971949] "expr temp" "maybe param" "maybe type" "temp"
    (971952 'move' call_tmp[971949](350714 call ! call_tmp[971944]))
    unknown call_tmp[971954] "expr temp" "maybe param" "maybe type" "temp"
    (971957 'move' call_tmp[971954](350719 call _cond_test call_tmp[971949]))
    if call_tmp[971954]
    {
      unknown call_tmp[971959] "expr temp" "maybe param" "maybe type" "temp"
      (971962 'move' call_tmp[971959](350705 call + "cannot call `getValue()` for non-copyable " "map value type: "))
      unknown call_tmp[971966] "expr temp" "maybe param" "maybe type" "temp"
      (971969 'move' call_tmp[971966](461980 call valType _mt[203] this[350688]))
      unknown call_tmp[971971] "expr temp" "maybe param" "maybe type" "temp"
      (971974 'move' call_tmp[971971](350709 call : call_tmp[971966] string[244]))
      unknown call_tmp[971976] "expr temp" "maybe param" "maybe type" "temp"
      (971979 'move' call_tmp[971976](350703 call + call_tmp[971959] call_tmp[971971]))
      (350702 call compilerError call_tmp[971976])
    }
    (350725 call(461989 call (partial) _enter _mt[203] this[350688]))
    (573161 'end of statement')
    Defer
    {
      { scopeless
        (350727 call(461993 call (partial) _leave _mt[203] this[350688]))
      }
    }
    unknown call_tmp[971987] "expr temp" "maybe param" "maybe type" "temp"
    (971990 'move' call_tmp[971987](410875 call table _mt[203] this[350688]))
    unknown call_tmp[971994] "maybe param" "maybe type" "temp"
    (971997 'move' call_tmp[971994](350740 call(350737 call (partial) findFullSlot _mt[203] call_tmp[971987]) k[350691]))
    unknown tmp[350742] "dead at end of block" "insert auto destroy" "temp"
    (656647 'init var' tmp[350742] call_tmp[971994])
    (350749 call _check_tuple_var_decl tmp[350742] 2)
    (573163 'end of statement')
    unknown call_tmp[971999] "maybe param" "maybe type" "temp"
    (972002 'move' call_tmp[971999](350743 call tmp[350742] 0))
    unknown found[350732] "dead at end of block" "insert auto destroy"
    (656649 'init var' found[350732] call_tmp[971999])
    unknown call_tmp[972004] "maybe param" "maybe type" "temp"
    (972007 'move' call_tmp[972004](350746 call tmp[350742] 1))
    unknown slot[350734] "dead at end of block" "insert auto destroy"
    (656651 'init var' slot[350734] call_tmp[972004])
    (350754 'end of statement')
    unknown call_tmp[972009] "expr temp" "maybe param" "maybe type" "temp"
    (972012 'move' call_tmp[972009](350758 call ! found[350732]))
    unknown call_tmp[972014] "expr temp" "maybe param" "maybe type" "temp"
    (972017 'move' call_tmp[972014](350761 call _cond_test call_tmp[972009]))
    if call_tmp[972014]
    {
      (637265 'move' ret[637260](637264 'deref' sentinel[350695]))
      gotoReturn _end_getValue[637258] _end_getValue[637258]
    }
    Try!
    {
      {
        unknown call_tmp[972021] "expr temp" "maybe param" "maybe type" "temp"
        (972024 'move' call_tmp[972021](410880 call table _mt[203] this[350688]))
        unknown call_tmp[972028] "expr temp" "maybe param" "maybe type" "temp"
        (972031 'move' call_tmp[972028](350775 call(350772 call (partial) table _mt[203] call_tmp[972021]) slot[350734]))
        unknown call_tmp[972035] "expr temp" "maybe param" "maybe type" "temp"
        (972038 'move' call_tmp[972035](350777 call val _mt[203] call_tmp[972028]))
        unknown call_tmp[972042] "expr temp" "maybe param" "maybe type" "temp"
        (972045 'move' call_tmp[972042](462002 call valType _mt[203] this[350688]))
        unknown call_tmp[972047] "maybe param" "maybe type" "temp"
        (972050 'move' call_tmp[972047](350769 call : call_tmp[972035] call_tmp[972042]))
        const result[350768] "dead at end of block" "const" "insert auto destroy"
        (656653 'init var' result[350768] call_tmp[972047])
        (350782 'end of statement' slot[350734])
        (637270 'move' ret[637260](637269 'deref' result[350768]))
        gotoReturn _end_getValue[637258] _end_getValue[637258]
        (573166 'end of statement' result[350768])
      }
    }
    label _end_getValue[637258]
    (637262 return ret[637260])
  }
  function map[352283](?).getAndRemove[350790](arg _mt[350798]:_MT[201], ref arg this[350792]:map[352283](?), arg k[350795] :
  (462008 call keyType _mt[203] this[350792])) : _unknown[42] "method" "primary method"
  {
    unknown ret[637276] "RVV" "temp"
    (350802 call(462012 call (partial) _enter _mt[203] this[350792]))
    (573168 'end of statement')
    Defer
    {
      { scopeless
        (350804 call(462016 call (partial) _leave _mt[203] this[350792]))
      }
    }
    unknown call_tmp[972060] "expr temp" "maybe param" "maybe type" "temp"
    (972063 'move' call_tmp[972060](410885 call table _mt[203] this[350792]))
    unknown call_tmp[972067] "maybe param" "maybe type" "temp"
    (972070 'move' call_tmp[972067](350817 call(350814 call (partial) findFullSlot _mt[203] call_tmp[972060]) k[350795]))
    unknown tmp[350819] "dead at end of block" "insert auto destroy" "temp"
    (656655 'init var' tmp[350819] call_tmp[972067])
    (350826 call _check_tuple_var_decl tmp[350819] 2)
    (573170 'end of statement')
    unknown call_tmp[972072] "maybe param" "maybe type" "temp"
    (972075 'move' call_tmp[972072](350820 call tmp[350819] 0))
    unknown found[350809] "dead at end of block" "insert auto destroy"
    (656657 'init var' found[350809] call_tmp[972072])
    unknown call_tmp[972077] "maybe param" "maybe type" "temp"
    (972080 'move' call_tmp[972077](350823 call tmp[350819] 1))
    unknown slot[350811] "dead at end of block" "insert auto destroy"
    (656659 'init var' slot[350811] call_tmp[972077])
    (350831 'end of statement')
    unknown call_tmp[972082] "expr temp" "maybe param" "maybe type" "temp"
    (972085 'move' call_tmp[972082](350842 call ! found[350809]))
    unknown call_tmp[972087] "expr temp" "maybe param" "maybe type" "temp"
    (972090 'move' call_tmp[972087](350845 call _cond_test call_tmp[972082]))
    if call_tmp[972087]
    {
      unknown call_tmp[972094] "expr temp" "maybe param" "maybe type" "temp"
      (972097 'move' call_tmp[972094](350838 call(350835 call (partial) format _mt[203] "map index %\? out of bounds") k[350795]))
      (350833 call boundsCheckHalt call_tmp[972094])
    }
    Try!
    {
      {
        unknown result[350857] "dead at end of block" "insert auto destroy"
        unknown call_tmp[972101] "expr temp" "maybe param" "maybe type" "temp"
        (972104 'move' call_tmp[972101](462029 call valType _mt[203] this[350792]))
        (656661 'default init var' result[350857] call_tmp[972101])
        unknown key[350853] "dead at end of block" "insert auto destroy"
        unknown call_tmp[972108] "expr temp" "maybe param" "maybe type" "temp"
        (972111 'move' call_tmp[972108](462024 call keyType _mt[203] this[350792]))
        (656663 'default init var' key[350853] call_tmp[972108])
        (350860 'end of statement')
        unknown call_tmp[972115] "expr temp" "maybe param" "maybe type" "temp"
        (972118 'move' call_tmp[972115](410890 call table _mt[203] this[350792]))
        (350865 call(350862 call (partial) clearSlot _mt[203] call_tmp[972115]) slot[350811] key[350853] result[350857])
        (573172 'end of statement' slot[350811] key[350853] result[350857])
        unknown call_tmp[972124] "expr temp" "maybe param" "maybe type" "temp"
        (972127 'move' call_tmp[972124](410895 call table _mt[203] this[350792]))
        (350873 call(350870 call (partial) maybeShrinkAfterRemove _mt[203] call_tmp[972124]))
        (573176 'end of statement')
        unknown call_tmp[972133] "expr temp" "maybe param" "maybe type" "temp"
        (972136 'move' call_tmp[972133](462038 call valType _mt[203] this[350792]))
        unknown call_tmp[972138] "expr temp" "maybe param" "maybe type" "temp"
        (972141 'move' call_tmp[972138](350875 call : result[350857] call_tmp[972133]))
        (637281 'move' ret[637276](637280 'deref' call_tmp[972138]))
        gotoReturn _end_getAndRemove[637274] _end_getAndRemove[637274]
        (573177 'end of statement' result[350857])
      }
    }
    label _end_getAndRemove[637274]
    (637278 return ret[637276])
  }
  function map[352283](?).these[350884](arg _mt[350888]:_MT[201], arg this[350886]:map[352283](?)) const ref : _unknown[42] "deprecated" "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[637287] "RVV" "temp"
    {
      unknown _indexOfInterest[350901] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[350902] "expr temp" "temp"
      unknown call_tmp[972145] "expr temp" "maybe param" "maybe type" "temp"
      (972148 'move' call_tmp[972145](350897 call(350894 call (partial) keys _mt[203] this[350886])))
      (350911 'move' _iterator[350902](350909 call _getIterator call_tmp[972145]))
      Defer
      {
        {
          (350926 call _freeIterator _iterator[350902])
        }
      }
      { scopeless type
        (350916 'move' _indexOfInterest[350901](350913 call iteratorIndex _iterator[350902]))
      }
      ForLoop[350903]
      {
        unknown key[350891] "index var" "insert auto destroy"
        (573180 'end of statement')
        (350921 'move' key[350891] _indexOfInterest[350901])
        (573181 'end of statement' key[350891])
        {
          const-ref yret[637291] "YVV" "temp"
          (637294 'move' yret[637291](637293 'addr of' key[350891]))
          (350899 yield yret[637291])
          (573183 'end of statement' key[350891])
        }
        label _continueLabel[350906]
        _indexOfInterest[350901]
        _iterator[350902]
      }
      label _breakLabel[350907]
    }
    (637289 return ret[637287])
  }
  function map[352283](?).keys[350935](arg _mt[350939]:_MT[201], arg this[350937]:map[352283](?)) const ref : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[637299] "RVV" "temp"
    {
      unknown _indexOfInterest[350974] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[350975] "expr temp" "temp"
      unknown call_tmp[972152] "expr temp" "maybe param" "maybe type" "temp"
      (972155 'move' call_tmp[972152](410901 call table _mt[203] this[350937]))
      unknown call_tmp[972159] "expr temp" "maybe param" "maybe type" "temp"
      (972162 'move' call_tmp[972159](350948 call(350945 call (partial) allSlots _mt[203] call_tmp[972152])))
      (350984 'move' _iterator[350975](350982 call _getIterator call_tmp[972159]))
      Defer
      {
        {
          (350999 call _freeIterator _iterator[350975])
        }
      }
      { scopeless type
        (350989 'move' _indexOfInterest[350974](350986 call iteratorIndex _iterator[350975]))
      }
      ForLoop[350976] order-independent
      {
        unknown slot[350942] "index var" "insert auto destroy"
        (573186 'end of statement')
        (350994 'move' slot[350942] _indexOfInterest[350974])
        (573187 'end of statement' slot[350942])
        {
          unknown call_tmp[972166] "expr temp" "maybe param" "maybe type" "temp"
          (972169 'move' call_tmp[972166](410911 call table _mt[203] this[350937]))
          unknown call_tmp[972173] "expr temp" "maybe param" "maybe type" "temp"
          (972176 'move' call_tmp[972173](350965 call(350962 call (partial) isSlotFull _mt[203] call_tmp[972166]) slot[350942]))
          unknown call_tmp[972178] "expr temp" "maybe param" "maybe type" "temp"
          (972181 'move' call_tmp[972178](350967 call _cond_test call_tmp[972173]))
          if call_tmp[972178]
          {
            const-ref yret[637303] "YVV" "temp"
            unknown call_tmp[972185] "expr temp" "maybe param" "maybe type" "temp"
            (972188 'move' call_tmp[972185](410906 call table _mt[203] this[350937]))
            unknown call_tmp[972192] "expr temp" "maybe param" "maybe type" "temp"
            (972195 'move' call_tmp[972192](350955 call(350952 call (partial) table _mt[203] call_tmp[972185]) slot[350942]))
            unknown call_tmp[972199] "expr temp" "maybe param" "maybe type" "temp"
            (972202 'move' call_tmp[972199](350957 call key _mt[203] call_tmp[972192]))
            (637306 'move' yret[637303](637305 'addr of' call_tmp[972199]))
            (350950 yield yret[637303])
            (573189 'end of statement' slot[350942])
          }
        }
        label _continueLabel[350979]
        _indexOfInterest[350974]
        _iterator[350975]
      }
      label _breakLabel[350980]
    }
    (637301 return ret[637299])
  }
  function map[352283](?).items[351008](arg _mt[351012]:_MT[201], arg this[351010]:map[352283](?)) : _unknown[42] "deprecated" "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[637311] "RVV" "temp"
    unknown call_tmp[972206] "expr temp" "maybe param" "maybe type" "temp"
    (972209 'move' call_tmp[972206](462051 call keyType _mt[203] this[351010]))
    unknown call_tmp[972211] "expr temp" "maybe param" "maybe type" "temp"
    (972214 'move' call_tmp[972211](351033 call isCopyableType call_tmp[972206]))
    unknown call_tmp[972216] "expr temp" "maybe param" "maybe type" "temp"
    (972219 'move' call_tmp[972216](351030 call ! call_tmp[972211]))
    unknown call_tmp[972221] "expr temp" "maybe param" "maybe type" "temp"
    (972224 'move' call_tmp[972221](351035 call _cond_test call_tmp[972216]))
    if call_tmp[972221]
    {
      unknown call_tmp[972228] "expr temp" "maybe param" "maybe type" "temp"
      (972231 'move' call_tmp[972228](462046 call keyType _mt[203] this[351010]))
      unknown call_tmp[972233] "expr temp" "maybe param" "maybe type" "temp"
      (972236 'move' call_tmp[972233](351024 call : call_tmp[972228] string[244]))
      unknown call_tmp[972238] "expr temp" "maybe param" "maybe type" "temp"
      (972241 'move' call_tmp[972238](351019 call + "in map.items(): map key type " call_tmp[972233]))
      unknown call_tmp[972243] "expr temp" "maybe param" "maybe type" "temp"
      (972246 'move' call_tmp[972243](351017 call + call_tmp[972238] " is not copyable"))
      (351016 call compilerError call_tmp[972243])
    }
    unknown call_tmp[972250] "expr temp" "maybe param" "maybe type" "temp"
    (972253 'move' call_tmp[972250](462061 call valType _mt[203] this[351010]))
    unknown call_tmp[972255] "expr temp" "maybe param" "maybe type" "temp"
    (972258 'move' call_tmp[972255](351058 call isCopyableType call_tmp[972250]))
    unknown call_tmp[972260] "expr temp" "maybe param" "maybe type" "temp"
    (972263 'move' call_tmp[972260](351055 call ! call_tmp[972255]))
    unknown call_tmp[972265] "expr temp" "maybe param" "maybe type" "temp"
    (972268 'move' call_tmp[972265](351060 call _cond_test call_tmp[972260]))
    if call_tmp[972265]
    {
      unknown call_tmp[972272] "expr temp" "maybe param" "maybe type" "temp"
      (972275 'move' call_tmp[972272](462056 call valType _mt[203] this[351010]))
      unknown call_tmp[972277] "expr temp" "maybe param" "maybe type" "temp"
      (972280 'move' call_tmp[972277](351049 call : call_tmp[972272] string[244]))
      unknown call_tmp[972282] "expr temp" "maybe param" "maybe type" "temp"
      (972285 'move' call_tmp[972282](351044 call + "in map.items(): map value type " call_tmp[972277]))
      unknown call_tmp[972287] "expr temp" "maybe param" "maybe type" "temp"
      (972290 'move' call_tmp[972287](351042 call + call_tmp[972282] " is not copyable"))
      (351041 call compilerError call_tmp[972287])
    }
    {
      unknown _indexOfInterest[351108] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[351109] "expr temp" "temp"
      unknown call_tmp[972294] "expr temp" "maybe param" "maybe type" "temp"
      (972297 'move' call_tmp[972294](410916 call table _mt[203] this[351010]))
      unknown call_tmp[972301] "expr temp" "maybe param" "maybe type" "temp"
      (972304 'move' call_tmp[972301](351071 call(351068 call (partial) allSlots _mt[203] call_tmp[972294])))
      (351118 'move' _iterator[351109](351116 call _getIterator call_tmp[972301]))
      Defer
      {
        {
          (351133 call _freeIterator _iterator[351109])
        }
      }
      { scopeless type
        (351123 'move' _indexOfInterest[351108](351120 call iteratorIndex _iterator[351109]))
      }
      ForLoop[351110] order-independent
      {
        unknown slot[351065] "index var" "insert auto destroy"
        (573194 'end of statement')
        (351128 'move' slot[351065] _indexOfInterest[351108])
        (573195 'end of statement' slot[351065])
        {
          unknown call_tmp[972308] "expr temp" "maybe param" "maybe type" "temp"
          (972311 'move' call_tmp[972308](410928 call table _mt[203] this[351010]))
          unknown call_tmp[972315] "expr temp" "maybe param" "maybe type" "temp"
          (972318 'move' call_tmp[972315](351100 call(351097 call (partial) isSlotFull _mt[203] call_tmp[972308]) slot[351065]))
          unknown call_tmp[972320] "expr temp" "maybe param" "maybe type" "temp"
          (972323 'move' call_tmp[972320](351102 call _cond_test call_tmp[972315]))
          if call_tmp[972320]
          {
            unknown tabEntry[351075] "dead at end of block" "ref var"
            (656668 'init ref decl' tabEntry[351075])
            unknown call_tmp[972327] "expr temp" "maybe param" "maybe type" "temp"
            (972330 'move' call_tmp[972327](410921 call table _mt[203] this[351010]))
            unknown call_tmp[972334] "expr temp" "maybe param" "maybe type" "temp"
            (972337 'move' call_tmp[972334](351080 call(351077 call (partial) table _mt[203] call_tmp[972327]) slot[351065]))
            (656666 'move' tabEntry[351075](656665 'addr of' call_tmp[972334]))
            (351083 'end of statement' slot[351065])
            unknown yret[637315] "YVV" "temp"
            unknown call_tmp[972341] "expr temp" "maybe param" "maybe type" "temp"
            (972344 'move' call_tmp[972341](351087 call key _mt[203] tabEntry[351075]))
            unknown call_tmp[972348] "expr temp" "maybe param" "maybe type" "temp"
            (972351 'move' call_tmp[972348](351091 call val _mt[203] tabEntry[351075]))
            unknown call_tmp[972353] "expr temp" "maybe param" "maybe type" "temp"
            (972356 'move' call_tmp[972353](351094 call _build_tuple call_tmp[972341] call_tmp[972348]))
            (637318 'move' yret[637315](637317 'deref' call_tmp[972353]))
            (351084 yield yret[637315])
            (573198 'end of statement' tabEntry[351075])
          }
        }
        label _continueLabel[351113]
        _indexOfInterest[351108]
        _iterator[351109]
      }
      label _breakLabel[351114]
    }
    (637313 return ret[637311])
  }
  function map[352283](?).values[351142](arg _mt[351146]:_MT[201], arg this[351144]:map[352283](?)) ref : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[637323] "RVV" "temp"
    {
      unknown _indexOfInterest[351181] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[351182] "expr temp" "temp"
      unknown call_tmp[972360] "expr temp" "maybe param" "maybe type" "temp"
      (972363 'move' call_tmp[972360](410933 call table _mt[203] this[351144]))
      unknown call_tmp[972367] "expr temp" "maybe param" "maybe type" "temp"
      (972370 'move' call_tmp[972367](351155 call(351152 call (partial) allSlots _mt[203] call_tmp[972360])))
      (351191 'move' _iterator[351182](351189 call _getIterator call_tmp[972367]))
      Defer
      {
        {
          (351206 call _freeIterator _iterator[351182])
        }
      }
      { scopeless type
        (351196 'move' _indexOfInterest[351181](351193 call iteratorIndex _iterator[351182]))
      }
      ForLoop[351183] order-independent
      {
        unknown slot[351149] "index var" "insert auto destroy"
        (573201 'end of statement')
        (351201 'move' slot[351149] _indexOfInterest[351181])
        (573202 'end of statement' slot[351149])
        {
          unknown call_tmp[972374] "expr temp" "maybe param" "maybe type" "temp"
          (972377 'move' call_tmp[972374](410943 call table _mt[203] this[351144]))
          unknown call_tmp[972381] "expr temp" "maybe param" "maybe type" "temp"
          (972384 'move' call_tmp[972381](351172 call(351169 call (partial) isSlotFull _mt[203] call_tmp[972374]) slot[351149]))
          unknown call_tmp[972386] "expr temp" "maybe param" "maybe type" "temp"
          (972389 'move' call_tmp[972386](351174 call _cond_test call_tmp[972381]))
          if call_tmp[972386]
          {
            ref yret[637327] "YVV" "temp"
            unknown call_tmp[972393] "expr temp" "maybe param" "maybe type" "temp"
            (972396 'move' call_tmp[972393](410938 call table _mt[203] this[351144]))
            unknown call_tmp[972400] "expr temp" "maybe param" "maybe type" "temp"
            (972403 'move' call_tmp[972400](351162 call(351159 call (partial) table _mt[203] call_tmp[972393]) slot[351149]))
            unknown call_tmp[972407] "expr temp" "maybe param" "maybe type" "temp"
            (972410 'move' call_tmp[972407](351164 call val _mt[203] call_tmp[972400]))
            (637330 'move' yret[637327](637329 'addr of' call_tmp[972407]))
            (351157 yield yret[637327])
            (573204 'end of statement' slot[351149])
          }
        }
        label _continueLabel[351186]
        _indexOfInterest[351181]
        _iterator[351182]
      }
      label _breakLabel[351187]
    }
    (637325 return ret[637323])
  }
  function map[352283](?)._readHelper[351215](arg _mt[351225]:_MT[201], ref arg this[351217]:map[352283](?), arg r[351220]:fileReader[170893](?), ref arg deserializer[351223]:_any[141](?)) : _unknown[42] throws "method" "primary method" "no return value for void"
  {
    unknown tmp[505452] "maybe param" "temp"
    unknown call_tmp[972412] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (972415 'move' call_tmp[972412](351239 'typeof' deserializer[351223]))
    (505463 'move' tmp[505452](351236 call == call_tmp[972412] defaultDeserializer[173096]))
    unknown call_tmp[972417] "expr temp" "maybe param" "maybe type" "temp"
    (972420 'move' call_tmp[972417](505465 call _cond_invalid tmp[505452]))
    if call_tmp[972417]
    {
      (505468 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[711807] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[711808] "maybe param" "temp"
    unknown call_tmp[972422] "expr temp" "maybe param" "maybe type" "temp"
    (972425 'move' call_tmp[972422](505453 call isTrue tmp[505452]))
    (711813 'move' tmp[711808](711811 call _cond_test call_tmp[972422]))
    if tmp[711808]
    {
      unknown tmp[505473] "maybe param" "temp"
      unknown tmp[505494] "maybe param" "temp"
      unknown tmp[505515] "maybe param" "temp"
      unknown call_tmp[972429] "expr temp" "maybe param" "maybe type" "temp"
      (972432 'move' call_tmp[972429](462073 call keyType _mt[203] this[351217]))
      (505526 'move' tmp[505515](351247 call == call_tmp[972429] string[244]))
      unknown call_tmp[972434] "expr temp" "maybe param" "maybe type" "temp"
      (972437 'move' call_tmp[972434](505528 call _cond_invalid tmp[505515]))
      if call_tmp[972434]
      {
        (505531 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[711726] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[711727] "maybe param" "temp"
      unknown call_tmp[972439] "expr temp" "maybe param" "maybe type" "temp"
      (972442 'move' call_tmp[972439](505516 call isTrue tmp[505515]))
      (711732 'move' tmp[711727](711730 call _cond_test call_tmp[972439]))
      if tmp[711727]
      {
        (711737 'move' tmp[711726](711734 '_paramFoldLogical' tmp[711727] 1))
      }
      {
        unknown tmp[711739] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[972446] "expr temp" "maybe param" "maybe type" "temp"
        (972449 'move' call_tmp[972446](462078 call valType _mt[203] this[351217]))
        unknown call_tmp[972451] "expr temp" "maybe param" "maybe type" "temp"
        (972454 'move' call_tmp[972451](351251 call == call_tmp[972446] string[244]))
        (711741 'move' tmp[711739](505520 call isTrue call_tmp[972451]))
        (711746 'move' tmp[711726](711743 '_paramFoldLogical' tmp[711727] tmp[711739]))
      }
      (505505 'move' tmp[505494] tmp[711726])
      unknown call_tmp[972456] "expr temp" "maybe param" "maybe type" "temp"
      (972459 'move' call_tmp[972456](505507 call _cond_invalid tmp[505494]))
      if call_tmp[972456]
      {
        (505510 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[711753] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[711754] "maybe param" "temp"
      unknown call_tmp[972461] "expr temp" "maybe param" "maybe type" "temp"
      (972464 'move' call_tmp[972461](505495 call isTrue tmp[505494]))
      (711759 'move' tmp[711754](711757 call _cond_test call_tmp[972461]))
      if tmp[711754]
      {
        (711764 'move' tmp[711753](711761 '_paramFoldLogical' tmp[711754] 1))
      }
      {
        unknown tmp[711766] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[972468] "expr temp" "maybe param" "maybe type" "temp"
        (972471 'move' call_tmp[972468](462083 call keyType _mt[203] this[351217]))
        unknown call_tmp[972473] "expr temp" "maybe param" "maybe type" "temp"
        (972476 'move' call_tmp[972473](351255 call == call_tmp[972468] bytes[232]))
        (711768 'move' tmp[711766](505499 call isTrue call_tmp[972473]))
        (711773 'move' tmp[711753](711770 '_paramFoldLogical' tmp[711754] tmp[711766]))
      }
      (505484 'move' tmp[505473] tmp[711753])
      unknown call_tmp[972478] "expr temp" "maybe param" "maybe type" "temp"
      (972481 'move' call_tmp[972478](505486 call _cond_invalid tmp[505473]))
      if call_tmp[972478]
      {
        (505489 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[711780] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[711781] "maybe param" "temp"
      unknown call_tmp[972483] "expr temp" "maybe param" "maybe type" "temp"
      (972486 'move' call_tmp[972483](505474 call isTrue tmp[505473]))
      (711786 'move' tmp[711781](711784 call _cond_test call_tmp[972483]))
      if tmp[711781]
      {
        (711791 'move' tmp[711780](711788 '_paramFoldLogical' tmp[711781] 1))
      }
      {
        unknown tmp[711793] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[972490] "expr temp" "maybe param" "maybe type" "temp"
        (972493 'move' call_tmp[972490](462088 call valType _mt[203] this[351217]))
        unknown call_tmp[972495] "expr temp" "maybe param" "maybe type" "temp"
        (972498 'move' call_tmp[972495](351259 call == call_tmp[972490] bytes[232]))
        (711795 'move' tmp[711793](505478 call isTrue call_tmp[972495]))
        (711800 'move' tmp[711780](711797 '_paramFoldLogical' tmp[711781] tmp[711793]))
      }
      unknown tmp[711815] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (711817 'move' tmp[711815](505456 call isTrue tmp[711780]))
      (711822 'move' tmp[711807](711819 '_paramFoldLogical' tmp[711808] tmp[711815]))
    }
    {
      (711827 'move' tmp[711807](711824 '_paramFoldLogical' tmp[711808] 0))
    }
    unknown call_tmp[972500] "expr temp" "maybe param" "maybe type" "temp"
    (972503 'move' call_tmp[972500](351263 call _cond_test tmp[711807]))
    if call_tmp[972500]
    {
      (351229 call compilerError "Default IO format for 'map' does not support reading when the key or value type is  'string' or 'bytes'.")
    }
    (351272 call(351269 call (partial) clear _mt[203] this[351217]))
    (573208 'end of statement')
    (351274 call(462092 call (partial) _enter _mt[203] this[351217]))
    (573209 'end of statement')
    Defer
    {
      { scopeless
        (351276 call(462096 call (partial) _leave _mt[203] this[351217]))
      }
    }
    unknown call_tmp[972513] "maybe param" "maybe type" "temp"
    (972516 'move' call_tmp[972513](351286 call(351283 call (partial) startMap _mt[203] deserializer[351223]) r[351220]))
    unknown des[351281] "dead at end of block" "insert auto destroy"
    (656670 'init var' des[351281] call_tmp[972513])
    (351289 'end of statement')
    unknown done[351291] "dead at end of block" "insert auto destroy"
    (656672 'init var' done[351291] 0)
    (351294 'end of statement')
    {
      unknown tmp[351315] "temp"
      unknown call_tmp[972520] "expr temp" "maybe param" "maybe type" "temp"
      (972523 'move' call_tmp[972520](351340 call(351337 call (partial) hasMore _mt[203] des[351281])))
      (351341 'move' tmp[351315](351335 call _cond_test call_tmp[972520]))
      WhileDo[351320]
      {
        {
          unknown call_tmp[972531] "expr temp" "maybe param" "maybe type" "temp"
          (972534 'move' call_tmp[972531](462106 call keyType _mt[203] this[351217]))
          unknown call_tmp[972536] "expr temp" "maybe param" "maybe type" "temp"
          (972539 'move' call_tmp[972536](351307 call(351304 call (partial) readKey _mt[203] des[351281]) call_tmp[972531]))
          unknown call_tmp[972545] "expr temp" "maybe param" "maybe type" "temp"
          (972548 'move' call_tmp[972545](462111 call valType _mt[203] this[351217]))
          unknown call_tmp[972550] "expr temp" "maybe param" "maybe type" "temp"
          (972553 'move' call_tmp[972550](351313 call(351310 call (partial) readValue _mt[203] des[351281]) call_tmp[972545]))
          (351302 call(462101 call (partial) add _mt[203] this[351217]) call_tmp[972536] call_tmp[972550])
          (573211 'end of statement' des[351281])
        }
        label _continueLabel[351318]
        unknown call_tmp[972557] "expr temp" "maybe param" "maybe type" "temp"
        (972560 'move' call_tmp[972557](351329 call(351326 call (partial) hasMore _mt[203] des[351281])))
        (351330 'move' tmp[351315](351324 call _cond_test call_tmp[972557]))
        tmp[351315]
      }
      label _breakLabel[351319]
    }
    (351348 call(351345 call (partial) endMap _mt[203] des[351281]))
    (573213 'end of statement' des[351281])
    (637333 return _void[46])
  }
  function map[352283](?).deserialize[351351](arg _mt[351361]:_MT[201], ref arg this[351353]:map[352283](?), arg reader[351356]:fileReader[170893](?), ref arg deserializer[351359]:_any[141](?)) : _unknown[42] throws "method" "primary method" "no return value for void"
  {
    (351365 call(462116 call (partial) _readHelper _mt[203] this[351353]) reader[351356] deserializer[351359])
    (637335 return _void[46])
  }
  function map[352283](?).init[351370](arg _mt[351384]:_MT[201], ref arg this[351372]:map[352283](?), arg keyType[351374]:_any[141](?), arg valType[351376]:_any[141](?), arg reader[351379]:fileReader[170893](?), ref arg deserializer[351382]:_any[141](?)) : void[4] throws "method" "primary method" "no return value for void"
  {
    unknown call_tmp[972570] "expr temp" "maybe param" "maybe type" "temp"
    (972573 'move' call_tmp[972570](462126 call parSafe _mt[203] this[351372]))
    (351391 call(351388 call (partial) init _mt[203] this[351372]) keyType[351374] valType[351376] call_tmp[972570])
    (573216 'end of statement')
    (351396 call(462130 call (partial) _readHelper _mt[203] this[351372]) reader[351379] deserializer[351382])
    (637337 return _void[46])
  }
  function map[352283](?).init[351401](arg _mt[351417]:_MT[201], ref arg this[351403]:map[352283](?), arg keyType[351405]:_any[141](?), arg valType[351407]:_any[141](?), param arg parSafe[351409]:_any[141](?), arg reader[351412]:fileReader[170893](?), ref arg deserializer[351415]:_any[141](?)) : void[4] throws "method" "primary method" "@unstable" "no return value for void"
  {
    (351424 call(351421 call (partial) init _mt[203] this[351403]) keyType[351405] valType[351407] parSafe[351409])
    (573218 'end of statement')
    (351429 call(462140 call (partial) _readHelper _mt[203] this[351403]) reader[351412] deserializer[351415])
    (637339 return _void[46])
  }
  function map[352283](?).serialize[351434](arg _mt[351446]:_MT[201], arg this[351436]:map[352283](?), arg writer[351441]:fileWriter[170987](?), ref arg serializer[351444]:_any[141](?)) : _unknown[42] throws "method" "primary method" "no return value for void"
  {
    (351450 call(462147 call (partial) _enter _mt[203] this[351436]))
    (573220 'end of statement')
    Defer
    {
      { scopeless
        (351452 call(462151 call (partial) _leave _mt[203] this[351436]))
      }
    }
    unknown call_tmp[972589] "expr temp" "maybe param" "maybe type" "temp"
    (972592 'move' call_tmp[972589](462156 call _size _mt[203] this[351436]))
    unknown call_tmp[972594] "maybe param" "maybe type" "temp"
    (972597 'move' call_tmp[972594](351462 call(351459 call (partial) startMap _mt[203] serializer[351444]) writer[351441] call_tmp[972589]))
    unknown ser[351457] "dead at end of block" "insert auto destroy"
    (656674 'init var' ser[351457] call_tmp[972594])
    (351466 'end of statement')
    {
      unknown _indexOfInterest[351514] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[351515] "expr temp" "temp"
      unknown call_tmp[972601] "expr temp" "maybe param" "maybe type" "temp"
      (972604 'move' call_tmp[972601](410958 call table _mt[203] this[351436]))
      unknown call_tmp[972608] "expr temp" "maybe param" "maybe type" "temp"
      (972611 'move' call_tmp[972608](351473 call(351470 call (partial) allSlots _mt[203] call_tmp[972601])))
      (351524 'move' _iterator[351515](351522 call _getIterator call_tmp[972608]))
      Defer
      {
        {
          (351539 call _freeIterator _iterator[351515])
        }
      }
      { scopeless type
        (351529 'move' _indexOfInterest[351514](351526 call iteratorIndex _iterator[351515]))
      }
      ForLoop[351516]
      {
        unknown slot[351467] "index var" "insert auto destroy"
        (573223 'end of statement')
        (351534 'move' slot[351467] _indexOfInterest[351514])
        (573224 'end of statement' slot[351467])
        {
          unknown call_tmp[972615] "expr temp" "maybe param" "maybe type" "temp"
          (972618 'move' call_tmp[972615](410972 call table _mt[203] this[351436]))
          unknown call_tmp[972622] "expr temp" "maybe param" "maybe type" "temp"
          (972625 'move' call_tmp[972622](351508 call(351505 call (partial) isSlotFull _mt[203] call_tmp[972615]) slot[351467]))
          unknown call_tmp[972627] "expr temp" "maybe param" "maybe type" "temp"
          (972630 'move' call_tmp[972627](351510 call _cond_test call_tmp[972622]))
          if call_tmp[972627]
          {
            unknown tabEntry[351477] "dead at end of block" "ref var"
            (656679 'init ref decl' tabEntry[351477])
            unknown call_tmp[972634] "expr temp" "maybe param" "maybe type" "temp"
            (972637 'move' call_tmp[972634](410963 call table _mt[203] this[351436]))
            unknown call_tmp[972641] "expr temp" "maybe param" "maybe type" "temp"
            (972644 'move' call_tmp[972641](351482 call(351479 call (partial) table _mt[203] call_tmp[972634]) slot[351467]))
            (656677 'move' tabEntry[351477](656676 'addr of' call_tmp[972641]))
            (351485 'end of statement' slot[351467])
            unknown call_tmp[972650] "expr temp" "maybe param" "maybe type" "temp"
            (972653 'move' call_tmp[972650](351492 call key _mt[203] tabEntry[351477]))
            (351490 call(351487 call (partial) writeKey _mt[203] ser[351457]) call_tmp[972650])
            (573227 'end of statement' ser[351457] tabEntry[351477])
            unknown call_tmp[972659] "expr temp" "maybe param" "maybe type" "temp"
            (972662 'move' call_tmp[972659](351501 call val _mt[203] tabEntry[351477]))
            (351499 call(351496 call (partial) writeValue _mt[203] ser[351457]) call_tmp[972659])
            (573230 'end of statement' ser[351457] tabEntry[351477])
          }
        }
        label _continueLabel[351519]
        _indexOfInterest[351514]
        _iterator[351515]
      }
      label _breakLabel[351520]
    }
    (351550 call(351547 call (partial) endMap _mt[203] ser[351457]))
    (573233 'end of statement' ser[351457])
    (637341 return _void[46])
  }
  function map[352283](?).add[351553](arg _mt[351565]:_MT[201], ref arg this[351555]:map[352283](?), in arg k[351558] :
  (462163 call keyType _mt[203] this[351555]), in arg v[351562] :
  (462168 call valType _mt[203] this[351555])) : _unknown[42] "method" "primary method"
  {
    unknown ret[637345] "RVV" "temp"
    (351576 call(462175 call (partial) _enter _mt[203] this[351555]))
    (573235 'end of statement')
    Defer
    {
      { scopeless
        (351578 call(462179 call (partial) _leave _mt[203] this[351555]))
      }
    }
    unknown call_tmp[972676] "expr temp" "maybe param" "maybe type" "temp"
    (972679 'move' call_tmp[972676](410978 call table _mt[203] this[351555]))
    unknown call_tmp[972683] "maybe param" "maybe type" "temp"
    (972686 'move' call_tmp[972683](351591 call(351588 call (partial) findAvailableSlot _mt[203] call_tmp[972676]) k[351558]))
    unknown tmp[351593] "dead at end of block" "insert auto destroy" "temp"
    (656681 'init var' tmp[351593] call_tmp[972683])
    (351600 call _check_tuple_var_decl tmp[351593] 2)
    (573237 'end of statement')
    unknown call_tmp[972688] "maybe param" "maybe type" "temp"
    (972691 'move' call_tmp[972688](351594 call tmp[351593] 0))
    unknown found[351583] "dead at end of block" "insert auto destroy"
    (656683 'init var' found[351583] call_tmp[972688])
    unknown call_tmp[972693] "maybe param" "maybe type" "temp"
    (972696 'move' call_tmp[972693](351597 call tmp[351593] 1))
    unknown slot[351585] "dead at end of block" "insert auto destroy"
    (656685 'init var' slot[351585] call_tmp[972693])
    (351605 'end of statement')
    unknown call_tmp[972698] "expr temp" "maybe param" "maybe type" "temp"
    (972701 'move' call_tmp[972698](351610 call _cond_test found[351583]))
    if call_tmp[972698]
    {
      (637351 'move' ret[637345](637350 'coerce' 0 bool[19]))
      gotoReturn _end_add[637343] _end_add[637343]
    }
    unknown call_tmp[972705] "expr temp" "maybe param" "maybe type" "temp"
    (972708 'move' call_tmp[972705](410983 call table _mt[203] this[351555]))
    (351618 call(351615 call (partial) fillSlot _mt[203] call_tmp[972705]) slot[351585] k[351558] v[351562])
    (573239 'end of statement' slot[351585])
    (637357 'move' ret[637345](637356 'coerce' 1 bool[19]))
    label _end_add[637343]
    (637347 return ret[637345])
  }
  {
    (351572 call <(351569 'lifetime_of' this[351555])(351571 'lifetime_of' v[351562]))
  }
  { scopeless type
    bool[19]
  }
  function map[352283](?).set[351628](arg _mt[351640]:_MT[201], ref arg this[351630]:map[352283](?), arg k[351633] :
  (462189 call keyType _mt[203] this[351630]), in arg v[351637] :
  (462194 call valType _mt[203] this[351630])) : _unknown[42] "deprecated" "method" "primary method"
  {
    unknown ret[637361] "RVV" "temp"
    unknown call_tmp[972718] "expr temp" "maybe param" "maybe type" "temp"
    (972721 'move' call_tmp[972718](351649 call(351646 call (partial) replace _mt[203] this[351630]) k[351633] v[351637]))
    (637367 'move' ret[637361](637366 'coerce' call_tmp[972718] bool[19]))
    (637363 return ret[637361])
  }
  { scopeless type
    bool[19]
  }
  function map[352283](?).replace[351655](arg _mt[351667]:_MT[201], ref arg this[351657]:map[352283](?), arg k[351660] :
  (462202 call keyType _mt[203] this[351657]), in arg v[351664] :
  (462207 call valType _mt[203] this[351657])) : _unknown[42] "method" "primary method"
  {
    unknown ret[637371] "RVV" "temp"
    (351672 call(462212 call (partial) _enter _mt[203] this[351657]))
    (573243 'end of statement')
    Defer
    {
      { scopeless
        (351674 call(462216 call (partial) _leave _mt[203] this[351657]))
      }
    }
    unknown call_tmp[972733] "expr temp" "maybe param" "maybe type" "temp"
    (972736 'move' call_tmp[972733](410989 call table _mt[203] this[351657]))
    unknown call_tmp[972740] "maybe param" "maybe type" "temp"
    (972743 'move' call_tmp[972740](351687 call(351684 call (partial) findAvailableSlot _mt[203] call_tmp[972733]) k[351660]))
    unknown tmp[351689] "dead at end of block" "insert auto destroy" "temp"
    (656687 'init var' tmp[351689] call_tmp[972740])
    (351696 call _check_tuple_var_decl tmp[351689] 2)
    (573245 'end of statement')
    unknown call_tmp[972745] "maybe param" "maybe type" "temp"
    (972748 'move' call_tmp[972745](351690 call tmp[351689] 0))
    unknown found[351679] "dead at end of block" "insert auto destroy"
    (656689 'init var' found[351679] call_tmp[972745])
    unknown call_tmp[972750] "maybe param" "maybe type" "temp"
    (972753 'move' call_tmp[972750](351693 call tmp[351689] 1))
    unknown slot[351681] "dead at end of block" "insert auto destroy"
    (656691 'init var' slot[351681] call_tmp[972750])
    (351701 'end of statement')
    unknown call_tmp[972755] "expr temp" "maybe param" "maybe type" "temp"
    (972758 'move' call_tmp[972755](351705 call ! found[351679]))
    unknown call_tmp[972760] "expr temp" "maybe param" "maybe type" "temp"
    (972763 'move' call_tmp[972760](351708 call _cond_test call_tmp[972755]))
    if call_tmp[972760]
    {
      (637377 'move' ret[637371](637376 'coerce' 0 bool[19]))
      gotoReturn _end_replace[637369] _end_replace[637369]
    }
    unknown call_tmp[972767] "expr temp" "maybe param" "maybe type" "temp"
    (972770 'move' call_tmp[972767](410994 call table _mt[203] this[351657]))
    (351716 call(351713 call (partial) fillSlot _mt[203] call_tmp[972767]) slot[351681] k[351660] v[351664])
    (573247 'end of statement' slot[351681])
    (637383 'move' ret[637371](637382 'coerce' 1 bool[19]))
    label _end_replace[637369]
    (637373 return ret[637371])
  }
  { scopeless type
    bool[19]
  }
  function map[352283](?).addOrReplace[351725](arg _mt[351737]:_MT[201], ref arg this[351727]:map[352283](?), in arg k[351730] :
  (462226 call keyType _mt[203] this[351727]), in arg v[351734] :
  (462231 call valType _mt[203] this[351727])) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (351741 call(462235 call (partial) _enter _mt[203] this[351727]))
    (573250 'end of statement')
    Defer
    {
      { scopeless
        (351743 call(462239 call (partial) _leave _mt[203] this[351727]))
      }
    }
    unknown call_tmp[972784] "expr temp" "maybe param" "maybe type" "temp"
    (972787 'move' call_tmp[972784](410999 call table _mt[203] this[351727]))
    unknown call_tmp[972791] "maybe param" "maybe type" "temp"
    (972794 'move' call_tmp[972791](351756 call(351753 call (partial) findAvailableSlot _mt[203] call_tmp[972784]) k[351730]))
    unknown tmp[351758] "dead at end of block" "insert auto destroy" "temp"
    (656693 'init var' tmp[351758] call_tmp[972791])
    (351765 call _check_tuple_var_decl tmp[351758] 2)
    (573252 'end of statement')
    unknown call_tmp[972796] "maybe param" "maybe type" "temp"
    (972799 'move' call_tmp[972796](351759 call tmp[351758] 0))
    unknown found[351748] "dead at end of block" "insert auto destroy"
    (656695 'init var' found[351748] call_tmp[972796])
    unknown call_tmp[972801] "maybe param" "maybe type" "temp"
    (972804 'move' call_tmp[972801](351762 call tmp[351758] 1))
    unknown slot[351750] "dead at end of block" "insert auto destroy"
    (656697 'init var' slot[351750] call_tmp[972801])
    (351770 'end of statement')
    unknown call_tmp[972808] "expr temp" "maybe param" "maybe type" "temp"
    (972811 'move' call_tmp[972808](411004 call table _mt[203] this[351727]))
    (351775 call(351772 call (partial) fillSlot _mt[203] call_tmp[972808]) slot[351750] k[351730] v[351734])
    (573253 'end of statement' slot[351750])
    (637385 return _void[46])
  }
  function map[352283](?).addOrSet[351781](arg _mt[351793]:_MT[201], ref arg this[351783]:map[352283](?), in arg k[351786] :
  (462248 call keyType _mt[203] this[351783]), in arg v[351790] :
  (462253 call valType _mt[203] this[351783])) : _unknown[42] "deprecated" "method" "primary method" "no return value for void"
  {
    (351797 call(462257 call (partial) addOrReplace _mt[203] this[351783]) k[351786] v[351790])
    (637387 return _void[46])
  }
  function map[352283](?).remove[351802](arg _mt[351810]:_MT[201], ref arg this[351804]:map[352283](?), arg k[351807] :
  (462264 call keyType _mt[203] this[351804])) : _unknown[42] "method" "primary method"
  {
    unknown ret[637391] "RVV" "temp"
    (351815 call(462269 call (partial) _enter _mt[203] this[351804]))
    (573256 'end of statement')
    Defer
    {
      { scopeless
        (351817 call(462273 call (partial) _leave _mt[203] this[351804]))
      }
    }
    unknown call_tmp[972829] "expr temp" "maybe param" "maybe type" "temp"
    (972832 'move' call_tmp[972829](411009 call table _mt[203] this[351804]))
    unknown call_tmp[972836] "maybe param" "maybe type" "temp"
    (972839 'move' call_tmp[972836](351830 call(351827 call (partial) findFullSlot _mt[203] call_tmp[972829]) k[351807]))
    unknown tmp[351832] "dead at end of block" "insert auto destroy" "temp"
    (656699 'init var' tmp[351832] call_tmp[972836])
    (351839 call _check_tuple_var_decl tmp[351832] 2)
    (573258 'end of statement')
    unknown call_tmp[972841] "maybe param" "maybe type" "temp"
    (972844 'move' call_tmp[972841](351833 call tmp[351832] 0))
    unknown found[351822] "dead at end of block" "insert auto destroy"
    (656701 'init var' found[351822] call_tmp[972841])
    unknown call_tmp[972846] "maybe param" "maybe type" "temp"
    (972849 'move' call_tmp[972846](351836 call tmp[351832] 1))
    unknown slot[351824] "dead at end of block" "insert auto destroy"
    (656703 'init var' slot[351824] call_tmp[972846])
    (351844 'end of statement')
    unknown call_tmp[972851] "expr temp" "maybe param" "maybe type" "temp"
    (972854 'move' call_tmp[972851](351848 call ! found[351822]))
    unknown call_tmp[972856] "expr temp" "maybe param" "maybe type" "temp"
    (972859 'move' call_tmp[972856](351851 call _cond_test call_tmp[972851]))
    if call_tmp[972856]
    {
      (637397 'move' ret[637391](637396 'coerce' 0 bool[19]))
      gotoReturn _end_remove[637389] _end_remove[637389]
    }
    unknown outKey[351861] "dead at end of block" "insert auto destroy"
    unknown call_tmp[972863] "expr temp" "maybe param" "maybe type" "temp"
    (972866 'move' call_tmp[972863](462285 call keyType _mt[203] this[351804]))
    (656705 'default init var' outKey[351861] call_tmp[972863])
    unknown outVal[351857] "dead at end of block" "insert auto destroy"
    unknown call_tmp[972870] "expr temp" "maybe param" "maybe type" "temp"
    (972873 'move' call_tmp[972870](462280 call valType _mt[203] this[351804]))
    (656707 'default init var' outVal[351857] call_tmp[972870])
    (351864 'end of statement')
    unknown call_tmp[972877] "expr temp" "maybe param" "maybe type" "temp"
    (972880 'move' call_tmp[972877](411014 call table _mt[203] this[351804]))
    (351869 call(351866 call (partial) clearSlot _mt[203] call_tmp[972877]) slot[351824] outKey[351861] outVal[351857])
    (573260 'end of statement' slot[351824] outKey[351861] outVal[351857])
    unknown call_tmp[972886] "expr temp" "maybe param" "maybe type" "temp"
    (972889 'move' call_tmp[972886](411019 call table _mt[203] this[351804]))
    (351877 call(351874 call (partial) maybeShrinkAfterRemove _mt[203] call_tmp[972886]))
    (573264 'end of statement')
    (637403 'move' ret[637391](637402 'coerce' 1 bool[19]))
    label _end_remove[637389]
    (637393 return ret[637391])
  }
  { scopeless type
    bool[19]
  }
  function map[352283](?).toArray[351883](arg _mt[351887]:_MT[201], arg this[351885]:map[352283](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[637407] "RVV" "temp"
    (351899 call(462302 call (partial) _enter _mt[203] this[351885]))
    (573266 'end of statement')
    Defer
    {
      { scopeless
        (351901 call(462306 call (partial) _leave _mt[203] this[351885]))
      }
    }
    unknown tmp[505536] "maybe param" "temp"
    unknown call_tmp[972899] "expr temp" "maybe param" "maybe type" "temp"
    (972902 'move' call_tmp[972899](462311 call keyType _mt[203] this[351885]))
    unknown call_tmp[972904] "expr temp" "maybe param" "maybe type" "temp"
    (972907 'move' call_tmp[972904](351916 call isCopyableType call_tmp[972899]))
    (505547 'move' tmp[505536](351913 call ! call_tmp[972904]))
    unknown call_tmp[972909] "expr temp" "maybe param" "maybe type" "temp"
    (972912 'move' call_tmp[972909](505549 call _cond_invalid tmp[505536]))
    if call_tmp[972909]
    {
      (505552 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[711834] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[711835] "maybe param" "temp"
    unknown call_tmp[972914] "expr temp" "maybe param" "maybe type" "temp"
    (972917 'move' call_tmp[972914](505537 call isTrue tmp[505536]))
    (711840 'move' tmp[711835](711838 call _cond_test call_tmp[972914]))
    if tmp[711835]
    {
      (711845 'move' tmp[711834](711842 '_paramFoldLogical' tmp[711835] 1))
    }
    {
      unknown tmp[711847] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[972921] "expr temp" "maybe param" "maybe type" "temp"
      (972924 'move' call_tmp[972921](462316 call valType _mt[203] this[351885]))
      unknown call_tmp[972926] "expr temp" "maybe param" "maybe type" "temp"
      (972929 'move' call_tmp[972926](351921 call isCopyableType call_tmp[972921]))
      unknown call_tmp[972931] "expr temp" "maybe param" "maybe type" "temp"
      (972934 'move' call_tmp[972931](351918 call ! call_tmp[972926]))
      (711849 'move' tmp[711847](505541 call isTrue call_tmp[972931]))
      (711854 'move' tmp[711834](711851 '_paramFoldLogical' tmp[711835] tmp[711847]))
    }
    unknown call_tmp[972936] "expr temp" "maybe param" "maybe type" "temp"
    (972939 'move' call_tmp[972936](351923 call _cond_test tmp[711834]))
    if call_tmp[972936]
    {
      (351906 call compilerError "toArray requires copyable key and value types")
    }
    unknown A[351929] "dead at end of block" "insert auto destroy"
    unknown call_tmp[972941] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (972944 'move' call_tmp[972941](351933 call chpl_build_low_bounded_range 0))
    unknown call_tmp[972948] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (972951 'move' call_tmp[972948](462320 call _size _mt[203] this[351885]))
    unknown call_tmp[972953] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (972956 'move' call_tmp[972953](351930 call # call_tmp[972941] call_tmp[972948]))
    unknown call_tmp[972958] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (972961 'move' call_tmp[972958](351936 call chpl__ensureDomainExpr call_tmp[972953]))
    unknown call_tmp[972965] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (972968 'move' call_tmp[972965](462325 call keyType _mt[203] this[351885]))
    unknown call_tmp[972972] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (972975 'move' call_tmp[972972](462330 call valType _mt[203] this[351885]))
    unknown call_tmp[972977] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (972980 'move' call_tmp[972977](351941 call _build_tuple call_tmp[972965] call_tmp[972972]))
    unknown call_tmp[972982] "expr temp" "maybe param" "maybe type" "temp"
    (972985 'move' call_tmp[972982](351943 call chpl__buildArrayRuntimeType call_tmp[972958] call_tmp[972977]))
    (656709 'default init var' A[351929] call_tmp[972982])
    (351946 'end of statement')
    {
      unknown _indexOfInterest[351972] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[351973] "expr temp" "temp"
      unknown call_tmp[972987] "expr temp" "maybe param" "maybe type" "temp"
      (972990 'move' call_tmp[972987](351982 call _getIterator A[351929]))
      unknown call_tmp[972994] "expr temp" "maybe param" "maybe type" "temp"
      (972997 'move' call_tmp[972994](351985 call(462338 call (partial) keys _mt[203] this[351885])))
      unknown call_tmp[972999] "expr temp" "maybe param" "maybe type" "temp"
      (973002 'move' call_tmp[972999](351986 call _getIterator call_tmp[972994]))
      unknown call_tmp[973006] "expr temp" "maybe param" "maybe type" "temp"
      (973009 'move' call_tmp[973006](351989 call(462342 call (partial) values _mt[203] this[351885])))
      unknown call_tmp[973011] "expr temp" "maybe param" "maybe type" "temp"
      (973014 'move' call_tmp[973011](351990 call _getIterator call_tmp[973006]))
      (351992 'move' _iterator[351973](351962 call _build_tuple call_tmp[972987] call_tmp[972999] call_tmp[973011]))
      Defer
      {
        {
          (352026 call _freeIterator _iterator[351973])
        }
      }
      { scopeless type
        (351997 'move' _indexOfInterest[351972](351994 call iteratorIndex _iterator[351973]))
      }
      ForLoop[351974]
      {
        (352002 call _check_tuple_var_decl _indexOfInterest[351972] 3)
        (573271 'end of statement')
        unknown a[351948] "index var" "insert auto destroy"
        (573272 'end of statement')
        (352009 'move' a[351948](352006 call _indexOfInterest[351972] 0))
        (573273 'end of statement' a[351948])
        unknown k[351950] "index var" "insert auto destroy"
        (573275 'end of statement')
        (352015 'move' k[351950](352012 call _indexOfInterest[351972] 1))
        (573276 'end of statement' k[351950])
        unknown v[351952] "index var" "insert auto destroy"
        (573278 'end of statement')
        (352021 'move' v[351952](352018 call _indexOfInterest[351972] 2))
        (573279 'end of statement' v[351952])
        {
          unknown call_tmp[973016] "expr temp" "maybe param" "maybe type" "temp"
          (973019 'move' call_tmp[973016](351970 call _build_tuple k[351950] v[351952]))
          (351964 call = a[351948] call_tmp[973016])
          (573281 'end of statement' a[351948] k[351950] v[351952])
        }
        label _continueLabel[351977]
        _indexOfInterest[351972]
        _iterator[351973]
      }
      label _breakLabel[351978]
    }
    unknown call_tmp[973023] "expr temp" "maybe param" "maybe type" "temp"
    (973026 'move' call_tmp[973023](637415 call keyType _mt[203] this[351885]))
    unknown call_tmp[973030] "expr temp" "maybe param" "maybe type" "temp"
    (973033 'move' call_tmp[973030](637419 call valType _mt[203] this[351885]))
    unknown call_tmp[973035] "expr temp" "maybe param" "maybe type" "temp"
    (973038 'move' call_tmp[973035](637413 call _build_tuple call_tmp[973023] call_tmp[973030]))
    (637422 call chpl__checkRetEltTypeMatch A[351929] call_tmp[973035])
    (637424 'move' ret[637407] A[351929])
    gotoReturn _end_toArray[637405] _end_toArray[637405]
    (573285 'end of statement' A[351929])
    label _end_toArray[637405]
    (637409 return ret[637407])
  }
  function map[352283](?).keysToArray[352038](arg _mt[352042]:_MT[201], arg this[352040]:map[352283](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[637430] "RVV" "temp"
    (352050 call(462352 call (partial) _enter _mt[203] this[352040]))
    (573287 'end of statement')
    Defer
    {
      { scopeless
        (352052 call(462356 call (partial) _leave _mt[203] this[352040]))
      }
    }
    unknown call_tmp[973046] "expr temp" "maybe param" "maybe type" "temp"
    (973049 'move' call_tmp[973046](462361 call keyType _mt[203] this[352040]))
    unknown call_tmp[973051] "expr temp" "maybe param" "maybe type" "temp"
    (973054 'move' call_tmp[973051](352065 call isCopyableType call_tmp[973046]))
    unknown call_tmp[973056] "expr temp" "maybe param" "maybe type" "temp"
    (973059 'move' call_tmp[973056](352062 call ! call_tmp[973051]))
    unknown call_tmp[973061] "expr temp" "maybe param" "maybe type" "temp"
    (973064 'move' call_tmp[973061](352067 call _cond_test call_tmp[973056]))
    if call_tmp[973061]
    {
      (352057 call compilerError "keysToArray requires a copyable key type")
    }
    unknown A[352073] "dead at end of block" "insert auto destroy"
    unknown call_tmp[973066] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (973069 'move' call_tmp[973066](352077 call chpl_build_low_bounded_range 0))
    unknown call_tmp[973073] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (973076 'move' call_tmp[973073](462365 call _size _mt[203] this[352040]))
    unknown call_tmp[973078] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (973081 'move' call_tmp[973078](352074 call # call_tmp[973066] call_tmp[973073]))
    unknown call_tmp[973083] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (973086 'move' call_tmp[973083](352080 call chpl__ensureDomainExpr call_tmp[973078]))
    unknown call_tmp[973090] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (973093 'move' call_tmp[973090](462370 call keyType _mt[203] this[352040]))
    unknown call_tmp[973095] "expr temp" "maybe param" "maybe type" "temp"
    (973098 'move' call_tmp[973095](352083 call chpl__buildArrayRuntimeType call_tmp[973083] call_tmp[973090]))
    (656711 'default init var' A[352073] call_tmp[973095])
    (352086 'end of statement')
    {
      unknown _indexOfInterest[352104] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[352105] "expr temp" "temp"
      unknown call_tmp[973100] "expr temp" "maybe param" "maybe type" "temp"
      (973103 'move' call_tmp[973100](352114 call _getIterator A[352073]))
      unknown call_tmp[973107] "expr temp" "maybe param" "maybe type" "temp"
      (973110 'move' call_tmp[973107](352117 call(462377 call (partial) keys _mt[203] this[352040])))
      unknown call_tmp[973112] "expr temp" "maybe param" "maybe type" "temp"
      (973115 'move' call_tmp[973112](352118 call _getIterator call_tmp[973107]))
      (352120 'move' _iterator[352105](352098 call _build_tuple call_tmp[973100] call_tmp[973112]))
      Defer
      {
        {
          (352148 call _freeIterator _iterator[352105])
        }
      }
      { scopeless type
        (352125 'move' _indexOfInterest[352104](352122 call iteratorIndex _iterator[352105]))
      }
      ForLoop[352106]
      {
        (352130 call _check_tuple_var_decl _indexOfInterest[352104] 2)
        (573291 'end of statement')
        unknown a[352088] "index var" "insert auto destroy"
        (573292 'end of statement')
        (352137 'move' a[352088](352134 call _indexOfInterest[352104] 0))
        (573293 'end of statement' a[352088])
        unknown k[352090] "index var" "insert auto destroy"
        (573295 'end of statement')
        (352143 'move' k[352090](352140 call _indexOfInterest[352104] 1))
        (573296 'end of statement' k[352090])
        {
          (352100 call = a[352088] k[352090])
          (573298 'end of statement' a[352088] k[352090])
        }
        label _continueLabel[352109]
        _indexOfInterest[352104]
        _iterator[352105]
      }
      label _breakLabel[352110]
    }
    unknown call_tmp[973119] "expr temp" "maybe param" "maybe type" "temp"
    (973122 'move' call_tmp[973119](637436 call keyType _mt[203] this[352040]))
    (637439 call chpl__checkRetEltTypeMatch A[352073] call_tmp[973119])
    (637441 'move' ret[637430] A[352073])
    gotoReturn _end_keysToArray[637428] _end_keysToArray[637428]
    (573301 'end of statement' A[352073])
    label _end_keysToArray[637428]
    (637432 return ret[637430])
  }
  function map[352283](?).valuesToArray[352160](arg _mt[352164]:_MT[201], arg this[352162]:map[352283](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[637447] "RVV" "temp"
    (352172 call(462387 call (partial) _enter _mt[203] this[352162]))
    (573303 'end of statement')
    Defer
    {
      { scopeless
        (352174 call(462391 call (partial) _leave _mt[203] this[352162]))
      }
    }
    unknown call_tmp[973130] "expr temp" "maybe param" "maybe type" "temp"
    (973133 'move' call_tmp[973130](462396 call valType _mt[203] this[352162]))
    unknown call_tmp[973135] "expr temp" "maybe param" "maybe type" "temp"
    (973138 'move' call_tmp[973135](352187 call isCopyableType call_tmp[973130]))
    unknown call_tmp[973140] "expr temp" "maybe param" "maybe type" "temp"
    (973143 'move' call_tmp[973140](352184 call ! call_tmp[973135]))
    unknown call_tmp[973145] "expr temp" "maybe param" "maybe type" "temp"
    (973148 'move' call_tmp[973145](352189 call _cond_test call_tmp[973140]))
    if call_tmp[973145]
    {
      (352179 call compilerError "valuesToArray requires a copyable value type")
    }
    unknown A[352195] "dead at end of block" "insert auto destroy"
    unknown call_tmp[973150] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (973153 'move' call_tmp[973150](352199 call chpl_build_low_bounded_range 0))
    unknown call_tmp[973157] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (973160 'move' call_tmp[973157](462400 call _size _mt[203] this[352162]))
    unknown call_tmp[973162] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (973165 'move' call_tmp[973162](352196 call # call_tmp[973150] call_tmp[973157]))
    unknown call_tmp[973167] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (973170 'move' call_tmp[973167](352202 call chpl__ensureDomainExpr call_tmp[973162]))
    unknown call_tmp[973174] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (973177 'move' call_tmp[973174](462405 call valType _mt[203] this[352162]))
    unknown call_tmp[973179] "expr temp" "maybe param" "maybe type" "temp"
    (973182 'move' call_tmp[973179](352205 call chpl__buildArrayRuntimeType call_tmp[973167] call_tmp[973174]))
    (656713 'default init var' A[352195] call_tmp[973179])
    (352208 'end of statement')
    {
      unknown _indexOfInterest[352226] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[352227] "expr temp" "temp"
      unknown call_tmp[973184] "expr temp" "maybe param" "maybe type" "temp"
      (973187 'move' call_tmp[973184](352236 call _getIterator A[352195]))
      unknown call_tmp[973191] "expr temp" "maybe param" "maybe type" "temp"
      (973194 'move' call_tmp[973191](352239 call(462412 call (partial) values _mt[203] this[352162])))
      unknown call_tmp[973196] "expr temp" "maybe param" "maybe type" "temp"
      (973199 'move' call_tmp[973196](352240 call _getIterator call_tmp[973191]))
      (352242 'move' _iterator[352227](352220 call _build_tuple call_tmp[973184] call_tmp[973196]))
      Defer
      {
        {
          (352270 call _freeIterator _iterator[352227])
        }
      }
      { scopeless type
        (352247 'move' _indexOfInterest[352226](352244 call iteratorIndex _iterator[352227]))
      }
      ForLoop[352228]
      {
        (352252 call _check_tuple_var_decl _indexOfInterest[352226] 2)
        (573307 'end of statement')
        unknown a[352210] "index var" "insert auto destroy"
        (573308 'end of statement')
        (352259 'move' a[352210](352256 call _indexOfInterest[352226] 0))
        (573309 'end of statement' a[352210])
        unknown v[352212] "index var" "insert auto destroy"
        (573311 'end of statement')
        (352265 'move' v[352212](352262 call _indexOfInterest[352226] 1))
        (573312 'end of statement' v[352212])
        {
          (352222 call = a[352210] v[352212])
          (573314 'end of statement' a[352210] v[352212])
        }
        label _continueLabel[352231]
        _indexOfInterest[352226]
        _iterator[352227]
      }
      label _breakLabel[352232]
    }
    unknown call_tmp[973203] "expr temp" "maybe param" "maybe type" "temp"
    (973206 'move' call_tmp[973203](637453 call valType _mt[203] this[352162]))
    (637456 call chpl__checkRetEltTypeMatch A[352195] call_tmp[973203])
    (637458 'move' ret[637447] A[352195])
    gotoReturn _end_valuesToArray[637445] _end_valuesToArray[637445]
    (573317 'end of statement' A[352195])
    label _end_valuesToArray[637445]
    (637449 return ret[637447])
  }
  function map[352283](?).keyType[1388425](arg _mt[1388427]:_MT[201], arg this[1388429]:map[352283](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[1388448] "RVV" "temp" "type variable"
    unknown call_tmp[1388462] "expr temp" "maybe param" "maybe type" "temp"
    (1388465 'move' call_tmp[1388462](1388434 'is bound' this[1388429] c"keyType"))
    if call_tmp[1388462]
    {
      unknown call_tmp[1388467] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1388470 'move' call_tmp[1388467](1388433 '.v' this[1388429] c"keyType"))
      (1388453 'move' ret[1388448](1388452 'deref' call_tmp[1388467]))
      gotoReturn _end_keyType[1388446] _end_keyType[1388446]
    }
    {
      (1388458 'move' ret[1388448](1388457 'deref' _uninstantiated[225]))
      gotoReturn _end_keyType[1388446] _end_keyType[1388446]
    }
    label _end_keyType[1388446]
    (1388450 return ret[1388448])
  }
  function map[352283](?).keyType[1388472](arg _mt[1388474]:_MT[201], arg this[1388476]:map[352283](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1388495] "RVV" "temp" "type variable"
    unknown call_tmp[1388509] "expr temp" "maybe param" "maybe type" "temp"
    (1388512 'move' call_tmp[1388509](1388481 'is bound' this[1388476] c"keyType"))
    if call_tmp[1388509]
    {
      unknown call_tmp[1388514] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1388517 'move' call_tmp[1388514](1388480 '.v' this[1388476] c"keyType"))
      (1388500 'move' ret[1388495](1388499 'deref' call_tmp[1388514]))
      gotoReturn _end_keyType[1388493] _end_keyType[1388493]
    }
    {
      (1388505 'move' ret[1388495](1388504 'deref' _uninstantiated[225]))
      gotoReturn _end_keyType[1388493] _end_keyType[1388493]
    }
    label _end_keyType[1388493]
    (1388497 return ret[1388495])
  }
  function map[352283](?).valType[1388519](arg _mt[1388521]:_MT[201], arg this[1388523]:map[352283](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[1388542] "RVV" "temp" "type variable"
    unknown call_tmp[1388556] "expr temp" "maybe param" "maybe type" "temp"
    (1388559 'move' call_tmp[1388556](1388528 'is bound' this[1388523] c"valType"))
    if call_tmp[1388556]
    {
      unknown call_tmp[1388561] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1388564 'move' call_tmp[1388561](1388527 '.v' this[1388523] c"valType"))
      (1388547 'move' ret[1388542](1388546 'deref' call_tmp[1388561]))
      gotoReturn _end_valType[1388540] _end_valType[1388540]
    }
    {
      (1388552 'move' ret[1388542](1388551 'deref' _uninstantiated[225]))
      gotoReturn _end_valType[1388540] _end_valType[1388540]
    }
    label _end_valType[1388540]
    (1388544 return ret[1388542])
  }
  function map[352283](?).valType[1388566](arg _mt[1388568]:_MT[201], arg this[1388570]:map[352283](?)) type : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1388589] "RVV" "temp" "type variable"
    unknown call_tmp[1388603] "expr temp" "maybe param" "maybe type" "temp"
    (1388606 'move' call_tmp[1388603](1388575 'is bound' this[1388570] c"valType"))
    if call_tmp[1388603]
    {
      unknown call_tmp[1388608] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (1388611 'move' call_tmp[1388608](1388574 '.v' this[1388570] c"valType"))
      (1388594 'move' ret[1388589](1388593 'deref' call_tmp[1388608]))
      gotoReturn _end_valType[1388587] _end_valType[1388587]
    }
    {
      (1388599 'move' ret[1388589](1388598 'deref' _uninstantiated[225]))
      gotoReturn _end_valType[1388587] _end_valType[1388587]
    }
    label _end_valType[1388587]
    (1388591 return ret[1388589])
  }
  function map[352283](?).parSafe[1388613](arg _mt[1388615]:_MT[201], arg this[1388617]:map[352283](?)) param : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this" "@unstable"
  {
    unknown ret[1388636] "RVV" "param" "temp"
    unknown call_tmp[1388650] "expr temp" "maybe param" "maybe type" "temp"
    (1388653 'move' call_tmp[1388650](1388622 'is bound' this[1388617] c"parSafe"))
    if call_tmp[1388650]
    {
      unknown call_tmp[1388655] "expr temp" "maybe param" "maybe type" "temp"
      (1388658 'move' call_tmp[1388655](1388621 '.' this[1388617] c"parSafe"))
      (1388641 'move' ret[1388636](1388640 'deref' call_tmp[1388655]))
      gotoReturn _end_parSafe[1388634] _end_parSafe[1388634]
    }
    {
      (1388646 'move' ret[1388636](1388645 'deref' ?[227]))
      gotoReturn _end_parSafe[1388634] _end_parSafe[1388634]
    }
    label _end_parSafe[1388634]
    (1388638 return ret[1388636])
  }
  function map[352283](?).parSafe[1388660](arg _mt[1388662]:_MT[201], arg this[1388664]:map[352283](?)) param : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "@unstable"
  {
    unknown ret[1388683] "RVV" "param" "temp"
    unknown call_tmp[1388697] "expr temp" "maybe param" "maybe type" "temp"
    (1388700 'move' call_tmp[1388697](1388669 'is bound' this[1388664] c"parSafe"))
    if call_tmp[1388697]
    {
      unknown call_tmp[1388702] "expr temp" "maybe param" "maybe type" "temp"
      (1388705 'move' call_tmp[1388702](1388668 '.' this[1388664] c"parSafe"))
      (1388688 'move' ret[1388683](1388687 'deref' call_tmp[1388702]))
      gotoReturn _end_parSafe[1388681] _end_parSafe[1388681]
    }
    {
      (1388693 'move' ret[1388683](1388692 'deref' ?[227]))
      gotoReturn _end_parSafe[1388681] _end_parSafe[1388681]
    }
    label _end_parSafe[1388681]
    (1388685 return ret[1388683])
  }
  function map[352283](?).resizeThreshold[1388707](arg _mt[1388709]:_MT[201], arg this[1388711]:map[352283](?)) const ref : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to a const"
  {
    unknown ret[1388721] "RVV" "temp"
    unknown call_tmp[1388728] "expr temp" "maybe param" "maybe type" "temp"
    (1388731 'move' call_tmp[1388728](1388715 '.' this[1388711] c"resizeThreshold"))
    (1388726 'move' ret[1388721](1388725 'addr of' call_tmp[1388728]))
    (1388723 return ret[1388721])
  }
  function map[352283](?).table[1388733](arg _mt[1388735]:_MT[201], ref arg this[1388737]:map[352283](?)) ref : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[1388747] "RVV" "temp"
    unknown call_tmp[1388754] "expr temp" "maybe param" "maybe type" "temp"
    (1388757 'move' call_tmp[1388754](1388741 '.' this[1388737] c"table"))
    (1388752 'move' ret[1388747](1388751 'addr of' call_tmp[1388754]))
    (1388749 return ret[1388747])
  }
  function map[352283](?)._lock[1388759](arg _mt[1388761]:_MT[201], ref arg this[1388763]:map[352283](?)) ref : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[1388773] "RVV" "temp"
    unknown call_tmp[1388780] "expr temp" "maybe param" "maybe type" "temp"
    (1388783 'move' call_tmp[1388780](1388767 '.' this[1388763] c"_lock"))
    (1388778 'move' ret[1388773](1388777 'addr of' call_tmp[1388780]))
    (1388775 return ret[1388773])
  }
  function map[352283](?).deinit[1388785](arg _mt[1388787]:_MT[201], arg this[1388789]:map[352283](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (1388797 return _void[46])
  }
  function chpl_fields_are_comparable[1388815](arg _arg1[1388817]:map[352283](?), arg _arg2[1388818]:map[352283](?)) param : bool[19] "compiler generated" "last resort" "param"
  {
    val ret[1388867]:bool[19] "RVV" "param" "temp"
    unknown call_tmp[1388874] "expr temp" "maybe param" "maybe type" "temp"
    (1388877 'move' call_tmp[1388874](1388821 call parSafe _mt[203] _arg1[1388817]))
    unknown call_tmp[1388879] "expr temp" "maybe param" "maybe type" "temp"
    (1388882 'move' call_tmp[1388879](1388825 call parSafe _mt[203] _arg2[1388818]))
    unknown call_tmp[1388884] "expr temp" "maybe param" "maybe type" "temp"
    (1388887 'move' call_tmp[1388884](1388829 'call resolves' c"<" call_tmp[1388874] call_tmp[1388879]))
    unknown call_tmp[1388889] "expr temp" "maybe param" "maybe type" "temp"
    (1388892 'move' call_tmp[1388889](1388831 call resizeThreshold _mt[203] _arg1[1388817]))
    unknown call_tmp[1388894] "expr temp" "maybe param" "maybe type" "temp"
    (1388897 'move' call_tmp[1388894](1388835 call resizeThreshold _mt[203] _arg2[1388818]))
    unknown call_tmp[1388899] "expr temp" "maybe param" "maybe type" "temp"
    (1388902 'move' call_tmp[1388899](1388839 'call resolves' c"<" call_tmp[1388889] call_tmp[1388894]))
    unknown call_tmp[1388904] "expr temp" "maybe param" "maybe type" "temp"
    (1388907 'move' call_tmp[1388904](1388841 call table _mt[203] _arg1[1388817]))
    unknown call_tmp[1388909] "expr temp" "maybe param" "maybe type" "temp"
    (1388912 'move' call_tmp[1388909](1388845 call table _mt[203] _arg2[1388818]))
    unknown call_tmp[1388914] "expr temp" "maybe param" "maybe type" "temp"
    (1388917 'move' call_tmp[1388914](1388849 'call resolves' c"<" call_tmp[1388904] call_tmp[1388909]))
    unknown call_tmp[1388919] "expr temp" "maybe param" "maybe type" "temp"
    (1388922 'move' call_tmp[1388919](1388851 call _lock _mt[203] _arg1[1388817]))
    unknown call_tmp[1388924] "expr temp" "maybe param" "maybe type" "temp"
    (1388927 'move' call_tmp[1388924](1388855 call _lock _mt[203] _arg2[1388818]))
    unknown call_tmp[1388929] "expr temp" "maybe param" "maybe type" "temp"
    (1388932 'move' call_tmp[1388929](1388859 'call resolves' c"<" call_tmp[1388919] call_tmp[1388924]))
    unknown call_tmp[1388934] "expr temp" "maybe param" "maybe type" "temp"
    (1388937 'move' call_tmp[1388934](1388861 '&' call_tmp[1388884] call_tmp[1388899] call_tmp[1388914] call_tmp[1388929]))
    (1388872 'move' ret[1388867](1388871 'deref' call_tmp[1388934]))
    (1388869 return ret[1388867])
  }
  function map[352283](?).<[1388799](arg _mt[1388801]:_MT[201], arg this[1388803]:map[352283](?), arg _arg1[1388805]:map[352283](?), arg _arg2[1388806]:map[352283](?)) : bool[19] "compiler generated" "last resort" "method" "operator"
  {
    val ret[1389071]:bool[19] "RVV" "temp"
    unknown call_tmp[1389118] "expr temp" "maybe param" "maybe type" "temp"
    (1389121 'move' call_tmp[1389118](1388945 call parSafe _mt[203] _arg1[1388805]))
    unknown call_tmp[1389123] "expr temp" "maybe param" "maybe type" "temp"
    (1389126 'move' call_tmp[1389123](1388949 call parSafe _mt[203] _arg2[1388806]))
    unknown call_tmp[1389128] "expr temp" "maybe param" "maybe type" "temp"
    (1389131 'move' call_tmp[1389128](1388953 call chpl_field_lt call_tmp[1389118] call_tmp[1389123]))
    if call_tmp[1389128]
    {
      (1389076 'move' ret[1389071](1389075 'deref' 1))
      gotoReturn _end_<[1389069] _end_<[1389069]
    }
    unknown call_tmp[1389133] "expr temp" "maybe param" "maybe type" "temp"
    (1389136 'move' call_tmp[1389133](1388959 call parSafe _mt[203] _arg1[1388805]))
    unknown call_tmp[1389138] "expr temp" "maybe param" "maybe type" "temp"
    (1389141 'move' call_tmp[1389138](1388963 call parSafe _mt[203] _arg2[1388806]))
    unknown call_tmp[1389143] "expr temp" "maybe param" "maybe type" "temp"
    (1389146 'move' call_tmp[1389143](1388967 call chpl_field_gt call_tmp[1389133] call_tmp[1389138]))
    if call_tmp[1389143]
    {
      (1389081 'move' ret[1389071](1389080 'deref' 0))
      gotoReturn _end_<[1389069] _end_<[1389069]
    }
    unknown call_tmp[1389148] "expr temp" "maybe param" "maybe type" "temp"
    (1389151 'move' call_tmp[1389148](1388973 call resizeThreshold _mt[203] _arg1[1388805]))
    unknown call_tmp[1389153] "expr temp" "maybe param" "maybe type" "temp"
    (1389156 'move' call_tmp[1389153](1388977 call resizeThreshold _mt[203] _arg2[1388806]))
    unknown call_tmp[1389158] "expr temp" "maybe param" "maybe type" "temp"
    (1389161 'move' call_tmp[1389158](1388981 call chpl_field_lt call_tmp[1389148] call_tmp[1389153]))
    if call_tmp[1389158]
    {
      (1389086 'move' ret[1389071](1389085 'deref' 1))
      gotoReturn _end_<[1389069] _end_<[1389069]
    }
    unknown call_tmp[1389163] "expr temp" "maybe param" "maybe type" "temp"
    (1389166 'move' call_tmp[1389163](1388987 call resizeThreshold _mt[203] _arg1[1388805]))
    unknown call_tmp[1389168] "expr temp" "maybe param" "maybe type" "temp"
    (1389171 'move' call_tmp[1389168](1388991 call resizeThreshold _mt[203] _arg2[1388806]))
    unknown call_tmp[1389173] "expr temp" "maybe param" "maybe type" "temp"
    (1389176 'move' call_tmp[1389173](1388995 call chpl_field_gt call_tmp[1389163] call_tmp[1389168]))
    if call_tmp[1389173]
    {
      (1389091 'move' ret[1389071](1389090 'deref' 0))
      gotoReturn _end_<[1389069] _end_<[1389069]
    }
    unknown call_tmp[1389178] "expr temp" "maybe param" "maybe type" "temp"
    (1389181 'move' call_tmp[1389178](1389001 call table _mt[203] _arg1[1388805]))
    unknown call_tmp[1389183] "expr temp" "maybe param" "maybe type" "temp"
    (1389186 'move' call_tmp[1389183](1389005 call table _mt[203] _arg2[1388806]))
    unknown call_tmp[1389188] "expr temp" "maybe param" "maybe type" "temp"
    (1389191 'move' call_tmp[1389188](1389009 call chpl_field_lt call_tmp[1389178] call_tmp[1389183]))
    if call_tmp[1389188]
    {
      (1389096 'move' ret[1389071](1389095 'deref' 1))
      gotoReturn _end_<[1389069] _end_<[1389069]
    }
    unknown call_tmp[1389193] "expr temp" "maybe param" "maybe type" "temp"
    (1389196 'move' call_tmp[1389193](1389015 call table _mt[203] _arg1[1388805]))
    unknown call_tmp[1389198] "expr temp" "maybe param" "maybe type" "temp"
    (1389201 'move' call_tmp[1389198](1389019 call table _mt[203] _arg2[1388806]))
    unknown call_tmp[1389203] "expr temp" "maybe param" "maybe type" "temp"
    (1389206 'move' call_tmp[1389203](1389023 call chpl_field_gt call_tmp[1389193] call_tmp[1389198]))
    if call_tmp[1389203]
    {
      (1389101 'move' ret[1389071](1389100 'deref' 0))
      gotoReturn _end_<[1389069] _end_<[1389069]
    }
    unknown call_tmp[1389208] "expr temp" "maybe param" "maybe type" "temp"
    (1389211 'move' call_tmp[1389208](1389029 call _lock _mt[203] _arg1[1388805]))
    unknown call_tmp[1389213] "expr temp" "maybe param" "maybe type" "temp"
    (1389216 'move' call_tmp[1389213](1389033 call _lock _mt[203] _arg2[1388806]))
    unknown call_tmp[1389218] "expr temp" "maybe param" "maybe type" "temp"
    (1389221 'move' call_tmp[1389218](1389037 call chpl_field_lt call_tmp[1389208] call_tmp[1389213]))
    if call_tmp[1389218]
    {
      (1389106 'move' ret[1389071](1389105 'deref' 1))
      gotoReturn _end_<[1389069] _end_<[1389069]
    }
    unknown call_tmp[1389223] "expr temp" "maybe param" "maybe type" "temp"
    (1389226 'move' call_tmp[1389223](1389043 call _lock _mt[203] _arg1[1388805]))
    unknown call_tmp[1389228] "expr temp" "maybe param" "maybe type" "temp"
    (1389231 'move' call_tmp[1389228](1389047 call _lock _mt[203] _arg2[1388806]))
    unknown call_tmp[1389233] "expr temp" "maybe param" "maybe type" "temp"
    (1389236 'move' call_tmp[1389233](1389051 call chpl_field_gt call_tmp[1389223] call_tmp[1389228]))
    if call_tmp[1389233]
    {
      (1389111 'move' ret[1389071](1389110 'deref' 0))
      gotoReturn _end_<[1389069] _end_<[1389069]
    }
    (1389116 'move' ret[1389071](1389115 'deref' 0))
    label _end_<[1389069]
    (1389073 return ret[1389071])
  }
  where {
    unknown call_tmp[1389238] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1389241 'move' call_tmp[1389238](1388809 'typeof' _arg1[1388805]))
    unknown call_tmp[1389243] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1389246 'move' call_tmp[1389243](1388811 'typeof' _arg2[1388806]))
    unknown call_tmp[1389248] "expr temp" "maybe param" "maybe type" "temp"
    (1389251 'move' call_tmp[1389248](1388813 call == call_tmp[1389238] call_tmp[1389243]))
    unknown call_tmp[1389253] "expr temp" "maybe param" "maybe type" "temp"
    (1389256 'move' call_tmp[1389253](1388939 call chpl_fields_are_comparable[1388815] _arg1[1388805] _arg2[1388806]))
    (1388943 '&' call_tmp[1389248] call_tmp[1389253])
  }
  function chpl_fields_are_comparable[1389274](arg _arg1[1389276]:map[352283](?), arg _arg2[1389277]:map[352283](?)) param : bool[19] "compiler generated" "last resort" "param"
  {
    val ret[1389326]:bool[19] "RVV" "param" "temp"
    unknown call_tmp[1389333] "expr temp" "maybe param" "maybe type" "temp"
    (1389336 'move' call_tmp[1389333](1389280 call parSafe _mt[203] _arg1[1389276]))
    unknown call_tmp[1389338] "expr temp" "maybe param" "maybe type" "temp"
    (1389341 'move' call_tmp[1389338](1389284 call parSafe _mt[203] _arg2[1389277]))
    unknown call_tmp[1389343] "expr temp" "maybe param" "maybe type" "temp"
    (1389346 'move' call_tmp[1389343](1389288 'call resolves' c"<=" call_tmp[1389333] call_tmp[1389338]))
    unknown call_tmp[1389348] "expr temp" "maybe param" "maybe type" "temp"
    (1389351 'move' call_tmp[1389348](1389290 call resizeThreshold _mt[203] _arg1[1389276]))
    unknown call_tmp[1389353] "expr temp" "maybe param" "maybe type" "temp"
    (1389356 'move' call_tmp[1389353](1389294 call resizeThreshold _mt[203] _arg2[1389277]))
    unknown call_tmp[1389358] "expr temp" "maybe param" "maybe type" "temp"
    (1389361 'move' call_tmp[1389358](1389298 'call resolves' c"<=" call_tmp[1389348] call_tmp[1389353]))
    unknown call_tmp[1389363] "expr temp" "maybe param" "maybe type" "temp"
    (1389366 'move' call_tmp[1389363](1389300 call table _mt[203] _arg1[1389276]))
    unknown call_tmp[1389368] "expr temp" "maybe param" "maybe type" "temp"
    (1389371 'move' call_tmp[1389368](1389304 call table _mt[203] _arg2[1389277]))
    unknown call_tmp[1389373] "expr temp" "maybe param" "maybe type" "temp"
    (1389376 'move' call_tmp[1389373](1389308 'call resolves' c"<=" call_tmp[1389363] call_tmp[1389368]))
    unknown call_tmp[1389378] "expr temp" "maybe param" "maybe type" "temp"
    (1389381 'move' call_tmp[1389378](1389310 call _lock _mt[203] _arg1[1389276]))
    unknown call_tmp[1389383] "expr temp" "maybe param" "maybe type" "temp"
    (1389386 'move' call_tmp[1389383](1389314 call _lock _mt[203] _arg2[1389277]))
    unknown call_tmp[1389388] "expr temp" "maybe param" "maybe type" "temp"
    (1389391 'move' call_tmp[1389388](1389318 'call resolves' c"<=" call_tmp[1389378] call_tmp[1389383]))
    unknown call_tmp[1389393] "expr temp" "maybe param" "maybe type" "temp"
    (1389396 'move' call_tmp[1389393](1389320 '&' call_tmp[1389343] call_tmp[1389358] call_tmp[1389373] call_tmp[1389388]))
    (1389331 'move' ret[1389326](1389330 'deref' call_tmp[1389393]))
    (1389328 return ret[1389326])
  }
  function map[352283](?).<=[1389258](arg _mt[1389260]:_MT[201], arg this[1389262]:map[352283](?), arg _arg1[1389264]:map[352283](?), arg _arg2[1389265]:map[352283](?)) : bool[19] "compiler generated" "last resort" "method" "operator"
  {
    val ret[1389530]:bool[19] "RVV" "temp"
    unknown call_tmp[1389577] "expr temp" "maybe param" "maybe type" "temp"
    (1389580 'move' call_tmp[1389577](1389404 call parSafe _mt[203] _arg1[1389264]))
    unknown call_tmp[1389582] "expr temp" "maybe param" "maybe type" "temp"
    (1389585 'move' call_tmp[1389582](1389408 call parSafe _mt[203] _arg2[1389265]))
    unknown call_tmp[1389587] "expr temp" "maybe param" "maybe type" "temp"
    (1389590 'move' call_tmp[1389587](1389412 call chpl_field_lt call_tmp[1389577] call_tmp[1389582]))
    if call_tmp[1389587]
    {
      (1389535 'move' ret[1389530](1389534 'deref' 1))
      gotoReturn _end_<=[1389528] _end_<=[1389528]
    }
    unknown call_tmp[1389592] "expr temp" "maybe param" "maybe type" "temp"
    (1389595 'move' call_tmp[1389592](1389418 call parSafe _mt[203] _arg1[1389264]))
    unknown call_tmp[1389597] "expr temp" "maybe param" "maybe type" "temp"
    (1389600 'move' call_tmp[1389597](1389422 call parSafe _mt[203] _arg2[1389265]))
    unknown call_tmp[1389602] "expr temp" "maybe param" "maybe type" "temp"
    (1389605 'move' call_tmp[1389602](1389426 call chpl_field_gt call_tmp[1389592] call_tmp[1389597]))
    if call_tmp[1389602]
    {
      (1389540 'move' ret[1389530](1389539 'deref' 0))
      gotoReturn _end_<=[1389528] _end_<=[1389528]
    }
    unknown call_tmp[1389607] "expr temp" "maybe param" "maybe type" "temp"
    (1389610 'move' call_tmp[1389607](1389432 call resizeThreshold _mt[203] _arg1[1389264]))
    unknown call_tmp[1389612] "expr temp" "maybe param" "maybe type" "temp"
    (1389615 'move' call_tmp[1389612](1389436 call resizeThreshold _mt[203] _arg2[1389265]))
    unknown call_tmp[1389617] "expr temp" "maybe param" "maybe type" "temp"
    (1389620 'move' call_tmp[1389617](1389440 call chpl_field_lt call_tmp[1389607] call_tmp[1389612]))
    if call_tmp[1389617]
    {
      (1389545 'move' ret[1389530](1389544 'deref' 1))
      gotoReturn _end_<=[1389528] _end_<=[1389528]
    }
    unknown call_tmp[1389622] "expr temp" "maybe param" "maybe type" "temp"
    (1389625 'move' call_tmp[1389622](1389446 call resizeThreshold _mt[203] _arg1[1389264]))
    unknown call_tmp[1389627] "expr temp" "maybe param" "maybe type" "temp"
    (1389630 'move' call_tmp[1389627](1389450 call resizeThreshold _mt[203] _arg2[1389265]))
    unknown call_tmp[1389632] "expr temp" "maybe param" "maybe type" "temp"
    (1389635 'move' call_tmp[1389632](1389454 call chpl_field_gt call_tmp[1389622] call_tmp[1389627]))
    if call_tmp[1389632]
    {
      (1389550 'move' ret[1389530](1389549 'deref' 0))
      gotoReturn _end_<=[1389528] _end_<=[1389528]
    }
    unknown call_tmp[1389637] "expr temp" "maybe param" "maybe type" "temp"
    (1389640 'move' call_tmp[1389637](1389460 call table _mt[203] _arg1[1389264]))
    unknown call_tmp[1389642] "expr temp" "maybe param" "maybe type" "temp"
    (1389645 'move' call_tmp[1389642](1389464 call table _mt[203] _arg2[1389265]))
    unknown call_tmp[1389647] "expr temp" "maybe param" "maybe type" "temp"
    (1389650 'move' call_tmp[1389647](1389468 call chpl_field_lt call_tmp[1389637] call_tmp[1389642]))
    if call_tmp[1389647]
    {
      (1389555 'move' ret[1389530](1389554 'deref' 1))
      gotoReturn _end_<=[1389528] _end_<=[1389528]
    }
    unknown call_tmp[1389652] "expr temp" "maybe param" "maybe type" "temp"
    (1389655 'move' call_tmp[1389652](1389474 call table _mt[203] _arg1[1389264]))
    unknown call_tmp[1389657] "expr temp" "maybe param" "maybe type" "temp"
    (1389660 'move' call_tmp[1389657](1389478 call table _mt[203] _arg2[1389265]))
    unknown call_tmp[1389662] "expr temp" "maybe param" "maybe type" "temp"
    (1389665 'move' call_tmp[1389662](1389482 call chpl_field_gt call_tmp[1389652] call_tmp[1389657]))
    if call_tmp[1389662]
    {
      (1389560 'move' ret[1389530](1389559 'deref' 0))
      gotoReturn _end_<=[1389528] _end_<=[1389528]
    }
    unknown call_tmp[1389667] "expr temp" "maybe param" "maybe type" "temp"
    (1389670 'move' call_tmp[1389667](1389488 call _lock _mt[203] _arg1[1389264]))
    unknown call_tmp[1389672] "expr temp" "maybe param" "maybe type" "temp"
    (1389675 'move' call_tmp[1389672](1389492 call _lock _mt[203] _arg2[1389265]))
    unknown call_tmp[1389677] "expr temp" "maybe param" "maybe type" "temp"
    (1389680 'move' call_tmp[1389677](1389496 call chpl_field_lt call_tmp[1389667] call_tmp[1389672]))
    if call_tmp[1389677]
    {
      (1389565 'move' ret[1389530](1389564 'deref' 1))
      gotoReturn _end_<=[1389528] _end_<=[1389528]
    }
    unknown call_tmp[1389682] "expr temp" "maybe param" "maybe type" "temp"
    (1389685 'move' call_tmp[1389682](1389502 call _lock _mt[203] _arg1[1389264]))
    unknown call_tmp[1389687] "expr temp" "maybe param" "maybe type" "temp"
    (1389690 'move' call_tmp[1389687](1389506 call _lock _mt[203] _arg2[1389265]))
    unknown call_tmp[1389692] "expr temp" "maybe param" "maybe type" "temp"
    (1389695 'move' call_tmp[1389692](1389510 call chpl_field_gt call_tmp[1389682] call_tmp[1389687]))
    if call_tmp[1389692]
    {
      (1389570 'move' ret[1389530](1389569 'deref' 0))
      gotoReturn _end_<=[1389528] _end_<=[1389528]
    }
    (1389575 'move' ret[1389530](1389574 'deref' 1))
    label _end_<=[1389528]
    (1389532 return ret[1389530])
  }
  where {
    unknown call_tmp[1389697] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1389700 'move' call_tmp[1389697](1389268 'typeof' _arg1[1389264]))
    unknown call_tmp[1389702] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1389705 'move' call_tmp[1389702](1389270 'typeof' _arg2[1389265]))
    unknown call_tmp[1389707] "expr temp" "maybe param" "maybe type" "temp"
    (1389710 'move' call_tmp[1389707](1389272 call == call_tmp[1389697] call_tmp[1389702]))
    unknown call_tmp[1389712] "expr temp" "maybe param" "maybe type" "temp"
    (1389715 'move' call_tmp[1389712](1389398 call chpl_fields_are_comparable[1389274] _arg1[1389264] _arg2[1389265]))
    (1389402 '&' call_tmp[1389707] call_tmp[1389712])
  }
  function chpl_fields_are_comparable[1389733](arg _arg1[1389735]:map[352283](?), arg _arg2[1389736]:map[352283](?)) param : bool[19] "compiler generated" "last resort" "param"
  {
    val ret[1389785]:bool[19] "RVV" "param" "temp"
    unknown call_tmp[1389792] "expr temp" "maybe param" "maybe type" "temp"
    (1389795 'move' call_tmp[1389792](1389739 call parSafe _mt[203] _arg1[1389735]))
    unknown call_tmp[1389797] "expr temp" "maybe param" "maybe type" "temp"
    (1389800 'move' call_tmp[1389797](1389743 call parSafe _mt[203] _arg2[1389736]))
    unknown call_tmp[1389802] "expr temp" "maybe param" "maybe type" "temp"
    (1389805 'move' call_tmp[1389802](1389747 'call resolves' c">" call_tmp[1389792] call_tmp[1389797]))
    unknown call_tmp[1389807] "expr temp" "maybe param" "maybe type" "temp"
    (1389810 'move' call_tmp[1389807](1389749 call resizeThreshold _mt[203] _arg1[1389735]))
    unknown call_tmp[1389812] "expr temp" "maybe param" "maybe type" "temp"
    (1389815 'move' call_tmp[1389812](1389753 call resizeThreshold _mt[203] _arg2[1389736]))
    unknown call_tmp[1389817] "expr temp" "maybe param" "maybe type" "temp"
    (1389820 'move' call_tmp[1389817](1389757 'call resolves' c">" call_tmp[1389807] call_tmp[1389812]))
    unknown call_tmp[1389822] "expr temp" "maybe param" "maybe type" "temp"
    (1389825 'move' call_tmp[1389822](1389759 call table _mt[203] _arg1[1389735]))
    unknown call_tmp[1389827] "expr temp" "maybe param" "maybe type" "temp"
    (1389830 'move' call_tmp[1389827](1389763 call table _mt[203] _arg2[1389736]))
    unknown call_tmp[1389832] "expr temp" "maybe param" "maybe type" "temp"
    (1389835 'move' call_tmp[1389832](1389767 'call resolves' c">" call_tmp[1389822] call_tmp[1389827]))
    unknown call_tmp[1389837] "expr temp" "maybe param" "maybe type" "temp"
    (1389840 'move' call_tmp[1389837](1389769 call _lock _mt[203] _arg1[1389735]))
    unknown call_tmp[1389842] "expr temp" "maybe param" "maybe type" "temp"
    (1389845 'move' call_tmp[1389842](1389773 call _lock _mt[203] _arg2[1389736]))
    unknown call_tmp[1389847] "expr temp" "maybe param" "maybe type" "temp"
    (1389850 'move' call_tmp[1389847](1389777 'call resolves' c">" call_tmp[1389837] call_tmp[1389842]))
    unknown call_tmp[1389852] "expr temp" "maybe param" "maybe type" "temp"
    (1389855 'move' call_tmp[1389852](1389779 '&' call_tmp[1389802] call_tmp[1389817] call_tmp[1389832] call_tmp[1389847]))
    (1389790 'move' ret[1389785](1389789 'deref' call_tmp[1389852]))
    (1389787 return ret[1389785])
  }
  function map[352283](?).>[1389717](arg _mt[1389719]:_MT[201], arg this[1389721]:map[352283](?), arg _arg1[1389723]:map[352283](?), arg _arg2[1389724]:map[352283](?)) : bool[19] "compiler generated" "last resort" "method" "operator"
  {
    val ret[1389989]:bool[19] "RVV" "temp"
    unknown call_tmp[1390036] "expr temp" "maybe param" "maybe type" "temp"
    (1390039 'move' call_tmp[1390036](1389863 call parSafe _mt[203] _arg1[1389723]))
    unknown call_tmp[1390041] "expr temp" "maybe param" "maybe type" "temp"
    (1390044 'move' call_tmp[1390041](1389867 call parSafe _mt[203] _arg2[1389724]))
    unknown call_tmp[1390046] "expr temp" "maybe param" "maybe type" "temp"
    (1390049 'move' call_tmp[1390046](1389871 call chpl_field_gt call_tmp[1390036] call_tmp[1390041]))
    if call_tmp[1390046]
    {
      (1389994 'move' ret[1389989](1389993 'deref' 1))
      gotoReturn _end_>[1389987] _end_>[1389987]
    }
    unknown call_tmp[1390051] "expr temp" "maybe param" "maybe type" "temp"
    (1390054 'move' call_tmp[1390051](1389877 call parSafe _mt[203] _arg1[1389723]))
    unknown call_tmp[1390056] "expr temp" "maybe param" "maybe type" "temp"
    (1390059 'move' call_tmp[1390056](1389881 call parSafe _mt[203] _arg2[1389724]))
    unknown call_tmp[1390061] "expr temp" "maybe param" "maybe type" "temp"
    (1390064 'move' call_tmp[1390061](1389885 call chpl_field_lt call_tmp[1390051] call_tmp[1390056]))
    if call_tmp[1390061]
    {
      (1389999 'move' ret[1389989](1389998 'deref' 0))
      gotoReturn _end_>[1389987] _end_>[1389987]
    }
    unknown call_tmp[1390066] "expr temp" "maybe param" "maybe type" "temp"
    (1390069 'move' call_tmp[1390066](1389891 call resizeThreshold _mt[203] _arg1[1389723]))
    unknown call_tmp[1390071] "expr temp" "maybe param" "maybe type" "temp"
    (1390074 'move' call_tmp[1390071](1389895 call resizeThreshold _mt[203] _arg2[1389724]))
    unknown call_tmp[1390076] "expr temp" "maybe param" "maybe type" "temp"
    (1390079 'move' call_tmp[1390076](1389899 call chpl_field_gt call_tmp[1390066] call_tmp[1390071]))
    if call_tmp[1390076]
    {
      (1390004 'move' ret[1389989](1390003 'deref' 1))
      gotoReturn _end_>[1389987] _end_>[1389987]
    }
    unknown call_tmp[1390081] "expr temp" "maybe param" "maybe type" "temp"
    (1390084 'move' call_tmp[1390081](1389905 call resizeThreshold _mt[203] _arg1[1389723]))
    unknown call_tmp[1390086] "expr temp" "maybe param" "maybe type" "temp"
    (1390089 'move' call_tmp[1390086](1389909 call resizeThreshold _mt[203] _arg2[1389724]))
    unknown call_tmp[1390091] "expr temp" "maybe param" "maybe type" "temp"
    (1390094 'move' call_tmp[1390091](1389913 call chpl_field_lt call_tmp[1390081] call_tmp[1390086]))
    if call_tmp[1390091]
    {
      (1390009 'move' ret[1389989](1390008 'deref' 0))
      gotoReturn _end_>[1389987] _end_>[1389987]
    }
    unknown call_tmp[1390096] "expr temp" "maybe param" "maybe type" "temp"
    (1390099 'move' call_tmp[1390096](1389919 call table _mt[203] _arg1[1389723]))
    unknown call_tmp[1390101] "expr temp" "maybe param" "maybe type" "temp"
    (1390104 'move' call_tmp[1390101](1389923 call table _mt[203] _arg2[1389724]))
    unknown call_tmp[1390106] "expr temp" "maybe param" "maybe type" "temp"
    (1390109 'move' call_tmp[1390106](1389927 call chpl_field_gt call_tmp[1390096] call_tmp[1390101]))
    if call_tmp[1390106]
    {
      (1390014 'move' ret[1389989](1390013 'deref' 1))
      gotoReturn _end_>[1389987] _end_>[1389987]
    }
    unknown call_tmp[1390111] "expr temp" "maybe param" "maybe type" "temp"
    (1390114 'move' call_tmp[1390111](1389933 call table _mt[203] _arg1[1389723]))
    unknown call_tmp[1390116] "expr temp" "maybe param" "maybe type" "temp"
    (1390119 'move' call_tmp[1390116](1389937 call table _mt[203] _arg2[1389724]))
    unknown call_tmp[1390121] "expr temp" "maybe param" "maybe type" "temp"
    (1390124 'move' call_tmp[1390121](1389941 call chpl_field_lt call_tmp[1390111] call_tmp[1390116]))
    if call_tmp[1390121]
    {
      (1390019 'move' ret[1389989](1390018 'deref' 0))
      gotoReturn _end_>[1389987] _end_>[1389987]
    }
    unknown call_tmp[1390126] "expr temp" "maybe param" "maybe type" "temp"
    (1390129 'move' call_tmp[1390126](1389947 call _lock _mt[203] _arg1[1389723]))
    unknown call_tmp[1390131] "expr temp" "maybe param" "maybe type" "temp"
    (1390134 'move' call_tmp[1390131](1389951 call _lock _mt[203] _arg2[1389724]))
    unknown call_tmp[1390136] "expr temp" "maybe param" "maybe type" "temp"
    (1390139 'move' call_tmp[1390136](1389955 call chpl_field_gt call_tmp[1390126] call_tmp[1390131]))
    if call_tmp[1390136]
    {
      (1390024 'move' ret[1389989](1390023 'deref' 1))
      gotoReturn _end_>[1389987] _end_>[1389987]
    }
    unknown call_tmp[1390141] "expr temp" "maybe param" "maybe type" "temp"
    (1390144 'move' call_tmp[1390141](1389961 call _lock _mt[203] _arg1[1389723]))
    unknown call_tmp[1390146] "expr temp" "maybe param" "maybe type" "temp"
    (1390149 'move' call_tmp[1390146](1389965 call _lock _mt[203] _arg2[1389724]))
    unknown call_tmp[1390151] "expr temp" "maybe param" "maybe type" "temp"
    (1390154 'move' call_tmp[1390151](1389969 call chpl_field_lt call_tmp[1390141] call_tmp[1390146]))
    if call_tmp[1390151]
    {
      (1390029 'move' ret[1389989](1390028 'deref' 0))
      gotoReturn _end_>[1389987] _end_>[1389987]
    }
    (1390034 'move' ret[1389989](1390033 'deref' 0))
    label _end_>[1389987]
    (1389991 return ret[1389989])
  }
  where {
    unknown call_tmp[1390156] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1390159 'move' call_tmp[1390156](1389727 'typeof' _arg1[1389723]))
    unknown call_tmp[1390161] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1390164 'move' call_tmp[1390161](1389729 'typeof' _arg2[1389724]))
    unknown call_tmp[1390166] "expr temp" "maybe param" "maybe type" "temp"
    (1390169 'move' call_tmp[1390166](1389731 call == call_tmp[1390156] call_tmp[1390161]))
    unknown call_tmp[1390171] "expr temp" "maybe param" "maybe type" "temp"
    (1390174 'move' call_tmp[1390171](1389857 call chpl_fields_are_comparable[1389733] _arg1[1389723] _arg2[1389724]))
    (1389861 '&' call_tmp[1390166] call_tmp[1390171])
  }
  function chpl_fields_are_comparable[1390192](arg _arg1[1390194]:map[352283](?), arg _arg2[1390195]:map[352283](?)) param : bool[19] "compiler generated" "last resort" "param"
  {
    val ret[1390244]:bool[19] "RVV" "param" "temp"
    unknown call_tmp[1390251] "expr temp" "maybe param" "maybe type" "temp"
    (1390254 'move' call_tmp[1390251](1390198 call parSafe _mt[203] _arg1[1390194]))
    unknown call_tmp[1390256] "expr temp" "maybe param" "maybe type" "temp"
    (1390259 'move' call_tmp[1390256](1390202 call parSafe _mt[203] _arg2[1390195]))
    unknown call_tmp[1390261] "expr temp" "maybe param" "maybe type" "temp"
    (1390264 'move' call_tmp[1390261](1390206 'call resolves' c">=" call_tmp[1390251] call_tmp[1390256]))
    unknown call_tmp[1390266] "expr temp" "maybe param" "maybe type" "temp"
    (1390269 'move' call_tmp[1390266](1390208 call resizeThreshold _mt[203] _arg1[1390194]))
    unknown call_tmp[1390271] "expr temp" "maybe param" "maybe type" "temp"
    (1390274 'move' call_tmp[1390271](1390212 call resizeThreshold _mt[203] _arg2[1390195]))
    unknown call_tmp[1390276] "expr temp" "maybe param" "maybe type" "temp"
    (1390279 'move' call_tmp[1390276](1390216 'call resolves' c">=" call_tmp[1390266] call_tmp[1390271]))
    unknown call_tmp[1390281] "expr temp" "maybe param" "maybe type" "temp"
    (1390284 'move' call_tmp[1390281](1390218 call table _mt[203] _arg1[1390194]))
    unknown call_tmp[1390286] "expr temp" "maybe param" "maybe type" "temp"
    (1390289 'move' call_tmp[1390286](1390222 call table _mt[203] _arg2[1390195]))
    unknown call_tmp[1390291] "expr temp" "maybe param" "maybe type" "temp"
    (1390294 'move' call_tmp[1390291](1390226 'call resolves' c">=" call_tmp[1390281] call_tmp[1390286]))
    unknown call_tmp[1390296] "expr temp" "maybe param" "maybe type" "temp"
    (1390299 'move' call_tmp[1390296](1390228 call _lock _mt[203] _arg1[1390194]))
    unknown call_tmp[1390301] "expr temp" "maybe param" "maybe type" "temp"
    (1390304 'move' call_tmp[1390301](1390232 call _lock _mt[203] _arg2[1390195]))
    unknown call_tmp[1390306] "expr temp" "maybe param" "maybe type" "temp"
    (1390309 'move' call_tmp[1390306](1390236 'call resolves' c">=" call_tmp[1390296] call_tmp[1390301]))
    unknown call_tmp[1390311] "expr temp" "maybe param" "maybe type" "temp"
    (1390314 'move' call_tmp[1390311](1390238 '&' call_tmp[1390261] call_tmp[1390276] call_tmp[1390291] call_tmp[1390306]))
    (1390249 'move' ret[1390244](1390248 'deref' call_tmp[1390311]))
    (1390246 return ret[1390244])
  }
  function map[352283](?).>=[1390176](arg _mt[1390178]:_MT[201], arg this[1390180]:map[352283](?), arg _arg1[1390182]:map[352283](?), arg _arg2[1390183]:map[352283](?)) : bool[19] "compiler generated" "last resort" "method" "operator"
  {
    val ret[1390448]:bool[19] "RVV" "temp"
    unknown call_tmp[1390495] "expr temp" "maybe param" "maybe type" "temp"
    (1390498 'move' call_tmp[1390495](1390322 call parSafe _mt[203] _arg1[1390182]))
    unknown call_tmp[1390500] "expr temp" "maybe param" "maybe type" "temp"
    (1390503 'move' call_tmp[1390500](1390326 call parSafe _mt[203] _arg2[1390183]))
    unknown call_tmp[1390505] "expr temp" "maybe param" "maybe type" "temp"
    (1390508 'move' call_tmp[1390505](1390330 call chpl_field_gt call_tmp[1390495] call_tmp[1390500]))
    if call_tmp[1390505]
    {
      (1390453 'move' ret[1390448](1390452 'deref' 1))
      gotoReturn _end_>=[1390446] _end_>=[1390446]
    }
    unknown call_tmp[1390510] "expr temp" "maybe param" "maybe type" "temp"
    (1390513 'move' call_tmp[1390510](1390336 call parSafe _mt[203] _arg1[1390182]))
    unknown call_tmp[1390515] "expr temp" "maybe param" "maybe type" "temp"
    (1390518 'move' call_tmp[1390515](1390340 call parSafe _mt[203] _arg2[1390183]))
    unknown call_tmp[1390520] "expr temp" "maybe param" "maybe type" "temp"
    (1390523 'move' call_tmp[1390520](1390344 call chpl_field_lt call_tmp[1390510] call_tmp[1390515]))
    if call_tmp[1390520]
    {
      (1390458 'move' ret[1390448](1390457 'deref' 0))
      gotoReturn _end_>=[1390446] _end_>=[1390446]
    }
    unknown call_tmp[1390525] "expr temp" "maybe param" "maybe type" "temp"
    (1390528 'move' call_tmp[1390525](1390350 call resizeThreshold _mt[203] _arg1[1390182]))
    unknown call_tmp[1390530] "expr temp" "maybe param" "maybe type" "temp"
    (1390533 'move' call_tmp[1390530](1390354 call resizeThreshold _mt[203] _arg2[1390183]))
    unknown call_tmp[1390535] "expr temp" "maybe param" "maybe type" "temp"
    (1390538 'move' call_tmp[1390535](1390358 call chpl_field_gt call_tmp[1390525] call_tmp[1390530]))
    if call_tmp[1390535]
    {
      (1390463 'move' ret[1390448](1390462 'deref' 1))
      gotoReturn _end_>=[1390446] _end_>=[1390446]
    }
    unknown call_tmp[1390540] "expr temp" "maybe param" "maybe type" "temp"
    (1390543 'move' call_tmp[1390540](1390364 call resizeThreshold _mt[203] _arg1[1390182]))
    unknown call_tmp[1390545] "expr temp" "maybe param" "maybe type" "temp"
    (1390548 'move' call_tmp[1390545](1390368 call resizeThreshold _mt[203] _arg2[1390183]))
    unknown call_tmp[1390550] "expr temp" "maybe param" "maybe type" "temp"
    (1390553 'move' call_tmp[1390550](1390372 call chpl_field_lt call_tmp[1390540] call_tmp[1390545]))
    if call_tmp[1390550]
    {
      (1390468 'move' ret[1390448](1390467 'deref' 0))
      gotoReturn _end_>=[1390446] _end_>=[1390446]
    }
    unknown call_tmp[1390555] "expr temp" "maybe param" "maybe type" "temp"
    (1390558 'move' call_tmp[1390555](1390378 call table _mt[203] _arg1[1390182]))
    unknown call_tmp[1390560] "expr temp" "maybe param" "maybe type" "temp"
    (1390563 'move' call_tmp[1390560](1390382 call table _mt[203] _arg2[1390183]))
    unknown call_tmp[1390565] "expr temp" "maybe param" "maybe type" "temp"
    (1390568 'move' call_tmp[1390565](1390386 call chpl_field_gt call_tmp[1390555] call_tmp[1390560]))
    if call_tmp[1390565]
    {
      (1390473 'move' ret[1390448](1390472 'deref' 1))
      gotoReturn _end_>=[1390446] _end_>=[1390446]
    }
    unknown call_tmp[1390570] "expr temp" "maybe param" "maybe type" "temp"
    (1390573 'move' call_tmp[1390570](1390392 call table _mt[203] _arg1[1390182]))
    unknown call_tmp[1390575] "expr temp" "maybe param" "maybe type" "temp"
    (1390578 'move' call_tmp[1390575](1390396 call table _mt[203] _arg2[1390183]))
    unknown call_tmp[1390580] "expr temp" "maybe param" "maybe type" "temp"
    (1390583 'move' call_tmp[1390580](1390400 call chpl_field_lt call_tmp[1390570] call_tmp[1390575]))
    if call_tmp[1390580]
    {
      (1390478 'move' ret[1390448](1390477 'deref' 0))
      gotoReturn _end_>=[1390446] _end_>=[1390446]
    }
    unknown call_tmp[1390585] "expr temp" "maybe param" "maybe type" "temp"
    (1390588 'move' call_tmp[1390585](1390406 call _lock _mt[203] _arg1[1390182]))
    unknown call_tmp[1390590] "expr temp" "maybe param" "maybe type" "temp"
    (1390593 'move' call_tmp[1390590](1390410 call _lock _mt[203] _arg2[1390183]))
    unknown call_tmp[1390595] "expr temp" "maybe param" "maybe type" "temp"
    (1390598 'move' call_tmp[1390595](1390414 call chpl_field_gt call_tmp[1390585] call_tmp[1390590]))
    if call_tmp[1390595]
    {
      (1390483 'move' ret[1390448](1390482 'deref' 1))
      gotoReturn _end_>=[1390446] _end_>=[1390446]
    }
    unknown call_tmp[1390600] "expr temp" "maybe param" "maybe type" "temp"
    (1390603 'move' call_tmp[1390600](1390420 call _lock _mt[203] _arg1[1390182]))
    unknown call_tmp[1390605] "expr temp" "maybe param" "maybe type" "temp"
    (1390608 'move' call_tmp[1390605](1390424 call _lock _mt[203] _arg2[1390183]))
    unknown call_tmp[1390610] "expr temp" "maybe param" "maybe type" "temp"
    (1390613 'move' call_tmp[1390610](1390428 call chpl_field_lt call_tmp[1390600] call_tmp[1390605]))
    if call_tmp[1390610]
    {
      (1390488 'move' ret[1390448](1390487 'deref' 0))
      gotoReturn _end_>=[1390446] _end_>=[1390446]
    }
    (1390493 'move' ret[1390448](1390492 'deref' 1))
    label _end_>=[1390446]
    (1390450 return ret[1390448])
  }
  where {
    unknown call_tmp[1390615] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1390618 'move' call_tmp[1390615](1390186 'typeof' _arg1[1390182]))
    unknown call_tmp[1390620] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1390623 'move' call_tmp[1390620](1390188 'typeof' _arg2[1390183]))
    unknown call_tmp[1390625] "expr temp" "maybe param" "maybe type" "temp"
    (1390628 'move' call_tmp[1390625](1390190 call == call_tmp[1390615] call_tmp[1390620]))
    unknown call_tmp[1390630] "expr temp" "maybe param" "maybe type" "temp"
    (1390633 'move' call_tmp[1390630](1390316 call chpl_fields_are_comparable[1390192] _arg1[1390182] _arg2[1390183]))
    (1390320 '&' call_tmp[1390625] call_tmp[1390630])
  }
  type map[352283](?) unknown keyType[348884] "type variable" unknown valType[348887] "type variable" unknown parSafe[348890] "param" "@unstable" 0 const resizeThreshold[348895] "const" defaultHashTableResizeThreshold[209951] unknown table[348900](348902 call chpl__hashtable[267644](?) keyType[348884] valType[348887]) unknown _lock[348908](348914 IfExpr  parSafe[348890] then
  { scopeless
    (1000656 'new' _LockWrapper[461512](?))
  } else
  { scopeless
    none[48]
  } )
  function map[352283](?).=[352285](arg _mt[352309]:_MT[201], arg this[352288]:map[352283](?) :
  map[352283](?), ref arg lhs[352298]:map[352283](?), const  ref arg rhs[352306]:map[352283](?)) : _unknown[42] "assignop" "compiler added where" "method" "operator" "no return value for void"
  {
    unknown tmp[505557] "maybe param" "temp"
    unknown call_tmp[973208] "expr temp" "maybe param" "maybe type" "temp"
    (973211 'move' call_tmp[973208](537755 'query' lhs[352298] 1))
    unknown call_tmp[973213] "expr temp" "maybe param" "maybe type" "temp"
    (973216 'move' call_tmp[973213](352323 call isCopyableType call_tmp[973208]))
    (505568 'move' tmp[505557](352320 call ! call_tmp[973213]))
    unknown call_tmp[973218] "expr temp" "maybe param" "maybe type" "temp"
    (973221 'move' call_tmp[973218](505570 call _cond_invalid tmp[505557]))
    if call_tmp[973218]
    {
      (505573 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[711861] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[711862] "maybe param" "temp"
    unknown call_tmp[973223] "expr temp" "maybe param" "maybe type" "temp"
    (973226 'move' call_tmp[973223](505558 call isTrue tmp[505557]))
    (711867 'move' tmp[711862](711865 call _cond_test call_tmp[973223]))
    if tmp[711862]
    {
      (711872 'move' tmp[711861](711869 '_paramFoldLogical' tmp[711862] 1))
    }
    {
      unknown tmp[711874] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[973228] "expr temp" "maybe param" "maybe type" "temp"
      (973231 'move' call_tmp[973228](537764 'query' lhs[352298] 2))
      unknown call_tmp[973233] "expr temp" "maybe param" "maybe type" "temp"
      (973236 'move' call_tmp[973233](352328 call isCopyableType call_tmp[973228]))
      unknown call_tmp[973238] "expr temp" "maybe param" "maybe type" "temp"
      (973241 'move' call_tmp[973238](352325 call ! call_tmp[973233]))
      (711876 'move' tmp[711874](505562 call isTrue call_tmp[973238]))
      (711881 'move' tmp[711861](711878 '_paramFoldLogical' tmp[711862] tmp[711874]))
    }
    unknown call_tmp[973243] "expr temp" "maybe param" "maybe type" "temp"
    (973246 'move' call_tmp[973243](352330 call _cond_test tmp[711861]))
    if call_tmp[973243]
    {
      (352313 call compilerError "assigning map with non-copyable type")
    }
    (352339 call(352336 call (partial) clear _mt[203] lhs[352298]))
    (573321 'end of statement')
    Try!
    {
      {
        {
          unknown _indexOfInterest[352358] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[352359] "expr temp" "temp"
          unknown call_tmp[973252] "expr temp" "maybe param" "maybe type" "temp"
          (973255 'move' call_tmp[973252](352347 call(352344 call (partial) keys _mt[203] rhs[352306])))
          (352368 'move' _iterator[352359](352366 call _getIterator call_tmp[973252]))
          Defer
          {
            {
              (352383 call _freeIterator _iterator[352359])
            }
          }
          { scopeless type
            (352373 'move' _indexOfInterest[352358](352370 call iteratorIndex _iterator[352359]))
          }
          ForLoop[352360]
          {
            unknown key[352341] "index var" "insert auto destroy"
            (573323 'end of statement')
            (352378 'move' key[352341] _indexOfInterest[352358])
            (573324 'end of statement' key[352341])
            {
              unknown call_tmp[973259] "expr temp" "maybe param" "maybe type" "temp"
              (973262 'move' call_tmp[973259](352356 call rhs[352306] key[352341]))
              (352353 call(352350 call (partial) add _mt[203] lhs[352298]) key[352341] call_tmp[973259])
              (573326 'end of statement' key[352341])
            }
            label _continueLabel[352363]
            _indexOfInterest[352358]
            _iterator[352359]
          }
          label _breakLabel[352364]
        }
      }
    }
    (637462 return _void[46])
  }
  where {
    unknown call_tmp[973264] "expr temp" "maybe param" "maybe type" "temp"
    (973267 'move' call_tmp[973264](537777 'query' lhs[352298] 1))
    unknown call_tmp[973269] "expr temp" "maybe param" "maybe type" "temp"
    (973272 'move' call_tmp[973269](537774 'query' rhs[352306] 1))
    unknown call_tmp[973274] "expr temp" "maybe param" "maybe type" "temp"
    (973277 'move' call_tmp[973274](537780 call == call_tmp[973264] call_tmp[973269]))
    unknown call_tmp[973279] "expr temp" "maybe param" "maybe type" "temp"
    (973282 'move' call_tmp[973279](537784 call & 1 call_tmp[973274]))
    unknown call_tmp[973284] "expr temp" "maybe param" "maybe type" "temp"
    (973287 'move' call_tmp[973284](537789 'query' lhs[352298] 2))
    unknown call_tmp[973289] "expr temp" "maybe param" "maybe type" "temp"
    (973292 'move' call_tmp[973289](537786 'query' rhs[352306] 2))
    unknown call_tmp[973294] "expr temp" "maybe param" "maybe type" "temp"
    (973297 'move' call_tmp[973294](537792 call == call_tmp[973284] call_tmp[973289]))
    (537794 call & call_tmp[973279] call_tmp[973294])
  }
  function map[352283](?).:[352395](arg _mt[352423]:_MT[201], arg this[352398]:map[352283](?) :
  map[352283](?), arg x[352409]:map[352283](?), arg t[352420]:map[352283](?)) : _unknown[42] "method" "operator"
  {
    unknown ret[637466] "RVV" "temp"
    unknown call_tmp[973299] "expr temp" "maybe param" "maybe type" "temp"
    (973302 'move' call_tmp[973299](537806 'query' x[352409] 1))
    unknown call_tmp[973304] "expr temp" "maybe param" "maybe type" "temp"
    (973307 'move' call_tmp[973304](537825 'query' t[352420] 1))
    unknown call_tmp[973309] "expr temp" "maybe param" "maybe type" "temp"
    (973312 'move' call_tmp[973309](352439 call != call_tmp[973299] call_tmp[973304]))
    unknown call_tmp[973314] "expr temp" "maybe param" "maybe type" "temp"
    (973317 'move' call_tmp[973314](352443 call _cond_test call_tmp[973309]))
    if call_tmp[973314]
    {
      unknown call_tmp[973319] "expr temp" "maybe param" "maybe type" "temp"
      (973322 'move' call_tmp[973319](537828 'query' t[352420] 1))
      unknown call_tmp[973324] "expr temp" "maybe param" "maybe type" "temp"
      (973327 'move' call_tmp[973324](352434 call : call_tmp[973319] string[244]))
      (352427 call compilerError "Cannot cast to map with different " "key type: " call_tmp[973324])
    }
    unknown call_tmp[973329] "expr temp" "maybe param" "maybe type" "temp"
    (973332 'move' call_tmp[973329](537812 'query' x[352409] 2))
    unknown call_tmp[973334] "expr temp" "maybe param" "maybe type" "temp"
    (973337 'move' call_tmp[973334](537834 'query' t[352420] 2))
    unknown call_tmp[973339] "expr temp" "maybe param" "maybe type" "temp"
    (973342 'move' call_tmp[973339](352459 call != call_tmp[973329] call_tmp[973334]))
    unknown call_tmp[973344] "expr temp" "maybe param" "maybe type" "temp"
    (973347 'move' call_tmp[973344](352463 call _cond_test call_tmp[973339]))
    if call_tmp[973344]
    {
      unknown call_tmp[973349] "expr temp" "maybe param" "maybe type" "temp"
      (973352 'move' call_tmp[973349](537837 'query' t[352420] 2))
      unknown call_tmp[973354] "expr temp" "maybe param" "maybe type" "temp"
      (973357 'move' call_tmp[973354](352454 call : call_tmp[973349] string[244]))
      (352449 call compilerError "Cannot cast to map with different " "value type: " call_tmp[973354])
    }
    unknown result[352469] "dead at end of block" "insert auto destroy"
    (656715 'init var' result[352469] x[352409] t[352420])
    (352473 'end of statement')
    (637471 'move' ret[637466](637470 'deref' result[352469]))
    gotoReturn _end_:[637464] _end_:[637464]
    (573330 'end of statement' result[352469])
    label _end_:[637464]
    (637468 return ret[637466])
  }
  function map[352283](?).==[352478](arg _mt[352496]:_MT[201], arg this[352481]:map[352283](?) :
  map[352283](?), const  ref arg a[352487]:map[352283](?), const  ref arg b[352493]:map[352283](?)) : _unknown[42] "method" "operator"
  {
    unknown ret[637477] "RVV" "temp"
    unknown call_tmp[973361] "expr temp" "maybe param" "maybe type" "temp"
    (973364 'move' call_tmp[973361](352521 call keyType _mt[203] a[352487]))
    unknown call_tmp[973368] "expr temp" "maybe param" "maybe type" "temp"
    (973371 'move' call_tmp[973368](352525 call keyType _mt[203] b[352493]))
    unknown call_tmp[973373] "expr temp" "maybe param" "maybe type" "temp"
    (973376 'move' call_tmp[973373](352518 call != call_tmp[973361] call_tmp[973368]))
    unknown call_tmp[973378] "expr temp" "maybe param" "maybe type" "temp"
    (973381 'move' call_tmp[973378](352528 call _cond_test call_tmp[973373]))
    if call_tmp[973378]
    {
      unknown call_tmp[973385] "expr temp" "maybe param" "maybe type" "temp"
      (973388 'move' call_tmp[973385](352508 call keyType _mt[203] a[352487]))
      unknown call_tmp[973390] "expr temp" "maybe param" "maybe type" "temp"
      (973393 'move' call_tmp[973390](352505 call : call_tmp[973385] string[244]))
      unknown call_tmp[973397] "expr temp" "maybe param" "maybe type" "temp"
      (973400 'move' call_tmp[973397](352514 call keyType _mt[203] b[352493]))
      (352501 call compilerError "cannot compare maps with different key types: " call_tmp[973390] " and " call_tmp[973397])
    }
    unknown call_tmp[973404] "expr temp" "maybe param" "maybe type" "temp"
    (973407 'move' call_tmp[973404](352554 call valType _mt[203] a[352487]))
    unknown call_tmp[973411] "expr temp" "maybe param" "maybe type" "temp"
    (973414 'move' call_tmp[973411](352558 call valType _mt[203] b[352493]))
    unknown call_tmp[973416] "expr temp" "maybe param" "maybe type" "temp"
    (973419 'move' call_tmp[973416](352551 call != call_tmp[973404] call_tmp[973411]))
    unknown call_tmp[973421] "expr temp" "maybe param" "maybe type" "temp"
    (973424 'move' call_tmp[973421](352561 call _cond_test call_tmp[973416]))
    if call_tmp[973421]
    {
      unknown call_tmp[973428] "expr temp" "maybe param" "maybe type" "temp"
      (973431 'move' call_tmp[973428](352541 call valType _mt[203] a[352487]))
      unknown call_tmp[973433] "expr temp" "maybe param" "maybe type" "temp"
      (973436 'move' call_tmp[973433](352538 call : call_tmp[973428] string[244]))
      unknown call_tmp[973440] "expr temp" "maybe param" "maybe type" "temp"
      (973443 'move' call_tmp[973440](352547 call valType _mt[203] b[352493]))
      (352534 call compilerError "cannot compare maps with different value types: " call_tmp[973433] " and " call_tmp[973440])
    }
    unknown call_tmp[973447] "expr temp" "maybe param" "maybe type" "temp"
    (973450 'move' call_tmp[973447](352572 call _size _mt[203] a[352487]))
    unknown call_tmp[973454] "expr temp" "maybe param" "maybe type" "temp"
    (973457 'move' call_tmp[973454](352576 call _size _mt[203] b[352493]))
    unknown call_tmp[973459] "expr temp" "maybe param" "maybe type" "temp"
    (973462 'move' call_tmp[973459](352569 call != call_tmp[973447] call_tmp[973454]))
    unknown call_tmp[973464] "expr temp" "maybe param" "maybe type" "temp"
    (973467 'move' call_tmp[973464](352579 call _cond_test call_tmp[973459]))
    if call_tmp[973464]
    {
      (637483 'move' ret[637477](637482 'coerce' 0 bool[19]))
      gotoReturn _end_==[637475] _end_==[637475]
    }
    Try!
    {
      {
        {
          unknown _indexOfInterest[352619] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[352620] "expr temp" "temp"
          unknown call_tmp[973471] "expr temp" "maybe param" "maybe type" "temp"
          (973474 'move' call_tmp[973471](352591 call(352588 call (partial) keys _mt[203] a[352487])))
          (352629 'move' _iterator[352620](352627 call _getIterator call_tmp[973471]))
          Defer
          {
            {
              (352644 call _freeIterator _iterator[352620])
            }
          }
          { scopeless type
            (352634 'move' _indexOfInterest[352619](352631 call iteratorIndex _iterator[352620]))
          }
          ForLoop[352621]
          {
            unknown key[352585] "index var" "insert auto destroy"
            (573336 'end of statement')
            (352639 'move' key[352585] _indexOfInterest[352619])
            (573337 'end of statement' key[352585])
            {
              unknown tmp[505578] "maybe param" "temp"
              unknown call_tmp[973478] "expr temp" "maybe param" "maybe type" "temp"
              (973481 'move' call_tmp[973478](352604 call(352601 call (partial) contains _mt[203] b[352493]) key[352585]))
              (505589 'move' tmp[505578](352598 call ! call_tmp[973478]))
              unknown call_tmp[973483] "expr temp" "maybe param" "maybe type" "temp"
              (973486 'move' call_tmp[973483](505591 call _cond_invalid tmp[505578]))
              if call_tmp[973483]
              {
                (505594 call compilerError "cannot promote short-circuiting || operator")
              }
              unknown tmp[711888] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[711889] "maybe param" "temp"
              unknown call_tmp[973488] "expr temp" "maybe param" "maybe type" "temp"
              (973491 'move' call_tmp[973488](505579 call isTrue tmp[505578]))
              (711894 'move' tmp[711889](711892 call _cond_test call_tmp[973488]))
              if tmp[711889]
              {
                (711899 'move' tmp[711888](711896 '_paramFoldLogical' tmp[711889] 1))
              }
              {
                unknown tmp[711901] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                unknown call_tmp[973493] "expr temp" "maybe param" "maybe type" "temp"
                (973496 'move' call_tmp[973493](352609 call a[352487] key[352585]))
                unknown call_tmp[973498] "expr temp" "maybe param" "maybe type" "temp"
                (973501 'move' call_tmp[973498](352612 call b[352493] key[352585]))
                unknown call_tmp[973503] "expr temp" "maybe param" "maybe type" "temp"
                (973506 'move' call_tmp[973503](352606 call != call_tmp[973493] call_tmp[973498]))
                (711903 'move' tmp[711901](505583 call isTrue call_tmp[973503]))
                (711908 'move' tmp[711888](711905 '_paramFoldLogical' tmp[711889] tmp[711901]))
              }
              unknown call_tmp[973508] "expr temp" "maybe param" "maybe type" "temp"
              (973511 'move' call_tmp[973508](352614 call _cond_test tmp[711888]))
              if call_tmp[973508]
              {
                (637489 'move' ret[637477](637488 'coerce' 0 bool[19]))
                gotoReturn _end_==[637475] _end_==[637475]
              }
            }
            label _continueLabel[352624]
            _indexOfInterest[352619]
            _iterator[352620]
          }
          label _breakLabel[352625]
        }
        {
          unknown _indexOfInterest[352685] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[352686] "expr temp" "temp"
          unknown call_tmp[973515] "expr temp" "maybe param" "maybe type" "temp"
          (973518 'move' call_tmp[973515](352657 call(352654 call (partial) keys _mt[203] b[352493])))
          (352695 'move' _iterator[352686](352693 call _getIterator call_tmp[973515]))
          Defer
          {
            {
              (352710 call _freeIterator _iterator[352686])
            }
          }
          { scopeless type
            (352700 'move' _indexOfInterest[352685](352697 call iteratorIndex _iterator[352686]))
          }
          ForLoop[352687]
          {
            unknown key[352651] "index var" "insert auto destroy"
            (573342 'end of statement')
            (352705 'move' key[352651] _indexOfInterest[352685])
            (573343 'end of statement' key[352651])
            {
              unknown tmp[505599] "maybe param" "temp"
              unknown call_tmp[973522] "expr temp" "maybe param" "maybe type" "temp"
              (973525 'move' call_tmp[973522](352670 call(352667 call (partial) contains _mt[203] a[352487]) key[352651]))
              (505610 'move' tmp[505599](352664 call ! call_tmp[973522]))
              unknown call_tmp[973527] "expr temp" "maybe param" "maybe type" "temp"
              (973530 'move' call_tmp[973527](505612 call _cond_invalid tmp[505599]))
              if call_tmp[973527]
              {
                (505615 call compilerError "cannot promote short-circuiting || operator")
              }
              unknown tmp[711915] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[711916] "maybe param" "temp"
              unknown call_tmp[973532] "expr temp" "maybe param" "maybe type" "temp"
              (973535 'move' call_tmp[973532](505600 call isTrue tmp[505599]))
              (711921 'move' tmp[711916](711919 call _cond_test call_tmp[973532]))
              if tmp[711916]
              {
                (711926 'move' tmp[711915](711923 '_paramFoldLogical' tmp[711916] 1))
              }
              {
                unknown tmp[711928] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                unknown call_tmp[973537] "expr temp" "maybe param" "maybe type" "temp"
                (973540 'move' call_tmp[973537](352675 call a[352487] key[352651]))
                unknown call_tmp[973542] "expr temp" "maybe param" "maybe type" "temp"
                (973545 'move' call_tmp[973542](352678 call b[352493] key[352651]))
                unknown call_tmp[973547] "expr temp" "maybe param" "maybe type" "temp"
                (973550 'move' call_tmp[973547](352672 call != call_tmp[973537] call_tmp[973542]))
                (711930 'move' tmp[711928](505604 call isTrue call_tmp[973547]))
                (711935 'move' tmp[711915](711932 '_paramFoldLogical' tmp[711916] tmp[711928]))
              }
              unknown call_tmp[973552] "expr temp" "maybe param" "maybe type" "temp"
              (973555 'move' call_tmp[973552](352680 call _cond_test tmp[711915]))
              if call_tmp[973552]
              {
                (637495 'move' ret[637477](637494 'coerce' 0 bool[19]))
                gotoReturn _end_==[637475] _end_==[637475]
              }
            }
            label _continueLabel[352690]
            _indexOfInterest[352685]
            _iterator[352686]
          }
          label _breakLabel[352691]
        }
      }
    }
    (637501 'move' ret[637477](637500 'coerce' 1 bool[19]))
    label _end_==[637475]
    (637479 return ret[637477])
  }
  { scopeless type
    bool[19]
  }
  function map[352283](?).!=[352725](arg _mt[352743]:_MT[201], arg this[352728]:map[352283](?) :
  map[352283](?), const  ref arg a[352734]:map[352283](?), const  ref arg b[352740]:map[352283](?)) : _unknown[42] "method" "operator"
  {
    unknown ret[637505] "RVV" "temp"
    unknown call_tmp[973559] "expr temp" "maybe param" "maybe type" "temp"
    (973562 'move' call_tmp[973559](352766 call keyType _mt[203] a[352734]))
    unknown call_tmp[973566] "expr temp" "maybe param" "maybe type" "temp"
    (973569 'move' call_tmp[973566](352770 call keyType _mt[203] b[352740]))
    unknown call_tmp[973571] "expr temp" "maybe param" "maybe type" "temp"
    (973574 'move' call_tmp[973571](352763 call != call_tmp[973559] call_tmp[973566]))
    unknown call_tmp[973576] "expr temp" "maybe param" "maybe type" "temp"
    (973579 'move' call_tmp[973576](352773 call _cond_test call_tmp[973571]))
    if call_tmp[973576]
    {
      unknown call_tmp[973583] "expr temp" "maybe param" "maybe type" "temp"
      (973586 'move' call_tmp[973583](352753 call keyType _mt[203] a[352734]))
      unknown call_tmp[973588] "expr temp" "maybe param" "maybe type" "temp"
      (973591 'move' call_tmp[973588](352750 call : call_tmp[973583] string[244]))
      unknown call_tmp[973595] "expr temp" "maybe param" "maybe type" "temp"
      (973598 'move' call_tmp[973595](352759 call keyType _mt[203] b[352740]))
      (352748 call compilerError "cannot compare maps with different key types: " call_tmp[973588] " and " call_tmp[973595])
    }
    unknown call_tmp[973602] "expr temp" "maybe param" "maybe type" "temp"
    (973605 'move' call_tmp[973602](352797 call valType _mt[203] a[352734]))
    unknown call_tmp[973609] "expr temp" "maybe param" "maybe type" "temp"
    (973612 'move' call_tmp[973609](352801 call valType _mt[203] b[352740]))
    unknown call_tmp[973614] "expr temp" "maybe param" "maybe type" "temp"
    (973617 'move' call_tmp[973614](352794 call != call_tmp[973602] call_tmp[973609]))
    unknown call_tmp[973619] "expr temp" "maybe param" "maybe type" "temp"
    (973622 'move' call_tmp[973619](352804 call _cond_test call_tmp[973614]))
    if call_tmp[973619]
    {
      unknown call_tmp[973626] "expr temp" "maybe param" "maybe type" "temp"
      (973629 'move' call_tmp[973626](352784 call valType _mt[203] a[352734]))
      unknown call_tmp[973631] "expr temp" "maybe param" "maybe type" "temp"
      (973634 'move' call_tmp[973631](352781 call : call_tmp[973626] string[244]))
      unknown call_tmp[973638] "expr temp" "maybe param" "maybe type" "temp"
      (973641 'move' call_tmp[973638](352790 call valType _mt[203] b[352740]))
      (352779 call compilerError "cannot compare maps with different value types: " call_tmp[973631] " and " call_tmp[973638])
    }
    unknown call_tmp[973643] "expr temp" "maybe param" "maybe type" "temp"
    (973646 'move' call_tmp[973643](352812 call == a[352734] b[352740]))
    unknown call_tmp[973648] "expr temp" "maybe param" "maybe type" "temp"
    (973651 'move' call_tmp[973648](352810 call ! call_tmp[973643]))
    (637511 'move' ret[637505](637510 'coerce' call_tmp[973648] bool[19]))
    (637507 return ret[637505])
  }
  { scopeless type
    bool[19]
  }
  function KeyNotFoundError[352856].init[352821](arg _mt[352825]:_MT[201], arg this[352823]:KeyNotFoundError[352856]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[537892] "temporary of super field" "temp"
    (537900 'move' super_tmp[537892](537893 '.v' this[352823] c"super"))
    (537896 call init _mt[203] super_tmp[537892])
    (573351 'end of statement')
    unknown tmp[537876] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[579129] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[973653] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (973656 'move' call_tmp[973653](537878 '.v' this[352823] c"super"))
      (579133 'move' call_type_tmp[579129](537881 'typeof' call_tmp[973653]))
    }
    (537882 'move' tmp[537876] call_type_tmp[579129])
    unknown call_tmp[973658] "maybe param" "maybe type" "temp"
    (973661 'move' call_tmp[973658](537887 'cast' tmp[537876] this[352823]))
    unknown chpl__thisAsParent[537884] "dead at end of block" "insert auto destroy" "temp"
    (656717 'init var' chpl__thisAsParent[537884] call_tmp[973658] tmp[537876])
    (537890 'setcid' chpl__thisAsParent[537884])
    (573352 'end of statement')
    (537903 'setcid' this[352823])
    (637513 return _void[46])
  }
  function KeyNotFoundError[352856].init[352830](arg _mt[352836]:_MT[201], arg this[352832]:KeyNotFoundError[352856], arg k[352834]:_any[141](?)) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[537906] "temporary of super field" "temp"
    (537908 'move' super_tmp[537906](537905 '.v' this[352832] c"super"))
    unknown call_tmp[973667] "expr temp" "maybe param" "maybe type" "temp"
    (973670 'move' call_tmp[973667](352850 call(352847 call (partial) format _mt[203] "key '%\?' not found") k[352834]))
    (352843 call(352840 call (partial) init _mt[203] super_tmp[537906]) call_tmp[973667])
    (573354 'end of statement')
    unknown tmp[537911] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[579135] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[973672] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (973675 'move' call_tmp[973672](537913 '.v' this[352832] c"super"))
      (579139 'move' call_type_tmp[579135](537916 'typeof' call_tmp[973672]))
    }
    (537917 'move' tmp[537911] call_type_tmp[579135])
    unknown call_tmp[973677] "maybe param" "maybe type" "temp"
    (973680 'move' call_tmp[973677](537922 'cast' tmp[537911] this[352832]))
    unknown chpl__thisAsParent[537919] "dead at end of block" "insert auto destroy" "temp"
    (656719 'init var' chpl__thisAsParent[537919] call_tmp[973677] tmp[537911])
    (537925 'setcid' chpl__thisAsParent[537919])
    (573355 'end of statement')
    (537927 'setcid' this[352832])
    (637515 return _void[46])
  }
  function KeyNotFoundError[352856].super[1390635](arg _mt[1390637]:_MT[201], arg this[1390639]:KeyNotFoundError[352856]) : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[1390649] "RVV" "temp"
    unknown call_tmp[1390656] "expr temp" "maybe param" "maybe type" "temp"
    (1390659 'move' call_tmp[1390656](1390643 '.v' this[1390639] c"super"))
    (1390654 'move' ret[1390649](1390653 'deref' call_tmp[1390656]))
    (1390651 return ret[1390649])
  }
  function KeyNotFoundError[352856].deinit[1390661](arg _mt[1390663]:_MT[201], arg this[1390665]:KeyNotFoundError[352856]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (1390673 return _void[46])
  }
  type KeyNotFoundError[352856] val super[397916]:Error[85511] "super class"
  type KeyNotFoundError[461744](?)
  function |serializable[475457]() : _unknown[42] "ImplementsStmt wrapper"
  { serializable[310094] map[352283](?)
    {
    }
    (637519 return _void[46])
  }
  (397178 'used modules list'(387086 'use' ChapelStandard[315387])(348708 'import' ChapelLocks[85420])(348710 'use' ChapelHashtable[267646])(348713 'use' HaltWrappers[518])(348720 'use' IO[208303])(348722 'use' FormattedIO[208298]))
  (410667 'referenced modules list' ChapelLocks[85420])
}