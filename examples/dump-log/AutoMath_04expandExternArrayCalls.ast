AST dump for AutoMath after pass expandExternArrayCalls.
Module use list: 

{
  (386996 'use' ChapelStandard)
  (1809 'import' HaltWrappers)
  (1811 'use' CTypes)
  function chpl_macro_double_isinf[1813](arg x[1818] :
  (1816 call real[13] 64)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "private" "fn synchronization free"
  {
  }
  { scopeless type
    c_int
  }
  function chpl_macro_float_isinf[1825](arg x[1830] :
  (1828 call real[13] 32)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "private" "fn synchronization free"
  {
  }
  { scopeless type
    c_int
  }
  function chpl_macro_double_isfinite[1837](arg x[1842] :
  (1840 call real[13] 64)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "private" "fn synchronization free"
  {
  }
  { scopeless type
    c_int
  }
  function chpl_macro_float_isfinite[1849](arg x[1854] :
  (1852 call real[13] 32)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "private" "fn synchronization free"
  {
  }
  { scopeless type
    c_int
  }
  function chpl_macro_double_isnan[1861](arg x[1866] :
  (1864 call real[13] 64)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "private" "fn synchronization free"
  {
  }
  { scopeless type
    c_int
  }
  function chpl_macro_float_isnan[1873](arg x[1878] :
  (1876 call real[13] 32)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "private" "fn synchronization free"
  {
  }
  { scopeless type
    c_int
  }
  function abs[1885](arg x[1891] :
  (1888 call int[10] unknown w[1889])) : _unknown[42] "inline"
  {
    (1895 return(1904 IfExpr (1896 call < x 0) then
    { scopeless
      (1900 call - x)
    } else
    { scopeless
      x
    } ))
  }
  function abs[1909](arg x[1915] :
  (1912 call uint[86] unknown w[1913])) : _unknown[42] "inline"
  {
    (1919 return x)
  }
  function abs[1923](param arg x[1926] :
  integral) param : _unknown[42]
  {
    (1930 return(1939 IfExpr (1931 call < x 0) then
    { scopeless
      (1935 call - x)
    } else
    { scopeless
      x
    } ))
  }
  function abs[1944](arg x[1949] :
  (1947 call real[13] 64)) : _unknown[42] "inline"
  {
    (1956 return(1957 'abs' x))
  }
  { scopeless type
    (1953 call real[13] 64)
  }
  function abs[1962](param arg x[1967] :
  (1965 call real[13] 64)) param : _unknown[42]
  {
    (1974 return(1975 'abs' x))
  }
  { scopeless type
    (1971 call real[13] 64)
  }
  function abs[1980](arg x[1985] :
  (1983 call real[13] 32)) : _unknown[42] "inline"
  {
    (1992 return(1993 'abs' x))
  }
  { scopeless type
    (1989 call real[13] 32)
  }
  function abs[1998](param arg x[2003] :
  (2001 call real[13] 32)) param : _unknown[42]
  {
    (2010 return(2011 'abs' x))
  }
  { scopeless type
    (2007 call real[13] 32)
  }
  function abs[2016](arg x[2021] :
  (2019 call imag 64)) : _unknown[42] "inline"
  {
    (2028 return(2029 'abs'(2031 call _i2r x)))
  }
  { scopeless type
    (2025 call real[13] 64)
  }
  function abs[2036](param arg x[2041] :
  (2039 call imag 64)) param : _unknown[42]
  {
    (2048 return(2050 call abs(2051 call : x(2055 call real[13] 64))))
  }
  { scopeless type
    (2045 call real[13] 64)
  }
  function abs[2060](arg x[2065] :
  (2063 call imag 32)) : _unknown[42] "inline"
  {
    (2072 return(2073 'abs'(2075 call _i2r x)))
  }
  { scopeless type
    (2069 call real[13] 32)
  }
  function abs[2080](param arg x[2085] :
  (2083 call imag 32)) param : _unknown[42]
  {
    (2092 return(2094 call abs(2095 call : x(2099 call real[13] 32))))
  }
  { scopeless type
    (2089 call real[13] 32)
  }
  function abs[2104](arg x[2111] :
  (2107 call complex[111] 128)) : _unknown[42] "inline"
  {
    function cabs[2118](arg x[2123] :
    (2121 call complex[111] 128)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      (2127 call real[13] 64)
    }
    (2132 return(2134 call cabs x))
  }
  { scopeless type
    (2115 call real[13] 64)
  }
  function abs[2139](param arg x[2144] :
  (2142 call complex[111] 128)) param : _unknown[42]
  {
    (2151 return(2152 'abs' x))
  }
  { scopeless type
    (2148 call real[13] 64)
  }
  function abs[2157](arg x[2162] :
  (2160 call complex[111] 64)) : _unknown[42] "inline"
  {
    function cabsf[2169](arg x[2174] :
    (2172 call complex[111] 64)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      (2178 call real[13] 32)
    }
    (2183 return(2185 call cabsf x))
  }
  { scopeless type
    (2166 call real[13] 32)
  }
  function abs[2190](param arg x[2195] :
  (2193 call complex[111] 64)) param : _unknown[42]
  {
    (2202 return(2203 'abs' x))
  }
  { scopeless type
    (2199 call real[13] 32)
  }
  function cbrt[2208](arg x[2213] :
  (2211 call real[13] 64)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
  {
  }
  { scopeless type
    (2217 call real[13] 64)
  }
  function cbrt[2222](arg x[2227] :
  (2225 call real[13] 32)) : _unknown[42] "inline"
  {
    function cbrtf[2234](arg x[2239] :
    (2237 call real[13] 32)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      (2243 call real[13] 32)
    }
    (2248 return(2250 call cbrtf x))
  }
  { scopeless type
    (2231 call real[13] 32)
  }
  function ceil[2255](arg x[2260] :
  (2258 call real[13] 64)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
  {
  }
  { scopeless type
    (2264 call real[13] 64)
  }
  function ceil[2269](arg x[2274] :
  (2272 call real[13] 32)) : _unknown[42] "inline"
  {
    function ceilf[2281](arg x[2286] :
    (2284 call real[13] 32)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      (2290 call real[13] 32)
    }
    (2295 return(2297 call ceilf x))
  }
  { scopeless type
    (2278 call real[13] 32)
  }
  function conj[2302](arg x[2308] :
  (2305 call complex[111] unknown w[2306])) : _unknown[42] "inline"
  {
    function conjf[2312](arg x[2317] :
    (2315 call complex[111] 64)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      (2321 call complex[111] 64)
    }
    function conj[2326](arg x[2331] :
    (2329 call complex[111] 128)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      (2335 call complex[111] 128)
    }
    if(2354 call _cond_test(2350 call == w 64))
    {
      { scopeless
        (2340 return(2342 call conjf x))
      }
    }
    {
      { scopeless
        (2345 return(2347 call conj x))
      }
    }
  }
  function conj[2362](arg x[2368] :
  (2365 call imag unknown w[2366])) : _unknown[42] "inline"
  {
    (2372 return(2373 call - x))
  }
  function conj[2378](arg x[2384] :
  (2381 call int[10] unknown w[2382])) : _unknown[42] "inline"
  {
    (2388 return x)
  }
  function conj[2392](arg x[2398] :
  (2395 call uint[86] unknown w[2396])) : _unknown[42] "inline"
  {
    (2402 return x)
  }
  function conj[2406](arg x[2412] :
  (2409 call real[13] unknown w[2410])) : _unknown[42] "inline"
  {
    (2416 return x)
  }
  function floor[2420](arg x[2425] :
  (2423 call real[13] 64)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
  {
  }
  { scopeless type
    (2429 call real[13] 64)
  }
  function floor[2434](arg x[2439] :
  (2437 call real[13] 32)) : _unknown[42] "inline"
  {
    function floorf[2446](arg x[2451] :
    (2449 call real[13] 32)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      (2455 call real[13] 32)
    }
    (2460 return(2462 call floorf x))
  }
  { scopeless type
    (2443 call real[13] 32)
  }
  function inf[2467]() param : _unknown[42] "inline" "no parens"
  {
    (2473 return chpl_INFINITY)
  }
  { scopeless type
    (2470 call real[13] 64)
  }
  function isFinite[2478](arg x[2483] :
  (2481 call real[13] 64)) : _unknown[42] "inline"
  {
    (2488 return(2489 call :(2492 call chpl_macro_double_isfinite x) bool))
  }
  { scopeless type
    bool
  }
  function isFinite[2498](arg x[2503] :
  (2501 call real[13] 32)) : _unknown[42] "inline"
  {
    (2508 return(2509 call :(2512 call chpl_macro_float_isfinite x) bool))
  }
  { scopeless type
    bool
  }
  function isInf[2518](arg x[2523] :
  (2521 call real[13] 64)) : _unknown[42] "inline"
  {
    (2528 return(2529 call :(2532 call chpl_macro_double_isinf x) bool))
  }
  { scopeless type
    bool
  }
  function isInf[2538](arg x[2543] :
  (2541 call real[13] 32)) : _unknown[42] "inline"
  {
    (2548 return(2549 call :(2552 call chpl_macro_float_isinf x) bool))
  }
  { scopeless type
    bool
  }
  function isNan[2558](arg x[2563] :
  (2561 call real[13] 64)) : _unknown[42] "inline"
  {
    (2568 return(2569 call :(2572 call chpl_macro_double_isnan x) bool))
  }
  { scopeless type
    bool
  }
  function isNan[2578](arg x[2583] :
  (2581 call real[13] 32)) : _unknown[42] "inline"
  {
    (2588 return(2589 call :(2592 call chpl_macro_float_isnan x) bool))
  }
  { scopeless type
    bool
  }
  function max[2598](arg x[2603] :
  (2601 call int[10] 8), arg y[2609] :
  (2607 call int[10] 8)) : _unknown[42] "inline"
  {
    (2613 return(2620 IfExpr (2614 call > x y) then
    { scopeless
      x
    } else
    { scopeless
      y
    } ))
  }
  function max[2625](arg x[2630] :
  (2628 call int[10] 16), arg y[2636] :
  (2634 call int[10] 16)) : _unknown[42] "inline"
  {
    (2640 return(2647 IfExpr (2641 call > x y) then
    { scopeless
      x
    } else
    { scopeless
      y
    } ))
  }
  function max[2652](arg x[2657] :
  (2655 call int[10] 32), arg y[2663] :
  (2661 call int[10] 32)) : _unknown[42] "inline"
  {
    (2667 return(2674 IfExpr (2668 call > x y) then
    { scopeless
      x
    } else
    { scopeless
      y
    } ))
  }
  function max[2679](arg x[2684] :
  (2682 call int[10] 64), arg y[2690] :
  (2688 call int[10] 64)) : _unknown[42] "inline"
  {
    (2694 return(2701 IfExpr (2695 call > x y) then
    { scopeless
      x
    } else
    { scopeless
      y
    } ))
  }
  function max[2706](arg x[2711] :
  (2709 call uint[86] 8), arg y[2717] :
  (2715 call uint[86] 8)) : _unknown[42] "inline"
  {
    (2721 return(2728 IfExpr (2722 call > x y) then
    { scopeless
      x
    } else
    { scopeless
      y
    } ))
  }
  function max[2733](arg x[2738] :
  (2736 call uint[86] 16), arg y[2744] :
  (2742 call uint[86] 16)) : _unknown[42] "inline"
  {
    (2748 return(2755 IfExpr (2749 call > x y) then
    { scopeless
      x
    } else
    { scopeless
      y
    } ))
  }
  function max[2760](arg x[2765] :
  (2763 call uint[86] 32), arg y[2771] :
  (2769 call uint[86] 32)) : _unknown[42] "inline"
  {
    (2775 return(2782 IfExpr (2776 call > x y) then
    { scopeless
      x
    } else
    { scopeless
      y
    } ))
  }
  function max[2787](arg x[2792] :
  (2790 call uint[86] 64), arg y[2798] :
  (2796 call uint[86] 64)) : _unknown[42] "inline"
  {
    (2802 return(2809 IfExpr (2803 call > x y) then
    { scopeless
      x
    } else
    { scopeless
      y
    } ))
  }
  function max[2814](arg x[2819] :
  (2817 call real[13] 32), arg y[2825] :
  (2823 call real[13] 32)) : _unknown[42] "inline"
  {
    (2829 return(2841 IfExpr (2830 call ||(2832 call > x y)(2837 call isNan x)) then
    { scopeless
      x
    } else
    { scopeless
      y
    } ))
  }
  function max[2846](arg x[2851] :
  (2849 call real[13] 64), arg y[2857] :
  (2855 call real[13] 64)) : _unknown[42] "inline"
  {
    (2861 return(2873 IfExpr (2862 call ||(2864 call > x y)(2869 call isNan x)) then
    { scopeless
      x
    } else
    { scopeless
      y
    } ))
  }
  function max[2878](arg x[2883] :
  (2881 call int[10] 8), arg y[2889] :
  (2887 call uint[86] 8)) : _unknown[42] "inline"
  {
    (2893 return(2905 IfExpr (2894 call > x y) then
    { scopeless
      (2898 call : x(2902 call uint[86] 8))
    } else
    { scopeless
      y
    } ))
  }
  function max[2910](arg x[2915] :
  (2913 call int[10] 16), arg y[2921] :
  (2919 call uint[86] 16)) : _unknown[42] "inline"
  {
    (2925 return(2937 IfExpr (2926 call > x y) then
    { scopeless
      (2930 call : x(2934 call uint[86] 16))
    } else
    { scopeless
      y
    } ))
  }
  function max[2942](arg x[2947] :
  (2945 call int[10] 32), arg y[2953] :
  (2951 call uint[86] 32)) : _unknown[42] "inline"
  {
    (2957 return(2969 IfExpr (2958 call > x y) then
    { scopeless
      (2962 call : x(2966 call uint[86] 32))
    } else
    { scopeless
      y
    } ))
  }
  function max[2974](arg x[2979] :
  (2977 call int[10] 64), arg y[2985] :
  (2983 call uint[86] 64)) : _unknown[42] "inline"
  {
    (2989 return(3001 IfExpr (2990 call > x y) then
    { scopeless
      (2994 call : x(2998 call uint[86] 64))
    } else
    { scopeless
      y
    } ))
  }
  function max[3006](arg x[3011] :
  (3009 call uint[86] 8), arg y[3017] :
  (3015 call int[10] 8)) : _unknown[42] "inline"
  {
    (3021 return(3033 IfExpr (3022 call > x y) then
    { scopeless
      x
    } else
    { scopeless
      (3027 call : y(3031 call uint[86] 8))
    } ))
  }
  function max[3038](arg x[3043] :
  (3041 call uint[86] 16), arg y[3049] :
  (3047 call int[10] 16)) : _unknown[42] "inline"
  {
    (3053 return(3065 IfExpr (3054 call > x y) then
    { scopeless
      x
    } else
    { scopeless
      (3059 call : y(3063 call uint[86] 16))
    } ))
  }
  function max[3070](arg x[3075] :
  (3073 call uint[86] 32), arg y[3081] :
  (3079 call int[10] 32)) : _unknown[42] "inline"
  {
    (3085 return(3097 IfExpr (3086 call > x y) then
    { scopeless
      x
    } else
    { scopeless
      (3091 call : y(3095 call uint[86] 32))
    } ))
  }
  function max[3102](arg x[3107] :
  (3105 call uint[86] 64), arg y[3113] :
  (3111 call int[10] 64)) : _unknown[42] "inline"
  {
    (3117 return(3129 IfExpr (3118 call > x y) then
    { scopeless
      x
    } else
    { scopeless
      (3123 call : y(3127 call uint[86] 64))
    } ))
  }
  function max[3134](arg x[3136]:_any[141](?), arg y[3138]:_any[141](?)) : _unknown[42] "last resort"
  {
    (3152 call compilerError "min() and max() are not supported for atomic arguments - apply read() to those arguments first")
  }
  where {
    (3140 call ||(3143 call isAtomicType(3145 'typeof' x))(3147 call isAtomicType(3149 'typeof' y)))
  }
  function max[3159](arg x[3161]:_any[141](?), arg y[3163]:_any[141](?)) : _unknown[42] "inline"
  {
    (3196 return(3203 IfExpr (3197 call > x y) then
    { scopeless
      x
    } else
    { scopeless
      y
    } ))
  }
  where {
    (3165 call &&(3167 call &&(3169 call !(3172 call isArray x))(3174 call !(3177 call isArray y)))(3179 call !(3181 call &&(3184 call isNumeric(3186 call _desync(3188 'typeof' x)))(3190 call isNumeric(3192 call _desync(3194 'typeof' y))))))
  }
  function max[3209](arg x[3211]:_any[141](?), arg y[3213]:_any[141](?), arg z[3217]:_any[141](?) ...) : _unknown[42] "inline"
  {
    (3221 return(3223 call max(3225 call max x y)(3229 'expand_tuple' z)))
  }
  function max[3232](param arg x[3235] :
  numeric, param arg y[3239] :
  numeric) param : _unknown[42] "inline"
  {
    (3253 return(3260 IfExpr (3254 call > x y) then
    { scopeless
      x
    } else
    { scopeless
      y
    } ))
  }
  where {
    (3242 call !(3244 call ||(3247 call isComplex x)(3250 call isComplex y)))
  }
  function min[3266](arg x[3271] :
  (3269 call int[10] 8), arg y[3277] :
  (3275 call int[10] 8)) : _unknown[42] "inline"
  {
    (3281 return(3288 IfExpr (3282 call < x y) then
    { scopeless
      x
    } else
    { scopeless
      y
    } ))
  }
  function min[3293](arg x[3298] :
  (3296 call int[10] 16), arg y[3304] :
  (3302 call int[10] 16)) : _unknown[42] "inline"
  {
    (3308 return(3315 IfExpr (3309 call < x y) then
    { scopeless
      x
    } else
    { scopeless
      y
    } ))
  }
  function min[3320](arg x[3325] :
  (3323 call int[10] 32), arg y[3331] :
  (3329 call int[10] 32)) : _unknown[42] "inline"
  {
    (3335 return(3342 IfExpr (3336 call < x y) then
    { scopeless
      x
    } else
    { scopeless
      y
    } ))
  }
  function min[3347](arg x[3352] :
  (3350 call int[10] 64), arg y[3358] :
  (3356 call int[10] 64)) : _unknown[42] "inline"
  {
    (3362 return(3369 IfExpr (3363 call < x y) then
    { scopeless
      x
    } else
    { scopeless
      y
    } ))
  }
  function min[3374](arg x[3379] :
  (3377 call uint[86] 8), arg y[3385] :
  (3383 call uint[86] 8)) : _unknown[42] "inline"
  {
    (3389 return(3396 IfExpr (3390 call < x y) then
    { scopeless
      x
    } else
    { scopeless
      y
    } ))
  }
  function min[3401](arg x[3406] :
  (3404 call uint[86] 16), arg y[3412] :
  (3410 call uint[86] 16)) : _unknown[42] "inline"
  {
    (3416 return(3423 IfExpr (3417 call < x y) then
    { scopeless
      x
    } else
    { scopeless
      y
    } ))
  }
  function min[3428](arg x[3433] :
  (3431 call uint[86] 32), arg y[3439] :
  (3437 call uint[86] 32)) : _unknown[42] "inline"
  {
    (3443 return(3450 IfExpr (3444 call < x y) then
    { scopeless
      x
    } else
    { scopeless
      y
    } ))
  }
  function min[3455](arg x[3460] :
  (3458 call uint[86] 64), arg y[3466] :
  (3464 call uint[86] 64)) : _unknown[42] "inline"
  {
    (3470 return(3477 IfExpr (3471 call < x y) then
    { scopeless
      x
    } else
    { scopeless
      y
    } ))
  }
  function min[3482](arg x[3487] :
  (3485 call real[13] 32), arg y[3493] :
  (3491 call real[13] 32)) : _unknown[42] "inline"
  {
    (3497 return(3509 IfExpr (3498 call ||(3500 call < x y)(3505 call isNan x)) then
    { scopeless
      x
    } else
    { scopeless
      y
    } ))
  }
  function min[3514](arg x[3519] :
  (3517 call real[13] 64), arg y[3525] :
  (3523 call real[13] 64)) : _unknown[42] "inline"
  {
    (3529 return(3541 IfExpr (3530 call ||(3532 call < x y)(3537 call isNan x)) then
    { scopeless
      x
    } else
    { scopeless
      y
    } ))
  }
  function min[3546](arg x[3551] :
  (3549 call int[10] 8), arg y[3557] :
  (3555 call uint[86] 8)) : _unknown[42] "inline"
  {
    (3561 return(3573 IfExpr (3562 call < x y) then
    { scopeless
      x
    } else
    { scopeless
      (3567 call : y(3571 call int[10] 8))
    } ))
  }
  function min[3578](arg x[3583] :
  (3581 call int[10] 16), arg y[3589] :
  (3587 call uint[86] 16)) : _unknown[42] "inline"
  {
    (3593 return(3605 IfExpr (3594 call < x y) then
    { scopeless
      x
    } else
    { scopeless
      (3599 call : y(3603 call int[10] 16))
    } ))
  }
  function min[3610](arg x[3615] :
  (3613 call int[10] 32), arg y[3621] :
  (3619 call uint[86] 32)) : _unknown[42] "inline"
  {
    (3625 return(3637 IfExpr (3626 call < x y) then
    { scopeless
      x
    } else
    { scopeless
      (3631 call : y(3635 call int[10] 32))
    } ))
  }
  function min[3642](arg x[3647] :
  (3645 call int[10] 64), arg y[3653] :
  (3651 call uint[86] 64)) : _unknown[42] "inline"
  {
    (3657 return(3669 IfExpr (3658 call < x y) then
    { scopeless
      x
    } else
    { scopeless
      (3663 call : y(3667 call int[10] 64))
    } ))
  }
  function min[3674](arg x[3679] :
  (3677 call uint[86] 8), arg y[3685] :
  (3683 call int[10] 8)) : _unknown[42] "inline"
  {
    (3689 return(3701 IfExpr (3690 call < x y) then
    { scopeless
      (3694 call : x(3698 call int[10] 8))
    } else
    { scopeless
      y
    } ))
  }
  function min[3706](arg x[3711] :
  (3709 call uint[86] 16), arg y[3717] :
  (3715 call int[10] 16)) : _unknown[42] "inline"
  {
    (3721 return(3733 IfExpr (3722 call < x y) then
    { scopeless
      (3726 call : x(3730 call int[10] 16))
    } else
    { scopeless
      y
    } ))
  }
  function min[3738](arg x[3743] :
  (3741 call uint[86] 32), arg y[3749] :
  (3747 call int[10] 32)) : _unknown[42] "inline"
  {
    (3753 return(3765 IfExpr (3754 call < x y) then
    { scopeless
      (3758 call : x(3762 call int[10] 32))
    } else
    { scopeless
      y
    } ))
  }
  function min[3770](arg x[3775] :
  (3773 call uint[86] 64), arg y[3781] :
  (3779 call int[10] 64)) : _unknown[42] "inline"
  {
    (3785 return(3797 IfExpr (3786 call < x y) then
    { scopeless
      (3790 call : x(3794 call int[10] 64))
    } else
    { scopeless
      y
    } ))
  }
  function min[3802](arg x[3804]:_any[141](?), arg y[3806]:_any[141](?)) : _unknown[42] "last resort"
  {
    (3820 call compilerError "min() and max() are not supported for atomic arguments - apply read() to those arguments first")
  }
  where {
    (3808 call ||(3811 call isAtomicType(3813 'typeof' x))(3815 call isAtomicType(3817 'typeof' y)))
  }
  function min[3825](arg x[3827]:_any[141](?), arg y[3829]:_any[141](?)) : _unknown[42] "inline"
  {
    (3862 return(3869 IfExpr (3863 call < x y) then
    { scopeless
      x
    } else
    { scopeless
      y
    } ))
  }
  where {
    (3831 call &&(3833 call &&(3835 call !(3838 call isArray x))(3840 call !(3843 call isArray y)))(3845 call !(3847 call &&(3850 call isNumeric(3852 call _desync(3854 'typeof' x)))(3856 call isNumeric(3858 call _desync(3860 'typeof' y))))))
  }
  function min[3875](arg x[3877]:_any[141](?), arg y[3879]:_any[141](?), arg z[3883]:_any[141](?) ...) : _unknown[42] "inline"
  {
    (3887 return(3889 call min(3891 call min x y)(3895 'expand_tuple' z)))
  }
  function min[3898](param arg x[3901] :
  numeric, param arg y[3905] :
  numeric) param : _unknown[42] "inline"
  {
    (3919 return(3926 IfExpr (3920 call < x y) then
    { scopeless
      x
    } else
    { scopeless
      y
    } ))
  }
  where {
    (3908 call !(3910 call ||(3913 call isComplex x)(3916 call isComplex y)))
  }
  function mod[3932](param arg x[3935] :
  integral, param arg y[3939] :
  integral) param : _unknown[42]
  {
    { scopeless
      unknown temp[3944] "param"(3945 call % x y)
      (3950 'end of statement')
    }
    (3951 return(3987 IfExpr (3953 call isNonnegative y) then
    { scopeless(3972 IfExpr (3956 call isUintType(3958 'typeof' x)) then
      { scopeless
        temp
      } else
      { scopeless(3969 IfExpr (3960 call >= temp 0) then
        { scopeless
          temp
        } else
        { scopeless
          (3965 call + temp y)
        } )
      } )
    } else
    { scopeless(3984 IfExpr (3975 call <= temp 0) then
      { scopeless
        temp
      } else
      { scopeless
        (3980 call + temp y)
      } )
    } ))
  }
  function mod[3992](arg x[3995] :
  integral, arg y[3999] :
  integral) : _unknown[42]
  {
    { scopeless
      const temp[4004] "const"(4005 call % x y)
      (4010 'end of statement')
    }
    (4011 return(4047 IfExpr (4013 call isNonnegative y) then
    { scopeless(4032 IfExpr (4016 call isUintType(4018 'typeof' x)) then
      { scopeless
        temp
      } else
      { scopeless(4029 IfExpr (4020 call >= temp 0) then
        { scopeless
          temp
        } else
        { scopeless
          (4025 call + temp y)
        } )
      } )
    } else
    { scopeless(4044 IfExpr (4035 call <= temp 0) then
      { scopeless
        temp
      } else
      { scopeless
        (4040 call + temp y)
      } )
    } ))
  }
  function mod[4052](arg x[4057] :
  (4055 call real[13] 32), arg y[4063] :
  (4061 call real[13] 32)) : _unknown[42]
  {
    (4070 return(4071 call - x(4074 call * y(4078 call floor(4079 call / x y)))))
  }
  { scopeless type
    (4067 call real[13] 32)
  }
  function mod[4086](arg x[4091] :
  (4089 call real[13] 64), arg y[4097] :
  (4095 call real[13] 64)) : _unknown[42]
  {
    (4104 return(4105 call - x(4108 call * y(4112 call floor(4113 call / x y)))))
  }
  { scopeless type
    (4101 call real[13] 64)
  }
  function nan[4120]() param : _unknown[42] "inline" "no parens"
  {
    (4126 return chpl_NAN)
  }
  { scopeless type
    (4123 call real[13] 64)
  }
  function phase[4131](arg x[4137] :
  (4134 call complex[111] unknown w[4135])) : _unknown[42] "inline"
  {
    function cargf[4147](arg x[4152] :
    (4150 call complex[111] 64)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      (4156 call real[13] 32)
    }
    function carg[4161](arg x[4166] :
    (4164 call complex[111] 128)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      (4170 call real[13] 64)
    }
    if(4189 call _cond_test(4185 call == w 64))
    {
      { scopeless
        (4175 return(4177 call cargf x))
      }
    }
    {
      { scopeless
        (4180 return(4182 call carg x))
      }
    }
  }
  { scopeless type
    (4141 call real[13](4142 call / w 2))
  }
  function riemProj[4198](arg x[4204] :
  (4201 call complex[111] unknown w[4202])) : _unknown[42] "inline"
  {
    function cprojf[4211](arg x[4216] :
    (4214 call complex[111] 64)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      (4220 call complex[111] 64)
    }
    function cproj[4225](arg x[4230] :
    (4228 call complex[111] 128)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      (4234 call complex[111] 128)
    }
    if(4253 call _cond_test(4249 call == w 64))
    {
      { scopeless
        (4239 return(4241 call cprojf x))
      }
    }
    {
      { scopeless
        (4244 return(4246 call cproj x))
      }
    }
  }
  { scopeless type
    (4208 call complex[111] w)
  }
  function round[4262](arg x[4267] :
  (4265 call real[13] 64)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
  {
  }
  { scopeless type
    (4271 call real[13] 64)
  }
  function round[4276](arg x[4281] :
  (4279 call real[13] 32)) : _unknown[42] "inline"
  {
    function roundf[4288](arg x[4293] :
    (4291 call real[13] 32)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      (4297 call real[13] 32)
    }
    (4302 return(4304 call roundf x))
  }
  { scopeless type
    (4285 call real[13] 32)
  }
  function sgn[4309](arg x[4315] :
  (4312 call int[10] unknown w[4313])) : _unknown[42] "inline" "@unstable"
  {
    (4322 return(4323 call :(4325 call -(4327 call :(4329 call > x 0)(4334 call int[10] 8))(4336 call :(4338 call < x 0)(4343 call int[10] 8)))(4346 call int[10] 8)))
  }
  { scopeless type
    (4319 call int[10] 8)
  }
  function sgn[4351](arg x[4357] :
  (4354 call uint[86] unknown w[4355])) : _unknown[42] "inline" "@unstable"
  {
    (4364 return(4365 call :(4367 call > x 0)(4372 call uint[86] 8)))
  }
  { scopeless type
    (4361 call uint[86] 8)
  }
  function sgn[4377](param arg x[4380] :
  integral) param : _unknown[42] "@unstable"
  {
    (4384 return(4401 IfExpr (4385 call > x 0) then
    { scopeless
      1
    } else
    { scopeless(4398 IfExpr (4390 call == x 0) then
      { scopeless
        0
      } else
      { scopeless
        (4395 call - 1)
      } )
    } ))
  }
  function sgn[4406](arg x[4412] :
  (4409 call real[13] unknown w[4410])) : _unknown[42] "inline" "@unstable"
  {
    (4419 return(4420 call :(4422 call -(4424 call :(4426 call > x 0.0)(4431 call int[10] 8))(4433 call :(4435 call < x 0.0)(4440 call int[10] 8)))(4443 call int[10] 8)))
  }
  { scopeless type
    (4416 call int[10] 8)
  }
  function sqrt[4448](arg x[4453] :
  (4451 call real[13] 64)) : _unknown[42] "inline"
  {
    (4460 return(4461 'sqrt' x))
  }
  { scopeless type
    (4457 call real[13] 64)
  }
  function sqrt[4466](param arg x[4471] :
  (4469 call real[13] 64)) param : _unknown[42]
  {
    if(4488 call _cond_test(4484 call < x 0))
    {
      (4480 call compilerError "sqrt of a negative number -- cast to complex if a complex result is desired")
    }
    (4492 return(4493 'sqrt' x))
  }
  { scopeless type
    (4475 call real[13] 64)
  }
  function sqrt[4498](arg x[4503] :
  (4501 call real[13] 32)) : _unknown[42] "inline"
  {
    (4510 return(4511 'sqrt' x))
  }
  { scopeless type
    (4507 call real[13] 32)
  }
  function sqrt[4516](param arg x[4521] :
  (4519 call real[13] 32)) param : _unknown[42]
  {
    if(4536 call _cond_test(4532 call < x 0))
    {
      (4530 call compilerError "sqrt of a negative number -- cast to complex if a complex result is desired")
    }
    (4540 return(4541 'sqrt' x))
  }
  { scopeless type
    (4525 call real[13] 32)
  }
  function sqrt[4546](arg x[4551] :
  (4549 call complex[111] 64)) : _unknown[42] "inline"
  {
    function csqrtf[4558](arg x[4563] :
    (4561 call complex[111] 64)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      (4567 call complex[111] 64)
    }
    (4572 return(4574 call csqrtf x))
  }
  { scopeless type
    (4555 call complex[111] 64)
  }
  function sqrt[4579](param arg x[4584] :
  (4582 call complex[111] 64)) param : _unknown[42]
  {
    (4591 return(4592 'sqrt' x))
  }
  { scopeless type
    (4588 call complex[111] 64)
  }
  function sqrt[4597](arg x[4602] :
  (4600 call complex[111] 128)) : _unknown[42] "inline"
  {
    function csqrt[4609](arg x[4614] :
    (4612 call complex[111] 128)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      (4618 call complex[111] 128)
    }
    (4623 return(4625 call csqrt x))
  }
  { scopeless type
    (4606 call complex[111] 128)
  }
  function sqrt[4630](param arg x[4635] :
  (4633 call complex[111] 128)) param : _unknown[42]
  {
    (4642 return(4643 'sqrt' x))
  }
  { scopeless type
    (4639 call complex[111] 128)
  }
  function trunc[4648](arg x[4653] :
  (4651 call real[13] 64)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
  {
  }
  { scopeless type
    (4657 call real[13] 64)
  }
  function trunc[4662](arg x[4667] :
  (4665 call real[13] 32)) : _unknown[42] "inline"
  {
    function truncf[4674](arg x[4679] :
    (4677 call real[13] 32)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      (4683 call real[13] 32)
    }
    (4688 return(4690 call truncf x))
  }
  { scopeless type
    (4671 call real[13] 32)
  }
  function isClose[4695](arg x[4697]:_any[141](?), arg y[4699]:_any[141](?), arg relTol[4704] =
  1e-05, arg absTol[4708] =
  0.0) : _unknown[42] "inline"
  {
    if(4790 call _cond_test(4760 call !(4762 call &&(4764 call ||(4766 call ||(4769 call isRealValue x)(4772 call isImagValue x))(4775 call isComplexValue x))(4777 call ||(4779 call ||(4782 call isRealValue y)(4785 call isImagValue y))(4788 call isComplexValue y)))))
    {
      if(4756 call _cond_test(4748 call ||(4751 call isArrayValue x)(4754 call isArrayValue y)))
      {
        (4716 call compilerError "'isClose' does not support promotion, please call it with the individual values")
      }
      {
        (4722 call compilerError(4723 call +(4725 call +(4727 call +(4729 call + "x and y must be either 'real', 'imag', or 'complex', x was '"(4734 call :(4737 'typeof' x) string[244])) "' and y was '")(4742 call :(4745 'typeof' y) string[244])) "'"))
      }
    }
    if(4812 call _cond_test(4805 call && boundsChecking(4808 call < relTol 0)))
    {
      { scopeless
        (4800 call(4797 call . HaltWrappers c"boundsCheckHalt") "Input value for relTol must be positive")
      }
    }
    if(4833 call _cond_test(4826 call && boundsChecking(4829 call < absTol 0)))
    {
      { scopeless
        (4821 call(4818 call . HaltWrappers c"boundsCheckHalt") "Input value for absTol must be positive")
      }
    }
    { scopeless
      unknown diff[4839](4842 call abs(4843 call - x y)) real[13]
      (4848 'end of statement')
    }
    (4849 return(4850 call ||(4852 call ||(4854 call <= diff(4858 call abs(4859 call * relTol y)))(4863 call <= diff(4867 call abs(4868 call * relTol x))))(4872 call <= diff absTol)))
  }
  { scopeless type
    bool
  }
  function signbit[4879](arg x[4884] :
  (4882 call real[13] 32)) : _unknown[42] "inline" "@unstable"
  {
    function chpl_macro_float_signbit[4889](arg x[4894] :
    (4892 call real[13] 32)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (4901 return(4902 call :(4905 call chpl_macro_float_signbit x) bool))
  }
  { scopeless type
    bool
  }
  function signbit[4911](arg x[4916] :
  (4914 call real[13] 64)) : _unknown[42] "inline" "@unstable"
  {
    function chpl_macro_double_signbit[4921](arg x[4926] :
    (4924 call real[13] 64)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (4933 return(4934 call :(4937 call chpl_macro_double_signbit x) bool))
  }
  { scopeless type
    bool
  }
}