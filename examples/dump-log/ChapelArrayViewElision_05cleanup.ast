AST dump for ChapelArrayViewElision after pass cleanup.
Module use list: 

{
  (147268 'use' ChapelBase 'only' iterKind)
  (147271 'use' ChapelRange)
  (147274 'use' DefaultRectangular)
  (147277 'use' CTypes)
  (147282 'use' ChapelArray 'only' _validRankChangeArgs)
  function chpl__createProtoSlice[147284](ref arg Arr[147286]:_any[141](?), arg slicingExprs[147289]:_any[141](?) ...) : _unknown[42]
  {
    if(147328 call _cond_test(147321 call ==(147324 call . slicingExprs c"size") 1))
    {
      (147297 return(147298 'new'(147300 call chpl__protoSlice(isConst = 0)(147304 call c_addrOf Arr)(147307 call slicingExprs 0))))
    }
    {
      (147310 return(147311 'new'(147313 call chpl__protoSlice(isConst = 0)(147317 call c_addrOf Arr) slicingExprs)))
    }
  }
  where {
    (147293 call chpl__createProtoSliceArgCheck Arr slicingExprs)
  }
  function chpl__createConstProtoSlice[147337](const  ref arg Arr[147339]:_any[141](?), arg slicingExprs[147342]:_any[141](?) ...) : _unknown[42]
  {
    if(147381 call _cond_test(147374 call ==(147377 call . slicingExprs c"size") 1))
    {
      (147351 return(147352 'new'(147354 call chpl__protoSlice(isConst = 1)(147358 call c_addrOfConst Arr)(147361 call slicingExprs 0))))
    }
    {
      (147363 return(147364 'new'(147366 call chpl__protoSlice(isConst = 1)(147370 call c_addrOfConst Arr) slicingExprs)))
    }
  }
  where {
    (147346 call chpl__createProtoSliceArgCheck Arr slicingExprs)
  }
  function chpl__createProtoSlice[147389](arg x[147391]:_any[141](?), arg slicingExprs[147394]:_any[141](?) ...) : _unknown[42]
  {
    (147398 return(147399 'new'(147401 call chpl__protoSlice)))
  }
  function chpl__createConstProtoSlice[147404](arg x[147406]:_any[141](?), arg slicingExprs[147409]:_any[141](?) ...) : _unknown[42]
  {
    (147413 return(147414 'new'(147416 call chpl__protoSlice)))
  }
  function chpl__ave_exprCanBeProtoSlice[147419](arg base[147421]:_any[141](?), arg idxExprs[147424]:_any[141](?) ...) param : _unknown[42]
  {
    (147429 return(147430 call &&(147433 call chpl__ave_baseTypeSupports base)(147436 call chpl__ave_idxExprsSupport(147438 call . base c"idxType")(147442 'expand_tuple' idxExprs))))
  }
  { scopeless type
    bool
  }
  function chpl__ave_protoSlicesSupportAssignment[147446](arg a[147449] :
  chpl__protoSlice, arg b[147453] :
  chpl__protoSlice) param : _unknown[42]
  {
    if(147473 call _cond_test(147461 call !=(147466 call . a c"isRankChange")(147470 call . b c"isRankChange")))
    {
      (147458 return 0)
    }
    if(147487 call _cond_test(147481 call !(147484 call . a c"isRankChange")))
    {
      (147478 return 1)
    }
    unknown aType[147493] "type variable"(147497 call . a c"slicingExprType")
    unknown bType[147502] "type variable"(147504 call . b c"slicingExprType")
    (147509 call compilerAssert(147510 call ==(147516 call .(147513 call . a c"slicingExprType") c"size")(147523 call .(147520 call . b c"slicingExprType") c"size")))
    {
      unknown i[147526] "index var" 0
      unknown tmp[147578] "maybe param" "temp"
      (147590 'move' tmp[147578](147588 call chpl_compute_low_param_loop_bound 0(147536 call chpl__nudgeHighBound(147533 call .(147530 call . a c"slicingExprType") c"size"))))
      unknown tmp[147579] "maybe param" "temp"
      (147605 'move' tmp[147579](147603 call chpl_compute_high_param_loop_bound 0(147595 call chpl__nudgeHighBound(147597 call .(147599 call . a c"slicingExprType") c"size"))))
      unknown tmp[147580] "maybe param" "temp"
      (147608 'move' tmp[147580] 1)
      ParamForLoop[147610]
      { i[147526] tmp[147578] tmp[147579] tmp[147580]
        {
          if(147574 call _cond_test(147544 call ||(147546 call &&(147549 call isRangeType(147551 call aType i))(147553 call !(147556 call isRangeType(147558 call bType i))))(147560 call &&(147562 call !(147565 call isRangeType(147567 call aType i)))(147570 call isRangeType(147572 call bType i)))))
          {
            (147542 return 0)
          }
        }
      }
      label _unused_continueLabel[147582]
      label _breakLabel[147581]
    }
    (147619 return 1)
  }
  { scopeless type
    bool
  }
  function chpl__protoSlice[148800](?).init[147649](arg _mt[147653]:_MT[201], arg this[147651]:chpl__protoSlice[148800](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (147656 call =(147659 call . this c"rank") 1)
    (147663 call =(147668 call . this c"isConst") 1)
    unknown dummyArr[147673](147676 call chpl__buildArrayExpr 1)
    (147679 'end of statement')
    (147680 call =(147685 call . this c"ptrToArr")(147689 call c_addrOf dummyArr))
    unknown dummyRange[147692](147695 call chpl_build_bounded_range 1 0)
    (147698 'end of statement')
    (147699 call =(147702 call . this c"slicingExprType")(147706 'typeof' dummyRange))
    (147707 call =(147712 call . this c"ranges") dummyRange)
  }
  function chpl__protoSlice[148800](?).init[147718](arg _mt[147728]:_MT[201], arg this[147720]:chpl__protoSlice[148800](?), param arg isConst[147722]:_any[141](?), arg ptrToArr[147724]:_any[141](?), arg slicingExprs[147726]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (147731 call =(147734 call . this c"rank")(147742 call .(147741 call(147738 call . ptrToArr c"deref")) c"rank"))
    (147745 call =(147748 call . this c"isConst") isConst)
    (147752 call =(147755 call . this c"ptrToArr") ptrToArr)
    (147759 call =(147762 call . this c"slicingExprType")(147766 'typeof' slicingExprs))
    if(147912 call _cond_test(147910 call isDomain slicingExprs))
    {
      (147768 call =(147771 call . this c"ranges") slicingExprs)
    }
    {
      if(147904 call _cond_test(147902 call isRange slicingExprs))
      {
        if(147811 call _cond_test(147809 call allBounded slicingExprs))
        {
          (147777 call =(147780 call . this c"ranges") slicingExprs)
        }
        {
          (147785 call =(147788 call . this c"ranges")(147806 call(147792 call tupleOfRangesSlice(147801 call(147798 call .(147797 call(147794 call . ptrToArr c"deref")) c"dims"))(147804 call _build_tuple slicingExprs)) 0))
        }
      }
      {
        if(147896 call _cond_test(147894 call chpl__isTupleOfRanges slicingExprs))
        {
          (147816 call =(147819 call . this c"ranges")(147823 call tupleOfRangesSlice(147832 call(147829 call .(147828 call(147825 call . ptrToArr c"deref")) c"dims")) slicingExprs))
        }
        {
          if(147889 call _cond_test(147879 call _validRankChangeArgs slicingExprs(147886 call .(147885 call(147882 call . ptrToArr c"deref")) c"idxType")))
          {
            (147835 call =(147838 call . this c"ranges")(147842 call tupleOfRangesSlice(147851 call(147848 call .(147847 call(147844 call . ptrToArr c"deref")) c"dims"))(147853 call rangify slicingExprs)))
            (147855 call =(147858 call . this c"isRankChange") 1)
          }
          {
            (147863 call =(147866 call . this c"ranges")(147871 call chpl_build_bounded_range 1 0))
            (147874 call compilerError "Unexpected slicing expr in chpl__protoSlice.init")
          }
        }
      }
    }
  }
  function chpl__protoSlice[148800](?).init=[147919](arg _mt[147927]:_MT[201], arg this[147921]:chpl__protoSlice[148800](?), arg other[147924] :
  chpl__protoSlice) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (147930 call =(147933 call . this c"rank")(147937 call . other c"rank"))
    (147940 call =(147943 call . this c"isConst")(147947 call . other c"isConst"))
    (147950 call =(147953 call . this c"ptrToArr")(147957 call . other c"ptrToArr"))
    (147960 call =(147963 call . this c"slicingExprType")(147967 call . other c"slicingExprType"))
    (147970 call =(147973 call . this c"ranges")(147977 call . other c"ranges"))
    (147980 call =(147983 call . this c"isRankChange")(147987 call . other c"isRankChange"))
    (147994 call(147991 call . this c"chpl__initThisType"))
    (147996 call halt "protoSlice copy initializer should never be called")
  }
  function chpl__protoSlice[148800](?).domOrRange[148002](arg _mt[148006]:_MT[201], arg this[148004]:chpl__protoSlice[148800](?)) : _unknown[42] "inline" "method" "primary method" "no parens"
  {
    (148013 return ranges)
  }
  where {
    (148008 call == rank 1)
  }
  function chpl__protoSlice[148800](?).domOrRange[148018](arg _mt[148022]:_MT[201], arg this[148020]:chpl__protoSlice[148800](?)) : _unknown[42] "inline" "method" "primary method" "no parens"
  {
    if(148043 call _cond_test(148041 call isDomain ranges))
    {
      (148029 return ranges)
    }
    {
      (148032 return(148037 call chpl__buildDomainExpr(148035 'expand_tuple' ranges) 1))
    }
  }
  where {
    (148024 call > rank 1)
  }
  function chpl__protoSlice[148800](?).dims[148052](arg _mt[148056]:_MT[201], arg this[148054]:chpl__protoSlice[148800](?)) : _unknown[42] "inline" "method" "primary method"
  {
    if(148108 call _cond_test(148103 call chpl__isTupleOfRanges(148105 call . this c"ranges")))
    {
      (148060 return ranges)
    }
    {
      if(148097 call _cond_test(148092 call isDomain(148094 call . this c"ranges")))
      {
        (148063 return(148068 call(148065 call . ranges c"dims")))
      }
      {
        if(148087 call _cond_test(148082 call isRange(148084 call . this c"ranges")))
        {
          (148070 return(148073 call _build_tuple ranges))
        }
        {
          (148077 call compilerError "Unhandled case in chpl__protoSlice.dims()")
        }
      }
    }
  }
  function chpl__protoSlice[148800](?).rank[148115](arg _mt[148119]:_MT[201], arg this[148117]:chpl__protoSlice[148800](?)) param : _unknown[42] "inline" "method" "primary method" "no parens"
  {
    (148122 return(148128 call .(148127 call(148124 call . ptrToArr c"deref")) c"rank"))
  }
  function chpl__protoSlice[148800](?).eltType[148133](arg _mt[148137]:_MT[201], arg this[148135]:chpl__protoSlice[148800](?)) type : _unknown[42] "inline" "method" "primary method" "no parens"
  {
    (148140 return(148146 call .(148145 call(148142 call . ptrToArr c"deref")) c"eltType"))
  }
  function chpl__protoSlice[148800](?)._value[148151](arg _mt[148155]:_MT[201], arg this[148153]:chpl__protoSlice[148800](?)) : _unknown[42] "inline" "method" "primary method" "no parens"
  {
    (148158 return(148164 call .(148163 call(148160 call . ptrToArr c"deref")) c"_value"))
  }
  function chpl__protoSlice[148800](?).sizeAs[148169](arg _mt[148175]:_MT[201], arg this[148171]:chpl__protoSlice[148800](?), arg t[148173]:_any[141](?)) : _unknown[42] "inline" "method" "primary method"
  {
    (148182 return(148187 call(148184 call . ranges c"sizeAs") t))
  }
  where {
    (148177 call == rank 1)
  }
  function chpl__protoSlice[148800](?).sizeAs[148192](arg _mt[148198]:_MT[201], arg this[148194]:chpl__protoSlice[148800](?), arg t[148196]:_any[141](?)) : _unknown[42] "inline" "method" "primary method"
  {
    if(148281 call _cond_test(148276 call isDomain(148278 call . this c"ranges")))
    {
      (148202 return(148207 call(148204 call . ranges c"sizeAs") t))
    }
    {
      unknown size[148211](148212 call : 1 t)
      (148217 'end of statement')
      {
        unknown r[148218] "index var" 0
        unknown tmp[148238] "maybe param" "temp"
        (148250 'move' tmp[148238](148248 call chpl_compute_low_param_loop_bound 0(148222 call chpl__nudgeHighBound rank)))
        unknown tmp[148239] "maybe param" "temp"
        (148259 'move' tmp[148239](148257 call chpl_compute_high_param_loop_bound 0(148255 call chpl__nudgeHighBound rank)))
        unknown tmp[148240] "maybe param" "temp"
        (148262 'move' tmp[148240] 1)
        ParamForLoop[148264]
        { r[148218] tmp[148238] tmp[148239] tmp[148240]
          {
            (148227 call *= size(148236 call(148233 call .(148231 call ranges r) c"sizeAs") t))
          }
        }
        label _unused_continueLabel[148242]
        label _breakLabel[148241]
      }
      (148273 return size)
    }
  }
  function chpl__protoSlice[148800](?).isRectangular[148287](arg _mt[148291]:_MT[201], arg this[148289]:chpl__protoSlice[148800](?)) param : _unknown[42] "inline" "method" "primary method"
  {
    (148294 return(148305 call(148302 call .(148299 call(148296 call . ptrToArr c"deref")) c"isRectangular")))
  }
  function chpl__protoSlice[148800](?).these[148308](arg _mt[148312]:_MT[201], arg this[148310]:chpl__protoSlice[148800](?)) ref : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(148427 call _cond_test(148423 call == rank 1))
    {
      {
        unknown _indexOfInterest[148337] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[148338] "expr temp" "temp"
        (148347 'move' _iterator[148338](148345 call _getIterator(148322 call chpl__serialViewIter1D(148328 call .(148327 call(148324 call . ptrToArr c"deref")) c"_instance") domOrRange)))
        Defer
        {
          {
            (148362 call _freeIterator _iterator[148338])
          }
        }
        { scopeless type
          (148352 'move' _indexOfInterest[148337](148349 call iteratorIndex _iterator[148338]))
        }
        ForLoop[148339] order-independent
        {
          unknown elem[148319] "index var" "insert auto destroy"
          (148357 'move' elem[148319] _indexOfInterest[148337])
          {
            (148333 yield elem)
          }
          label _continueLabel[148342]
          _indexOfInterest[148337]
          _iterator[148338]
        }
        label _breakLabel[148343]
      }
    }
    {
      {
        unknown _indexOfInterest[148391] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[148392] "expr temp" "temp"
        (148401 'move' _iterator[148392](148399 call _getIterator(148373 call chpl__serialViewIter(148379 call .(148378 call(148375 call . ptrToArr c"deref")) c"_instance")(148383 call . domOrRange c"_instance"))))
        Defer
        {
          {
            (148416 call _freeIterator _iterator[148392])
          }
        }
        { scopeless type
          (148406 'move' _indexOfInterest[148391](148403 call iteratorIndex _iterator[148392]))
        }
        ForLoop[148393] order-independent
        {
          unknown elem[148370] "index var" "insert auto destroy"
          (148411 'move' elem[148370] _indexOfInterest[148391])
          {
            (148387 yield elem)
          }
          label _continueLabel[148396]
          _indexOfInterest[148391]
          _iterator[148392]
        }
        label _breakLabel[148397]
      }
    }
  }
  where {
    (148314 call ! isConst)
  }
  function chpl__protoSlice[148800](?).these[148434](arg _mt[148438]:_MT[201], arg this[148436]:chpl__protoSlice[148800](?)) const ref : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(148551 call _cond_test(148547 call == rank 1))
    {
      {
        unknown _indexOfInterest[148461] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[148462] "expr temp" "temp"
        (148471 'move' _iterator[148462](148469 call _getIterator(148446 call chpl__serialViewIter1D(148452 call .(148451 call(148448 call . ptrToArr c"deref")) c"_instance") domOrRange)))
        Defer
        {
          {
            (148486 call _freeIterator _iterator[148462])
          }
        }
        { scopeless type
          (148476 'move' _indexOfInterest[148461](148473 call iteratorIndex _iterator[148462]))
        }
        ForLoop[148463] order-independent
        {
          unknown elem[148443] "index var" "insert auto destroy"
          (148481 'move' elem[148443] _indexOfInterest[148461])
          {
            (148457 yield elem)
          }
          label _continueLabel[148466]
          _indexOfInterest[148461]
          _iterator[148462]
        }
        label _breakLabel[148467]
      }
    }
    {
      {
        unknown _indexOfInterest[148515] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[148516] "expr temp" "temp"
        (148525 'move' _iterator[148516](148523 call _getIterator(148497 call chpl__serialViewIter(148503 call .(148502 call(148499 call . ptrToArr c"deref")) c"_instance")(148507 call . domOrRange c"_instance"))))
        Defer
        {
          {
            (148540 call _freeIterator _iterator[148516])
          }
        }
        { scopeless type
          (148530 'move' _indexOfInterest[148515](148527 call iteratorIndex _iterator[148516]))
        }
        ForLoop[148517] order-independent
        {
          unknown elem[148494] "index var" "insert auto destroy"
          (148535 'move' elem[148494] _indexOfInterest[148515])
          {
            (148511 yield elem)
          }
          label _continueLabel[148520]
          _indexOfInterest[148515]
          _iterator[148516]
        }
        label _breakLabel[148521]
      }
    }
  }
  where {
    isConst
  }
  function chpl__protoSlice[148800](?).these[148558](arg _mt[148566]:_MT[201], arg this[148560]:chpl__protoSlice[148800](?), param arg tag[148563] :
  iterKind) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[148590] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[148591] "expr temp" "temp"
      (148600 'move' _iterator[148591](148598 call _getIterator(148582 call(148579 call . domOrRange c"these")(148584 call . iterKind c"leader"))))
      Defer
      {
        {
          (148615 call _freeIterator _iterator[148591])
        }
      }
      { scopeless type
        (148605 'move' _indexOfInterest[148590](148602 call iteratorIndex _iterator[148591]))
      }
      ForLoop[148592]
      {
        unknown followThis[148576] "index var" "insert auto destroy"
        (148610 'move' followThis[148576] _indexOfInterest[148590])
        {
          (148588 yield followThis)
        }
        label _continueLabel[148595]
        _indexOfInterest[148590]
        _iterator[148591]
      }
      label _breakLabel[148596]
    }
  }
  where {
    (148568 call == tag(148572 call . iterKind c"leader"))
  }
  function chpl__protoSlice[148800](?).these[148625](arg _mt[148635]:_MT[201], arg this[148627]:chpl__protoSlice[148800](?), param arg tag[148630] :
  iterKind, arg followThis[148633]:_any[141](?)) ref : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown arr[148651] "ref var"(148656 call(148653 call . ptrToArr c"deref"))
    (148658 'end of statement')
    {
      unknown _indexOfInterest[148678] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[148679] "expr temp" "temp"
      (148688 'move' _iterator[148679](148686 call _getIterator(148665 call(148662 call . domOrRange c"these")(148667 call . iterKind c"follower") followThis)))
      Defer
      {
        {
          (148703 call _freeIterator _iterator[148679])
        }
      }
      { scopeless type
        (148693 'move' _indexOfInterest[148678](148690 call iteratorIndex _iterator[148679]))
      }
      ForLoop[148680] order-independent
      {
        unknown i[148659] "index var" "insert auto destroy"
        (148698 'move' i[148659] _indexOfInterest[148678])
        {
          (148672 yield(148674 call arr i))
        }
        label _continueLabel[148683]
        _indexOfInterest[148678]
        _iterator[148679]
      }
      label _breakLabel[148684]
    }
  }
  where {
    (148637 call &&(148639 call == tag(148643 call . iterKind c"follower"))(148646 call ! isConst))
  }
  function chpl__protoSlice[148800](?).these[148713](arg _mt[148723]:_MT[201], arg this[148715]:chpl__protoSlice[148800](?), param arg tag[148718] :
  iterKind, arg followThis[148721]:_any[141](?)) const ref : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    const arr[148737] "const" "ref var"(148742 call(148739 call . ptrToArr c"deref"))
    (148744 'end of statement')
    {
      unknown _indexOfInterest[148764] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[148765] "expr temp" "temp"
      (148774 'move' _iterator[148765](148772 call _getIterator(148751 call(148748 call . domOrRange c"these")(148753 call . iterKind c"follower") followThis)))
      Defer
      {
        {
          (148789 call _freeIterator _iterator[148765])
        }
      }
      { scopeless type
        (148779 'move' _indexOfInterest[148764](148776 call iteratorIndex _iterator[148765]))
      }
      ForLoop[148766] order-independent
      {
        unknown i[148745] "index var" "insert auto destroy"
        (148784 'move' i[148745] _indexOfInterest[148764])
        {
          (148758 yield(148760 call arr i))
        }
        label _continueLabel[148769]
        _indexOfInterest[148764]
        _iterator[148765]
      }
      label _breakLabel[148770]
    }
  }
  where {
    (148725 call &&(148727 call == tag(148731 call . iterKind c"follower")) isConst)
  }
  type chpl__protoSlice[148800](?) unknown rank[147626] "param" unknown isConst[147630] "param" unknown ptrToArr[147634] unknown slicingExprType[147638] "type variable" unknown ranges[147641] unknown isRankChange[147645] "param" 0
  function ==[148802](const  ref arg lhs[148807] :
  (148805 call chpl__protoSlice ?[227]), const  ref arg rhs[148813] :
  (148811 call chpl__protoSlice ?[227])) : _unknown[42] "operator"
  {
    (148817 return(148818 call &&(148820 call &&(148822 call &&(148824 call ==(148827 'typeof' lhs)(148829 'typeof' rhs))(148830 call ==(148833 call . lhs c"rank")(148837 call . rhs c"rank")))(148840 call ==(148843 call . lhs c"ptrToArr")(148847 call . rhs c"ptrToArr")))(148850 call ==(148853 call . lhs c"ranges")(148857 call . rhs c"ranges"))))
  }
  function :[148862](ref arg a[148865] :
  chpl__protoSlice, arg b[148869] :
  chpl__protoSlice) : _unknown[42] "inline" "operator" "no return value for void"
  {
    (148874 call compilerError "Should never cast proto slices")
  }
  function isProtoSlice[148880](arg a[148882]:_any[141](?)) param : _unknown[42]
  {
    (148885 return(394784 'is_subtype' chpl__protoSlice(148889 'typeof' a)))
  }
  function chpl__createProtoSliceArgCheck[148893](arg Arr[148895]:_any[141](?), arg slicingExprs[148897]:_any[141](?)) param : _unknown[42] "private"
  {
    (148902 call compilerAssert(148904 call isTuple slicingExprs))
    (148906 return(148907 call &&(148910 call chpl__ave_baseTypeSupports Arr)(148912 call ||(148914 call ||(148917 call chpl__isTupleOfRanges slicingExprs)(148919 call &&(148921 call ==(148924 call . slicingExprs c"size") 1)(148929 call isDomain(148931 call slicingExprs 0))))(148934 call _validRankChangeArgs slicingExprs(148937 call . Arr c"idxType")))))
  }
  { scopeless type
    bool
  }
  function chpl__ave_baseTypeSupports[148943](arg base[148945]:_any[141](?)) param : _unknown[42] "private"
  {
    (148951 'import' Reflection)
    (148952 return(148953 call &&(148955 call &&(148958 call isArray base)(394785 'is_subtype' DefaultRectangularArr(148966 'typeof'(148963 call . base c"_instance"))))(148972 call(148969 call . Reflection c"canResolve") "c_addrOf" base)))
  }
  { scopeless type
    bool
  }
  function chpl__ave_idxExprsSupport[148980](arg idxType[148982]:_any[141](?), arg idxExprs[148985]:_any[141](?) ...) param : _unknown[42] "private"
  {
    {
      unknown tid[148990] "index var" 0
      unknown tmp[149052] "maybe param" "temp"
      (149064 'move' tmp[149052](149062 call chpl_compute_low_param_loop_bound 0(148997 call chpl__nudgeHighBound(148994 call . idxExprs c"size"))))
      unknown tmp[149053] "maybe param" "temp"
      (149076 'move' tmp[149053](149074 call chpl_compute_high_param_loop_bound 0(149069 call chpl__nudgeHighBound(149071 call . idxExprs c"size"))))
      unknown tmp[149054] "maybe param" "temp"
      (149079 'move' tmp[149054] 1)
      ParamForLoop[149081]
      { tid[148990] tmp[149052] tmp[149053] tmp[149054]
        {
          if(149047 call _cond_test(149040 call !(149043 call isRange(149045 call idxExprs tid))))
          {
            (149003 return 0)
          }
          {
            if(149036 call _cond_test(149008 call !(149010 call ||(149012 call ==(149017 call .(149015 call idxExprs tid) c"strides")(149021 call . strideKind c"positive"))(149024 call ==(149029 call .(149027 call idxExprs tid) c"strides")(149033 call . strideKind c"one")))))
            {
              (149006 return 0)
            }
          }
        }
      }
      label _unused_continueLabel[149056]
      label _breakLabel[149055]
    }
    (149090 return 1)
  }
  { scopeless type
    bool
  }
  function chpl__ave_idxExprsSupport[149095](arg idxType[149097]:_any[141](?), arg idxExprs[149100] :
  _domain) param : _unknown[42] "private"
  {
    if(149132 call _cond_test(149108 call !(149110 call ||(149112 call ==(149115 call . idxExprs c"strides")(149119 call . strideKind c"positive"))(149122 call ==(149125 call . idxExprs c"strides")(149129 call . strideKind c"one")))))
    {
      (149106 return 0)
    }
    (149136 return 1)
  }
  { scopeless type
    bool
  }
  function chpl__ave_idxExprsSupport[149141](arg idxType[149143]:_any[141](?), arg idxExprs[149146]:_any[141](?) ...) param : _unknown[42] "private"
  {
    (149155 return 1)
  }
  where {
    (149151 call _validRankChangeArgs idxExprs idxType)
  }
  { scopeless type
    bool
  }
  function allBounded[149161](arg ranges[149166] :
  (149164 call range ?[227])) param : _unknown[42] "private"
  {
    (149170 return(149171 call ==(149174 call . ranges c"bounds")(149178 call . boundKind c"both")))
  }
  function allBounded[149183](arg ranges[149185]:_any[141](?)) param : _unknown[42] "private"
  {
    if(149263 call _cond_test(149261 call chpl__isTupleOfRanges ranges))
    {
      {
        unknown i[149189] "index var" 0
        unknown tmp[149220] "maybe param" "temp"
        (149232 'move' tmp[149220](149230 call chpl_compute_low_param_loop_bound 0(149196 call chpl__nudgeHighBound(149193 call . ranges c"size"))))
        unknown tmp[149221] "maybe param" "temp"
        (149244 'move' tmp[149221](149242 call chpl_compute_high_param_loop_bound 0(149237 call chpl__nudgeHighBound(149239 call . ranges c"size"))))
        unknown tmp[149222] "maybe param" "temp"
        (149247 'move' tmp[149222] 1)
        ParamForLoop[149249]
        { i[149189] tmp[149220] tmp[149221] tmp[149222]
          {
            if(149216 call _cond_test(149204 call !=(149209 call .(149207 call ranges i) c"bounds")(149213 call . boundKind c"both")))
            {
              (149202 return 0)
            }
          }
        }
        label _unused_continueLabel[149224]
        label _breakLabel[149223]
      }
      (149258 return 1)
    }
    (149268 call compilerError "Unexpected type to allBounded")
    (149272 return 0)
  }
  function rangify[149276](arg rcTup[149278]:_any[141](?)) : _unknown[42] "private"
  {
    (149282 call compilerAssert(149284 call isTuple rcTup))
    function createRangifiedType[149286](arg rcTupType[149288]:_any[141](?)) type : _unknown[42]
    {
      function recurse[149291](arg curType[149293]:_any[141](?), param arg dim[149295]:_any[141](?)) type : _unknown[42]
      {
        if(149408 call _cond_test(149401 call == dim(149405 call . rcTupType c"size")))
        {
          (149299 return curType)
        }
        {
          if(149397 call _cond_test(149393 call isRangeType(149395 call rcTupType dim)))
          {
            if(149336 call _cond_test(149332 call == dim 0))
            {
              (149303 return(149305 call recurse(149310 call _build_tuple(149308 call rcTupType dim))(149312 call + dim 1)))
            }
            {
              (149317 return(149319 call recurse(149326 call _build_tuple(149322 'expand_tuple' curType)(149324 call rcTupType dim))(149328 call + dim 1)))
            }
          }
          {
            const dummy[149342] "const"(149344 call rcTupType dim)
            (149347 'end of statement')
            const dummyRange[149349] "const"(149352 call chpl_build_bounded_range dummy dummy)
            (149355 'end of statement')
            if(149388 call _cond_test(149384 call == dim 0))
            {
              (149357 return(149359 call recurse(149363 call _build_tuple(149362 'typeof' dummyRange))(149365 call + dim 1)))
            }
            {
              (149370 return(149372 call recurse(149378 call _build_tuple(149375 'expand_tuple' curType)(149377 'typeof' dummyRange))(149380 call + dim 1)))
            }
          }
        }
      }
      (149415 return(149417 call recurse nothing 0))
    }
    unknown ret[149423](149425 call createRangifiedType(149427 'typeof' rcTup))
    (149429 'end of statement')
    {
      unknown i[149430] "index var" 0
      unknown tmp[149474] "maybe param" "temp"
      (149486 'move' tmp[149474](149484 call chpl_compute_low_param_loop_bound 0(149437 call chpl__nudgeHighBound(149434 call . ret c"size"))))
      unknown tmp[149475] "maybe param" "temp"
      (149498 'move' tmp[149475](149496 call chpl_compute_high_param_loop_bound 0(149491 call chpl__nudgeHighBound(149493 call . ret c"size"))))
      unknown tmp[149476] "maybe param" "temp"
      (149501 'move' tmp[149476] 1)
      ParamForLoop[149503]
      { i[149430] tmp[149474] tmp[149475] tmp[149476]
        {
          if(149470 call _cond_test(149466 call isRange(149468 call rcTup i)))
          {
            (149443 call =(149446 call ret i)(149449 call rcTup i))
          }
          {
            (149452 call =(149455 call ret i)(149463 call chpl_build_bounded_range(149458 call rcTup i)(149461 call rcTup i)))
          }
        }
      }
      label _unused_continueLabel[149478]
      label _breakLabel[149477]
    }
    (149512 return ret)
  }
}