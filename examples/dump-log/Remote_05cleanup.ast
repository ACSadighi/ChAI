AST dump for Remote after pass cleanup.
Module use list: 

{
  (387066 'use' ChapelStandard)
  type _RemoteVarContainer[315398](?) unknown containedValue[315394] serializable[310094]
  type _RemoteVarContainer[315411](?)
  function Remote[315924](?).get[315417](arg _mt[315421]:_MT[201], ref arg this[315419]:Remote[315924](?)) ref : _unknown[42] "method" "primary method"
  {
    (315424 return this[315419])
  }
  function Remote[315924](?).ptr[315428](arg _mt[315432]:_MT[201], arg this[315430]:Remote[315924](?)) ref : _unknown[42] "method" "primary method" "no parens"
  {
    (315435 return(315440 call .(315436 call . this[315430] c"value") c"containedValue"))
  }
  function Remote[315924](?).device[315445](arg _mt[315449]:_MT[201], arg this[315447]:Remote[315924](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (315453 return(315461 call chpl_localeID_to_locale(315460 '_wide_get_locale'(315456 call . this[315447] c"ptr"))))
  }
  { scopeless type
    locale[234]
  }
  function Remote[315924](?).init[315466](arg _mt[315479]:_MT[201], arg this[315468]:Remote[315924](?), in arg value[315476] :
  (315471 call _owned(315473 call _RemoteVarContainer[315411](?) unknown eltType[315474]))) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (315482 call =(315485 call . this[315468] c"eltType") eltType[315474])
    (315489 call =(315492 call . this[315468] c"value") value[315476])
  }
  function Remote[315924](?).init[315498](arg _mt[315519]:_MT[201], arg this[315500]:Remote[315924](?), arg value[315504] :
  unknown eltType[315502], arg device[315515] :
  locale[234] =
  (315512 call . Remote[315927](?) c"defaultDevice")) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (315531 call compilerWarning "This initializer doesn't offer the best performance. ")
    unknown v[315536](315538 call _owned(315542 'to nilable class from type'(315540 call _RemoteVarContainer[315411](?) eltType[315502])))
    (315544 'end of statement')
    {
      const tmp[315557] "const" "temp"
      (315558 'move' tmp[315557](315555 'deref'(315554 '_wide_get_locale' device[315515])))
      (315546 call = v[315536](315549 'new'(315551 call _RemoteVarContainer[315411](?) value[315504])))
      (315561 'elided on block' 0 tmp[315557])
    }
    (315569 call(315566 call . this[315500] c"init")(315578 'try!-expr'(315570 call : v[315536](315574 call _owned(315576 call _RemoteVarContainer[315411](?) eltType[315502])))))
  }
  where {
    (315521 call !(395644 'is_subtype'(315527 call Remote ?[227]) eltType[315502]))
  }
  function Remote[315924](?).init[315582](arg _mt[315602]:_MT[201], arg this[315584]:Remote[315924](?), arg eltType[315586]:_any[141](?), in arg tr[315589] :
  _thunkRecord[171](?), arg device[315598] :
  locale[234] =
  (315595 call . Remote[315927](?) c"defaultDevice")) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown v[315606](315608 call _owned(315612 'to nilable class from type'(315610 call _RemoteVarContainer[315411](?) eltType[315586])))
    (315614 'end of statement')
    {
      const tmp[315633] "const" "temp"
      (315634 'move' tmp[315633](315631 'deref'(315630 '_wide_get_locale' device[315598])))
      {
        unknown val[315618] tr[315589] eltType[315586]
        (315622 'end of statement')
        (315623 call = v[315606](315626 'new'(315628 call _RemoteVarContainer[315411](?) val[315618])))
      }
      (315637 'elided on block' 0 tmp[315633])
    }
    (315645 call(315642 call . this[315584] c"init")(315654 'try!-expr'(315646 call : v[315606](315650 call _owned(315652 call _RemoteVarContainer[315411](?) eltType[315586])))))
  }
  function Remote[315924](?).init[315657](arg _mt[315673]:_MT[201], arg this[315659]:Remote[315924](?), arg eltType[315661]:_any[141](?), arg device[315669] :
  locale[234] =
  (315666 call . Remote[315927](?) c"defaultDevice")) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown v[315677](315679 call _owned(315683 'to nilable class from type'(315681 call _RemoteVarContainer[315411](?) eltType[315661])))
    (315685 'end of statement')
    {
      const tmp[315703] "const" "temp"
      (315704 'move' tmp[315703](315701 'deref'(315700 '_wide_get_locale' device[315669])))
      {
        unknown val[315689] eltType[315661]
        (315692 'end of statement')
        (315693 call = v[315677](315696 'new'(315698 call _RemoteVarContainer[315411](?) val[315689])))
      }
      (315707 'elided on block' 0 tmp[315703])
    }
    (315715 call(315712 call . this[315659] c"init")(315724 'try!-expr'(315716 call : v[315677](315720 call _owned(315722 call _RemoteVarContainer[315411](?) eltType[315661])))))
  }
  function Remote[315924](?).copyContainer[315727](arg _mt[315742]:_MT[201], arg this[315729]:Remote[315924](?), arg dest[315738] :
  locale[234] =
  (315734 call . this[315729] c"device")) : _unknown[42] "method" "primary method"
  {
    unknown c[315754](315756 call _owned(315763 'to nilable class from type'(315758 call _RemoteVarContainer[315411](?)(315759 call . this[315729] c"eltType"))))
    (315765 'end of statement')
    {
      const tmp[315790] "const" "temp"
      (315791 'move' tmp[315790](315788 'deref'(315787 '_wide_get_locale' dest[315738])))
      {
        unknown val[315769](315774 call . this[315729] c"ptr")(315770 call . this[315729] c"eltType")
        (315779 'end of statement')
        (315780 call = c[315754](315783 'new'(315785 call _RemoteVarContainer[315411](?) val[315769])))
      }
      (315794 'elided on block' 0 tmp[315790])
    }
    (315798 return(315810 'try!-expr'(315799 call : c[315754](315803 call _owned(315805 call _RemoteVarContainer[315411](?)(315806 call . this[315729] c"eltType"))))))
  }
  { scopeless type
    (315745 call _owned(315747 call _RemoteVarContainer[315411](?)(315748 call . this[315729] c"eltType")))
  }
  function Remote[315924](?).copyTo[315814](arg _mt[315827]:_MT[201], arg this[315816]:Remote[315924](?), arg dest[315823] :
  locale[234] =
  (315819 call . this[315816] c"device")) : _unknown[42] "method" "primary method"
  {
    (315838 return(315839 'new'(315842 call Remote[315927](?)(315849 call(315845 call . this[315816] c"copyContainer") dest[315823]))))
  }
  { scopeless type
    (315830 call _owned(315832 call Remote(315833 call . this[315816] c"eltType")))
  }
  function Remote[315924](?).copy[315854](arg _mt[315858]:_MT[201], arg this[315856]:Remote[315924](?)) : _unknown[42] "method" "primary method"
  {
    (315869 return(315876 call(315872 call . this[315856] c"copyTo")(315877 call . this[315856] c"device")))
  }
  { scopeless type
    (315861 call _owned(315863 call Remote(315864 call . this[315856] c"eltType")))
  }
  function Remote[315924](?).to[315884](arg _mt[315892]:_MT[201], arg this[315886]:Remote[315924](?), arg dest[315889] :
  locale[234]) : _unknown[42] "method" "primary method" "no return value for void"
  {
    if(315904 call _cond_test(315897 call == dest[315889](315900 call . this[315886] c"device")))
    {
      (315895 return _void[46])
    }
    (315909 call =(315911 call . this[315886] c"value")(315919 call(315915 call . this[315886] c"copyContainer") dest[315889]))
  }
  type Remote[315924](?) unknown eltType[315404] "type variable" unknown value[315407](315409 call _owned(315413 call _RemoteVarContainer[315411](?) eltType[315404])) serializable[310094]
  type Remote[315927](?)
  function _unknown[42].get[315928](arg _mt[315939]:_MT[201], ref arg this[315936] :
  (315931 call _owned(315933 call Remote unknown eltType[315934]))) ref : _unknown[42] "method"
  {
    (315947 return this[315936])
  }
  { scopeless type
    (315942 call _owned(315944 call Remote eltType[315934]))
  }
  function _unknown[42].get[315952](arg _mt[315963]:_MT[201], ref arg this[315960] :
  (315955 call _shared(315957 call Remote unknown eltType[315958]))) ref : _unknown[42] "method"
  {
    (315971 return this[315960])
  }
  { scopeless type
    (315966 call _shared(315968 call Remote eltType[315958]))
  }
  function _unknown[42].get[315976](arg _mt[315986]:_MT[201], ref arg this[315983] :
  (315978 'to unmanaged class from unknown'(315980 call Remote unknown eltType[315981]))) ref : _unknown[42] "method"
  {
    (315993 return this[315983])
  }
  { scopeless type
    (315988 'to unmanaged class from unknown'(315990 call Remote eltType[315981]))
  }
  function _unknown[42].defaultDevice[315998](arg _mt[316004]:_MT[201], arg this[316001] :
  Remote[315924](?)) : _unknown[42] "method" "no parens"
  {
    (316008 return(316031 IfExpr (316009 call >=(316018 call .(316015 call .(316012 call here[135591]) c"gpus") c"size") 1) then
    { scopeless
      (316027 call(316024 call .(316023 call here[135591]) c"gpus") 0)
    } else
    { scopeless
      (316030 call here[135591])
    } ))
  }
  { scopeless type
    locale[234]
  }
  (316038 'use' ChapelRemoteVars)
  function __defaultValue[316040](arg t[316042]:_any[141](?)) : _unknown[42] "inline" "private"
  {
    unknown tmp[316046] t[316042]
    (316049 'end of statement')
    (316050 return tmp[316046])
  }
  function chpl__buildRemoteWrapper[316054](arg loc[316057] :
  locale[234], arg inType[316064] :
  (316061 call Remote unknown eltType[316062])) : _unknown[42] "inline"
  {
    (316068 return(316070 call chpl__buildRemoteWrapper loc[316057] inType[316064](316073 'create thunk'(316075 call __defaultValue eltType[316062]))))
  }
  function chpl__buildRemoteWrapper[316079](arg loc[316082] :
  locale[234], arg inType[316091] :
  (316086 call _owned(316088 call Remote unknown eltType[316089])), in arg tr[316095] :
  _thunkRecord[171](?)) : _unknown[42] "inline"
  {
    unknown c[316100](316102 call _owned(316106 'to nilable class from type'(316104 call _RemoteVarContainer[315411](?) eltType[316089])))
    (316108 'end of statement')
    {
      const tmp[316128] "const" "temp"
      (316129 'move' tmp[316128](316126 'deref'(316125 '_wide_get_locale' loc[316082])))
      {
        unknown forced[316112](316114 'force thunk' tr[316095]) eltType[316089]
        (316117 'end of statement')
        (316118 call = c[316100](316121 'new'(316123 call _RemoteVarContainer[315411](?) forced[316112])))
      }
      (316132 'elided on block' 0 tmp[316128])
    }
    (316136 return(316137 'new'(_chpl_manager = _owned[238](?))(316141 call Remote[315927](?)(316150 'try!-expr'(316142 call : c[316100](316146 call _owned(316148 call _RemoteVarContainer[315411](?) eltType[316089])))))))
  }
  function chpl__buildRemoteWrapper[316153](arg loc[316156] :
  locale[234], arg inType[316165] :
  (316160 call _shared(316162 call Remote unknown eltType[316163])), in arg tr[316169] :
  _thunkRecord[171](?)) : _unknown[42] "inline"
  {
    unknown c[316174](316176 call _owned(316180 'to nilable class from type'(316178 call _RemoteVarContainer[315411](?) eltType[316163])))
    (316182 'end of statement')
    {
      const tmp[316202] "const" "temp"
      (316203 'move' tmp[316202](316200 'deref'(316199 '_wide_get_locale' loc[316156])))
      {
        unknown forced[316186](316188 'force thunk' tr[316169]) eltType[316163]
        (316191 'end of statement')
        (316192 call = c[316174](316195 'new'(316197 call _RemoteVarContainer[315411](?) forced[316186])))
      }
      (316206 'elided on block' 0 tmp[316202])
    }
    (316210 return(316211 'new'(_chpl_manager = _shared[242](?))(316215 call Remote[315927](?)(316224 'try!-expr'(316216 call : c[316174](316220 call _owned(316222 call _RemoteVarContainer[315411](?) eltType[316163])))))))
  }
}