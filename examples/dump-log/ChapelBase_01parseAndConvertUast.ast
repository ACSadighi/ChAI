AST dump for ChapelBase after pass parseAndConvertUast.
Module use list: 

{
  unknown c_string[51978] "deprecated" "last resort" "type variable" chpl_c_string
  unknown c_fn_ptr[51982] "type variable" "@unstable" chpl_c_fn_ptr
  function _unknown[42].=[51985](arg _mt[51999]:_MT[201], arg this[51988] :
  c_fn_ptr, ref arg a[51992] :
  c_fn_ptr, arg b[51996] :
  c_fn_ptr) : _unknown[42] "assignop" "inline" "method" "operator" "@unstable"
  {
    (52002 '=' a b)
  }
  function _unknown[42].this[52007](arg _mt[52013]:_MT[201], arg this[52010] :
  c_fn_ptr) : _unknown[42] "method" "@unstable" "do not resolve unless called"
  {
    (52017 call compilerError "Can't call a C function pointer within Chapel")
  }
  function _unknown[42].this[52023](arg _mt[52033]:_MT[201], arg this[52026] :
  c_fn_ptr, arg args[52030]:_any[141](?) ...) : _unknown[42] "method" "@unstable" "do not resolve unless called"
  {
    (52037 call compilerError "Can't call a C function pointer within Chapel")
  }
  { scopeless
    unknown rootLocaleInitialized[52042] "locale private" 0 bool
    (52046 'end of statement')
  }
  (52048 'use' ChapelStandard)
  (52051 'use' CTypes)
  (52054 'use' ChplConfig)
  { scopeless
    unknown enablePostfixBangChecks[52057] "config" "param" 0
    (52060 'end of statement')
  }
  function chpl_config_has_value[52061](arg name[52066] :
  (52064 call c_ptrConst c_char), arg module_name[52072] :
  (52070 call c_ptrConst c_char)) : _unknown[42] "extern" "local args" "no fn body"
  {
  }
  { scopeless type
    bool
  }
  function chpl_config_get_value[52079](arg name[52084] :
  (52082 call c_ptrConst c_char), arg module_name[52090] :
  (52088 call c_ptrConst c_char)) : _unknown[42] "extern" "local args" "no fn body"
  {
  }
  { scopeless type
    (52094 call c_ptrConst c_char)
  }
  { scopeless
    unknown defaultLowBound[52100] "config" "param" 0
    (52103 'end of statement')
  }
  { scopeless
    unknown chpl_stringMinAllocSize[52105] "config" "param" 0
    (52108 'end of statement')
  }
  { scopeless
    unknown warnMaximalRange[52110] "config" "param" 0
    (52113 'end of statement')
  }
  { scopeless
    unknown chpl_unstableInternalSymbolForTesting[52115] "@unstable" int[10]
    (52118 'end of statement')
  }
  chpl_unstableInternalSymbolForTesting
  { scopeless
    unknown assocParSafeDefault[52121] "config" "param" 0
    (52124 'end of statement')
  }
  { scopeless
    unknown noParSafeWarning[52126] "config" "param" 0
    (52129 'end of statement')
  }
  type RootClass[236]
  type object[52135]
  type iterKind[52144] def leader[52138]:iterKind[52144] def follower[52140]:iterKind[52144] def standalone[52142]:iterKind[52144]
  {
  }
  { scopeless
    unknown fcfsUsePointerImplementation[52149] "config" "param" 0
    (52152 'end of statement')
  }
  function =[52153](ref arg a[52156] :
  bool, arg b[52160] :
  bool) : _unknown[42] "assignop" "inline" "operator"
  {
    (52164 '=' a b)
  }
  function =[52169](ref arg a[52174] :
  (52172 call int[10] 8), arg b[52180] :
  (52178 call int[10] 8)) : _unknown[42] "assignop" "inline" "operator"
  {
    (52184 '=' a b)
  }
  function =[52189](ref arg a[52194] :
  (52192 call int[10] 16), arg b[52200] :
  (52198 call int[10] 16)) : _unknown[42] "assignop" "inline" "operator"
  {
    (52204 '=' a b)
  }
  function =[52209](ref arg a[52214] :
  (52212 call int[10] 32), arg b[52220] :
  (52218 call int[10] 32)) : _unknown[42] "assignop" "inline" "operator"
  {
    (52224 '=' a b)
  }
  function =[52229](ref arg a[52234] :
  (52232 call int[10] 64), arg b[52240] :
  (52238 call int[10] 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    (52244 '=' a b)
  }
  function =[52249](ref arg a[52254] :
  (52252 call uint[86] 8), arg b[52260] :
  (52258 call uint[86] 8)) : _unknown[42] "assignop" "inline" "operator"
  {
    (52264 '=' a b)
  }
  function =[52269](ref arg a[52274] :
  (52272 call uint[86] 16), arg b[52280] :
  (52278 call uint[86] 16)) : _unknown[42] "assignop" "inline" "operator"
  {
    (52284 '=' a b)
  }
  function =[52289](ref arg a[52294] :
  (52292 call uint[86] 32), arg b[52300] :
  (52298 call uint[86] 32)) : _unknown[42] "assignop" "inline" "operator"
  {
    (52304 '=' a b)
  }
  function =[52309](ref arg a[52314] :
  (52312 call uint[86] 64), arg b[52320] :
  (52318 call uint[86] 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    (52324 '=' a b)
  }
  function =[52329](ref arg a[52334] :
  (52332 call real[13] 32), arg b[52340] :
  (52338 call real[13] 32)) : _unknown[42] "assignop" "inline" "operator"
  {
    (52344 '=' a b)
  }
  function =[52349](ref arg a[52354] :
  (52352 call real[13] 64), arg b[52360] :
  (52358 call real[13] 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    (52364 '=' a b)
  }
  function =[52369](ref arg a[52374] :
  (52372 call imag 32), arg b[52380] :
  (52378 call imag 32)) : _unknown[42] "assignop" "inline" "operator"
  {
    (52384 '=' a b)
  }
  function =[52389](ref arg a[52394] :
  (52392 call imag 64), arg b[52400] :
  (52398 call imag 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    (52404 '=' a b)
  }
  function =[52409](ref arg a[52414] :
  (52412 call complex[111] 64), arg b[52420] :
  (52418 call complex[111] 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    (52424 '=' a b)
  }
  function =[52429](ref arg a[52434] :
  (52432 call complex[111] 128), arg b[52440] :
  (52438 call complex[111] 128)) : _unknown[42] "assignop" "inline" "operator"
  {
    (52444 '=' a b)
  }
  function =[52449](ref arg a[52452] :
  opaque, arg b[52456] :
  opaque) : _unknown[42] "assignop" "inline" "operator"
  {
    (52460 '=' a b)
  }
  function =[52465](ref arg a[52468] :
  enum, arg b[52472] :
  enum) : _unknown[42] "assignop" "inline" "operator"
  {
    (52482 '=' a b)
  }
  where {
    (52475 call ==(52478 'typeof' a)(52480 'typeof' b))
  }
  function =[52488](ref arg a[52492] :
  (52490 'to borrowed class from unknown' class), arg b[52497] :
  (52496 'typeof' a)) : _unknown[42] "assignop" "inline" "last resort" "operator"
  {
    (52507 '=' a b)
  }
  where {
    (52501 call isSubtype(52503 'typeof' b)(52505 'typeof' a))
  }
  function =[52513](ref arg a[52518] :
  (52515 'to borrowed class from unknown'(52517 'to nilable class from type' class)), arg b[52523] :
  (52522 'typeof' a)) : _unknown[42] "assignop" "inline" "last resort" "operator"
  {
    (52533 '=' a b)
  }
  where {
    (52527 call isSubtype(52529 'typeof' b)(52531 'typeof' a))
  }
  function =[52539](ref arg a[52543] :
  (52541 'to unmanaged class from unknown' class), arg b[52548] :
  (52547 'typeof' a)) : _unknown[42] "assignop" "inline" "last resort" "operator"
  {
    (52558 '=' a b)
  }
  where {
    (52552 call isSubtype(52554 'typeof' b)(52556 'typeof' a))
  }
  function =[52564](ref arg a[52569] :
  (52566 'to unmanaged class from unknown'(52568 'to nilable class from type' class)), arg b[52574] :
  (52573 'typeof' a)) : _unknown[42] "assignop" "inline" "last resort" "operator"
  {
    (52584 '=' a b)
  }
  where {
    (52578 call isSubtype(52580 'typeof' b)(52582 'typeof' a))
  }
  function =[52590](ref arg a[52593] :
  nothing, arg b[52598] :
  unknown t[52596]) : _unknown[42] "assignop" "inline" "operator"
  {
    (52607 call compilerError "a nothing variable cannot be assigned")
  }
  where {
    (52601 call != t nothing)
  }
  function =[52614](ref arg a[52618] :
  unknown t[52616], arg b[52622] :
  nothing) : _unknown[42] "assignop" "inline" "operator"
  {
    (52631 call compilerError "cannot assign none to a variable of non-nothing type")
  }
  where {
    (52625 call != t nothing)
  }
  function =[52638](ref arg a[52641] :
  nothing, arg b[52645] :
  nothing) param : _unknown[42] "assignop" "inline" "operator"
  {
  }
  function ==[52651](arg a[52654] :
  _nilType, arg b[52658] :
  _nilType) param : _unknown[42] "inline" "operator"
  {
    (52662 return 1)
  }
  function ==[52666](arg a[52669] :
  bool, arg b[52673] :
  bool) : _unknown[42] "inline" "operator"
  {
    (52677 return(52678 '==' a b))
  }
  function ==[52683](arg a[52688] :
  (52686 call int[10] 8), arg b[52694] :
  (52692 call int[10] 8)) : _unknown[42] "inline" "operator"
  {
    (52698 return(52699 '==' a b))
  }
  function ==[52704](arg a[52709] :
  (52707 call int[10] 16), arg b[52715] :
  (52713 call int[10] 16)) : _unknown[42] "inline" "operator"
  {
    (52719 return(52720 '==' a b))
  }
  function ==[52725](arg a[52730] :
  (52728 call int[10] 32), arg b[52736] :
  (52734 call int[10] 32)) : _unknown[42] "inline" "operator"
  {
    (52740 return(52741 '==' a b))
  }
  function ==[52746](arg a[52751] :
  (52749 call int[10] 64), arg b[52757] :
  (52755 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (52761 return(52762 '==' a b))
  }
  function ==[52767](arg a[52772] :
  (52770 call uint[86] 8), arg b[52778] :
  (52776 call uint[86] 8)) : _unknown[42] "inline" "operator"
  {
    (52782 return(52783 '==' a b))
  }
  function ==[52788](arg a[52793] :
  (52791 call uint[86] 16), arg b[52799] :
  (52797 call uint[86] 16)) : _unknown[42] "inline" "operator"
  {
    (52803 return(52804 '==' a b))
  }
  function ==[52809](arg a[52814] :
  (52812 call uint[86] 32), arg b[52820] :
  (52818 call uint[86] 32)) : _unknown[42] "inline" "operator"
  {
    (52824 return(52825 '==' a b))
  }
  function ==[52830](arg a[52835] :
  (52833 call uint[86] 64), arg b[52841] :
  (52839 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    (52845 return(52846 '==' a b))
  }
  function ==[52851](arg a[52856] :
  (52854 call real[13] 32), arg b[52862] :
  (52860 call real[13] 32)) : _unknown[42] "inline" "operator"
  {
    (52866 return(52867 '==' a b))
  }
  function ==[52872](arg a[52877] :
  (52875 call real[13] 64), arg b[52883] :
  (52881 call real[13] 64)) : _unknown[42] "inline" "operator"
  {
    (52887 return(52888 '==' a b))
  }
  function ==[52893](arg a[52898] :
  (52896 call imag 32), arg b[52904] :
  (52902 call imag 32)) : _unknown[42] "inline" "operator"
  {
    (52908 return(52909 '==' a b))
  }
  function ==[52914](arg a[52919] :
  (52917 call imag 64), arg b[52925] :
  (52923 call imag 64)) : _unknown[42] "inline" "operator"
  {
    (52929 return(52930 '==' a b))
  }
  function ==[52935](arg a[52940] :
  (52938 call complex[111] 64), arg b[52946] :
  (52944 call complex[111] 64)) : _unknown[42] "inline" "operator"
  {
    (52950 return(52951 call &&(52953 call ==(52956 call . a c"re")(52960 call . b c"re"))(52963 call ==(52966 call . a c"im")(52970 call . b c"im"))))
  }
  function ==[52975](arg a[52980] :
  (52978 call complex[111] 128), arg b[52986] :
  (52984 call complex[111] 128)) : _unknown[42] "inline" "operator"
  {
    (52990 return(52991 call &&(52993 call ==(52996 call . a c"re")(53000 call . b c"re"))(53003 call ==(53006 call . a c"im")(53010 call . b c"im"))))
  }
  function ==[53015](arg a[53020] :
  (53017 'to borrowed class from unknown'(53019 'to nilable class from type' RootClass)), arg b[53026] :
  (53023 'to borrowed class from unknown'(53025 'to nilable class from type' RootClass))) : _unknown[42] "inline" "operator"
  {
    (53030 return(53031 'ptr_eq' a b))
  }
  function ==[53036](arg a[53041] :
  (53038 'to borrowed class from unknown'(53040 'to nilable class from type' RootClass)), arg b[53045] :
  _nilType) : _unknown[42] "inline" "operator"
  {
    (53049 return(53050 '==' a nil[32]))
  }
  function ==[53055](arg a[53058] :
  _nilType, arg b[53064] :
  (53061 'to borrowed class from unknown'(53063 'to nilable class from type' RootClass))) : _unknown[42] "inline" "operator"
  {
    (53068 return(53069 '==' b nil[32]))
  }
  function ==[53074](arg a[53077] :
  enum, arg b[53081] :
  enum) : _unknown[42] "inline" "operator"
  {
    (53091 return(53092 '==' a b))
  }
  where {
    (53084 call ==(53087 'typeof' a)(53089 'typeof' b))
  }
  function ==[53098](arg a[53101] :
  enum, arg b[53105] :
  enum) : _unknown[42] "inline" "last resort" "operator"
  {
    (53116 call compilerError "Comparisons between mixed enumerated types not supported by default")
    (53120 return 0)
  }
  where {
    (53108 call !=(53111 'typeof' a)(53113 'typeof' b))
  }
  function !=[53125](arg a[53128] :
  _nilType, arg b[53132] :
  _nilType) param : _unknown[42] "inline" "operator"
  {
    (53136 return 0)
  }
  function !=[53140](arg a[53143] :
  bool, arg b[53147] :
  bool) : _unknown[42] "inline" "operator"
  {
    (53151 return(53152 '!=' a b))
  }
  function !=[53157](arg a[53162] :
  (53160 call int[10] 8), arg b[53168] :
  (53166 call int[10] 8)) : _unknown[42] "inline" "operator"
  {
    (53172 return(53173 '!=' a b))
  }
  function !=[53178](arg a[53183] :
  (53181 call int[10] 16), arg b[53189] :
  (53187 call int[10] 16)) : _unknown[42] "inline" "operator"
  {
    (53193 return(53194 '!=' a b))
  }
  function !=[53199](arg a[53204] :
  (53202 call int[10] 32), arg b[53210] :
  (53208 call int[10] 32)) : _unknown[42] "inline" "operator"
  {
    (53214 return(53215 '!=' a b))
  }
  function !=[53220](arg a[53225] :
  (53223 call int[10] 64), arg b[53231] :
  (53229 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (53235 return(53236 '!=' a b))
  }
  function !=[53241](arg a[53246] :
  (53244 call uint[86] 8), arg b[53252] :
  (53250 call uint[86] 8)) : _unknown[42] "inline" "operator"
  {
    (53256 return(53257 '!=' a b))
  }
  function !=[53262](arg a[53267] :
  (53265 call uint[86] 16), arg b[53273] :
  (53271 call uint[86] 16)) : _unknown[42] "inline" "operator"
  {
    (53277 return(53278 '!=' a b))
  }
  function !=[53283](arg a[53288] :
  (53286 call uint[86] 32), arg b[53294] :
  (53292 call uint[86] 32)) : _unknown[42] "inline" "operator"
  {
    (53298 return(53299 '!=' a b))
  }
  function !=[53304](arg a[53309] :
  (53307 call uint[86] 64), arg b[53315] :
  (53313 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    (53319 return(53320 '!=' a b))
  }
  function !=[53325](arg a[53330] :
  (53328 call real[13] 32), arg b[53336] :
  (53334 call real[13] 32)) : _unknown[42] "inline" "operator"
  {
    (53340 return(53341 '!=' a b))
  }
  function !=[53346](arg a[53351] :
  (53349 call real[13] 64), arg b[53357] :
  (53355 call real[13] 64)) : _unknown[42] "inline" "operator"
  {
    (53361 return(53362 '!=' a b))
  }
  function !=[53367](arg a[53372] :
  (53370 call imag 32), arg b[53378] :
  (53376 call imag 32)) : _unknown[42] "inline" "operator"
  {
    (53382 return(53383 '!=' a b))
  }
  function !=[53388](arg a[53393] :
  (53391 call imag 64), arg b[53399] :
  (53397 call imag 64)) : _unknown[42] "inline" "operator"
  {
    (53403 return(53404 '!=' a b))
  }
  function !=[53409](arg a[53414] :
  (53412 call complex[111] 64), arg b[53420] :
  (53418 call complex[111] 64)) : _unknown[42] "inline" "operator"
  {
    (53424 return(53425 call ||(53427 call !=(53430 call . a c"re")(53434 call . b c"re"))(53437 call !=(53440 call . a c"im")(53444 call . b c"im"))))
  }
  function !=[53449](arg a[53454] :
  (53452 call complex[111] 128), arg b[53460] :
  (53458 call complex[111] 128)) : _unknown[42] "inline" "operator"
  {
    (53464 return(53465 call ||(53467 call !=(53470 call . a c"re")(53474 call . b c"re"))(53477 call !=(53480 call . a c"im")(53484 call . b c"im"))))
  }
  function !=[53489](arg a[53494] :
  (53491 'to borrowed class from unknown'(53493 'to nilable class from type' RootClass)), arg b[53500] :
  (53497 'to borrowed class from unknown'(53499 'to nilable class from type' RootClass))) : _unknown[42] "inline" "operator"
  {
    (53504 return(53505 'ptr_neq' a b))
  }
  function !=[53510](arg a[53515] :
  (53512 'to borrowed class from unknown'(53514 'to nilable class from type' RootClass)), arg b[53519] :
  _nilType) : _unknown[42] "inline" "operator"
  {
    (53523 return(53524 '!=' a nil[32]))
  }
  function !=[53529](arg a[53532] :
  _nilType, arg b[53538] :
  (53535 'to borrowed class from unknown'(53537 'to nilable class from type' RootClass))) : _unknown[42] "inline" "operator"
  {
    (53542 return(53543 '!=' b nil[32]))
  }
  function !=[53548](arg a[53551] :
  enum, arg b[53555] :
  enum) : _unknown[42] "inline" "operator"
  {
    (53565 return(53566 '!=' a b))
  }
  where {
    (53558 call ==(53561 'typeof' a)(53563 'typeof' b))
  }
  function !=[53572](arg a[53575] :
  enum, arg b[53579] :
  enum) : _unknown[42] "inline" "last resort" "operator"
  {
    (53590 call compilerError "Comparisons between mixed enumerated types not supported by default")
    (53592 return 1)
  }
  where {
    (53582 call !=(53585 'typeof' a)(53587 'typeof' b))
  }
  function ==[53597](param arg a[53600] :
  bool, param arg b[53604] :
  bool) param : _unknown[42] "inline" "operator"
  {
    (53608 return(53609 '==' a b))
  }
  function ==[53614](param arg a[53619] :
  (53617 call int[10] 8), param arg b[53625] :
  (53623 call int[10] 8)) param : _unknown[42] "inline" "operator"
  {
    (53629 return(53630 '==' a b))
  }
  function ==[53635](param arg a[53640] :
  (53638 call int[10] 16), param arg b[53646] :
  (53644 call int[10] 16)) param : _unknown[42] "inline" "operator"
  {
    (53650 return(53651 '==' a b))
  }
  function ==[53656](param arg a[53661] :
  (53659 call int[10] 32), param arg b[53667] :
  (53665 call int[10] 32)) param : _unknown[42] "inline" "operator"
  {
    (53671 return(53672 '==' a b))
  }
  function ==[53677](param arg a[53682] :
  (53680 call int[10] 64), param arg b[53688] :
  (53686 call int[10] 64)) param : _unknown[42] "inline" "operator"
  {
    (53692 return(53693 '==' a b))
  }
  function ==[53698](param arg a[53703] :
  (53701 call uint[86] 8), param arg b[53709] :
  (53707 call uint[86] 8)) param : _unknown[42] "inline" "operator"
  {
    (53713 return(53714 '==' a b))
  }
  function ==[53719](param arg a[53724] :
  (53722 call uint[86] 16), param arg b[53730] :
  (53728 call uint[86] 16)) param : _unknown[42] "inline" "operator"
  {
    (53734 return(53735 '==' a b))
  }
  function ==[53740](param arg a[53745] :
  (53743 call uint[86] 32), param arg b[53751] :
  (53749 call uint[86] 32)) param : _unknown[42] "inline" "operator"
  {
    (53755 return(53756 '==' a b))
  }
  function ==[53761](param arg a[53766] :
  (53764 call uint[86] 64), param arg b[53772] :
  (53770 call uint[86] 64)) param : _unknown[42] "inline" "operator"
  {
    (53776 return(53777 '==' a b))
  }
  function ==[53782](param arg a[53785] :
  enum, param arg b[53789] :
  enum) param : _unknown[42] "inline" "operator"
  {
    (53799 return(53800 '==' a b))
  }
  where {
    (53792 call ==(53795 'typeof' a)(53797 'typeof' b))
  }
  function ==[53806](param arg a[53811] :
  (53809 call real[13] 32), param arg b[53817] :
  (53815 call real[13] 32)) param : _unknown[42] "inline" "operator"
  {
    (53821 return(53822 '==' a b))
  }
  function ==[53827](param arg a[53832] :
  (53830 call real[13] 64), param arg b[53838] :
  (53836 call real[13] 64)) param : _unknown[42] "inline" "operator"
  {
    (53842 return(53843 '==' a b))
  }
  function ==[53848](param arg a[53853] :
  (53851 call imag 32), param arg b[53859] :
  (53857 call imag 32)) param : _unknown[42] "inline" "operator"
  {
    (53863 return(53864 '==' a b))
  }
  function ==[53869](param arg a[53874] :
  (53872 call imag 64), param arg b[53880] :
  (53878 call imag 64)) param : _unknown[42] "inline" "operator"
  {
    (53884 return(53885 '==' a b))
  }
  function ==[53890](param arg a[53895] :
  (53893 call complex[111] 64), param arg b[53901] :
  (53899 call complex[111] 64)) param : _unknown[42] "inline" "operator"
  {
    (53905 return(53906 '==' a b))
  }
  function ==[53911](param arg a[53916] :
  (53914 call complex[111] 128), param arg b[53922] :
  (53920 call complex[111] 128)) param : _unknown[42] "inline" "operator"
  {
    (53926 return(53927 '==' a b))
  }
  function ==[53932](arg a[53935] :
  nothing, arg b[53939] :
  nothing) param : _unknown[42] "inline" "operator"
  {
    (53943 return 1)
  }
  function !=[53947](param arg a[53950] :
  bool, param arg b[53954] :
  bool) param : _unknown[42] "inline" "operator"
  {
    (53958 return(53959 '!=' a b))
  }
  function !=[53964](param arg a[53969] :
  (53967 call int[10] 8), param arg b[53975] :
  (53973 call int[10] 8)) param : _unknown[42] "inline" "operator"
  {
    (53979 return(53980 '!=' a b))
  }
  function !=[53985](param arg a[53990] :
  (53988 call int[10] 16), param arg b[53996] :
  (53994 call int[10] 16)) param : _unknown[42] "inline" "operator"
  {
    (54000 return(54001 '!=' a b))
  }
  function !=[54006](param arg a[54011] :
  (54009 call int[10] 32), param arg b[54017] :
  (54015 call int[10] 32)) param : _unknown[42] "inline" "operator"
  {
    (54021 return(54022 '!=' a b))
  }
  function !=[54027](param arg a[54032] :
  (54030 call int[10] 64), param arg b[54038] :
  (54036 call int[10] 64)) param : _unknown[42] "inline" "operator"
  {
    (54042 return(54043 '!=' a b))
  }
  function !=[54048](param arg a[54053] :
  (54051 call uint[86] 8), param arg b[54059] :
  (54057 call uint[86] 8)) param : _unknown[42] "inline" "operator"
  {
    (54063 return(54064 '!=' a b))
  }
  function !=[54069](param arg a[54074] :
  (54072 call uint[86] 16), param arg b[54080] :
  (54078 call uint[86] 16)) param : _unknown[42] "inline" "operator"
  {
    (54084 return(54085 '!=' a b))
  }
  function !=[54090](param arg a[54095] :
  (54093 call uint[86] 32), param arg b[54101] :
  (54099 call uint[86] 32)) param : _unknown[42] "inline" "operator"
  {
    (54105 return(54106 '!=' a b))
  }
  function !=[54111](param arg a[54116] :
  (54114 call uint[86] 64), param arg b[54122] :
  (54120 call uint[86] 64)) param : _unknown[42] "inline" "operator"
  {
    (54126 return(54127 '!=' a b))
  }
  function !=[54132](param arg a[54135] :
  enum, param arg b[54139] :
  enum) param : _unknown[42] "inline" "operator"
  {
    (54149 return(54150 '!='(54152 call chpl__enumToOrder a)(54155 call chpl__enumToOrder b)))
  }
  where {
    (54142 call ==(54145 'typeof' a)(54147 'typeof' b))
  }
  function !=[54160](param arg a[54165] :
  (54163 call real[13] 32), param arg b[54171] :
  (54169 call real[13] 32)) param : _unknown[42] "inline" "operator"
  {
    (54175 return(54176 '!=' a b))
  }
  function !=[54181](param arg a[54186] :
  (54184 call real[13] 64), param arg b[54192] :
  (54190 call real[13] 64)) param : _unknown[42] "inline" "operator"
  {
    (54196 return(54197 '!=' a b))
  }
  function !=[54202](param arg a[54207] :
  (54205 call imag 32), param arg b[54213] :
  (54211 call imag 32)) param : _unknown[42] "inline" "operator"
  {
    (54217 return(54218 '!=' a b))
  }
  function !=[54223](param arg a[54228] :
  (54226 call imag 64), param arg b[54234] :
  (54232 call imag 64)) param : _unknown[42] "inline" "operator"
  {
    (54238 return(54239 '!=' a b))
  }
  function !=[54244](param arg a[54249] :
  (54247 call complex[111] 64), param arg b[54255] :
  (54253 call complex[111] 64)) param : _unknown[42] "inline" "operator"
  {
    (54259 return(54260 '!=' a b))
  }
  function !=[54265](param arg a[54270] :
  (54268 call complex[111] 128), param arg b[54276] :
  (54274 call complex[111] 128)) param : _unknown[42] "inline" "operator"
  {
    (54280 return(54281 '!=' a b))
  }
  function !=[54286](arg a[54289] :
  nothing, arg b[54293] :
  nothing) param : _unknown[42] "inline" "operator"
  {
    (54297 return 0)
  }
  function <=[54301](arg a[54306] :
  (54304 call int[10] 8), arg b[54312] :
  (54310 call int[10] 8)) : _unknown[42] "inline" "operator"
  {
    (54316 return(54317 '<=' a b))
  }
  function <=[54322](arg a[54327] :
  (54325 call int[10] 16), arg b[54333] :
  (54331 call int[10] 16)) : _unknown[42] "inline" "operator"
  {
    (54337 return(54338 '<=' a b))
  }
  function <=[54343](arg a[54348] :
  (54346 call int[10] 32), arg b[54354] :
  (54352 call int[10] 32)) : _unknown[42] "inline" "operator"
  {
    (54358 return(54359 '<=' a b))
  }
  function <=[54364](arg a[54369] :
  (54367 call int[10] 64), arg b[54375] :
  (54373 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (54379 return(54380 '<=' a b))
  }
  function <=[54385](arg a[54390] :
  (54388 call uint[86] 8), arg b[54396] :
  (54394 call uint[86] 8)) : _unknown[42] "inline" "operator"
  {
    (54400 return(54401 '<=' a b))
  }
  function <=[54406](arg a[54411] :
  (54409 call uint[86] 16), arg b[54417] :
  (54415 call uint[86] 16)) : _unknown[42] "inline" "operator"
  {
    (54421 return(54422 '<=' a b))
  }
  function <=[54427](arg a[54432] :
  (54430 call uint[86] 32), arg b[54438] :
  (54436 call uint[86] 32)) : _unknown[42] "inline" "operator"
  {
    (54442 return(54443 '<=' a b))
  }
  function <=[54448](arg a[54453] :
  (54451 call uint[86] 64), arg b[54459] :
  (54457 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    (54463 return(54464 '<=' a b))
  }
  function <=[54469](arg a[54474] :
  (54472 call real[13] 32), arg b[54480] :
  (54478 call real[13] 32)) : _unknown[42] "inline" "operator"
  {
    (54484 return(54485 '<=' a b))
  }
  function <=[54490](arg a[54495] :
  (54493 call real[13] 64), arg b[54501] :
  (54499 call real[13] 64)) : _unknown[42] "inline" "operator"
  {
    (54505 return(54506 '<=' a b))
  }
  function <=[54511](arg a[54514] :
  enum, arg b[54518] :
  enum) : _unknown[42] "operator"
  {
    (54528 return(54529 '<='(54531 call chpl__enumToOrder a)(54534 call chpl__enumToOrder b)))
  }
  where {
    (54521 call ==(54524 'typeof' a)(54526 'typeof' b))
  }
  function <=[54539](arg a[54542] :
  enum, arg b[54546] :
  enum) : _unknown[42] "inline" "last resort" "operator"
  {
    (54557 call compilerError "Comparisons between mixed enumerated types not supported by default")
    (54559 return 0)
  }
  where {
    (54549 call !=(54552 'typeof' a)(54554 'typeof' b))
  }
  function >=[54564](arg a[54569] :
  (54567 call int[10] 8), arg b[54575] :
  (54573 call int[10] 8)) : _unknown[42] "inline" "operator"
  {
    (54579 return(54580 '>=' a b))
  }
  function >=[54585](arg a[54590] :
  (54588 call int[10] 16), arg b[54596] :
  (54594 call int[10] 16)) : _unknown[42] "inline" "operator"
  {
    (54600 return(54601 '>=' a b))
  }
  function >=[54606](arg a[54611] :
  (54609 call int[10] 32), arg b[54617] :
  (54615 call int[10] 32)) : _unknown[42] "inline" "operator"
  {
    (54621 return(54622 '>=' a b))
  }
  function >=[54627](arg a[54632] :
  (54630 call int[10] 64), arg b[54638] :
  (54636 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (54642 return(54643 '>=' a b))
  }
  function >=[54648](arg a[54653] :
  (54651 call uint[86] 8), arg b[54659] :
  (54657 call uint[86] 8)) : _unknown[42] "inline" "operator"
  {
    (54663 return(54664 '>=' a b))
  }
  function >=[54669](arg a[54674] :
  (54672 call uint[86] 16), arg b[54680] :
  (54678 call uint[86] 16)) : _unknown[42] "inline" "operator"
  {
    (54684 return(54685 '>=' a b))
  }
  function >=[54690](arg a[54695] :
  (54693 call uint[86] 32), arg b[54701] :
  (54699 call uint[86] 32)) : _unknown[42] "inline" "operator"
  {
    (54705 return(54706 '>=' a b))
  }
  function >=[54711](arg a[54716] :
  (54714 call uint[86] 64), arg b[54722] :
  (54720 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    (54726 return(54727 '>=' a b))
  }
  function >=[54732](arg a[54737] :
  (54735 call real[13] 32), arg b[54743] :
  (54741 call real[13] 32)) : _unknown[42] "inline" "operator"
  {
    (54747 return(54748 '>=' a b))
  }
  function >=[54753](arg a[54758] :
  (54756 call real[13] 64), arg b[54764] :
  (54762 call real[13] 64)) : _unknown[42] "inline" "operator"
  {
    (54768 return(54769 '>=' a b))
  }
  function >=[54774](arg a[54777] :
  enum, arg b[54781] :
  enum) : _unknown[42] "operator"
  {
    (54791 return(54792 '>='(54794 call chpl__enumToOrder a)(54797 call chpl__enumToOrder b)))
  }
  where {
    (54784 call ==(54787 'typeof' a)(54789 'typeof' b))
  }
  function >=[54802](arg a[54805] :
  enum, arg b[54809] :
  enum) : _unknown[42] "inline" "last resort" "operator"
  {
    (54820 call compilerError "Comparisons between mixed enumerated types not supported by default")
    (54822 return 0)
  }
  where {
    (54812 call !=(54815 'typeof' a)(54817 'typeof' b))
  }
  function asUint[54827](arg a[54830] :
  integral) : _unknown[42] "inline" "private"
  {
    (54834 return(54835 call : a(54839 call uint[86](54841 call numBits(54843 'typeof' a)))))
  }
  function <[54846](arg a[54849] :
  integral, arg b[54853] :
  integral) : _unknown[42] "inline" "operator"
  {
    (54857 return(54901 IfExpr (54859 call isInt a) then
    { scopeless(54877 IfExpr (54862 call isInt b) then
      { scopeless
        (54864 '<' a b)
      } else
      { scopeless
        (54867 call ||(54869 '<' a 0)(54872 '<'(54874 call asUint a) b))
      } )
    } else
    { scopeless(54898 IfExpr (54881 call isUint b) then
      { scopeless
        (54883 '<' a b)
      } else
      { scopeless
        (54886 call &&(54888 call !(54890 '<' b 0))(54893 '<' a(54896 call asUint b)))
      } )
    } ))
  }
  function <[54906](arg a[54909] :
  integral, param arg b[54913] :
  integral) param : _unknown[42] "inline" "operator"
  {
    (54925 return 0)
  }
  where {
    (54916 call &&(54919 call isUint a)(54921 '<=' b 0))
  }
  function <[54930](param arg a[54933] :
  integral, arg b[54937] :
  integral) param : _unknown[42] "inline" "operator"
  {
    (54949 return 1)
  }
  where {
    (54940 call &&(54943 call isUint b)(54945 '<' a 0))
  }
  function <[54954](param arg a[54957] :
  integral, param arg b[54961] :
  integral) param : _unknown[42] "inline" "operator"
  {
    (54965 return(54992 IfExpr (54966 call >= a 0) then
    { scopeless(54978 IfExpr (54970 call >= b 0) then
      { scopeless
        (54974 '<' a b)
      } else
      { scopeless
        0
      } )
    } else
    { scopeless(54989 IfExpr (54981 call >= b 0) then
      { scopeless
        1
      } else
      { scopeless
        (54986 '<' a b)
      } )
    } ))
  }
  function <[54997](arg a[55000] :
  bool, arg b[55004] :
  bool) : _unknown[42] "inline" "operator"
  {
    (55008 return(55009 call <(55011 call : a int[10])(55015 call : b int[10])))
  }
  function <[55021](arg a[55024] :
  bool, arg b[55028] :
  integral) : _unknown[42] "inline" "operator"
  {
    (55032 return(55033 call <(55035 call : a int[10]) b))
  }
  function <[55042](arg a[55045] :
  integral, arg b[55049] :
  bool) : _unknown[42] "inline" "operator"
  {
    (55053 return(55054 call < a(55057 call : b int[10])))
  }
  function <[55063](param arg a[55066] :
  bool, param arg b[55070] :
  bool) param : _unknown[42] "inline" "operator"
  {
    (55074 return(55075 '<' a b))
  }
  function <[55080](arg a[55085] :
  (55083 call real[13] 32), arg b[55091] :
  (55089 call real[13] 32)) : _unknown[42] "inline" "operator"
  {
    (55095 return(55096 '<' a b))
  }
  function <[55101](arg a[55106] :
  (55104 call real[13] 64), arg b[55112] :
  (55110 call real[13] 64)) : _unknown[42] "inline" "operator"
  {
    (55116 return(55117 '<' a b))
  }
  function <[55122](arg a[55125] :
  enum, arg b[55129] :
  enum) : _unknown[42] "operator"
  {
    (55139 return(55140 '<'(55142 call chpl__enumToOrder a)(55145 call chpl__enumToOrder b)))
  }
  where {
    (55132 call ==(55135 'typeof' a)(55137 'typeof' b))
  }
  function <[55150](arg a[55153] :
  enum, arg b[55157] :
  enum) : _unknown[42] "inline" "last resort" "operator"
  {
    (55168 call compilerError "Comparisons between mixed enumerated types not supported by default")
    (55170 return 0)
  }
  where {
    (55160 call !=(55163 'typeof' a)(55165 'typeof' b))
  }
  function >[55175](arg a[55180] :
  (55178 call int[10] 8), arg b[55186] :
  (55184 call int[10] 8)) : _unknown[42] "inline" "operator"
  {
    (55190 return(55191 '>' a b))
  }
  function >[55196](arg a[55201] :
  (55199 call int[10] 16), arg b[55207] :
  (55205 call int[10] 16)) : _unknown[42] "inline" "operator"
  {
    (55211 return(55212 '>' a b))
  }
  function >[55217](arg a[55222] :
  (55220 call int[10] 32), arg b[55228] :
  (55226 call int[10] 32)) : _unknown[42] "inline" "operator"
  {
    (55232 return(55233 '>' a b))
  }
  function >[55238](arg a[55243] :
  (55241 call int[10] 64), arg b[55249] :
  (55247 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (55253 return(55254 '>' a b))
  }
  function >[55259](arg a[55264] :
  (55262 call uint[86] 8), arg b[55270] :
  (55268 call uint[86] 8)) : _unknown[42] "inline" "operator"
  {
    (55274 return(55275 '>' a b))
  }
  function >[55280](arg a[55285] :
  (55283 call uint[86] 16), arg b[55291] :
  (55289 call uint[86] 16)) : _unknown[42] "inline" "operator"
  {
    (55295 return(55296 '>' a b))
  }
  function >[55301](arg a[55306] :
  (55304 call uint[86] 32), arg b[55312] :
  (55310 call uint[86] 32)) : _unknown[42] "inline" "operator"
  {
    (55316 return(55317 '>' a b))
  }
  function >[55322](arg a[55327] :
  (55325 call uint[86] 64), arg b[55333] :
  (55331 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    (55337 return(55338 '>' a b))
  }
  function >[55343](arg a[55348] :
  (55346 call real[13] 32), arg b[55354] :
  (55352 call real[13] 32)) : _unknown[42] "inline" "operator"
  {
    (55358 return(55359 '>' a b))
  }
  function >[55364](arg a[55369] :
  (55367 call real[13] 64), arg b[55375] :
  (55373 call real[13] 64)) : _unknown[42] "inline" "operator"
  {
    (55379 return(55380 '>' a b))
  }
  function >[55385](arg a[55388] :
  enum, arg b[55392] :
  enum) : _unknown[42] "operator"
  {
    (55402 return(55403 '>'(55405 call chpl__enumToOrder a)(55408 call chpl__enumToOrder b)))
  }
  where {
    (55395 call ==(55398 'typeof' a)(55400 'typeof' b))
  }
  function >[55413](arg a[55416] :
  enum, arg b[55420] :
  enum) : _unknown[42] "inline" "last resort" "operator"
  {
    (55431 call compilerError "Comparisons between mixed enumerated types not supported by default")
    (55433 return 0)
  }
  where {
    (55423 call !=(55426 'typeof' a)(55428 'typeof' b))
  }
  function <=[55438](param arg a[55443] :
  (55441 call int[10] 8), param arg b[55449] :
  (55447 call int[10] 8)) param : _unknown[42] "inline" "operator"
  {
    (55453 return(55454 '<=' a b))
  }
  function <=[55459](param arg a[55464] :
  (55462 call int[10] 16), param arg b[55470] :
  (55468 call int[10] 16)) param : _unknown[42] "inline" "operator"
  {
    (55474 return(55475 '<=' a b))
  }
  function <=[55480](param arg a[55485] :
  (55483 call int[10] 32), param arg b[55491] :
  (55489 call int[10] 32)) param : _unknown[42] "inline" "operator"
  {
    (55495 return(55496 '<=' a b))
  }
  function <=[55501](param arg a[55506] :
  (55504 call int[10] 64), param arg b[55512] :
  (55510 call int[10] 64)) param : _unknown[42] "inline" "operator"
  {
    (55516 return(55517 '<=' a b))
  }
  function <=[55522](param arg a[55527] :
  (55525 call uint[86] 8), param arg b[55533] :
  (55531 call uint[86] 8)) param : _unknown[42] "inline" "operator"
  {
    (55537 return(55538 '<=' a b))
  }
  function <=[55543](param arg a[55548] :
  (55546 call uint[86] 16), param arg b[55554] :
  (55552 call uint[86] 16)) param : _unknown[42] "inline" "operator"
  {
    (55558 return(55559 '<=' a b))
  }
  function <=[55564](param arg a[55569] :
  (55567 call uint[86] 32), param arg b[55575] :
  (55573 call uint[86] 32)) param : _unknown[42] "inline" "operator"
  {
    (55579 return(55580 '<=' a b))
  }
  function <=[55585](param arg a[55590] :
  (55588 call uint[86] 64), param arg b[55596] :
  (55594 call uint[86] 64)) param : _unknown[42] "inline" "operator"
  {
    (55600 return(55601 '<=' a b))
  }
  function <=[55606](param arg a[55609] :
  enum, param arg b[55613] :
  enum) param : _unknown[42] "inline" "operator"
  {
    (55623 return(55624 '<='(55626 call chpl__enumToOrder a)(55629 call chpl__enumToOrder b)))
  }
  where {
    (55616 call ==(55619 'typeof' a)(55621 'typeof' b))
  }
  function <=[55634](param arg a[55639] :
  (55637 call real[13] 32), param arg b[55645] :
  (55643 call real[13] 32)) param : _unknown[42] "inline" "operator"
  {
    (55649 return(55650 '<=' a b))
  }
  function <=[55655](param arg a[55660] :
  (55658 call real[13] 64), param arg b[55666] :
  (55664 call real[13] 64)) param : _unknown[42] "inline" "operator"
  {
    (55670 return(55671 '<=' a b))
  }
  function >=[55676](param arg a[55681] :
  (55679 call int[10] 8), param arg b[55687] :
  (55685 call int[10] 8)) param : _unknown[42] "inline" "operator"
  {
    (55691 return(55692 '>=' a b))
  }
  function >=[55697](param arg a[55702] :
  (55700 call int[10] 16), param arg b[55708] :
  (55706 call int[10] 16)) param : _unknown[42] "inline" "operator"
  {
    (55712 return(55713 '>=' a b))
  }
  function >=[55718](param arg a[55723] :
  (55721 call int[10] 32), param arg b[55729] :
  (55727 call int[10] 32)) param : _unknown[42] "inline" "operator"
  {
    (55733 return(55734 '>=' a b))
  }
  function >=[55739](param arg a[55744] :
  (55742 call int[10] 64), param arg b[55750] :
  (55748 call int[10] 64)) param : _unknown[42] "inline" "operator"
  {
    (55754 return(55755 '>=' a b))
  }
  function >=[55760](param arg a[55765] :
  (55763 call uint[86] 8), param arg b[55771] :
  (55769 call uint[86] 8)) param : _unknown[42] "inline" "operator"
  {
    (55775 return(55776 '>=' a b))
  }
  function >=[55781](param arg a[55786] :
  (55784 call uint[86] 16), param arg b[55792] :
  (55790 call uint[86] 16)) param : _unknown[42] "inline" "operator"
  {
    (55796 return(55797 '>=' a b))
  }
  function >=[55802](param arg a[55807] :
  (55805 call uint[86] 32), param arg b[55813] :
  (55811 call uint[86] 32)) param : _unknown[42] "inline" "operator"
  {
    (55817 return(55818 '>=' a b))
  }
  function >=[55823](param arg a[55828] :
  (55826 call uint[86] 64), param arg b[55834] :
  (55832 call uint[86] 64)) param : _unknown[42] "inline" "operator"
  {
    (55838 return(55839 '>=' a b))
  }
  function >=[55844](param arg a[55847] :
  enum, param arg b[55851] :
  enum) param : _unknown[42] "inline" "operator"
  {
    (55861 return(55862 '>='(55864 call chpl__enumToOrder a)(55867 call chpl__enumToOrder b)))
  }
  where {
    (55854 call ==(55857 'typeof' a)(55859 'typeof' b))
  }
  function >=[55872](param arg a[55877] :
  (55875 call real[13] 32), param arg b[55883] :
  (55881 call real[13] 32)) param : _unknown[42] "inline" "operator"
  {
    (55887 return(55888 '>=' a b))
  }
  function >=[55893](param arg a[55898] :
  (55896 call real[13] 64), param arg b[55904] :
  (55902 call real[13] 64)) param : _unknown[42] "inline" "operator"
  {
    (55908 return(55909 '>=' a b))
  }
  function <[55914](param arg a[55917] :
  enum, param arg b[55921] :
  enum) param : _unknown[42] "inline" "operator"
  {
    (55931 return(55932 '<'(55934 call chpl__enumToOrder a)(55937 call chpl__enumToOrder b)))
  }
  where {
    (55924 call ==(55927 'typeof' a)(55929 'typeof' b))
  }
  function <[55942](param arg a[55947] :
  (55945 call real[13] 32), param arg b[55953] :
  (55951 call real[13] 32)) param : _unknown[42] "inline" "operator"
  {
    (55957 return(55958 '<' a b))
  }
  function <[55963](param arg a[55968] :
  (55966 call real[13] 64), param arg b[55974] :
  (55972 call real[13] 64)) param : _unknown[42] "inline" "operator"
  {
    (55978 return(55979 '<' a b))
  }
  function >[55984](param arg a[55989] :
  (55987 call int[10] 8), param arg b[55995] :
  (55993 call int[10] 8)) param : _unknown[42] "inline" "operator"
  {
    (55999 return(56000 '>' a b))
  }
  function >[56005](param arg a[56010] :
  (56008 call int[10] 16), param arg b[56016] :
  (56014 call int[10] 16)) param : _unknown[42] "inline" "operator"
  {
    (56020 return(56021 '>' a b))
  }
  function >[56026](param arg a[56031] :
  (56029 call int[10] 32), param arg b[56037] :
  (56035 call int[10] 32)) param : _unknown[42] "inline" "operator"
  {
    (56041 return(56042 '>' a b))
  }
  function >[56047](param arg a[56052] :
  (56050 call int[10] 64), param arg b[56058] :
  (56056 call int[10] 64)) param : _unknown[42] "inline" "operator"
  {
    (56062 return(56063 '>' a b))
  }
  function >[56068](param arg a[56073] :
  (56071 call uint[86] 8), param arg b[56079] :
  (56077 call uint[86] 8)) param : _unknown[42] "inline" "operator"
  {
    (56083 return(56084 '>' a b))
  }
  function >[56089](param arg a[56094] :
  (56092 call uint[86] 16), param arg b[56100] :
  (56098 call uint[86] 16)) param : _unknown[42] "inline" "operator"
  {
    (56104 return(56105 '>' a b))
  }
  function >[56110](param arg a[56115] :
  (56113 call uint[86] 32), param arg b[56121] :
  (56119 call uint[86] 32)) param : _unknown[42] "inline" "operator"
  {
    (56125 return(56126 '>' a b))
  }
  function >[56131](param arg a[56136] :
  (56134 call uint[86] 64), param arg b[56142] :
  (56140 call uint[86] 64)) param : _unknown[42] "inline" "operator"
  {
    (56146 return(56147 '>' a b))
  }
  function >[56152](param arg a[56155] :
  enum, param arg b[56159] :
  enum) param : _unknown[42] "inline" "operator"
  {
    (56169 return(56170 '>'(56172 call chpl__enumToOrder a)(56175 call chpl__enumToOrder b)))
  }
  where {
    (56162 call ==(56165 'typeof' a)(56167 'typeof' b))
  }
  function >[56180](param arg a[56185] :
  (56183 call real[13] 32), param arg b[56191] :
  (56189 call real[13] 32)) param : _unknown[42] "inline" "operator"
  {
    (56195 return(56196 '>' a b))
  }
  function >[56201](param arg a[56206] :
  (56204 call real[13] 64), param arg b[56212] :
  (56210 call real[13] 64)) param : _unknown[42] "inline" "operator"
  {
    (56216 return(56217 '>' a b))
  }
  function +[56222](arg a[56228] :
  (56225 call int[10] unknown w[56226])) : _unknown[42] "inline" "operator"
  {
    (56232 return a)
  }
  function +[56236](arg a[56242] :
  (56239 call uint[86] unknown w[56240])) : _unknown[42] "inline" "operator"
  {
    (56246 return a)
  }
  function +[56250](arg a[56256] :
  (56253 call real[13] unknown w[56254])) : _unknown[42] "inline" "operator"
  {
    (56260 return a)
  }
  function +[56264](arg a[56270] :
  (56267 call imag unknown w[56268])) : _unknown[42] "inline" "operator"
  {
    (56274 return a)
  }
  function +[56278](arg a[56284] :
  (56281 call complex[111] unknown w[56282])) : _unknown[42] "inline" "operator"
  {
    (56288 return a)
  }
  function -[56292](arg a[56298] :
  (56295 call int[10] unknown w[56296])) : _unknown[42] "inline" "operator"
  {
    (56302 return(56303 'u-' a))
  }
  function -[56307](arg a[56313] :
  (56310 call uint[86] unknown w[56311])) : _unknown[42] "inline" "operator"
  {
    (56318 call compilerError "illegal use of '-' on operand of type "(56322 call :(56325 'typeof' a) string[244]))
  }
  function -[56329](arg a[56335] :
  (56332 call real[13] unknown w[56333])) : _unknown[42] "inline" "operator"
  {
    (56339 return(56340 'u-' a))
  }
  function -[56344](arg a[56350] :
  (56347 call imag unknown w[56348])) : _unknown[42] "inline" "operator"
  {
    (56354 return(56355 'u-' a))
  }
  function -[56359](arg a[56365] :
  (56362 call complex[111] unknown w[56363])) : _unknown[42] "inline" "operator"
  {
    (56369 return(56370 'u-' a))
  }
  function +[56374](param arg a[56380] :
  (56377 call int[10] unknown w[56378])) param : _unknown[42] "inline" "operator"
  {
    (56384 return a)
  }
  function +[56388](param arg a[56394] :
  (56391 call uint[86] unknown w[56392])) param : _unknown[42] "inline" "operator"
  {
    (56398 return a)
  }
  function +[56402](param arg a[56408] :
  (56405 call real[13] unknown w[56406])) param : _unknown[42] "inline" "operator"
  {
    (56412 return a)
  }
  function +[56416](param arg a[56422] :
  (56419 call imag unknown w[56420])) param : _unknown[42] "inline" "operator"
  {
    (56426 return a)
  }
  function +[56430](param arg a[56436] :
  (56433 call complex[111] unknown w[56434])) param : _unknown[42] "inline" "operator"
  {
    (56440 return a)
  }
  function -[56444](param arg a[56450] :
  (56447 call int[10] unknown w[56448])) param : _unknown[42] "inline" "operator"
  {
    (56454 return(56455 'u-' a))
  }
  function -[56459](param arg a[56465] :
  (56462 call uint[86] unknown w[56463])) param : _unknown[42] "inline" "operator"
  {
    (56470 call compilerError "illegal use of '-' on operand of type "(56472 call :(56475 'typeof' a) string[244]))
  }
  function -[56479](param arg a[56485] :
  (56482 call real[13] unknown w[56483])) param : _unknown[42] "inline" "operator"
  {
    (56489 return(56490 'u-' a))
  }
  function -[56494](param arg a[56500] :
  (56497 call imag unknown w[56498])) param : _unknown[42] "inline" "operator"
  {
    (56504 return(56505 'u-' a))
  }
  function -[56509](param arg a[56515] :
  (56512 call complex[111] unknown w[56513])) param : _unknown[42] "inline" "operator"
  {
    (56519 return(56520 'u-' a))
  }
  function +[56524](arg a[56529] :
  (56527 call int[10] 8), arg b[56535] :
  (56533 call int[10] 8)) : _unknown[42] "inline" "operator"
  {
    (56539 return(56540 '+' a b))
  }
  function +[56545](arg a[56550] :
  (56548 call int[10] 16), arg b[56556] :
  (56554 call int[10] 16)) : _unknown[42] "inline" "operator"
  {
    (56560 return(56561 '+' a b))
  }
  function +[56566](arg a[56571] :
  (56569 call int[10] 32), arg b[56577] :
  (56575 call int[10] 32)) : _unknown[42] "inline" "operator"
  {
    (56581 return(56582 '+' a b))
  }
  function +[56587](arg a[56592] :
  (56590 call int[10] 64), arg b[56598] :
  (56596 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (56602 return(56603 '+' a b))
  }
  function +[56608](arg a[56613] :
  (56611 call uint[86] 8), arg b[56619] :
  (56617 call uint[86] 8)) : _unknown[42] "inline" "operator"
  {
    (56623 return(56624 '+' a b))
  }
  function +[56629](arg a[56634] :
  (56632 call uint[86] 16), arg b[56640] :
  (56638 call uint[86] 16)) : _unknown[42] "inline" "operator"
  {
    (56644 return(56645 '+' a b))
  }
  function +[56650](arg a[56655] :
  (56653 call uint[86] 32), arg b[56661] :
  (56659 call uint[86] 32)) : _unknown[42] "inline" "operator"
  {
    (56665 return(56666 '+' a b))
  }
  function +[56671](arg a[56676] :
  (56674 call uint[86] 64), arg b[56682] :
  (56680 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    (56686 return(56687 '+' a b))
  }
  function +[56692](arg a[56697] :
  (56695 call real[13] 32), arg b[56703] :
  (56701 call real[13] 32)) : _unknown[42] "inline" "operator"
  {
    (56707 return(56708 '+' a b))
  }
  function +[56713](arg a[56718] :
  (56716 call real[13] 64), arg b[56724] :
  (56722 call real[13] 64)) : _unknown[42] "inline" "operator"
  {
    (56728 return(56729 '+' a b))
  }
  function +[56734](arg a[56739] :
  (56737 call imag 32), arg b[56745] :
  (56743 call imag 32)) : _unknown[42] "inline" "operator"
  {
    (56749 return(56750 '+' a b))
  }
  function +[56755](arg a[56760] :
  (56758 call imag 64), arg b[56766] :
  (56764 call imag 64)) : _unknown[42] "inline" "operator"
  {
    (56770 return(56771 '+' a b))
  }
  function +[56776](arg a[56781] :
  (56779 call complex[111] 64), arg b[56787] :
  (56785 call complex[111] 64)) : _unknown[42] "inline" "operator"
  {
    (56791 return(56792 '+' a b))
  }
  function +[56797](arg a[56802] :
  (56800 call complex[111] 128), arg b[56808] :
  (56806 call complex[111] 128)) : _unknown[42] "inline" "operator"
  {
    (56812 return(56813 '+' a b))
  }
  function +[56818](arg a[56823] :
  (56821 call real[13] 32), arg b[56829] :
  (56827 call imag 32)) : _unknown[42] "inline" "operator"
  {
    (56833 return(56834 call :(56841 call _build_tuple a(56839 call _i2r b))(56844 call complex[111] 64)))
  }
  function +[56848](arg a[56853] :
  (56851 call real[13] 64), arg b[56859] :
  (56857 call imag 64)) : _unknown[42] "inline" "operator"
  {
    (56863 return(56864 call :(56871 call _build_tuple a(56869 call _i2r b))(56874 call complex[111] 128)))
  }
  function +[56878](arg a[56883] :
  (56881 call imag 32), arg b[56889] :
  (56887 call real[13] 32)) : _unknown[42] "inline" "operator"
  {
    (56893 return(56894 call :(56901 call _build_tuple b(56899 call _i2r a))(56904 call complex[111] 64)))
  }
  function +[56908](arg a[56913] :
  (56911 call imag 64), arg b[56919] :
  (56917 call real[13] 64)) : _unknown[42] "inline" "operator"
  {
    (56923 return(56924 call :(56931 call _build_tuple b(56929 call _i2r a))(56934 call complex[111] 128)))
  }
  function +[56938](arg a[56943] :
  (56941 call real[13] 32), arg b[56949] :
  (56947 call complex[111] 64)) : _unknown[42] "inline" "operator"
  {
    (56953 return(56954 call :(56968 call _build_tuple(56957 call + a(56961 call . b c"re"))(56965 call . b c"im"))(56971 call complex[111] 64)))
  }
  function +[56975](arg a[56980] :
  (56978 call real[13] 64), arg b[56986] :
  (56984 call complex[111] 128)) : _unknown[42] "inline" "operator"
  {
    (56990 return(56991 call :(57005 call _build_tuple(56994 call + a(56998 call . b c"re"))(57002 call . b c"im"))(57008 call complex[111] 128)))
  }
  function +[57012](arg a[57017] :
  (57015 call complex[111] 64), arg b[57023] :
  (57021 call real[13] 32)) : _unknown[42] "inline" "operator"
  {
    (57027 return(57028 call :(57042 call _build_tuple(57031 call +(57034 call . a c"re") b)(57039 call . a c"im"))(57045 call complex[111] 64)))
  }
  function +[57049](arg a[57054] :
  (57052 call complex[111] 128), arg b[57060] :
  (57058 call real[13] 64)) : _unknown[42] "inline" "operator"
  {
    (57064 return(57065 call :(57079 call _build_tuple(57068 call +(57071 call . a c"re") b)(57076 call . a c"im"))(57082 call complex[111] 128)))
  }
  function +[57086](arg a[57091] :
  (57089 call imag 32), arg b[57097] :
  (57095 call complex[111] 64)) : _unknown[42] "inline" "operator"
  {
    (57101 return(57102 call :(57118 call _build_tuple(57106 call . b c"re")(57109 call +(57112 call _i2r a)(57115 call . b c"im")))(57121 call complex[111] 64)))
  }
  function +[57125](arg a[57130] :
  (57128 call imag 64), arg b[57136] :
  (57134 call complex[111] 128)) : _unknown[42] "inline" "operator"
  {
    (57140 return(57141 call :(57157 call _build_tuple(57145 call . b c"re")(57148 call +(57151 call _i2r a)(57154 call . b c"im")))(57160 call complex[111] 128)))
  }
  function +[57164](arg a[57169] :
  (57167 call complex[111] 64), arg b[57175] :
  (57173 call imag 32)) : _unknown[42] "inline" "operator"
  {
    (57179 return(57180 call :(57196 call _build_tuple(57184 call . a c"re")(57187 call +(57190 call . a c"im")(57194 call _i2r b)))(57199 call complex[111] 64)))
  }
  function +[57203](arg a[57208] :
  (57206 call complex[111] 128), arg b[57214] :
  (57212 call imag 64)) : _unknown[42] "inline" "operator"
  {
    (57218 return(57219 call :(57235 call _build_tuple(57223 call . a c"re")(57226 call +(57229 call . a c"im")(57233 call _i2r b)))(57238 call complex[111] 128)))
  }
  function -[57242](arg a[57247] :
  (57245 call int[10] 8), arg b[57253] :
  (57251 call int[10] 8)) : _unknown[42] "inline" "operator"
  {
    (57257 return(57258 '-' a b))
  }
  function -[57263](arg a[57268] :
  (57266 call int[10] 16), arg b[57274] :
  (57272 call int[10] 16)) : _unknown[42] "inline" "operator"
  {
    (57278 return(57279 '-' a b))
  }
  function -[57284](arg a[57289] :
  (57287 call int[10] 32), arg b[57295] :
  (57293 call int[10] 32)) : _unknown[42] "inline" "operator"
  {
    (57299 return(57300 '-' a b))
  }
  function -[57305](arg a[57310] :
  (57308 call int[10] 64), arg b[57316] :
  (57314 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (57320 return(57321 '-' a b))
  }
  function -[57326](arg a[57331] :
  (57329 call uint[86] 8), arg b[57337] :
  (57335 call uint[86] 8)) : _unknown[42] "inline" "operator"
  {
    (57341 return(57342 '-' a b))
  }
  function -[57347](arg a[57352] :
  (57350 call uint[86] 16), arg b[57358] :
  (57356 call uint[86] 16)) : _unknown[42] "inline" "operator"
  {
    (57362 return(57363 '-' a b))
  }
  function -[57368](arg a[57373] :
  (57371 call uint[86] 32), arg b[57379] :
  (57377 call uint[86] 32)) : _unknown[42] "inline" "operator"
  {
    (57383 return(57384 '-' a b))
  }
  function -[57389](arg a[57394] :
  (57392 call uint[86] 64), arg b[57400] :
  (57398 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    (57404 return(57405 '-' a b))
  }
  function -[57410](arg a[57415] :
  (57413 call real[13] 32), arg b[57421] :
  (57419 call real[13] 32)) : _unknown[42] "inline" "operator"
  {
    (57425 return(57426 '-' a b))
  }
  function -[57431](arg a[57436] :
  (57434 call real[13] 64), arg b[57442] :
  (57440 call real[13] 64)) : _unknown[42] "inline" "operator"
  {
    (57446 return(57447 '-' a b))
  }
  function -[57452](arg a[57457] :
  (57455 call imag 32), arg b[57463] :
  (57461 call imag 32)) : _unknown[42] "inline" "operator"
  {
    (57467 return(57468 '-' a b))
  }
  function -[57473](arg a[57478] :
  (57476 call imag 64), arg b[57484] :
  (57482 call imag 64)) : _unknown[42] "inline" "operator"
  {
    (57488 return(57489 '-' a b))
  }
  function -[57494](arg a[57499] :
  (57497 call complex[111] 64), arg b[57505] :
  (57503 call complex[111] 64)) : _unknown[42] "inline" "operator"
  {
    (57509 return(57510 '-' a b))
  }
  function -[57515](arg a[57520] :
  (57518 call complex[111] 128), arg b[57526] :
  (57524 call complex[111] 128)) : _unknown[42] "inline" "operator"
  {
    (57530 return(57531 '-' a b))
  }
  function -[57536](arg a[57541] :
  (57539 call real[13] 32), arg b[57547] :
  (57545 call imag 32)) : _unknown[42] "inline" "operator"
  {
    (57551 return(57552 call :(57561 call _build_tuple a(57556 call -(57559 call _i2r b)))(57564 call complex[111] 64)))
  }
  function -[57568](arg a[57573] :
  (57571 call real[13] 64), arg b[57579] :
  (57577 call imag 64)) : _unknown[42] "inline" "operator"
  {
    (57583 return(57584 call :(57593 call _build_tuple a(57588 call -(57591 call _i2r b)))(57596 call complex[111] 128)))
  }
  function -[57600](arg a[57605] :
  (57603 call imag 32), arg b[57611] :
  (57609 call real[13] 32)) : _unknown[42] "inline" "operator"
  {
    (57615 return(57616 call :(57625 call _build_tuple(57619 call - b)(57623 call _i2r a))(57628 call complex[111] 64)))
  }
  function -[57632](arg a[57637] :
  (57635 call imag 64), arg b[57643] :
  (57641 call real[13] 64)) : _unknown[42] "inline" "operator"
  {
    (57647 return(57648 call :(57657 call _build_tuple(57651 call - b)(57655 call _i2r a))(57660 call complex[111] 128)))
  }
  function -[57664](arg a[57669] :
  (57667 call real[13] 32), arg b[57675] :
  (57673 call complex[111] 64)) : _unknown[42] "inline" "operator"
  {
    (57679 return(57680 call :(57696 call _build_tuple(57683 call - a(57687 call . b c"re"))(57690 call -(57693 call . b c"im")))(57699 call complex[111] 64)))
  }
  function -[57703](arg a[57708] :
  (57706 call real[13] 64), arg b[57714] :
  (57712 call complex[111] 128)) : _unknown[42] "inline" "operator"
  {
    (57718 return(57719 call :(57735 call _build_tuple(57722 call - a(57726 call . b c"re"))(57729 call -(57732 call . b c"im")))(57738 call complex[111] 128)))
  }
  function -[57742](arg a[57747] :
  (57745 call complex[111] 64), arg b[57753] :
  (57751 call real[13] 32)) : _unknown[42] "inline" "operator"
  {
    (57757 return(57758 call :(57772 call _build_tuple(57761 call -(57764 call . a c"re") b)(57769 call . a c"im"))(57775 call complex[111] 64)))
  }
  function -[57779](arg a[57784] :
  (57782 call complex[111] 128), arg b[57790] :
  (57788 call real[13] 64)) : _unknown[42] "inline" "operator"
  {
    (57794 return(57795 call :(57809 call _build_tuple(57798 call -(57801 call . a c"re") b)(57806 call . a c"im"))(57812 call complex[111] 128)))
  }
  function -[57816](arg a[57821] :
  (57819 call imag 32), arg b[57827] :
  (57825 call complex[111] 64)) : _unknown[42] "inline" "operator"
  {
    (57831 return(57832 call :(57850 call _build_tuple(57835 call -(57838 call . b c"re"))(57841 call -(57844 call _i2r a)(57847 call . b c"im")))(57853 call complex[111] 64)))
  }
  function -[57857](arg a[57862] :
  (57860 call imag 64), arg b[57868] :
  (57866 call complex[111] 128)) : _unknown[42] "inline" "operator"
  {
    (57872 return(57873 call :(57891 call _build_tuple(57876 call -(57879 call . b c"re"))(57882 call -(57885 call _i2r a)(57888 call . b c"im")))(57894 call complex[111] 128)))
  }
  function -[57898](arg a[57903] :
  (57901 call complex[111] 64), arg b[57909] :
  (57907 call imag 32)) : _unknown[42] "inline" "operator"
  {
    (57913 return(57914 call :(57930 call _build_tuple(57918 call . a c"re")(57921 call -(57924 call . a c"im")(57928 call _i2r b)))(57933 call complex[111] 64)))
  }
  function -[57937](arg a[57942] :
  (57940 call complex[111] 128), arg b[57948] :
  (57946 call imag 64)) : _unknown[42] "inline" "operator"
  {
    (57952 return(57953 call :(57969 call _build_tuple(57957 call . a c"re")(57960 call -(57963 call . a c"im")(57967 call _i2r b)))(57972 call complex[111] 128)))
  }
  function +[57976](param arg a[57981] :
  (57979 call int[10] 8), param arg b[57987] :
  (57985 call int[10] 8)) param : _unknown[42] "inline" "operator"
  {
    (57991 return(57992 '+' a b))
  }
  function +[57997](param arg a[58002] :
  (58000 call int[10] 16), param arg b[58008] :
  (58006 call int[10] 16)) param : _unknown[42] "inline" "operator"
  {
    (58012 return(58013 '+' a b))
  }
  function +[58018](param arg a[58023] :
  (58021 call int[10] 32), param arg b[58029] :
  (58027 call int[10] 32)) param : _unknown[42] "inline" "operator"
  {
    (58033 return(58034 '+' a b))
  }
  function +[58039](param arg a[58044] :
  (58042 call int[10] 64), param arg b[58050] :
  (58048 call int[10] 64)) param : _unknown[42] "inline" "operator"
  {
    (58054 return(58055 '+' a b))
  }
  function +[58060](param arg a[58065] :
  (58063 call uint[86] 8), param arg b[58071] :
  (58069 call uint[86] 8)) param : _unknown[42] "inline" "operator"
  {
    (58075 return(58076 '+' a b))
  }
  function +[58081](param arg a[58086] :
  (58084 call uint[86] 16), param arg b[58092] :
  (58090 call uint[86] 16)) param : _unknown[42] "inline" "operator"
  {
    (58096 return(58097 '+' a b))
  }
  function +[58102](param arg a[58107] :
  (58105 call uint[86] 32), param arg b[58113] :
  (58111 call uint[86] 32)) param : _unknown[42] "inline" "operator"
  {
    (58117 return(58118 '+' a b))
  }
  function +[58123](param arg a[58128] :
  (58126 call uint[86] 64), param arg b[58134] :
  (58132 call uint[86] 64)) param : _unknown[42] "inline" "operator"
  {
    (58138 return(58139 '+' a b))
  }
  function +[58144](param arg a[58149] :
  (58147 call real[13] 32), param arg b[58155] :
  (58153 call real[13] 32)) param : _unknown[42] "inline" "operator"
  {
    (58159 return(58160 '+' a b))
  }
  function +[58165](param arg a[58170] :
  (58168 call real[13] 64), param arg b[58176] :
  (58174 call real[13] 64)) param : _unknown[42] "inline" "operator"
  {
    (58180 return(58181 '+' a b))
  }
  function +[58186](param arg a[58191] :
  (58189 call imag 32), param arg b[58197] :
  (58195 call imag 32)) param : _unknown[42] "inline" "operator"
  {
    (58201 return(58202 '+' a b))
  }
  function +[58207](param arg a[58212] :
  (58210 call imag 64), param arg b[58218] :
  (58216 call imag 64)) param : _unknown[42] "inline" "operator"
  {
    (58222 return(58223 '+' a b))
  }
  function +[58228](param arg a[58233] :
  (58231 call complex[111] 64), param arg b[58239] :
  (58237 call complex[111] 64)) param : _unknown[42] "inline" "operator"
  {
    (58243 return(58244 '+' a b))
  }
  function +[58249](param arg a[58254] :
  (58252 call complex[111] 128), param arg b[58260] :
  (58258 call complex[111] 128)) param : _unknown[42] "inline" "operator"
  {
    (58264 return(58265 '+' a b))
  }
  function +[58270](param arg a[58275] :
  (58273 call real[13] 32), param arg b[58281] :
  (58279 call imag 32)) param : _unknown[42] "inline" "operator"
  {
    (58285 return(58286 '+' a b))
  }
  function +[58291](param arg a[58296] :
  (58294 call real[13] 64), param arg b[58302] :
  (58300 call imag 64)) param : _unknown[42] "inline" "operator"
  {
    (58306 return(58307 '+' a b))
  }
  function +[58312](param arg a[58317] :
  (58315 call imag 32), param arg b[58323] :
  (58321 call real[13] 32)) param : _unknown[42] "inline" "operator"
  {
    (58327 return(58328 '+' a b))
  }
  function +[58333](param arg a[58338] :
  (58336 call imag 64), param arg b[58344] :
  (58342 call real[13] 64)) param : _unknown[42] "inline" "operator"
  {
    (58348 return(58349 '+' a b))
  }
  function -[58354](param arg a[58359] :
  (58357 call int[10] 8), param arg b[58365] :
  (58363 call int[10] 8)) param : _unknown[42] "inline" "operator"
  {
    (58369 return(58370 '-' a b))
  }
  function -[58375](param arg a[58380] :
  (58378 call int[10] 16), param arg b[58386] :
  (58384 call int[10] 16)) param : _unknown[42] "inline" "operator"
  {
    (58390 return(58391 '-' a b))
  }
  function -[58396](param arg a[58401] :
  (58399 call int[10] 32), param arg b[58407] :
  (58405 call int[10] 32)) param : _unknown[42] "inline" "operator"
  {
    (58411 return(58412 '-' a b))
  }
  function -[58417](param arg a[58422] :
  (58420 call int[10] 64), param arg b[58428] :
  (58426 call int[10] 64)) param : _unknown[42] "inline" "operator"
  {
    (58432 return(58433 '-' a b))
  }
  function -[58438](param arg a[58443] :
  (58441 call uint[86] 8), param arg b[58449] :
  (58447 call uint[86] 8)) param : _unknown[42] "inline" "operator"
  {
    (58453 return(58454 '-' a b))
  }
  function -[58459](param arg a[58464] :
  (58462 call uint[86] 16), param arg b[58470] :
  (58468 call uint[86] 16)) param : _unknown[42] "inline" "operator"
  {
    (58474 return(58475 '-' a b))
  }
  function -[58480](param arg a[58485] :
  (58483 call uint[86] 32), param arg b[58491] :
  (58489 call uint[86] 32)) param : _unknown[42] "inline" "operator"
  {
    (58495 return(58496 '-' a b))
  }
  function -[58501](param arg a[58506] :
  (58504 call uint[86] 64), param arg b[58512] :
  (58510 call uint[86] 64)) param : _unknown[42] "inline" "operator"
  {
    (58516 return(58517 '-' a b))
  }
  function -[58522](param arg a[58527] :
  (58525 call real[13] 32), param arg b[58533] :
  (58531 call real[13] 32)) param : _unknown[42] "inline" "operator"
  {
    (58537 return(58538 '-' a b))
  }
  function -[58543](param arg a[58548] :
  (58546 call real[13] 64), param arg b[58554] :
  (58552 call real[13] 64)) param : _unknown[42] "inline" "operator"
  {
    (58558 return(58559 '-' a b))
  }
  function -[58564](param arg a[58569] :
  (58567 call imag 32), param arg b[58575] :
  (58573 call imag 32)) param : _unknown[42] "inline" "operator"
  {
    (58579 return(58580 '-' a b))
  }
  function -[58585](param arg a[58590] :
  (58588 call imag 64), param arg b[58596] :
  (58594 call imag 64)) param : _unknown[42] "inline" "operator"
  {
    (58600 return(58601 '-' a b))
  }
  function -[58606](param arg a[58611] :
  (58609 call complex[111] 64), param arg b[58617] :
  (58615 call complex[111] 64)) param : _unknown[42] "inline" "operator"
  {
    (58621 return(58622 '-' a b))
  }
  function -[58627](param arg a[58632] :
  (58630 call complex[111] 128), param arg b[58638] :
  (58636 call complex[111] 128)) param : _unknown[42] "inline" "operator"
  {
    (58642 return(58643 '-' a b))
  }
  function -[58648](param arg a[58653] :
  (58651 call real[13] 32), param arg b[58659] :
  (58657 call imag 32)) param : _unknown[42] "inline" "operator"
  {
    (58663 return(58664 '-' a b))
  }
  function -[58669](param arg a[58674] :
  (58672 call real[13] 64), param arg b[58680] :
  (58678 call imag 64)) param : _unknown[42] "inline" "operator"
  {
    (58684 return(58685 '-' a b))
  }
  function -[58690](param arg a[58695] :
  (58693 call imag 32), param arg b[58701] :
  (58699 call real[13] 32)) param : _unknown[42] "inline" "operator"
  {
    (58705 return(58706 '-' a b))
  }
  function -[58711](param arg a[58716] :
  (58714 call imag 64), param arg b[58722] :
  (58720 call real[13] 64)) param : _unknown[42] "inline" "operator"
  {
    (58726 return(58727 '-' a b))
  }
  function *[58732](arg a[58737] :
  (58735 call int[10] 8), arg b[58743] :
  (58741 call int[10] 8)) : _unknown[42] "inline" "operator"
  {
    (58747 return(58748 '*' a b))
  }
  function *[58753](arg a[58758] :
  (58756 call int[10] 16), arg b[58764] :
  (58762 call int[10] 16)) : _unknown[42] "inline" "operator"
  {
    (58768 return(58769 '*' a b))
  }
  function *[58774](arg a[58779] :
  (58777 call int[10] 32), arg b[58785] :
  (58783 call int[10] 32)) : _unknown[42] "inline" "operator"
  {
    (58789 return(58790 '*' a b))
  }
  function *[58795](arg a[58800] :
  (58798 call int[10] 64), arg b[58806] :
  (58804 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (58810 return(58811 '*' a b))
  }
  function *[58816](arg a[58821] :
  (58819 call uint[86] 8), arg b[58827] :
  (58825 call uint[86] 8)) : _unknown[42] "inline" "operator"
  {
    (58831 return(58832 '*' a b))
  }
  function *[58837](arg a[58842] :
  (58840 call uint[86] 16), arg b[58848] :
  (58846 call uint[86] 16)) : _unknown[42] "inline" "operator"
  {
    (58852 return(58853 '*' a b))
  }
  function *[58858](arg a[58863] :
  (58861 call uint[86] 32), arg b[58869] :
  (58867 call uint[86] 32)) : _unknown[42] "inline" "operator"
  {
    (58873 return(58874 '*' a b))
  }
  function *[58879](arg a[58884] :
  (58882 call uint[86] 64), arg b[58890] :
  (58888 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    (58894 return(58895 '*' a b))
  }
  function *[58900](arg a[58905] :
  (58903 call real[13] 32), arg b[58911] :
  (58909 call real[13] 32)) : _unknown[42] "inline" "operator"
  {
    (58915 return(58916 '*' a b))
  }
  function *[58921](arg a[58926] :
  (58924 call real[13] 64), arg b[58932] :
  (58930 call real[13] 64)) : _unknown[42] "inline" "operator"
  {
    (58936 return(58937 '*' a b))
  }
  function *[58942](arg a[58947] :
  (58945 call imag 32), arg b[58953] :
  (58951 call imag 32)) : _unknown[42] "inline" "operator"
  {
    (58957 return(58959 call _i2r(58960 '*'(58961 call - a) b)))
  }
  function *[58967](arg a[58972] :
  (58970 call imag 64), arg b[58978] :
  (58976 call imag 64)) : _unknown[42] "inline" "operator"
  {
    (58982 return(58984 call _i2r(58985 '*'(58986 call - a) b)))
  }
  function *[58992](arg a[58997] :
  (58995 call complex[111] 64), arg b[59003] :
  (59001 call complex[111] 64)) : _unknown[42] "inline" "operator"
  {
    (59007 return(59008 '*' a b))
  }
  function *[59013](arg a[59018] :
  (59016 call complex[111] 128), arg b[59024] :
  (59022 call complex[111] 128)) : _unknown[42] "inline" "operator"
  {
    (59028 return(59029 '*' a b))
  }
  function *[59034](arg a[59039] :
  (59037 call real[13] 32), arg b[59045] :
  (59043 call imag 32)) : _unknown[42] "inline" "operator"
  {
    (59049 return(59051 call _r2i(59052 call * a(59056 call _i2r b))))
  }
  function *[59060](arg a[59065] :
  (59063 call real[13] 64), arg b[59071] :
  (59069 call imag 64)) : _unknown[42] "inline" "operator"
  {
    (59075 return(59077 call _r2i(59078 call * a(59082 call _i2r b))))
  }
  function *[59086](arg a[59091] :
  (59089 call imag 32), arg b[59097] :
  (59095 call real[13] 32)) : _unknown[42] "inline" "operator"
  {
    (59101 return(59103 call _r2i(59104 call *(59107 call _i2r a) b)))
  }
  function *[59112](arg a[59117] :
  (59115 call imag 64), arg b[59123] :
  (59121 call real[13] 64)) : _unknown[42] "inline" "operator"
  {
    (59127 return(59129 call _r2i(59130 call *(59133 call _i2r a) b)))
  }
  function *[59138](arg a[59143] :
  (59141 call real[13] 32), arg b[59149] :
  (59147 call complex[111] 64)) : _unknown[42] "inline" "operator"
  {
    (59153 return(59154 call :(59171 call _build_tuple(59157 call * a(59161 call . b c"re"))(59164 call * a(59168 call . b c"im")))(59174 call complex[111] 64)))
  }
  function *[59178](arg a[59183] :
  (59181 call real[13] 64), arg b[59189] :
  (59187 call complex[111] 128)) : _unknown[42] "inline" "operator"
  {
    (59193 return(59194 call :(59211 call _build_tuple(59197 call * a(59201 call . b c"re"))(59204 call * a(59208 call . b c"im")))(59214 call complex[111] 128)))
  }
  function *[59218](arg a[59223] :
  (59221 call complex[111] 64), arg b[59229] :
  (59227 call real[13] 32)) : _unknown[42] "inline" "operator"
  {
    (59233 return(59234 call :(59251 call _build_tuple(59237 call *(59240 call . a c"re") b)(59244 call *(59247 call . a c"im") b))(59254 call complex[111] 64)))
  }
  function *[59258](arg a[59263] :
  (59261 call complex[111] 128), arg b[59269] :
  (59267 call real[13] 64)) : _unknown[42] "inline" "operator"
  {
    (59273 return(59274 call :(59291 call _build_tuple(59277 call *(59280 call . a c"re") b)(59284 call *(59287 call . a c"im") b))(59294 call complex[111] 128)))
  }
  function *[59298](arg a[59303] :
  (59301 call imag 32), arg b[59309] :
  (59307 call complex[111] 64)) : _unknown[42] "inline" "operator"
  {
    (59313 return(59314 call :(59337 call _build_tuple(59317 call -(59319 call *(59322 call _i2r a)(59325 call . b c"im")))(59328 call *(59331 call _i2r a)(59334 call . b c"re")))(59340 call complex[111] 64)))
  }
  function *[59344](arg a[59349] :
  (59347 call imag 64), arg b[59355] :
  (59353 call complex[111] 128)) : _unknown[42] "inline" "operator"
  {
    (59359 return(59360 call :(59383 call _build_tuple(59363 call -(59365 call *(59368 call _i2r a)(59371 call . b c"im")))(59374 call *(59377 call _i2r a)(59380 call . b c"re")))(59386 call complex[111] 128)))
  }
  function *[59390](arg a[59395] :
  (59393 call complex[111] 64), arg b[59401] :
  (59399 call imag 32)) : _unknown[42] "inline" "operator"
  {
    (59405 return(59406 call :(59429 call _build_tuple(59409 call -(59411 call *(59414 call . a c"im")(59418 call _i2r b)))(59420 call *(59423 call . a c"re")(59427 call _i2r b)))(59432 call complex[111] 64)))
  }
  function *[59436](arg a[59441] :
  (59439 call complex[111] 128), arg b[59447] :
  (59445 call imag 64)) : _unknown[42] "inline" "operator"
  {
    (59451 return(59452 call :(59475 call _build_tuple(59455 call -(59457 call *(59460 call . a c"im")(59464 call _i2r b)))(59466 call *(59469 call . a c"re")(59473 call _i2r b)))(59478 call complex[111] 128)))
  }
  function /[59482](arg a[59487] :
  (59485 call int[10] 8), arg b[59493] :
  (59491 call int[10] 8)) : _unknown[42] "inline" "operator"
  {
    if(59513 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(59507 call _cond_test(59503 call == b 0))
        {
          { scopeless
            (59498 call halt "Attempt to divide by zero")
          }
        }
      }
    }
    (59518 return(59519 '/' a b))
  }
  function /[59524](arg a[59529] :
  (59527 call int[10] 16), arg b[59535] :
  (59533 call int[10] 16)) : _unknown[42] "inline" "operator"
  {
    if(59553 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(59547 call _cond_test(59543 call == b 0))
        {
          { scopeless
            (59540 call halt "Attempt to divide by zero")
          }
        }
      }
    }
    (59558 return(59559 '/' a b))
  }
  function /[59564](arg a[59569] :
  (59567 call int[10] 32), arg b[59575] :
  (59573 call int[10] 32)) : _unknown[42] "inline" "operator"
  {
    if(59593 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(59587 call _cond_test(59583 call == b 0))
        {
          { scopeless
            (59580 call halt "Attempt to divide by zero")
          }
        }
      }
    }
    (59598 return(59599 '/' a b))
  }
  function /[59604](arg a[59609] :
  (59607 call int[10] 64), arg b[59615] :
  (59613 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    if(59633 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(59627 call _cond_test(59623 call == b 0))
        {
          { scopeless
            (59620 call halt "Attempt to divide by zero")
          }
        }
      }
    }
    (59638 return(59639 '/' a b))
  }
  function /[59644](arg a[59649] :
  (59647 call uint[86] 8), arg b[59655] :
  (59653 call uint[86] 8)) : _unknown[42] "inline" "operator"
  {
    if(59673 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(59667 call _cond_test(59663 call == b 0))
        {
          { scopeless
            (59660 call halt "Attempt to divide by zero")
          }
        }
      }
    }
    (59678 return(59679 '/' a b))
  }
  function /[59684](arg a[59689] :
  (59687 call uint[86] 16), arg b[59695] :
  (59693 call uint[86] 16)) : _unknown[42] "inline" "operator"
  {
    if(59713 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(59707 call _cond_test(59703 call == b 0))
        {
          { scopeless
            (59700 call halt "Attempt to divide by zero")
          }
        }
      }
    }
    (59718 return(59719 '/' a b))
  }
  function /[59724](arg a[59729] :
  (59727 call uint[86] 32), arg b[59735] :
  (59733 call uint[86] 32)) : _unknown[42] "inline" "operator"
  {
    if(59753 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(59747 call _cond_test(59743 call == b 0))
        {
          { scopeless
            (59740 call halt "Attempt to divide by zero")
          }
        }
      }
    }
    (59758 return(59759 '/' a b))
  }
  function /[59764](arg a[59769] :
  (59767 call uint[86] 64), arg b[59775] :
  (59773 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    if(59793 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(59787 call _cond_test(59783 call == b 0))
        {
          { scopeless
            (59780 call halt "Attempt to divide by zero")
          }
        }
      }
    }
    (59798 return(59799 '/' a b))
  }
  function /[59804](arg a[59809] :
  (59807 call real[13] 32), arg b[59815] :
  (59813 call real[13] 32)) : _unknown[42] "inline" "operator"
  {
    (59819 return(59820 '/' a b))
  }
  function /[59825](arg a[59830] :
  (59828 call real[13] 64), arg b[59836] :
  (59834 call real[13] 64)) : _unknown[42] "inline" "operator"
  {
    (59840 return(59841 '/' a b))
  }
  function /[59846](arg a[59851] :
  (59849 call imag 32), arg b[59857] :
  (59855 call imag 32)) : _unknown[42] "inline" "operator"
  {
    (59861 return(59863 call _i2r(59864 '/' a b)))
  }
  function /[59869](arg a[59874] :
  (59872 call imag 64), arg b[59880] :
  (59878 call imag 64)) : _unknown[42] "inline" "operator"
  {
    (59884 return(59886 call _i2r(59887 '/' a b)))
  }
  function /[59892](arg a[59897] :
  (59895 call complex[111] 64), arg b[59903] :
  (59901 call complex[111] 64)) : _unknown[42] "inline" "operator"
  {
    (59907 return(59908 '/' a b))
  }
  function /[59913](arg a[59918] :
  (59916 call complex[111] 128), arg b[59924] :
  (59922 call complex[111] 128)) : _unknown[42] "inline" "operator"
  {
    (59928 return(59929 '/' a b))
  }
  function /[59934](arg a[59939] :
  (59937 call real[13] 32), arg b[59945] :
  (59943 call imag 32)) : _unknown[42] "inline" "operator"
  {
    (59949 return(59951 call _r2i(59952 call -(59954 call / a(59958 call _i2r b)))))
  }
  function /[59962](arg a[59967] :
  (59965 call real[13] 64), arg b[59973] :
  (59971 call imag 64)) : _unknown[42] "inline" "operator"
  {
    (59977 return(59979 call _r2i(59980 call -(59982 call / a(59986 call _i2r b)))))
  }
  function /[59990](arg a[59995] :
  (59993 call imag 32), arg b[60001] :
  (59999 call real[13] 32)) : _unknown[42] "inline" "operator"
  {
    (60005 return(60007 call _r2i(60008 call /(60011 call _i2r a) b)))
  }
  function /[60016](arg a[60021] :
  (60019 call imag 64), arg b[60027] :
  (60025 call real[13] 64)) : _unknown[42] "inline" "operator"
  {
    (60031 return(60033 call _r2i(60034 call /(60037 call _i2r a) b)))
  }
  function /[60042](arg a[60047] :
  (60045 call real[13] 32), arg b[60053] :
  (60051 call complex[111] 64)) : _unknown[42] "inline" "operator"
  {
    { scopeless
      const d[60058] "const"(60060 call abs b)
      (60063 'end of statement')
    }
    (60064 return(60065 call :(60096 call _build_tuple(60068 call *(60070 call / a d)(60074 call /(60077 call . b c"re") d))(60081 call *(60083 call -(60085 call / a d))(60089 call /(60092 call . b c"im") d)))(60099 call complex[111] 64)))
  }
  function /[60103](arg a[60108] :
  (60106 call real[13] 64), arg b[60114] :
  (60112 call complex[111] 128)) : _unknown[42] "inline" "operator"
  {
    { scopeless
      const d[60119] "const"(60121 call abs b)
      (60124 'end of statement')
    }
    (60125 return(60126 call :(60157 call _build_tuple(60129 call *(60131 call / a d)(60135 call /(60138 call . b c"re") d))(60142 call *(60144 call -(60146 call / a d))(60150 call /(60153 call . b c"im") d)))(60160 call complex[111] 128)))
  }
  function /[60164](arg a[60169] :
  (60167 call complex[111] 64), arg b[60175] :
  (60173 call real[13] 32)) : _unknown[42] "inline" "operator"
  {
    (60179 return(60180 call :(60197 call _build_tuple(60183 call /(60186 call . a c"re") b)(60190 call /(60193 call . a c"im") b))(60200 call complex[111] 64)))
  }
  function /[60204](arg a[60209] :
  (60207 call complex[111] 128), arg b[60215] :
  (60213 call real[13] 64)) : _unknown[42] "inline" "operator"
  {
    (60219 return(60220 call :(60237 call _build_tuple(60223 call /(60226 call . a c"re") b)(60230 call /(60233 call . a c"im") b))(60240 call complex[111] 128)))
  }
  function /[60244](arg a[60249] :
  (60247 call imag 32), arg b[60255] :
  (60253 call complex[111] 64)) : _unknown[42] "inline" "operator"
  {
    { scopeless
      const d[60260] "const"(60262 call abs b)
      (60265 'end of statement')
    }
    (60266 return(60267 call :(60300 call _build_tuple(60270 call *(60272 call /(60275 call _i2r a) d)(60278 call /(60281 call . b c"im") d))(60285 call *(60287 call /(60290 call _i2r a) d)(60293 call /(60296 call . b c"re") d)))(60303 call complex[111] 64)))
  }
  function /[60307](arg a[60312] :
  (60310 call imag 64), arg b[60318] :
  (60316 call complex[111] 128)) : _unknown[42] "inline" "operator"
  {
    { scopeless
      const d[60323] "const"(60325 call abs b)
      (60328 'end of statement')
    }
    (60329 return(60330 call :(60363 call _build_tuple(60333 call *(60335 call /(60338 call _i2r a) d)(60341 call /(60344 call . b c"im") d))(60348 call *(60350 call /(60353 call _i2r a) d)(60356 call /(60359 call . b c"re") d)))(60366 call complex[111] 128)))
  }
  function /[60370](arg a[60375] :
  (60373 call complex[111] 64), arg b[60381] :
  (60379 call imag 32)) : _unknown[42] "inline" "operator"
  {
    (60385 return(60386 call :(60409 call _build_tuple(60389 call /(60392 call . a c"im")(60396 call _i2r b))(60398 call -(60400 call /(60403 call . a c"re")(60407 call _i2r b))))(60412 call complex[111] 64)))
  }
  function /[60416](arg a[60421] :
  (60419 call complex[111] 128), arg b[60427] :
  (60425 call imag 64)) : _unknown[42] "inline" "operator"
  {
    (60431 return(60432 call :(60455 call _build_tuple(60435 call /(60438 call . a c"im")(60442 call _i2r b))(60444 call -(60446 call /(60449 call . a c"re")(60453 call _i2r b))))(60458 call complex[111] 128)))
  }
  function *[60462](param arg a[60467] :
  (60465 call int[10] 8), param arg b[60473] :
  (60471 call int[10] 8)) param : _unknown[42] "inline" "operator"
  {
    (60477 return(60478 '*' a b))
  }
  function *[60483](param arg a[60488] :
  (60486 call int[10] 16), param arg b[60494] :
  (60492 call int[10] 16)) param : _unknown[42] "inline" "operator"
  {
    (60498 return(60499 '*' a b))
  }
  function *[60504](param arg a[60509] :
  (60507 call int[10] 32), param arg b[60515] :
  (60513 call int[10] 32)) param : _unknown[42] "inline" "operator"
  {
    (60519 return(60520 '*' a b))
  }
  function *[60525](param arg a[60530] :
  (60528 call int[10] 64), param arg b[60536] :
  (60534 call int[10] 64)) param : _unknown[42] "inline" "operator"
  {
    (60540 return(60541 '*' a b))
  }
  function *[60546](param arg a[60551] :
  (60549 call uint[86] 8), param arg b[60557] :
  (60555 call uint[86] 8)) param : _unknown[42] "inline" "operator"
  {
    (60561 return(60562 '*' a b))
  }
  function *[60567](param arg a[60572] :
  (60570 call uint[86] 16), param arg b[60578] :
  (60576 call uint[86] 16)) param : _unknown[42] "inline" "operator"
  {
    (60582 return(60583 '*' a b))
  }
  function *[60588](param arg a[60593] :
  (60591 call uint[86] 32), param arg b[60599] :
  (60597 call uint[86] 32)) param : _unknown[42] "inline" "operator"
  {
    (60603 return(60604 '*' a b))
  }
  function *[60609](param arg a[60614] :
  (60612 call uint[86] 64), param arg b[60620] :
  (60618 call uint[86] 64)) param : _unknown[42] "inline" "operator"
  {
    (60624 return(60625 '*' a b))
  }
  function *[60630](param arg a[60635] :
  (60633 call real[13] 32), param arg b[60641] :
  (60639 call real[13] 32)) param : _unknown[42] "inline" "operator"
  {
    (60645 return(60646 '*' a b))
  }
  function *[60651](param arg a[60656] :
  (60654 call real[13] 64), param arg b[60662] :
  (60660 call real[13] 64)) param : _unknown[42] "inline" "operator"
  {
    (60666 return(60667 '*' a b))
  }
  function *[60672](param arg a[60677] :
  (60675 call imag 32), param arg b[60683] :
  (60681 call imag 32)) param : _unknown[42] "inline" "operator"
  {
    (60687 return(60688 call :(60690 '*'(60691 call - a) b)(60696 call real[13] 32)))
  }
  function *[60700](param arg a[60705] :
  (60703 call imag 64), param arg b[60711] :
  (60709 call imag 64)) param : _unknown[42] "inline" "operator"
  {
    (60715 return(60716 call :(60718 '*'(60719 call - a) b)(60724 call real[13] 64)))
  }
  function *[60728](param arg a[60733] :
  (60731 call real[13] 32), param arg b[60739] :
  (60737 call imag 32)) param : _unknown[42] "inline" "operator"
  {
    (60743 return(60744 call :(60746 '*' a(60748 call : b(60752 call real[13] 32)))(60755 call imag 32)))
  }
  function *[60759](param arg a[60764] :
  (60762 call real[13] 64), param arg b[60770] :
  (60768 call imag 64)) param : _unknown[42] "inline" "operator"
  {
    (60774 return(60775 call :(60777 '*' a(60779 call : b(60783 call real[13] 64)))(60786 call imag 64)))
  }
  function *[60790](param arg a[60795] :
  (60793 call imag 32), param arg b[60801] :
  (60799 call real[13] 32)) param : _unknown[42] "inline" "operator"
  {
    (60805 return(60806 call :(60808 '*'(60809 call : a(60813 call real[13] 32)) b)(60817 call imag 32)))
  }
  function *[60821](param arg a[60826] :
  (60824 call imag 64), param arg b[60832] :
  (60830 call real[13] 64)) param : _unknown[42] "inline" "operator"
  {
    (60836 return(60837 call :(60839 '*'(60840 call : a(60844 call real[13] 64)) b)(60848 call imag 64)))
  }
  function /[60852](param arg a[60857] :
  (60855 call int[10] 8), param arg b[60863] :
  (60861 call int[10] 8)) param : _unknown[42] "inline" "operator"
  {
    if(60875 call _cond_test(60871 call == b 0))
    {
      { scopeless
        (60868 call compilerError "Attempt to divide by zero")
      }
    }
    (60880 return(60881 '/' a b))
  }
  function /[60886](param arg a[60891] :
  (60889 call int[10] 16), param arg b[60897] :
  (60895 call int[10] 16)) param : _unknown[42] "inline" "operator"
  {
    if(60909 call _cond_test(60905 call == b 0))
    {
      { scopeless
        (60902 call compilerError "Attempt to divide by zero")
      }
    }
    (60914 return(60915 '/' a b))
  }
  function /[60920](param arg a[60925] :
  (60923 call int[10] 32), param arg b[60931] :
  (60929 call int[10] 32)) param : _unknown[42] "inline" "operator"
  {
    if(60943 call _cond_test(60939 call == b 0))
    {
      { scopeless
        (60936 call compilerError "Attempt to divide by zero")
      }
    }
    (60948 return(60949 '/' a b))
  }
  function /[60954](param arg a[60959] :
  (60957 call int[10] 64), param arg b[60965] :
  (60963 call int[10] 64)) param : _unknown[42] "inline" "operator"
  {
    if(60977 call _cond_test(60973 call == b 0))
    {
      { scopeless
        (60970 call compilerError "Attempt to divide by zero")
      }
    }
    (60982 return(60983 '/' a b))
  }
  function /[60988](param arg a[60993] :
  (60991 call uint[86] 8), param arg b[60999] :
  (60997 call uint[86] 8)) param : _unknown[42] "inline" "operator"
  {
    if(61011 call _cond_test(61007 call == b 0))
    {
      { scopeless
        (61004 call compilerError "Attempt to divide by zero")
      }
    }
    (61016 return(61017 '/' a b))
  }
  function /[61022](param arg a[61027] :
  (61025 call uint[86] 16), param arg b[61033] :
  (61031 call uint[86] 16)) param : _unknown[42] "inline" "operator"
  {
    if(61045 call _cond_test(61041 call == b 0))
    {
      { scopeless
        (61038 call compilerError "Attempt to divide by zero")
      }
    }
    (61050 return(61051 '/' a b))
  }
  function /[61056](param arg a[61061] :
  (61059 call uint[86] 32), param arg b[61067] :
  (61065 call uint[86] 32)) param : _unknown[42] "inline" "operator"
  {
    if(61079 call _cond_test(61075 call == b 0))
    {
      { scopeless
        (61072 call compilerError "Attempt to divide by zero")
      }
    }
    (61084 return(61085 '/' a b))
  }
  function /[61090](param arg a[61095] :
  (61093 call uint[86] 64), param arg b[61101] :
  (61099 call uint[86] 64)) param : _unknown[42] "inline" "operator"
  {
    if(61113 call _cond_test(61109 call == b 0))
    {
      { scopeless
        (61106 call compilerError "Attempt to divide by zero")
      }
    }
    (61118 return(61119 '/' a b))
  }
  function /[61124](param arg a[61129] :
  (61127 call real[13] 32), param arg b[61135] :
  (61133 call real[13] 32)) param : _unknown[42] "inline" "operator"
  {
    (61139 return(61140 '/' a b))
  }
  function /[61145](param arg a[61150] :
  (61148 call real[13] 64), param arg b[61156] :
  (61154 call real[13] 64)) param : _unknown[42] "inline" "operator"
  {
    (61160 return(61161 '/' a b))
  }
  function /[61166](param arg a[61171] :
  (61169 call imag 32), param arg b[61177] :
  (61175 call imag 32)) param : _unknown[42] "inline" "operator"
  {
    (61181 return(61182 call :(61184 '/' a b)(61188 call real[13] 32)))
  }
  function /[61192](param arg a[61197] :
  (61195 call imag 64), param arg b[61203] :
  (61201 call imag 64)) param : _unknown[42] "inline" "operator"
  {
    (61207 return(61208 call :(61210 '/' a b)(61214 call real[13] 64)))
  }
  function /[61218](param arg a[61223] :
  (61221 call real[13] 32), param arg b[61229] :
  (61227 call imag 32)) param : _unknown[42] "inline" "operator"
  {
    (61233 return(61234 call :(61236 '/'(61237 call - a)(61240 call : b(61244 call real[13] 32)))(61247 call imag 32)))
  }
  function /[61251](param arg a[61256] :
  (61254 call real[13] 64), param arg b[61262] :
  (61260 call imag 64)) param : _unknown[42] "inline" "operator"
  {
    (61266 return(61267 call :(61269 '/'(61270 call - a)(61273 call : b(61277 call real[13] 64)))(61280 call imag 64)))
  }
  function /[61284](param arg a[61289] :
  (61287 call imag 32), param arg b[61295] :
  (61293 call real[13] 32)) param : _unknown[42] "inline" "operator"
  {
    (61299 return(61300 call :(61302 '/'(61303 call : a(61307 call real[13] 32)) b)(61311 call imag 32)))
  }
  function /[61315](param arg a[61320] :
  (61318 call imag 64), param arg b[61326] :
  (61324 call real[13] 64)) param : _unknown[42] "inline" "operator"
  {
    (61330 return(61331 call :(61333 '/'(61334 call : a(61338 call real[13] 64)) b)(61342 call imag 64)))
  }
  function %[61346](arg a[61351] :
  (61349 call int[10] 8), arg b[61357] :
  (61355 call int[10] 8)) : _unknown[42] "inline" "operator"
  {
    if(61377 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(61371 call _cond_test(61367 call == b 0))
        {
          { scopeless
            (61362 call halt "Attempt to compute a modulus by zero")
          }
        }
      }
    }
    (61382 return(61383 '%' a b))
  }
  function %[61388](arg a[61393] :
  (61391 call int[10] 16), arg b[61399] :
  (61397 call int[10] 16)) : _unknown[42] "inline" "operator"
  {
    if(61417 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(61411 call _cond_test(61407 call == b 0))
        {
          { scopeless
            (61404 call halt "Attempt to compute a modulus by zero")
          }
        }
      }
    }
    (61422 return(61423 '%' a b))
  }
  function %[61428](arg a[61433] :
  (61431 call int[10] 32), arg b[61439] :
  (61437 call int[10] 32)) : _unknown[42] "inline" "operator"
  {
    if(61457 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(61451 call _cond_test(61447 call == b 0))
        {
          { scopeless
            (61444 call halt "Attempt to compute a modulus by zero")
          }
        }
      }
    }
    (61462 return(61463 '%' a b))
  }
  function %[61468](arg a[61473] :
  (61471 call int[10] 64), arg b[61479] :
  (61477 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    if(61497 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(61491 call _cond_test(61487 call == b 0))
        {
          { scopeless
            (61484 call halt "Attempt to compute a modulus by zero")
          }
        }
      }
    }
    (61502 return(61503 '%' a b))
  }
  function %[61508](arg a[61513] :
  (61511 call uint[86] 8), arg b[61519] :
  (61517 call uint[86] 8)) : _unknown[42] "inline" "operator"
  {
    if(61537 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(61531 call _cond_test(61527 call == b 0))
        {
          { scopeless
            (61524 call halt "Attempt to compute a modulus by zero")
          }
        }
      }
    }
    (61542 return(61543 '%' a b))
  }
  function %[61548](arg a[61553] :
  (61551 call uint[86] 16), arg b[61559] :
  (61557 call uint[86] 16)) : _unknown[42] "inline" "operator"
  {
    if(61577 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(61571 call _cond_test(61567 call == b 0))
        {
          { scopeless
            (61564 call halt "Attempt to compute a modulus by zero")
          }
        }
      }
    }
    (61582 return(61583 '%' a b))
  }
  function %[61588](arg a[61593] :
  (61591 call uint[86] 32), arg b[61599] :
  (61597 call uint[86] 32)) : _unknown[42] "inline" "operator"
  {
    if(61617 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(61611 call _cond_test(61607 call == b 0))
        {
          { scopeless
            (61604 call halt "Attempt to compute a modulus by zero")
          }
        }
      }
    }
    (61622 return(61623 '%' a b))
  }
  function %[61628](arg a[61633] :
  (61631 call uint[86] 64), arg b[61639] :
  (61637 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    if(61657 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(61651 call _cond_test(61647 call == b 0))
        {
          { scopeless
            (61644 call halt "Attempt to compute a modulus by zero")
          }
        }
      }
    }
    (61662 return(61663 '%' a b))
  }
  function %[61668](param arg a[61673] :
  (61671 call int[10] 8), param arg b[61679] :
  (61677 call int[10] 8)) param : _unknown[42] "inline" "operator"
  {
    if(61691 call _cond_test(61687 call == b 0))
    {
      { scopeless
        (61684 call compilerError "Attempt to compute a modulus by zero")
      }
    }
    (61696 return(61697 '%' a b))
  }
  function %[61702](param arg a[61707] :
  (61705 call int[10] 16), param arg b[61713] :
  (61711 call int[10] 16)) param : _unknown[42] "inline" "operator"
  {
    if(61725 call _cond_test(61721 call == b 0))
    {
      { scopeless
        (61718 call compilerError "Attempt to compute a modulus by zero")
      }
    }
    (61730 return(61731 '%' a b))
  }
  function %[61736](param arg a[61741] :
  (61739 call int[10] 32), param arg b[61747] :
  (61745 call int[10] 32)) param : _unknown[42] "inline" "operator"
  {
    if(61759 call _cond_test(61755 call == b 0))
    {
      { scopeless
        (61752 call compilerError "Attempt to compute a modulus by zero")
      }
    }
    (61764 return(61765 '%' a b))
  }
  function %[61770](param arg a[61775] :
  (61773 call int[10] 64), param arg b[61781] :
  (61779 call int[10] 64)) param : _unknown[42] "inline" "operator"
  {
    if(61793 call _cond_test(61789 call == b 0))
    {
      { scopeless
        (61786 call compilerError "Attempt to compute a modulus by zero")
      }
    }
    (61798 return(61799 '%' a b))
  }
  function %[61804](param arg a[61809] :
  (61807 call uint[86] 8), param arg b[61815] :
  (61813 call uint[86] 8)) param : _unknown[42] "inline" "operator"
  {
    if(61827 call _cond_test(61823 call == b 0))
    {
      { scopeless
        (61820 call compilerError "Attempt to compute a modulus by zero")
      }
    }
    (61832 return(61833 '%' a b))
  }
  function %[61838](param arg a[61843] :
  (61841 call uint[86] 16), param arg b[61849] :
  (61847 call uint[86] 16)) param : _unknown[42] "inline" "operator"
  {
    if(61861 call _cond_test(61857 call == b 0))
    {
      { scopeless
        (61854 call compilerError "Attempt to compute a modulus by zero")
      }
    }
    (61866 return(61867 '%' a b))
  }
  function %[61872](param arg a[61877] :
  (61875 call uint[86] 32), param arg b[61883] :
  (61881 call uint[86] 32)) param : _unknown[42] "inline" "operator"
  {
    if(61895 call _cond_test(61891 call == b 0))
    {
      { scopeless
        (61888 call compilerError "Attempt to compute a modulus by zero")
      }
    }
    (61900 return(61901 '%' a b))
  }
  function %[61906](param arg a[61911] :
  (61909 call uint[86] 64), param arg b[61917] :
  (61915 call uint[86] 64)) param : _unknown[42] "inline" "operator"
  {
    if(61929 call _cond_test(61925 call == b 0))
    {
      { scopeless
        (61922 call compilerError "Attempt to compute a modulus by zero")
      }
    }
    (61934 return(61935 '%' a b))
  }
  function _intExpHelp[61940](arg a[61943] :
  integral, arg b[61946]:_any[141](?)) : _unknown[42] "inline"
  {
    if(62030 call _cond_test(62020 call &&(62023 call isIntType(62025 'typeof' b))(62026 call < b 0)))
    {
      { scopeless
        if(62014 call _cond_test(62010 call == a 0))
        {
          { scopeless
            (61956 call halt "cannot compute " a " ** " b)
          }
        }
        {
          { scopeless
            if(62004 call _cond_test(62000 call == a 1))
            {
              { scopeless
                (61966 return 1)
              }
            }
            {
              { scopeless
                if(61994 call _cond_test(61988 call == a(61991 call - 1)))
                {
                  { scopeless
                    (61969 return(61981 IfExpr (61970 call ==(61972 call % b 2) 0) then
                    { scopeless
                      1
                    } else
                    { scopeless
                      (61978 call - 1)
                    } ))
                  }
                }
                {
                  { scopeless
                    (61985 return 0)
                  }
                }
              }
            }
          }
        }
      }
    }
    { scopeless
      { scopeless
        unknown i[62047] b
      }
      { scopeless
        unknown y[62041] 1(62043 'typeof' a)
      }
      { scopeless
        unknown z[62037] a
      }
      (62050 'end of statement')
    }
    {
      unknown tmp[62081] "temp"
      (62105 'move' tmp[62081](62100 call _cond_test(62102 call != i 0)))
      WhileDo[62086]
      {
        {
          if(62068 call _cond_test(62061 call ==(62063 call % i 2) 1))
          {
            { scopeless
              (62056 call *= y z)
            }
          }
          (62073 call *= z z)
          (62077 call /= i 2)
        }
        label _continueLabel[62084]
        (62095 'move' tmp[62081](62090 call _cond_test(62092 call != i 0)))
        tmp[62081]
      }
      label _breakLabel[62085]
    }
    (62108 return y)
  }
  where {
    (61948 call ==(61951 'typeof' a)(61953 'typeof' b))
  }
  function **[62113](arg a[62118] :
  (62116 call int[10] 8), arg b[62124] :
  (62122 call int[10] 8)) : _unknown[42] "inline" "operator"
  {
    (62128 return(62130 call _intExpHelp a b))
  }
  function **[62135](arg a[62140] :
  (62138 call int[10] 16), arg b[62146] :
  (62144 call int[10] 16)) : _unknown[42] "inline" "operator"
  {
    (62150 return(62152 call _intExpHelp a b))
  }
  function **[62157](arg a[62162] :
  (62160 call int[10] 32), arg b[62168] :
  (62166 call int[10] 32)) : _unknown[42] "inline" "operator"
  {
    (62172 return(62174 call _intExpHelp a b))
  }
  function **[62179](arg a[62184] :
  (62182 call int[10] 64), arg b[62190] :
  (62188 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (62194 return(62196 call _intExpHelp a b))
  }
  function **[62201](arg a[62206] :
  (62204 call uint[86] 8), arg b[62212] :
  (62210 call uint[86] 8)) : _unknown[42] "inline" "operator"
  {
    (62216 return(62218 call _intExpHelp a b))
  }
  function **[62223](arg a[62228] :
  (62226 call uint[86] 16), arg b[62234] :
  (62232 call uint[86] 16)) : _unknown[42] "inline" "operator"
  {
    (62238 return(62240 call _intExpHelp a b))
  }
  function **[62245](arg a[62250] :
  (62248 call uint[86] 32), arg b[62256] :
  (62254 call uint[86] 32)) : _unknown[42] "inline" "operator"
  {
    (62260 return(62262 call _intExpHelp a b))
  }
  function **[62267](arg a[62272] :
  (62270 call uint[86] 64), arg b[62278] :
  (62276 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    (62282 return(62284 call _intExpHelp a b))
  }
  function **[62289](arg a[62294] :
  (62292 call real[13] 32), arg b[62300] :
  (62298 call real[13] 32)) : _unknown[42] "inline" "operator"
  {
    (62304 return(62305 '**' a b))
  }
  function **[62310](arg a[62315] :
  (62313 call real[13] 64), arg b[62321] :
  (62319 call real[13] 64)) : _unknown[42] "inline" "operator"
  {
    (62325 return(62326 '**' a b))
  }
  function **[62331](arg a[62336] :
  (62334 call complex[111] 64), arg b[62342] :
  (62340 call complex[111] 64)) : _unknown[42] "inline" "operator"
  {
    function cpowf[62346](arg x[62351] :
    (62349 call complex[111] 64), arg y[62357] :
    (62355 call complex[111] 64)) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      (62361 call complex[111] 64)
    }
    (62366 return(62368 call cpowf a b))
  }
  function **[62373](arg a[62378] :
  (62376 call complex[111] 128), arg b[62384] :
  (62382 call complex[111] 128)) : _unknown[42] "inline" "operator"
  {
    function cpow[62388](arg x[62393] :
    (62391 call complex[111] 128), arg y[62399] :
    (62397 call complex[111] 128)) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      (62403 call complex[111] 128)
    }
    (62408 return(62410 call cpow a b))
  }
  function **[62415](param arg a[62420] :
  (62418 call int[10] 8), param arg b[62426] :
  (62424 call int[10] 8)) param : _unknown[42] "operator"
  {
    if(62446 call _cond_test(62436 call &&(62438 call == a 0)(62442 call < b 0)))
    {
      { scopeless
        (62431 call compilerError "0 cannot be raised to a negative power")
      }
    }
    (62451 return(62452 '**' a b))
  }
  function **[62457](param arg a[62462] :
  (62460 call int[10] 16), param arg b[62468] :
  (62466 call int[10] 16)) param : _unknown[42] "operator"
  {
    if(62486 call _cond_test(62476 call &&(62478 call == a 0)(62482 call < b 0)))
    {
      { scopeless
        (62473 call compilerError "0 cannot be raised to a negative power")
      }
    }
    (62491 return(62492 '**' a b))
  }
  function **[62497](param arg a[62502] :
  (62500 call int[10] 32), param arg b[62508] :
  (62506 call int[10] 32)) param : _unknown[42] "operator"
  {
    if(62526 call _cond_test(62516 call &&(62518 call == a 0)(62522 call < b 0)))
    {
      { scopeless
        (62513 call compilerError "0 cannot be raised to a negative power")
      }
    }
    (62531 return(62532 '**' a b))
  }
  function **[62537](param arg a[62542] :
  (62540 call int[10] 64), param arg b[62548] :
  (62546 call int[10] 64)) param : _unknown[42] "operator"
  {
    if(62566 call _cond_test(62556 call &&(62558 call == a 0)(62562 call < b 0)))
    {
      { scopeless
        (62553 call compilerError "0 cannot be raised to a negative power")
      }
    }
    (62571 return(62572 '**' a b))
  }
  function **[62577](param arg a[62582] :
  (62580 call uint[86] 8), param arg b[62588] :
  (62586 call uint[86] 8)) param : _unknown[42] "operator"
  {
    (62592 return(62593 '**' a b))
  }
  function **[62598](param arg a[62603] :
  (62601 call uint[86] 16), param arg b[62609] :
  (62607 call uint[86] 16)) param : _unknown[42] "operator"
  {
    (62613 return(62614 '**' a b))
  }
  function **[62619](param arg a[62624] :
  (62622 call uint[86] 32), param arg b[62630] :
  (62628 call uint[86] 32)) param : _unknown[42] "operator"
  {
    (62634 return(62635 '**' a b))
  }
  function **[62640](param arg a[62645] :
  (62643 call uint[86] 64), param arg b[62651] :
  (62649 call uint[86] 64)) param : _unknown[42] "operator"
  {
    (62655 return(62656 '**' a b))
  }
  function _expHelp[62661](arg a[62663]:_any[141](?), param arg b[62666] :
  integral) : _unknown[42] "inline"
  {
    if(62840 call _cond_test(62836 call == b 0))
    {
      (62671 return(62672 call : 1(62676 'typeof' a)))
    }
    {
      { scopeless
        if(62831 call _cond_test(62827 call == b 1))
        {
          (62678 return a)
        }
        {
          { scopeless
            if(62822 call _cond_test(62818 call == b 2))
            {
              (62681 return(62682 call * a a))
            }
            {
              { scopeless
                if(62813 call _cond_test(62809 call == b 3))
                {
                  (62687 return(62688 call *(62690 call * a a) a))
                }
                {
                  { scopeless
                    if(62804 call _cond_test(62800 call == b 4))
                    {
                      { scopeless
                        const t[62697] "const"(62698 call * a a)
                        (62703 'end of statement')
                      }
                      (62704 return(62705 call * t t))
                    }
                    {
                      { scopeless
                        if(62795 call _cond_test(62791 call == b 5))
                        {
                          { scopeless
                            const t[62711] "const"(62712 call * a a)
                            (62717 'end of statement')
                          }
                          (62718 return(62719 call *(62721 call * t t) a))
                        }
                        {
                          { scopeless
                            if(62786 call _cond_test(62780 call == b 6))
                            {
                              { scopeless
                                const t[62728] "const"(62729 call * a a)
                                (62734 'end of statement')
                              }
                              (62735 return(62736 call *(62738 call * t t) t))
                            }
                            {
                              { scopeless
                                if(62775 call _cond_test(62771 call == b 8))
                                {
                                  { scopeless
                                    { scopeless
                                      const t[62753] "const"(62754 call * a a)
                                    }
                                    { scopeless
                                      const u[62746] "const"(62747 call * t t)
                                    }
                                    (62759 'end of statement')
                                  }
                                  (62760 return(62761 call * u u))
                                }
                                {
                                  { scopeless
                                    (62766 call compilerError "unexpected case in exponentiation optimization")
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  function _expBaseHelp[62847](param arg a[62850] :
  int[10], arg b[62853]:_any[141](?)) : _unknown[42] "inline"
  {
    if(62870 call _cond_test(62866 call == b 0))
    {
      { scopeless
        (62859 return(62860 call : 1(62864 'typeof' a)))
      }
    }
    if(62895 call _cond_test(62891 call < b 0))
    {
      { scopeless
        if(62885 call _cond_test(62881 call == a 1))
        {
          { scopeless
            (62875 return 1)
          }
        }
        {
          { scopeless
            (62878 return 0)
          }
        }
      }
    }
    { scopeless
      unknown c[62901] 0
      (62904 'end of statement')
    }
    { scopeless
      unknown x[62906] a int[10]
      (62910 'end of statement')
    }
    {
      unknown tmp[62927] "temp"
      (62951 'move' tmp[62927](62946 call _cond_test(62948 call > x 1)))
      WhileDo[62932]
      {
        {
          (62916 call += c 1)
          (62920 call = x(62923 call >> x 1))
        }
        label _continueLabel[62930]
        (62941 'move' tmp[62927](62936 call _cond_test(62938 call > x 1)))
        tmp[62927]
      }
      label _breakLabel[62931]
    }
    { scopeless
      unknown exp[62955](62956 call * c(62959 call - b 1))
      (62964 'end of statement')
    }
    (62965 return(62966 call << a exp))
  }
  where {
    (62856 call _basePowerTwo a)
  }
  function _canOptimizeExp[62973](param arg b[62976] :
  integral) param : _unknown[42]
  {
    (62980 return(62981 call &&(62983 call &&(62985 call >= b 0)(62989 call <= b 8))(62993 call != b 7)))
  }
  function _basePowerTwo[63001](param arg a[63004] :
  integral) param : _unknown[42]
  {
    (63008 return(63009 call &&(63011 call > a 0)(63015 call ==(63017 call & a(63020 call +(63022 call ~ a) 1)) a)))
  }
  function **[63029](arg a[63035] :
  (63032 call int[10] unknown w[63033]), param arg b[63039] :
  integral) : _unknown[42] "inline" "operator"
  {
    (63046 return(63048 call _expHelp a b))
  }
  where {
    (63043 call _canOptimizeExp b)
  }
  function **[63054](arg a[63060] :
  (63057 call uint[86] unknown w[63058]), param arg b[63064] :
  integral) : _unknown[42] "inline" "operator"
  {
    (63071 return(63073 call _expHelp a b))
  }
  where {
    (63068 call _canOptimizeExp b)
  }
  function **[63079](arg a[63085] :
  (63082 call real[13] unknown w[63083]), param arg b[63089] :
  integral) : _unknown[42] "inline" "operator"
  {
    (63096 return(63098 call _expHelp a b))
  }
  where {
    (63093 call _canOptimizeExp b)
  }
  function **[63104](param arg a[63107] :
  integral, arg b[63111] :
  int[10]) : _unknown[42] "inline" "operator"
  {
    (63118 return(63120 call _expBaseHelp a b))
  }
  where {
    (63115 call _basePowerTwo a)
  }
  function ![63126](arg a[63129] :
  bool) : _unknown[42] "inline" "operator"
  {
    (63133 return(63134 'u!' a))
  }
  function ![63138](arg a[63144] :
  (63141 call int[10] unknown w[63142])) : _unknown[42] "inline" "operator"
  {
    (63148 return(63149 call == a 0))
  }
  function ![63155](arg a[63161] :
  (63158 call uint[86] unknown w[63159])) : _unknown[42] "inline" "operator"
  {
    (63165 return(63166 call == a 0))
  }
  function isTrue[63172](arg a[63175] :
  bool) : _unknown[42] "inline"
  {
    (63179 return a)
  }
  function isTrue[63183](param arg a[63186] :
  bool) param : _unknown[42] "inline"
  {
    (63190 return a)
  }
  function isTrue[63194](arg a[63197] :
  integral) : _unknown[42]
  {
    (63202 call compilerError "short-circuiting logical operators not supported on integers")
  }
  function ![63208](param arg a[63211] :
  bool) param : _unknown[42] "inline" "operator"
  {
    (63215 return(63216 'u!' a))
  }
  function ![63220](param arg a[63226] :
  (63223 call int[10] unknown w[63224])) param : _unknown[42] "inline" "operator"
  {
    (63230 return(63231 call == a 0))
  }
  function ![63237](param arg a[63243] :
  (63240 call uint[86] unknown w[63241])) param : _unknown[42] "inline" "operator"
  {
    (63247 return(63248 call == a 0))
  }
  function ~[63254](arg a[63260] :
  (63257 call int[10] unknown w[63258])) : _unknown[42] "inline" "operator"
  {
    (63264 return(63265 'u~' a))
  }
  function ~[63269](arg a[63275] :
  (63272 call uint[86] unknown w[63273])) : _unknown[42] "inline" "operator"
  {
    (63279 return(63280 'u~' a))
  }
  function ~[63284](arg a[63287] :
  bool) : _unknown[42] "inline" "operator"
  {
    (63292 call compilerError "~ is not supported on operands of boolean type")
  }
  function &[63298](arg a[63301] :
  bool, arg b[63305] :
  bool) : _unknown[42] "inline" "operator"
  {
    (63309 return(63310 '&' a b))
  }
  function &[63315](arg a[63320] :
  (63318 call int[10] 8), arg b[63326] :
  (63324 call int[10] 8)) : _unknown[42] "inline" "operator"
  {
    (63330 return(63331 '&' a b))
  }
  function &[63336](arg a[63341] :
  (63339 call int[10] 16), arg b[63347] :
  (63345 call int[10] 16)) : _unknown[42] "inline" "operator"
  {
    (63351 return(63352 '&' a b))
  }
  function &[63357](arg a[63362] :
  (63360 call int[10] 32), arg b[63368] :
  (63366 call int[10] 32)) : _unknown[42] "inline" "operator"
  {
    (63372 return(63373 '&' a b))
  }
  function &[63378](arg a[63383] :
  (63381 call int[10] 64), arg b[63389] :
  (63387 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (63393 return(63394 '&' a b))
  }
  function &[63399](arg a[63404] :
  (63402 call uint[86] 8), arg b[63410] :
  (63408 call uint[86] 8)) : _unknown[42] "inline" "operator"
  {
    (63414 return(63415 '&' a b))
  }
  function &[63420](arg a[63425] :
  (63423 call uint[86] 16), arg b[63431] :
  (63429 call uint[86] 16)) : _unknown[42] "inline" "operator"
  {
    (63435 return(63436 '&' a b))
  }
  function &[63441](arg a[63446] :
  (63444 call uint[86] 32), arg b[63452] :
  (63450 call uint[86] 32)) : _unknown[42] "inline" "operator"
  {
    (63456 return(63457 '&' a b))
  }
  function &[63462](arg a[63467] :
  (63465 call uint[86] 64), arg b[63473] :
  (63471 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    (63477 return(63478 '&' a b))
  }
  function &[63483](arg a[63488] :
  (63486 call uint[86] 8), arg b[63494] :
  (63492 call int[10] 8)) : _unknown[42] "inline" "operator"
  {
    (63498 return(63499 '&' a(63501 call : b(63505 call uint[86] 8))))
  }
  function &[63509](arg a[63514] :
  (63512 call uint[86] 16), arg b[63520] :
  (63518 call int[10] 16)) : _unknown[42] "inline" "operator"
  {
    (63524 return(63525 '&' a(63527 call : b(63531 call uint[86] 16))))
  }
  function &[63535](arg a[63540] :
  (63538 call uint[86] 32), arg b[63546] :
  (63544 call int[10] 32)) : _unknown[42] "inline" "operator"
  {
    (63550 return(63551 '&' a(63553 call : b(63557 call uint[86] 32))))
  }
  function &[63561](arg a[63566] :
  (63564 call uint[86] 64), arg b[63572] :
  (63570 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (63576 return(63577 '&' a(63579 call : b(63583 call uint[86] 64))))
  }
  function &[63587](arg a[63592] :
  (63590 call int[10] 8), arg b[63598] :
  (63596 call uint[86] 8)) : _unknown[42] "inline" "operator"
  {
    (63602 return(63603 '&'(63604 call : a(63608 call uint[86] 8)) b))
  }
  function &[63613](arg a[63618] :
  (63616 call int[10] 16), arg b[63624] :
  (63622 call uint[86] 16)) : _unknown[42] "inline" "operator"
  {
    (63628 return(63629 '&'(63630 call : a(63634 call uint[86] 16)) b))
  }
  function &[63639](arg a[63644] :
  (63642 call int[10] 32), arg b[63650] :
  (63648 call uint[86] 32)) : _unknown[42] "inline" "operator"
  {
    (63654 return(63655 '&'(63656 call : a(63660 call uint[86] 32)) b))
  }
  function &[63665](arg a[63670] :
  (63668 call int[10] 64), arg b[63676] :
  (63674 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    (63680 return(63681 '&'(63682 call : a(63686 call uint[86] 64)) b))
  }
  function |[63691](arg a[63694] :
  bool, arg b[63698] :
  bool) : _unknown[42] "inline" "operator"
  {
    (63702 return(63703 '|' a b))
  }
  function |[63708](arg a[63713] :
  (63711 call int[10] 8), arg b[63719] :
  (63717 call int[10] 8)) : _unknown[42] "inline" "operator"
  {
    (63723 return(63724 '|' a b))
  }
  function |[63729](arg a[63734] :
  (63732 call int[10] 16), arg b[63740] :
  (63738 call int[10] 16)) : _unknown[42] "inline" "operator"
  {
    (63744 return(63745 '|' a b))
  }
  function |[63750](arg a[63755] :
  (63753 call int[10] 32), arg b[63761] :
  (63759 call int[10] 32)) : _unknown[42] "inline" "operator"
  {
    (63765 return(63766 '|' a b))
  }
  function |[63771](arg a[63776] :
  (63774 call int[10] 64), arg b[63782] :
  (63780 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (63786 return(63787 '|' a b))
  }
  function |[63792](arg a[63797] :
  (63795 call uint[86] 8), arg b[63803] :
  (63801 call uint[86] 8)) : _unknown[42] "inline" "operator"
  {
    (63807 return(63808 '|' a b))
  }
  function |[63813](arg a[63818] :
  (63816 call uint[86] 16), arg b[63824] :
  (63822 call uint[86] 16)) : _unknown[42] "inline" "operator"
  {
    (63828 return(63829 '|' a b))
  }
  function |[63834](arg a[63839] :
  (63837 call uint[86] 32), arg b[63845] :
  (63843 call uint[86] 32)) : _unknown[42] "inline" "operator"
  {
    (63849 return(63850 '|' a b))
  }
  function |[63855](arg a[63860] :
  (63858 call uint[86] 64), arg b[63866] :
  (63864 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    (63870 return(63871 '|' a b))
  }
  function |[63876](arg a[63881] :
  (63879 call uint[86] 8), arg b[63887] :
  (63885 call int[10] 8)) : _unknown[42] "inline" "operator"
  {
    (63891 return(63892 '|' a(63894 call : b(63898 call uint[86] 8))))
  }
  function |[63902](arg a[63907] :
  (63905 call uint[86] 16), arg b[63913] :
  (63911 call int[10] 16)) : _unknown[42] "inline" "operator"
  {
    (63917 return(63918 '|' a(63920 call : b(63924 call uint[86] 16))))
  }
  function |[63928](arg a[63933] :
  (63931 call uint[86] 32), arg b[63939] :
  (63937 call int[10] 32)) : _unknown[42] "inline" "operator"
  {
    (63943 return(63944 '|' a(63946 call : b(63950 call uint[86] 32))))
  }
  function |[63954](arg a[63959] :
  (63957 call uint[86] 64), arg b[63965] :
  (63963 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (63969 return(63970 '|' a(63972 call : b(63976 call uint[86] 64))))
  }
  function |[63980](arg a[63985] :
  (63983 call int[10] 8), arg b[63991] :
  (63989 call uint[86] 8)) : _unknown[42] "inline" "operator"
  {
    (63995 return(63996 '|'(63997 call : a(64001 call uint[86] 8)) b))
  }
  function |[64006](arg a[64011] :
  (64009 call int[10] 16), arg b[64017] :
  (64015 call uint[86] 16)) : _unknown[42] "inline" "operator"
  {
    (64021 return(64022 '|'(64023 call : a(64027 call uint[86] 16)) b))
  }
  function |[64032](arg a[64037] :
  (64035 call int[10] 32), arg b[64043] :
  (64041 call uint[86] 32)) : _unknown[42] "inline" "operator"
  {
    (64047 return(64048 '|'(64049 call : a(64053 call uint[86] 32)) b))
  }
  function |[64058](arg a[64063] :
  (64061 call int[10] 64), arg b[64069] :
  (64067 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    (64073 return(64074 '|'(64075 call : a(64079 call uint[86] 64)) b))
  }
  function ^[64084](arg a[64087] :
  bool, arg b[64091] :
  bool) : _unknown[42] "inline" "operator"
  {
    (64095 return(64096 '^' a b))
  }
  function ^[64101](arg a[64106] :
  (64104 call int[10] 8), arg b[64112] :
  (64110 call int[10] 8)) : _unknown[42] "inline" "operator"
  {
    (64116 return(64117 '^' a b))
  }
  function ^[64122](arg a[64127] :
  (64125 call int[10] 16), arg b[64133] :
  (64131 call int[10] 16)) : _unknown[42] "inline" "operator"
  {
    (64137 return(64138 '^' a b))
  }
  function ^[64143](arg a[64148] :
  (64146 call int[10] 32), arg b[64154] :
  (64152 call int[10] 32)) : _unknown[42] "inline" "operator"
  {
    (64158 return(64159 '^' a b))
  }
  function ^[64164](arg a[64169] :
  (64167 call int[10] 64), arg b[64175] :
  (64173 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (64179 return(64180 '^' a b))
  }
  function ^[64185](arg a[64190] :
  (64188 call uint[86] 8), arg b[64196] :
  (64194 call uint[86] 8)) : _unknown[42] "inline" "operator"
  {
    (64200 return(64201 '^' a b))
  }
  function ^[64206](arg a[64211] :
  (64209 call uint[86] 16), arg b[64217] :
  (64215 call uint[86] 16)) : _unknown[42] "inline" "operator"
  {
    (64221 return(64222 '^' a b))
  }
  function ^[64227](arg a[64232] :
  (64230 call uint[86] 32), arg b[64238] :
  (64236 call uint[86] 32)) : _unknown[42] "inline" "operator"
  {
    (64242 return(64243 '^' a b))
  }
  function ^[64248](arg a[64253] :
  (64251 call uint[86] 64), arg b[64259] :
  (64257 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    (64263 return(64264 '^' a b))
  }
  function ^[64269](arg a[64274] :
  (64272 call uint[86] 8), arg b[64280] :
  (64278 call int[10] 8)) : _unknown[42] "inline" "operator"
  {
    (64284 return(64285 '^' a(64287 call : b(64291 call uint[86] 8))))
  }
  function ^[64295](arg a[64300] :
  (64298 call uint[86] 16), arg b[64306] :
  (64304 call int[10] 16)) : _unknown[42] "inline" "operator"
  {
    (64310 return(64311 '^' a(64313 call : b(64317 call uint[86] 16))))
  }
  function ^[64321](arg a[64326] :
  (64324 call uint[86] 32), arg b[64332] :
  (64330 call int[10] 32)) : _unknown[42] "inline" "operator"
  {
    (64336 return(64337 '^' a(64339 call : b(64343 call uint[86] 32))))
  }
  function ^[64347](arg a[64352] :
  (64350 call uint[86] 64), arg b[64358] :
  (64356 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (64362 return(64363 '^' a(64365 call : b(64369 call uint[86] 64))))
  }
  function ^[64373](arg a[64378] :
  (64376 call int[10] 8), arg b[64384] :
  (64382 call uint[86] 8)) : _unknown[42] "inline" "operator"
  {
    (64388 return(64389 '^'(64390 call : a(64394 call uint[86] 8)) b))
  }
  function ^[64399](arg a[64404] :
  (64402 call int[10] 16), arg b[64410] :
  (64408 call uint[86] 16)) : _unknown[42] "inline" "operator"
  {
    (64414 return(64415 '^'(64416 call : a(64420 call uint[86] 16)) b))
  }
  function ^[64425](arg a[64430] :
  (64428 call int[10] 32), arg b[64436] :
  (64434 call uint[86] 32)) : _unknown[42] "inline" "operator"
  {
    (64440 return(64441 '^'(64442 call : a(64446 call uint[86] 32)) b))
  }
  function ^[64451](arg a[64456] :
  (64454 call int[10] 64), arg b[64462] :
  (64460 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    (64466 return(64467 '^'(64468 call : a(64472 call uint[86] 64)) b))
  }
  function ~[64477](param arg a[64480] :
  bool) : _unknown[42] "inline" "operator"
  {
    (64485 call compilerError "~ is not supported on operands of boolean type")
  }
  function ~[64489](param arg a[64495] :
  (64492 call int[10] unknown w[64493])) param : _unknown[42] "inline" "operator"
  {
    (64499 return(64500 'u~' a))
  }
  function ~[64504](param arg a[64510] :
  (64507 call uint[86] unknown w[64508])) param : _unknown[42] "inline" "operator"
  {
    (64514 return(64515 'u~' a))
  }
  function &[64519](param arg a[64522] :
  bool, param arg b[64526] :
  bool) param : _unknown[42] "inline" "operator"
  {
    (64530 return(64531 '&' a b))
  }
  function &[64536](param arg a[64541] :
  (64539 call int[10] 8), param arg b[64547] :
  (64545 call int[10] 8)) param : _unknown[42] "inline" "operator"
  {
    (64551 return(64552 '&' a b))
  }
  function &[64557](param arg a[64562] :
  (64560 call int[10] 16), param arg b[64568] :
  (64566 call int[10] 16)) param : _unknown[42] "inline" "operator"
  {
    (64572 return(64573 '&' a b))
  }
  function &[64578](param arg a[64583] :
  (64581 call int[10] 32), param arg b[64589] :
  (64587 call int[10] 32)) param : _unknown[42] "inline" "operator"
  {
    (64593 return(64594 '&' a b))
  }
  function &[64599](param arg a[64604] :
  (64602 call int[10] 64), param arg b[64610] :
  (64608 call int[10] 64)) param : _unknown[42] "inline" "operator"
  {
    (64614 return(64615 '&' a b))
  }
  function &[64620](param arg a[64625] :
  (64623 call uint[86] 8), param arg b[64631] :
  (64629 call uint[86] 8)) param : _unknown[42] "inline" "operator"
  {
    (64635 return(64636 '&' a b))
  }
  function &[64641](param arg a[64646] :
  (64644 call uint[86] 16), param arg b[64652] :
  (64650 call uint[86] 16)) param : _unknown[42] "inline" "operator"
  {
    (64656 return(64657 '&' a b))
  }
  function &[64662](param arg a[64667] :
  (64665 call uint[86] 32), param arg b[64673] :
  (64671 call uint[86] 32)) param : _unknown[42] "inline" "operator"
  {
    (64677 return(64678 '&' a b))
  }
  function &[64683](param arg a[64688] :
  (64686 call uint[86] 64), param arg b[64694] :
  (64692 call uint[86] 64)) param : _unknown[42] "inline" "operator"
  {
    (64698 return(64699 '&' a b))
  }
  function &[64704](param arg a[64709] :
  (64707 call uint[86] 8), param arg b[64715] :
  (64713 call int[10] 8)) param : _unknown[42] "inline" "operator"
  {
    (64719 return(64720 '&' a(64722 call : b(64726 call uint[86] 8))))
  }
  function &[64730](param arg a[64735] :
  (64733 call uint[86] 16), param arg b[64741] :
  (64739 call int[10] 16)) param : _unknown[42] "inline" "operator"
  {
    (64745 return(64746 '&' a(64748 call : b(64752 call uint[86] 16))))
  }
  function &[64756](param arg a[64761] :
  (64759 call uint[86] 32), param arg b[64767] :
  (64765 call int[10] 32)) param : _unknown[42] "inline" "operator"
  {
    (64771 return(64772 '&' a(64774 call : b(64778 call uint[86] 32))))
  }
  function &[64782](param arg a[64787] :
  (64785 call uint[86] 64), param arg b[64793] :
  (64791 call int[10] 64)) param : _unknown[42] "inline" "operator"
  {
    (64797 return(64798 '&' a(64800 call : b(64804 call uint[86] 64))))
  }
  function &[64808](param arg a[64813] :
  (64811 call int[10] 8), param arg b[64819] :
  (64817 call uint[86] 8)) param : _unknown[42] "inline" "operator"
  {
    (64823 return(64824 '&'(64825 call : a(64829 call uint[86] 8)) b))
  }
  function &[64834](param arg a[64839] :
  (64837 call int[10] 16), param arg b[64845] :
  (64843 call uint[86] 16)) param : _unknown[42] "inline" "operator"
  {
    (64849 return(64850 '&'(64851 call : a(64855 call uint[86] 16)) b))
  }
  function &[64860](param arg a[64865] :
  (64863 call int[10] 32), param arg b[64871] :
  (64869 call uint[86] 32)) param : _unknown[42] "inline" "operator"
  {
    (64875 return(64876 '&'(64877 call : a(64881 call uint[86] 32)) b))
  }
  function &[64886](param arg a[64891] :
  (64889 call int[10] 64), param arg b[64897] :
  (64895 call uint[86] 64)) param : _unknown[42] "inline" "operator"
  {
    (64901 return(64902 '&'(64903 call : a(64907 call uint[86] 64)) b))
  }
  function |[64912](param arg a[64915] :
  bool, param arg b[64919] :
  bool) param : _unknown[42] "inline" "operator"
  {
    (64923 return(64924 '|' a b))
  }
  function |[64929](param arg a[64934] :
  (64932 call int[10] 8), param arg b[64940] :
  (64938 call int[10] 8)) param : _unknown[42] "inline" "operator"
  {
    (64944 return(64945 '|' a b))
  }
  function |[64950](param arg a[64955] :
  (64953 call int[10] 16), param arg b[64961] :
  (64959 call int[10] 16)) param : _unknown[42] "inline" "operator"
  {
    (64965 return(64966 '|' a b))
  }
  function |[64971](param arg a[64976] :
  (64974 call int[10] 32), param arg b[64982] :
  (64980 call int[10] 32)) param : _unknown[42] "inline" "operator"
  {
    (64986 return(64987 '|' a b))
  }
  function |[64992](param arg a[64997] :
  (64995 call int[10] 64), param arg b[65003] :
  (65001 call int[10] 64)) param : _unknown[42] "inline" "operator"
  {
    (65007 return(65008 '|' a b))
  }
  function |[65013](param arg a[65018] :
  (65016 call uint[86] 8), param arg b[65024] :
  (65022 call uint[86] 8)) param : _unknown[42] "inline" "operator"
  {
    (65028 return(65029 '|' a b))
  }
  function |[65034](param arg a[65039] :
  (65037 call uint[86] 16), param arg b[65045] :
  (65043 call uint[86] 16)) param : _unknown[42] "inline" "operator"
  {
    (65049 return(65050 '|' a b))
  }
  function |[65055](param arg a[65060] :
  (65058 call uint[86] 32), param arg b[65066] :
  (65064 call uint[86] 32)) param : _unknown[42] "inline" "operator"
  {
    (65070 return(65071 '|' a b))
  }
  function |[65076](param arg a[65081] :
  (65079 call uint[86] 64), param arg b[65087] :
  (65085 call uint[86] 64)) param : _unknown[42] "inline" "operator"
  {
    (65091 return(65092 '|' a b))
  }
  function |[65097](param arg a[65102] :
  (65100 call uint[86] 8), param arg b[65108] :
  (65106 call int[10] 8)) param : _unknown[42] "inline" "operator"
  {
    (65112 return(65113 '|' a(65115 call : b(65119 call uint[86] 8))))
  }
  function |[65123](param arg a[65128] :
  (65126 call uint[86] 16), param arg b[65134] :
  (65132 call int[10] 16)) param : _unknown[42] "inline" "operator"
  {
    (65138 return(65139 '|' a(65141 call : b(65145 call uint[86] 16))))
  }
  function |[65149](param arg a[65154] :
  (65152 call uint[86] 32), param arg b[65160] :
  (65158 call int[10] 32)) param : _unknown[42] "inline" "operator"
  {
    (65164 return(65165 '|' a(65167 call : b(65171 call uint[86] 32))))
  }
  function |[65175](param arg a[65180] :
  (65178 call uint[86] 64), param arg b[65186] :
  (65184 call int[10] 64)) param : _unknown[42] "inline" "operator"
  {
    (65190 return(65191 '|' a(65193 call : b(65197 call uint[86] 64))))
  }
  function |[65201](param arg a[65206] :
  (65204 call int[10] 8), param arg b[65212] :
  (65210 call uint[86] 8)) param : _unknown[42] "inline" "operator"
  {
    (65216 return(65217 '|'(65218 call : a(65222 call uint[86] 8)) b))
  }
  function |[65227](param arg a[65232] :
  (65230 call int[10] 16), param arg b[65238] :
  (65236 call uint[86] 16)) param : _unknown[42] "inline" "operator"
  {
    (65242 return(65243 '|'(65244 call : a(65248 call uint[86] 16)) b))
  }
  function |[65253](param arg a[65258] :
  (65256 call int[10] 32), param arg b[65264] :
  (65262 call uint[86] 32)) param : _unknown[42] "inline" "operator"
  {
    (65268 return(65269 '|'(65270 call : a(65274 call uint[86] 32)) b))
  }
  function |[65279](param arg a[65284] :
  (65282 call int[10] 64), param arg b[65290] :
  (65288 call uint[86] 64)) param : _unknown[42] "inline" "operator"
  {
    (65294 return(65295 '|'(65296 call : a(65300 call uint[86] 64)) b))
  }
  function ^[65305](param arg a[65308] :
  bool, param arg b[65312] :
  bool) param : _unknown[42] "inline" "operator"
  {
    (65316 return(65317 '^' a b))
  }
  function ^[65322](param arg a[65327] :
  (65325 call int[10] 8), param arg b[65333] :
  (65331 call int[10] 8)) param : _unknown[42] "inline" "operator"
  {
    (65337 return(65338 '^' a b))
  }
  function ^[65343](param arg a[65348] :
  (65346 call int[10] 16), param arg b[65354] :
  (65352 call int[10] 16)) param : _unknown[42] "inline" "operator"
  {
    (65358 return(65359 '^' a b))
  }
  function ^[65364](param arg a[65369] :
  (65367 call int[10] 32), param arg b[65375] :
  (65373 call int[10] 32)) param : _unknown[42] "inline" "operator"
  {
    (65379 return(65380 '^' a b))
  }
  function ^[65385](param arg a[65390] :
  (65388 call int[10] 64), param arg b[65396] :
  (65394 call int[10] 64)) param : _unknown[42] "inline" "operator"
  {
    (65400 return(65401 '^' a b))
  }
  function ^[65406](param arg a[65411] :
  (65409 call uint[86] 8), param arg b[65417] :
  (65415 call uint[86] 8)) param : _unknown[42] "inline" "operator"
  {
    (65421 return(65422 '^' a b))
  }
  function ^[65427](param arg a[65432] :
  (65430 call uint[86] 16), param arg b[65438] :
  (65436 call uint[86] 16)) param : _unknown[42] "inline" "operator"
  {
    (65442 return(65443 '^' a b))
  }
  function ^[65448](param arg a[65453] :
  (65451 call uint[86] 32), param arg b[65459] :
  (65457 call uint[86] 32)) param : _unknown[42] "inline" "operator"
  {
    (65463 return(65464 '^' a b))
  }
  function ^[65469](param arg a[65474] :
  (65472 call uint[86] 64), param arg b[65480] :
  (65478 call uint[86] 64)) param : _unknown[42] "inline" "operator"
  {
    (65484 return(65485 '^' a b))
  }
  function ^[65490](param arg a[65495] :
  (65493 call uint[86] 8), param arg b[65501] :
  (65499 call int[10] 8)) param : _unknown[42] "inline" "operator"
  {
    (65505 return(65506 '^' a(65508 call : b(65512 call uint[86] 8))))
  }
  function ^[65516](param arg a[65521] :
  (65519 call uint[86] 16), param arg b[65527] :
  (65525 call int[10] 16)) param : _unknown[42] "inline" "operator"
  {
    (65531 return(65532 '^' a(65534 call : b(65538 call uint[86] 16))))
  }
  function ^[65542](param arg a[65547] :
  (65545 call uint[86] 32), param arg b[65553] :
  (65551 call int[10] 32)) param : _unknown[42] "inline" "operator"
  {
    (65557 return(65558 '^' a(65560 call : b(65564 call uint[86] 32))))
  }
  function ^[65568](param arg a[65573] :
  (65571 call uint[86] 64), param arg b[65579] :
  (65577 call int[10] 64)) param : _unknown[42] "inline" "operator"
  {
    (65583 return(65584 '^' a(65586 call : b(65590 call uint[86] 64))))
  }
  function ^[65594](param arg a[65599] :
  (65597 call int[10] 8), param arg b[65605] :
  (65603 call uint[86] 8)) param : _unknown[42] "inline" "operator"
  {
    (65609 return(65610 '^'(65611 call : a(65615 call uint[86] 8)) b))
  }
  function ^[65620](param arg a[65625] :
  (65623 call int[10] 16), param arg b[65631] :
  (65629 call uint[86] 16)) param : _unknown[42] "inline" "operator"
  {
    (65635 return(65636 '^'(65637 call : a(65641 call uint[86] 16)) b))
  }
  function ^[65646](param arg a[65651] :
  (65649 call int[10] 32), param arg b[65657] :
  (65655 call uint[86] 32)) param : _unknown[42] "inline" "operator"
  {
    (65661 return(65662 '^'(65663 call : a(65667 call uint[86] 32)) b))
  }
  function ^[65672](param arg a[65677] :
  (65675 call int[10] 64), param arg b[65683] :
  (65681 call uint[86] 64)) param : _unknown[42] "inline" "operator"
  {
    (65687 return(65688 '^'(65689 call : a(65693 call uint[86] 64)) b))
  }
  function bitshiftChecks[65698](arg a[65700]:_any[141](?), arg b[65703] :
  integral) : _unknown[42] "inline"
  {
    (65708 'use' HaltWrappers)
    if(65820 call _cond_test(65816 call < b 0))
    {
      { scopeless
        unknown msg[65712](65713 call +(65715 call +(65717 call +(65719 call +(65721 call +(65723 call + "Cannot bitshift "(65728 call : a string[244])) " by ")(65735 call : b string[244])) " because ")(65742 call : b string[244])) " is less than 0")
        (65750 'end of statement')
      }
      (65755 call(65752 call . HaltWrappers c"boundsCheckHalt") msg)
    }
    {
      { scopeless
        if(65812 call _cond_test(65805 call >= b(65809 call numBits(65811 'typeof' a))))
        {
          { scopeless
            unknown msg[65759](65760 call +(65762 call +(65764 call +(65766 call +(65768 call +(65770 call +(65772 call + "Cannot bitshift "(65775 call : a string[244])) " by ")(65780 call : b string[244])) " because ")(65785 call : b string[244])) " is >= the bitwidth of ")(65792 call :(65795 'typeof' a) string[244]))
            (65798 'end of statement')
          }
          (65803 call(65800 call . HaltWrappers c"boundsCheckHalt") msg)
        }
      }
    }
  }
  function bitshiftChecks[65827](param arg a[65829]:_any[141](?), param arg b[65832] :
  integral) : _unknown[42] "inline"
  {
    if(65930 call _cond_test(65926 call < b 0))
    {
      { scopeless
        unknown msg[65838] "param"(65839 call +(65841 call +(65843 call +(65845 call +(65847 call +(65849 call + "Cannot bitshift "(65852 call : a string[244])) " by ")(65857 call : b string[244])) " because ")(65862 call : b string[244])) " is less than 0")
        (65868 'end of statement')
      }
      (65870 call compilerError msg)
    }
    {
      { scopeless
        if(65922 call _cond_test(65915 call >= b(65919 call numBits(65921 'typeof' a))))
        {
          { scopeless
            unknown msg[65874] "param"(65875 call +(65877 call +(65879 call +(65881 call +(65883 call +(65885 call +(65887 call + "Cannot bitshift "(65890 call : a string[244])) " by ")(65895 call : b string[244])) " because ")(65900 call : b string[244])) " is >= the bitwidth of ")(65905 call :(65908 'typeof' a) string[244]))
            (65911 'end of statement')
          }
          (65913 call compilerError msg)
        }
      }
    }
  }
  function <<[65937](arg a[65943] :
  (65940 call int[10] unknown w[65941]), arg b[65947] :
  integral) : _unknown[42] "inline" "operator"
  {
    if(65957 call _cond_test boundsChecking)
    {
      { scopeless
        (65952 call bitshiftChecks a b)
      }
    }
    (65962 return(65963 call :(65965 '<<'(65966 call : a(65970 call uint[86] w)) b)(65974 call int[10] w)))
  }
  function <<[65978](arg a[65984] :
  (65981 call uint[86] unknown w[65982]), arg b[65988] :
  integral) : _unknown[42] "inline" "operator"
  {
    if(65998 call _cond_test boundsChecking)
    {
      { scopeless
        (65993 call bitshiftChecks a b)
      }
    }
    (66003 return(66004 '<<' a b))
  }
  function >>[66009](arg a[66015] :
  (66012 call int[10] unknown w[66013]), arg b[66019] :
  integral) : _unknown[42] "inline" "operator"
  {
    if(66029 call _cond_test boundsChecking)
    {
      { scopeless
        (66024 call bitshiftChecks a b)
      }
    }
    (66034 return(66035 '>>' a b))
  }
  function >>[66040](arg a[66046] :
  (66043 call uint[86] unknown w[66044]), arg b[66050] :
  integral) : _unknown[42] "inline" "operator"
  {
    if(66060 call _cond_test boundsChecking)
    {
      { scopeless
        (66055 call bitshiftChecks a b)
      }
    }
    (66065 return(66066 '>>' a b))
  }
  function <<[66071](param arg a[66077] :
  (66074 call int[10] unknown w[66075]), param arg b[66081] :
  integral) param : _unknown[42] "inline" "operator"
  {
    if(66091 call _cond_test boundsChecking)
    {
      { scopeless
        (66086 call bitshiftChecks a b)
      }
    }
    (66096 return(66097 call :(66099 '<<'(66100 call : a(66104 call uint[86] w)) b)(66108 call int[10] w)))
  }
  function <<[66112](param arg a[66118] :
  (66115 call uint[86] unknown w[66116]), param arg b[66122] :
  integral) param : _unknown[42] "inline" "operator"
  {
    if(66132 call _cond_test boundsChecking)
    {
      { scopeless
        (66127 call bitshiftChecks a b)
      }
    }
    (66137 return(66138 '<<' a b))
  }
  function >>[66143](param arg a[66149] :
  (66146 call int[10] unknown w[66147]), param arg b[66153] :
  integral) param : _unknown[42] "inline" "operator"
  {
    if(66163 call _cond_test boundsChecking)
    {
      { scopeless
        (66158 call bitshiftChecks a b)
      }
    }
    (66168 return(66169 '>>' a b))
  }
  function >>[66174](param arg a[66180] :
  (66177 call uint[86] unknown w[66178]), param arg b[66184] :
  integral) param : _unknown[42] "inline" "operator"
  {
    if(66194 call _cond_test boundsChecking)
    {
      { scopeless
        (66189 call bitshiftChecks a b)
      }
    }
    (66199 return(66200 '>>' a b))
  }
  function checkNotNil[66205](arg x[66210] :
  (66207 'to borrowed class from unknown'(66209 'to nilable class from type' class))) : _unknown[42] "always propagate line file info" "inline" "private"
  {
    (66216 'import' HaltWrappers)
    if(66241 call _cond_test(66237 call || chpl_checkNilDereferences enablePostfixBangChecks))
    {
      if(66233 call _cond_test(66229 call == x nil[32]))
      {
        (66225 call(66222 call . HaltWrappers c"nilCheckHalt") "argument to ! is nil")
      }
    }
  }
  function postfix![66247](arg x[66251] :
  (66249 'to unmanaged class from unknown' class)) : _unknown[42] "inline"
  {
    (66255 return(66257 call _to_nonnil x))
  }
  function postfix![66261](arg x[66265] :
  (66263 'to borrowed class from unknown' class)) : _unknown[42] "inline"
  {
    (66269 return(66271 call _to_nonnil x))
  }
  function postfix![66275](arg x[66280] :
  (66277 'to unmanaged class from unknown'(66279 'to nilable class from type' class))) : _unknown[42] "always propagate line file info" "inline"
  {
    (66285 call checkNotNil(66287 call _to_borrowed x))
    (66289 return(66291 call _to_nonnil x))
  }
  function postfix![66295](arg x[66300] :
  (66297 'to borrowed class from unknown'(66299 'to nilable class from type' class))) : _unknown[42] "always propagate line file info" "inline"
  {
    (66305 call checkNotNil x)
    (66307 return(66309 call _to_nonnil x))
  }
  function postfix![66313](arg x[66315]:_any[141](?)) : _unknown[42] "last resort"
  {
    (66319 call compilerError "postfix ! can only apply to classes")
  }
  function chpl_statementLevelSymbol[66325](arg a[66327]:_any[141](?)) : _unknown[42] "inline"
  {
  }
  function chpl_statementLevelSymbol[66332](arg a[66335] :
  _syncvar) : _unknown[42] "inline"
  {
    (66340 call compilerWarning "implicitly reading from a sync is deprecated; apply a '.read\?\?()' method")
    (66350 call(66347 call . a c"readFE"))
  }
  function chpl_statementLevelSymbol[66353](arg ir[66356] :
  _iteratorRecord) : _unknown[42] "inline"
  {
    function _ir_copy_recursive[66360](arg ir[66362]:_any[141](?)) : _unknown[42] "iterator fn"
    {
      {
        unknown _indexOfInterest[66375] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[66376] "expr temp" "temp"
        (66385 'move' _iterator[66376](66383 call _getIterator ir))
        Defer
        {
          {
            (66400 call _freeIterator _iterator[66376])
          }
        }
        { scopeless type
          (66390 'move' _indexOfInterest[66375](66387 call iteratorIndex _iterator[66376]))
        }
        ForLoop[66377]
        {
          unknown e[66365] "index var" "insert auto destroy"
          (66395 'move' e[66365] _indexOfInterest[66375])
          { scopeless
            (66368 yield(66370 call chpl__initCopy e(definedConst = 0)))
          }
          label _continueLabel[66380]
          _indexOfInterest[66375]
          _iterator[66376]
        }
        label _breakLabel[66381]
      }
    }
    { scopeless
      unknown irc[66410] "no copy"(66412 call _ir_copy_recursive ir)
      (66415 'end of statement')
    }
    {
      unknown _indexOfInterest[66420] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[66421] "expr temp" "temp"
      (66430 'move' _iterator[66421](66428 call _getIterator irc))
      Defer
      {
        {
          (66445 call _freeIterator _iterator[66421])
        }
      }
      { scopeless type
        (66435 'move' _indexOfInterest[66420](66432 call iteratorIndex _iterator[66421]))
      }
      ForLoop[66422]
      {
        unknown e[66416] "index var" "insert auto destroy"
        (66440 'move' e[66416] _indexOfInterest[66420])
        {
        }
        label _continueLabel[66425]
        _indexOfInterest[66420]
        _iterator[66421]
      }
      label _breakLabel[66426]
    }
  }
  function _cond_test[66454](param arg x[66458] :
  unknown t[66456]) param : _unknown[42] "inline"
  {
    if(66507 call _cond_test(66504 call isCoercible t bool))
    {
      (66464 return x)
    }
    {
      { scopeless
        if(66499 call _cond_test(66489 call ||(66492 call isCoercible t int[10])(66496 call isCoercible t uint[86])))
        {
          (66467 return(66468 call != x(66471 call : 0(66475 'typeof' x))))
        }
        {
          (66478 call compilerError "invalid type "(66482 call : t string[244]) " used in if or while condition")
        }
      }
    }
  }
  { scopeless type
    bool
  }
  function _cond_test[66515](arg x[66519] :
  unknown t[66517]) : _unknown[42] "inline"
  {
    if(66660 call _cond_test(66655 call isSubtype t(66658 call _syncvar ?[227])))
    {
      (66526 call compilerWarning "direct reads of sync variables are deprecated; please apply a 'read\?\?' method")
      (66530 return(66532 call _cond_test(66537 call(66534 call . x c"readFE"))))
    }
    {
      { scopeless
        if(66649 call _cond_test(66644 call isCoercible t(66646 'to borrowed class from unknown'(66648 'to nilable class from type' RootClass))))
        {
          (66539 return(66540 call != x nil[32]))
        }
        {
          { scopeless
            if(66638 call _cond_test(66635 call isCoercible t bool))
            {
              (66545 return x)
            }
            {
              { scopeless
                if(66629 call _cond_test(66619 call ||(66622 call isCoercible t int[10])(66626 call isCoercible t uint[86])))
                {
                  (66548 return(66549 call != x 0))
                }
                {
                  { scopeless
                    if(66615 call _cond_test(66612 call isSubtype t c_ptr))
                    {
                      (66554 return(66555 call != x nil[32]))
                    }
                    {
                      (66561 'use' Reflection)
                      if(66607 call _cond_test(66602 call canResolveMethod x "chpl_cond_test_method"))
                      {
                        (66564 return(66571 call(66568 call . x c"chpl_cond_test_method")))
                      }
                      {
                        if(66597 call _cond_test(66594 call isSubtype t _iteratorRecord))
                        {
                          (66575 call compilerError "iterator or promoted expression iterator used in if or while condition")
                        }
                        {
                          (66581 call compilerError "type '"(66585 call :(66588 'typeof' x) string[244]) "' used in if or while condition")
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  { scopeless type
    bool
  }
  function _cond_invalid[66668](arg x[66673] :
  (66670 'to borrowed class from unknown'(66672 'to nilable class from type' RootClass))) param : _unknown[42]
  {
    (66677 return 0)
  }
  function _cond_invalid[66681](arg x[66684] :
  bool) param : _unknown[42]
  {
    (66688 return 0)
  }
  function _cond_invalid[66692](arg x[66695] :
  int[10]) param : _unknown[42]
  {
    (66699 return 0)
  }
  function _cond_invalid[66703](arg x[66706] :
  uint[86]) param : _unknown[42]
  {
    (66710 return 0)
  }
  function _cond_invalid[66714](arg x[66716]:_any[141](?)) param : _unknown[42] "last resort"
  {
    (66719 return 1)
  }
  function isNonnegative[66723](arg i[66728] :
  (66726 call int[10] ?[227])) : _unknown[42] "inline"
  {
    (66732 return(66733 call >= i 0))
  }
  function isNonnegative[66739](arg i[66744] :
  (66742 call uint[86] ?[227])) param : _unknown[42] "inline"
  {
    (66748 return 1)
  }
  function isNonnegative[66752](param arg i[66754]:_any[141](?)) param : _unknown[42] "inline"
  {
    (66757 return(66758 call >= i 0))
  }
  function _unknown[42].re[66764](arg _mt[66770]:_MT[201], ref arg this[66767] :
  chpl_anycomplex) ref : _unknown[42] "inline" "method" "no parens"
  {
    (66773 return(66774 'complex_get_real' this))
  }
  function _unknown[42].re[66778](arg _mt[66784]:_MT[201], param arg this[66781] :
  chpl_anycomplex) param : _unknown[42] "method" "no parens"
  {
    (66787 return(66788 'complex_get_real' this))
  }
  function _unknown[42].re[66792](arg _mt[66798]:_MT[201], arg this[66795] :
  chpl_anycomplex) : _unknown[42] "inline" "method" "no parens"
  {
    if(66846 call _cond_test(66839 call ==(66842 'typeof' this)(66844 call complex[111] 128)))
    {
      function chpl_creal[66802](arg x[66807] :
      (66805 call complex[111] 128)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
      {
      }
      { scopeless type
        (66811 call real[13] 64)
      }
      (66816 return(66818 call chpl_creal this))
    }
    {
      function chpl_crealf[66821](arg x[66826] :
      (66824 call complex[111] 64)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
      {
      }
      { scopeless type
        (66830 call real[13] 32)
      }
      (66835 return(66837 call chpl_crealf this))
    }
  }
  function _unknown[42].im[66852](arg _mt[66858]:_MT[201], ref arg this[66855] :
  chpl_anycomplex) ref : _unknown[42] "inline" "method" "no parens"
  {
    (66861 return(66862 'complex_get_imag' this))
  }
  function _unknown[42].im[66866](arg _mt[66872]:_MT[201], param arg this[66869] :
  chpl_anycomplex) param : _unknown[42] "method" "no parens"
  {
    (66875 return(66876 'complex_get_imag' this))
  }
  function _unknown[42].im[66880](arg _mt[66886]:_MT[201], arg this[66883] :
  chpl_anycomplex) : _unknown[42] "inline" "method" "no parens"
  {
    if(66934 call _cond_test(66927 call ==(66930 'typeof' this)(66932 call complex[111] 128)))
    {
      function chpl_cimag[66890](arg x[66895] :
      (66893 call complex[111] 128)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
      {
      }
      { scopeless type
        (66899 call real[13] 64)
      }
      (66904 return(66906 call chpl_cimag this))
    }
    {
      function chpl_cimagf[66909](arg x[66914] :
      (66912 call complex[111] 64)) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
      {
      }
      { scopeless type
        (66918 call real[13] 32)
      }
      (66923 return(66925 call chpl_cimagf this))
    }
  }
  function _i2r[66940](arg a[66946] :
  (66943 call imag unknown w[66944])) : _unknown[42] "inline"
  {
    (66950 return(66951 'cast'(66953 call real[13] w) a))
  }
  function _r2i[66958](arg a[66964] :
  (66961 call real[13] unknown w[66962])) : _unknown[42] "inline"
  {
    (66968 return(66969 'cast'(66971 call imag w) a))
  }
  type ArrayInit[66987] def heuristicInit[66977]:ArrayInit[66987] def noInit[66979]:ArrayInit[66987] def serialInit[66981]:ArrayInit[66987] def parallelInit[66983]:ArrayInit[66987] def gpuInit[66985]:ArrayInit[66987]
  {
  }
  { scopeless
    unknown chpl_defaultArrayInitMethod[66992] "config" "param"(66996 call . ArrayInit c"heuristicInit")
    (67000 'end of statement')
  }
  { scopeless
    unknown chpl_defaultGpuArrayInitMethod[67002] "config" "param"(67016 IfExpr (67003 call == CHPL_GPU_MEM_STRATEGY "array_on_device") then
    { scopeless
      (67012 call . ArrayInit c"gpuInit")
    } else
    { scopeless
      chpl_defaultArrayInitMethod
    } )
    (67020 'end of statement')
  }
  { scopeless
    unknown chpl_arrayInitMethodRuntimeSelectable[67022] "config" "param" 0
    (67025 'end of statement')
  }
  { scopeless
    unknown chpl_arrayInitMethod[67027] "private" chpl_defaultArrayInitMethod
    (67030 'end of statement')
  }
  function chpl_setArrayInitMethod[67031](arg initMethod[67034] :
  ArrayInit) : _unknown[42] "inline"
  {
    if(67051 call _cond_test(67047 call == chpl_arrayInitMethodRuntimeSelectable 0))
    {
      (67040 call compilerWarning "must set 'chpl_arrayInitMethodRuntimeSelectable' for " "'chpl_setArrayInitMethod' to have any effect")
    }
    { scopeless
      const oldInit[67056] "const" chpl_arrayInitMethod
      (67059 'end of statement')
    }
    (67060 call = chpl_arrayInitMethod initMethod)
    (67064 return oldInit)
  }
  function chpl_getArrayInitMethod[67068]() : _unknown[42] "inline"
  {
    if(67081 call _cond_test(67077 call == chpl_arrayInitMethodRuntimeSelectable 0))
    {
      (67072 return chpl_defaultArrayInitMethod)
    }
    {
      (67075 return chpl_arrayInitMethod)
    }
  }
  function chpl_shouldDoGpuInit[67087]() : _unknown[42]
  {
    function chpl_task_getRequestedSubloc[67091]() : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body"
    {
    }
    { scopeless type
      (67094 call int[10] 32)
    }
    (67099 return(67100 call &&(67102 call &&(67104 call == CHPL_LOCALE_MODEL "gpu")(67110 call == chpl_defaultGpuArrayInitMethod(67114 call . ArrayInit c"gpuInit")))(67117 call >=(67120 call chpl_task_getRequestedSubloc) 0)))
  }
  { scopeless type
    bool
  }
  function init_elts_method[67125](arg s[67127]:_any[141](?), arg t[67129]:_any[141](?)) : _unknown[42]
  {
    { scopeless
      unknown initMethod[67133](67135 call chpl_getArrayInitMethod)
      (67137 'end of statement')
    }
    if(67275 call _cond_test(67271 call == s 0))
    {
      (67139 call = initMethod(67145 call . ArrayInit c"noInit"))
    }
    {
      { scopeless
        if(67266 call _cond_test(67265 call chpl_shouldDoGpuInit))
        {
          (67149 call = initMethod(67153 call . ArrayInit c"gpuInit"))
        }
        {
          { scopeless
            if(67259 call _cond_test(67256 call ! rootLocaleInitialized))
            {
              (67157 call = initMethod(67163 call . ArrayInit c"serialInit"))
            }
            {
              { scopeless
                if(67252 call _cond_test(67245 call == initMethod(67249 call . ArrayInit c"heuristicInit")))
                {
                  { scopeless
                    const elemsizeInBytes[67168] "const"(67183 IfExpr (67170 call isNumericType t) then
                    { scopeless
                      (67173 call numBytes t)
                    } else
                    { scopeless
                      (67181 call(67178 call .(67176 call c_sizeof t) c"safeCast") int[10])
                    } )
                    (67187 'end of statement')
                  }
                  { scopeless
                    const arrsizeInBytes[67189] "const"(67190 call *(67196 call(67193 call . s c"safeCast") int[10]) elemsizeInBytes)
                    (67200 'end of statement')
                  }
                  { scopeless
                    unknown heuristicThresh[67202] "param"(67203 call *(67205 call * 2 1024) 1024)
                    (67213 'end of statement')
                  }
                  { scopeless
                    const heuristicWantsPar[67215] "const"(67216 call > arrsizeInBytes heuristicThresh)
                    (67221 'end of statement')
                  }
                  if(67241 call _cond_test heuristicWantsPar)
                  {
                    (67223 call = initMethod(67229 call . ArrayInit c"parallelInit"))
                  }
                  {
                    (67233 call = initMethod(67237 call . ArrayInit c"serialInit"))
                  }
                }
              }
            }
          }
        }
      }
    }
    (67280 return initMethod)
  }
  function init_elts[67284](arg x[67286]:_any[141](?), arg s[67288]:_any[141](?), arg t[67290]:_any[141](?), arg lo[67297] =
  (67292 call : 0(67296 'typeof' s))) : _unknown[42]
  {
    { scopeless
      unknown initMethod[67303](67305 call init_elts_method s t)
      (67309 'end of statement')
    }
    {
      unknown tmp[67501] "expr temp" "maybe param" "maybe type" "temp"
      (67503 'move' tmp[67501] initMethod)
      if(67508 call _cond_test(67505 call == tmp[67501](67314 call . ArrayInit c"noInit")))
      {
        (67319 return)
      }
      {
        if(67514 call _cond_test(67511 call == tmp[67501](67323 call . ArrayInit c"serialInit")))
        {
          {
            unknown _indexOfInterest[67347] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[67348] "expr temp" "temp"
            (67357 'move' _iterator[67348](67355 call _getIterator(67364 call chpl_direct_range_iter lo(67361 call - s 1))))
            Defer
            {
              {
                (67379 call _freeIterator _iterator[67348])
              }
            }
            { scopeless type
              (67369 'move' _indexOfInterest[67347](67366 call iteratorIndex _iterator[67348]))
            }
            ForLoop[67349]
            {
              unknown i[67328] "index var" "insert auto destroy"
              (67374 'move' i[67328] _indexOfInterest[67347])
              {
                { scopeless
                  unknown y[67339] "no auto destroy" "unsafe" t
                  (67342 'end of statement')
                }
                (67343 'array_set_first' x i y)
              }
              label _continueLabel[67352]
              _indexOfInterest[67347]
              _iterator[67348]
            }
            label _breakLabel[67353]
          }
        }
        {
          if(67521 call _cond_test(67518 call == tmp[67501](67389 call . ArrayInit c"gpuInit")))
          {
            {
              unknown _indexOfInterest[67415] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[67416] "expr temp" "temp"
              (67425 'move' _iterator[67416](67423 call _getIterator(67432 call chpl_direct_range_iter lo(67429 call - s 1))))
              Defer
              {
                {
                  (67447 call _freeIterator _iterator[67416])
                }
              }
              { scopeless type
                (67437 'move' _indexOfInterest[67415](67434 call iteratorIndex _iterator[67416]))
              }
              ForLoop[67417] order-independent
              {
                unknown i[67394] "index var" "insert auto destroy"
                (67442 'move' i[67394] _indexOfInterest[67415])
                {
                  { scopeless
                    unknown y[67405] "no auto destroy" "unsafe" t
                    (67408 'end of statement')
                  }
                  (67409 'array_set_first' x i y)
                }
                label _continueLabel[67420]
                _indexOfInterest[67415]
                _iterator[67416]
              }
              label _breakLabel[67421]
            }
          }
          {
            if(67528 call _cond_test(67525 call == tmp[67501](67457 call . ArrayInit c"parallelInit")))
            {
              Forall[67483] {
                induction variables:
                  
                  unknown i[67462] "index var" "insert auto destroy"
                iterated expressions:
                  (67469 call chpl_build_bounded_range lo(67465 call - s 1))
                shadow variables:
                other variables
                  forall body
                {
                  { scopeless
                    unknown y[67473] "no auto destroy" "unsafe" t
                    (67476 'end of statement')
                  }
                  (67477 'array_set_first' x i y)
                }
              }
            }
            {
              (67491 call halt "ArrayInit." initMethod " should have been made concrete")
            }
          }
        }
      }
    }
  }
  { scopeless type
    void[4]
  }
  unknown chpl_mem_descInt_t[67536] "extern" "type variable"(67538 call int[10] 16)
  type chpl_ddataResizePolicy[67548] def normalInit[67542]:chpl_ddataResizePolicy[67548] def skipInit[67544]:chpl_ddataResizePolicy[67548] def skipInitButClearMem[67546]:chpl_ddataResizePolicy[67548]
  type _ddata[67573](?) unknown eltType[67553] "type variable" function _ddata[67573](?).this[67555](arg _mt[67563]:_MT[201], arg this[67557]:_ddata[67573](?), arg i[67560] :
  integral) ref : _unknown[42] "inline" "method" "primary method"
  {
    (67566 return(67567 'array_get' this i))
  }
  function chpl_isDdata[67575](arg t[67578] :
  _ddata) param : _unknown[42]
  {
    (67582 return 1)
  }
  function chpl_isDdata[67586](arg t[67588]:_any[141](?)) param : _unknown[42]
  {
    (67591 return 0)
  }
  function =[67595](ref arg a[67601] :
  (67598 call _ddata unknown t[67599]), arg b[67607] :
  (67605 call _ddata t)) : _unknown[42] "assignop" "inline" "operator"
  {
    (67611 '=' a b)
  }
  function _ddata_shift[67616](arg eltType[67618]:_any[141](?), arg data[67623] :
  (67621 call _ddata eltType), arg shift[67627] :
  integral) : _unknown[42] "inline"
  {
    { scopeless
      unknown ret[67632](67634 call _ddata eltType)
      (67637 'end of statement')
    }
    (67638 'shift_base_pointer' ret data shift)
    (67642 return ret)
  }
  function _ddata_sizeof_element[67646](arg t[67649] :
  _ddata) : _unknown[42] "inline"
  {
    (67654 return(67655 call :(67657 'sizeof_ddata_element' t) c_size_t))
  }
  { scopeless type
    c_size_t
  }
  function _ddata_sizeof_element[67663](arg x[67666] :
  _ddata) : _unknown[42] "inline"
  {
    (67671 return(67673 call _ddata_sizeof_element(67675 'typeof' x)))
  }
  { scopeless type
    c_size_t
  }
  function _ddata_allocate_noinit[67679](arg eltType[67681]:_any[141](?), arg size[67684] :
  integral, out arg callPostAlloc[67688] :
  bool, arg subloc[67692] =
  c_sublocid_none, arg haltOnOom[67697] :
  bool =
  1) : _unknown[42] "llvm return noalias"
  {
    function chpl_mem_array_alloc[67702](arg nmemb[67705] :
    c_size_t, arg eltSize[67709] :
    c_size_t, arg subloc[67713] :
    chpl_sublocID_t, ref arg callPostAlloc[67717] :
    bool, arg haltOnOom[67721] :
    bool) : _unknown[42] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      (67725 call c_ptr void[4])
    }
    { scopeless
      unknown ret[67731](67733 call _ddata eltType)
      (67736 'end of statement')
    }
    (67737 call = ret(67740 call :(67743 call chpl_mem_array_alloc(67744 call : size c_size_t)(67749 call _ddata_sizeof_element ret) subloc callPostAlloc haltOnOom)(67755 'typeof' ret)))
    (67756 return ret)
  }
  function _try_ddata_allocate[67760](arg eltType[67762]:_any[141](?), arg size[67765] :
  integral, arg subloc[67769] =
  c_sublocid_none) : _unknown[42] throws "inline"
  {
    { scopeless
      unknown callPostAlloc[67774] bool
      (67777 'end of statement')
    }
    { scopeless
      unknown ret[67779](67781 call _ddata eltType)
      (67784 'end of statement')
    }
    (67785 call = ret(67789 call _ddata_allocate_noinit eltType size callPostAlloc subloc 0))
    if(67804 call _cond_test(67800 call == ret nil[32]))
    {
      { scopeless
        (67795 'throw'(67796 'new'(67798 call ArrayOomError)))
      }
    }
    (67810 call init_elts ret size eltType)
    if(67820 call _cond_test callPostAlloc)
    {
      (67816 call _ddata_allocate_postalloc ret size)
    }
    (67824 return ret)
  }
  function _ddata_allocate_noinit_gpu_shared[67828](arg eltType[67830]:_any[141](?), arg size[67833] :
  integral, out arg callPostAlloc[67837] :
  bool, arg subloc[67841] =
  c_sublocid_none) : _unknown[42] "llvm return noalias"
  {
    if(67855 call _cond_test(67851 call != CHPL_LOCALE_MODEL "gpu"))
    {
      { scopeless
        (67846 call compilerError "_ddata_allocate_noinit_gpu_shared can't be called in this config")
      }
    }
    { scopeless
      unknown ret[67861](67863 call _ddata eltType)
      (67866 'end of statement')
    }
    (67867 call = ret(67870 'cast'(67872 'typeof' ret)(67873 'gpu allocShared'(67874 call * 4096 8))))
    (67880 return ret)
  }
  function _ddata_allocate_postalloc[67884](arg data[67887] :
  _ddata, arg size[67891] :
  integral) : _unknown[42] "inline"
  {
    function chpl_mem_array_postAlloc[67895](arg data[67900] :
    (67898 call c_ptr void[4]), arg nmemb[67904] :
    c_size_t, arg eltSize[67908] :
    c_size_t) : void[4] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free"
    {
    }
    (67914 call chpl_mem_array_postAlloc(67915 call : data(67919 call c_ptr void[4]))(67921 call : size c_size_t)(67926 call _ddata_sizeof_element data))
  }
  function _ddata_allocate[67930](arg eltType[67932]:_any[141](?), arg size[67935] :
  integral, arg subloc[67939] =
  c_sublocid_none) : _unknown[42] "inline"
  {
    { scopeless
      unknown callPostAlloc[67944] bool
      (67947 'end of statement')
    }
    { scopeless
      unknown ret[67949](67951 call _ddata eltType)
      (67954 'end of statement')
    }
    (67955 call = ret(67959 call _ddata_allocate_noinit eltType size callPostAlloc subloc))
    (67965 call init_elts ret size eltType)
    if(67975 call _cond_test callPostAlloc)
    {
      (67971 call _ddata_allocate_postalloc ret size)
    }
    (67979 return ret)
  }
  function _ddata_supports_reallocate[67983](arg oldDdata[67985]:_any[141](?), arg eltType[67987]:_any[141](?), arg oldSize[67990] :
  integral, arg newSize[67994] :
  integral) : _unknown[42] "inline"
  {
    function chpl_mem_array_supports_realloc[67998](arg ptr[68003] :
    (68001 call c_ptr void[4]), arg oldNmemb[68007] :
    c_size_t, arg newNmemb[68011] :
    c_size_t, arg eltSize[68015] :
    c_size_t) : _unknown[42] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      bool
    }
    (68022 return(68024 call chpl_mem_array_supports_realloc(68025 call : oldDdata(68029 call c_ptr void[4]))(68035 call(68032 call . oldSize c"safeCast") c_size_t)(68041 call(68038 call . newSize c"safeCast") c_size_t)(68044 call _ddata_sizeof_element oldDdata)))
  }
  function _ddata_fill[68048](arg ddata[68050]:_any[141](?), arg eltType[68052]:_any[141](?), arg lo[68055] :
  integral, arg hi[68059] :
  integral, arg fill[68066] :
  (68063 call int[10] 8) =
  0) : _unknown[42] "inline"
  {
    (68081 'import'(68078 call .(68073 call . OS c"POSIX") c"memset"))
    if(68160 call _cond_test(68156 call > hi lo))
    {
      { scopeless
        const elemWidthInBytes[68084] "const"(68087 call _ddata_sizeof_element ddata) uint[86]
        (68090 'end of statement')
      }
      { scopeless
        const numElems[68092] "const"(68100 call(68097 call .(68093 call - hi lo) c"safeCast") uint[86])
        (68103 'end of statement')
      }
      if(68152 call _cond_test(68149 call safeMul numElems elemWidthInBytes))
      {
        { scopeless
          const numBytes[68106] "const"(68107 call * numElems elemWidthInBytes)
          (68112 'end of statement')
        }
        { scopeless
          const shiftedPtr[68114] "const"(68116 call _ddata_shift eltType ddata lo)
          (68121 'end of statement')
        }
        (68123 call memset(68124 call : shiftedPtr(68128 call c_ptr void[4])) fill(68135 call(68132 call . numBytes c"safeCast") c_size_t))
      }
      {
        (68139 call halt(68140 call + "internal error: Unsigned integer overflow during " "memset of dynamic block"))
      }
    }
  }
  function _ddata_reallocate[68166](arg oldDdata[68168]:_any[141](?), arg eltType[68170]:_any[141](?), arg oldSize[68173] :
  integral, arg newSize[68177] :
  integral, arg subloc[68181] =
  c_sublocid_none, arg policy[68190] =
  (68187 call . chpl_ddataResizePolicy c"normalInit")) : _unknown[42] "inline"
  {
    function chpl_mem_array_realloc[68194](arg ptr[68199] :
    (68197 call c_ptr void[4]), arg oldNmemb[68203] :
    c_size_t, arg newNmemb[68207] :
    c_size_t, arg eltSize[68211] :
    c_size_t, arg subloc[68215] :
    chpl_sublocID_t, ref arg callPostAlloc[68219] :
    bool) : _unknown[42] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      (68223 call c_ptr void[4])
    }
    { scopeless
      unknown callPostAlloc[68229] bool
      (68232 'end of statement')
    }
    { scopeless
      unknown needsDestroy[68234] "param"(68235 'needs auto destroy'(68236 'deref'(68238 call oldDdata 0)))
      (68241 'end of statement')
    }
    if(68334 call _cond_test(68327 call && needsDestroy(68330 call > oldSize newSize)))
    {
      if(68323 call _cond_test(68320 call _deinitElementsIsParallel eltType oldSize))
      {
        Forall[68261] {
          induction variables:
            
            unknown i[68244] "index var" "insert auto destroy"
          iterated expressions:
            (68251 call chpl_build_bounded_range newSize(68247 call - oldSize 1))
          shadow variables:
          other variables
            forall body
          {
            (68254 call chpl__autoDestroy(68256 call oldDdata i))
          }
        }
      }
      {
        {
          unknown _indexOfInterest[68280] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[68281] "expr temp" "temp"
          (68290 'move' _iterator[68281](68288 call _getIterator(68297 call chpl_direct_range_iter newSize(68294 call - oldSize 1))))
          Defer
          {
            {
              (68312 call _freeIterator _iterator[68281])
            }
          }
          { scopeless type
            (68302 'move' _indexOfInterest[68280](68299 call iteratorIndex _iterator[68281]))
          }
          ForLoop[68282]
          {
            unknown i[68265] "index var" "insert auto destroy"
            (68307 'move' i[68265] _indexOfInterest[68280])
            { scopeless
              (68275 call chpl__autoDestroy(68277 call oldDdata i))
            }
            label _continueLabel[68285]
            _indexOfInterest[68280]
            _iterator[68281]
          }
          label _breakLabel[68286]
        }
      }
    }
    { scopeless
      unknown newDdata[68339](68340 call :(68343 call chpl_mem_array_realloc(68344 call : oldDdata(68348 call c_ptr void[4]))(68354 call(68351 call . oldSize c"safeCast") c_size_t)(68360 call(68357 call . newSize c"safeCast") c_size_t)(68363 call _ddata_sizeof_element oldDdata) subloc callPostAlloc)(68368 'typeof' oldDdata))
      (68370 'end of statement')
    }
    {
      unknown tmp[68437] "expr temp" "maybe param" "maybe type" "temp"
      (68439 'move' tmp[68437] policy)
      if(68444 call _cond_test(68441 call == tmp[68437](68375 call . chpl_ddataResizePolicy c"normalInit")))
      {
        { scopeless
          if(68403 call _cond_test(68398 call !(68401 call isDefaultInitializable eltType)))
          {
            (68381 call halt(68382 call + "internal error: Attempt to resize dynamic block " "containing non-default-initializable elements"))
          }
          {
            (68392 call init_elts newDdata newSize eltType(lo = oldSize))
          }
        }
      }
      {
        if(68450 call _cond_test(68447 call == tmp[68437](68413 call . chpl_ddataResizePolicy c"skipInit")))
        {
        }
        {
          if(68457 call _cond_test(68454 call == tmp[68437](68423 call . chpl_ddataResizePolicy c"skipInitButClearMem")))
          {
            { scopeless
              (68428 call _ddata_fill newDdata eltType oldSize newSize)
            }
          }
        }
      }
    }
    if(68520 call _cond_test callPostAlloc)
    {
      function chpl_mem_array_postRealloc[68462](arg oldData[68467] :
      (68465 call c_ptr void[4]), arg oldNmemb[68471] :
      c_size_t, arg newData[68477] :
      (68475 call c_ptr void[4]), arg newNmemb[68481] :
      c_size_t, arg eltSize[68485] :
      c_size_t) : void[4] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free"
      {
      }
      (68491 call chpl_mem_array_postRealloc(68492 call : oldDdata(68496 call c_ptr void[4]))(68502 call(68499 call . oldSize c"safeCast") c_size_t)(68504 call : newDdata(68508 call c_ptr void[4]))(68514 call(68511 call . newSize c"safeCast") c_size_t)(68517 call _ddata_sizeof_element oldDdata))
    }
    (68524 return newDdata)
  }
  function _ddata_free[68528](arg data[68531] :
  _ddata, arg size[68535] :
  integral) : _unknown[42] "inline"
  {
    { scopeless
      unknown subloc[68540](68542 call chpl_sublocFromLocaleID(68543 '_wide_get_locale' data))
      (68546 'end of statement')
    }
    function chpl_mem_array_free[68547](arg data[68552] :
    (68550 call c_ptr void[4]), arg nmemb[68556] :
    c_size_t, arg eltSize[68560] :
    c_size_t, arg subloc[68564] :
    chpl_sublocID_t) : void[4] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free"
    {
    }
    (68570 call chpl_mem_array_free(68571 call : data(68575 call c_ptr void[4]))(68577 call : size c_size_t)(68582 call _ddata_sizeof_element data) subloc)
  }
  function ==[68587](arg a[68590] :
  _ddata, arg b[68594] :
  _ddata) : _unknown[42] "inline" "operator"
  {
    (68612 return(68613 'ptr_eq' a b))
  }
  where {
    (68597 call ==(68600 call _to_borrowed(68602 call . a c"eltType"))(68606 call _to_borrowed(68608 call . b c"eltType")))
  }
  function ==[68619](arg a[68622] :
  _ddata, arg b[68626] :
  _nilType) : _unknown[42] "inline" "operator"
  {
    (68630 return(68631 'ptr_eq' a nil[32]))
  }
  function ==[68636](arg a[68639] :
  _nilType, arg b[68643] :
  _ddata) : _unknown[42] "inline" "operator"
  {
    (68647 return(68648 'ptr_eq' nil[32] b))
  }
  function !=[68653](arg a[68656] :
  _ddata, arg b[68660] :
  _ddata) : _unknown[42] "inline" "operator"
  {
    (68674 return(68675 'ptr_neq' a b))
  }
  where {
    (68663 call ==(68666 call . a c"eltType")(68670 call . b c"eltType"))
  }
  function !=[68681](arg a[68684] :
  _ddata, arg b[68688] :
  _nilType) : _unknown[42] "inline" "operator"
  {
    (68692 return(68693 'ptr_neq' a nil[32]))
  }
  function !=[68698](arg a[68701] :
  _nilType, arg b[68705] :
  _ddata) : _unknown[42] "inline" "operator"
  {
    (68709 return(68710 'ptr_neq' nil[32] b))
  }
  function _cond_test[68715](arg x[68718] :
  _ddata) : _unknown[42] "inline"
  {
    (68722 return(68723 call != x nil[32]))
  }
  type _ref[68735](?) unknown _val[68731]
  def module currentTask[68749]  
  function chpl_rt_reset_task_spawn[68751]() : _unknown[42] "inline"
  {
    function chpl_task_reset_spawn_order[68754]() : void[4] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    (68759 call chpl_task_reset_spawn_order)
  }
  function chpl_resetTaskSpawn[68762](arg numTasks[68764]:_any[141](?)) : _unknown[42]
  {
    { scopeless
      const dptpl[68768] "const"(68780 IfExpr (68769 call == dataParTasksPerLocale 0) then
      { scopeless
        (68776 call . here c"maxTaskPar")
      } else
      { scopeless
        dataParTasksPerLocale
      } )
      (68784 'end of statement')
    }
    if(68814 call _cond_test(68810 call >= numTasks dptpl))
    {
      (68787 call chpl_rt_reset_task_spawn)
    }
    {
      { scopeless
        if(68806 call _cond_test(68802 call == numTasks 1))
        {
          (68790 'use' ChapelTaskData)
          { scopeless
            unknown tls[68793](68795 call chpl_task_getInfoChapel)
            (68797 'end of statement')
          }
          (68799 call chpl_task_data_setNextCoStmtSerial tls 1)
        }
      }
    }
  }
  { scopeless
    unknown useAtomicTaskCnt[68822] "config" "param"(68824 call defaultAtomicTaskCount)
    (68826 'end of statement')
  }
  function defaultAtomicTaskCount[68827]() param : _unknown[42]
  {
    (68831 'use' ChplConfig)
    (68833 return(68834 call !=(68839 call . ChplConfig c"CHPL_NETWORK_ATOMICS") "none"))
  }
  { scopeless
    unknown commDiagsTrackEndCounts[68848] "config" "param" 0
    (68851 'end of statement')
  }
  type endCountDiagsManager[68924] unknown taskInfo[68855](68857 call c_ptr chpl_task_infoChapel_t) unknown prevDiagsDisabledVal[68862] bool function endCountDiagsManager[68924].enterContext[68866](arg _mt[68870]:_MT[201], ref arg this[68868]:endCountDiagsManager[68924]) : _unknown[42] "inline" "method" "primary method"
  {
    if(68889 call _cond_test(68886 call ! commDiagsTrackEndCounts))
    {
      (68874 call = taskInfo(68878 call chpl_task_getInfoChapel))
      (68879 call = prevDiagsDisabledVal(68883 call chpl_task_data_setCommDiagsTemporarilyDisabled taskInfo 1))
    }
  } function endCountDiagsManager[68924].exitContext[68895](arg _mt[68906]:_MT[201], arg this[68897]:endCountDiagsManager[68924], in arg unused[68903] :
  (68900 call _owned(68902 'to nilable class from type' Error))) : _unknown[42] "inline" "method" "primary method"
  {
    if(68917 call _cond_test(68914 call ! commDiagsTrackEndCounts))
    {
      (68911 call chpl_task_data_setCommDiagsTemporarilyDisabled taskInfo prevDiagsDisabledVal)
    }
  } contextManager
  type _EndCountBase[68933] unknown errors[68928] chpl_TaskErrors
  type _EndCount[69206](?) unknown iType[68938] "type variable" unknown taskType[68941] "type variable" unknown i[68944] iType unknown taskCnt[68949] taskType function _EndCount[69206](?).init[68953](arg _mt[68961]:_MT[201], arg this[68955]:_EndCount[69206](?), arg iType[68957]:_any[141](?), arg taskType[68959]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    (68964 call =(68969 call . this c"iType") iType)
    (68973 call =(68978 call . this c"taskType") taskType)
  } function _EndCount[69206](?).add[68984](arg _mt[68996]:_MT[201], arg this[68986]:_EndCount[69206](?), arg value[68989] :
  int[10], param arg order[68993] :
  memoryOrder) : _unknown[42] "inline" "method" "primary method"
  {
    {
      unknown manager[69004] "manager handle" "temp"
      (69007 'move' manager[69004](69006 'addr of'(69000 'new'(69002 call endCountDiagsManager))))
      (69010 call chpl__verifyTypeContext manager[69004])
      (69013 call enterContext _mt[203] manager[69004])
      unknown errorCaught[69016] "temp" 0
      Try
      {
        {
          (69052 call(69049 call .(69044 call . this c"i") c"add") value order)
        }
      }
      Catch chpl_tmp_err
      {
        (69022 'move' errorCaught[69016] 1)
        (69025 call exitContext _mt[203] manager[69004] chpl_tmp_err)
      }
      if(69033 'u!' errorCaught[69016])
      {
        (69035 call exitContext _mt[203] manager[69004] nil[32])
      }
    }
  } function _EndCount[69206](?).sub[69059](arg _mt[69071]:_MT[201], arg this[69061]:_EndCount[69206](?), arg value[69064] :
  int[10], param arg order[69068] :
  memoryOrder) : _unknown[42] "inline" "method" "primary method"
  {
    {
      unknown manager[69079] "manager handle" "temp"
      (69082 'move' manager[69079](69081 'addr of'(69075 'new'(69077 call endCountDiagsManager))))
      (69085 call chpl__verifyTypeContext manager[69079])
      (69088 call enterContext _mt[203] manager[69079])
      unknown errorCaught[69091] "temp" 0
      Try
      {
        {
          (69125 call(69122 call .(69117 call . this c"i") c"sub") value order)
        }
      }
      Catch chpl_tmp_err
      {
        (69097 'move' errorCaught[69091] 1)
        (69100 call exitContext _mt[203] manager[69079] chpl_tmp_err)
      }
      if(69108 'u!' errorCaught[69091])
      {
        (69110 call exitContext _mt[203] manager[69079] nil[32])
      }
    }
  } function _EndCount[69206](?).waitFor[69132](arg _mt[69144]:_MT[201], arg this[69134]:_EndCount[69206](?), arg value[69137] :
  int[10], param arg order[69141] :
  memoryOrder) : _unknown[42] "inline" "method" "primary method"
  {
    {
      unknown manager[69152] "manager handle" "temp"
      (69155 'move' manager[69152](69154 'addr of'(69148 'new'(69150 call endCountDiagsManager))))
      (69158 call chpl__verifyTypeContext manager[69152])
      (69161 call enterContext _mt[203] manager[69152])
      unknown errorCaught[69164] "temp" 0
      Try
      {
        {
          (69198 call(69195 call .(69190 call . this c"i") c"waitFor") value order)
        }
      }
      Catch chpl_tmp_err
      {
        (69170 'move' errorCaught[69164] 1)
        (69173 call exitContext _mt[203] manager[69152] chpl_tmp_err)
      }
      if(69181 'u!' errorCaught[69164])
      {
        (69183 call exitContext _mt[203] manager[69152] nil[32])
      }
    }
  } _EndCountBase
  function _endCountAlloc[69208](param arg forceLocalTypes[69211] :
  bool) : _unknown[42] "dont disable remote value forwarding" "inline"
  {
    unknown taskCntType[69216] "type variable"(69227 IfExpr (69217 call &&(69219 call ! forceLocalTypes) useAtomicTaskCnt) then
    { scopeless
      (69224 call chpl__atomicType int[10])
    } else
    { scopeless
      int[10]
    } )
    if(69258 call _cond_test forceLocalTypes)
    {
      (69232 return(69233 'new'(_chpl_manager = unmanaged[183](?))(69237 call _EndCount(iType =(69239 call chpl__processorAtomicType int[10]))(taskType = taskCntType))))
    }
    {
      (69245 return(69246 'new'(_chpl_manager = unmanaged[183](?))(69250 call _EndCount(iType =(69252 call chpl__atomicType int[10]))(taskType = taskCntType))))
    }
  }
  unknown _remoteEndCountType[69265] "type variable"(69269 'typeof'(69267 call _endCountAlloc 0))
  function _endCountFree[69271](arg e[69274] :
  _EndCount) : _unknown[42] "dont disable remote value forwarding" "inline"
  {
    (69282 call chpl__delete(69280 call _to_unmanaged e))
  }
  function _upEndCount[69287](arg e[69290] :
  _EndCount, param arg countRunningTasks[69294] =
  1) : _unknown[42] "dont disable remote value forwarding" "no remote memory fence" "task spawn impl fn"
  {
    if(69369 call _cond_test(69364 call isAtomic(69366 call . e c"taskCnt")))
    {
      (69303 call(69300 call . e c"add") 1(69308 call . memoryOrder c"release"))
      (69320 call(69317 call .(69314 call . e c"taskCnt") c"add") 1(69323 call . memoryOrder c"release"))
    }
    {
      (69328 call chpl_rmem_consist_fence(69330 call . memoryOrder c"release"))
      {
        const tmp[69355] "const" "temp"
        (69356 'move' tmp[69355](69353 'deref'(69352 '_wide_get_locale' e)))
        {
          (69339 call(69336 call . e c"add") 1(69342 call . memoryOrder c"release"))
          (69345 call +=(69348 call . e c"taskCnt") 1)
        }
        (69359 'elided on block' 0 tmp[69355])
      }
    }
    if(69385 call _cond_test countRunningTasks)
    {
      (69380 call(69377 call . here c"runningTaskCntAdd") 1)
      (69383 call chpl_comm_task_create)
    }
  }
  function _upEndCount[69391](arg e[69394] :
  _EndCount, param arg countRunningTasks[69398] =
  1, arg numTasks[69401]:_any[141](?)) : _unknown[42] "dont disable remote value forwarding" "no remote memory fence" "task spawn impl fn"
  {
    (69408 call(69405 call . e c"add")(69409 call : numTasks int[10])(69414 call . memoryOrder c"release"))
    if(69451 call _cond_test countRunningTasks)
    {
      if(69435 call _cond_test(69431 call > numTasks 1))
      {
        (69423 call(69420 call . here c"runningTaskCntAdd")(69424 call -(69426 call : numTasks int[10]) 1))
      }
      (69440 call chpl_comm_task_create)
    }
    {
      (69448 call(69445 call . here c"runningTaskCntSub") 1)
    }
  }
  function chpl_comm_unordered_task_fence[69457]() : _unknown[42] "extern" "local args" "no fn body"
  {
  }
  { scopeless type
    void[4]
  }
  function chpl_comm_task_create[69463]() : void[4] "extern" "local args" "no fn body"
  {
  }
  function chpl_comm_task_end[69467]() : _unknown[42] "extern" "local args" "no fn body" "task complete impl fn"
  {
  }
  { scopeless type
    void[4]
  }
  function chpl_after_forall_fence[69473]() : _unknown[42] "compiler added remote fence"
  {
    (69477 call chpl_comm_unordered_task_fence)
  }
  function _downEndCount[69480](arg e[69483] :
  _EndCount, arg err[69489] :
  (69486 'to unmanaged class from unknown'(69488 'to nilable class from type' Error))) : _unknown[42] "dont disable remote value forwarding" "down end count fn" "task complete impl fn"
  {
    (69494 call chpl_save_task_error e err)
    if(69510 call _cond_test(69506 call == CHPL_LOCALE_MODEL "gpu"))
    {
      function chpl_gpu_task_end[69498]() : _unknown[42] "extern" "local args" "no fn body" "task complete impl fn"
      {
      }
      { scopeless type
        void[4]
      }
      (69505 call chpl_gpu_task_end)
    }
    (69515 call chpl_comm_task_end)
    (69520 call(69517 call . e c"sub") 1(69523 call . memoryOrder c"release"))
  }
  function _waitEndCount[69528](arg e[69531] :
  _EndCount, param arg countRunningTasks[69535] =
  1) : _unknown[42] throws "dont disable remote value forwarding" "task join impl fn" "unchecked throws"
  {
    (69543 call(69540 call . here c"runningTaskCntSub") 1)
    (69549 call(69546 call . e c"waitFor") 0(69554 call . memoryOrder c"acquire"))
    if(69602 call _cond_test countRunningTasks)
    {
      { scopeless
        const taskDec[69559] "const"(69580 IfExpr (69561 call isAtomic(69563 call . e c"taskCnt")) then
        { scopeless
          (69575 call(69572 call .(69567 call . e c"taskCnt") c"read"))
        } else
        { scopeless
          (69577 call . e c"taskCnt")
        } )
        (69584 'end of statement')
      }
      (69589 call(69586 call . here c"runningTaskCntSub")(69590 call - taskDec 1))
    }
    {
      (69599 call(69596 call . here c"runningTaskCntAdd") 1)
    }
    if(69631 call _cond_test(69619 call !(69630 call(69627 call .(69622 call . e c"errors") c"empty"))))
    {
      { scopeless
        (69606 'throw'(69607 'new'(_chpl_manager = _owned[238](?))(69611 call TaskErrors(69615 call . e c"errors"))))
      }
    }
  }
  function _waitEndCount[69638](arg e[69641] :
  _EndCount, param arg countRunningTasks[69645] =
  1, arg numTasks[69648]:_any[141](?)) : _unknown[42] throws "dont disable remote value forwarding" "task join impl fn" "unchecked throws"
  {
    (69655 call(69652 call . e c"waitFor") 0(69658 call . memoryOrder c"acquire"))
    if(69691 call _cond_test countRunningTasks)
    {
      if(69679 call _cond_test(69675 call > numTasks 1))
      {
        (69667 call(69664 call . here c"runningTaskCntSub")(69668 call -(69670 call : numTasks int[10]) 1))
      }
    }
    {
      (69688 call(69685 call . here c"runningTaskCntAdd") 1)
    }
    if(69716 call _cond_test(69706 call !(69715 call(69712 call .(69709 call . e c"errors") c"empty"))))
    {
      { scopeless
        (69695 'throw'(69696 'new'(_chpl_manager = _owned[238](?))(69700 call TaskErrors(69702 call . e c"errors"))))
      }
    }
  }
  function _upDynamicEndCount[69723](param arg countRunningTasks[69726] =
  1) : _unknown[42] "task spawn impl fn"
  {
    { scopeless
      unknown e[69731](69732 'get dynamic end count')
      (69734 'end of statement')
    }
    (69736 call _upEndCount e countRunningTasks)
  }
  function _downDynamicEndCount[69741](arg err[69746] :
  (69743 'to unmanaged class from unknown'(69745 'to nilable class from type' Error))) : _unknown[42] "dont disable remote value forwarding" "down end count fn" "task complete impl fn"
  {
    { scopeless
      unknown e[69751](69752 'get dynamic end count')
      (69754 'end of statement')
    }
    (69756 call _downEndCount e err)
  }
  function chpl_waitDynamicEndCount[69761](param arg countRunningTasks[69764] =
  1) : _unknown[42] throws "task join impl fn" "unchecked throws"
  {
    { scopeless
      unknown e[69769](69770 'get dynamic end count')
      (69772 'end of statement')
    }
    (69774 call _waitEndCount e countRunningTasks)
    if(69798 call _cond_test(69788 call !(69797 call(69794 call .(69791 call . e c"errors") c"empty"))))
    {
      { scopeless
        (69777 'throw'(69778 'new'(_chpl_manager = _owned[238](?))(69782 call TaskErrors(69784 call . e c"errors"))))
      }
    }
  }
  function _unknown[42].transmute[69805](arg _mt[69815]:_MT[201], param arg this[69810] :
  (69808 call real[13] 64), arg t[69813]:_any[141](?)) param : _unknown[42] "method" "@unstable"
  {
    if(69859 call _cond_test(69855 call != t uint[86]))
    {
      (69821 call compilerError(69822 call +(69824 call +(69826 call + "Cannot (currently) transmute from "(69831 call :(69834 'typeof' this) string[244])) " to ")(69839 call : t string[244])))
    }
    {
      { scopeless
        unknown ui[69845] "param"(69849 'real64 as uint64' this)(69847 call uint[86] 64)
        (69852 'end of statement')
      }
      (69853 return ui)
    }
  }
  { scopeless type
    t
  }
  function _unknown[42].transmute[69866](arg _mt[69876]:_MT[201], param arg this[69871] :
  (69869 call real[13] 32), arg t[69874]:_any[141](?)) param : _unknown[42] "method" "@unstable"
  {
    if(69918 call _cond_test(69912 call != t(69916 call uint[86] 32)))
    {
      (69882 call compilerError(69883 call +(69885 call +(69887 call + "Cannot (currently) transmute from "(69890 call :(69893 'typeof' this) string[244])) " to ")(69896 call : t string[244])))
    }
    {
      { scopeless
        unknown ui[69902] "param"(69906 'real32 as uint32' this)(69904 call uint[86] 32)
        (69909 'end of statement')
      }
      (69910 return ui)
    }
  }
  { scopeless type
    t
  }
  function _unknown[42].transmute[69925](arg _mt[69936]:_MT[201], arg this[69931] :
  (69928 call real[13] unknown w[69929]), arg t[69934]:_any[141](?)) : _unknown[42] "inline" "method" "@unstable"
  {
    (69941 'use' CTypes)
    (69951 'import'(69948 call .(69945 call . OS c"POSIX") c"memcpy"))
    if(70009 call _cond_test(70003 call != t(70007 call uint[86] w)))
    {
      (69954 call compilerError(69955 call +(69957 call +(69959 call + "Cannot (currently) transmute from "(69962 call :(69965 'typeof' this) string[244])) " to ")(69968 call : t string[244])))
    }
    {
      { scopeless
        { scopeless
          unknown src[69981] this
        }
        { scopeless
          unknown dst[69975](69977 call uint[86] w)
        }
        (69984 'end of statement')
      }
      (69986 call memcpy(69988 call c_ptrTo dst)(69991 call c_ptrTo src)(69999 call(69996 call .(69994 call numBytes t) c"safeCast") c_size_t))
      (70001 return dst)
    }
  }
  { scopeless type
    t
  }
  function _unknown[42].transmute[70016](arg _mt[70026]:_MT[201], param arg this[70021] :
  (70019 call uint[86] 64), arg t[70024]:_any[141](?)) param : _unknown[42] "method" "@unstable"
  {
    if(70068 call _cond_test(70062 call != t(70066 call real[13] 64)))
    {
      (70032 call compilerError(70033 call +(70035 call +(70037 call + "Cannot (currently) transmute from "(70040 call :(70043 'typeof' this) string[244])) " to ")(70046 call : t string[244])))
    }
    {
      { scopeless
        unknown r[70052] "param"(70056 'uint64 as real64' this)(70054 call real[13] 64)
        (70059 'end of statement')
      }
      (70060 return r)
    }
  }
  { scopeless type
    t
  }
  function _unknown[42].transmute[70075](arg _mt[70085]:_MT[201], param arg this[70080] :
  (70078 call uint[86] 32), arg t[70083]:_any[141](?)) param : _unknown[42] "inline" "method" "@unstable"
  {
    if(70127 call _cond_test(70121 call != t(70125 call real[13] 32)))
    {
      (70091 call compilerError(70092 call +(70094 call +(70096 call + "Cannot (currently) transmute from "(70099 call :(70102 'typeof' this) string[244])) " to ")(70105 call : t string[244])))
    }
    {
      { scopeless
        unknown r[70111] "param"(70115 'uint32 as real32' this)(70113 call real[13] 32)
        (70118 'end of statement')
      }
      (70119 return r)
    }
  }
  { scopeless type
    t
  }
  function _unknown[42].transmute[70134](arg _mt[70145]:_MT[201], arg this[70140] :
  (70137 call uint[86] unknown w[70138]), arg t[70143]:_any[141](?)) : _unknown[42] "inline" "method" "@unstable"
  {
    (70150 'use' CTypes)
    (70160 'import'(70157 call .(70154 call . OS c"POSIX") c"memcpy"))
    if(70218 call _cond_test(70212 call != t(70216 call real[13] w)))
    {
      (70163 call compilerError(70164 call +(70166 call +(70168 call + "Cannot (currently) transmute from "(70171 call :(70174 'typeof' this) string[244])) " to ")(70177 call : t string[244])))
    }
    {
      { scopeless
        { scopeless
          unknown src[70190] this
        }
        { scopeless
          unknown dst[70184](70186 call real[13] w)
        }
        (70193 'end of statement')
      }
      (70195 call memcpy(70197 call c_ptrTo dst)(70200 call c_ptrTo src)(70208 call(70205 call .(70203 call numBytes t) c"safeCast") c_size_t))
      (70210 return dst)
    }
  }
  { scopeless type
    t
  }
  function chpl_typeSupportsPrimitiveCast[70225](arg t[70227]:_any[141](?)) param : _unknown[42] "inline"
  {
    (70230 return(70231 call ||(70233 call ||(70236 call isBoolType t)(70239 call isIntegralType t))(70242 call isRealType t)))
  }
  function :[70246](arg x[70249] :
  bool, arg t[70253] :
  integral) : _unknown[42] "inline" "operator"
  {
    (70257 return(70258 'cast' t x))
  }
  function :[70263](arg x[70266] :
  bool, arg t[70270] :
  chpl_anyreal) : _unknown[42] "inline" "operator"
  {
    (70274 return(70275 'cast' t x))
  }
  function :[70280](arg x[70283] :
  integral, arg t[70287] :
  bool) : _unknown[42] "inline" "operator"
  {
    (70291 return(70292 'cast' t x))
  }
  function :[70297](arg x[70300] :
  integral, arg t[70304] :
  integral) : _unknown[42] "inline" "operator"
  {
    (70308 return(70309 'cast' t x))
  }
  function :[70314](arg x[70317] :
  integral, arg t[70321] :
  chpl_anyreal) : _unknown[42] "inline" "operator"
  {
    (70325 return(70326 'cast' t x))
  }
  function :[70331](arg x[70334] :
  chpl_anyreal, arg t[70338] :
  bool) : _unknown[42] "inline" "operator"
  {
    (70342 return(70343 'cast' t x))
  }
  function :[70348](arg x[70351] :
  chpl_anyreal, arg t[70355] :
  integral) : _unknown[42] "inline" "operator"
  {
    (70359 return(70360 'cast' t x))
  }
  function :[70365](arg x[70368] :
  chpl_anyreal, arg t[70372] :
  chpl_anyreal) : _unknown[42] "inline" "operator"
  {
    (70376 return(70377 'cast' t x))
  }
  function chpl_checkCastAbstractEnumError[70382](arg enumType[70384]:_any[141](?), arg dstType[70386]:_any[141](?)) param : _unknown[42]
  {
    if(70416 call _cond_test(70414 call isAbstractEnumType enumType))
    {
      { scopeless
        (70390 call compilerError(70391 call +(70393 call +(70395 call +(70397 call + "cannot cast abstract enum type '"(70402 call : enumType string[244])) "' to '")(70407 call : dstType string[244])) "'"))
      }
    }
  }
  function :[70423](arg x[70426] :
  enum, arg t[70430] :
  bool) : _unknown[42] throws "inline" "operator" "@unstable"
  {
    (70435 call chpl_checkCastAbstractEnumError(70437 'typeof' x) t)
    (70439 return(70440 call :(70442 call : x int[10]) bool))
  }
  function :[70449](arg x[70452] :
  enum, arg t[70456] :
  enum) : _unknown[42] "inline" "operator"
  {
    (70465 return x)
  }
  where {
    (70459 call ==(70462 'typeof' x) t)
  }
  function :[70470](arg x[70473] :
  enum, arg t[70477] :
  chpl_anyreal) : _unknown[42] throws "inline" "operator" "@unstable"
  {
    (70482 call chpl_checkCastAbstractEnumError(70484 'typeof' x) t)
    (70486 return(70487 call :(70489 call : x int[10]) real[13]))
  }
  function :[70496](arg x[70499] :
  _nilType, arg t[70504] :
  (70502 'to unmanaged class from unknown' class)) : _unknown[42] "inline" "operator"
  {
    (70509 call compilerError(70510 call + "cannot cast nil to "(70515 call : t string[244])))
  }
  function :[70521](arg x[70524] :
  _nilType, arg t[70529] :
  (70527 'to borrowed class from unknown' class)) : _unknown[42] "inline" "operator"
  {
    (70534 call compilerError(70535 call + "cannot cast nil to "(70538 call : t string[244])))
  }
  function chpl_castUnmanagedError[70544](param arg typeStr[70547] :
  string[244]) param : _unknown[42]
  {
    (70552 call compilerError(70553 call +(70555 call + "cannot cast to a '" typeStr) "' with an implicit borrow; try adding an explicit '.borrow()'"))
  }
  function :[70566](arg x[70571] :
  (70569 call _owned class), arg t[70576] :
  (70574 'to unmanaged class from unknown' class)) : _unknown[42] "last resort" "operator"
  {
    (70581 call chpl_castUnmanagedError(70582 call : t string[244]))
  }
  function :[70588](arg x[70594] :
  (70591 call _owned(70593 'to nilable class from type' class)), arg t[70599] :
  (70597 'to unmanaged class from unknown' class)) : _unknown[42] "last resort" "operator"
  {
    (70604 call chpl_castUnmanagedError(70605 call : t string[244]))
  }
  function :[70611](arg x[70616] :
  (70614 call _owned class), arg t[70622] :
  (70619 'to unmanaged class from unknown'(70621 'to nilable class from type' class))) : _unknown[42] "last resort" "operator"
  {
    (70627 call chpl_castUnmanagedError(70628 call : t string[244]))
  }
  function :[70634](arg x[70640] :
  (70637 call _owned(70639 'to nilable class from type' class)), arg t[70646] :
  (70643 'to unmanaged class from unknown'(70645 'to nilable class from type' class))) : _unknown[42] "last resort" "operator"
  {
    (70651 call chpl_castUnmanagedError(70652 call : t string[244]))
  }
  function :[70658](arg x[70663] :
  (70661 call _shared class), arg t[70668] :
  (70666 'to unmanaged class from unknown' class)) : _unknown[42] "last resort" "operator"
  {
    (70673 call chpl_castUnmanagedError(70674 call : t string[244]))
  }
  function :[70680](arg x[70686] :
  (70683 call _shared(70685 'to nilable class from type' class)), arg t[70691] :
  (70689 'to unmanaged class from unknown' class)) : _unknown[42] "last resort" "operator"
  {
    (70696 call chpl_castUnmanagedError(70697 call : t string[244]))
  }
  function :[70703](arg x[70708] :
  (70706 call _shared class), arg t[70714] :
  (70711 'to unmanaged class from unknown'(70713 'to nilable class from type' class))) : _unknown[42] "last resort" "operator"
  {
    (70719 call chpl_castUnmanagedError(70720 call : t string[244]))
  }
  function :[70726](arg x[70732] :
  (70729 call _shared(70731 'to nilable class from type' class)), arg t[70738] :
  (70735 'to unmanaged class from unknown'(70737 'to nilable class from type' class))) : _unknown[42] "last resort" "operator"
  {
    (70743 call chpl_castUnmanagedError(70744 call : t string[244]))
  }
  function :[70750](arg x[70755] :
  (70752 'to borrowed class from unknown'(70754 'to nilable class from type' class)), arg t[70761] :
  (70758 'to unmanaged class from unknown'(70760 'to nilable class from type' class))) : _unknown[42] "inline" "last resort" "operator"
  {
    (70772 return(70773 'cast' t x))
  }
  where {
    (70765 call isSubtype(70767 call _to_unmanaged(70769 'typeof' x)) t)
  }
  function :[70779](arg x[70783] :
  (70781 'to borrowed class from unknown' class), arg t[70789] :
  (70786 'to unmanaged class from unknown'(70788 'to nilable class from type' class))) : _unknown[42] "inline" "last resort" "operator"
  {
    (70802 return(70803 'cast' t x))
  }
  where {
    (70793 call isSubtype(70795 call _to_nonnil(70797 call _to_unmanaged(70799 'typeof' x))) t)
  }
  function :[70809](arg x[70813] :
  (70811 'to borrowed class from unknown' class), arg t[70818] :
  (70816 'to unmanaged class from unknown' class)) : _unknown[42] "inline" "last resort" "operator"
  {
    (70829 return(70830 'cast' t x))
  }
  where {
    (70822 call isSubtype(70824 call _to_unmanaged(70826 'typeof' x)) t)
  }
  function :[70836](arg x[70841] :
  (70838 'to unmanaged class from unknown'(70840 'to nilable class from type' class)), arg t[70846] :
  (70844 'to borrowed class from unknown' class)) : _unknown[42] throws "inline" "operator"
  {
    if(70868 call _cond_test(70864 call == x nil[32]))
    {
      (70858 'throw'(70859 'new'(_chpl_manager = _owned[238](?))(70863 call NilClassError)))
    }
    (70872 return(70873 'cast' t x))
  }
  where {
    (70850 call isSubtype(70852 call _to_nonnil(70854 'typeof' x)) t)
  }
  function :[70879](arg x[70884] :
  (70881 'to borrowed class from unknown'(70883 'to nilable class from type' class)), arg t[70889] :
  (70887 'to borrowed class from unknown' class)) : _unknown[42] throws "inline" "operator"
  {
    if(70911 call _cond_test(70907 call == x nil[32]))
    {
      (70901 'throw'(70902 'new'(_chpl_manager = _owned[238](?))(70906 call NilClassError)))
    }
    (70915 return(70916 'cast' t x))
  }
  where {
    (70893 call isSubtype(70895 call _to_nonnil(70897 'typeof' x)) t)
  }
  function :[70922](arg x[70927] :
  (70924 'to borrowed class from unknown'(70926 'to nilable class from type' class)), arg t[70932] :
  (70930 'to unmanaged class from unknown' class)) : _unknown[42] throws "inline" "last resort" "operator"
  {
    if(70956 call _cond_test(70952 call == x nil[32]))
    {
      (70946 'throw'(70947 'new'(_chpl_manager = _owned[238](?))(70951 call NilClassError)))
    }
    (70960 return(70961 'cast' t x))
  }
  where {
    (70936 call isSubtype(70938 call _to_nonnil(70940 call _to_unmanaged(70942 'typeof' x))) t)
  }
  function :[70967](arg x[70972] :
  (70969 'to borrowed class from unknown'(70971 'to nilable class from type' class)), arg t[70977] :
  (70975 'to borrowed class from unknown' class)) : _unknown[42] throws "inline" "operator"
  {
    if(70999 call _cond_test(70995 call == x nil[32]))
    {
      (70989 'throw'(70990 'new'(_chpl_manager = _owned[238](?))(70994 call NilClassError)))
    }
    { scopeless
      unknown tmp[71004](71005 'dynamic_cast' t x)
      (71009 'end of statement')
    }
    if(71021 call _cond_test(71017 call == tmp nil[32]))
    {
      (71011 'throw'(71012 'new'(_chpl_manager = _owned[238](?))(71016 call ClassCastError)))
    }
    (71025 return(71027 call _to_nonnil(71029 call _to_borrowed tmp)))
  }
  where {
    (70981 call isProperSubtype t(70984 call _to_nonnil(70986 'typeof' x)))
  }
  function :[71034](arg x[71039] :
  (71036 'to borrowed class from unknown'(71038 'to nilable class from type' class)), arg t[71045] :
  (71042 'to borrowed class from unknown'(71044 'to nilable class from type' class))) : _unknown[42] "inline" "operator"
  {
    if(71061 call _cond_test(71057 call == x nil[32]))
    {
      (71055 return nil[32])
    }
    { scopeless
      unknown tmp[71066](71067 'dynamic_cast' t x)
      (71071 'end of statement')
    }
    (71072 return(71074 call _to_nilable(71076 call _to_borrowed tmp)))
  }
  where {
    (71049 call isProperSubtype t(71052 'typeof' x))
  }
  function :[71081](arg x[71086] :
  (71083 'to borrowed class from unknown'(71085 'to nilable class from type' class)), arg t[71091] :
  (71089 'to unmanaged class from unknown' class)) : _unknown[42] throws "inline" "last resort" "operator"
  {
    if(71115 call _cond_test(71111 call == x nil[32]))
    {
      (71105 'throw'(71106 'new'(_chpl_manager = _owned[238](?))(71110 call NilClassError)))
    }
    { scopeless
      unknown tmp[71120](71121 'dynamic_cast' t x)
      (71125 'end of statement')
    }
    if(71137 call _cond_test(71133 call == tmp nil[32]))
    {
      (71127 'throw'(71128 'new'(_chpl_manager = _owned[238](?))(71132 call ClassCastError)))
    }
    (71141 return(71143 call _to_nonnil(71145 call _to_unmanaged tmp)))
  }
  where {
    (71095 call isProperSubtype t(71098 call _to_nonnil(71100 call _to_unmanaged(71102 'typeof' x))))
  }
  function :[71150](arg x[71155] :
  (71152 'to borrowed class from unknown'(71154 'to nilable class from type' class)), arg t[71161] :
  (71158 'to unmanaged class from unknown'(71160 'to nilable class from type' class))) : _unknown[42] "inline" "last resort" "operator"
  {
    if(71179 call _cond_test(71175 call == x nil[32]))
    {
      (71173 return nil[32])
    }
    { scopeless
      unknown tmp[71184](71185 'dynamic_cast' t x)
      (71189 'end of statement')
    }
    (71190 return(71192 call _to_nilable(71194 call _to_unmanaged tmp)))
  }
  where {
    (71165 call isProperSubtype t(71168 call _to_unmanaged(71170 'typeof' x)))
  }
  function :[71199](arg x[71203] :
  (71201 'to borrowed class from unknown' class), arg t[71209] :
  (71206 'to unmanaged class from unknown'(71208 'to nilable class from type' class))) : _unknown[42] "inline" "last resort" "operator"
  {
    if(71229 call _cond_test(71225 call == x nil[32]))
    {
      (71223 return nil[32])
    }
    { scopeless
      unknown tmp[71234](71235 'dynamic_cast' t x)
      (71239 'end of statement')
    }
    (71240 return(71242 call _to_nilable(71244 call _to_unmanaged tmp)))
  }
  where {
    (71213 call isProperSubtype(71215 call _to_nonnil(71217 call _to_borrowed t))(71220 'typeof' x))
  }
  function :[71249](arg x[71252] :
  bool, arg t[71256] :
  chpl_anycomplex) : _unknown[42] "inline" "operator"
  {
    (71260 return(71261 call :(71266 call _build_tuple x 0) t))
  }
  function :[71271](arg x[71274] :
  integral, arg t[71278] :
  chpl_anycomplex) : _unknown[42] "inline" "operator"
  {
    (71282 return(71283 call :(71288 call _build_tuple x 0) t))
  }
  function :[71293](arg x[71296] :
  chpl_anyreal, arg t[71300] :
  chpl_anycomplex) : _unknown[42] "inline" "operator"
  {
    (71304 return(71305 call :(71310 call _build_tuple x 0) t))
  }
  function :[71315](arg x[71318] :
  chpl_anyimag, arg t[71322] :
  chpl_anycomplex) : _unknown[42] "inline" "operator"
  {
    (71326 return(71327 call :(71334 call _build_tuple 0(71332 call _i2r x)) t))
  }
  function :[71339](arg x[71342] :
  chpl_anycomplex, arg t[71346] :
  chpl_anycomplex) : _unknown[42] "inline" "operator"
  {
    (71350 return(71351 call :(71362 call _build_tuple(71355 call . x c"re")(71359 call . x c"im")) t))
  }
  function :[71367](arg x[71370] :
  enum, arg t[71374] :
  chpl_anycomplex) : _unknown[42] throws "inline" "operator" "@unstable"
  {
    (71379 call chpl_checkCastAbstractEnumError(71381 'typeof' x) t)
    (71383 return(71384 call :(71392 call _build_tuple(71387 call : x real[13]) 0) t))
  }
  function :[71397](arg x[71400] :
  bool, arg t[71404] :
  chpl_anyimag) : _unknown[42] "inline" "operator"
  {
    (71408 return(71420 IfExpr  x then
    { scopeless
      (71410 call : 1.0i t)
    } else
    { scopeless
      (71416 call : 0.0i t)
    } ))
  }
  function :[71425](arg x[71428] :
  integral, arg t[71432] :
  chpl_anyimag) : _unknown[42] "inline" "operator"
  {
    (71436 return(71437 'cast' t x))
  }
  function :[71442](arg x[71445] :
  chpl_anyreal, arg t[71449] :
  chpl_anyimag) : _unknown[42] "inline" "operator"
  {
    (71453 return(71454 'cast' t x))
  }
  function :[71459](arg x[71462] :
  chpl_anyimag, arg t[71466] :
  chpl_anyimag) : _unknown[42] "inline" "operator"
  {
    (71470 return(71471 'cast' t x))
  }
  function :[71476](arg x[71479] :
  chpl_anycomplex, arg t[71483] :
  chpl_anyimag) : _unknown[42] "inline" "operator"
  {
    (71487 return(71488 'cast' t(71491 call . x c"im")))
  }
  function :[71496](arg x[71499] :
  enum, arg t[71503] :
  chpl_anyimag) : _unknown[42] throws "inline" "operator" "@unstable"
  {
    (71508 call chpl_checkCastAbstractEnumError(71510 'typeof' x) t)
    (71512 return(71513 call :(71515 call : x real[13]) imag))
  }
  function :[71522](arg x[71525] :
  chpl_anycomplex, arg t[71529] :
  chpl_anyreal) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown y[71534] t
      (71537 'end of statement')
    }
    (71538 call = y(71541 call :(71544 call . x c"re") t))
    (71548 return y)
  }
  function :[71552](arg x[71555] :
  chpl_anycomplex, arg t[71559] :
  integral) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown y[71564] t
      (71567 'end of statement')
    }
    (71568 call = y(71571 call :(71574 call . x c"re") t))
    (71578 return y)
  }
  function :[71582](arg x[71585] :
  chpl_anyimag, arg t[71589] :
  chpl_anyreal) : _unknown[42] "inline" "operator"
  {
    (71593 return(71594 'cast' t x))
  }
  function :[71599](arg x[71602] :
  chpl_anyimag, arg t[71606] :
  integral) : _unknown[42] "inline" "operator"
  {
    (71610 return(71611 'cast' t x))
  }
  function :[71616](arg x[71619] :
  chpl_anyimag, arg t[71623] :
  bool) : _unknown[42] "inline" "operator"
  {
    (71627 return(71634 IfExpr (71628 call != x 0.0i) then
    { scopeless
      1
    } else
    { scopeless
      0
    } ))
  }
  function chpl__initCopy[71639](arg t[71641]:_any[141](?), arg definedConst[71644] :
  bool) type : _unknown[42] "init copy fn" "inline"
  {
    (71649 call compilerError "illegal assignment of type to value")
    (71653 return t)
  }
  function chpl__initCopy[71657](arg x[71660] :
  _tuple, arg definedConst[71664] :
  bool) : _unknown[42] "compiler generated" "init copy fn" "inline" "last resort"
  {
  }
  function chpl__initCopy[71670](const arg x[71672]:_any[141](?), arg definedConst[71675] :
  bool) : _unknown[42] "compiler generated" "init copy fn" "inline" "last resort" "suppress lvalue error"
  {
    (71679 return x)
  }
  function chpl__autoCopy[71683](arg x[71686] :
  _tuple, arg definedConst[71690] :
  bool) : _unknown[42] "auto copy fn" "compiler generated" "inline" "last resort"
  {
  }
  function chpl__unref[71696](arg x[71699] :
  _tuple) : _unknown[42] "compiler generated" "inline" "last resort" "unref fn"
  {
  }
  function chpl__autoCopy[71705](arg ir[71708] :
  _iteratorRecord, arg definedConst[71712] :
  bool) : _unknown[42] "auto copy fn" "compiler generated" "inline"
  {
    (71716 return ir)
  }
  function chpl__autoCopy[71720](const arg x[71722]:_any[141](?), arg definedConst[71725] :
  bool) : _unknown[42] "auto copy fn" "compiler generated" "inline" "last resort" "suppress lvalue error"
  {
    (71729 return(71731 call chpl__initCopy x definedConst))
  }
  function chpl__autoDestroy[71736](arg x[71740] :
  (71738 'to borrowed class from unknown' RootClass)) : _unknown[42] "auto destroy fn" "compiler generated" "inline"
  {
  }
  function chpl__autoDestroy[71746](arg t[71748]:_any[141](?)) : _unknown[42] "auto destroy fn" "compiler generated" "inline" "last resort"
  {
  }
  function chpl__autoDestroy[71753](arg x[71755]:_any[141](?)) : _unknown[42] "auto destroy fn" "compiler generated" "inline" "last resort"
  {
    (71758 'call destructor' x)
  }
  function chpl__autoDestroy[71762](arg ir[71765] :
  _iteratorRecord) : _unknown[42] "auto destroy fn" "inline"
  {
  }
  function chpl__autoDestroy[71771](arg x[71774] :
  _distribution) : _unknown[42] "auto destroy fn" "dont disable remote value forwarding" "removable auto destroy"
  {
    (71778 'call destructor' x)
  }
  function chpl__autoDestroy[71782](arg x[71785] :
  _domain) : _unknown[42] "auto destroy fn" "dont disable remote value forwarding" "removable auto destroy"
  {
    (71789 'call destructor' x)
  }
  function chpl__autoDestroy[71793](arg x[71798] :
  (71796 call chpl__buildArrayRuntimeType nil[32])) : _unknown[42] "auto destroy fn" "dont disable remote value forwarding" "removable auto destroy"
  {
    (71802 'call destructor' x)
  }
  function chpl__delete[71806](const arg arg[71808]:_any[141](?)) : _unknown[42] "no borrow convert"
  {
    if(71821 call _cond_test(71818 call chpl_isDdata(71820 'typeof' arg)))
    {
      { scopeless
        (71812 call compilerError "cannot delete data class")
      }
    }
    if(71837 call _cond_test(71832 call ==(71835 'typeof' arg) _nilType))
    {
      { scopeless
        (71827 call compilerError "should not delete 'nil'")
      }
    }
    if(71853 call _cond_test(71849 call isSubtype(71851 'typeof' arg) _owned))
    {
      { scopeless
        (71843 call compilerError "'delete' is not allowed on an owned class type")
      }
    }
    if(71869 call _cond_test(71865 call isSubtype(71867 'typeof' arg) _shared))
    {
      { scopeless
        (71859 call compilerError "'delete' is not allowed on a shared class type")
      }
    }
    if(71883 call _cond_test(71881 call isRecord arg))
    {
      { scopeless
        (71875 call compilerError "'delete' is not allowed on records")
      }
    }
    if(71908 call _cond_test(71899 call !(71902 call isCoercible(71904 'typeof' arg)(71905 'to borrowed class from unknown'(71907 'to nilable class from type' class)))))
    {
      { scopeless
        (71889 call compilerError "'delete' is not allowed on non-class type "(71893 call :(71896 'typeof' arg) string[244]))
      }
    }
    if(71928 call _cond_test(71919 call !(71922 call isCoercible(71924 'typeof' arg)(71925 'to unmanaged class from unknown'(71927 'to nilable class from type' class)))))
    {
      { scopeless
        (71914 call compilerError "'delete' can only be applied to unmanaged classes")
      }
    }
    if(71964 call _cond_test(71960 call != arg nil[32]))
    {
      (71942 call(71939 call .(71934 call postfix! arg) c"deinit"))
      {
        const tmp[71952] "const" "temp"
        (71953 'move' tmp[71952](71950 'deref'(71949 '_wide_get_locale' arg)))
        { scopeless
          (71945 call chpl_here_free(71946 '_wide_get_addr' arg))
        }
        (71956 'elided on block' 0 tmp[71952])
      }
    }
  }
  function chpl__delete[71970](const arg arr[71975] :
  (71973 call chpl__buildArrayRuntimeType nil[32])) : _unknown[42]
  {
    Forall[71988] {
      induction variables:
        
        unknown a[71979] "index var" "insert auto destroy"
      iterated expressions:
        arr
      shadow variables:
      other variables
        forall body
      {
        (71983 call chpl__delete a)
      }
    }
  }
  function chpl__delete[71993](arg arg[71995]:_any[141](?), const arg args[71998]:_any[141](?) ...) : _unknown[42]
  {
    (72003 call chpl__delete arg)
    {
      unknown i[72005] "index var" 0
      unknown tmp[72023] "maybe param" "temp"
      (72035 'move' tmp[72023](72033 call chpl_compute_low_param_loop_bound 0(72008 call -(72011 call . args c"size") 1)))
      unknown tmp[72024] "maybe param" "temp"
      (72048 'move' tmp[72024](72046 call chpl_compute_high_param_loop_bound 0(72040 call -(72042 call . args c"size") 1)))
      unknown tmp[72025] "maybe param" "temp"
      (72051 'move' tmp[72025] 1)
      ParamForLoop[72053]
      { i[72005] tmp[72023] tmp[72024] tmp[72025]
        { scopeless
          (72018 call chpl__delete(72020 call args i))
        }
      }
      label _unused_continueLabel[72027]
      label _breakLabel[72026]
    }
  }
  function func[72064]() type : _unknown[42] "deprecated" "inline"
  {
    (72067 return(72068 'create fn type' void[4]))
  }
  function func[72072](arg rettype[72074]:_any[141](?)) type : _unknown[42] "deprecated" "inline"
  {
    (72077 return(72078 'create fn type' rettype))
  }
  function func[72082](arg t[72086]:_any[141](?) ..., arg rettype[72089]:_any[141](?)) type : _unknown[42] "deprecated" "inline"
  {
    (72092 return(72093 'create fn type'(72095 'expand_tuple' t) rettype))
  }
  function isIterator[72099](arg ic[72102] :
  _iteratorClass) param : _unknown[42]
  {
    (72106 return 1)
  }
  function isIterator[72110](arg ir[72113] :
  _iteratorRecord) param : _unknown[42]
  {
    (72117 return 1)
  }
  function isIterator[72121](arg not_an_iterator[72123]:_any[141](?)) param : _unknown[42]
  {
    (72126 return 0)
  }
  function +=[72130](ref arg lhs[72135] :
  (72133 call int[10] 8), arg rhs[72141] :
  (72139 call int[10] 8)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72145 '+=' lhs rhs)
  }
  function +=[72150](ref arg lhs[72155] :
  (72153 call int[10] 16), arg rhs[72161] :
  (72159 call int[10] 16)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72165 '+=' lhs rhs)
  }
  function +=[72170](ref arg lhs[72175] :
  (72173 call int[10] 32), arg rhs[72181] :
  (72179 call int[10] 32)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72185 '+=' lhs rhs)
  }
  function +=[72190](ref arg lhs[72195] :
  (72193 call int[10] 64), arg rhs[72201] :
  (72199 call int[10] 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72205 '+=' lhs rhs)
  }
  function +=[72210](ref arg lhs[72215] :
  (72213 call uint[86] 8), arg rhs[72221] :
  (72219 call uint[86] 8)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72225 '+=' lhs rhs)
  }
  function +=[72230](ref arg lhs[72235] :
  (72233 call uint[86] 16), arg rhs[72241] :
  (72239 call uint[86] 16)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72245 '+=' lhs rhs)
  }
  function +=[72250](ref arg lhs[72255] :
  (72253 call uint[86] 32), arg rhs[72261] :
  (72259 call uint[86] 32)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72265 '+=' lhs rhs)
  }
  function +=[72270](ref arg lhs[72275] :
  (72273 call uint[86] 64), arg rhs[72281] :
  (72279 call uint[86] 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72285 '+=' lhs rhs)
  }
  function +=[72290](ref arg lhs[72295] :
  (72293 call real[13] 32), arg rhs[72301] :
  (72299 call real[13] 32)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72305 '+=' lhs rhs)
  }
  function +=[72310](ref arg lhs[72315] :
  (72313 call real[13] 64), arg rhs[72321] :
  (72319 call real[13] 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72325 '+=' lhs rhs)
  }
  function +=[72330](ref arg lhs[72335] :
  (72333 call imag 32), arg rhs[72341] :
  (72339 call imag 32)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72345 '+=' lhs rhs)
  }
  function +=[72350](ref arg lhs[72355] :
  (72353 call imag 64), arg rhs[72361] :
  (72359 call imag 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72365 '+=' lhs rhs)
  }
  function +=[72370](ref arg lhs[72375] :
  (72373 call complex[111] 64), arg rhs[72381] :
  (72379 call complex[111] 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72385 call = lhs(72388 call + lhs rhs))
  }
  function +=[72394](ref arg lhs[72399] :
  (72397 call complex[111] 128), arg rhs[72405] :
  (72403 call complex[111] 128)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72409 call = lhs(72412 call + lhs rhs))
  }
  function +=[72418](ref arg lhs[72420]:_any[141](?), arg rhs[72422]:_any[141](?)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72437 call = lhs(72440 call + lhs rhs))
  }
  where {
    (72424 call !(72426 call &&(72429 call isNumericType(72431 'typeof' lhs))(72433 call isNumericType(72435 'typeof' rhs))))
  }
  function -=[72447](ref arg lhs[72452] :
  (72450 call int[10] 8), arg rhs[72458] :
  (72456 call int[10] 8)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72462 '-=' lhs rhs)
  }
  function -=[72467](ref arg lhs[72472] :
  (72470 call int[10] 16), arg rhs[72478] :
  (72476 call int[10] 16)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72482 '-=' lhs rhs)
  }
  function -=[72487](ref arg lhs[72492] :
  (72490 call int[10] 32), arg rhs[72498] :
  (72496 call int[10] 32)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72502 '-=' lhs rhs)
  }
  function -=[72507](ref arg lhs[72512] :
  (72510 call int[10] 64), arg rhs[72518] :
  (72516 call int[10] 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72522 '-=' lhs rhs)
  }
  function -=[72527](ref arg lhs[72532] :
  (72530 call uint[86] 8), arg rhs[72538] :
  (72536 call uint[86] 8)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72542 '-=' lhs rhs)
  }
  function -=[72547](ref arg lhs[72552] :
  (72550 call uint[86] 16), arg rhs[72558] :
  (72556 call uint[86] 16)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72562 '-=' lhs rhs)
  }
  function -=[72567](ref arg lhs[72572] :
  (72570 call uint[86] 32), arg rhs[72578] :
  (72576 call uint[86] 32)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72582 '-=' lhs rhs)
  }
  function -=[72587](ref arg lhs[72592] :
  (72590 call uint[86] 64), arg rhs[72598] :
  (72596 call uint[86] 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72602 '-=' lhs rhs)
  }
  function -=[72607](ref arg lhs[72612] :
  (72610 call real[13] 32), arg rhs[72618] :
  (72616 call real[13] 32)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72622 '-=' lhs rhs)
  }
  function -=[72627](ref arg lhs[72632] :
  (72630 call real[13] 64), arg rhs[72638] :
  (72636 call real[13] 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72642 '-=' lhs rhs)
  }
  function -=[72647](ref arg lhs[72652] :
  (72650 call imag 32), arg rhs[72658] :
  (72656 call imag 32)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72662 '-=' lhs rhs)
  }
  function -=[72667](ref arg lhs[72672] :
  (72670 call imag 64), arg rhs[72678] :
  (72676 call imag 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72682 '-=' lhs rhs)
  }
  function -=[72687](ref arg lhs[72692] :
  (72690 call complex[111] 64), arg rhs[72698] :
  (72696 call complex[111] 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72702 call = lhs(72705 call - lhs rhs))
  }
  function -=[72711](ref arg lhs[72716] :
  (72714 call complex[111] 128), arg rhs[72722] :
  (72720 call complex[111] 128)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72726 call = lhs(72729 call - lhs rhs))
  }
  function -=[72735](ref arg lhs[72737]:_any[141](?), arg rhs[72739]:_any[141](?)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72754 call = lhs(72757 call - lhs rhs))
  }
  where {
    (72741 call !(72743 call &&(72746 call isNumericType(72748 'typeof' lhs))(72750 call isNumericType(72752 'typeof' rhs))))
  }
  function *=[72764](ref arg lhs[72769] :
  (72767 call int[10] 8), arg rhs[72775] :
  (72773 call int[10] 8)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72779 '*=' lhs rhs)
  }
  function *=[72784](ref arg lhs[72789] :
  (72787 call int[10] 16), arg rhs[72795] :
  (72793 call int[10] 16)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72799 '*=' lhs rhs)
  }
  function *=[72804](ref arg lhs[72809] :
  (72807 call int[10] 32), arg rhs[72815] :
  (72813 call int[10] 32)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72819 '*=' lhs rhs)
  }
  function *=[72824](ref arg lhs[72829] :
  (72827 call int[10] 64), arg rhs[72835] :
  (72833 call int[10] 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72839 '*=' lhs rhs)
  }
  function *=[72844](ref arg lhs[72849] :
  (72847 call uint[86] 8), arg rhs[72855] :
  (72853 call uint[86] 8)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72859 '*=' lhs rhs)
  }
  function *=[72864](ref arg lhs[72869] :
  (72867 call uint[86] 16), arg rhs[72875] :
  (72873 call uint[86] 16)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72879 '*=' lhs rhs)
  }
  function *=[72884](ref arg lhs[72889] :
  (72887 call uint[86] 32), arg rhs[72895] :
  (72893 call uint[86] 32)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72899 '*=' lhs rhs)
  }
  function *=[72904](ref arg lhs[72909] :
  (72907 call uint[86] 64), arg rhs[72915] :
  (72913 call uint[86] 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72919 '*=' lhs rhs)
  }
  function *=[72924](ref arg lhs[72929] :
  (72927 call real[13] 32), arg rhs[72935] :
  (72933 call real[13] 32)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72939 '*=' lhs rhs)
  }
  function *=[72944](ref arg lhs[72949] :
  (72947 call real[13] 64), arg rhs[72955] :
  (72953 call real[13] 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72959 '*=' lhs rhs)
  }
  function isIntegralOrRealType[72964](arg t[72966]:_any[141](?)) param : _unknown[42] "private"
  {
    (72969 return(72970 call ||(72973 call isIntegralType t)(72976 call isRealType t)))
  }
  function *=[72980](ref arg lhs[72982]:_any[141](?), arg rhs[72984]:_any[141](?)) : _unknown[42] "assignop" "inline" "operator"
  {
    (72999 call = lhs(73002 call * lhs rhs))
  }
  where {
    (72986 call !(72988 call &&(72991 call isIntegralOrRealType(72993 'typeof' lhs))(72995 call isIntegralOrRealType(72997 'typeof' rhs))))
  }
  function /=[73009](ref arg lhs[73014] :
  (73012 call int[10] 8), arg rhs[73020] :
  (73018 call int[10] 8)) : _unknown[42] "assignop" "inline" "operator"
  {
    if(73038 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(73032 call _cond_test(73028 call == rhs 0))
        {
          { scopeless
            (73025 call halt "Attempt to divide by zero")
          }
        }
      }
    }
    (73043 '/=' lhs rhs)
  }
  function /=[73048](ref arg lhs[73053] :
  (73051 call int[10] 16), arg rhs[73059] :
  (73057 call int[10] 16)) : _unknown[42] "assignop" "inline" "operator"
  {
    if(73077 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(73071 call _cond_test(73067 call == rhs 0))
        {
          { scopeless
            (73064 call halt "Attempt to divide by zero")
          }
        }
      }
    }
    (73082 '/=' lhs rhs)
  }
  function /=[73087](ref arg lhs[73092] :
  (73090 call int[10] 32), arg rhs[73098] :
  (73096 call int[10] 32)) : _unknown[42] "assignop" "inline" "operator"
  {
    if(73116 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(73110 call _cond_test(73106 call == rhs 0))
        {
          { scopeless
            (73103 call halt "Attempt to divide by zero")
          }
        }
      }
    }
    (73121 '/=' lhs rhs)
  }
  function /=[73126](ref arg lhs[73131] :
  (73129 call int[10] 64), arg rhs[73137] :
  (73135 call int[10] 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    if(73155 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(73149 call _cond_test(73145 call == rhs 0))
        {
          { scopeless
            (73142 call halt "Attempt to divide by zero")
          }
        }
      }
    }
    (73160 '/=' lhs rhs)
  }
  function /=[73165](ref arg lhs[73170] :
  (73168 call uint[86] 8), arg rhs[73176] :
  (73174 call uint[86] 8)) : _unknown[42] "assignop" "inline" "operator"
  {
    if(73194 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(73188 call _cond_test(73184 call == rhs 0))
        {
          { scopeless
            (73181 call halt "Attempt to divide by zero")
          }
        }
      }
    }
    (73199 '/=' lhs rhs)
  }
  function /=[73204](ref arg lhs[73209] :
  (73207 call uint[86] 16), arg rhs[73215] :
  (73213 call uint[86] 16)) : _unknown[42] "assignop" "inline" "operator"
  {
    if(73233 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(73227 call _cond_test(73223 call == rhs 0))
        {
          { scopeless
            (73220 call halt "Attempt to divide by zero")
          }
        }
      }
    }
    (73238 '/=' lhs rhs)
  }
  function /=[73243](ref arg lhs[73248] :
  (73246 call uint[86] 32), arg rhs[73254] :
  (73252 call uint[86] 32)) : _unknown[42] "assignop" "inline" "operator"
  {
    if(73272 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(73266 call _cond_test(73262 call == rhs 0))
        {
          { scopeless
            (73259 call halt "Attempt to divide by zero")
          }
        }
      }
    }
    (73277 '/=' lhs rhs)
  }
  function /=[73282](ref arg lhs[73287] :
  (73285 call uint[86] 64), arg rhs[73293] :
  (73291 call uint[86] 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    if(73311 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(73305 call _cond_test(73301 call == rhs 0))
        {
          { scopeless
            (73298 call halt "Attempt to divide by zero")
          }
        }
      }
    }
    (73316 '/=' lhs rhs)
  }
  function /=[73321](ref arg lhs[73326] :
  (73324 call real[13] 32), arg rhs[73332] :
  (73330 call real[13] 32)) : _unknown[42] "assignop" "inline" "operator"
  {
    (73336 '/=' lhs rhs)
  }
  function /=[73341](ref arg lhs[73346] :
  (73344 call real[13] 64), arg rhs[73352] :
  (73350 call real[13] 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    (73356 '/=' lhs rhs)
  }
  function /=[73361](ref arg lhs[73363]:_any[141](?), arg rhs[73365]:_any[141](?)) : _unknown[42] "assignop" "inline" "operator"
  {
    (73380 call = lhs(73383 call / lhs rhs))
  }
  where {
    (73367 call !(73369 call &&(73372 call isIntegralOrRealType(73374 'typeof' lhs))(73376 call isIntegralOrRealType(73378 'typeof' rhs))))
  }
  function %=[73390](ref arg lhs[73395] :
  (73393 call int[10] 8), arg rhs[73401] :
  (73399 call int[10] 8)) : _unknown[42] "assignop" "inline" "operator"
  {
    if(73419 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(73413 call _cond_test(73409 call == rhs 0))
        {
          { scopeless
            (73406 call halt "Attempt to compute a modulus by zero")
          }
        }
      }
    }
    (73424 '%=' lhs rhs)
  }
  function %=[73429](ref arg lhs[73434] :
  (73432 call int[10] 16), arg rhs[73440] :
  (73438 call int[10] 16)) : _unknown[42] "assignop" "inline" "operator"
  {
    if(73458 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(73452 call _cond_test(73448 call == rhs 0))
        {
          { scopeless
            (73445 call halt "Attempt to compute a modulus by zero")
          }
        }
      }
    }
    (73463 '%=' lhs rhs)
  }
  function %=[73468](ref arg lhs[73473] :
  (73471 call int[10] 32), arg rhs[73479] :
  (73477 call int[10] 32)) : _unknown[42] "assignop" "inline" "operator"
  {
    if(73497 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(73491 call _cond_test(73487 call == rhs 0))
        {
          { scopeless
            (73484 call halt "Attempt to compute a modulus by zero")
          }
        }
      }
    }
    (73502 '%=' lhs rhs)
  }
  function %=[73507](ref arg lhs[73512] :
  (73510 call int[10] 64), arg rhs[73518] :
  (73516 call int[10] 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    if(73536 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(73530 call _cond_test(73526 call == rhs 0))
        {
          { scopeless
            (73523 call halt "Attempt to compute a modulus by zero")
          }
        }
      }
    }
    (73541 '%=' lhs rhs)
  }
  function %=[73546](ref arg lhs[73551] :
  (73549 call uint[86] 8), arg rhs[73557] :
  (73555 call uint[86] 8)) : _unknown[42] "assignop" "inline" "operator"
  {
    if(73575 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(73569 call _cond_test(73565 call == rhs 0))
        {
          { scopeless
            (73562 call halt "Attempt to compute a modulus by zero")
          }
        }
      }
    }
    (73580 '%=' lhs rhs)
  }
  function %=[73585](ref arg lhs[73590] :
  (73588 call uint[86] 16), arg rhs[73596] :
  (73594 call uint[86] 16)) : _unknown[42] "assignop" "inline" "operator"
  {
    if(73614 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(73608 call _cond_test(73604 call == rhs 0))
        {
          { scopeless
            (73601 call halt "Attempt to compute a modulus by zero")
          }
        }
      }
    }
    (73619 '%=' lhs rhs)
  }
  function %=[73624](ref arg lhs[73629] :
  (73627 call uint[86] 32), arg rhs[73635] :
  (73633 call uint[86] 32)) : _unknown[42] "assignop" "inline" "operator"
  {
    if(73653 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(73647 call _cond_test(73643 call == rhs 0))
        {
          { scopeless
            (73640 call halt "Attempt to compute a modulus by zero")
          }
        }
      }
    }
    (73658 '%=' lhs rhs)
  }
  function %=[73663](ref arg lhs[73668] :
  (73666 call uint[86] 64), arg rhs[73674] :
  (73672 call uint[86] 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    if(73692 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(73686 call _cond_test(73682 call == rhs 0))
        {
          { scopeless
            (73679 call halt "Attempt to compute a modulus by zero")
          }
        }
      }
    }
    (73697 '%=' lhs rhs)
  }
  function %=[73702](ref arg lhs[73704]:_any[141](?), arg rhs[73706]:_any[141](?)) : _unknown[42] "assignop" "inline" "operator"
  {
    (73721 call = lhs(73724 call % lhs rhs))
  }
  where {
    (73708 call !(73710 call &&(73713 call isIntegralOrRealType(73715 'typeof' lhs))(73717 call isIntegralOrRealType(73719 'typeof' rhs))))
  }
  function **=[73731](ref arg lhs[73733]:_any[141](?), arg rhs[73735]:_any[141](?)) : _unknown[42] "assignop" "inline" "operator"
  {
    (73738 call = lhs(73741 call ** lhs rhs))
  }
  function &=[73747](ref arg lhs[73752] :
  (73750 call int[10] 8), arg rhs[73758] :
  (73756 call int[10] 8)) : _unknown[42] "assignop" "inline" "operator"
  {
    (73762 '&=' lhs rhs)
  }
  function &=[73767](ref arg lhs[73772] :
  (73770 call int[10] 16), arg rhs[73778] :
  (73776 call int[10] 16)) : _unknown[42] "assignop" "inline" "operator"
  {
    (73782 '&=' lhs rhs)
  }
  function &=[73787](ref arg lhs[73792] :
  (73790 call int[10] 32), arg rhs[73798] :
  (73796 call int[10] 32)) : _unknown[42] "assignop" "inline" "operator"
  {
    (73802 '&=' lhs rhs)
  }
  function &=[73807](ref arg lhs[73812] :
  (73810 call int[10] 64), arg rhs[73818] :
  (73816 call int[10] 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    (73822 '&=' lhs rhs)
  }
  function &=[73827](ref arg lhs[73832] :
  (73830 call uint[86] 8), arg rhs[73838] :
  (73836 call uint[86] 8)) : _unknown[42] "assignop" "inline" "operator"
  {
    (73842 '&=' lhs rhs)
  }
  function &=[73847](ref arg lhs[73852] :
  (73850 call uint[86] 16), arg rhs[73858] :
  (73856 call uint[86] 16)) : _unknown[42] "assignop" "inline" "operator"
  {
    (73862 '&=' lhs rhs)
  }
  function &=[73867](ref arg lhs[73872] :
  (73870 call uint[86] 32), arg rhs[73878] :
  (73876 call uint[86] 32)) : _unknown[42] "assignop" "inline" "operator"
  {
    (73882 '&=' lhs rhs)
  }
  function &=[73887](ref arg lhs[73892] :
  (73890 call uint[86] 64), arg rhs[73898] :
  (73896 call uint[86] 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    (73902 '&=' lhs rhs)
  }
  function &=[73907](ref arg lhs[73909]:_any[141](?), arg rhs[73911]:_any[141](?)) : _unknown[42] "assignop" "inline" "operator"
  {
    (73926 call = lhs(73929 call & lhs rhs))
  }
  where {
    (73913 call !(73915 call &&(73918 call isNumericType(73920 'typeof' lhs))(73922 call isNumericType(73924 'typeof' rhs))))
  }
  function |=[73936](ref arg lhs[73941] :
  (73939 call int[10] 8), arg rhs[73947] :
  (73945 call int[10] 8)) : _unknown[42] "assignop" "inline" "operator"
  {
    (73951 '|=' lhs rhs)
  }
  function |=[73956](ref arg lhs[73961] :
  (73959 call int[10] 16), arg rhs[73967] :
  (73965 call int[10] 16)) : _unknown[42] "assignop" "inline" "operator"
  {
    (73971 '|=' lhs rhs)
  }
  function |=[73976](ref arg lhs[73981] :
  (73979 call int[10] 32), arg rhs[73987] :
  (73985 call int[10] 32)) : _unknown[42] "assignop" "inline" "operator"
  {
    (73991 '|=' lhs rhs)
  }
  function |=[73996](ref arg lhs[74001] :
  (73999 call int[10] 64), arg rhs[74007] :
  (74005 call int[10] 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    (74011 '|=' lhs rhs)
  }
  function |=[74016](ref arg lhs[74021] :
  (74019 call uint[86] 8), arg rhs[74027] :
  (74025 call uint[86] 8)) : _unknown[42] "assignop" "inline" "operator"
  {
    (74031 '|=' lhs rhs)
  }
  function |=[74036](ref arg lhs[74041] :
  (74039 call uint[86] 16), arg rhs[74047] :
  (74045 call uint[86] 16)) : _unknown[42] "assignop" "inline" "operator"
  {
    (74051 '|=' lhs rhs)
  }
  function |=[74056](ref arg lhs[74061] :
  (74059 call uint[86] 32), arg rhs[74067] :
  (74065 call uint[86] 32)) : _unknown[42] "assignop" "inline" "operator"
  {
    (74071 '|=' lhs rhs)
  }
  function |=[74076](ref arg lhs[74081] :
  (74079 call uint[86] 64), arg rhs[74087] :
  (74085 call uint[86] 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    (74091 '|=' lhs rhs)
  }
  function |=[74096](ref arg lhs[74098]:_any[141](?), arg rhs[74100]:_any[141](?)) : _unknown[42] "assignop" "inline" "operator"
  {
    (74115 call = lhs(74118 call | lhs rhs))
  }
  where {
    (74102 call !(74104 call &&(74107 call isNumericType(74109 'typeof' lhs))(74111 call isNumericType(74113 'typeof' rhs))))
  }
  function ^=[74125](ref arg lhs[74130] :
  (74128 call int[10] 8), arg rhs[74136] :
  (74134 call int[10] 8)) : _unknown[42] "assignop" "inline" "operator"
  {
    (74140 '^=' lhs rhs)
  }
  function ^=[74145](ref arg lhs[74150] :
  (74148 call int[10] 16), arg rhs[74156] :
  (74154 call int[10] 16)) : _unknown[42] "assignop" "inline" "operator"
  {
    (74160 '^=' lhs rhs)
  }
  function ^=[74165](ref arg lhs[74170] :
  (74168 call int[10] 32), arg rhs[74176] :
  (74174 call int[10] 32)) : _unknown[42] "assignop" "inline" "operator"
  {
    (74180 '^=' lhs rhs)
  }
  function ^=[74185](ref arg lhs[74190] :
  (74188 call int[10] 64), arg rhs[74196] :
  (74194 call int[10] 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    (74200 '^=' lhs rhs)
  }
  function ^=[74205](ref arg lhs[74210] :
  (74208 call uint[86] 8), arg rhs[74216] :
  (74214 call uint[86] 8)) : _unknown[42] "assignop" "inline" "operator"
  {
    (74220 '^=' lhs rhs)
  }
  function ^=[74225](ref arg lhs[74230] :
  (74228 call uint[86] 16), arg rhs[74236] :
  (74234 call uint[86] 16)) : _unknown[42] "assignop" "inline" "operator"
  {
    (74240 '^=' lhs rhs)
  }
  function ^=[74245](ref arg lhs[74250] :
  (74248 call uint[86] 32), arg rhs[74256] :
  (74254 call uint[86] 32)) : _unknown[42] "assignop" "inline" "operator"
  {
    (74260 '^=' lhs rhs)
  }
  function ^=[74265](ref arg lhs[74270] :
  (74268 call uint[86] 64), arg rhs[74276] :
  (74274 call uint[86] 64)) : _unknown[42] "assignop" "inline" "operator"
  {
    (74280 '^=' lhs rhs)
  }
  function ^=[74285](ref arg lhs[74287]:_any[141](?), arg rhs[74289]:_any[141](?)) : _unknown[42] "assignop" "inline" "operator"
  {
    (74304 call = lhs(74307 call ^ lhs rhs))
  }
  where {
    (74291 call !(74293 call &&(74296 call isNumericType(74298 'typeof' lhs))(74300 call isNumericType(74302 'typeof' rhs))))
  }
  function >>=[74314](ref arg lhs[74320] :
  (74317 call int[10] unknown w[74318]), arg rhs[74324] :
  integral) : _unknown[42] "assignop" "inline" "operator"
  {
    (74328 '>>=' lhs rhs)
  }
  function >>=[74333](ref arg lhs[74339] :
  (74336 call uint[86] unknown w[74337]), arg rhs[74343] :
  integral) : _unknown[42] "assignop" "inline" "operator"
  {
    (74347 '>>=' lhs rhs)
  }
  function >>=[74352](ref arg lhs[74354]:_any[141](?), arg rhs[74356]:_any[141](?)) : _unknown[42] "assignop" "inline" "operator"
  {
    (74371 call = lhs(74374 call >> lhs rhs))
  }
  where {
    (74358 call !(74360 call &&(74363 call isNumericType(74365 'typeof' lhs))(74367 call isNumericType(74369 'typeof' rhs))))
  }
  function <<=[74381](ref arg lhs[74387] :
  (74384 call int[10] unknown w[74385]), arg rhs[74391] :
  integral) : _unknown[42] "assignop" "inline" "operator"
  {
    (74395 '<<=' lhs rhs)
  }
  function <<=[74400](ref arg lhs[74406] :
  (74403 call uint[86] unknown w[74404]), arg rhs[74410] :
  integral) : _unknown[42] "assignop" "inline" "operator"
  {
    (74414 '<<=' lhs rhs)
  }
  function <<=[74419](ref arg lhs[74421]:_any[141](?), arg rhs[74423]:_any[141](?)) : _unknown[42] "assignop" "inline" "operator"
  {
    (74438 call = lhs(74441 call << lhs rhs))
  }
  where {
    (74425 call !(74427 call &&(74430 call isNumericType(74432 'typeof' lhs))(74434 call isNumericType(74436 'typeof' rhs))))
  }
  function <=>[74448](ref arg lhs[74450]:_any[141](?), ref arg rhs[74452]:_any[141](?)) : _unknown[42] "inline" "last resort" "operator" "ignore transfer errors"
  {
    { scopeless
      unknown tmp[74456] lhs
      (74459 'end of statement')
    }
    (74460 call = lhs rhs)
    (74464 call = rhs tmp)
  }
  function +[74470](arg a[74475] :
  (74473 call uint[86] 64), param arg b[74481] :
  (74479 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    (74485 return(74486 '+' a b))
  }
  function +[74491](param arg a[74496] :
  (74494 call uint[86] 64), arg b[74502] :
  (74500 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    (74506 return(74507 '+' a b))
  }
  function +[74512](arg a[74517] :
  (74515 call int[10] 64), param arg b[74523] :
  (74521 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (74527 return(74528 '+' a b))
  }
  function +[74533](param arg a[74538] :
  (74536 call int[10] 64), arg b[74544] :
  (74542 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (74548 return(74549 '+' a b))
  }
  function -[74554](arg a[74559] :
  (74557 call uint[86] 64), param arg b[74565] :
  (74563 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    (74569 return(74570 '-' a b))
  }
  function -[74575](param arg a[74580] :
  (74578 call uint[86] 64), arg b[74586] :
  (74584 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    (74590 return(74591 '-' a b))
  }
  function -[74596](arg a[74601] :
  (74599 call int[10] 64), param arg b[74607] :
  (74605 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (74611 return(74612 '-' a b))
  }
  function -[74617](param arg a[74622] :
  (74620 call int[10] 64), arg b[74628] :
  (74626 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (74632 return(74633 '-' a b))
  }
  function *[74638](arg a[74643] :
  (74641 call uint[86] 64), param arg b[74649] :
  (74647 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    (74653 return(74654 '*' a b))
  }
  function *[74659](param arg a[74664] :
  (74662 call uint[86] 64), arg b[74670] :
  (74668 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    (74674 return(74675 '*' a b))
  }
  function *[74680](arg a[74685] :
  (74683 call int[10] 64), param arg b[74691] :
  (74689 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (74695 return(74696 '*' a b))
  }
  function *[74701](param arg a[74706] :
  (74704 call int[10] 64), arg b[74712] :
  (74710 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (74716 return(74717 '*' a b))
  }
  function /[74722](arg a[74727] :
  (74725 call int[10] 64), param arg b[74733] :
  (74731 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    if(74745 call _cond_test(74741 call == b 0))
    {
      { scopeless
        (74738 call compilerError "Attempt to divide by zero")
      }
    }
    (74750 return(74751 '/' a b))
  }
  function /[74756](arg a[74761] :
  (74759 call uint[86] 64), param arg b[74767] :
  (74765 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    if(74779 call _cond_test(74775 call == b 0))
    {
      { scopeless
        (74772 call compilerError "Attempt to divide by zero")
      }
    }
    (74784 return(74785 '/' a b))
  }
  function /[74790](param arg a[74795] :
  (74793 call uint[86] 64), arg b[74801] :
  (74799 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    if(74819 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(74813 call _cond_test(74809 call == b 0))
        {
          { scopeless
            (74806 call halt "Attempt to divide by zero")
          }
        }
      }
    }
    (74824 return(74825 '/' a b))
  }
  function /[74830](param arg a[74835] :
  (74833 call int[10] 64), arg b[74841] :
  (74839 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    if(74859 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(74853 call _cond_test(74849 call == b 0))
        {
          { scopeless
            (74846 call halt "Attempt to divide by zero")
          }
        }
      }
    }
    (74864 return(74865 '/' a b))
  }
  function **[74870](arg a[74875] :
  (74873 call uint[86] 64), param arg b[74881] :
  (74879 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    (74885 return(74886 '**' a b))
  }
  function **[74891](param arg a[74896] :
  (74894 call uint[86] 64), arg b[74902] :
  (74900 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    (74906 return(74907 '**' a b))
  }
  function **[74912](arg a[74917] :
  (74915 call int[10] 64), param arg b[74923] :
  (74921 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (74927 return(74928 '**' a b))
  }
  function **[74933](param arg a[74938] :
  (74936 call int[10] 64), arg b[74944] :
  (74942 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (74948 return(74949 '**' a b))
  }
  function %[74954](arg a[74959] :
  (74957 call uint[86] 64), param arg b[74965] :
  (74963 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    if(74977 call _cond_test(74973 call == b 0))
    {
      { scopeless
        (74970 call compilerError "Attempt to compute a modulus by zero")
      }
    }
    (74982 return(74983 '%' a b))
  }
  function %[74988](param arg a[74993] :
  (74991 call uint[86] 64), arg b[74999] :
  (74997 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    if(75017 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(75011 call _cond_test(75007 call == b 0))
        {
          { scopeless
            (75004 call halt "Attempt to compute a modulus by zero")
          }
        }
      }
    }
    (75022 return(75023 '%' a b))
  }
  function %[75028](arg a[75033] :
  (75031 call int[10] 64), param arg b[75039] :
  (75037 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    if(75051 call _cond_test(75047 call == b 0))
    {
      { scopeless
        (75044 call compilerError "Attempt to compute a modulus by zero")
      }
    }
    (75056 return(75057 '%' a b))
  }
  function %[75062](param arg a[75067] :
  (75065 call int[10] 64), arg b[75073] :
  (75071 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    if(75091 call _cond_test chpl_checkDivByZero)
    {
      { scopeless
        if(75085 call _cond_test(75081 call == b 0))
        {
          { scopeless
            (75078 call halt "Attempt to compute a modulus by zero")
          }
        }
      }
    }
    (75096 return(75097 '%' a b))
  }
  function ==[75102](arg a[75107] :
  (75105 call uint[86] 8), arg b[75113] :
  (75111 call int[10] 8)) : _unknown[42] "inline" "operator"
  {
    (75117 return(75118 call &&(75120 call !(75122 call < b 0))(75126 call == a(75129 call : b(75133 call uint[86] 8)))))
  }
  function ==[75137](arg a[75142] :
  (75140 call uint[86] 16), arg b[75148] :
  (75146 call int[10] 16)) : _unknown[42] "inline" "operator"
  {
    (75152 return(75153 call &&(75155 call !(75157 call < b 0))(75161 call == a(75164 call : b(75168 call uint[86] 16)))))
  }
  function ==[75172](arg a[75177] :
  (75175 call uint[86] 32), arg b[75183] :
  (75181 call int[10] 32)) : _unknown[42] "inline" "operator"
  {
    (75187 return(75188 call &&(75190 call !(75192 call < b 0))(75196 call == a(75199 call : b(75203 call uint[86] 32)))))
  }
  function ==[75207](arg a[75212] :
  (75210 call uint[86] 64), arg b[75218] :
  (75216 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (75222 return(75223 call &&(75225 call !(75227 call < b 0))(75231 call == a(75234 call : b(75238 call uint[86] 64)))))
  }
  function ==[75242](arg a[75247] :
  (75245 call int[10] 8), arg b[75253] :
  (75251 call uint[86] 8)) : _unknown[42] "inline" "operator"
  {
    (75257 return(75258 call &&(75260 call !(75262 call < a 0))(75266 call ==(75268 call : a(75272 call uint[86] 8)) b)))
  }
  function ==[75277](arg a[75282] :
  (75280 call int[10] 16), arg b[75288] :
  (75286 call uint[86] 16)) : _unknown[42] "inline" "operator"
  {
    (75292 return(75293 call &&(75295 call !(75297 call < a 0))(75301 call ==(75303 call : a(75307 call uint[86] 16)) b)))
  }
  function ==[75312](arg a[75317] :
  (75315 call int[10] 32), arg b[75323] :
  (75321 call uint[86] 32)) : _unknown[42] "inline" "operator"
  {
    (75327 return(75328 call &&(75330 call !(75332 call < a 0))(75336 call ==(75338 call : a(75342 call uint[86] 32)) b)))
  }
  function ==[75347](arg a[75352] :
  (75350 call int[10] 64), arg b[75358] :
  (75356 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    (75362 return(75363 call &&(75365 call !(75367 call < a 0))(75371 call ==(75373 call : a(75377 call uint[86] 64)) b)))
  }
  function !=[75382](arg a[75387] :
  (75385 call uint[86] 8), arg b[75393] :
  (75391 call int[10] 8)) : _unknown[42] "inline" "operator"
  {
    (75397 return(75398 call ||(75400 call < b 0)(75404 call != a(75407 call : b(75411 call uint[86] 8)))))
  }
  function !=[75415](arg a[75420] :
  (75418 call uint[86] 16), arg b[75426] :
  (75424 call int[10] 16)) : _unknown[42] "inline" "operator"
  {
    (75430 return(75431 call ||(75433 call < b 0)(75437 call != a(75440 call : b(75444 call uint[86] 16)))))
  }
  function !=[75448](arg a[75453] :
  (75451 call uint[86] 32), arg b[75459] :
  (75457 call int[10] 32)) : _unknown[42] "inline" "operator"
  {
    (75463 return(75464 call ||(75466 call < b 0)(75470 call != a(75473 call : b(75477 call uint[86] 32)))))
  }
  function !=[75481](arg a[75486] :
  (75484 call uint[86] 64), arg b[75492] :
  (75490 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (75496 return(75497 call ||(75499 call < b 0)(75503 call != a(75506 call : b(75510 call uint[86] 64)))))
  }
  function !=[75514](arg a[75519] :
  (75517 call int[10] 8), arg b[75525] :
  (75523 call uint[86] 8)) : _unknown[42] "inline" "operator"
  {
    (75529 return(75530 call ||(75532 call < a 0)(75536 call !=(75538 call : a(75542 call uint[86] 8)) b)))
  }
  function !=[75547](arg a[75552] :
  (75550 call int[10] 16), arg b[75558] :
  (75556 call uint[86] 16)) : _unknown[42] "inline" "operator"
  {
    (75562 return(75563 call ||(75565 call < a 0)(75569 call !=(75571 call : a(75575 call uint[86] 16)) b)))
  }
  function !=[75580](arg a[75585] :
  (75583 call int[10] 32), arg b[75591] :
  (75589 call uint[86] 32)) : _unknown[42] "inline" "operator"
  {
    (75595 return(75596 call ||(75598 call < a 0)(75602 call !=(75604 call : a(75608 call uint[86] 32)) b)))
  }
  function !=[75613](arg a[75618] :
  (75616 call int[10] 64), arg b[75624] :
  (75622 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    (75628 return(75629 call ||(75631 call < a 0)(75635 call !=(75637 call : a(75641 call uint[86] 64)) b)))
  }
  function >[75646](arg a[75651] :
  (75649 call uint[86] 8), arg b[75657] :
  (75655 call int[10] 8)) : _unknown[42] "inline" "operator"
  {
    (75661 return(75662 call ||(75664 call < b 0)(75668 call > a(75671 call : b(75675 call uint[86] 8)))))
  }
  function >[75679](arg a[75684] :
  (75682 call uint[86] 16), arg b[75690] :
  (75688 call int[10] 16)) : _unknown[42] "inline" "operator"
  {
    (75694 return(75695 call ||(75697 call < b 0)(75701 call > a(75704 call : b(75708 call uint[86] 16)))))
  }
  function >[75712](arg a[75717] :
  (75715 call uint[86] 32), arg b[75723] :
  (75721 call int[10] 32)) : _unknown[42] "inline" "operator"
  {
    (75727 return(75728 call ||(75730 call < b 0)(75734 call > a(75737 call : b(75741 call uint[86] 32)))))
  }
  function >[75745](arg a[75750] :
  (75748 call uint[86] 64), arg b[75756] :
  (75754 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (75760 return(75761 call ||(75763 call < b 0)(75767 call > a(75770 call : b(75774 call uint[86] 64)))))
  }
  function >[75778](arg a[75783] :
  (75781 call int[10] 8), arg b[75789] :
  (75787 call uint[86] 8)) : _unknown[42] "inline" "operator"
  {
    (75793 return(75794 call &&(75796 call !(75798 call < a 0))(75802 call >(75804 call : a(75808 call uint[86] 8)) b)))
  }
  function >[75813](arg a[75818] :
  (75816 call int[10] 16), arg b[75824] :
  (75822 call uint[86] 16)) : _unknown[42] "inline" "operator"
  {
    (75828 return(75829 call &&(75831 call !(75833 call < a 0))(75837 call >(75839 call : a(75843 call uint[86] 16)) b)))
  }
  function >[75848](arg a[75853] :
  (75851 call int[10] 32), arg b[75859] :
  (75857 call uint[86] 32)) : _unknown[42] "inline" "operator"
  {
    (75863 return(75864 call &&(75866 call !(75868 call < a 0))(75872 call >(75874 call : a(75878 call uint[86] 32)) b)))
  }
  function >[75883](arg a[75888] :
  (75886 call int[10] 64), arg b[75894] :
  (75892 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    (75898 return(75899 call &&(75901 call !(75903 call < a 0))(75907 call >(75909 call : a(75913 call uint[86] 64)) b)))
  }
  function >[75918](param arg a[75923] :
  (75921 call uint[86] 8), arg b[75929] :
  (75927 call uint[86] 8)) : _unknown[42] "inline" "operator"
  {
    if(75944 call _cond_test(75941 '==' a 0))
    {
      (75934 return 0)
    }
    {
      (75937 return(75938 '>' a b))
    }
  }
  function >[75950](param arg a[75955] :
  (75953 call uint[86] 16), arg b[75961] :
  (75959 call uint[86] 16)) : _unknown[42] "inline" "operator"
  {
    if(75976 call _cond_test(75973 '==' a 0))
    {
      (75966 return 0)
    }
    {
      (75969 return(75970 '>' a b))
    }
  }
  function >[75982](param arg a[75987] :
  (75985 call uint[86] 32), arg b[75993] :
  (75991 call uint[86] 32)) : _unknown[42] "inline" "operator"
  {
    if(76008 call _cond_test(76005 '==' a 0))
    {
      (75998 return 0)
    }
    {
      (76001 return(76002 '>' a b))
    }
  }
  function >[76014](param arg a[76019] :
  (76017 call uint[86] 64), arg b[76025] :
  (76023 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    if(76040 call _cond_test(76037 '==' a 0))
    {
      (76030 return 0)
    }
    {
      (76033 return(76034 '>' a b))
    }
  }
  function >[76046](param arg a[76051] :
  (76049 call int[10] 8), arg b[76057] :
  (76055 call int[10] 8)) : _unknown[42] "inline" "operator"
  {
    (76061 return(76062 '>' a b))
  }
  function >[76067](param arg a[76072] :
  (76070 call int[10] 16), arg b[76078] :
  (76076 call int[10] 16)) : _unknown[42] "inline" "operator"
  {
    (76082 return(76083 '>' a b))
  }
  function >[76088](param arg a[76093] :
  (76091 call int[10] 32), arg b[76099] :
  (76097 call int[10] 32)) : _unknown[42] "inline" "operator"
  {
    (76103 return(76104 '>' a b))
  }
  function >[76109](param arg a[76114] :
  (76112 call int[10] 64), arg b[76120] :
  (76118 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (76124 return(76125 '>' a b))
  }
  function >=[76130](arg a[76135] :
  (76133 call uint[86] 8), arg b[76141] :
  (76139 call int[10] 8)) : _unknown[42] "inline" "operator"
  {
    (76145 return(76146 call ||(76148 call < b 0)(76152 call >= a(76155 call : b(76159 call uint[86] 8)))))
  }
  function >=[76163](arg a[76168] :
  (76166 call uint[86] 16), arg b[76174] :
  (76172 call int[10] 16)) : _unknown[42] "inline" "operator"
  {
    (76178 return(76179 call ||(76181 call < b 0)(76185 call >= a(76188 call : b(76192 call uint[86] 16)))))
  }
  function >=[76196](arg a[76201] :
  (76199 call uint[86] 32), arg b[76207] :
  (76205 call int[10] 32)) : _unknown[42] "inline" "operator"
  {
    (76211 return(76212 call ||(76214 call < b 0)(76218 call >= a(76221 call : b(76225 call uint[86] 32)))))
  }
  function >=[76229](arg a[76234] :
  (76232 call uint[86] 64), arg b[76240] :
  (76238 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (76244 return(76245 call ||(76247 call < b 0)(76251 call >= a(76254 call : b(76258 call uint[86] 64)))))
  }
  function >=[76262](arg a[76267] :
  (76265 call int[10] 8), arg b[76273] :
  (76271 call uint[86] 8)) : _unknown[42] "inline" "operator"
  {
    (76277 return(76278 call &&(76280 call !(76282 call < a 0))(76286 call >=(76288 call : a(76292 call uint[86] 8)) b)))
  }
  function >=[76297](arg a[76302] :
  (76300 call int[10] 16), arg b[76308] :
  (76306 call uint[86] 16)) : _unknown[42] "inline" "operator"
  {
    (76312 return(76313 call &&(76315 call !(76317 call < a 0))(76321 call >=(76323 call : a(76327 call uint[86] 16)) b)))
  }
  function >=[76332](arg a[76337] :
  (76335 call int[10] 32), arg b[76343] :
  (76341 call uint[86] 32)) : _unknown[42] "inline" "operator"
  {
    (76347 return(76348 call &&(76350 call !(76352 call < a 0))(76356 call >=(76358 call : a(76362 call uint[86] 32)) b)))
  }
  function >=[76367](arg a[76372] :
  (76370 call int[10] 64), arg b[76378] :
  (76376 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    (76382 return(76383 call &&(76385 call !(76387 call < a 0))(76391 call >=(76393 call : a(76397 call uint[86] 64)) b)))
  }
  function >=[76402](arg a[76407] :
  (76405 call uint[86] 8), param arg b[76413] :
  (76411 call uint[86] 8)) : _unknown[42] "inline" "operator"
  {
    if(76428 call _cond_test(76425 '==' b 0))
    {
      (76418 return 1)
    }
    {
      (76421 return(76422 '>=' a b))
    }
  }
  function >=[76434](arg a[76439] :
  (76437 call uint[86] 16), param arg b[76445] :
  (76443 call uint[86] 16)) : _unknown[42] "inline" "operator"
  {
    if(76460 call _cond_test(76457 '==' b 0))
    {
      (76450 return 1)
    }
    {
      (76453 return(76454 '>=' a b))
    }
  }
  function >=[76466](arg a[76471] :
  (76469 call uint[86] 32), param arg b[76477] :
  (76475 call uint[86] 32)) : _unknown[42] "inline" "operator"
  {
    if(76492 call _cond_test(76489 '==' b 0))
    {
      (76482 return 1)
    }
    {
      (76485 return(76486 '>=' a b))
    }
  }
  function >=[76498](arg a[76503] :
  (76501 call uint[86] 64), param arg b[76509] :
  (76507 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    if(76524 call _cond_test(76521 '==' b 0))
    {
      (76514 return 1)
    }
    {
      (76517 return(76518 '>=' a b))
    }
  }
  function >=[76530](arg a[76535] :
  (76533 call int[10] 8), param arg b[76541] :
  (76539 call int[10] 8)) : _unknown[42] "inline" "operator"
  {
    (76545 return(76546 '>=' a b))
  }
  function >=[76551](arg a[76556] :
  (76554 call int[10] 16), param arg b[76562] :
  (76560 call int[10] 16)) : _unknown[42] "inline" "operator"
  {
    (76566 return(76567 '>=' a b))
  }
  function >=[76572](arg a[76577] :
  (76575 call int[10] 32), param arg b[76583] :
  (76581 call int[10] 32)) : _unknown[42] "inline" "operator"
  {
    (76587 return(76588 '>=' a b))
  }
  function >=[76593](arg a[76598] :
  (76596 call int[10] 64), param arg b[76604] :
  (76602 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (76608 return(76609 '>=' a b))
  }
  function <=[76614](arg a[76619] :
  (76617 call uint[86] 8), arg b[76625] :
  (76623 call int[10] 8)) : _unknown[42] "inline" "operator"
  {
    (76629 return(76630 call &&(76632 call !(76634 call < b 0))(76638 call <= a(76641 call : b(76645 call uint[86] 8)))))
  }
  function <=[76649](arg a[76654] :
  (76652 call uint[86] 16), arg b[76660] :
  (76658 call int[10] 16)) : _unknown[42] "inline" "operator"
  {
    (76664 return(76665 call &&(76667 call !(76669 call < b 0))(76673 call <= a(76676 call : b(76680 call uint[86] 16)))))
  }
  function <=[76684](arg a[76689] :
  (76687 call uint[86] 32), arg b[76695] :
  (76693 call int[10] 32)) : _unknown[42] "inline" "operator"
  {
    (76699 return(76700 call &&(76702 call !(76704 call < b 0))(76708 call <= a(76711 call : b(76715 call uint[86] 32)))))
  }
  function <=[76719](arg a[76724] :
  (76722 call uint[86] 64), arg b[76730] :
  (76728 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (76734 return(76735 call &&(76737 call !(76739 call < b 0))(76743 call <= a(76746 call : b(76750 call uint[86] 64)))))
  }
  function <=[76754](arg a[76759] :
  (76757 call int[10] 8), arg b[76765] :
  (76763 call uint[86] 8)) : _unknown[42] "inline" "operator"
  {
    (76769 return(76770 call ||(76772 call < a 0)(76776 call <=(76778 call : a(76782 call uint[86] 8)) b)))
  }
  function <=[76787](arg a[76792] :
  (76790 call int[10] 16), arg b[76798] :
  (76796 call uint[86] 16)) : _unknown[42] "inline" "operator"
  {
    (76802 return(76803 call ||(76805 call < a 0)(76809 call <=(76811 call : a(76815 call uint[86] 16)) b)))
  }
  function <=[76820](arg a[76825] :
  (76823 call int[10] 32), arg b[76831] :
  (76829 call uint[86] 32)) : _unknown[42] "inline" "operator"
  {
    (76835 return(76836 call ||(76838 call < a 0)(76842 call <=(76844 call : a(76848 call uint[86] 32)) b)))
  }
  function <=[76853](arg a[76858] :
  (76856 call int[10] 64), arg b[76864] :
  (76862 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    (76868 return(76869 call ||(76871 call < a 0)(76875 call <=(76877 call : a(76881 call uint[86] 64)) b)))
  }
  function <=[76886](param arg a[76891] :
  (76889 call uint[86] 8), arg b[76897] :
  (76895 call uint[86] 8)) : _unknown[42] "inline" "operator"
  {
    if(76912 call _cond_test(76909 '==' a 0))
    {
      (76902 return 1)
    }
    {
      (76905 return(76906 '<=' a b))
    }
  }
  function <=[76918](param arg a[76923] :
  (76921 call uint[86] 16), arg b[76929] :
  (76927 call uint[86] 16)) : _unknown[42] "inline" "operator"
  {
    if(76944 call _cond_test(76941 '==' a 0))
    {
      (76934 return 1)
    }
    {
      (76937 return(76938 '<=' a b))
    }
  }
  function <=[76950](param arg a[76955] :
  (76953 call uint[86] 32), arg b[76961] :
  (76959 call uint[86] 32)) : _unknown[42] "inline" "operator"
  {
    if(76976 call _cond_test(76973 '==' a 0))
    {
      (76966 return 1)
    }
    {
      (76969 return(76970 '<=' a b))
    }
  }
  function <=[76982](param arg a[76987] :
  (76985 call uint[86] 64), arg b[76993] :
  (76991 call uint[86] 64)) : _unknown[42] "inline" "operator"
  {
    if(77008 call _cond_test(77005 '==' a 0))
    {
      (76998 return 1)
    }
    {
      (77001 return(77002 '<=' a b))
    }
  }
  function <=[77014](param arg a[77019] :
  (77017 call int[10] 8), arg b[77025] :
  (77023 call int[10] 8)) : _unknown[42] "inline" "operator"
  {
    (77029 return(77030 '<=' a b))
  }
  function <=[77035](param arg a[77040] :
  (77038 call int[10] 16), arg b[77046] :
  (77044 call int[10] 16)) : _unknown[42] "inline" "operator"
  {
    (77050 return(77051 '<=' a b))
  }
  function <=[77056](param arg a[77061] :
  (77059 call int[10] 32), arg b[77067] :
  (77065 call int[10] 32)) : _unknown[42] "inline" "operator"
  {
    (77071 return(77072 '<=' a b))
  }
  function <=[77077](param arg a[77082] :
  (77080 call int[10] 64), arg b[77088] :
  (77086 call int[10] 64)) : _unknown[42] "inline" "operator"
  {
    (77092 return(77093 '<=' a b))
  }
  function isGenericType[77098](arg t[77100]:_any[141](?)) param : _unknown[42] "suppress generic actual warning"
  {
    (77103 return(77104 'is generic type' t))
  }
  function isNilableClassType[77108](arg t[77110]:_any[141](?)) param : _unknown[42] "suppress generic actual warning"
  {
    (77113 return(77114 'is nilable class type' t))
  }
  function isNonNilableClassType[77118](arg t[77120]:_any[141](?)) param : _unknown[42] "suppress generic actual warning"
  {
    (77123 return(77124 'is non nilable class type' t))
  }
  function isBorrowedOrUnmanagedClassType[77128](arg t[77131] :
  unmanaged[183](?)) param : _unknown[42] "suppress generic actual warning"
  {
    (77135 return 1)
  }
  function isBorrowedOrUnmanagedClassType[77139](arg t[77142] :
  borrowed) param : _unknown[42] "suppress generic actual warning"
  {
    (77146 return 1)
  }
  function isBorrowedOrUnmanagedClassType[77150](arg t[77152]:_any[141](?)) param : _unknown[42] "suppress generic actual warning"
  {
    (77155 return 0)
  }
  { scopeless
    const QIO_STYLE_ELEMENT_STRING[77160] "const" "extern" int[10]
    (77163 'end of statement')
  }
  { scopeless
    const QIO_STYLE_ELEMENT_COMPLEX[77165] "const" "extern" int[10]
    (77168 'end of statement')
  }
  { scopeless
    const QIO_STYLE_ELEMENT_ARRAY[77170] "const" "extern" int[10]
    (77173 'end of statement')
  }
  { scopeless
    const QIO_STYLE_ELEMENT_AGGREGATE[77175] "const" "extern" int[10]
    (77178 'end of statement')
  }
  { scopeless
    const QIO_STYLE_ELEMENT_TUPLE[77180] "const" "extern" int[10]
    (77183 'end of statement')
  }
  { scopeless
    const QIO_STYLE_ELEMENT_BYTE_ORDER[77185] "const" "extern" int[10]
    (77188 'end of statement')
  }
  { scopeless
    const QIO_STYLE_ELEMENT_IS_NATIVE_BYTE_ORDER[77190] "const" "extern" int[10]
    (77193 'end of statement')
  }
  { scopeless
    const QIO_STYLE_ELEMENT_SKIP_UNKNOWN_FIELDS[77195] "const" "extern" int[10]
    (77198 'end of statement')
  }
  { scopeless
    const QIO_ARRAY_FORMAT_SPACE[77200] "const" "extern" int[10]
    (77203 'end of statement')
  }
  { scopeless
    const QIO_ARRAY_FORMAT_CHPL[77205] "const" "extern" int[10]
    (77208 'end of statement')
  }
  { scopeless
    const QIO_ARRAY_FORMAT_JSON[77210] "const" "extern" int[10]
    (77213 'end of statement')
  }
  { scopeless
    const QIO_AGGREGATE_FORMAT_BRACES[77215] "const" "extern" int[10]
    (77218 'end of statement')
  }
  { scopeless
    const QIO_AGGREGATE_FORMAT_CHPL[77220] "const" "extern" int[10]
    (77223 'end of statement')
  }
  { scopeless
    const QIO_AGGREGATE_FORMAT_JSON[77225] "const" "extern" int[10]
    (77228 'end of statement')
  }
  { scopeless
    const QIO_TUPLE_FORMAT_CHPL[77230] "const" "extern" int[10]
    (77233 'end of statement')
  }
  { scopeless
    const QIO_TUPLE_FORMAT_SPACE[77235] "const" "extern" int[10]
    (77238 'end of statement')
  }
  { scopeless
    const QIO_TUPLE_FORMAT_JSON[77240] "const" "extern" int[10]
    (77243 'end of statement')
  }
  type chpl_ModuleDeinit[77307] const moduleName[77247] "const"(77249 call c_ptrConst c_char) const deinitFun[77254] "const" chpl_c_fn_ptr const prevModule[77259] "const"(77260 'to unmanaged class from unknown'(77262 'to nilable class from type' chpl_ModuleDeinit)) function chpl_ModuleDeinit[77307].serialize[77265](arg _mt[77273]:_MT[201], arg this[77267]:chpl_ModuleDeinit[77307], arg writer[77269]:_any[141](?), ref arg serializer[77271]:_any[141](?)) : _unknown[42] throws "method" "primary method" "method overrides"
  {
    Try
    {
      {
        (77281 call(77278 call . writer c"writef") "chpl_ModuleDeinit(%s)"(77289 call(77286 call . string[244] c"createCopyingBuffer") moduleName))
      }
    }
    Catch e : DecodeError
    {
      unknown e[77300]
      (77295 call halt "Module name is not valid string!")
    }
  } writeSerializable
  { scopeless
    unknown chpl_moduleDeinitFuns[77310](77311 call : nil[32](77314 'to unmanaged class from unknown'(77316 'to nilable class from type' chpl_ModuleDeinit)))
    (77318 'end of statement')
  }
  function chpl_checkLegalTypeFieldAccessor[77319](arg thisArg[77321]:_any[141](?), arg fieldType[77323]:_any[141](?), param arg fieldName[77325]:_any[141](?)) type : _unknown[42] "inline"
  {
    if(77355 call _cond_test(77341 call &&(77344 call isNilableClassType(77346 'typeof' thisArg))(77347 call ||(77350 call isDomainType fieldType)(77353 call isArrayType fieldType))))
    {
      { scopeless
        (77329 call compilerError "accessing the runtime-type field " fieldName " of a nilable class. Consider applying postfix-! operator" " to the class before accessing this field.")
      }
    }
    (77360 return fieldType)
  }
  function chpl_checkLegalTypeFieldAccessor[77364](arg thisArg[77366]:_any[141](?), arg fieldType[77368]:_any[141](?), param arg fieldName[77370]:_any[141](?)) type : _unknown[42] "inline"
  {
    if(77389 call _cond_test(77381 call ||(77384 call isDomainType fieldType)(77387 call isArrayType fieldType)))
    {
      { scopeless
        (77374 call compilerError "accessing the runtime-type field " fieldName " of a class type is currently unsupported")
      }
    }
    (77394 return fieldType)
  }
  function _to_unmanaged[77398](arg t[77400]:_any[141](?)) type : _unknown[42] "suppress generic actual warning"
  {
    unknown rt[77404] "type variable"(77405 'to unmanaged class' t)
    (77408 return rt)
  }
  function _to_unmanaged[77412](arg arg[77414]:_any[141](?)) : _unknown[42] "inline"
  {
    { scopeless
      unknown ret[77418](77419 'to unmanaged class' arg)
      (77422 'end of statement')
    }
    (77423 return ret)
  }
  function _to_borrowed[77427](arg t[77429]:_any[141](?)) type : _unknown[42] "suppress generic actual warning"
  {
    unknown rt[77433] "type variable"(77434 'to borrowed class' t)
    (77437 return rt)
  }
  function _to_borrowed[77441](arg arg[77443]:_any[141](?)) : _unknown[42] "inline"
  {
    { scopeless
      unknown ret[77447](77448 'to borrowed class' arg)
      (77451 'end of statement')
    }
    (77452 return ret)
  }
  function _to_nonnil[77456](arg t[77458]:_any[141](?)) type : _unknown[42] "suppress generic actual warning"
  {
    unknown rt[77462] "type variable"(77463 'to non nilable class' t)
    (77466 return rt)
  }
  function _to_nonnil[77470](arg arg[77472]:_any[141](?)) : _unknown[42] "inline"
  {
    { scopeless
      unknown ret[77476](77477 'to non nilable class' arg)
      (77480 'end of statement')
    }
    (77481 return ret)
  }
  function _to_nilable[77485](arg t[77487]:_any[141](?)) type : _unknown[42] "suppress generic actual warning"
  {
    unknown rt[77491] "type variable"(77492 'to nilable class' t)
    (77495 return rt)
  }
  function _to_nilable[77499](arg arg[77501]:_any[141](?)) : _unknown[42] "inline"
  {
    { scopeless
      unknown ret[77505](77506 'to nilable class' arg)
      (77509 'end of statement')
    }
    (77510 return ret)
  }
  function chpl_checkBorrowIfVar[77514](arg arg[77516]:_any[141](?), param arg isWhile[77518]:_any[141](?)) : _unknown[42] "inline"
  {
    if(77567 call _cond_test(77565 call isUnmanagedClass arg))
    {
      { scopeless
        (77521 return arg)
      }
    }
    {
      { scopeless
        if(77558 call _cond_test(77556 call isClass arg))
        {
          { scopeless
            (77524 return(77529 call(77526 call . arg c"borrow")))
          }
        }
        {
          { scopeless
            (77532 call compilerError(77540 IfExpr  isWhile then
            { scopeless
              "\"while var/const\""
            } else
            { scopeless
              "\"if var/const\""
            } ) " construct is available only on classes," " here it is invoked on "(77549 call :(77552 'typeof' arg) string[244]))
          }
        }
      }
    }
  }
  function chpl_checkBorrowIfVar[77575](arg arg[77577]:_any[141](?), param arg isWhile[77579]:_any[141](?)) : _unknown[42]
  {
    (77583 call compilerError(77587 IfExpr  isWhile then
    { scopeless
      "\"while var/const\""
    } else
    { scopeless
      "\"if var/const\""
    } ) " construct cannot be invoked on a type")
  }
  function _removed_cast[77595](in arg x[77597]:_any[141](?)) : _unknown[42] "inline" "no borrow convert"
  {
    (77600 return x)
  }
  function chpl_supportsBoundedCoforall[77604](arg iterable[77606]:_any[141](?), param arg zippered[77608]:_any[141](?)) param : _unknown[42]
  {
    if(77651 call _cond_test(77645 call && zippered(77649 call isTuple iterable)))
    {
      { scopeless
        (77611 return(77613 call chpl_supportsBoundedCoforall(77615 call iterable 0)(zippered = 0)))
      }
    }
    {
      { scopeless
        if(77639 call _cond_test(77626 call ||(77628 call ||(77631 call isRange iterable)(77634 call isDomain iterable))(77637 call isArray iterable)))
        {
          { scopeless
            (77620 return 1)
          }
        }
        {
          { scopeless
            (77623 return 0)
          }
        }
      }
    }
  }
  function chpl_boundedCoforallSize[77659](arg iterable[77661]:_any[141](?), param arg zippered[77663]:_any[141](?)) : _unknown[42]
  {
    if(77712 call _cond_test(77706 call && zippered(77710 call isTuple iterable)))
    {
      { scopeless
        (77666 return(77668 call chpl_boundedCoforallSize(77670 call iterable 0)(zippered = 0)))
      }
    }
    {
      { scopeless
        if(77700 call _cond_test(77687 call ||(77689 call ||(77692 call isRange iterable)(77695 call isDomain iterable))(77698 call isArray iterable)))
        {
          { scopeless
            (77675 return(77677 call . iterable c"size"))
          }
        }
        {
          { scopeless
            (77682 call compilerError "Called chpl_boundedCoforallSize on an unsupported type")
          }
        }
      }
    }
  }
  function chpl_field_neq[77720](arg a[77727] :
  (77725 call chpl__buildArrayRuntimeType nil[32] unknown t[77723]), arg b[77734] :
  (77732 call chpl__buildArrayRuntimeType nil[32] t)) : _unknown[42]
  {
    (77738 return(77744 'reduce' LogicalOrReduceScanOp(77740 call != a b) 0))
  }
  function chpl_field_neq[77748](arg a[77750]:_any[141](?), arg b[77752]:_any[141](?)) : _unknown[42] "inline"
  {
    (77761 return(77762 call != a b))
  }
  where {
    (77754 call !(77757 call isArrayType(77759 'typeof' a)))
  }
  function chpl_field_lt[77769](arg a[77776] :
  (77774 call chpl__buildArrayRuntimeType nil[32] unknown t[77772]), arg b[77783] :
  (77781 call chpl__buildArrayRuntimeType nil[32] t)) : _unknown[42]
  {
    (77788 call compilerError "ordered comparisons not supported by default on records with array fields")
  }
  function chpl_field_lt[77794](arg a[77796]:_any[141](?), arg b[77798]:_any[141](?)) : _unknown[42] "inline"
  {
    (77807 return(77808 call < a b))
  }
  where {
    (77800 call !(77803 call isArrayType(77805 'typeof' a)))
  }
  function chpl_field_gt[77815](arg a[77822] :
  (77820 call chpl__buildArrayRuntimeType nil[32] unknown t[77818]), arg b[77829] :
  (77827 call chpl__buildArrayRuntimeType nil[32] t)) : _unknown[42]
  {
    (77834 call compilerError "ordered comparisons not supported by default on records with array fields")
  }
  function chpl_field_gt[77838](arg a[77840]:_any[141](?), arg b[77842]:_any[141](?)) : _unknown[42] "inline"
  {
    (77851 return(77852 call > a b))
  }
  where {
    (77844 call !(77847 call isArrayType(77849 'typeof' a)))
  }
  function chpl__bothLocal[77859](const  ref arg a[77861]:_any[141](?), const  ref arg b[77863]:_any[141](?)) : _unknown[42]
  {
    function chpl_equals_localeID[77866](const  ref arg x[77868]:_any[141](?), const  ref arg y[77870]:_any[141](?)) : _unknown[42] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      bool
    }
    { scopeless
      const aLoc[77877] "const"(77878 '_wide_get_locale'(77880 call . a c"_value"))
      (77884 'end of statement')
    }
    { scopeless
      const bLoc[77886] "const"(77887 '_wide_get_locale'(77889 call . b c"_value"))
      (77893 'end of statement')
    }
    (77894 return(77895 call &&(77898 call chpl_equals_localeID aLoc bLoc)(77902 call chpl_equals_localeID aLoc here_id)))
  }
  (386986 'used modules list'(386984 'use' _root[2]))
}