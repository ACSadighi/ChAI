AST dump for Reflection after pass expandExternArrayCalls.
Module use list: 

{
  (386994 'use' ChapelStandard)
  { scopeless
    unknown chpl_unstableStandardSymbolForTesting[830] "@unstable" int[10]
    (833 'end of statement')
  }
  chpl_unstableStandardSymbolForTesting
  function checkQueryT[835](arg t[837]:_any[141](?)) type : _unknown[42] "private" "suppress generic actual warning"
  {
    if(880 call _cond_test(878 call isClassType t))
    {
      { scopeless
        (840 return(841 call : t(844 'to borrowed class from unknown' class)))
      }
    }
    {
      { scopeless
        if(871 call _cond_test(863 call ||(866 call isRecordType t)(869 call isUnionType t)))
        {
          { scopeless
            (847 return t)
          }
        }
        {
          { scopeless
            (851 call compilerError(852 call : t string[244]) " is not a class, record, or union type" 2)
          }
        }
      }
    }
  }
  function checkValidQueryT[888](arg t[890]:_any[141](?)) param : _unknown[42] "private"
  {
    if(921 call _cond_test(902 call &&(904 call &&(906 call !(909 call isClassType t))(911 call !(914 call isRecordType t)))(916 call !(919 call isUnionType t))))
    {
      { scopeless
        (894 call compilerError(895 call : t string[244]) " is not a class, record, or union type" 2)
      }
    }
  }
  function getNumFields[928](arg t[930]:_any[141](?)) param : _unknown[42] "suppress generic actual warning"
  {
    (934 return(935 'num fields'(937 call checkQueryT t)))
  }
  { scopeless type
    int[10]
  }
  function numFields[942](arg t[944]:_any[141](?)) param : _unknown[42] "deprecated"
  {
    (948 return(950 call getNumFields t))
  }
  { scopeless type
    int[10]
  }
  function getFieldName[955](arg t[957]:_any[141](?), param arg idx[960] :
  int[10]) param : _unknown[42] "suppress generic actual warning"
  {
    (965 return(966 'field num to name'(968 call checkQueryT t)(970 call + idx 1)))
  }
  { scopeless type
    string[244]
  }
  function getField[979](const  ref arg obj[983] :
  unknown t[981], param arg idx[987] :
  int[10]) param : _unknown[42]
  {
    (1013 return(1014 'field by num' obj(1016 call + idx 1)))
  }
  where {
    (990 call &&(992 call &&(994 call >= idx 0)(998 call < idx(1002 call getNumFields t)))(1005 call isParam(1006 'field by num' obj(1008 call + idx 1))))
  }
  function getField[1023](const  ref arg obj[1027] :
  unknown t[1025], param arg idx[1031] :
  int[10]) type : _unknown[42]
  {
    (1057 return(1058 'field by num' obj(1060 call + idx 1)))
  }
  where {
    (1034 call &&(1036 call &&(1038 call >= idx 0)(1042 call < idx(1046 call getNumFields t)))(1049 call isType(1050 'field by num' obj(1052 call + idx 1))))
  }
  function getField[1067](const  ref arg obj[1071] :
  unknown t[1069], param arg idx[1075] :
  int[10]) const ref : _unknown[42] "inline" "unsafe"
  {
    (1079 return(1080 'field by num' obj(1082 call + idx 1)))
  }
  function getField[1088](const  ref arg obj[1092] :
  unknown t[1090], param arg name[1096] :
  string[244]) param : _unknown[42]
  {
    (1120 return(1122 call getField obj(1125 call getFieldIndex t name)))
  }
  where {
    (1099 call &&(1101 call !=(1104 call getFieldIndex t name)(1107 call - 1))(1111 call isParam(1113 call getField obj(1116 call getFieldIndex t name))))
  }
  function getField[1131](const  ref arg obj[1135] :
  unknown t[1133], param arg name[1139] :
  string[244]) type : _unknown[42]
  {
    (1163 return(1165 call getField obj(1168 call getFieldIndex t name)))
  }
  where {
    (1142 call &&(1144 call !=(1147 call getFieldIndex t name)(1150 call - 1))(1154 call isType(1156 call getField obj(1159 call getFieldIndex t name))))
  }
  function getField[1174](const  ref arg obj[1178] :
  unknown t[1176], param arg name[1182] :
  string[244]) const ref : _unknown[42] "inline" "unsafe"
  {
    { scopeless
      unknown i[1187] "param"(1188 'field name to num' t name)
      (1192 'end of statement')
    }
    if(1211 call _cond_test(1207 call == i 0))
    {
      { scopeless
        (1194 call compilerError "field " name " not found in "(1202 call : t string[244]))
      }
    }
    (1216 return(1217 'field by num' obj i))
  }
  function isImplementedWithRecords[1222](arg t[1224]:_any[141](?)) param : _unknown[42] "suppress generic actual warning"
  {
    (1227 return(1228 call ||(1231 call isRangeType t)(1234 call isStringType t)))
  }
  function numImplementationFields[1238](arg t[1240]:_any[141](?)) param : _unknown[42] "suppress generic actual warning"
  {
    (1247 return(1248 'num fields' t))
  }
  where {
    (1244 call isImplementedWithRecords t)
  }
  { scopeless type
    int[10]
  }
  function getImplementationField[1254](const  ref arg x[1258] :
  unknown t[1256], param arg i[1262] :
  int[10]) type : _unknown[42]
  {
    (1276 return(1277 'field by num' x i))
  }
  where {
    (1265 call &&(1268 call isImplementedWithRecords t)(1271 call isType(1272 'field by num' x i)))
  }
  function getImplementationField[1283](const  ref arg x[1287] :
  unknown t[1285], param arg i[1291] :
  int[10]) param : _unknown[42]
  {
    (1305 return(1306 'field by num' x i))
  }
  where {
    (1294 call &&(1297 call isImplementedWithRecords t)(1300 call isParam(1301 'field by num' x i)))
  }
  function getImplementationField[1312](const  ref arg x[1316] :
  unknown t[1314], param arg i[1320] :
  int[10]) const ref : _unknown[42] "unsafe"
  {
    if(1342 call _cond_test(1337 call !(1340 call isImplementedWithRecords t)))
    {
      { scopeless
        (1325 call compilerError "an argument of the type "(1329 call : t string[244]) " is not valid for getImplementationField()")
      }
    }
    (1347 return(1348 'field by num' x i))
  }
  function getFieldRef[1353](ref arg x[1357] :
  unknown t[1355], param arg i[1361] :
  int[10]) ref : _unknown[42] "inline" "unsafe" "@unstable"
  {
    (1366 call checkValidQueryT t)
    if(1389 call _cond_test(1382 call isType(1383 'field by num' x(1385 call + i 1))))
    {
      { scopeless
        (1369 call compilerError "cannot return a reference to 'type' field '"(1374 call getFieldName t i) "'")
      }
    }
    if(1413 call _cond_test(1406 call isParam(1407 'field by num' x(1409 call + i 1))))
    {
      { scopeless
        (1395 call compilerError "cannot return a reference to 'param' field '"(1400 call getFieldName t i) "'")
      }
    }
    (1418 return(1419 'field by num' x(1421 call + i 1)))
  }
  function getFieldRef[1427](arg x[1430] :
  borrowed, param arg i[1434] :
  int[10]) ref : _unknown[42] "inline" "unsafe" "@unstable"
  {
    (1439 call checkValidQueryT(1441 'typeof' x))
    if(1460 call _cond_test(1453 call isType(1454 'field by num' x(1456 call + i 1))))
    {
      { scopeless
        (1443 call compilerError "cannot return a reference to 'type' field '"(1446 call getFieldName(1448 'typeof' x) i) "'")
      }
    }
    if(1483 call _cond_test(1476 call isParam(1477 'field by num' x(1479 call + i 1))))
    {
      { scopeless
        (1466 call compilerError "cannot return a reference to 'param' field '"(1469 call getFieldName(1471 'typeof' x) i) "'")
      }
    }
    (1488 return(1489 'field by num' x(1491 call + i 1)))
  }
  function getFieldRef[1497](ref arg x[1501] :
  unknown t[1499], param arg s[1505] :
  string[244]) ref : _unknown[42] "unsafe" "@unstable"
  {
    (1510 call checkValidQueryT t)
    { scopeless
      unknown i[1513] "param"(1514 'field name to num' t s)
      (1518 'end of statement')
    }
    if(1533 call _cond_test(1529 call == i 0))
    {
      { scopeless
        (1520 call compilerError "field " s " not found in "(1524 call : t string[244]))
      }
    }
    if(1549 call _cond_test(1545 call isType(1546 'field by num' x i)))
    {
      { scopeless
        (1539 call compilerError "cannot return a reference to 'type' field '" s "'")
      }
    }
    if(1565 call _cond_test(1561 call isParam(1562 'field by num' x i)))
    {
      { scopeless
        (1555 call compilerError "cannot return a reference to 'param' field '" s "'")
      }
    }
    (1570 return(1571 'field by num' x i))
  }
  function getFieldIndex[1576](arg t[1578]:_any[141](?), param arg name[1581] :
  string[244]) param : _unknown[42] "suppress generic actual warning"
  {
    (1586 return(1587 call -(1589 'field name to num'(1591 call checkQueryT t) name) 1))
  }
  { scopeless type
    int[10]
  }
  function hasField[1598](arg t[1600]:_any[141](?), param arg name[1603] :
  string[244]) param : _unknown[42] "suppress generic actual warning"
  {
    (1608 return(1609 call >=(1612 call getFieldIndex t name) 0))
  }
  { scopeless type
    bool
  }
  function isFieldBound[1619](arg t[1621]:_any[141](?), param arg idx[1624] :
  int[10]) param : _unknown[42] "suppress generic actual warning" "@unstable"
  {
    (1629 return(1630 'is bound'(1632 call checkQueryT t)(1635 call getFieldName(1637 call checkQueryT t) idx)))
  }
  { scopeless type
    bool
  }
  function isFieldBound[1643](arg t[1645]:_any[141](?), param arg name[1648] :
  string[244]) param : _unknown[42] "suppress generic actual warning" "@unstable"
  {
    (1653 return(1654 'is bound'(1656 call checkQueryT t) name))
  }
  { scopeless type
    bool
  }
  function canResolve[1662](param arg fname[1665] :
  string[244]) param : _unknown[42] "@unstable"
  {
    (1670 return(1671 'call and fn resolves' fname))
  }
  { scopeless type
    bool
  }
  function canResolve[1676](param arg fname[1679] :
  string[244], arg args[1683]:_any[141](?) ...) param : _unknown[42] "@unstable"
  {
    (1688 return(1689 'call and fn resolves' fname(1692 'expand_tuple' args)))
  }
  { scopeless type
    bool
  }
  function canResolveMethod[1696](arg obj[1698]:_any[141](?), param arg fname[1701] :
  string[244]) param : _unknown[42] "@unstable"
  {
    (1706 return(1707 'method call and fn resolves' obj fname))
  }
  { scopeless type
    bool
  }
  function canResolveMethod[1713](arg obj[1715]:_any[141](?), param arg fname[1718] :
  string[244], arg args[1722]:_any[141](?) ...) param : _unknown[42] "@unstable"
  {
    (1727 return(1728 'method call and fn resolves' obj fname(1732 'expand_tuple' args)))
  }
  { scopeless type
    bool
  }
  function canResolveTypeMethod[1736](arg t[1738]:_any[141](?), param arg fname[1741] :
  string[244]) param : _unknown[42] "@unstable"
  {
    (1746 return(1747 'method call and fn resolves' t fname))
  }
  { scopeless type
    bool
  }
  function canResolveTypeMethod[1753](arg t[1755]:_any[141](?), param arg fname[1758] :
  string[244], arg args[1762]:_any[141](?) ...) param : _unknown[42] "@unstable"
  {
    (1767 return(1768 'method call and fn resolves' t fname(1772 'expand_tuple' args)))
  }
  { scopeless type
    bool
  }
  function getLineNumber[1776]() param : _unknown[42] "get line number"
  {
  }
  { scopeless type
    int[10]
  }
  function getFileName[1783]() param : _unknown[42] "get file name"
  {
  }
  { scopeless type
    string[244]
  }
  function getRoutineName[1790]() param : _unknown[42] "get function name"
  {
  }
  { scopeless type
    string[244]
  }
  function getModuleName[1797]() param : _unknown[42] "get module name"
  {
  }
  { scopeless type
    string[244]
  }
}