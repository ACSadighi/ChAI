AST dump for ShallowCopy after pass scopeResolve.
Module use list: ChapelStandard CTypes POSIX 

{
  function ptrTo[239293](ref arg x[239295]:_any[141](?)) : _unknown[42] "inline" "private"
  {
    (239298 return(239300 call c_pointer_return x[239295]))
  }
  function ptrToConst[239304](const  ref arg x[239306]:_any[141](?)) : _unknown[42] "inline" "private"
  {
    (239309 return(239311 call c_pointer_return_const x[239306]))
  }
  function shallowCopy[239315](ref arg dst[239317]:_any[141](?), ref arg src[239319]:_any[141](?)) : _unknown[42] "inline" "no return value for void"
  {
    unknown st[239323] "type variable"(239324 'static typeof' dst[239317])
    if(239365 call _cond_test(239363 call isPODType st[239323]))
    {
      (239328 call = dst[239317] src[239319])
    }
    {
      unknown size[239334](239336 call c_sizeof st[239323])
      (239339 'end of statement')
      (239341 call memcpy(239343 call ptrTo dst[239317])(239346 call ptrTo src[239319]) size[239334])
      if(239358 call _cond_test 1)
      {
        (239351 call memset(239353 call ptrTo src[239319]) 0 size[239334])
      }
    }
  }
  function shallowCopyInit[239371](ref arg src[239373]:_any[141](?)) : _unknown[42] "inline" "no copy return" "unsafe"
  {
    unknown st[239377] "type variable"(239378 'static typeof' src[239373])
    unknown dst[239382] "no auto destroy" "no init" st[239377]
    (239385 'end of statement')
    (239387 call shallowCopy dst[239382] src[239373])
    (239390 return dst[239382])
  }
  function shallowSwap[239394](ref arg lhs[239398] :
  unknown t[239396], ref arg rhs[239402] :
  t[239396]) : _unknown[42] "inline" "unsafe" "no return value for void"
  {
    unknown st[239407] "type variable"(239408 'static typeof' lhs[239398])
    unknown tmp[239412] "no auto destroy" "no init" st[239407]
    (239415 'end of statement')
    if(239467 call _cond_test(239465 call isPODType st[239407]))
    {
      (239417 call = tmp[239412] lhs[239398])
      (239421 call = lhs[239398] rhs[239402])
      (239425 call = rhs[239402] tmp[239412])
    }
    {
      unknown size[239431](239433 call c_sizeof st[239407])
      (239436 'end of statement')
      (239438 call memcpy(239440 call ptrTo tmp[239412])(239443 call ptrTo lhs[239398]) size[239431])
      (239447 call memcpy(239449 call ptrTo lhs[239398])(239452 call ptrTo rhs[239402]) size[239431])
      (239456 call memcpy(239458 call ptrTo rhs[239402])(239461 call ptrTo tmp[239412]) size[239431])
    }
  }
  function shallowCopy[239473](ref arg A[239475]:_any[141](?), arg dst[239477]:_any[141](?), arg src[239479]:_any[141](?), arg nElts[239481]:_any[141](?)) : _unknown[42] "inline" "no return value for void"
  {
    unknown idxType[239485] "type variable"(239487 call . A[239475] c"idxType")
    const dst_idx[239492] "const"(239493 call : dst[239477] idxType[239485])
    (239498 'end of statement')
    const src_idx[239500] "const"(239501 call : src[239479] idxType[239485])
    (239506 'end of statement')
    const nElts_idx[239508] "const"(239509 call : nElts[239481] idxType[239485])
    (239514 'end of statement')
    if(239573 call _cond_test 1)
    {
      (239517 call assert(239518 call > nElts[239481] 0))
      (239526 call(239523 call . dst[239477] c"safeCast") idxType[239485])
      (239532 call(239529 call . src[239479] c"safeCast") idxType[239485])
      (239538 call(239535 call . nElts[239481] c"safeCast") idxType[239485])
      (239541 call assert(239549 call(239546 call .(239543 call . A[239475] c"_dom") c"contains")(239550 call #(239553 call chpl_build_low_bounded_range dst_idx[239492]) nElts_idx[239508])))
      (239557 call assert(239565 call(239562 call .(239559 call . A[239475] c"_dom") c"contains")(239566 call #(239569 call chpl_build_low_bounded_range src_idx[239500]) nElts_idx[239508])))
    }
    if(239729 call _cond_test(239728 call(239725 call .(239722 call . A[239475] c"_instance") c"isDefaultRectangular")))
    {
      unknown st[239579] "type variable"(239580 'static field type'(239582 call . A[239475] c"_value") "eltType")
      unknown size[239590](239591 call *(239593 call : nElts[239481] c_size_t[614])(239598 call c_sizeof st[239579]))
      (239601 'end of statement')
      (239603 call memcpy(239605 call ptrTo(239607 call A[239475] dst_idx[239492]))(239610 call ptrTo(239612 call A[239475] src_idx[239500])) size[239590])
    }
    {
      unknown ok[239617](239619 call chpl__bulkTransferArray A[239475](239629 call chpl__buildDomainExpr(239622 call #(239625 call chpl_build_low_bounded_range dst_idx[239492]) nElts_idx[239508]) 1) A[239475](239640 call chpl__buildDomainExpr(239633 call #(239636 call chpl_build_low_bounded_range src_idx[239500]) nElts_idx[239508]) 1))
      (239643 'end of statement')
      if(239717 call _cond_test(239714 call ! ok[239617]))
      {
        {
          unknown _indexOfInterest[239675] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[239676] "expr temp" "temp"
          (239685 'move' _iterator[239676](239683 call _getIterator(239692 call chpl_direct_counted_range_iter 0 nElts[239481])))
          Defer
          {
            {
              (239707 call _freeIterator _iterator[239676])
            }
          }
          { scopeless type
            (239697 'move' _indexOfInterest[239675](239694 call iteratorIndex _iterator[239676]))
          }
          ForLoop[239677] order-independent
          {
            unknown i[239645] "index var" "insert auto destroy"
            (239702 'move' i[239645] _indexOfInterest[239675])
            {
              (239654 '='(239656 call A[239475](239657 call + dst_idx[239492](239660 call : i[239645] idxType[239485])))(239665 call A[239475](239666 call + src_idx[239500](239669 call : i[239645] idxType[239485]))))
            }
            label _continueLabel[239680]
            _indexOfInterest[239675]
            _iterator[239676]
          }
          label _breakLabel[239681]
        }
      }
    }
  }
  function shallowCopy[239735](ref arg DstA[239737]:_any[141](?), arg dst[239739]:_any[141](?), arg SrcA[239741]:_any[141](?), arg src[239743]:_any[141](?), arg nElts[239745]:_any[141](?)) : _unknown[42] "inline" "no return value for void"
  {
    const dst_idx[239749] "const"(239750 call : dst[239739](239754 call . DstA[239737] c"idxType"))
    (239758 'end of statement')
    const src_idx[239760] "const"(239761 call : src[239743](239765 call . SrcA[239741] c"idxType"))
    (239769 'end of statement')
    const nElts_dst_idx[239771] "const"(239772 call : nElts[239745](239776 call . DstA[239737] c"idxType"))
    (239780 'end of statement')
    const nElts_src_idx[239782] "const"(239783 call : nElts[239745](239787 call . SrcA[239741] c"idxType"))
    (239791 'end of statement')
    if(239868 call _cond_test 1)
    {
      (239794 call assert(239795 call > nElts[239745] 0))
      (239803 call(239800 call . dst[239739] c"safeCast")(239805 call . DstA[239737] c"idxType"))
      (239812 call(239809 call . src[239743] c"safeCast")(239814 call . SrcA[239741] c"idxType"))
      (239821 call(239818 call . nElts[239745] c"safeCast")(239823 call . DstA[239737] c"idxType"))
      (239830 call(239827 call . nElts[239745] c"safeCast")(239832 call . SrcA[239741] c"idxType"))
      (239836 call assert(239844 call(239841 call .(239838 call . DstA[239737] c"_dom") c"contains")(239845 call #(239848 call chpl_build_low_bounded_range dst_idx[239749]) nElts_dst_idx[239771])))
      (239852 call assert(239860 call(239857 call .(239854 call . SrcA[239741] c"_dom") c"contains")(239861 call #(239864 call chpl_build_low_bounded_range src_idx[239760]) nElts_src_idx[239782])))
    }
    if(240032 call _cond_test(240014 call &&(240023 call(240020 call .(240017 call . DstA[239737] c"_instance") c"isDefaultRectangular"))(240031 call(240028 call .(240025 call . SrcA[239741] c"_instance") c"isDefaultRectangular"))))
    {
      unknown st[239874] "type variable"(239875 'static field type'(239877 call . DstA[239737] c"_value") "eltType")
      unknown size[239883](239884 call *(239886 call : nElts[239745] c_size_t[614])(239891 call c_sizeof st[239874]))
      (239894 'end of statement')
      (239896 call memcpy(239898 call ptrTo(239900 call DstA[239737] dst_idx[239749]))(239903 call ptrToConst(239905 call SrcA[239741] src_idx[239760])) size[239883])
    }
    {
      unknown ok[239910](239912 call chpl__bulkTransferArray DstA[239737](239922 call chpl__buildDomainExpr(239915 call #(239918 call chpl_build_low_bounded_range dst_idx[239749]) nElts_dst_idx[239771]) 1) SrcA[239741](239933 call chpl__buildDomainExpr(239926 call #(239929 call chpl_build_low_bounded_range src_idx[239760]) nElts_src_idx[239782]) 1))
      (239936 'end of statement')
      if(240010 call _cond_test(240007 call ! ok[239910]))
      {
        {
          unknown _indexOfInterest[239968] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[239969] "expr temp" "temp"
          (239978 'move' _iterator[239969](239976 call _getIterator(239985 call chpl_direct_counted_range_iter 0 nElts_dst_idx[239771])))
          Defer
          {
            {
              (240000 call _freeIterator _iterator[239969])
            }
          }
          { scopeless type
            (239990 'move' _indexOfInterest[239968](239987 call iteratorIndex _iterator[239969]))
          }
          ForLoop[239970] order-independent
          {
            unknown i[239938] "index var" "insert auto destroy"
            (239995 'move' i[239938] _indexOfInterest[239968])
            {
              (239947 '='(239949 call DstA[239737](239950 call + dst_idx[239749] i[239938]))(239955 call SrcA[239741](239956 call + src_idx[239760](239959 call : i[239938](239963 call . SrcA[239741] c"idxType")))))
            }
            label _continueLabel[239973]
            _indexOfInterest[239968]
            _iterator[239969]
          }
          label _breakLabel[239974]
        }
      }
    }
  }
  function shallowCopyPutGetRefs[240038](ref arg dst[240040]:_any[141](?), const  ref arg src[240042]:_any[141](?), arg numBytes[240045] :
  c_size_t[614]) : _unknown[42] "no return value for void"
  {
    if(240101 call _cond_test(240090 call ==(240096 '_wide_get_node' dst[240040])(240098 call .(407323 call here[135591]) c"id")))
    {
      (240050 'chpl_comm_get' dst[240040](240056 '_wide_get_node' src[240042]) src[240042] numBytes[240045])
    }
    {
      if(240086 call _cond_test(240075 call ==(240081 '_wide_get_node' src[240042])(240083 call .(407321 call here[135591]) c"id")))
      {
        (240060 'chpl_comm_put' src[240042](240066 '_wide_get_node' dst[240040]) dst[240040] numBytes[240045])
      }
      {
        (240071 call halt "Remote src and remote dst not yet supported")
      }
    }
  }
  function shallowCopyPutGet[240108](ref arg DstA[240110]:_any[141](?), arg dst[240112]:_any[141](?), const  ref arg SrcA[240114]:_any[141](?), arg src[240116]:_any[141](?), arg nElts[240118]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    unknown size[240122](240123 call *(240125 call : nElts[240118] c_size_t[614])(240130 call c_sizeof(240132 call . DstA[240110] c"eltType")))
    (240136 'end of statement')
    (240138 call shallowCopyPutGetRefs(240140 call DstA[240110] dst[240112])(240143 call SrcA[240114] src[240116]) size[240122])
  }
  (396859 'used modules list'(387044 'use' ChapelStandard[315387])(239285 'use' CTypes[51217])(239291 'use' POSIX[12822]))
}