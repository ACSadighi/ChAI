AST dump for String after pass readExternC.
Module use list: 

{
  (18366 'use' ChapelStandard)
  (18369 'use' CTypes)
  (18372 'use' ByteBufferHelpers)
  (18375 'use' BytesStringCommon)
  (18380 'use' ChplConfig 'only' compiledForSingleLocale)
  (18385 'import' OS.{errorCode})
  (18387 'use' CString)
  (18390 'use' StringCasts)
  (18395 'use' BytesStringCommon 'only' encodePolicy)
  (18398 'use' NVStringFactory)
  function qio_decode_char_buf[18400](ref arg chr[18405] :
  (18403 call int[10] 32), ref arg nbytes[18409] :
  c_int, arg buf[18415] :
  (18413 call c_ptrConst c_char), arg buflen[18419] :
  c_ssize_t) : _unknown[42] "extern" "local args" "no fn body" "private" "fn synchronization free"
  {
  }
  { scopeless type
    errorCode
  }
  function qio_decode_char_buf_esc[18426](ref arg chr[18431] :
  (18429 call int[10] 32), ref arg nbytes[18435] :
  c_int, arg buf[18441] :
  (18439 call c_ptrConst c_char), arg buflen[18445] :
  c_ssize_t) : _unknown[42] "extern" "local args" "no fn body" "private" "fn synchronization free"
  {
  }
  { scopeless type
    errorCode
  }
  function qio_encode_char_buf[18452](arg dst[18457] :
  (18455 call c_ptr void[4]), arg chr[18463] :
  (18461 call int[10] 32)) : _unknown[42] "extern" "local args" "no fn body" "private" "fn synchronization free"
  {
  }
  { scopeless type
    errorCode
  }
  function qio_nbytes_char[18470](arg chr[18475] :
  (18473 call int[10] 32)) : _unknown[42] "extern" "local args" "no fn body" "private" "fn synchronization free"
  {
  }
  { scopeless type
    c_int
  }
  { scopeless
    unknown debugStrings[18483] "config" "param" "private" 0
    (18486 'end of statement')
  }
  { scopeless
    unknown useCachedNumCodepoints[18488] "config" "param" 1
    (18491 'end of statement')
  }
  type byteIndex[18611] unknown _bindex[18495] int[10] function byteIndex[18611].init[18499](arg _mt[18503]:_MT[201], arg this[18501]:byteIndex[18611]) : _unknown[42] "method" "primary method"
  {
  } function byteIndex[18611].init[18508](arg _mt[18516]:_MT[201], arg this[18510]:byteIndex[18611], arg i[18513] :
  int[10]) : _unknown[42] "method" "primary method"
  {
    (18519 call = _bindex i)
  } function byteIndex[18611].init=[18525](arg _mt[18533]:_MT[201], arg this[18527]:byteIndex[18611], arg other[18530] :
  byteIndex) : _unknown[42] "method" "primary method"
  {
    (18536 call = _bindex(18542 call . other c"_bindex"))
  } function byteIndex[18611].init=[18547](arg _mt[18555]:_MT[201], arg this[18549]:byteIndex[18611], arg i[18552] :
  int[10]) : _unknown[42] "method" "primary method"
  {
    (18558 call = _bindex i)
  } function byteIndex[18611].serialize[18564](arg _mt[18572]:_MT[201], arg this[18566]:byteIndex[18611], arg writer[18568]:_any[141](?), ref arg serializer[18570]:_any[141](?)) : _unknown[42] throws "method" "primary method"
  {
    (18581 call(18578 call . writer c"write") _bindex)
  } function byteIndex[18611].:[18585](arg _mt[18597]:_MT[201], arg this[18587]:byteIndex[18611], arg val[18590] :
  byteIndex, arg t[18594] :
  string[244]) : _unknown[42] "method" "primary method" "operator"
  {
    (18600 return(18601 call :(18604 call . val c"_bindex") string[244]))
  } writeSerializable
  type codepointIndex[18730] unknown _cpindex[18616] int[10] function codepointIndex[18730].init[18620](arg _mt[18624]:_MT[201], arg this[18622]:codepointIndex[18730]) : _unknown[42] "method" "primary method"
  {
  } function codepointIndex[18730].init[18629](arg _mt[18637]:_MT[201], arg this[18631]:codepointIndex[18730], arg i[18634] :
  int[10]) : _unknown[42] "method" "primary method"
  {
    (18640 call = _cpindex i)
  } function codepointIndex[18730].init=[18646](arg _mt[18654]:_MT[201], arg this[18648]:codepointIndex[18730], arg i[18651] :
  int[10]) : _unknown[42] "method" "primary method"
  {
    (18657 call = _cpindex i)
  } function codepointIndex[18730].init=[18663](arg _mt[18671]:_MT[201], arg this[18665]:codepointIndex[18730], arg cpi[18668] :
  codepointIndex) : _unknown[42] "method" "primary method"
  {
    (18674 call = _cpindex(18680 call . cpi c"_cpindex"))
  } function codepointIndex[18730].serialize[18685](arg _mt[18693]:_MT[201], arg this[18687]:codepointIndex[18730], arg writer[18689]:_any[141](?), ref arg serializer[18691]:_any[141](?)) : _unknown[42] throws "method" "primary method"
  {
    (18700 call(18697 call . writer c"write") _cpindex)
  } function codepointIndex[18730].:[18704](arg _mt[18716]:_MT[201], arg this[18706]:codepointIndex[18730], arg val[18709] :
  codepointIndex, arg t[18713] :
  string[244]) : _unknown[42] "method" "primary method" "operator"
  {
    (18719 return(18720 call :(18723 call . val c"_cpindex") string[244]))
  } writeSerializable
  function chpl_build_bounded_range[18732](arg low[18735] :
  byteIndex, arg high[18739] :
  byteIndex) : _unknown[42]
  {
    (18743 return(18744 'new'(18746 call range byteIndex(low = low)(high = high))))
  }
  function chpl_build_bounded_range[18754](arg low[18757] :
  codepointIndex, arg high[18761] :
  codepointIndex) : _unknown[42]
  {
    (18765 return(18766 'new'(18768 call range codepointIndex(low = low)(high = high))))
  }
  function chpl_build_low_bounded_range[18776](arg low[18779] :
  byteIndex) : _unknown[42]
  {
    (18783 return(18784 'new'(18786 call range(low = low))))
  }
  function chpl_build_low_bounded_range[18791](arg low[18794] :
  codepointIndex) : _unknown[42]
  {
    (18798 return(18799 'new'(18801 call range(low = low))))
  }
  function chpl_build_high_bounded_range[18806](arg high[18809] :
  byteIndex) : _unknown[42]
  {
    (18813 return(18814 'new'(18816 call range(high = high))))
  }
  function chpl_build_high_bounded_range[18821](arg high[18824] :
  codepointIndex) : _unknown[42]
  {
    (18828 return(18829 'new'(18831 call range(high = high))))
  }
  function chpl__rangeStrideType[18836](arg idxType[18839] :
  byteIndex) type : _unknown[42]
  {
    (18843 return int[10])
  }
  function chpl__rangeStrideType[18847](arg idxType[18850] :
  codepointIndex) type : _unknown[42]
  {
    (18854 return int[10])
  }
  function chpl__rangeUnsignedType[18858](arg idxType[18861] :
  byteIndex) type : _unknown[42]
  {
    (18865 return uint[86])
  }
  function chpl__rangeUnsignedType[18869](arg idxType[18872] :
  codepointIndex) type : _unknown[42]
  {
    (18876 return uint[86])
  }
  function chpl__idxToInt[18880](arg i[18883] :
  byteIndex) : _unknown[42] "inline"
  {
    (18887 return(18888 call : i int[10]))
  }
  function chpl__idxToInt[18894](arg i[18897] :
  codepointIndex) : _unknown[42] "inline"
  {
    (18901 return(18902 call : i int[10]))
  }
  function chpl__intToIdx[18908](arg idxType[18911] :
  byteIndex, arg i[18915] :
  int[10]) : _unknown[42] "inline"
  {
    (18919 return(18920 call : i byteIndex))
  }
  function chpl__intToIdx[18926](arg idxType[18929] :
  codepointIndex, arg i[18933] :
  int[10]) : _unknown[42] "inline"
  {
    (18937 return(18938 call : i codepointIndex))
  }
  function _unknown[42].>[18944](arg _mt[18958]:_MT[201], arg this[18947] :
  byteIndex, arg x[18951] :
  byteIndex, arg y[18955] :
  byteIndex) : _unknown[42] "inline" "method" "operator"
  {
    (18961 return(18962 call >(18964 call : x int[10])(18968 call : y int[10])))
  }
  function _unknown[42].>[18974](arg _mt[18988]:_MT[201], arg this[18977] :
  codepointIndex, arg x[18981] :
  codepointIndex, arg y[18985] :
  codepointIndex) : _unknown[42] "inline" "method" "operator"
  {
    (18991 return(18992 call >(18994 call : x int[10])(18998 call : y int[10])))
  }
  function _unknown[42].>[19004](arg _mt[19018]:_MT[201], arg this[19007] :
  byteIndex, arg x[19011] :
  byteIndex, arg y[19015] :
  int[10]) : _unknown[42] "inline" "method" "operator"
  {
    (19021 return(19022 call >(19024 call : x int[10]) y))
  }
  function _unknown[42].>[19031](arg _mt[19045]:_MT[201], arg this[19034] :
  codepointIndex, arg x[19038] :
  codepointIndex, arg y[19042] :
  int[10]) : _unknown[42] "inline" "method" "operator"
  {
    (19048 return(19049 call >(19051 call : x int[10]) y))
  }
  function _unknown[42].>[19058](arg _mt[19072]:_MT[201], arg this[19061] :
  byteIndex, arg x[19065] :
  int[10], arg y[19069] :
  byteIndex) : _unknown[42] "inline" "method" "operator"
  {
    (19075 return(19076 call > x(19079 call : y int[10])))
  }
  function _unknown[42].>[19085](arg _mt[19099]:_MT[201], arg this[19088] :
  codepointIndex, arg x[19092] :
  int[10], arg y[19096] :
  codepointIndex) : _unknown[42] "inline" "method" "operator"
  {
    (19102 return(19103 call > x(19106 call : y int[10])))
  }
  function _unknown[42].+[19112](arg _mt[19126]:_MT[201], arg this[19115] :
  byteIndex, arg x[19119] :
  byteIndex, arg y[19123] :
  int[10]) : _unknown[42] "inline" "method" "operator"
  {
    (19129 return(19130 call :(19132 call +(19134 call : x int[10]) y) byteIndex))
  }
  function _unknown[42].+[19142](arg _mt[19156]:_MT[201], arg this[19145] :
  codepointIndex, arg x[19149] :
  codepointIndex, arg y[19153] :
  int[10]) : _unknown[42] "inline" "method" "operator"
  {
    (19159 return(19160 call :(19162 call +(19164 call : x int[10]) y) codepointIndex))
  }
  function _unknown[42].+[19172](arg _mt[19186]:_MT[201], arg this[19175] :
  byteIndex, arg x[19179] :
  int[10], arg y[19183] :
  byteIndex) : _unknown[42] "inline" "method" "operator"
  {
    (19189 return(19190 call :(19192 call + x(19195 call : y int[10])) byteIndex))
  }
  function _unknown[42].+[19202](arg _mt[19216]:_MT[201], arg this[19205] :
  codepointIndex, arg x[19209] :
  int[10], arg y[19213] :
  codepointIndex) : _unknown[42] "inline" "method" "operator"
  {
    (19219 return(19220 call :(19222 call + x(19225 call : y int[10])) codepointIndex))
  }
  function +[19232](arg x[19235] :
  bufferType, arg y[19239] :
  byteIndex) : _unknown[42] "inline" "operator"
  {
    (19243 return(19244 call + x(19247 call : y int[10])))
  }
  function _unknown[42].-[19253](arg _mt[19267]:_MT[201], arg this[19256] :
  byteIndex, arg x[19260] :
  byteIndex, arg y[19264] :
  int[10]) : _unknown[42] "inline" "method" "operator"
  {
    (19270 return(19271 call :(19273 call -(19275 call : x int[10]) y) byteIndex))
  }
  function _unknown[42].-[19283](arg _mt[19297]:_MT[201], arg this[19286] :
  codepointIndex, arg x[19290] :
  codepointIndex, arg y[19294] :
  int[10]) : _unknown[42] "inline" "method" "operator"
  {
    (19300 return(19301 call :(19303 call -(19305 call : x int[10]) y) codepointIndex))
  }
  function _unknown[42].-[19313](arg _mt[19327]:_MT[201], arg this[19316] :
  byteIndex, arg x[19320] :
  byteIndex, arg y[19324] :
  byteIndex) : _unknown[42] "inline" "method" "operator"
  {
    (19330 return(19331 call -(19333 call : x int[10])(19337 call : y int[10])))
  }
  function _unknown[42].-[19343](arg _mt[19357]:_MT[201], arg this[19346] :
  codepointIndex, arg x[19350] :
  codepointIndex, arg y[19354] :
  codepointIndex) : _unknown[42] "inline" "method" "operator"
  {
    (19360 return(19361 call -(19363 call : x int[10])(19367 call : y int[10])))
  }
  function _unknown[42].<[19373](arg _mt[19387]:_MT[201], arg this[19376] :
  byteIndex, arg x[19380] :
  byteIndex, arg y[19384] :
  byteIndex) : _unknown[42] "inline" "method" "operator"
  {
    (19390 return(19391 call <(19393 call : x int[10])(19397 call : y int[10])))
  }
  function _unknown[42].<[19403](arg _mt[19417]:_MT[201], arg this[19406] :
  codepointIndex, arg x[19410] :
  codepointIndex, arg y[19414] :
  codepointIndex) : _unknown[42] "inline" "method" "operator"
  {
    (19420 return(19421 call <(19423 call : x int[10])(19427 call : y int[10])))
  }
  function _unknown[42].<[19433](arg _mt[19447]:_MT[201], arg this[19436] :
  byteIndex, arg x[19440] :
  byteIndex, arg y[19444] :
  int[10]) : _unknown[42] "inline" "method" "operator"
  {
    (19450 return(19451 call <(19453 call : x int[10]) y))
  }
  function _unknown[42].<[19460](arg _mt[19474]:_MT[201], arg this[19463] :
  codepointIndex, arg x[19467] :
  codepointIndex, arg y[19471] :
  int[10]) : _unknown[42] "inline" "method" "operator"
  {
    (19477 return(19478 call <(19480 call : x int[10]) y))
  }
  function _unknown[42].<[19487](arg _mt[19501]:_MT[201], arg this[19490] :
  byteIndex, arg x[19494] :
  int[10], arg y[19498] :
  byteIndex) : _unknown[42] "inline" "method" "operator"
  {
    (19504 return(19505 call < x(19508 call : y int[10])))
  }
  function _unknown[42].<[19514](arg _mt[19528]:_MT[201], arg this[19517] :
  codepointIndex, arg x[19521] :
  int[10], arg y[19525] :
  codepointIndex) : _unknown[42] "inline" "method" "operator"
  {
    (19531 return(19532 call < x(19535 call : y int[10])))
  }
  function _unknown[42].>=[19541](arg _mt[19555]:_MT[201], arg this[19544] :
  byteIndex, arg x[19548] :
  byteIndex, arg y[19552] :
  byteIndex) : _unknown[42] "inline" "method" "operator"
  {
    (19558 return(19559 call >=(19561 call : x int[10])(19565 call : y int[10])))
  }
  function _unknown[42].>=[19571](arg _mt[19585]:_MT[201], arg this[19574] :
  codepointIndex, arg x[19578] :
  codepointIndex, arg y[19582] :
  codepointIndex) : _unknown[42] "inline" "method" "operator"
  {
    (19588 return(19589 call >=(19591 call : x int[10])(19595 call : y int[10])))
  }
  function _unknown[42].>=[19601](arg _mt[19615]:_MT[201], arg this[19604] :
  byteIndex, arg x[19608] :
  byteIndex, arg y[19612] :
  int[10]) : _unknown[42] "inline" "method" "operator"
  {
    (19618 return(19619 call >=(19621 call : x int[10]) y))
  }
  function _unknown[42].>=[19628](arg _mt[19642]:_MT[201], arg this[19631] :
  codepointIndex, arg x[19635] :
  codepointIndex, arg y[19639] :
  int[10]) : _unknown[42] "inline" "method" "operator"
  {
    (19645 return(19646 call >=(19648 call : x int[10]) y))
  }
  function _unknown[42].>=[19655](arg _mt[19669]:_MT[201], arg this[19658] :
  byteIndex, arg x[19662] :
  int[10], arg y[19666] :
  byteIndex) : _unknown[42] "inline" "method" "operator"
  {
    (19672 return(19673 call >= x(19676 call : y int[10])))
  }
  function _unknown[42].>=[19682](arg _mt[19696]:_MT[201], arg this[19685] :
  codepointIndex, arg x[19689] :
  int[10], arg y[19693] :
  codepointIndex) : _unknown[42] "inline" "method" "operator"
  {
    (19699 return(19700 call >= x(19703 call : y int[10])))
  }
  function _unknown[42].<=[19709](arg _mt[19723]:_MT[201], arg this[19712] :
  byteIndex, arg x[19716] :
  byteIndex, arg y[19720] :
  byteIndex) : _unknown[42] "inline" "method" "operator"
  {
    (19726 return(19727 call <=(19729 call : x int[10])(19733 call : y int[10])))
  }
  function _unknown[42].<=[19739](arg _mt[19753]:_MT[201], arg this[19742] :
  codepointIndex, arg x[19746] :
  codepointIndex, arg y[19750] :
  codepointIndex) : _unknown[42] "inline" "method" "operator"
  {
    (19756 return(19757 call <=(19759 call : x int[10])(19763 call : y int[10])))
  }
  function _unknown[42].<=[19769](arg _mt[19783]:_MT[201], arg this[19772] :
  byteIndex, arg x[19776] :
  byteIndex, arg y[19780] :
  int[10]) : _unknown[42] "inline" "method" "operator"
  {
    (19786 return(19787 call <=(19789 call : x int[10]) y))
  }
  function _unknown[42].<=[19796](arg _mt[19810]:_MT[201], arg this[19799] :
  codepointIndex, arg x[19803] :
  codepointIndex, arg y[19807] :
  int[10]) : _unknown[42] "inline" "method" "operator"
  {
    (19813 return(19814 call <=(19816 call : x int[10]) y))
  }
  function _unknown[42].<=[19823](arg _mt[19837]:_MT[201], arg this[19826] :
  byteIndex, arg x[19830] :
  int[10], arg y[19834] :
  byteIndex) : _unknown[42] "inline" "method" "operator"
  {
    (19840 return(19841 call <= x(19844 call : y int[10])))
  }
  function _unknown[42].<=[19850](arg _mt[19864]:_MT[201], arg this[19853] :
  codepointIndex, arg x[19857] :
  int[10], arg y[19861] :
  codepointIndex) : _unknown[42] "inline" "method" "operator"
  {
    (19867 return(19868 call <= x(19871 call : y int[10])))
  }
  function _unknown[42].==[19877](arg _mt[19891]:_MT[201], arg this[19880] :
  byteIndex, arg x[19884] :
  byteIndex, arg y[19888] :
  byteIndex) : _unknown[42] "inline" "method" "operator"
  {
    (19894 return(19895 call ==(19897 call : x int[10])(19901 call : y int[10])))
  }
  function _unknown[42].==[19907](arg _mt[19921]:_MT[201], arg this[19910] :
  codepointIndex, arg x[19914] :
  codepointIndex, arg y[19918] :
  codepointIndex) : _unknown[42] "inline" "method" "operator"
  {
    (19924 return(19925 call ==(19927 call : x int[10])(19931 call : y int[10])))
  }
  function _unknown[42].==[19937](arg _mt[19951]:_MT[201], arg this[19940] :
  byteIndex, arg x[19944] :
  byteIndex, arg y[19948] :
  int[10]) : _unknown[42] "inline" "method" "operator"
  {
    (19954 return(19955 call ==(19957 call : x int[10]) y))
  }
  function _unknown[42].==[19964](arg _mt[19978]:_MT[201], arg this[19967] :
  codepointIndex, arg x[19971] :
  codepointIndex, arg y[19975] :
  int[10]) : _unknown[42] "inline" "method" "operator"
  {
    (19981 return(19982 call ==(19984 call : x int[10]) y))
  }
  function _unknown[42].==[19991](arg _mt[20005]:_MT[201], arg this[19994] :
  byteIndex, arg x[19998] :
  int[10], arg y[20002] :
  byteIndex) : _unknown[42] "inline" "method" "operator"
  {
    (20008 return(20009 call == x(20012 call : y int[10])))
  }
  function _unknown[42].==[20018](arg _mt[20032]:_MT[201], arg this[20021] :
  codepointIndex, arg x[20025] :
  int[10], arg y[20029] :
  codepointIndex) : _unknown[42] "inline" "method" "operator"
  {
    (20035 return(20036 call == x(20039 call : y int[10])))
  }
  function _unknown[42].!=[20045](arg _mt[20059]:_MT[201], arg this[20048] :
  byteIndex, arg x[20052] :
  byteIndex, arg y[20056] :
  byteIndex) : _unknown[42] "inline" "method" "operator"
  {
    (20062 return(20063 call !=(20065 call : x int[10])(20069 call : y int[10])))
  }
  function _unknown[42].!=[20075](arg _mt[20089]:_MT[201], arg this[20078] :
  codepointIndex, arg x[20082] :
  codepointIndex, arg y[20086] :
  codepointIndex) : _unknown[42] "inline" "method" "operator"
  {
    (20092 return(20093 call !=(20095 call : x int[10])(20099 call : y int[10])))
  }
  function _unknown[42].!=[20105](arg _mt[20119]:_MT[201], arg this[20108] :
  byteIndex, arg x[20112] :
  byteIndex, arg y[20116] :
  int[10]) : _unknown[42] "inline" "method" "operator"
  {
    (20122 return(20123 call !=(20125 call : x int[10]) y))
  }
  function _unknown[42].!=[20132](arg _mt[20146]:_MT[201], arg this[20135] :
  codepointIndex, arg x[20139] :
  codepointIndex, arg y[20143] :
  int[10]) : _unknown[42] "inline" "method" "operator"
  {
    (20149 return(20150 call !=(20152 call : x int[10]) y))
  }
  function _unknown[42].!=[20159](arg _mt[20173]:_MT[201], arg this[20162] :
  byteIndex, arg x[20166] :
  int[10], arg y[20170] :
  byteIndex) : _unknown[42] "inline" "method" "operator"
  {
    (20176 return(20177 call != x(20180 call : y int[10])))
  }
  function _unknown[42].!=[20186](arg _mt[20200]:_MT[201], arg this[20189] :
  codepointIndex, arg x[20193] :
  int[10], arg y[20197] :
  codepointIndex) : _unknown[42] "inline" "method" "operator"
  {
    (20203 return(20204 call != x(20207 call : y int[10])))
  }
  function _unknown[42].![20213](arg _mt[20223]:_MT[201], arg this[20216] :
  byteIndex, arg x[20220] :
  byteIndex) : _unknown[42] "inline" "method" "operator"
  {
    (20226 return(20227 call !(20229 call : x int[10])))
  }
  function _unknown[42].![20235](arg _mt[20245]:_MT[201], arg this[20238] :
  codepointIndex, arg x[20242] :
  codepointIndex) : _unknown[42] "inline" "method" "operator"
  {
    (20248 return(20249 call !(20251 call : x int[10])))
  }
  function _cond_test[20257](arg x[20260] :
  byteIndex) : _unknown[42] "inline"
  {
    (20264 return(20265 call != x 0))
  }
  function _cond_test[20271](arg x[20274] :
  codepointIndex) : _unknown[42] "inline"
  {
    (20278 return(20279 call != x 0))
  }
  function validateEncoding[20285](arg buf[20287]:_any[141](?), arg len[20289]:_any[141](?)) : _unknown[42] throws "private"
  {
    function chpl_enc_validate_buf[20293](arg buf[20295]:_any[141](?), arg len[20297]:_any[141](?), ref arg numCodepoints[20299]:_any[141](?)) : _unknown[42] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      c_int
    }
    { scopeless
      unknown numCodepoints[20306] int[10]
      (20309 'end of statement')
    }
    if(20323 call _cond_test(20315 call !=(20318 call chpl_enc_validate_buf buf len numCodepoints) 0))
    {
      (20311 'throw'(20312 'new'(20314 call DecodeError)))
    }
    (20327 return numCodepoints)
  }
  { scopeless type
    int[10]
  }
  function _unknown[42].createBorrowingBuffer[20332](arg _mt[20342]:_MT[201], arg this[20335] :
  string[244], arg x[20339] :
  string[244]) : _unknown[42] "inline" "method" "@unstable"
  {
    { scopeless
      unknown ret[20347] string[244]
      (20350 'end of statement')
    }
    (20351 call =(20356 call . ret c"cachedNumCodepoints")(20360 call . x c"cachedNumCodepoints"))
    (20364 call initWithBorrowedBuffer ret x)
    (20367 return ret)
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].createBorrowingBuffer[20372](arg _mt[20391]:_MT[201], arg this[20375] :
  string[244], arg x[20382] :
  (20379 call c_ptr unknown t[20380]), arg length[20388] =
  (20386 call strLen x)) : _unknown[42] throws "inline" "method" "@unstable"
  {
    (20395 return(20402 call(20399 call . string[244] c"createBorrowingBuffer")(20403 call : x bufferType)(length = length)(size =(20409 call + length 1))))
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].createBorrowingBuffer[20417](arg _mt[20436]:_MT[201], arg this[20420] :
  string[244], arg x[20427] :
  (20424 call c_ptrConst unknown t[20425]), arg length[20433] =
  (20431 call strLen x)) : _unknown[42] throws "inline" "method" "@unstable"
  {
    (20440 return(20445 call(20442 call . string[244] c"createBorrowingBuffer")(20446 call : x bufferType)(length = length)(size =(20452 call + length 1))))
  }
  { scopeless type
    string[244]
  }
  function chpl_createStringWithLiteral[20460](arg buffer[20463] :
  chpl_c_string, arg offset[20467] :
  int[10], arg x[20471] :
  chpl_c_string, arg length[20475] :
  int[10], arg numCodepoints[20479] :
  int[10]) : _unknown[42]
  {
    { scopeless
      unknown buf[20485](20486 call :(20488 call : buffer(20492 call c_ptr void[4]))(20495 call c_ptr(20497 call uint[86] 8)))
      (20500 'end of statement')
    }
    (20501 call = buf(20504 call + buf offset))
    (20520 'import'(20517 call .(20512 call . OS c"POSIX") c"memcpy"))
    (20522 call memcpy(20523 call : buf(20527 call c_ptr void[4]))(20529 call : x(20533 call c_ptr void[4]))(20539 call(20536 call . length c"safeCast") c_size_t))
    (20542 call memcpy(20543 call : buf(20547 call c_ptr void[4]))(20549 call : x(20553 call c_ptr void[4]))(20559 call(20556 call . length c"safeCast") c_size_t))
    (20561 call =(20564 call buf length) 0)
    (20567 return(20569 call chpl_createStringWithBorrowedBufferNV buf(length = length)(size =(20573 call + length 1))(numCodepoints = numCodepoints)))
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].createBorrowingBuffer[20583](arg _mt[20604]:_MT[201], arg this[20586] :
  string[244], arg x[20593] :
  (20590 call c_ptr unknown t[20591]), arg length[20597] :
  int[10], arg size[20601] :
  int[10]) : _unknown[42] throws "method" "@unstable"
  {
    if(20632 call _cond_test(20618 call &&(20620 call != t(20624 call uint[86] 8))(20626 call != t(20630 call int[10] 8))))
    {
      (20610 call compilerError "Cannot create a string with a buffer of "(20614 call : t string[244]))
    }
    { scopeless
      unknown ret[20637] string[244]
      (20640 'end of statement')
    }
    (20641 call =(20644 call . ret c"cachedNumCodepoints")(20648 call validateEncoding(20649 call : x bufferType) length))
    (20655 call initWithBorrowedBuffer ret(20657 call : x bufferType) length size)
    (20663 return ret)
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].createBorrowingBuffer[20668](arg _mt[20685]:_MT[201], arg this[20671] :
  string[244], arg x[20675] :
  chpl_c_string, arg length[20682] =
  (20679 call . x c"size")) : _unknown[42] throws "deprecated" "inline" "method"
  {
    (20689 return(20694 call(20691 call . string[244] c"createBorrowingBuffer")(20695 call : x bufferType)(length = length)(size =(20701 call + length 1))))
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].createAdoptingBuffer[20709](arg _mt[20728]:_MT[201], arg this[20712] :
  string[244], arg x[20719] :
  (20716 call c_ptr unknown t[20717]), arg length[20725] =
  (20723 call strLen x)) : _unknown[42] throws "method"
  {
    (20732 return(20737 call(20734 call . string[244] c"createAdoptingBuffer")(20738 call : x bufferType)(length = length)(size =(20744 call + length 1))))
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].createAdoptingBuffer[20752](arg _mt[20769]:_MT[201], arg this[20755] :
  string[244], arg x[20759] :
  chpl_c_string, arg length[20766] =
  (20763 call . x c"size")) : _unknown[42] throws "deprecated" "inline" "method"
  {
    (20773 return(20778 call(20775 call . string[244] c"createAdoptingBuffer")(20779 call : x bufferType)(length = length)(size =(20785 call + length 1))))
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].createAdoptingBuffer[20793](arg _mt[20812]:_MT[201], arg this[20796] :
  string[244], arg x[20803] :
  (20800 call c_ptrConst unknown t[20801]), arg length[20809] =
  (20807 call strLen x)) : _unknown[42] throws "method"
  {
    (20816 return(20821 call(20818 call . string[244] c"createAdoptingBuffer")(20822 call : x bufferType)(length = length)(size =(20828 call + length 1))))
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].createAdoptingBuffer[20836](arg _mt[20857]:_MT[201], arg this[20839] :
  string[244], arg x[20846] :
  (20843 call c_ptr unknown t[20844]), arg length[20850] :
  int[10], arg size[20854] :
  int[10]) : _unknown[42] throws "inline" "method"
  {
    if(20883 call _cond_test(20869 call &&(20871 call != t(20875 call uint[86] 8))(20877 call != t(20881 call int[10] 8))))
    {
      (20863 call compilerError "Cannot create a string with a buffer of "(20865 call : t string[244]))
    }
    { scopeless
      unknown ret[20888] string[244]
      (20891 'end of statement')
    }
    (20892 call =(20895 call . ret c"cachedNumCodepoints")(20899 call validateEncoding(20900 call : x bufferType) length))
    (20906 call initWithOwnedBuffer ret(20908 call : x bufferType) length size)
    (20914 return ret)
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].createCopyingBuffer[20919](arg _mt[20947]:_MT[201], arg this[20922] :
  string[244], arg x[20929] :
  (20926 call c_ptrConst unknown t[20927]), arg length[20935] =
  (20933 call strLen x), arg policy[20944] =
  (20941 call . decodePolicy c"strict")) : _unknown[42] throws "inline" "method"
  {
    (20951 return(20956 call(20953 call . string[244] c"createCopyingBuffer")(20957 call : x bufferType)(length = length)(size =(20963 call + length 1)) policy))
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].createCopyingBuffer[20972](arg _mt[21005]:_MT[201], arg this[20975] :
  string[244], arg x[20982] :
  (20979 call c_ptr unknown t[20980]), arg length[20988] =
  (20986 call strLen x), arg size[20995] =
  (20991 call + length 1), arg policy[21002] =
  (20999 call . decodePolicy c"strict")) : _unknown[42] throws "method"
  {
    if(21031 call _cond_test(21017 call &&(21019 call != t(21023 call uint[86] 8))(21025 call != t(21029 call int[10] 8))))
    {
      (21011 call compilerError "Cannot create a string with a buffer of "(21013 call : t string[244]))
    }
    (21035 return(21037 call decodeByteBuffer(21038 call : x bufferType) length policy))
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].createCopyingBuffer[21047](arg _mt[21071]:_MT[201], arg this[21050] :
  string[244], arg x[21054] :
  chpl_c_string, arg length[21061] =
  (21058 call . x c"size"), arg policy[21068] =
  (21065 call . decodePolicy c"strict")) : _unknown[42] throws "deprecated" "inline" "method"
  {
    (21075 return(21080 call(21077 call . string[244] c"createCopyingBuffer")(21081 call : x bufferType)(length = length)(size =(21087 call + length 1)) policy))
  }
  { scopeless type
    string[244]
  }
  def module NVStringFactory[21276]  
  type string[244] unknown buffLen[21281] 0 int[10] unknown buffSize[21287] 0 int[10] unknown cachedNumCodepoints[21293] 0 int[10] unknown buff[21299] nil[32] bufferType unknown isOwned[21305] 1 bool unknown hasEscapes[21311] 0 bool unknown locale_id[21317] chpl_nodeID function string[244].init[21321](arg _mt[21325]:_MT[201], arg this[21323]:string[244]) : _unknown[42] "method" "primary method"
  {
  } function string[244].init=[21330](arg _mt[21338]:_MT[201], arg this[21332]:string[244], arg s[21335] :
  string[244]) : _unknown[42] "method" "primary method"
  {
    (21347 call(21344 call . this c"chpl__initThisType"))
    (21349 call initWithNewBuffer this s)
  } function string[244].deinit[21354](arg _mt[21358]:_MT[201], ref arg this[21356]:string[244]) : _unknown[42] "destructor" "method" "primary method"
  {
    if(21399 call _cond_test(21389 call && isOwned(21392 call !=(21395 call . this c"buff") nil[32])))
    {
      {
        const tmp[21381] "const" "temp"
        (21382 'move' tmp[21381](21379 'deref'(21362 'chpl_on_locale_num'(21364 call chpl_buildLocaleID(21366 call . this c"locale_id") c_sublocid_any))))
        {
          (21372 call chpl_here_free(21376 call . this c"buff"))
        }
        (21385 'elided on block' 0 tmp[21381])
      }
    }
  } function string[244].chpl__serialize[21405](arg _mt[21409]:_MT[201], arg this[21407]:string[244]) : _unknown[42] "method" "primary method"
  {
    { scopeless
      unknown data[21413] chpl__inPlaceBuffer
      (21416 'end of statement')
    }
    if(21430 call _cond_test(21426 call <= buffLen CHPL_SHORT_STRING_SIZE))
    {
      (21419 call chpl_string_comm_get(21421 call chpl__getInPlaceBufferDataForWrite data) locale_id buff buffLen)
    }
    (21434 return(21435 'new'(21437 call __serializeHelper buffLen buff buffSize locale_id data cachedNumCodepoints)))
  } function string[244].chpl__deserialize[21446](arg _mt[21452]:_MT[201], arg this[21448]:string[244], arg data[21450]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    if(21555 call _cond_test(21548 call !=(21551 call . data c"locale_id") chpl_nodeID))
    {
      if(21524 call _cond_test(21517 call <=(21520 call . data c"buffLen") CHPL_SHORT_STRING_SIZE))
      {
        (21457 return(21459 call chpl_createStringWithNewBufferNV(21461 call chpl__getInPlaceBufferData(21465 call . data c"shortData"))(21471 call . data c"buffLen")(21475 call . data c"size")(21479 call . data c"cachedNumCodepoints")))
      }
      {
        { scopeless
          unknown localBuff[21484](21486 call bufferCopyRemote(21488 call . data c"locale_id")(21492 call . data c"buff")(21496 call . data c"buffLen"))
          (21500 'end of statement')
        }
        (21501 return(21503 call chpl_createStringWithOwnedBufferNV localBuff(21506 call . data c"buffLen")(21510 call . data c"size")(21514 call . data c"cachedNumCodepoints")))
      }
    }
    {
      (21529 return(21531 call chpl_createStringWithBorrowedBufferNV(21533 call . data c"buff")(21537 call . data c"buffLen")(21541 call . data c"size")(21545 call . data c"cachedNumCodepoints")))
    }
  } function string[244].isASCII[21561](arg _mt[21565]:_MT[201], arg this[21563]:string[244]) : _unknown[42] "inline" "method" "primary method"
  {
    (21568 return(21569 call ==(21574 call . this c"numCodepoints")(21578 call . this c"numBytes")))
  } function string[244].byteIndices[21583](arg _mt[21587]:_MT[201], arg this[21585]:string[244]) : _unknown[42] "inline" "method" "primary method" "no parens"
  {
    (21590 return(21598 call chpl_build_bounded_range 0(21596 call chpl__nudgeHighBound(21593 call . this c"numBytes"))))
  } function string[244]._cpIndexLenHelpNoAdjustment[21602](arg _mt[21610]:_MT[201], arg this[21604]:string[244], ref arg start[21607] :
  int[10]) : _unknown[42] "method" "primary method"
  {
    if(21638 call _cond_test boundsChecking)
    {
      if(21633 call _cond_test(21620 call &&(21622 call !(21625 call compiledForSingleLocale))(21626 call !=(21629 call . this c"locale_id") chpl_nodeID)))
      {
        (21616 call halt "internal error -- method requires localized string")
      }
    }
    { scopeless
      const i[21643] "const" start
      (21646 'end of statement')
    }
    if(21746 call _cond_test(21745 call(21742 call . this c"isASCII")))
    {
      (21648 call += start 1)
      (21652 return(21673 call _build_tuple(21654 call :(21660 call(21657 call . this c"buff") i)(21663 call int[10] 32))(21665 call : i byteIndex)(21669 call : 1 int[10])))
    }
    {
      { scopeless
        const tmp[21699] "const" "temp"(21684 call decodeHelp(buff =(21686 call . this c"buff"))(buffLen =(21691 call . this c"buffLen"))(offset = i)(allowEsc = 1))
        (21711 call _check_tuple_var_decl tmp[21699] 3)
        const decodeRet[21677] "const"(21700 call tmp[21699] 0)
        const cp[21679] "const"(21703 call tmp[21699] 1)
        const nBytes[21681] "const"(21706 call tmp[21699] 2)
        (21716 'end of statement')
      }
      (21717 call += start nBytes)
      (21721 return(21737 call _build_tuple(21723 call : cp(21727 call int[10] 32))(21729 call : i byteIndex)(21733 call : nBytes int[10])))
    }
  } function string[244]._cpIndexLen[21752](arg _mt[21763]:_MT[201], arg this[21754]:string[244], arg start[21760] =
  (21756 call : 0 byteIndex)) : _unknown[42] "iterator fn" "method" "primary method"
  {
    { scopeless
      const localThis[21767] "const"(21772 call(21769 call . this c"localize"))
      (21774 'end of statement')
    }
    { scopeless
      unknown i[21776](21778 call _findStartOfNextCodepointFromByte localThis start)
      (21782 'end of statement')
    }
    {
      unknown tmp[21800] "temp"
      (21830 'move' tmp[21800](21822 call _cond_test(21824 call < i(21827 call . localThis c"buffLen"))))
      WhileDo[21805]
      {
        {
          (21791 yield(21798 call(21795 call . localThis c"_cpIndexLenHelpNoAdjustment") i))
        }
        label _continueLabel[21803]
        (21817 'move' tmp[21800](21809 call _cond_test(21811 call < i(21814 call . localThis c"buffLen"))))
        tmp[21800]
      }
      label _breakLabel[21804]
    }
  } function string[244]._indexLen[21835](arg _mt[21846]:_MT[201], arg this[21837]:string[244], arg start[21843] =
  (21839 call : 0 byteIndex)) : _unknown[42] "iterator fn" "method" "primary method"
  {
    { scopeless
      unknown localThis[21850](21856 call(21853 call . this c"localize")) string[244]
      (21858 'end of statement')
    }
    { scopeless
      unknown i[21860](21861 call : start int[10])
      (21866 'end of statement')
    }
    if(21952 call _cond_test(21948 call > i 0))
    {
      unknown tmp[21891] "temp"
      (21945 'move' tmp[21891](21925 call _cond_test(21927 call &&(21929 call < i(21932 call . localThis c"buffLen"))(21936 call !(21938 call isInitialByte(21943 call(21940 call . localThis c"buff") i))))))
      WhileDo[21896]
      {
        { scopeless
          (21886 call += i 1)
        }
        label _continueLabel[21894]
        (21920 'move' tmp[21891](21900 call _cond_test(21902 call &&(21904 call < i(21907 call . localThis c"buffLen"))(21911 call !(21913 call isInitialByte(21918 call(21915 call . localThis c"buff") i))))))
        tmp[21891]
      }
      label _breakLabel[21895]
    }
    {
      unknown tmp[22069] "temp"
      (22099 'move' tmp[22069](22091 call _cond_test(22093 call < i(22096 call . localThis c"buffLen"))))
      WhileDo[22074]
      {
        {
          { scopeless
            unknown j[21965](21966 call + i 1)
            (21971 'end of statement')
          }
          {
            unknown tmp[21996] "temp"
            (22050 'move' tmp[21996](22030 call _cond_test(22032 call &&(22034 call < j(22037 call . localThis c"buffLen"))(22041 call !(22043 call isInitialByte(22048 call(22045 call . localThis c"buff") j))))))
            WhileDo[22001]
            {
              { scopeless
                (21991 call += j 1)
              }
              label _continueLabel[21999]
              (22025 'move' tmp[21996](22005 call _cond_test(22007 call &&(22009 call < j(22012 call . localThis c"buffLen"))(22016 call !(22018 call isInitialByte(22023 call(22020 call . localThis c"buff") j))))))
              tmp[21996]
            }
            label _breakLabel[22000]
          }
          (22053 yield(22063 call _build_tuple(22055 call : i byteIndex)(22059 call - j i)))
          (22065 call = i j)
        }
        label _continueLabel[22072]
        (22086 'move' tmp[22069](22078 call _cond_test(22080 call < i(22083 call . localThis c"buffLen"))))
        tmp[22069]
      }
      label _breakLabel[22073]
    }
  } function string[244].substring[22104](arg _mt[22112]:_MT[201], arg this[22106]:string[244], arg i[22109] :
  int[10]) : _unknown[42] "inline" "method" "primary method"
  {
    (22116 call compilerError "substring removed: use string[index]")
  } function string[244].substring[22122](arg _mt[22130]:_MT[201], arg this[22124]:string[244], arg r[22127] :
  range) : _unknown[42] "inline" "method" "primary method"
  {
    (22134 call compilerError "substring removed: use string[range]")
  } function string[244].serialize[22140](arg _mt[22148]:_MT[201], arg this[22142]:string[244], arg writer[22144]:_any[141](?), ref arg serializer[22146]:_any[141](?)) : _unknown[42] throws "method" "primary method"
  {
    (22152 call compilerError "not implemented: serialize")
  } function string[244].doSplitWSUTF8Help[22158](arg _mt[22186]:_MT[201], arg this[22160]:string[244], arg maxsplit[22163] :
  int[10], ref arg i[22167] :
  int[10], const arg splitCount[22171] :
  int[10], const arg noSplits[22175] :
  bool, const arg limitSplits[22179] :
  bool, const arg iEnd[22183] :
  byteIndex) : _unknown[42] "method" "primary method"
  {
    if(22212 call _cond_test boundsChecking)
    {
      if(22207 call _cond_test(22194 call &&(22196 call !(22199 call compiledForSingleLocale))(22200 call !=(22203 call . this c"locale_id") chpl_nodeID)))
      {
        (22192 call halt "internal error -- method requires localized string")
      }
    }
    { scopeless
      unknown done[22217] 0 bool
      (22221 'end of statement')
    }
    { scopeless
      unknown yieldChunk[22223] 0 bool
      (22227 'end of statement')
    }
    { scopeless
      unknown chunk[22229] string[244]
      (22232 'end of statement')
    }
    { scopeless
      unknown inChunk[22234] 0 bool
      (22238 'end of statement')
    }
    { scopeless
      unknown chunkStart[22240] byteIndex
      (22243 'end of statement')
    }
    (22244 call = i(22248 call _findStartOfNextCodepointFromByte this(22250 call : i byteIndex)))
    {
      unknown tmp[22518] "temp"
      (22548 'move' tmp[22518](22540 call _cond_test(22542 call < i(22545 call . this c"buffLen"))))
      WhileDo[22523]
      {
        {
          { scopeless
            const tmp[22285] "const" "temp"(22270 call decodeHelp(buff =(22272 call . this c"buff"))(buffLen =(22277 call . this c"buffLen"))(offset = i)(allowEsc = 1))
            (22295 call _check_tuple_var_decl tmp[22285] 3)
            const decodeRet[22263] "const"(22286 call tmp[22285] 0)
            const c[22265] "const"(22289 call tmp[22285] 1)
            const nBytes[22267] "const"(22292 call tmp[22285] 2)
            (22300 'end of statement')
          }
          if(22488 call _cond_test noSplits)
          {
            (22302 call = done 1)
            if(22324 call _cond_test(22315 call !(22323 call(22320 call . this c"isSpace"))))
            {
              (22307 call = chunk this)
              (22311 call = yieldChunk 1)
            }
          }
          {
            { scopeless
              unknown cSpace[22330](22332 call codepoint_isWhitespace c)
              (22335 'end of statement')
            }
            if(22482 call _cond_test(22476 call !(22478 call || inChunk cSpace)))
            {
              (22337 call = chunkStart i)
              (22341 call = inChunk 1)
              if(22373 call _cond_test(22363 call >(22365 call +(22367 call - i 1) nBytes) iEnd))
              {
                (22346 call = chunk(22354 'try!-expr'(22350 call this(22352 call chpl_build_low_bounded_range chunkStart))))
                (22355 call = yieldChunk 1)
                (22359 call = done 1)
              }
            }
            {
              { scopeless
                if(22472 call _cond_test inChunk)
                {
                  if(22466 call _cond_test cSpace)
                  {
                    if(22429 call _cond_test(22422 call && limitSplits(22425 call >= splitCount maxsplit)))
                    {
                      (22380 call = chunk(22388 'try!-expr'(22384 call this(22386 call chpl_build_low_bounded_range chunkStart))))
                      (22389 call = yieldChunk 1)
                      (22393 call = done 1)
                    }
                    {
                      (22398 call = chunk(22413 'try!-expr'(22402 call this(22411 call chpl_build_bounded_range chunkStart(22404 call :(22406 call - i 1) byteIndex)))))
                      (22414 call = yieldChunk 1)
                      (22418 call = inChunk 0)
                    }
                  }
                  {
                    { scopeless
                      if(22461 call _cond_test(22451 call >(22453 call +(22455 call - i 1) nBytes) iEnd))
                      {
                        (22434 call = chunk(22442 'try!-expr'(22438 call this(22440 call chpl_build_low_bounded_range chunkStart))))
                        (22443 call = yieldChunk 1)
                        (22447 call = done 1)
                      }
                    }
                  }
                }
              }
            }
          }
          if(22506 call _cond_test done)
          {
            (22493 call = i(22497 call . this c"buffLen"))
          }
          {
            (22501 call += i nBytes)
          }
          if(22514 call _cond_test yieldChunk)
          {
            (22511 return chunk)
          }
        }
        label _continueLabel[22521]
        (22535 'move' tmp[22518](22527 call _cond_test(22529 call < i(22532 call . this c"buffLen"))))
        tmp[22518]
      }
      label _breakLabel[22522]
    }
    (22551 return "")
  } function string[244].doSplitWSUTF8[22555](arg _mt[22563]:_MT[201], arg this[22557]:string[244], arg maxsplit[22560] :
  int[10]) : _unknown[42] "iterator fn" "method" "primary method"
  {
    if(22687 call _cond_test(22680 call !(22686 call(22683 call . this c"isEmpty"))))
    {
      { scopeless
        const localThis[22568] "const"(22573 call(22570 call . this c"localize"))
        (22575 'end of statement')
      }
      { scopeless
        unknown splitCount[22577] 0
        (22580 'end of statement')
      }
      { scopeless
        unknown i[22582] 0
        (22585 'end of statement')
      }
      {
        unknown tmp[22647] "temp"
        (22677 'move' tmp[22647](22669 call _cond_test(22671 call < i(22674 call . localThis c"buffLen"))))
        WhileDo[22652]
        {
          {
            { scopeless
              const chunk[22595] "const"(22602 call(22599 call . localThis c"doSplitWSUTF8Help") maxsplit i splitCount(noSplits =(22606 call == maxsplit 0))(limitSplits =(22611 call > maxsplit 0))(iEnd =(22616 call :(22618 call -(22621 call . localThis c"buffLen") 2) byteIndex)))
              (22628 'end of statement')
            }
            if(22643 call _cond_test(22636 call !(22642 call(22639 call . chunk c"isEmpty"))))
            {
              (22630 yield chunk)
              (22632 call += splitCount 1)
            }
          }
          label _continueLabel[22650]
          (22664 'move' tmp[22647](22656 call _cond_test(22658 call < i(22661 call . localThis c"buffLen"))))
          tmp[22647]
        }
        label _breakLabel[22651]
      }
    }
  } function string[244].doSearchUTF8[22693](arg _mt[22717]:_MT[201], arg this[22695]:string[244], arg pattern[22698] :
  string[244], arg indices[22704] :
  (22702 call range ?[227]), param arg count[22708] :
  bool, param arg fromLeft[22713] :
  bool =
  1) : _unknown[42] "method" "primary method"
  {
    { scopeless
      unknown ret[22721](22723 call - 1) int[10]
      (22727 'end of statement')
    }
    {
      const tmp[23257] "const" "temp"
      (23258 'move' tmp[23257](23255 'deref'(22728 'chpl_on_locale_num'(22730 call chpl_buildLocaleID(22732 call . this c"locale_id") c_sublocid_any))))
      {
        { scopeless
          unknown localRet[22738](22740 call - 2) int[10]
          (22744 'end of statement')
        }
        { scopeless
          const nLen[22746] "const"(22748 call . pattern c"buffLen")
          (22752 'end of statement')
        }
        { scopeless
          const tmp[22765] "const" "temp"(22764 'try!-expr'(22759 call getView this indices(checkMisaligned = 0)))
          (22769 call _check_tuple_var_decl tmp[22765] 2)
          const view[22754] "const"(22766 call tmp[22765] 0)
          (22774 'end of statement')
        }
        { scopeless
          const thisLen[22776] "const"(22778 call . view c"size")
          (22782 'end of statement')
        }
        if(22986 call _cond_test count)
        {
          if(22944 call _cond_test(22940 call == nLen 0))
          {
            if(22936 call _cond_test(22900 call ||(22902 call &&(22910 call(22907 call . indices c"hasLowBound"))(22911 call ==(22917 'typeof'(22914 call . indices c"low")) byteIndex))(22919 call &&(22927 call(22924 call . indices c"hasHighBound"))(22928 call ==(22934 'typeof'(22931 call . indices c"high")) byteIndex))))
            {
              (22786 call = localRet thisLen)
            }
            {
              { scopeless
                unknown nCodepoints[22792] 0
                (22795 'end of statement')
              }
              { scopeless
                unknown nextIdx[22797] 0
                (22800 'end of statement')
              }
              {
                unknown _indexOfInterest[22864] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[22865] "expr temp" "temp"
                (22874 'move' _iterator[22865](22872 call _getIterator view))
                Defer
                {
                  {
                    (22889 call _freeIterator _iterator[22865])
                  }
                }
                { scopeless type
                  (22879 'move' _indexOfInterest[22864](22876 call iteratorIndex _iterator[22865]))
                }
                ForLoop[22866]
                {
                  unknown i[22801] "index var" "insert auto destroy"
                  (22884 'move' i[22801] _indexOfInterest[22864])
                  {
                    if(22860 call _cond_test(22856 call >= i nextIdx))
                    {
                      (22806 call += nCodepoints 1)
                      { scopeless
                        const tmp[22833] "const" "temp"(22818 call decodeHelp(buff =(22820 call . this c"buff"))(buffLen =(22825 call . this c"buffLen"))(offset = i)(allowEsc = 1))
                        (22843 call _check_tuple_var_decl tmp[22833] 3)
                        const decodeRet[22811] "const"(22834 call tmp[22833] 0)
                        const cp[22813] "const"(22837 call tmp[22833] 1)
                        const nBytes[22815] "const"(22840 call tmp[22833] 2)
                        (22848 'end of statement')
                      }
                      (22849 call = nextIdx(22852 call + i nBytes))
                    }
                  }
                  label _continueLabel[22869]
                  _indexOfInterest[22864]
                  _iterator[22865]
                }
                label _breakLabel[22870]
              }
              (22896 call = localRet nCodepoints)
            }
          }
        }
        {
          if(22981 call _cond_test(22977 call == nLen 0))
          {
            if(22973 call _cond_test fromLeft)
            {
              (22951 call = localRet(22954 call - 1))
            }
            {
              (22958 call = localRet(22969 IfExpr (22961 call == thisLen 0) then
              { scopeless
                (22965 call - 1)
              } else
              { scopeless
                thisLen
              } ))
            }
          }
        }
        if(23001 call _cond_test(22997 call > nLen thisLen))
        {
          (22991 call = localRet(22994 call - 1))
        }
        if(23236 call _cond_test(23230 call == localRet(23233 call - 2)))
        {
          (23006 call = localRet(23009 call - 1))
          { scopeless
            const localPattern[23013] "const"(23019 call(23016 call . pattern c"localize")) string[244]
            (23021 'end of statement')
          }
          { scopeless
            const numPossible[23023] "const"(23024 call +(23026 call - thisLen nLen) 1)
            (23032 'end of statement')
          }
          { scopeless
            const searchSpace[23034] "const"(23053 IfExpr  fromLeft then
            { scopeless
              (23036 call #(23039 call chpl_build_low_bounded_range 0) numPossible)
            } else
            { scopeless
              (23042 call chpl_by(23044 call #(23047 call chpl_build_low_bounded_range 0) numPossible)(23050 call - 1))
            } )
            (23057 'end of statement')
          }
          {
            unknown _indexOfInterest[23198] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[23199] "expr temp" "temp"
            (23208 'move' _iterator[23199](23206 call _getIterator searchSpace))
            Defer
            {
              {
                (23223 call _freeIterator _iterator[23199])
              }
            }
            { scopeless type
              (23213 'move' _indexOfInterest[23198](23210 call iteratorIndex _iterator[23199]))
            }
            ForLoop[23200]
            {
              unknown i[23058] "index var" "insert auto destroy"
              (23218 'move' i[23058] _indexOfInterest[23198])
              {
                {
                  unknown _indexOfInterest[23140] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[23141] "expr temp" "temp"
                  (23150 'move' _iterator[23141](23148 call _getIterator(23157 call chpl_direct_counted_range_iter 0 nLen)))
                  Defer
                  {
                    {
                      (23172 call _freeIterator _iterator[23141])
                    }
                  }
                  { scopeless type
                    (23162 'move' _indexOfInterest[23140](23159 call iteratorIndex _iterator[23141]))
                  }
                  ForLoop[23142]
                  {
                    unknown j[23062] "index var" "insert auto destroy"
                    (23167 'move' j[23062] _indexOfInterest[23140])
                    {
                      { scopeless
                        const idx[23072] "const"(23079 call(23076 call . view c"orderToIndex")(23080 call + i j))
                        (23085 'end of statement')
                      }
                      if(23103 call _cond_test(23089 call !=(23095 call(23092 call . this c"buff") idx)(23101 call(23098 call . localPattern c"buff") j)))
                      {
                        { scopeless
                          break nil[32]
                        }
                      }
                      if(23136 call _cond_test(23129 call == j(23132 call - nLen 1)))
                      {
                        if(23125 call _cond_test count)
                        {
                          (23110 call += localRet 1)
                        }
                        {
                          (23115 call = localRet(23122 call(23119 call . view c"orderToIndex") i))
                        }
                      }
                    }
                    label _continueLabel[23145]
                    _indexOfInterest[23140]
                    _iterator[23141]
                  }
                  label _breakLabel[23146]
                }
                if(23193 call _cond_test(23182 call &&(23184 call ! count)(23187 call != localRet(23190 call - 1))))
                {
                  { scopeless
                    break nil[32]
                  }
                }
              }
              label _continueLabel[23203]
              _indexOfInterest[23198]
              _iterator[23199]
            }
            label _breakLabel[23204]
          }
        }
        if(23246 call _cond_test count)
        {
          { scopeless
            (23240 call += localRet 1)
          }
        }
        (23251 call = ret localRet)
      }
      (23261 'elided on block' 0 tmp[23257])
    }
    (23265 return ret)
  } function string[244].join[23269](arg _mt[23280]:_MT[201], arg this[23271]:string[244], const  ref arg x[23277] :
  (23275 call chpl__buildArrayRuntimeType nil[32] string[244])) : _unknown[42] "inline" "method" "primary method"
  {
    (23284 return(23286 call doJoin this x))
  }
  { scopeless type
    string[244]
  } function string[244].join[23292](arg _mt[23298]:_MT[201], arg this[23294]:string[244], const  ref arg x[23296]:_any[141](?)) : _unknown[42] "inline" "method" "primary method"
  {
    if(23324 call _cond_test(23310 call ||(23312 call !(23315 call isHomogeneousTuple x))(23317 call !(23320 call isString(23322 call x 0)))))
    {
      { scopeless
        (23305 call compilerError "join() on tuples only handles homogeneous tuples of strings")
      }
    }
    (23329 return(23331 call doJoin this x))
  }
  where {
    (23301 call isTuple x)
  } function string[244].join[23337](arg _mt[23345]:_MT[201], arg this[23339]:string[244], arg ir[23342] :
  _iteratorRecord) : _unknown[42] "inline" "method" "primary method"
  {
    (23349 return(23351 call doJoinIterator this ir))
  }
  { scopeless type
    string[244]
  } function string[244].capitalize[23357](arg _mt[23361]:_MT[201], arg this[23359]:string[244]) : _unknown[42] "method" "primary method"
  {
    { scopeless
      unknown result[23366](23374 call(23371 call . this c"toLower")) string[244]
      (23376 'end of statement')
    }
    if(23385 call _cond_test(23384 call(23381 call . result c"isEmpty")))
    {
      { scopeless
        (23377 return result)
      }
    }
    { scopeless
      const tmp[23413] "const" "temp"(23398 call decodeHelp(buff =(23400 call . result c"buff"))(buffLen =(23405 call . result c"buffLen"))(offset = 0)(allowEsc = 0))
      (23423 call _check_tuple_var_decl tmp[23413] 3)
      const decodeRet[23391] "const"(23414 call tmp[23413] 0)
      const cp[23393] "const"(23417 call tmp[23413] 1)
      const nBytes[23395] "const"(23420 call tmp[23413] 2)
      (23428 'end of statement')
    }
    { scopeless
      unknown upCodepoint[23430](23432 call codepoint_toUpper cp)
      (23435 'end of statement')
    }
    if(23456 call _cond_test(23444 call &&(23446 call != upCodepoint cp)(23450 call ==(23453 call qio_nbytes_char upCodepoint) nBytes)))
    {
      (23438 call qio_encode_char_buf(23440 call . result c"buff") upCodepoint)
    }
    (23460 return result)
  }
  { scopeless type
    string[244]
  } writeSerializable
  function _unknown[42].size[23467](arg _mt[23473]:_MT[201], const arg this[23470] :
  string[244]) : _unknown[42] "inline" "method" "no parens"
  {
    (23477 return numCodepoints)
  }
  { scopeless type
    int[10]
  }
  function _unknown[42].indices[23482](arg _mt[23488]:_MT[201], arg this[23485] :
  string[244]) : _unknown[42] "inline" "method" "no parens"
  {
    (23492 return(23497 call chpl_build_bounded_range 0(23495 call chpl__nudgeHighBound size)))
  }
  { scopeless type
    range
  }
  function _unknown[42].numBytes[23502](arg _mt[23508]:_MT[201], arg this[23505] :
  string[244]) : _unknown[42] "inline" "method" "no parens"
  {
    (23512 return buffLen)
  }
  { scopeless type
    int[10]
  }
  function _unknown[42].numCodepoints[23517](arg _mt[23523]:_MT[201], const arg this[23520] :
  string[244]) : _unknown[42] "inline" "method" "no parens"
  {
    if(23539 call _cond_test useCachedNumCodepoints)
    {
      (23528 return(23530 call . this c"cachedNumCodepoints"))
    }
    {
      (23534 return(23536 call countNumCodepoints this))
    }
  }
  { scopeless type
    int[10]
  }
  function _unknown[42].localize[23546](arg _mt[23552]:_MT[201], arg this[23549] :
  string[244]) : _unknown[42] "inline" "method" "@unstable"
  {
    if(23584 call _cond_test(23573 call ||(23576 call compiledForSingleLocale)(23577 call ==(23580 call . this c"locale_id") chpl_nodeID)))
    {
      (23557 return(23562 call(23559 call . string[244] c"createBorrowingBuffer") this))
    }
    {
      { scopeless
        const x[23566] "const" this string[244]
        (23570 'end of statement')
      }
      (23571 return x)
    }
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].c_str[23591](arg _mt[23597]:_MT[201], arg this[23594] :
  string[244]) : _unknown[42] "deprecated" "inline" "last resort" "method"
  {
    (23606 'use' CTypes 'only' c_str)
    (23608 return(23613 call(23610 call . this c"c_str")))
  }
  { scopeless type
    (23600 call c_ptrConst c_char)
  }
  function _unknown[42].encode[23617](arg _mt[23632]:_MT[201], arg this[23620] :
  string[244], arg policy[23629] =
  (23626 call . encodePolicy c"pass")) : _unknown[42] "method"
  {
    { scopeless
      unknown localThis[23637](23643 call(23640 call . this c"localize")) string[244]
      (23645 'end of statement')
    }
    if(23905 call _cond_test(23891 call ||(23893 call == policy(23897 call . encodePolicy c"pass"))(23904 call(23901 call . this c"isASCII"))))
    {
      (23647 return(23652 call(23649 call . bytes[232] c"createCopyingBuffer")(23654 call . localThis c"buff")(23658 call . localThis c"numBytes")))
    }
    {
      { scopeless
        unknown tmp[23676] "temp"(23668 call bufferAlloc(23669 call +(23672 call . localThis c"buffLen") 1))
        (23683 call _check_tuple_var_decl tmp[23676] 2)
        unknown buff[23663](23677 call tmp[23676] 0)
        unknown size[23665](23680 call tmp[23676] 1)
        (23688 'end of statement')
      }
      { scopeless
        unknown readIdx[23690] 0
        (23693 'end of statement')
      }
      { scopeless
        unknown writeIdx[23695] 0
        (23698 'end of statement')
      }
      {
        unknown tmp[23841] "temp"
        (23871 'move' tmp[23841](23863 call _cond_test(23865 call < readIdx(23868 call . localThis c"buffLen"))))
        WhileDo[23846]
        {
          {
            { scopeless
              unknown multibytes[23708](23709 call +(23712 call . localThis c"buff") readIdx)
              (23717 'end of statement')
            }
            { scopeless
              const tmp[23741] "const" "temp"(23726 call decodeHelp(buff =(23728 call . localThis c"buff"))(buffLen =(23733 call . localThis c"buffLen"))(offset = readIdx)(allowEsc = 1))
              (23751 call _check_tuple_var_decl tmp[23741] 3)
              const decodeRet[23719] "const"(23742 call tmp[23741] 0)
              const cp[23721] "const"(23745 call tmp[23741] 1)
              const nBytes[23723] "const"(23748 call tmp[23741] 2)
              (23756 'end of statement')
            }
            if(23832 call _cond_test(23818 call &&(23820 call <= 56448 cp)(23826 call <= cp 56575)))
            {
              (23758 call =(23761 call buff writeIdx)(23763 call :(23765 call - cp 56320)(23772 call uint[86] 8)))
              (23774 call += writeIdx 1)
            }
            {
              { scopeless
                if(23814 call _cond_test(23810 call != decodeRet 0))
                {
                  (23780 call bufferMemcpyLocal(dst =(23781 call + buff writeIdx))(src = multibytes)(len = nBytes))
                  (23790 call += writeIdx nBytes)
                }
                {
                  (23796 call bufferMemcpyLocal(dst =(23797 call + buff writeIdx))(src = multibytes)(len = nBytes))
                  (23806 call += writeIdx nBytes)
                }
              }
            }
            (23837 call += readIdx nBytes)
          }
          label _continueLabel[23844]
          (23858 'move' tmp[23841](23850 call _cond_test(23852 call < readIdx(23855 call . localThis c"buffLen"))))
          tmp[23841]
        }
        label _breakLabel[23845]
      }
      (23874 call =(23877 call buff writeIdx) 0)
      (23880 return(23885 call(23882 call . bytes[232] c"createAdoptingBuffer") buff(length = writeIdx)(size = size)))
    }
  }
  { scopeless type
    bytes[232]
  }
  function _unknown[42].items[23912](arg _mt[23918]:_MT[201], arg this[23915] :
  string[244]) : _unknown[42] "iterator fn" "method"
  {
    { scopeless
      unknown localThis[23923](23929 call(23926 call . this c"localize")) string[244]
      (23931 'end of statement')
    }
    if(24145 call _cond_test(24144 call(24141 call . localThis c"isASCII")))
    {
      {
        unknown _indexOfInterest[23978] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[23979] "expr temp" "temp"
        (23988 'move' _iterator[23979](23986 call _getIterator(23938 call . localThis c"byteIndices")))
        Defer
        {
          {
            (24003 call _freeIterator _iterator[23979])
          }
        }
        { scopeless type
          (23993 'move' _indexOfInterest[23978](23990 call iteratorIndex _iterator[23979]))
        }
        ForLoop[23980]
        {
          unknown i[23933] "index var" "insert auto destroy"
          (23998 'move' i[23933] _indexOfInterest[23978])
          {
            { scopeless
              unknown tmp[23958] "temp"(23948 call bufferCopyLocal(23949 call +(23952 call . localThis c"buff") i)(len = 1))
              (23965 call _check_tuple_var_decl tmp[23958] 2)
              unknown newBuff[23943](23959 call tmp[23958] 0)
              unknown allocSize[23945](23962 call tmp[23958] 1)
              (23970 'end of statement')
            }
            (23971 yield(23973 call chpl_createStringWithOwnedBufferNV newBuff 1 allocSize 1))
          }
          label _continueLabel[23983]
          _indexOfInterest[23978]
          _iterator[23979]
        }
        label _breakLabel[23984]
      }
    }
    {
      { scopeless
        unknown i[24012] 0
        (24015 'end of statement')
      }
      {
        unknown tmp[24107] "temp"
        (24137 'move' tmp[24107](24129 call _cond_test(24131 call < i(24134 call . localThis c"buffLen"))))
        WhileDo[24112]
        {
          {
            { scopeless
              const curPos[24025] "const"(24026 call +(24029 call . localThis c"buff") i)
              (24034 'end of statement')
            }
            { scopeless
              const tmp[24058] "const" "temp"(24043 call decodeHelp(buff =(24045 call . localThis c"buff"))(buffLen =(24050 call . localThis c"buffLen"))(offset = i)(allowEsc = 1))
              (24068 call _check_tuple_var_decl tmp[24058] 3)
              const decodeRet[24036] "const"(24059 call tmp[24058] 0)
              const cp[24038] "const"(24062 call tmp[24058] 1)
              const nBytes[24040] "const"(24065 call tmp[24058] 2)
              (24073 'end of statement')
            }
            { scopeless
              unknown tmp[24083] "temp"(24080 call bufferCopyLocal curPos nBytes)
              (24090 call _check_tuple_var_decl tmp[24083] 2)
              unknown newBuf[24075](24084 call tmp[24083] 0)
              unknown newSize[24077](24087 call tmp[24083] 1)
              (24095 'end of statement')
            }
            (24096 yield(24098 call chpl_createStringWithOwnedBufferNV newBuf nBytes newSize 1))
            (24103 call += i nBytes)
          }
          label _continueLabel[24110]
          (24124 'move' tmp[24107](24116 call _cond_test(24118 call < i(24121 call . localThis c"buffLen"))))
          tmp[24107]
        }
        label _breakLabel[24111]
      }
    }
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].these[24152](arg _mt[24158]:_MT[201], arg this[24155] :
  string[244]) : _unknown[42] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[24174] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[24175] "expr temp" "temp"
      (24184 'move' _iterator[24175](24182 call _getIterator(24170 call(24167 call . this c"items"))))
      Defer
      {
        {
          (24199 call _freeIterator _iterator[24175])
        }
      }
      { scopeless type
        (24189 'move' _indexOfInterest[24174](24186 call iteratorIndex _iterator[24175]))
      }
      ForLoop[24176]
      {
        unknown c[24162] "index var" "insert auto destroy"
        (24194 'move' c[24162] _indexOfInterest[24174])
        { scopeless
          (24171 yield c)
        }
        label _continueLabel[24179]
        _indexOfInterest[24174]
        _iterator[24175]
      }
      label _breakLabel[24180]
    }
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].chpl_bytes[24209](arg _mt[24215]:_MT[201], arg this[24212] :
  string[244]) : _unknown[42] "chpldoc ignore chpl prefix" "iterator fn" "method"
  {
    { scopeless
      unknown localThis[24222](24228 call(24225 call . this c"localize")) string[244]
      (24230 'end of statement')
    }
    {
      unknown _indexOfInterest[24252] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[24253] "expr temp" "temp"
      (24262 'move' _iterator[24253](24260 call _getIterator(24272 call chpl_direct_counted_range_iter 0(24268 call . localThis c"buffLen"))))
      Defer
      {
        {
          (24287 call _freeIterator _iterator[24253])
        }
      }
      { scopeless type
        (24277 'move' _indexOfInterest[24252](24274 call iteratorIndex _iterator[24253]))
      }
      ForLoop[24254] order-independent
      {
        unknown i[24231] "index var" "insert auto destroy"
        (24282 'move' i[24231] _indexOfInterest[24252])
        {
          (24243 yield(24248 call(24245 call . localThis c"buff") i))
        }
        label _continueLabel[24257]
        _indexOfInterest[24252]
        _iterator[24253]
      }
      label _breakLabel[24258]
    }
  }
  { scopeless type
    (24218 call uint[86] 8)
  }
  function _unknown[42].codepoints[24297](arg _mt[24303]:_MT[201], arg this[24300] :
  string[244]) : _unknown[42] "iterator fn" "method"
  {
    { scopeless
      const localThis[24310] "const"(24315 call(24312 call . this c"localize"))
      (24317 'end of statement')
    }
    { scopeless
      unknown i[24319] 0
      (24322 'end of statement')
    }
    {
      unknown tmp[24340] "temp"
      (24370 'move' tmp[24340](24362 call _cond_test(24364 call < i(24367 call . localThis c"buffLen"))))
      WhileDo[24345]
      {
        {
          (24331 yield(24338 call(24336 call(24333 call . localThis c"_cpIndexLenHelpNoAdjustment") i) 0))
        }
        label _continueLabel[24343]
        (24357 'move' tmp[24340](24349 call _cond_test(24351 call < i(24354 call . localThis c"buffLen"))))
        tmp[24340]
      }
      label _breakLabel[24344]
    }
  }
  { scopeless type
    (24306 call int[10] 32)
  }
  function _unknown[42].toByte[24376](arg _mt[24382]:_MT[201], arg this[24379] :
  string[244]) : _unknown[42] "method"
  {
    if(24401 call _cond_test(24394 call !=(24397 call . this c"buffLen") 1))
    {
      { scopeless
        (24389 call halt "string.toByte() only accepts single-byte strings")
      }
    }
    (24406 return(24408 call bufferGetByte(buf =(24410 call . this c"buff"))(off = 0)(loc =(24417 call . this c"locale_id"))))
  }
  { scopeless type
    (24385 call uint[86] 8)
  }
  function _unknown[42].byte[24424](arg _mt[24434]:_MT[201], arg this[24427] :
  string[244], arg i[24431] :
  int[10]) : _unknown[42] "method"
  {
    if(24473 call _cond_test(24457 call && boundsChecking(24460 call ||(24462 call < i 0)(24466 call >= i(24470 call . this c"buffLen")))))
    {
      { scopeless
        (24441 call halt "index " i " out of bounds for string with "(24450 call . this c"numBytes") " bytes")
      }
    }
    (24478 return(24480 call bufferGetByte(buf =(24482 call . this c"buff"))(off = i)(loc =(24489 call . this c"locale_id"))))
  }
  { scopeless type
    (24437 call uint[86] 8)
  }
  function _unknown[42].toCodepoint[24496](arg _mt[24502]:_MT[201], arg this[24499] :
  string[244]) : _unknown[42] "method"
  {
    { scopeless
      unknown localThis[24509](24515 call(24512 call . this c"localize")) string[244]
      (24517 'end of statement')
    }
    if(24529 call _cond_test(24528 call(24525 call . localThis c"isEmpty")))
    {
      { scopeless
        (24519 call halt "string.toCodepoint() only accepts single-codepoint strings")
      }
    }
    if(24625 call _cond_test(24624 call(24621 call . this c"isASCII")))
    {
      if(24546 call _cond_test(24539 call >(24542 call . localThis c"numBytes") 1))
      {
        { scopeless
          (24536 call halt "string.toCodepoint() only accepts single-codepoint strings")
        }
      }
      (24551 return(24558 call(24555 call . this c"toByte")))
    }
    {
      { scopeless
        const tmp[24583] "const" "temp"(24568 call decodeHelp(buff =(24570 call . localThis c"buff"))(buffLen =(24575 call . localThis c"buffLen"))(offset = 0)(allowEsc = 1))
        (24593 call _check_tuple_var_decl tmp[24583] 3)
        const decodeRet[24561] "const"(24584 call tmp[24583] 0)
        const cp[24563] "const"(24587 call tmp[24583] 1)
        const nBytes[24565] "const"(24590 call tmp[24583] 2)
        (24598 'end of statement')
      }
      if(24613 call _cond_test(24603 call !=(24606 call . localThis c"buffLen")(24609 call : nBytes int[10])))
      {
        { scopeless
          (24600 call halt "string.toCodepoint() only accepts single-codepoint strings")
        }
      }
      (24618 return cp)
    }
  }
  { scopeless type
    (24505 call int[10] 32)
  }
  function _unknown[42].codepoint[24632](arg _mt[24642]:_MT[201], arg this[24635] :
  string[244], arg i[24639] :
  int[10]) : _unknown[42] "method"
  {
    { scopeless
      const idx[24649] "const"(24650 call : i int[10])
      (24655 'end of statement')
    }
    if(24671 call _cond_test(24664 call && boundsChecking(24667 call < idx 0)))
    {
      { scopeless
        (24657 call halt "index " idx " out of bounds for string")
      }
    }
    if(24805 call _cond_test(24804 call(24801 call . this c"isASCII")))
    {
      if(24699 call _cond_test(24689 call && boundsChecking(24692 call >= idx(24696 call . this c"numBytes"))))
      {
        { scopeless
          (24678 call halt "index " idx " out of bounds for string with length "(24685 call . this c"size"))
        }
      }
      (24704 return(24711 call(24708 call . this c"byte") i))
    }
    {
      { scopeless
        unknown j[24715] 0
        (24718 'end of statement')
      }
      {
        unknown _indexOfInterest[24745] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[24746] "expr temp" "temp"
        (24755 'move' _iterator[24746](24753 call _getIterator(24727 call(24724 call . this c"codepoints"))))
        Defer
        {
          {
            (24770 call _freeIterator _iterator[24746])
          }
        }
        { scopeless type
          (24760 'move' _indexOfInterest[24745](24757 call iteratorIndex _iterator[24746]))
        }
        ForLoop[24747]
        {
          unknown cp[24719] "index var" "insert auto destroy"
          (24765 'move' cp[24719] _indexOfInterest[24745])
          {
            if(24736 call _cond_test(24732 call == j idx))
            {
              { scopeless
                (24729 return cp)
              }
            }
            (24741 call += j 1)
          }
          label _continueLabel[24750]
          _indexOfInterest[24745]
          _iterator[24746]
        }
        label _breakLabel[24751]
      }
      if(24788 call _cond_test boundsChecking)
      {
        { scopeless
          (24778 call halt "index " idx " out of bounds for string with length "(24783 call . this c"size"))
        }
      }
      (24793 return(24794 call : 0(24798 call int[10] 32)))
    }
  }
  { scopeless type
    (24645 call int[10] 32)
  }
  function _unknown[42].this[24812](arg _mt[24822]:_MT[201], arg this[24815] :
  string[244], arg i[24819] :
  byteIndex) : _unknown[42] "method"
  {
    { scopeless
      unknown idx[24827](24828 call : i int[10])
      (24833 'end of statement')
    }
    if(24864 call _cond_test(24848 call && boundsChecking(24851 call ||(24853 call < idx 0)(24857 call >= idx(24861 call . this c"buffLen")))))
    {
      { scopeless
        (24835 call halt "index "(24837 call : i int[10]) " out of bounds for string with "(24843 call . this c"buffLen") " bytes")
      }
    }
    if(25030 call _cond_test(25029 call(25026 call . this c"isASCII")))
    {
      { scopeless
        unknown tmp[24894] "temp"(24876 call bufferCopy(buf =(24878 call . this c"buff"))(off =(24882 call : i int[10]))(len = 1)(loc =(24890 call . this c"locale_id")))
        (24901 call _check_tuple_var_decl tmp[24894] 2)
        unknown newBuff[24871](24895 call tmp[24894] 0)
        unknown allocSize[24873](24898 call tmp[24894] 1)
        (24906 'end of statement')
      }
      (24907 return(24909 call chpl_createStringWithOwnedBufferNV newBuff 1 allocSize 1))
    }
    {
      { scopeless
        unknown maxbytes[24916](24917 call :(24919 call -(24922 call . this c"buffLen") idx) c_ssize_t)
        (24928 'end of statement')
      }
      if(24946 call _cond_test(24936 call ||(24938 call < maxbytes 0)(24942 call > maxbytes 4)))
      {
        { scopeless
          (24929 call = maxbytes 4)
        }
      }
      { scopeless
        unknown tmp[24972] "temp"(24957 call bufferCopy(buf =(24959 call . this c"buff"))(off = idx)(len = maxbytes)(loc =(24968 call . this c"locale_id")))
        (24979 call _check_tuple_var_decl tmp[24972] 2)
        unknown newBuff[24952](24973 call tmp[24972] 0)
        unknown allocSize[24954](24976 call tmp[24972] 1)
        (24984 'end of statement')
      }
      { scopeless
        const tmp[25002] "const" "temp"(24993 call decodeHelp(buff = newBuff)(buffLen = maxbytes)(offset = 0)(allowEsc = 1))
        (25012 call _check_tuple_var_decl tmp[25002] 3)
        const decodeRet[24986] "const"(25003 call tmp[25002] 0)
        const cp[24988] "const"(25006 call tmp[25002] 1)
        const nBytes[24990] "const"(25009 call tmp[25002] 2)
        (25017 'end of statement')
      }
      (25018 return(25020 call chpl_createStringWithOwnedBufferNV newBuff nBytes allocSize 1))
    }
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].this[25037](arg _mt[25047]:_MT[201], arg this[25040] :
  string[244], arg i[25044] :
  codepointIndex) : _unknown[42] "method"
  {
    (25051 return(25058 call(25055 call . this c"item") i))
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].this[25063](arg _mt[25073]:_MT[201], arg this[25066] :
  string[244], arg i[25070] :
  int[10]) : _unknown[42] "inline" "method"
  {
    (25077 return(25082 call(25079 call . this c"item") i))
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].item[25087](arg _mt[25097]:_MT[201], arg this[25090] :
  string[244], arg i[25094] :
  codepointIndex) : _unknown[42] "method"
  {
    if(25117 call _cond_test(25110 call && boundsChecking(25113 call < i 0)))
    {
      { scopeless
        (25102 call halt "index "(25104 call : i int[10]) " out of bounds for string")
      }
    }
    if(25130 call _cond_test(25129 call(25126 call . this c"isEmpty")))
    {
      { scopeless
        (25122 return "")
      }
    }
    if(25360 call _cond_test(25359 call(25356 call . this c"isASCII")))
    {
      if(25159 call _cond_test(25149 call && boundsChecking(25152 call >= i(25156 call . this c"numBytes"))))
      {
        { scopeless
          (25137 call halt "index "(25139 call : i int[10]) " out of bounds for string with length "(25145 call . this c"size"))
        }
      }
      { scopeless
        unknown tmp[25188] "temp"(25170 call bufferCopy(buf =(25172 call . this c"buff"))(off =(25176 call : i int[10]))(len = 1)(loc =(25184 call . this c"locale_id")))
        (25195 call _check_tuple_var_decl tmp[25188] 2)
        unknown newBuff[25165](25189 call tmp[25188] 0)
        unknown allocSize[25167](25192 call tmp[25188] 1)
        (25200 'end of statement')
      }
      (25201 return(25203 call chpl_createStringWithOwnedBufferNV newBuff 1 allocSize 1))
    }
    {
      { scopeless
        unknown charCount[25210] 0
        (25213 'end of statement')
      }
      {
        unknown _indexOfInterest[25283] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[25284] "expr temp" "temp"
        (25293 'move' _iterator[25284](25291 call _getIterator(25224 call _cpIndexLen)))
        Defer
        {
          {
            (25327 call _freeIterator _iterator[25284])
          }
        }
        { scopeless type
          (25298 'move' _indexOfInterest[25283](25295 call iteratorIndex _iterator[25284]))
        }
        ForLoop[25285]
        {
          (25303 call _check_tuple_var_decl _indexOfInterest[25283] 3)
          unknown cp[25215] "index var" "insert auto destroy"
          (25310 'move' cp[25215](25307 call _indexOfInterest[25283] 0))
          unknown byteIdx[25217] "index var" "insert auto destroy"
          (25316 'move' byteIdx[25217](25313 call _indexOfInterest[25283] 1))
          unknown nBytes[25219] "index var" "insert auto destroy"
          (25322 'move' nBytes[25219](25319 call _indexOfInterest[25283] 2))
          {
            if(25275 call _cond_test(25271 call == charCount i))
            {
              { scopeless
                unknown tmp[25251] "temp"(25233 call bufferCopy(buf =(25235 call . this c"buff"))(off =(25239 call : byteIdx int[10]))(len = nBytes)(loc =(25247 call . this c"locale_id")))
                (25258 call _check_tuple_var_decl tmp[25251] 2)
                unknown newBuff[25228](25252 call tmp[25251] 0)
                unknown allocSize[25230](25255 call tmp[25251] 1)
                (25263 'end of statement')
              }
              (25264 return(25266 call chpl_createStringWithOwnedBufferNV newBuff nBytes allocSize 1))
            }
            (25279 call += charCount 1)
          }
          label _continueLabel[25288]
          _indexOfInterest[25283]
          _iterator[25284]
        }
        label _breakLabel[25289]
      }
      if(25348 call _cond_test boundsChecking)
      {
        { scopeless
          (25335 call halt "index "(25337 call : i int[10]) " out of bounds for string with length "(25343 call . this c"size"))
        }
      }
      (25353 return "")
    }
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].item[25367](arg _mt[25377]:_MT[201], arg this[25370] :
  string[244], arg i[25374] :
  int[10]) : _unknown[42] "inline" "method"
  {
    (25381 return(25383 call this(25384 call : i codepointIndex)))
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].this[25391](arg _mt[25403]:_MT[201], arg this[25394] :
  string[244], arg r[25400] :
  (25398 call range ?[227])) : _unknown[42] throws "inline" "method"
  {
    (25416 return(25418 call getSlice this r))
  }
  where {
    (25406 call ==(25411 call . r c"idxType") byteIndex)
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].this[25425](arg _mt[25437]:_MT[201], arg this[25428] :
  string[244], arg r[25434] :
  (25432 call range ?[227])) : _unknown[42] "inline" "method"
  {
    (25448 return(25453 'try!-expr'(25450 call getSlice this r)))
  }
  where {
    (25440 call !=(25443 call . r c"idxType") byteIndex)
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].isEmpty[25458](arg _mt[25464]:_MT[201], arg this[25461] :
  string[244]) : _unknown[42] "inline" "method"
  {
    (25468 return(25469 call ==(25472 call . this c"buffLen") 0))
  }
  { scopeless type
    bool
  }
  function _unknown[42].startsWith[25479](arg _mt[25491]:_MT[201], arg this[25482] :
  string[244], arg patterns[25487] ... :
  string[244]) : _unknown[42] "inline" "method"
  {
    (25495 return(25497 call startsEndsWith this patterns(fromLeft = 1)))
  }
  { scopeless type
    bool
  }
  function _unknown[42].endsWith[25505](arg _mt[25517]:_MT[201], arg this[25508] :
  string[244], arg patterns[25513] ... :
  string[244]) : _unknown[42] "inline" "method"
  {
    (25521 return(25523 call startsEndsWith this patterns(fromLeft = 0)))
  }
  { scopeless type
    bool
  }
  function _unknown[42].find[25531](arg _mt[25557]:_MT[201], arg this[25534] :
  string[244], arg pattern[25538] :
  string[244], arg indices[25553] :
  (25542 call range ?[227]) =
  (25544 call :(25547 call . this c"byteIndices")(25551 call range byteIndex))) : _unknown[42] "inline" "method"
  {
    if(25589 call _cond_test(25588 call(25585 call . this c"isASCII")))
    {
      { scopeless
        (25561 return(25562 call :(25565 call doSearchNoEnc this pattern indices(count = 0)) byteIndex))
      }
    }
    {
      { scopeless
        (25573 return(25574 call :(25577 call doSearchUTF8 pattern indices(count = 0)) byteIndex))
      }
    }
  }
  { scopeless type
    byteIndex
  }
  function _unknown[42].rfind[25598](arg _mt[25624]:_MT[201], arg this[25601] :
  string[244], arg pattern[25605] :
  string[244], arg indices[25620] :
  (25609 call range ?[227]) =
  (25611 call :(25614 call . this c"byteIndices")(25618 call range byteIndex))) : _unknown[42] "inline" "method"
  {
    if(25660 call _cond_test(25659 call(25656 call . this c"isASCII")))
    {
      { scopeless
        (25628 return(25629 call :(25632 call doSearchNoEnc this pattern indices(count = 0)(fromLeft = 0)) byteIndex))
      }
    }
    {
      { scopeless
        (25642 return(25643 call :(25646 call doSearchUTF8 pattern indices(count = 0)(fromLeft = 0)) byteIndex))
      }
    }
  }
  { scopeless type
    byteIndex
  }
  function _unknown[42].count[25669](arg _mt[25692]:_MT[201], arg this[25672] :
  string[244], arg pattern[25676] :
  string[244], arg indices[25688] :
  (25680 call range ?[227]) =
  (25685 call . this c"indices")) : _unknown[42] "inline" "method"
  {
    if(25718 call _cond_test(25717 call(25714 call . this c"isASCII")))
    {
      { scopeless
        (25696 return(25698 call doSearchNoEnc this pattern indices(count = 1)))
      }
    }
    {
      { scopeless
        (25705 return(25707 call doSearchUTF8 pattern indices(count = 1)))
      }
    }
  }
  { scopeless type
    int[10]
  }
  function _unknown[42].replace[25727](arg _mt[25749]:_MT[201], arg this[25730] :
  string[244], arg pattern[25734] :
  string[244], arg replacement[25738] :
  string[244], arg count[25745] :
  int[10] =
  (25742 call - 1)) : _unknown[42] "inline" "method"
  {
    (25753 return(25755 call doReplace this pattern replacement count))
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].split[25763](arg _mt[25787]:_MT[201], arg this[25766] :
  string[244], arg sep[25770] :
  string[244], arg maxsplit[25777] :
  int[10] =
  (25774 call - 1), arg ignoreEmpty[25783] :
  bool =
  0) : _unknown[42] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[25802] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[25803] "expr temp" "temp"
      (25812 'move' _iterator[25803](25810 call _getIterator(25794 call doSplit this sep maxsplit ignoreEmpty)))
      Defer
      {
        {
          (25827 call _freeIterator _iterator[25803])
        }
      }
      { scopeless type
        (25817 'move' _indexOfInterest[25802](25814 call iteratorIndex _iterator[25803]))
      }
      ForLoop[25804]
      {
        unknown s[25791] "index var" "insert auto destroy"
        (25822 'move' s[25791] _indexOfInterest[25802])
        { scopeless
          (25799 yield s)
        }
        label _continueLabel[25807]
        _indexOfInterest[25802]
        _iterator[25803]
      }
      label _breakLabel[25808]
    }
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].split[25837](arg _mt[25851]:_MT[201], arg this[25840] :
  string[244], arg maxsplit[25847] :
  int[10] =
  (25844 call - 1)) : _unknown[42] "iterator fn" "method"
  {
    if(25943 call _cond_test(25942 call(25939 call . this c"isASCII")))
    {
      {
        unknown _indexOfInterest[25865] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[25866] "expr temp" "temp"
        (25875 'move' _iterator[25866](25873 call _getIterator(25859 call doSplitWSNoEnc this maxsplit)))
        Defer
        {
          {
            (25890 call _freeIterator _iterator[25866])
          }
        }
        { scopeless type
          (25880 'move' _indexOfInterest[25865](25877 call iteratorIndex _iterator[25866]))
        }
        ForLoop[25867]
        {
          unknown s[25856] "index var" "insert auto destroy"
          (25885 'move' s[25856] _indexOfInterest[25865])
          { scopeless
            (25862 yield s)
          }
          label _continueLabel[25870]
          _indexOfInterest[25865]
          _iterator[25866]
        }
        label _breakLabel[25871]
      }
    }
    {
      {
        unknown _indexOfInterest[25906] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[25907] "expr temp" "temp"
        (25916 'move' _iterator[25907](25914 call _getIterator(25901 call doSplitWSUTF8 maxsplit)))
        Defer
        {
          {
            (25931 call _freeIterator _iterator[25907])
          }
        }
        { scopeless type
          (25921 'move' _indexOfInterest[25906](25918 call iteratorIndex _iterator[25907]))
        }
        ForLoop[25908]
        {
          unknown s[25898] "index var" "insert auto destroy"
          (25926 'move' s[25898] _indexOfInterest[25906])
          { scopeless
            (25903 yield s)
          }
          label _continueLabel[25911]
          _indexOfInterest[25906]
          _iterator[25907]
        }
        label _breakLabel[25912]
      }
    }
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].join[25950](arg _mt[25962]:_MT[201], arg this[25953] :
  string[244], const  ref arg x[25958] ... :
  string[244]) : _unknown[42] "inline" "method"
  {
    (25966 return(25968 call doJoin this x))
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].join[25974](arg _mt[25982]:_MT[201], arg this[25977] :
  string[244], const  ref arg x[25980]:_any[141](?)) : _unknown[42] "inline" "method"
  {
    (25987 call compilerError(25988 call + "string.join() accepts any number of strings, homogeneous " "tuple of strings, or array of strings as an argument"))
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].strip[25999](arg _mt[26021]:_MT[201], arg this[26002] :
  string[244], arg chars[26009] :
  string[244] =
  " \t\r\n", arg leading[26014] =
  1, arg trailing[26018] =
  1) : _unknown[42] "method"
  {
    if(26388 call _cond_test(26387 call(26384 call . this c"isASCII")))
    {
      (26026 return(26028 call doStripNoEnc this chars leading trailing))
    }
    {
      if(26042 call _cond_test(26041 call(26038 call . this c"isEmpty")))
      {
        { scopeless
          (26034 return "")
        }
      }
      if(26055 call _cond_test(26054 call(26051 call . chars c"isEmpty")))
      {
        { scopeless
          (26047 return this)
        }
      }
      { scopeless
        const localThis[26061] "const"(26067 call(26064 call . this c"localize")) string[244]
        (26069 'end of statement')
      }
      { scopeless
        const localChars[26071] "const"(26077 call(26074 call . chars c"localize")) string[244]
        (26079 'end of statement')
      }
      { scopeless
        unknown start[26081] 0 byteIndex
        (26085 'end of statement')
      }
      { scopeless
        unknown end[26087](26089 call -(26092 call . localThis c"buffLen") 1) byteIndex
        (26097 'end of statement')
      }
      if(26230 call _cond_test leading)
      {
        {
          unknown _indexOfInterest[26178] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[26179] "expr temp" "temp"
          (26188 'move' _iterator[26179](26186 call _getIterator(26114 call(26111 call . localThis c"_cpIndexLen"))))
          Defer
          {
            {
              (26222 call _freeIterator _iterator[26179])
            }
          }
          { scopeless type
            (26193 'move' _indexOfInterest[26178](26190 call iteratorIndex _iterator[26179]))
          }
          ForLoop[26180]
          {
            (26198 call _check_tuple_var_decl _indexOfInterest[26178] 3)
            unknown thisChar[26100] "index var" "insert auto destroy"
            (26205 'move' thisChar[26100](26202 call _indexOfInterest[26178] 0))
            unknown i[26102] "index var" "insert auto destroy"
            (26211 'move' i[26102](26208 call _indexOfInterest[26178] 1))
            unknown nBytes[26104] "index var" "insert auto destroy"
            (26217 'move' nBytes[26104](26214 call _indexOfInterest[26178] 2))
            {
              {
                unknown _indexOfInterest[26143] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[26144] "expr temp" "temp"
                (26153 'move' _iterator[26144](26151 call _getIterator(26122 call(26119 call . localChars c"codepoints"))))
                Defer
                {
                  {
                    (26168 call _freeIterator _iterator[26144])
                  }
                }
                { scopeless type
                  (26158 'move' _indexOfInterest[26143](26155 call iteratorIndex _iterator[26144]))
                }
                ForLoop[26145]
                {
                  unknown removeChar[26116] "index var" "insert auto destroy"
                  (26163 'move' removeChar[26116] _indexOfInterest[26143])
                  {
                    if(26139 call _cond_test(26135 call == thisChar removeChar))
                    {
                      (26125 call = start(26128 call + i nBytes))
                      continue outer
                    }
                  }
                  label _continueLabel[26148]
                  _indexOfInterest[26143]
                  _iterator[26144]
                }
                label _breakLabel[26149]
              }
              break nil[32]
            }
            label _continueLabel[26183]
            _indexOfInterest[26178]
            _iterator[26179]
          }
          label _breakLabel[26184]
        }
      }
      if(26371 call _cond_test trailing)
      {
        (26235 call = end(26238 call - 1))
        {
          unknown _indexOfInterest[26319] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[26320] "expr temp" "temp"
          (26329 'move' _iterator[26320](26327 call _getIterator(26254 call(26251 call . localThis c"_cpIndexLen") start)))
          Defer
          {
            {
              (26363 call _freeIterator _iterator[26320])
            }
          }
          { scopeless type
            (26334 'move' _indexOfInterest[26319](26331 call iteratorIndex _iterator[26320]))
          }
          ForLoop[26321]
          {
            (26339 call _check_tuple_var_decl _indexOfInterest[26319] 3)
            unknown thisChar[26242] "index var" "insert auto destroy"
            (26346 'move' thisChar[26242](26343 call _indexOfInterest[26319] 0))
            unknown i[26244] "index var" "insert auto destroy"
            (26352 'move' i[26244](26349 call _indexOfInterest[26319] 1))
            unknown nBytes[26246] "index var" "insert auto destroy"
            (26358 'move' nBytes[26246](26355 call _indexOfInterest[26319] 2))
            {
              {
                unknown _indexOfInterest[26277] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[26278] "expr temp" "temp"
                (26287 'move' _iterator[26278](26285 call _getIterator(26263 call(26260 call . localChars c"codepoints"))))
                Defer
                {
                  {
                    (26302 call _freeIterator _iterator[26278])
                  }
                }
                { scopeless type
                  (26292 'move' _indexOfInterest[26277](26289 call iteratorIndex _iterator[26278]))
                }
                ForLoop[26279]
                {
                  unknown removeChar[26257] "index var" "insert auto destroy"
                  (26297 'move' removeChar[26257] _indexOfInterest[26277])
                  {
                    if(26273 call _cond_test(26269 call == thisChar removeChar))
                    {
                      continue outer
                    }
                  }
                  label _continueLabel[26282]
                  _indexOfInterest[26277]
                  _iterator[26278]
                }
                label _breakLabel[26283]
              }
              (26309 call = end(26312 call -(26314 call + i nBytes) 1))
            }
            label _continueLabel[26324]
            _indexOfInterest[26319]
            _iterator[26320]
          }
          label _breakLabel[26325]
        }
      }
      (26375 return(26382 'try!-expr'(26377 call localThis(26380 call chpl_build_bounded_range start end))))
    }
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].partition[26395](arg _mt[26405]:_MT[201], const arg this[26398] :
  string[244], arg sep[26402] :
  string[244]) : _unknown[42] "inline" "method"
  {
    (26412 return(26414 call doPartition this sep))
  }
  { scopeless type
    (26407 call * 3 string[244])
  }
  function _unknown[42].dedent[26420](arg _mt[26434]:_MT[201], arg this[26423] :
  string[244], arg columns[26427] =
  0, arg ignoreFirst[26431] =
  1) : _unknown[42] "method" "@unstable"
  {
    (26438 return(26440 call doDedent this columns ignoreFirst))
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].isUpper[26447](arg _mt[26453]:_MT[201], arg this[26450] :
  string[244]) : _unknown[42] "method"
  {
    if(26465 call _cond_test(26464 call(26461 call . this c"isEmpty")))
    {
      { scopeless
        (26457 return 0)
      }
    }
    { scopeless
      unknown result[26471] bool
      (26474 'end of statement')
    }
    {
      const tmp[26568] "const" "temp"
      (26569 'move' tmp[26568](26566 'deref'(26475 'chpl_on_locale_num'(26477 call chpl_buildLocaleID(26479 call . this c"locale_id") c_sublocid_any))))
      {
        { scopeless
          unknown locale_result[26485] 0
          (26488 'end of statement')
        }
        {
          unknown _indexOfInterest[26530] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[26531] "expr temp" "temp"
          (26540 'move' _iterator[26531](26538 call _getIterator(26495 call(26492 call . this c"codepoints"))))
          Defer
          {
            {
              (26555 call _freeIterator _iterator[26531])
            }
          }
          { scopeless type
            (26545 'move' _indexOfInterest[26530](26542 call iteratorIndex _iterator[26531]))
          }
          ForLoop[26532]
          {
            unknown cp[26489] "index var" "insert auto destroy"
            (26550 'move' cp[26489] _indexOfInterest[26530])
            {
              if(26525 call _cond_test(26523 call codepoint_isLower cp))
              {
                (26498 call = locale_result 0)
                break nil[32]
              }
              {
                { scopeless
                  if(26518 call _cond_test(26510 call &&(26512 call ! locale_result)(26516 call codepoint_isUpper cp)))
                  {
                    (26506 call = locale_result 1)
                  }
                }
              }
            }
            label _continueLabel[26535]
            _indexOfInterest[26530]
            _iterator[26531]
          }
          label _breakLabel[26536]
        }
        (26562 call = result locale_result)
      }
      (26572 'elided on block' 0 tmp[26568])
    }
    (26576 return result)
  }
  { scopeless type
    bool
  }
  function _unknown[42].isLower[26581](arg _mt[26587]:_MT[201], arg this[26584] :
  string[244]) : _unknown[42] "method"
  {
    if(26599 call _cond_test(26598 call(26595 call . this c"isEmpty")))
    {
      { scopeless
        (26591 return 0)
      }
    }
    { scopeless
      unknown result[26605] bool
      (26608 'end of statement')
    }
    {
      const tmp[26702] "const" "temp"
      (26703 'move' tmp[26702](26700 'deref'(26609 'chpl_on_locale_num'(26611 call chpl_buildLocaleID(26613 call . this c"locale_id") c_sublocid_any))))
      {
        { scopeless
          unknown locale_result[26619] 0
          (26622 'end of statement')
        }
        {
          unknown _indexOfInterest[26664] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[26665] "expr temp" "temp"
          (26674 'move' _iterator[26665](26672 call _getIterator(26629 call(26626 call . this c"codepoints"))))
          Defer
          {
            {
              (26689 call _freeIterator _iterator[26665])
            }
          }
          { scopeless type
            (26679 'move' _indexOfInterest[26664](26676 call iteratorIndex _iterator[26665]))
          }
          ForLoop[26666]
          {
            unknown cp[26623] "index var" "insert auto destroy"
            (26684 'move' cp[26623] _indexOfInterest[26664])
            {
              if(26659 call _cond_test(26657 call codepoint_isUpper cp))
              {
                (26632 call = locale_result 0)
                break nil[32]
              }
              {
                { scopeless
                  if(26652 call _cond_test(26644 call &&(26646 call ! locale_result)(26650 call codepoint_isLower cp)))
                  {
                    (26640 call = locale_result 1)
                  }
                }
              }
            }
            label _continueLabel[26669]
            _indexOfInterest[26664]
            _iterator[26665]
          }
          label _breakLabel[26670]
        }
        (26696 call = result locale_result)
      }
      (26706 'elided on block' 0 tmp[26702])
    }
    (26710 return result)
  }
  { scopeless type
    bool
  }
  function _unknown[42].isSpace[26715](arg _mt[26721]:_MT[201], arg this[26718] :
  string[244]) : _unknown[42] "method"
  {
    if(26733 call _cond_test(26732 call(26729 call . this c"isEmpty")))
    {
      { scopeless
        (26725 return 0)
      }
    }
    { scopeless
      unknown result[26739] 1 bool
      (26743 'end of statement')
    }
    {
      const tmp[26812] "const" "temp"
      (26813 'move' tmp[26812](26810 'deref'(26744 'chpl_on_locale_num'(26746 call chpl_buildLocaleID(26748 call . this c"locale_id") c_sublocid_any))))
      {
        {
          unknown _indexOfInterest[26778] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[26779] "expr temp" "temp"
          (26788 'move' _iterator[26779](26786 call _getIterator(26759 call(26756 call . this c"codepoints"))))
          Defer
          {
            {
              (26803 call _freeIterator _iterator[26779])
            }
          }
          { scopeless type
            (26793 'move' _indexOfInterest[26778](26790 call iteratorIndex _iterator[26779]))
          }
          ForLoop[26780]
          {
            unknown cp[26753] "index var" "insert auto destroy"
            (26798 'move' cp[26753] _indexOfInterest[26778])
            {
              if(26774 call _cond_test(26769 call !(26772 call codepoint_isWhitespace cp)))
              {
                (26762 call = result 0)
                break nil[32]
              }
            }
            label _continueLabel[26783]
            _indexOfInterest[26778]
            _iterator[26779]
          }
          label _breakLabel[26784]
        }
      }
      (26816 'elided on block' 0 tmp[26812])
    }
    (26820 return result)
  }
  { scopeless type
    bool
  }
  function _unknown[42].isAlpha[26825](arg _mt[26831]:_MT[201], arg this[26828] :
  string[244]) : _unknown[42] "method"
  {
    if(26843 call _cond_test(26842 call(26839 call . this c"isEmpty")))
    {
      { scopeless
        (26835 return 0)
      }
    }
    { scopeless
      unknown result[26849] 1 bool
      (26853 'end of statement')
    }
    {
      const tmp[26922] "const" "temp"
      (26923 'move' tmp[26922](26920 'deref'(26854 'chpl_on_locale_num'(26856 call chpl_buildLocaleID(26858 call . this c"locale_id") c_sublocid_any))))
      {
        {
          unknown _indexOfInterest[26888] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[26889] "expr temp" "temp"
          (26898 'move' _iterator[26889](26896 call _getIterator(26869 call(26866 call . this c"codepoints"))))
          Defer
          {
            {
              (26913 call _freeIterator _iterator[26889])
            }
          }
          { scopeless type
            (26903 'move' _indexOfInterest[26888](26900 call iteratorIndex _iterator[26889]))
          }
          ForLoop[26890]
          {
            unknown cp[26863] "index var" "insert auto destroy"
            (26908 'move' cp[26863] _indexOfInterest[26888])
            {
              if(26884 call _cond_test(26879 call !(26882 call codepoint_isAlpha cp)))
              {
                (26872 call = result 0)
                break nil[32]
              }
            }
            label _continueLabel[26893]
            _indexOfInterest[26888]
            _iterator[26889]
          }
          label _breakLabel[26894]
        }
      }
      (26926 'elided on block' 0 tmp[26922])
    }
    (26930 return result)
  }
  { scopeless type
    bool
  }
  function _unknown[42].isDigit[26935](arg _mt[26941]:_MT[201], arg this[26938] :
  string[244]) : _unknown[42] "method"
  {
    if(26953 call _cond_test(26952 call(26949 call . this c"isEmpty")))
    {
      { scopeless
        (26945 return 0)
      }
    }
    { scopeless
      unknown result[26959] 1 bool
      (26963 'end of statement')
    }
    {
      const tmp[27032] "const" "temp"
      (27033 'move' tmp[27032](27030 'deref'(26964 'chpl_on_locale_num'(26966 call chpl_buildLocaleID(26968 call . this c"locale_id") c_sublocid_any))))
      {
        {
          unknown _indexOfInterest[26998] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[26999] "expr temp" "temp"
          (27008 'move' _iterator[26999](27006 call _getIterator(26979 call(26976 call . this c"codepoints"))))
          Defer
          {
            {
              (27023 call _freeIterator _iterator[26999])
            }
          }
          { scopeless type
            (27013 'move' _indexOfInterest[26998](27010 call iteratorIndex _iterator[26999]))
          }
          ForLoop[27000]
          {
            unknown cp[26973] "index var" "insert auto destroy"
            (27018 'move' cp[26973] _indexOfInterest[26998])
            {
              if(26994 call _cond_test(26989 call !(26992 call codepoint_isDigit cp)))
              {
                (26982 call = result 0)
                break nil[32]
              }
            }
            label _continueLabel[27003]
            _indexOfInterest[26998]
            _iterator[26999]
          }
          label _breakLabel[27004]
        }
      }
      (27036 'elided on block' 0 tmp[27032])
    }
    (27040 return result)
  }
  { scopeless type
    bool
  }
  function _unknown[42].isAlnum[27045](arg _mt[27051]:_MT[201], arg this[27048] :
  string[244]) : _unknown[42] "method"
  {
    if(27063 call _cond_test(27062 call(27059 call . this c"isEmpty")))
    {
      { scopeless
        (27055 return 0)
      }
    }
    { scopeless
      unknown result[27069] 1 bool
      (27073 'end of statement')
    }
    {
      const tmp[27147] "const" "temp"
      (27148 'move' tmp[27147](27145 'deref'(27074 'chpl_on_locale_num'(27076 call chpl_buildLocaleID(27078 call . this c"locale_id") c_sublocid_any))))
      {
        {
          unknown _indexOfInterest[27113] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[27114] "expr temp" "temp"
          (27123 'move' _iterator[27114](27121 call _getIterator(27089 call(27086 call . this c"codepoints"))))
          Defer
          {
            {
              (27138 call _freeIterator _iterator[27114])
            }
          }
          { scopeless type
            (27128 'move' _indexOfInterest[27113](27125 call iteratorIndex _iterator[27114]))
          }
          ForLoop[27115]
          {
            unknown cp[27083] "index var" "insert auto destroy"
            (27133 'move' cp[27083] _indexOfInterest[27113])
            {
              if(27109 call _cond_test(27099 call !(27101 call ||(27104 call codepoint_isAlpha cp)(27107 call codepoint_isDigit cp))))
              {
                (27092 call = result 0)
                break nil[32]
              }
            }
            label _continueLabel[27118]
            _indexOfInterest[27113]
            _iterator[27114]
          }
          label _breakLabel[27119]
        }
      }
      (27151 'elided on block' 0 tmp[27147])
    }
    (27155 return result)
  }
  { scopeless type
    bool
  }
  function _unknown[42].isPrintable[27160](arg _mt[27166]:_MT[201], arg this[27163] :
  string[244]) : _unknown[42] "method"
  {
    if(27178 call _cond_test(27177 call(27174 call . this c"isEmpty")))
    {
      { scopeless
        (27170 return 0)
      }
    }
    { scopeless
      unknown result[27184] 1 bool
      (27188 'end of statement')
    }
    {
      const tmp[27257] "const" "temp"
      (27258 'move' tmp[27257](27255 'deref'(27189 'chpl_on_locale_num'(27191 call chpl_buildLocaleID(27193 call . this c"locale_id") c_sublocid_any))))
      {
        {
          unknown _indexOfInterest[27223] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[27224] "expr temp" "temp"
          (27233 'move' _iterator[27224](27231 call _getIterator(27204 call(27201 call . this c"codepoints"))))
          Defer
          {
            {
              (27248 call _freeIterator _iterator[27224])
            }
          }
          { scopeless type
            (27238 'move' _indexOfInterest[27223](27235 call iteratorIndex _iterator[27224]))
          }
          ForLoop[27225]
          {
            unknown cp[27198] "index var" "insert auto destroy"
            (27243 'move' cp[27198] _indexOfInterest[27223])
            {
              if(27219 call _cond_test(27214 call !(27217 call codepoint_isPrintable cp)))
              {
                (27207 call = result 0)
                break nil[32]
              }
            }
            label _continueLabel[27228]
            _indexOfInterest[27223]
            _iterator[27224]
          }
          label _breakLabel[27229]
        }
      }
      (27261 'elided on block' 0 tmp[27257])
    }
    (27265 return result)
  }
  { scopeless type
    bool
  }
  function _unknown[42].isTitle[27270](arg _mt[27276]:_MT[201], arg this[27273] :
  string[244]) : _unknown[42] "method"
  {
    if(27288 call _cond_test(27287 call(27284 call . this c"isEmpty")))
    {
      { scopeless
        (27280 return 0)
      }
    }
    { scopeless
      unknown result[27294] 1 bool
      (27298 'end of statement')
    }
    {
      const tmp[27439] "const" "temp"
      (27440 'move' tmp[27439](27437 'deref'(27299 'chpl_on_locale_num'(27301 call chpl_buildLocaleID(27303 call . this c"locale_id") c_sublocid_any))))
      {
        { scopeless
          { scopeless
            unknown UN[27318] "param" 0
          }
          { scopeless
            unknown UPPER[27314] "param" 1
          }
          { scopeless
            unknown LOWER[27310] "param" 2
          }
          (27321 'end of statement')
        }
        { scopeless
          unknown last[27323] UN
          (27326 'end of statement')
        }
        {
          unknown _indexOfInterest[27405] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[27406] "expr temp" "temp"
          (27415 'move' _iterator[27406](27413 call _getIterator(27333 call(27330 call . this c"codepoints"))))
          Defer
          {
            {
              (27430 call _freeIterator _iterator[27406])
            }
          }
          { scopeless type
            (27420 'move' _indexOfInterest[27405](27417 call iteratorIndex _iterator[27406]))
          }
          ForLoop[27407]
          {
            unknown cp[27327] "index var" "insert auto destroy"
            (27425 'move' cp[27327] _indexOfInterest[27405])
            {
              if(27400 call _cond_test(27398 call codepoint_isLower cp))
              {
                if(27359 call _cond_test(27349 call ||(27351 call == last UPPER)(27355 call == last LOWER)))
                {
                  (27337 call = last LOWER)
                }
                {
                  (27342 call = result 0)
                  break nil[32]
                }
              }
              {
                { scopeless
                  if(27393 call _cond_test(27391 call codepoint_isUpper cp))
                  {
                    if(27381 call _cond_test(27377 call == last UN))
                    {
                      (27365 call = last UPPER)
                    }
                    {
                      (27370 call = result 0)
                      break nil[32]
                    }
                  }
                  {
                    (27386 call = last UN)
                  }
                }
              }
            }
            label _continueLabel[27410]
            _indexOfInterest[27405]
            _iterator[27406]
          }
          label _breakLabel[27411]
        }
      }
      (27443 'elided on block' 0 tmp[27439])
    }
    (27447 return result)
  }
  { scopeless type
    bool
  }
  function _unknown[42].toLower[27452](arg _mt[27458]:_MT[201], arg this[27455] :
  string[244]) : _unknown[42] "method"
  {
    { scopeless
      unknown result[27463] this string[244]
      (27467 'end of statement')
    }
    if(27476 call _cond_test(27475 call(27472 call . result c"isEmpty")))
    {
      { scopeless
        (27468 return result)
      }
    }
    {
      unknown _indexOfInterest[27530] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[27531] "expr temp" "temp"
      (27540 'move' _iterator[27531](27538 call _getIterator(27494 call(27491 call . this c"_cpIndexLen"))))
      Defer
      {
        {
          (27574 call _freeIterator _iterator[27531])
        }
      }
      { scopeless type
        (27545 'move' _indexOfInterest[27530](27542 call iteratorIndex _iterator[27531]))
      }
      ForLoop[27532]
      {
        (27550 call _check_tuple_var_decl _indexOfInterest[27530] 3)
        unknown cp[27482] "index var" "insert auto destroy"
        (27557 'move' cp[27482](27554 call _indexOfInterest[27530] 0))
        unknown i[27484] "index var" "insert auto destroy"
        (27563 'move' i[27484](27560 call _indexOfInterest[27530] 1))
        unknown nBytes[27486] "index var" "insert auto destroy"
        (27569 'move' nBytes[27486](27566 call _indexOfInterest[27530] 2))
        {
          { scopeless
            unknown lowCodepoint[27497](27499 call codepoint_toLower cp)
            (27502 'end of statement')
          }
          if(27526 call _cond_test(27514 call &&(27516 call != lowCodepoint cp)(27520 call ==(27523 call qio_nbytes_char lowCodepoint) nBytes)))
          {
            (27505 call qio_encode_char_buf(27506 call +(27509 call . result c"buff") i) lowCodepoint)
          }
        }
        label _continueLabel[27535]
        _indexOfInterest[27530]
        _iterator[27531]
      }
      label _breakLabel[27536]
    }
    (27581 return result)
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].toUpper[27586](arg _mt[27592]:_MT[201], arg this[27589] :
  string[244]) : _unknown[42] "method"
  {
    { scopeless
      unknown result[27597] this string[244]
      (27601 'end of statement')
    }
    if(27610 call _cond_test(27609 call(27606 call . result c"isEmpty")))
    {
      { scopeless
        (27602 return result)
      }
    }
    {
      unknown _indexOfInterest[27664] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[27665] "expr temp" "temp"
      (27674 'move' _iterator[27665](27672 call _getIterator(27628 call(27625 call . this c"_cpIndexLen"))))
      Defer
      {
        {
          (27708 call _freeIterator _iterator[27665])
        }
      }
      { scopeless type
        (27679 'move' _indexOfInterest[27664](27676 call iteratorIndex _iterator[27665]))
      }
      ForLoop[27666]
      {
        (27684 call _check_tuple_var_decl _indexOfInterest[27664] 3)
        unknown cp[27616] "index var" "insert auto destroy"
        (27691 'move' cp[27616](27688 call _indexOfInterest[27664] 0))
        unknown i[27618] "index var" "insert auto destroy"
        (27697 'move' i[27618](27694 call _indexOfInterest[27664] 1))
        unknown nBytes[27620] "index var" "insert auto destroy"
        (27703 'move' nBytes[27620](27700 call _indexOfInterest[27664] 2))
        {
          { scopeless
            unknown upCodepoint[27631](27633 call codepoint_toUpper cp)
            (27636 'end of statement')
          }
          if(27660 call _cond_test(27648 call &&(27650 call != upCodepoint cp)(27654 call ==(27657 call qio_nbytes_char upCodepoint) nBytes)))
          {
            (27639 call qio_encode_char_buf(27640 call +(27643 call . result c"buff") i) upCodepoint)
          }
        }
        label _continueLabel[27669]
        _indexOfInterest[27664]
        _iterator[27665]
      }
      label _breakLabel[27670]
    }
    (27715 return result)
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].toTitle[27720](arg _mt[27726]:_MT[201], arg this[27723] :
  string[244]) : _unknown[42] "method"
  {
    { scopeless
      unknown result[27731] this string[244]
      (27735 'end of statement')
    }
    if(27744 call _cond_test(27743 call(27740 call . result c"isEmpty")))
    {
      { scopeless
        (27736 return result)
      }
    }
    { scopeless
      { scopeless
        unknown UN[27755] "param" 0
      }
      { scopeless
        unknown LETTER[27751] "param" 1
      }
      (27758 'end of statement')
    }
    { scopeless
      unknown last[27760] UN
      (27763 'end of statement')
    }
    {
      unknown _indexOfInterest[27874] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[27875] "expr temp" "temp"
      (27884 'move' _iterator[27875](27882 call _getIterator(27777 call(27774 call . this c"_cpIndexLen"))))
      Defer
      {
        {
          (27918 call _freeIterator _iterator[27875])
        }
      }
      { scopeless type
        (27889 'move' _indexOfInterest[27874](27886 call iteratorIndex _iterator[27875]))
      }
      ForLoop[27876]
      {
        (27894 call _check_tuple_var_decl _indexOfInterest[27874] 3)
        unknown cp[27765] "index var" "insert auto destroy"
        (27901 'move' cp[27765](27898 call _indexOfInterest[27874] 0))
        unknown i[27767] "index var" "insert auto destroy"
        (27907 'move' i[27767](27904 call _indexOfInterest[27874] 1))
        unknown nBytes[27769] "index var" "insert auto destroy"
        (27913 'move' nBytes[27769](27910 call _indexOfInterest[27874] 2))
        {
          if(27870 call _cond_test(27868 call codepoint_isAlpha cp))
          {
            if(27858 call _cond_test(27854 call == last UN))
            {
              (27781 call = last LETTER)
              { scopeless
                unknown upCodepoint[27786](27788 call codepoint_toUpper cp)
                (27791 'end of statement')
              }
              if(27815 call _cond_test(27803 call &&(27805 call != upCodepoint cp)(27809 call ==(27812 call qio_nbytes_char upCodepoint) nBytes)))
              {
                (27794 call qio_encode_char_buf(27795 call +(27798 call . result c"buff") i) upCodepoint)
              }
            }
            {
              { scopeless
                unknown lowCodepoint[27821](27823 call codepoint_toLower cp)
                (27826 'end of statement')
              }
              if(27850 call _cond_test(27838 call &&(27840 call != lowCodepoint cp)(27844 call ==(27847 call qio_nbytes_char lowCodepoint) nBytes)))
              {
                (27829 call qio_encode_char_buf(27830 call +(27833 call . result c"buff") i) lowCodepoint)
              }
            }
          }
          {
            (27863 call = last UN)
          }
        }
        label _continueLabel[27879]
        _indexOfInterest[27874]
        _iterator[27875]
      }
      label _breakLabel[27880]
    }
    (27925 return result)
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].=[27930](arg _mt[27944]:_MT[201], arg this[27933] :
  byteIndex, ref arg lhs[27937] :
  byteIndex, arg rhs[27941] :
  int[10]) : _unknown[42] "assignop" "method" "operator"
  {
    (27947 call =(27950 call . lhs c"_bindex")(27953 call : rhs int[10]))
  }
  function _unknown[42].=[27959](arg _mt[27973]:_MT[201], arg this[27962] :
  byteIndex, ref arg lhs[27966] :
  byteIndex, const  ref arg rhs[27970] :
  byteIndex) : _unknown[42] "assignop" "method" "operator"
  {
    (27976 call =(27979 call . lhs c"_bindex")(27983 call . rhs c"_bindex"))
  }
  function _unknown[42].=[27988](arg _mt[28002]:_MT[201], arg this[27991] :
  codepointIndex, ref arg lhs[27995] :
  codepointIndex, arg rhs[27999] :
  int[10]) : _unknown[42] "assignop" "method" "operator"
  {
    (28005 call =(28008 call . lhs c"_cpindex")(28011 call : rhs int[10]))
  }
  function _unknown[42].=[28017](arg _mt[28031]:_MT[201], arg this[28020] :
  codepointIndex, ref arg lhs[28024] :
  codepointIndex, const  ref arg rhs[28028] :
  codepointIndex) : _unknown[42] "assignop" "method" "operator"
  {
    (28034 call =(28037 call . lhs c"_cpindex")(28041 call . rhs c"_cpindex"))
  }
  function =[28046](ref arg lhs[28049] :
  string[244], arg rhs[28053] :
  string[244]) : _unknown[42] "assignop" "operator"
  {
    (28059 call doAssign lhs rhs)
  }
  { scopeless type
    void[4]
  }
  function _unknown[42].+[28065](arg _mt[28079]:_MT[201], arg this[28068] :
  string[244], arg s0[28072] :
  string[244], arg s1[28076] :
  string[244]) : _unknown[42] "method" "operator"
  {
    (28083 return(28085 call doConcat s0 s1))
  }
  { scopeless type
    string[244]
  }
  function *[28091](arg s[28094] :
  string[244], arg n[28098] :
  integral) : _unknown[42] "operator"
  {
    (28103 return(28105 call doMultiply s n))
  }
  { scopeless type
    string[244]
  }
  function *[28111](arg n[28114] :
  integral, arg s[28118] :
  string[244]) : _unknown[42] "operator"
  {
    (28122 return(28124 call doMultiply s n))
  }
  function _unknown[42].==[28129](arg _mt[28143]:_MT[201], arg this[28132] :
  string[244], param arg s0[28136] :
  string[244], param arg s1[28140] :
  string[244]) param : _unknown[42] "inline" "method" "operator"
  {
    (28146 return(28147 call ==(28149 'string_compare' s0 s1) 0))
  }
  function _unknown[42].!=[28155](arg _mt[28169]:_MT[201], arg this[28158] :
  string[244], param arg s0[28162] :
  string[244], param arg s1[28166] :
  string[244]) param : _unknown[42] "inline" "method" "operator"
  {
    (28172 return(28173 call !=(28175 'string_compare' s0 s1) 0))
  }
  function _unknown[42].<=[28181](arg _mt[28195]:_MT[201], arg this[28184] :
  string[244], param arg a[28188] :
  string[244], param arg b[28192] :
  string[244]) param : _unknown[42] "inline" "method" "operator"
  {
    (28198 return(28199 call <=(28201 'string_compare' a b) 0))
  }
  function _unknown[42].>=[28207](arg _mt[28221]:_MT[201], arg this[28210] :
  string[244], param arg a[28214] :
  string[244], param arg b[28218] :
  string[244]) param : _unknown[42] "inline" "method" "operator"
  {
    (28224 return(28225 call >=(28227 'string_compare' a b) 0))
  }
  function _unknown[42].<[28233](arg _mt[28247]:_MT[201], arg this[28236] :
  string[244], param arg a[28240] :
  string[244], param arg b[28244] :
  string[244]) param : _unknown[42] "inline" "method" "operator"
  {
    (28250 return(28251 call <(28253 'string_compare' a b) 0))
  }
  function _unknown[42].>[28259](arg _mt[28273]:_MT[201], arg this[28262] :
  string[244], param arg a[28266] :
  string[244], param arg b[28270] :
  string[244]) param : _unknown[42] "inline" "method" "operator"
  {
    (28276 return(28277 call >(28279 'string_compare' a b) 0))
  }
  function _unknown[42].+[28285](arg _mt[28299]:_MT[201], arg this[28288] :
  string[244], param arg a[28292] :
  string[244], param arg b[28296] :
  string[244]) param : _unknown[42] "inline" "method" "operator"
  {
    (28302 return(28303 'string_concat' a b))
  }
  function _unknown[42].toByte[28308](arg _mt[28314]:_MT[201], param arg this[28311] :
  string[244]) param : _unknown[42] "inline" "method"
  {
    if(28331 call _cond_test(28324 call !=(28327 call . this c"numBytes") 1))
    {
      { scopeless
        (28321 call compilerError "string.toByte() only accepts single-byte strings")
      }
    }
    (28336 return(28337 'ascii' this))
  }
  { scopeless type
    (28317 call uint[86] 8)
  }
  function _unknown[42].byte[28342](arg _mt[28352]:_MT[201], param arg this[28345] :
  string[244], param arg i[28349] :
  int[10]) param : _unknown[42] "inline" "method"
  {
    if(28399 call _cond_test(28383 call ||(28385 call < i 0)(28389 call > i(28392 call -(28395 call . this c"numBytes") 1))))
    {
      { scopeless
        (28359 call compilerError(28360 call +(28362 call +(28364 call +(28366 call + "index "(28369 call : i string[244])) " out of bounds for string with ")(28374 call :(28377 call . this c"numBytes") string[244])) " bytes"))
      }
    }
    (28404 return(28405 'ascii' this i))
  }
  { scopeless type
    (28355 call uint[86] 8)
  }
  function _unknown[42].this[28411](arg _mt[28421]:_MT[201], param arg this[28414] :
  string[244], param arg i[28418] :
  int[10]) param : _unknown[42] "inline" "method"
  {
    if(28463 call _cond_test(28447 call ||(28449 call < i 0)(28453 call > i(28456 call -(28459 call . this c"size") 1))))
    {
      { scopeless
        (28426 call compilerError(28427 call +(28429 call +(28431 call + "index "(28434 call : i string[244])) " out of bounds for string with length ")(28439 call :(28442 call . this c"size") string[244])))
      }
    }
    (28468 return(28469 'string item' this i))
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].item[28475](arg _mt[28485]:_MT[201], param arg this[28478] :
  string[244], param arg i[28482] :
  int[10]) param : _unknown[42] "inline" "method"
  {
    if(28527 call _cond_test(28511 call ||(28513 call < i 0)(28517 call > i(28520 call -(28523 call . this c"size") 1))))
    {
      { scopeless
        (28490 call compilerError(28491 call +(28493 call +(28495 call + "index "(28498 call : i string[244])) " out of bounds for string with length ")(28503 call :(28506 call . this c"size") string[244])))
      }
    }
    (28532 return(28533 'string item' this i))
  }
  { scopeless type
    string[244]
  }
  function _unknown[42].numBytes[28539](arg _mt[28545]:_MT[201], param arg this[28542] :
  string[244]) param : _unknown[42] "inline" "method" "no parens"
  {
    (28548 return(28549 'string_length_bytes' this))
  }
  function _unknown[42].numCodepoints[28553](arg _mt[28559]:_MT[201], param arg this[28556] :
  string[244]) param : _unknown[42] "inline" "method" "no parens"
  {
    (28562 return(28563 'string_length_codepoints' this))
  }
  function _unknown[42].size[28567](arg _mt[28573]:_MT[201], param arg this[28570] :
  string[244]) param : _unknown[42] "inline" "method" "no parens"
  {
    (28576 return(28578 call . this c"numCodepoints"))
  }
  function _string_contains[28583](param arg a[28586] :
  string[244], param arg b[28590] :
  string[244]) param : _unknown[42] "inline"
  {
    (28594 return(28595 'string_contains' a b))
  }
  function _unknown[42].+=[28600](arg _mt[28614]:_MT[201], arg this[28603] :
  string[244], ref arg lhs[28607] :
  string[244], const  ref arg rhs[28611] :
  string[244]) : _unknown[42] "assignop" "method" "operator"
  {
    (28619 call doAppend lhs rhs)
  }
  { scopeless type
    void[4]
  }
  function _unknown[42].appendCodepointValues[28625](arg _mt[28637]:_MT[201], ref arg this[28628] :
  string[244], arg codepoints[28633] ... :
  int[10]) : _unknown[42] "method" "@unstable"
  {
    { scopeless
      unknown nbytesTotal[28642] 0
      (28645 'end of statement')
    }
    { scopeless
      unknown buf[28647](28649 call c_array(28651 call uint[86] 8)(28653 call * 4(28657 call . codepoints c"size")))
      (28661 'end of statement')
    }
    {
      unknown i[28662] "index var" 0
      unknown tmp[28752] "maybe param" "temp"
      (28764 'move' tmp[28752](28762 call chpl_compute_low_param_loop_bound 0(28669 call chpl__nudgeHighBound(28666 call . codepoints c"size"))))
      unknown tmp[28753] "maybe param" "temp"
      (28776 'move' tmp[28753](28774 call chpl_compute_high_param_loop_bound 0(28769 call chpl__nudgeHighBound(28771 call . codepoints c"size"))))
      unknown tmp[28754] "maybe param" "temp"
      (28779 'move' tmp[28754] 1)
      ParamForLoop[28781]
      { i[28662] tmp[28752] tmp[28753] tmp[28754]
        {
          { scopeless
            unknown cp[28675](28677 call codepoints i)
            (28680 'end of statement')
          }
          if(28701 call _cond_test(28689 call &&(28691 call <= 0 cp)(28695 call <= cp 1114111)))
          {
          }
          {
            (28683 call = cp 65533)
          }
          { scopeless
            unknown nbytes[28706](28708 call qio_nbytes_char(28709 call : cp(28713 call int[10] 32)))
            (28716 'end of statement')
          }
          if(28731 call _cond_test boundsChecking)
          {
            (28719 call assert(28720 call &&(28722 call <= 0 nbytes)(28726 call <= nbytes 4)))
          }
          (28736 call qio_encode_char_buf(28738 call c_ptrTo(28740 call buf nbytesTotal))(28742 call : cp(28746 call int[10] 32)))
          (28748 call += nbytesTotal nbytes)
        }
      }
      label _unused_continueLabel[28756]
      label _breakLabel[28755]
    }
    (28791 call doAppendSomeBytes this nbytesTotal buf(nCodepoints =(28796 call . codepoints c"size")))
  }
  { scopeless type
    void[4]
  }
  function _unknown[42].==[28803](arg _mt[28817]:_MT[201], arg this[28806] :
  string[244], arg a[28810] :
  string[244], arg b[28814] :
  string[244]) : _unknown[42] "method" "operator"
  {
    (28821 return(28823 call doEq a b))
  }
  { scopeless type
    bool
  }
  function _unknown[42].!=[28829](arg _mt[28843]:_MT[201], arg this[28832] :
  string[244], arg a[28836] :
  string[244], arg b[28840] :
  string[244]) : _unknown[42] "inline" "method" "operator"
  {
    (28847 return(28848 call !(28851 call doEq a b)))
  }
  { scopeless type
    bool
  }
  function _unknown[42].<[28857](arg _mt[28871]:_MT[201], arg this[28860] :
  string[244], arg a[28864] :
  string[244], arg b[28868] :
  string[244]) : _unknown[42] "inline" "method" "operator"
  {
    (28875 return(28877 call doLessThan a b))
  }
  { scopeless type
    bool
  }
  function _unknown[42].>[28883](arg _mt[28897]:_MT[201], arg this[28886] :
  string[244], arg a[28890] :
  string[244], arg b[28894] :
  string[244]) : _unknown[42] "inline" "method" "operator"
  {
    (28901 return(28903 call doGreaterThan a b))
  }
  { scopeless type
    bool
  }
  function _unknown[42].<=[28909](arg _mt[28923]:_MT[201], arg this[28912] :
  string[244], arg a[28916] :
  string[244], arg b[28920] :
  string[244]) : _unknown[42] "inline" "method" "operator"
  {
    (28927 return(28929 call doLessThanOrEq a b))
  }
  { scopeless type
    bool
  }
  function _unknown[42].>=[28935](arg _mt[28949]:_MT[201], arg this[28938] :
  string[244], arg a[28942] :
  string[244], arg b[28946] :
  string[244]) : _unknown[42] "inline" "method" "operator"
  {
    (28953 return(28955 call doGreaterThanOrEq a b))
  }
  { scopeless type
    bool
  }
  (28965 'require' "wctype.h")
  unknown wint_t[28968] "extern" "type variable"(28970 call int[10] 32)
  function codepoint_isUpper[28973](arg c[28978] :
  (28976 call int[10] 32)) : _unknown[42] "inline" "private"
  {
    function iswupper[28983](arg wc[28986] :
    wint_t) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (28993 return(28994 call !=(28997 call iswupper(28998 call : c wint_t)) 0))
  }
  { scopeless type
    bool
  }
  function codepoint_isLower[29006](arg c[29011] :
  (29009 call int[10] 32)) : _unknown[42] "inline" "private"
  {
    function iswlower[29016](arg wc[29019] :
    wint_t) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (29026 return(29027 call !=(29030 call iswlower(29031 call : c wint_t)) 0))
  }
  { scopeless type
    bool
  }
  function codepoint_isAlpha[29039](arg c[29044] :
  (29042 call int[10] 32)) : _unknown[42] "inline" "private"
  {
    function iswalpha[29049](arg wc[29052] :
    wint_t) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (29059 return(29060 call !=(29063 call iswalpha(29064 call : c wint_t)) 0))
  }
  { scopeless type
    bool
  }
  function codepoint_isDigit[29072](arg c[29077] :
  (29075 call int[10] 32)) : _unknown[42] "inline" "private"
  {
    function iswdigit[29082](arg wc[29085] :
    wint_t) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (29092 return(29093 call !=(29096 call iswdigit c) 0))
  }
  { scopeless type
    bool
  }
  function codepoint_isWhitespace[29102](arg c[29107] :
  (29105 call int[10] 32)) : _unknown[42] "inline" "private"
  {
    function iswspace[29112](arg wc[29115] :
    wint_t) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (29122 return(29123 call !=(29126 call iswspace c) 0))
  }
  { scopeless type
    bool
  }
  function codepoint_isPrintable[29132](arg c[29137] :
  (29135 call int[10] 32)) : _unknown[42] "inline" "private"
  {
    function iswprint[29142](arg wc[29145] :
    wint_t) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (29152 return(29153 call !=(29156 call iswprint c) 0))
  }
  { scopeless type
    bool
  }
  function codepoint_toLower[29162](arg c[29167] :
  (29165 call int[10] 32)) : _unknown[42] "inline" "private"
  {
    function towlower[29174](arg wc[29177] :
    wint_t) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      wint_t
    }
    (29184 return(29185 call :(29188 call towlower(29189 call : c wint_t))(29194 call int[10] 32)))
  }
  { scopeless type
    (29171 call int[10] 32)
  }
  function codepoint_toUpper[29199](arg c[29204] :
  (29202 call int[10] 32)) : _unknown[42] "inline" "private"
  {
    function towupper[29211](arg wc[29214] :
    wint_t) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      wint_t
    }
    (29221 return(29222 call :(29225 call towupper(29226 call : c wint_t))(29231 call int[10] 32)))
  }
  { scopeless type
    (29208 call int[10] 32)
  }
  function codepointToString[29236](arg i[29241] :
  (29239 call int[10] 32)) : _unknown[42] "inline"
  {
    { scopeless
      const mblength[29247] "const"(29248 call :(29251 call qio_nbytes_char i) int[10])
      (29255 'end of statement')
    }
    { scopeless
      unknown tmp[29267] "temp"(29262 call bufferAlloc(29263 call + mblength 1))
      (29274 call _check_tuple_var_decl tmp[29267] 2)
      unknown buffer[29257](29268 call tmp[29267] 0)
      unknown mbsize[29259](29271 call tmp[29267] 1)
      (29279 'end of statement')
    }
    (29281 call qio_encode_char_buf buffer i)
    (29284 call =(29287 call buffer mblength) 0)
    Try!
    {
      {
        (29291 return(29296 call(29293 call . string[244] c"createAdoptingBuffer") buffer mblength mbsize))
      }
    }
  }
  { scopeless type
    string[244]
  }
  function :[29306](arg cs[29309] :
  c_string, arg t[29313] :
  string[244]) : _unknown[42] "deprecated" "operator"
  {
    Try
    {
      {
        (29318 return(29323 call(29320 call . string[244] c"createCopyingBuffer")(29324 call : cs(29328 call c_ptrConst c_char))))
      }
    }
    Catch
    {
      (29333 call halt "Casting a non-UTF-8 c_string to string")
    }
  }
  function :[29342](arg cpi[29345] :
  byteIndex, arg t[29349] :
  int[10]) : _unknown[42] "inline" "operator"
  {
    (29353 return(29355 call . cpi c"_bindex"))
  }
  function :[29360](arg i[29363] :
  int[10], arg t[29367] :
  byteIndex) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown cpi[29372] byteIndex
      (29375 'end of statement')
    }
    (29376 call =(29379 call . cpi c"_bindex") i)
    (29383 return cpi)
  }
  function :[29387](arg cpi[29390] :
  codepointIndex, arg t[29394] :
  int[10]) : _unknown[42] "inline" "operator"
  {
    (29398 return(29400 call . cpi c"_cpindex"))
  }
  function :[29405](arg i[29408] :
  int[10], arg t[29412] :
  codepointIndex) : _unknown[42] "inline" "operator"
  {
    { scopeless
      unknown cpi[29417] codepointIndex
      (29420 'end of statement')
    }
    (29421 call =(29424 call . cpi c"_cpindex") i)
    (29428 return cpi)
  }
  function _unknown[42].hash[29432](arg _mt[29438]:_MT[201], arg this[29435] :
  string[244]) : _unknown[42] "inline" "method"
  {
    (29442 return(29444 call getHash this))
  }
  { scopeless type
    uint[86]
  } hashable string[244]
  {
  }
  function _unknown[42].<=>[29456](arg _mt[29470]:_MT[201], arg this[29459] :
  string[244], ref arg x[29463] :
  string[244], ref arg y[29467] :
  string[244]) : _unknown[42] "method" "operator"
  {
    if(29572 call _cond_test(29562 call !=(29565 call . x c"locale_id")(29569 call . y c"locale_id")))
    {
      { scopeless
        unknown tmp[29475] x
        (29478 'end of statement')
      }
      (29479 call = x y)
      (29483 call = y tmp)
    }
    {
      (29488 call <=>(29491 call . x c"buffLen")(29495 call . y c"buffLen"))
      (29498 call <=>(29503 call . x c"buffSize")(29507 call . y c"buffSize"))
      (29510 call <=>(29513 call . x c"cachedNumCodepoints")(29517 call . y c"cachedNumCodepoints"))
      (29520 call <=>(29523 call . x c"buff")(29527 call . y c"buff"))
      (29530 call <=>(29533 call . x c"isOwned")(29537 call . y c"isOwned"))
      (29540 call <=>(29545 call . x c"hasEscapes")(29549 call . y c"hasEscapes"))
      (29552 call <=>(29555 call . x c"locale_id")(29559 call . y c"locale_id"))
    }
  }
}