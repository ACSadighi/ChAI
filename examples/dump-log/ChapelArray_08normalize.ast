AST dump for ChapelArray after pass normalize.
Module use list: ChapelBase ChapelTuple ChapelLocale ArrayViewSlice ArrayViewRankChange ArrayViewReindex Reflection ChapelDebugPrint CTypes ChapelPrivatization ChplConfig ChapelArrayViewElision ChapelDomain Sort HaltWrappers FormattedIO ChapelShortArrayTransfer 

{
  function chpl__init_ChapelArray[468519]() : void[4] "insert line file info" "module init"
  {
    unknown call_tmp[891803] "expr temp" "maybe param" "maybe type" "temp"
    (891806 'move' call_tmp[891803](247484 call chpl__processorAtomicType int(64)[10]))
    (650966 'default init var' numPrivateObjects[247482] call_tmp[891803])
    (247487 'end of statement')
    unknown call_tmp[891808] "maybe param" "maybe type" "temp"
    (891811 'move' call_tmp[891808](247490 call - 1))
    (650968 'init var' nullPid[247489] call_tmp[891808])
    (247494 'end of statement')
    (650970 'init var' debugBulkTransfer[247496] 0)
    (247499 'end of statement')
    (650972 'init var' useBulkTransfer[247501] 1)
    (247504 'end of statement')
    (650974 'init var' useBulkTransferStride[247506] 1)
    (247509 'end of statement')
    (650976 'init var' useBulkPtrTransfer[247511] useBulkTransfer[247501])
    (247514 'end of statement')
    (650978 'init var' disableConstDomainOpt[247516] 0)
    (247519 'end of statement')
    (650980 'init var' debugOptimizedSwap[247521] 0)
    (247524 'end of statement')
    (650982 'init var' PODValAccess[247526] 1)
    (247529 'end of statement')
    (650984 'init var' useBulkTransferDist[247531] 0)
    (247534 'end of statement')
    (650986 'init var' arrayAsVecGrowthFactor[247536] 1.5)
    (247539 'end of statement')
    (650988 'init var' debugArrayAsVec[247541] 0)
    (247544 'end of statement')
    (650990 'init var' logDistArrEltAccess[247546] 0)
    (247549 'end of statement')
    (650992 'init var' logAllArrEltAccess[247551] 0)
    (247554 'end of statement')
    (651024 'init var' CHPL_WARN_DOMAIN_LITERAL[248231] "unset")
    (248234 'end of statement')
    (651026 'init var' arrayLiteralLowBound[248236] defaultLowBound[52100])
    (248239 'end of statement')
    (651028 'init var' capturedIteratorLowBound[248241] defaultLowBound[52100])
    (248244 'end of statement')
    (651580 'init var' localizeConstDomains[261718] 1)
    (651582 'init var' debugLocalizedConstDomains[261714] 0)
    (261721 'end of statement')
    (1001076 'resolution point' |writeSerializable[475292])
    (1001078 'end of statement')
    (1001079 'resolution point' |readDeserializable[475297])
    (1001081 'end of statement')
    (625867 return _void[46])
  }
  unknown numPrivateObjects[247482] "dead at end of block" "insert auto destroy"
  unknown nullPid[247489] "dead at end of block" "param"
  unknown debugBulkTransfer[247496] "config" "param"
  unknown useBulkTransfer[247501] "config" "param"
  unknown useBulkTransferStride[247506] "config" "param"
  unknown useBulkPtrTransfer[247511] "config" "param"
  unknown disableConstDomainOpt[247516] "config" "param"
  unknown debugOptimizedSwap[247521] "config" "param"
  unknown PODValAccess[247526] "config" "param"
  unknown useBulkTransferDist[247531] "config" "param"
  unknown arrayAsVecGrowthFactor[247536] "config" "param"
  unknown debugArrayAsVec[247541] "config" "param"
  unknown logDistArrEltAccess[247546] "config" "param"
  unknown logAllArrEltAccess[247551] "config" "param"
  function _isPrivatized[247555](arg value[247557]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[623450] "RVV" "param" "temp"
    unknown tmp[499467] "maybe param" "temp"
    unknown tmp[499488] "maybe param" "temp"
    unknown call_tmp[891813] "expr temp" "maybe param" "maybe type" "temp"
    (891816 'move' call_tmp[891813](247568 call compiledForSingleLocale))
    (499499 'move' tmp[499488](247565 call ! call_tmp[891813]))
    unknown call_tmp[891818] "expr temp" "maybe param" "maybe type" "temp"
    (891821 'move' call_tmp[891818](499501 call _cond_invalid tmp[499488]))
    if call_tmp[891818]
    {
      (499504 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[698454] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[698455] "maybe param" "temp"
    unknown call_tmp[891823] "expr temp" "maybe param" "maybe type" "temp"
    (891826 'move' call_tmp[891823](499489 call isTrue tmp[499488]))
    (698460 'move' tmp[698455](698458 call _cond_test call_tmp[891823]))
    if tmp[698455]
    {
      (698465 'move' tmp[698454](698462 '_paramFoldLogical' tmp[698455] 1))
    }
    {
      unknown tmp[698467] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[891828] "expr temp" "maybe param" "maybe type" "temp"
      (891831 'move' call_tmp[891828](247569 call == CHPL_LOCALE_MODEL[29682] "gpu"))
      (698469 'move' tmp[698467](499493 call isTrue call_tmp[891828]))
      (698474 'move' tmp[698454](698471 '_paramFoldLogical' tmp[698455] tmp[698467]))
    }
    (499478 'move' tmp[499467] tmp[698454])
    unknown call_tmp[891833] "expr temp" "maybe param" "maybe type" "temp"
    (891836 'move' call_tmp[891833](499480 call _cond_invalid tmp[499467]))
    if call_tmp[891833]
    {
      (499483 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[698535] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[698536] "maybe param" "temp"
    unknown call_tmp[891838] "expr temp" "maybe param" "maybe type" "temp"
    (891841 'move' call_tmp[891838](499468 call isTrue tmp[499467]))
    (698541 'move' tmp[698536](698539 call _cond_test call_tmp[891838]))
    if tmp[698536]
    {
      unknown tmp[499509] "maybe param" "temp"
      unknown tmp[499530] "maybe param" "temp"
      (499541 'move' tmp[499530] 0)
      unknown call_tmp[891843] "expr temp" "maybe param" "maybe type" "temp"
      (891846 'move' call_tmp[891843](499543 call _cond_invalid tmp[499530]))
      if call_tmp[891843]
      {
        (499546 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[698481] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[698482] "maybe param" "temp"
      unknown call_tmp[891848] "expr temp" "maybe param" "maybe type" "temp"
      (891851 'move' call_tmp[891848](499531 call isTrue tmp[499530]))
      (698487 'move' tmp[698482](698485 call _cond_test call_tmp[891848]))
      if tmp[698482]
      {
        unknown tmp[698489] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[891853] "expr temp" "maybe param" "maybe type" "temp"
        (891856 'move' call_tmp[891853](247578 call postfix! value[247557]))
        unknown call_tmp[891860] "expr temp" "maybe param" "maybe type" "temp"
        (891863 'move' call_tmp[891860](247584 call(247581 call (partial) dsiSupportsPrivatization _mt[203] call_tmp[891853])))
        (698491 'move' tmp[698489](499534 call isTrue call_tmp[891860]))
        (698496 'move' tmp[698481](698493 '_paramFoldLogical' tmp[698482] tmp[698489]))
      }
      {
        (698501 'move' tmp[698481](698498 '_paramFoldLogical' tmp[698482] 0))
      }
      (499520 'move' tmp[499509] tmp[698481])
      unknown call_tmp[891865] "expr temp" "maybe param" "maybe type" "temp"
      (891868 'move' call_tmp[891865](499522 call _cond_invalid tmp[499509]))
      if call_tmp[891865]
      {
        (499525 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[698508] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[698509] "maybe param" "temp"
      unknown call_tmp[891870] "expr temp" "maybe param" "maybe type" "temp"
      (891873 'move' call_tmp[891870](499510 call isTrue tmp[499509]))
      (698514 'move' tmp[698509](698512 call _cond_test call_tmp[891870]))
      if tmp[698509]
      {
        (698519 'move' tmp[698508](698516 '_paramFoldLogical' tmp[698509] 1))
      }
      {
        unknown tmp[698521] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[891875] "expr temp" "maybe param" "maybe type" "temp"
        (891878 'move' call_tmp[891875](247585 call postfix! value[247557]))
        unknown call_tmp[891882] "expr temp" "maybe param" "maybe type" "temp"
        (891885 'move' call_tmp[891882](247593 call(247590 call (partial) dsiRequiresPrivatization _mt[203] call_tmp[891875])))
        (698523 'move' tmp[698521](499514 call isTrue call_tmp[891882]))
        (698528 'move' tmp[698508](698525 '_paramFoldLogical' tmp[698509] tmp[698521]))
      }
      unknown tmp[698543] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (698545 'move' tmp[698543](499471 call isTrue tmp[698508]))
      (698550 'move' tmp[698535](698547 '_paramFoldLogical' tmp[698536] tmp[698543]))
    }
    {
      (698555 'move' tmp[698535](698552 '_paramFoldLogical' tmp[698536] 0))
    }
    (623455 'move' ret[623450](623454 'deref' tmp[698535]))
    (623452 return ret[623450])
  }
  function _newPrivatizedClass[247596](arg value[247598]:_any[141](?)) : _unknown[42]
  {
    unknown ret[623459] "RVV" "temp"
    unknown call_tmp[891889] "maybe param" "maybe type" "temp"
    (891892 'move' call_tmp[891889](247610 call(247607 call (partial) fetchAdd _mt[203] numPrivateObjects[247482]) 1))
    const pid[247603] "dead at end of block" "const" "insert auto destroy"
    (650994 'init var' pid[247603] call_tmp[891889])
    (247613 'end of statement')
    unknown call_tmp[891894] "expr temp" "maybe param" "maybe type" "temp"
    (891897 'move' call_tmp[891894](407542 call here[135591]))
    unknown call_tmp[891901] "maybe param" "maybe type" "temp"
    (891904 'move' call_tmp[891901](247617 call id _mt[203] call_tmp[891894]))
    const hereID[247615] "dead at end of block" "const" "insert auto destroy"
    (650996 'init var' hereID[247615] call_tmp[891901])
    (247621 'end of statement')
    unknown call_tmp[891908] "maybe param" "maybe type" "temp"
    (891911 'move' call_tmp[891908](247630 call(247627 call (partial) dsiGetPrivatizeData _mt[203] value[247598])))
    const privatizeData[247623] "dead at end of block" "const" "insert auto destroy"
    (650998 'init var' privatizeData[247623] call_tmp[891908])
    (247632 'end of statement')
    const definedConst[247634] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[698562] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[698563] "maybe param" "temp"
    unknown call_tmp[891913] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (891916 'move' call_tmp[891913](247638 'typeof' value[247598]))
    unknown call_tmp[891918] "expr temp" "maybe param" "maybe type" "temp"
    (891921 'move' call_tmp[891918](395507 'is_subtype' BaseDom[424169](?) call_tmp[891913]))
    (698568 'move' tmp[698563](698566 call _cond_test call_tmp[891918]))
    if tmp[698563]
    {
      unknown tmp[698570] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (698572 'move' tmp[698570](247641 call definedConst _mt[203] value[247598]))
      (698577 'move' tmp[698562](698574 '_paramFoldLogical' tmp[698563] tmp[698570]))
    }
    {
      (698582 'move' tmp[698562](698579 '_paramFoldLogical' tmp[698563] none[48]))
    }
    (651000 'init var' definedConst[247634] tmp[698562])
    (247649 'end of statement')
    {
      unknown tmpIter[390274] "expr temp" "maybe ref" "no copy" "temp"
      (390277 'move' tmpIter[390274] Locales[309572])
      unknown isBounded[390485] "maybe param" "temp"
      (390491 'move' isBounded[390485](390487 call chpl_supportsBoundedCoforall tmpIter[390274] 0))
      if isBounded[390485]
      {
        const _coforallCount[390354] "const" "end count" "temp"
        (390422 'move' _coforallCount[390354](390419 call _endCountAlloc 1))
        unknown numTasks[390355] "temp"
        (390406 'move' numTasks[390355](390402 call chpl_boundedCoforallSize tmpIter[390274] 0))
        (390397 call _upEndCount _coforallCount[390354] 1 numTasks[390355])
        (563152 'end of statement')
        (390394 call chpl_resetTaskSpawn numTasks[390355])
        (563153 'end of statement')
        unknown _indexOfInterest[390362] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[390363] "expr temp" "temp"
        (390372 'move' _iterator[390363](390370 call _getIterator tmpIter[390274]))
        Defer
        {
          {
            (390387 call _freeIterator _iterator[390363])
          }
        }
        { scopeless type
          (390377 'move' _indexOfInterest[390362](390374 call iteratorIndex _iterator[390363]))
        }
        ForLoop[390364]
        {
          unknown loc[390281] "coforall index var" "index var" "insert auto destroy"
          (563155 'end of statement')
          (390382 'move' loc[390281] _indexOfInterest[390362])
          (563156 'end of statement' loc[390281])
          {
            {
              const tmp[390287] "const" "temp"
              unknown call_tmp[891925] "expr temp" "maybe param" "maybe type" "temp"
              (891928 'move' call_tmp[891925](390292 '_wide_get_locale' loc[390281]))
              (390289 'move' tmp[390287](390291 'deref' call_tmp[891925]))
              {
                unknown call_tmp[891930] "expr temp" "maybe param" "maybe type" "temp"
                (891933 'move' call_tmp[891930](412872 call here[135591]))
                unknown call_tmp[891937] "expr temp" "maybe param" "maybe type" "temp"
                (891940 'move' call_tmp[891937](390301 call id _mt[203] call_tmp[891930]))
                unknown call_tmp[891942] "expr temp" "maybe param" "maybe type" "temp"
                (891945 'move' call_tmp[891942](390298 call != hereID[247615] call_tmp[891937]))
                unknown call_tmp[891947] "expr temp" "maybe param" "maybe type" "temp"
                (891950 'move' call_tmp[891947](390296 call _cond_test call_tmp[891942]))
                if call_tmp[891947]
                {
                  unknown call_tmp[891954] "maybe param" "maybe type" "temp"
                  (891957 'move' call_tmp[891954](390311 call(390308 call (partial) dsiPrivatize _mt[203] value[247598]) privatizeData[247623]))
                  unknown newValue[390306] "dead at end of block" "insert auto destroy"
                  (651002 'init var' newValue[390306] call_tmp[891954])
                  (390314 'end of statement' privatizeData[247623])
                  unknown call_tmp[891959] "expr temp" "maybe param" "maybe type" "temp" "type variable"
                  (891962 'move' call_tmp[891959](390319 'typeof' value[247598]))
                  unknown call_tmp[891964] "expr temp" "maybe param" "maybe type" "temp"
                  (891967 'move' call_tmp[891964](395508 'is_subtype' BaseDom[424169](?) call_tmp[891959]))
                  unknown call_tmp[891969] "expr temp" "maybe param" "maybe type" "temp"
                  (891972 'move' call_tmp[891969](390316 call _cond_test call_tmp[891964]))
                  if call_tmp[891969]
                  {
                    unknown call_tmp[891976] "expr temp" "maybe param" "maybe type" "temp"
                    (891979 'move' call_tmp[891976](390326 call definedConst _mt[203] newValue[390306]))
                    (390324 call = call_tmp[891976] definedConst[247634])
                    (563159 'end of statement' newValue[390306] definedConst[247634])
                  }
                  (390331 'chpl_newPrivatizedClass' newValue[390306] pid[247603])
                  (563162 'end of statement' newValue[390306] pid[247603])
                  unknown call_tmp[891983] "expr temp" "maybe param" "maybe type" "temp"
                  (891986 'move' call_tmp[891983](390337 call pid _mt[203] newValue[390306]))
                  (390335 call = call_tmp[891983] pid[247603])
                  (563165 'end of statement' newValue[390306] pid[247603])
                }
                {
                  (390342 'chpl_newPrivatizedClass' value[247598] pid[247603])
                  (563168 'end of statement' pid[247603])
                  unknown call_tmp[891990] "expr temp" "maybe param" "maybe type" "temp"
                  (891993 'move' call_tmp[891990](390348 call pid _mt[203] value[247598]))
                  (390346 call = call_tmp[891990] pid[247603])
                  (563170 'end of statement' pid[247603])
                }
              }
              (390284 'elided on block' 0 tmp[390287])
            }
            (390357 call _downEndCount _coforallCount[390354] nil[32])
            (390356 'coforall loop')
          }
          label _continueLabel[390367]
          _indexOfInterest[390362]
          _iterator[390363]
        }
        label _breakLabel[390368]
        Defer
        {
          {
            (390409 call _endCountFree _coforallCount[390354])
          }
        }
        (390414 call _waitEndCount _coforallCount[390354] 1 numTasks[390355])
      }
      {
        const _coforallCount[390426] "const" "end count" "temp"
        (390482 'move' _coforallCount[390426](390479 call _endCountAlloc 1))
        unknown _indexOfInterest[390434] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[390435] "expr temp" "temp"
        (390444 'move' _iterator[390435](390442 call _getIterator tmpIter[390274]))
        Defer
        {
          {
            (390459 call _freeIterator _iterator[390435])
          }
        }
        { scopeless type
          (390449 'move' _indexOfInterest[390434](390446 call iteratorIndex _iterator[390435]))
        }
        ForLoop[390436]
        {
          unknown loc[247650] "coforall index var" "index var" "insert auto destroy"
          (563176 'end of statement')
          (390454 'move' loc[247650] _indexOfInterest[390434])
          (563177 'end of statement' loc[247650])
          (390466 call _upEndCount _coforallCount[390426] 1)
          (563179 'end of statement')
          {
            {
              const tmp[247720] "const" "temp"
              unknown call_tmp[891995] "expr temp" "maybe param" "maybe type" "temp"
              (891998 'move' call_tmp[891995](247717 '_wide_get_locale' loc[247650]))
              (247721 'move' tmp[247720](247718 'deref' call_tmp[891995]))
              {
                unknown call_tmp[892000] "expr temp" "maybe param" "maybe type" "temp"
                (892003 'move' call_tmp[892000](407550 call here[135591]))
                unknown call_tmp[892007] "expr temp" "maybe param" "maybe type" "temp"
                (892010 'move' call_tmp[892007](247710 call id _mt[203] call_tmp[892000]))
                unknown call_tmp[892012] "expr temp" "maybe param" "maybe type" "temp"
                (892015 'move' call_tmp[892012](247706 call != hereID[247615] call_tmp[892007]))
                unknown call_tmp[892017] "expr temp" "maybe param" "maybe type" "temp"
                (892020 'move' call_tmp[892017](247713 call _cond_test call_tmp[892012]))
                if call_tmp[892017]
                {
                  unknown call_tmp[892024] "maybe param" "maybe type" "temp"
                  (892027 'move' call_tmp[892024](247664 call(247661 call (partial) dsiPrivatize _mt[203] value[247598]) privatizeData[247623]))
                  unknown newValue[247657] "dead at end of block" "insert auto destroy"
                  (651004 'init var' newValue[247657] call_tmp[892024])
                  (247667 'end of statement' privatizeData[247623])
                  unknown call_tmp[892029] "expr temp" "maybe param" "maybe type" "temp" "type variable"
                  (892032 'move' call_tmp[892029](247679 'typeof' value[247598]))
                  unknown call_tmp[892034] "expr temp" "maybe param" "maybe type" "temp"
                  (892037 'move' call_tmp[892034](395509 'is_subtype' BaseDom[424169](?) call_tmp[892029]))
                  unknown call_tmp[892039] "expr temp" "maybe param" "maybe type" "temp"
                  (892042 'move' call_tmp[892039](247681 call _cond_test call_tmp[892034]))
                  if call_tmp[892039]
                  {
                    unknown call_tmp[892046] "expr temp" "maybe param" "maybe type" "temp"
                    (892049 'move' call_tmp[892046](247672 call definedConst _mt[203] newValue[247657]))
                    (247669 call = call_tmp[892046] definedConst[247634])
                    (563181 'end of statement' newValue[247657] definedConst[247634])
                  }
                  (247685 'chpl_newPrivatizedClass' newValue[247657] pid[247603])
                  (563184 'end of statement' newValue[247657] pid[247603])
                  unknown call_tmp[892053] "expr temp" "maybe param" "maybe type" "temp"
                  (892056 'move' call_tmp[892053](247691 call pid _mt[203] newValue[247657]))
                  (247688 call = call_tmp[892053] pid[247603])
                  (563187 'end of statement' newValue[247657] pid[247603])
                }
                {
                  (247696 'chpl_newPrivatizedClass' value[247598] pid[247603])
                  (563190 'end of statement' pid[247603])
                  unknown call_tmp[892060] "expr temp" "maybe param" "maybe type" "temp"
                  (892063 'move' call_tmp[892060](247702 call pid _mt[203] value[247598]))
                  (247699 call = call_tmp[892060] pid[247603])
                  (563192 'end of statement' pid[247603])
                }
              }
              (247724 'elided on block' 0 tmp[247720])
            }
            (390429 call _downEndCount _coforallCount[390426] nil[32])
            (390428 'coforall loop')
          }
          label _continueLabel[390439]
          _indexOfInterest[390434]
          _iterator[390435]
        }
        label _breakLabel[390440]
        Defer
        {
          {
            (390470 call _endCountFree _coforallCount[390426])
          }
        }
        (390475 call _waitEndCount _coforallCount[390426] 1)
      }
    }
    (623465 'move' ret[623459](623464 'coerce' pid[247603] int(64)[10]))
    gotoReturn _end__newPrivatizedClass[623457] _end__newPrivatizedClass[623457]
    (563197 'end of statement' pid[247603])
    label _end__newPrivatizedClass[623457]
    (623461 return ret[623459])
  }
  { scopeless type
    int(64)[10]
  }
  function _freePrivatizedClass[247734](arg pid[247737]:int(64)[10], arg original[247741]:RootClass[419105](?)) : _unknown[42] "no return value for void"
  {
    unknown call_tmp[892065] "expr temp" "maybe param" "maybe type" "temp"
    (892068 'move' call_tmp[892065](247748 call == pid[247737] nullPid[247489]))
    unknown call_tmp[892070] "expr temp" "maybe param" "maybe type" "temp"
    (892073 'move' call_tmp[892070](247752 call _cond_test call_tmp[892065]))
    if call_tmp[892070]
    {
      gotoReturn _end__freePrivatizedClass[623469] _end__freePrivatizedClass[623469]
    }
    {
      unknown tmpIter[390495] "expr temp" "maybe ref" "no copy" "temp"
      (390498 'move' tmpIter[390495] Locales[309572])
      unknown isBounded[390680] "maybe param" "temp"
      (390686 'move' isBounded[390680](390682 call chpl_supportsBoundedCoforall tmpIter[390495] 0))
      if isBounded[390680]
      {
        const _coforallCount[390549] "const" "end count" "temp"
        (390617 'move' _coforallCount[390549](390614 call _endCountAlloc 1))
        unknown numTasks[390550] "temp"
        (390601 'move' numTasks[390550](390597 call chpl_boundedCoforallSize tmpIter[390495] 0))
        (390592 call _upEndCount _coforallCount[390549] 1 numTasks[390550])
        (563200 'end of statement')
        (390589 call chpl_resetTaskSpawn numTasks[390550])
        (563201 'end of statement')
        unknown _indexOfInterest[390557] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[390558] "expr temp" "temp"
        (390567 'move' _iterator[390558](390565 call _getIterator tmpIter[390495]))
        Defer
        {
          {
            (390582 call _freeIterator _iterator[390558])
          }
        }
        { scopeless type
          (390572 'move' _indexOfInterest[390557](390569 call iteratorIndex _iterator[390558]))
        }
        ForLoop[390559]
        {
          unknown loc[390502] "coforall index var" "index var" "insert auto destroy"
          (563203 'end of statement')
          (390577 'move' loc[390502] _indexOfInterest[390557])
          (563204 'end of statement' loc[390502])
          {
            {
              const tmp[390508] "const" "temp"
              unknown call_tmp[892075] "expr temp" "maybe param" "maybe type" "temp"
              (892078 'move' call_tmp[892075](390513 '_wide_get_locale' loc[390502]))
              (390510 'move' tmp[390508](390512 'deref' call_tmp[892075]))
              {
                unknown call_tmp[892080] "maybe param" "maybe type" "temp"
                (892083 'move' call_tmp[892080](390519 call chpl_getPrivatizedCopy unmanaged RootClass[468145] pid[247737]))
                unknown prv[390517] "dead at end of block" "insert auto destroy"
                (651006 'init var' prv[390517] call_tmp[892080])
                (390524 'end of statement')
                unknown call_tmp[892085] "expr temp" "maybe param" "maybe type" "temp"
                (892088 'move' call_tmp[892085](390528 call != prv[390517] original[247741]))
                unknown call_tmp[892090] "expr temp" "maybe param" "maybe type" "temp"
                (892093 'move' call_tmp[892090](390526 call _cond_test call_tmp[892085]))
                if call_tmp[892090]
                {
                  (390534 call chpl__delete prv[390517])
                  (563206 'end of statement' prv[390517])
                }
                function chpl_clearPrivatizedClass[390537](arg pid[390541]:int(64)[10]) : void[4] "extern" "local args" "no fn body"
                {
                }
                (390546 call chpl_clearPrivatizedClass pid[247737])
              }
              (390505 'elided on block' 0 tmp[390508])
            }
            (390552 call _downEndCount _coforallCount[390549] nil[32])
            (390551 'coforall loop')
          }
          label _continueLabel[390562]
          _indexOfInterest[390557]
          _iterator[390558]
        }
        label _breakLabel[390563]
        Defer
        {
          {
            (390604 call _endCountFree _coforallCount[390549])
          }
        }
        (390609 call _waitEndCount _coforallCount[390549] 1 numTasks[390550])
      }
      {
        const _coforallCount[390621] "const" "end count" "temp"
        (390677 'move' _coforallCount[390621](390674 call _endCountAlloc 1))
        unknown _indexOfInterest[390629] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[390630] "expr temp" "temp"
        (390639 'move' _iterator[390630](390637 call _getIterator tmpIter[390495]))
        Defer
        {
          {
            (390654 call _freeIterator _iterator[390630])
          }
        }
        { scopeless type
          (390644 'move' _indexOfInterest[390629](390641 call iteratorIndex _iterator[390630]))
        }
        ForLoop[390631]
        {
          unknown loc[247757] "coforall index var" "index var" "insert auto destroy"
          (563213 'end of statement')
          (390649 'move' loc[247757] _indexOfInterest[390629])
          (563214 'end of statement' loc[247757])
          (390661 call _upEndCount _coforallCount[390621] 1)
          (563216 'end of statement')
          {
            {
              const tmp[247799] "const" "temp"
              unknown call_tmp[892095] "expr temp" "maybe param" "maybe type" "temp"
              (892098 'move' call_tmp[892095](247796 '_wide_get_locale' loc[247757]))
              (247800 'move' tmp[247799](247797 'deref' call_tmp[892095]))
              {
                unknown call_tmp[892100] "maybe param" "maybe type" "temp"
                (892103 'move' call_tmp[892100](247765 call chpl_getPrivatizedCopy unmanaged RootClass[468145] pid[247737]))
                unknown prv[247763] "dead at end of block" "insert auto destroy"
                (651008 'init var' prv[247763] call_tmp[892100])
                (247770 'end of statement')
                unknown call_tmp[892105] "expr temp" "maybe param" "maybe type" "temp"
                (892108 'move' call_tmp[892105](247776 call != prv[247763] original[247741]))
                unknown call_tmp[892110] "expr temp" "maybe param" "maybe type" "temp"
                (892113 'move' call_tmp[892110](247780 call _cond_test call_tmp[892105]))
                if call_tmp[892110]
                {
                  (247773 call chpl__delete prv[247763])
                  (563217 'end of statement' prv[247763])
                }
                function chpl_clearPrivatizedClass[247785](arg pid[247788]:int(64)[10]) : void[4] "extern" "local args" "no fn body"
                {
                }
                (247794 call chpl_clearPrivatizedClass pid[247737])
              }
              (247803 'elided on block' 0 tmp[247799])
            }
            (390624 call _downEndCount _coforallCount[390621] nil[32])
            (390623 'coforall loop')
          }
          label _continueLabel[390634]
          _indexOfInterest[390629]
          _iterator[390630]
        }
        label _breakLabel[390635]
        Defer
        {
          {
            (390665 call _endCountFree _coforallCount[390621])
          }
        }
        (390670 call _waitEndCount _coforallCount[390621] 1)
      }
    }
    label _end__freePrivatizedClass[623469]
    (623471 return _void[46])
  }
  { scopeless type
    void[4]
  }
  function _reprivatize[247811](arg value[247813]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    unknown ret[623477] "RVV" "temp"
    unknown call_tmp[892117] "maybe param" "maybe type" "temp"
    (892120 'move' call_tmp[892117](247820 call pid _mt[203] value[247813]))
    const pid[247818] "dead at end of block" "const" "insert auto destroy"
    (651010 'init var' pid[247818] call_tmp[892117])
    (247824 'end of statement')
    unknown call_tmp[892122] "expr temp" "maybe param" "maybe type" "temp"
    (892125 'move' call_tmp[892122](407553 call here[135591]))
    unknown call_tmp[892129] "maybe param" "maybe type" "temp"
    (892132 'move' call_tmp[892129](247828 call id _mt[203] call_tmp[892122]))
    const hereID[247826] "dead at end of block" "const" "insert auto destroy"
    (651012 'init var' hereID[247826] call_tmp[892129])
    (247832 'end of statement')
    unknown call_tmp[892136] "maybe param" "maybe type" "temp"
    (892139 'move' call_tmp[892136](247841 call(247838 call (partial) dsiGetReprivatizeData _mt[203] value[247813])))
    const reprivatizeData[247834] "dead at end of block" "const" "insert auto destroy"
    (651014 'init var' reprivatizeData[247834] call_tmp[892136])
    (247843 'end of statement')
    {
      unknown tmpIter[390690] "expr temp" "maybe ref" "no copy" "temp"
      (390693 'move' tmpIter[390690] Locales[309572])
      unknown isBounded[390874] "maybe param" "temp"
      (390880 'move' isBounded[390874](390876 call chpl_supportsBoundedCoforall tmpIter[390690] 0))
      if isBounded[390874]
      {
        const _coforallCount[390743] "const" "end count" "temp"
        (390811 'move' _coforallCount[390743](390808 call _endCountAlloc 1))
        unknown numTasks[390744] "temp"
        (390795 'move' numTasks[390744](390791 call chpl_boundedCoforallSize tmpIter[390690] 0))
        (390786 call _upEndCount _coforallCount[390743] 1 numTasks[390744])
        (563223 'end of statement')
        (390783 call chpl_resetTaskSpawn numTasks[390744])
        (563224 'end of statement')
        unknown _indexOfInterest[390751] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[390752] "expr temp" "temp"
        (390761 'move' _iterator[390752](390759 call _getIterator tmpIter[390690]))
        Defer
        {
          {
            (390776 call _freeIterator _iterator[390752])
          }
        }
        { scopeless type
          (390766 'move' _indexOfInterest[390751](390763 call iteratorIndex _iterator[390752]))
        }
        ForLoop[390753]
        {
          unknown loc[390697] "coforall index var" "index var" "insert auto destroy"
          (563226 'end of statement')
          (390771 'move' loc[390697] _indexOfInterest[390751])
          (563227 'end of statement' loc[390697])
          {
            {
              const tmp[390703] "const" "temp"
              unknown call_tmp[892141] "expr temp" "maybe param" "maybe type" "temp"
              (892144 'move' call_tmp[892141](390708 '_wide_get_locale' loc[390697]))
              (390705 'move' tmp[390703](390707 'deref' call_tmp[892141]))
              {
                unknown newValue[390712] "dead at end of block" "insert auto destroy"
                (651016 'init var' newValue[390712] value[247813])
                (390715 'end of statement')
                unknown call_tmp[892146] "expr temp" "maybe param" "maybe type" "temp"
                (892149 'move' call_tmp[892146](412878 call here[135591]))
                unknown call_tmp[892153] "expr temp" "maybe param" "maybe type" "temp"
                (892156 'move' call_tmp[892153](390722 call id _mt[203] call_tmp[892146]))
                unknown call_tmp[892158] "expr temp" "maybe param" "maybe type" "temp"
                (892161 'move' call_tmp[892158](390719 call != hereID[247826] call_tmp[892153]))
                unknown call_tmp[892163] "expr temp" "maybe param" "maybe type" "temp"
                (892166 'move' call_tmp[892163](390717 call _cond_test call_tmp[892158]))
                if call_tmp[892163]
                {
                  unknown call_tmp[892168] "expr temp" "maybe param" "maybe type" "temp" "type variable"
                  (892171 'move' call_tmp[892168](390731 'typeof' newValue[390712]))
                  unknown call_tmp[892173] "expr temp" "maybe param" "maybe type" "temp"
                  (892176 'move' call_tmp[892173](390730 call chpl_getPrivatizedCopy call_tmp[892168] pid[247818]))
                  (390727 call = newValue[390712] call_tmp[892173])
                  (563229 'end of statement' newValue[390712] pid[247818])
                  (390738 call(390735 call (partial) dsiReprivatize _mt[203] newValue[390712]) value[247813] reprivatizeData[247834])
                  (563232 'end of statement' newValue[390712] reprivatizeData[247834])
                }
              }
              (390700 'elided on block' 0 tmp[390703])
            }
            (390746 call _downEndCount _coforallCount[390743] nil[32])
            (390745 'coforall loop')
          }
          label _continueLabel[390756]
          _indexOfInterest[390751]
          _iterator[390752]
        }
        label _breakLabel[390757]
        Defer
        {
          {
            (390798 call _endCountFree _coforallCount[390743])
          }
        }
        (390803 call _waitEndCount _coforallCount[390743] 1 numTasks[390744])
      }
      {
        const _coforallCount[390815] "const" "end count" "temp"
        (390871 'move' _coforallCount[390815](390868 call _endCountAlloc 1))
        unknown _indexOfInterest[390823] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[390824] "expr temp" "temp"
        (390833 'move' _iterator[390824](390831 call _getIterator tmpIter[390690]))
        Defer
        {
          {
            (390848 call _freeIterator _iterator[390824])
          }
        }
        { scopeless type
          (390838 'move' _indexOfInterest[390823](390835 call iteratorIndex _iterator[390824]))
        }
        ForLoop[390825]
        {
          unknown loc[247844] "coforall index var" "index var" "insert auto destroy"
          (563239 'end of statement')
          (390843 'move' loc[247844] _indexOfInterest[390823])
          (563240 'end of statement' loc[247844])
          (390855 call _upEndCount _coforallCount[390815] 1)
          (563242 'end of statement')
          {
            {
              const tmp[247886] "const" "temp"
              unknown call_tmp[892180] "expr temp" "maybe param" "maybe type" "temp"
              (892183 'move' call_tmp[892180](247883 '_wide_get_locale' loc[247844]))
              (247887 'move' tmp[247886](247884 'deref' call_tmp[892180]))
              {
                unknown newValue[247850] "dead at end of block" "insert auto destroy"
                (651018 'init var' newValue[247850] value[247813])
                (247853 'end of statement')
                unknown call_tmp[892185] "expr temp" "maybe param" "maybe type" "temp"
                (892188 'move' call_tmp[892185](407557 call here[135591]))
                unknown call_tmp[892192] "expr temp" "maybe param" "maybe type" "temp"
                (892195 'move' call_tmp[892192](247876 call id _mt[203] call_tmp[892185]))
                unknown call_tmp[892197] "expr temp" "maybe param" "maybe type" "temp"
                (892200 'move' call_tmp[892197](247872 call != hereID[247826] call_tmp[892192]))
                unknown call_tmp[892202] "expr temp" "maybe param" "maybe type" "temp"
                (892205 'move' call_tmp[892202](247879 call _cond_test call_tmp[892197]))
                if call_tmp[892202]
                {
                  unknown call_tmp[892207] "expr temp" "maybe param" "maybe type" "temp" "type variable"
                  (892210 'move' call_tmp[892207](247861 'typeof' newValue[247850]))
                  unknown call_tmp[892212] "expr temp" "maybe param" "maybe type" "temp"
                  (892215 'move' call_tmp[892212](247859 call chpl_getPrivatizedCopy call_tmp[892207] pid[247818]))
                  (247855 call = newValue[247850] call_tmp[892212])
                  (563243 'end of statement' newValue[247850] pid[247818])
                  (247869 call(247866 call (partial) dsiReprivatize _mt[203] newValue[247850]) value[247813] reprivatizeData[247834])
                  (563246 'end of statement' newValue[247850] reprivatizeData[247834])
                }
              }
              (247890 'elided on block' 0 tmp[247886])
            }
            (390818 call _downEndCount _coforallCount[390815] nil[32])
            (390817 'coforall loop')
          }
          label _continueLabel[390828]
          _indexOfInterest[390823]
          _iterator[390824]
        }
        label _breakLabel[390829]
        Defer
        {
          {
            (390859 call _endCountFree _coforallCount[390815])
          }
        }
        (390864 call _waitEndCount _coforallCount[390815] 1)
      }
    }
    (623479 return ret[623477])
  }
  { scopeless type
    void[4]
  }
  function _makeIndexTuple[247898](param arg rank[247900]:_any[141](?), arg t[247903]:_tuple[246](?), param arg concept[247907]:string[244], param arg expand[247912]:bool[19] =
  0) : _unknown[42]
  {
    unknown ret[623483] "RVV" "temp"
    unknown call_tmp[892221] "expr temp" "maybe param" "maybe type" "temp"
    (892224 'move' call_tmp[892221](247934 call size _mt[203] t[247903]))
    unknown call_tmp[892226] "expr temp" "maybe param" "maybe type" "temp"
    (892229 'move' call_tmp[892226](247930 call == rank[247900] call_tmp[892221]))
    unknown call_tmp[892231] "expr temp" "maybe param" "maybe type" "temp"
    (892234 'move' call_tmp[892231](247937 call _cond_test call_tmp[892226]))
    if call_tmp[892231]
    {
      (623488 'move' ret[623483](623487 'deref' t[247903]))
      gotoReturn _end__makeIndexTuple[623481] _end__makeIndexTuple[623481]
    }
    {
      (247921 call compilerError "rank of the " concept[247907] " must match domain rank")
    }
    label _end__makeIndexTuple[623481]
    (623485 return ret[623483])
  }
  function _makeIndexTuple[247945](param arg rank[247947]:_any[141](?), arg val[247950]:integral[159](?), param arg concept[247954]:string[244], param arg expand[247959]:bool[19] =
  0) : _unknown[42]
  {
    unknown ret[623494] "RVV" "temp"
    unknown tmp[499551] "maybe param" "temp"
    (499562 'move' tmp[499551] expand[247959])
    unknown call_tmp[892236] "expr temp" "maybe param" "maybe type" "temp"
    (892239 'move' call_tmp[892236](499564 call _cond_invalid tmp[499551]))
    if call_tmp[892236]
    {
      (499567 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[698589] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[698590] "maybe param" "temp"
    unknown call_tmp[892241] "expr temp" "maybe param" "maybe type" "temp"
    (892244 'move' call_tmp[892241](499552 call isTrue tmp[499551]))
    (698595 'move' tmp[698590](698593 call _cond_test call_tmp[892241]))
    if tmp[698590]
    {
      (698600 'move' tmp[698589](698597 '_paramFoldLogical' tmp[698590] 1))
    }
    {
      unknown tmp[698602] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[892246] "expr temp" "maybe param" "maybe type" "temp"
      (892249 'move' call_tmp[892246](248050 call == rank[247947] 1))
      (698604 'move' tmp[698602](499556 call isTrue call_tmp[892246]))
      (698609 'move' tmp[698589](698606 '_paramFoldLogical' tmp[698590] tmp[698602]))
    }
    unknown call_tmp[892251] "expr temp" "maybe param" "maybe type" "temp"
    (892254 'move' call_tmp[892251](248054 call _cond_test tmp[698589]))
    if call_tmp[892251]
    {
      unknown t[247966] "dead at end of block" "insert auto destroy"
      unknown call_tmp[892256] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (892259 'move' call_tmp[892256](247971 'typeof' val[247950]))
      unknown call_tmp[892261] "expr temp" "maybe param" "maybe type" "temp"
      (892264 'move' call_tmp[892261](247967 call * rank[247947] call_tmp[892256]))
      (651020 'default init var' t[247966] call_tmp[892261])
      (247973 'end of statement')
      {
        unknown i[247974] "dead at end of block" "index var" "insert auto destroy"
        (651022 'init var' i[247974] 0)
        (563255 'end of statement')
        unknown tmp[247990] "maybe param" "temp"
        unknown call_tmp[892266] "expr temp" "maybe param" "maybe type" "temp"
        (892269 'move' call_tmp[892266](247977 call - rank[247947] 1))
        (248002 'move' tmp[247990](248000 call chpl_compute_low_param_loop_bound 0 call_tmp[892266]))
        unknown tmp[247991] "maybe param" "temp"
        unknown call_tmp[892271] "expr temp" "maybe param" "maybe type" "temp"
        (892274 'move' call_tmp[892271](248007 call - rank[247947] 1))
        (248012 'move' tmp[247991](248010 call chpl_compute_high_param_loop_bound 0 call_tmp[892271]))
        unknown tmp[247992] "maybe param" "temp"
        (248015 'move' tmp[247992] 1)
        ParamForLoop[248017]
        { i[247974] tmp[247990] tmp[247991] tmp[247992]
          unknown call_tmp[892276] "expr temp" "maybe param" "maybe type" "temp"
          (892279 'move' call_tmp[892276](247986 call t[247966] i[247974]))
          (247983 call = call_tmp[892276] val[247950])
          (563256 'end of statement' t[247966] i[247974])
        }
        label _unused_continueLabel[247994]
        label _breakLabel[247993]
      }
      (623499 'move' ret[623494](623498 'deref' t[247966]))
      gotoReturn _end__makeIndexTuple[623492] _end__makeIndexTuple[623492]
      (563259 'end of statement' t[247966])
    }
    {
      unknown call_tmp[892281] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (892284 'move' call_tmp[892281](248038 'typeof' val[247950]))
      unknown call_tmp[892286] "expr temp" "maybe param" "maybe type" "temp"
      (892289 'move' call_tmp[892286](248035 call : call_tmp[892281] string[244]))
      (248030 call compilerWarning concept[247954] " is of type " call_tmp[892286])
      (563261 'end of statement')
      (248041 call compilerError "rank of the " concept[247954] " must match domain rank")
      (563262 'end of statement')
      (623504 'move' ret[623494](623503 'deref' val[247950]))
      gotoReturn _end__makeIndexTuple[623492] _end__makeIndexTuple[623492]
    }
    label _end__makeIndexTuple[623492]
    (623496 return ret[623494])
  }
  function _makeIndexTuple[248060](param arg rank[248062]:_any[141](?), arg val[248064]:_any[141](?), param arg concept[248067]:string[244], param arg expand[248072]:bool[19] =
  0) : _unknown[42] "last resort" "no return value for void"
  {
    unknown call_tmp[892291] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (892294 'move' call_tmp[892291](248087 'typeof' val[248064]))
    unknown call_tmp[892296] "expr temp" "maybe param" "maybe type" "temp"
    (892299 'move' call_tmp[892296](248084 call : call_tmp[892291] string[244]))
    (248078 call compilerError "cannot use " concept[248067] " of type " call_tmp[892296])
    (623508 return _void[46])
  }
  function _newArray[248091](arg value[248093]:_any[141](?)) : _unknown[42] "no copy return"
  {
    unknown ret[623512] "RVV" "temp"
    unknown call_tmp[892301] "expr temp" "maybe param" "maybe type" "temp"
    (892304 'move' call_tmp[892301](248113 call _isPrivatized value[248093]))
    unknown call_tmp[892306] "expr temp" "maybe param" "maybe type" "temp"
    (892309 'move' call_tmp[892306](248115 call _cond_test call_tmp[892301]))
    if call_tmp[892306]
    {
      unknown call_tmp[892311] "expr temp" "maybe param" "maybe type" "temp"
      (892314 'move' call_tmp[892311](248101 call _newPrivatizedClass value[248093]))
      unknown call_tmp[892316] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (892319 'move' call_tmp[892316](1000427 'new' _array[255540](?) call_tmp[892311] value[248093]))
      (623517 'move' ret[623512](623516 'deref' call_tmp[892316]))
      gotoReturn _end__newArray[623510] _end__newArray[623510]
    }
    {
      unknown call_tmp[892321] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (892324 'move' call_tmp[892321](1000428 'new' _array[255540](?) nullPid[247489] value[248093]))
      (623522 'move' ret[623512](623521 'deref' call_tmp[892321]))
      gotoReturn _end__newArray[623510] _end__newArray[623510]
    }
    label _end__newArray[623510]
    (623514 return ret[623512])
  }
  function _getDistribution[248123](arg value[248125]:_any[141](?)) : _unknown[42]
  {
    unknown ret[623528] "RVV" "temp"
    unknown call_tmp[892326] "expr temp" "maybe param" "maybe type" "temp"
    (892329 'move' call_tmp[892326](248150 call _isPrivatized value[248125]))
    unknown call_tmp[892331] "expr temp" "maybe param" "maybe type" "temp"
    (892334 'move' call_tmp[892331](248152 call _cond_test call_tmp[892326]))
    if call_tmp[892331]
    {
      unknown call_tmp[892338] "expr temp" "maybe param" "maybe type" "temp"
      (892341 'move' call_tmp[892338](248133 call pid _mt[203] value[248125]))
      unknown call_tmp[892343] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (892346 'move' call_tmp[892343](1000429 'new' _distribution[268253](?) call_tmp[892338] value[248125](_unowned = 1)))
      (623533 'move' ret[623528](623532 'deref' call_tmp[892343]))
      gotoReturn _end__getDistribution[623526] _end__getDistribution[623526]
    }
    {
      unknown call_tmp[892348] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (892351 'move' call_tmp[892348](1000430 'new' _distribution[268253](?) nullPid[247489] value[248125](_unowned = 1)))
      (623538 'move' ret[623528](623537 'deref' call_tmp[892348]))
      gotoReturn _end__getDistribution[623526] _end__getDistribution[623526]
    }
    label _end__getDistribution[623526]
    (623530 return ret[623528])
  }
  function chpl__buildArrayRuntimeType[248160](arg dom[248163]:_domain[225034](?), arg eltType[248166]:_any[141](?)) type : _unknown[42] "runtime type init fn"
  {
    unknown ret[623544] "RVV" "temp" "type variable"
    unknown call_tmp[892355] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (892358 'move' call_tmp[892355](248174 call(248171 call (partial) buildArray _mt[203] dom[248163]) eltType[248166] 0))
    (623549 'move' ret[623544](623548 'deref' call_tmp[892355]))
    (623546 return ret[623544])
  }
  function chpl__convertRuntimeTypeToValue[248179](arg dom[248182]:_domain[225034](?), arg eltType[248185]:_any[141](?), param arg isNoInit[248188]:bool[19], arg definedConst[248192]:bool[19]) : _unknown[42] "no copy returns owned"
  {
    unknown ret[623553] "RVV" "temp"
    unknown call_tmp[892362] "expr temp" "maybe param" "maybe type" "temp"
    (892365 'move' call_tmp[892362](248203 call ! isNoInit[248188]))
    unknown call_tmp[892367] "expr temp" "maybe param" "maybe type" "temp"
    (892370 'move' call_tmp[892367](248201 call(248198 call (partial) buildArray _mt[203] dom[248182]) eltType[248185] call_tmp[892362]))
    (623558 'move' ret[623553](623557 'deref' call_tmp[892367]))
    (623555 return ret[623553])
  }
  function chpl__convertValueToRuntimeType[248208](arg arr[248213]:_array[255540](?)) type : _unknown[42]
  {
    unknown ret[623562] "RVV" "temp" "type variable"
    unknown call_tmp[892374] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (892377 'move' call_tmp[892374](248221 call _dom _mt[203] arr[248213]))
    unknown call_tmp[892381] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (892384 'move' call_tmp[892381](248225 call eltType _mt[203] arr[248213]))
    unknown call_tmp[892386] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (892389 'move' call_tmp[892386](248219 call chpl__buildArrayRuntimeType call_tmp[892374] call_tmp[892381]))
    (623567 'move' ret[623562](623566 'deref' call_tmp[892386]))
    (623564 return ret[623562])
  }
  unknown CHPL_WARN_DOMAIN_LITERAL[248231] "config" "param"
  unknown arrayLiteralLowBound[248236] "config" "param"
  unknown capturedIteratorLowBound[248241] "config" "param"
  function chpl__buildArrayExpr[248245](in arg elems[248249]:_any[141](?) ...) : _unknown[42] "ignore transfer errors"
  {
    unknown ret[623571] "RVV" "temp"
    unknown tmp[499572] "maybe param" "temp"
    (499583 'move' tmp[499572](248267 call == CHPL_WARN_DOMAIN_LITERAL[248231] "true"))
    unknown call_tmp[892391] "expr temp" "maybe param" "maybe type" "temp"
    (892394 'move' call_tmp[892391](499585 call _cond_invalid tmp[499572]))
    if call_tmp[892391]
    {
      (499588 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[698616] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[698617] "maybe param" "temp"
    unknown call_tmp[892396] "expr temp" "maybe param" "maybe type" "temp"
    (892399 'move' call_tmp[892396](499573 call isTrue tmp[499572]))
    (698622 'move' tmp[698617](698620 call _cond_test call_tmp[892396]))
    if tmp[698617]
    {
      unknown tmp[698624] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[892401] "expr temp" "maybe param" "maybe type" "temp"
      (892404 'move' call_tmp[892401](248274 call elems[248249] 0))
      unknown call_tmp[892406] "expr temp" "maybe param" "maybe type" "temp"
      (892409 'move' call_tmp[892406](248272 call isRange call_tmp[892401]))
      (698626 'move' tmp[698624](499576 call isTrue call_tmp[892406]))
      (698631 'move' tmp[698616](698628 '_paramFoldLogical' tmp[698617] tmp[698624]))
    }
    {
      (698636 'move' tmp[698616](698633 '_paramFoldLogical' tmp[698617] 0))
    }
    unknown call_tmp[892411] "expr temp" "maybe param" "maybe type" "temp"
    (892414 'move' call_tmp[892411](248276 call _cond_test tmp[698616]))
    if call_tmp[892411]
    {
      (248255 call compilerWarning "Encountered an array literal with range element(s)." " Did you mean a domain literal here\?" " If so, use {...} instead of [...].")
    }
    unknown call_tmp[892416] "maybe param" "maybe type" "temp"
    (892419 'move' call_tmp[892416](248283 call isHomogeneousTuple elems[248249]))
    unknown homog[248281] "dead at end of block" "param"
    (651030 'init var' homog[248281] call_tmp[892416])
    (248286 'end of statement')
    unknown eltType[248288] "dead at end of block" "insert auto destroy" "type variable"
    unknown tmp[698643] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[698644] "maybe param" "temp"
    (698649 'move' tmp[698644](698647 call _cond_test homog[248281]))
    if tmp[698644]
    {
      { scopeless type
        unknown call_type_tmp[651035] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[892421] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (892424 'move' call_tmp[892421](651041 call elems[248249] 0))
        (651037 'move' call_type_tmp[651035](651039 'typeof' call_tmp[892421]))
      }
      (698654 'move' tmp[698643](698651 '_paramFoldLogical' tmp[698644] call_type_tmp[651035]))
    }
    {
      unknown tmp[698656] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (698658 'move' tmp[698656](651046 call chpl_computeUnifiedType elems[248249]))
      (698663 'move' tmp[698643](698660 '_paramFoldLogical' tmp[698644] tmp[698656]))
    }
    (651049 'move' eltType[248288] tmp[698643])
    unknown call_tmp[892426] "expr temp" "maybe param" "maybe type" "temp"
    (892429 'move' call_tmp[892426](248307 call chpl_build_low_bounded_range arrayLiteralLowBound[248236]))
    unknown call_tmp[892431] "expr temp" "maybe param" "maybe type" "temp"
    (892434 'move' call_tmp[892431](248304 call # call_tmp[892426] k[248247]))
    unknown call_tmp[892436] "maybe param" "maybe type" "temp"
    (892439 'move' call_tmp[892436](248311 call chpl__buildDomainExpr call_tmp[892431] 0))
    unknown dom[248302] "dead at end of block" "insert auto destroy"
    (651051 'init var' dom[248302] call_tmp[892436])
    (248315 'end of statement')
    unknown call_tmp[892443] "maybe param" "maybe type" "temp"
    (892446 'move' call_tmp[892443](248322 call(248319 call (partial) buildArray _mt[203] dom[248302]) eltType[248288](initElts = 0)))
    unknown arr[248317] "dead at end of block" "insert auto destroy"
    (651053 'init var' arr[248317] call_tmp[892443])
    (248327 'end of statement' dom[248302] eltType[248288])
    unknown call_tmp[892448] "expr temp" "maybe param" "maybe type" "temp"
    (892451 'move' call_tmp[892448](248518 call _cond_test homog[248281]))
    if call_tmp[892448]
    {
      {
        unknown _indexOfInterest[248358] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[248359] "expr temp" "temp"
        unknown call_tmp[892453] "expr temp" "maybe param" "maybe type" "temp"
        (892456 'move' call_tmp[892453](248372 call chpl__nudgeHighBound k[248247]))
        unknown call_tmp[892458] "expr temp" "maybe param" "maybe type" "temp"
        (892461 'move' call_tmp[892458](248374 call chpl_direct_range_iter 0 call_tmp[892453]))
        (248368 'move' _iterator[248359](248366 call _getIterator call_tmp[892458]))
        Defer
        {
          {
            (248389 call _freeIterator _iterator[248359])
          }
        }
        { scopeless type
          (248379 'move' _indexOfInterest[248358](248376 call iteratorIndex _iterator[248359]))
        }
        ForLoop[248360]
        {
          unknown i[248329] "index var" "insert auto destroy"
          (563277 'end of statement')
          (248384 'move' i[248329] _indexOfInterest[248358])
          (563278 'end of statement' i[248329])
          {
            unknown dst[248339] "dead at end of block" "ref var"
            (651058 'init ref decl' dst[248339])
            unknown call_tmp[892463] "expr temp" "maybe param" "maybe type" "temp"
            (892466 'move' call_tmp[892463](248342 call + i[248329] arrayLiteralLowBound[248236]))
            unknown call_tmp[892468] "expr temp" "maybe param" "maybe type" "temp"
            (892471 'move' call_tmp[892468](248341 call arr[248317] call_tmp[892463]))
            (651056 'move' dst[248339](651055 'addr of' call_tmp[892468]))
            (248347 'end of statement')
            unknown src[248349] "dead at end of block" "ref var"
            (651063 'init ref decl' src[248349])
            unknown call_tmp[892473] "expr temp" "maybe param" "maybe type" "temp"
            (892476 'move' call_tmp[892473](248351 call elems[248249] i[248329]))
            (651061 'move' src[248349](651060 'addr of' call_tmp[892473]))
            (248354 'end of statement' arr[248317] i[248329])
            (248355 '=' dst[248339] src[248349])
            (563282 'end of statement' dst[248339] src[248349])
          }
          label _continueLabel[248363]
          _indexOfInterest[248358]
          _iterator[248359]
        }
        label _breakLabel[248364]
      }
    }
    {
      {
        unknown i[248397] "dead at end of block" "index var" "insert auto destroy"
        (651065 'init var' i[248397] 0)
        (563285 'end of statement')
        unknown tmp[248481] "maybe param" "temp"
        unknown call_tmp[892478] "expr temp" "maybe param" "maybe type" "temp"
        (892481 'move' call_tmp[892478](248400 call - k[248247] 1))
        (248493 'move' tmp[248481](248491 call chpl_compute_low_param_loop_bound 0 call_tmp[892478]))
        unknown tmp[248482] "maybe param" "temp"
        unknown call_tmp[892483] "expr temp" "maybe param" "maybe type" "temp"
        (892486 'move' call_tmp[892483](248498 call - k[248247] 1))
        (248503 'move' tmp[248482](248501 call chpl_compute_high_param_loop_bound 0 call_tmp[892483]))
        unknown tmp[248483] "maybe param" "temp"
        (248506 'move' tmp[248483] 1)
        ParamForLoop[248508]
        { i[248397] tmp[248481] tmp[248482] tmp[248483]
          {
            unknown dst[248408] "dead at end of block" "ref var"
            (651070 'init ref decl' dst[248408])
            unknown call_tmp[892488] "expr temp" "maybe param" "maybe type" "temp"
            (892491 'move' call_tmp[892488](248411 call + i[248397] arrayLiteralLowBound[248236]))
            unknown call_tmp[892493] "expr temp" "maybe param" "maybe type" "temp"
            (892496 'move' call_tmp[892493](248410 call arr[248317] call_tmp[892488]))
            (651068 'move' dst[248408](651067 'addr of' call_tmp[892493]))
            (248416 'end of statement')
            unknown src[248418] "dead at end of block" "ref var"
            (651075 'init ref decl' src[248418])
            unknown call_tmp[892498] "expr temp" "maybe param" "maybe type" "temp"
            (892501 'move' call_tmp[892498](248420 call elems[248249] i[248397]))
            (651073 'move' src[248418](651072 'addr of' call_tmp[892498]))
            (248423 'end of statement' arr[248317] i[248397])
            unknown currType[248425] "dead at end of block" "insert auto destroy" "type variable"
            (651079 'move' currType[248425](651077 'typeof' src[248418]))
            (563288 'end of statement' src[248418])
            unknown tmp[499593] "maybe param" "temp"
            (499604 'move' tmp[499593](248465 call == currType[248425] eltType[248288]))
            unknown call_tmp[892503] "expr temp" "maybe param" "maybe type" "temp"
            (892506 'move' call_tmp[892503](499606 call _cond_invalid tmp[499593]))
            if call_tmp[892503]
            {
              (499609 call compilerError "cannot promote short-circuiting || operator")
            }
            unknown tmp[698670] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[698671] "maybe param" "temp"
            unknown call_tmp[892508] "expr temp" "maybe param" "maybe type" "temp"
            (892511 'move' call_tmp[892508](499594 call isTrue tmp[499593]))
            (698676 'move' tmp[698671](698674 call _cond_test call_tmp[892508]))
            if tmp[698671]
            {
              (698681 'move' tmp[698670](698678 '_paramFoldLogical' tmp[698671] 1))
            }
            {
              unknown tmp[698683] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[892513] "expr temp" "maybe param" "maybe type" "temp"
              (892516 'move' call_tmp[892513](248473 call canResolve module=[222] Reflection[1804] "=" dst[248408] src[248418]))
              (698685 'move' tmp[698683](499598 call isTrue call_tmp[892513]))
              (698690 'move' tmp[698670](698687 '_paramFoldLogical' tmp[698671] tmp[698683]))
            }
            unknown call_tmp[892518] "expr temp" "maybe param" "maybe type" "temp"
            (892521 'move' call_tmp[892518](248477 call _cond_test tmp[698670]))
            if call_tmp[892518]
            {
              (248430 '=' dst[248408] src[248418])
              (563291 'end of statement' dst[248408] src[248418])
            }
            {
              unknown call_tmp[892523] "expr temp" "maybe param" "maybe type" "temp"
              (892526 'move' call_tmp[892523](248449 call : i[248397] string[244]))
              unknown call_tmp[892528] "expr temp" "maybe param" "maybe type" "temp"
              (892531 'move' call_tmp[892528](248444 call + "Array literal element " call_tmp[892523]))
              unknown call_tmp[892533] "expr temp" "maybe param" "maybe type" "temp"
              (892536 'move' call_tmp[892533](248442 call + call_tmp[892528] " expected to be of type "))
              unknown call_tmp[892538] "expr temp" "maybe param" "maybe type" "temp"
              (892541 'move' call_tmp[892538](248454 call : eltType[248288] string[244]))
              unknown call_tmp[892543] "expr temp" "maybe param" "maybe type" "temp"
              (892546 'move' call_tmp[892543](248440 call + call_tmp[892533] call_tmp[892538]))
              unknown call_tmp[892548] "expr temp" "maybe param" "maybe type" "temp"
              (892551 'move' call_tmp[892548](248438 call + call_tmp[892543] " but is of type "))
              unknown call_tmp[892553] "expr temp" "maybe param" "maybe type" "temp"
              (892556 'move' call_tmp[892553](248459 call : currType[248425] string[244]))
              unknown call_tmp[892558] "expr temp" "maybe param" "maybe type" "temp"
              (892561 'move' call_tmp[892558](248436 call + call_tmp[892548] call_tmp[892553]))
              (248435 call compilerError call_tmp[892558])
              (563294 'end of statement' i[248397] eltType[248288] currType[248425])
            }
            (407567 'referenced modules list' Reflection[1804])
          }
        }
        label _unused_continueLabel[248485]
        label _breakLabel[248484]
      }
    }
    (248526 call(248523 call (partial) dsiElementInitializationComplete _mt[203] arr[248317]))
    (563298 'end of statement' arr[248317])
    (623576 'move' ret[623571](623575 'deref' arr[248317]))
    gotoReturn _end_chpl__buildArrayExpr[623569] _end_chpl__buildArrayExpr[623569]
    (563300 'end of statement' arr[248317])
    label _end_chpl__buildArrayExpr[623569]
    (623573 return ret[623571])
  }
  function chpl_computeUnifiedType[248531](arg x[248534]:_tuple[246](?)) type : _unknown[42]
  {
    unknown ret[623582] "RVV" "temp" "type variable"
    unknown call_tmp[892565] "expr temp" "maybe param" "maybe type" "temp"
    (892568 'move' call_tmp[892565](248551 call isHomogeneousTuple x[248534]))
    unknown call_tmp[892570] "expr temp" "maybe param" "maybe type" "temp"
    (892573 'move' call_tmp[892570](248553 call _cond_test call_tmp[892565]))
    if call_tmp[892570]
    {
      { scopeless type
        unknown call_type_tmp[578553] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[892575] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (892578 'move' call_tmp[892575](248541 call x[248534] 0))
        (578557 'move' call_type_tmp[578553](248543 'typeof' call_tmp[892575]))
      }
      (623587 'move' ret[623582](623586 'deref' call_type_tmp[578553]))
      gotoReturn _end_chpl_computeUnifiedType[623580] _end_chpl_computeUnifiedType[623580]
    }
    {
      { scopeless type
        unknown call_type_tmp[578559] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[892580] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (892583 'move' call_tmp[892580](248547 call chpl_computeUnifiedTypeHelp x[248534]))
        (578563 'move' call_type_tmp[578559](248549 'typeof' call_tmp[892580]))
      }
      (623592 'move' ret[623582](623591 'deref' call_type_tmp[578559]))
      gotoReturn _end_chpl_computeUnifiedType[623580] _end_chpl_computeUnifiedType[623580]
    }
    label _end_chpl_computeUnifiedType[623580]
    (623584 return ret[623582])
  }
  function chpl_computeUnifiedTypeHelp[248559](arg x[248562]:_tuple[246](?), arg j[248567]:int(64)[10] =
  0) : _unknown[42] "compute unified type helper"
  {
    unknown ret[623598] "RVV" "temp"
    {
      unknown i[248572] "dead at end of block" "index var" "insert auto destroy"
      (651081 'init var' i[248572] 0)
      (563304 'end of statement')
      unknown tmp[248598] "maybe param" "temp"
      unknown call_tmp[892587] "expr temp" "maybe param" "maybe type" "temp"
      (892590 'move' call_tmp[892587](248576 call size _mt[203] x[248562]))
      unknown call_tmp[892592] "expr temp" "maybe param" "maybe type" "temp"
      (892595 'move' call_tmp[892592](248579 call chpl__nudgeHighBound call_tmp[892587]))
      (248610 'move' tmp[248598](248608 call chpl_compute_low_param_loop_bound 0 call_tmp[892592]))
      unknown tmp[248599] "maybe param" "temp"
      unknown call_tmp[892599] "expr temp" "maybe param" "maybe type" "temp"
      (892602 'move' call_tmp[892599](248617 call size _mt[203] x[248562]))
      unknown call_tmp[892604] "expr temp" "maybe param" "maybe type" "temp"
      (892607 'move' call_tmp[892604](248615 call chpl__nudgeHighBound call_tmp[892599]))
      (248622 'move' tmp[248599](248620 call chpl_compute_high_param_loop_bound 0 call_tmp[892604]))
      unknown tmp[248600] "maybe param" "temp"
      (248625 'move' tmp[248600] 1)
      ParamForLoop[248627]
      { i[248572] tmp[248598] tmp[248599] tmp[248600]
        {
          unknown call_tmp[892609] "expr temp" "maybe param" "maybe type" "temp"
          (892612 'move' call_tmp[892609](248589 call == i[248572] j[248567]))
          unknown call_tmp[892614] "expr temp" "maybe param" "maybe type" "temp"
          (892617 'move' call_tmp[892614](248593 call _cond_test call_tmp[892609]))
          if call_tmp[892614]
          {
            unknown call_tmp[892619] "expr temp" "maybe param" "maybe type" "temp"
            (892622 'move' call_tmp[892619](248586 call x[248562] i[248572]))
            (623603 'move' ret[623598](623602 'deref' call_tmp[892619]))
            gotoReturn _end_chpl_computeUnifiedTypeHelp[623596] _end_chpl_computeUnifiedTypeHelp[623596]
            (563305 'end of statement' i[248572])
          }
        }
      }
      label _unused_continueLabel[248602]
      label _breakLabel[248601]
    }
    (248637 call halt "Should never get here")
    label _end_chpl_computeUnifiedTypeHelp[623596]
    (623600 return ret[623598])
  }
  function chpl__buildAssociativeArrayExpr[248643](const arg elems[248647]:_any[141](?) ...) : _unknown[42]
  {
    unknown ret[623609] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[578565] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[892624] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (892627 'move' call_tmp[892624](248654 call elems[248647] 0))
      (578569 'move' call_type_tmp[578565](248656 'typeof' call_tmp[892624]))
    }
    unknown keyType[248652] "dead at end of block" "insert auto destroy" "type variable"
    (651084 'move' keyType[248652] call_type_tmp[578565])
    { scopeless type
      unknown call_type_tmp[578571] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[892629] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (892632 'move' call_tmp[892629](248661 call elems[248647] 1))
      (578575 'move' call_type_tmp[578571](248663 'typeof' call_tmp[892629]))
    }
    unknown valType[248659] "dead at end of block" "insert auto destroy" "type variable"
    (651087 'move' valType[248659] call_type_tmp[578571])
    unknown D[248666] "dead at end of block" "insert auto destroy"
    unknown call_tmp[892634] "expr temp" "maybe param" "maybe type" "temp"
    (892637 'move' call_tmp[892634](248668 call chpl__buildDomainRuntimeType defaultDist[288287] keyType[248652]))
    (651089 'default init var' D[248666] call_tmp[892634])
    (248672 'end of statement')
    unknown call_tmp[892641] "expr temp" "maybe param" "maybe type" "temp"
    (892644 'move' call_tmp[892641](248678 call / k[248645] 2))
    (248677 call(248674 call (partial) requestCapacity _mt[203] D[248666]) call_tmp[892641])
    (563309 'end of statement' D[248666])
    unknown A[248683] "dead at end of block" "insert auto destroy"
    unknown call_tmp[892646] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (892649 'move' call_tmp[892646](248685 call chpl__ensureDomainExpr D[248666]))
    unknown call_tmp[892651] "expr temp" "maybe param" "maybe type" "temp"
    (892654 'move' call_tmp[892651](248688 call chpl__buildArrayRuntimeType call_tmp[892646] valType[248659]))
    (651091 'default init var' A[248683] call_tmp[892651])
    (248691 'end of statement' keyType[248652] D[248666] valType[248659])
    {
      unknown i[248692] "dead at end of block" "index var" "insert auto destroy"
      (651093 'init var' i[248692] 0)
      (563313 'end of statement')
      unknown tmp[248824] "maybe param" "temp"
      unknown call_tmp[892656] "expr temp" "maybe param" "maybe type" "temp"
      (892659 'move' call_tmp[892656](248697 call - k[248645] 1))
      (248835 'move' tmp[248824](248833 call chpl_compute_low_param_loop_bound 0 call_tmp[892656]))
      unknown tmp[248825] "maybe param" "temp"
      unknown call_tmp[892661] "expr temp" "maybe param" "maybe type" "temp"
      (892664 'move' call_tmp[892661](248840 call - k[248645] 1))
      (248845 'move' tmp[248825](248843 call chpl_compute_high_param_loop_bound 0 call_tmp[892661]))
      unknown tmp[248826] "maybe param" "temp"
      (248848 'move' tmp[248826] 2)
      ParamForLoop[248850]
      { i[248692] tmp[248824] tmp[248825] tmp[248826]
        {
          unknown call_tmp[892666] "maybe param" "maybe type" "temp"
          (892669 'move' call_tmp[892666](248708 call elems[248647] i[248692]))
          unknown elemKey[248706] "dead at end of block" "insert auto destroy"
          (651095 'init var' elemKey[248706] call_tmp[892666])
          (248711 'end of statement')
          unknown call_tmp[892671] "expr temp" "maybe param" "maybe type" "temp"
          (892674 'move' call_tmp[892671](248716 call + i[248692] 1))
          unknown call_tmp[892676] "maybe param" "maybe type" "temp"
          (892679 'move' call_tmp[892676](248715 call elems[248647] call_tmp[892671]))
          unknown elemVal[248713] "dead at end of block" "insert auto destroy"
          (651097 'init var' elemVal[248713] call_tmp[892676])
          (248721 'end of statement' i[248692])
          unknown elemKeyType[248723] "dead at end of block" "insert auto destroy" "type variable"
          (651101 'move' elemKeyType[248723](651099 'typeof' elemKey[248706]))
          (563315 'end of statement' elemKey[248706])
          unknown elemValType[248728] "dead at end of block" "insert auto destroy" "type variable"
          (651105 'move' elemValType[248728](651103 'typeof' elemVal[248713]))
          (563317 'end of statement' elemVal[248713])
          unknown call_tmp[892681] "expr temp" "maybe param" "maybe type" "temp"
          (892684 'move' call_tmp[892681](248765 call != elemKeyType[248723] keyType[248652]))
          unknown call_tmp[892686] "expr temp" "maybe param" "maybe type" "temp"
          (892689 'move' call_tmp[892686](248769 call _cond_test call_tmp[892681]))
          if call_tmp[892686]
          {
            unknown call_tmp[892691] "expr temp" "maybe param" "maybe type" "temp"
            (892694 'move' call_tmp[892691](248750 call / i[248692] 2))
            unknown call_tmp[892696] "expr temp" "maybe param" "maybe type" "temp"
            (892699 'move' call_tmp[892696](248748 call : call_tmp[892691] string[244]))
            unknown call_tmp[892701] "expr temp" "maybe param" "maybe type" "temp"
            (892704 'move' call_tmp[892701](248743 call + "Associative array key element " call_tmp[892696]))
            unknown call_tmp[892706] "expr temp" "maybe param" "maybe type" "temp"
            (892709 'move' call_tmp[892706](248741 call + call_tmp[892701] " expected to be of type "))
            unknown call_tmp[892711] "expr temp" "maybe param" "maybe type" "temp"
            (892714 'move' call_tmp[892711](248756 call : keyType[248652] string[244]))
            unknown call_tmp[892716] "expr temp" "maybe param" "maybe type" "temp"
            (892719 'move' call_tmp[892716](248739 call + call_tmp[892706] call_tmp[892711]))
            unknown call_tmp[892721] "expr temp" "maybe param" "maybe type" "temp"
            (892724 'move' call_tmp[892721](248737 call + call_tmp[892716] " but is of type "))
            unknown call_tmp[892726] "expr temp" "maybe param" "maybe type" "temp"
            (892729 'move' call_tmp[892726](248761 call : elemKeyType[248723] string[244]))
            unknown call_tmp[892731] "expr temp" "maybe param" "maybe type" "temp"
            (892734 'move' call_tmp[892731](248735 call + call_tmp[892721] call_tmp[892726]))
            (248734 call compilerError call_tmp[892731])
            (563319 'end of statement' i[248692] keyType[248652] elemKeyType[248723])
          }
          unknown call_tmp[892736] "expr temp" "maybe param" "maybe type" "temp"
          (892739 'move' call_tmp[892736](248806 call != elemValType[248728] valType[248659]))
          unknown call_tmp[892741] "expr temp" "maybe param" "maybe type" "temp"
          (892744 'move' call_tmp[892741](248810 call _cond_test call_tmp[892736]))
          if call_tmp[892741]
          {
            unknown call_tmp[892746] "expr temp" "maybe param" "maybe type" "temp"
            (892749 'move' call_tmp[892746](248791 call / i[248692] 2))
            unknown call_tmp[892751] "expr temp" "maybe param" "maybe type" "temp"
            (892754 'move' call_tmp[892751](248789 call : call_tmp[892746] string[244]))
            unknown call_tmp[892756] "expr temp" "maybe param" "maybe type" "temp"
            (892759 'move' call_tmp[892756](248784 call + "Associative array value element " call_tmp[892751]))
            unknown call_tmp[892761] "expr temp" "maybe param" "maybe type" "temp"
            (892764 'move' call_tmp[892761](248782 call + call_tmp[892756] " expected to be of type "))
            unknown call_tmp[892766] "expr temp" "maybe param" "maybe type" "temp"
            (892769 'move' call_tmp[892766](248797 call : valType[248659] string[244]))
            unknown call_tmp[892771] "expr temp" "maybe param" "maybe type" "temp"
            (892774 'move' call_tmp[892771](248780 call + call_tmp[892761] call_tmp[892766]))
            unknown call_tmp[892776] "expr temp" "maybe param" "maybe type" "temp"
            (892779 'move' call_tmp[892776](248778 call + call_tmp[892771] " but is of type "))
            unknown call_tmp[892781] "expr temp" "maybe param" "maybe type" "temp"
            (892784 'move' call_tmp[892781](248802 call : elemValType[248728] string[244]))
            unknown call_tmp[892786] "expr temp" "maybe param" "maybe type" "temp"
            (892789 'move' call_tmp[892786](248776 call + call_tmp[892776] call_tmp[892781]))
            (248775 call compilerError call_tmp[892786])
            (563323 'end of statement' i[248692] valType[248659] elemValType[248728])
          }
          (248814 call += D[248666] elemKey[248706])
          (563327 'end of statement' D[248666] elemKey[248706])
          unknown call_tmp[892791] "expr temp" "maybe param" "maybe type" "temp"
          (892794 'move' call_tmp[892791](248821 call A[248683] elemKey[248706]))
          (248818 call = call_tmp[892791] elemVal[248713])
          (563330 'end of statement' A[248683] elemKey[248706] elemVal[248713])
        }
      }
      label _unused_continueLabel[248828]
      label _breakLabel[248827]
    }
    (623614 'move' ret[623609](623613 'deref' A[248683]))
    gotoReturn _end_chpl__buildAssociativeArrayExpr[623607] _end_chpl__buildAssociativeArrayExpr[623607]
    (563334 'end of statement' A[248683])
    label _end_chpl__buildAssociativeArrayExpr[623607]
    (623611 return ret[623609])
  }
  function chpl_incRefCountsForDomainsInArrayEltTypes[248863](arg arr[248867]:unmanaged BaseArr[468148], arg eltType[248870]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    unknown call_tmp[892796] "expr temp" "maybe param" "maybe type" "temp"
    (892799 'move' call_tmp[892796](248917 call isArrayType eltType[248870]))
    unknown call_tmp[892801] "expr temp" "maybe param" "maybe type" "temp"
    (892804 'move' call_tmp[892801](248919 call _cond_test call_tmp[892796]))
    if call_tmp[892801]
    {
      unknown call_tmp[892808] "expr temp" "maybe param" "maybe type" "temp"
      (892811 'move' call_tmp[892808](248879 call _decEltRefCounts _mt[203] arr[248867]))
      (248874 call = call_tmp[892808] 1)
      (563336 'end of statement')
      unknown arrayEltType[248884] "dead at end of block" "insert auto destroy" "type variable"
      (651110 'move' arrayEltType[248884](651108 call chpl__eltTypeFromArrayRuntimeType eltType[248870]))
      const dom[248890] "dead at end of block" "const" "ref var"
      (651115 'init ref decl' dom[248890])
      unknown call_tmp[892813] "expr temp" "maybe param" "maybe type" "temp"
      (892816 'move' call_tmp[892813](248892 call chpl__domainFromArrayRuntimeType eltType[248870]))
      (651113 'move' dom[248890](651112 'addr of' call_tmp[892813]))
      (248895 'end of statement')
      unknown call_tmp[892820] "maybe param" "maybe type" "temp"
      (892823 'move' call_tmp[892820](248899 call _instance _mt[203] dom[248890]))
      const dv[248897] "dead at end of block" "const" "insert auto destroy"
      (651117 'init var' dv[248897] call_tmp[892820])
      (248903 'end of statement' dom[248890])
      (248910 call(248907 call (partial) add_containing_arr _mt[203] dv[248897]) arr[248867])
      (563338 'end of statement' dv[248897])
      (248913 call chpl_incRefCountsForDomainsInArrayEltTypes arr[248867] arrayEltType[248884])
      (563340 'end of statement' arrayEltType[248884])
    }
    (623618 return _void[46])
  }
  function chpl_decRefCountsForDomainsInArrayEltTypes[248925](arg arr[248929]:unmanaged BaseArr[468148], arg eltType[248932]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    unknown call_tmp[892827] "expr temp" "maybe param" "maybe type" "temp"
    (892830 'move' call_tmp[892827](249104 call isArrayType eltType[248932]))
    unknown call_tmp[892832] "expr temp" "maybe param" "maybe type" "temp"
    (892835 'move' call_tmp[892832](249106 call _cond_test call_tmp[892827]))
    if call_tmp[892832]
    {
      unknown call_tmp[892839] "expr temp" "maybe param" "maybe type" "temp"
      (892842 'move' call_tmp[892839](248945 call _decEltRefCounts _mt[203] arr[248929]))
      unknown call_tmp[892844] "expr temp" "maybe param" "maybe type" "temp"
      (892847 'move' call_tmp[892844](248942 call == call_tmp[892839] 0))
      unknown call_tmp[892849] "expr temp" "maybe param" "maybe type" "temp"
      (892852 'move' call_tmp[892849](248949 call _cond_test call_tmp[892844]))
      if call_tmp[892849]
      {
        (248937 call halt "Decrementing array's elements' ref counts without having incremented first!")
      }
      unknown arrayEltType[248955] "dead at end of block" "insert auto destroy" "type variable"
      (651122 'move' arrayEltType[248955](651120 call chpl__eltTypeFromArrayRuntimeType eltType[248932]))
      const dom[248961] "dead at end of block" "const" "ref var"
      (651127 'init ref decl' dom[248961])
      unknown call_tmp[892854] "expr temp" "maybe param" "maybe type" "temp"
      (892857 'move' call_tmp[892854](248963 call chpl__domainFromArrayRuntimeType eltType[248932]))
      (651125 'move' dom[248961](651124 'addr of' call_tmp[892854]))
      (248966 'end of statement')
      (248968 call chpl_decRefCountsForDomainsInArrayEltTypes arr[248929] arrayEltType[248955])
      (563343 'end of statement' arrayEltType[248955])
      unknown call_tmp[892861] "expr temp" "maybe param" "maybe type" "temp"
      (892864 'move' call_tmp[892861](248974 call _instance _mt[203] dom[248961]))
      unknown call_tmp[892868] "maybe param" "maybe type" "temp"
      (892871 'move' call_tmp[892868](248982 call(248979 call (partial) remove_containing_arr _mt[203] call_tmp[892861]) arr[248929]))
      unknown removeDom[248972] "dead at end of block" "insert auto destroy"
      (651129 'init var' removeDom[248972] call_tmp[892868])
      (248985 'end of statement' dom[248961])
      unknown call_tmp[892873] "expr temp" "maybe param" "maybe type" "temp"
      (892876 'move' call_tmp[892873](249099 call _cond_test removeDom[248972]))
      if call_tmp[892873]
      {
        {
          const tmp[249090] "const" "temp"
          unknown call_tmp[892880] "expr temp" "maybe param" "maybe type" "temp"
          (892883 'move' call_tmp[892880](248988 call _instance _mt[203] dom[248961]))
          unknown call_tmp[892885] "expr temp" "maybe param" "maybe type" "temp"
          (892888 'move' call_tmp[892885](249087 '_wide_get_locale' call_tmp[892880]))
          (249091 'move' tmp[249090](249088 'deref' call_tmp[892885]))
          {
            unknown call_tmp[892892] "maybe param" "maybe type" "temp"
            (892895 'move' call_tmp[892892](248995 call _instance _mt[203] dom[248961]))
            const inst[248993] "dead at end of block" "const" "insert auto destroy"
            (651131 'init var' inst[248993] call_tmp[892892])
            (248999 'end of statement')
            unknown call_tmp[892899] "maybe param" "maybe type" "temp"
            (892902 'move' call_tmp[892899](249009 call(249006 call (partial) remove _mt[203] inst[248993])))
            unknown tmp[249010] "dead at end of block" "insert auto destroy" "temp"
            (651133 'init var' tmp[249010] call_tmp[892899])
            (249017 call _check_tuple_var_decl tmp[249010] 2)
            (563347 'end of statement')
            unknown call_tmp[892904] "maybe param" "maybe type" "temp"
            (892907 'move' call_tmp[892904](249011 call tmp[249010] 0))
            unknown domToFree[249001] "dead at end of block" "insert auto destroy"
            (651135 'init var' domToFree[249001] call_tmp[892904])
            unknown call_tmp[892909] "maybe param" "maybe type" "temp"
            (892912 'move' call_tmp[892909](249014 call tmp[249010] 1))
            unknown distToRemove[249003] "dead at end of block" "insert auto destroy"
            (651137 'init var' distToRemove[249003] call_tmp[892909])
            (249022 'end of statement')
            unknown distToFree[249024] "dead at end of block" "insert auto destroy"
            (651139 'init var' distToFree[249024] nil[32] unmanaged BaseDist?[468142])
            (249030 'end of statement' dom[248961])
            unknown call_tmp[892914] "expr temp" "maybe param" "maybe type" "temp"
            (892917 'move' call_tmp[892914](249042 call != distToRemove[249003] nil[32]))
            unknown call_tmp[892919] "expr temp" "maybe param" "maybe type" "temp"
            (892922 'move' call_tmp[892919](249046 call _cond_test call_tmp[892914]))
            if call_tmp[892919]
            {
              unknown call_tmp[892924] "expr temp" "maybe param" "maybe type" "temp"
              (892927 'move' call_tmp[892924](249035 call postfix! distToRemove[249003]))
              unknown call_tmp[892931] "expr temp" "maybe param" "maybe type" "temp"
              (892934 'move' call_tmp[892931](249041 call(249038 call (partial) remove _mt[203] call_tmp[892924])))
              (249032 call = distToFree[249024] call_tmp[892931])
              (563348 'end of statement' distToFree[249024] distToRemove[249003])
            }
            unknown call_tmp[892936] "expr temp" "maybe param" "maybe type" "temp"
            (892939 'move' call_tmp[892936](249057 call != domToFree[249001] nil[32]))
            unknown call_tmp[892941] "expr temp" "maybe param" "maybe type" "temp"
            (892944 'move' call_tmp[892941](249061 call _cond_test call_tmp[892936]))
            if call_tmp[892941]
            {
              unknown call_tmp[892946] "expr temp" "maybe param" "maybe type" "temp"
              (892949 'move' call_tmp[892946](249054 call _isPrivatized inst[248993]))
              (249051 call _delete_dom inst[248993] call_tmp[892946])
              (563351 'end of statement' inst[248993])
            }
            unknown call_tmp[892951] "expr temp" "maybe param" "maybe type" "temp"
            (892954 'move' call_tmp[892951](249078 call != distToFree[249024] nil[32]))
            unknown call_tmp[892956] "expr temp" "maybe param" "maybe type" "temp"
            (892959 'move' call_tmp[892956](249082 call _cond_test call_tmp[892951]))
            if call_tmp[892956]
            {
              unknown call_tmp[892961] "expr temp" "maybe param" "maybe type" "temp"
              (892964 'move' call_tmp[892961](249068 call postfix! distToFree[249024]))
              unknown call_tmp[892968] "expr temp" "maybe param" "maybe type" "temp"
              (892971 'move' call_tmp[892968](249074 call dist _mt[203] inst[248993]))
              unknown call_tmp[892973] "expr temp" "maybe param" "maybe type" "temp"
              (892976 'move' call_tmp[892973](249072 call _isPrivatized call_tmp[892968]))
              (249067 call _delete_dist call_tmp[892961] call_tmp[892973])
              (563353 'end of statement' distToFree[249024] inst[248993])
            }
          }
          (249094 'elided on block' 0 tmp[249090])
        }
      }
    }
    (623620 return _void[46])
  }
  function chpl__distributed[249112](arg d[249114]:_any[141](?), arg dom[249117]:_domain[225034](?), arg definedConst[249121]:bool[19]) : _unknown[42]
  {
    unknown ret[623624] "RVV" "temp"
    unknown call_tmp[892978] "expr temp" "maybe param" "maybe type" "temp"
    (892981 'move' call_tmp[892978](249268 call _cond_test definedConst[249121]))
    if call_tmp[892978]
    {
      unknown call_tmp[892985] "expr temp" "maybe param" "maybe type" "temp"
      (892988 'move' call_tmp[892985](249191 call(249188 call (partial) isRectangular _mt[203] dom[249117])))
      unknown call_tmp[892990] "expr temp" "maybe param" "maybe type" "temp"
      (892993 'move' call_tmp[892990](249192 call _cond_test call_tmp[892985]))
      if call_tmp[892990]
      {
        unknown call_tmp[892999] "expr temp" "maybe param" "maybe type" "temp"
        (893002 'move' call_tmp[892999](249138 call rank _mt[203] dom[249117]))
        unknown call_tmp[893006] "expr temp" "maybe param" "maybe type" "temp"
        (893009 'move' call_tmp[893006](249142 call _value _mt[203] dom[249117]))
        unknown call_tmp[893013] "expr temp" "maybe param" "maybe type" "temp"
        (893016 'move' call_tmp[893013](249145 call idxType _mt[203] call_tmp[893006]))
        unknown call_tmp[893020] "expr temp" "maybe param" "maybe type" "temp"
        (893023 'move' call_tmp[893020](249149 call _value _mt[203] dom[249117]))
        unknown call_tmp[893027] "expr temp" "maybe param" "maybe type" "temp"
        (893030 'move' call_tmp[893027](249152 call strides _mt[203] call_tmp[893020]))
        unknown call_tmp[893034] "expr temp" "maybe param" "maybe type" "temp"
        (893037 'move' call_tmp[893034](249159 call(249156 call (partial) dims _mt[203] dom[249117])))
        unknown call_tmp[893039] "expr temp" "maybe param" "maybe type" "temp"
        (893042 'move' call_tmp[893039](249136 call(249133 call (partial) newRectangularDom _mt[203] d[249114]) call_tmp[892999] call_tmp[893013] call_tmp[893027] call_tmp[893034] definedConst[249121]))
        unknown call_tmp[893044] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (893047 'move' call_tmp[893044](1000431 'new' _domain[225034](?) call_tmp[893039]))
        const distDom[249128] "dead at end of block" "const" "insert auto destroy"
        (651141 'init var' distDom[249128] call_tmp[893044])
        (249162 'end of statement')
        (623629 'move' ret[623624](623628 'deref' distDom[249128]))
        gotoReturn _end_chpl__distributed[623622] _end_chpl__distributed[623622]
        (563356 'end of statement' distDom[249128])
      }
      {
        unknown call_tmp[893051] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (893054 'move' call_tmp[893051](249175 call _value _mt[203] dom[249117]))
        unknown call_tmp[893058] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (893061 'move' call_tmp[893058](249178 call idxType _mt[203] call_tmp[893051]))
        unknown call_tmp[893063] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (893066 'move' call_tmp[893063](249172 call chpl__buildDomainRuntimeType defaultDist[288287] call_tmp[893058]))
        unknown call_tmp[893068] "maybe param" "maybe type" "temp"
        (893071 'move' call_tmp[893068](249168 call chpl__distributed d[249114] call_tmp[893063] 1))
        const distDom[249167] "dead at end of block" "const" "insert auto destroy"
        (651143 'init var' distDom[249167] dom[249117] call_tmp[893068])
        (249184 'end of statement')
        (623634 'move' ret[623624](623633 'deref' distDom[249167]))
        gotoReturn _end_chpl__distributed[623622] _end_chpl__distributed[623622]
        (563358 'end of statement' distDom[249167])
      }
    }
    {
      unknown call_tmp[893075] "expr temp" "maybe param" "maybe type" "temp"
      (893078 'move' call_tmp[893075](249262 call(249259 call (partial) isRectangular _mt[203] dom[249117])))
      unknown call_tmp[893080] "expr temp" "maybe param" "maybe type" "temp"
      (893083 'move' call_tmp[893080](249263 call _cond_test call_tmp[893075]))
      if call_tmp[893080]
      {
        unknown call_tmp[893089] "expr temp" "maybe param" "maybe type" "temp"
        (893092 'move' call_tmp[893089](249209 call rank _mt[203] dom[249117]))
        unknown call_tmp[893096] "expr temp" "maybe param" "maybe type" "temp"
        (893099 'move' call_tmp[893096](249213 call _value _mt[203] dom[249117]))
        unknown call_tmp[893103] "expr temp" "maybe param" "maybe type" "temp"
        (893106 'move' call_tmp[893103](249216 call idxType _mt[203] call_tmp[893096]))
        unknown call_tmp[893110] "expr temp" "maybe param" "maybe type" "temp"
        (893113 'move' call_tmp[893110](249220 call _value _mt[203] dom[249117]))
        unknown call_tmp[893117] "expr temp" "maybe param" "maybe type" "temp"
        (893120 'move' call_tmp[893117](249223 call strides _mt[203] call_tmp[893110]))
        unknown call_tmp[893124] "expr temp" "maybe param" "maybe type" "temp"
        (893127 'move' call_tmp[893124](249230 call(249227 call (partial) dims _mt[203] dom[249117])))
        unknown call_tmp[893129] "expr temp" "maybe param" "maybe type" "temp"
        (893132 'move' call_tmp[893129](249207 call(249204 call (partial) newRectangularDom _mt[203] d[249114]) call_tmp[893089] call_tmp[893103] call_tmp[893117] call_tmp[893124] definedConst[249121]))
        unknown call_tmp[893134] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (893137 'move' call_tmp[893134](1000432 'new' _domain[225034](?) call_tmp[893129]))
        unknown distDom[249199] "dead at end of block" "insert auto destroy"
        (651145 'init var' distDom[249199] call_tmp[893134])
        (249233 'end of statement')
        (623639 'move' ret[623624](623638 'deref' distDom[249199]))
        gotoReturn _end_chpl__distributed[623622] _end_chpl__distributed[623622]
        (563360 'end of statement' distDom[249199])
      }
      {
        unknown call_tmp[893141] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (893144 'move' call_tmp[893141](249246 call _value _mt[203] dom[249117]))
        unknown call_tmp[893148] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (893151 'move' call_tmp[893148](249249 call idxType _mt[203] call_tmp[893141]))
        unknown call_tmp[893153] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (893156 'move' call_tmp[893153](249243 call chpl__buildDomainRuntimeType defaultDist[288287] call_tmp[893148]))
        unknown call_tmp[893158] "maybe param" "maybe type" "temp"
        (893161 'move' call_tmp[893158](249239 call chpl__distributed d[249114] call_tmp[893153] 1))
        unknown distDom[249238] "dead at end of block" "insert auto destroy"
        (651147 'init var' distDom[249238] dom[249117] call_tmp[893158])
        (249255 'end of statement')
        (623644 'move' ret[623624](623643 'deref' distDom[249238]))
        gotoReturn _end_chpl__distributed[623622] _end_chpl__distributed[623622]
        (563362 'end of statement' distDom[249238])
      }
    }
    label _end_chpl__distributed[623622]
    (623626 return ret[623624])
  }
  function chpl__distributed[249274](arg d[249276]:_any[141](?), arg expr[249278]:_any[141](?), arg definedConst[249281]:bool[19]) : _unknown[42] "last resort" "no return value for void"
  {
    (249286 call compilerError "'dmapped' can currently only be applied to domains.")
    (623648 return _void[46])
  }
  function chpl__isArrayView[249292](arg arr[249294]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[623652] "RVV" "param" "temp"
    const value[249298] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[698697] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[698698] "maybe param" "temp"
    unknown call_tmp[893163] "expr temp" "maybe param" "maybe type" "temp"
    (893166 'move' call_tmp[893163](249300 call isArray arr[249294]))
    (698703 'move' tmp[698698](698701 call _cond_test call_tmp[893163]))
    if tmp[698698]
    {
      unknown tmp[698705] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (698707 'move' tmp[698705](249303 call _value _mt[203] arr[249294]))
      (698712 'move' tmp[698697](698709 '_paramFoldLogical' tmp[698698] tmp[698705]))
    }
    {
      (698717 'move' tmp[698697](698714 '_paramFoldLogical' tmp[698698] arr[249294]))
    }
    (651149 'init var' value[249298] tmp[698697])
    (249311 'end of statement')
    unknown call_tmp[893172] "maybe param" "maybe type" "temp"
    (893175 'move' call_tmp[893172](249318 call(249315 call (partial) isSliceArrayView _mt[203] value[249298])))
    unknown isSlice[249313] "dead at end of block" "param"
    (651151 'init var' isSlice[249313] call_tmp[893172])
    (249320 'end of statement')
    unknown call_tmp[893179] "maybe param" "maybe type" "temp"
    (893182 'move' call_tmp[893179](249327 call(249324 call (partial) isRankChangeArrayView _mt[203] value[249298])))
    unknown isRankChange[249322] "dead at end of block" "param"
    (651153 'init var' isRankChange[249322] call_tmp[893179])
    (249329 'end of statement')
    unknown call_tmp[893186] "maybe param" "maybe type" "temp"
    (893189 'move' call_tmp[893186](249336 call(249333 call (partial) isReindexArrayView _mt[203] value[249298])))
    unknown isReindex[249331] "dead at end of block" "param"
    (651155 'init var' isReindex[249331] call_tmp[893186])
    (249338 'end of statement' value[249298])
    unknown tmp[499614] "maybe param" "temp"
    unknown tmp[499635] "maybe param" "temp"
    (499646 'move' tmp[499635] isSlice[249313])
    unknown call_tmp[893191] "expr temp" "maybe param" "maybe type" "temp"
    (893194 'move' call_tmp[893191](499648 call _cond_invalid tmp[499635]))
    if call_tmp[893191]
    {
      (499651 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[698724] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[698725] "maybe param" "temp"
    unknown call_tmp[893196] "expr temp" "maybe param" "maybe type" "temp"
    (893199 'move' call_tmp[893196](499636 call isTrue tmp[499635]))
    (698730 'move' tmp[698725](698728 call _cond_test call_tmp[893196]))
    if tmp[698725]
    {
      (698735 'move' tmp[698724](698732 '_paramFoldLogical' tmp[698725] 1))
    }
    {
      unknown tmp[698737] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (698739 'move' tmp[698737](499640 call isTrue isRankChange[249322]))
      (698744 'move' tmp[698724](698741 '_paramFoldLogical' tmp[698725] tmp[698737]))
    }
    (499625 'move' tmp[499614] tmp[698724])
    unknown call_tmp[893201] "expr temp" "maybe param" "maybe type" "temp"
    (893204 'move' call_tmp[893201](499627 call _cond_invalid tmp[499614]))
    if call_tmp[893201]
    {
      (499630 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[698751] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[698752] "maybe param" "temp"
    unknown call_tmp[893206] "expr temp" "maybe param" "maybe type" "temp"
    (893209 'move' call_tmp[893206](499615 call isTrue tmp[499614]))
    (698757 'move' tmp[698752](698755 call _cond_test call_tmp[893206]))
    if tmp[698752]
    {
      (698762 'move' tmp[698751](698759 '_paramFoldLogical' tmp[698752] 1))
    }
    {
      unknown tmp[698764] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (698766 'move' tmp[698764](499619 call isTrue isReindex[249331]))
      (698771 'move' tmp[698751](698768 '_paramFoldLogical' tmp[698752] tmp[698764]))
    }
    (623657 'move' ret[623652](623656 'deref' tmp[698751]))
    (623654 return ret[623652])
  }
  function chpl__getActualArray[249349](arg arr[249351]:_any[141](?)) : _unknown[42]
  {
    unknown ret[623661] "RVV" "temp"
    unknown value[249355] "dead at end of block" "insert auto destroy"
    unknown tmp[698778] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[698779] "maybe param" "temp"
    unknown call_tmp[893211] "expr temp" "maybe param" "maybe type" "temp"
    (893214 'move' call_tmp[893211](249357 call isArray arr[249351]))
    (698784 'move' tmp[698779](698782 call _cond_test call_tmp[893211]))
    if tmp[698779]
    {
      unknown tmp[698786] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (698788 'move' tmp[698786](249360 call _value _mt[203] arr[249351]))
      (698793 'move' tmp[698778](698790 '_paramFoldLogical' tmp[698779] tmp[698786]))
    }
    {
      (698798 'move' tmp[698778](698795 '_paramFoldLogical' tmp[698779] arr[249351]))
    }
    (651157 'init var' value[249355] tmp[698778])
    (249368 'end of statement')
    unknown ret[249370] "dead at end of block" "insert auto destroy"
    unknown tmp[698805] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[698806] "maybe param" "temp"
    unknown call_tmp[893218] "expr temp" "maybe param" "maybe type" "temp"
    (893221 'move' call_tmp[893218](249372 call chpl__isArrayView value[249355]))
    (698811 'move' tmp[698806](698809 call _cond_test call_tmp[893218]))
    if tmp[698806]
    {
      unknown tmp[698813] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (698815 'move' tmp[698813](249378 call(249375 call (partial) _getActualArray _mt[203] value[249355])))
      (698820 'move' tmp[698805](698817 '_paramFoldLogical' tmp[698806] tmp[698813]))
    }
    {
      (698825 'move' tmp[698805](698822 '_paramFoldLogical' tmp[698806] value[249355]))
    }
    (651159 'init var' ret[249370] tmp[698805])
    (249384 'end of statement' value[249355])
    (623666 'move' ret[623661](623665 'deref' ret[249370]))
    gotoReturn _end_chpl__getActualArray[623659] _end_chpl__getActualArray[623659]
    (563370 'end of statement' ret[249370])
    label _end_chpl__getActualArray[623659]
    (623663 return ret[623661])
  }
  function chpl__isDROrDRView[249389](arg arg[249391]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[623672] "RVV" "param" "temp"
    unknown tmp[499761] "maybe param" "temp"
    (499772 'move' tmp[499761](249506 call isDomain arg[249391]))
    unknown call_tmp[893225] "expr temp" "maybe param" "maybe type" "temp"
    (893228 'move' call_tmp[893225](499774 call _cond_invalid tmp[499761]))
    if call_tmp[893225]
    {
      (499777 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[698832] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[698833] "maybe param" "temp"
    unknown call_tmp[893230] "expr temp" "maybe param" "maybe type" "temp"
    (893233 'move' call_tmp[893230](499762 call isTrue tmp[499761]))
    (698838 'move' tmp[698833](698836 call _cond_test call_tmp[893230]))
    if tmp[698833]
    {
      (698843 'move' tmp[698832](698840 '_paramFoldLogical' tmp[698833] 1))
    }
    {
      unknown tmp[698845] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[893235] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (893238 'move' call_tmp[893235](249511 'typeof' arg[249391]))
      unknown call_tmp[893240] "expr temp" "maybe param" "maybe type" "temp"
      (893243 'move' call_tmp[893240](395511 'is_subtype' BaseDom[424169](?) call_tmp[893235]))
      (698847 'move' tmp[698845](499766 call isTrue call_tmp[893240]))
      (698852 'move' tmp[698832](698849 '_paramFoldLogical' tmp[698833] tmp[698845]))
    }
    unknown call_tmp[893245] "expr temp" "maybe param" "maybe type" "temp"
    (893248 'move' call_tmp[893245](249513 call _cond_test tmp[698832]))
    if call_tmp[893245]
    {
      const value[249396] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[698859] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[698860] "maybe param" "temp"
      unknown call_tmp[893250] "expr temp" "maybe param" "maybe type" "temp"
      (893253 'move' call_tmp[893250](249398 call isDomain arg[249391]))
      (698865 'move' tmp[698860](698863 call _cond_test call_tmp[893250]))
      if tmp[698860]
      {
        unknown tmp[698867] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (698869 'move' tmp[698867](249401 call _value _mt[203] arg[249391]))
        (698874 'move' tmp[698859](698871 '_paramFoldLogical' tmp[698860] tmp[698867]))
      }
      {
        (698879 'move' tmp[698859](698876 '_paramFoldLogical' tmp[698860] arg[249391]))
      }
      (651161 'init var' value[249396] tmp[698859])
      (249409 'end of statement')
      unknown call_tmp[893259] "maybe param" "maybe type" "temp"
      (893262 'move' call_tmp[893259](249416 call(249413 call (partial) isDefaultRectangular _mt[203] value[249396])))
      unknown isDR[249411] "dead at end of block" "param"
      (651163 'init var' isDR[249411] call_tmp[893259])
      (249418 'end of statement')
      unknown tmp[499656] "maybe param" "temp"
      (499667 'move' tmp[499656](249424 call chpl__isDomainView value[249396]))
      unknown call_tmp[893264] "expr temp" "maybe param" "maybe type" "temp"
      (893267 'move' call_tmp[893264](499669 call _cond_invalid tmp[499656]))
      if call_tmp[893264]
      {
        (499672 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown isDRView[249420] "dead at end of block" "param"
      unknown tmp[698886] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[698887] "maybe param" "temp"
      unknown call_tmp[893269] "expr temp" "maybe param" "maybe type" "temp"
      (893272 'move' call_tmp[893269](499657 call isTrue tmp[499656]))
      (698892 'move' tmp[698887](698890 call _cond_test call_tmp[893269]))
      if tmp[698887]
      {
        unknown tmp[698894] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[893274] "expr temp" "maybe param" "maybe type" "temp"
        (893277 'move' call_tmp[893274](249427 call chpl__getActualDomain value[249396]))
        unknown call_tmp[893281] "expr temp" "maybe param" "maybe type" "temp"
        (893284 'move' call_tmp[893281](249432 call(249429 call (partial) isDefaultRectangular _mt[203] call_tmp[893274])))
        (698896 'move' tmp[698894](499660 call isTrue call_tmp[893281]))
        (698901 'move' tmp[698886](698898 '_paramFoldLogical' tmp[698887] tmp[698894]))
      }
      {
        (698906 'move' tmp[698886](698903 '_paramFoldLogical' tmp[698887] 0))
      }
      (651165 'init var' isDRView[249420] tmp[698886])
      (249434 'end of statement' value[249396])
      unknown tmp[499677] "maybe param" "temp"
      (499688 'move' tmp[499677] isDR[249411])
      unknown call_tmp[893286] "expr temp" "maybe param" "maybe type" "temp"
      (893289 'move' call_tmp[893286](499690 call _cond_invalid tmp[499677]))
      if call_tmp[893286]
      {
        (499693 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[698913] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[698914] "maybe param" "temp"
      unknown call_tmp[893291] "expr temp" "maybe param" "maybe type" "temp"
      (893294 'move' call_tmp[893291](499678 call isTrue tmp[499677]))
      (698919 'move' tmp[698914](698917 call _cond_test call_tmp[893291]))
      if tmp[698914]
      {
        (698924 'move' tmp[698913](698921 '_paramFoldLogical' tmp[698914] 1))
      }
      {
        unknown tmp[698926] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (698928 'move' tmp[698926](499682 call isTrue isDRView[249420]))
        (698933 'move' tmp[698913](698930 '_paramFoldLogical' tmp[698914] tmp[698926]))
      }
      (623677 'move' ret[623672](623676 'deref' tmp[698913]))
      gotoReturn _end_chpl__isDROrDRView[623670] _end_chpl__isDROrDRView[623670]
    }
    {
      unknown tmp[499740] "maybe param" "temp"
      (499751 'move' tmp[499740](249492 call isArray arg[249391]))
      unknown call_tmp[893296] "expr temp" "maybe param" "maybe type" "temp"
      (893299 'move' call_tmp[893296](499753 call _cond_invalid tmp[499740]))
      if call_tmp[893296]
      {
        (499756 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[698940] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[698941] "maybe param" "temp"
      unknown call_tmp[893301] "expr temp" "maybe param" "maybe type" "temp"
      (893304 'move' call_tmp[893301](499741 call isTrue tmp[499740]))
      (698946 'move' tmp[698941](698944 call _cond_test call_tmp[893301]))
      if tmp[698941]
      {
        (698951 'move' tmp[698940](698948 '_paramFoldLogical' tmp[698941] 1))
      }
      {
        unknown tmp[698953] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[893306] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (893309 'move' call_tmp[893306](249497 'typeof' arg[249391]))
        unknown call_tmp[893311] "expr temp" "maybe param" "maybe type" "temp"
        (893314 'move' call_tmp[893311](395512 'is_subtype' BaseArr[424790](?) call_tmp[893306]))
        (698955 'move' tmp[698953](499745 call isTrue call_tmp[893311]))
        (698960 'move' tmp[698940](698957 '_paramFoldLogical' tmp[698941] tmp[698953]))
      }
      unknown call_tmp[893316] "expr temp" "maybe param" "maybe type" "temp"
      (893319 'move' call_tmp[893316](249499 call _cond_test tmp[698940]))
      if call_tmp[893316]
      {
        const value[249442] "dead at end of block" "const" "insert auto destroy"
        unknown tmp[698967] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[698968] "maybe param" "temp"
        unknown call_tmp[893321] "expr temp" "maybe param" "maybe type" "temp"
        (893324 'move' call_tmp[893321](249444 call isArray arg[249391]))
        (698973 'move' tmp[698968](698971 call _cond_test call_tmp[893321]))
        if tmp[698968]
        {
          unknown tmp[698975] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (698977 'move' tmp[698975](249447 call _value _mt[203] arg[249391]))
          (698982 'move' tmp[698967](698979 '_paramFoldLogical' tmp[698968] tmp[698975]))
        }
        {
          (698987 'move' tmp[698967](698984 '_paramFoldLogical' tmp[698968] arg[249391]))
        }
        (651167 'init var' value[249442] tmp[698967])
        (249455 'end of statement')
        unknown call_tmp[893330] "maybe param" "maybe type" "temp"
        (893333 'move' call_tmp[893330](249462 call(249459 call (partial) isDefaultRectangular _mt[203] value[249442])))
        unknown isDR[249457] "dead at end of block" "param"
        (651169 'init var' isDR[249457] call_tmp[893330])
        (249464 'end of statement')
        unknown tmp[499698] "maybe param" "temp"
        (499709 'move' tmp[499698](249470 call chpl__isArrayView value[249442]))
        unknown call_tmp[893335] "expr temp" "maybe param" "maybe type" "temp"
        (893338 'move' call_tmp[893335](499711 call _cond_invalid tmp[499698]))
        if call_tmp[893335]
        {
          (499714 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown isDRView[249466] "dead at end of block" "param"
        unknown tmp[698994] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[698995] "maybe param" "temp"
        unknown call_tmp[893340] "expr temp" "maybe param" "maybe type" "temp"
        (893343 'move' call_tmp[893340](499699 call isTrue tmp[499698]))
        (699000 'move' tmp[698995](698998 call _cond_test call_tmp[893340]))
        if tmp[698995]
        {
          unknown tmp[699002] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[893345] "expr temp" "maybe param" "maybe type" "temp"
          (893348 'move' call_tmp[893345](249473 call chpl__getActualArray value[249442]))
          unknown call_tmp[893352] "expr temp" "maybe param" "maybe type" "temp"
          (893355 'move' call_tmp[893352](249478 call(249475 call (partial) isDefaultRectangular _mt[203] call_tmp[893345])))
          (699004 'move' tmp[699002](499702 call isTrue call_tmp[893352]))
          (699009 'move' tmp[698994](699006 '_paramFoldLogical' tmp[698995] tmp[699002]))
        }
        {
          (699014 'move' tmp[698994](699011 '_paramFoldLogical' tmp[698995] 0))
        }
        (651171 'init var' isDRView[249466] tmp[698994])
        (249480 'end of statement' value[249442])
        unknown tmp[499719] "maybe param" "temp"
        (499730 'move' tmp[499719] isDR[249457])
        unknown call_tmp[893357] "expr temp" "maybe param" "maybe type" "temp"
        (893360 'move' call_tmp[893357](499732 call _cond_invalid tmp[499719]))
        if call_tmp[893357]
        {
          (499735 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[699021] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[699022] "maybe param" "temp"
        unknown call_tmp[893362] "expr temp" "maybe param" "maybe type" "temp"
        (893365 'move' call_tmp[893362](499720 call isTrue tmp[499719]))
        (699027 'move' tmp[699022](699025 call _cond_test call_tmp[893362]))
        if tmp[699022]
        {
          (699032 'move' tmp[699021](699029 '_paramFoldLogical' tmp[699022] 1))
        }
        {
          unknown tmp[699034] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (699036 'move' tmp[699034](499724 call isTrue isDRView[249466]))
          (699041 'move' tmp[699021](699038 '_paramFoldLogical' tmp[699022] tmp[699034]))
        }
        (623682 'move' ret[623672](623681 'deref' tmp[699021]))
        gotoReturn _end_chpl__isDROrDRView[623670] _end_chpl__isDROrDRView[623670]
      }
      {
        (623687 'move' ret[623672](623686 'deref' 0))
        gotoReturn _end_chpl__isDROrDRView[623670] _end_chpl__isDROrDRView[623670]
      }
    }
    label _end_chpl__isDROrDRView[623670]
    (623674 return ret[623672])
  }
  function chpl__isDomainView[249520](arg dom[249522]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[623693] "RVV" "param" "temp"
    const value[249526] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[699048] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[699049] "maybe param" "temp"
    unknown call_tmp[893367] "expr temp" "maybe param" "maybe type" "temp"
    (893370 'move' call_tmp[893367](249528 call isDomain dom[249522]))
    (699054 'move' tmp[699049](699052 call _cond_test call_tmp[893367]))
    if tmp[699049]
    {
      unknown tmp[699056] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (699058 'move' tmp[699056](249531 call _value _mt[203] dom[249522]))
      (699063 'move' tmp[699048](699060 '_paramFoldLogical' tmp[699049] tmp[699056]))
    }
    {
      (699068 'move' tmp[699048](699065 '_paramFoldLogical' tmp[699049] dom[249522]))
    }
    (651173 'init var' value[249526] tmp[699048])
    (249539 'end of statement')
    unknown call_tmp[893376] "maybe param" "maybe type" "temp"
    (893379 'move' call_tmp[893376](249548 call(249545 call (partial) isSliceDomainView _mt[203] value[249526])))
    unknown isSlice[249541] "dead at end of block" "param"
    (651175 'init var' isSlice[249541] call_tmp[893376])
    (249550 'end of statement')
    unknown call_tmp[893383] "maybe param" "maybe type" "temp"
    (893386 'move' call_tmp[893383](249559 call(249556 call (partial) isRankChangeDomainView _mt[203] value[249526])))
    unknown isRankChange[249552] "dead at end of block" "param"
    (651177 'init var' isRankChange[249552] call_tmp[893383])
    (249561 'end of statement')
    unknown call_tmp[893390] "maybe param" "maybe type" "temp"
    (893393 'move' call_tmp[893390](249570 call(249567 call (partial) isReindexDomainView _mt[203] value[249526])))
    unknown isReindex[249563] "dead at end of block" "param"
    (651179 'init var' isReindex[249563] call_tmp[893390])
    (249572 'end of statement' value[249526])
    unknown tmp[499782] "maybe param" "temp"
    unknown tmp[499803] "maybe param" "temp"
    (499814 'move' tmp[499803] isSlice[249541])
    unknown call_tmp[893395] "expr temp" "maybe param" "maybe type" "temp"
    (893398 'move' call_tmp[893395](499816 call _cond_invalid tmp[499803]))
    if call_tmp[893395]
    {
      (499819 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[699075] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[699076] "maybe param" "temp"
    unknown call_tmp[893400] "expr temp" "maybe param" "maybe type" "temp"
    (893403 'move' call_tmp[893400](499804 call isTrue tmp[499803]))
    (699081 'move' tmp[699076](699079 call _cond_test call_tmp[893400]))
    if tmp[699076]
    {
      (699086 'move' tmp[699075](699083 '_paramFoldLogical' tmp[699076] 1))
    }
    {
      unknown tmp[699088] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (699090 'move' tmp[699088](499808 call isTrue isRankChange[249552]))
      (699095 'move' tmp[699075](699092 '_paramFoldLogical' tmp[699076] tmp[699088]))
    }
    (499793 'move' tmp[499782] tmp[699075])
    unknown call_tmp[893405] "expr temp" "maybe param" "maybe type" "temp"
    (893408 'move' call_tmp[893405](499795 call _cond_invalid tmp[499782]))
    if call_tmp[893405]
    {
      (499798 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[699102] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[699103] "maybe param" "temp"
    unknown call_tmp[893410] "expr temp" "maybe param" "maybe type" "temp"
    (893413 'move' call_tmp[893410](499783 call isTrue tmp[499782]))
    (699108 'move' tmp[699103](699106 call _cond_test call_tmp[893410]))
    if tmp[699103]
    {
      (699113 'move' tmp[699102](699110 '_paramFoldLogical' tmp[699103] 1))
    }
    {
      unknown tmp[699115] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (699117 'move' tmp[699115](499787 call isTrue isReindex[249563]))
      (699122 'move' tmp[699102](699119 '_paramFoldLogical' tmp[699103] tmp[699115]))
    }
    (623698 'move' ret[623693](623697 'deref' tmp[699102]))
    (623695 return ret[623693])
  }
  function chpl__getActualDomain[249583](arg dom[249585]:_any[141](?)) : _unknown[42]
  {
    unknown ret[623702] "RVV" "temp"
    unknown value[249589] "dead at end of block" "insert auto destroy"
    unknown tmp[699129] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[699130] "maybe param" "temp"
    unknown call_tmp[893415] "expr temp" "maybe param" "maybe type" "temp"
    (893418 'move' call_tmp[893415](249591 call isDomain dom[249585]))
    (699135 'move' tmp[699130](699133 call _cond_test call_tmp[893415]))
    if tmp[699130]
    {
      unknown tmp[699137] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (699139 'move' tmp[699137](249594 call _value _mt[203] dom[249585]))
      (699144 'move' tmp[699129](699141 '_paramFoldLogical' tmp[699130] tmp[699137]))
    }
    {
      (699149 'move' tmp[699129](699146 '_paramFoldLogical' tmp[699130] dom[249585]))
    }
    (651181 'init var' value[249589] tmp[699129])
    (249602 'end of statement')
    unknown ret[249604] "dead at end of block" "insert auto destroy"
    unknown tmp[699156] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[699157] "maybe param" "temp"
    unknown call_tmp[893422] "expr temp" "maybe param" "maybe type" "temp"
    (893425 'move' call_tmp[893422](249606 call chpl__isDomainView value[249589]))
    (699162 'move' tmp[699157](699160 call _cond_test call_tmp[893422]))
    if tmp[699157]
    {
      unknown tmp[699164] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (699166 'move' tmp[699164](249612 call(249609 call (partial) _getActualDomain _mt[203] value[249589])))
      (699171 'move' tmp[699156](699168 '_paramFoldLogical' tmp[699157] tmp[699164]))
    }
    {
      (699176 'move' tmp[699156](699173 '_paramFoldLogical' tmp[699157] value[249589]))
    }
    (651183 'init var' ret[249604] tmp[699156])
    (249618 'end of statement' value[249589])
    (623707 'move' ret[623702](623706 'deref' ret[249604]))
    gotoReturn _end_chpl__getActualDomain[623700] _end_chpl__getActualDomain[623700]
    (563388 'end of statement' ret[249604])
    label _end_chpl__getActualDomain[623700]
    (623704 return ret[623702])
  }
  function chpl__distributed[249623](arg d[249625]:_any[141](?), arg domainType[249627]:_any[141](?), arg definedConst[249630]:bool[19]) type : _unknown[42]
  {
    unknown ret[623713] "RVV" "temp" "type variable"
    unknown call_tmp[893429] "expr temp" "maybe param" "maybe type" "temp"
    (893432 'move' call_tmp[893429](249647 call isDomainType domainType[249627]))
    unknown call_tmp[893434] "expr temp" "maybe param" "maybe type" "temp"
    (893437 'move' call_tmp[893434](249644 call ! call_tmp[893429]))
    unknown call_tmp[893439] "expr temp" "maybe param" "maybe type" "temp"
    (893442 'move' call_tmp[893439](249649 call _cond_test call_tmp[893434]))
    if call_tmp[893439]
    {
      unknown call_tmp[893444] "expr temp" "maybe param" "maybe type" "temp"
      (893447 'move' call_tmp[893444](249639 call : domainType[249627] string[244]))
      (249635 call compilerError "cannot apply 'dmapped' to the non-domain type " call_tmp[893444])
    }
    unknown call_tmp[893449] "expr temp" "maybe param" "maybe type" "temp"
    (893452 'move' call_tmp[893449](249730 call chpl__isRectangularDomType domainType[249627]))
    unknown call_tmp[893454] "expr temp" "maybe param" "maybe type" "temp"
    (893457 'move' call_tmp[893454](249732 call _cond_test call_tmp[893449]))
    if call_tmp[893454]
    {
      unknown dom[249656] "dead at end of block" "insert auto destroy"
      (651185 'default init var' dom[249656] domainType[249627])
      (249659 'end of statement')
      unknown call_tmp[893461] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (893464 'move' call_tmp[893461](249665 call _value _mt[203] dom[249656]))
      unknown call_tmp[893468] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (893471 'move' call_tmp[893468](249668 call rank _mt[203] call_tmp[893461]))
      unknown call_tmp[893475] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (893478 'move' call_tmp[893475](249672 call _value _mt[203] dom[249656]))
      unknown call_tmp[893482] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (893485 'move' call_tmp[893482](249675 call idxType _mt[203] call_tmp[893475]))
      unknown call_tmp[893489] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (893492 'move' call_tmp[893489](249679 call _value _mt[203] dom[249656]))
      unknown call_tmp[893496] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (893499 'move' call_tmp[893496](249682 call strides _mt[203] call_tmp[893489]))
      unknown call_tmp[893501] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (893504 'move' call_tmp[893501](249662 call chpl__buildDomainRuntimeType d[249625] call_tmp[893468] call_tmp[893482] call_tmp[893496]))
      (623718 'move' ret[623713](623717 'deref' call_tmp[893501]))
      gotoReturn _end_chpl__distributed[623711] _end_chpl__distributed[623711]
      (563391 'end of statement' dom[249656])
    }
    {
      unknown call_tmp[893506] "expr temp" "maybe param" "maybe type" "temp"
      (893509 'move' call_tmp[893506](249723 call chpl__isSparseDomType domainType[249627]))
      unknown call_tmp[893511] "expr temp" "maybe param" "maybe type" "temp"
      (893514 'move' call_tmp[893511](249725 call _cond_test call_tmp[893506]))
      if call_tmp[893511]
      {
        const parentDom[249687] "dead at end of block" "const" "ref var"
        (651190 'init ref decl' parentDom[249687])
        unknown call_tmp[893516] "expr temp" "maybe param" "maybe type" "temp"
        (893519 'move' call_tmp[893516](249689 call chpl__parentDomainFromDomainRuntimeType domainType[249627]))
        (651188 'move' parentDom[249687](651187 'addr of' call_tmp[893516]))
        (249692 'end of statement')
        unknown call_tmp[893521] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (893524 'move' call_tmp[893521](249695 call chpl__buildSparseDomainRuntimeType d[249625] parentDom[249687]))
        (623723 'move' ret[623713](623722 'deref' call_tmp[893521]))
        gotoReturn _end_chpl__distributed[623711] _end_chpl__distributed[623711]
        (563393 'end of statement' parentDom[249687])
      }
      {
        unknown dom[249700] "dead at end of block" "insert auto destroy"
        (651192 'default init var' dom[249700] domainType[249627])
        (249703 'end of statement')
        unknown call_tmp[893528] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (893531 'move' call_tmp[893528](249709 call _value _mt[203] dom[249700]))
        unknown call_tmp[893535] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (893538 'move' call_tmp[893535](249712 call idxType _mt[203] call_tmp[893528]))
        unknown call_tmp[893542] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (893545 'move' call_tmp[893542](249716 call _value _mt[203] dom[249700]))
        unknown call_tmp[893549] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (893552 'move' call_tmp[893549](249719 call parSafe _mt[203] call_tmp[893542]))
        unknown call_tmp[893554] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (893557 'move' call_tmp[893554](249706 call chpl__buildDomainRuntimeType d[249625] call_tmp[893535] call_tmp[893549]))
        (623728 'move' ret[623713](623727 'deref' call_tmp[893554]))
        gotoReturn _end_chpl__distributed[623711] _end_chpl__distributed[623711]
        (563395 'end of statement' dom[249700])
      }
    }
    label _end_chpl__distributed[623711]
    (623715 return ret[623713])
  }
  function chpl__distributionFromDomainRuntimeType[249739](arg rtt[249741]:_any[141](?)) : _unknown[42] "return not owned"
  {
    unknown ret[623734] "RVV" "temp"
    unknown call_tmp[893559] "maybe param" "maybe type" "temp"
    (893562 'move' call_tmp[893559](249746 'get runtime type field' rtt[249741] "dist"))
    unknown dist[249745] "dead at end of block" "no auto destroy" "no copy"
    (651194 'init var' dist[249745] call_tmp[893559])
    (249752 'end of statement')
    unknown call_tmp[893566] "expr temp" "maybe param" "maybe type" "temp"
    (893569 'move' call_tmp[893566](249757 call _value _mt[203] dist[249745]))
    unknown call_tmp[893571] "expr temp" "maybe param" "maybe type" "temp"
    (893574 'move' call_tmp[893571](249755 call _getDistribution call_tmp[893566]))
    (623739 'move' ret[623734](623738 'deref' call_tmp[893571]))
    gotoReturn _end_chpl__distributionFromDomainRuntimeType[623732] _end_chpl__distributionFromDomainRuntimeType[623732]
    (563397 'end of statement' dist[249745])
    label _end_chpl__distributionFromDomainRuntimeType[623732]
    (623736 return ret[623734])
  }
  function chpl__eltTypeFromArrayRuntimeType[249762](arg rtt[249764]:_any[141](?)) type : _unknown[42]
  {
    unknown ret[623745] "RVV" "temp" "type variable"
    unknown eltType[249768] "dead at end of block" "no auto destroy" "no copy" "type variable"
    (651199 'move' eltType[249768](651196 'get runtime type field' rtt[249764] "eltType"))
    (563399 'end of statement')
    (623750 'move' ret[623745](623749 'deref' eltType[249768]))
    gotoReturn _end_chpl__eltTypeFromArrayRuntimeType[623743] _end_chpl__eltTypeFromArrayRuntimeType[623743]
    (563400 'end of statement' eltType[249768])
    label _end_chpl__eltTypeFromArrayRuntimeType[623743]
    (623747 return ret[623745])
  }
  function chpl__instanceTypeFromArrayRuntimeType[249777](arg rtt[249779]:_any[141](?)) type : _unknown[42] "ignore runtime type"
  {
    unknown ret[623756] "RVV" "temp" "type variable"
    (249782 'chpl_warning' "chpl__instanceTypeFromArrayRuntimeType should not be run")
    (563402 'end of statement')
    unknown call_tmp[893576] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (893579 'move' call_tmp[893576](249787 'static field type' rtt[249779] "_instance"))
    (623761 'move' ret[623756](623760 'deref' call_tmp[893576]))
    (623758 return ret[623756])
  }
  function chpl__instanceTypeFromDomainRuntimeType[249792](arg rtt[249794]:_any[141](?)) type : _unknown[42] "ignore runtime type"
  {
    unknown ret[623765] "RVV" "temp" "type variable"
    (249797 'chpl_warning' "chpl__instanceTypeFromArrayRuntimeType should not be run")
    (563404 'end of statement')
    unknown call_tmp[893581] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (893584 'move' call_tmp[893581](249800 'static field type' rtt[249794] "_instance"))
    (623770 'move' ret[623765](623769 'deref' call_tmp[893581]))
    (623767 return ret[623765])
  }
  function chpl__buildIndexType[249805](param arg rank[249808]:int(64)[10], arg idxType[249811]:_any[141](?)) type : _unknown[42]
  {
    unknown ret[623774] "RVV" "temp" "type variable"
    (623779 'move' ret[623774](623778 'deref' idxType[249811]))
    (623776 return ret[623774])
  }
  where {
    (249813 call == rank[249808] 1)
  }
  function chpl__buildIndexType[249823](param arg rank[249826]:int(64)[10], arg idxType[249829]:_any[141](?)) type : _unknown[42]
  {
    unknown ret[623783] "RVV" "temp" "type variable"
    unknown call_tmp[893586] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (893589 'move' call_tmp[893586](249837 call * rank[249826] idxType[249829]))
    (623788 'move' ret[623783](623787 'deref' call_tmp[893586]))
    (623785 return ret[623783])
  }
  where {
    (249831 call > rank[249826] 1)
  }
  function chpl__buildIndexType[249844](param arg rank[249847]:int(64)[10]) type : _unknown[42]
  {
    unknown ret[623792] "RVV" "temp" "type variable"
    unknown call_tmp[893591] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (893594 'move' call_tmp[893591](249853 call chpl__buildIndexType rank[249847] int(64)[10]))
    (623797 'move' ret[623792](623796 'deref' call_tmp[893591]))
    (623794 return ret[623792])
  }
  function chpl__buildIndexType[249858](arg d[249861]:_domain[225034](?)) type : _unknown[42]
  {
    unknown ret[623801] "RVV" "temp" "type variable"
    unknown call_tmp[893598] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (893601 'move' call_tmp[893598](249869 call rank _mt[203] d[249861]))
    unknown call_tmp[893605] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (893608 'move' call_tmp[893605](249873 call _value _mt[203] d[249861]))
    unknown call_tmp[893612] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (893615 'move' call_tmp[893612](249876 call idxType _mt[203] call_tmp[893605]))
    unknown call_tmp[893617] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (893620 'move' call_tmp[893617](249867 call chpl__buildIndexType call_tmp[893598] call_tmp[893612]))
    (623806 'move' ret[623801](623805 'deref' call_tmp[893617]))
    (623803 return ret[623801])
  }
  function chpl__checkRetEltTypeMatch[249881](arg a[249886]:_array[255540](?), arg b[249889]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    unknown call_tmp[893624] "expr temp" "maybe param" "maybe type" "temp"
    (893627 'move' call_tmp[893624](249913 call eltType _mt[203] a[249886]))
    unknown call_tmp[893629] "expr temp" "maybe param" "maybe type" "temp"
    (893632 'move' call_tmp[893629](249910 call != call_tmp[893624] b[249889]))
    unknown call_tmp[893634] "expr temp" "maybe param" "maybe type" "temp"
    (893637 'move' call_tmp[893634](249917 call _cond_test call_tmp[893629]))
    if call_tmp[893634]
    {
      unknown call_tmp[893641] "expr temp" "maybe param" "maybe type" "temp"
      (893644 'move' call_tmp[893641](249901 call eltType _mt[203] a[249886]))
      unknown call_tmp[893646] "expr temp" "maybe param" "maybe type" "temp"
      (893649 'move' call_tmp[893646](249898 call : call_tmp[893641] string[244]))
      unknown call_tmp[893651] "expr temp" "maybe param" "maybe type" "temp"
      (893654 'move' call_tmp[893651](249906 call : b[249889] string[244]))
      (249894 call compilerError "array element type mismatch in return from " call_tmp[893646] " to " call_tmp[893651])
    }
    (623808 return _void[46])
  }
  function chpl__checkRetEltTypeMatch[249923](arg a[249926]:_iteratorRecord[165](?), arg b[249929]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    unknown eltType[249933] "dead at end of block" "insert auto destroy" "type variable"
    unknown call_tmp[893656] "expr temp" "maybe param" "used in type" "maybe type" "temp" "type variable"
    (893659 'move' call_tmp[893656](651203 'typeof' a[249926]))
    (651205 'move' eltType[249933](651202 call iteratorToArrayElementType call_tmp[893656]))
    (563411 'end of statement')
    unknown call_tmp[893661] "expr temp" "maybe param" "maybe type" "temp"
    (893664 'move' call_tmp[893661](249952 call != eltType[249933] b[249929]))
    unknown call_tmp[893666] "expr temp" "maybe param" "maybe type" "temp"
    (893669 'move' call_tmp[893666](249956 call _cond_test call_tmp[893661]))
    if call_tmp[893666]
    {
      unknown call_tmp[893671] "expr temp" "maybe param" "maybe type" "temp"
      (893674 'move' call_tmp[893671](249943 call : eltType[249933] string[244]))
      unknown call_tmp[893676] "expr temp" "maybe param" "maybe type" "temp"
      (893679 'move' call_tmp[893676](249948 call : b[249929] string[244]))
      (249941 call compilerError "array element type mismatch in return from " call_tmp[893671] " to " call_tmp[893676])
      (563412 'end of statement' eltType[249933])
    }
    (623810 return _void[46])
  }
  function chpl__checkOutEltTypeMatch[249962](arg a[249967]:_array[255540](?), arg b[249970]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    unknown call_tmp[893683] "expr temp" "maybe param" "maybe type" "temp"
    (893686 'move' call_tmp[893683](249999 call eltType _mt[203] a[249967]))
    unknown call_tmp[893688] "expr temp" "maybe param" "maybe type" "temp"
    (893691 'move' call_tmp[893688](249996 call != call_tmp[893683] b[249970]))
    unknown call_tmp[893693] "expr temp" "maybe param" "maybe type" "temp"
    (893696 'move' call_tmp[893693](250003 call _cond_test call_tmp[893688]))
    if call_tmp[893693]
    {
      unknown call_tmp[893698] "expr temp" "maybe param" "maybe type" "temp"
      (893701 'move' call_tmp[893698](249982 call : b[249970] string[244]))
      unknown call_tmp[893705] "expr temp" "maybe param" "maybe type" "temp"
      (893708 'move' call_tmp[893705](249992 call eltType _mt[203] a[249967]))
      unknown call_tmp[893710] "expr temp" "maybe param" "maybe type" "temp"
      (893713 'move' call_tmp[893710](249989 call : call_tmp[893705] string[244]))
      (249975 call compilerError "array element type mismatch in initializing out formal " "with element type " call_tmp[893698] " from array with element type " call_tmp[893710])
    }
    (623812 return _void[46])
  }
  function chpl__checkOutEltTypeMatch[250009](arg a[250012]:_iteratorRecord[165](?), arg b[250015]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    unknown eltType[250019] "dead at end of block" "insert auto destroy" "type variable"
    unknown call_tmp[893715] "expr temp" "maybe param" "used in type" "maybe type" "temp" "type variable"
    (893718 'move' call_tmp[893715](651209 'typeof' a[250012]))
    (651211 'move' eltType[250019](651208 call iteratorToArrayElementType call_tmp[893715]))
    (563415 'end of statement')
    unknown call_tmp[893720] "expr temp" "maybe param" "maybe type" "temp"
    (893723 'move' call_tmp[893720](250041 call != eltType[250019] b[250015]))
    unknown call_tmp[893725] "expr temp" "maybe param" "maybe type" "temp"
    (893728 'move' call_tmp[893725](250045 call _cond_test call_tmp[893720]))
    if call_tmp[893725]
    {
      unknown call_tmp[893730] "expr temp" "maybe param" "maybe type" "temp"
      (893733 'move' call_tmp[893730](250030 call : b[250015] string[244]))
      unknown call_tmp[893735] "expr temp" "maybe param" "maybe type" "temp"
      (893738 'move' call_tmp[893735](250037 call : eltType[250019] string[244]))
      (250027 call compilerError "array element type mismatch in initializing out formal " "with element type " call_tmp[893730] " from iterator with element type " call_tmp[893735])
      (563416 'end of statement' eltType[250019])
    }
    (623814 return _void[46])
  }
  type dmap[250053]
  function chpl__buildDistType[250055](arg t[250057]:_any[141](?)) type : _unknown[42]
  {
    unknown ret[623818] "RVV" "temp" "type variable"
    unknown x[250067] "dead at end of block" "insert auto destroy"
    unknown call_tmp[893740] "expr temp" "maybe param" "maybe type" "temp"
    (893743 'move' call_tmp[893740](250069 call _to_unmanaged t[250057]))
    unknown call_tmp[893745] "expr temp" "maybe param" "maybe type" "temp"
    (893748 'move' call_tmp[893745](250071 'to nilable class from type' call_tmp[893740]))
    (651213 'default init var' x[250067] call_tmp[893745])
    (250073 'end of statement')
    unknown call_tmp[893750] "expr temp" "maybe param" "maybe type" "temp"
    (893753 'move' call_tmp[893750](250079 call postfix! x[250067]))
    unknown call_tmp[893755] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (893758 'move' call_tmp[893755](1000433 'new' _distribution[268253](?) call_tmp[893750]))
    unknown y[250075] "dead at end of block" "insert auto destroy"
    (651215 'init var' y[250075] call_tmp[893755])
    (250083 'end of statement' x[250067])
    unknown call_tmp[893760] "expr temp" "maybe param" "used in type" "maybe type" "temp" "type variable"
    (893763 'move' call_tmp[893760](250086 'typeof' y[250075]))
    (623823 'move' ret[623818](623822 'deref' call_tmp[893760]))
    gotoReturn _end_chpl__buildDistType[623816] _end_chpl__buildDistType[623816]
    (563419 'end of statement' y[250075])
    label _end_chpl__buildDistType[623816]
    (623820 return ret[623818])
  }
  where {
    unknown call_tmp[893765] "expr temp" "maybe param" "maybe type" "temp"
    (893768 'move' call_tmp[893765](250062 call _to_borrowed t[250057]))
    (395513 'is_subtype' BaseDist[443581](?) call_tmp[893765])
  }
  function chpl__buildDistType[250090](arg t[250093]:record[51](?)) type : _unknown[42]
  {
    unknown ret[623829] "RVV" "temp" "type variable"
    (250098 call compilerWarning "The use of 'dmap' is deprecated for this distribution; please replace 'dmap(<DistName>(<args>))' with '<DistName>(<args>)'")
    (563421 'end of statement')
    (623834 'move' ret[623829](623833 'deref' t[250093]))
    (623831 return ret[623829])
  }
  function chpl__buildDistType[250106](arg t[250108]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    (250112 call compilerError "illegal domain map type specifier - must be a subclass of BaseDist")
    (623836 return _void[46])
  }
  function chpl__buildDistValue[250118](arg x[250121]:unmanaged[183](?)) : _unknown[42]
  {
    unknown ret[623840] "RVV" "temp"
    unknown call_tmp[893770] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (893773 'move' call_tmp[893770](1000434 'new' _distribution[268253](?) x[250121]))
    (623845 'move' ret[623840](623844 'deref' call_tmp[893770]))
    (623842 return ret[623840])
  }
  where {
    { scopeless type
      unknown call_type_tmp[578577] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[893777] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (893780 'move' call_tmp[893777](250130 call(250127 call (partial) borrow _mt[203] x[250121])))
      (578581 'move' call_type_tmp[578577](250131 'typeof' call_tmp[893777]))
    }
    (395514 'is_subtype' BaseDist[443581](?) call_type_tmp[578577])
  }
  function chpl__buildDistValue[250142](in arg x[250145]:_owned[238](?)) : _unknown[42]
  {
    unknown ret[623849] "RVV" "temp"
    unknown call_tmp[893784] "expr temp" "maybe param" "maybe type" "temp"
    (893787 'move' call_tmp[893784](250166 call(250163 call (partial) release _mt[203] _owned[238](?)) x[250145]))
    unknown call_tmp[893789] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (893792 'move' call_tmp[893789](1000435 'new' _distribution[268253](?) call_tmp[893784]))
    (623854 'move' ret[623849](623853 'deref' call_tmp[893789]))
    (623851 return ret[623849])
  }
  where {
    { scopeless type
      unknown call_type_tmp[578583] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[893796] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (893799 'move' call_tmp[893796](250154 call(250151 call (partial) borrow _mt[203] x[250145])))
      (578587 'move' call_type_tmp[578583](250155 'typeof' call_tmp[893796]))
    }
    (395515 'is_subtype' BaseDist[443581](?) call_type_tmp[578583])
  }
  function chpl__buildDistValue[250171](const  ref arg x[250174]:record[51](?)) const ref : _unknown[42]
  {
    unknown ret[623858] "RVV" "temp"
    (623863 'move' ret[623858](623862 'addr of' x[250174]))
    (623860 return ret[623858])
  }
  function chpl__buildDistValue[250182](arg x[250184]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    (250188 call compilerError "illegal domain map value specifier - must be a subclass of BaseDist")
    (623865 return _void[46])
  }
  function chpl__buildDistDMapValue[250194](const  ref arg x[250197]:record[51](?)) const ref : _unknown[42]
  {
    unknown ret[623869] "RVV" "temp"
    (250202 call compilerWarning "The use of 'dmap' is deprecated for this distribution; please replace 'new dmap(new <DistName>(<args>))' with 'new <DistName>()
    (563428 'end of statement')
    unknown call_tmp[893801] "expr temp" "maybe param" "maybe type" "temp"
    (893804 'move' call_tmp[893801](250208 call chpl__buildDistValue x[250197]))
    (623874 'move' ret[623869](623873 'addr of' call_tmp[893801]))
    (623871 return ret[623869])
  }
  function chpl__buildDistDMapValue[250212](arg x[250215]:unmanaged[183](?)) : _unknown[42]
  {
    unknown ret[623878] "RVV" "temp"
    unknown call_tmp[893806] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (893809 'move' call_tmp[893806](1000436 'new' _distribution[268253](?) x[250215]))
    (623883 'move' ret[623878](623882 'deref' call_tmp[893806]))
    (623880 return ret[623878])
  }
  where {
    { scopeless type
      unknown call_type_tmp[578589] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[893813] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (893816 'move' call_tmp[893813](250224 call(250221 call (partial) borrow _mt[203] x[250215])))
      (578593 'move' call_type_tmp[578589](250225 'typeof' call_tmp[893813]))
    }
    (395516 'is_subtype' BaseDist[443581](?) call_type_tmp[578589])
  }
  function chpl__buildDistDMapValue[250236](in arg x[250239]:_owned[238](?)) : _unknown[42]
  {
    unknown ret[623887] "RVV" "temp"
    unknown call_tmp[893820] "expr temp" "maybe param" "maybe type" "temp"
    (893823 'move' call_tmp[893820](250260 call(250257 call (partial) release _mt[203] _owned[238](?)) x[250239]))
    unknown call_tmp[893825] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (893828 'move' call_tmp[893825](1000437 'new' _distribution[268253](?) call_tmp[893820]))
    (623892 'move' ret[623887](623891 'deref' call_tmp[893825]))
    (623889 return ret[623887])
  }
  where {
    { scopeless type
      unknown call_type_tmp[578595] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[893832] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (893835 'move' call_tmp[893832](250248 call(250245 call (partial) borrow _mt[203] x[250239])))
      (578599 'move' call_type_tmp[578595](250249 'typeof' call_tmp[893832]))
    }
    (395517 'is_subtype' BaseDist[443581](?) call_type_tmp[578595])
  }
  function ==[250265](arg d1[250270]:_distribution[268253](?), arg d2[250276]:_distribution[268253](?)) : _unknown[42] "inline" "operator"
  {
    unknown ret[623896] "RVV" "temp"
    unknown call_tmp[893839] "expr temp" "maybe param" "maybe type" "temp"
    (893842 'move' call_tmp[893839](250286 call _value _mt[203] d1[250270]))
    unknown call_tmp[893846] "expr temp" "maybe param" "maybe type" "temp"
    (893849 'move' call_tmp[893846](250290 call _value _mt[203] d2[250276]))
    unknown call_tmp[893851] "expr temp" "maybe param" "maybe type" "temp"
    (893854 'move' call_tmp[893851](250283 call == call_tmp[893839] call_tmp[893846]))
    unknown call_tmp[893856] "expr temp" "maybe param" "maybe type" "temp"
    (893859 'move' call_tmp[893856](250293 call _cond_test call_tmp[893851]))
    if call_tmp[893856]
    {
      (623901 'move' ret[623896](623900 'deref' 1))
      gotoReturn _end_==[623894] _end_==[623894]
    }
    unknown call_tmp[893863] "expr temp" "maybe param" "maybe type" "temp"
    (893866 'move' call_tmp[893863](250300 call _value _mt[203] d1[250270]))
    unknown call_tmp[893872] "expr temp" "maybe param" "maybe type" "temp"
    (893875 'move' call_tmp[893872](250308 call _value _mt[203] d2[250276]))
    unknown call_tmp[893877] "expr temp" "maybe param" "maybe type" "temp"
    (893880 'move' call_tmp[893877](250306 call(250303 call (partial) dsiEqualDMaps _mt[203] call_tmp[893863]) call_tmp[893872]))
    (623906 'move' ret[623896](623905 'deref' call_tmp[893877]))
    label _end_==[623894]
    (623898 return ret[623896])
  }
  function ==[250313](arg d1[250318]:_distribution[268253](?), arg d2[250322]:record[51](?)) param : _unknown[42] "inline" "operator"
  {
    unknown ret[623910] "RVV" "param" "temp"
    (623915 'move' ret[623910](623914 'deref' 0))
    (623912 return ret[623910])
  }
  function ==[250330](arg d1[250333]:record[51](?), arg d2[250339]:_distribution[268253](?)) param : _unknown[42] "inline" "operator"
  {
    unknown ret[623919] "RVV" "param" "temp"
    (623924 'move' ret[623919](623923 'deref' 0))
    (623921 return ret[623919])
  }
  function !=[250347](arg d1[250352]:_distribution[268253](?), arg d2[250358]:_distribution[268253](?)) : _unknown[42] "inline" "operator"
  {
    unknown ret[623928] "RVV" "temp"
    unknown call_tmp[893882] "expr temp" "maybe param" "maybe type" "temp"
    (893885 'move' call_tmp[893882](250365 call == d1[250352] d2[250358]))
    unknown call_tmp[893887] "expr temp" "maybe param" "maybe type" "temp"
    (893890 'move' call_tmp[893887](250363 call ! call_tmp[893882]))
    (623933 'move' ret[623928](623932 'deref' call_tmp[893887]))
    (623930 return ret[623928])
  }
  function !=[250371](arg d1[250376]:_distribution[268253](?), arg d2[250380]:record[51](?)) param : _unknown[42] "inline" "operator"
  {
    unknown ret[623937] "RVV" "param" "temp"
    (623942 'move' ret[623937](623941 'deref' 1))
    (623939 return ret[623937])
  }
  function !=[250388](arg d1[250391]:record[51](?), arg d2[250397]:_distribution[268253](?)) param : _unknown[42] "inline" "operator"
  {
    unknown ret[623946] "RVV" "param" "temp"
    (623951 'move' ret[623946](623950 'deref' 1))
    (623948 return ret[623946])
  }
  function chpl_defaultComparator[250405]() : _unknown[42]
  {
    unknown ret[623955] "RVV" "temp"
    unknown call_tmp[893892] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (893895 'move' call_tmp[893892](1000438 'new' DefaultComparator[246408]))
    (623960 'move' ret[623955](623959 'deref' call_tmp[893892]))
    (623957 return ret[623955])
    (396902 'used modules list'(250409 'use' Sort[247204]))
  }
  function shouldReturnRvalueByValue[250417](arg t[250419]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[623964] "RVV" "param" "temp"
    unknown call_tmp[893897] "expr temp" "maybe param" "maybe type" "temp"
    (893900 'move' call_tmp[893897](250425 call ! PODValAccess[247526]))
    unknown call_tmp[893902] "expr temp" "maybe param" "maybe type" "temp"
    (893905 'move' call_tmp[893902](250428 call _cond_test call_tmp[893897]))
    if call_tmp[893902]
    {
      (623969 'move' ret[623964](623968 'deref' 0))
      gotoReturn _end_shouldReturnRvalueByValue[623962] _end_shouldReturnRvalueByValue[623962]
    }
    unknown call_tmp[893907] "expr temp" "maybe param" "maybe type" "temp"
    (893910 'move' call_tmp[893907](250437 call isPODType t[250419]))
    unknown call_tmp[893912] "expr temp" "maybe param" "maybe type" "temp"
    (893915 'move' call_tmp[893912](250439 call _cond_test call_tmp[893907]))
    if call_tmp[893912]
    {
      (623974 'move' ret[623964](623973 'deref' 1))
      gotoReturn _end_shouldReturnRvalueByValue[623962] _end_shouldReturnRvalueByValue[623962]
    }
    (623979 'move' ret[623964](623978 'deref' 0))
    label _end_shouldReturnRvalueByValue[623962]
    (623966 return ret[623964])
  }
  function _array[255540](?).chpl__serialize[250465](arg _mt[250469]:_MT[201], arg this[250467]:_array[255540](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[623983] "RVV" "temp"
    unknown call_tmp[893919] "expr temp" "maybe param" "maybe type" "temp"
    (893922 'move' call_tmp[893919](407644 call _instance _mt[203] this[250467]))
    unknown call_tmp[893926] "expr temp" "maybe param" "maybe type" "temp"
    (893929 'move' call_tmp[893926](250484 call(250481 call (partial) chpl__serialize _mt[203] call_tmp[893919])))
    (623988 'move' ret[623983](623987 'deref' call_tmp[893926]))
    (623985 return ret[623983])
  }
  where {
    unknown call_tmp[893933] "expr temp" "maybe param" "maybe type" "temp"
    (893936 'move' call_tmp[893933](407639 call _instance _mt[203] this[250467]))
    (250477 call(250474 call (partial) chpl__rvfMe _mt[203] call_tmp[893933]))
  }
  function _array[255540](?).chpl__deserialize[250488](arg _mt[250494]:_MT[201], arg this[250490]:_array[255540](?), arg data[250492]:_any[141](?)) : _unknown[42] "method" "primary method" "no copy return"
  {
    unknown ret[623992] "RVV" "temp"
    unknown call_tmp[893940] "expr temp" "maybe param" "maybe type" "temp"
    (893943 'move' call_tmp[893940](250501 'static field type' this[250490] "_instance"))
    unknown call_tmp[893945] "expr temp" "maybe param" "maybe type" "temp"
    (893948 'move' call_tmp[893945](250500 call _to_borrowed call_tmp[893940]))
    unknown call_tmp[893952] "maybe param" "maybe type" "temp"
    (893955 'move' call_tmp[893952](250507 call(250504 call (partial) chpl__deserialize _mt[203] call_tmp[893945]) data[250492]))
    unknown arrinst[250498] "dead at end of block" "insert auto destroy"
    (651217 'init var' arrinst[250498] call_tmp[893952])
    (250510 'end of statement')
    unknown call_tmp[893957] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (893960 'move' call_tmp[893957](1000439 'new' _array[255540](?) nullPid[247489] arrinst[250498](_unowned = 1)))
    (623997 'move' ret[623992](623996 'deref' call_tmp[893957]))
    gotoReturn _end_chpl__deserialize[623990] _end_chpl__deserialize[623990]
    (563444 'end of statement' arrinst[250498])
    label _end_chpl__deserialize[623990]
    (623994 return ret[623992])
  }
  function _array[255540](?).chpl__promotionType[250521](arg _mt[250525]:_MT[201], arg this[250523]:_array[255540](?)) type : _unknown[42] "method" "primary method"
  {
    unknown ret[624003] "RVV" "temp" "type variable"
    unknown call_tmp[893964] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (893967 'move' call_tmp[893964](407648 call _value _mt[203] this[250523]))
    unknown call_tmp[893971] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (893974 'move' call_tmp[893971](250530 call eltType _mt[203] call_tmp[893964]))
    (624008 'move' ret[624003](624007 'deref' call_tmp[893971]))
    (624005 return ret[624003])
  }
  function _array[255540](?)._value[250535](arg _mt[250539]:_MT[201], arg this[250537]:_array[255540](?)) : _unknown[42] "alias scope from this" "inline" "method" "primary method" "no parens"
  {
    unknown ret[624012] "RVV" "temp"
    unknown call_tmp[893978] "expr temp" "maybe param" "maybe type" "temp"
    (893981 'move' call_tmp[893978](449516 call _instance _mt[203] this[250537]))
    unknown call_tmp[893983] "expr temp" "maybe param" "maybe type" "temp"
    (893986 'move' call_tmp[893983](250553 call _isPrivatized call_tmp[893978]))
    unknown call_tmp[893988] "expr temp" "maybe param" "maybe type" "temp"
    (893991 'move' call_tmp[893988](250555 call _cond_test call_tmp[893983]))
    if call_tmp[893988]
    {
      { scopeless type
        unknown call_type_tmp[578601] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[893995] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (893998 'move' call_tmp[893995](449501 call _instance _mt[203] this[250537]))
        (578605 'move' call_type_tmp[578601](250547 'typeof' call_tmp[893995]))
      }
      unknown call_tmp[894002] "expr temp" "maybe param" "maybe type" "temp"
      (894005 'move' call_tmp[894002](449506 call _pid _mt[203] this[250537]))
      unknown call_tmp[894007] "expr temp" "maybe param" "maybe type" "temp"
      (894010 'move' call_tmp[894007](250545 call chpl_getPrivatizedCopy call_type_tmp[578601] call_tmp[894002]))
      (624017 'move' ret[624012](624016 'deref' call_tmp[894007]))
      gotoReturn _end__value[624010] _end__value[624010]
    }
    {
      unknown call_tmp[894014] "expr temp" "maybe param" "maybe type" "temp"
      (894017 'move' call_tmp[894014](449511 call _instance _mt[203] this[250537]))
      (624022 'move' ret[624012](624021 'deref' call_tmp[894014]))
      gotoReturn _end__value[624010] _end__value[624010]
    }
    label _end__value[624010]
    (624014 return ret[624012])
  }
  function _array[255540](?).chpl_forwarding_expr1[250562](arg _mt[250567]:_MT[201], arg this[250565]:_array[255540](?)) : _unknown[42] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[624028] "RVV" "temp"
    (624032 'move' ret[624028](449520 call _value _mt[203] this[250565]))
    (624030 return ret[624028])
  }
  function _array[255540](?).deinit[250580](arg _mt[250584]:_MT[201], arg this[250582]:_array[255540](?)) : _unknown[42] "destructor" "method" "primary method" "no return value for void"
  {
    (250588 call _do_destroy_array this[250582])
    (624034 return _void[46])
  }
  function _array[255540](?).eltType[250592](arg _mt[250596]:_MT[201], arg this[250594]:_array[255540](?)) type : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[624038] "RVV" "temp" "type variable"
    unknown call_tmp[894023] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (894026 'move' call_tmp[894023](407652 call _value _mt[203] this[250594]))
    unknown call_tmp[894030] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (894033 'move' call_tmp[894030](250601 call eltType _mt[203] call_tmp[894023]))
    (624043 'move' ret[624038](624042 'deref' call_tmp[894030]))
    (624040 return ret[624038])
  }
  function _array[255540](?).idxType[250606](arg _mt[250610]:_MT[201], arg this[250608]:_array[255540](?)) type : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[624047] "RVV" "temp" "type variable"
    unknown call_tmp[894037] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (894040 'move' call_tmp[894037](407656 call _value _mt[203] this[250608]))
    unknown call_tmp[894044] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (894047 'move' call_tmp[894044](250615 call idxType _mt[203] call_tmp[894037]))
    (624052 'move' ret[624047](624051 'deref' call_tmp[894044]))
    (624049 return ret[624047])
  }
  function _array[255540](?).fullIdxType[250620](arg _mt[250624]:_MT[201], arg this[250622]:_array[255540](?)) type : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[624056] "RVV" "temp" "type variable"
    unknown call_tmp[894051] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (894054 'move' call_tmp[894051](250629 call _dom _mt[203] this[250622]))
    unknown call_tmp[894058] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (894061 'move' call_tmp[894058](250632 call fullIdxType _mt[203] call_tmp[894051]))
    (624061 'move' ret[624056](624060 'deref' call_tmp[894058]))
    (624058 return ret[624056])
  }
  function _array[255540](?)._dom[250637](arg _mt[250641]:_MT[201], arg this[250639]:_array[255540](?)) : _unknown[42] "method" "primary method" "no copy return" "no parens" "return not owned"
  {
    unknown ret[624065] "RVV" "temp"
    unknown call_tmp[894065] "expr temp" "maybe param" "maybe type" "temp"
    (894068 'move' call_tmp[894065](407661 call _value _mt[203] this[250639]))
    unknown call_tmp[894072] "expr temp" "maybe param" "maybe type" "temp"
    (894075 'move' call_tmp[894072](250648 call dom _mt[203] call_tmp[894065]))
    unknown call_tmp[894077] "expr temp" "maybe param" "maybe type" "temp"
    (894080 'move' call_tmp[894077](250646 call _getDomain call_tmp[894072]))
    (624070 'move' ret[624065](624069 'deref' call_tmp[894077]))
    (624067 return ret[624065])
  }
  function _array[255540](?).rank[250653](arg _mt[250657]:_MT[201], arg this[250655]:_array[255540](?)) param : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[624074] "RVV" "param" "temp"
    unknown call_tmp[894084] "expr temp" "maybe param" "maybe type" "temp"
    (894087 'move' call_tmp[894084](250662 call _dom _mt[203] this[250655]))
    unknown call_tmp[894091] "expr temp" "maybe param" "maybe type" "temp"
    (894094 'move' call_tmp[894091](250665 call rank _mt[203] call_tmp[894084]))
    (624079 'move' ret[624074](624078 'deref' call_tmp[894091]))
    (624076 return ret[624074])
  }
  function _array[255540](?).strides[250670](arg _mt[250674]:_MT[201], arg this[250672]:_array[255540](?)) param : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[624083] "RVV" "param" "temp"
    unknown call_tmp[894098] "expr temp" "maybe param" "maybe type" "temp"
    (894101 'move' call_tmp[894098](250679 call _dom _mt[203] this[250672]))
    unknown call_tmp[894105] "expr temp" "maybe param" "maybe type" "temp"
    (894108 'move' call_tmp[894105](250682 call strides _mt[203] call_tmp[894098]))
    (624088 'move' ret[624083](624087 'deref' call_tmp[894105]))
    (624085 return ret[624083])
  }
  function _array[255540](?).hasUnitStride[250687](arg _mt[250691]:_MT[201], arg this[250689]:_array[255540](?)) param : _unknown[42] "method" "primary method"
  {
    unknown ret[624092] "RVV" "param" "temp"
    unknown call_tmp[894112] "expr temp" "maybe param" "maybe type" "temp"
    (894115 'move' call_tmp[894112](407667 call strides _mt[203] this[250689]))
    unknown call_tmp[894119] "expr temp" "maybe param" "maybe type" "temp"
    (894122 'move' call_tmp[894119](250699 call(250696 call (partial) isOne _mt[203] call_tmp[894112])))
    (624097 'move' ret[624092](624096 'deref' call_tmp[894119]))
    (624094 return ret[624092])
  }
  function _array[255540](?).hasPosNegUnitStride[250702](arg _mt[250706]:_MT[201], arg this[250704]:_array[255540](?)) param : _unknown[42] "method" "primary method"
  {
    unknown ret[624101] "RVV" "param" "temp"
    unknown call_tmp[894126] "expr temp" "maybe param" "maybe type" "temp"
    (894129 'move' call_tmp[894126](407671 call strides _mt[203] this[250704]))
    unknown call_tmp[894133] "expr temp" "maybe param" "maybe type" "temp"
    (894136 'move' call_tmp[894133](250714 call(250711 call (partial) isPosNegOne _mt[203] call_tmp[894126])))
    (624106 'move' ret[624101](624105 'deref' call_tmp[894133]))
    (624103 return ret[624101])
  }
  function _array[255540](?).indices[250717](arg _mt[250721]:_MT[201], arg this[250719]:_array[255540](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[624110] "RVV" "temp"
    unknown call_tmp[894140] "expr temp" "maybe param" "maybe type" "temp"
    (894143 'move' call_tmp[894140](407677 call _dom _mt[203] this[250719]))
    unknown call_tmp[894147] "expr temp" "maybe param" "maybe type" "temp"
    (894150 'move' call_tmp[894147](250746 call(250743 call (partial) getIndices _mt[203] call_tmp[894140])))
    unknown call_tmp[894152] "expr temp" "maybe param" "maybe type" "temp"
    (894155 'move' call_tmp[894152](250749 call chpl__buildDomainExpr(250747 'expand_tuple' call_tmp[894147]) 1))
    (624115 'move' ret[624110](624114 'deref' call_tmp[894152]))
    (624112 return ret[624110])
  }
  where {
    unknown tmp[499824] "maybe param" "temp"
    unknown call_tmp[894159] "expr temp" "maybe param" "maybe type" "temp"
    (894162 'move' call_tmp[894159](250731 call(250728 call (partial) isSparse _mt[203] this[250719])))
    (499835 'move' tmp[499824](250725 call ! call_tmp[894159]))
    unknown call_tmp[894164] "expr temp" "maybe param" "maybe type" "temp"
    (894167 'move' call_tmp[894164](499837 call _cond_invalid tmp[499824]))
    if call_tmp[894164]
    {
      (499840 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[699183] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[699184] "maybe param" "temp"
    unknown call_tmp[894169] "expr temp" "maybe param" "maybe type" "temp"
    (894172 'move' call_tmp[894169](499825 call isTrue tmp[499824]))
    (699189 'move' tmp[699184](699187 call _cond_test call_tmp[894169]))
    if tmp[699184]
    {
      unknown tmp[699191] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[894176] "expr temp" "maybe param" "maybe type" "temp"
      (894179 'move' call_tmp[894176](250738 call(250735 call (partial) isAssociative _mt[203] this[250719])))
      unknown call_tmp[894181] "expr temp" "maybe param" "maybe type" "temp"
      (894184 'move' call_tmp[894181](250732 call ! call_tmp[894176]))
      (699193 'move' tmp[699191](499828 call isTrue call_tmp[894181]))
      (699198 'move' tmp[699183](699195 '_paramFoldLogical' tmp[699184] tmp[699191]))
    }
    {
      (699203 'move' tmp[699183](699200 '_paramFoldLogical' tmp[699184] 0))
    }
    (1001628 call chpl_statementLevelSymbol tmp[699183])
  }
  function _array[255540](?).indices[250754](arg _mt[250758]:_MT[201], arg this[250756]:_array[255540](?)) : _unknown[42] "iterator fn" "method" "primary method" "no parens" "no return value for void"
  {
    unknown ret[624119] "RVV" "temp"
    {
      unknown _indexOfInterest[250779] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[250780] "expr temp" "temp"
      unknown call_tmp[894188] "expr temp" "maybe param" "maybe type" "temp"
      (894191 'move' call_tmp[894188](449525 call _dom _mt[203] this[250756]))
      (250789 'move' _iterator[250780](250787 call _getIterator call_tmp[894188]))
      Defer
      {
        {
          (250804 call _freeIterator _iterator[250780])
        }
      }
      { scopeless type
        (250794 'move' _indexOfInterest[250779](250791 call iteratorIndex _iterator[250780]))
      }
      ForLoop[250781]
      {
        unknown i[250773] "index var" "insert auto destroy"
        (563460 'end of statement')
        (250799 'move' i[250773] _indexOfInterest[250779])
        (563461 'end of statement' i[250773])
        unknown yret[624123] "YVV" "temp"
        (624126 'move' yret[624123](624125 'deref' i[250773]))
        (250776 yield yret[624123])
        (563463 'end of statement' i[250773])
        label _continueLabel[250784]
        _indexOfInterest[250779]
        _iterator[250780]
      }
      label _breakLabel[250785]
    }
    (624121 return ret[624119])
  }
  where {
    unknown tmp[499845] "maybe param" "temp"
    (499856 'move' tmp[499845](250766 call(250763 call (partial) isSparse _mt[203] this[250756])))
    unknown call_tmp[894195] "expr temp" "maybe param" "maybe type" "temp"
    (894198 'move' call_tmp[894195](499858 call _cond_invalid tmp[499845]))
    if call_tmp[894195]
    {
      (499861 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[699210] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[699211] "maybe param" "temp"
    unknown call_tmp[894200] "expr temp" "maybe param" "maybe type" "temp"
    (894203 'move' call_tmp[894200](499846 call isTrue tmp[499845]))
    (699216 'move' tmp[699211](699214 call _cond_test call_tmp[894200]))
    if tmp[699211]
    {
      (699221 'move' tmp[699210](699218 '_paramFoldLogical' tmp[699211] 1))
    }
    {
      unknown tmp[699223] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[894207] "expr temp" "maybe param" "maybe type" "temp"
      (894210 'move' call_tmp[894207](250771 call(250768 call (partial) isAssociative _mt[203] this[250756])))
      (699225 'move' tmp[699223](499850 call isTrue call_tmp[894207]))
      (699230 'move' tmp[699210](699227 '_paramFoldLogical' tmp[699211] tmp[699223]))
    }
    (1001630 call chpl_statementLevelSymbol tmp[699210])
  }
  function _array[255540](?).checkAccess[250814](arg _mt[250822]:_MT[201], arg this[250816]:_array[255540](?), arg indices[250818]:_any[141](?), arg value[250820]:_any[141](?)) : _unknown[42] "always propagate line file info" "insert line file info" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[894214] "expr temp" "maybe param" "maybe type" "temp"
    (894217 'move' call_tmp[894214](251123 call(251120 call (partial) isRectangular _mt[203] this[250816])))
    unknown call_tmp[894219] "expr temp" "maybe param" "maybe type" "temp"
    (894222 'move' call_tmp[894219](251124 call _cond_test call_tmp[894214]))
    if call_tmp[894219]
    {
      unknown call_tmp[894226] "expr temp" "maybe param" "maybe type" "temp"
      (894229 'move' call_tmp[894226](251113 call(251110 call (partial) dsiBoundsCheck _mt[203] value[250820]) indices[250818]))
      unknown call_tmp[894231] "expr temp" "maybe param" "maybe type" "temp"
      (894234 'move' call_tmp[894231](251105 call ! call_tmp[894226]))
      unknown call_tmp[894236] "expr temp" "maybe param" "maybe type" "temp"
      (894239 'move' call_tmp[894236](251115 call _cond_test call_tmp[894231]))
      if call_tmp[894236]
      {
        unknown call_tmp[894243] "expr temp" "maybe param" "maybe type" "temp"
        (894246 'move' call_tmp[894243](449567 call rank _mt[203] this[250816]))
        unknown call_tmp[894248] "expr temp" "maybe param" "maybe type" "temp"
        (894251 'move' call_tmp[894248](251097 call == call_tmp[894243] 1))
        unknown call_tmp[894253] "expr temp" "maybe param" "maybe type" "temp"
        (894256 'move' call_tmp[894253](251101 call _cond_test call_tmp[894248]))
        if call_tmp[894253]
        {
          unknown call_tmp[894258] "expr temp" "maybe param" "maybe type" "temp"
          (894261 'move' call_tmp[894258](250837 call indices[250818] 0))
          unknown call_tmp[894265] "expr temp" "maybe param" "maybe type" "temp"
          (894268 'move' call_tmp[894265](250843 call dom _mt[203] value[250820]))
          unknown call_tmp[894272] "expr temp" "maybe param" "maybe type" "temp"
          (894275 'move' call_tmp[894272](250849 call(250846 call (partial) dsiDim _mt[203] call_tmp[894265]) 0))
          (250829 call halt "array index out of bounds\n" "note: index was " call_tmp[894258] " but array bounds are " call_tmp[894272])
        }
        {
          unknown istr[250853] "dead at end of block" "insert auto destroy"
          (651219 'init var' istr[250853] "")
          (250856 'end of statement')
          unknown bstr[250858] "dead at end of block" "insert auto destroy"
          (651221 'init var' bstr[250858] "")
          (250861 'end of statement')
          {
            unknown i[250862] "dead at end of block" "index var" "insert auto destroy"
            (651223 'init var' i[250862] 0)
            (563466 'end of statement')
            unknown tmp[250913] "maybe param" "temp"
            unknown call_tmp[894279] "expr temp" "maybe param" "maybe type" "temp"
            (894282 'move' call_tmp[894279](449531 call rank _mt[203] this[250816]))
            unknown call_tmp[894284] "expr temp" "maybe param" "maybe type" "temp"
            (894287 'move' call_tmp[894284](250865 call - call_tmp[894279] 1))
            (250925 'move' tmp[250913](250923 call chpl_compute_low_param_loop_bound 0 call_tmp[894284]))
            unknown tmp[250914] "maybe param" "temp"
            unknown call_tmp[894291] "expr temp" "maybe param" "maybe type" "temp"
            (894294 'move' call_tmp[894291](449543 call rank _mt[203] this[250816]))
            unknown call_tmp[894296] "expr temp" "maybe param" "maybe type" "temp"
            (894299 'move' call_tmp[894296](250930 call - call_tmp[894291] 1))
            (250935 'move' tmp[250914](250933 call chpl_compute_high_param_loop_bound 0 call_tmp[894296]))
            unknown tmp[250915] "maybe param" "temp"
            (250938 'move' tmp[250915] 1)
            ParamForLoop[250940]
            { i[250862] tmp[250913] tmp[250914] tmp[250915]
              {
                unknown call_tmp[894301] "expr temp" "maybe param" "maybe type" "temp"
                (894304 'move' call_tmp[894301](250881 call != i[250862] 0))
                unknown call_tmp[894306] "expr temp" "maybe param" "maybe type" "temp"
                (894309 'move' call_tmp[894306](250885 call _cond_test call_tmp[894301]))
                if call_tmp[894306]
                {
                  (250873 call += istr[250853] ", ")
                  (563467 'end of statement' istr[250853])
                  (250877 call += bstr[250858] ", ")
                  (563469 'end of statement' bstr[250858])
                }
                unknown call_tmp[894311] "expr temp" "maybe param" "maybe type" "temp"
                (894314 'move' call_tmp[894311](250895 call indices[250818] i[250862]))
                unknown call_tmp[894316] "expr temp" "maybe param" "maybe type" "temp"
                (894319 'move' call_tmp[894316](250892 call : call_tmp[894311] string[244]))
                (250889 call += istr[250853] call_tmp[894316])
                (563471 'end of statement' istr[250853] i[250862])
                unknown call_tmp[894323] "expr temp" "maybe param" "maybe type" "temp"
                (894326 'move' call_tmp[894323](250904 call dom _mt[203] value[250820]))
                unknown call_tmp[894330] "expr temp" "maybe param" "maybe type" "temp"
                (894333 'move' call_tmp[894330](250910 call(250907 call (partial) dsiDim _mt[203] call_tmp[894323]) i[250862]))
                unknown call_tmp[894335] "expr temp" "maybe param" "maybe type" "temp"
                (894338 'move' call_tmp[894335](250901 call : call_tmp[894330] string[244]))
                (250898 call += bstr[250858] call_tmp[894335])
                (563474 'end of statement' bstr[250858] i[250862])
              }
            }
            label _unused_continueLabel[250917]
            label _breakLabel[250916]
          }
          unknown dimstr[250950] "dead at end of block" "insert auto destroy"
          (651225 'init var' dimstr[250950] "")
          (250953 'end of statement')
          {
            unknown i[250954] "dead at end of block" "index var" "insert auto destroy"
            (651227 'init var' i[250954] 0)
            (563477 'end of statement')
            unknown tmp[251040] "maybe param" "temp"
            unknown call_tmp[894342] "expr temp" "maybe param" "maybe type" "temp"
            (894345 'move' call_tmp[894342](449547 call rank _mt[203] this[250816]))
            unknown call_tmp[894347] "expr temp" "maybe param" "maybe type" "temp"
            (894350 'move' call_tmp[894347](250957 call - call_tmp[894342] 1))
            (251052 'move' tmp[251040](251050 call chpl_compute_low_param_loop_bound 0 call_tmp[894347]))
            unknown tmp[251041] "maybe param" "temp"
            unknown call_tmp[894354] "expr temp" "maybe param" "maybe type" "temp"
            (894357 'move' call_tmp[894354](449560 call rank _mt[203] this[250816]))
            unknown call_tmp[894359] "expr temp" "maybe param" "maybe type" "temp"
            (894362 'move' call_tmp[894359](251057 call - call_tmp[894354] 1))
            (251062 'move' tmp[251041](251060 call chpl_compute_high_param_loop_bound 0 call_tmp[894359]))
            unknown tmp[251042] "maybe param" "temp"
            (251065 'move' tmp[251042] 1)
            ParamForLoop[251067]
            { i[250954] tmp[251040] tmp[251041] tmp[251042]
              {
                unknown call_tmp[894366] "expr temp" "maybe param" "maybe type" "temp"
                (894369 'move' call_tmp[894366](251021 call dom _mt[203] value[250820]))
                unknown call_tmp[894373] "expr temp" "maybe param" "maybe type" "temp"
                (894376 'move' call_tmp[894373](251027 call(251024 call (partial) dsiDim _mt[203] call_tmp[894366]) i[250954]))
                unknown call_tmp[894380] "expr temp" "maybe param" "maybe type" "temp"
                (894383 'move' call_tmp[894380](251034 call indices[250818] i[250954]))
                unknown call_tmp[894385] "expr temp" "maybe param" "maybe type" "temp"
                (894388 'move' call_tmp[894385](251032 call(251029 call (partial) contains _mt[203] call_tmp[894373]) call_tmp[894380]))
                unknown call_tmp[894390] "expr temp" "maybe param" "maybe type" "temp"
                (894393 'move' call_tmp[894390](251018 call ! call_tmp[894385]))
                unknown call_tmp[894395] "expr temp" "maybe param" "maybe type" "temp"
                (894398 'move' call_tmp[894395](251036 call _cond_test call_tmp[894390]))
                if call_tmp[894395]
                {
                  unknown call_tmp[894400] "expr temp" "maybe param" "maybe type" "temp"
                  (894403 'move' call_tmp[894400](251010 call == dimstr[250950] ""))
                  unknown call_tmp[894405] "expr temp" "maybe param" "maybe type" "temp"
                  (894408 'move' call_tmp[894405](251014 call _cond_test call_tmp[894400]))
                  if call_tmp[894405]
                  {
                    unknown call_tmp[894410] "expr temp" "maybe param" "maybe type" "temp"
                    (894413 'move' call_tmp[894410](250982 call : i[250954] string[244]))
                    unknown call_tmp[894415] "expr temp" "maybe param" "maybe type" "temp"
                    (894418 'move' call_tmp[894415](250977 call + "out of bounds in dimension " call_tmp[894410]))
                    unknown call_tmp[894420] "expr temp" "maybe param" "maybe type" "temp"
                    (894423 'move' call_tmp[894420](250975 call + call_tmp[894415] " because index "))
                    unknown call_tmp[894425] "expr temp" "maybe param" "maybe type" "temp"
                    (894428 'move' call_tmp[894425](250992 call indices[250818] i[250954]))
                    unknown call_tmp[894430] "expr temp" "maybe param" "maybe type" "temp"
                    (894433 'move' call_tmp[894430](250989 call : call_tmp[894425] string[244]))
                    unknown call_tmp[894435] "expr temp" "maybe param" "maybe type" "temp"
                    (894438 'move' call_tmp[894435](250973 call + call_tmp[894420] call_tmp[894430]))
                    unknown call_tmp[894440] "expr temp" "maybe param" "maybe type" "temp"
                    (894443 'move' call_tmp[894440](250971 call + call_tmp[894435] " is not in "))
                    unknown call_tmp[894447] "expr temp" "maybe param" "maybe type" "temp"
                    (894450 'move' call_tmp[894447](251001 call dom _mt[203] value[250820]))
                    unknown call_tmp[894454] "expr temp" "maybe param" "maybe type" "temp"
                    (894457 'move' call_tmp[894454](251007 call(251004 call (partial) dsiDim _mt[203] call_tmp[894447]) i[250954]))
                    unknown call_tmp[894459] "expr temp" "maybe param" "maybe type" "temp"
                    (894462 'move' call_tmp[894459](250998 call : call_tmp[894454] string[244]))
                    unknown call_tmp[894464] "expr temp" "maybe param" "maybe type" "temp"
                    (894467 'move' call_tmp[894464](250969 call + call_tmp[894440] call_tmp[894459]))
                    (250966 call = dimstr[250950] call_tmp[894464])
                    (563478 'end of statement' dimstr[250950] i[250954])
                  }
                }
              }
            }
            label _unused_continueLabel[251044]
            label _breakLabel[251043]
          }
          (251077 call halt "array index out of bounds\n" "note: index was (" istr[250853] ") " "but array bounds are (" bstr[250858] ")\n" "note: " dimstr[250950])
          (563481 'end of statement' istr[250853] bstr[250858] dimstr[250950])
        }
      }
    }
    (624129 return _void[46])
  }
  function _array[255540](?).checkSlice[251130](arg _mt[251140]:_MT[201], arg this[251132]:_array[255540](?), arg d[251135]:_domain[225034](?), arg value[251138]:_any[141](?)) : _unknown[42] "always propagate line file info" "insert line file info" "method" "primary method" "no return value for void"
  {
    unknown tmp[499866] "maybe param" "temp"
    (499877 'move' tmp[499866](251223 call(251220 call (partial) isRectangular _mt[203] d[251135])))
    unknown call_tmp[894471] "expr temp" "maybe param" "maybe type" "temp"
    (894474 'move' call_tmp[894471](499879 call _cond_invalid tmp[499866]))
    if call_tmp[894471]
    {
      (499882 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[699237] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[699238] "maybe param" "temp"
    unknown call_tmp[894476] "expr temp" "maybe param" "maybe type" "temp"
    (894479 'move' call_tmp[894476](499867 call isTrue tmp[499866]))
    (699243 'move' tmp[699238](699241 call _cond_test call_tmp[894476]))
    if tmp[699238]
    {
      (699248 'move' tmp[699237](699245 '_paramFoldLogical' tmp[699238] 1))
    }
    {
      unknown tmp[699250] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[894483] "expr temp" "maybe param" "maybe type" "temp"
      (894486 'move' call_tmp[894483](251228 call(251225 call (partial) isSparse _mt[203] d[251135])))
      (699252 'move' tmp[699250](499871 call isTrue call_tmp[894483]))
      (699257 'move' tmp[699237](699254 '_paramFoldLogical' tmp[699238] tmp[699250]))
    }
    unknown call_tmp[894488] "expr temp" "maybe param" "maybe type" "temp"
    (894491 'move' call_tmp[894488](251229 call _cond_test tmp[699237]))
    if call_tmp[894488]
    {
      unknown call_tmp[894497] "expr temp" "maybe param" "maybe type" "temp"
      (894500 'move' call_tmp[894497](251150 call(251147 call (partial) dsiDims _mt[203] d[251135])))
      (251145 call(449575 call (partial) checkSlice _mt[203] this[251132])(251151 'expand_tuple' call_tmp[894497])(value = value[251138]))
    }
    {
      unknown call_tmp[894504] "expr temp" "maybe param" "maybe type" "temp"
      (894507 'move' call_tmp[894504](251212 call(251209 call (partial) isAssociative _mt[203] d[251135])))
      unknown call_tmp[894509] "expr temp" "maybe param" "maybe type" "temp"
      (894512 'move' call_tmp[894509](251213 call _cond_test call_tmp[894504]))
      if call_tmp[894509]
      {
        Forall[251199] {
          induction variables:
            
            unknown i[251158] "index var" "insert auto destroy"
          iterated expressions:
            d[251135]
          shadow variables:
          other variables
            forall body
          {
            unknown call_tmp[894516] "expr temp" "maybe param" "maybe type" "temp"
            (894519 'move' call_tmp[894516](251184 call _dom _mt[203] this[251132]))
            unknown call_tmp[894523] "expr temp" "maybe param" "maybe type" "temp"
            (894526 'move' call_tmp[894523](251190 call(251187 call (partial) dsiMember _mt[203] call_tmp[894516]) i[251158]))
            unknown call_tmp[894528] "expr temp" "maybe param" "maybe type" "temp"
            (894531 'move' call_tmp[894528](251181 call ! call_tmp[894523]))
            unknown call_tmp[894533] "expr temp" "maybe param" "maybe type" "temp"
            (894536 'move' call_tmp[894533](251192 call _cond_test call_tmp[894528]))
            if call_tmp[894533]
            {
              unknown call_tmp[894538] "expr temp" "maybe param" "maybe type" "temp"
              (894541 'move' call_tmp[894538](251173 call : i[251158] string[244]))
              unknown call_tmp[894543] "expr temp" "maybe param" "maybe type" "temp"
              (894546 'move' call_tmp[894543](251168 call + "index '" call_tmp[894538]))
              unknown call_tmp[894548] "expr temp" "maybe param" "maybe type" "temp"
              (894551 'move' call_tmp[894548](251166 call + call_tmp[894543] "' is out-of-bounds"))
              (251165 call boundsCheckHalt module=[222] HaltWrappers[518] call_tmp[894548])
              (563487 'end of statement' i[251158])
              (407690 'referenced modules list' HaltWrappers[518])
            }
          }
        }
        (396904 'used modules list'(251156 'use' HaltWrappers[518]))
      }
      {
        (251204 call compilerError "This style of array slicing is not yet supported")
      }
    }
    (624131 return _void[46])
  }
  function _array[255540](?).checkSlice[251236](arg _mt[251246]:_MT[201], arg this[251238]:_array[255540](?), arg ranges[251241]:_any[141](?) ..., arg value[251244]:_any[141](?)) : _unknown[42] "always propagate line file info" "insert line file info" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[894557] "expr temp" "maybe param" "maybe type" "temp"
    (894560 'move' call_tmp[894557](251610 call(251607 call (partial) isRectangular _mt[203] this[251238])))
    unknown call_tmp[894562] "expr temp" "maybe param" "maybe type" "temp"
    (894565 'move' call_tmp[894562](251611 call _cond_test call_tmp[894557]))
    if call_tmp[894562]
    {
      unknown ok[251254] "dead at end of block" "insert auto destroy"
      (651229 'init var' ok[251254] 1)
      (251257 'end of statement')
      {
        unknown i[251258] "dead at end of block" "index var" "insert auto destroy"
        (651231 'init var' i[251258] 0)
        (563490 'end of statement')
        unknown tmp[251297] "maybe param" "temp"
        unknown call_tmp[894569] "expr temp" "maybe param" "maybe type" "temp"
        (894572 'move' call_tmp[894569](449588 call rank _mt[203] this[251238]))
        unknown call_tmp[894574] "expr temp" "maybe param" "maybe type" "temp"
        (894577 'move' call_tmp[894574](251261 call - call_tmp[894569] 1))
        (251309 'move' tmp[251297](251307 call chpl_compute_low_param_loop_bound 0 call_tmp[894574]))
        unknown tmp[251298] "maybe param" "temp"
        unknown call_tmp[894581] "expr temp" "maybe param" "maybe type" "temp"
        (894584 'move' call_tmp[894581](449596 call rank _mt[203] this[251238]))
        unknown call_tmp[894586] "expr temp" "maybe param" "maybe type" "temp"
        (894589 'move' call_tmp[894586](251314 call - call_tmp[894581] 1))
        (251319 'move' tmp[251298](251317 call chpl_compute_high_param_loop_bound 0 call_tmp[894586]))
        unknown tmp[251299] "maybe param" "temp"
        (251322 'move' tmp[251299] 1)
        ParamForLoop[251324]
        { i[251258] tmp[251297] tmp[251298] tmp[251299]
          {
            {
              unknown tmp[251286] "temp"
              (251289 'move' tmp[251286](251288 'addr of' ok[251254]))
              unknown tmp[499887] "maybe param" "temp"
              (499898 'move' tmp[499887] tmp[251286])
              unknown call_tmp[894591] "expr temp" "maybe param" "maybe type" "temp"
              (894594 'move' call_tmp[894591](499900 call _cond_invalid tmp[499887]))
              if call_tmp[894591]
              {
                (499903 call compilerError "cannot promote short-circuiting && operator")
              }
              unknown tmp[699264] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[699265] "maybe param" "temp"
              unknown call_tmp[894596] "expr temp" "maybe param" "maybe type" "temp"
              (894599 'move' call_tmp[894596](499888 call isTrue tmp[499887]))
              (699270 'move' tmp[699265](699268 call _cond_test call_tmp[894596]))
              if tmp[699265]
              {
                unknown tmp[699272] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                unknown call_tmp[894603] "expr temp" "maybe param" "maybe type" "temp"
                (894606 'move' call_tmp[894603](251270 call dom _mt[203] value[251244]))
                unknown call_tmp[894610] "expr temp" "maybe param" "maybe type" "temp"
                (894613 'move' call_tmp[894610](251276 call(251273 call (partial) dsiDim _mt[203] call_tmp[894603]) i[251258]))
                unknown call_tmp[894617] "expr temp" "maybe param" "maybe type" "temp"
                (894620 'move' call_tmp[894617](251283 call ranges[251241] i[251258]))
                unknown call_tmp[894622] "expr temp" "maybe param" "maybe type" "temp"
                (894625 'move' call_tmp[894622](251281 call(251278 call (partial) chpl_boundsCheck _mt[203] call_tmp[894610]) call_tmp[894617]))
                (699274 'move' tmp[699272](499891 call isTrue call_tmp[894622]))
                (699279 'move' tmp[699264](699276 '_paramFoldLogical' tmp[699265] tmp[699272]))
              }
              {
                (699284 'move' tmp[699264](699281 '_paramFoldLogical' tmp[699265] 0))
              }
              (251294 call = tmp[251286] tmp[699264])
              (563492 'end of statement' i[251258])
            }
          }
        }
        label _unused_continueLabel[251301]
        label _breakLabel[251300]
      }
      unknown call_tmp[894627] "expr temp" "maybe param" "maybe type" "temp"
      (894630 'move' call_tmp[894627](251598 call == ok[251254] 0))
      unknown call_tmp[894632] "expr temp" "maybe param" "maybe type" "temp"
      (894635 'move' call_tmp[894632](251602 call _cond_test call_tmp[894627]))
      if call_tmp[894632]
      {
        unknown call_tmp[894639] "expr temp" "maybe param" "maybe type" "temp"
        (894642 'move' call_tmp[894639](449637 call rank _mt[203] this[251238]))
        unknown call_tmp[894644] "expr temp" "maybe param" "maybe type" "temp"
        (894647 'move' call_tmp[894644](251590 call == call_tmp[894639] 1))
        unknown call_tmp[894649] "expr temp" "maybe param" "maybe type" "temp"
        (894652 'move' call_tmp[894649](251594 call _cond_test call_tmp[894644]))
        if call_tmp[894649]
        {
          unknown call_tmp[894654] "expr temp" "maybe param" "maybe type" "temp"
          (894657 'move' call_tmp[894654](251344 call ranges[251241] 0))
          unknown call_tmp[894661] "expr temp" "maybe param" "maybe type" "temp"
          (894664 'move' call_tmp[894661](251348 call dom _mt[203] value[251244]))
          unknown call_tmp[894668] "expr temp" "maybe param" "maybe type" "temp"
          (894671 'move' call_tmp[894668](251354 call(251351 call (partial) dsiDim _mt[203] call_tmp[894661]) 0))
          (251336 call halt "array slice out of bounds\n" "note: slice index was " call_tmp[894654] " but array bounds are " call_tmp[894668])
        }
        {
          unknown istr[251358] "dead at end of block" "insert auto destroy"
          (651233 'init var' istr[251358] "")
          (251361 'end of statement')
          unknown bstr[251363] "dead at end of block" "insert auto destroy"
          (651235 'init var' bstr[251363] "")
          (251366 'end of statement')
          {
            unknown i[251367] "dead at end of block" "index var" "insert auto destroy"
            (651237 'init var' i[251367] 0)
            (563495 'end of statement')
            unknown tmp[251418] "maybe param" "temp"
            unknown call_tmp[894675] "expr temp" "maybe param" "maybe type" "temp"
            (894678 'move' call_tmp[894675](449601 call rank _mt[203] this[251238]))
            unknown call_tmp[894680] "expr temp" "maybe param" "maybe type" "temp"
            (894683 'move' call_tmp[894680](251370 call - call_tmp[894675] 1))
            (251430 'move' tmp[251418](251428 call chpl_compute_low_param_loop_bound 0 call_tmp[894680]))
            unknown tmp[251419] "maybe param" "temp"
            unknown call_tmp[894687] "expr temp" "maybe param" "maybe type" "temp"
            (894690 'move' call_tmp[894687](449613 call rank _mt[203] this[251238]))
            unknown call_tmp[894692] "expr temp" "maybe param" "maybe type" "temp"
            (894695 'move' call_tmp[894692](251435 call - call_tmp[894687] 1))
            (251440 'move' tmp[251419](251438 call chpl_compute_high_param_loop_bound 0 call_tmp[894692]))
            unknown tmp[251420] "maybe param" "temp"
            (251443 'move' tmp[251420] 1)
            ParamForLoop[251445]
            { i[251367] tmp[251418] tmp[251419] tmp[251420]
              {
                unknown call_tmp[894697] "expr temp" "maybe param" "maybe type" "temp"
                (894700 'move' call_tmp[894697](251386 call != i[251367] 0))
                unknown call_tmp[894702] "expr temp" "maybe param" "maybe type" "temp"
                (894705 'move' call_tmp[894702](251390 call _cond_test call_tmp[894697]))
                if call_tmp[894702]
                {
                  (251378 call += istr[251358] ", ")
                  (563496 'end of statement' istr[251358])
                  (251382 call += bstr[251363] ", ")
                  (563498 'end of statement' bstr[251363])
                }
                unknown call_tmp[894707] "expr temp" "maybe param" "maybe type" "temp"
                (894710 'move' call_tmp[894707](251400 call ranges[251241] i[251367]))
                unknown call_tmp[894712] "expr temp" "maybe param" "maybe type" "temp"
                (894715 'move' call_tmp[894712](251397 call : call_tmp[894707] string[244]))
                (251394 call += istr[251358] call_tmp[894712])
                (563500 'end of statement' istr[251358] i[251367])
                unknown call_tmp[894719] "expr temp" "maybe param" "maybe type" "temp"
                (894722 'move' call_tmp[894719](251409 call dom _mt[203] value[251244]))
                unknown call_tmp[894726] "expr temp" "maybe param" "maybe type" "temp"
                (894729 'move' call_tmp[894726](251415 call(251412 call (partial) dsiDim _mt[203] call_tmp[894719]) i[251367]))
                unknown call_tmp[894731] "expr temp" "maybe param" "maybe type" "temp"
                (894734 'move' call_tmp[894731](251406 call : call_tmp[894726] string[244]))
                (251403 call += bstr[251363] call_tmp[894731])
                (563503 'end of statement' bstr[251363] i[251367])
              }
            }
            label _unused_continueLabel[251422]
            label _breakLabel[251421]
          }
          unknown dimstr[251455] "dead at end of block" "insert auto destroy"
          (651239 'init var' dimstr[251455] "")
          (251458 'end of statement')
          {
            unknown i[251459] "dead at end of block" "index var" "insert auto destroy"
            (651241 'init var' i[251459] 0)
            (563506 'end of statement')
            unknown tmp[251541] "maybe param" "temp"
            unknown call_tmp[894738] "expr temp" "maybe param" "maybe type" "temp"
            (894741 'move' call_tmp[894738](449617 call rank _mt[203] this[251238]))
            unknown call_tmp[894743] "expr temp" "maybe param" "maybe type" "temp"
            (894746 'move' call_tmp[894743](251462 call - call_tmp[894738] 1))
            (251553 'move' tmp[251541](251551 call chpl_compute_low_param_loop_bound 0 call_tmp[894743]))
            unknown tmp[251542] "maybe param" "temp"
            unknown call_tmp[894750] "expr temp" "maybe param" "maybe type" "temp"
            (894753 'move' call_tmp[894750](449630 call rank _mt[203] this[251238]))
            unknown call_tmp[894755] "expr temp" "maybe param" "maybe type" "temp"
            (894758 'move' call_tmp[894755](251558 call - call_tmp[894750] 1))
            (251563 'move' tmp[251542](251561 call chpl_compute_high_param_loop_bound 0 call_tmp[894755]))
            unknown tmp[251543] "maybe param" "temp"
            (251566 'move' tmp[251543] 1)
            ParamForLoop[251568]
            { i[251459] tmp[251541] tmp[251542] tmp[251543]
              {
                unknown call_tmp[894762] "expr temp" "maybe param" "maybe type" "temp"
                (894765 'move' call_tmp[894762](251522 call dom _mt[203] value[251244]))
                unknown call_tmp[894769] "expr temp" "maybe param" "maybe type" "temp"
                (894772 'move' call_tmp[894769](251528 call(251525 call (partial) dsiDim _mt[203] call_tmp[894762]) i[251459]))
                unknown call_tmp[894776] "expr temp" "maybe param" "maybe type" "temp"
                (894779 'move' call_tmp[894776](251535 call ranges[251241] i[251459]))
                unknown call_tmp[894781] "expr temp" "maybe param" "maybe type" "temp"
                (894784 'move' call_tmp[894781](251533 call(251530 call (partial) chpl_boundsCheck _mt[203] call_tmp[894769]) call_tmp[894776]))
                unknown call_tmp[894786] "expr temp" "maybe param" "maybe type" "temp"
                (894789 'move' call_tmp[894786](251519 call ! call_tmp[894781]))
                unknown call_tmp[894791] "expr temp" "maybe param" "maybe type" "temp"
                (894794 'move' call_tmp[894791](251537 call _cond_test call_tmp[894786]))
                if call_tmp[894791]
                {
                  unknown call_tmp[894796] "expr temp" "maybe param" "maybe type" "temp"
                  (894799 'move' call_tmp[894796](251511 call == dimstr[251455] ""))
                  unknown call_tmp[894801] "expr temp" "maybe param" "maybe type" "temp"
                  (894804 'move' call_tmp[894801](251515 call _cond_test call_tmp[894796]))
                  if call_tmp[894801]
                  {
                    unknown call_tmp[894806] "expr temp" "maybe param" "maybe type" "temp"
                    (894809 'move' call_tmp[894806](251485 call : i[251459] string[244]))
                    unknown call_tmp[894811] "expr temp" "maybe param" "maybe type" "temp"
                    (894814 'move' call_tmp[894811](251482 call + "out of bounds in dimension " call_tmp[894806]))
                    unknown call_tmp[894816] "expr temp" "maybe param" "maybe type" "temp"
                    (894819 'move' call_tmp[894816](251480 call + call_tmp[894811] " because slice index "))
                    unknown call_tmp[894821] "expr temp" "maybe param" "maybe type" "temp"
                    (894824 'move' call_tmp[894821](251495 call ranges[251241] i[251459]))
                    unknown call_tmp[894826] "expr temp" "maybe param" "maybe type" "temp"
                    (894829 'move' call_tmp[894826](251492 call : call_tmp[894821] string[244]))
                    unknown call_tmp[894831] "expr temp" "maybe param" "maybe type" "temp"
                    (894834 'move' call_tmp[894831](251478 call + call_tmp[894816] call_tmp[894826]))
                    unknown call_tmp[894836] "expr temp" "maybe param" "maybe type" "temp"
                    (894839 'move' call_tmp[894836](251476 call + call_tmp[894831] " is not in "))
                    unknown call_tmp[894843] "expr temp" "maybe param" "maybe type" "temp"
                    (894846 'move' call_tmp[894843](251502 call dom _mt[203] value[251244]))
                    unknown call_tmp[894850] "expr temp" "maybe param" "maybe type" "temp"
                    (894853 'move' call_tmp[894850](251508 call(251505 call (partial) dsiDim _mt[203] call_tmp[894843]) i[251459]))
                    unknown call_tmp[894855] "expr temp" "maybe param" "maybe type" "temp"
                    (894858 'move' call_tmp[894855](251499 call : call_tmp[894850] string[244]))
                    unknown call_tmp[894860] "expr temp" "maybe param" "maybe type" "temp"
                    (894863 'move' call_tmp[894860](251474 call + call_tmp[894836] call_tmp[894855]))
                    (251471 call = dimstr[251455] call_tmp[894860])
                    (563507 'end of statement' dimstr[251455] i[251459])
                  }
                }
              }
            }
            label _unused_continueLabel[251545]
            label _breakLabel[251544]
          }
          (251578 call halt "array slice out of bounds\n" "note: slice index was (" istr[251358] ") " "but array bounds are (" bstr[251363] ")\n" "note: " dimstr[251455])
          (563510 'end of statement' istr[251358] bstr[251363] dimstr[251455])
        }
      }
    }
    (624133 return _void[46])
  }
  where {
    (251249 call chpl__isTupleOfRanges ranges[251241])
  }
  function _array[255540](?).this[251618](arg _mt[251635]:_MT[201], ref arg this[251620]:_array[255540](?), const arg i[251632] :
  unknown call_tmp[894867] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[42] "alias scope from this" "no promotion when by ref" "inline" "method" "primary method" "reference to const when const this" "removable array access"
  {
    unknown ret[624137] "RVV" "temp"
    unknown call_tmp[894895] "maybe param" "maybe type" "temp"
    (894898 'move' call_tmp[894895](449646 call _value _mt[203] this[251620]))
    const value[251639] "dead at end of block" "const" "insert auto destroy"
    (651243 'init var' value[251639] call_tmp[894895])
    (251642 'end of statement')
    unknown call_tmp[894900] "expr temp" "maybe param" "maybe type" "temp"
    (894903 'move' call_tmp[894900](251650 call _cond_test 1))
    if call_tmp[894900]
    {
      (251644 call(449652 call (partial) checkAccess _mt[203] this[251620]) i[251632](value = value[251639]))
      (563514 'end of statement' value[251639])
    }
    unknown tmp[499908] "maybe param" "temp"
    (499919 'move' tmp[499908] logAllArrEltAccess[247551])
    unknown call_tmp[894907] "expr temp" "maybe param" "maybe type" "temp"
    (894910 'move' call_tmp[894907](499921 call _cond_invalid tmp[499908]))
    if call_tmp[894907]
    {
      (499924 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[699318] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[699319] "maybe param" "temp"
    unknown call_tmp[894912] "expr temp" "maybe param" "maybe type" "temp"
    (894915 'move' call_tmp[894912](499909 call isTrue tmp[499908]))
    (699324 'move' tmp[699319](699322 call _cond_test call_tmp[894912]))
    if tmp[699319]
    {
      (699329 'move' tmp[699318](699326 '_paramFoldLogical' tmp[699319] 1))
    }
    {
      unknown tmp[499929] "maybe param" "temp"
      (499940 'move' tmp[499929] logDistArrEltAccess[247546])
      unknown call_tmp[894917] "expr temp" "maybe param" "maybe type" "temp"
      (894920 'move' call_tmp[894917](499942 call _cond_invalid tmp[499929]))
      if call_tmp[894917]
      {
        (499945 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[699291] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[699292] "maybe param" "temp"
      unknown call_tmp[894922] "expr temp" "maybe param" "maybe type" "temp"
      (894925 'move' call_tmp[894922](499930 call isTrue tmp[499929]))
      (699297 'move' tmp[699292](699295 call _cond_test call_tmp[894922]))
      if tmp[699292]
      {
        unknown tmp[699299] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[894929] "expr temp" "maybe param" "maybe type" "temp"
        (894932 'move' call_tmp[894929](251670 call(449663 call (partial) chpl_isNonDistributedArray _mt[203] this[251620])))
        unknown call_tmp[894934] "expr temp" "maybe param" "maybe type" "temp"
        (894937 'move' call_tmp[894934](251667 call ! call_tmp[894929]))
        (699301 'move' tmp[699299](499933 call isTrue call_tmp[894934]))
        (699306 'move' tmp[699291](699303 '_paramFoldLogical' tmp[699292] tmp[699299]))
      }
      {
        (699311 'move' tmp[699291](699308 '_paramFoldLogical' tmp[699292] 0))
      }
      unknown tmp[699331] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (699333 'move' tmp[699331](499913 call isTrue tmp[699291]))
      (699338 'move' tmp[699318](699335 '_paramFoldLogical' tmp[699319] tmp[699331]))
    }
    unknown call_tmp[894939] "expr temp" "maybe param" "maybe type" "temp"
    (894942 'move' call_tmp[894939](251671 call _cond_test tmp[699318]))
    if call_tmp[894939]
    {
      (251656 call chpl_debug_writeln "default _array accessor was called")
    }
    unknown tmp[499950] "maybe param" "temp"
    (499961 'move' tmp[499950](251700 call(251697 call (partial) isRectangular _mt[203] this[251620])))
    unknown call_tmp[894946] "expr temp" "maybe param" "maybe type" "temp"
    (894949 'move' call_tmp[894946](499963 call _cond_invalid tmp[499950]))
    if call_tmp[894946]
    {
      (499966 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[699345] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[699346] "maybe param" "temp"
    unknown call_tmp[894951] "expr temp" "maybe param" "maybe type" "temp"
    (894954 'move' call_tmp[894951](499951 call isTrue tmp[499950]))
    (699351 'move' tmp[699346](699349 call _cond_test call_tmp[894951]))
    if tmp[699346]
    {
      (699356 'move' tmp[699345](699353 '_paramFoldLogical' tmp[699346] 1))
    }
    {
      unknown tmp[699358] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[894958] "expr temp" "maybe param" "maybe type" "temp"
      (894961 'move' call_tmp[894958](251705 call(251702 call (partial) isSparse _mt[203] this[251620])))
      (699360 'move' tmp[699358](499955 call isTrue call_tmp[894958]))
      (699365 'move' tmp[699345](699362 '_paramFoldLogical' tmp[699346] tmp[699358]))
    }
    unknown call_tmp[894963] "expr temp" "maybe param" "maybe type" "temp"
    (894966 'move' call_tmp[894963](251706 call _cond_test tmp[699345]))
    if call_tmp[894963]
    {
      unknown call_tmp[894970] "expr temp" "maybe param" "maybe type" "temp"
      (894973 'move' call_tmp[894970](251681 call(251678 call (partial) dsiAccess _mt[203] value[251639]) i[251632]))
      (624142 'move' ret[624137](624141 'addr of' call_tmp[894970]))
      gotoReturn _end_this[624135] _end_this[624135]
      (563519 'end of statement' value[251639])
    }
    {
      unknown call_tmp[894977] "expr temp" "maybe param" "maybe type" "temp"
      (894980 'move' call_tmp[894977](251691 call i[251632] 0))
      unknown call_tmp[894982] "expr temp" "maybe param" "maybe type" "temp"
      (894985 'move' call_tmp[894982](251689 call(251686 call (partial) dsiAccess _mt[203] value[251639]) call_tmp[894977]))
      (624147 'move' ret[624137](624146 'addr of' call_tmp[894982]))
      gotoReturn _end_this[624135] _end_this[624135]
      (563521 'end of statement' value[251639])
    }
    label _end_this[624135]
    (624139 return ret[624137])
  }
  function _array[255540](?).this[251714](arg _mt[251731]:_MT[201], const arg this[251716]:_array[255540](?), const arg i[251728] :
  unknown call_tmp[894989] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "alias scope from this" "inline" "method" "primary method"
  {
    unknown ret[624153] "RVV" "temp"
    unknown call_tmp[895017] "maybe param" "maybe type" "temp"
    (895020 'move' call_tmp[895017](449673 call _value _mt[203] this[251716]))
    const value[251741] "dead at end of block" "const" "insert auto destroy"
    (651245 'init var' value[251741] call_tmp[895017])
    (251744 'end of statement')
    unknown call_tmp[895022] "expr temp" "maybe param" "maybe type" "temp"
    (895025 'move' call_tmp[895022](251752 call _cond_test 1))
    if call_tmp[895022]
    {
      (251746 call(449677 call (partial) checkAccess _mt[203] this[251716]) i[251728](value = value[251741]))
      (563523 'end of statement' value[251741])
    }
    unknown tmp[499971] "maybe param" "temp"
    (499982 'move' tmp[499971] logAllArrEltAccess[247551])
    unknown call_tmp[895029] "expr temp" "maybe param" "maybe type" "temp"
    (895032 'move' call_tmp[895029](499984 call _cond_invalid tmp[499971]))
    if call_tmp[895029]
    {
      (499987 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[699399] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[699400] "maybe param" "temp"
    unknown call_tmp[895034] "expr temp" "maybe param" "maybe type" "temp"
    (895037 'move' call_tmp[895034](499972 call isTrue tmp[499971]))
    (699405 'move' tmp[699400](699403 call _cond_test call_tmp[895034]))
    if tmp[699400]
    {
      (699410 'move' tmp[699399](699407 '_paramFoldLogical' tmp[699400] 1))
    }
    {
      unknown tmp[499992] "maybe param" "temp"
      (500003 'move' tmp[499992] logDistArrEltAccess[247546])
      unknown call_tmp[895039] "expr temp" "maybe param" "maybe type" "temp"
      (895042 'move' call_tmp[895039](500005 call _cond_invalid tmp[499992]))
      if call_tmp[895039]
      {
        (500008 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[699372] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[699373] "maybe param" "temp"
      unknown call_tmp[895044] "expr temp" "maybe param" "maybe type" "temp"
      (895047 'move' call_tmp[895044](499993 call isTrue tmp[499992]))
      (699378 'move' tmp[699373](699376 call _cond_test call_tmp[895044]))
      if tmp[699373]
      {
        unknown tmp[699380] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[895051] "expr temp" "maybe param" "maybe type" "temp"
        (895054 'move' call_tmp[895051](251770 call(449686 call (partial) chpl_isNonDistributedArray _mt[203] this[251716])))
        unknown call_tmp[895056] "expr temp" "maybe param" "maybe type" "temp"
        (895059 'move' call_tmp[895056](251767 call ! call_tmp[895051]))
        (699382 'move' tmp[699380](499996 call isTrue call_tmp[895056]))
        (699387 'move' tmp[699372](699384 '_paramFoldLogical' tmp[699373] tmp[699380]))
      }
      {
        (699392 'move' tmp[699372](699389 '_paramFoldLogical' tmp[699373] 0))
      }
      unknown tmp[699412] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (699414 'move' tmp[699412](499976 call isTrue tmp[699372]))
      (699419 'move' tmp[699399](699416 '_paramFoldLogical' tmp[699400] tmp[699412]))
    }
    unknown call_tmp[895061] "expr temp" "maybe param" "maybe type" "temp"
    (895064 'move' call_tmp[895061](251771 call _cond_test tmp[699399]))
    if call_tmp[895061]
    {
      (251758 call chpl_debug_writeln "default _array accessor was called")
    }
    unknown tmp[500013] "maybe param" "temp"
    (500024 'move' tmp[500013](251800 call(251797 call (partial) isRectangular _mt[203] this[251716])))
    unknown call_tmp[895068] "expr temp" "maybe param" "maybe type" "temp"
    (895071 'move' call_tmp[895068](500026 call _cond_invalid tmp[500013]))
    if call_tmp[895068]
    {
      (500029 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[699426] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[699427] "maybe param" "temp"
    unknown call_tmp[895073] "expr temp" "maybe param" "maybe type" "temp"
    (895076 'move' call_tmp[895073](500014 call isTrue tmp[500013]))
    (699432 'move' tmp[699427](699430 call _cond_test call_tmp[895073]))
    if tmp[699427]
    {
      (699437 'move' tmp[699426](699434 '_paramFoldLogical' tmp[699427] 1))
    }
    {
      unknown tmp[699439] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[895080] "expr temp" "maybe param" "maybe type" "temp"
      (895083 'move' call_tmp[895080](251805 call(251802 call (partial) isSparse _mt[203] this[251716])))
      (699441 'move' tmp[699439](500018 call isTrue call_tmp[895080]))
      (699446 'move' tmp[699426](699443 '_paramFoldLogical' tmp[699427] tmp[699439]))
    }
    unknown call_tmp[895085] "expr temp" "maybe param" "maybe type" "temp"
    (895088 'move' call_tmp[895085](251806 call _cond_test tmp[699426]))
    if call_tmp[895085]
    {
      unknown call_tmp[895092] "expr temp" "maybe param" "maybe type" "temp"
      (895095 'move' call_tmp[895092](251781 call(251778 call (partial) dsiAccess _mt[203] value[251741]) i[251728]))
      (624158 'move' ret[624153](624157 'deref' call_tmp[895092]))
      gotoReturn _end_this[624151] _end_this[624151]
      (563528 'end of statement' value[251741])
    }
    {
      unknown call_tmp[895099] "expr temp" "maybe param" "maybe type" "temp"
      (895102 'move' call_tmp[895099](251791 call i[251728] 0))
      unknown call_tmp[895104] "expr temp" "maybe param" "maybe type" "temp"
      (895107 'move' call_tmp[895104](251789 call(251786 call (partial) dsiAccess _mt[203] value[251741]) call_tmp[895099]))
      (624163 'move' ret[624153](624162 'deref' call_tmp[895104]))
      gotoReturn _end_this[624151] _end_this[624151]
      (563530 'end of statement' value[251741])
    }
    label _end_this[624151]
    (624155 return ret[624153])
  }
  where {
    unknown call_tmp[895111] "expr temp" "maybe param" "maybe type" "temp"
    (895114 'move' call_tmp[895111](407718 call _value _mt[203] this[251716]))
    unknown call_tmp[895118] "expr temp" "maybe param" "maybe type" "temp"
    (895121 'move' call_tmp[895118](251736 call eltType _mt[203] call_tmp[895111]))
    (251734 call shouldReturnRvalueByValue call_tmp[895118])
  }
  function _array[255540](?).this[251815](arg _mt[251832]:_MT[201], const arg this[251817]:_array[255540](?), const arg i[251829] :
  unknown call_tmp[895125] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[42] "alias scope from this" "inline" "method" "primary method"
  {
    unknown ret[624169] "RVV" "temp"
    unknown call_tmp[895153] "maybe param" "maybe type" "temp"
    (895156 'move' call_tmp[895153](449696 call _value _mt[203] this[251817]))
    const value[251836] "dead at end of block" "const" "insert auto destroy"
    (651247 'init var' value[251836] call_tmp[895153])
    (251839 'end of statement')
    unknown call_tmp[895158] "expr temp" "maybe param" "maybe type" "temp"
    (895161 'move' call_tmp[895158](251847 call _cond_test 1))
    if call_tmp[895158]
    {
      (251841 call(449700 call (partial) checkAccess _mt[203] this[251817]) i[251829](value = value[251836]))
      (563532 'end of statement' value[251836])
    }
    unknown tmp[500034] "maybe param" "temp"
    (500045 'move' tmp[500034] logAllArrEltAccess[247551])
    unknown call_tmp[895165] "expr temp" "maybe param" "maybe type" "temp"
    (895168 'move' call_tmp[895165](500047 call _cond_invalid tmp[500034]))
    if call_tmp[895165]
    {
      (500050 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[699480] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[699481] "maybe param" "temp"
    unknown call_tmp[895170] "expr temp" "maybe param" "maybe type" "temp"
    (895173 'move' call_tmp[895170](500035 call isTrue tmp[500034]))
    (699486 'move' tmp[699481](699484 call _cond_test call_tmp[895170]))
    if tmp[699481]
    {
      (699491 'move' tmp[699480](699488 '_paramFoldLogical' tmp[699481] 1))
    }
    {
      unknown tmp[500055] "maybe param" "temp"
      (500066 'move' tmp[500055] logDistArrEltAccess[247546])
      unknown call_tmp[895175] "expr temp" "maybe param" "maybe type" "temp"
      (895178 'move' call_tmp[895175](500068 call _cond_invalid tmp[500055]))
      if call_tmp[895175]
      {
        (500071 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[699453] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[699454] "maybe param" "temp"
      unknown call_tmp[895180] "expr temp" "maybe param" "maybe type" "temp"
      (895183 'move' call_tmp[895180](500056 call isTrue tmp[500055]))
      (699459 'move' tmp[699454](699457 call _cond_test call_tmp[895180]))
      if tmp[699454]
      {
        unknown tmp[699461] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[895187] "expr temp" "maybe param" "maybe type" "temp"
        (895190 'move' call_tmp[895187](251865 call(449709 call (partial) chpl_isNonDistributedArray _mt[203] this[251817])))
        unknown call_tmp[895192] "expr temp" "maybe param" "maybe type" "temp"
        (895195 'move' call_tmp[895192](251862 call ! call_tmp[895187]))
        (699463 'move' tmp[699461](500059 call isTrue call_tmp[895192]))
        (699468 'move' tmp[699453](699465 '_paramFoldLogical' tmp[699454] tmp[699461]))
      }
      {
        (699473 'move' tmp[699453](699470 '_paramFoldLogical' tmp[699454] 0))
      }
      unknown tmp[699493] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (699495 'move' tmp[699493](500039 call isTrue tmp[699453]))
      (699500 'move' tmp[699480](699497 '_paramFoldLogical' tmp[699481] tmp[699493]))
    }
    unknown call_tmp[895197] "expr temp" "maybe param" "maybe type" "temp"
    (895200 'move' call_tmp[895197](251866 call _cond_test tmp[699480]))
    if call_tmp[895197]
    {
      (251853 call chpl_debug_writeln "default _array accessor was called")
    }
    unknown tmp[500076] "maybe param" "temp"
    (500087 'move' tmp[500076](251895 call(251892 call (partial) isRectangular _mt[203] this[251817])))
    unknown call_tmp[895204] "expr temp" "maybe param" "maybe type" "temp"
    (895207 'move' call_tmp[895204](500089 call _cond_invalid tmp[500076]))
    if call_tmp[895204]
    {
      (500092 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[699507] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[699508] "maybe param" "temp"
    unknown call_tmp[895209] "expr temp" "maybe param" "maybe type" "temp"
    (895212 'move' call_tmp[895209](500077 call isTrue tmp[500076]))
    (699513 'move' tmp[699508](699511 call _cond_test call_tmp[895209]))
    if tmp[699508]
    {
      (699518 'move' tmp[699507](699515 '_paramFoldLogical' tmp[699508] 1))
    }
    {
      unknown tmp[699520] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[895216] "expr temp" "maybe param" "maybe type" "temp"
      (895219 'move' call_tmp[895216](251900 call(251897 call (partial) isSparse _mt[203] this[251817])))
      (699522 'move' tmp[699520](500081 call isTrue call_tmp[895216]))
      (699527 'move' tmp[699507](699524 '_paramFoldLogical' tmp[699508] tmp[699520]))
    }
    unknown call_tmp[895221] "expr temp" "maybe param" "maybe type" "temp"
    (895224 'move' call_tmp[895221](251901 call _cond_test tmp[699507]))
    if call_tmp[895221]
    {
      unknown call_tmp[895228] "expr temp" "maybe param" "maybe type" "temp"
      (895231 'move' call_tmp[895228](251876 call(251873 call (partial) dsiAccess _mt[203] value[251836]) i[251829]))
      (624174 'move' ret[624169](624173 'addr of' call_tmp[895228]))
      gotoReturn _end_this[624167] _end_this[624167]
      (563537 'end of statement' value[251836])
    }
    {
      unknown call_tmp[895235] "expr temp" "maybe param" "maybe type" "temp"
      (895238 'move' call_tmp[895235](251886 call i[251829] 0))
      unknown call_tmp[895240] "expr temp" "maybe param" "maybe type" "temp"
      (895243 'move' call_tmp[895240](251884 call(251881 call (partial) dsiAccess _mt[203] value[251836]) call_tmp[895235]))
      (624179 'move' ret[624169](624178 'addr of' call_tmp[895240]))
      gotoReturn _end_this[624167] _end_this[624167]
      (563539 'end of statement' value[251836])
    }
    label _end_this[624167]
    (624171 return ret[624169])
  }
  function _array[255540](?).this[251909](arg _mt[251925]:_MT[201], ref arg this[251911]:_array[255540](?), const arg i[251921] ... :
  unknown call_tmp[895247] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[42] "alias scope from this" "no promotion when by ref" "inline" "method" "primary method" "reference to const when const this" "removable array access"
  {
    unknown ret[624185] "RVV" "temp"
    unknown call_tmp[895263] "expr temp" "maybe param" "maybe type" "temp"
    (895266 'move' call_tmp[895263](251930 call this[251911] i[251921]))
    (624190 'move' ret[624185](624189 'addr of' call_tmp[895263]))
    (624187 return ret[624185])
  }
  function _array[255540](?).this[251934](arg _mt[251950]:_MT[201], const arg this[251936]:_array[255540](?), const arg i[251946] ... :
  unknown call_tmp[895270] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "alias scope from this" "inline" "method" "primary method"
  {
    unknown ret[624194] "RVV" "temp"
    unknown call_tmp[895286] "expr temp" "maybe param" "maybe type" "temp"
    (895289 'move' call_tmp[895286](251961 call this[251936] i[251946]))
    (624199 'move' ret[624194](624198 'deref' call_tmp[895286]))
    (624196 return ret[624194])
  }
  where {
    unknown call_tmp[895293] "expr temp" "maybe param" "maybe type" "temp"
    (895296 'move' call_tmp[895293](407742 call _value _mt[203] this[251936]))
    unknown call_tmp[895300] "expr temp" "maybe param" "maybe type" "temp"
    (895303 'move' call_tmp[895300](251955 call eltType _mt[203] call_tmp[895293]))
    (251953 call shouldReturnRvalueByValue call_tmp[895300])
  }
  function _array[255540](?).this[251966](arg _mt[251982]:_MT[201], const arg this[251968]:_array[255540](?), const arg i[251978] ... :
  unknown call_tmp[895307] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[42] "alias scope from this" "inline" "method" "primary method"
  {
    unknown ret[624203] "RVV" "temp"
    unknown call_tmp[895323] "expr temp" "maybe param" "maybe type" "temp"
    (895326 'move' call_tmp[895323](251987 call this[251968] i[251978]))
    (624208 'move' ret[624203](624207 'addr of' call_tmp[895323]))
    (624205 return ret[624203])
  }
  function _array[255540](?).localAccess[251991](arg _mt[252008]:_MT[201], ref arg this[251993]:_array[255540](?), arg i[252005] :
  unknown call_tmp[895330] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[42] "alias scope from this" "no promotion when by ref" "inline" "method" "primary method" "reference to const when const this"
  {
    unknown ret[624212] "RVV" "temp"
    unknown call_tmp[895358] "maybe param" "maybe type" "temp"
    (895361 'move' call_tmp[895358](449737 call _value _mt[203] this[251993]))
    const value[252012] "dead at end of block" "const" "insert auto destroy"
    (651249 'init var' value[252012] call_tmp[895358])
    (252015 'end of statement')
    unknown call_tmp[895363] "expr temp" "maybe param" "maybe type" "temp"
    (895366 'move' call_tmp[895363](252023 call _cond_test 1))
    if call_tmp[895363]
    {
      (252017 call(449741 call (partial) checkAccess _mt[203] this[251993]) i[252005](value = value[252012]))
      (563544 'end of statement' value[252012])
    }
    unknown tmp[500097] "maybe param" "temp"
    (500108 'move' tmp[500097] logAllArrEltAccess[247551])
    unknown call_tmp[895370] "expr temp" "maybe param" "maybe type" "temp"
    (895373 'move' call_tmp[895370](500110 call _cond_invalid tmp[500097]))
    if call_tmp[895370]
    {
      (500113 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[699561] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[699562] "maybe param" "temp"
    unknown call_tmp[895375] "expr temp" "maybe param" "maybe type" "temp"
    (895378 'move' call_tmp[895375](500098 call isTrue tmp[500097]))
    (699567 'move' tmp[699562](699565 call _cond_test call_tmp[895375]))
    if tmp[699562]
    {
      (699572 'move' tmp[699561](699569 '_paramFoldLogical' tmp[699562] 1))
    }
    {
      unknown tmp[500118] "maybe param" "temp"
      (500129 'move' tmp[500118] logDistArrEltAccess[247546])
      unknown call_tmp[895380] "expr temp" "maybe param" "maybe type" "temp"
      (895383 'move' call_tmp[895380](500131 call _cond_invalid tmp[500118]))
      if call_tmp[895380]
      {
        (500134 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[699534] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[699535] "maybe param" "temp"
      unknown call_tmp[895385] "expr temp" "maybe param" "maybe type" "temp"
      (895388 'move' call_tmp[895385](500119 call isTrue tmp[500118]))
      (699540 'move' tmp[699535](699538 call _cond_test call_tmp[895385]))
      if tmp[699535]
      {
        unknown tmp[699542] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[895392] "expr temp" "maybe param" "maybe type" "temp"
        (895395 'move' call_tmp[895392](252043 call(449750 call (partial) chpl_isNonDistributedArray _mt[203] this[251993])))
        unknown call_tmp[895397] "expr temp" "maybe param" "maybe type" "temp"
        (895400 'move' call_tmp[895397](252040 call ! call_tmp[895392]))
        (699544 'move' tmp[699542](500122 call isTrue call_tmp[895397]))
        (699549 'move' tmp[699534](699546 '_paramFoldLogical' tmp[699535] tmp[699542]))
      }
      {
        (699554 'move' tmp[699534](699551 '_paramFoldLogical' tmp[699535] 0))
      }
      unknown tmp[699574] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (699576 'move' tmp[699574](500102 call isTrue tmp[699534]))
      (699581 'move' tmp[699561](699578 '_paramFoldLogical' tmp[699562] tmp[699574]))
    }
    unknown call_tmp[895402] "expr temp" "maybe param" "maybe type" "temp"
    (895405 'move' call_tmp[895402](252044 call _cond_test tmp[699561]))
    if call_tmp[895402]
    {
      (252029 call chpl_debug_writeln "local _array accessor was called")
    }
    unknown call_tmp[895409] "expr temp" "maybe param" "maybe type" "temp"
    (895412 'move' call_tmp[895409](252091 call(449758 call (partial) chpl_isNonDistributedArray _mt[203] this[251993])))
    unknown call_tmp[895414] "expr temp" "maybe param" "maybe type" "temp"
    (895417 'move' call_tmp[895414](252092 call _cond_test call_tmp[895409]))
    if call_tmp[895414]
    {
      unknown call_tmp[895419] "expr temp" "maybe param" "maybe type" "temp"
      (895422 'move' call_tmp[895419](252051 call this[251993] i[252005]))
      (624217 'move' ret[624212](624216 'addr of' call_tmp[895419]))
      gotoReturn _end_localAccess[624210] _end_localAccess[624210]
    }
    {
      unknown tmp[500139] "maybe param" "temp"
      (500150 'move' tmp[500139](252078 call(252075 call (partial) isRectangular _mt[203] this[251993])))
      unknown call_tmp[895426] "expr temp" "maybe param" "maybe type" "temp"
      (895429 'move' call_tmp[895426](500152 call _cond_invalid tmp[500139]))
      if call_tmp[895426]
      {
        (500155 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[699588] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[699589] "maybe param" "temp"
      unknown call_tmp[895431] "expr temp" "maybe param" "maybe type" "temp"
      (895434 'move' call_tmp[895431](500140 call isTrue tmp[500139]))
      (699594 'move' tmp[699589](699592 call _cond_test call_tmp[895431]))
      if tmp[699589]
      {
        (699599 'move' tmp[699588](699596 '_paramFoldLogical' tmp[699589] 1))
      }
      {
        unknown tmp[699601] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[895438] "expr temp" "maybe param" "maybe type" "temp"
        (895441 'move' call_tmp[895438](252083 call(252080 call (partial) isSparse _mt[203] this[251993])))
        (699603 'move' tmp[699601](500144 call isTrue call_tmp[895438]))
        (699608 'move' tmp[699588](699605 '_paramFoldLogical' tmp[699589] tmp[699601]))
      }
      unknown call_tmp[895443] "expr temp" "maybe param" "maybe type" "temp"
      (895446 'move' call_tmp[895443](252084 call _cond_test tmp[699588]))
      if call_tmp[895443]
      {
        unknown call_tmp[895450] "expr temp" "maybe param" "maybe type" "temp"
        (895453 'move' call_tmp[895450](252059 call(252056 call (partial) dsiLocalAccess _mt[203] value[252012]) i[252005]))
        (624222 'move' ret[624212](624221 'addr of' call_tmp[895450]))
        gotoReturn _end_localAccess[624210] _end_localAccess[624210]
        (563550 'end of statement' value[252012])
      }
      {
        unknown call_tmp[895457] "expr temp" "maybe param" "maybe type" "temp"
        (895460 'move' call_tmp[895457](252069 call i[252005] 0))
        unknown call_tmp[895462] "expr temp" "maybe param" "maybe type" "temp"
        (895465 'move' call_tmp[895462](252067 call(252064 call (partial) dsiLocalAccess _mt[203] value[252012]) call_tmp[895457]))
        (624227 'move' ret[624212](624226 'addr of' call_tmp[895462]))
        gotoReturn _end_localAccess[624210] _end_localAccess[624210]
        (563552 'end of statement' value[252012])
      }
    }
    label _end_localAccess[624210]
    (624214 return ret[624212])
  }
  function _array[255540](?).localAccess[252100](arg _mt[252117]:_MT[201], const arg this[252102]:_array[255540](?), arg i[252114] :
  unknown call_tmp[895469] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "alias scope from this" "inline" "method" "primary method"
  {
    unknown ret[624233] "RVV" "temp"
    unknown call_tmp[895497] "maybe param" "maybe type" "temp"
    (895500 'move' call_tmp[895497](449766 call _value _mt[203] this[252102]))
    const value[252127] "dead at end of block" "const" "insert auto destroy"
    (651251 'init var' value[252127] call_tmp[895497])
    (252130 'end of statement')
    unknown call_tmp[895502] "expr temp" "maybe param" "maybe type" "temp"
    (895505 'move' call_tmp[895502](252138 call _cond_test 1))
    if call_tmp[895502]
    {
      (252132 call(449770 call (partial) checkAccess _mt[203] this[252102]) i[252114](value = value[252127]))
      (563554 'end of statement' value[252127])
    }
    unknown tmp[500160] "maybe param" "temp"
    (500171 'move' tmp[500160] logAllArrEltAccess[247551])
    unknown call_tmp[895509] "expr temp" "maybe param" "maybe type" "temp"
    (895512 'move' call_tmp[895509](500173 call _cond_invalid tmp[500160]))
    if call_tmp[895509]
    {
      (500176 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[699642] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[699643] "maybe param" "temp"
    unknown call_tmp[895514] "expr temp" "maybe param" "maybe type" "temp"
    (895517 'move' call_tmp[895514](500161 call isTrue tmp[500160]))
    (699648 'move' tmp[699643](699646 call _cond_test call_tmp[895514]))
    if tmp[699643]
    {
      (699653 'move' tmp[699642](699650 '_paramFoldLogical' tmp[699643] 1))
    }
    {
      unknown tmp[500181] "maybe param" "temp"
      (500192 'move' tmp[500181] logDistArrEltAccess[247546])
      unknown call_tmp[895519] "expr temp" "maybe param" "maybe type" "temp"
      (895522 'move' call_tmp[895519](500194 call _cond_invalid tmp[500181]))
      if call_tmp[895519]
      {
        (500197 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[699615] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[699616] "maybe param" "temp"
      unknown call_tmp[895524] "expr temp" "maybe param" "maybe type" "temp"
      (895527 'move' call_tmp[895524](500182 call isTrue tmp[500181]))
      (699621 'move' tmp[699616](699619 call _cond_test call_tmp[895524]))
      if tmp[699616]
      {
        unknown tmp[699623] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[895531] "expr temp" "maybe param" "maybe type" "temp"
        (895534 'move' call_tmp[895531](252156 call(449779 call (partial) chpl_isNonDistributedArray _mt[203] this[252102])))
        unknown call_tmp[895536] "expr temp" "maybe param" "maybe type" "temp"
        (895539 'move' call_tmp[895536](252153 call ! call_tmp[895531]))
        (699625 'move' tmp[699623](500185 call isTrue call_tmp[895536]))
        (699630 'move' tmp[699615](699627 '_paramFoldLogical' tmp[699616] tmp[699623]))
      }
      {
        (699635 'move' tmp[699615](699632 '_paramFoldLogical' tmp[699616] 0))
      }
      unknown tmp[699655] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (699657 'move' tmp[699655](500165 call isTrue tmp[699615]))
      (699662 'move' tmp[699642](699659 '_paramFoldLogical' tmp[699643] tmp[699655]))
    }
    unknown call_tmp[895541] "expr temp" "maybe param" "maybe type" "temp"
    (895544 'move' call_tmp[895541](252157 call _cond_test tmp[699642]))
    if call_tmp[895541]
    {
      (252144 call chpl_debug_writeln "local _array accessor was called")
    }
    unknown call_tmp[895548] "expr temp" "maybe param" "maybe type" "temp"
    (895551 'move' call_tmp[895548](252204 call(449787 call (partial) chpl_isNonDistributedArray _mt[203] this[252102])))
    unknown call_tmp[895553] "expr temp" "maybe param" "maybe type" "temp"
    (895556 'move' call_tmp[895553](252205 call _cond_test call_tmp[895548]))
    if call_tmp[895553]
    {
      unknown call_tmp[895558] "expr temp" "maybe param" "maybe type" "temp"
      (895561 'move' call_tmp[895558](252164 call this[252102] i[252114]))
      (624238 'move' ret[624233](624237 'deref' call_tmp[895558]))
      gotoReturn _end_localAccess[624231] _end_localAccess[624231]
    }
    {
      unknown tmp[500202] "maybe param" "temp"
      (500213 'move' tmp[500202](252191 call(252188 call (partial) isRectangular _mt[203] this[252102])))
      unknown call_tmp[895565] "expr temp" "maybe param" "maybe type" "temp"
      (895568 'move' call_tmp[895565](500215 call _cond_invalid tmp[500202]))
      if call_tmp[895565]
      {
        (500218 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[699669] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[699670] "maybe param" "temp"
      unknown call_tmp[895570] "expr temp" "maybe param" "maybe type" "temp"
      (895573 'move' call_tmp[895570](500203 call isTrue tmp[500202]))
      (699675 'move' tmp[699670](699673 call _cond_test call_tmp[895570]))
      if tmp[699670]
      {
        (699680 'move' tmp[699669](699677 '_paramFoldLogical' tmp[699670] 1))
      }
      {
        unknown tmp[699682] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[895577] "expr temp" "maybe param" "maybe type" "temp"
        (895580 'move' call_tmp[895577](252196 call(252193 call (partial) isSparse _mt[203] this[252102])))
        (699684 'move' tmp[699682](500207 call isTrue call_tmp[895577]))
        (699689 'move' tmp[699669](699686 '_paramFoldLogical' tmp[699670] tmp[699682]))
      }
      unknown call_tmp[895582] "expr temp" "maybe param" "maybe type" "temp"
      (895585 'move' call_tmp[895582](252197 call _cond_test tmp[699669]))
      if call_tmp[895582]
      {
        unknown call_tmp[895589] "expr temp" "maybe param" "maybe type" "temp"
        (895592 'move' call_tmp[895589](252172 call(252169 call (partial) dsiLocalAccess _mt[203] value[252127]) i[252114]))
        (624243 'move' ret[624233](624242 'deref' call_tmp[895589]))
        gotoReturn _end_localAccess[624231] _end_localAccess[624231]
        (563560 'end of statement' value[252127])
      }
      {
        unknown call_tmp[895596] "expr temp" "maybe param" "maybe type" "temp"
        (895599 'move' call_tmp[895596](252182 call i[252114] 0))
        unknown call_tmp[895601] "expr temp" "maybe param" "maybe type" "temp"
        (895604 'move' call_tmp[895601](252180 call(252177 call (partial) dsiLocalAccess _mt[203] value[252127]) call_tmp[895596]))
        (624248 'move' ret[624233](624247 'deref' call_tmp[895601]))
        gotoReturn _end_localAccess[624231] _end_localAccess[624231]
        (563562 'end of statement' value[252127])
      }
    }
    label _end_localAccess[624231]
    (624235 return ret[624233])
  }
  where {
    unknown call_tmp[895608] "expr temp" "maybe param" "maybe type" "temp"
    (895611 'move' call_tmp[895608](407762 call _value _mt[203] this[252102]))
    unknown call_tmp[895615] "expr temp" "maybe param" "maybe type" "temp"
    (895618 'move' call_tmp[895615](252122 call eltType _mt[203] call_tmp[895608]))
    (252120 call shouldReturnRvalueByValue call_tmp[895615])
  }
  function _array[255540](?).localAccess[252214](arg _mt[252231]:_MT[201], const arg this[252216]:_array[255540](?), arg i[252228] :
  unknown call_tmp[895622] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[42] "alias scope from this" "inline" "method" "primary method"
  {
    unknown ret[624254] "RVV" "temp"
    unknown call_tmp[895650] "maybe param" "maybe type" "temp"
    (895653 'move' call_tmp[895650](449795 call _value _mt[203] this[252216]))
    const value[252235] "dead at end of block" "const" "insert auto destroy"
    (651253 'init var' value[252235] call_tmp[895650])
    (252238 'end of statement')
    unknown call_tmp[895655] "expr temp" "maybe param" "maybe type" "temp"
    (895658 'move' call_tmp[895655](252246 call _cond_test 1))
    if call_tmp[895655]
    {
      (252240 call(449799 call (partial) checkAccess _mt[203] this[252216]) i[252228](value = value[252235]))
      (563564 'end of statement' value[252235])
    }
    unknown tmp[500223] "maybe param" "temp"
    (500234 'move' tmp[500223] logAllArrEltAccess[247551])
    unknown call_tmp[895662] "expr temp" "maybe param" "maybe type" "temp"
    (895665 'move' call_tmp[895662](500236 call _cond_invalid tmp[500223]))
    if call_tmp[895662]
    {
      (500239 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[699723] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[699724] "maybe param" "temp"
    unknown call_tmp[895667] "expr temp" "maybe param" "maybe type" "temp"
    (895670 'move' call_tmp[895667](500224 call isTrue tmp[500223]))
    (699729 'move' tmp[699724](699727 call _cond_test call_tmp[895667]))
    if tmp[699724]
    {
      (699734 'move' tmp[699723](699731 '_paramFoldLogical' tmp[699724] 1))
    }
    {
      unknown tmp[500244] "maybe param" "temp"
      (500255 'move' tmp[500244] logDistArrEltAccess[247546])
      unknown call_tmp[895672] "expr temp" "maybe param" "maybe type" "temp"
      (895675 'move' call_tmp[895672](500257 call _cond_invalid tmp[500244]))
      if call_tmp[895672]
      {
        (500260 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[699696] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[699697] "maybe param" "temp"
      unknown call_tmp[895677] "expr temp" "maybe param" "maybe type" "temp"
      (895680 'move' call_tmp[895677](500245 call isTrue tmp[500244]))
      (699702 'move' tmp[699697](699700 call _cond_test call_tmp[895677]))
      if tmp[699697]
      {
        unknown tmp[699704] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[895684] "expr temp" "maybe param" "maybe type" "temp"
        (895687 'move' call_tmp[895684](252264 call(449808 call (partial) chpl_isNonDistributedArray _mt[203] this[252216])))
        unknown call_tmp[895689] "expr temp" "maybe param" "maybe type" "temp"
        (895692 'move' call_tmp[895689](252261 call ! call_tmp[895684]))
        (699706 'move' tmp[699704](500248 call isTrue call_tmp[895689]))
        (699711 'move' tmp[699696](699708 '_paramFoldLogical' tmp[699697] tmp[699704]))
      }
      {
        (699716 'move' tmp[699696](699713 '_paramFoldLogical' tmp[699697] 0))
      }
      unknown tmp[699736] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (699738 'move' tmp[699736](500228 call isTrue tmp[699696]))
      (699743 'move' tmp[699723](699740 '_paramFoldLogical' tmp[699724] tmp[699736]))
    }
    unknown call_tmp[895694] "expr temp" "maybe param" "maybe type" "temp"
    (895697 'move' call_tmp[895694](252265 call _cond_test tmp[699723]))
    if call_tmp[895694]
    {
      (252252 call chpl_debug_writeln "local _array accessor was called")
    }
    unknown call_tmp[895701] "expr temp" "maybe param" "maybe type" "temp"
    (895704 'move' call_tmp[895701](252312 call(449816 call (partial) chpl_isNonDistributedArray _mt[203] this[252216])))
    unknown call_tmp[895706] "expr temp" "maybe param" "maybe type" "temp"
    (895709 'move' call_tmp[895706](252313 call _cond_test call_tmp[895701]))
    if call_tmp[895706]
    {
      unknown call_tmp[895711] "expr temp" "maybe param" "maybe type" "temp"
      (895714 'move' call_tmp[895711](252272 call this[252216] i[252228]))
      (624259 'move' ret[624254](624258 'addr of' call_tmp[895711]))
      gotoReturn _end_localAccess[624252] _end_localAccess[624252]
    }
    {
      unknown tmp[500265] "maybe param" "temp"
      (500276 'move' tmp[500265](252299 call(252296 call (partial) isRectangular _mt[203] this[252216])))
      unknown call_tmp[895718] "expr temp" "maybe param" "maybe type" "temp"
      (895721 'move' call_tmp[895718](500278 call _cond_invalid tmp[500265]))
      if call_tmp[895718]
      {
        (500281 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[699750] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[699751] "maybe param" "temp"
      unknown call_tmp[895723] "expr temp" "maybe param" "maybe type" "temp"
      (895726 'move' call_tmp[895723](500266 call isTrue tmp[500265]))
      (699756 'move' tmp[699751](699754 call _cond_test call_tmp[895723]))
      if tmp[699751]
      {
        (699761 'move' tmp[699750](699758 '_paramFoldLogical' tmp[699751] 1))
      }
      {
        unknown tmp[699763] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[895730] "expr temp" "maybe param" "maybe type" "temp"
        (895733 'move' call_tmp[895730](252304 call(252301 call (partial) isSparse _mt[203] this[252216])))
        (699765 'move' tmp[699763](500270 call isTrue call_tmp[895730]))
        (699770 'move' tmp[699750](699767 '_paramFoldLogical' tmp[699751] tmp[699763]))
      }
      unknown call_tmp[895735] "expr temp" "maybe param" "maybe type" "temp"
      (895738 'move' call_tmp[895735](252305 call _cond_test tmp[699750]))
      if call_tmp[895735]
      {
        unknown call_tmp[895742] "expr temp" "maybe param" "maybe type" "temp"
        (895745 'move' call_tmp[895742](252280 call(252277 call (partial) dsiLocalAccess _mt[203] value[252235]) i[252228]))
        (624264 'move' ret[624254](624263 'addr of' call_tmp[895742]))
        gotoReturn _end_localAccess[624252] _end_localAccess[624252]
        (563570 'end of statement' value[252235])
      }
      {
        unknown call_tmp[895749] "expr temp" "maybe param" "maybe type" "temp"
        (895752 'move' call_tmp[895749](252290 call i[252228] 0))
        unknown call_tmp[895754] "expr temp" "maybe param" "maybe type" "temp"
        (895757 'move' call_tmp[895754](252288 call(252285 call (partial) dsiLocalAccess _mt[203] value[252235]) call_tmp[895749]))
        (624269 'move' ret[624254](624268 'addr of' call_tmp[895754]))
        gotoReturn _end_localAccess[624252] _end_localAccess[624252]
        (563572 'end of statement' value[252235])
      }
    }
    label _end_localAccess[624252]
    (624256 return ret[624254])
  }
  function _array[255540](?).localAccess[252321](arg _mt[252337]:_MT[201], ref arg this[252323]:_array[255540](?), arg i[252333] ... :
  unknown call_tmp[895761] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[42] "alias scope from this" "no promotion when by ref" "inline" "method" "primary method" "reference to const when const this"
  {
    unknown ret[624275] "RVV" "temp"
    unknown call_tmp[895779] "expr temp" "maybe param" "maybe type" "temp"
    (895782 'move' call_tmp[895779](252342 call(449826 call (partial) localAccess _mt[203] this[252323]) i[252333]))
    (624280 'move' ret[624275](624279 'addr of' call_tmp[895779]))
    (624277 return ret[624275])
  }
  function _array[255540](?).localAccess[252346](arg _mt[252362]:_MT[201], const arg this[252348]:_array[255540](?), arg i[252358] ... :
  unknown call_tmp[895786] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "alias scope from this" "inline" "method" "primary method"
  {
    unknown ret[624284] "RVV" "temp"
    unknown call_tmp[895804] "expr temp" "maybe param" "maybe type" "temp"
    (895807 'move' call_tmp[895804](252373 call(449835 call (partial) localAccess _mt[203] this[252348]) i[252358]))
    (624289 'move' ret[624284](624288 'deref' call_tmp[895804]))
    (624286 return ret[624284])
  }
  where {
    unknown call_tmp[895811] "expr temp" "maybe param" "maybe type" "temp"
    (895814 'move' call_tmp[895811](407786 call _value _mt[203] this[252348]))
    unknown call_tmp[895818] "expr temp" "maybe param" "maybe type" "temp"
    (895821 'move' call_tmp[895818](252367 call eltType _mt[203] call_tmp[895811]))
    (252365 call shouldReturnRvalueByValue call_tmp[895818])
  }
  function _array[255540](?).localAccess[252378](arg _mt[252394]:_MT[201], const arg this[252380]:_array[255540](?), arg i[252390] ... :
  unknown call_tmp[895825] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[42] "alias scope from this" "inline" "method" "primary method"
  {
    unknown ret[624293] "RVV" "temp"
    unknown call_tmp[895843] "expr temp" "maybe param" "maybe type" "temp"
    (895846 'move' call_tmp[895843](252399 call(449844 call (partial) localAccess _mt[203] this[252380]) i[252390]))
    (624298 'move' ret[624293](624297 'addr of' call_tmp[895843]))
    (624295 return ret[624293])
  }
  function _array[255540](?).this[252403](arg _mt[252411]:_MT[201], arg this[252405]:_array[255540](?), arg d[252408]:_domain[225034](?)) : _unknown[42] "no promotion when by ref" "method" "primary method" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[624302] "RVV" "temp"
    unknown call_tmp[895850] "expr temp" "maybe param" "maybe type" "temp"
    (895853 'move' call_tmp[895850](252423 call rank _mt[203] d[252408]))
    unknown call_tmp[895857] "expr temp" "maybe param" "maybe type" "temp"
    (895860 'move' call_tmp[895857](449850 call rank _mt[203] this[252405]))
    unknown call_tmp[895862] "expr temp" "maybe param" "maybe type" "temp"
    (895865 'move' call_tmp[895862](252420 call != call_tmp[895850] call_tmp[895857]))
    unknown call_tmp[895867] "expr temp" "maybe param" "maybe type" "temp"
    (895870 'move' call_tmp[895867](252427 call _cond_test call_tmp[895862]))
    if call_tmp[895867]
    {
      (252415 call compilerError "slicing an array with a domain of a different rank")
    }
    unknown call_tmp[895872] "expr temp" "maybe param" "maybe type" "temp"
    (895875 'move' call_tmp[895872](252438 call _cond_test 1))
    if call_tmp[895872]
    {
      unknown call_tmp[895881] "expr temp" "maybe param" "maybe type" "temp"
      (895884 'move' call_tmp[895881](449859 call _value _mt[203] this[252405]))
      (252433 call(449854 call (partial) checkSlice _mt[203] this[252405]) d[252408] call_tmp[895881])
    }
    (252449 call(252446 call (partial) chpl_checkNegativeStride _mt[203] d[252408]))
    (563579 'end of statement')
    const tmp[252491] "dead at end of block" "const" "insert auto destroy" "temp"
    unknown tmp[699777] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[699778] "maybe param" "temp"
    unknown call_tmp[895890] "expr temp" "maybe param" "maybe type" "temp"
    (895893 'move' call_tmp[895890](407796 call _value _mt[203] this[252405]))
    unknown call_tmp[895897] "expr temp" "maybe param" "maybe type" "temp"
    (895900 'move' call_tmp[895897](252459 call(252456 call (partial) isSliceArrayView _mt[203] call_tmp[895890])))
    (699783 'move' tmp[699778](699781 call _cond_test call_tmp[895897]))
    if tmp[699778]
    {
      unknown tmp[699785] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[895904] "expr temp" "maybe param" "maybe type" "temp"
      (895907 'move' call_tmp[895904](252462 call _value _mt[203] this[252405]))
      unknown call_tmp[895911] "expr temp" "maybe param" "maybe type" "temp"
      (895914 'move' call_tmp[895911](252465 call arr _mt[203] call_tmp[895904]))
      unknown call_tmp[895918] "expr temp" "maybe param" "maybe type" "temp"
      (895921 'move' call_tmp[895918](252469 call _value _mt[203] this[252405]))
      unknown call_tmp[895925] "expr temp" "maybe param" "maybe type" "temp"
      (895928 'move' call_tmp[895925](252472 call _ArrPid _mt[203] call_tmp[895918]))
      (699787 'move' tmp[699785](252475 call _build_tuple call_tmp[895911] call_tmp[895925]))
      (699792 'move' tmp[699777](699789 '_paramFoldLogical' tmp[699778] tmp[699785]))
    }
    {
      unknown tmp[699794] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[895932] "expr temp" "maybe param" "maybe type" "temp"
      (895935 'move' call_tmp[895932](252479 call _value _mt[203] this[252405]))
      unknown call_tmp[895939] "expr temp" "maybe param" "maybe type" "temp"
      (895942 'move' call_tmp[895939](252483 call _pid _mt[203] this[252405]))
      (699796 'move' tmp[699794](252486 call _build_tuple call_tmp[895932] call_tmp[895939]))
      (699801 'move' tmp[699777](699798 '_paramFoldLogical' tmp[699778] tmp[699794]))
    }
    (651255 'init var' tmp[252491] tmp[699777])
    (252498 call _check_tuple_var_decl tmp[252491] 2)
    (563580 'end of statement')
    unknown call_tmp[895944] "maybe param" "maybe type" "temp"
    (895947 'move' call_tmp[895944](252492 call tmp[252491] 0))
    const arr[252451] "dead at end of block" "const" "insert auto destroy"
    (651257 'init var' arr[252451] call_tmp[895944])
    unknown call_tmp[895949] "maybe param" "maybe type" "temp"
    (895952 'move' call_tmp[895949](252495 call tmp[252491] 1))
    const arrpid[252453] "dead at end of block" "const" "insert auto destroy"
    (651259 'init var' arrpid[252453] call_tmp[895949])
    (252503 'end of statement')
    unknown call_tmp[895956] "expr temp" "maybe param" "maybe type" "temp"
    (895959 'move' call_tmp[895956](252512 call eltType _mt[203] this[252405]))
    unknown call_tmp[895963] "expr temp" "maybe param" "maybe type" "temp"
    (895966 'move' call_tmp[895963](252517 call _pid _mt[203] d[252408]))
    unknown call_tmp[895970] "expr temp" "maybe param" "maybe type" "temp"
    (895973 'move' call_tmp[895970](252522 call _instance _mt[203] d[252408]))
    unknown call_tmp[895975] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (895978 'move' call_tmp[895975](1000440 'new' ArrayViewSliceArr[431012](?)(eltType = call_tmp[895956])(_DomPid = call_tmp[895963])(dom = call_tmp[895970])(_ArrPid = arrpid[252453])(_ArrInstance = arr[252451])(_chpl_manager = unmanaged[183](?))))
    unknown a[252505] "dead at end of block" "insert auto destroy"
    (651261 'init var' a[252505] call_tmp[895975])
    (252531 'end of statement' arrpid[252453] arr[252451])
    unknown call_tmp[895982] "expr temp" "maybe param" "maybe type" "temp"
    (895985 'move' call_tmp[895982](252533 call _value _mt[203] d[252408]))
    (252539 call(252536 call (partial) add_arr _mt[203] call_tmp[895982]) a[252505](locking = 1)(addToList = 0))
    (563583 'end of statement' a[252505])
    unknown call_tmp[895989] "expr temp" "maybe param" "maybe type" "temp"
    (895992 'move' call_tmp[895989](252547 call _newArray a[252505]))
    (624307 'move' ret[624302](624306 'deref' call_tmp[895989]))
    gotoReturn _end_this[624300] _end_this[624300]
    (563585 'end of statement' a[252505])
    label _end_this[624300]
    (624304 return ret[624302])
  }
  function _array[255540](?).this[252551](arg _mt[252559]:_MT[201], arg this[252553]:_array[255540](?), arg ranges[252556]:_any[141](?) ...) : _unknown[42] "no promotion when by ref" "method" "primary method" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[624313] "RVV" "temp"
    unknown call_tmp[895996] "expr temp" "maybe param" "maybe type" "temp"
    (895999 'move' call_tmp[895996](252573 call _cond_test 1))
    if call_tmp[895996]
    {
      unknown call_tmp[896005] "expr temp" "maybe param" "maybe type" "temp"
      (896008 'move' call_tmp[896005](449879 call _value _mt[203] this[252553]))
      (252566 call(449874 call (partial) checkSlice _mt[203] this[252553])(252568 'expand_tuple' ranges[252556])(value = call_tmp[896005]))
    }
    unknown call_tmp[896012] "maybe param" "maybe type" "temp"
    (896015 'move' call_tmp[896012](252581 call(449884 call (partial) _dom _mt[203] this[252553])(252583 'expand_tuple' ranges[252556])))
    unknown d[252579] "dead at end of block" "no auto destroy"
    (651263 'init var' d[252579] call_tmp[896012])
    (252585 'end of statement')
    unknown call_tmp[896019] "expr temp" "maybe param" "maybe type" "temp"
    (896022 'move' call_tmp[896019](252589 call _value _mt[203] d[252579]))
    unknown call_tmp[896026] "expr temp" "maybe param" "maybe type" "temp"
    (896029 'move' call_tmp[896026](252592 call _free_when_no_arrs _mt[203] call_tmp[896019]))
    (252586 call = call_tmp[896026] 1)
    (563588 'end of statement' d[252579])
    unknown call_tmp[896033] "expr temp" "maybe param" "maybe type" "temp"
    (896036 'move' call_tmp[896033](252599 call _value _mt[203] d[252579]))
    unknown call_tmp[896040] "expr temp" "maybe param" "maybe type" "temp"
    (896043 'move' call_tmp[896040](252602 call definedConst _mt[203] call_tmp[896033]))
    (252596 call = call_tmp[896040] 1)
    (563590 'end of statement' d[252579])
    (252610 call(252607 call (partial) chpl_checkNegativeStride _mt[203] d[252579]))
    (563592 'end of statement' d[252579])
    const tmp[252652] "dead at end of block" "const" "insert auto destroy" "temp"
    unknown tmp[699808] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[699809] "maybe param" "temp"
    unknown call_tmp[896049] "expr temp" "maybe param" "maybe type" "temp"
    (896052 'move' call_tmp[896049](407811 call _value _mt[203] this[252553]))
    unknown call_tmp[896056] "expr temp" "maybe param" "maybe type" "temp"
    (896059 'move' call_tmp[896056](252620 call(252617 call (partial) isSliceArrayView _mt[203] call_tmp[896049])))
    (699814 'move' tmp[699809](699812 call _cond_test call_tmp[896056]))
    if tmp[699809]
    {
      unknown tmp[699816] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[896063] "expr temp" "maybe param" "maybe type" "temp"
      (896066 'move' call_tmp[896063](252623 call _value _mt[203] this[252553]))
      unknown call_tmp[896070] "expr temp" "maybe param" "maybe type" "temp"
      (896073 'move' call_tmp[896070](252626 call arr _mt[203] call_tmp[896063]))
      unknown call_tmp[896077] "expr temp" "maybe param" "maybe type" "temp"
      (896080 'move' call_tmp[896077](252630 call _value _mt[203] this[252553]))
      unknown call_tmp[896084] "expr temp" "maybe param" "maybe type" "temp"
      (896087 'move' call_tmp[896084](252633 call _ArrPid _mt[203] call_tmp[896077]))
      (699818 'move' tmp[699816](252636 call _build_tuple call_tmp[896070] call_tmp[896084]))
      (699823 'move' tmp[699808](699820 '_paramFoldLogical' tmp[699809] tmp[699816]))
    }
    {
      unknown tmp[699825] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[896091] "expr temp" "maybe param" "maybe type" "temp"
      (896094 'move' call_tmp[896091](252640 call _value _mt[203] this[252553]))
      unknown call_tmp[896098] "expr temp" "maybe param" "maybe type" "temp"
      (896101 'move' call_tmp[896098](252644 call _pid _mt[203] this[252553]))
      (699827 'move' tmp[699825](252647 call _build_tuple call_tmp[896091] call_tmp[896098]))
      (699832 'move' tmp[699808](699829 '_paramFoldLogical' tmp[699809] tmp[699825]))
    }
    (651265 'init var' tmp[252652] tmp[699808])
    (252659 call _check_tuple_var_decl tmp[252652] 2)
    (563594 'end of statement')
    unknown call_tmp[896103] "maybe param" "maybe type" "temp"
    (896106 'move' call_tmp[896103](252653 call tmp[252652] 0))
    const arr[252612] "dead at end of block" "const" "insert auto destroy"
    (651267 'init var' arr[252612] call_tmp[896103])
    unknown call_tmp[896108] "maybe param" "maybe type" "temp"
    (896111 'move' call_tmp[896108](252656 call tmp[252652] 1))
    const arrpid[252614] "dead at end of block" "const" "insert auto destroy"
    (651269 'init var' arrpid[252614] call_tmp[896108])
    (252664 'end of statement')
    unknown call_tmp[896115] "expr temp" "maybe param" "maybe type" "temp"
    (896118 'move' call_tmp[896115](252673 call eltType _mt[203] this[252553]))
    unknown call_tmp[896122] "expr temp" "maybe param" "maybe type" "temp"
    (896125 'move' call_tmp[896122](252678 call _pid _mt[203] d[252579]))
    unknown call_tmp[896129] "expr temp" "maybe param" "maybe type" "temp"
    (896132 'move' call_tmp[896129](252683 call _instance _mt[203] d[252579]))
    unknown call_tmp[896134] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (896137 'move' call_tmp[896134](1000441 'new' ArrayViewSliceArr[431012](?)(eltType = call_tmp[896115])(_DomPid = call_tmp[896122])(dom = call_tmp[896129])(_ArrPid = arrpid[252614])(_ArrInstance = arr[252612])(_chpl_manager = unmanaged[183](?))))
    unknown a[252666] "dead at end of block" "insert auto destroy"
    (651271 'init var' a[252666] call_tmp[896134])
    (252692 'end of statement' d[252579] arrpid[252614] arr[252612])
    unknown call_tmp[896141] "expr temp" "maybe param" "maybe type" "temp"
    (896144 'move' call_tmp[896141](252694 call _value _mt[203] d[252579]))
    (252700 call(252697 call (partial) add_arr _mt[203] call_tmp[896141]) a[252666](locking = 0)(addToList = 0))
    (563598 'end of statement' d[252579] a[252666])
    unknown call_tmp[896148] "expr temp" "maybe param" "maybe type" "temp"
    (896151 'move' call_tmp[896148](252708 call _newArray a[252666]))
    (624318 'move' ret[624313](624317 'deref' call_tmp[896148]))
    gotoReturn _end_this[624311] _end_this[624311]
    (563601 'end of statement' a[252666])
    label _end_this[624311]
    (624315 return ret[624313])
  }
  where {
    (252562 call chpl__isTupleOfRanges ranges[252556])
  }
  function _array[255540](?).this[252713](arg _mt[252721]:_MT[201], arg this[252715]:_array[255540](?), arg args[252718]:_any[141](?) ...) : _unknown[42] "no promotion when by ref" "method" "primary method" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[624324] "RVV" "temp"
    unknown call_tmp[896155] "expr temp" "maybe param" "maybe type" "temp"
    (896158 'move' call_tmp[896155](252739 call _cond_test 1))
    if call_tmp[896155]
    {
      (252735 call(449901 call (partial) checkRankChange _mt[203] this[252715]) args[252718])
    }
    unknown call_tmp[896164] "maybe param" "maybe type" "temp"
    (896167 'move' call_tmp[896164](252750 call(252747 call (partial) _dom _mt[203] this[252715])(252752 'expand_tuple' args[252718])))
    unknown rcdom[252745] "dead at end of block" "insert auto destroy" "no copy"
    (651273 'init var' rcdom[252745] call_tmp[896164])
    (252754 'end of statement')
    unknown call_tmp[896171] "expr temp" "maybe param" "maybe type" "temp"
    (896174 'move' call_tmp[896171](252758 call definedConst _mt[203] rcdom[252745]))
    (252755 call = call_tmp[896171] 1)
    (563604 'end of statement' rcdom[252745])
    (252766 call(252763 call (partial) chpl_checkNegativeStride _mt[203] rcdom[252745]))
    (563606 'end of statement' rcdom[252745])
    unknown call_tmp[896180] "expr temp" "maybe param" "maybe type" "temp"
    (896183 'move' call_tmp[896180](252774 call _value _mt[203] this[252715]))
    unknown call_tmp[896187] "expr temp" "maybe param" "maybe type" "temp"
    (896190 'move' call_tmp[896187](252778 call _pid _mt[203] this[252715]))
    unknown call_tmp[896192] "maybe param" "maybe type" "temp"
    (896195 'move' call_tmp[896192](252781 call _build_tuple call_tmp[896180] call_tmp[896187]))
    const tmp[252783] "dead at end of block" "const" "insert auto destroy" "temp"
    (651275 'init var' tmp[252783] call_tmp[896192])
    (252790 call _check_tuple_var_decl tmp[252783] 2)
    (563608 'end of statement')
    unknown call_tmp[896197] "maybe param" "maybe type" "temp"
    (896200 'move' call_tmp[896197](252784 call tmp[252783] 0))
    const arr[252768] "dead at end of block" "const" "insert auto destroy"
    (651277 'init var' arr[252768] call_tmp[896197])
    unknown call_tmp[896202] "maybe param" "maybe type" "temp"
    (896205 'move' call_tmp[896202](252787 call tmp[252783] 1))
    const arrpid[252770] "dead at end of block" "const" "insert auto destroy"
    (651279 'init var' arrpid[252770] call_tmp[896202])
    (252795 'end of statement')
    unknown call_tmp[896209] "expr temp" "maybe param" "maybe type" "temp"
    (896212 'move' call_tmp[896209](252804 call eltType _mt[203] this[252715]))
    unknown call_tmp[896216] "expr temp" "maybe param" "maybe type" "temp"
    (896219 'move' call_tmp[896216](252809 call _pid _mt[203] rcdom[252745]))
    unknown call_tmp[896223] "expr temp" "maybe param" "maybe type" "temp"
    (896226 'move' call_tmp[896223](252814 call _instance _mt[203] rcdom[252745]))
    unknown call_tmp[896230] "expr temp" "maybe param" "maybe type" "temp"
    (896233 'move' call_tmp[896230](252823 call _value _mt[203] rcdom[252745]))
    unknown call_tmp[896237] "expr temp" "maybe param" "maybe type" "temp"
    (896240 'move' call_tmp[896237](252826 call collapsedDim _mt[203] call_tmp[896230]))
    unknown call_tmp[896244] "expr temp" "maybe param" "maybe type" "temp"
    (896247 'move' call_tmp[896244](252831 call _value _mt[203] rcdom[252745]))
    unknown call_tmp[896251] "expr temp" "maybe param" "maybe type" "temp"
    (896254 'move' call_tmp[896251](252834 call idx _mt[203] call_tmp[896244]))
    unknown call_tmp[896256] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (896259 'move' call_tmp[896256](1000442 'new' ArrayViewRankChangeArr[431464](?)(eltType = call_tmp[896209])(_DomPid = call_tmp[896216])(dom = call_tmp[896223])(_ArrPid = arrpid[252770])(_ArrInstance = arr[252768])(collapsedDim = call_tmp[896237])(idx = call_tmp[896251])(ownsArrInstance = 0)(_chpl_manager = unmanaged[183](?))))
    unknown a[252797] "dead at end of block" "insert auto destroy"
    (651281 'init var' a[252797] call_tmp[896256])
    (252841 'end of statement' rcdom[252745] arrpid[252770] arr[252768])
    unknown call_tmp[896263] "expr temp" "maybe param" "maybe type" "temp"
    (896266 'move' call_tmp[896263](252843 call _value _mt[203] rcdom[252745]))
    (252849 call(252846 call (partial) add_arr _mt[203] call_tmp[896263]) a[252797](locking = 0))
    (563612 'end of statement' rcdom[252745] a[252797])
    unknown call_tmp[896270] "expr temp" "maybe param" "maybe type" "temp"
    (896273 'move' call_tmp[896270](252855 call _newArray a[252797]))
    (624329 'move' ret[624324](624328 'deref' call_tmp[896270]))
    gotoReturn _end_this[624322] _end_this[624322]
    (563615 'end of statement' a[252797])
    label _end_this[624322]
    (624326 return ret[624324])
  }
  where {
    unknown call_tmp[896277] "expr temp" "maybe param" "maybe type" "temp"
    (896280 'move' call_tmp[896277](407823 call _value _mt[203] this[252715]))
    unknown call_tmp[896284] "expr temp" "maybe param" "maybe type" "temp"
    (896287 'move' call_tmp[896284](252727 call dom _mt[203] call_tmp[896277]))
    unknown call_tmp[896291] "expr temp" "maybe param" "maybe type" "temp"
    (896294 'move' call_tmp[896291](252730 call idxType _mt[203] call_tmp[896284]))
    (252724 call _validRankChangeArgs args[252718] call_tmp[896291])
  }
  function _array[255540](?).dims[252860](arg _mt[252864]:_MT[201], arg this[252862]:_array[255540](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[624335] "RVV" "temp"
    unknown call_tmp[896298] "expr temp" "maybe param" "maybe type" "temp"
    (896301 'move' call_tmp[896298](252869 call _dom _mt[203] this[252862]))
    unknown call_tmp[896305] "expr temp" "maybe param" "maybe type" "temp"
    (896308 'move' call_tmp[896305](252875 call(252872 call (partial) dims _mt[203] call_tmp[896298])))
    (624340 'move' ret[624335](624339 'deref' call_tmp[896305]))
    (624337 return ret[624335])
  }
  function _array[255540](?).dim[252878](arg _mt[252886]:_MT[201], arg this[252880]:_array[255540](?), arg d[252883]:int(64)[10]) : _unknown[42] "method" "primary method"
  {
    unknown ret[624344] "RVV" "temp"
    unknown call_tmp[896312] "expr temp" "maybe param" "maybe type" "temp"
    (896315 'move' call_tmp[896312](252891 call _dom _mt[203] this[252880]))
    unknown call_tmp[896319] "expr temp" "maybe param" "maybe type" "temp"
    (896322 'move' call_tmp[896319](252897 call(252894 call (partial) dim _mt[203] call_tmp[896312]) d[252883]))
    (624349 'move' ret[624344](624348 'deref' call_tmp[896319]))
    (624346 return ret[624344])
  }
  function _array[255540](?).dim[252901](arg _mt[252909]:_MT[201], arg this[252903]:_array[255540](?), param arg d[252906]:int(64)[10]) : _unknown[42] "method" "primary method"
  {
    unknown ret[624353] "RVV" "temp"
    unknown call_tmp[896326] "expr temp" "maybe param" "maybe type" "temp"
    (896329 'move' call_tmp[896326](252914 call _dom _mt[203] this[252903]))
    unknown call_tmp[896333] "expr temp" "maybe param" "maybe type" "temp"
    (896336 'move' call_tmp[896333](252920 call(252917 call (partial) dim _mt[203] call_tmp[896326]) d[252906]))
    (624358 'move' ret[624353](624357 'deref' call_tmp[896333]))
    (624355 return ret[624353])
  }
  function _array[255540](?).checkRankChange[252924](arg _mt[252930]:_MT[201], arg this[252926]:_array[255540](?), arg args[252928]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    {
      unknown i[252933] "dead at end of block" "index var" "insert auto destroy"
      (651283 'init var' i[252933] 0)
      (563620 'end of statement')
      unknown tmp[252979] "maybe param" "temp"
      unknown call_tmp[896340] "expr temp" "maybe param" "maybe type" "temp"
      (896343 'move' call_tmp[896340](252939 call size _mt[203] args[252928]))
      unknown call_tmp[896345] "expr temp" "maybe param" "maybe type" "temp"
      (896348 'move' call_tmp[896345](252936 call - call_tmp[896340] 1))
      (252991 'move' tmp[252979](252989 call chpl_compute_low_param_loop_bound 0 call_tmp[896345]))
      unknown tmp[252980] "maybe param" "temp"
      unknown call_tmp[896352] "expr temp" "maybe param" "maybe type" "temp"
      (896355 'move' call_tmp[896352](252998 call size _mt[203] args[252928]))
      unknown call_tmp[896357] "expr temp" "maybe param" "maybe type" "temp"
      (896360 'move' call_tmp[896357](252996 call - call_tmp[896352] 1))
      (253004 'move' tmp[252980](253002 call chpl_compute_high_param_loop_bound 0 call_tmp[896357]))
      unknown tmp[252981] "maybe param" "temp"
      (253007 'move' tmp[252981] 1)
      ParamForLoop[253009]
      { i[252933] tmp[252979] tmp[252980] tmp[252981]
        unknown call_tmp[896364] "expr temp" "maybe param" "maybe type" "temp"
        (896367 'move' call_tmp[896364](407842 call _value _mt[203] this[252926]))
        unknown call_tmp[896371] "expr temp" "maybe param" "maybe type" "temp"
        (896374 'move' call_tmp[896371](252959 call dom _mt[203] call_tmp[896364]))
        unknown call_tmp[896378] "expr temp" "maybe param" "maybe type" "temp"
        (896381 'move' call_tmp[896378](252965 call(252962 call (partial) dsiDim _mt[203] call_tmp[896371]) i[252933]))
        unknown call_tmp[896385] "expr temp" "maybe param" "maybe type" "temp"
        (896388 'move' call_tmp[896385](252972 call args[252928] i[252933]))
        unknown call_tmp[896390] "expr temp" "maybe param" "maybe type" "temp"
        (896393 'move' call_tmp[896390](252970 call(252967 call (partial) chpl_boundsCheck _mt[203] call_tmp[896378]) call_tmp[896385]))
        unknown call_tmp[896395] "expr temp" "maybe param" "maybe type" "temp"
        (896398 'move' call_tmp[896395](252956 call ! call_tmp[896390]))
        unknown call_tmp[896400] "expr temp" "maybe param" "maybe type" "temp"
        (896403 'move' call_tmp[896400](252974 call _cond_test call_tmp[896395]))
        if call_tmp[896400]
        {
          unknown call_tmp[896405] "expr temp" "maybe param" "maybe type" "temp"
          (896408 'move' call_tmp[896405](252953 call args[252928] i[252933]))
          (252946 call halt "array slice out of bounds in dimension " i[252933] ": " call_tmp[896405])
          (563621 'end of statement' i[252933])
        }
      }
      label _unused_continueLabel[252983]
      label _breakLabel[252982]
    }
    (624360 return _void[46])
  }
  function _array[255540](?).localSlice[253020](arg _mt[253028]:_MT[201], arg this[253022]:_array[255540](?), arg r[253025]:_any[141](?) ...) : _unknown[42] "no promotion when by ref" "method" "primary method" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[624364] "RVV" "temp"
    unknown call_tmp[896412] "expr temp" "maybe param" "maybe type" "temp"
    (896415 'move' call_tmp[896412](253047 call _cond_test 1))
    if call_tmp[896412]
    {
      unknown call_tmp[896421] "expr temp" "maybe param" "maybe type" "temp"
      (896424 'move' call_tmp[896421](449932 call _value _mt[203] this[253022]))
      (253040 call(449927 call (partial) checkSlice _mt[203] this[253022])(253042 'expand_tuple' r[253025])(value = call_tmp[896421]))
    }
    unknown call_tmp[896428] "maybe param" "maybe type" "temp"
    (896431 'move' call_tmp[896428](253055 call(449937 call (partial) _dom _mt[203] this[253022])(253057 'expand_tuple' r[253025])))
    unknown dom[253053] "dead at end of block" "insert auto destroy"
    (651285 'init var' dom[253053] call_tmp[896428])
    (253059 'end of statement')
    unknown call_tmp[896435] "expr temp" "maybe param" "maybe type" "temp"
    (896438 'move' call_tmp[896435](253062 call(449944 call (partial) chpl__localSliceDefaultArithArrHelp _mt[203] this[253022]) dom[253053]))
    (624369 'move' ret[624364](624368 'deref' call_tmp[896435]))
    gotoReturn _end_localSlice[624362] _end_localSlice[624362]
    (563624 'end of statement' dom[253053])
    label _end_localSlice[624362]
    (624366 return ret[624364])
  }
  where {
    unknown tmp[500286] "maybe param" "temp"
    (500297 'move' tmp[500286](253033 call chpl__isDROrDRView this[253022]))
    unknown call_tmp[896440] "expr temp" "maybe param" "maybe type" "temp"
    (896443 'move' call_tmp[896440](500299 call _cond_invalid tmp[500286]))
    if call_tmp[896440]
    {
      (500302 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[699839] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[699840] "maybe param" "temp"
    unknown call_tmp[896445] "expr temp" "maybe param" "maybe type" "temp"
    (896448 'move' call_tmp[896445](500287 call isTrue tmp[500286]))
    (699845 'move' tmp[699840](699843 call _cond_test call_tmp[896445]))
    if tmp[699840]
    {
      unknown tmp[699847] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[896450] "expr temp" "maybe param" "maybe type" "temp"
      (896453 'move' call_tmp[896450](253036 call chpl__isTupleOfRanges r[253025]))
      (699849 'move' tmp[699847](500290 call isTrue call_tmp[896450]))
      (699854 'move' tmp[699839](699851 '_paramFoldLogical' tmp[699840] tmp[699847]))
    }
    {
      (699859 'move' tmp[699839](699856 '_paramFoldLogical' tmp[699840] 0))
    }
    (1001632 call chpl_statementLevelSymbol tmp[699839])
  }
  function _array[255540](?).localSlice[253067](arg _mt[253075]:_MT[201], arg this[253069]:_array[255540](?), arg d[253072]:_domain[225034](?)) : _unknown[42] "no promotion when by ref" "method" "primary method" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[624375] "RVV" "temp"
    unknown call_tmp[896455] "expr temp" "maybe param" "maybe type" "temp"
    (896458 'move' call_tmp[896455](253093 call _cond_test 1))
    if call_tmp[896455]
    {
      unknown call_tmp[896464] "expr temp" "maybe param" "maybe type" "temp"
      (896467 'move' call_tmp[896464](253087 call(253084 call (partial) getIndices _mt[203] d[253072])))
      unknown call_tmp[896471] "expr temp" "maybe param" "maybe type" "temp"
      (896474 'move' call_tmp[896471](449955 call _value _mt[203] this[253069]))
      (253082 call(449951 call (partial) checkSlice _mt[203] this[253069])(253088 'expand_tuple' call_tmp[896464])(value = call_tmp[896471]))
    }
    unknown call_tmp[896478] "expr temp" "maybe param" "maybe type" "temp"
    (896481 'move' call_tmp[896478](253100 call(449960 call (partial) chpl__localSliceDefaultArithArrHelp _mt[203] this[253069]) d[253072]))
    (624380 'move' ret[624375](624379 'deref' call_tmp[896478]))
    (624377 return ret[624375])
  }
  where {
    (253078 call chpl__isDROrDRView this[253069])
  }
  function _array[255540](?).tryCopy[253105](arg _mt[253109]:_MT[201], arg this[253107]:_array[255540](?)) : _unknown[42] throws "method" "primary method" "@unstable"
  {
    unknown ret[624384] "RVV" "temp"
    unknown call_tmp[896483] "expr temp" "maybe param" "maybe type" "temp"
    (896486 'move' call_tmp[896483](253128 'resolves'(253138 call(253135 call .(253130 call . this[253107] c"_dom") c"tryCreateArray")(253140 call . this[253107] c"eltType"))))
    unknown call_tmp[896488] "expr temp" "maybe param" "maybe type" "temp"
    (896491 'move' call_tmp[896488](253126 call ! call_tmp[896483]))
    unknown call_tmp[896493] "expr temp" "maybe param" "maybe type" "temp"
    (896496 'move' call_tmp[896493](253143 call _cond_test call_tmp[896488]))
    if call_tmp[896493]
    {
      unknown call_tmp[896498] "expr temp" "maybe param" "maybe type" "temp"
      (896501 'move' call_tmp[896498](253117 call + "cannot call 'tryCopy' on arrays that do not" " support a 'tryCreateArray' method."))
      (253116 call compilerError call_tmp[896498])
    }
    unknown call_tmp[896505] "expr temp" "maybe param" "maybe type" "temp"
    (896508 'move' call_tmp[896505](253151 call _dom _mt[203] this[253107]))
    unknown call_tmp[896514] "expr temp" "maybe param" "maybe type" "temp"
    (896517 'move' call_tmp[896514](253159 call eltType _mt[203] this[253107]))
    unknown call_tmp[896519] "maybe param" "maybe type" "temp"
    (896522 'move' call_tmp[896519](253157 call(253154 call (partial) tryCreateArray _mt[203] call_tmp[896505]) call_tmp[896514]))
    unknown res[253149] "dead at end of block" "insert auto destroy"
    (651287 'init var' res[253149] call_tmp[896519])
    (253163 'end of statement')
    (253164 call = res[253149] this[253107])
    (563629 'end of statement' res[253149])
    (624389 'move' ret[624384](624388 'deref' res[253149]))
    gotoReturn _end_tryCopy[624382] _end_tryCopy[624382]
    (563631 'end of statement' res[253149])
    label _end_tryCopy[624382]
    (624386 return ret[624384])
    (396906 'used modules list'(253113 'use' Reflection[1804]))
  }
  function _array[255540](?).chpl__localSliceDefaultArithArrHelp[253172](arg _mt[253180]:_MT[201], arg this[253174]:_array[255540](?), arg d[253177]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no copy return"
  {
    unknown ret[624395] "RVV" "temp"
    unknown call_tmp[896526] "expr temp" "maybe param" "maybe type" "temp"
    (896529 'move' call_tmp[896526](449973 call _value _mt[203] this[253174]))
    unknown call_tmp[896531] "expr temp" "maybe param" "maybe type" "temp"
    (896534 'move' call_tmp[896531](253202 '_wide_get_locale' call_tmp[896526]))
    unknown call_tmp[896536] "expr temp" "maybe param" "maybe type" "temp"
    (896539 'move' call_tmp[896536](253203 call chpl_localeID_to_locale call_tmp[896531]))
    unknown call_tmp[896541] "expr temp" "maybe param" "maybe type" "temp"
    (896544 'move' call_tmp[896541](449976 call here[135591]))
    unknown call_tmp[896546] "expr temp" "maybe param" "maybe type" "temp"
    (896549 'move' call_tmp[896546](253199 call != call_tmp[896536] call_tmp[896541]))
    unknown call_tmp[896551] "expr temp" "maybe param" "maybe type" "temp"
    (896554 'move' call_tmp[896551](253206 call _cond_test call_tmp[896546]))
    if call_tmp[896551]
    {
      unknown call_tmp[896558] "expr temp" "maybe param" "maybe type" "temp"
      (896561 'move' call_tmp[896558](449969 call _value _mt[203] this[253174]))
      unknown call_tmp[896563] "expr temp" "maybe param" "maybe type" "temp"
      (896566 'move' call_tmp[896563](253192 '_wide_get_node' call_tmp[896558]))
      unknown call_tmp[896568] "expr temp" "maybe param" "maybe type" "temp"
      (896571 'move' call_tmp[896568](407851 call here[135591]))
      unknown call_tmp[896575] "expr temp" "maybe param" "maybe type" "temp"
      (896578 'move' call_tmp[896575](253195 call id _mt[203] call_tmp[896568]))
      (253184 call halt "Attempting to take a local slice of an array on locale " call_tmp[896563] " from locale " call_tmp[896575])
    }
    unknown call_tmp[896580] "expr temp" "maybe param" "maybe type" "temp"
    (896583 'move' call_tmp[896580](253213 call this[253174] d[253177]))
    (624400 'move' ret[624395](624399 'deref' call_tmp[896580]))
    (624397 return ret[624395])
  }
  function _array[255540](?).localSlice[253217](arg _mt[253225]:_MT[201], arg this[253219]:_array[255540](?), arg r[253222]:_any[141](?) ...) : _unknown[42] "no promotion when by ref" "method" "primary method" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[624404] "RVV" "temp"
    unknown call_tmp[896587] "expr temp" "maybe param" "maybe type" "temp"
    (896590 'move' call_tmp[896587](253246 call _cond_test 1))
    if call_tmp[896587]
    {
      unknown call_tmp[896596] "expr temp" "maybe param" "maybe type" "temp"
      (896599 'move' call_tmp[896596](449992 call _value _mt[203] this[253219]))
      (253239 call(449987 call (partial) checkSlice _mt[203] this[253219])(253241 'expand_tuple' r[253222])(value = call_tmp[896596]))
    }
    unknown call_tmp[896603] "expr temp" "maybe param" "maybe type" "temp"
    (896606 'move' call_tmp[896603](407854 call _value _mt[203] this[253219]))
    unknown call_tmp[896610] "expr temp" "maybe param" "maybe type" "temp"
    (896613 'move' call_tmp[896610](253256 call(253253 call (partial) dsiLocalSlice _mt[203] call_tmp[896603]) r[253222]))
    (624409 'move' ret[624404](624408 'deref' call_tmp[896610]))
    (624406 return ret[624404])
  }
  where {
    unknown tmp[500307] "maybe param" "temp"
    (500318 'move' tmp[500307](253230 call chpl__isTupleOfRanges r[253222]))
    unknown call_tmp[896615] "expr temp" "maybe param" "maybe type" "temp"
    (896618 'move' call_tmp[896615](500320 call _cond_invalid tmp[500307]))
    if call_tmp[896615]
    {
      (500323 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[699866] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[699867] "maybe param" "temp"
    unknown call_tmp[896620] "expr temp" "maybe param" "maybe type" "temp"
    (896623 'move' call_tmp[896620](500308 call isTrue tmp[500307]))
    (699872 'move' tmp[699867](699870 call _cond_test call_tmp[896620]))
    if tmp[699867]
    {
      unknown tmp[699874] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[896625] "expr temp" "maybe param" "maybe type" "temp"
      (896628 'move' call_tmp[896625](253235 call chpl__isDROrDRView this[253219]))
      unknown call_tmp[896630] "expr temp" "maybe param" "maybe type" "temp"
      (896633 'move' call_tmp[896630](253232 call ! call_tmp[896625]))
      (699876 'move' tmp[699874](500311 call isTrue call_tmp[896630]))
      (699881 'move' tmp[699866](699878 '_paramFoldLogical' tmp[699867] tmp[699874]))
    }
    {
      (699886 'move' tmp[699866](699883 '_paramFoldLogical' tmp[699867] 0))
    }
    (1001634 call chpl_statementLevelSymbol tmp[699866])
  }
  function _array[255540](?).localSlice[253261](arg _mt[253269]:_MT[201], arg this[253263]:_array[255540](?), arg d[253266]:_domain[225034](?)) : _unknown[42] "no promotion when by ref" "method" "primary method" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[624413] "RVV" "temp"
    unknown call_tmp[896639] "expr temp" "maybe param" "maybe type" "temp"
    (896642 'move' call_tmp[896639](253279 call(253276 call (partial) getIndices _mt[203] d[253266])))
    unknown call_tmp[896644] "expr temp" "maybe param" "maybe type" "temp"
    (896647 'move' call_tmp[896644](253274 call(449999 call (partial) localSlice _mt[203] this[253263])(253280 'expand_tuple' call_tmp[896639])))
    (624418 'move' ret[624413](624417 'deref' call_tmp[896644]))
    (624415 return ret[624413])
  }
  function _array[255540](?).these[253283](arg _mt[253287]:_MT[201], arg this[253285]:_array[255540](?)) ref : _unknown[42] "iterator fn" "method" "primary method" "reference to const when const this" "no return value for void"
  {
    unknown ret[624422] "RVV" "temp"
    {
      unknown _indexOfInterest[253300] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[253301] "expr temp" "temp"
      unknown call_tmp[896651] "expr temp" "maybe param" "maybe type" "temp"
      (896654 'move' call_tmp[896651](407859 call _value _mt[203] this[253285]))
      unknown call_tmp[896658] "expr temp" "maybe param" "maybe type" "temp"
      (896661 'move' call_tmp[896658](253296 call(253293 call (partial) these _mt[203] call_tmp[896651])))
      (253310 'move' _iterator[253301](253308 call _getIterator call_tmp[896658]))
      Defer
      {
        {
          (253325 call _freeIterator _iterator[253301])
        }
      }
      { scopeless type
        (253315 'move' _indexOfInterest[253300](253312 call iteratorIndex _iterator[253301]))
      }
      ForLoop[253302]
      {
        unknown i[253290] "index var" "insert auto destroy"
        (563639 'end of statement')
        (253320 'move' i[253290] _indexOfInterest[253300])
        (563640 'end of statement' i[253290])
        {
          ref yret[624426] "YVV" "temp"
          (624429 'move' yret[624426](624428 'addr of' i[253290]))
          (253298 yield yret[624426])
          (563642 'end of statement' i[253290])
        }
        label _continueLabel[253305]
        _indexOfInterest[253300]
        _iterator[253301]
      }
      label _breakLabel[253306]
    }
    (624424 return ret[624422])
  }
  function _array[255540](?).these[253334](arg _mt[253342]:_MT[201], arg this[253336]:_array[255540](?), param arg tag[253339]:iterKind[52144]) ref : _unknown[42] "iterator fn" "method" "primary method" "reference to const when const this" "no return value for void"
  {
    unknown ret[624434] "RVV" "temp"
    {
      unknown _indexOfInterest[253373] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[253374] "expr temp" "temp"
      unknown call_tmp[896665] "expr temp" "maybe param" "maybe type" "temp"
      (896668 'move' call_tmp[896665](407868 call _value _mt[203] this[253336]))
      unknown call_tmp[896672] "expr temp" "maybe param" "maybe type" "temp"
      (896675 'move' call_tmp[896672](253368 call(253365 call (partial) these _mt[203] call_tmp[896665]) tag[253339]))
      (253383 'move' _iterator[253374](253381 call _getIterator call_tmp[896672]))
      Defer
      {
        {
          (253398 call _freeIterator _iterator[253374])
        }
      }
      { scopeless type
        (253388 'move' _indexOfInterest[253373](253385 call iteratorIndex _iterator[253374]))
      }
      ForLoop[253375]
      {
        unknown i[253362] "index var" "insert auto destroy"
        (563645 'end of statement')
        (253393 'move' i[253362] _indexOfInterest[253373])
        (563646 'end of statement' i[253362])
        ref yret[624438] "YVV" "temp"
        (624441 'move' yret[624438](624440 'addr of' i[253362]))
        (253370 yield yret[624438])
        (563648 'end of statement' i[253362])
        label _continueLabel[253378]
        _indexOfInterest[253373]
        _iterator[253374]
      }
      label _breakLabel[253379]
    }
    (624436 return ret[624434])
  }
  where {
    unknown tmp[500328] "maybe param" "temp"
    (500339 'move' tmp[500328](253346 call == tag[253339] standalone[52142]))
    unknown call_tmp[896677] "expr temp" "maybe param" "maybe type" "temp"
    (896680 'move' call_tmp[896677](500341 call _cond_invalid tmp[500328]))
    if call_tmp[896677]
    {
      (500344 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[699893] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[699894] "maybe param" "temp"
    unknown call_tmp[896682] "expr temp" "maybe param" "maybe type" "temp"
    (896685 'move' call_tmp[896682](500329 call isTrue tmp[500328]))
    (699899 'move' tmp[699894](699897 call _cond_test call_tmp[896682]))
    if tmp[699894]
    {
      unknown tmp[699901] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[896687] "expr temp" "maybe param" "maybe type" "temp"
      (896690 'move' call_tmp[896687](253353 'resolves'(253358 call(253355 call .(407864 call . this[253336] c"_value") c"these")(tag = tag[253339]))))
      (699903 'move' tmp[699901](500332 call isTrue call_tmp[896687]))
      (699908 'move' tmp[699893](699905 '_paramFoldLogical' tmp[699894] tmp[699901]))
    }
    {
      (699913 'move' tmp[699893](699910 '_paramFoldLogical' tmp[699894] 0))
    }
    (1001636 call chpl_statementLevelSymbol tmp[699893])
  }
  function _array[255540](?).these[253408](arg _mt[253416]:_MT[201], arg this[253410]:_array[255540](?), param arg tag[253413]:iterKind[52144]) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[624446] "RVV" "temp"
    {
      unknown _indexOfInterest[253437] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[253438] "expr temp" "temp"
      unknown call_tmp[896694] "expr temp" "maybe param" "maybe type" "temp"
      (896697 'move' call_tmp[896694](407873 call _value _mt[203] this[253410]))
      unknown call_tmp[896701] "expr temp" "maybe param" "maybe type" "temp"
      (896704 'move' call_tmp[896701](253432 call(253429 call (partial) these _mt[203] call_tmp[896694]) tag[253413]))
      (253447 'move' _iterator[253438](253445 call _getIterator call_tmp[896701]))
      Defer
      {
        {
          (253462 call _freeIterator _iterator[253438])
        }
      }
      { scopeless type
        (253452 'move' _indexOfInterest[253437](253449 call iteratorIndex _iterator[253438]))
      }
      ForLoop[253439]
      {
        unknown followThis[253426] "index var" "insert auto destroy"
        (563651 'end of statement')
        (253457 'move' followThis[253426] _indexOfInterest[253437])
        (563652 'end of statement' followThis[253426])
        unknown yret[624450] "YVV" "temp"
        (624453 'move' yret[624450](624452 'deref' followThis[253426]))
        (253434 yield yret[624450])
        (563654 'end of statement' followThis[253426])
        label _continueLabel[253442]
        _indexOfInterest[253437]
        _iterator[253438]
      }
      label _breakLabel[253443]
    }
    (624448 return ret[624446])
  }
  where {
    (253418 call == tag[253413] leader[52138])
  }
  function _array[255540](?).these[253472](arg _mt[253488]:_MT[201], arg this[253474]:_array[255540](?), param arg tag[253477]:iterKind[52144], arg followThis[253480]:_any[141](?), param arg fast[253484]:bool[19] =
  0) ref : _unknown[42] "iterator fn" "method" "primary method" "reference to const when const this" "no return value for void"
  {
    unknown ret[624458] "RVV" "temp"
    unknown call_tmp[896706] "expr temp" "maybe param" "maybe type" "temp"
    (896709 'move' call_tmp[896706](253591 'resolves'(253596 call(253593 call .(407886 call . this[253474] c"_value") c"these")(tag = tag[253477]) followThis[253480](fast = fast[253484]))))
    unknown call_tmp[896711] "expr temp" "maybe param" "maybe type" "temp"
    (896714 'move' call_tmp[896711](253602 call _cond_test call_tmp[896706]))
    if call_tmp[896711]
    {
      {
        unknown _indexOfInterest[253514] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[253515] "expr temp" "temp"
        unknown call_tmp[896718] "expr temp" "maybe param" "maybe type" "temp"
        (896721 'move' call_tmp[896718](407878 call _value _mt[203] this[253474]))
        unknown call_tmp[896725] "expr temp" "maybe param" "maybe type" "temp"
        (896728 'move' call_tmp[896725](253505 call(253502 call (partial) these _mt[203] call_tmp[896718])(tag = tag[253477]) followThis[253480](fast = fast[253484])))
        (253524 'move' _iterator[253515](253522 call _getIterator call_tmp[896725]))
        Defer
        {
          {
            (253539 call _freeIterator _iterator[253515])
          }
        }
        { scopeless type
          (253529 'move' _indexOfInterest[253514](253526 call iteratorIndex _iterator[253515]))
        }
        ForLoop[253516]
        {
          unknown i[253499] "index var" "insert auto destroy"
          (563657 'end of statement')
          (253534 'move' i[253499] _indexOfInterest[253514])
          (563658 'end of statement' i[253499])
          ref yret[624462] "YVV" "temp"
          (624465 'move' yret[624462](624464 'addr of' i[253499]))
          (253511 yield yret[624462])
          (563660 'end of statement' i[253499])
          label _continueLabel[253519]
          _indexOfInterest[253514]
          _iterator[253515]
        }
        label _breakLabel[253520]
      }
    }
    {
      {
        unknown _indexOfInterest[253559] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[253560] "expr temp" "temp"
        unknown call_tmp[896732] "expr temp" "maybe param" "maybe type" "temp"
        (896735 'move' call_tmp[896732](407882 call _value _mt[203] this[253474]))
        unknown call_tmp[896739] "expr temp" "maybe param" "maybe type" "temp"
        (896742 'move' call_tmp[896739](253553 call(253550 call (partial) these _mt[203] call_tmp[896732]) tag[253477] followThis[253480]))
        (253569 'move' _iterator[253560](253567 call _getIterator call_tmp[896739]))
        Defer
        {
          {
            (253584 call _freeIterator _iterator[253560])
          }
        }
        { scopeless type
          (253574 'move' _indexOfInterest[253559](253571 call iteratorIndex _iterator[253560]))
        }
        ForLoop[253561]
        {
          unknown i[253547] "index var" "insert auto destroy"
          (563663 'end of statement')
          (253579 'move' i[253547] _indexOfInterest[253559])
          (563664 'end of statement' i[253547])
          ref yret[624468] "YVV" "temp"
          (624471 'move' yret[624468](624470 'addr of' i[253547]))
          (253556 yield yret[624468])
          (563666 'end of statement' i[253547])
          label _continueLabel[253564]
          _indexOfInterest[253559]
          _iterator[253560]
        }
        label _breakLabel[253565]
      }
    }
    (624460 return ret[624458])
  }
  where {
    (253490 call == tag[253477] follower[52140])
  }
  function _array[255540](?).size[253609](arg _mt[253613]:_MT[201], arg this[253611]:_array[255540](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[624476] "RVV" "temp"
    unknown call_tmp[896746] "expr temp" "maybe param" "maybe type" "temp"
    (896749 'move' call_tmp[896746](407890 call _dom _mt[203] this[253611]))
    unknown call_tmp[896753] "expr temp" "maybe param" "maybe type" "temp"
    (896756 'move' call_tmp[896753](253619 call size _mt[203] call_tmp[896746]))
    (624482 'move' ret[624476](624481 'coerce' call_tmp[896753] int(64)[10]))
    (624478 return ret[624476])
  }
  { scopeless type
    int(64)[10]
  }
  function _array[255540](?).sizeAs[253625](arg _mt[253633]:_MT[201], arg this[253627]:_array[255540](?), arg t[253630]:integral[159](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[624486] "RVV" "temp"
    unknown call_tmp[896760] "expr temp" "maybe param" "maybe type" "temp"
    (896763 'move' call_tmp[896760](407894 call _dom _mt[203] this[253627]))
    unknown call_tmp[896767] "expr temp" "maybe param" "maybe type" "temp"
    (896770 'move' call_tmp[896767](253642 call(253639 call (partial) sizeAs _mt[203] call_tmp[896760]) t[253630]))
    (624492 'move' ret[624486](624491 'coerce' call_tmp[896767] t[253630]))
    (624488 return ret[624486])
  }
  { scopeless type
    t[253630]
  }
  function _array[255540](?).chpl_checkArrArgDoms[253647](arg _mt[253659]:_MT[201], arg this[253649]:_array[255540](?), arg formalDom[253652]:_domain[225034](?), param arg runtimeChecks[253656]:bool[19]) : _unknown[42] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[896774] "expr temp" "maybe param" "maybe type" "temp"
    (896777 'move' call_tmp[896774](253699 call rank _mt[203] formalDom[253652]))
    unknown call_tmp[896781] "expr temp" "maybe param" "maybe type" "temp"
    (896784 'move' call_tmp[896781](253703 call _dom _mt[203] this[253649]))
    unknown call_tmp[896788] "expr temp" "maybe param" "maybe type" "temp"
    (896791 'move' call_tmp[896788](253706 call rank _mt[203] call_tmp[896781]))
    unknown call_tmp[896793] "expr temp" "maybe param" "maybe type" "temp"
    (896796 'move' call_tmp[896793](253696 call != call_tmp[896774] call_tmp[896788]))
    unknown call_tmp[896798] "expr temp" "maybe param" "maybe type" "temp"
    (896801 'move' call_tmp[896798](253709 call _cond_test call_tmp[896793]))
    if call_tmp[896798]
    {
      unknown call_tmp[896805] "expr temp" "maybe param" "maybe type" "temp"
      (896808 'move' call_tmp[896805](253676 call rank _mt[203] formalDom[253652]))
      unknown call_tmp[896810] "expr temp" "maybe param" "maybe type" "temp"
      (896813 'move' call_tmp[896810](253673 call : call_tmp[896805] string[244]))
      unknown call_tmp[896815] "expr temp" "maybe param" "maybe type" "temp"
      (896818 'move' call_tmp[896815](253668 call + "Rank mismatch passing array argument: expected " call_tmp[896810]))
      unknown call_tmp[896820] "expr temp" "maybe param" "maybe type" "temp"
      (896823 'move' call_tmp[896820](253666 call + call_tmp[896815] " but got "))
      unknown call_tmp[896827] "expr temp" "maybe param" "maybe type" "temp"
      (896830 'move' call_tmp[896827](253686 call _dom _mt[203] this[253649]))
      unknown call_tmp[896834] "expr temp" "maybe param" "maybe type" "temp"
      (896837 'move' call_tmp[896834](253689 call rank _mt[203] call_tmp[896827]))
      unknown call_tmp[896839] "expr temp" "maybe param" "maybe type" "temp"
      (896842 'move' call_tmp[896839](253683 call : call_tmp[896834] string[244]))
      unknown call_tmp[896844] "expr temp" "maybe param" "maybe type" "temp"
      (896847 'move' call_tmp[896844](253664 call + call_tmp[896820] call_tmp[896839]))
      (253663 call compilerError call_tmp[896844](errorDepth = 2))
    }
    { scopeless type
      unknown call_type_tmp[578607] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[896851] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (896854 'move' call_tmp[896851](253785 call distribution _mt[203] formalDom[253652]))
      unknown call_tmp[896858] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (896861 'move' call_tmp[896858](253788 call _value _mt[203] call_tmp[896851]))
      (578611 'move' call_type_tmp[578607](253791 'typeof' call_tmp[896858]))
    }
    unknown call_tmp[896863] "expr temp" "maybe param" "maybe type" "temp"
    (896866 'move' call_tmp[896863](253782 call != call_type_tmp[578607] unmanaged DefaultDist[468151]))
    unknown call_tmp[896868] "expr temp" "maybe param" "maybe type" "temp"
    (896871 'move' call_tmp[896868](253794 call _cond_test call_tmp[896863]))
    if call_tmp[896868]
    {
      { scopeless type
        unknown call_type_tmp[578613] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[896875] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (896878 'move' call_tmp[896875](253728 call _dom _mt[203] this[253649]))
        (578617 'move' call_type_tmp[578613](253731 'typeof' call_tmp[896875]))
      }
      unknown call_tmp[896880] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (896883 'move' call_tmp[896880](253726 'typeof' formalDom[253652]))
      unknown call_tmp[896885] "expr temp" "maybe param" "maybe type" "temp"
      (896888 'move' call_tmp[896885](253723 call != call_tmp[896880] call_type_tmp[578613]))
      unknown call_tmp[896890] "expr temp" "maybe param" "maybe type" "temp"
      (896893 'move' call_tmp[896890](253732 call _cond_test call_tmp[896885]))
      if call_tmp[896890]
      {
        (253716 call compilerError "Domain type mismatch in passing array argument"(errorDepth = 2))
      }
      unknown tmp[500349] "maybe param" "temp"
      (500360 'move' tmp[500349] runtimeChecks[253656])
      unknown call_tmp[896895] "expr temp" "maybe param" "maybe type" "temp"
      (896898 'move' call_tmp[896895](500362 call _cond_invalid tmp[500349]))
      if call_tmp[896895]
      {
        (500365 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[699920] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[699921] "maybe param" "temp"
      unknown call_tmp[896900] "expr temp" "maybe param" "maybe type" "temp"
      (896903 'move' call_tmp[896900](500350 call isTrue tmp[500349]))
      (699926 'move' tmp[699921](699924 call _cond_test call_tmp[896900]))
      if tmp[699921]
      {
        unknown tmp[699928] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[896907] "expr temp" "maybe param" "maybe type" "temp"
        (896910 'move' call_tmp[896907](253767 call distribution _mt[203] formalDom[253652]))
        unknown call_tmp[896914] "expr temp" "maybe param" "maybe type" "temp"
        (896917 'move' call_tmp[896914](253771 call _dom _mt[203] this[253649]))
        unknown call_tmp[896921] "expr temp" "maybe param" "maybe type" "temp"
        (896924 'move' call_tmp[896921](253774 call distribution _mt[203] call_tmp[896914]))
        unknown call_tmp[896926] "expr temp" "maybe param" "maybe type" "temp"
        (896929 'move' call_tmp[896926](253764 call != call_tmp[896907] call_tmp[896921]))
        (699930 'move' tmp[699928](500353 call isTrue call_tmp[896926]))
        (699935 'move' tmp[699920](699932 '_paramFoldLogical' tmp[699921] tmp[699928]))
      }
      {
        (699940 'move' tmp[699920](699937 '_paramFoldLogical' tmp[699921] 0))
      }
      unknown call_tmp[896931] "expr temp" "maybe param" "maybe type" "temp"
      (896934 'move' call_tmp[896931](253777 call _cond_test tmp[699920]))
      if call_tmp[896931]
      {
        unknown call_tmp[896938] "expr temp" "maybe param" "maybe type" "temp"
        (896941 'move' call_tmp[896938](253746 call distribution _mt[203] formalDom[253652]))
        unknown call_tmp[896945] "expr temp" "maybe param" "maybe type" "temp"
        (896948 'move' call_tmp[896945](253754 call _dom _mt[203] this[253649]))
        unknown call_tmp[896952] "expr temp" "maybe param" "maybe type" "temp"
        (896955 'move' call_tmp[896952](253757 call distribution _mt[203] call_tmp[896945]))
        (253738 call halt "Domain map mismatch passing array argument:\n" "  Formal domain map is: " call_tmp[896938] "\n" "  Actual domain map is: " call_tmp[896952])
      }
    }
    unknown tmp[500370] "maybe param" "temp"
    (500381 'move' tmp[500370] runtimeChecks[253656])
    unknown call_tmp[896957] "expr temp" "maybe param" "maybe type" "temp"
    (896960 'move' call_tmp[896957](500383 call _cond_invalid tmp[500370]))
    if call_tmp[896957]
    {
      (500386 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[699947] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[699948] "maybe param" "temp"
    unknown call_tmp[896962] "expr temp" "maybe param" "maybe type" "temp"
    (896965 'move' call_tmp[896962](500371 call isTrue tmp[500370]))
    (699953 'move' tmp[699948](699951 call _cond_test call_tmp[896962]))
    if tmp[699948]
    {
      unknown tmp[699955] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[896969] "expr temp" "maybe param" "maybe type" "temp"
      (896972 'move' call_tmp[896969](253823 call _dom _mt[203] this[253649]))
      unknown call_tmp[896974] "expr temp" "maybe param" "maybe type" "temp"
      (896977 'move' call_tmp[896974](253819 call != formalDom[253652] call_tmp[896969]))
      (699957 'move' tmp[699955](500374 call isTrue call_tmp[896974]))
      (699962 'move' tmp[699947](699959 '_paramFoldLogical' tmp[699948] tmp[699955]))
    }
    {
      (699967 'move' tmp[699947](699964 '_paramFoldLogical' tmp[699948] 0))
    }
    unknown call_tmp[896979] "expr temp" "maybe param" "maybe type" "temp"
    (896982 'move' call_tmp[896979](253826 call _cond_test tmp[699947]))
    if call_tmp[896979]
    {
      unknown call_tmp[896986] "expr temp" "maybe param" "maybe type" "temp"
      (896989 'move' call_tmp[896986](253812 call _dom _mt[203] this[253649]))
      (253799 call halt "Domain mismatch passing array argument:\n" "  Formal domain is: " formalDom[253652] "\n" "  Actual domain is: " call_tmp[896986])
    }
    (624494 return _void[46])
  }
  function _array[255540](?).reindex[253833](arg _mt[253841]:_MT[201], arg this[253835]:_array[255540](?), arg newDomain[253838]:_domain[225034](?)) : _unknown[42] "inline" "method" "primary method" "fn returns aliasing array"
  {
    unknown ret[624498] "RVV" "temp"
    unknown call_tmp[896995] "expr temp" "maybe param" "maybe type" "temp"
    (896998 'move' call_tmp[896995](253866 call(253863 call (partial) dims _mt[203] newDomain[253838])))
    unknown call_tmp[897000] "expr temp" "maybe param" "maybe type" "temp"
    (897003 'move' call_tmp[897000](253861 call(450041 call (partial) reindex _mt[203] this[253835])(253867 'expand_tuple' call_tmp[896995])))
    (624503 'move' ret[624498](624502 'deref' call_tmp[897000]))
    (624500 return ret[624498])
  }
  where {
    unknown tmp[500391] "maybe param" "temp"
    unknown call_tmp[897007] "expr temp" "maybe param" "maybe type" "temp"
    (897010 'move' call_tmp[897007](253846 call _dom _mt[203] this[253835]))
    (500402 'move' tmp[500391](253852 call(253849 call (partial) isRectangular _mt[203] call_tmp[897007])))
    unknown call_tmp[897014] "expr temp" "maybe param" "maybe type" "temp"
    (897017 'move' call_tmp[897014](500404 call _cond_invalid tmp[500391]))
    if call_tmp[897014]
    {
      (500407 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[699974] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[699975] "maybe param" "temp"
    unknown call_tmp[897019] "expr temp" "maybe param" "maybe type" "temp"
    (897022 'move' call_tmp[897019](500392 call isTrue tmp[500391]))
    (699980 'move' tmp[699975](699978 call _cond_test call_tmp[897019]))
    if tmp[699975]
    {
      unknown tmp[699982] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[897026] "expr temp" "maybe param" "maybe type" "temp"
      (897029 'move' call_tmp[897026](253857 call(253854 call (partial) isRectangular _mt[203] newDomain[253838])))
      (699984 'move' tmp[699982](500395 call isTrue call_tmp[897026]))
      (699989 'move' tmp[699974](699986 '_paramFoldLogical' tmp[699975] tmp[699982]))
    }
    {
      (699994 'move' tmp[699974](699991 '_paramFoldLogical' tmp[699975] 0))
    }
    (1001638 call chpl_statementLevelSymbol tmp[699974])
  }
  function _array[255540](?).reindex[253871](arg _mt[253879]:_MT[201], arg this[253873]:_array[255540](?), arg newDims[253876]:_any[141](?) ...) : _unknown[42] "method" "primary method" "fn returns aliasing array"
  {
    unknown ret[624507] "RVV" "temp"
    {
      unknown i[253890] "dead at end of block" "index var" "insert auto destroy"
      (651289 'init var' i[253890] 0)
      (563677 'end of statement')
      unknown tmp[253920] "maybe param" "temp"
      unknown call_tmp[897033] "expr temp" "maybe param" "maybe type" "temp"
      (897036 'move' call_tmp[897033](253896 call size _mt[203] newDims[253876]))
      unknown call_tmp[897038] "expr temp" "maybe param" "maybe type" "temp"
      (897041 'move' call_tmp[897038](253893 call - call_tmp[897033] 1))
      (253932 'move' tmp[253920](253930 call chpl_compute_low_param_loop_bound 0 call_tmp[897038]))
      unknown tmp[253921] "maybe param" "temp"
      unknown call_tmp[897045] "expr temp" "maybe param" "maybe type" "temp"
      (897048 'move' call_tmp[897045](253939 call size _mt[203] newDims[253876]))
      unknown call_tmp[897050] "expr temp" "maybe param" "maybe type" "temp"
      (897053 'move' call_tmp[897050](253937 call - call_tmp[897045] 1))
      (253945 'move' tmp[253921](253943 call chpl_compute_high_param_loop_bound 0 call_tmp[897050]))
      unknown tmp[253922] "maybe param" "temp"
      (253948 'move' tmp[253922] 1)
      ParamForLoop[253950]
      { i[253890] tmp[253920] tmp[253921] tmp[253922]
        unknown call_tmp[897055] "expr temp" "maybe param" "maybe type" "temp"
        (897058 'move' call_tmp[897055](253913 call newDims[253876] i[253890]))
        unknown call_tmp[897060] "expr temp" "maybe param" "maybe type" "temp"
        (897063 'move' call_tmp[897060](253911 call isRange call_tmp[897055]))
        unknown call_tmp[897065] "expr temp" "maybe param" "maybe type" "temp"
        (897068 'move' call_tmp[897065](253908 call ! call_tmp[897060]))
        unknown call_tmp[897070] "expr temp" "maybe param" "maybe type" "temp"
        (897073 'move' call_tmp[897070](253915 call _cond_test call_tmp[897065]))
        if call_tmp[897070]
        {
          (253903 call compilerError "cannot reindex() a rectangular array to a tuple containing non-ranges")
        }
      }
      label _unused_continueLabel[253924]
      label _breakLabel[253923]
    }
    unknown call_tmp[897077] "expr temp" "maybe param" "maybe type" "temp"
    (897080 'move' call_tmp[897077](253991 call rank _mt[203] this[253873]))
    unknown call_tmp[897084] "expr temp" "maybe param" "maybe type" "temp"
    (897087 'move' call_tmp[897084](253995 call size _mt[203] newDims[253876]))
    unknown call_tmp[897089] "expr temp" "maybe param" "maybe type" "temp"
    (897092 'move' call_tmp[897089](253988 call != call_tmp[897077] call_tmp[897084]))
    unknown call_tmp[897094] "expr temp" "maybe param" "maybe type" "temp"
    (897097 'move' call_tmp[897094](253998 call _cond_test call_tmp[897089]))
    if call_tmp[897094]
    {
      unknown call_tmp[897101] "expr temp" "maybe param" "maybe type" "temp"
      (897104 'move' call_tmp[897101](253973 call rank _mt[203] this[253873]))
      unknown call_tmp[897106] "expr temp" "maybe param" "maybe type" "temp"
      (897109 'move' call_tmp[897106](253970 call : call_tmp[897101] string[244]))
      unknown call_tmp[897111] "expr temp" "maybe param" "maybe type" "temp"
      (897114 'move' call_tmp[897111](253965 call + "rank mismatch: cannot reindex() from " call_tmp[897106]))
      unknown call_tmp[897116] "expr temp" "maybe param" "maybe type" "temp"
      (897119 'move' call_tmp[897116](253963 call + call_tmp[897111] " dimension(s) to "))
      unknown call_tmp[897123] "expr temp" "maybe param" "maybe type" "temp"
      (897126 'move' call_tmp[897123](253983 call size _mt[203] newDims[253876]))
      unknown call_tmp[897128] "expr temp" "maybe param" "maybe type" "temp"
      (897131 'move' call_tmp[897128](253980 call : call_tmp[897123] string[244]))
      unknown call_tmp[897133] "expr temp" "maybe param" "maybe type" "temp"
      (897136 'move' call_tmp[897133](253961 call + call_tmp[897116] call_tmp[897128]))
      (253960 call compilerError call_tmp[897133])
    }
    unknown call_tmp[897140] "expr temp" "maybe param" "maybe type" "temp"
    (897143 'move' call_tmp[897140](254006 call _value _mt[203] this[253873]))
    unknown call_tmp[897147] "maybe param" "maybe type" "temp"
    (897150 'move' call_tmp[897147](254009 call dom _mt[203] call_tmp[897140]))
    const dom[254004] "dead at end of block" "const" "insert auto destroy"
    (651291 'init var' dom[254004] call_tmp[897147])
    (254013 'end of statement')
    unknown call_tmp[897154] "maybe param" "maybe type" "temp"
    (897157 'move' call_tmp[897154](254020 call(254017 call (partial) dsiDims _mt[203] dom[254004])))
    const origDims[254015] "dead at end of block" "const" "insert auto destroy"
    (651293 'init var' origDims[254015] call_tmp[897154])
    (254022 'end of statement')
    {
      unknown i[254023] "dead at end of block" "index var" "insert auto destroy"
      (651295 'init var' i[254023] 0)
      (563681 'end of statement')
      unknown tmp[254113] "maybe param" "temp"
      unknown call_tmp[897161] "expr temp" "maybe param" "maybe type" "temp"
      (897164 'move' call_tmp[897161](450047 call rank _mt[203] this[253873]))
      unknown call_tmp[897166] "expr temp" "maybe param" "maybe type" "temp"
      (897169 'move' call_tmp[897166](254026 call - call_tmp[897161] 1))
      (254125 'move' tmp[254113](254123 call chpl_compute_low_param_loop_bound 0 call_tmp[897166]))
      unknown tmp[254114] "maybe param" "temp"
      unknown call_tmp[897173] "expr temp" "maybe param" "maybe type" "temp"
      (897176 'move' call_tmp[897173](450067 call rank _mt[203] this[253873]))
      unknown call_tmp[897178] "expr temp" "maybe param" "maybe type" "temp"
      (897181 'move' call_tmp[897178](254130 call - call_tmp[897173] 1))
      (254135 'move' tmp[254114](254133 call chpl_compute_high_param_loop_bound 0 call_tmp[897178]))
      unknown tmp[254115] "maybe param" "temp"
      (254138 'move' tmp[254115] 1)
      ParamForLoop[254140]
      { i[254023] tmp[254113] tmp[254114] tmp[254115]
        {
          unknown call_tmp[897183] "expr temp" "maybe param" "maybe type" "temp"
          (897186 'move' call_tmp[897183](254056 call newDims[253876] i[254023]))
          unknown call_tmp[897190] "expr temp" "maybe param" "maybe type" "temp"
          (897193 'move' call_tmp[897190](254061 call(254058 call (partial) sizeAs _mt[203] call_tmp[897183]) uint(64)[86]))
          unknown call_tmp[897195] "expr temp" "maybe param" "maybe type" "temp"
          (897198 'move' call_tmp[897195](254064 call origDims[254015] i[254023]))
          unknown call_tmp[897202] "expr temp" "maybe param" "maybe type" "temp"
          (897205 'move' call_tmp[897202](254069 call(254066 call (partial) sizeAs _mt[203] call_tmp[897195]) uint(64)[86]))
          unknown call_tmp[897207] "expr temp" "maybe param" "maybe type" "temp"
          (897210 'move' call_tmp[897207](254053 call != call_tmp[897190] call_tmp[897202]))
          unknown call_tmp[897212] "expr temp" "maybe param" "maybe type" "temp"
          (897215 'move' call_tmp[897212](254071 call _cond_test call_tmp[897207]))
          if call_tmp[897212]
          {
            unknown call_tmp[897217] "expr temp" "maybe param" "maybe type" "temp"
            (897220 'move' call_tmp[897217](254038 call + i[254023] 1))
            unknown call_tmp[897222] "expr temp" "maybe param" "maybe type" "temp"
            (897225 'move' call_tmp[897222](254046 call origDims[254015] i[254023]))
            unknown call_tmp[897227] "expr temp" "maybe param" "maybe type" "temp"
            (897230 'move' call_tmp[897227](254050 call newDims[253876] i[254023]))
            (254034 call halt "extent mismatch in dimension " call_tmp[897217] ": cannot reindex() from " call_tmp[897222] " to " call_tmp[897227])
            (563682 'end of statement' i[254023] origDims[254015])
          }
          unknown tmp[500412] "maybe param" "temp"
          unknown tmp[500433] "maybe param" "temp"
          (500444 'move' tmp[500433](254089 call ! noNegativeStrideWarnings[209958]))
          unknown call_tmp[897232] "expr temp" "maybe param" "maybe type" "temp"
          (897235 'move' call_tmp[897232](500446 call _cond_invalid tmp[500433]))
          if call_tmp[897232]
          {
            (500449 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[700001] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[700002] "maybe param" "temp"
          unknown call_tmp[897237] "expr temp" "maybe param" "maybe type" "temp"
          (897240 'move' call_tmp[897237](500434 call isTrue tmp[500433]))
          (700007 'move' tmp[700002](700005 call _cond_test call_tmp[897237]))
          if tmp[700002]
          {
            unknown tmp[700009] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[897242] "expr temp" "maybe param" "maybe type" "temp"
            (897245 'move' call_tmp[897242](254093 call origDims[254015] i[254023]))
            unknown call_tmp[897249] "expr temp" "maybe param" "maybe type" "temp"
            (897252 'move' call_tmp[897249](254098 call(254095 call (partial) hasPositiveStride _mt[203] call_tmp[897242])))
            (700011 'move' tmp[700009](500437 call isTrue call_tmp[897249]))
            (700016 'move' tmp[700001](700013 '_paramFoldLogical' tmp[700002] tmp[700009]))
          }
          {
            (700021 'move' tmp[700001](700018 '_paramFoldLogical' tmp[700002] 0))
          }
          (500423 'move' tmp[500412] tmp[700001])
          unknown call_tmp[897254] "expr temp" "maybe param" "maybe type" "temp"
          (897257 'move' call_tmp[897254](500425 call _cond_invalid tmp[500412]))
          if call_tmp[897254]
          {
            (500428 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[700028] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[700029] "maybe param" "temp"
          unknown call_tmp[897259] "expr temp" "maybe param" "maybe type" "temp"
          (897262 'move' call_tmp[897259](500413 call isTrue tmp[500412]))
          (700034 'move' tmp[700029](700032 call _cond_test call_tmp[897259]))
          if tmp[700029]
          {
            unknown tmp[700036] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[897264] "expr temp" "maybe param" "maybe type" "temp"
            (897267 'move' call_tmp[897264](254102 call newDims[253876] i[254023]))
            unknown call_tmp[897271] "expr temp" "maybe param" "maybe type" "temp"
            (897274 'move' call_tmp[897271](254107 call(254104 call (partial) hasPositiveStride _mt[203] call_tmp[897264])))
            unknown call_tmp[897276] "expr temp" "maybe param" "maybe type" "temp"
            (897279 'move' call_tmp[897276](254099 call ! call_tmp[897271]))
            (700038 'move' tmp[700036](500416 call isTrue call_tmp[897276]))
            (700043 'move' tmp[700028](700040 '_paramFoldLogical' tmp[700029] tmp[700036]))
          }
          {
            (700048 'move' tmp[700028](700045 '_paramFoldLogical' tmp[700029] 0))
          }
          unknown call_tmp[897281] "expr temp" "maybe param" "maybe type" "temp"
          (897284 'move' call_tmp[897281](254108 call _cond_test tmp[700028]))
          if call_tmp[897281]
          {
            (254077 call warning "arrays and array slices with negatively-strided dimensions are currently unsupported and may lead to unexpected behavior; comp origDims[254015] " to " newDims[253876])
            (563687 'end of statement' origDims[254015])
          }
        }
      }
      label _unused_continueLabel[254117]
      label _breakLabel[254116]
    }
    unknown call_tmp[897286] "maybe param" "maybe type" "temp"
    (897289 'move' call_tmp[897286](254155 call chpl__buildDomainExpr(254153 'expand_tuple' newDims[253876]) 1))
    const updom[254150] "dead at end of block" "const" "no auto destroy"
    (651297 'init var' updom[254150] call_tmp[897286])
    (254158 'end of statement')
    unknown call_tmp[897293] "expr temp" "maybe param" "maybe type" "temp"
    (897296 'move' call_tmp[897293](254167 call _dom _mt[203] this[253873]))
    unknown call_tmp[897300] "expr temp" "maybe param" "maybe type" "temp"
    (897303 'move' call_tmp[897300](254170 call distribution _mt[203] call_tmp[897293]))
    unknown call_tmp[897307] "expr temp" "maybe param" "maybe type" "temp"
    (897310 'move' call_tmp[897307](254173 call _pid _mt[203] call_tmp[897300]))
    unknown call_tmp[897314] "expr temp" "maybe param" "maybe type" "temp"
    (897317 'move' call_tmp[897314](254178 call _dom _mt[203] this[253873]))
    unknown call_tmp[897321] "expr temp" "maybe param" "maybe type" "temp"
    (897324 'move' call_tmp[897321](254181 call distribution _mt[203] call_tmp[897314]))
    unknown call_tmp[897328] "expr temp" "maybe param" "maybe type" "temp"
    (897331 'move' call_tmp[897328](254184 call _instance _mt[203] call_tmp[897321]))
    unknown call_tmp[897335] "expr temp" "maybe param" "maybe type" "temp"
    (897338 'move' call_tmp[897335](254189 call _value _mt[203] updom[254150]))
    unknown call_tmp[897342] "expr temp" "maybe param" "maybe type" "temp"
    (897345 'move' call_tmp[897342](254194 call pid _mt[203] dom[254004]))
    unknown call_tmp[897347] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (897350 'move' call_tmp[897347](1000443 'new' ArrayViewReindexDist[432451](?)(downDistPid = call_tmp[897307])(downDistInst = call_tmp[897328])(updom = call_tmp[897335])(downdomPid = call_tmp[897342])(downdomInst = dom[254004])(_chpl_manager = unmanaged[183](?))))
    const redist[254160] "dead at end of block" "const" "insert auto destroy"
    (651299 'init var' redist[254160] call_tmp[897347])
    (254201 'end of statement')
    unknown call_tmp[897352] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (897355 'move' call_tmp[897352](1000444 'new' _distribution[268253](?) redist[254160]))
    const redistRec[254203] "dead at end of block" "const" "insert auto destroy"
    (651301 'init var' redistRec[254203] call_tmp[897352])
    (254209 'end of statement')
    unknown call_tmp[897359] "expr temp" "maybe param" "maybe type" "temp"
    (897362 'move' call_tmp[897359](450078 call rank _mt[203] this[253873]))
    unknown call_tmp[897366] "expr temp" "maybe param" "maybe type" "temp"
    (897369 'move' call_tmp[897366](254218 call idxType _mt[203] updom[254150]))
    unknown call_tmp[897373] "expr temp" "maybe param" "maybe type" "temp"
    (897376 'move' call_tmp[897373](254222 call strides _mt[203] updom[254150]))
    unknown call_tmp[897380] "expr temp" "maybe param" "maybe type" "temp"
    (897383 'move' call_tmp[897380](254229 call(254226 call (partial) dims _mt[203] updom[254150])))
    unknown call_tmp[897385] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (897388 'move' call_tmp[897385](1000445 'new' _domain[225034](?) redistRec[254203] call_tmp[897359] call_tmp[897366] call_tmp[897373] call_tmp[897380](definedConst = 1)))
    const newDom[254211] "dead at end of block" "const" "no auto destroy" "no copy"
    (651303 'init var' newDom[254211] call_tmp[897385])
    (254233 'end of statement')
    unknown call_tmp[897392] "expr temp" "maybe param" "maybe type" "temp"
    (897395 'move' call_tmp[897392](254237 call _value _mt[203] newDom[254211]))
    unknown call_tmp[897399] "expr temp" "maybe param" "maybe type" "temp"
    (897402 'move' call_tmp[897399](254240 call _free_when_no_arrs _mt[203] call_tmp[897392]))
    (254234 call = call_tmp[897399] 1)
    (563693 'end of statement' newDom[254211])
    unknown call_tmp[897406] "expr temp" "maybe param" "maybe type" "temp"
    (897409 'move' call_tmp[897406](254251 call _value _mt[203] this[253873]))
    unknown call_tmp[897413] "expr temp" "maybe param" "maybe type" "temp"
    (897416 'move' call_tmp[897413](254255 call _pid _mt[203] this[253873]))
    unknown call_tmp[897418] "maybe param" "maybe type" "temp"
    (897421 'move' call_tmp[897418](254258 call _build_tuple call_tmp[897406] call_tmp[897413]))
    const tmp[254260] "dead at end of block" "const" "insert auto destroy" "temp"
    (651305 'init var' tmp[254260] call_tmp[897418])
    (254267 call _check_tuple_var_decl tmp[254260] 2)
    (563695 'end of statement')
    unknown call_tmp[897423] "maybe param" "maybe type" "temp"
    (897426 'move' call_tmp[897423](254261 call tmp[254260] 0))
    const arr[254245] "dead at end of block" "const" "insert auto destroy"
    (651307 'init var' arr[254245] call_tmp[897423])
    unknown call_tmp[897428] "maybe param" "maybe type" "temp"
    (897431 'move' call_tmp[897428](254264 call tmp[254260] 1))
    const arrpid[254247] "dead at end of block" "const" "insert auto destroy"
    (651309 'init var' arrpid[254247] call_tmp[897428])
    (254272 'end of statement')
    unknown call_tmp[897435] "expr temp" "maybe param" "maybe type" "temp"
    (897438 'move' call_tmp[897435](254281 call eltType _mt[203] this[253873]))
    unknown call_tmp[897442] "expr temp" "maybe param" "maybe type" "temp"
    (897445 'move' call_tmp[897442](254286 call _pid _mt[203] newDom[254211]))
    unknown call_tmp[897449] "expr temp" "maybe param" "maybe type" "temp"
    (897452 'move' call_tmp[897449](254291 call _instance _mt[203] newDom[254211]))
    unknown call_tmp[897454] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (897457 'move' call_tmp[897454](1000446 'new' ArrayViewReindexArr[432594](?)(eltType = call_tmp[897435])(_DomPid = call_tmp[897442])(dom = call_tmp[897449])(_ArrPid = arrpid[254247])(_ArrInstance = arr[254245])(ownsArrInstance = 0)(_chpl_manager = unmanaged[183](?))))
    unknown x[254274] "dead at end of block" "insert auto destroy"
    (651311 'init var' x[254274] call_tmp[897454])
    (254302 'end of statement' dom[254004] updom[254150] redist[254160] redistRec[254203] updom[254150] newDom[254211] arrpid[254247] arr[254245])
    unknown call_tmp[897461] "expr temp" "maybe param" "maybe type" "temp"
    (897464 'move' call_tmp[897461](254304 call _value _mt[203] newDom[254211]))
    (254310 call(254307 call (partial) add_arr _mt[203] call_tmp[897461]) x[254274](locking = 0))
    (563699 'end of statement' newDom[254211] x[254274])
    unknown call_tmp[897468] "expr temp" "maybe param" "maybe type" "temp"
    (897471 'move' call_tmp[897468](254316 call _newArray x[254274]))
    (624512 'move' ret[624507](624511 'deref' call_tmp[897468]))
    gotoReturn _end_reindex[624505] _end_reindex[624505]
    (563702 'end of statement' x[254274])
    label _end_reindex[624505]
    (624509 return ret[624507])
  }
  where {
    unknown call_tmp[897475] "expr temp" "maybe param" "maybe type" "temp"
    (897478 'move' call_tmp[897475](253882 call _dom _mt[203] this[253873]))
    (253888 call(253885 call (partial) isRectangular _mt[203] call_tmp[897475]))
  }
  function _array[255540](?).reindex[254321](arg _mt[254329]:_MT[201], arg this[254323]:_array[255540](?), arg d[254326]:_domain[225034](?)) : _unknown[42] "method" "primary method" "fn returns aliasing array" "no return value for void"
  {
    (254333 call compilerError "Reindexing non-rectangular arrays is not permitted.")
    (624516 return _void[46])
  }
  function _array[255540](?).serialize[254339](arg _mt[254347]:_MT[201], arg this[254341]:_array[255540](?), arg writer[254343]:_any[141](?), ref arg serializer[254345]:_any[141](?)) : _unknown[42] throws "method" "primary method" "no return value for void"
  {
    unknown call_tmp[897484] "maybe param" "maybe type" "temp"
    (897487 'move' call_tmp[897484](254356 call(254353 call (partial) styleElement _mt[203] writer[254343]) QIO_STYLE_ELEMENT_ARRAY[77170]))
    unknown arrayStyle[254351] "dead at end of block" "insert auto destroy"
    (651313 'init var' arrayStyle[254351] call_tmp[897484])
    (254359 'end of statement')
    unknown tmp[500454] "maybe param" "temp"
    (500465 'move' tmp[500454](254364 call == arrayStyle[254351] QIO_ARRAY_FORMAT_CHPL[77205]))
    unknown call_tmp[897489] "expr temp" "maybe param" "maybe type" "temp"
    (897492 'move' call_tmp[897489](500467 call _cond_invalid tmp[500454]))
    if call_tmp[897489]
    {
      (500470 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown ischpl[254361] "dead at end of block" "insert auto destroy"
    unknown tmp[700055] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[700056] "maybe param" "temp"
    unknown call_tmp[897494] "expr temp" "maybe param" "maybe type" "temp"
    (897497 'move' call_tmp[897494](500455 call isTrue tmp[500454]))
    (700061 'move' tmp[700056](700059 call _cond_test call_tmp[897494]))
    if tmp[700056]
    {
      unknown tmp[700063] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[897501] "expr temp" "maybe param" "maybe type" "temp"
      (897504 'move' call_tmp[897501](254374 call(254371 call (partial) _binary _mt[203] writer[254343])))
      unknown call_tmp[897506] "expr temp" "maybe param" "maybe type" "temp"
      (897509 'move' call_tmp[897506](254368 call ! call_tmp[897501]))
      (700065 'move' tmp[700063](500458 call isTrue call_tmp[897506]))
      (700070 'move' tmp[700055](700067 '_paramFoldLogical' tmp[700056] tmp[700063]))
    }
    {
      (700075 'move' tmp[700055](700072 '_paramFoldLogical' tmp[700056] 0))
    }
    (651315 'init var' ischpl[254361] tmp[700055])
    (254376 'end of statement')
    unknown tmp[500475] "maybe param" "temp"
    unknown call_tmp[897513] "expr temp" "maybe param" "maybe type" "temp"
    (897516 'move' call_tmp[897513](450092 call rank _mt[203] this[254341]))
    (500486 'move' tmp[500475](254389 call > call_tmp[897513] 1))
    unknown call_tmp[897518] "expr temp" "maybe param" "maybe type" "temp"
    (897521 'move' call_tmp[897518](500488 call _cond_invalid tmp[500475]))
    if call_tmp[897518]
    {
      (500491 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[700082] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[700083] "maybe param" "temp"
    unknown call_tmp[897523] "expr temp" "maybe param" "maybe type" "temp"
    (897526 'move' call_tmp[897523](500476 call isTrue tmp[500475]))
    (700088 'move' tmp[700083](700086 call _cond_test call_tmp[897523]))
    if tmp[700083]
    {
      unknown tmp[700090] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (700092 'move' tmp[700090](500479 call isTrue ischpl[254361]))
      (700097 'move' tmp[700082](700094 '_paramFoldLogical' tmp[700083] tmp[700090]))
    }
    {
      (700102 'move' tmp[700082](700099 '_paramFoldLogical' tmp[700083] 0))
    }
    unknown call_tmp[897528] "expr temp" "maybe param" "maybe type" "temp"
    (897531 'move' call_tmp[897528](254394 call _cond_test tmp[700082]))
    if call_tmp[897528]
    {
      unknown call_tmp[897533] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (897536 'move' call_tmp[897533](1000447 'new' IllegalArgumentError[414940](?) "Cannot perform Chapel write of multidimensional array."(_chpl_manager = _owned[238](?))))
      unknown call_tmp[897538] "expr temp" "maybe param" "maybe type" "temp"
      (897541 'move' call_tmp[897538](542453 call chpl_fix_thrown_error call_tmp[897533]))
      (254378 'throw' call_tmp[897538])
    }
    unknown call_tmp[897545] "expr temp" "maybe param" "maybe type" "temp"
    (897548 'move' call_tmp[897545](407938 call _value _mt[203] this[254341]))
    (254402 call(254399 call (partial) dsiSerialWrite _mt[203] call_tmp[897545]) writer[254343])
    (624518 return _void[46])
  }
  function _array[255540](?).deserialize[254406](arg _mt[254414]:_MT[201], ref arg this[254408]:_array[255540](?), arg reader[254410]:_any[141](?), ref arg deserializer[254412]:_any[141](?)) : _unknown[42] throws "method" "primary method" "no return value for void"
  {
    unknown call_tmp[897554] "maybe param" "maybe type" "temp"
    (897557 'move' call_tmp[897554](254423 call(254420 call (partial) styleElement _mt[203] reader[254410]) QIO_STYLE_ELEMENT_ARRAY[77170]))
    unknown arrayStyle[254418] "dead at end of block" "insert auto destroy"
    (651317 'init var' arrayStyle[254418] call_tmp[897554])
    (254426 'end of statement')
    unknown tmp[500496] "maybe param" "temp"
    (500507 'move' tmp[500496](254431 call == arrayStyle[254418] QIO_ARRAY_FORMAT_CHPL[77205]))
    unknown call_tmp[897559] "expr temp" "maybe param" "maybe type" "temp"
    (897562 'move' call_tmp[897559](500509 call _cond_invalid tmp[500496]))
    if call_tmp[897559]
    {
      (500512 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown ischpl[254428] "dead at end of block" "insert auto destroy"
    unknown tmp[700109] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[700110] "maybe param" "temp"
    unknown call_tmp[897564] "expr temp" "maybe param" "maybe type" "temp"
    (897567 'move' call_tmp[897564](500497 call isTrue tmp[500496]))
    (700115 'move' tmp[700110](700113 call _cond_test call_tmp[897564]))
    if tmp[700110]
    {
      unknown tmp[700117] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[897571] "expr temp" "maybe param" "maybe type" "temp"
      (897574 'move' call_tmp[897571](254441 call(254438 call (partial) _binary _mt[203] reader[254410])))
      unknown call_tmp[897576] "expr temp" "maybe param" "maybe type" "temp"
      (897579 'move' call_tmp[897576](254435 call ! call_tmp[897571]))
      (700119 'move' tmp[700117](500500 call isTrue call_tmp[897576]))
      (700124 'move' tmp[700109](700121 '_paramFoldLogical' tmp[700110] tmp[700117]))
    }
    {
      (700129 'move' tmp[700109](700126 '_paramFoldLogical' tmp[700110] 0))
    }
    (651319 'init var' ischpl[254428] tmp[700109])
    (254443 'end of statement')
    unknown tmp[500517] "maybe param" "temp"
    unknown call_tmp[897583] "expr temp" "maybe param" "maybe type" "temp"
    (897586 'move' call_tmp[897583](450102 call rank _mt[203] this[254408]))
    (500528 'move' tmp[500517](254456 call > call_tmp[897583] 1))
    unknown call_tmp[897588] "expr temp" "maybe param" "maybe type" "temp"
    (897591 'move' call_tmp[897588](500530 call _cond_invalid tmp[500517]))
    if call_tmp[897588]
    {
      (500533 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[700136] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[700137] "maybe param" "temp"
    unknown call_tmp[897593] "expr temp" "maybe param" "maybe type" "temp"
    (897596 'move' call_tmp[897593](500518 call isTrue tmp[500517]))
    (700142 'move' tmp[700137](700140 call _cond_test call_tmp[897593]))
    if tmp[700137]
    {
      unknown tmp[700144] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (700146 'move' tmp[700144](500521 call isTrue ischpl[254428]))
      (700151 'move' tmp[700136](700148 '_paramFoldLogical' tmp[700137] tmp[700144]))
    }
    {
      (700156 'move' tmp[700136](700153 '_paramFoldLogical' tmp[700137] 0))
    }
    unknown call_tmp[897598] "expr temp" "maybe param" "maybe type" "temp"
    (897601 'move' call_tmp[897598](254461 call _cond_test tmp[700136]))
    if call_tmp[897598]
    {
      unknown call_tmp[897603] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (897606 'move' call_tmp[897603](1000448 'new' IllegalArgumentError[414940](?) "Cannot perform Chapel read of multidimensional array."(_chpl_manager = _owned[238](?))))
      unknown call_tmp[897608] "expr temp" "maybe param" "maybe type" "temp"
      (897611 'move' call_tmp[897608](542455 call chpl_fix_thrown_error call_tmp[897603]))
      (254445 'throw' call_tmp[897608])
    }
    unknown call_tmp[897615] "expr temp" "maybe param" "maybe type" "temp"
    (897618 'move' call_tmp[897615](407944 call _value _mt[203] this[254408]))
    (254469 call(254466 call (partial) dsiSerialRead _mt[203] call_tmp[897615]) reader[254410])
    (624520 return _void[46])
  }
  function _array[255540](?).deserializeFrom[254473](arg _mt[254481]:_MT[201], arg this[254475]:_array[255540](?), arg reader[254477]:_any[141](?), ref arg deserializer[254479]:_any[141](?)) : _unknown[42] throws "method" "primary method"
  {
    unknown ret[624524] "RVV" "temp"
    unknown ret[254485] "dead at end of block" "insert auto destroy"
    (651321 'default init var' ret[254485] this[254475])
    (254488 'end of statement')
    (254493 call(254490 call (partial) deserialize _mt[203] ret[254485]) reader[254477] deserializer[254479])
    (563713 'end of statement' ret[254485])
    (624529 'move' ret[624524](624528 'deref' ret[254485]))
    gotoReturn _end_deserializeFrom[624522] _end_deserializeFrom[624522]
    (563715 'end of statement' ret[254485])
    label _end_deserializeFrom[624522]
    (624526 return ret[624524])
  }
  function _array[255540](?).IRV[254500](arg _mt[254504]:_MT[201], arg this[254502]:_array[255540](?)) : _unknown[42] "method" "primary method" "no parens" "no return value for void"
  {
    (254515 call compilerError "only sparse arrays have an IRV")
    (624533 return _void[46])
  }
  where {
    unknown call_tmp[897626] "expr temp" "maybe param" "maybe type" "temp"
    (897629 'move' call_tmp[897626](254512 call(254509 call (partial) isSparse _mt[203] this[254502])))
    (254506 call ! call_tmp[897626])
  }
  function _array[255540](?).IRV[254522](arg _mt[254526]:_MT[201], arg this[254524]:_array[255540](?)) ref : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[624537] "RVV" "temp"
    unknown call_tmp[897633] "expr temp" "maybe param" "maybe type" "temp"
    (897636 'move' call_tmp[897633](407951 call _value _mt[203] this[254524]))
    unknown call_tmp[897640] "expr temp" "maybe param" "maybe type" "temp"
    (897643 'move' call_tmp[897640](254538 call IRV _mt[203] call_tmp[897633]))
    (624542 'move' ret[624537](624541 'addr of' call_tmp[897640]))
    (624539 return ret[624537])
  }
  where {
    (254532 call(254529 call (partial) isSparse _mt[203] this[254524]))
  }
  function _array[255540](?).displayRepresentation[254544](arg _mt[254548]:_MT[201], arg this[254546]:_array[255540](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[897649] "expr temp" "maybe param" "maybe type" "temp"
    (897652 'move' call_tmp[897649](407955 call _value _mt[203] this[254546]))
    (254555 call(254552 call (partial) dsiDisplayRepresentation _mt[203] call_tmp[897649]))
    (624544 return _void[46])
  }
  function _array[255540](?).targetLocales[254558](arg _mt[254562]:_MT[201], arg this[254560]:_array[255540](?)) const ref : _unknown[42] "method" "primary method"
  {
    unknown ret[624548] "RVV" "temp"
    unknown call_tmp[897658] "expr temp" "maybe param" "maybe type" "temp"
    (897661 'move' call_tmp[897658](407959 call _value _mt[203] this[254560]))
    unknown call_tmp[897665] "expr temp" "maybe param" "maybe type" "temp"
    (897668 'move' call_tmp[897665](254570 call(254567 call (partial) dsiTargetLocales _mt[203] call_tmp[897658])))
    (624553 'move' ret[624548](624552 'addr of' call_tmp[897665]))
    (624550 return ret[624548])
  }
  function _array[255540](?).hasSingleLocalSubdomain[254573](arg _mt[254577]:_MT[201], arg this[254575]:_array[255540](?)) param : _unknown[42] "method" "primary method" "@unstable"
  {
    unknown ret[624557] "RVV" "param" "temp"
    unknown call_tmp[897672] "expr temp" "maybe param" "maybe type" "temp"
    (897675 'move' call_tmp[897672](407963 call _value _mt[203] this[254575]))
    unknown call_tmp[897679] "expr temp" "maybe param" "maybe type" "temp"
    (897682 'move' call_tmp[897679](254585 call(254582 call (partial) dsiHasSingleLocalSubdomain _mt[203] call_tmp[897672])))
    (624562 'move' ret[624557](624561 'deref' call_tmp[897679]))
    (624559 return ret[624557])
  }
  function _array[255540](?).localSubdomain[254588](arg _mt[254598]:_MT[201], arg this[254590]:_array[255540](?), arg loc[254594]:locale[234] =
  (450111 call here[135591])) : _unknown[42] "method" "primary method"
  {
    unknown ret[624566] "RVV" "temp"
    unknown call_tmp[897686] "expr temp" "maybe param" "maybe type" "temp"
    (897689 'move' call_tmp[897686](407967 call _value _mt[203] this[254590]))
    unknown call_tmp[897693] "expr temp" "maybe param" "maybe type" "temp"
    (897696 'move' call_tmp[897693](254613 call(254610 call (partial) dsiHasSingleLocalSubdomain _mt[203] call_tmp[897686])))
    unknown call_tmp[897698] "expr temp" "maybe param" "maybe type" "temp"
    (897701 'move' call_tmp[897698](254607 call ! call_tmp[897693]))
    unknown call_tmp[897703] "expr temp" "maybe param" "maybe type" "temp"
    (897706 'move' call_tmp[897703](254614 call _cond_test call_tmp[897698]))
    if call_tmp[897703]
    {
      (254602 call compilerError "the array may have multiple local subdomains")
    }
    unknown call_tmp[897710] "expr temp" "maybe param" "maybe type" "temp"
    (897713 'move' call_tmp[897710](407971 call _value _mt[203] this[254590]))
    unknown call_tmp[897717] "expr temp" "maybe param" "maybe type" "temp"
    (897720 'move' call_tmp[897717](254624 call(254621 call (partial) dsiLocalSubdomain _mt[203] call_tmp[897710]) loc[254594]))
    (624571 'move' ret[624566](624570 'deref' call_tmp[897717]))
    (624568 return ret[624566])
  }
  function _array[255540](?).localSubdomains[254628](arg _mt[254638]:_MT[201], arg this[254630]:_array[255540](?), arg loc[254634]:locale[234] =
  (450114 call here[135591])) : _unknown[42] "iterator fn" "method" "primary method" "@unstable" "no return value for void"
  {
    unknown ret[624575] "RVV" "temp"
    unknown call_tmp[897724] "expr temp" "maybe param" "maybe type" "temp"
    (897727 'move' call_tmp[897724](407979 call _value _mt[203] this[254630]))
    unknown call_tmp[897731] "expr temp" "maybe param" "maybe type" "temp"
    (897734 'move' call_tmp[897731](254694 call(254691 call (partial) dsiHasSingleLocalSubdomain _mt[203] call_tmp[897724])))
    unknown call_tmp[897736] "expr temp" "maybe param" "maybe type" "temp"
    (897739 'move' call_tmp[897736](254695 call _cond_test call_tmp[897731]))
    if call_tmp[897736]
    {
      unknown yret[624579] "YVV" "temp"
      unknown call_tmp[897743] "expr temp" "maybe param" "maybe type" "temp"
      (897746 'move' call_tmp[897743](254644 call(450117 call (partial) localSubdomain _mt[203] this[254630]) loc[254634]))
      (624582 'move' yret[624579](624581 'deref' call_tmp[897743]))
      (254642 yield yret[624579])
    }
    {
      {
        unknown _indexOfInterest[254658] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[254659] "expr temp" "temp"
        unknown call_tmp[897750] "expr temp" "maybe param" "maybe type" "temp"
        (897753 'move' call_tmp[897750](407975 call _value _mt[203] this[254630]))
        unknown call_tmp[897757] "expr temp" "maybe param" "maybe type" "temp"
        (897760 'move' call_tmp[897757](254653 call(254650 call (partial) dsiLocalSubdomains _mt[203] call_tmp[897750]) loc[254634]))
        (254668 'move' _iterator[254659](254666 call _getIterator call_tmp[897757]))
        Defer
        {
          {
            (254683 call _freeIterator _iterator[254659])
          }
        }
        { scopeless type
          (254673 'move' _indexOfInterest[254658](254670 call iteratorIndex _iterator[254659]))
        }
        ForLoop[254660]
        {
          unknown d[254647] "index var" "insert auto destroy"
          (563726 'end of statement')
          (254678 'move' d[254647] _indexOfInterest[254658])
          (563727 'end of statement' d[254647])
          unknown yret[624585] "YVV" "temp"
          (624588 'move' yret[624585](624587 'deref' d[254647]))
          (254655 yield yret[624585])
          (563729 'end of statement' d[254647])
          label _continueLabel[254663]
          _indexOfInterest[254658]
          _iterator[254659]
        }
        label _breakLabel[254664]
      }
    }
    (624577 return ret[624575])
  }
  function _array[255540](?).chpl__isDense1DArray[254701](arg _mt[254705]:_MT[201], arg this[254703]:_array[255540](?)) param : _unknown[42] "method" "primary method"
  {
    unknown ret[624593] "RVV" "param" "temp"
    unknown tmp[500538] "maybe param" "temp"
    unknown tmp[500559] "maybe param" "temp"
    (500570 'move' tmp[500559](254717 call(254714 call (partial) isRectangular _mt[203] this[254703])))
    unknown call_tmp[897764] "expr temp" "maybe param" "maybe type" "temp"
    (897767 'move' call_tmp[897764](500572 call _cond_invalid tmp[500559]))
    if call_tmp[897764]
    {
      (500575 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[700163] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[700164] "maybe param" "temp"
    unknown call_tmp[897769] "expr temp" "maybe param" "maybe type" "temp"
    (897772 'move' call_tmp[897769](500560 call isTrue tmp[500559]))
    (700169 'move' tmp[700164](700167 call _cond_test call_tmp[897769]))
    if tmp[700164]
    {
      unknown tmp[700171] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[897776] "expr temp" "maybe param" "maybe type" "temp"
      (897779 'move' call_tmp[897776](254721 call rank _mt[203] this[254703]))
      unknown call_tmp[897781] "expr temp" "maybe param" "maybe type" "temp"
      (897784 'move' call_tmp[897781](254718 call == call_tmp[897776] 1))
      (700173 'move' tmp[700171](500563 call isTrue call_tmp[897781]))
      (700178 'move' tmp[700163](700175 '_paramFoldLogical' tmp[700164] tmp[700171]))
    }
    {
      (700183 'move' tmp[700163](700180 '_paramFoldLogical' tmp[700164] 0))
    }
    (500549 'move' tmp[500538] tmp[700163])
    unknown call_tmp[897786] "expr temp" "maybe param" "maybe type" "temp"
    (897789 'move' call_tmp[897786](500551 call _cond_invalid tmp[500538]))
    if call_tmp[897786]
    {
      (500554 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[700190] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[700191] "maybe param" "temp"
    unknown call_tmp[897791] "expr temp" "maybe param" "maybe type" "temp"
    (897794 'move' call_tmp[897791](500539 call isTrue tmp[500538]))
    (700196 'move' tmp[700191](700194 call _cond_test call_tmp[897791]))
    if tmp[700191]
    {
      unknown tmp[700198] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[897798] "expr temp" "maybe param" "maybe type" "temp"
      (897801 'move' call_tmp[897798](254726 call _value _mt[203] this[254703]))
      unknown call_tmp[897805] "expr temp" "maybe param" "maybe type" "temp"
      (897808 'move' call_tmp[897805](254732 call(254729 call (partial) hasUnitStride _mt[203] call_tmp[897798])))
      (700200 'move' tmp[700198](500542 call isTrue call_tmp[897805]))
      (700205 'move' tmp[700190](700202 '_paramFoldLogical' tmp[700191] tmp[700198]))
    }
    {
      (700210 'move' tmp[700190](700207 '_paramFoldLogical' tmp[700191] 0))
    }
    (624598 'move' ret[624593](624597 'deref' tmp[700190]))
    (624595 return ret[624593])
  }
  function _array[255540](?).isEmpty[254735](arg _mt[254739]:_MT[201], arg this[254737]:_array[255540](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[624602] "RVV" "temp"
    unknown call_tmp[897812] "expr temp" "maybe param" "maybe type" "temp"
    (897815 'move' call_tmp[897812](254750 call(254747 call (partial) sizeAs _mt[203] this[254737]) uint(64)[86]))
    unknown call_tmp[897817] "expr temp" "maybe param" "maybe type" "temp"
    (897820 'move' call_tmp[897817](254744 call == call_tmp[897812] 0))
    (624608 'move' ret[624602](624607 'coerce' call_tmp[897817] bool[19]))
    (624604 return ret[624602])
  }
  { scopeless type
    bool[19]
  }
  function _array[255540](?).last[254756](arg _mt[254760]:_MT[201], arg this[254758]:_array[255540](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[624612] "RVV" "temp"
    unknown tmp[500580] "maybe param" "temp"
    unknown call_tmp[897824] "expr temp" "maybe param" "maybe type" "temp"
    (897827 'move' call_tmp[897824](254777 call(254774 call (partial) isRectangular _mt[203] this[254758])))
    (500591 'move' tmp[500580](254771 call ! call_tmp[897824]))
    unknown call_tmp[897829] "expr temp" "maybe param" "maybe type" "temp"
    (897832 'move' call_tmp[897829](500593 call _cond_invalid tmp[500580]))
    if call_tmp[897829]
    {
      (500596 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[700217] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[700218] "maybe param" "temp"
    unknown call_tmp[897834] "expr temp" "maybe param" "maybe type" "temp"
    (897837 'move' call_tmp[897834](500581 call isTrue tmp[500580]))
    (700223 'move' tmp[700218](700221 call _cond_test call_tmp[897834]))
    if tmp[700218]
    {
      (700228 'move' tmp[700217](700225 '_paramFoldLogical' tmp[700218] 1))
    }
    {
      unknown tmp[700230] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[897841] "expr temp" "maybe param" "maybe type" "temp"
      (897844 'move' call_tmp[897841](254781 call rank _mt[203] this[254758]))
      unknown call_tmp[897846] "expr temp" "maybe param" "maybe type" "temp"
      (897849 'move' call_tmp[897846](254778 call != call_tmp[897841] 1))
      (700232 'move' tmp[700230](500585 call isTrue call_tmp[897846]))
      (700237 'move' tmp[700217](700234 '_paramFoldLogical' tmp[700218] tmp[700230]))
    }
    unknown call_tmp[897851] "expr temp" "maybe param" "maybe type" "temp"
    (897854 'move' call_tmp[897851](254785 call _cond_test tmp[700217]))
    if call_tmp[897851]
    {
      (254764 call compilerError "last is only supported on 1D rectangular arrays")
    }
    unknown tmp[500601] "maybe param" "temp"
    (500612 'move' tmp[500601] 1)
    unknown call_tmp[897856] "expr temp" "maybe param" "maybe type" "temp"
    (897859 'move' call_tmp[897856](500614 call _cond_invalid tmp[500601]))
    if call_tmp[897856]
    {
      (500617 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[700244] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[700245] "maybe param" "temp"
    unknown call_tmp[897861] "expr temp" "maybe param" "maybe type" "temp"
    (897864 'move' call_tmp[897861](500602 call isTrue tmp[500601]))
    (700250 'move' tmp[700245](700248 call _cond_test call_tmp[897861]))
    if tmp[700245]
    {
      unknown tmp[700252] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[897868] "expr temp" "maybe param" "maybe type" "temp"
      (897871 'move' call_tmp[897868](254800 call(450126 call (partial) isEmpty _mt[203] this[254758])))
      (700254 'move' tmp[700252](500605 call isTrue call_tmp[897868]))
      (700259 'move' tmp[700244](700256 '_paramFoldLogical' tmp[700245] tmp[700252]))
    }
    {
      (700264 'move' tmp[700244](700261 '_paramFoldLogical' tmp[700245] 0))
    }
    unknown call_tmp[897873] "expr temp" "maybe param" "maybe type" "temp"
    (897876 'move' call_tmp[897873](254801 call _cond_test tmp[700244]))
    if call_tmp[897873]
    {
      (254791 call halt "last called on an empty array")
    }
    unknown call_tmp[897880] "expr temp" "maybe param" "maybe type" "temp"
    (897883 'move' call_tmp[897880](254810 call _dom _mt[203] this[254758]))
    unknown call_tmp[897887] "expr temp" "maybe param" "maybe type" "temp"
    (897890 'move' call_tmp[897887](254813 call last _mt[203] call_tmp[897880]))
    unknown call_tmp[897892] "expr temp" "maybe param" "maybe type" "temp"
    (897895 'move' call_tmp[897892](254808 call this[254758] call_tmp[897887]))
    (624617 'move' ret[624612](624616 'deref' call_tmp[897892]))
    (624614 return ret[624612])
  }
  function _array[255540](?).first[254818](arg _mt[254822]:_MT[201], arg this[254820]:_array[255540](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[624621] "RVV" "temp"
    unknown tmp[500622] "maybe param" "temp"
    unknown call_tmp[897899] "expr temp" "maybe param" "maybe type" "temp"
    (897902 'move' call_tmp[897899](254839 call(254836 call (partial) isRectangular _mt[203] this[254820])))
    (500633 'move' tmp[500622](254833 call ! call_tmp[897899]))
    unknown call_tmp[897904] "expr temp" "maybe param" "maybe type" "temp"
    (897907 'move' call_tmp[897904](500635 call _cond_invalid tmp[500622]))
    if call_tmp[897904]
    {
      (500638 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[700271] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[700272] "maybe param" "temp"
    unknown call_tmp[897909] "expr temp" "maybe param" "maybe type" "temp"
    (897912 'move' call_tmp[897909](500623 call isTrue tmp[500622]))
    (700277 'move' tmp[700272](700275 call _cond_test call_tmp[897909]))
    if tmp[700272]
    {
      (700282 'move' tmp[700271](700279 '_paramFoldLogical' tmp[700272] 1))
    }
    {
      unknown tmp[700284] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[897916] "expr temp" "maybe param" "maybe type" "temp"
      (897919 'move' call_tmp[897916](254843 call rank _mt[203] this[254820]))
      unknown call_tmp[897921] "expr temp" "maybe param" "maybe type" "temp"
      (897924 'move' call_tmp[897921](254840 call != call_tmp[897916] 1))
      (700286 'move' tmp[700284](500627 call isTrue call_tmp[897921]))
      (700291 'move' tmp[700271](700288 '_paramFoldLogical' tmp[700272] tmp[700284]))
    }
    unknown call_tmp[897926] "expr temp" "maybe param" "maybe type" "temp"
    (897929 'move' call_tmp[897926](254847 call _cond_test tmp[700271]))
    if call_tmp[897926]
    {
      (254826 call compilerError "first is only supported on 1D rectangular arrays")
    }
    unknown tmp[500643] "maybe param" "temp"
    (500654 'move' tmp[500643] 1)
    unknown call_tmp[897931] "expr temp" "maybe param" "maybe type" "temp"
    (897934 'move' call_tmp[897931](500656 call _cond_invalid tmp[500643]))
    if call_tmp[897931]
    {
      (500659 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[700298] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[700299] "maybe param" "temp"
    unknown call_tmp[897936] "expr temp" "maybe param" "maybe type" "temp"
    (897939 'move' call_tmp[897936](500644 call isTrue tmp[500643]))
    (700304 'move' tmp[700299](700302 call _cond_test call_tmp[897936]))
    if tmp[700299]
    {
      unknown tmp[700306] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[897943] "expr temp" "maybe param" "maybe type" "temp"
      (897946 'move' call_tmp[897943](254862 call(450132 call (partial) isEmpty _mt[203] this[254820])))
      (700308 'move' tmp[700306](500647 call isTrue call_tmp[897943]))
      (700313 'move' tmp[700298](700310 '_paramFoldLogical' tmp[700299] tmp[700306]))
    }
    {
      (700318 'move' tmp[700298](700315 '_paramFoldLogical' tmp[700299] 0))
    }
    unknown call_tmp[897948] "expr temp" "maybe param" "maybe type" "temp"
    (897951 'move' call_tmp[897948](254863 call _cond_test tmp[700298]))
    if call_tmp[897948]
    {
      (254853 call halt "first called on an empty array")
    }
    unknown call_tmp[897955] "expr temp" "maybe param" "maybe type" "temp"
    (897958 'move' call_tmp[897955](254872 call _dom _mt[203] this[254820]))
    unknown call_tmp[897962] "expr temp" "maybe param" "maybe type" "temp"
    (897965 'move' call_tmp[897962](254875 call first _mt[203] call_tmp[897955]))
    unknown call_tmp[897967] "expr temp" "maybe param" "maybe type" "temp"
    (897970 'move' call_tmp[897967](254870 call this[254820] call_tmp[897962]))
    (624626 'move' ret[624621](624625 'deref' call_tmp[897967]))
    (624623 return ret[624621])
  }
  function _array[255540](?).find[254880](arg _mt[254892]:_MT[201], arg this[254882]:_array[255540](?), arg val[254885] :
  (450137 call eltType _mt[203] this[254882]), ref arg idx[254889] :
  (450141 call fullIdxType _mt[203] this[254882])) : _unknown[42] "method" "primary method"
  {
    unknown ret[624639] "RVV" "temp"
    function max[254896](arg e[254899]:enum[147](?)) : _unknown[42]
    {
      unknown ret[624630] "RVV" "temp"
      unknown call_tmp[897978] "expr temp" "maybe param" "maybe type" "temp"
      (897981 'move' call_tmp[897978](254909 call size _mt[203] e[254899]))
      unknown call_tmp[897983] "expr temp" "maybe param" "maybe type" "temp"
      (897986 'move' call_tmp[897983](254906 call - call_tmp[897978] 1))
      unknown call_tmp[897988] "expr temp" "maybe param" "maybe type" "temp"
      (897991 'move' call_tmp[897988](254905 call chpl__orderToEnum call_tmp[897983] e[254899]))
      (624635 'move' ret[624630](624634 'deref' call_tmp[897988]))
      (624632 return ret[624630])
    }
    unknown tmp[500790] "maybe param" "temp"
    (500801 'move' tmp[500790](255188 call(255185 call (partial) isSparse _mt[203] this[254882])))
    unknown call_tmp[897995] "expr temp" "maybe param" "maybe type" "temp"
    (897998 'move' call_tmp[897995](500803 call _cond_invalid tmp[500790]))
    if call_tmp[897995]
    {
      (500806 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[700325] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[700326] "maybe param" "temp"
    unknown call_tmp[898000] "expr temp" "maybe param" "maybe type" "temp"
    (898003 'move' call_tmp[898000](500791 call isTrue tmp[500790]))
    (700331 'move' tmp[700326](700329 call _cond_test call_tmp[898000]))
    if tmp[700326]
    {
      unknown tmp[700333] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[898007] "expr temp" "maybe param" "maybe type" "temp"
      (898010 'move' call_tmp[898007](255193 call IRV _mt[203] this[254882]))
      unknown call_tmp[898012] "expr temp" "maybe param" "maybe type" "temp"
      (898015 'move' call_tmp[898012](255189 call == val[254885] call_tmp[898007]))
      (700335 'move' tmp[700333](500794 call isTrue call_tmp[898012]))
      (700340 'move' tmp[700325](700337 '_paramFoldLogical' tmp[700326] tmp[700333]))
    }
    {
      (700345 'move' tmp[700325](700342 '_paramFoldLogical' tmp[700326] 0))
    }
    unknown call_tmp[898017] "expr temp" "maybe param" "maybe type" "temp"
    (898020 'move' call_tmp[898017](255196 call _cond_test tmp[700325]))
    if call_tmp[898017]
    {
      {
        unknown _indexOfInterest[254960] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[254961] "expr temp" "temp"
        unknown call_tmp[898024] "expr temp" "maybe param" "maybe type" "temp"
        (898027 'move' call_tmp[898024](254920 call _dom _mt[203] this[254882]))
        unknown call_tmp[898031] "expr temp" "maybe param" "maybe type" "temp"
        (898034 'move' call_tmp[898031](254923 call _value _mt[203] call_tmp[898024]))
        unknown call_tmp[898038] "expr temp" "maybe param" "maybe type" "temp"
        (898041 'move' call_tmp[898038](254926 call parentDom _mt[203] call_tmp[898031]))
        (254970 'move' _iterator[254961](254968 call _getIterator call_tmp[898038]))
        Defer
        {
          {
            (254985 call _freeIterator _iterator[254961])
          }
        }
        { scopeless type
          (254975 'move' _indexOfInterest[254960](254972 call iteratorIndex _iterator[254961]))
        }
        ForLoop[254962]
        {
          unknown i[254917] "index var" "insert auto destroy"
          (563748 'end of statement')
          (254980 'move' i[254917] _indexOfInterest[254960])
          (563749 'end of statement' i[254917])
          {
            unknown tmp[500664] "maybe param" "temp"
            unknown call_tmp[898045] "expr temp" "maybe param" "maybe type" "temp"
            (898048 'move' call_tmp[898045](254942 call _dom _mt[203] this[254882]))
            unknown call_tmp[898052] "expr temp" "maybe param" "maybe type" "temp"
            (898055 'move' call_tmp[898052](254948 call(254945 call (partial) contains _mt[203] call_tmp[898045]) i[254917]))
            (500675 'move' tmp[500664](254939 call ! call_tmp[898052]))
            unknown call_tmp[898057] "expr temp" "maybe param" "maybe type" "temp"
            (898060 'move' call_tmp[898057](500677 call _cond_invalid tmp[500664]))
            if call_tmp[898057]
            {
              (500680 call compilerError "cannot promote short-circuiting || operator")
            }
            unknown tmp[700352] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[700353] "maybe param" "temp"
            unknown call_tmp[898062] "expr temp" "maybe param" "maybe type" "temp"
            (898065 'move' call_tmp[898062](500665 call isTrue tmp[500664]))
            (700358 'move' tmp[700353](700356 call _cond_test call_tmp[898062]))
            if tmp[700353]
            {
              (700363 'move' tmp[700352](700360 '_paramFoldLogical' tmp[700353] 1))
            }
            {
              unknown tmp[700365] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[898067] "expr temp" "maybe param" "maybe type" "temp"
              (898070 'move' call_tmp[898067](254953 call this[254882] i[254917]))
              unknown call_tmp[898072] "expr temp" "maybe param" "maybe type" "temp"
              (898075 'move' call_tmp[898072](254950 call == call_tmp[898067] val[254885]))
              (700367 'move' tmp[700365](500669 call isTrue call_tmp[898072]))
              (700372 'move' tmp[700352](700369 '_paramFoldLogical' tmp[700353] tmp[700365]))
            }
            unknown call_tmp[898077] "expr temp" "maybe param" "maybe type" "temp"
            (898080 'move' call_tmp[898077](254956 call _cond_test tmp[700352]))
            if call_tmp[898077]
            {
              (254931 call = idx[254889] i[254917])
              (563752 'end of statement' i[254917])
              (624645 'move' ret[624639](624644 'coerce' 1 bool[19]))
              gotoReturn _end_find[624637] _end_find[624637]
            }
          }
          label _continueLabel[254965]
          _indexOfInterest[254960]
          _iterator[254961]
        }
        label _breakLabel[254966]
      }
      (624651 'move' ret[624639](624650 'coerce' 0 bool[19]))
      gotoReturn _end_find[624637] _end_find[624637]
    }
    {
      unknown tmp[500727] "maybe param" "temp"
      unknown call_tmp[898084] "expr temp" "maybe param" "maybe type" "temp"
      (898087 'move' call_tmp[898084](255169 call idxType _mt[203] this[254882]))
      (500738 'move' tmp[500727](255166 call != call_tmp[898084] bool[19]))
      unknown call_tmp[898089] "expr temp" "maybe param" "maybe type" "temp"
      (898092 'move' call_tmp[898089](500740 call _cond_invalid tmp[500727]))
      if call_tmp[898089]
      {
        (500743 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[700379] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[700380] "maybe param" "temp"
      unknown call_tmp[898094] "expr temp" "maybe param" "maybe type" "temp"
      (898097 'move' call_tmp[898094](500728 call isTrue tmp[500727]))
      (700385 'move' tmp[700380](700383 call _cond_test call_tmp[898094]))
      if tmp[700380]
      {
        unknown tmp[700387] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[898101] "expr temp" "maybe param" "maybe type" "temp"
        (898104 'move' call_tmp[898101](450186 call fullIdxType _mt[203] this[254882]))
        unknown call_tmp[898106] "expr temp" "maybe param" "maybe type" "temp"
        (898109 'move' call_tmp[898106](255173 'call and fn resolves' "max" call_tmp[898101]))
        (700389 'move' tmp[700387](500731 call isTrue call_tmp[898106]))
        (700394 'move' tmp[700379](700391 '_paramFoldLogical' tmp[700380] tmp[700387]))
      }
      {
        (700399 'move' tmp[700379](700396 '_paramFoldLogical' tmp[700380] 0))
      }
      unknown call_tmp[898111] "expr temp" "maybe param" "maybe type" "temp"
      (898114 'move' call_tmp[898111](255178 call _cond_test tmp[700379]))
      if call_tmp[898111]
      {
        unknown foundIt[254996] "dead at end of block" "insert auto destroy"
        (651323 'init var' foundIt[254996] 0)
        (254999 'end of statement')
        unknown call_tmp[898118] "expr temp" "maybe param" "maybe type" "temp"
        (898121 'move' call_tmp[898118](450154 call fullIdxType _mt[203] this[254882]))
        unknown call_tmp[898123] "maybe param" "maybe type" "temp"
        (898126 'move' call_tmp[898123](255003 call max call_tmp[898118]))
        unknown locIdx[255001] "dead at end of block" "insert auto destroy"
        (651325 'init var' locIdx[255001] call_tmp[898123])
        (255006 'end of statement')
        unknown call_tmp[898130] "expr temp" "maybe param" "maybe type" "temp"
        (898133 'move' call_tmp[898130](470028 call _dom _mt[203] this[254882]))
        unknown call_tmp[898135] "maybe param" "maybe type" "temp"
        (898138 'move' call_tmp[898135](470024 call chpl__staticAutoLocalCheck this[254882] call_tmp[898130]))
        unknown chpl__staticAutoLocalCheckSym[470023] "dead at end of block" "param" "temp"
        (651327 'init var' chpl__staticAutoLocalCheckSym[470023] call_tmp[898135])
        if chpl__staticAutoLocalCheckSym[470023]
        {
          unknown call_tmp[898142] "expr temp" "maybe param" "maybe type" "temp"
          (898145 'move' call_tmp[898142](255010 call _dom _mt[203] this[254882]))
          Forall[255061] {
            induction variables:
              
              unknown i[255007] "index var" "insert auto destroy"
            iterated expressions:
              call_tmp[898142]
            shadow variables:
              locIdx[255016] 'reduce' intent outer var locIdx[255001]
                init block
                {
                }
                deinit block
                {
                }
              foundIt[255023] 'reduce' intent outer var foundIt[254996]
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              unknown tmp[500685] "maybe param" "temp"
              unknown call_tmp[898147] "expr temp" "maybe param" "maybe type" "temp"
              (898150 'move' call_tmp[898147](470034 'may be local access' this[254882] i[255007] chpl__staticAutoLocalCheckSym[470023] 1))
              (500696 'move' tmp[500685](255040 call == call_tmp[898147] val[254885]))
              unknown call_tmp[898152] "expr temp" "maybe param" "maybe type" "temp"
              (898155 'move' call_tmp[898152](500698 call _cond_invalid tmp[500685]))
              if call_tmp[898152]
              {
                (500701 call compilerError "cannot promote short-circuiting && operator")
              }
              unknown tmp[700433] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[700434] "maybe param" "temp"
              unknown call_tmp[898157] "expr temp" "maybe param" "maybe type" "temp"
              (898160 'move' call_tmp[898157](500686 call isTrue tmp[500685]))
              (700439 'move' tmp[700434](700437 call _cond_test call_tmp[898157]))
              if tmp[700434]
              {
                unknown tmp[500706] "maybe param" "temp"
                (500717 'move' tmp[500706](255048 call ! foundIt[255023]))
                unknown call_tmp[898162] "expr temp" "maybe param" "maybe type" "temp"
                (898165 'move' call_tmp[898162](500719 call _cond_invalid tmp[500706]))
                if call_tmp[898162]
                {
                  (500722 call compilerError "cannot promote short-circuiting || operator")
                }
                unknown tmp[700406] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                unknown tmp[700407] "maybe param" "temp"
                unknown call_tmp[898167] "expr temp" "maybe param" "maybe type" "temp"
                (898170 'move' call_tmp[898167](500707 call isTrue tmp[500706]))
                (700412 'move' tmp[700407](700410 call _cond_test call_tmp[898167]))
                if tmp[700407]
                {
                  (700417 'move' tmp[700406](700414 '_paramFoldLogical' tmp[700407] 1))
                }
                {
                  unknown tmp[700419] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                  unknown call_tmp[898172] "expr temp" "maybe param" "maybe type" "temp"
                  (898175 'move' call_tmp[898172](255051 call < i[255007] locIdx[255016]))
                  (700421 'move' tmp[700419](500711 call isTrue call_tmp[898172]))
                  (700426 'move' tmp[700406](700423 '_paramFoldLogical' tmp[700407] tmp[700419]))
                }
                unknown tmp[700441] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                (700443 'move' tmp[700441](500689 call isTrue tmp[700406]))
                (700448 'move' tmp[700433](700445 '_paramFoldLogical' tmp[700434] tmp[700441]))
              }
              {
                (700453 'move' tmp[700433](700450 '_paramFoldLogical' tmp[700434] 0))
              }
              unknown call_tmp[898177] "expr temp" "maybe param" "maybe type" "temp"
              (898180 'move' call_tmp[898177](255055 call _cond_test tmp[700433]))
              if call_tmp[898177]
              {
                (255030 call = locIdx[255016] i[255007])
                (563758 'end of statement' locIdx[255016] i[255007])
                (255034 call = foundIt[255023] 1)
                (563761 'end of statement' foundIt[255023])
              }
            }
          }
        }
        {
          unknown call_tmp[898184] "expr temp" "maybe param" "maybe type" "temp"
          (898187 'move' call_tmp[898184](470002 call _dom _mt[203] this[254882]))
          Forall[469998] {
            induction variables:
              
              unknown i[469999] "index var" "insert auto destroy"
            iterated expressions:
              call_tmp[898184]
            shadow variables:
              locIdx[470006] 'reduce' intent outer var locIdx[255001]
                init block
                {
                }
                deinit block
                {
                }
              foundIt[470015] 'reduce' intent outer var foundIt[254996]
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              unknown tmp[500748] "maybe param" "temp"
              unknown call_tmp[898189] "expr temp" "maybe param" "maybe type" "temp"
              (898192 'move' call_tmp[898189](469976 call this[254882] i[469999]))
              (500759 'move' tmp[500748](469974 call == call_tmp[898189] val[254885]))
              unknown call_tmp[898194] "expr temp" "maybe param" "maybe type" "temp"
              (898197 'move' call_tmp[898194](500761 call _cond_invalid tmp[500748]))
              if call_tmp[898194]
              {
                (500764 call compilerError "cannot promote short-circuiting && operator")
              }
              unknown tmp[700487] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[700488] "maybe param" "temp"
              unknown call_tmp[898199] "expr temp" "maybe param" "maybe type" "temp"
              (898202 'move' call_tmp[898199](500749 call isTrue tmp[500748]))
              (700493 'move' tmp[700488](700491 call _cond_test call_tmp[898199]))
              if tmp[700488]
              {
                unknown tmp[500769] "maybe param" "temp"
                (500780 'move' tmp[500769](469982 call ! foundIt[470015]))
                unknown call_tmp[898204] "expr temp" "maybe param" "maybe type" "temp"
                (898207 'move' call_tmp[898204](500782 call _cond_invalid tmp[500769]))
                if call_tmp[898204]
                {
                  (500785 call compilerError "cannot promote short-circuiting || operator")
                }
                unknown tmp[700460] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                unknown tmp[700461] "maybe param" "temp"
                unknown call_tmp[898209] "expr temp" "maybe param" "maybe type" "temp"
                (898212 'move' call_tmp[898209](500770 call isTrue tmp[500769]))
                (700466 'move' tmp[700461](700464 call _cond_test call_tmp[898209]))
                if tmp[700461]
                {
                  (700471 'move' tmp[700460](700468 '_paramFoldLogical' tmp[700461] 1))
                }
                {
                  unknown tmp[700473] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                  unknown call_tmp[898214] "expr temp" "maybe param" "maybe type" "temp"
                  (898217 'move' call_tmp[898214](469985 call < i[469999] locIdx[470006]))
                  (700475 'move' tmp[700473](500774 call isTrue call_tmp[898214]))
                  (700480 'move' tmp[700460](700477 '_paramFoldLogical' tmp[700461] tmp[700473]))
                }
                unknown tmp[700495] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                (700497 'move' tmp[700495](500752 call isTrue tmp[700460]))
                (700502 'move' tmp[700487](700499 '_paramFoldLogical' tmp[700488] tmp[700495]))
              }
              {
                (700507 'move' tmp[700487](700504 '_paramFoldLogical' tmp[700488] 0))
              }
              unknown call_tmp[898219] "expr temp" "maybe param" "maybe type" "temp"
              (898222 'move' call_tmp[898219](469970 call _cond_test tmp[700487]))
              if call_tmp[898219]
              {
                (469990 call = locIdx[470006] i[469999])
                (563764 'end of statement' locIdx[470006] i[469999])
                (469994 call = foundIt[470015] 1)
                (563767 'end of statement' foundIt[470015])
              }
            }
          }
        }
        unknown call_tmp[898224] "expr temp" "maybe param" "maybe type" "temp"
        (898227 'move' call_tmp[898224](255070 call _cond_test foundIt[254996]))
        if call_tmp[898224]
        {
          (255064 call = idx[254889] locIdx[255001])
          (563769 'end of statement' locIdx[255001])
        }
        (624657 'move' ret[624639](624656 'coerce' foundIt[254996] bool[19]))
        gotoReturn _end_find[624637] _end_find[624637]
        (563771 'end of statement' foundIt[254996])
      }
      {
        unknown foundIt[255079] "dead at end of block" "insert auto destroy"
        (651329 'init var' foundIt[255079] 0)
        (255082 'end of statement')
        {
          unknown _indexOfInterest[255130] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[255131] "expr temp" "temp"
          unknown call_tmp[898231] "expr temp" "maybe param" "maybe type" "temp"
          (898234 'move' call_tmp[898231](255086 call _dom _mt[203] this[254882]))
          (255140 'move' _iterator[255131](255138 call _getIterator call_tmp[898231]))
          Defer
          {
            {
              (255155 call _freeIterator _iterator[255131])
            }
          }
          { scopeless type
            (255145 'move' _indexOfInterest[255130](255142 call iteratorIndex _iterator[255131]))
          }
          ForLoop[255132]
          {
            unknown i[255083] "index var" "insert auto destroy"
            (563774 'end of statement')
            (255150 'move' i[255083] _indexOfInterest[255130])
            (563775 'end of statement' i[255083])
            {
              unknown call_tmp[898236] "expr temp" "maybe param" "maybe type" "temp"
              (898239 'move' call_tmp[898236](255123 call this[254882] i[255083]))
              unknown call_tmp[898241] "expr temp" "maybe param" "maybe type" "temp"
              (898244 'move' call_tmp[898241](255120 call == call_tmp[898236] val[254885]))
              unknown call_tmp[898246] "expr temp" "maybe param" "maybe type" "temp"
              (898249 'move' call_tmp[898246](255126 call _cond_test call_tmp[898241]))
              if call_tmp[898246]
              {
                unknown call_tmp[898251] "expr temp" "maybe param" "maybe type" "temp"
                (898254 'move' call_tmp[898251](255116 call _cond_test foundIt[255079]))
                if call_tmp[898251]
                {
                  unknown call_tmp[898256] "expr temp" "maybe param" "maybe type" "temp"
                  (898259 'move' call_tmp[898256](255097 call < i[255083] idx[254889]))
                  unknown call_tmp[898261] "expr temp" "maybe param" "maybe type" "temp"
                  (898264 'move' call_tmp[898261](255101 call _cond_test call_tmp[898256]))
                  if call_tmp[898261]
                  {
                    (255092 call = idx[254889] i[255083])
                    (563777 'end of statement' i[255083])
                  }
                }
                {
                  (255107 call = idx[254889] i[255083])
                  (563779 'end of statement' i[255083])
                  (255111 call = foundIt[255079] 1)
                  (563781 'end of statement' foundIt[255079])
                }
              }
            }
            label _continueLabel[255135]
            _indexOfInterest[255130]
            _iterator[255131]
          }
          label _breakLabel[255136]
        }
        (624663 'move' ret[624639](624662 'coerce' foundIt[255079] bool[19]))
        gotoReturn _end_find[624637] _end_find[624637]
        (563783 'end of statement' foundIt[255079])
      }
    }
    label _end_find[624637]
    (624641 return ret[624639])
  }
  { scopeless type
    bool[19]
  }
  function _array[255540](?).find[255204](arg _mt[255212]:_MT[201], arg this[255206]:_array[255540](?), arg val[255209] :
  (450191 call eltType _mt[203] this[255206])) : _unknown[42] "method" "primary method"
  {
    unknown ret[624669] "RVV" "temp"
    unknown tmp[500811] "maybe param" "temp"
    unknown tmp[500832] "maybe param" "temp"
    (500843 'move' tmp[500832](255232 call(255229 call (partial) isRectangular _mt[203] this[255206])))
    unknown call_tmp[898270] "expr temp" "maybe param" "maybe type" "temp"
    (898273 'move' call_tmp[898270](500845 call _cond_invalid tmp[500832]))
    if call_tmp[898270]
    {
      (500848 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[700514] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[700515] "maybe param" "temp"
    unknown call_tmp[898275] "expr temp" "maybe param" "maybe type" "temp"
    (898278 'move' call_tmp[898275](500833 call isTrue tmp[500832]))
    (700520 'move' tmp[700515](700518 call _cond_test call_tmp[898275]))
    if tmp[700515]
    {
      (700525 'move' tmp[700514](700522 '_paramFoldLogical' tmp[700515] 1))
    }
    {
      unknown tmp[700527] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[898282] "expr temp" "maybe param" "maybe type" "temp"
      (898285 'move' call_tmp[898282](255237 call(255234 call (partial) isSparse _mt[203] this[255206])))
      (700529 'move' tmp[700527](500837 call isTrue call_tmp[898282]))
      (700534 'move' tmp[700514](700531 '_paramFoldLogical' tmp[700515] tmp[700527]))
    }
    (500822 'move' tmp[500811](255224 call ! tmp[700514]))
    unknown call_tmp[898287] "expr temp" "maybe param" "maybe type" "temp"
    (898290 'move' call_tmp[898287](500824 call _cond_invalid tmp[500811]))
    if call_tmp[898287]
    {
      (500827 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[700541] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[700542] "maybe param" "temp"
    unknown call_tmp[898292] "expr temp" "maybe param" "maybe type" "temp"
    (898295 'move' call_tmp[898292](500812 call isTrue tmp[500811]))
    (700547 'move' tmp[700542](700545 call _cond_test call_tmp[898292]))
    if tmp[700542]
    {
      (700552 'move' tmp[700541](700549 '_paramFoldLogical' tmp[700542] 1))
    }
    {
      unknown tmp[700554] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[898299] "expr temp" "maybe param" "maybe type" "temp"
      (898302 'move' call_tmp[898299](255243 call idxType _mt[203] this[255206]))
      unknown call_tmp[898304] "expr temp" "maybe param" "maybe type" "temp"
      (898307 'move' call_tmp[898304](255241 call isIntegralType call_tmp[898299]))
      unknown call_tmp[898309] "expr temp" "maybe param" "maybe type" "temp"
      (898312 'move' call_tmp[898309](255238 call ! call_tmp[898304]))
      (700556 'move' tmp[700554](500816 call isTrue call_tmp[898309]))
      (700561 'move' tmp[700541](700558 '_paramFoldLogical' tmp[700542] tmp[700554]))
    }
    unknown call_tmp[898314] "expr temp" "maybe param" "maybe type" "temp"
    (898317 'move' call_tmp[898314](255246 call _cond_test tmp[700541]))
    if call_tmp[898314]
    {
      (255217 call compilerError "This array type does not currently support the 1-argument '.find()' method; try using the 2-argument version'")
    }
    unknown idx[255252] "dead at end of block" "insert auto destroy"
    unknown call_tmp[898321] "expr temp" "maybe param" "maybe type" "temp"
    (898324 'move' call_tmp[898321](450199 call fullIdxType _mt[203] this[255206]))
    (651331 'default init var' idx[255252] call_tmp[898321])
    (255255 'end of statement')
    unknown call_tmp[898328] "expr temp" "maybe param" "maybe type" "temp"
    (898331 'move' call_tmp[898328](255272 call(450204 call (partial) find _mt[203] this[255206]) val[255209] idx[255252]))
    unknown call_tmp[898333] "expr temp" "maybe param" "maybe type" "temp"
    (898336 'move' call_tmp[898333](255275 call _cond_test call_tmp[898328]))
    if call_tmp[898333]
    {
      unknown call_tmp[898340] "expr temp" "maybe param" "maybe type" "temp"
      (898343 'move' call_tmp[898340](624674 call fullIdxType _mt[203] this[255206]))
      (624678 'move' ret[624669](624677 'coerce' idx[255252] call_tmp[898340]))
      gotoReturn _end_find[624667] _end_find[624667]
      (563788 'end of statement' idx[255252])
    }
    {
      unknown call_tmp[898347] "expr temp" "maybe param" "maybe type" "temp"
      (898350 'move' call_tmp[898347](255263 call _dom _mt[203] this[255206]))
      unknown call_tmp[898354] "expr temp" "maybe param" "maybe type" "temp"
      (898357 'move' call_tmp[898354](255266 call lowBound _mt[203] call_tmp[898347]))
      unknown call_tmp[898359] "expr temp" "maybe param" "maybe type" "temp"
      (898362 'move' call_tmp[898359](255260 call - call_tmp[898354] 1))
      unknown call_tmp[898366] "expr temp" "maybe param" "maybe type" "temp"
      (898369 'move' call_tmp[898366](624683 call fullIdxType _mt[203] this[255206]))
      (624687 'move' ret[624669](624686 'coerce' call_tmp[898359] call_tmp[898366]))
      gotoReturn _end_find[624667] _end_find[624667]
    }
    label _end_find[624667]
    (624671 return ret[624669])
  }
  { scopeless type
    (450195 call fullIdxType _mt[203] this[255206])
  }
  function _array[255540](?).count[255284](arg _mt[255295]:_MT[201], arg this[255286]:_array[255540](?), arg val[255292] :
  (255289 call eltType _mt[203] this[255286])) : _unknown[42] "method" "primary method"
  {
    unknown ret[624693] "RVV" "temp"
    unknown call_tmp[898375] "expr temp" "maybe param" "maybe type" "temp"
    (898378 'move' call_tmp[898375](255301 call == this[255286] val[255292]))
    unknown call_tmp[898380] "expr temp" "maybe param" "maybe type" "temp"
    (898383 'move' call_tmp[898380](255305 'reduce' SumReduceScanOp[429526](?) call_tmp[898375] 0))
    (624699 'move' ret[624693](624698 'coerce' call_tmp[898380] int(64)[10]))
    (624695 return ret[624693])
  }
  { scopeless type
    int(64)[10]
  }
  function _array[255540](?).shape[255310](arg _mt[255314]:_MT[201], arg this[255312]:_array[255540](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[624703] "RVV" "temp"
    unknown call_tmp[898387] "expr temp" "maybe param" "maybe type" "temp"
    (898390 'move' call_tmp[898387](255335 call _dom _mt[203] this[255312]))
    unknown call_tmp[898394] "expr temp" "maybe param" "maybe type" "temp"
    (898397 'move' call_tmp[898394](255340 call shape _mt[203] call_tmp[898387]))
    unknown call_tmp[898401] "expr temp" "maybe param" "maybe type" "temp"
    (898404 'move' call_tmp[898401](624710 call rank _mt[203] this[255312]))
    unknown call_tmp[898406] "expr temp" "maybe param" "maybe type" "temp"
    (898409 'move' call_tmp[898406](624708 call * call_tmp[898401] int(64)[10]))
    (624715 'move' ret[624703](624714 'coerce' call_tmp[898394] call_tmp[898406]))
    (624705 return ret[624703])
  }
  where {
    unknown tmp[500853] "maybe param" "temp"
    (500864 'move' tmp[500853](255326 call(255323 call (partial) isRectangular _mt[203] this[255312])))
    unknown call_tmp[898413] "expr temp" "maybe param" "maybe type" "temp"
    (898416 'move' call_tmp[898413](500866 call _cond_invalid tmp[500853]))
    if call_tmp[898413]
    {
      (500869 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[700568] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[700569] "maybe param" "temp"
    unknown call_tmp[898418] "expr temp" "maybe param" "maybe type" "temp"
    (898421 'move' call_tmp[898418](500854 call isTrue tmp[500853]))
    (700574 'move' tmp[700569](700572 call _cond_test call_tmp[898418]))
    if tmp[700569]
    {
      (700579 'move' tmp[700568](700576 '_paramFoldLogical' tmp[700569] 1))
    }
    {
      unknown tmp[700581] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[898425] "expr temp" "maybe param" "maybe type" "temp"
      (898428 'move' call_tmp[898425](255331 call(255328 call (partial) isSparse _mt[203] this[255312])))
      (700583 'move' tmp[700581](500858 call isTrue call_tmp[898425]))
      (700588 'move' tmp[700568](700585 '_paramFoldLogical' tmp[700569] tmp[700581]))
    }
    (1001640 call chpl_statementLevelSymbol tmp[700568])
  }
  { scopeless type
    unknown call_tmp[898432] "expr temp" "maybe param" "maybe type" "temp"
    (898435 'move' call_tmp[898432](450213 call rank _mt[203] this[255312]))
    (255316 call * call_tmp[898432] int(64)[10])
  }
  function _array[255540](?).shape[255347](arg _mt[255351]:_MT[201], arg this[255349]:_array[255540](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[624719] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[578619] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[898439] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (898442 'move' call_tmp[898439](450217 call size _mt[203] this[255349]))
      (578623 'move' call_type_tmp[578619](255363 'typeof' call_tmp[898439]))
    }
    unknown s[255360] "dead at end of block" "insert auto destroy"
    unknown call_tmp[898444] "expr temp" "maybe param" "maybe type" "temp"
    (898447 'move' call_tmp[898444](255364 call _build_tuple call_type_tmp[578619]))
    (651333 'default init var' s[255360] call_tmp[898444])
    (255367 'end of statement')
    unknown call_tmp[898449] "expr temp" "maybe param" "maybe type" "temp"
    (898452 'move' call_tmp[898449](255371 call s[255360] 0))
    unknown call_tmp[898456] "expr temp" "maybe param" "maybe type" "temp"
    (898459 'move' call_tmp[898456](450222 call size _mt[203] this[255349]))
    (255368 call = call_tmp[898449] call_tmp[898456])
    (563793 'end of statement' s[255360])
    (624724 'move' ret[624719](624723 'deref' s[255360]))
    gotoReturn _end_shape[624717] _end_shape[624717]
    (563795 'end of statement' s[255360])
    label _end_shape[624717]
    (624721 return ret[624719])
  }
  where {
    (255357 call(255354 call (partial) isAssociative _mt[203] this[255349]))
  }
  function _array[255540](?).shape[255379](arg _mt[255383]:_MT[201], arg this[255381]:_array[255540](?)) : _unknown[42] "method" "primary method" "no parens" "no return value for void"
  {
    (255387 call compilerError ".shape not supported on this array")
    (624728 return _void[46])
  }
  function _array[255540](?)._scan[255393](arg _mt[255399]:_MT[201], arg this[255395]:_array[255540](?), arg op[255397]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[624732] "RVV" "temp"
    unknown call_tmp[898465] "expr temp" "maybe param" "maybe type" "temp"
    (898468 'move' call_tmp[898465](408017 call _value _mt[203] this[255395]))
    unknown call_tmp[898474] "expr temp" "maybe param" "maybe type" "temp"
    (898477 'move' call_tmp[898474](255426 call _dom _mt[203] this[255395]))
    unknown call_tmp[898479] "expr temp" "maybe param" "maybe type" "temp"
    (898482 'move' call_tmp[898479](255423 call(255420 call (partial) doiScan _mt[203] call_tmp[898465]) op[255397] call_tmp[898474]))
    (624737 'move' ret[624732](624736 'deref' call_tmp[898479]))
    (624734 return ret[624732])
  }
  where {
    unknown call_tmp[898486] "expr temp" "maybe param" "maybe type" "temp"
    (898489 'move' call_tmp[898486](450227 call _value _mt[203] this[255395]))
    unknown call_tmp[898493] "expr temp" "maybe param" "maybe type" "temp"
    (898496 'move' call_tmp[898493](255412 call _dom _mt[203] this[255395]))
    (255405 call canResolveMethod module=[222] Reflection[1804] call_tmp[898486] "doiScan" op[255397] call_tmp[898493])
    (408010 'referenced modules list' Reflection[1804])
  }
  function _array[255540](?).iteratorYieldsLocalElements[255432](arg _mt[255436]:_MT[201], arg this[255434]:_array[255540](?)) param : _unknown[42] "method" "primary method"
  {
    unknown ret[624741] "RVV" "param" "temp"
    unknown call_tmp[898500] "expr temp" "maybe param" "maybe type" "temp"
    (898503 'move' call_tmp[898500](408022 call _value _mt[203] this[255434]))
    unknown call_tmp[898507] "expr temp" "maybe param" "maybe type" "temp"
    (898510 'move' call_tmp[898507](255444 call(255441 call (partial) dsiIteratorYieldsLocalElements _mt[203] call_tmp[898500])))
    (624746 'move' ret[624741](624745 'deref' call_tmp[898507]))
    (624743 return ret[624741])
  }
  function _array[255540](?).chpl_isNonDistributedArray[255447](arg _mt[255451]:_MT[201], arg this[255449]:_array[255540](?)) param : _unknown[42] "method" "primary method"
  {
    unknown ret[624750] "RVV" "param" "temp"
    unknown call_tmp[898514] "expr temp" "maybe param" "maybe type" "temp"
    (898517 'move' call_tmp[898514](450233 call _value _mt[203] this[255449]))
    unknown call_tmp[898519] "expr temp" "maybe param" "maybe type" "temp"
    (898522 'move' call_tmp[898519](255460 call chpl__getActualArray call_tmp[898514]))
    unknown call_tmp[898526] "expr temp" "maybe param" "maybe type" "temp"
    (898529 'move' call_tmp[898526](255462 call dom _mt[203] call_tmp[898519]))
    unknown call_tmp[898531] "expr temp" "maybe param" "maybe type" "temp"
    (898534 'move' call_tmp[898531](255458 call _getDomain call_tmp[898526]))
    unknown call_tmp[898536] "expr temp" "maybe param" "maybe type" "temp"
    (898539 'move' call_tmp[898536](255456 call chpl_domainDistIsLayout call_tmp[898531]))
    (624755 'move' ret[624750](624754 'deref' call_tmp[898536]))
    (624752 return ret[624750])
  }
  function _array[255540](?).isRectangular[255467](arg _mt[255471]:_MT[201], arg this[255469]:_array[255540](?)) param : _unknown[42] "method" "primary method"
  {
    unknown ret[624759] "RVV" "param" "temp"
    unknown call_tmp[898543] "expr temp" "maybe param" "maybe type" "temp"
    (898546 'move' call_tmp[898543](255476 call _dom _mt[203] this[255469]))
    unknown call_tmp[898550] "expr temp" "maybe param" "maybe type" "temp"
    (898553 'move' call_tmp[898550](255482 call(255479 call (partial) isRectangular _mt[203] call_tmp[898543])))
    (624764 'move' ret[624759](624763 'deref' call_tmp[898550]))
    (624761 return ret[624759])
  }
  function _array[255540](?).isIrregular[255485](arg _mt[255489]:_MT[201], arg this[255487]:_array[255540](?)) param : _unknown[42] "method" "primary method"
  {
    unknown ret[624768] "RVV" "param" "temp"
    unknown call_tmp[898557] "expr temp" "maybe param" "maybe type" "temp"
    (898560 'move' call_tmp[898557](255494 call _dom _mt[203] this[255487]))
    unknown call_tmp[898564] "expr temp" "maybe param" "maybe type" "temp"
    (898567 'move' call_tmp[898564](255500 call(255497 call (partial) isIrregular _mt[203] call_tmp[898557])))
    (624773 'move' ret[624768](624772 'deref' call_tmp[898564]))
    (624770 return ret[624768])
  }
  function _array[255540](?).isAssociative[255503](arg _mt[255507]:_MT[201], arg this[255505]:_array[255540](?)) param : _unknown[42] "method" "primary method"
  {
    unknown ret[624777] "RVV" "param" "temp"
    unknown call_tmp[898571] "expr temp" "maybe param" "maybe type" "temp"
    (898574 'move' call_tmp[898571](255512 call _dom _mt[203] this[255505]))
    unknown call_tmp[898578] "expr temp" "maybe param" "maybe type" "temp"
    (898581 'move' call_tmp[898578](255518 call(255515 call (partial) isAssociative _mt[203] call_tmp[898571])))
    (624782 'move' ret[624777](624781 'deref' call_tmp[898578]))
    (624779 return ret[624777])
  }
  function _array[255540](?).isSparse[255521](arg _mt[255525]:_MT[201], arg this[255523]:_array[255540](?)) param : _unknown[42] "method" "primary method"
  {
    unknown ret[624786] "RVV" "param" "temp"
    unknown call_tmp[898585] "expr temp" "maybe param" "maybe type" "temp"
    (898588 'move' call_tmp[898585](255530 call _dom _mt[203] this[255523]))
    unknown call_tmp[898592] "expr temp" "maybe param" "maybe type" "temp"
    (898595 'move' call_tmp[898592](255536 call(255533 call (partial) isSparse _mt[203] call_tmp[898585])))
    (624791 'move' ret[624786](624790 'deref' call_tmp[898592]))
    (624788 return ret[624786])
  }
  type _array[255540](?) val _pid[250452]:int(64)[10] int(64)[10] unknown _instance[250457] "alias scope from this" "owned" val _unowned[250461]:bool[19] bool[19] forwarding ( )
  function _do_destroy_arr[255542](arg _unowned[255545]:bool[19], arg _instance[255548]:_any[141](?), arg deinitElts[255551] :
  1 =
  1) : _unknown[42] "inline" "no return value for void"
  {
    unknown call_tmp[898597] "expr temp" "maybe param" "maybe type" "temp"
    (898600 'move' call_tmp[898597](255779 call ! _unowned[255545]))
    unknown call_tmp[898602] "expr temp" "maybe param" "maybe type" "temp"
    (898605 'move' call_tmp[898602](255782 call _cond_test call_tmp[898597]))
    if call_tmp[898602]
    {
      {
        const tmp[255757] "const" "temp"
        unknown call_tmp[898607] "expr temp" "maybe param" "maybe type" "temp"
        (898610 'move' call_tmp[898607](255754 '_wide_get_locale' _instance[255548]))
        (255758 'move' tmp[255757](255755 'deref' call_tmp[898607]))
        {
          unknown call_tmp[898614] "expr temp" "maybe param" "maybe type" "temp"
          (898617 'move' call_tmp[898614](255566 call(255563 call (partial) isSliceArrayView _mt[203] _instance[255548])))
          unknown call_tmp[898619] "maybe param" "maybe type" "temp"
          (898622 'move' call_tmp[898619](255560 call ! call_tmp[898614]))
          unknown arrIsInList[255559] "dead at end of block" "param"
          (651335 'init var' arrIsInList[255559] call_tmp[898619])
          (255568 'end of statement')
          unknown call_tmp[898626] "maybe param" "maybe type" "temp"
          (898629 'move' call_tmp[898626](255578 call(255575 call (partial) remove _mt[203] _instance[255548]) arrIsInList[255559]))
          unknown tmp[255580] "dead at end of block" "insert auto destroy" "temp"
          (651337 'init var' tmp[255580] call_tmp[898626])
          (255587 call _check_tuple_var_decl tmp[255580] 2)
          (563805 'end of statement')
          unknown call_tmp[898631] "maybe param" "maybe type" "temp"
          (898634 'move' call_tmp[898631](255581 call tmp[255580] 0))
          unknown arrToFree[255570] "dead at end of block" "insert auto destroy"
          (651339 'init var' arrToFree[255570] call_tmp[898631])
          unknown call_tmp[898636] "maybe param" "maybe type" "temp"
          (898639 'move' call_tmp[898636](255584 call tmp[255580] 1))
          unknown domToRemove[255572] "dead at end of block" "insert auto destroy"
          (651341 'init var' domToRemove[255572] call_tmp[898636])
          (255592 'end of statement')
          unknown domToFree[255594] "dead at end of block" "insert auto destroy"
          (651343 'init var' domToFree[255594] nil[32] unmanaged BaseDom?[468157])
          (255600 'end of statement')
          unknown distToRemove[255602] "dead at end of block" "insert auto destroy"
          (651345 'init var' distToRemove[255602] nil[32] unmanaged BaseDist?[468142])
          (255608 'end of statement')
          unknown distToFree[255610] "dead at end of block" "insert auto destroy"
          (651347 'init var' distToFree[255610] nil[32] unmanaged BaseDist?[468142])
          (255616 'end of statement')
          unknown domIsPrivatized[255618] "dead at end of block" "insert auto destroy"
          (651349 'init var' domIsPrivatized[255618] 0)
          (255621 'end of statement')
          const instanceDom[255623] "dead at end of block" "const" "insert auto destroy"
          (651351 'init var' instanceDom[255623] domToRemove[255572])
          (255626 'end of statement')
          unknown call_tmp[898641] "expr temp" "maybe param" "maybe type" "temp"
          (898644 'move' call_tmp[898641](255657 call != domToRemove[255572] nil[32]))
          unknown call_tmp[898646] "expr temp" "maybe param" "maybe type" "temp"
          (898649 'move' call_tmp[898646](255661 call _cond_test call_tmp[898641]))
          if call_tmp[898646]
          {
            unknown tmp[578625] "expr temp" "maybe param" "maybe type" "temp"
            unknown tmp[578650] "maybe param" "temp"
            (578653 'move' tmp[578650](578651 'addr of' domToFree[255594]))
            unknown tmp[578661] "maybe param" "temp"
            (578664 'move' tmp[578661](578662 'addr of' distToRemove[255602]))
            unknown call_tmp[898651] "expr temp" "maybe param" "maybe type" "temp"
            (898654 'move' call_tmp[898651](255633 call postfix! domToRemove[255572]))
            (578626 'move' tmp[578625](255639 call(255636 call (partial) remove _mt[203] call_tmp[898651])))
            { scopeless
              unknown call_tmp[898660] "expr temp" "maybe param" "maybe type" "temp"
              (898663 'move' call_tmp[898660](578632 call size _mt[203] tmp[578625]))
              unknown call_tmp[898665] "expr temp" "maybe param" "maybe type" "temp"
              (898668 'move' call_tmp[898665](578635 call != 2 call_tmp[898660]))
              unknown call_tmp[898670] "expr temp" "maybe param" "maybe type" "temp"
              (898673 'move' call_tmp[898670](578642 call _cond_test call_tmp[898665]))
              if call_tmp[898670]
              {
                (578638 call compilerError "tuple size must match the number of grouped variables" 0)
              }
            }
            unknown call_tmp[898675] "expr temp" "maybe param" "maybe type" "temp"
            (898678 'move' call_tmp[898675](578648 call tmp[578625] 0))
            (578655 call = tmp[578650] call_tmp[898675])
            unknown call_tmp[898680] "expr temp" "maybe param" "maybe type" "temp"
            (898683 'move' call_tmp[898680](578659 call tmp[578625] 1))
            (578666 call = tmp[578661] call_tmp[898680])
            (563807 'end of statement' domToFree[255594] distToRemove[255602] domToRemove[255572])
            unknown tmp[500874] "maybe param" "temp"
            (500885 'move' tmp[500874] 0)
            unknown call_tmp[898685] "expr temp" "maybe param" "maybe type" "temp"
            (898688 'move' call_tmp[898685](500887 call _cond_invalid tmp[500874]))
            if call_tmp[898685]
            {
              (500890 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[700595] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[700596] "maybe param" "temp"
            unknown call_tmp[898690] "expr temp" "maybe param" "maybe type" "temp"
            (898693 'move' call_tmp[898690](500875 call isTrue tmp[500874]))
            (700601 'move' tmp[700596](700599 call _cond_test call_tmp[898690]))
            if tmp[700596]
            {
              unknown tmp[700603] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[898695] "expr temp" "maybe param" "maybe type" "temp"
              (898698 'move' call_tmp[898695](255650 call postfix! domToRemove[255572]))
              unknown call_tmp[898702] "expr temp" "maybe param" "maybe type" "temp"
              (898705 'move' call_tmp[898702](255653 call pid _mt[203] call_tmp[898695]))
              unknown call_tmp[898707] "expr temp" "maybe param" "maybe type" "temp"
              (898710 'move' call_tmp[898707](255648 call != call_tmp[898702] nullPid[247489]))
              (700605 'move' tmp[700603](500878 call isTrue call_tmp[898707]))
              (700610 'move' tmp[700595](700607 '_paramFoldLogical' tmp[700596] tmp[700603]))
            }
            {
              (700615 'move' tmp[700595](700612 '_paramFoldLogical' tmp[700596] 0))
            }
            (255642 call = domIsPrivatized[255618] tmp[700595])
            (563812 'end of statement' domIsPrivatized[255618] domToRemove[255572])
          }
          unknown distIsPrivatized[255666] "dead at end of block" "insert auto destroy"
          (651353 'init var' distIsPrivatized[255666] 0)
          (255669 'end of statement' domToRemove[255572])
          unknown call_tmp[898712] "expr temp" "maybe param" "maybe type" "temp"
          (898715 'move' call_tmp[898712](255696 call != distToRemove[255602] nil[32]))
          unknown call_tmp[898717] "expr temp" "maybe param" "maybe type" "temp"
          (898720 'move' call_tmp[898717](255700 call _cond_test call_tmp[898712]))
          if call_tmp[898717]
          {
            unknown call_tmp[898722] "expr temp" "maybe param" "maybe type" "temp"
            (898725 'move' call_tmp[898722](255674 call postfix! distToRemove[255602]))
            unknown call_tmp[898729] "expr temp" "maybe param" "maybe type" "temp"
            (898732 'move' call_tmp[898729](255680 call(255677 call (partial) remove _mt[203] call_tmp[898722])))
            (255671 call = distToFree[255610] call_tmp[898729])
            (563815 'end of statement' distToFree[255610] distToRemove[255602])
            unknown tmp[500895] "maybe param" "temp"
            (500906 'move' tmp[500895] 0)
            unknown call_tmp[898734] "expr temp" "maybe param" "maybe type" "temp"
            (898737 'move' call_tmp[898734](500908 call _cond_invalid tmp[500895]))
            if call_tmp[898734]
            {
              (500911 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[700622] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[700623] "maybe param" "temp"
            unknown call_tmp[898739] "expr temp" "maybe param" "maybe type" "temp"
            (898742 'move' call_tmp[898739](500896 call isTrue tmp[500895]))
            (700628 'move' tmp[700623](700626 call _cond_test call_tmp[898739]))
            if tmp[700623]
            {
              unknown tmp[700630] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[898744] "expr temp" "maybe param" "maybe type" "temp"
              (898747 'move' call_tmp[898744](255689 call postfix! distToRemove[255602]))
              unknown call_tmp[898751] "expr temp" "maybe param" "maybe type" "temp"
              (898754 'move' call_tmp[898751](255692 call pid _mt[203] call_tmp[898744]))
              unknown call_tmp[898756] "expr temp" "maybe param" "maybe type" "temp"
              (898759 'move' call_tmp[898756](255687 call != call_tmp[898751] nullPid[247489]))
              (700632 'move' tmp[700630](500899 call isTrue call_tmp[898756]))
              (700637 'move' tmp[700622](700634 '_paramFoldLogical' tmp[700623] tmp[700630]))
            }
            {
              (700642 'move' tmp[700622](700639 '_paramFoldLogical' tmp[700623] 0))
            }
            (255681 call = distIsPrivatized[255666] tmp[700622])
            (563819 'end of statement' distIsPrivatized[255666] distToRemove[255602])
          }
          unknown call_tmp[898761] "expr temp" "maybe param" "maybe type" "temp"
          (898764 'move' call_tmp[898761](255713 call != arrToFree[255570] nil[32]))
          unknown call_tmp[898766] "expr temp" "maybe param" "maybe type" "temp"
          (898769 'move' call_tmp[898766](255717 call _cond_test call_tmp[898761]))
          if call_tmp[898766]
          {
            unknown call_tmp[898771] "expr temp" "maybe param" "maybe type" "temp"
            (898774 'move' call_tmp[898771](255708 call _isPrivatized _instance[255548]))
            (255705 call _delete_arr _instance[255548] call_tmp[898771](deinitElts = deinitElts[255551]))
          }
          unknown call_tmp[898776] "expr temp" "maybe param" "maybe type" "temp"
          (898779 'move' call_tmp[898776](255729 call != domToFree[255594] nil[32]))
          unknown call_tmp[898781] "expr temp" "maybe param" "maybe type" "temp"
          (898784 'move' call_tmp[898781](255733 call _cond_test call_tmp[898776]))
          if call_tmp[898781]
          {
            unknown call_tmp[898786] "expr temp" "maybe param" "maybe type" "temp"
            (898789 'move' call_tmp[898786](255724 call postfix! instanceDom[255623]))
            (255723 call _delete_dom call_tmp[898786] domIsPrivatized[255618])
            (563823 'end of statement' instanceDom[255623] domIsPrivatized[255618])
          }
          unknown call_tmp[898791] "expr temp" "maybe param" "maybe type" "temp"
          (898794 'move' call_tmp[898791](255745 call != distToFree[255610] nil[32]))
          unknown call_tmp[898796] "expr temp" "maybe param" "maybe type" "temp"
          (898799 'move' call_tmp[898796](255749 call _cond_test call_tmp[898791]))
          if call_tmp[898796]
          {
            unknown call_tmp[898801] "expr temp" "maybe param" "maybe type" "temp"
            (898804 'move' call_tmp[898801](255740 call postfix! distToFree[255610]))
            (255739 call _delete_dist call_tmp[898801] distIsPrivatized[255666])
            (563826 'end of statement' distToFree[255610] distIsPrivatized[255666])
          }
        }
        (255761 'elided on block' 0 tmp[255757])
      }
    }
    {
      unknown call_tmp[898806] "expr temp" "maybe param" "maybe type" "temp"
      (898809 'move' call_tmp[898806](255773 call chpl__isArrayView _instance[255548]))
      unknown call_tmp[898811] "expr temp" "maybe param" "maybe type" "temp"
      (898814 'move' call_tmp[898811](255775 call _cond_test call_tmp[898806]))
      if call_tmp[898811]
      {
        (255769 call chpl__delete _instance[255548])
      }
    }
    (624793 return _void[46])
  }
  function _do_destroy_array[255788](arg array[255791]:_array[255540](?), arg deinitElts[255795] :
  1 =
  1) : _unknown[42] "inline" "no return value for void"
  {
    unknown call_tmp[898818] "expr temp" "maybe param" "maybe type" "temp"
    (898821 'move' call_tmp[898818](255802 call _unowned _mt[203] array[255791]))
    unknown call_tmp[898825] "expr temp" "maybe param" "maybe type" "temp"
    (898828 'move' call_tmp[898825](255806 call _instance _mt[203] array[255791]))
    (255800 call _do_destroy_arr call_tmp[898818] call_tmp[898825] deinitElts[255795])
    (624795 return _void[46])
  }
  function _deinitElementsIsParallel[255812](arg eltType[255814]:_any[141](?), arg size[255817]:integral[159](?)) : _unknown[42]
  {
    unknown ret[624799] "RVV" "temp"
    unknown call_tmp[898830] "expr temp" "maybe param" "maybe type" "temp"
    (898833 'move' call_tmp[898830](255825 call init_elts_method size[255817] eltType[255814]))
    unknown call_tmp[898835] "expr temp" "maybe param" "maybe type" "temp"
    (898838 'move' call_tmp[898835](255822 call == call_tmp[898830] parallelInit[66983]))
    (624804 'move' ret[624799](624803 'deref' call_tmp[898835]))
    (624801 return ret[624799])
  }
  function _deinitElements[255834](ref arg array[255837]:_array[255540](?)) : _unknown[42] "no return value for void"
  {
    unknown call_tmp[898842] "expr temp" "maybe param" "maybe type" "temp"
    (898845 'move' call_tmp[898842](255845 call eltType _mt[203] array[255837]))
    unknown call_tmp[898847] "maybe param" "maybe type" "temp"
    (898850 'move' call_tmp[898847](255843 'needs auto destroy' call_tmp[898842]))
    unknown needsDestroy[255842] "dead at end of block" "param"
    (651355 'init var' needsDestroy[255842] call_tmp[898847])
    (255849 'end of statement')
    unknown call_tmp[898852] "expr temp" "maybe param" "maybe type" "temp"
    (898855 'move' call_tmp[898852](255919 call _cond_test needsDestroy[255842]))
    if call_tmp[898852]
    {
      unknown call_tmp[898859] "expr temp" "maybe param" "maybe type" "temp"
      (898862 'move' call_tmp[898859](255907 call eltType _mt[203] array[255837]))
      unknown call_tmp[898866] "expr temp" "maybe param" "maybe type" "temp"
      (898869 'move' call_tmp[898866](255911 call size _mt[203] array[255837]))
      unknown call_tmp[898871] "expr temp" "maybe param" "maybe type" "temp"
      (898874 'move' call_tmp[898871](255905 call _deinitElementsIsParallel call_tmp[898859] call_tmp[898866]))
      unknown call_tmp[898876] "expr temp" "maybe param" "maybe type" "temp"
      (898879 'move' call_tmp[898876](255914 call _cond_test call_tmp[898871]))
      if call_tmp[898876]
      {
        Forall[255861] {
          induction variables:
            
            unknown elt[255852] "index var" "insert auto destroy"
          iterated expressions:
            array[255837]
          shadow variables:
          other variables
            forall body
          {
            (255857 call chpl__autoDestroy elt[255852])
            (563832 'end of statement' elt[255852])
          }
        }
      }
      {
        {
          unknown _indexOfInterest[255872] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[255873] "expr temp" "temp"
          (255882 'move' _iterator[255873](255880 call _getIterator array[255837]))
          Defer
          {
            {
              (255897 call _freeIterator _iterator[255873])
            }
          }
          { scopeless type
            (255887 'move' _indexOfInterest[255872](255884 call iteratorIndex _iterator[255873]))
          }
          ForLoop[255874]
          {
            unknown elt[255865] "index var" "insert auto destroy"
            (563835 'end of statement')
            (255892 'move' elt[255865] _indexOfInterest[255872])
            (563836 'end of statement' elt[255865])
            {
              (255870 call chpl__autoDestroy elt[255865])
              (563838 'end of statement' elt[255865])
            }
            label _continueLabel[255877]
            _indexOfInterest[255872]
            _iterator[255873]
          }
          label _breakLabel[255878]
        }
      }
    }
    unknown call_tmp[898883] "expr temp" "maybe param" "maybe type" "temp"
    (898886 'move' call_tmp[898883](255924 call _instance _mt[203] array[255837]))
    (255932 call(255929 call (partial) dsiElementDeinitializationComplete _mt[203] call_tmp[898883]))
    (624806 return _void[46])
  }
  function _array[255540](?).equals[255935](arg _mt[255945]:_MT[201], arg this[255938]:_array[255540](?) :
  _array[255540](?), arg that[255942]:_array[255540](?)) : _unknown[42] "method" "@unstable"
  {
    unknown ret[624810] "RVV" "temp"
    unknown call_tmp[898892] "expr temp" "maybe param" "maybe type" "temp"
    (898895 'move' call_tmp[898892](255955 call _value _mt[203] this[255938]))
    unknown call_tmp[898899] "expr temp" "maybe param" "maybe type" "temp"
    (898902 'move' call_tmp[898899](255959 call _value _mt[203] that[255942]))
    unknown call_tmp[898904] "expr temp" "maybe param" "maybe type" "temp"
    (898907 'move' call_tmp[898904](255952 call == call_tmp[898892] call_tmp[898899]))
    unknown call_tmp[898909] "expr temp" "maybe param" "maybe type" "temp"
    (898912 'move' call_tmp[898909](255962 call _cond_test call_tmp[898904]))
    if call_tmp[898909]
    {
      (624816 'move' ret[624810](624815 'coerce' 1 bool[19]))
      gotoReturn _end_equals[624808] _end_equals[624808]
    }
    unknown call_tmp[898916] "expr temp" "maybe param" "maybe type" "temp"
    (898919 'move' call_tmp[898916](255973 call rank _mt[203] this[255938]))
    unknown call_tmp[898923] "expr temp" "maybe param" "maybe type" "temp"
    (898926 'move' call_tmp[898923](255977 call rank _mt[203] that[255942]))
    unknown call_tmp[898928] "expr temp" "maybe param" "maybe type" "temp"
    (898931 'move' call_tmp[898928](255970 call != call_tmp[898916] call_tmp[898923]))
    unknown call_tmp[898933] "expr temp" "maybe param" "maybe type" "temp"
    (898936 'move' call_tmp[898933](255980 call _cond_test call_tmp[898928]))
    if call_tmp[898933]
    {
      (624822 'move' ret[624810](624821 'coerce' 0 bool[19]))
      gotoReturn _end_equals[624808] _end_equals[624808]
    }
    unknown call_tmp[898940] "expr temp" "maybe param" "maybe type" "temp"
    (898943 'move' call_tmp[898940](255994 call(255991 call (partial) sizeAs _mt[203] this[255938]) uint(64)[86]))
    unknown call_tmp[898947] "expr temp" "maybe param" "maybe type" "temp"
    (898950 'move' call_tmp[898947](256000 call(255997 call (partial) sizeAs _mt[203] that[255942]) uint(64)[86]))
    unknown call_tmp[898952] "expr temp" "maybe param" "maybe type" "temp"
    (898955 'move' call_tmp[898952](255988 call != call_tmp[898940] call_tmp[898947]))
    unknown call_tmp[898957] "expr temp" "maybe param" "maybe type" "temp"
    (898960 'move' call_tmp[898957](256002 call _cond_test call_tmp[898952]))
    if call_tmp[898957]
    {
      (624828 'move' ret[624810](624827 'coerce' 0 bool[19]))
      gotoReturn _end_equals[624808] _end_equals[624808]
    }
    unknown tmp[500916] "maybe param" "temp"
    unknown call_tmp[898964] "expr temp" "maybe param" "maybe type" "temp"
    (898967 'move' call_tmp[898964](256102 call _dom _mt[203] this[255938]))
    (500927 'move' tmp[500916](256108 call(256105 call (partial) isRectangular _mt[203] call_tmp[898964])))
    unknown call_tmp[898971] "expr temp" "maybe param" "maybe type" "temp"
    (898974 'move' call_tmp[898971](500929 call _cond_invalid tmp[500916]))
    if call_tmp[898971]
    {
      (500932 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[700649] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[700650] "maybe param" "temp"
    unknown call_tmp[898976] "expr temp" "maybe param" "maybe type" "temp"
    (898979 'move' call_tmp[898976](500917 call isTrue tmp[500916]))
    (700655 'move' tmp[700650](700653 call _cond_test call_tmp[898976]))
    if tmp[700650]
    {
      unknown tmp[700657] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[898983] "expr temp" "maybe param" "maybe type" "temp"
      (898986 'move' call_tmp[898983](256110 call _dom _mt[203] that[255942]))
      unknown call_tmp[898990] "expr temp" "maybe param" "maybe type" "temp"
      (898993 'move' call_tmp[898990](256116 call(256113 call (partial) isRectangular _mt[203] call_tmp[898983])))
      (700659 'move' tmp[700657](500920 call isTrue call_tmp[898990]))
      (700664 'move' tmp[700649](700661 '_paramFoldLogical' tmp[700650] tmp[700657]))
    }
    {
      (700669 'move' tmp[700649](700666 '_paramFoldLogical' tmp[700650] 0))
    }
    unknown call_tmp[898995] "expr temp" "maybe param" "maybe type" "temp"
    (898998 'move' call_tmp[898995](256117 call _cond_test tmp[700649]))
    if call_tmp[898995]
    {
      {
        unknown _indexOfInterest[256057] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[256058] "expr temp" "temp"
        unknown call_tmp[899002] "expr temp" "maybe param" "maybe type" "temp"
        (899005 'move' call_tmp[899002](256073 call rank _mt[203] this[255938]))
        unknown call_tmp[899007] "expr temp" "maybe param" "maybe type" "temp"
        (899010 'move' call_tmp[899007](256077 call chpl_direct_counted_range_iter 0 call_tmp[899002]))
        (256067 'move' _iterator[256058](256065 call _getIterator call_tmp[899007]))
        Defer
        {
          {
            (256092 call _freeIterator _iterator[256058])
          }
        }
        { scopeless type
          (256082 'move' _indexOfInterest[256057](256079 call iteratorIndex _iterator[256058]))
        }
        ForLoop[256059]
        {
          unknown d[256008] "index var" "insert auto destroy"
          (563846 'end of statement')
          (256087 'move' d[256008] _indexOfInterest[256057])
          (563847 'end of statement' d[256008])
          unknown call_tmp[899014] "expr temp" "maybe param" "maybe type" "temp"
          (899017 'move' call_tmp[899014](256025 call _dom _mt[203] this[255938]))
          unknown call_tmp[899021] "expr temp" "maybe param" "maybe type" "temp"
          (899024 'move' call_tmp[899021](256031 call(256028 call (partial) dim _mt[203] call_tmp[899014]) d[256008]))
          unknown call_tmp[899028] "expr temp" "maybe param" "maybe type" "temp"
          (899031 'move' call_tmp[899028](256036 call(256033 call (partial) sizeAs _mt[203] call_tmp[899021]) uint(64)[86]))
          unknown call_tmp[899035] "expr temp" "maybe param" "maybe type" "temp"
          (899038 'move' call_tmp[899035](256039 call _dom _mt[203] that[255942]))
          unknown call_tmp[899042] "expr temp" "maybe param" "maybe type" "temp"
          (899045 'move' call_tmp[899042](256045 call(256042 call (partial) dim _mt[203] call_tmp[899035]) d[256008]))
          unknown call_tmp[899049] "expr temp" "maybe param" "maybe type" "temp"
          (899052 'move' call_tmp[899049](256050 call(256047 call (partial) sizeAs _mt[203] call_tmp[899042]) uint(64)[86]))
          unknown call_tmp[899054] "expr temp" "maybe param" "maybe type" "temp"
          (899057 'move' call_tmp[899054](256022 call != call_tmp[899028] call_tmp[899049]))
          unknown call_tmp[899059] "expr temp" "maybe param" "maybe type" "temp"
          (899062 'move' call_tmp[899059](256052 call _cond_test call_tmp[899054]))
          if call_tmp[899059]
          {
            (624834 'move' ret[624810](624833 'coerce' 0 bool[19]))
            gotoReturn _end_equals[624808] _end_equals[624808]
          }
          label _continueLabel[256062]
          _indexOfInterest[256057]
          _iterator[256058]
        }
        label _breakLabel[256063]
      }
    }
    unknown call_tmp[899066] "expr temp" "maybe param" "maybe type" "temp"
    (899069 'move' call_tmp[899066](256187 call eltType _mt[203] this[255938]))
    unknown call_tmp[899071] "expr temp" "maybe param" "maybe type" "temp"
    (899074 'move' call_tmp[899071](256185 call isArrayType call_tmp[899066]))
    unknown call_tmp[899076] "expr temp" "maybe param" "maybe type" "temp"
    (899079 'move' call_tmp[899076](256190 call _cond_test call_tmp[899071]))
    if call_tmp[899076]
    {
      unknown ret[256123] "dead at end of block" "insert auto destroy"
      (651357 'init var' ret[256123] 1)
      (256126 'end of statement')
      Forall[256169] {
        induction variables:
          
          unknown thisArr[256128] "index var" "insert auto destroy"
          
          unknown thatArr[256130] "index var" "insert auto destroy"
        iterated expressions:
          this[255938]
          that[255942]
        shadow variables:
          ret[256141] 'reduce' intent outer var ret[256123]
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          unknown tmp[256156] "temp"
          (256159 'move' tmp[256156](256158 'addr of' ret[256141]))
          unknown tmp[500937] "maybe param" "temp"
          (500948 'move' tmp[500937] tmp[256156])
          unknown call_tmp[899081] "expr temp" "maybe param" "maybe type" "temp"
          (899084 'move' call_tmp[899081](500950 call _cond_invalid tmp[500937]))
          if call_tmp[899081]
          {
            (500953 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[700676] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[700677] "maybe param" "temp"
          unknown call_tmp[899086] "expr temp" "maybe param" "maybe type" "temp"
          (899089 'move' call_tmp[899086](500938 call isTrue tmp[500937]))
          (700682 'move' tmp[700677](700680 call _cond_test call_tmp[899086]))
          if tmp[700677]
          {
            unknown tmp[700684] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[899093] "expr temp" "maybe param" "maybe type" "temp"
            (899096 'move' call_tmp[899093](256153 call(256150 call (partial) equals _mt[203] thisArr[256128]) thatArr[256130]))
            (700686 'move' tmp[700684](500941 call isTrue call_tmp[899093]))
            (700691 'move' tmp[700676](700688 '_paramFoldLogical' tmp[700677] tmp[700684]))
          }
          {
            (700696 'move' tmp[700676](700693 '_paramFoldLogical' tmp[700677] 0))
          }
          (256164 call = tmp[256156] tmp[700676])
          (563851 'end of statement' thisArr[256128] thatArr[256130])
        }
      }
      (624840 'move' ret[624810](624839 'coerce' ret[256123] bool[19]))
      gotoReturn _end_equals[624808] _end_equals[624808]
      (563854 'end of statement' ret[256123])
    }
    {
      unknown call_tmp[899098] "expr temp" "maybe param" "maybe type" "temp"
      (899101 'move' call_tmp[899098](256178 call == this[255938] that[255942]))
      unknown call_tmp[899103] "expr temp" "maybe param" "maybe type" "temp"
      (899106 'move' call_tmp[899103](256182 'reduce' LogicalAndReduceScanOp[429773](?) call_tmp[899098] 0))
      (624846 'move' ret[624810](624845 'coerce' call_tmp[899103] bool[19]))
      gotoReturn _end_equals[624808] _end_equals[624808]
    }
    label _end_equals[624808]
    (624812 return ret[624810])
  }
  { scopeless type
    bool[19]
  }
  function :[256197](param arg arg[256199]:_any[141](?), arg t[256202]:_array[255540](?)) : _unknown[42] "operator"
  {
    unknown ret[624852] "RVV" "temp"
    unknown result[256207] "dead at end of block" "insert auto destroy"
    (651359 'default init var' result[256207] t[256202])
    (256210 'end of statement')
    (256212 call chpl__transferArray result[256207] arg[256199])
    (563857 'end of statement' result[256207])
    (624857 'move' ret[624852](624856 'deref' result[256207]))
    gotoReturn _end_:[624850] _end_:[624850]
    (563859 'end of statement' result[256207])
    label _end_:[624850]
    (624854 return ret[624852])
  }
  function :[256219](arg x[256224]:_array[255540](?), arg t[256228]:string[244]) : _unknown[42] "deprecated" "operator"
  {
    unknown ret[624863] "RVV" "temp"
    unknown call_tmp[899110] "expr temp" "maybe param" "maybe type" "temp"
    (899113 'move' call_tmp[899110](256246 call(256243 call (partial) format _mt[203] "%\?") x[256224]))
    (624868 'move' ret[624863](624867 'deref' call_tmp[899110]))
    (624865 return ret[624863])
    (396908 'used modules list'(256240 'import' FormattedIO[208298].{string}))
  }
  function :[256251](in arg x[256258]:_array[255540](?), arg t[256262] :
  (531916 call eltType _mt[203] x[256258])) : _unknown[42] "last resort" "operator"
  {
    unknown ret[624872] "RVV" "temp"
    (624877 'move' ret[624872](624876 'deref' x[256258]))
    (624874 return ret[624872])
  }
  where {
    unknown call_tmp[899119] "expr temp" "maybe param" "maybe type" "temp"
    (899122 'move' call_tmp[899119](531920 call eltType _mt[203] x[256258]))
    (256265 call == t[256262] call_tmp[899119])
  }
  function #[256275](arg arr[256280]:_array[255540](?), arg counts[256284]:integral[159](?)) : _unknown[42] "operator" "fn returns aliasing array"
  {
    unknown ret[624881] "RVV" "temp"
    unknown call_tmp[899126] "expr temp" "maybe param" "maybe type" "temp"
    (899129 'move' call_tmp[899126](256294 call _dom _mt[203] arr[256280]))
    unknown call_tmp[899131] "expr temp" "maybe param" "maybe type" "temp"
    (899134 'move' call_tmp[899131](256291 call # call_tmp[899126] counts[256284]))
    unknown call_tmp[899136] "expr temp" "maybe param" "maybe type" "temp"
    (899139 'move' call_tmp[899136](256290 call arr[256280] call_tmp[899131]))
    (624886 'move' ret[624881](624885 'deref' call_tmp[899136]))
    (624883 return ret[624881])
  }
  function #[256300](arg arr[256305]:_array[255540](?), arg counts[256309]:_tuple[246](?)) : _unknown[42] "operator" "fn returns aliasing array"
  {
    unknown ret[624890] "RVV" "temp"
    unknown call_tmp[899143] "expr temp" "maybe param" "maybe type" "temp"
    (899146 'move' call_tmp[899143](256319 call _dom _mt[203] arr[256305]))
    unknown call_tmp[899148] "expr temp" "maybe param" "maybe type" "temp"
    (899151 'move' call_tmp[899148](256316 call # call_tmp[899143] counts[256309]))
    unknown call_tmp[899153] "expr temp" "maybe param" "maybe type" "temp"
    (899156 'move' call_tmp[899153](256315 call arr[256305] call_tmp[899148]))
    (624895 'move' ret[624890](624894 'deref' call_tmp[899153]))
    (624892 return ret[624890])
  }
  function #[256325](arg arr[256330]:_array[255540](?), arg counts[256333]:_any[141](?)) : _unknown[42] "last resort" "operator" "no return value for void"
  {
    unknown call_tmp[899158] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (899161 'move' call_tmp[899158](256342 'typeof' arr[256330]))
    unknown call_tmp[899163] "expr temp" "maybe param" "maybe type" "temp"
    (899166 'move' call_tmp[899163](256339 call : call_tmp[899158] string[244]))
    unknown call_tmp[899168] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (899171 'move' call_tmp[899168](256348 'typeof' counts[256333]))
    unknown call_tmp[899173] "expr temp" "maybe param" "maybe type" "temp"
    (899176 'move' call_tmp[899173](256345 call : call_tmp[899168] string[244]))
    (256337 call compilerError "cannot apply '#' to '" call_tmp[899163] "' using count(s) of type " call_tmp[899173])
    (624897 return _void[46])
  }
  function isCollapsedDimension[256352](arg r[256364]:range[240](?)) param : _unknown[42]
  {
    unknown ret[624901] "RVV" "param" "temp"
    (624906 'move' ret[624901](624905 'deref' 0))
    (624903 return ret[624901])
  }
  function isCollapsedDimension[256372](arg r[256374]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[624910] "RVV" "param" "temp"
    (624915 'move' ret[624910](624914 'deref' 1))
    (624912 return ret[624910])
  }
  function chpl__countRanges[256381](arg arg[256383]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[624919] "RVV" "param" "temp"
    unknown call_tmp[899178] "expr temp" "maybe param" "maybe type" "temp"
    (899181 'move' call_tmp[899178](256390 call isRangeValue arg[256383]))
    unknown call_tmp[899183] "expr temp" "maybe param" "maybe type" "temp"
    (899186 'move' call_tmp[899183](256387 call : call_tmp[899178] int(64)[10]))
    (624924 'move' ret[624919](624923 'deref' call_tmp[899183]))
    (624921 return ret[624919])
  }
  function chpl__countRanges[256395](arg arg[256397]:_any[141](?), arg args[256400]:_any[141](?) ...) param : _unknown[42]
  {
    unknown ret[624928] "RVV" "param" "temp"
    unknown call_tmp[899188] "expr temp" "maybe param" "maybe type" "temp"
    (899191 'move' call_tmp[899188](256408 call chpl__countRanges arg[256397]))
    unknown call_tmp[899193] "expr temp" "maybe param" "maybe type" "temp"
    (899196 'move' call_tmp[899193](256411 call chpl__countRanges(256413 'expand_tuple' args[256400])))
    unknown call_tmp[899198] "expr temp" "maybe param" "maybe type" "temp"
    (899201 'move' call_tmp[899198](256405 call + call_tmp[899188] call_tmp[899193]))
    (624933 'move' ret[624928](624932 'deref' call_tmp[899198]))
    (624930 return ret[624928])
  }
  function _validRankChangeArgs[256416](arg args[256418]:_any[141](?), arg idxType[256420]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[625006] "RVV" "param" "temp"
    function _validRankChangeArg[256423](arg idxType[256425]:_any[141](?), arg r[256430]:range[240](?)) param : _unknown[42]
    {
      unknown ret[624937] "RVV" "param" "temp"
      (624942 'move' ret[624937](624941 'deref' 1))
      (624939 return ret[624937])
    }
    function _validRankChangeArg[256438](arg idxType[256440]:_any[141](?), arg i[256443] :
    idxType[256440]) param : _unknown[42]
    {
      unknown ret[624946] "RVV" "param" "temp"
      (624951 'move' ret[624946](624950 'deref' 1))
      (624948 return ret[624946])
    }
    function _validRankChangeArg[256451](arg idxType[256453]:_any[141](?), arg x[256455]:_any[141](?)) param : _unknown[42] "last resort"
    {
      unknown ret[624955] "RVV" "param" "temp"
      (624960 'move' ret[624955](624959 'deref' 0))
      (624957 return ret[624955])
    }
    function allValid[256462]() param : _unknown[42]
    {
      unknown ret[624964] "RVV" "param" "temp"
      {
        unknown dim[256465] "dead at end of block" "index var" "insert auto destroy"
        (651361 'init var' dim[256465] 0)
        (563873 'end of statement')
        unknown tmp[256494] "maybe param" "temp"
        unknown call_tmp[899205] "expr temp" "maybe param" "maybe type" "temp"
        (899208 'move' call_tmp[899205](256471 call size _mt[203] args[256418]))
        unknown call_tmp[899210] "expr temp" "maybe param" "maybe type" "temp"
        (899213 'move' call_tmp[899210](256468 call - call_tmp[899205] 1))
        (256506 'move' tmp[256494](256504 call chpl_compute_low_param_loop_bound 0 call_tmp[899210]))
        unknown tmp[256495] "maybe param" "temp"
        unknown call_tmp[899217] "expr temp" "maybe param" "maybe type" "temp"
        (899220 'move' call_tmp[899217](256513 call size _mt[203] args[256418]))
        unknown call_tmp[899222] "expr temp" "maybe param" "maybe type" "temp"
        (899225 'move' call_tmp[899222](256511 call - call_tmp[899217] 1))
        (256519 'move' tmp[256495](256517 call chpl_compute_high_param_loop_bound 0 call_tmp[899222]))
        unknown tmp[256496] "maybe param" "temp"
        (256522 'move' tmp[256496] 1)
        ParamForLoop[256524]
        { dim[256465] tmp[256494] tmp[256495] tmp[256496]
          {
            unknown call_tmp[899227] "expr temp" "maybe param" "maybe type" "temp"
            (899230 'move' call_tmp[899227](256487 call args[256418] dim[256465]))
            unknown call_tmp[899232] "expr temp" "maybe param" "maybe type" "temp"
            (899235 'move' call_tmp[899232](256484 call _validRankChangeArg idxType[256420] call_tmp[899227]))
            unknown call_tmp[899237] "expr temp" "maybe param" "maybe type" "temp"
            (899240 'move' call_tmp[899237](256481 call ! call_tmp[899232]))
            unknown call_tmp[899242] "expr temp" "maybe param" "maybe type" "temp"
            (899245 'move' call_tmp[899242](256489 call _cond_test call_tmp[899237]))
            if call_tmp[899242]
            {
              (624969 'move' ret[624964](624968 'deref' 0))
              gotoReturn _end_allValid[624962] _end_allValid[624962]
            }
          }
        }
        label _unused_continueLabel[256498]
        label _breakLabel[256497]
      }
      (624974 'move' ret[624964](624973 'deref' 1))
      label _end_allValid[624962]
      (624966 return ret[624964])
    }
    function oneRange[256537]() param : _unknown[42]
    {
      unknown ret[624978] "RVV" "param" "temp"
      {
        unknown dim[256540] "dead at end of block" "index var" "insert auto destroy"
        (651363 'init var' dim[256540] 0)
        (563876 'end of statement')
        unknown tmp[256566] "maybe param" "temp"
        unknown call_tmp[899249] "expr temp" "maybe param" "maybe type" "temp"
        (899252 'move' call_tmp[899249](256546 call size _mt[203] args[256418]))
        unknown call_tmp[899254] "expr temp" "maybe param" "maybe type" "temp"
        (899257 'move' call_tmp[899254](256543 call - call_tmp[899249] 1))
        (256578 'move' tmp[256566](256576 call chpl_compute_low_param_loop_bound 0 call_tmp[899254]))
        unknown tmp[256567] "maybe param" "temp"
        unknown call_tmp[899261] "expr temp" "maybe param" "maybe type" "temp"
        (899264 'move' call_tmp[899261](256585 call size _mt[203] args[256418]))
        unknown call_tmp[899266] "expr temp" "maybe param" "maybe type" "temp"
        (899269 'move' call_tmp[899266](256583 call - call_tmp[899261] 1))
        (256591 'move' tmp[256567](256589 call chpl_compute_high_param_loop_bound 0 call_tmp[899266]))
        unknown tmp[256568] "maybe param" "temp"
        (256594 'move' tmp[256568] 1)
        ParamForLoop[256596]
        { dim[256540] tmp[256566] tmp[256567] tmp[256568]
          {
            unknown call_tmp[899271] "expr temp" "maybe param" "maybe type" "temp"
            (899274 'move' call_tmp[899271](256559 call args[256418] dim[256540]))
            unknown call_tmp[899276] "expr temp" "maybe param" "maybe type" "temp"
            (899279 'move' call_tmp[899276](256557 call isRange call_tmp[899271]))
            unknown call_tmp[899281] "expr temp" "maybe param" "maybe type" "temp"
            (899284 'move' call_tmp[899281](256561 call _cond_test call_tmp[899276]))
            if call_tmp[899281]
            {
              (624983 'move' ret[624978](624982 'deref' 1))
              gotoReturn _end_oneRange[624976] _end_oneRange[624976]
            }
          }
        }
        label _unused_continueLabel[256570]
        label _breakLabel[256569]
      }
      (624988 'move' ret[624978](624987 'deref' 0))
      label _end_oneRange[624976]
      (624980 return ret[624978])
    }
    function oneNonRange[256609]() param : _unknown[42]
    {
      unknown ret[624992] "RVV" "param" "temp"
      {
        unknown dim[256612] "dead at end of block" "index var" "insert auto destroy"
        (651365 'init var' dim[256612] 0)
        (563879 'end of statement')
        unknown tmp[256640] "maybe param" "temp"
        unknown call_tmp[899288] "expr temp" "maybe param" "maybe type" "temp"
        (899291 'move' call_tmp[899288](256618 call size _mt[203] args[256418]))
        unknown call_tmp[899293] "expr temp" "maybe param" "maybe type" "temp"
        (899296 'move' call_tmp[899293](256615 call - call_tmp[899288] 1))
        (256652 'move' tmp[256640](256650 call chpl_compute_low_param_loop_bound 0 call_tmp[899293]))
        unknown tmp[256641] "maybe param" "temp"
        unknown call_tmp[899300] "expr temp" "maybe param" "maybe type" "temp"
        (899303 'move' call_tmp[899300](256659 call size _mt[203] args[256418]))
        unknown call_tmp[899305] "expr temp" "maybe param" "maybe type" "temp"
        (899308 'move' call_tmp[899305](256657 call - call_tmp[899300] 1))
        (256665 'move' tmp[256641](256663 call chpl_compute_high_param_loop_bound 0 call_tmp[899305]))
        unknown tmp[256642] "maybe param" "temp"
        (256668 'move' tmp[256642] 1)
        ParamForLoop[256670]
        { dim[256612] tmp[256640] tmp[256641] tmp[256642]
          {
            unknown call_tmp[899310] "expr temp" "maybe param" "maybe type" "temp"
            (899313 'move' call_tmp[899310](256633 call args[256418] dim[256612]))
            unknown call_tmp[899315] "expr temp" "maybe param" "maybe type" "temp"
            (899318 'move' call_tmp[899315](256631 call isRange call_tmp[899310]))
            unknown call_tmp[899320] "expr temp" "maybe param" "maybe type" "temp"
            (899323 'move' call_tmp[899320](256628 call ! call_tmp[899315]))
            unknown call_tmp[899325] "expr temp" "maybe param" "maybe type" "temp"
            (899328 'move' call_tmp[899325](256635 call _cond_test call_tmp[899320]))
            if call_tmp[899325]
            {
              (624997 'move' ret[624992](624996 'deref' 1))
              gotoReturn _end_oneNonRange[624990] _end_oneNonRange[624990]
            }
          }
        }
        label _unused_continueLabel[256644]
        label _breakLabel[256643]
      }
      (625002 'move' ret[624992](625001 'deref' 0))
      label _end_oneNonRange[624990]
      (624994 return ret[624992])
    }
    unknown tmp[500958] "maybe param" "temp"
    unknown tmp[500979] "maybe param" "temp"
    (500990 'move' tmp[500979](256689 call allValid))
    unknown call_tmp[899330] "expr temp" "maybe param" "maybe type" "temp"
    (899333 'move' call_tmp[899330](500992 call _cond_invalid tmp[500979]))
    if call_tmp[899330]
    {
      (500995 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[700703] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[700704] "maybe param" "temp"
    unknown call_tmp[899335] "expr temp" "maybe param" "maybe type" "temp"
    (899338 'move' call_tmp[899335](500980 call isTrue tmp[500979]))
    (700709 'move' tmp[700704](700707 call _cond_test call_tmp[899335]))
    if tmp[700704]
    {
      unknown tmp[700711] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[899340] "expr temp" "maybe param" "maybe type" "temp"
      (899343 'move' call_tmp[899340](256691 call oneRange))
      (700713 'move' tmp[700711](500983 call isTrue call_tmp[899340]))
      (700718 'move' tmp[700703](700715 '_paramFoldLogical' tmp[700704] tmp[700711]))
    }
    {
      (700723 'move' tmp[700703](700720 '_paramFoldLogical' tmp[700704] 0))
    }
    (500969 'move' tmp[500958] tmp[700703])
    unknown call_tmp[899345] "expr temp" "maybe param" "maybe type" "temp"
    (899348 'move' call_tmp[899345](500971 call _cond_invalid tmp[500958]))
    if call_tmp[899345]
    {
      (500974 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[700730] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[700731] "maybe param" "temp"
    unknown call_tmp[899350] "expr temp" "maybe param" "maybe type" "temp"
    (899353 'move' call_tmp[899350](500959 call isTrue tmp[500958]))
    (700736 'move' tmp[700731](700734 call _cond_test call_tmp[899350]))
    if tmp[700731]
    {
      unknown tmp[700738] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[899355] "expr temp" "maybe param" "maybe type" "temp"
      (899358 'move' call_tmp[899355](256693 call oneNonRange))
      (700740 'move' tmp[700738](500962 call isTrue call_tmp[899355]))
      (700745 'move' tmp[700730](700742 '_paramFoldLogical' tmp[700731] tmp[700738]))
    }
    {
      (700750 'move' tmp[700730](700747 '_paramFoldLogical' tmp[700731] 0))
    }
    (625011 'move' ret[625006](625010 'deref' tmp[700730]))
    (625008 return ret[625006])
  }
  function =[256696](ref arg a[256699]:_distribution[268253](?), arg b[256703]:_distribution[268253](?)) : _unknown[42] "assignop" "operator" "@unstable" "no return value for void"
  {
    unknown call_tmp[899362] "expr temp" "maybe param" "maybe type" "temp"
    (899365 'move' call_tmp[899362](256797 call _value _mt[203] a[256699]))
    unknown call_tmp[899367] "expr temp" "maybe param" "maybe type" "temp"
    (899370 'move' call_tmp[899367](256794 call == call_tmp[899362] nil[32]))
    unknown call_tmp[899372] "expr temp" "maybe param" "maybe type" "temp"
    (899375 'move' call_tmp[899372](256801 call _cond_test call_tmp[899367]))
    if call_tmp[899372]
    {
      unknown call_tmp[899379] "expr temp" "maybe param" "maybe type" "temp"
      (899382 'move' call_tmp[899379](256718 call(256715 call (partial) clone _mt[203] b[256703])))
      (256708 'move' a[256699](256711 call chpl__autoCopy call_tmp[899379](definedConst = 0)))
    }
    {
      { scopeless type
        unknown call_type_tmp[578669] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[899386] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (899389 'move' call_tmp[899386](256731 call _value _mt[203] a[256699]))
        (578673 'move' call_type_tmp[578669](256734 'typeof' call_tmp[899386]))
      }
      { scopeless type
        unknown call_type_tmp[578675] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[899393] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (899396 'move' call_tmp[899393](256736 call _value _mt[203] b[256703]))
        (578679 'move' call_type_tmp[578675](256739 'typeof' call_tmp[899393]))
      }
      unknown call_tmp[899398] "expr temp" "maybe param" "maybe type" "temp"
      (899401 'move' call_tmp[899398](256728 call != call_type_tmp[578669] call_type_tmp[578675]))
      unknown call_tmp[899403] "expr temp" "maybe param" "maybe type" "temp"
      (899406 'move' call_tmp[899403](256740 call _cond_test call_tmp[899398]))
      if call_tmp[899403]
      {
        (256723 call compilerError "type mismatch in distribution assignment")
      }
      unknown call_tmp[899410] "expr temp" "maybe param" "maybe type" "temp"
      (899413 'move' call_tmp[899410](256764 call _value _mt[203] a[256699]))
      unknown call_tmp[899417] "expr temp" "maybe param" "maybe type" "temp"
      (899420 'move' call_tmp[899417](256768 call _value _mt[203] b[256703]))
      unknown call_tmp[899422] "expr temp" "maybe param" "maybe type" "temp"
      (899425 'move' call_tmp[899422](256761 call == call_tmp[899410] call_tmp[899417]))
      unknown call_tmp[899427] "expr temp" "maybe param" "maybe type" "temp"
      (899430 'move' call_tmp[899427](256771 call _cond_test call_tmp[899422]))
      if call_tmp[899427]
      {
      }
      {
        unknown call_tmp[899434] "expr temp" "maybe param" "maybe type" "temp"
        (899437 'move' call_tmp[899434](256747 call _value _mt[203] a[256699]))
        unknown call_tmp[899443] "expr temp" "maybe param" "maybe type" "temp"
        (899446 'move' call_tmp[899443](256757 call _value _mt[203] b[256703]))
        (256755 call(256752 call (partial) dsiAssign _mt[203] call_tmp[899434]) call_tmp[899443])
      }
      unknown call_tmp[899450] "expr temp" "maybe param" "maybe type" "temp"
      (899453 'move' call_tmp[899450](256786 call _instance _mt[203] a[256699]))
      unknown call_tmp[899455] "expr temp" "maybe param" "maybe type" "temp"
      (899458 'move' call_tmp[899455](256784 call _isPrivatized call_tmp[899450]))
      unknown call_tmp[899460] "expr temp" "maybe param" "maybe type" "temp"
      (899463 'move' call_tmp[899460](256789 call _cond_test call_tmp[899455]))
      if call_tmp[899460]
      {
        unknown call_tmp[899467] "expr temp" "maybe param" "maybe type" "temp"
        (899470 'move' call_tmp[899467](256779 call _value _mt[203] a[256699]))
        (256777 call _reprivatize call_tmp[899467])
      }
    }
    (625013 return _void[46])
  }
  function chpl__serializeAssignment[256807](arg a[256809]:_any[141](?), arg b[256811]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[625017] "RVV" "param" "temp"
    unknown tmp[501000] "maybe param" "temp"
    unknown call_tmp[899474] "expr temp" "maybe param" "maybe type" "temp"
    (899477 'move' call_tmp[899474](256822 call rank _mt[203] a[256809]))
    (501011 'move' tmp[501000](256819 call != call_tmp[899474] 1))
    unknown call_tmp[899479] "expr temp" "maybe param" "maybe type" "temp"
    (899482 'move' call_tmp[899479](501013 call _cond_invalid tmp[501000]))
    if call_tmp[899479]
    {
      (501016 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[700757] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[700758] "maybe param" "temp"
    unknown call_tmp[899484] "expr temp" "maybe param" "maybe type" "temp"
    (899487 'move' call_tmp[899484](501001 call isTrue tmp[501000]))
    (700763 'move' tmp[700758](700761 call _cond_test call_tmp[899484]))
    if tmp[700758]
    {
      unknown tmp[700765] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[899489] "expr temp" "maybe param" "maybe type" "temp"
      (899492 'move' call_tmp[899489](256827 call isRange b[256811]))
      (700767 'move' tmp[700765](501004 call isTrue call_tmp[899489]))
      (700772 'move' tmp[700757](700769 '_paramFoldLogical' tmp[700758] tmp[700765]))
    }
    {
      (700777 'move' tmp[700757](700774 '_paramFoldLogical' tmp[700758] 0))
    }
    unknown call_tmp[899494] "expr temp" "maybe param" "maybe type" "temp"
    (899497 'move' call_tmp[899494](256829 call _cond_test tmp[700757]))
    if call_tmp[899494]
    {
      (625022 'move' ret[625017](625021 'deref' 1))
      gotoReturn _end_chpl__serializeAssignment[625015] _end_chpl__serializeAssignment[625015]
    }
    unknown tmp[501021] "maybe param" "temp"
    unknown tmp[501042] "maybe param" "temp"
    unknown tmp[501063] "maybe param" "temp"
    unknown call_tmp[899501] "expr temp" "maybe param" "maybe type" "temp"
    (899504 'move' call_tmp[899501](256849 call(256846 call (partial) isRectangular _mt[203] a[256809])))
    (501074 'move' tmp[501063](256843 call ! call_tmp[899501]))
    unknown call_tmp[899506] "expr temp" "maybe param" "maybe type" "temp"
    (899509 'move' call_tmp[899506](501076 call _cond_invalid tmp[501063]))
    if call_tmp[899506]
    {
      (501079 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[700784] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[700785] "maybe param" "temp"
    unknown call_tmp[899511] "expr temp" "maybe param" "maybe type" "temp"
    (899514 'move' call_tmp[899511](501064 call isTrue tmp[501063]))
    (700790 'move' tmp[700785](700788 call _cond_test call_tmp[899511]))
    if tmp[700785]
    {
      unknown tmp[700792] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[899518] "expr temp" "maybe param" "maybe type" "temp"
      (899521 'move' call_tmp[899518](256856 call(256853 call (partial) isAssociative _mt[203] a[256809])))
      unknown call_tmp[899523] "expr temp" "maybe param" "maybe type" "temp"
      (899526 'move' call_tmp[899523](256850 call ! call_tmp[899518]))
      (700794 'move' tmp[700792](501067 call isTrue call_tmp[899523]))
      (700799 'move' tmp[700784](700796 '_paramFoldLogical' tmp[700785] tmp[700792]))
    }
    {
      (700804 'move' tmp[700784](700801 '_paramFoldLogical' tmp[700785] 0))
    }
    (501053 'move' tmp[501042] tmp[700784])
    unknown call_tmp[899528] "expr temp" "maybe param" "maybe type" "temp"
    (899531 'move' call_tmp[899528](501055 call _cond_invalid tmp[501042]))
    if call_tmp[899528]
    {
      (501058 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[700811] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[700812] "maybe param" "temp"
    unknown call_tmp[899533] "expr temp" "maybe param" "maybe type" "temp"
    (899536 'move' call_tmp[899533](501043 call isTrue tmp[501042]))
    (700817 'move' tmp[700812](700815 call _cond_test call_tmp[899533]))
    if tmp[700812]
    {
      unknown tmp[700819] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[899540] "expr temp" "maybe param" "maybe type" "temp"
      (899543 'move' call_tmp[899540](256863 call(256860 call (partial) isSparse _mt[203] a[256809])))
      unknown call_tmp[899545] "expr temp" "maybe param" "maybe type" "temp"
      (899548 'move' call_tmp[899545](256857 call ! call_tmp[899540]))
      (700821 'move' tmp[700819](501046 call isTrue call_tmp[899545]))
      (700826 'move' tmp[700811](700823 '_paramFoldLogical' tmp[700812] tmp[700819]))
    }
    {
      (700831 'move' tmp[700811](700828 '_paramFoldLogical' tmp[700812] 0))
    }
    (501032 'move' tmp[501021] tmp[700811])
    unknown call_tmp[899550] "expr temp" "maybe param" "maybe type" "temp"
    (899553 'move' call_tmp[899550](501034 call _cond_invalid tmp[501021]))
    if call_tmp[899550]
    {
      (501037 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[700919] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[700920] "maybe param" "temp"
    unknown call_tmp[899555] "expr temp" "maybe param" "maybe type" "temp"
    (899558 'move' call_tmp[899555](501022 call isTrue tmp[501021]))
    (700925 'move' tmp[700920](700923 call _cond_test call_tmp[899555]))
    if tmp[700920]
    {
      (700930 'move' tmp[700919](700927 '_paramFoldLogical' tmp[700920] 1))
    }
    {
      unknown tmp[501084] "maybe param" "temp"
      unknown tmp[501105] "maybe param" "temp"
      unknown tmp[501126] "maybe param" "temp"
      (501137 'move' tmp[501126](256871 call isArray b[256811]))
      unknown call_tmp[899560] "expr temp" "maybe param" "maybe type" "temp"
      (899563 'move' call_tmp[899560](501139 call _cond_invalid tmp[501126]))
      if call_tmp[899560]
      {
        (501142 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[700838] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[700839] "maybe param" "temp"
      unknown call_tmp[899565] "expr temp" "maybe param" "maybe type" "temp"
      (899568 'move' call_tmp[899565](501127 call isTrue tmp[501126]))
      (700844 'move' tmp[700839](700842 call _cond_test call_tmp[899565]))
      if tmp[700839]
      {
        unknown tmp[700846] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[899572] "expr temp" "maybe param" "maybe type" "temp"
        (899575 'move' call_tmp[899572](256879 call(256876 call (partial) isRectangular _mt[203] b[256811])))
        unknown call_tmp[899577] "expr temp" "maybe param" "maybe type" "temp"
        (899580 'move' call_tmp[899577](256873 call ! call_tmp[899572]))
        (700848 'move' tmp[700846](501130 call isTrue call_tmp[899577]))
        (700853 'move' tmp[700838](700850 '_paramFoldLogical' tmp[700839] tmp[700846]))
      }
      {
        (700858 'move' tmp[700838](700855 '_paramFoldLogical' tmp[700839] 0))
      }
      (501116 'move' tmp[501105] tmp[700838])
      unknown call_tmp[899582] "expr temp" "maybe param" "maybe type" "temp"
      (899585 'move' call_tmp[899582](501118 call _cond_invalid tmp[501105]))
      if call_tmp[899582]
      {
        (501121 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[700865] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[700866] "maybe param" "temp"
      unknown call_tmp[899587] "expr temp" "maybe param" "maybe type" "temp"
      (899590 'move' call_tmp[899587](501106 call isTrue tmp[501105]))
      (700871 'move' tmp[700866](700869 call _cond_test call_tmp[899587]))
      if tmp[700866]
      {
        unknown tmp[700873] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[899594] "expr temp" "maybe param" "maybe type" "temp"
        (899597 'move' call_tmp[899594](256886 call(256883 call (partial) isAssociative _mt[203] b[256811])))
        unknown call_tmp[899599] "expr temp" "maybe param" "maybe type" "temp"
        (899602 'move' call_tmp[899599](256880 call ! call_tmp[899594]))
        (700875 'move' tmp[700873](501109 call isTrue call_tmp[899599]))
        (700880 'move' tmp[700865](700877 '_paramFoldLogical' tmp[700866] tmp[700873]))
      }
      {
        (700885 'move' tmp[700865](700882 '_paramFoldLogical' tmp[700866] 0))
      }
      (501095 'move' tmp[501084] tmp[700865])
      unknown call_tmp[899604] "expr temp" "maybe param" "maybe type" "temp"
      (899607 'move' call_tmp[899604](501097 call _cond_invalid tmp[501084]))
      if call_tmp[899604]
      {
        (501100 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[700892] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[700893] "maybe param" "temp"
      unknown call_tmp[899609] "expr temp" "maybe param" "maybe type" "temp"
      (899612 'move' call_tmp[899609](501085 call isTrue tmp[501084]))
      (700898 'move' tmp[700893](700896 call _cond_test call_tmp[899609]))
      if tmp[700893]
      {
        unknown tmp[700900] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[899616] "expr temp" "maybe param" "maybe type" "temp"
        (899619 'move' call_tmp[899616](256893 call(256890 call (partial) isSparse _mt[203] b[256811])))
        unknown call_tmp[899621] "expr temp" "maybe param" "maybe type" "temp"
        (899624 'move' call_tmp[899621](256887 call ! call_tmp[899616]))
        (700902 'move' tmp[700900](501088 call isTrue call_tmp[899621]))
        (700907 'move' tmp[700892](700904 '_paramFoldLogical' tmp[700893] tmp[700900]))
      }
      {
        (700912 'move' tmp[700892](700909 '_paramFoldLogical' tmp[700893] 0))
      }
      unknown tmp[700932] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (700934 'move' tmp[700932](501026 call isTrue tmp[700892]))
      (700939 'move' tmp[700919](700936 '_paramFoldLogical' tmp[700920] tmp[700932]))
    }
    unknown call_tmp[899626] "expr temp" "maybe param" "maybe type" "temp"
    (899629 'move' call_tmp[899626](256894 call _cond_test tmp[700919]))
    if call_tmp[899626]
    {
      (625027 'move' ret[625017](625026 'deref' 1))
      gotoReturn _end_chpl__serializeAssignment[625015] _end_chpl__serializeAssignment[625015]
    }
    (625032 'move' ret[625017](625031 'deref' 0))
    label _end_chpl__serializeAssignment[625015]
    (625019 return ret[625017])
  }
  function isCopyableOrSyncSingle[256903](arg t[256905]:_any[141](?)) param : _unknown[42] "private"
  {
    unknown ret[625036] "RVV" "param" "temp"
    unknown tmp[501147] "maybe param" "temp"
    (501158 'move' tmp[501147](256912 call isSyncType t[256905]))
    unknown call_tmp[899631] "expr temp" "maybe param" "maybe type" "temp"
    (899634 'move' call_tmp[899631](501160 call _cond_invalid tmp[501147]))
    if call_tmp[899631]
    {
      (501163 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[700946] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[700947] "maybe param" "temp"
    unknown call_tmp[899636] "expr temp" "maybe param" "maybe type" "temp"
    (899639 'move' call_tmp[899636](501148 call isTrue tmp[501147]))
    (700952 'move' tmp[700947](700950 call _cond_test call_tmp[899636]))
    if tmp[700947]
    {
      (700957 'move' tmp[700946](700954 '_paramFoldLogical' tmp[700947] 1))
    }
    {
      unknown tmp[700959] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[899641] "expr temp" "maybe param" "maybe type" "temp"
      (899644 'move' call_tmp[899641](256915 call isCopyableType t[256905]))
      (700961 'move' tmp[700959](501152 call isTrue call_tmp[899641]))
      (700966 'move' tmp[700946](700963 '_paramFoldLogical' tmp[700947] tmp[700959]))
    }
    (625041 'move' ret[625036](625040 'deref' tmp[700946]))
    (625038 return ret[625036])
  }
  function isConstCopyableOrSyncSingle[256919](arg t[256921]:_any[141](?)) param : _unknown[42] "private"
  {
    unknown ret[625045] "RVV" "param" "temp"
    unknown tmp[501168] "maybe param" "temp"
    (501179 'move' tmp[501168](256928 call isSyncType t[256921]))
    unknown call_tmp[899646] "expr temp" "maybe param" "maybe type" "temp"
    (899649 'move' call_tmp[899646](501181 call _cond_invalid tmp[501168]))
    if call_tmp[899646]
    {
      (501184 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[700973] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[700974] "maybe param" "temp"
    unknown call_tmp[899651] "expr temp" "maybe param" "maybe type" "temp"
    (899654 'move' call_tmp[899651](501169 call isTrue tmp[501168]))
    (700979 'move' tmp[700974](700977 call _cond_test call_tmp[899651]))
    if tmp[700974]
    {
      (700984 'move' tmp[700973](700981 '_paramFoldLogical' tmp[700974] 1))
    }
    {
      unknown tmp[700986] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[899656] "expr temp" "maybe param" "maybe type" "temp"
      (899659 'move' call_tmp[899656](256931 call isConstCopyableType t[256921]))
      (700988 'move' tmp[700986](501173 call isTrue call_tmp[899656]))
      (700993 'move' tmp[700973](700990 '_paramFoldLogical' tmp[700974] tmp[700986]))
    }
    (625050 'move' ret[625045](625049 'deref' tmp[700973]))
    (625047 return ret[625045])
  }
  function chpl__compatibleForBulkTransfer[256935](arg a[256937]:_any[141](?), arg b[256939]:_any[141](?), param arg kind[256942]:_tElt[257619]) param : _unknown[42]
  {
    unknown ret[625054] "RVV" "param" "temp"
    unknown call_tmp[899661] "expr temp" "maybe param" "maybe type" "temp"
    (899664 'move' call_tmp[899661](256949 call ! useBulkTransfer[247501]))
    unknown call_tmp[899666] "expr temp" "maybe param" "maybe type" "temp"
    (899669 'move' call_tmp[899666](256952 call _cond_test call_tmp[899661]))
    if call_tmp[899666]
    {
      (625059 'move' ret[625054](625058 'deref' 0))
      gotoReturn _end_chpl__compatibleForBulkTransfer[625052] _end_chpl__compatibleForBulkTransfer[625052]
    }
    unknown call_tmp[899673] "expr temp" "maybe param" "maybe type" "temp"
    (899676 'move' call_tmp[899673](256963 call eltType _mt[203] a[256937]))
    unknown call_tmp[899680] "expr temp" "maybe param" "maybe type" "temp"
    (899683 'move' call_tmp[899680](256967 call eltType _mt[203] b[256939]))
    unknown call_tmp[899685] "expr temp" "maybe param" "maybe type" "temp"
    (899688 'move' call_tmp[899685](256960 call != call_tmp[899673] call_tmp[899680]))
    unknown call_tmp[899690] "expr temp" "maybe param" "maybe type" "temp"
    (899693 'move' call_tmp[899690](256970 call _cond_test call_tmp[899685]))
    if call_tmp[899690]
    {
      (625064 'move' ret[625054](625063 'deref' 0))
      gotoReturn _end_chpl__compatibleForBulkTransfer[625052] _end_chpl__compatibleForBulkTransfer[625052]
    }
    unknown call_tmp[899695] "expr temp" "maybe param" "maybe type" "temp"
    (899698 'move' call_tmp[899695](256978 call == kind[256942] move[257613]))
    unknown call_tmp[899700] "expr temp" "maybe param" "maybe type" "temp"
    (899703 'move' call_tmp[899700](256987 call _cond_test call_tmp[899695]))
    if call_tmp[899700]
    {
      (625069 'move' ret[625054](625068 'deref' 1))
      gotoReturn _end_chpl__compatibleForBulkTransfer[625052] _end_chpl__compatibleForBulkTransfer[625052]
    }
    unknown tmp[501189] "maybe param" "temp"
    (501200 'move' tmp[501189](256997 call == kind[256942] initCopy[257615]))
    unknown call_tmp[899705] "expr temp" "maybe param" "maybe type" "temp"
    (899708 'move' call_tmp[899705](501202 call _cond_invalid tmp[501189]))
    if call_tmp[899705]
    {
      (501205 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[701000] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[701001] "maybe param" "temp"
    unknown call_tmp[899710] "expr temp" "maybe param" "maybe type" "temp"
    (899713 'move' call_tmp[899710](501190 call isTrue tmp[501189]))
    (701006 'move' tmp[701001](701004 call _cond_test call_tmp[899710]))
    if tmp[701001]
    {
      unknown tmp[701008] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[899717] "expr temp" "maybe param" "maybe type" "temp"
      (899720 'move' call_tmp[899717](257009 call eltType _mt[203] a[256937]))
      unknown call_tmp[899722] "expr temp" "maybe param" "maybe type" "temp"
      (899725 'move' call_tmp[899722](257007 call isConstCopyableOrSyncSingle call_tmp[899717]))
      (701010 'move' tmp[701008](501193 call isTrue call_tmp[899722]))
      (701015 'move' tmp[701000](701012 '_paramFoldLogical' tmp[701001] tmp[701008]))
    }
    {
      (701020 'move' tmp[701000](701017 '_paramFoldLogical' tmp[701001] 0))
    }
    unknown call_tmp[899727] "expr temp" "maybe param" "maybe type" "temp"
    (899730 'move' call_tmp[899727](257012 call _cond_test tmp[701000]))
    if call_tmp[899727]
    {
      (625074 'move' ret[625054](625073 'deref' 1))
      gotoReturn _end_chpl__compatibleForBulkTransfer[625052] _end_chpl__compatibleForBulkTransfer[625052]
    }
    unknown call_tmp[899734] "expr temp" "maybe param" "maybe type" "temp"
    (899737 'move' call_tmp[899734](257025 call eltType _mt[203] a[256937]))
    unknown call_tmp[899739] "expr temp" "maybe param" "maybe type" "temp"
    (899742 'move' call_tmp[899739](257023 call chpl__supportedDataTypeForBulkTransfer call_tmp[899734]))
    unknown call_tmp[899744] "expr temp" "maybe param" "maybe type" "temp"
    (899747 'move' call_tmp[899744](257020 call ! call_tmp[899739]))
    unknown call_tmp[899749] "expr temp" "maybe param" "maybe type" "temp"
    (899752 'move' call_tmp[899749](257028 call _cond_test call_tmp[899744]))
    if call_tmp[899749]
    {
      (625079 'move' ret[625054](625078 'deref' 0))
      gotoReturn _end_chpl__compatibleForBulkTransfer[625052] _end_chpl__compatibleForBulkTransfer[625052]
    }
    (625084 'move' ret[625054](625083 'deref' 1))
    label _end_chpl__compatibleForBulkTransfer[625052]
    (625056 return ret[625054])
  }
  function chpl__supportedDataTypeForBulkTransfer[257037](arg t[257039]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[625088] "RVV" "param" "temp"
    unknown tmp[501231] "maybe param" "temp"
    (501242 'move' tmp[501231](395518 'is_subtype' borrowed[174](?) t[257039]))
    unknown call_tmp[899754] "expr temp" "maybe param" "maybe type" "temp"
    (899757 'move' call_tmp[899754](501244 call _cond_invalid tmp[501231]))
    if call_tmp[899754]
    {
      (501247 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[701027] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[701028] "maybe param" "temp"
    unknown call_tmp[899759] "expr temp" "maybe param" "maybe type" "temp"
    (899762 'move' call_tmp[899759](501232 call isTrue tmp[501231]))
    (701033 'move' tmp[701028](701031 call _cond_test call_tmp[899759]))
    if tmp[701028]
    {
      (701038 'move' tmp[701027](701035 '_paramFoldLogical' tmp[701028] 1))
    }
    {
      unknown tmp[701040] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[899764] "expr temp" "maybe param" "maybe type" "temp"
      (899767 'move' call_tmp[899764](395519 'is_subtype' unmanaged[183](?) t[257039]))
      (701042 'move' tmp[701040](501236 call isTrue call_tmp[899764]))
      (701047 'move' tmp[701027](701044 '_paramFoldLogical' tmp[701028] tmp[701040]))
    }
    unknown call_tmp[899769] "expr temp" "maybe param" "maybe type" "temp"
    (899772 'move' call_tmp[899769](257093 call _cond_test tmp[701027]))
    if call_tmp[899769]
    {
      (625093 'move' ret[625088](625092 'deref' 0))
      gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[625086] _end_chpl__supportedDataTypeForBulkTransfer[625086]
    }
    {
      unknown tmp[501210] "maybe param" "temp"
      (501221 'move' tmp[501210](257073 call isRecordType t[257039]))
      unknown call_tmp[899774] "expr temp" "maybe param" "maybe type" "temp"
      (899777 'move' call_tmp[899774](501223 call _cond_invalid tmp[501210]))
      if call_tmp[899774]
      {
        (501226 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[701054] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[701055] "maybe param" "temp"
      unknown call_tmp[899779] "expr temp" "maybe param" "maybe type" "temp"
      (899782 'move' call_tmp[899779](501211 call isTrue tmp[501210]))
      (701060 'move' tmp[701055](701058 call _cond_test call_tmp[899779]))
      if tmp[701055]
      {
        (701065 'move' tmp[701054](701062 '_paramFoldLogical' tmp[701055] 1))
      }
      {
        unknown tmp[701067] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[899784] "expr temp" "maybe param" "maybe type" "temp"
        (899787 'move' call_tmp[899784](257076 call isTupleType t[257039]))
        (701069 'move' tmp[701067](501215 call isTrue call_tmp[899784]))
        (701074 'move' tmp[701054](701071 '_paramFoldLogical' tmp[701055] tmp[701067]))
      }
      unknown call_tmp[899789] "expr temp" "maybe param" "maybe type" "temp"
      (899792 'move' call_tmp[899789](257078 call _cond_test tmp[701054]))
      if call_tmp[899789]
      {
        unknown call_tmp[899794] "expr temp" "maybe param" "maybe type" "temp"
        (899797 'move' call_tmp[899794](257048 call isPODType t[257039]))
        (625098 'move' ret[625088](625097 'deref' call_tmp[899794]))
        gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[625086] _end_chpl__supportedDataTypeForBulkTransfer[625086]
      }
      {
        unknown call_tmp[899799] "expr temp" "maybe param" "maybe type" "temp"
        (899802 'move' call_tmp[899799](257064 call isUnionType t[257039]))
        unknown call_tmp[899804] "expr temp" "maybe param" "maybe type" "temp"
        (899807 'move' call_tmp[899804](257066 call _cond_test call_tmp[899799]))
        if call_tmp[899804]
        {
          (625103 'move' ret[625088](625102 'deref' 0))
          gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[625086] _end_chpl__supportedDataTypeForBulkTransfer[625086]
        }
        {
          unknown x[257055] "dead at end of block" "insert auto destroy" "unsafe"
          (651367 'default init var' x[257055] t[257039])
          (257058 'end of statement')
          unknown call_tmp[899809] "expr temp" "maybe param" "maybe type" "temp"
          (899812 'move' call_tmp[899809](257061 call chpl__supportedDataTypeForBulkTransfer x[257055]))
          (625108 'move' ret[625088](625107 'deref' call_tmp[899809]))
          gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[625086] _end_chpl__supportedDataTypeForBulkTransfer[625086]
          (563912 'end of statement' x[257055])
        }
      }
    }
    label _end_chpl__supportedDataTypeForBulkTransfer[625086]
    (625090 return ret[625088])
  }
  function chpl__supportedDataTypeForBulkTransfer[257100](arg x[257103]:string[244]) param : _unknown[42]
  {
    unknown ret[625114] "RVV" "param" "temp"
    (625119 'move' ret[625114](625118 'deref' 0))
    (625116 return ret[625114])
  }
  function chpl__supportedDataTypeForBulkTransfer[257111](arg x[257114]:bytes[232]) param : _unknown[42]
  {
    unknown ret[625123] "RVV" "param" "temp"
    (625128 'move' ret[625123](625127 'deref' 0))
    (625125 return ret[625123])
  }
  function chpl__supportedDataTypeForBulkTransfer[257122](arg x[257125]:_syncvar[132579](?)) param : _unknown[42]
  {
    unknown ret[625132] "RVV" "param" "temp"
    (625137 'move' ret[625132](625136 'deref' 0))
    (625134 return ret[625132])
  }
  function chpl__supportedDataTypeForBulkTransfer[257133](arg x[257136]:_domain[225034](?)) param : _unknown[42]
  {
    unknown ret[625141] "RVV" "param" "temp"
    (625146 'move' ret[625141](625145 'deref' 0))
    (625143 return ret[625141])
  }
  function chpl__supportedDataTypeForBulkTransfer[257144](arg x[257149]:_array[255540](?)) param : _unknown[42]
  {
    unknown ret[625150] "RVV" "param" "temp"
    (625155 'move' ret[625150](625154 'deref' 0))
    (625152 return ret[625150])
  }
  function chpl__supportedDataTypeForBulkTransfer[257157](arg x[257160]:_distribution[268253](?)) param : _unknown[42]
  {
    unknown ret[625159] "RVV" "param" "temp"
    (625164 'move' ret[625159](625163 'deref' 1))
    (625161 return ret[625159])
  }
  function chpl__supportedDataTypeForBulkTransfer[257168](arg x[257171]:locale[234]) param : _unknown[42]
  {
    unknown ret[625168] "RVV" "param" "temp"
    (625173 'move' ret[625168](625172 'deref' 1))
    (625170 return ret[625168])
  }
  function chpl__supportedDataTypeForBulkTransfer[257179](arg x[257182]:chpl_anycomplex[144](?)) param : _unknown[42]
  {
    unknown ret[625177] "RVV" "param" "temp"
    (625182 'move' ret[625177](625181 'deref' 1))
    (625179 return ret[625177])
  }
  function chpl__supportedDataTypeForBulkTransfer[257190](arg x[257194]:RootClass[236]) param : _unknown[42]
  {
    unknown ret[625186] "RVV" "param" "temp"
    (625191 'move' ret[625186](625190 'deref' 0))
    (625188 return ret[625186])
  }
  function chpl__supportedDataTypeForBulkTransfer[257202](arg x[257204]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[625195] "RVV" "param" "temp"
    (625200 'move' ret[625195](625199 'deref' 1))
    (625197 return ret[625195])
  }
  function checkArrayShapesUponAssignment[257211](arg a[257213]:_any[141](?), arg b[257215]:_any[141](?), arg forSwap[257218] :
  0 =
  0) : _unknown[42] "no return value for void"
  {
    unknown tmp[501252] "maybe param" "temp"
    (501263 'move' tmp[501252](257404 call(257401 call (partial) isRectangular _mt[203] a[257213])))
    unknown call_tmp[899816] "expr temp" "maybe param" "maybe type" "temp"
    (899819 'move' call_tmp[899816](501265 call _cond_invalid tmp[501252]))
    if call_tmp[899816]
    {
      (501268 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[701081] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[701082] "maybe param" "temp"
    unknown call_tmp[899821] "expr temp" "maybe param" "maybe type" "temp"
    (899824 'move' call_tmp[899821](501253 call isTrue tmp[501252]))
    (701087 'move' tmp[701082](701085 call _cond_test call_tmp[899821]))
    if tmp[701082]
    {
      unknown tmp[701089] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[899828] "expr temp" "maybe param" "maybe type" "temp"
      (899831 'move' call_tmp[899828](257409 call(257406 call (partial) isRectangular _mt[203] b[257215])))
      (701091 'move' tmp[701089](501256 call isTrue call_tmp[899828]))
      (701096 'move' tmp[701081](701093 '_paramFoldLogical' tmp[701082] tmp[701089]))
    }
    {
      (701101 'move' tmp[701081](701098 '_paramFoldLogical' tmp[701082] 0))
    }
    unknown call_tmp[899833] "expr temp" "maybe param" "maybe type" "temp"
    (899836 'move' call_tmp[899833](257410 call _cond_test tmp[701081]))
    if call_tmp[899833]
    {
      const aDims[257224] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[701108] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[701109] "maybe param" "temp"
      unknown call_tmp[899838] "expr temp" "maybe param" "maybe type" "temp"
      (899841 'move' call_tmp[899838](257226 call isProtoSlice a[257213]))
      (701114 'move' tmp[701109](701112 call _cond_test call_tmp[899838]))
      if tmp[701109]
      {
        unknown tmp[701116] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (701118 'move' tmp[701116](257232 call(257229 call (partial) dims _mt[203] a[257213])))
        (701123 'move' tmp[701108](701120 '_paramFoldLogical' tmp[701109] tmp[701116]))
      }
      {
        unknown tmp[701125] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[899847] "expr temp" "maybe param" "maybe type" "temp"
        (899850 'move' call_tmp[899847](257234 call _value _mt[203] a[257213]))
        unknown call_tmp[899854] "expr temp" "maybe param" "maybe type" "temp"
        (899857 'move' call_tmp[899854](257237 call dom _mt[203] call_tmp[899847]))
        (701127 'move' tmp[701125](257243 call(257240 call (partial) dsiDims _mt[203] call_tmp[899854])))
        (701132 'move' tmp[701108](701129 '_paramFoldLogical' tmp[701109] tmp[701125]))
      }
      (651369 'init var' aDims[257224] tmp[701108])
      (257248 'end of statement')
      const bDims[257250] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[701139] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[701140] "maybe param" "temp"
      unknown call_tmp[899861] "expr temp" "maybe param" "maybe type" "temp"
      (899864 'move' call_tmp[899861](257252 call isProtoSlice b[257215]))
      (701145 'move' tmp[701140](701143 call _cond_test call_tmp[899861]))
      if tmp[701140]
      {
        unknown tmp[701147] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (701149 'move' tmp[701147](257258 call(257255 call (partial) dims _mt[203] b[257215])))
        (701154 'move' tmp[701139](701151 '_paramFoldLogical' tmp[701140] tmp[701147]))
      }
      {
        unknown tmp[701156] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[899870] "expr temp" "maybe param" "maybe type" "temp"
        (899873 'move' call_tmp[899870](257260 call _value _mt[203] b[257215]))
        unknown call_tmp[899877] "expr temp" "maybe param" "maybe type" "temp"
        (899880 'move' call_tmp[899877](257263 call dom _mt[203] call_tmp[899870]))
        (701158 'move' tmp[701156](257269 call(257266 call (partial) dsiDims _mt[203] call_tmp[899877])))
        (701163 'move' tmp[701139](701160 '_paramFoldLogical' tmp[701140] tmp[701156]))
      }
      (651371 'init var' bDims[257250] tmp[701139])
      (257274 'end of statement')
      unknown call_tmp[899886] "expr temp" "maybe param" "maybe type" "temp"
      (899889 'move' call_tmp[899886](257280 call size _mt[203] aDims[257224]))
      unknown call_tmp[899893] "expr temp" "maybe param" "maybe type" "temp"
      (899896 'move' call_tmp[899893](257284 call size _mt[203] bDims[257250]))
      unknown call_tmp[899898] "expr temp" "maybe param" "maybe type" "temp"
      (899901 'move' call_tmp[899898](257277 call == call_tmp[899886] call_tmp[899893]))
      (257276 call compilerAssert call_tmp[899898])
      (563925 'end of statement' aDims[257224] bDims[257250])
      {
        unknown i[257287] "dead at end of block" "index var" "insert auto destroy"
        (651373 'init var' i[257287] 0)
        (563928 'end of statement')
        unknown tmp[257358] "maybe param" "temp"
        unknown call_tmp[899905] "expr temp" "maybe param" "maybe type" "temp"
        (899908 'move' call_tmp[899905](257293 call size _mt[203] aDims[257224]))
        unknown call_tmp[899910] "expr temp" "maybe param" "maybe type" "temp"
        (899913 'move' call_tmp[899910](257290 call - call_tmp[899905] 1))
        (257370 'move' tmp[257358](257368 call chpl_compute_low_param_loop_bound 0 call_tmp[899910]))
        unknown tmp[257359] "maybe param" "temp"
        unknown call_tmp[899917] "expr temp" "maybe param" "maybe type" "temp"
        (899920 'move' call_tmp[899917](257377 call size _mt[203] aDims[257224]))
        unknown call_tmp[899922] "expr temp" "maybe param" "maybe type" "temp"
        (899925 'move' call_tmp[899922](257375 call - call_tmp[899917] 1))
        (257383 'move' tmp[257359](257381 call chpl_compute_high_param_loop_bound 0 call_tmp[899922]))
        unknown tmp[257360] "maybe param" "temp"
        (257386 'move' tmp[257360] 1)
        ParamForLoop[257388]
        { i[257287] tmp[257358] tmp[257359] tmp[257360]
          {
            unknown call_tmp[899927] "expr temp" "maybe param" "maybe type" "temp"
            (899930 'move' call_tmp[899927](257338 call aDims[257224] i[257287]))
            unknown call_tmp[899934] "expr temp" "maybe param" "maybe type" "temp"
            (899937 'move' call_tmp[899934](257343 call(257340 call (partial) sizeAs _mt[203] call_tmp[899927]) uint(64)[86]))
            unknown call_tmp[899939] "expr temp" "maybe param" "maybe type" "temp"
            (899942 'move' call_tmp[899939](257346 call bDims[257250] i[257287]))
            unknown call_tmp[899946] "expr temp" "maybe param" "maybe type" "temp"
            (899949 'move' call_tmp[899946](257351 call(257348 call (partial) sizeAs _mt[203] call_tmp[899939]) uint(64)[86]))
            unknown call_tmp[899951] "expr temp" "maybe param" "maybe type" "temp"
            (899954 'move' call_tmp[899951](257335 call != call_tmp[899934] call_tmp[899946]))
            unknown call_tmp[899956] "expr temp" "maybe param" "maybe type" "temp"
            (899959 'move' call_tmp[899956](257353 call _cond_test call_tmp[899951]))
            if call_tmp[899956]
            {
              unknown tmp[701170] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[701171] "maybe param" "temp"
              (701176 'move' tmp[701171](701174 call _cond_test forSwap[257218]))
              if tmp[701171]
              {
                (701181 'move' tmp[701170](701178 '_paramFoldLogical' tmp[701171] "swapping"))
              }
              {
                (701186 'move' tmp[701170](701183 '_paramFoldLogical' tmp[701171] "assigning"))
              }
              unknown call_tmp[899961] "expr temp" "maybe param" "maybe type" "temp"
              (899964 'move' call_tmp[899961](257318 call aDims[257224] i[257287]))
              unknown call_tmp[899968] "expr temp" "maybe param" "maybe type" "temp"
              (899971 'move' call_tmp[899968](257323 call(257320 call (partial) sizeAs _mt[203] call_tmp[899961]) uint(64)[86]))
              unknown call_tmp[899973] "expr temp" "maybe param" "maybe type" "temp"
              (899976 'move' call_tmp[899973](257327 call bDims[257250] i[257287]))
              unknown call_tmp[899980] "expr temp" "maybe param" "maybe type" "temp"
              (899983 'move' call_tmp[899980](257332 call(257329 call (partial) sizeAs _mt[203] call_tmp[899973]) uint(64)[86]))
              (257301 call halt tmp[701170] " between arrays of different shapes in dimension " i[257287] ": " call_tmp[899968] " vs. " call_tmp[899980])
              (563929 'end of statement' i[257287] aDims[257224] bDims[257250])
            }
          }
        }
        label _unused_continueLabel[257362]
        label _breakLabel[257361]
      }
    }
    {
    }
    (625202 return _void[46])
  }
  function arrayOrProtoSliceAssign[257416](ref arg a[257418]:_any[141](?), arg b[257420]:_any[141](?)) : _unknown[42] "inline" "private" "find user line" "no return value for void"
  {
    unknown call_tmp[899987] "expr temp" "maybe param" "maybe type" "temp"
    (899990 'move' call_tmp[899987](257432 call rank _mt[203] a[257418]))
    unknown call_tmp[899994] "expr temp" "maybe param" "maybe type" "temp"
    (899997 'move' call_tmp[899994](257436 call rank _mt[203] b[257420]))
    unknown call_tmp[899999] "expr temp" "maybe param" "maybe type" "temp"
    (900002 'move' call_tmp[899999](257429 call != call_tmp[899987] call_tmp[899994]))
    unknown call_tmp[900004] "expr temp" "maybe param" "maybe type" "temp"
    (900007 'move' call_tmp[900004](257439 call _cond_test call_tmp[899999]))
    if call_tmp[900004]
    {
      (257424 call compilerError "rank mismatch in array assignment")
    }
    unknown call_tmp[900011] "expr temp" "maybe param" "maybe type" "temp"
    (900014 'move' call_tmp[900011](257449 call _value _mt[203] b[257420]))
    unknown call_tmp[900016] "expr temp" "maybe param" "maybe type" "temp"
    (900019 'move' call_tmp[900016](257446 call == call_tmp[900011] nil[32]))
    unknown call_tmp[900021] "expr temp" "maybe param" "maybe type" "temp"
    (900024 'move' call_tmp[900021](257453 call _cond_test call_tmp[900016]))
    if call_tmp[900021]
    {
      gotoReturn _end_arrayOrProtoSliceAssign[625204] _end_arrayOrProtoSliceAssign[625204]
    }
    unknown eqVals[257459] "dead at end of block" "insert auto destroy"
    (651375 'default init var' eqVals[257459] bool[19])
    (257462 'end of statement')
    unknown tmp[501294] "maybe param" "temp"
    (501305 'move' tmp[501294](257506 call isArray a[257418]))
    unknown call_tmp[900026] "expr temp" "maybe param" "maybe type" "temp"
    (900029 'move' call_tmp[900026](501307 call _cond_invalid tmp[501294]))
    if call_tmp[900026]
    {
      (501310 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[701193] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[701194] "maybe param" "temp"
    unknown call_tmp[900031] "expr temp" "maybe param" "maybe type" "temp"
    (900034 'move' call_tmp[900031](501295 call isTrue tmp[501294]))
    (701199 'move' tmp[701194](701197 call _cond_test call_tmp[900031]))
    if tmp[701194]
    {
      unknown tmp[701201] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[900036] "expr temp" "maybe param" "maybe type" "temp"
      (900039 'move' call_tmp[900036](257509 call isArray b[257420]))
      (701203 'move' tmp[701201](501298 call isTrue call_tmp[900036]))
      (701208 'move' tmp[701193](701205 '_paramFoldLogical' tmp[701194] tmp[701201]))
    }
    {
      (701213 'move' tmp[701193](701210 '_paramFoldLogical' tmp[701194] 0))
    }
    unknown call_tmp[900041] "expr temp" "maybe param" "maybe type" "temp"
    (900044 'move' call_tmp[900041](257511 call _cond_test tmp[701193]))
    if call_tmp[900041]
    {
      unknown call_tmp[900048] "expr temp" "maybe param" "maybe type" "temp"
      (900051 'move' call_tmp[900048](257470 call _value _mt[203] a[257418]))
      unknown call_tmp[900055] "expr temp" "maybe param" "maybe type" "temp"
      (900058 'move' call_tmp[900055](257474 call _value _mt[203] b[257420]))
      unknown call_tmp[900060] "expr temp" "maybe param" "maybe type" "temp"
      (900063 'move' call_tmp[900060](257467 call == call_tmp[900048] call_tmp[900055]))
      (257464 call = eqVals[257459] call_tmp[900060])
      (563936 'end of statement' eqVals[257459])
    }
    {
      unknown tmp[501273] "maybe param" "temp"
      (501284 'move' tmp[501273](257494 call isProtoSlice a[257418]))
      unknown call_tmp[900065] "expr temp" "maybe param" "maybe type" "temp"
      (900068 'move' call_tmp[900065](501286 call _cond_invalid tmp[501273]))
      if call_tmp[900065]
      {
        (501289 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[701220] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[701221] "maybe param" "temp"
      unknown call_tmp[900070] "expr temp" "maybe param" "maybe type" "temp"
      (900073 'move' call_tmp[900070](501274 call isTrue tmp[501273]))
      (701226 'move' tmp[701221](701224 call _cond_test call_tmp[900070]))
      if tmp[701221]
      {
        unknown tmp[701228] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[900075] "expr temp" "maybe param" "maybe type" "temp"
        (900078 'move' call_tmp[900075](257497 call isProtoSlice b[257420]))
        (701230 'move' tmp[701228](501277 call isTrue call_tmp[900075]))
        (701235 'move' tmp[701220](701232 '_paramFoldLogical' tmp[701221] tmp[701228]))
      }
      {
        (701240 'move' tmp[701220](701237 '_paramFoldLogical' tmp[701221] 0))
      }
      unknown call_tmp[900080] "expr temp" "maybe param" "maybe type" "temp"
      (900083 'move' call_tmp[900080](257499 call _cond_test tmp[701220]))
      if call_tmp[900080]
      {
        unknown call_tmp[900085] "expr temp" "maybe param" "maybe type" "temp"
        (900088 'move' call_tmp[900085](257481 call == a[257418] b[257420]))
        (257478 call = eqVals[257459] call_tmp[900085])
        (563939 'end of statement' eqVals[257459])
      }
      {
        (257487 call compilerError "Internal error: cross-type assignments are not supported")
      }
    }
    unknown call_tmp[900090] "expr temp" "maybe param" "maybe type" "temp"
    (900093 'move' call_tmp[900090](257519 call _cond_test eqVals[257459]))
    if call_tmp[900090]
    {
      gotoReturn _end_arrayOrProtoSliceAssign[625204] _end_arrayOrProtoSliceAssign[625204]
    }
    unknown tmp[501315] "maybe param" "temp"
    unknown call_tmp[900097] "expr temp" "maybe param" "maybe type" "temp"
    (900100 'move' call_tmp[900097](257533 call(257530 call (partial) sizeAs _mt[203] a[257418]) uint(64)[86]))
    (501326 'move' tmp[501315](257527 call == call_tmp[900097] 0))
    unknown call_tmp[900102] "expr temp" "maybe param" "maybe type" "temp"
    (900105 'move' call_tmp[900102](501328 call _cond_invalid tmp[501315]))
    if call_tmp[900102]
    {
      (501331 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[701247] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[701248] "maybe param" "temp"
    unknown call_tmp[900107] "expr temp" "maybe param" "maybe type" "temp"
    (900110 'move' call_tmp[900107](501316 call isTrue tmp[501315]))
    (701253 'move' tmp[701248](701251 call _cond_test call_tmp[900107]))
    if tmp[701248]
    {
      unknown tmp[701255] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[900114] "expr temp" "maybe param" "maybe type" "temp"
      (900117 'move' call_tmp[900114](257542 call(257539 call (partial) sizeAs _mt[203] b[257420]) uint(64)[86]))
      unknown call_tmp[900119] "expr temp" "maybe param" "maybe type" "temp"
      (900122 'move' call_tmp[900119](257536 call == call_tmp[900114] 0))
      (701257 'move' tmp[701255](501319 call isTrue call_tmp[900119]))
      (701262 'move' tmp[701247](701259 '_paramFoldLogical' tmp[701248] tmp[701255]))
    }
    {
      (701267 'move' tmp[701247](701264 '_paramFoldLogical' tmp[701248] 0))
    }
    unknown call_tmp[900124] "expr temp" "maybe param" "maybe type" "temp"
    (900127 'move' call_tmp[900124](257545 call _cond_test tmp[701247]))
    if call_tmp[900124]
    {
      gotoReturn _end_arrayOrProtoSliceAssign[625204] _end_arrayOrProtoSliceAssign[625204]
    }
    unknown call_tmp[900129] "expr temp" "maybe param" "maybe type" "temp"
    (900132 'move' call_tmp[900129](257556 call _cond_test 1))
    if call_tmp[900129]
    {
      (257551 call checkArrayShapesUponAssignment a[257418] b[257420])
    }
    (257562 call chpl__uncheckedArrayTransfer a[257418] b[257420](kind = assign[257617]))
    label _end_arrayOrProtoSliceAssign[625204]
    (625206 return _void[46])
  }
  function =[257574](ref arg a[257579]:_array[255540](?), arg b[257585]:_array[255540](?)) : _unknown[42] "assignop" "inline" "operator" "find user line" "no return value for void"
  {
    (257590 call arrayOrProtoSliceAssign a[257579] b[257585])
    (625214 return _void[46])
  }
  function =[257595](ref arg a[257598]:chpl__protoSlice[148800](?), arg b[257602]:chpl__protoSlice[148800](?)) : _unknown[42] "assignop" "inline" "operator" "find user line" "no return value for void"
  {
    (257607 call arrayOrProtoSliceAssign a[257598] b[257602])
    (625216 return _void[46])
  }
  type _tElt[257619] def move[257613]:_tElt[257619] def initCopy[257615]:_tElt[257619] def assign[257617]:_tElt[257619]
  function needsInitWorkaround[257622](arg t[257624]:_any[141](?)) param : _unknown[42] "private"
  {
    unknown ret[625220] "RVV" "param" "temp"
    unknown tmp[501336] "maybe param" "temp"
    unknown tmp[501357] "maybe param" "temp"
    (501368 'move' tmp[501357](395523 'is_subtype' _array[255540](?) t[257624]))
    unknown call_tmp[900134] "expr temp" "maybe param" "maybe type" "temp"
    (900137 'move' call_tmp[900134](501370 call _cond_invalid tmp[501357]))
    if call_tmp[900134]
    {
      (501373 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[701274] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[701275] "maybe param" "temp"
    unknown call_tmp[900139] "expr temp" "maybe param" "maybe type" "temp"
    (900142 'move' call_tmp[900139](501358 call isTrue tmp[501357]))
    (701280 'move' tmp[701275](701278 call _cond_test call_tmp[900139]))
    if tmp[701275]
    {
      (701285 'move' tmp[701274](701282 '_paramFoldLogical' tmp[701275] 1))
    }
    {
      unknown tmp[701287] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[900144] "expr temp" "maybe param" "maybe type" "temp"
      (900147 'move' call_tmp[900144](395524 'is_subtype' _domain[225034](?) t[257624]))
      (701289 'move' tmp[701287](501362 call isTrue call_tmp[900144]))
      (701294 'move' tmp[701274](701291 '_paramFoldLogical' tmp[701275] tmp[701287]))
    }
    (501347 'move' tmp[501336] tmp[701274])
    unknown call_tmp[900149] "expr temp" "maybe param" "maybe type" "temp"
    (900152 'move' call_tmp[900149](501349 call _cond_invalid tmp[501336]))
    if call_tmp[900149]
    {
      (501352 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[701301] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[701302] "maybe param" "temp"
    unknown call_tmp[900154] "expr temp" "maybe param" "maybe type" "temp"
    (900157 'move' call_tmp[900154](501337 call isTrue tmp[501336]))
    (701307 'move' tmp[701302](701305 call _cond_test call_tmp[900154]))
    if tmp[701302]
    {
      (701312 'move' tmp[701301](701309 '_paramFoldLogical' tmp[701302] 1))
    }
    {
      unknown tmp[701314] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[900159] "expr temp" "maybe param" "maybe type" "temp"
      (900162 'move' call_tmp[900159](395525 'is_subtype' _distribution[268253](?) t[257624]))
      (701316 'move' tmp[701314](501341 call isTrue call_tmp[900159]))
      (701321 'move' tmp[701301](701318 '_paramFoldLogical' tmp[701302] tmp[701314]))
    }
    (625225 'move' ret[625220](625224 'deref' tmp[701301]))
    (625222 return ret[625220])
  }
  function initCopyAfterTransfer[257646](ref arg a[257651]:_array[255540](?)) : _unknown[42] "private" "ignore transfer errors" "no return value for void"
  {
    unknown call_tmp[900166] "expr temp" "maybe param" "maybe type" "temp"
    (900169 'move' call_tmp[900166](257754 call eltType _mt[203] a[257651]))
    unknown call_tmp[900171] "expr temp" "maybe param" "maybe type" "temp"
    (900174 'move' call_tmp[900171](257752 call needsInitWorkaround call_tmp[900166]))
    unknown call_tmp[900176] "expr temp" "maybe param" "maybe type" "temp"
    (900179 'move' call_tmp[900176](257757 call _cond_test call_tmp[900171]))
    if call_tmp[900176]
    {
      unknown call_tmp[900183] "expr temp" "maybe param" "maybe type" "temp"
      (900186 'move' call_tmp[900183](470079 call _dom _mt[203] a[257651]))
      unknown call_tmp[900188] "maybe param" "maybe type" "temp"
      (900191 'move' call_tmp[900188](470075 call chpl__staticAutoLocalCheck a[257651] call_tmp[900183]))
      unknown chpl__staticAutoLocalCheckSym[470074] "dead at end of block" "param" "temp"
      (651377 'init var' chpl__staticAutoLocalCheckSym[470074] call_tmp[900188])
      if chpl__staticAutoLocalCheckSym[470074]
      {
        unknown call_tmp[900195] "expr temp" "maybe param" "maybe type" "temp"
        (900198 'move' call_tmp[900195](257659 call _dom _mt[203] a[257651]))
        Forall[257690] {
          induction variables:
            
            unknown ai[257656] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[900195]
          shadow variables:
            a[257664] 'ref' intent outer var a[257651]
              init block
              {
              }
              deinit block
              {
              }
          other variables
            forall body
          {
            unknown aa[257670] "dead at end of block" "ref var"
            (651382 'init ref decl' aa[257670])
            unknown call_tmp[900200] "expr temp" "maybe param" "maybe type" "temp"
            (900203 'move' call_tmp[900200](470085 'may be local access' a[257651] ai[257656] chpl__staticAutoLocalCheckSym[470074] 1))
            (651380 'move' aa[257670](651379 'addr of' call_tmp[900200]))
            (257675 'end of statement')
            unknown call_tmp[900207] "maybe param" "maybe type" "temp"
            (900210 'move' call_tmp[900207](257679 call eltType _mt[203] a[257664]))
            unknown copy[257677] "dead at end of block" "no auto destroy"
            (651384 'init var' copy[257677] aa[257670] call_tmp[900207])
            (257684 'end of statement' ai[257656] aa[257670] a[257664])
            (257685 '=' aa[257670] copy[257677])
            (563955 'end of statement' aa[257670] copy[257677])
          }
        }
      }
      {
        unknown call_tmp[900214] "expr temp" "maybe param" "maybe type" "temp"
        (900217 'move' call_tmp[900214](470064 call _dom _mt[203] a[257651]))
        Forall[470060] {
          induction variables:
            
            unknown ai[470061] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[900214]
          shadow variables:
            a[470068] 'ref' intent outer var a[257651]
              init block
              {
              }
              deinit block
              {
              }
          other variables
            forall body
          {
            unknown aa[470043] "dead at end of block" "ref var"
            (651389 'init ref decl' aa[470043])
            unknown call_tmp[900219] "expr temp" "maybe param" "maybe type" "temp"
            (900222 'move' call_tmp[900219](470045 call a[470068] ai[470061]))
            (651387 'move' aa[470043](651386 'addr of' call_tmp[900219]))
            (470048 'end of statement')
            unknown call_tmp[900226] "maybe param" "maybe type" "temp"
            (900229 'move' call_tmp[900226](470052 call eltType _mt[203] a[470068]))
            unknown copy[470049] "dead at end of block" "no auto destroy"
            (651391 'init var' copy[470049] aa[470043] call_tmp[900226])
            (470056 'end of statement' a[470068] ai[470061] aa[470043])
            (470057 '=' aa[470043] copy[470049])
            (563961 'end of statement' aa[470043] copy[470049])
          }
        }
      }
    }
    {
      unknown call_tmp[900233] "expr temp" "maybe param" "maybe type" "temp"
      (900236 'move' call_tmp[900233](257744 call eltType _mt[203] a[257651]))
      unknown call_tmp[900238] "expr temp" "maybe param" "maybe type" "temp"
      (900241 'move' call_tmp[900238](257742 call isSyncType call_tmp[900233]))
      unknown call_tmp[900243] "expr temp" "maybe param" "maybe type" "temp"
      (900246 'move' call_tmp[900243](257747 call _cond_test call_tmp[900238]))
      if call_tmp[900243]
      {
        Forall[257716] {
          induction variables:
            
            unknown aa[257694] "index var" "insert auto destroy"
          iterated expressions:
            a[257651]
          shadow variables:
          other variables
            forall body
          {
            unknown call_tmp[900250] "maybe param" "maybe type" "temp"
            (900253 'move' call_tmp[900250](257708 call(257705 call (partial) readFE _mt[203] aa[257694])))
            unknown call_tmp[900257] "maybe param" "maybe type" "temp"
            (900260 'move' call_tmp[900257](257701 call eltType _mt[203] a[257651]))
            unknown copy[257699] "dead at end of block" "no auto destroy"
            (651393 'init var' copy[257699] call_tmp[900250] call_tmp[900257])
            (257710 'end of statement' aa[257694])
            (257711 '=' aa[257694] copy[257699])
            (563965 'end of statement' aa[257694] copy[257699])
          }
        }
      }
      {
        Forall[257738] {
          induction variables:
            
            unknown aa[257720] "index var" "insert auto destroy"
          iterated expressions:
            a[257651]
          shadow variables:
          other variables
            forall body
          {
            unknown call_tmp[900264] "maybe param" "maybe type" "temp"
            (900267 'move' call_tmp[900264](257727 call eltType _mt[203] a[257651]))
            unknown copy[257725] "dead at end of block" "no auto destroy"
            (651395 'init var' copy[257725] aa[257720] call_tmp[900264])
            (257732 'end of statement' aa[257720])
            (257733 '=' aa[257720] copy[257725])
            (563969 'end of statement' aa[257720] copy[257725])
          }
        }
      }
    }
    (625227 return _void[46])
  }
  function fixRuntimeType[257764](arg eltType[257766]:_any[141](?), ref arg elt[257768]:_any[141](?)) : _unknown[42] "private" "no return value for void"
  {
    unknown runtimeTypesDiffer[257772] "dead at end of block" "insert auto destroy"
    (651397 'init var' runtimeTypesDiffer[257772] 0)
    (257775 'end of statement')
    unknown tmp[501378] "maybe param" "temp"
    (501389 'move' tmp[501378](395526 'is_subtype' _array[255540](?) eltType[257766]))
    unknown call_tmp[900269] "expr temp" "maybe param" "maybe type" "temp"
    (900272 'move' call_tmp[900269](501391 call _cond_invalid tmp[501378]))
    if call_tmp[900269]
    {
      (501394 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[701328] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[701329] "maybe param" "temp"
    unknown call_tmp[900274] "expr temp" "maybe param" "maybe type" "temp"
    (900277 'move' call_tmp[900274](501379 call isTrue tmp[501378]))
    (701334 'move' tmp[701329](701332 call _cond_test call_tmp[900274]))
    if tmp[701329]
    {
      (701339 'move' tmp[701328](701336 '_paramFoldLogical' tmp[701329] 1))
    }
    {
      unknown tmp[701341] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[900279] "expr temp" "maybe param" "maybe type" "temp"
      (900282 'move' call_tmp[900279](395527 'is_subtype' _domain[225034](?) eltType[257766]))
      (701343 'move' tmp[701341](501383 call isTrue call_tmp[900279]))
      (701348 'move' tmp[701328](701345 '_paramFoldLogical' tmp[701329] tmp[701341]))
    }
    unknown call_tmp[900284] "expr temp" "maybe param" "maybe type" "temp"
    (900287 'move' call_tmp[900284](257891 call _cond_test tmp[701328]))
    if call_tmp[900284]
    {
      unknown call_tmp[900289] "expr temp" "maybe param" "maybe type" "temp"
      (900292 'move' call_tmp[900289](395528 'is_subtype' _array[255540](?) eltType[257766]))
      unknown call_tmp[900294] "expr temp" "maybe param" "maybe type" "temp"
      (900297 'move' call_tmp[900294](257816 call _cond_test call_tmp[900289]))
      if call_tmp[900294]
      {
        const lhsDomain[257779] "dead at end of block" "const" "ref var"
        (651402 'init ref decl' lhsDomain[257779])
        unknown call_tmp[900299] "expr temp" "maybe param" "maybe type" "temp"
        (900302 'move' call_tmp[900299](257781 call chpl__domainFromArrayRuntimeType eltType[257766]))
        (651400 'move' lhsDomain[257779](651399 'addr of' call_tmp[900299]))
        (257784 'end of statement')
        const rhsDomain[257786] "dead at end of block" "const" "ref var"
        (651407 'init ref decl' rhsDomain[257786])
        unknown call_tmp[900306] "expr temp" "maybe param" "maybe type" "temp"
        (900309 'move' call_tmp[900306](257788 call _dom _mt[203] elt[257768]))
        (651405 'move' rhsDomain[257786](651404 'addr of' call_tmp[900306]))
        (257792 'end of statement')
        unknown call_tmp[900313] "expr temp" "maybe param" "maybe type" "temp"
        (900316 'move' call_tmp[900313](257801 call _instance _mt[203] lhsDomain[257779]))
        unknown call_tmp[900320] "expr temp" "maybe param" "maybe type" "temp"
        (900323 'move' call_tmp[900320](257805 call _instance _mt[203] rhsDomain[257786]))
        unknown call_tmp[900325] "expr temp" "maybe param" "maybe type" "temp"
        (900328 'move' call_tmp[900325](257798 call != call_tmp[900313] call_tmp[900320]))
        unknown call_tmp[900330] "expr temp" "maybe param" "maybe type" "temp"
        (900333 'move' call_tmp[900330](257808 call _cond_test call_tmp[900325]))
        if call_tmp[900330]
        {
          (257794 call = runtimeTypesDiffer[257772] 1)
          (563973 'end of statement' runtimeTypesDiffer[257772])
        }
      }
      unknown call_tmp[900335] "expr temp" "maybe param" "maybe type" "temp"
      (900338 'move' call_tmp[900335](395529 'is_subtype' _domain[225034](?) eltType[257766]))
      unknown call_tmp[900340] "expr temp" "maybe param" "maybe type" "temp"
      (900343 'move' call_tmp[900340](257859 call _cond_test call_tmp[900335]))
      if call_tmp[900340]
      {
        const lhsDist[257822] "dead at end of block" "const" "ref var"
        (651412 'init ref decl' lhsDist[257822])
        unknown call_tmp[900345] "expr temp" "maybe param" "maybe type" "temp"
        (900348 'move' call_tmp[900345](257824 call chpl__distributionFromDomainRuntimeType eltType[257766]))
        (651410 'move' lhsDist[257822](651409 'addr of' call_tmp[900345]))
        (257827 'end of statement')
        const rhsDist[257829] "dead at end of block" "const" "ref var"
        (651417 'init ref decl' rhsDist[257829])
        unknown call_tmp[900352] "expr temp" "maybe param" "maybe type" "temp"
        (900355 'move' call_tmp[900352](257831 call distribution _mt[203] elt[257768]))
        (651415 'move' rhsDist[257829](651414 'addr of' call_tmp[900352]))
        (257835 'end of statement')
        unknown call_tmp[900359] "expr temp" "maybe param" "maybe type" "temp"
        (900362 'move' call_tmp[900359](257844 call _instance _mt[203] lhsDist[257822]))
        unknown call_tmp[900366] "expr temp" "maybe param" "maybe type" "temp"
        (900369 'move' call_tmp[900366](257848 call _instance _mt[203] rhsDist[257829]))
        unknown call_tmp[900371] "expr temp" "maybe param" "maybe type" "temp"
        (900374 'move' call_tmp[900371](257841 call != call_tmp[900359] call_tmp[900366]))
        unknown call_tmp[900376] "expr temp" "maybe param" "maybe type" "temp"
        (900379 'move' call_tmp[900376](257851 call _cond_test call_tmp[900371]))
        if call_tmp[900376]
        {
          (257837 call = runtimeTypesDiffer[257772] 1)
          (563975 'end of statement' runtimeTypesDiffer[257772])
        }
      }
      unknown call_tmp[900381] "expr temp" "maybe param" "maybe type" "temp"
      (900384 'move' call_tmp[900381](257877 call _cond_test runtimeTypesDiffer[257772]))
      if call_tmp[900381]
      {
        unknown copy[257865] "dead at end of block" "no auto destroy"
        (651419 'init var' copy[257865] elt[257768] eltType[257766])
        (257869 'end of statement')
        (257871 call chpl__autoDestroy elt[257768])
        (563977 'end of statement')
        (257873 '=' elt[257768] copy[257865])
        (563978 'end of statement' copy[257865])
      }
    }
    (625229 return _void[46])
  }
  function fixEltRuntimeTypesAfterTransfer[257897](ref arg a[257902]:_array[255540](?)) : _unknown[42] "private" "no return value for void"
  {
    unknown call_tmp[900388] "expr temp" "maybe param" "maybe type" "temp"
    (900391 'move' call_tmp[900388](257959 call eltType _mt[203] a[257902]))
    unknown call_tmp[900393] "expr temp" "maybe param" "maybe type" "temp"
    (900396 'move' call_tmp[900393](257957 call needsInitWorkaround call_tmp[900388]))
    unknown call_tmp[900398] "expr temp" "maybe param" "maybe type" "temp"
    (900401 'move' call_tmp[900398](257962 call _cond_test call_tmp[900393]))
    if call_tmp[900398]
    {
      unknown call_tmp[900405] "expr temp" "maybe param" "maybe type" "temp"
      (900408 'move' call_tmp[900405](470126 call _dom _mt[203] a[257902]))
      unknown call_tmp[900410] "maybe param" "maybe type" "temp"
      (900413 'move' call_tmp[900410](470122 call chpl__staticAutoLocalCheck a[257902] call_tmp[900405]))
      unknown chpl__staticAutoLocalCheckSym[470121] "dead at end of block" "param" "temp"
      (651421 'init var' chpl__staticAutoLocalCheckSym[470121] call_tmp[900410])
      if chpl__staticAutoLocalCheckSym[470121]
      {
        unknown call_tmp[900417] "expr temp" "maybe param" "maybe type" "temp"
        (900420 'move' call_tmp[900417](257910 call _dom _mt[203] a[257902]))
        Forall[257936] {
          induction variables:
            
            unknown ai[257907] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[900417]
          shadow variables:
            a[257915] 'ref' intent outer var a[257902]
              init block
              {
              }
              deinit block
              {
              }
          other variables
            forall body
          {
            unknown aa[257921] "dead at end of block" "ref var"
            (651426 'init ref decl' aa[257921])
            unknown call_tmp[900422] "expr temp" "maybe param" "maybe type" "temp"
            (900425 'move' call_tmp[900422](470132 'may be local access' a[257902] ai[257907] chpl__staticAutoLocalCheckSym[470121] 1))
            (651424 'move' aa[257921](651423 'addr of' call_tmp[900422]))
            (257926 'end of statement' ai[257907])
            unknown call_tmp[900429] "expr temp" "maybe param" "maybe type" "temp"
            (900432 'move' call_tmp[900429](257930 call eltType _mt[203] a[257915]))
            (257928 call fixRuntimeType call_tmp[900429] aa[257921])
            (563981 'end of statement' a[257915] aa[257921])
          }
        }
      }
      {
        unknown call_tmp[900436] "expr temp" "maybe param" "maybe type" "temp"
        (900439 'move' call_tmp[900436](470111 call _dom _mt[203] a[257902]))
        Forall[470107] {
          induction variables:
            
            unknown ai[470108] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[900436]
          shadow variables:
            a[470115] 'ref' intent outer var a[257902]
              init block
              {
              }
              deinit block
              {
              }
          other variables
            forall body
          {
            unknown aa[470094] "dead at end of block" "ref var"
            (651431 'init ref decl' aa[470094])
            unknown call_tmp[900441] "expr temp" "maybe param" "maybe type" "temp"
            (900444 'move' call_tmp[900441](470096 call a[470115] ai[470108]))
            (651429 'move' aa[470094](651428 'addr of' call_tmp[900441]))
            (470099 'end of statement' a[470115] ai[470108])
            unknown call_tmp[900448] "expr temp" "maybe param" "maybe type" "temp"
            (900451 'move' call_tmp[900448](470103 call eltType _mt[203] a[470115]))
            (470101 call fixRuntimeType call_tmp[900448] aa[470094])
            (563986 'end of statement' a[470115] aa[470094])
          }
        }
      }
    }
    {
      Forall[257953] {
        induction variables:
          
          unknown aa[257940] "index var" "insert auto destroy"
        iterated expressions:
          a[257902]
        shadow variables:
        other variables
          forall body
        {
          unknown call_tmp[900455] "expr temp" "maybe param" "maybe type" "temp"
          (900458 'move' call_tmp[900455](257947 call eltType _mt[203] a[257902]))
          (257945 call fixRuntimeType call_tmp[900455] aa[257940])
          (563989 'end of statement' aa[257940])
        }
      }
    }
    (625231 return _void[46])
  }
  function chpl__uncheckedArrayTransfer[257968](ref arg a[257970]:_any[141](?), arg b[257972]:_any[141](?), param arg kind[257974]:_any[141](?)) : _unknown[42] "inline" "find user line" "no return value for void"
  {
    unknown call_tmp[900460] "expr temp" "maybe param" "maybe type" "temp"
    (900463 'move' call_tmp[900460](258075 call chpl__serializeAssignment a[257970] b[257972]))
    unknown call_tmp[900465] "expr temp" "maybe param" "maybe type" "temp"
    (900468 'move' call_tmp[900465](258078 call _cond_test call_tmp[900460]))
    if call_tmp[900465]
    {
      (257982 call chpl__transferArray a[257970] b[257972] kind[257974])
    }
    {
      unknown tmp[501399] "maybe param" "temp"
      (501410 'move' tmp[501399](258062 call chpl__staticCheckShortArrayTransfer a[257970] b[257972]))
      unknown call_tmp[900470] "expr temp" "maybe param" "maybe type" "temp"
      (900473 'move' call_tmp[900470](501412 call _cond_invalid tmp[501399]))
      if call_tmp[900470]
      {
        (501415 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[701355] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[701356] "maybe param" "temp"
      unknown call_tmp[900475] "expr temp" "maybe param" "maybe type" "temp"
      (900478 'move' call_tmp[900475](501400 call isTrue tmp[501399]))
      (701361 'move' tmp[701356](701359 call _cond_test call_tmp[900475]))
      if tmp[701356]
      {
        unknown tmp[701363] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[900480] "expr temp" "maybe param" "maybe type" "temp"
        (900483 'move' call_tmp[900480](258066 call chpl__dynamicCheckShortArrayTransfer a[257970] b[257972]))
        (701365 'move' tmp[701363](501403 call isTrue call_tmp[900480]))
        (701370 'move' tmp[701355](701367 '_paramFoldLogical' tmp[701356] tmp[701363]))
      }
      {
        (701375 'move' tmp[701355](701372 '_paramFoldLogical' tmp[701356] 0))
      }
      unknown call_tmp[900485] "expr temp" "maybe param" "maybe type" "temp"
      (900488 'move' call_tmp[900485](258069 call _cond_test tmp[701355]))
      if call_tmp[900485]
      {
        (257988 call chpl__transferArray a[257970] b[257972] kind[257974](alwaysSerialize = 1))
      }
      {
        unknown call_tmp[900490] "expr temp" "maybe param" "maybe type" "temp"
        (900493 'move' call_tmp[900490](258050 call chpl__compatibleForBulkTransfer a[257970] b[257972] kind[257974]))
        unknown call_tmp[900495] "expr temp" "maybe param" "maybe type" "temp"
        (900498 'move' call_tmp[900495](258054 call _cond_test call_tmp[900490]))
        if call_tmp[900495]
        {
          unknown call_tmp[900500] "expr temp" "maybe param" "maybe type" "temp"
          (900503 'move' call_tmp[900500](258007 call chpl__bulkTransferArray a[257970] b[257972]))
          unknown call_tmp[900505] "expr temp" "maybe param" "maybe type" "temp"
          (900508 'move' call_tmp[900505](258010 call _cond_test call_tmp[900500]))
          if call_tmp[900505]
          {
            (257997 call chpl__initAfterBulkTransfer a[257970] kind[257974])
          }
          {
            (258002 call chpl__transferArray a[257970] b[257972] kind[257974])
          }
        }
        {
          unknown call_tmp[900510] "expr temp" "maybe param" "maybe type" "temp"
          (900513 'move' call_tmp[900510](258041 call chpl__compatibleForWidePtrBulkTransfer a[257970] b[257972] kind[257974]))
          unknown call_tmp[900515] "expr temp" "maybe param" "maybe type" "temp"
          (900518 'move' call_tmp[900515](258045 call _cond_test call_tmp[900510]))
          if call_tmp[900515]
          {
            unknown call_tmp[900520] "expr temp" "maybe param" "maybe type" "temp"
            (900523 'move' call_tmp[900520](258027 call chpl__bulkTransferPtrArray a[257970] b[257972]))
            unknown call_tmp[900525] "expr temp" "maybe param" "maybe type" "temp"
            (900528 'move' call_tmp[900525](258030 call _cond_test call_tmp[900520]))
            if call_tmp[900525]
            {
              (258017 call chpl__initAfterBulkTransfer a[257970] kind[257974])
            }
            {
              (258022 call chpl__transferArray a[257970] b[257972] kind[257974])
            }
          }
          {
            (258036 call chpl__transferArray a[257970] b[257972] kind[257974])
          }
        }
      }
    }
    (625233 return _void[46])
    (396910 'used modules list'(257978 'use' ChapelShortArrayTransfer[247436]))
  }
  function chpl__initAfterBulkTransfer[258085](ref arg a[258087]:_any[141](?), param arg kind[258089]:_any[141](?)) : _unknown[42] "inline" "no return value for void"
  {
    unknown tmp[501462] "maybe param" "temp"
    (501473 'move' tmp[501462](258131 call == kind[258089] initCopy[257615]))
    unknown call_tmp[900530] "expr temp" "maybe param" "maybe type" "temp"
    (900533 'move' call_tmp[900530](501475 call _cond_invalid tmp[501462]))
    if call_tmp[900530]
    {
      (501478 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[701382] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[701383] "maybe param" "temp"
    unknown call_tmp[900535] "expr temp" "maybe param" "maybe type" "temp"
    (900538 'move' call_tmp[900535](501463 call isTrue tmp[501462]))
    (701388 'move' tmp[701383](701386 call _cond_test call_tmp[900535]))
    if tmp[701383]
    {
      unknown tmp[701390] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[900542] "expr temp" "maybe param" "maybe type" "temp"
      (900545 'move' call_tmp[900542](258143 call eltType _mt[203] a[258087]))
      unknown call_tmp[900547] "expr temp" "maybe param" "maybe type" "temp"
      (900550 'move' call_tmp[900547](258141 call isPODType call_tmp[900542]))
      unknown call_tmp[900552] "expr temp" "maybe param" "maybe type" "temp"
      (900555 'move' call_tmp[900552](258138 call ! call_tmp[900547]))
      (701392 'move' tmp[701390](501466 call isTrue call_tmp[900552]))
      (701397 'move' tmp[701382](701394 '_paramFoldLogical' tmp[701383] tmp[701390]))
    }
    {
      (701402 'move' tmp[701382](701399 '_paramFoldLogical' tmp[701383] 0))
    }
    unknown call_tmp[900557] "expr temp" "maybe param" "maybe type" "temp"
    (900560 'move' call_tmp[900557](258146 call _cond_test tmp[701382]))
    if call_tmp[900557]
    {
      (258094 call initCopyAfterTransfer a[258087])
    }
    {
      unknown tmp[501420] "maybe param" "temp"
      (501431 'move' tmp[501420](258102 call == kind[258089] move[257613]))
      unknown call_tmp[900562] "expr temp" "maybe param" "maybe type" "temp"
      (900565 'move' call_tmp[900562](501433 call _cond_invalid tmp[501420]))
      if call_tmp[900562]
      {
        (501436 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[701436] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[701437] "maybe param" "temp"
      unknown call_tmp[900567] "expr temp" "maybe param" "maybe type" "temp"
      (900570 'move' call_tmp[900567](501421 call isTrue tmp[501420]))
      (701442 'move' tmp[701437](701440 call _cond_test call_tmp[900567]))
      if tmp[701437]
      {
        unknown tmp[501441] "maybe param" "temp"
        unknown call_tmp[900574] "expr temp" "maybe param" "maybe type" "temp"
        (900577 'move' call_tmp[900574](258114 call eltType _mt[203] a[258087]))
        (501452 'move' tmp[501441](395530 'is_subtype' _array[255540](?) call_tmp[900574]))
        unknown call_tmp[900579] "expr temp" "maybe param" "maybe type" "temp"
        (900582 'move' call_tmp[900579](501454 call _cond_invalid tmp[501441]))
        if call_tmp[900579]
        {
          (501457 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[701409] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[701410] "maybe param" "temp"
        unknown call_tmp[900584] "expr temp" "maybe param" "maybe type" "temp"
        (900587 'move' call_tmp[900584](501442 call isTrue tmp[501441]))
        (701415 'move' tmp[701410](701413 call _cond_test call_tmp[900584]))
        if tmp[701410]
        {
          (701420 'move' tmp[701409](701417 '_paramFoldLogical' tmp[701410] 1))
        }
        {
          unknown tmp[701422] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[900591] "expr temp" "maybe param" "maybe type" "temp"
          (900594 'move' call_tmp[900591](258121 call eltType _mt[203] a[258087]))
          unknown call_tmp[900596] "expr temp" "maybe param" "maybe type" "temp"
          (900599 'move' call_tmp[900596](395531 'is_subtype' _domain[225034](?) call_tmp[900591]))
          (701424 'move' tmp[701422](501446 call isTrue call_tmp[900596]))
          (701429 'move' tmp[701409](701426 '_paramFoldLogical' tmp[701410] tmp[701422]))
        }
        unknown tmp[701444] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (701446 'move' tmp[701444](501424 call isTrue tmp[701409]))
        (701451 'move' tmp[701436](701448 '_paramFoldLogical' tmp[701437] tmp[701444]))
      }
      {
        (701456 'move' tmp[701436](701453 '_paramFoldLogical' tmp[701437] 0))
      }
      unknown call_tmp[900601] "expr temp" "maybe param" "maybe type" "temp"
      (900604 'move' call_tmp[900601](258125 call _cond_test tmp[701436]))
      if call_tmp[900601]
      {
        (258098 call fixEltRuntimeTypesAfterTransfer a[258087])
      }
    }
    (625235 return _void[46])
  }
  function chpl__compatibleForWidePtrBulkTransfer[258153](arg a[258155]:_any[141](?), arg b[258157]:_any[141](?), param arg kind[258163] :
  assign[257617] =
  assign[257617]) param : _unknown[42]
  {
    unknown ret[625239] "RVV" "param" "temp"
    unknown call_tmp[900606] "expr temp" "maybe param" "maybe type" "temp"
    (900609 'move' call_tmp[900606](258170 call ! useBulkPtrTransfer[247511]))
    unknown call_tmp[900611] "expr temp" "maybe param" "maybe type" "temp"
    (900614 'move' call_tmp[900611](258173 call _cond_test call_tmp[900606]))
    if call_tmp[900611]
    {
      (625244 'move' ret[625239](625243 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[625237] _end_chpl__compatibleForWidePtrBulkTransfer[625237]
    }
    unknown tmp[501483] "maybe param" "temp"
    unknown call_tmp[900618] "expr temp" "maybe param" "maybe type" "temp"
    (900621 'move' call_tmp[900618](258186 call _value _mt[203] a[258155]))
    (501494 'move' tmp[501483](258192 call(258189 call (partial) isDefaultRectangular _mt[203] call_tmp[900618])))
    unknown call_tmp[900625] "expr temp" "maybe param" "maybe type" "temp"
    (900628 'move' call_tmp[900625](501496 call _cond_invalid tmp[501483]))
    if call_tmp[900625]
    {
      (501499 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[701463] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[701464] "maybe param" "temp"
    unknown call_tmp[900630] "expr temp" "maybe param" "maybe type" "temp"
    (900633 'move' call_tmp[900630](501484 call isTrue tmp[501483]))
    (701469 'move' tmp[701464](701467 call _cond_test call_tmp[900630]))
    if tmp[701464]
    {
      unknown tmp[701471] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[900637] "expr temp" "maybe param" "maybe type" "temp"
      (900640 'move' call_tmp[900637](258194 call _value _mt[203] b[258157]))
      unknown call_tmp[900644] "expr temp" "maybe param" "maybe type" "temp"
      (900647 'move' call_tmp[900644](258200 call(258197 call (partial) isDefaultRectangular _mt[203] call_tmp[900637])))
      (701473 'move' tmp[701471](501487 call isTrue call_tmp[900644]))
      (701478 'move' tmp[701463](701475 '_paramFoldLogical' tmp[701464] tmp[701471]))
    }
    {
      (701483 'move' tmp[701463](701480 '_paramFoldLogical' tmp[701464] 0))
    }
    unknown call_tmp[900649] "expr temp" "maybe param" "maybe type" "temp"
    (900652 'move' call_tmp[900649](258181 call ! tmp[701463]))
    unknown call_tmp[900654] "expr temp" "maybe param" "maybe type" "temp"
    (900657 'move' call_tmp[900654](258201 call _cond_test call_tmp[900649]))
    if call_tmp[900654]
    {
      (625249 'move' ret[625239](625248 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[625237] _end_chpl__compatibleForWidePtrBulkTransfer[625237]
    }
    unknown call_tmp[900661] "expr temp" "maybe param" "maybe type" "temp"
    (900664 'move' call_tmp[900661](258212 call eltType _mt[203] a[258155]))
    unknown call_tmp[900668] "expr temp" "maybe param" "maybe type" "temp"
    (900671 'move' call_tmp[900668](258216 call eltType _mt[203] b[258157]))
    unknown call_tmp[900673] "expr temp" "maybe param" "maybe type" "temp"
    (900676 'move' call_tmp[900673](258209 call != call_tmp[900661] call_tmp[900668]))
    unknown call_tmp[900678] "expr temp" "maybe param" "maybe type" "temp"
    (900681 'move' call_tmp[900678](258219 call _cond_test call_tmp[900673]))
    if call_tmp[900678]
    {
      (625254 'move' ret[625239](625253 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[625237] _end_chpl__compatibleForWidePtrBulkTransfer[625237]
    }
    unknown call_tmp[900685] "expr temp" "maybe param" "maybe type" "temp"
    (900688 'move' call_tmp[900685](258232 call eltType _mt[203] a[258155]))
    unknown call_tmp[900690] "expr temp" "maybe param" "maybe type" "temp"
    (900693 'move' call_tmp[900690](258230 call isClass call_tmp[900685]))
    unknown call_tmp[900695] "expr temp" "maybe param" "maybe type" "temp"
    (900698 'move' call_tmp[900695](258227 call ! call_tmp[900690]))
    unknown call_tmp[900700] "expr temp" "maybe param" "maybe type" "temp"
    (900703 'move' call_tmp[900700](258235 call _cond_test call_tmp[900695]))
    if call_tmp[900700]
    {
      (625259 'move' ret[625239](625258 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[625237] _end_chpl__compatibleForWidePtrBulkTransfer[625237]
    }
    unknown call_tmp[900707] "expr temp" "maybe param" "maybe type" "temp"
    (900710 'move' call_tmp[900707](258246 call eltType _mt[203] a[258155]))
    unknown call_tmp[900712] "expr temp" "maybe param" "maybe type" "temp"
    (900715 'move' call_tmp[900712](258244 call isOwnedClass call_tmp[900707]))
    unknown call_tmp[900717] "expr temp" "maybe param" "maybe type" "temp"
    (900720 'move' call_tmp[900717](258249 call _cond_test call_tmp[900712]))
    if call_tmp[900717]
    {
      (625264 'move' ret[625239](625263 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[625237] _end_chpl__compatibleForWidePtrBulkTransfer[625237]
    }
    unknown call_tmp[900724] "expr temp" "maybe param" "maybe type" "temp"
    (900727 'move' call_tmp[900724](258260 call eltType _mt[203] a[258155]))
    unknown call_tmp[900729] "expr temp" "maybe param" "maybe type" "temp"
    (900732 'move' call_tmp[900729](258258 call isSharedClass call_tmp[900724]))
    unknown call_tmp[900734] "expr temp" "maybe param" "maybe type" "temp"
    (900737 'move' call_tmp[900734](258263 call _cond_test call_tmp[900729]))
    if call_tmp[900734]
    {
      (625269 'move' ret[625239](625268 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[625237] _end_chpl__compatibleForWidePtrBulkTransfer[625237]
    }
    (625274 'move' ret[625239](625273 'deref' 1))
    label _end_chpl__compatibleForWidePtrBulkTransfer[625237]
    (625241 return ret[625239])
  }
  function chpl__bulkTransferPtrArray[258272](ref arg a[258277]:_array[255540](?), arg b[258283]:_array[255540](?)) : _unknown[42] "inline"
  {
    unknown ret[625278] "RVV" "temp"
    unknown call_tmp[900741] "maybe param" "maybe type" "temp"
    (900744 'move' call_tmp[900741](258290 call _dom _mt[203] a[258277]))
    const aDom[258288] "dead at end of block" "const" "insert auto destroy"
    (651433 'init var' aDom[258288] call_tmp[900741])
    (258294 'end of statement')
    unknown call_tmp[900748] "maybe param" "maybe type" "temp"
    (900751 'move' call_tmp[900748](258298 call _dom _mt[203] b[258283]))
    const bDom[258296] "dead at end of block" "const" "insert auto destroy"
    (651435 'init var' bDom[258296] call_tmp[900748])
    (258302 'end of statement')
    unknown call_tmp[900753] "expr temp" "maybe param" "maybe type" "temp"
    (900756 'move' call_tmp[900753](258306 call != aDom[258288] bDom[258296]))
    unknown call_tmp[900758] "expr temp" "maybe param" "maybe type" "temp"
    (900761 'move' call_tmp[900758](258310 call _cond_test call_tmp[900753]))
    if call_tmp[900758]
    {
      (625283 'move' ret[625278](625282 'deref' 0))
      gotoReturn _end_chpl__bulkTransferPtrArray[625276] _end_chpl__bulkTransferPtrArray[625276]
    }
    unknown call_tmp[900765] "expr temp" "maybe param" "maybe type" "temp"
    (900768 'move' call_tmp[900765](258327 call low _mt[203] aDom[258288]))
    unknown call_tmp[900770] "expr temp" "maybe param" "maybe type" "temp"
    (900773 'move' call_tmp[900770](258325 call a[258277] call_tmp[900765]))
    unknown call_tmp[900775] "expr temp" "maybe param" "maybe type" "temp"
    (900778 'move' call_tmp[900775](258323 'is wide pointer' call_tmp[900770]))
    unknown call_tmp[900780] "expr temp" "maybe param" "maybe type" "temp"
    (900783 'move' call_tmp[900780](258330 call _cond_test call_tmp[900775]))
    if call_tmp[900780]
    {
      unknown call_tmp[900785] "expr temp" "maybe param" "maybe type" "temp"
      (900788 'move' call_tmp[900785](258318 call chpl__bulkTransferArray a[258277] aDom[258288] b[258283] bDom[258296]))
      (625288 'move' ret[625278](625287 'deref' call_tmp[900785]))
      gotoReturn _end_chpl__bulkTransferPtrArray[625276] _end_chpl__bulkTransferPtrArray[625276]
      (564012 'end of statement' aDom[258288] bDom[258296])
    }
    (625293 'move' ret[625278](625292 'deref' 0))
    label _end_chpl__bulkTransferPtrArray[625276]
    (625280 return ret[625278])
  }
  function chpl__bulkTransferArray[258338](ref arg a[258344]:_array[255540](?), arg b[258351]:_array[255540](?)) : _unknown[42] "inline"
  {
    unknown ret[625297] "RVV" "temp"
    const-ref _chpl__domain_expr_BD[531983] "dead at end of block" "const" "ref var" "temp"
    (531992 'init ref decl' _chpl__domain_expr_BD[531983])
    (564016 'end of statement')
    unknown call_tmp[900792] "expr temp" "maybe param" "maybe type" "temp"
    (900795 'move' call_tmp[900792](531984 call _dom _mt[203] b[258351]))
    (531990 'move' _chpl__domain_expr_BD[531983](531989 'addr of' call_tmp[900792]))
    const-ref _chpl__domain_expr_AD[531969] "dead at end of block" "const" "ref var" "temp"
    (531978 'init ref decl' _chpl__domain_expr_AD[531969])
    (564017 'end of statement')
    unknown call_tmp[900799] "expr temp" "maybe param" "maybe type" "temp"
    (900802 'move' call_tmp[900799](531970 call _dom _mt[203] a[258344]))
    (531976 'move' _chpl__domain_expr_AD[531969](531975 'addr of' call_tmp[900799]))
    unknown call_tmp[900804] "expr temp" "maybe param" "maybe type" "temp"
    (900807 'move' call_tmp[900804](258357 call chpl__bulkTransferArray a[258344] _chpl__domain_expr_AD[531969] b[258351] _chpl__domain_expr_BD[531983]))
    (625302 'move' ret[625297](625301 'deref' call_tmp[900804]))
    (625299 return ret[625297])
  }
  function chpl__bulkTransferArray[258364](ref arg a[258367]:chpl__protoSlice[148800](?), arg b[258371]:chpl__protoSlice[148800](?)) : _unknown[42] "inline"
  {
    unknown ret[625306] "RVV" "temp"
    unknown call_tmp[900809] "expr temp" "maybe param" "maybe type" "temp"
    (900812 'move' call_tmp[900809](258382 call _cond_test debugBulkTransfer[247496]))
    if call_tmp[900809]
    {
      (258377 call chpl_debug_writeln "Performing protoSlice bulk transfer")
    }
    unknown call_tmp[900816] "expr temp" "maybe param" "maybe type" "temp"
    (900819 'move' call_tmp[900816](258390 call ptrToArr _mt[203] a[258367]))
    unknown call_tmp[900823] "expr temp" "maybe param" "maybe type" "temp"
    (900826 'move' call_tmp[900823](258396 call(258393 call (partial) deref _mt[203] call_tmp[900816])))
    unknown call_tmp[900830] "expr temp" "maybe param" "maybe type" "temp"
    (900833 'move' call_tmp[900830](258400 call domOrRange _mt[203] a[258367]))
    unknown call_tmp[900837] "expr temp" "maybe param" "maybe type" "temp"
    (900840 'move' call_tmp[900837](258404 call ptrToArr _mt[203] b[258371]))
    unknown call_tmp[900844] "expr temp" "maybe param" "maybe type" "temp"
    (900847 'move' call_tmp[900844](258410 call(258407 call (partial) deref _mt[203] call_tmp[900837])))
    unknown call_tmp[900851] "expr temp" "maybe param" "maybe type" "temp"
    (900854 'move' call_tmp[900851](258412 call domOrRange _mt[203] b[258371]))
    unknown call_tmp[900856] "expr temp" "maybe param" "maybe type" "temp"
    (900859 'move' call_tmp[900856](258388 call chpl__bulkTransferArray call_tmp[900823] call_tmp[900830] call_tmp[900844] call_tmp[900851]))
    (625311 'move' ret[625306](625310 'deref' call_tmp[900856]))
    (625308 return ret[625306])
  }
  function chpl__bulkTransferArray[258417](ref arg a[258422]:_array[255540](?), arg AD[258425]:_any[141](?), const  ref arg b[258430]:_array[255540](?), arg BD[258433]:_any[141](?)) : _unknown[42] "inline"
  {
    unknown ret[625315] "RVV" "temp"
    unknown call_tmp[900863] "expr temp" "maybe param" "maybe type" "temp"
    (900866 'move' call_tmp[900863](258440 call _value _mt[203] a[258422]))
    unknown call_tmp[900870] "expr temp" "maybe param" "maybe type" "temp"
    (900873 'move' call_tmp[900870](258445 call _value _mt[203] b[258430]))
    unknown call_tmp[900875] "expr temp" "maybe param" "maybe type" "temp"
    (900878 'move' call_tmp[900875](258438 call chpl__bulkTransferArray call_tmp[900863] AD[258425] call_tmp[900870] BD[258433]))
    (625320 'move' ret[625315](625319 'deref' call_tmp[900875]))
    (625317 return ret[625315])
  }
  function chpl__bulkTransferArray[258451](arg destClass[258453]:_any[141](?), arg destView[258455]:_any[141](?), arg srcClass[258457]:_any[141](?), arg srcView[258459]:_any[141](?)) : _unknown[42] "inline"
  {
    unknown ret[625326] "RVV" "temp"
    unknown success[258463] "dead at end of block" "insert auto destroy"
    (651437 'init var' success[258463] 0)
    (258466 'end of statement')
    function bulkTransferDebug[258467](arg msg[258470]:string[244]) : _unknown[42] "inline" "no return value for void"
    {
      unknown call_tmp[900880] "expr temp" "maybe param" "maybe type" "temp"
      (900883 'move' call_tmp[900880](258482 call _cond_test debugBulkTransfer[247496]))
      if call_tmp[900880]
      {
        (258475 call chpl_debug_writeln "operator =(a:[],b:[]): " msg[258470])
      }
      (625322 return _void[46])
    }
    (258490 call bulkTransferDebug "in chpl__bulkTransferArray")
    (564023 'end of statement')
    unknown call_tmp[900885] "expr temp" "maybe param" "maybe type" "temp"
    (900888 'move' call_tmp[900885](258624 call canResolveMethod module=[222] Reflection[1804] destClass[258453] "doiBulkTransferFromKnown" destView[258455] srcClass[258457] srcView[258459]))
    unknown call_tmp[900890] "expr temp" "maybe param" "maybe type" "temp"
    (900893 'move' call_tmp[900890](258632 call _cond_test call_tmp[900885]))
    if call_tmp[900890]
    {
      (258496 call bulkTransferDebug "attempting doiBulkTransferFromKnown")
      (564024 'end of statement')
      unknown call_tmp[900897] "expr temp" "maybe param" "maybe type" "temp"
      (900900 'move' call_tmp[900897](258509 call(258506 call (partial) doiBulkTransferFromKnown _mt[203] destClass[258453]) destView[258455] srcClass[258457] srcView[258459]))
      (258500 call = success[258463] call_tmp[900897])
      (564025 'end of statement' success[258463])
    }
    {
      unknown call_tmp[900902] "expr temp" "maybe param" "maybe type" "temp"
      (900905 'move' call_tmp[900902](258607 call canResolveMethod module=[222] Reflection[1804] srcClass[258457] "doiBulkTransferToKnown" srcView[258459] destClass[258453] destView[258455]))
      unknown call_tmp[900907] "expr temp" "maybe param" "maybe type" "temp"
      (900910 'move' call_tmp[900907](258615 call _cond_test call_tmp[900902]))
      if call_tmp[900907]
      {
        (258515 call bulkTransferDebug "attempting doiBulkTransferToKnown")
        (564027 'end of statement')
        unknown call_tmp[900914] "expr temp" "maybe param" "maybe type" "temp"
        (900917 'move' call_tmp[900914](258528 call(258525 call (partial) doiBulkTransferToKnown _mt[203] srcClass[258457]) srcView[258459] destClass[258453] destView[258455]))
        (258519 call = success[258463] call_tmp[900914])
        (564028 'end of statement' success[258463])
      }
      {
        unknown call_tmp[900919] "expr temp" "maybe param" "maybe type" "temp"
        (900922 'move' call_tmp[900919](258590 call canResolveMethod module=[222] Reflection[1804] destClass[258453] "doiBulkTransferFromAny" destView[258455] srcClass[258457] srcView[258459]))
        unknown call_tmp[900924] "expr temp" "maybe param" "maybe type" "temp"
        (900927 'move' call_tmp[900924](258598 call _cond_test call_tmp[900919]))
        if call_tmp[900924]
        {
          (258534 call bulkTransferDebug "attempting doiBulkTransferFromAny")
          (564030 'end of statement')
          unknown call_tmp[900931] "expr temp" "maybe param" "maybe type" "temp"
          (900934 'move' call_tmp[900931](258547 call(258544 call (partial) doiBulkTransferFromAny _mt[203] destClass[258453]) destView[258455] srcClass[258457] srcView[258459]))
          (258538 call = success[258463] call_tmp[900931])
          (564031 'end of statement' success[258463])
        }
        {
          unknown call_tmp[900936] "expr temp" "maybe param" "maybe type" "temp"
          (900939 'move' call_tmp[900936](258574 call canResolveMethod module=[222] Reflection[1804] srcClass[258457] "doiBulkTransferToAny" srcView[258459] destClass[258453] destView[258455]))
          unknown call_tmp[900941] "expr temp" "maybe param" "maybe type" "temp"
          (900944 'move' call_tmp[900941](258582 call _cond_test call_tmp[900936]))
          if call_tmp[900941]
          {
            (258553 call bulkTransferDebug "attempting doiBulkTransferToAny")
            (564033 'end of statement')
            unknown call_tmp[900948] "expr temp" "maybe param" "maybe type" "temp"
            (900951 'move' call_tmp[900948](258566 call(258563 call (partial) doiBulkTransferToAny _mt[203] srcClass[258457]) srcView[258459] destClass[258453] destView[258455]))
            (258557 call = success[258463] call_tmp[900948])
            (564034 'end of statement' success[258463])
          }
          (408144 'referenced modules list' Reflection[1804])
        }
        (408150 'referenced modules list' Reflection[1804])
      }
      (408156 'referenced modules list' Reflection[1804])
    }
    unknown call_tmp[900953] "expr temp" "maybe param" "maybe type" "temp"
    (900956 'move' call_tmp[900953](258650 call _cond_test success[258463]))
    if call_tmp[900953]
    {
      (258638 call bulkTransferDebug "successfully completed bulk transfer")
    }
    {
      (258644 call bulkTransferDebug "bulk transfer did not happen")
    }
    (625331 'move' ret[625326](625330 'deref' success[258463]))
    gotoReturn _end_chpl__bulkTransferArray[625324] _end_chpl__bulkTransferArray[625324]
    (564038 'end of statement' success[258463])
    label _end_chpl__bulkTransferArray[625324]
    (625328 return ret[625326])
    (408162 'referenced modules list' Reflection[1804])
  }
  function chpl__transferArray[258660](ref arg a[258662]:_any[141](?), const  ref arg b[258664]:_any[141](?), param arg kind[258670] :
  assign[257617] =
  assign[257617], param arg alwaysSerialize[258674] :
  0 =
  0) : _unknown[42] "inline" "ignore transfer errors" "find user line" "no return value for void"
  {
    unknown tmp[501546] "maybe param" "temp"
    unknown call_tmp[900960] "expr temp" "maybe param" "maybe type" "temp"
    (900963 'move' call_tmp[900960](259540 call eltType _mt[203] a[258662]))
    unknown call_tmp[900965] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (900968 'move' call_tmp[900965](259544 'typeof' b[258664]))
    (501557 'move' tmp[501546](259537 call == call_tmp[900960] call_tmp[900965]))
    unknown call_tmp[900970] "expr temp" "maybe param" "maybe type" "temp"
    (900973 'move' call_tmp[900970](501559 call _cond_invalid tmp[501546]))
    if call_tmp[900970]
    {
      (501562 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[701517] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[701518] "maybe param" "temp"
    unknown call_tmp[900975] "expr temp" "maybe param" "maybe type" "temp"
    (900978 'move' call_tmp[900975](501547 call isTrue tmp[501546]))
    (701523 'move' tmp[701518](701521 call _cond_test call_tmp[900975]))
    if tmp[701518]
    {
      (701528 'move' tmp[701517](701525 '_paramFoldLogical' tmp[701518] 1))
    }
    {
      unknown tmp[501567] "maybe param" "temp"
      unknown call_tmp[900982] "expr temp" "maybe param" "maybe type" "temp"
      (900985 'move' call_tmp[900982](259550 call eltType _mt[203] a[258662]))
      (501578 'move' tmp[501567](259548 call _isPrimitiveType call_tmp[900982]))
      unknown call_tmp[900987] "expr temp" "maybe param" "maybe type" "temp"
      (900990 'move' call_tmp[900987](501580 call _cond_invalid tmp[501567]))
      if call_tmp[900987]
      {
        (501583 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[701490] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[701491] "maybe param" "temp"
      unknown call_tmp[900992] "expr temp" "maybe param" "maybe type" "temp"
      (900995 'move' call_tmp[900992](501568 call isTrue tmp[501567]))
      (701496 'move' tmp[701491](701494 call _cond_test call_tmp[900992]))
      if tmp[701491]
      {
        unknown tmp[701498] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[900997] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (901000 'move' call_tmp[900997](259556 'typeof' b[258664]))
        unknown call_tmp[901002] "expr temp" "maybe param" "maybe type" "temp"
        (901005 'move' call_tmp[901002](259554 call _isPrimitiveType call_tmp[900997]))
        (701500 'move' tmp[701498](501571 call isTrue call_tmp[901002]))
        (701505 'move' tmp[701490](701502 '_paramFoldLogical' tmp[701491] tmp[701498]))
      }
      {
        (701510 'move' tmp[701490](701507 '_paramFoldLogical' tmp[701491] 0))
      }
      unknown tmp[701530] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (701532 'move' tmp[701530](501551 call isTrue tmp[701490]))
      (701537 'move' tmp[701517](701534 '_paramFoldLogical' tmp[701518] tmp[701530]))
    }
    unknown call_tmp[901007] "expr temp" "maybe param" "maybe type" "temp"
    (901010 'move' call_tmp[901007](259557 call _cond_test tmp[701517]))
    if call_tmp[901007]
    {
      unknown tmp[501504] "maybe param" "temp"
      (501515 'move' tmp[501504](258795 call == kind[258670] move[257613]))
      unknown call_tmp[901012] "expr temp" "maybe param" "maybe type" "temp"
      (901015 'move' call_tmp[901012](501517 call _cond_invalid tmp[501504]))
      if call_tmp[901012]
      {
        (501520 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[701544] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[701545] "maybe param" "temp"
      unknown call_tmp[901017] "expr temp" "maybe param" "maybe type" "temp"
      (901020 'move' call_tmp[901017](501505 call isTrue tmp[501504]))
      (701550 'move' tmp[701545](701548 call _cond_test call_tmp[901017]))
      if tmp[701545]
      {
        (701555 'move' tmp[701544](701552 '_paramFoldLogical' tmp[701545] 1))
      }
      {
        unknown tmp[701557] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[901022] "expr temp" "maybe param" "maybe type" "temp"
        (901025 'move' call_tmp[901022](258802 call == kind[258670] initCopy[257615]))
        (701559 'move' tmp[701557](501509 call isTrue call_tmp[901022]))
        (701564 'move' tmp[701544](701561 '_paramFoldLogical' tmp[701545] tmp[701557]))
      }
      unknown call_tmp[901027] "expr temp" "maybe param" "maybe type" "temp"
      (901030 'move' call_tmp[901027](258809 call _cond_test tmp[701544]))
      if call_tmp[901027]
      {
        unknown call_tmp[901034] "expr temp" "maybe param" "maybe type" "temp"
        (901037 'move' call_tmp[901034](258755 call eltType _mt[203] a[258662]))
        unknown call_tmp[901039] "expr temp" "maybe param" "maybe type" "temp"
        (901042 'move' call_tmp[901039](258753 call needsInitWorkaround call_tmp[901034]))
        unknown call_tmp[901044] "expr temp" "maybe param" "maybe type" "temp"
        (901047 'move' call_tmp[901044](258758 call _cond_test call_tmp[901039]))
        if call_tmp[901044]
        {
          unknown call_tmp[901051] "expr temp" "maybe param" "maybe type" "temp"
          (901054 'move' call_tmp[901051](470177 call _dom _mt[203] a[258662]))
          unknown call_tmp[901056] "maybe param" "maybe type" "temp"
          (901059 'move' call_tmp[901056](470173 call chpl__staticAutoLocalCheck a[258662] call_tmp[901051]))
          unknown chpl__staticAutoLocalCheckSym[470172] "dead at end of block" "param" "temp"
          (651439 'init var' chpl__staticAutoLocalCheckSym[470172] call_tmp[901056])
          if chpl__staticAutoLocalCheckSym[470172]
          {
            unknown call_tmp[901063] "expr temp" "maybe param" "maybe type" "temp"
            (901066 'move' call_tmp[901063](258690 call _dom _mt[203] a[258662]))
            Forall[258721] {
              induction variables:
                
                unknown ai[258687] "index var" "insert auto destroy"
              iterated expressions:
                call_tmp[901063]
              shadow variables:
                b[258695] 'in' intent outer var b[258664]
                  init block
                  {
                  }
                  deinit block
                  {
                  }
              other variables
                forall body
              {
                unknown aa[258701] "dead at end of block" "ref var"
                (651444 'init ref decl' aa[258701])
                unknown call_tmp[901068] "expr temp" "maybe param" "maybe type" "temp"
                (901071 'move' call_tmp[901068](470183 'may be local access' a[258662] ai[258687] chpl__staticAutoLocalCheckSym[470172] 1))
                (651442 'move' aa[258701](651441 'addr of' call_tmp[901068]))
                (258706 'end of statement')
                unknown call_tmp[901075] "maybe param" "maybe type" "temp"
                (901078 'move' call_tmp[901075](258710 call eltType _mt[203] a[258662]))
                unknown copy[258708] "dead at end of block" "no auto destroy"
                (651446 'init var' copy[258708] b[258695] call_tmp[901075])
                (258715 'end of statement' ai[258687] b[258695])
                (258716 '=' aa[258701] copy[258708])
                (564044 'end of statement' aa[258701] copy[258708])
              }
            }
          }
          {
            unknown call_tmp[901082] "expr temp" "maybe param" "maybe type" "temp"
            (901085 'move' call_tmp[901082](470162 call _dom _mt[203] a[258662]))
            Forall[470158] {
              induction variables:
                
                unknown ai[470159] "index var" "insert auto destroy"
              iterated expressions:
                call_tmp[901082]
              shadow variables:
                b[470166] 'in' intent outer var b[258664]
                  init block
                  {
                  }
                  deinit block
                  {
                  }
              other variables
                forall body
              {
                unknown aa[470141] "dead at end of block" "ref var"
                (651451 'init ref decl' aa[470141])
                unknown call_tmp[901087] "expr temp" "maybe param" "maybe type" "temp"
                (901090 'move' call_tmp[901087](470143 call a[258662] ai[470159]))
                (651449 'move' aa[470141](651448 'addr of' call_tmp[901087]))
                (470146 'end of statement')
                unknown call_tmp[901094] "maybe param" "maybe type" "temp"
                (901097 'move' call_tmp[901094](470150 call eltType _mt[203] a[258662]))
                unknown copy[470147] "dead at end of block" "no auto destroy"
                (651453 'init var' copy[470147] b[470166] call_tmp[901094])
                (470154 'end of statement' ai[470159] b[470166])
                (470155 '=' aa[470141] copy[470147])
                (564049 'end of statement' aa[470141] copy[470147])
              }
            }
          }
        }
        {
          Forall[258749] {
            induction variables:
              
              unknown aa[258725] "index var" "insert auto destroy"
            iterated expressions:
              a[258662]
            shadow variables:
              b[258730] 'in' intent outer var b[258664]
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              unknown call_tmp[901101] "maybe param" "maybe type" "temp"
              (901104 'move' call_tmp[901101](258738 call eltType _mt[203] a[258662]))
              unknown copy[258736] "dead at end of block" "no auto destroy"
              (651455 'init var' copy[258736] b[258730] call_tmp[901101])
              (258743 'end of statement' b[258730])
              (258744 '=' aa[258725] copy[258736])
              (564053 'end of statement' aa[258725] copy[258736])
            }
          }
        }
      }
      {
        unknown call_tmp[901106] "expr temp" "maybe param" "maybe type" "temp"
        (901109 'move' call_tmp[901106](258782 call == kind[258670] assign[257617]))
        unknown call_tmp[901111] "expr temp" "maybe param" "maybe type" "temp"
        (901114 'move' call_tmp[901111](258789 call _cond_test call_tmp[901106]))
        if call_tmp[901111]
        {
          Forall[258779] {
            induction variables:
              
              unknown aa[258763] "index var" "insert auto destroy"
            iterated expressions:
              a[258662]
            shadow variables:
              b[258768] 'in' intent outer var b[258664]
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              (258773 call = aa[258763] b[258768])
              (564056 'end of statement' aa[258763] b[258768])
            }
          }
        }
      }
    }
    {
      unknown tmp[501525] "maybe param" "temp"
      (501536 'move' tmp[501525] alwaysSerialize[258674])
      unknown call_tmp[901116] "expr temp" "maybe param" "maybe type" "temp"
      (901119 'move' call_tmp[901116](501538 call _cond_invalid tmp[501525]))
      if call_tmp[901116]
      {
        (501541 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[701571] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[701572] "maybe param" "temp"
      unknown call_tmp[901121] "expr temp" "maybe param" "maybe type" "temp"
      (901124 'move' call_tmp[901121](501526 call isTrue tmp[501525]))
      (701577 'move' tmp[701572](701575 call _cond_test call_tmp[901121]))
      if tmp[701572]
      {
        (701582 'move' tmp[701571](701579 '_paramFoldLogical' tmp[701572] 1))
      }
      {
        unknown tmp[701584] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[901126] "expr temp" "maybe param" "maybe type" "temp"
        (901129 'move' call_tmp[901126](259528 call chpl__serializeAssignment a[258662] b[258664]))
        (701586 'move' tmp[701584](501530 call isTrue call_tmp[901126]))
        (701591 'move' tmp[701571](701588 '_paramFoldLogical' tmp[701572] tmp[701584]))
      }
      unknown call_tmp[901131] "expr temp" "maybe param" "maybe type" "temp"
      (901134 'move' call_tmp[901131](259531 call _cond_test tmp[701571]))
      if call_tmp[901131]
      {
        unknown call_tmp[901136] "expr temp" "maybe param" "maybe type" "temp"
        (901139 'move' call_tmp[901136](259251 call == kind[258670] move[257613]))
        unknown call_tmp[901141] "expr temp" "maybe param" "maybe type" "temp"
        (901144 'move' call_tmp[901141](259258 call _cond_test call_tmp[901136]))
        if call_tmp[901141]
        {
          unknown call_tmp[901148] "expr temp" "maybe param" "maybe type" "temp"
          (901151 'move' call_tmp[901148](258980 call eltType _mt[203] a[258662]))
          unknown call_tmp[901153] "expr temp" "maybe param" "maybe type" "temp"
          (901156 'move' call_tmp[901153](258978 call needsInitWorkaround call_tmp[901148]))
          unknown call_tmp[901158] "expr temp" "maybe param" "maybe type" "temp"
          (901161 'move' call_tmp[901158](258983 call _cond_test call_tmp[901153]))
          if call_tmp[901158]
          {
            {
              unknown _indexOfInterest[258850] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[258851] "expr temp" "temp"
              unknown call_tmp[901165] "expr temp" "maybe param" "maybe type" "temp"
              (901168 'move' call_tmp[901165](258860 call _dom _mt[203] a[258662]))
              unknown call_tmp[901170] "expr temp" "maybe param" "maybe type" "temp"
              (901173 'move' call_tmp[901170](258863 call _getIterator call_tmp[901165]))
              unknown call_tmp[901175] "expr temp" "maybe param" "maybe type" "temp"
              (901178 'move' call_tmp[901175](258866 call _getIterator b[258664]))
              (258868 'move' _iterator[258851](258830 call _build_tuple call_tmp[901170] call_tmp[901175]))
              Defer
              {
                {
                  (258896 call _freeIterator _iterator[258851])
                }
              }
              { scopeless type
                (258873 'move' _indexOfInterest[258850](258870 call iteratorIndex _iterator[258851]))
              }
              ForLoop[258852]
              {
                (258878 call _check_tuple_var_decl _indexOfInterest[258850] 2)
                (564061 'end of statement')
                unknown ai[258818] "index var" "insert auto destroy"
                (564062 'end of statement')
                (258885 'move' ai[258818](258882 call _indexOfInterest[258850] 0))
                (564063 'end of statement' ai[258818])
                unknown bb[258820] "index var" "insert auto destroy"
                (564065 'end of statement')
                (258891 'move' bb[258820](258888 call _indexOfInterest[258850] 1))
                (564066 'end of statement' bb[258820])
                {
                  unknown aa[258833] "dead at end of block" "ref var"
                  (651460 'init ref decl' aa[258833])
                  unknown call_tmp[901180] "expr temp" "maybe param" "maybe type" "temp"
                  (901183 'move' call_tmp[901180](258835 call a[258662] ai[258818]))
                  (651458 'move' aa[258833](651457 'addr of' call_tmp[901180]))
                  (258838 'end of statement' ai[258818])
                  unknown call_tmp[901185] "expr temp" "maybe param" "maybe type" "temp"
                  (901188 'move' call_tmp[901185](258841 'steal' bb[258820]))
                  (258839 '=' aa[258833] call_tmp[901185])
                  (564069 'end of statement' aa[258833] bb[258820])
                  unknown call_tmp[901192] "expr temp" "maybe param" "maybe type" "temp"
                  (901195 'move' call_tmp[901192](258846 call eltType _mt[203] a[258662]))
                  (258844 call fixRuntimeType call_tmp[901192] aa[258833])
                  (564072 'end of statement' aa[258833])
                }
                label _continueLabel[258855]
                _indexOfInterest[258850]
                _iterator[258851]
              }
              label _breakLabel[258856]
            }
          }
          {
            {
              unknown _indexOfInterest[258927] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[258928] "expr temp" "temp"
              unknown call_tmp[901197] "expr temp" "maybe param" "maybe type" "temp"
              (901200 'move' call_tmp[901197](258937 call _getIterator a[258662]))
              unknown call_tmp[901202] "expr temp" "maybe param" "maybe type" "temp"
              (901205 'move' call_tmp[901202](258940 call _getIterator b[258664]))
              (258942 'move' _iterator[258928](258914 call _build_tuple call_tmp[901197] call_tmp[901202]))
              Defer
              {
                {
                  (258970 call _freeIterator _iterator[258928])
                }
              }
              { scopeless type
                (258947 'move' _indexOfInterest[258927](258944 call iteratorIndex _iterator[258928]))
              }
              ForLoop[258929]
              {
                (258952 call _check_tuple_var_decl _indexOfInterest[258927] 2)
                (564075 'end of statement')
                unknown aa[258905] "index var" "insert auto destroy"
                (564076 'end of statement')
                (258959 'move' aa[258905](258956 call _indexOfInterest[258927] 0))
                (564077 'end of statement' aa[258905])
                unknown bb[258907] "index var" "insert auto destroy"
                (564079 'end of statement')
                (258965 'move' bb[258907](258962 call _indexOfInterest[258927] 1))
                (564080 'end of statement' bb[258907])
                {
                  unknown call_tmp[901207] "expr temp" "maybe param" "maybe type" "temp"
                  (901210 'move' call_tmp[901207](258918 'steal' bb[258907]))
                  (258916 '=' aa[258905] call_tmp[901207])
                  (564082 'end of statement' aa[258905] bb[258907])
                  unknown call_tmp[901214] "expr temp" "maybe param" "maybe type" "temp"
                  (901217 'move' call_tmp[901214](258923 call eltType _mt[203] a[258662]))
                  (258921 call fixRuntimeType call_tmp[901214] aa[258905])
                  (564085 'end of statement' aa[258905])
                }
                label _continueLabel[258932]
                _indexOfInterest[258927]
                _iterator[258928]
              }
              label _breakLabel[258933]
            }
          }
        }
        {
          unknown call_tmp[901219] "expr temp" "maybe param" "maybe type" "temp"
          (901222 'move' call_tmp[901219](259239 call == kind[258670] initCopy[257615]))
          unknown call_tmp[901224] "expr temp" "maybe param" "maybe type" "temp"
          (901227 'move' call_tmp[901224](259246 call _cond_test call_tmp[901219]))
          if call_tmp[901224]
          {
            unknown call_tmp[901231] "expr temp" "maybe param" "maybe type" "temp"
            (901234 'move' call_tmp[901231](259154 call eltType _mt[203] a[258662]))
            unknown call_tmp[901236] "expr temp" "maybe param" "maybe type" "temp"
            (901239 'move' call_tmp[901236](259152 call needsInitWorkaround call_tmp[901231]))
            unknown call_tmp[901241] "expr temp" "maybe param" "maybe type" "temp"
            (901244 'move' call_tmp[901241](259157 call _cond_test call_tmp[901236]))
            if call_tmp[901241]
            {
              {
                unknown _indexOfInterest[259023] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[259024] "expr temp" "temp"
                unknown call_tmp[901248] "expr temp" "maybe param" "maybe type" "temp"
                (901251 'move' call_tmp[901248](259033 call _dom _mt[203] a[258662]))
                unknown call_tmp[901253] "expr temp" "maybe param" "maybe type" "temp"
                (901256 'move' call_tmp[901253](259036 call _getIterator call_tmp[901248]))
                unknown call_tmp[901258] "expr temp" "maybe param" "maybe type" "temp"
                (901261 'move' call_tmp[901258](259039 call _getIterator b[258664]))
                (259041 'move' _iterator[259024](259002 call _build_tuple call_tmp[901253] call_tmp[901258]))
                Defer
                {
                  {
                    (259069 call _freeIterator _iterator[259024])
                  }
                }
                { scopeless type
                  (259046 'move' _indexOfInterest[259023](259043 call iteratorIndex _iterator[259024]))
                }
                ForLoop[259025]
                {
                  (259051 call _check_tuple_var_decl _indexOfInterest[259023] 2)
                  (564088 'end of statement')
                  unknown ai[258990] "index var" "insert auto destroy"
                  (564089 'end of statement')
                  (259058 'move' ai[258990](259055 call _indexOfInterest[259023] 0))
                  (564090 'end of statement' ai[258990])
                  unknown bb[258992] "index var" "insert auto destroy"
                  (564092 'end of statement')
                  (259064 'move' bb[258992](259061 call _indexOfInterest[259023] 1))
                  (564093 'end of statement' bb[258992])
                  {
                    unknown aa[259005] "dead at end of block" "ref var"
                    (651465 'init ref decl' aa[259005])
                    unknown call_tmp[901263] "expr temp" "maybe param" "maybe type" "temp"
                    (901266 'move' call_tmp[901263](259007 call a[258662] ai[258990]))
                    (651463 'move' aa[259005](651462 'addr of' call_tmp[901263]))
                    (259010 'end of statement')
                    unknown call_tmp[901270] "maybe param" "maybe type" "temp"
                    (901273 'move' call_tmp[901270](259014 call eltType _mt[203] a[258662]))
                    unknown copy[259012] "dead at end of block" "no auto destroy"
                    (651467 'init var' copy[259012] b[258664] call_tmp[901270])
                    (259019 'end of statement' ai[258990])
                    (259020 '=' aa[259005] copy[259012])
                    (564096 'end of statement' aa[259005] copy[259012])
                  }
                  label _continueLabel[259028]
                  _indexOfInterest[259023]
                  _iterator[259024]
                }
                label _breakLabel[259029]
              }
            }
            {
              {
                unknown _indexOfInterest[259101] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[259102] "expr temp" "temp"
                unknown call_tmp[901275] "expr temp" "maybe param" "maybe type" "temp"
                (901278 'move' call_tmp[901275](259111 call _getIterator a[258662]))
                unknown call_tmp[901280] "expr temp" "maybe param" "maybe type" "temp"
                (901283 'move' call_tmp[901280](259114 call _getIterator b[258664]))
                (259116 'move' _iterator[259102](259087 call _build_tuple call_tmp[901275] call_tmp[901280]))
                Defer
                {
                  {
                    (259144 call _freeIterator _iterator[259102])
                  }
                }
                { scopeless type
                  (259121 'move' _indexOfInterest[259101](259118 call iteratorIndex _iterator[259102]))
                }
                ForLoop[259103]
                {
                  (259126 call _check_tuple_var_decl _indexOfInterest[259101] 2)
                  (564100 'end of statement')
                  unknown aa[259078] "index var" "insert auto destroy"
                  (564101 'end of statement')
                  (259133 'move' aa[259078](259130 call _indexOfInterest[259101] 0))
                  (564102 'end of statement' aa[259078])
                  unknown bb[259080] "index var" "insert auto destroy"
                  (564104 'end of statement')
                  (259139 'move' bb[259080](259136 call _indexOfInterest[259101] 1))
                  (564105 'end of statement' bb[259080])
                  {
                    unknown call_tmp[901287] "maybe param" "maybe type" "temp"
                    (901290 'move' call_tmp[901287](259092 call eltType _mt[203] a[258662]))
                    unknown copy[259090] "dead at end of block" "no auto destroy"
                    (651469 'init var' copy[259090] b[258664] call_tmp[901287])
                    (259097 'end of statement')
                    (259098 '=' aa[259078] copy[259090])
                    (564107 'end of statement' aa[259078] copy[259090])
                  }
                  label _continueLabel[259106]
                  _indexOfInterest[259101]
                  _iterator[259102]
                }
                label _breakLabel[259107]
              }
            }
          }
          {
            unknown call_tmp[901292] "expr temp" "maybe param" "maybe type" "temp"
            (901295 'move' call_tmp[901292](259228 call == kind[258670] assign[257617]))
            unknown call_tmp[901297] "expr temp" "maybe param" "maybe type" "temp"
            (901300 'move' call_tmp[901297](259235 call _cond_test call_tmp[901292]))
            if call_tmp[901297]
            {
              {
                unknown _indexOfInterest[259178] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[259179] "expr temp" "temp"
                unknown call_tmp[901302] "expr temp" "maybe param" "maybe type" "temp"
                (901305 'move' call_tmp[901302](259188 call _getIterator a[258662]))
                unknown call_tmp[901307] "expr temp" "maybe param" "maybe type" "temp"
                (901310 'move' call_tmp[901307](259191 call _getIterator b[258664]))
                (259193 'move' _iterator[259179](259172 call _build_tuple call_tmp[901302] call_tmp[901307]))
                Defer
                {
                  {
                    (259221 call _freeIterator _iterator[259179])
                  }
                }
                { scopeless type
                  (259198 'move' _indexOfInterest[259178](259195 call iteratorIndex _iterator[259179]))
                }
                ForLoop[259180]
                {
                  (259203 call _check_tuple_var_decl _indexOfInterest[259178] 2)
                  (564111 'end of statement')
                  unknown aa[259163] "index var" "insert auto destroy"
                  (564112 'end of statement')
                  (259210 'move' aa[259163](259207 call _indexOfInterest[259178] 0))
                  (564113 'end of statement' aa[259163])
                  unknown bb[259165] "index var" "insert auto destroy"
                  (564115 'end of statement')
                  (259216 'move' bb[259165](259213 call _indexOfInterest[259178] 1))
                  (564116 'end of statement' bb[259165])
                  {
                    (259174 call = aa[259163] bb[259165])
                    (564118 'end of statement' aa[259163] bb[259165])
                  }
                  label _continueLabel[259183]
                  _indexOfInterest[259178]
                  _iterator[259179]
                }
                label _breakLabel[259184]
              }
            }
          }
        }
      }
      {
        unknown call_tmp[901312] "expr temp" "maybe param" "maybe type" "temp"
        (901315 'move' call_tmp[901312](259512 call == kind[258670] move[257613]))
        unknown call_tmp[901317] "expr temp" "maybe param" "maybe type" "temp"
        (901320 'move' call_tmp[901317](259519 call _cond_test call_tmp[901312]))
        if call_tmp[901317]
        {
          unknown call_tmp[901324] "expr temp" "maybe param" "maybe type" "temp"
          (901327 'move' call_tmp[901324](259344 call eltType _mt[203] a[258662]))
          unknown call_tmp[901329] "expr temp" "maybe param" "maybe type" "temp"
          (901332 'move' call_tmp[901329](259342 call needsInitWorkaround call_tmp[901324]))
          unknown call_tmp[901334] "expr temp" "maybe param" "maybe type" "temp"
          (901337 'move' call_tmp[901334](259347 call _cond_test call_tmp[901329]))
          if call_tmp[901334]
          {
            unknown call_tmp[901341] "expr temp" "maybe param" "maybe type" "temp"
            (901344 'move' call_tmp[901341](470231 call _dom _mt[203] a[258662]))
            unknown call_tmp[901346] "maybe param" "maybe type" "temp"
            (901349 'move' call_tmp[901346](470227 call chpl__staticAutoLocalCheck a[258662] call_tmp[901341]))
            unknown chpl__staticAutoLocalCheckSym[470226] "dead at end of block" "param" "temp"
            (651471 'init var' chpl__staticAutoLocalCheckSym[470226] call_tmp[901346])
            if chpl__staticAutoLocalCheckSym[470226]
            {
              unknown call_tmp[901353] "expr temp" "maybe param" "maybe type" "temp"
              (901356 'move' call_tmp[901353](259275 call _dom _mt[203] a[258662]))
              Forall[259307] {
                induction variables:
                  
                  unknown ai[259267] "index var" "insert auto destroy"
                  
                  unknown bb[259269] "index var" "insert auto destroy"
                iterated expressions:
                  call_tmp[901353]
                  b[258664]
                shadow variables:
                  a[259301] 'ref' intent outer var a[258662]
                    init block
                    {
                    }
                    deinit block
                    {
                    }
                other variables
                  forall body
                {
                  unknown aa[259282] "dead at end of block" "ref var"
                  (651476 'init ref decl' aa[259282])
                  unknown call_tmp[901358] "expr temp" "maybe param" "maybe type" "temp"
                  (901361 'move' call_tmp[901358](470237 'may be local access' a[258662] ai[259267] chpl__staticAutoLocalCheckSym[470226] 1))
                  (651474 'move' aa[259282](651473 'addr of' call_tmp[901358]))
                  (259287 'end of statement' ai[259267])
                  unknown call_tmp[901363] "expr temp" "maybe param" "maybe type" "temp"
                  (901366 'move' call_tmp[901363](259290 'steal' bb[259269]))
                  (259288 '=' aa[259282] call_tmp[901363])
                  (564122 'end of statement' aa[259282] bb[259269])
                  unknown call_tmp[901370] "expr temp" "maybe param" "maybe type" "temp"
                  (901373 'move' call_tmp[901370](259295 call eltType _mt[203] a[259301]))
                  (259293 call fixRuntimeType call_tmp[901370] aa[259282])
                  (564125 'end of statement' a[259301] aa[259282])
                }
              }
            }
            {
              unknown call_tmp[901377] "expr temp" "maybe param" "maybe type" "temp"
              (901380 'move' call_tmp[901377](470215 call _dom _mt[203] a[258662]))
              Forall[470209] {
                induction variables:
                  
                  unknown ai[470210] "index var" "insert auto destroy"
                  
                  unknown bb[470212] "index var" "insert auto destroy"
                iterated expressions:
                  call_tmp[901377]
                  b[258664]
                shadow variables:
                  a[470220] 'ref' intent outer var a[258662]
                    init block
                    {
                    }
                    deinit block
                    {
                    }
                other variables
                  forall body
                {
                  unknown aa[470192] "dead at end of block" "ref var"
                  (651481 'init ref decl' aa[470192])
                  unknown call_tmp[901382] "expr temp" "maybe param" "maybe type" "temp"
                  (901385 'move' call_tmp[901382](470194 call a[470220] ai[470210]))
                  (651479 'move' aa[470192](651478 'addr of' call_tmp[901382]))
                  (470197 'end of statement' a[470220] ai[470210])
                  unknown call_tmp[901387] "expr temp" "maybe param" "maybe type" "temp"
                  (901390 'move' call_tmp[901387](470200 'steal' bb[470212]))
                  (470198 '=' aa[470192] call_tmp[901387])
                  (564130 'end of statement' aa[470192] bb[470212])
                  unknown call_tmp[901394] "expr temp" "maybe param" "maybe type" "temp"
                  (901397 'move' call_tmp[901394](470205 call eltType _mt[203] a[470220]))
                  (470203 call fixRuntimeType call_tmp[901394] aa[470192])
                  (564133 'end of statement' a[470220] aa[470192])
                }
              }
            }
          }
          {
            Forall[259337] {
              induction variables:
                
                unknown aa[259313] "index var" "insert auto destroy"
                
                unknown bb[259315] "index var" "insert auto destroy"
              iterated expressions:
                a[258662]
                b[258664]
              shadow variables:
              other variables
                forall body
              {
                unknown call_tmp[901399] "expr temp" "maybe param" "maybe type" "temp"
                (901402 'move' call_tmp[901399](259326 'steal' bb[259315]))
                (259324 '=' aa[259313] call_tmp[901399])
                (564136 'end of statement' aa[259313] bb[259315])
                unknown call_tmp[901406] "expr temp" "maybe param" "maybe type" "temp"
                (901409 'move' call_tmp[901406](259331 call eltType _mt[203] a[258662]))
                (259329 call fixRuntimeType call_tmp[901406] aa[259313])
                (564139 'end of statement' aa[259313])
              }
            }
          }
        }
        {
          unknown call_tmp[901411] "expr temp" "maybe param" "maybe type" "temp"
          (901414 'move' call_tmp[901411](259500 call == kind[258670] initCopy[257615]))
          unknown call_tmp[901416] "expr temp" "maybe param" "maybe type" "temp"
          (901419 'move' call_tmp[901416](259507 call _cond_test call_tmp[901411]))
          if call_tmp[901416]
          {
            unknown call_tmp[901423] "expr temp" "maybe param" "maybe type" "temp"
            (901426 'move' call_tmp[901423](259459 call eltType _mt[203] a[258662]))
            unknown call_tmp[901428] "expr temp" "maybe param" "maybe type" "temp"
            (901431 'move' call_tmp[901428](259457 call needsInitWorkaround call_tmp[901423]))
            unknown call_tmp[901433] "expr temp" "maybe param" "maybe type" "temp"
            (901436 'move' call_tmp[901433](259462 call _cond_test call_tmp[901428]))
            if call_tmp[901433]
            {
              unknown call_tmp[901440] "expr temp" "maybe param" "maybe type" "temp"
              (901443 'move' call_tmp[901440](470285 call _dom _mt[203] a[258662]))
              unknown call_tmp[901445] "maybe param" "maybe type" "temp"
              (901448 'move' call_tmp[901445](470281 call chpl__staticAutoLocalCheck a[258662] call_tmp[901440]))
              unknown chpl__staticAutoLocalCheckSym[470280] "dead at end of block" "param" "temp"
              (651483 'init var' chpl__staticAutoLocalCheckSym[470280] call_tmp[901445])
              if chpl__staticAutoLocalCheckSym[470280]
              {
                unknown call_tmp[901452] "expr temp" "maybe param" "maybe type" "temp"
                (901455 'move' call_tmp[901452](259362 call _dom _mt[203] a[258662]))
                Forall[259395] {
                  induction variables:
                    
                    unknown ai[259354] "index var" "insert auto destroy"
                    
                    unknown bb[259356] "index var" "insert auto destroy"
                  iterated expressions:
                    call_tmp[901452]
                    b[258664]
                  shadow variables:
                    a[259389] 'ref' intent outer var a[258662]
                      init block
                      {
                      }
                      deinit block
                      {
                      }
                  other variables
                    forall body
                  {
                    unknown aa[259369] "dead at end of block" "ref var"
                    (651488 'init ref decl' aa[259369])
                    unknown call_tmp[901457] "expr temp" "maybe param" "maybe type" "temp"
                    (901460 'move' call_tmp[901457](470291 'may be local access' a[258662] ai[259354] chpl__staticAutoLocalCheckSym[470280] 1))
                    (651486 'move' aa[259369](651485 'addr of' call_tmp[901457]))
                    (259374 'end of statement')
                    unknown call_tmp[901464] "maybe param" "maybe type" "temp"
                    (901467 'move' call_tmp[901464](259378 call eltType _mt[203] a[259389]))
                    unknown copy[259376] "dead at end of block" "no auto destroy"
                    (651490 'init var' copy[259376] bb[259356] call_tmp[901464])
                    (259383 'end of statement' ai[259354] bb[259356] a[259389])
                    (259384 '=' aa[259369] copy[259376])
                    (564144 'end of statement' aa[259369] copy[259376])
                  }
                }
              }
              {
                unknown call_tmp[901471] "expr temp" "maybe param" "maybe type" "temp"
                (901474 'move' call_tmp[901471](470269 call _dom _mt[203] a[258662]))
                Forall[470263] {
                  induction variables:
                    
                    unknown ai[470264] "index var" "insert auto destroy"
                    
                    unknown bb[470266] "index var" "insert auto destroy"
                  iterated expressions:
                    call_tmp[901471]
                    b[258664]
                  shadow variables:
                    a[470274] 'ref' intent outer var a[258662]
                      init block
                      {
                      }
                      deinit block
                      {
                      }
                  other variables
                    forall body
                  {
                    unknown aa[470246] "dead at end of block" "ref var"
                    (651495 'init ref decl' aa[470246])
                    unknown call_tmp[901476] "expr temp" "maybe param" "maybe type" "temp"
                    (901479 'move' call_tmp[901476](470248 call a[470274] ai[470264]))
                    (651493 'move' aa[470246](651492 'addr of' call_tmp[901476]))
                    (470251 'end of statement')
                    unknown call_tmp[901483] "maybe param" "maybe type" "temp"
                    (901486 'move' call_tmp[901483](470255 call eltType _mt[203] a[470274]))
                    unknown copy[470252] "dead at end of block" "no auto destroy"
                    (651497 'init var' copy[470252] bb[470266] call_tmp[901483])
                    (470259 'end of statement' a[470274] ai[470264] bb[470266])
                    (470260 '=' aa[470246] copy[470252])
                    (564150 'end of statement' aa[470246] copy[470252])
                  }
                }
              }
            }
            {
              Forall[259452] {
                induction variables:
                  
                  unknown aa[259401] "index var" "insert auto destroy"
                  
                  unknown bb[259403] "index var" "insert auto destroy"
                iterated expressions:
                  a[258662]
                  b[258664]
                shadow variables:
                other variables
                  forall body
                {
                  unknown call_tmp[901488] "expr temp" "maybe param" "maybe type" "temp" "type variable"
                  (901491 'move' call_tmp[901488](259445 'typeof' bb[259403]))
                  unknown call_tmp[901493] "expr temp" "maybe param" "maybe type" "temp"
                  (901496 'move' call_tmp[901493](259443 call isSyncType call_tmp[901488]))
                  unknown call_tmp[901498] "expr temp" "maybe param" "maybe type" "temp"
                  (901501 'move' call_tmp[901498](259446 call _cond_test call_tmp[901493]))
                  if call_tmp[901498]
                  {
                    unknown call_tmp[901505] "maybe param" "maybe type" "temp"
                    (901508 'move' call_tmp[901505](259423 call(259420 call (partial) readFE _mt[203] bb[259403])))
                    unknown call_tmp[901512] "maybe param" "maybe type" "temp"
                    (901515 'move' call_tmp[901512](259416 call eltType _mt[203] a[258662]))
                    unknown copy[259414] "dead at end of block" "no auto destroy"
                    (651499 'init var' copy[259414] call_tmp[901505] call_tmp[901512])
                    (259425 'end of statement' bb[259403])
                    (259426 '=' aa[259401] copy[259414])
                    (564154 'end of statement' aa[259401] copy[259414])
                  }
                  {
                    unknown call_tmp[901519] "maybe param" "maybe type" "temp"
                    (901522 'move' call_tmp[901519](259433 call eltType _mt[203] a[258662]))
                    unknown copy[259431] "dead at end of block" "no auto destroy"
                    (651501 'init var' copy[259431] bb[259403] call_tmp[901519])
                    (259438 'end of statement' bb[259403])
                    (259439 '=' aa[259401] copy[259431])
                    (564158 'end of statement' aa[259401] copy[259431])
                  }
                }
              }
            }
          }
          {
            unknown call_tmp[901524] "expr temp" "maybe param" "maybe type" "temp"
            (901527 'move' call_tmp[901524](259489 call == kind[258670] assign[257617]))
            unknown call_tmp[901529] "expr temp" "maybe param" "maybe type" "temp"
            (901532 'move' call_tmp[901529](259496 call _cond_test call_tmp[901524]))
            if call_tmp[901529]
            {
              Forall[259485] {
                induction variables:
                  
                  unknown aa[259468] "index var" "insert auto destroy"
                  
                  unknown bb[259470] "index var" "insert auto destroy"
                iterated expressions:
                  a[258662]
                  b[258664]
                shadow variables:
                other variables
                  forall body
                {
                  (259479 call = aa[259468] bb[259470])
                  (564161 'end of statement' aa[259468] bb[259470])
                }
              }
            }
          }
        }
      }
    }
    (625335 return _void[46])
  }
  {
    (258681 call <=(258678 'lifetime_of' a[258662])(258680 'lifetime_of' b[258664]))
  }
  function chpl__transferArray[259565](ref arg a[259570]:_array[255540](?), param arg b[259573]:_any[141](?), param arg kind[259579] :
  assign[257617] =
  assign[257617]) : _unknown[42] "inline" "find user line" "no return value for void"
  {
    Forall[259593] {
      induction variables:
        
        unknown aa[259583] "index var" "insert auto destroy"
      iterated expressions:
        a[259570]
      shadow variables:
      other variables
        forall body
      {
        (259586 call = aa[259583] b[259573])
        (564164 'end of statement' aa[259583])
      }
    }
    (625337 return _void[46])
  }
  function =[259598](ref arg a[259603]:_array[255540](?), arg b[259607]:_domain[225034](?)) : _unknown[42] "assignop" "inline" "operator" "no return value for void"
  {
    unknown call_tmp[901536] "expr temp" "maybe param" "maybe type" "temp"
    (901539 'move' call_tmp[901536](259618 call rank _mt[203] a[259603]))
    unknown call_tmp[901543] "expr temp" "maybe param" "maybe type" "temp"
    (901546 'move' call_tmp[901543](259622 call rank _mt[203] b[259607]))
    unknown call_tmp[901548] "expr temp" "maybe param" "maybe type" "temp"
    (901551 'move' call_tmp[901548](259615 call != call_tmp[901536] call_tmp[901543]))
    unknown call_tmp[901553] "expr temp" "maybe param" "maybe type" "temp"
    (901556 'move' call_tmp[901553](259625 call _cond_test call_tmp[901548]))
    if call_tmp[901553]
    {
      (259612 call compilerError "rank mismatch in array assignment")
    }
    unknown tmp[501588] "maybe param" "temp"
    (501599 'move' tmp[501588](259642 call(259639 call (partial) isAssociative _mt[203] b[259607])))
    unknown call_tmp[901560] "expr temp" "maybe param" "maybe type" "temp"
    (901563 'move' call_tmp[901560](501601 call _cond_invalid tmp[501588]))
    if call_tmp[901560]
    {
      (501604 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[701598] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[701599] "maybe param" "temp"
    unknown call_tmp[901565] "expr temp" "maybe param" "maybe type" "temp"
    (901568 'move' call_tmp[901565](501589 call isTrue tmp[501588]))
    (701604 'move' tmp[701599](701602 call _cond_test call_tmp[901565]))
    if tmp[701599]
    {
      unknown tmp[701606] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[901572] "expr temp" "maybe param" "maybe type" "temp"
      (901575 'move' call_tmp[901572](259647 call(259644 call (partial) isRectangular _mt[203] a[259603])))
      (701608 'move' tmp[701606](501592 call isTrue call_tmp[901572]))
      (701613 'move' tmp[701598](701610 '_paramFoldLogical' tmp[701599] tmp[701606]))
    }
    {
      (701618 'move' tmp[701598](701615 '_paramFoldLogical' tmp[701599] 0))
    }
    unknown call_tmp[901577] "expr temp" "maybe param" "maybe type" "temp"
    (901580 'move' call_tmp[901577](259648 call _cond_test tmp[701598]))
    if call_tmp[901577]
    {
      (259631 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    (259654 call chpl__transferArray a[259603] b[259607])
    (625339 return _void[46])
  }
  function =[259659](ref arg a[259664]:_array[255540](?), arg b[259670]:range[240](?)) : _unknown[42] "assignop" "inline" "operator" "no return value for void"
  {
    unknown call_tmp[901584] "expr temp" "maybe param" "maybe type" "temp"
    (901587 'move' call_tmp[901584](259688 call rank _mt[203] a[259664]))
    unknown call_tmp[901589] "expr temp" "maybe param" "maybe type" "temp"
    (901592 'move' call_tmp[901589](259685 call == call_tmp[901584] 1))
    unknown call_tmp[901594] "expr temp" "maybe param" "maybe type" "temp"
    (901597 'move' call_tmp[901594](259692 call _cond_test call_tmp[901589]))
    if call_tmp[901594]
    {
      (259675 call chpl__transferArray a[259664] b[259670])
    }
    {
      (259680 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
    (625341 return _void[46])
  }
  function =[259700](ref arg a[259705]:_array[255540](?), arg b[259709]:_iteratorRecord[165](?)) : _unknown[42] "assignop" "inline" "operator" "no return value for void"
  {
    (259714 call chpl__transferArray a[259705] b[259709])
    (625343 return _void[46])
  }
  function =[259719](ref arg a[259724]:_array[255540](?), arg b[259729]:_any[141](?)) : _unknown[42] "assignop" "inline" "last resort" "operator" "no return value for void"
  {
    (259750 call chpl__transferArray a[259724] b[259729])
    (625345 return _void[46])
  }
  where {
    unknown tmp[501609] "maybe param" "temp"
    unknown call_tmp[901599] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (901602 'move' call_tmp[901599](532016 'typeof' b[259729]))
    (501620 'move' tmp[501609](259737 call isTupleType call_tmp[901599]))
    unknown call_tmp[901604] "expr temp" "maybe param" "maybe type" "temp"
    (901607 'move' call_tmp[901604](501622 call _cond_invalid tmp[501609]))
    if call_tmp[901604]
    {
      (501625 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[701625] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[701626] "maybe param" "temp"
    unknown call_tmp[901609] "expr temp" "maybe param" "maybe type" "temp"
    (901612 'move' call_tmp[901609](501610 call isTrue tmp[501609]))
    (701631 'move' tmp[701626](701629 call _cond_test call_tmp[901609]))
    if tmp[701626]
    {
      (701636 'move' tmp[701625](701633 '_paramFoldLogical' tmp[701626] 1))
    }
    {
      unknown tmp[701638] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[901616] "expr temp" "maybe param" "maybe type" "temp"
      (901619 'move' call_tmp[901616](259745 call eltType _mt[203] a[259724]))
      unknown call_tmp[901621] "expr temp" "maybe param" "maybe type" "temp"
      (901624 'move' call_tmp[901621](259743 call _desync call_tmp[901616]))
      unknown call_tmp[901626] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (901629 'move' call_tmp[901626](532018 'typeof' b[259729]))
      unknown call_tmp[901631] "expr temp" "maybe param" "maybe type" "temp"
      (901634 'move' call_tmp[901631](395532 'is_coercible' call_tmp[901621] call_tmp[901626]))
      (701640 'move' tmp[701638](501614 call isTrue call_tmp[901631]))
      (701645 'move' tmp[701625](701642 '_paramFoldLogical' tmp[701626] tmp[701638]))
    }
    (259732 call ! tmp[701625])
  }
  function helpInitArrFromTuple[259756](ref arg j[259758]:_any[141](?), param arg rank[259761]:int(64)[10], ref arg a[259767]:_array[255540](?), arg b[259771]:_tuple[246](?), param arg kind[259775]:_tElt[257619]) : _unknown[42] "private" "no return value for void"
  {
    unknown idxType[259799] "dead at end of block" "insert auto destroy" "type variable"
    unknown call_tmp[901638] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (901641 'move' call_tmp[901638](651506 call _dom _mt[203] a[259767]))
    (651510 'move' idxType[259799](651504 call idxType _mt[203] call_tmp[901638]))
    unknown strType[259787] "dead at end of block" "insert auto destroy" "type variable"
    unknown call_tmp[901647] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (901650 'move' call_tmp[901647](651517 call _dom _mt[203] a[259767]))
    unknown call_tmp[901654] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (901657 'move' call_tmp[901654](651515 call chpl_integralIdxType _mt[203] call_tmp[901647]))
    (651521 'move' strType[259787](651513 call chpl__signedType call_tmp[901654]))
    (259808 'end of statement')
    unknown call_tmp[901661] "expr temp" "maybe param" "maybe type" "temp"
    (901664 'move' call_tmp[901661](259834 call _dom _mt[203] a[259767]))
    unknown call_tmp[901670] "expr temp" "maybe param" "maybe type" "temp"
    (901673 'move' call_tmp[901670](259844 call rank _mt[203] a[259767]))
    unknown call_tmp[901675] "expr temp" "maybe param" "maybe type" "temp"
    (901678 'move' call_tmp[901675](259841 call - call_tmp[901670] rank[259761]))
    unknown call_tmp[901680] "expr temp" "maybe param" "maybe type" "temp"
    (901683 'move' call_tmp[901680](259840 call(259837 call (partial) dim _mt[203] call_tmp[901661]) call_tmp[901675]))
    unknown call_tmp[901687] "maybe param" "maybe type" "temp"
    (901690 'move' call_tmp[901687](259848 call stride _mt[203] call_tmp[901680]))
    const stride[259832] "dead at end of block" "const" "insert auto destroy"
    (651523 'init var' stride[259832] call_tmp[901687])
    unknown call_tmp[901694] "expr temp" "maybe param" "maybe type" "temp"
    (901697 'move' call_tmp[901694](259813 call _dom _mt[203] a[259767]))
    unknown call_tmp[901703] "expr temp" "maybe param" "maybe type" "temp"
    (901706 'move' call_tmp[901703](259823 call rank _mt[203] a[259767]))
    unknown call_tmp[901708] "expr temp" "maybe param" "maybe type" "temp"
    (901711 'move' call_tmp[901708](259820 call - call_tmp[901703] rank[259761]))
    unknown call_tmp[901713] "expr temp" "maybe param" "maybe type" "temp"
    (901716 'move' call_tmp[901713](259819 call(259816 call (partial) dim _mt[203] call_tmp[901694]) call_tmp[901708]))
    unknown call_tmp[901720] "maybe param" "maybe type" "temp"
    (901723 'move' call_tmp[901720](259827 call firstAsInt _mt[203] call_tmp[901713]))
    const start[259811] "dead at end of block" "const" "insert auto destroy"
    (651525 'init var' start[259811] call_tmp[901720])
    (259852 'end of statement')
    unknown call_tmp[901725] "expr temp" "maybe param" "maybe type" "temp"
    (901728 'move' call_tmp[901725](260122 call == rank[259761] 1))
    unknown call_tmp[901730] "expr temp" "maybe param" "maybe type" "temp"
    (901733 'move' call_tmp[901730](260126 call _cond_test call_tmp[901725]))
    if call_tmp[901730]
    {
      {
        unknown i[259854] "dead at end of block" "index var" "insert auto destroy"
        (651527 'init var' i[259854] 0)
        (564174 'end of statement')
        unknown tmp[259994] "maybe param" "temp"
        unknown call_tmp[901737] "expr temp" "maybe param" "maybe type" "temp"
        (901740 'move' call_tmp[901737](259860 call size _mt[203] b[259771]))
        unknown call_tmp[901742] "expr temp" "maybe param" "maybe type" "temp"
        (901745 'move' call_tmp[901742](259857 call - call_tmp[901737] 1))
        (260006 'move' tmp[259994](260004 call chpl_compute_low_param_loop_bound 0 call_tmp[901742]))
        unknown tmp[259995] "maybe param" "temp"
        unknown call_tmp[901749] "expr temp" "maybe param" "maybe type" "temp"
        (901752 'move' call_tmp[901749](260013 call size _mt[203] b[259771]))
        unknown call_tmp[901754] "expr temp" "maybe param" "maybe type" "temp"
        (901757 'move' call_tmp[901754](260011 call - call_tmp[901749] 1))
        (260019 'move' tmp[259995](260017 call chpl_compute_high_param_loop_bound 0 call_tmp[901754]))
        unknown tmp[259996] "maybe param" "temp"
        (260022 'move' tmp[259996] 1)
        ParamForLoop[260024]
        { i[259854] tmp[259994] tmp[259995] tmp[259996]
          {
            unknown call_tmp[901761] "expr temp" "maybe param" "maybe type" "temp"
            (901764 'move' call_tmp[901761](259874 call rank _mt[203] a[259767]))
            unknown call_tmp[901766] "expr temp" "maybe param" "maybe type" "temp"
            (901769 'move' call_tmp[901766](259871 call - call_tmp[901761] rank[259761]))
            unknown call_tmp[901771] "expr temp" "maybe param" "maybe type" "temp"
            (901774 'move' call_tmp[901771](259870 call j[259758] call_tmp[901766]))
            unknown call_tmp[901776] "expr temp" "maybe param" "maybe type" "temp"
            (901779 'move' call_tmp[901776](259883 call : start[259811] strType[259787]))
            unknown call_tmp[901781] "expr temp" "maybe param" "maybe type" "temp"
            (901784 'move' call_tmp[901781](259887 call * i[259854] stride[259832]))
            unknown call_tmp[901786] "expr temp" "maybe param" "maybe type" "temp"
            (901789 'move' call_tmp[901786](259881 call + call_tmp[901776] call_tmp[901781]))
            unknown call_tmp[901791] "expr temp" "maybe param" "maybe type" "temp"
            (901794 'move' call_tmp[901791](259879 call chpl__intToIdx idxType[259799] call_tmp[901786]))
            (259867 call = call_tmp[901771] call_tmp[901791])
            (564175 'end of statement' idxType[259799] start[259811] strType[259787] i[259854] stride[259832])
            unknown dst[259892] "dead at end of block" "ref var"
            (651532 'init ref decl' dst[259892])
            unknown call_tmp[901796] "expr temp" "maybe param" "maybe type" "temp"
            (901799 'move' call_tmp[901796](259894 call a[259767] j[259758]))
            (651530 'move' dst[259892](651529 'addr of' call_tmp[901796]))
            (259897 'end of statement')
            const src[259899] "dead at end of block" "const" "ref var"
            (651537 'init ref decl' src[259899])
            unknown call_tmp[901801] "expr temp" "maybe param" "maybe type" "temp"
            (901804 'move' call_tmp[901801](259901 call b[259771] i[259854]))
            (651535 'move' src[259899](651534 'addr of' call_tmp[901801]))
            (259904 'end of statement' i[259854])
            unknown call_tmp[901806] "expr temp" "maybe param" "maybe type" "temp"
            (901809 'move' call_tmp[901806](259982 call == kind[259775] move[257613]))
            unknown call_tmp[901811] "expr temp" "maybe param" "maybe type" "temp"
            (901814 'move' call_tmp[901811](259989 call _cond_test call_tmp[901806]))
            if call_tmp[901811]
            {
              unknown call_tmp[901816] "expr temp" "maybe param" "maybe type" "temp"
              (901819 'move' call_tmp[901816](259935 call isArray dst[259892]))
              unknown call_tmp[901821] "expr temp" "maybe param" "maybe type" "temp"
              (901824 'move' call_tmp[901821](259937 call _cond_test call_tmp[901816]))
              if call_tmp[901821]
              {
                unknown call_tmp[901828] "expr temp" "maybe param" "maybe type" "temp"
                (901831 'move' call_tmp[901828](259912 call eltType _mt[203] a[259767]))
                unknown call_tmp[901833] "maybe param" "maybe type" "temp"
                (901836 'move' call_tmp[901833](259910 call chpl__coerceMove call_tmp[901828] src[259899](definedConst = 0)))
                unknown newArr[259908] "dead at end of block" "no auto destroy" "no copy"
                (651539 'init var' newArr[259908] call_tmp[901833])
                (259919 'end of statement' src[259899])
                (259920 '=' dst[259892] newArr[259908])
                (564183 'end of statement' dst[259892] newArr[259908])
              }
              {
                (259924 '=' dst[259892] src[259899])
                (564186 'end of statement' dst[259892] src[259899])
                unknown call_tmp[901840] "expr temp" "maybe param" "maybe type" "temp"
                (901843 'move' call_tmp[901840](259930 call eltType _mt[203] a[259767]))
                (259928 call fixRuntimeType call_tmp[901840] dst[259892])
                (564189 'end of statement' dst[259892])
              }
            }
            {
              unknown call_tmp[901845] "expr temp" "maybe param" "maybe type" "temp"
              (901848 'move' call_tmp[901845](259970 call == kind[259775] initCopy[257615]))
              unknown call_tmp[901850] "expr temp" "maybe param" "maybe type" "temp"
              (901853 'move' call_tmp[901850](259977 call _cond_test call_tmp[901845]))
              if call_tmp[901850]
              {
                unknown call_tmp[901857] "maybe param" "maybe type" "temp"
                (901860 'move' call_tmp[901857](259945 call eltType _mt[203] a[259767]))
                unknown copy[259943] "dead at end of block" "no auto destroy"
                (651541 'init var' copy[259943] src[259899] call_tmp[901857])
                (259950 'end of statement' src[259899])
                (259951 '=' dst[259892] copy[259943])
                (564192 'end of statement' dst[259892] copy[259943])
              }
              {
                unknown call_tmp[901862] "expr temp" "maybe param" "maybe type" "temp"
                (901865 'move' call_tmp[901862](259959 call == kind[259775] assign[257617]))
                unknown call_tmp[901867] "expr temp" "maybe param" "maybe type" "temp"
                (901870 'move' call_tmp[901867](259966 call _cond_test call_tmp[901862]))
                if call_tmp[901867]
                {
                  (259955 call = dst[259892] src[259899])
                  (564195 'end of statement' dst[259892] src[259899])
                }
              }
            }
          }
        }
        label _unused_continueLabel[259998]
        label _breakLabel[259997]
      }
    }
    {
      {
        unknown i[260034] "dead at end of block" "index var" "insert auto destroy"
        (651543 'init var' i[260034] 0)
        (564198 'end of statement')
        unknown tmp[260083] "maybe param" "temp"
        unknown call_tmp[901874] "expr temp" "maybe param" "maybe type" "temp"
        (901877 'move' call_tmp[901874](260040 call size _mt[203] b[259771]))
        unknown call_tmp[901879] "expr temp" "maybe param" "maybe type" "temp"
        (901882 'move' call_tmp[901879](260037 call - call_tmp[901874] 1))
        (260095 'move' tmp[260083](260093 call chpl_compute_low_param_loop_bound 0 call_tmp[901879]))
        unknown tmp[260084] "maybe param" "temp"
        unknown call_tmp[901886] "expr temp" "maybe param" "maybe type" "temp"
        (901889 'move' call_tmp[901886](260102 call size _mt[203] b[259771]))
        unknown call_tmp[901891] "expr temp" "maybe param" "maybe type" "temp"
        (901894 'move' call_tmp[901891](260100 call - call_tmp[901886] 1))
        (260108 'move' tmp[260084](260106 call chpl_compute_high_param_loop_bound 0 call_tmp[901891]))
        unknown tmp[260085] "maybe param" "temp"
        (260111 'move' tmp[260085] 1)
        ParamForLoop[260113]
        { i[260034] tmp[260083] tmp[260084] tmp[260085]
          {
            unknown call_tmp[901898] "expr temp" "maybe param" "maybe type" "temp"
            (901901 'move' call_tmp[901898](260054 call rank _mt[203] a[259767]))
            unknown call_tmp[901903] "expr temp" "maybe param" "maybe type" "temp"
            (901906 'move' call_tmp[901903](260051 call - call_tmp[901898] rank[259761]))
            unknown call_tmp[901908] "expr temp" "maybe param" "maybe type" "temp"
            (901911 'move' call_tmp[901908](260050 call j[259758] call_tmp[901903]))
            unknown call_tmp[901913] "expr temp" "maybe param" "maybe type" "temp"
            (901916 'move' call_tmp[901913](260063 call : start[259811] strType[259787]))
            unknown call_tmp[901918] "expr temp" "maybe param" "maybe type" "temp"
            (901921 'move' call_tmp[901918](260067 call * i[260034] stride[259832]))
            unknown call_tmp[901923] "expr temp" "maybe param" "maybe type" "temp"
            (901926 'move' call_tmp[901923](260061 call + call_tmp[901913] call_tmp[901918]))
            unknown call_tmp[901928] "expr temp" "maybe param" "maybe type" "temp"
            (901931 'move' call_tmp[901928](260059 call chpl__intToIdx idxType[259799] call_tmp[901923]))
            (260047 call = call_tmp[901908] call_tmp[901928])
            (564199 'end of statement' idxType[259799] start[259811] strType[259787] i[260034] stride[259832])
            unknown call_tmp[901933] "expr temp" "maybe param" "maybe type" "temp"
            (901936 'move' call_tmp[901933](260074 call - rank[259761] 1))
            unknown call_tmp[901938] "expr temp" "maybe param" "maybe type" "temp"
            (901941 'move' call_tmp[901938](260080 call b[259771] i[260034]))
            (260072 call helpInitArrFromTuple j[259758] call_tmp[901933] a[259767] call_tmp[901938] kind[259775])
            (564205 'end of statement' i[260034])
          }
        }
        label _unused_continueLabel[260087]
        label _breakLabel[260086]
      }
    }
    (625347 return _void[46])
  }
  {
    (259782 call <(259779 'lifetime_of' a[259767])(259781 'lifetime_of' b[259771]))
  }
  function initArrFromTuple[260133](ref arg a[260138]:_array[255540](?), arg b[260142]:_tuple[246](?), param arg kind[260146]:_tElt[257619]) : _unknown[42] "private" "no return value for void"
  {
    unknown j[260151] "dead at end of block" "insert auto destroy"
    unknown call_tmp[901945] "expr temp" "maybe param" "maybe type" "temp"
    (901948 'move' call_tmp[901945](260155 call rank _mt[203] a[260138]))
    unknown call_tmp[901952] "expr temp" "maybe param" "maybe type" "temp"
    (901955 'move' call_tmp[901952](260159 call _dom _mt[203] a[260138]))
    unknown call_tmp[901959] "expr temp" "maybe param" "maybe type" "temp"
    (901962 'move' call_tmp[901959](260162 call idxType _mt[203] call_tmp[901952]))
    unknown call_tmp[901964] "expr temp" "maybe param" "maybe type" "temp"
    (901967 'move' call_tmp[901964](260152 call * call_tmp[901945] call_tmp[901959]))
    (651545 'default init var' j[260151] call_tmp[901964])
    (260166 'end of statement')
    unknown call_tmp[901971] "expr temp" "maybe param" "maybe type" "temp"
    (901974 'move' call_tmp[901971](260171 call rank _mt[203] a[260138]))
    (260168 call helpInitArrFromTuple j[260151] call_tmp[901971] a[260138] b[260142] kind[260146])
    (564207 'end of statement' j[260151])
    (625349 return _void[46])
  }
  function =[260179](ref arg a[260184]:_array[255540](?), arg b[260188]:_tuple[246](?)) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    (260198 call initArrFromTuple a[260184] b[260188] assign[257617])
    (625351 return _void[46])
  }
  where {
    (260195 call(260192 call (partial) isRectangular _mt[203] a[260184]))
  }
  function _desync[260208](arg t[260211]:_syncvar[132579](?)) type : _unknown[42]
  {
    unknown ret[625355] "RVV" "temp" "type variable"
    unknown x[260216] "dead at end of block" "insert auto destroy"
    (651547 'default init var' x[260216] t[260211])
    (260219 'end of statement')
    unknown call_tmp[901980] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (901983 'move' call_tmp[901980](260222 call valType _mt[203] x[260216]))
    (625360 'move' ret[625355](625359 'deref' call_tmp[901980]))
    gotoReturn _end__desync[625353] _end__desync[625353]
    (564210 'end of statement' x[260216])
    label _end__desync[625353]
    (625357 return ret[625355])
  }
  function _desync[260227](arg t[260229]:_any[141](?)) type : _unknown[42]
  {
    unknown ret[625366] "RVV" "temp" "type variable"
    unknown x[260236] "dead at end of block" "insert auto destroy"
    (651549 'default init var' x[260236] t[260229])
    (260239 'end of statement')
    { scopeless type
      unknown call_type_tmp[578681] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[901987] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (901990 'move' call_tmp[901987](260245 call(260242 call (partial) read _mt[203] x[260236])))
      (578685 'move' call_type_tmp[578681](260246 'typeof' call_tmp[901987]))
    }
    (625371 'move' ret[625366](625370 'deref' call_type_tmp[578681]))
    gotoReturn _end__desync[625364] _end__desync[625364]
    (564212 'end of statement' x[260236])
    label _end__desync[625364]
    (625368 return ret[625366])
  }
  where {
    (260232 call isAtomicType t[260229])
  }
  function _desync[260250](arg t[260253]:_array[255540](?)) type : _unknown[42]
  {
    unknown ret[625377] "RVV" "temp" "type variable"
    unknown eltType[260258] "dead at end of block" "insert auto destroy" "type variable"
    (651554 'move' eltType[260258](651552 call chpl__eltTypeFromArrayRuntimeType t[260253]))
    const dom[260264] "dead at end of block" "const" "ref var"
    (651559 'init ref decl' dom[260264])
    unknown call_tmp[901992] "expr temp" "maybe param" "maybe type" "temp"
    (901995 'move' call_tmp[901992](260266 call chpl__domainFromArrayRuntimeType t[260253]))
    (651557 'move' dom[260264](651556 'addr of' call_tmp[901992]))
    (260269 'end of statement')
    function chpl__loopexpr_iter7[716862](arg iterator[716864]:_any[141](?)) : _unknown[42] "do not unref for yields" "compiler generated" "iterator fn"
    {
      unknown ret[717004] "RVV" "temp"
      {
        unknown _indexOfInterest[716869] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[716870] "expr temp" "temp"
        (716879 'move' _iterator[716870](716877 call _getIterator iterator[716864]))
        Defer
        {
          {
            (716896 call _freeIterator _iterator[716870])
          }
        }
        { scopeless type
          (716884 'move' _indexOfInterest[716869](716881 call iteratorIndex _iterator[716870]))
        }
        ForLoop[716871] for-expr
        {
          unknown chpl__elidedIdx[716886] "index var" "insert auto destroy"
          (716998 'end of statement')
          (716891 'move' chpl__elidedIdx[716886] _indexOfInterest[716869])
          (716999 'end of statement' chpl__elidedIdx[716886])
          {
            {
              unknown yret[717008] "YVV" "temp"
              unknown call_tmp[717014] "expr temp" "maybe param" "maybe type" "temp"
              (717017 'move' call_tmp[717014](260273 call _desync eltType[260258]))
              (717011 'move' yret[717008](717010 'deref' call_tmp[717014]))
              (716866 yield yret[717008])
            }
          }
          label _continueLabel[716874]
          _indexOfInterest[716869]
          _iterator[716870]
        }
        label _breakLabel[716875]
      }
      (717006 return ret[717004])
    }
    function chpl__loopexpr_iter7[716903](param arg tag[716907]:iterKind[52144], arg iterator[716910]:_any[141](?)) : _unknown[42] "compiler generated" "fn returns iterator"
    {
      unknown ret[717044] "RVV" "temp"
      const _leaderIterator[716922] "const" "expr temp" "temp"
      (716927 'move' _leaderIterator[716922](716924 call _toLeader iterator[716910]))
      (717049 'move' ret[717044](717048 'deref' _leaderIterator[716922]))
      (717046 return ret[717044])
    }
    where {
      unknown tmp[717020] "maybe param" "temp"
      (717031 'move' tmp[717020](716912 call == tag[716907] leader[52138]))
      unknown call_tmp[717078] "expr temp" "maybe param" "maybe type" "temp"
      (717081 'move' call_tmp[717078](717033 call _cond_invalid tmp[717020]))
      if call_tmp[717078]
      {
        (717036 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[717051] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[717052] "maybe param" "temp"
      unknown call_tmp[717083] "expr temp" "maybe param" "maybe type" "temp"
      (717086 'move' call_tmp[717083](717021 call isTrue tmp[717020]))
      (717057 'move' tmp[717052](717055 call _cond_test call_tmp[717083]))
      if tmp[717052]
      {
        unknown tmp[717059] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[717088] "expr temp" "maybe param" "maybe type" "temp"
        (717091 'move' call_tmp[717088](716916 'call resolves' "_toLeader" iterator[716910]))
        (717061 'move' tmp[717059](717024 call isTrue call_tmp[717088]))
        (717066 'move' tmp[717051](717063 '_paramFoldLogical' tmp[717052] tmp[717059]))
      }
      {
        (717071 'move' tmp[717051](717068 '_paramFoldLogical' tmp[717052] 0))
      }
      (1001692 call chpl_statementLevelSymbol tmp[717051])
    }
    function chpl__loopexpr_iter7[716931](param arg tag[716935]:iterKind[52144], arg followThis[716938]:_any[141](?), arg iterator[716940]:_any[141](?)) : _unknown[42] "do not unref for yields" "compiler generated" "iterator fn"
    {
      unknown ret[717101] "RVV" "temp"
      const _followerIterator[716947] "const" "expr temp" "temp"
      (716953 'move' _followerIterator[716947](716949 call _toFollower iterator[716940] followThis[716938]))
      {
        unknown _indexOfInterest[716962] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[716963] "expr temp" "temp"
        (716972 'move' _iterator[716963](716970 call _getIterator _followerIterator[716947]))
        Defer
        {
          {
            (716989 call _freeIterator _iterator[716963])
          }
        }
        { scopeless type
          (716977 'move' _indexOfInterest[716962](716974 call iteratorIndex _iterator[716963]))
        }
        ForLoop[716964] order-independent lowered-forall for-expr
        {
          unknown chpl__elidedIdx[716979] "index var" "insert auto destroy"
          (717095 'end of statement')
          (716984 'move' chpl__elidedIdx[716979] _indexOfInterest[716962])
          (717096 'end of statement' chpl__elidedIdx[716979])
          {
            {
              unknown yret[717105] "YVV" "temp"
              unknown call_tmp[717111] "expr temp" "maybe param" "maybe type" "temp"
              (717114 'move' call_tmp[717111](716958 call _desync eltType[260258]))
              (717108 'move' yret[717105](717107 'deref' call_tmp[717111]))
              (716956 yield yret[717105])
            }
          }
          label _continueLabel[716967]
          _indexOfInterest[716962]
          _iterator[716963]
        }
        label _breakLabel[716968]
      }
      (717103 return ret[717101])
    }
    where {
      (716943 call == tag[716935] follower[52140])
    }
    function chpl__forallexpr7[716767](arg iterExpr[716770]:_any[141](?)) : _unknown[42] "compiler generated" "compiler nested function" "maybe array type" "maybe type" "fn returns iterator"
    {
      unknown ret[717123] "RVV" "maybe type" "temp"
      function _isArrayTypeFn[716777]() : _unknown[42] "compiler generated" "inline"
      {
        unknown _iterator[716782] "temp"
        (716787 'move' _iterator[716782](716784 call _getIterator iterExpr[716770]))
        unknown _indexOfInterest[716789] "an _indexOfInterest or chpl__followIdx variable" "temp"
        (716794 'move' _indexOfInterest[716789](716791 call iteratorIndex _iterator[716782]))
        unknown chpl__elidedIdx[716797] "index var" "insert auto destroy"
        (716802 'move' chpl__elidedIdx[716797] _indexOfInterest[716789])
        unknown isType_result[716804] "param" "temp"
        { scopeless
          Try!
          {
            {
              {
                unknown call_tmp[717137] "expr temp" "maybe param" "maybe type" "temp"
                (717140 'move' call_tmp[717137](716808 call _desync eltType[260258]))
                (716812 'move' isType_result[716804](716810 call isType call_tmp[717137]))
              }
            }
          }
        }
        if isType_result[716804]
        {
          (716818 'move' _isArrayType[716780] 1)
        }
        {
          (716821 'move' _isArrayType[716780] 0)
        }
        (717119 return _void[46])
      }
      unknown _isArrayType[716780] "maybe param" "temp"
      { scopeless type
        (716828 call _isArrayTypeFn[716777])
      }
      if _isArrayType[716780]
      {
        unknown _arrayType[716830] "expr temp" "maybe type" "temp"
        unknown _domain[716833] "expr temp" "no auto destroy" "temp"
        (716838 'move' _domain[716833](716835 call chpl__ensureDomainExpr iterExpr[716770]))
        {
          unknown call_tmp[717142] "expr temp" "maybe param" "used in type" "maybe type" "temp"
          (717145 'move' call_tmp[717142](716842 call _desync eltType[260258]))
          (716847 'move' _arrayType[716830](716844 call chpl__buildArrayRuntimeType _domain[716833] call_tmp[717142]))
        }
        (717128 'move' ret[717123](717127 'deref' _arrayType[716830]))
        gotoReturn _end_chpl__forallexpr7[717121] _end_chpl__forallexpr7[717121]
      }
      {
        unknown _iterator[716853] "expr temp" "maybe ref" "temp"
        (716855 'move' _iterator[716853] iterExpr[716770])
        unknown call_tmp[717147] "expr temp" "maybe param" "maybe type" "temp"
        (717150 'move' call_tmp[717147](716858 call chpl__loopexpr_iter7 _iterator[716853]))
        (717133 'move' ret[717123](717132 'deref' call_tmp[717147]))
        gotoReturn _end_chpl__forallexpr7[717121] _end_chpl__forallexpr7[717121]
      }
      label _end_chpl__forallexpr7[717121]
      (717125 return ret[717123])
    }
    unknown call_tmp[717152] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (717155 'move' call_tmp[717152](716772 call chpl__forallexpr7 dom[260264]))
    (717159 'iterator record set shape' call_tmp[717152] dom[260264] 2)
    (625382 'move' ret[625377](625381 'deref' call_tmp[717152]))
    gotoReturn _end__desync[625375] _end__desync[625375]
    (564214 'end of statement' dom[260264] eltType[260258])
    label _end__desync[625375]
    (625379 return ret[625377])
  }
  function _desync[260279](arg t[260281]:_any[141](?)) type : _unknown[42]
  {
    unknown ret[625388] "RVV" "temp" "type variable"
    (625393 'move' ret[625388](625392 'deref' t[260281]))
    (625390 return ret[625388])
  }
  function desyncEltType[260288](arg t[260291]:_array[255540](?)) type : _unknown[42] "private"
  {
    unknown ret[625397] "RVV" "temp" "type variable"
    unknown eltType[260296] "dead at end of block" "insert auto destroy" "type variable"
    (651564 'move' eltType[260296](651562 call chpl__eltTypeFromArrayRuntimeType t[260291]))
    (564218 'end of statement')
    unknown call_tmp[901997] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (902000 'move' call_tmp[901997](260303 call _desync eltType[260296]))
    (625402 'move' ret[625397](625401 'deref' call_tmp[901997]))
    gotoReturn _end_desyncEltType[625395] _end_desyncEltType[625395]
    (564219 'end of statement' eltType[260296])
    label _end_desyncEltType[625395]
    (625399 return ret[625397])
  }
  function =[260307](ref arg a[260312]:_array[255540](?), arg b[260321] :
  unknown call_tmp[902004] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "assignop" "operator" "no return value for void"
  {
    Forall[260335] {
      induction variables:
        
        unknown e[260325] "index var" "insert auto destroy"
      iterated expressions:
        a[260312]
      shadow variables:
      other variables
        forall body
      {
        (260328 call = e[260325] b[260321])
        (564221 'end of statement' e[260325])
      }
    }
    (625406 return _void[46])
  }
  function =[260340](ref arg a[260345]:_array[255540](?), arg b[260354] :
  unknown call_tmp[902011] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "assignop" "deprecated" "operator" "no return value for void"
  {
    Forall[260374] {
      induction variables:
        
        unknown e[260364] "index var" "insert auto destroy"
      iterated expressions:
        a[260345]
      shadow variables:
      other variables
        forall body
      {
        (260367 call = e[260364] b[260354])
        (564223 'end of statement' e[260364])
      }
    }
    (625408 return _void[46])
  }
  where {
    unknown call_tmp[902018] "expr temp" "maybe param" "maybe type" "temp"
    (902021 'move' call_tmp[902018](260360 call eltType _mt[203] a[260345]))
    (260358 call isSyncType call_tmp[902018])
  }
  function +=[260380](ref arg a[260385]:_array[255540](?), arg b[260394] :
  unknown call_tmp[902025] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "assignop" "operator" "no return value for void"
  {
    Forall[260408] {
      induction variables:
        
        unknown e[260398] "index var" "insert auto destroy"
      iterated expressions:
        a[260385]
      shadow variables:
      other variables
        forall body
      {
        (260401 call += e[260398] b[260394])
        (564225 'end of statement' e[260398])
      }
    }
    (625410 return _void[46])
  }
  function +=[260413](ref arg a[260418]:_array[255540](?), arg b[260427] :
  unknown call_tmp[902032] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "assignop" "deprecated" "operator" "no return value for void"
  {
    Forall[260447] {
      induction variables:
        
        unknown e[260437] "index var" "insert auto destroy"
      iterated expressions:
        a[260418]
      shadow variables:
      other variables
        forall body
      {
        (260440 call += e[260437] b[260427])
        (564227 'end of statement' e[260437])
      }
    }
    (625412 return _void[46])
  }
  where {
    unknown call_tmp[902039] "expr temp" "maybe param" "maybe type" "temp"
    (902042 'move' call_tmp[902039](260433 call eltType _mt[203] a[260418]))
    (260431 call isSyncType call_tmp[902039])
  }
  function -=[260453](ref arg a[260458]:_array[255540](?), arg b[260467] :
  unknown call_tmp[902046] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "assignop" "operator" "no return value for void"
  {
    Forall[260481] {
      induction variables:
        
        unknown e[260471] "index var" "insert auto destroy"
      iterated expressions:
        a[260458]
      shadow variables:
      other variables
        forall body
      {
        (260474 call -= e[260471] b[260467])
        (564229 'end of statement' e[260471])
      }
    }
    (625414 return _void[46])
  }
  function -=[260486](ref arg a[260491]:_array[255540](?), arg b[260500] :
  unknown call_tmp[902053] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "assignop" "deprecated" "operator" "no return value for void"
  {
    Forall[260520] {
      induction variables:
        
        unknown e[260510] "index var" "insert auto destroy"
      iterated expressions:
        a[260491]
      shadow variables:
      other variables
        forall body
      {
        (260513 call -= e[260510] b[260500])
        (564231 'end of statement' e[260510])
      }
    }
    (625416 return _void[46])
  }
  where {
    unknown call_tmp[902060] "expr temp" "maybe param" "maybe type" "temp"
    (902063 'move' call_tmp[902060](260506 call eltType _mt[203] a[260491]))
    (260504 call isSyncType call_tmp[902060])
  }
  function *=[260526](ref arg a[260531]:_array[255540](?), arg b[260540] :
  unknown call_tmp[902067] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "assignop" "operator" "no return value for void"
  {
    Forall[260554] {
      induction variables:
        
        unknown e[260544] "index var" "insert auto destroy"
      iterated expressions:
        a[260531]
      shadow variables:
      other variables
        forall body
      {
        (260547 call *= e[260544] b[260540])
        (564233 'end of statement' e[260544])
      }
    }
    (625418 return _void[46])
  }
  function *=[260559](ref arg a[260564]:_array[255540](?), arg b[260573] :
  unknown call_tmp[902074] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "assignop" "deprecated" "operator" "no return value for void"
  {
    Forall[260593] {
      induction variables:
        
        unknown e[260583] "index var" "insert auto destroy"
      iterated expressions:
        a[260564]
      shadow variables:
      other variables
        forall body
      {
        (260586 call *= e[260583] b[260573])
        (564235 'end of statement' e[260583])
      }
    }
    (625420 return _void[46])
  }
  where {
    unknown call_tmp[902081] "expr temp" "maybe param" "maybe type" "temp"
    (902084 'move' call_tmp[902081](260579 call eltType _mt[203] a[260564]))
    (260577 call isSyncType call_tmp[902081])
  }
  function /=[260599](ref arg a[260604]:_array[255540](?), arg b[260613] :
  unknown call_tmp[902088] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "assignop" "operator" "no return value for void"
  {
    Forall[260627] {
      induction variables:
        
        unknown e[260617] "index var" "insert auto destroy"
      iterated expressions:
        a[260604]
      shadow variables:
      other variables
        forall body
      {
        (260620 call /= e[260617] b[260613])
        (564237 'end of statement' e[260617])
      }
    }
    (625422 return _void[46])
  }
  function /=[260632](ref arg a[260637]:_array[255540](?), arg b[260646] :
  unknown call_tmp[902095] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "assignop" "deprecated" "operator" "no return value for void"
  {
    Forall[260666] {
      induction variables:
        
        unknown e[260656] "index var" "insert auto destroy"
      iterated expressions:
        a[260637]
      shadow variables:
      other variables
        forall body
      {
        (260659 call /= e[260656] b[260646])
        (564239 'end of statement' e[260656])
      }
    }
    (625424 return _void[46])
  }
  where {
    unknown call_tmp[902102] "expr temp" "maybe param" "maybe type" "temp"
    (902105 'move' call_tmp[902102](260652 call eltType _mt[203] a[260637]))
    (260650 call isSyncType call_tmp[902102])
  }
  function %=[260672](ref arg a[260677]:_array[255540](?), arg b[260686] :
  unknown call_tmp[902109] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "assignop" "operator" "no return value for void"
  {
    Forall[260700] {
      induction variables:
        
        unknown e[260690] "index var" "insert auto destroy"
      iterated expressions:
        a[260677]
      shadow variables:
      other variables
        forall body
      {
        (260693 call %= e[260690] b[260686])
        (564241 'end of statement' e[260690])
      }
    }
    (625426 return _void[46])
  }
  function %=[260705](ref arg a[260710]:_array[255540](?), arg b[260719] :
  unknown call_tmp[902116] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "assignop" "deprecated" "operator" "no return value for void"
  {
    Forall[260739] {
      induction variables:
        
        unknown e[260729] "index var" "insert auto destroy"
      iterated expressions:
        a[260710]
      shadow variables:
      other variables
        forall body
      {
        (260732 call %= e[260729] b[260719])
        (564243 'end of statement' e[260729])
      }
    }
    (625428 return _void[46])
  }
  where {
    unknown call_tmp[902123] "expr temp" "maybe param" "maybe type" "temp"
    (902126 'move' call_tmp[902123](260725 call eltType _mt[203] a[260710]))
    (260723 call isSyncType call_tmp[902123])
  }
  function **=[260745](ref arg a[260750]:_array[255540](?), arg b[260759] :
  unknown call_tmp[902130] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "assignop" "operator" "no return value for void"
  {
    Forall[260773] {
      induction variables:
        
        unknown e[260763] "index var" "insert auto destroy"
      iterated expressions:
        a[260750]
      shadow variables:
      other variables
        forall body
      {
        (260766 call **= e[260763] b[260759])
        (564245 'end of statement' e[260763])
      }
    }
    (625430 return _void[46])
  }
  function **=[260778](ref arg a[260783]:_array[255540](?), arg b[260792] :
  unknown call_tmp[902137] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "assignop" "deprecated" "operator" "no return value for void"
  {
    Forall[260812] {
      induction variables:
        
        unknown e[260802] "index var" "insert auto destroy"
      iterated expressions:
        a[260783]
      shadow variables:
      other variables
        forall body
      {
        (260805 call **= e[260802] b[260792])
        (564247 'end of statement' e[260802])
      }
    }
    (625432 return _void[46])
  }
  where {
    unknown call_tmp[902144] "expr temp" "maybe param" "maybe type" "temp"
    (902147 'move' call_tmp[902144](260798 call eltType _mt[203] a[260783]))
    (260796 call isSyncType call_tmp[902144])
  }
  function &=[260818](ref arg a[260823]:_array[255540](?), arg b[260832] :
  unknown call_tmp[902151] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "assignop" "operator" "no return value for void"
  {
    Forall[260846] {
      induction variables:
        
        unknown e[260836] "index var" "insert auto destroy"
      iterated expressions:
        a[260823]
      shadow variables:
      other variables
        forall body
      {
        (260839 call &= e[260836] b[260832])
        (564249 'end of statement' e[260836])
      }
    }
    (625434 return _void[46])
  }
  function &=[260851](ref arg a[260856]:_array[255540](?), arg b[260865] :
  unknown call_tmp[902158] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "assignop" "deprecated" "operator" "no return value for void"
  {
    Forall[260885] {
      induction variables:
        
        unknown e[260875] "index var" "insert auto destroy"
      iterated expressions:
        a[260856]
      shadow variables:
      other variables
        forall body
      {
        (260878 call &= e[260875] b[260865])
        (564251 'end of statement' e[260875])
      }
    }
    (625436 return _void[46])
  }
  where {
    unknown call_tmp[902165] "expr temp" "maybe param" "maybe type" "temp"
    (902168 'move' call_tmp[902165](260871 call eltType _mt[203] a[260856]))
    (260869 call isSyncType call_tmp[902165])
  }
  function |=[260891](ref arg a[260896]:_array[255540](?), arg b[260905] :
  unknown call_tmp[902172] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "assignop" "operator" "no return value for void"
  {
    Forall[260919] {
      induction variables:
        
        unknown e[260909] "index var" "insert auto destroy"
      iterated expressions:
        a[260896]
      shadow variables:
      other variables
        forall body
      {
        (260912 call |= e[260909] b[260905])
        (564253 'end of statement' e[260909])
      }
    }
    (625438 return _void[46])
  }
  function |=[260924](ref arg a[260929]:_array[255540](?), arg b[260938] :
  unknown call_tmp[902179] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "assignop" "deprecated" "operator" "no return value for void"
  {
    Forall[260958] {
      induction variables:
        
        unknown e[260948] "index var" "insert auto destroy"
      iterated expressions:
        a[260929]
      shadow variables:
      other variables
        forall body
      {
        (260951 call |= e[260948] b[260938])
        (564255 'end of statement' e[260948])
      }
    }
    (625440 return _void[46])
  }
  where {
    unknown call_tmp[902186] "expr temp" "maybe param" "maybe type" "temp"
    (902189 'move' call_tmp[902186](260944 call eltType _mt[203] a[260929]))
    (260942 call isSyncType call_tmp[902186])
  }
  function ^=[260964](ref arg a[260969]:_array[255540](?), arg b[260978] :
  unknown call_tmp[902193] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "assignop" "operator" "no return value for void"
  {
    Forall[260992] {
      induction variables:
        
        unknown e[260982] "index var" "insert auto destroy"
      iterated expressions:
        a[260969]
      shadow variables:
      other variables
        forall body
      {
        (260985 call ^= e[260982] b[260978])
        (564257 'end of statement' e[260982])
      }
    }
    (625442 return _void[46])
  }
  function ^=[260997](ref arg a[261002]:_array[255540](?), arg b[261011] :
  unknown call_tmp[902200] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "assignop" "deprecated" "operator" "no return value for void"
  {
    Forall[261031] {
      induction variables:
        
        unknown e[261021] "index var" "insert auto destroy"
      iterated expressions:
        a[261002]
      shadow variables:
      other variables
        forall body
      {
        (261024 call ^= e[261021] b[261011])
        (564259 'end of statement' e[261021])
      }
    }
    (625444 return _void[46])
  }
  where {
    unknown call_tmp[902207] "expr temp" "maybe param" "maybe type" "temp"
    (902210 'move' call_tmp[902207](261017 call eltType _mt[203] a[261002]))
    (261015 call isSyncType call_tmp[902207])
  }
  function >>=[261037](ref arg a[261042]:_array[255540](?), arg b[261051] :
  unknown call_tmp[902214] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "assignop" "operator" "no return value for void"
  {
    Forall[261065] {
      induction variables:
        
        unknown e[261055] "index var" "insert auto destroy"
      iterated expressions:
        a[261042]
      shadow variables:
      other variables
        forall body
      {
        (261058 call >>= e[261055] b[261051])
        (564261 'end of statement' e[261055])
      }
    }
    (625446 return _void[46])
  }
  function >>=[261070](ref arg a[261075]:_array[255540](?), arg b[261084] :
  unknown call_tmp[902221] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "assignop" "deprecated" "operator" "no return value for void"
  {
    Forall[261104] {
      induction variables:
        
        unknown e[261094] "index var" "insert auto destroy"
      iterated expressions:
        a[261075]
      shadow variables:
      other variables
        forall body
      {
        (261097 call >>= e[261094] b[261084])
        (564263 'end of statement' e[261094])
      }
    }
    (625448 return _void[46])
  }
  where {
    unknown call_tmp[902228] "expr temp" "maybe param" "maybe type" "temp"
    (902231 'move' call_tmp[902228](261090 call eltType _mt[203] a[261075]))
    (261088 call isSyncType call_tmp[902228])
  }
  function <<=[261110](ref arg a[261115]:_array[255540](?), arg b[261124] :
  unknown call_tmp[902235] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "assignop" "operator" "no return value for void"
  {
    Forall[261138] {
      induction variables:
        
        unknown e[261128] "index var" "insert auto destroy"
      iterated expressions:
        a[261115]
      shadow variables:
      other variables
        forall body
      {
        (261131 call <<= e[261128] b[261124])
        (564265 'end of statement' e[261128])
      }
    }
    (625450 return _void[46])
  }
  function <<=[261143](ref arg a[261148]:_array[255540](?), arg b[261157] :
  unknown call_tmp[902242] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "assignop" "deprecated" "operator" "no return value for void"
  {
    Forall[261177] {
      induction variables:
        
        unknown e[261167] "index var" "insert auto destroy"
      iterated expressions:
        a[261148]
      shadow variables:
      other variables
        forall body
      {
        (261170 call <<= e[261167] b[261157])
        (564267 'end of statement' e[261167])
      }
    }
    (625452 return _void[46])
  }
  where {
    unknown call_tmp[902249] "expr temp" "maybe param" "maybe type" "temp"
    (902252 'move' call_tmp[902249](261163 call eltType _mt[203] a[261148]))
    (261161 call isSyncType call_tmp[902249])
  }
  function <=>[261183](ref arg x[261189]:_array[255540](?), ref arg y[261196]:_array[255540](?)) : _unknown[42] "inline" "operator" "no return value for void"
  {
    unknown call_tmp[902256] "expr temp" "maybe param" "maybe type" "temp"
    (902259 'move' call_tmp[902256](261209 call rank _mt[203] x[261189]))
    unknown call_tmp[902263] "expr temp" "maybe param" "maybe type" "temp"
    (902266 'move' call_tmp[902263](261213 call rank _mt[203] y[261196]))
    unknown call_tmp[902268] "expr temp" "maybe param" "maybe type" "temp"
    (902271 'move' call_tmp[902268](261206 call != call_tmp[902256] call_tmp[902263]))
    unknown call_tmp[902273] "expr temp" "maybe param" "maybe type" "temp"
    (902276 'move' call_tmp[902273](261216 call _cond_test call_tmp[902268]))
    if call_tmp[902273]
    {
      (261201 call compilerError "rank mismatch in array swap")
    }
    unknown call_tmp[902278] "expr temp" "maybe param" "maybe type" "temp"
    (902281 'move' call_tmp[902278](261229 call _cond_test 1))
    if call_tmp[902278]
    {
      (261222 call checkArrayShapesUponAssignment x[261189] y[261196](forSwap = 1))
    }
    unknown hasSwapped[261235] "dead at end of block" "insert auto destroy"
    (651566 'init var' hasSwapped[261235] 0 bool[19])
    (261239 'end of statement')
    unknown call_tmp[902285] "expr temp" "maybe param" "maybe type" "temp"
    (902288 'move' call_tmp[902285](261282 call eltType _mt[203] x[261189]))
    unknown call_tmp[902292] "expr temp" "maybe param" "maybe type" "temp"
    (902295 'move' call_tmp[902292](261286 call eltType _mt[203] y[261196]))
    unknown call_tmp[902297] "expr temp" "maybe param" "maybe type" "temp"
    (902300 'move' call_tmp[902297](261279 call == call_tmp[902285] call_tmp[902292]))
    unknown call_tmp[902302] "expr temp" "maybe param" "maybe type" "temp"
    (902305 'move' call_tmp[902302](261289 call _cond_test call_tmp[902297]))
    if call_tmp[902302]
    {
      unknown call_tmp[902309] "expr temp" "maybe param" "maybe type" "temp"
      (902312 'move' call_tmp[902309](261265 call _value _mt[203] x[261189]))
      unknown call_tmp[902316] "expr temp" "maybe param" "maybe type" "temp"
      (902319 'move' call_tmp[902316](261272 call _value _mt[203] y[261196]))
      unknown call_tmp[902321] "expr temp" "maybe param" "maybe type" "temp"
      (902324 'move' call_tmp[902321](261263 call canResolveMethod module=[222] Reflection[1804] call_tmp[902309] "doiOptimizedSwap" call_tmp[902316]))
      unknown call_tmp[902326] "expr temp" "maybe param" "maybe type" "temp"
      (902329 'move' call_tmp[902326](261275 call _cond_test call_tmp[902321]))
      if call_tmp[902326]
      {
        unknown call_tmp[902333] "expr temp" "maybe param" "maybe type" "temp"
        (902336 'move' call_tmp[902333](261246 call _value _mt[203] x[261189]))
        unknown call_tmp[902342] "expr temp" "maybe param" "maybe type" "temp"
        (902345 'move' call_tmp[902342](261256 call _value _mt[203] y[261196]))
        unknown call_tmp[902347] "expr temp" "maybe param" "maybe type" "temp"
        (902350 'move' call_tmp[902347](261254 call(261251 call (partial) doiOptimizedSwap _mt[203] call_tmp[902333]) call_tmp[902342]))
        (261242 call = hasSwapped[261235] call_tmp[902347])
        (564271 'end of statement' hasSwapped[261235])
      }
      (408274 'referenced modules list' Reflection[1804])
    }
    unknown call_tmp[902352] "expr temp" "maybe param" "maybe type" "temp"
    (902355 'move' call_tmp[902352](261316 call ! hasSwapped[261235]))
    unknown call_tmp[902357] "expr temp" "maybe param" "maybe type" "temp"
    (902360 'move' call_tmp[902357](261319 call _cond_test call_tmp[902352]))
    if call_tmp[902357]
    {
      Forall[261312] {
        induction variables:
          
          unknown a[261295] "index var" "insert auto destroy"
          
          unknown b[261297] "index var" "insert auto destroy"
        iterated expressions:
          x[261189]
          y[261196]
        shadow variables:
        other variables
          forall body
        {
          (261305 call <=> a[261295] b[261297])
          (564273 'end of statement' a[261295] b[261297])
        }
      }
    }
    (625454 return _void[46])
  }
  function reshape[261325](arg A[261330]:_array[255540](?), arg D[261334]:_domain[225034](?)) : _unknown[42]
  {
    unknown ret[625458] "RVV" "temp"
    unknown call_tmp[902364] "expr temp" "maybe param" "maybe type" "temp"
    (902367 'move' call_tmp[902364](261355 call(261352 call (partial) isRectangular _mt[203] D[261334])))
    unknown call_tmp[902369] "expr temp" "maybe param" "maybe type" "temp"
    (902372 'move' call_tmp[902369](261349 call ! call_tmp[902364]))
    unknown call_tmp[902374] "expr temp" "maybe param" "maybe type" "temp"
    (902377 'move' call_tmp[902374](261356 call _cond_test call_tmp[902369]))
    if call_tmp[902374]
    {
      unknown call_tmp[902379] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (902382 'move' call_tmp[902379](261346 'typeof' D[261334]))
      unknown call_tmp[902384] "expr temp" "maybe param" "maybe type" "temp"
      (902387 'move' call_tmp[902384](261343 call : call_tmp[902379] string[244]))
      (261339 call compilerError "reshape(A,D) is meaningful only when D is a rectangular domain; got D: " call_tmp[902384])
    }
    unknown call_tmp[902391] "expr temp" "maybe param" "maybe type" "temp"
    (902394 'move' call_tmp[902391](261391 call(261388 call (partial) sizeAs _mt[203] A[261330]) int(64)[10]))
    unknown call_tmp[902398] "expr temp" "maybe param" "maybe type" "temp"
    (902401 'move' call_tmp[902398](261397 call(261394 call (partial) sizeAs _mt[203] D[261334]) int(64)[10]))
    unknown call_tmp[902403] "expr temp" "maybe param" "maybe type" "temp"
    (902406 'move' call_tmp[902403](261385 call != call_tmp[902391] call_tmp[902398]))
    unknown call_tmp[902408] "expr temp" "maybe param" "maybe type" "temp"
    (902411 'move' call_tmp[902408](261399 call _cond_test call_tmp[902403]))
    if call_tmp[902408]
    {
      unknown call_tmp[902415] "expr temp" "maybe param" "maybe type" "temp"
      (902418 'move' call_tmp[902415](261370 call(261367 call (partial) sizeAs _mt[203] A[261330]) int(64)[10]))
      unknown call_tmp[902422] "expr temp" "maybe param" "maybe type" "temp"
      (902425 'move' call_tmp[902422](261379 call(261376 call (partial) sizeAs _mt[203] D[261334]) int(64)[10]))
      (261362 call halt "reshape(A,D) is invoked when A has " call_tmp[902415] " elements, but D has " call_tmp[902422] " indices")
    }
    unknown B[261405] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter8[717177](arg iterator[717179]:_any[141](?)) : _unknown[42] "do not unref for yields" "compiler generated" "iterator fn"
    {
      unknown ret[717242] "RVV" "temp"
      {
        unknown _indexOfInterest[717184] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[717185] "expr temp" "temp"
        (717194 'move' _iterator[717185](717192 call _getIteratorZip iterator[717179]))
        Defer
        {
          {
            (717222 call _freeIterator _iterator[717185])
          }
        }
        { scopeless type
          (717199 'move' _indexOfInterest[717184](717196 call iteratorIndex _iterator[717185]))
        }
        ForLoop[717186] order-independent for-expr
        {
          (717204 call _check_tuple_var_decl _indexOfInterest[717184] 2)
          (717231 'end of statement')
          unknown i[261416] "index var" "insert auto destroy"
          (717232 'end of statement')
          (717211 'move' i[261416](717208 call _indexOfInterest[717184] 0))
          (717233 'end of statement' i[261416])
          unknown a[261418] "index var" "insert auto destroy"
          (717235 'end of statement')
          (717217 'move' a[261418](717214 call _indexOfInterest[717184] 1))
          (717236 'end of statement' a[261418])
          {
            {
              unknown yret[717246] "YVV" "temp"
              (717249 'move' yret[717246](717248 'deref' a[261418]))
              (717181 yield yret[717246])
              (717238 'end of statement' a[261418])
            }
          }
          label _continueLabel[717189]
          _indexOfInterest[717184]
          _iterator[717185]
        }
        label _breakLabel[717190]
      }
      (717244 return ret[717242])
    }
    function chpl__forexpr8[717161](arg iterExpr[717164]:_any[141](?)) : _unknown[42] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[717255] "RVV" "temp"
      unknown _iterator[717168] "expr temp" "maybe ref" "temp"
      (717170 'move' _iterator[717168] iterExpr[717164])
      unknown call_tmp[717262] "expr temp" "maybe param" "maybe type" "temp"
      (717265 'move' call_tmp[717262](717173 call chpl__loopexpr_iter8 _iterator[717168]))
      (717260 'move' ret[717255](717259 'deref' call_tmp[717262]))
      (717257 return ret[717255])
    }
    unknown call_tmp[717267] "expr temp" "maybe param" "maybe type" "temp"
    (717270 'move' call_tmp[717267](261425 call _build_tuple D[261334] A[261330]))
    unknown call_tmp[717272] "maybe param" "maybe type" "temp"
    (717275 'move' call_tmp[717272](717166 call chpl__forexpr8 call_tmp[717267]))
    (717279 'iterator record set shape' call_tmp[717272] D[261334] 0)
    unknown call_tmp[902427] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (902430 'move' call_tmp[902427](261407 call chpl__ensureDomainExpr D[261334]))
    unknown call_tmp[902434] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (902437 'move' call_tmp[902434](261410 call eltType _mt[203] A[261330]))
    unknown call_tmp[902439] "maybe param" "maybe type" "temp"
    (902442 'move' call_tmp[902439](261413 call chpl__buildArrayRuntimeType call_tmp[902427] call_tmp[902434]))
    (651568 'init var' B[261405] call_tmp[717272] call_tmp[902439])
    (261431 'end of statement')
    (625463 'move' ret[625458](625462 'deref' B[261405]))
    gotoReturn _end_reshape[625456] _end_reshape[625456]
    (564278 'end of statement' B[261405])
    label _end_reshape[625456]
    (625460 return ret[625458])
  }
  function reshape[261436](arg A[261439]:_iteratorRecord[165](?), arg D[261443]:_domain[225034](?)) : _unknown[42]
  {
    unknown ret[625469] "RVV" "temp"
    unknown call_tmp[902446] "expr temp" "maybe param" "maybe type" "temp"
    (902449 'move' call_tmp[902446](261462 call(261459 call (partial) isRectangular _mt[203] D[261443])))
    unknown call_tmp[902451] "expr temp" "maybe param" "maybe type" "temp"
    (902454 'move' call_tmp[902451](261456 call ! call_tmp[902446]))
    unknown call_tmp[902456] "expr temp" "maybe param" "maybe type" "temp"
    (902459 'move' call_tmp[902456](261463 call _cond_test call_tmp[902451]))
    if call_tmp[902456]
    {
      unknown call_tmp[902461] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (902464 'move' call_tmp[902461](261453 'typeof' D[261443]))
      unknown call_tmp[902466] "expr temp" "maybe param" "maybe type" "temp"
      (902469 'move' call_tmp[902466](261450 call : call_tmp[902461] string[244]))
      (261448 call compilerError "reshape(A,D) is meaningful only when D is a rectangular domain; got D: " call_tmp[902466])
    }
    unknown B[261469] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter9[717297](arg iterator[717299]:_any[141](?)) : _unknown[42] "do not unref for yields" "compiler generated" "iterator fn"
    {
      unknown ret[717362] "RVV" "temp"
      {
        unknown _indexOfInterest[717304] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[717305] "expr temp" "temp"
        (717314 'move' _iterator[717305](717312 call _getIteratorZip iterator[717299]))
        Defer
        {
          {
            (717342 call _freeIterator _iterator[717305])
          }
        }
        { scopeless type
          (717319 'move' _indexOfInterest[717304](717316 call iteratorIndex _iterator[717305]))
        }
        ForLoop[717306] order-independent for-expr
        {
          (717324 call _check_tuple_var_decl _indexOfInterest[717304] 2)
          (717351 'end of statement')
          unknown i[261471] "index var" "insert auto destroy"
          (717352 'end of statement')
          (717331 'move' i[261471](717328 call _indexOfInterest[717304] 0))
          (717353 'end of statement' i[261471])
          unknown a[261473] "index var" "insert auto destroy"
          (717355 'end of statement')
          (717337 'move' a[261473](717334 call _indexOfInterest[717304] 1))
          (717356 'end of statement' a[261473])
          {
            {
              unknown yret[717366] "YVV" "temp"
              (717369 'move' yret[717366](717368 'deref' a[261473]))
              (717301 yield yret[717366])
              (717358 'end of statement' a[261473])
            }
          }
          label _continueLabel[717309]
          _indexOfInterest[717304]
          _iterator[717305]
        }
        label _breakLabel[717310]
      }
      (717364 return ret[717362])
    }
    function chpl__forexpr9[717281](arg iterExpr[717284]:_any[141](?)) : _unknown[42] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[717375] "RVV" "temp"
      unknown _iterator[717288] "expr temp" "maybe ref" "temp"
      (717290 'move' _iterator[717288] iterExpr[717284])
      unknown call_tmp[717382] "expr temp" "maybe param" "maybe type" "temp"
      (717385 'move' call_tmp[717382](717293 call chpl__loopexpr_iter9 _iterator[717288]))
      (717380 'move' ret[717375](717379 'deref' call_tmp[717382]))
      (717377 return ret[717375])
    }
    unknown call_tmp[717387] "expr temp" "maybe param" "maybe type" "temp"
    (717390 'move' call_tmp[717387](261480 call _build_tuple D[261443] A[261439]))
    unknown call_tmp[717392] "maybe param" "maybe type" "temp"
    (717395 'move' call_tmp[717392](717286 call chpl__forexpr9 call_tmp[717387]))
    (717399 'iterator record set shape' call_tmp[717392] D[261443] 0)
    (651570 'init var' B[261469] call_tmp[717392])
    (261486 'end of statement')
    (625474 'move' ret[625469](625473 'deref' B[261469]))
    gotoReturn _end_reshape[625467] _end_reshape[625467]
    (564281 'end of statement' B[261469])
    label _end_reshape[625467]
    (625471 return ret[625469])
  }
  function linearize[261491](arg Xs[261493]:_any[141](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[625480] "RVV" "temp"
    {
      unknown _indexOfInterest[261502] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[261503] "expr temp" "temp"
      (261512 'move' _iterator[261503](261510 call _getIterator Xs[261493]))
      Defer
      {
        {
          (261527 call _freeIterator _iterator[261503])
        }
      }
      { scopeless type
        (261517 'move' _indexOfInterest[261502](261514 call iteratorIndex _iterator[261503]))
      }
      ForLoop[261504]
      {
        unknown x[261496] "index var" "insert auto destroy"
        (564284 'end of statement')
        (261522 'move' x[261496] _indexOfInterest[261502])
        (564285 'end of statement' x[261496])
        unknown yret[625484] "YVV" "temp"
        (625487 'move' yret[625484](625486 'deref' x[261496]))
        (261499 yield yret[625484])
        (564287 'end of statement' x[261496])
        label _continueLabel[261507]
        _indexOfInterest[261502]
        _iterator[261503]
      }
      label _breakLabel[261508]
    }
    (625482 return ret[625480])
  }
  function chpl__initCopy[261536](const  ref arg rhs[261539]:_domain[225034](?), arg definedConst[261543]:bool[19]) : _unknown[42] "init copy fn"
  {
    unknown ret[625492] "RVV" "temp"
    unknown call_tmp[902473] "expr temp" "maybe param" "maybe type" "temp"
    (902476 'move' call_tmp[902473](261558 call distribution _mt[203] rhs[261539]))
    unknown call_tmp[902480] "expr temp" "maybe param" "maybe type" "temp"
    (902483 'move' call_tmp[902480](261562 call rank _mt[203] rhs[261539]))
    unknown call_tmp[902487] "expr temp" "maybe param" "maybe type" "temp"
    (902490 'move' call_tmp[902487](261566 call idxType _mt[203] rhs[261539]))
    unknown call_tmp[902494] "expr temp" "maybe param" "maybe type" "temp"
    (902497 'move' call_tmp[902494](261570 call strides _mt[203] rhs[261539]))
    unknown call_tmp[902501] "expr temp" "maybe param" "maybe type" "temp"
    (902504 'move' call_tmp[902501](261577 call(261574 call (partial) dims _mt[203] rhs[261539])))
    unknown call_tmp[902506] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (902509 'move' call_tmp[902506](1000449 'new' _domain[225034](?) call_tmp[902473] call_tmp[902480] call_tmp[902487] call_tmp[902494] call_tmp[902501](definedConst = definedConst[261543])))
    unknown lhs[261553] "dead at end of block" "insert auto destroy"
    (651572 'init var' lhs[261553] call_tmp[902506])
    (261581 'end of statement')
    (625497 'move' ret[625492](625496 'deref' lhs[261553]))
    gotoReturn _end_chpl__initCopy[625490] _end_chpl__initCopy[625490]
    (564289 'end of statement' lhs[261553])
    label _end_chpl__initCopy[625490]
    (625494 return ret[625492])
  }
  where {
    (261550 call(261547 call (partial) isRectangular _mt[203] rhs[261539]))
  }
  function chpl__initCopy[261587](const  ref arg rhs[261590]:_domain[225034](?), arg definedConst[261594]:bool[19]) : _unknown[42] "init copy fn"
  {
    unknown ret[625503] "RVV" "temp"
    unknown call_tmp[902515] "expr temp" "maybe param" "maybe type" "temp"
    (902518 'move' call_tmp[902515](261609 call distribution _mt[203] rhs[261590]))
    unknown call_tmp[902522] "expr temp" "maybe param" "maybe type" "temp"
    (902525 'move' call_tmp[902522](261613 call idxType _mt[203] rhs[261590]))
    unknown call_tmp[902529] "expr temp" "maybe param" "maybe type" "temp"
    (902532 'move' call_tmp[902529](261617 call parSafe _mt[203] rhs[261590]))
    unknown call_tmp[902534] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (902537 'move' call_tmp[902534](1000450 'new' _domain[225034](?) call_tmp[902515] call_tmp[902522] call_tmp[902529](definedConst = definedConst[261594])))
    unknown lhs[261604] "dead at end of block" "insert auto destroy"
    (651574 'init var' lhs[261604] call_tmp[902534])
    (261623 'end of statement')
    unknown call_tmp[902541] "expr temp" "maybe param" "maybe type" "temp"
    (902544 'move' call_tmp[902541](261625 call _instance _mt[203] lhs[261604]))
    (261631 call(261628 call (partial) dsiAssignDomain _mt[203] call_tmp[902541]) rhs[261590](lhsPrivate = 1))
    (564291 'end of statement' lhs[261604])
    (625508 'move' ret[625503](625507 'deref' lhs[261604]))
    gotoReturn _end_chpl__initCopy[625501] _end_chpl__initCopy[625501]
    (564293 'end of statement' lhs[261604])
    label _end_chpl__initCopy[625501]
    (625505 return ret[625503])
  }
  where {
    (261601 call(261598 call (partial) isAssociative _mt[203] rhs[261590]))
  }
  function chpl__initCopy[261640](const  ref arg rhs[261643]:_domain[225034](?), arg definedConst[261647]:bool[19]) : _unknown[42] "init copy fn"
  {
    unknown ret[625514] "RVV" "temp"
    unknown call_tmp[902552] "expr temp" "maybe param" "maybe type" "temp"
    (902555 'move' call_tmp[902552](261662 call distribution _mt[203] rhs[261643]))
    unknown call_tmp[902559] "expr temp" "maybe param" "maybe type" "temp"
    (902562 'move' call_tmp[902559](261666 call parentDom _mt[203] rhs[261643]))
    unknown call_tmp[902564] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (902567 'move' call_tmp[902564](1000451 'new' _domain[225034](?) call_tmp[902552] call_tmp[902559](definedConst = definedConst[261647])))
    unknown lhs[261657] "dead at end of block" "insert auto destroy"
    (651576 'init var' lhs[261657] call_tmp[902564])
    (261672 'end of statement')
    unknown call_tmp[902571] "expr temp" "maybe param" "maybe type" "temp"
    (902574 'move' call_tmp[902571](261674 call _instance _mt[203] lhs[261657]))
    (261680 call(261677 call (partial) dsiAssignDomain _mt[203] call_tmp[902571]) rhs[261643](lhsPrivate = 1))
    (564295 'end of statement' lhs[261657])
    (625519 'move' ret[625514](625518 'deref' lhs[261657]))
    gotoReturn _end_chpl__initCopy[625512] _end_chpl__initCopy[625512]
    (564297 'end of statement' lhs[261657])
    label _end_chpl__initCopy[625512]
    (625516 return ret[625514])
  }
  where {
    (261654 call(261651 call (partial) isSparse _mt[203] rhs[261643]))
  }
  function chpl__autoCopy[261689](const  ref arg x[261692]:_domain[225034](?), arg definedConst[261696]:bool[19]) : _unknown[42] "auto copy fn"
  {
    unknown ret[625525] "RVV" "temp"
    unknown call_tmp[902580] "maybe param" "maybe type" "temp"
    (902583 'move' call_tmp[902580](261703 call chpl__initCopy x[261692] definedConst[261696]))
    unknown b[261701] "dead at end of block" "insert auto destroy" "no copy"
    (651578 'init var' b[261701] call_tmp[902580])
    (261707 'end of statement')
    (625530 'move' ret[625525](625529 'deref' b[261701]))
    gotoReturn _end_chpl__autoCopy[625523] _end_chpl__autoCopy[625523]
    (564299 'end of statement' b[261701])
    label _end_chpl__autoCopy[625523]
    (625527 return ret[625525])
  }
  unknown localizeConstDomains[261718] "config" "param"
  unknown debugLocalizedConstDomains[261714] "config" "param"
  function chpl__initCopy[261722](const  ref arg rhs[261727]:_array[255540](?), arg definedConst[261731]:bool[19]) : _unknown[42] "init copy fn"
  {
    unknown ret[625536] "RVV" "temp"
    unknown tmp[501630] "maybe param" "temp"
    unknown tmp[501651] "maybe param" "temp"
    unknown tmp[501672] "maybe param" "temp"
    (501683 'move' tmp[501672] localizeConstDomains[261718])
    unknown call_tmp[902585] "expr temp" "maybe param" "maybe type" "temp"
    (902588 'move' call_tmp[902585](501685 call _cond_invalid tmp[501672]))
    if call_tmp[902585]
    {
      (501688 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[701652] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[701653] "maybe param" "temp"
    unknown call_tmp[902590] "expr temp" "maybe param" "maybe type" "temp"
    (902593 'move' call_tmp[902590](501673 call isTrue tmp[501672]))
    (701658 'move' tmp[701653](701656 call _cond_test call_tmp[902590]))
    if tmp[701653]
    {
      unknown tmp[701660] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[902595] "expr temp" "maybe param" "maybe type" "temp"
      (902598 'move' call_tmp[902595](261744 call > numLocales[305007] 1))
      (701662 'move' tmp[701660](501676 call isTrue call_tmp[902595]))
      (701667 'move' tmp[701652](701664 '_paramFoldLogical' tmp[701653] tmp[701660]))
    }
    {
      (701672 'move' tmp[701652](701669 '_paramFoldLogical' tmp[701653] 0))
    }
    (501662 'move' tmp[501651] tmp[701652])
    unknown call_tmp[902600] "expr temp" "maybe param" "maybe type" "temp"
    (902603 'move' call_tmp[902600](501664 call _cond_invalid tmp[501651]))
    if call_tmp[902600]
    {
      (501667 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[701706] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[701707] "maybe param" "temp"
    unknown call_tmp[902605] "expr temp" "maybe param" "maybe type" "temp"
    (902608 'move' call_tmp[902605](501652 call isTrue tmp[501651]))
    (701712 'move' tmp[701707](701710 call _cond_test call_tmp[902605]))
    if tmp[701707]
    {
      unknown tmp[501693] "maybe param" "temp"
      (501704 'move' tmp[501693] definedConst[261731])
      unknown call_tmp[902610] "expr temp" "maybe param" "maybe type" "temp"
      (902613 'move' call_tmp[902610](501706 call _cond_invalid tmp[501693]))
      if call_tmp[902610]
      {
        (501709 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[701679] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[701680] "maybe param" "temp"
      unknown call_tmp[902615] "expr temp" "maybe param" "maybe type" "temp"
      (902618 'move' call_tmp[902615](501694 call isTrue tmp[501693]))
      (701685 'move' tmp[701680](701683 call _cond_test call_tmp[902615]))
      if tmp[701680]
      {
        (701690 'move' tmp[701679](701687 '_paramFoldLogical' tmp[701680] 1))
      }
      {
        unknown tmp[701692] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[902622] "expr temp" "maybe param" "maybe type" "temp"
        (902625 'move' call_tmp[902622](261752 call _dom _mt[203] rhs[261727]))
        unknown call_tmp[902629] "expr temp" "maybe param" "maybe type" "temp"
        (902632 'move' call_tmp[902629](261755 call definedConst _mt[203] call_tmp[902622]))
        (701694 'move' tmp[701692](501698 call isTrue call_tmp[902629]))
        (701699 'move' tmp[701679](701696 '_paramFoldLogical' tmp[701680] tmp[701692]))
      }
      unknown tmp[701714] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (701716 'move' tmp[701714](501655 call isTrue tmp[701679]))
      (701721 'move' tmp[701706](701718 '_paramFoldLogical' tmp[701707] tmp[701714]))
    }
    {
      (701726 'move' tmp[701706](701723 '_paramFoldLogical' tmp[701707] 0))
    }
    (501641 'move' tmp[501630] tmp[701706])
    unknown call_tmp[902634] "expr temp" "maybe param" "maybe type" "temp"
    (902637 'move' call_tmp[902634](501643 call _cond_invalid tmp[501630]))
    if call_tmp[902634]
    {
      (501646 call compilerError "cannot promote short-circuiting && operator")
    }
    const localize[261736] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[701733] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[701734] "maybe param" "temp"
    unknown call_tmp[902639] "expr temp" "maybe param" "maybe type" "temp"
    (902642 'move' call_tmp[902639](501631 call isTrue tmp[501630]))
    (701739 'move' tmp[701734](701737 call _cond_test call_tmp[902639]))
    if tmp[701734]
    {
      unknown tmp[701741] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[902646] "expr temp" "maybe param" "maybe type" "temp"
      (902649 'move' call_tmp[902646](261761 call _dom _mt[203] rhs[261727]))
      unknown call_tmp[902653] "expr temp" "maybe param" "maybe type" "temp"
      (902656 'move' call_tmp[902653](261764 call _value _mt[203] call_tmp[902646]))
      unknown call_tmp[902658] "expr temp" "maybe param" "maybe type" "temp"
      (902661 'move' call_tmp[902658](261767 '_wide_get_locale' call_tmp[902653]))
      unknown call_tmp[902663] "expr temp" "maybe param" "maybe type" "temp"
      (902666 'move' call_tmp[902663](261768 call chpl_localeID_to_locale call_tmp[902658]))
      unknown call_tmp[902668] "expr temp" "maybe param" "maybe type" "temp"
      (902671 'move' call_tmp[902668](450812 call here[135591]))
      unknown call_tmp[902673] "expr temp" "maybe param" "maybe type" "temp"
      (902676 'move' call_tmp[902673](261758 call != call_tmp[902663] call_tmp[902668]))
      (701743 'move' tmp[701741](501634 call isTrue call_tmp[902673]))
      (701748 'move' tmp[701733](701745 '_paramFoldLogical' tmp[701734] tmp[701741]))
    }
    {
      (701753 'move' tmp[701733](701750 '_paramFoldLogical' tmp[701734] 0))
    }
    (651584 'init var' localize[261736] tmp[701733])
    (261772 'end of statement')
    unknown call_tmp[902678] "expr temp" "maybe param" "maybe type" "temp"
    (902681 'move' call_tmp[902678](261804 call _cond_test debugLocalizedConstDomains[261714]))
    if call_tmp[902678]
    {
      unknown tmp[701760] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[701761] "maybe param" "temp"
      (701766 'move' tmp[701761](701764 call _cond_test localize[261736]))
      if tmp[701761]
      {
        (701771 'move' tmp[701760](701768 '_paramFoldLogical' tmp[701761] "localizing"))
      }
      {
        (701776 'move' tmp[701760](701773 '_paramFoldLogical' tmp[701761] "taking normal path"))
      }
      unknown call_tmp[902685] "expr temp" "maybe param" "maybe type" "temp"
      (902688 'move' call_tmp[902685](261783 call _dom _mt[203] rhs[261727]))
      unknown call_tmp[902692] "expr temp" "maybe param" "maybe type" "temp"
      (902695 'move' call_tmp[902692](261786 call definedConst _mt[203] call_tmp[902685]))
      (261774 call writeln "In initCopy(definedConst=" definedConst[261731] "), domain definedConst: " call_tmp[902692] "; " tmp[701760])
      (564304 'end of statement' localize[261736])
    }
    unknown call_tmp[902697] "expr temp" "maybe param" "maybe type" "temp"
    (902700 'move' call_tmp[902697](261848 call _cond_test localize[261736]))
    if call_tmp[902697]
    {
      unknown call_tmp[902704] "maybe param" "maybe type" "temp"
      (902707 'move' call_tmp[902704](261813 call _dom _mt[203] rhs[261727]))
      const lhsDom[261811] "dead at end of block" "const" "insert auto destroy"
      (651586 'init var' lhsDom[261811] call_tmp[902704])
      (261817 'end of statement')
      unknown call_tmp[902709] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (902712 'move' call_tmp[902709](261821 call chpl__ensureDomainExpr lhsDom[261811]))
      unknown call_tmp[902716] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (902719 'move' call_tmp[902716](261824 call eltType _mt[203] rhs[261727]))
      unknown call_tmp[902721] "maybe param" "maybe type" "temp"
      (902724 'move' call_tmp[902721](261827 call chpl__buildArrayRuntimeType call_tmp[902709] call_tmp[902716]))
      unknown lhs[261819] "dead at end of block" "insert auto destroy" "no copy"
      (651588 'init var' lhs[261819] rhs[261727] call_tmp[902721])
      (261831 'end of statement' lhsDom[261811])
      (625541 'move' ret[625536](625540 'deref' lhs[261819]))
      gotoReturn _end_chpl__initCopy[625534] _end_chpl__initCopy[625534]
      (564307 'end of statement' lhs[261819])
    }
    {
      unknown call_tmp[902726] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (902729 'move' call_tmp[902726](261840 'typeof' rhs[261727]))
      unknown call_tmp[902731] "maybe param" "maybe type" "temp"
      (902734 'move' call_tmp[902731](261838 call chpl__coerceCopy call_tmp[902726] rhs[261727] definedConst[261731]))
      unknown lhs[261836] "dead at end of block" "insert auto destroy" "no copy"
      (651590 'init var' lhs[261836] call_tmp[902731])
      (261844 'end of statement')
      (625546 'move' ret[625536](625545 'deref' lhs[261836]))
      gotoReturn _end_chpl__initCopy[625534] _end_chpl__initCopy[625534]
      (564309 'end of statement' lhs[261836])
    }
    label _end_chpl__initCopy[625534]
    (625538 return ret[625536])
  }
  function chpl__autoCopy[261854](arg x[261859]:_array[255540](?), arg definedConst[261863]:bool[19]) : _unknown[42] "auto copy fn"
  {
    unknown ret[625552] "RVV" "temp"
    unknown call_tmp[902736] "maybe param" "maybe type" "temp"
    (902739 'move' call_tmp[902736](261870 call chpl__initCopy x[261859] definedConst[261863]))
    unknown b[261868] "dead at end of block" "insert auto destroy" "no copy"
    (651592 'init var' b[261868] call_tmp[902736])
    (261874 'end of statement')
    (625557 'move' ret[625552](625556 'deref' b[261868]))
    gotoReturn _end_chpl__autoCopy[625550] _end_chpl__autoCopy[625550]
    (564311 'end of statement' b[261868])
    label _end_chpl__autoCopy[625550]
    (625554 return ret[625552])
  }
  function chpl__coerceHelp[261879](arg dstType[261882]:_domain[225034](?), arg definedConst[261886]:bool[19]) : _unknown[42] "inline"
  {
    unknown ret[625563] "RVV" "temp"
    const dist[261891] "dead at end of block" "const" "no auto destroy" "no copy" "ref var"
    (651597 'init ref decl' dist[261891])
    unknown call_tmp[902741] "expr temp" "maybe param" "maybe type" "temp"
    (902744 'move' call_tmp[902741](261892 'get runtime type field' dstType[261882] "dist"))
    (651595 'move' dist[261891](651594 'addr of' call_tmp[902741]))
    (261896 'end of statement')
    unknown instanceType[261898] "dead at end of block" "insert auto destroy" "type variable"
    (651602 'move' instanceType[261898](651600 call chpl__instanceTypeFromDomainRuntimeType dstType[261882]))
    (564313 'end of statement')
    unknown call_tmp[902746] "expr temp" "maybe param" "maybe type" "temp"
    (902749 'move' call_tmp[902746](261975 call chpl__isRectangularDomType dstType[261882]))
    unknown call_tmp[902751] "expr temp" "maybe param" "maybe type" "temp"
    (902754 'move' call_tmp[902751](261977 call _cond_test call_tmp[902746]))
    if call_tmp[902751]
    {
      unknown call_tmp[902758] "expr temp" "maybe param" "maybe type" "temp"
      (902761 'move' call_tmp[902758](261910 call rank _mt[203] instanceType[261898]))
      unknown call_tmp[902765] "expr temp" "maybe param" "maybe type" "temp"
      (902768 'move' call_tmp[902765](261915 call idxType _mt[203] instanceType[261898]))
      unknown call_tmp[902772] "expr temp" "maybe param" "maybe type" "temp"
      (902775 'move' call_tmp[902772](261920 call strides _mt[203] instanceType[261898]))
      unknown call_tmp[902777] "expr temp" "maybe param" "maybe type" "temp"
      (902780 'move' call_tmp[902777](261906 call chpl__convertRuntimeTypeToValue(dist = dist[261891])(rank = call_tmp[902758])(idxType = call_tmp[902765])(strides = call_tmp[902772])(isNoInit = 0)(definedConst = definedConst[261886])))
      (625568 'move' ret[625563](625567 'deref' call_tmp[902777]))
      gotoReturn _end_chpl__coerceHelp[625561] _end_chpl__coerceHelp[625561]
      (564314 'end of statement' dist[261891] instanceType[261898])
    }
    {
      unknown call_tmp[902782] "expr temp" "maybe param" "maybe type" "temp"
      (902785 'move' call_tmp[902782](261968 call chpl__isSparseDomType dstType[261882]))
      unknown call_tmp[902787] "expr temp" "maybe param" "maybe type" "temp"
      (902790 'move' call_tmp[902787](261970 call _cond_test call_tmp[902782]))
      if call_tmp[902787]
      {
        const parentDom[261930] "dead at end of block" "const" "no auto destroy" "no copy" "ref var"
        (651607 'init ref decl' parentDom[261930])
        unknown call_tmp[902792] "expr temp" "maybe param" "maybe type" "temp"
        (902795 'move' call_tmp[902792](261931 'get runtime type field' dstType[261882] "parentDom"))
        (651605 'move' parentDom[261930](651604 'addr of' call_tmp[902792]))
        (261935 'end of statement')
        unknown call_tmp[902797] "expr temp" "maybe param" "maybe type" "temp"
        (902800 'move' call_tmp[902797](261938 call chpl__convertRuntimeTypeToValue(dist = dist[261891])(parentDom = parentDom[261930])(isNoInit = 0)(definedConst = definedConst[261886])))
        (625573 'move' ret[625563](625572 'deref' call_tmp[902797]))
        gotoReturn _end_chpl__coerceHelp[625561] _end_chpl__coerceHelp[625561]
        (564317 'end of statement' dist[261891] parentDom[261930])
      }
      {
        unknown call_tmp[902804] "expr temp" "maybe param" "maybe type" "temp"
        (902807 'move' call_tmp[902804](261954 call idxType _mt[203] instanceType[261898]))
        unknown call_tmp[902811] "expr temp" "maybe param" "maybe type" "temp"
        (902814 'move' call_tmp[902811](261959 call parSafe _mt[203] instanceType[261898]))
        unknown call_tmp[902816] "expr temp" "maybe param" "maybe type" "temp"
        (902819 'move' call_tmp[902816](261950 call chpl__convertRuntimeTypeToValue(dist = dist[261891])(idxType = call_tmp[902804])(parSafe = call_tmp[902811])(isNoInit = 0)(definedConst = definedConst[261886])))
        (625578 'move' ret[625563](625577 'deref' call_tmp[902816]))
        gotoReturn _end_chpl__coerceHelp[625561] _end_chpl__coerceHelp[625561]
        (564320 'end of statement' dist[261891] instanceType[261898])
      }
    }
    label _end_chpl__coerceHelp[625561]
    (625565 return ret[625563])
  }
  function chpl__coerceCopy[261984](arg dstType[261987]:_array[255540](?), arg rhs[261991]:_array[255540](?), arg definedConst[261995]:bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown ret[625584] "RVV" "temp"
    unknown eltType[262000] "dead at end of block" "insert auto destroy" "type variable"
    (651612 'move' eltType[262000](651610 call chpl__eltTypeFromArrayRuntimeType dstType[261987]))
    const dom[262006] "dead at end of block" "const" "ref var"
    (651617 'init ref decl' dom[262006])
    unknown call_tmp[902821] "expr temp" "maybe param" "maybe type" "temp"
    (902824 'move' call_tmp[902821](262008 call chpl__domainFromArrayRuntimeType dstType[261987]))
    (651615 'move' dom[262006](651614 'addr of' call_tmp[902821]))
    (262011 'end of statement')
    unknown call_tmp[902828] "maybe param" "maybe type" "temp"
    (902831 'move' call_tmp[902828](262018 call(262015 call (partial) buildArray _mt[203] dom[262006]) eltType[262000](initElts = 0)))
    unknown lhs[262013] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (651619 'init var' lhs[262013] call_tmp[902828])
    (262023 'end of statement' dom[262006] eltType[262000])
    unknown call_tmp[902835] "expr temp" "maybe param" "maybe type" "temp"
    (902838 'move' call_tmp[902835](262031 call rank _mt[203] lhs[262013]))
    unknown call_tmp[902842] "expr temp" "maybe param" "maybe type" "temp"
    (902845 'move' call_tmp[902842](262035 call rank _mt[203] rhs[261991]))
    unknown call_tmp[902847] "expr temp" "maybe param" "maybe type" "temp"
    (902850 'move' call_tmp[902847](262028 call != call_tmp[902835] call_tmp[902842]))
    unknown call_tmp[902852] "expr temp" "maybe param" "maybe type" "temp"
    (902855 'move' call_tmp[902852](262038 call _cond_test call_tmp[902847]))
    if call_tmp[902852]
    {
      (262025 call compilerError "rank mismatch in array assignment")
    }
    unknown call_tmp[902857] "expr temp" "maybe param" "maybe type" "temp"
    (902860 'move' call_tmp[902857](262059 call isCopyableOrSyncSingle eltType[262000]))
    unknown call_tmp[902862] "expr temp" "maybe param" "maybe type" "temp"
    (902865 'move' call_tmp[902862](262056 call ! call_tmp[902857]))
    unknown call_tmp[902867] "expr temp" "maybe param" "maybe type" "temp"
    (902870 'move' call_tmp[902867](262061 call _cond_test call_tmp[902862]))
    if call_tmp[902867]
    {
      unknown call_tmp[902872] "expr temp" "maybe param" "maybe type" "temp"
      (902875 'move' call_tmp[902872](262048 call : eltType[262000] string[244]))
      (262044 call compilerError "Cannot copy-initialize array because element type '" call_tmp[902872] "' cannot be copy-initialized")
      (564326 'end of statement' eltType[262000])
    }
    unknown call_tmp[902879] "expr temp" "maybe param" "maybe type" "temp"
    (902882 'move' call_tmp[902879](262132 call _value _mt[203] rhs[261991]))
    unknown call_tmp[902884] "expr temp" "maybe param" "maybe type" "temp"
    (902887 'move' call_tmp[902884](262129 call == call_tmp[902879] nil[32]))
    unknown call_tmp[902889] "expr temp" "maybe param" "maybe type" "temp"
    (902892 'move' call_tmp[902889](262136 call _cond_test call_tmp[902884]))
    if call_tmp[902889]
    {
    }
    {
      unknown call_tmp[902896] "expr temp" "maybe param" "maybe type" "temp"
      (902899 'move' call_tmp[902896](262117 call _value _mt[203] lhs[262013]))
      unknown call_tmp[902903] "expr temp" "maybe param" "maybe type" "temp"
      (902906 'move' call_tmp[902903](262121 call _value _mt[203] rhs[261991]))
      unknown call_tmp[902908] "expr temp" "maybe param" "maybe type" "temp"
      (902911 'move' call_tmp[902908](262114 call == call_tmp[902896] call_tmp[902903]))
      unknown call_tmp[902913] "expr temp" "maybe param" "maybe type" "temp"
      (902916 'move' call_tmp[902913](262124 call _cond_test call_tmp[902908]))
      if call_tmp[902913]
      {
      }
      {
        unknown tmp[501714] "maybe param" "temp"
        unknown call_tmp[902920] "expr temp" "maybe param" "maybe type" "temp"
        (902923 'move' call_tmp[902920](262098 call(262095 call (partial) sizeAs _mt[203] lhs[262013]) int(64)[10]))
        (501725 'move' tmp[501714](262092 call == call_tmp[902920] 0))
        unknown call_tmp[902925] "expr temp" "maybe param" "maybe type" "temp"
        (902928 'move' call_tmp[902925](501727 call _cond_invalid tmp[501714]))
        if call_tmp[902925]
        {
          (501730 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[701783] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[701784] "maybe param" "temp"
        unknown call_tmp[902930] "expr temp" "maybe param" "maybe type" "temp"
        (902933 'move' call_tmp[902930](501715 call isTrue tmp[501714]))
        (701789 'move' tmp[701784](701787 call _cond_test call_tmp[902930]))
        if tmp[701784]
        {
          unknown tmp[701791] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[902937] "expr temp" "maybe param" "maybe type" "temp"
          (902940 'move' call_tmp[902937](262107 call(262104 call (partial) sizeAs _mt[203] rhs[261991]) int(64)[10]))
          unknown call_tmp[902942] "expr temp" "maybe param" "maybe type" "temp"
          (902945 'move' call_tmp[902942](262101 call == call_tmp[902937] 0))
          (701793 'move' tmp[701791](501718 call isTrue call_tmp[902942]))
          (701798 'move' tmp[701783](701795 '_paramFoldLogical' tmp[701784] tmp[701791]))
        }
        {
          (701803 'move' tmp[701783](701800 '_paramFoldLogical' tmp[701784] 0))
        }
        unknown call_tmp[902947] "expr temp" "maybe param" "maybe type" "temp"
        (902950 'move' call_tmp[902947](262110 call _cond_test tmp[701783]))
        if call_tmp[902947]
        {
        }
        {
          unknown call_tmp[902952] "expr temp" "maybe param" "maybe type" "temp"
          (902955 'move' call_tmp[902952](262076 call _cond_test 1))
          if call_tmp[902952]
          {
            (262071 call checkArrayShapesUponAssignment lhs[262013] rhs[261991])
            (564329 'end of statement' lhs[262013])
          }
          (262082 call chpl__uncheckedArrayTransfer lhs[262013] rhs[261991](kind = initCopy[257615]))
          (564331 'end of statement' lhs[262013])
        }
      }
    }
    unknown call_tmp[902959] "expr temp" "maybe param" "maybe type" "temp"
    (902962 'move' call_tmp[902959](262142 call _value _mt[203] lhs[262013]))
    (262148 call(262145 call (partial) dsiElementInitializationComplete _mt[203] call_tmp[902959]))
    (564333 'end of statement' lhs[262013])
    (625589 'move' ret[625584](625588 'deref' lhs[262013]))
    gotoReturn _end_chpl__coerceCopy[625582] _end_chpl__coerceCopy[625582]
    (564335 'end of statement' lhs[262013])
    label _end_chpl__coerceCopy[625582]
    (625586 return ret[625584])
  }
  function chpl__coerceMove[262153](arg dstType[262156]:_array[255540](?), in arg rhs[262160]:_array[255540](?), arg definedConst[262164]:bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown ret[625595] "RVV" "temp"
    unknown eltType[262169] "dead at end of block" "insert auto destroy" "type variable"
    (651624 'move' eltType[262169](651622 call chpl__eltTypeFromArrayRuntimeType dstType[262156]))
    const dom[262175] "dead at end of block" "const" "ref var"
    (651629 'init ref decl' dom[262175])
    unknown call_tmp[902966] "expr temp" "maybe param" "maybe type" "temp"
    (902969 'move' call_tmp[902966](262177 call chpl__domainFromArrayRuntimeType dstType[262156]))
    (651627 'move' dom[262175](651626 'addr of' call_tmp[902966]))
    (262180 'end of statement')
    { scopeless type
      unknown call_type_tmp[578687] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[902973] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (902976 'move' call_tmp[902973](262186 call _instance _mt[203] rhs[262160]))
      (578691 'move' call_type_tmp[578687](262189 'typeof' call_tmp[902973]))
    }
    unknown call_tmp[902978] "expr temp" "maybe param" "maybe type" "temp"
    (902981 'move' call_tmp[902978](262191 call chpl__instanceTypeFromArrayRuntimeType dstType[262156]))
    unknown call_tmp[902983] "maybe param" "maybe type" "temp"
    (902986 'move' call_tmp[902983](262183 call != call_type_tmp[578687] call_tmp[902978]))
    unknown typeMismatch[262182] "dead at end of block" "param"
    (651631 'init var' typeMismatch[262182] call_tmp[902983])
    (262194 'end of statement')
    unknown call_tmp[902988] "maybe param" "maybe type" "temp"
    (902991 'move' call_tmp[902988](262197 call ! typeMismatch[262182]))
    unknown moveElts[262196] "dead at end of block" "param"
    (651633 'init var' moveElts[262196] call_tmp[902988])
    (262201 'end of statement')
    unknown tmp[501735] "maybe param" "temp"
    (501746 'move' tmp[501735] moveElts[262196])
    unknown call_tmp[902993] "expr temp" "maybe param" "maybe type" "temp"
    (902996 'move' call_tmp[902993](501748 call _cond_invalid tmp[501735]))
    if call_tmp[902993]
    {
      (501751 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[701810] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[701811] "maybe param" "temp"
    unknown call_tmp[902998] "expr temp" "maybe param" "maybe type" "temp"
    (903001 'move' call_tmp[902998](501736 call isTrue tmp[501735]))
    (701816 'move' tmp[701811](701814 call _cond_test call_tmp[902998]))
    if tmp[701811]
    {
      unknown tmp[701818] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[903005] "expr temp" "maybe param" "maybe type" "temp"
      (903008 'move' call_tmp[903005](262211 call _instance _mt[203] dom[262175]))
      unknown call_tmp[903012] "expr temp" "maybe param" "maybe type" "temp"
      (903015 'move' call_tmp[903012](262215 call _dom _mt[203] rhs[262160]))
      unknown call_tmp[903019] "expr temp" "maybe param" "maybe type" "temp"
      (903022 'move' call_tmp[903019](262218 call _instance _mt[203] call_tmp[903012]))
      unknown call_tmp[903024] "expr temp" "maybe param" "maybe type" "temp"
      (903027 'move' call_tmp[903024](262208 call == call_tmp[903005] call_tmp[903019]))
      (701820 'move' tmp[701818](501739 call isTrue call_tmp[903024]))
      (701825 'move' tmp[701810](701822 '_paramFoldLogical' tmp[701811] tmp[701818]))
    }
    {
      (701830 'move' tmp[701810](701827 '_paramFoldLogical' tmp[701811] 0))
    }
    unknown call_tmp[903029] "expr temp" "maybe param" "maybe type" "temp"
    (903032 'move' call_tmp[903029](262221 call _cond_test tmp[701810]))
    if call_tmp[903029]
    {
      (625600 'move' ret[625595](625599 'deref' rhs[262160]))
      gotoReturn _end_chpl__coerceMove[625593] _end_chpl__coerceMove[625593]
    }
    unknown call_tmp[903036] "maybe param" "maybe type" "temp"
    (903039 'move' call_tmp[903036](262231 call(262228 call (partial) buildArray _mt[203] dom[262175]) eltType[262169](initElts = 0)))
    unknown lhs[262226] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (651635 'init var' lhs[262226] call_tmp[903036])
    (262236 'end of statement' dom[262175] eltType[262169])
    unknown call_tmp[903043] "expr temp" "maybe param" "maybe type" "temp"
    (903046 'move' call_tmp[903043](262244 call rank _mt[203] lhs[262226]))
    unknown call_tmp[903050] "expr temp" "maybe param" "maybe type" "temp"
    (903053 'move' call_tmp[903050](262248 call rank _mt[203] rhs[262160]))
    unknown call_tmp[903055] "expr temp" "maybe param" "maybe type" "temp"
    (903058 'move' call_tmp[903055](262241 call != call_tmp[903043] call_tmp[903050]))
    unknown call_tmp[903060] "expr temp" "maybe param" "maybe type" "temp"
    (903063 'move' call_tmp[903060](262251 call _cond_test call_tmp[903055]))
    if call_tmp[903060]
    {
      (262238 call compilerError "rank mismatch in array assignment")
    }
    unknown call_tmp[903067] "expr temp" "maybe param" "maybe type" "temp"
    (903070 'move' call_tmp[903067](262335 call _value _mt[203] rhs[262160]))
    unknown call_tmp[903072] "expr temp" "maybe param" "maybe type" "temp"
    (903075 'move' call_tmp[903072](262332 call == call_tmp[903067] nil[32]))
    unknown call_tmp[903077] "expr temp" "maybe param" "maybe type" "temp"
    (903080 'move' call_tmp[903077](262339 call _cond_test call_tmp[903072]))
    if call_tmp[903077]
    {
    }
    {
      unknown call_tmp[903084] "expr temp" "maybe param" "maybe type" "temp"
      (903087 'move' call_tmp[903084](262320 call _value _mt[203] lhs[262226]))
      unknown call_tmp[903091] "expr temp" "maybe param" "maybe type" "temp"
      (903094 'move' call_tmp[903091](262324 call _value _mt[203] rhs[262160]))
      unknown call_tmp[903096] "expr temp" "maybe param" "maybe type" "temp"
      (903099 'move' call_tmp[903096](262317 call == call_tmp[903084] call_tmp[903091]))
      unknown call_tmp[903101] "expr temp" "maybe param" "maybe type" "temp"
      (903104 'move' call_tmp[903101](262327 call _cond_test call_tmp[903096]))
      if call_tmp[903101]
      {
      }
      {
        unknown tmp[501756] "maybe param" "temp"
        unknown call_tmp[903108] "expr temp" "maybe param" "maybe type" "temp"
        (903111 'move' call_tmp[903108](262301 call(262298 call (partial) sizeAs _mt[203] lhs[262226]) int(64)[10]))
        (501767 'move' tmp[501756](262295 call == call_tmp[903108] 0))
        unknown call_tmp[903113] "expr temp" "maybe param" "maybe type" "temp"
        (903116 'move' call_tmp[903113](501769 call _cond_invalid tmp[501756]))
        if call_tmp[903113]
        {
          (501772 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[701837] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[701838] "maybe param" "temp"
        unknown call_tmp[903118] "expr temp" "maybe param" "maybe type" "temp"
        (903121 'move' call_tmp[903118](501757 call isTrue tmp[501756]))
        (701843 'move' tmp[701838](701841 call _cond_test call_tmp[903118]))
        if tmp[701838]
        {
          unknown tmp[701845] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[903125] "expr temp" "maybe param" "maybe type" "temp"
          (903128 'move' call_tmp[903125](262310 call(262307 call (partial) sizeAs _mt[203] rhs[262160]) int(64)[10]))
          unknown call_tmp[903130] "expr temp" "maybe param" "maybe type" "temp"
          (903133 'move' call_tmp[903130](262304 call == call_tmp[903125] 0))
          (701847 'move' tmp[701845](501760 call isTrue call_tmp[903130]))
          (701852 'move' tmp[701837](701849 '_paramFoldLogical' tmp[701838] tmp[701845]))
        }
        {
          (701857 'move' tmp[701837](701854 '_paramFoldLogical' tmp[701838] 0))
        }
        unknown call_tmp[903135] "expr temp" "maybe param" "maybe type" "temp"
        (903138 'move' call_tmp[903135](262313 call _cond_test tmp[701837]))
        if call_tmp[903135]
        {
        }
        {
          unknown call_tmp[903140] "expr temp" "maybe param" "maybe type" "temp"
          (903143 'move' call_tmp[903140](262266 call _cond_test 1))
          if call_tmp[903140]
          {
            (262261 call checkArrayShapesUponAssignment lhs[262226] rhs[262160])
            (564343 'end of statement' lhs[262226])
          }
          unknown kind[262272] "dead at end of block" "param"
          unknown tmp[701864] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[701865] "maybe param" "temp"
          (701870 'move' tmp[701865](701868 call _cond_test moveElts[262196]))
          if tmp[701865]
          {
            (701875 'move' tmp[701864](701872 '_paramFoldLogical' tmp[701865] move[257613]))
          }
          {
            (701880 'move' tmp[701864](701877 '_paramFoldLogical' tmp[701865] initCopy[257615]))
          }
          (651637 'init var' kind[262272] tmp[701864])
          (262286 'end of statement')
          (262288 call chpl__uncheckedArrayTransfer lhs[262226] rhs[262160](kind = kind[262272]))
          (564345 'end of statement' lhs[262226])
        }
      }
    }
    unknown call_tmp[903147] "expr temp" "maybe param" "maybe type" "temp"
    (903150 'move' call_tmp[903147](262347 call _unowned _mt[203] rhs[262160]))
    unknown call_tmp[903154] "expr temp" "maybe param" "maybe type" "temp"
    (903157 'move' call_tmp[903154](262351 call _instance _mt[203] rhs[262160]))
    unknown call_tmp[903159] "expr temp" "maybe param" "maybe type" "temp"
    (903162 'move' call_tmp[903159](262354 call ! moveElts[262196]))
    (262345 call _do_destroy_arr call_tmp[903147] call_tmp[903154](deinitElts = call_tmp[903159]))
    (564347 'end of statement')
    unknown call_tmp[903166] "expr temp" "maybe param" "maybe type" "temp"
    (903169 'move' call_tmp[903166](262359 call _value _mt[203] lhs[262226]))
    (262365 call(262362 call (partial) dsiElementInitializationComplete _mt[203] call_tmp[903166]))
    (564348 'end of statement' lhs[262226])
    (625605 'move' ret[625595](625604 'deref' lhs[262226]))
    gotoReturn _end_chpl__coerceMove[625593] _end_chpl__coerceMove[625593]
    (564350 'end of statement' lhs[262226])
    label _end_chpl__coerceMove[625593]
    (625597 return ret[625595])
  }
  function chpl__coerceCopy[262370](arg dstType[262373]:_array[255540](?), arg rhs[262377]:_domain[225034](?), arg definedConst[262381]:bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown ret[625611] "RVV" "temp"
    unknown eltType[262386] "dead at end of block" "insert auto destroy" "type variable"
    (651642 'move' eltType[262386](651640 call chpl__eltTypeFromArrayRuntimeType dstType[262373]))
    const dom[262392] "dead at end of block" "const" "ref var"
    (651647 'init ref decl' dom[262392])
    unknown call_tmp[903173] "expr temp" "maybe param" "maybe type" "temp"
    (903176 'move' call_tmp[903173](262394 call chpl__domainFromArrayRuntimeType dstType[262373]))
    (651645 'move' dom[262392](651644 'addr of' call_tmp[903173]))
    (262397 'end of statement')
    unknown call_tmp[903180] "maybe param" "maybe type" "temp"
    (903183 'move' call_tmp[903180](262404 call(262401 call (partial) buildArray _mt[203] dom[262392]) eltType[262386](initElts = 0)))
    unknown lhs[262399] "dead at end of block" "insert auto destroy" "no copy"
    (651649 'init var' lhs[262399] call_tmp[903180])
    (262409 'end of statement' dom[262392] eltType[262386])
    unknown call_tmp[903187] "expr temp" "maybe param" "maybe type" "temp"
    (903190 'move' call_tmp[903187](262417 call rank _mt[203] lhs[262399]))
    unknown call_tmp[903194] "expr temp" "maybe param" "maybe type" "temp"
    (903197 'move' call_tmp[903194](262421 call rank _mt[203] rhs[262377]))
    unknown call_tmp[903199] "expr temp" "maybe param" "maybe type" "temp"
    (903202 'move' call_tmp[903199](262414 call != call_tmp[903187] call_tmp[903194]))
    unknown call_tmp[903204] "expr temp" "maybe param" "maybe type" "temp"
    (903207 'move' call_tmp[903204](262424 call _cond_test call_tmp[903199]))
    if call_tmp[903204]
    {
      (262411 call compilerError "rank mismatch in array assignment")
    }
    unknown tmp[501777] "maybe param" "temp"
    (501788 'move' tmp[501777](262439 call(262436 call (partial) isAssociative _mt[203] rhs[262377])))
    unknown call_tmp[903211] "expr temp" "maybe param" "maybe type" "temp"
    (903214 'move' call_tmp[903211](501790 call _cond_invalid tmp[501777]))
    if call_tmp[903211]
    {
      (501793 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[701887] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[701888] "maybe param" "temp"
    unknown call_tmp[903216] "expr temp" "maybe param" "maybe type" "temp"
    (903219 'move' call_tmp[903216](501778 call isTrue tmp[501777]))
    (701893 'move' tmp[701888](701891 call _cond_test call_tmp[903216]))
    if tmp[701888]
    {
      unknown tmp[701895] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[903223] "expr temp" "maybe param" "maybe type" "temp"
      (903226 'move' call_tmp[903223](262444 call(262441 call (partial) isRectangular _mt[203] lhs[262399])))
      (701897 'move' tmp[701895](501781 call isTrue call_tmp[903223]))
      (701902 'move' tmp[701887](701899 '_paramFoldLogical' tmp[701888] tmp[701895]))
    }
    {
      (701907 'move' tmp[701887](701904 '_paramFoldLogical' tmp[701888] 0))
    }
    unknown call_tmp[903228] "expr temp" "maybe param" "maybe type" "temp"
    (903231 'move' call_tmp[903228](262445 call _cond_test tmp[701887]))
    if call_tmp[903228]
    {
      (262430 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    unknown call_tmp[903233] "expr temp" "maybe param" "maybe type" "temp"
    (903236 'move' call_tmp[903233](262459 call isPODType eltType[262386]))
    unknown call_tmp[903238] "expr temp" "maybe param" "maybe type" "temp"
    (903241 'move' call_tmp[903238](262456 call ! call_tmp[903233]))
    unknown call_tmp[903243] "expr temp" "maybe param" "maybe type" "temp"
    (903246 'move' call_tmp[903243](262461 call _cond_test call_tmp[903238]))
    if call_tmp[903243]
    {
      (262451 call compilerError "cannot assign to array from domain of non-POD indices")
    }
    (262467 call chpl__transferArray lhs[262399] rhs[262377](kind = initCopy[257615]))
    (564358 'end of statement' lhs[262399])
    unknown call_tmp[903250] "expr temp" "maybe param" "maybe type" "temp"
    (903253 'move' call_tmp[903250](262476 call _value _mt[203] lhs[262399]))
    (262482 call(262479 call (partial) dsiElementInitializationComplete _mt[203] call_tmp[903250]))
    (564360 'end of statement' lhs[262399])
    (625616 'move' ret[625611](625615 'deref' lhs[262399]))
    gotoReturn _end_chpl__coerceCopy[625609] _end_chpl__coerceCopy[625609]
    (564362 'end of statement' lhs[262399])
    label _end_chpl__coerceCopy[625609]
    (625613 return ret[625611])
  }
  function chpl__coerceMove[262487](arg dstType[262490]:_array[255540](?), in arg rhs[262494]:_domain[225034](?), arg definedConst[262498]:bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown ret[625622] "RVV" "temp"
    unknown eltType[262503] "dead at end of block" "insert auto destroy" "type variable"
    (651654 'move' eltType[262503](651652 call chpl__eltTypeFromArrayRuntimeType dstType[262490]))
    const dom[262509] "dead at end of block" "const" "ref var"
    (651659 'init ref decl' dom[262509])
    unknown call_tmp[903257] "expr temp" "maybe param" "maybe type" "temp"
    (903260 'move' call_tmp[903257](262511 call chpl__domainFromArrayRuntimeType dstType[262490]))
    (651657 'move' dom[262509](651656 'addr of' call_tmp[903257]))
    (262514 'end of statement')
    unknown call_tmp[903264] "maybe param" "maybe type" "temp"
    (903267 'move' call_tmp[903264](262521 call(262518 call (partial) buildArray _mt[203] dom[262509]) eltType[262503](initElts = 0)))
    unknown lhs[262516] "dead at end of block" "insert auto destroy" "no copy"
    (651661 'init var' lhs[262516] call_tmp[903264])
    (262526 'end of statement' dom[262509] eltType[262503])
    unknown call_tmp[903271] "expr temp" "maybe param" "maybe type" "temp"
    (903274 'move' call_tmp[903271](262534 call rank _mt[203] lhs[262516]))
    unknown call_tmp[903278] "expr temp" "maybe param" "maybe type" "temp"
    (903281 'move' call_tmp[903278](262538 call rank _mt[203] rhs[262494]))
    unknown call_tmp[903283] "expr temp" "maybe param" "maybe type" "temp"
    (903286 'move' call_tmp[903283](262531 call != call_tmp[903271] call_tmp[903278]))
    unknown call_tmp[903288] "expr temp" "maybe param" "maybe type" "temp"
    (903291 'move' call_tmp[903288](262541 call _cond_test call_tmp[903283]))
    if call_tmp[903288]
    {
      (262528 call compilerError "rank mismatch in array assignment")
    }
    unknown tmp[501798] "maybe param" "temp"
    (501809 'move' tmp[501798](262556 call(262553 call (partial) isAssociative _mt[203] rhs[262494])))
    unknown call_tmp[903295] "expr temp" "maybe param" "maybe type" "temp"
    (903298 'move' call_tmp[903295](501811 call _cond_invalid tmp[501798]))
    if call_tmp[903295]
    {
      (501814 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[701914] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[701915] "maybe param" "temp"
    unknown call_tmp[903300] "expr temp" "maybe param" "maybe type" "temp"
    (903303 'move' call_tmp[903300](501799 call isTrue tmp[501798]))
    (701920 'move' tmp[701915](701918 call _cond_test call_tmp[903300]))
    if tmp[701915]
    {
      unknown tmp[701922] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[903307] "expr temp" "maybe param" "maybe type" "temp"
      (903310 'move' call_tmp[903307](262561 call(262558 call (partial) isRectangular _mt[203] lhs[262516])))
      (701924 'move' tmp[701922](501802 call isTrue call_tmp[903307]))
      (701929 'move' tmp[701914](701926 '_paramFoldLogical' tmp[701915] tmp[701922]))
    }
    {
      (701934 'move' tmp[701914](701931 '_paramFoldLogical' tmp[701915] 0))
    }
    unknown call_tmp[903312] "expr temp" "maybe param" "maybe type" "temp"
    (903315 'move' call_tmp[903312](262562 call _cond_test tmp[701914]))
    if call_tmp[903312]
    {
      (262547 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    unknown call_tmp[903317] "expr temp" "maybe param" "maybe type" "temp"
    (903320 'move' call_tmp[903317](262574 call isPODType eltType[262503]))
    unknown call_tmp[903322] "expr temp" "maybe param" "maybe type" "temp"
    (903325 'move' call_tmp[903322](262571 call ! call_tmp[903317]))
    unknown call_tmp[903327] "expr temp" "maybe param" "maybe type" "temp"
    (903330 'move' call_tmp[903327](262576 call _cond_test call_tmp[903322]))
    if call_tmp[903327]
    {
      (262568 call compilerError "cannot assign to array from domain of non-POD indices")
    }
    (262582 call chpl__transferArray lhs[262516] rhs[262494](kind = initCopy[257615]))
    (564370 'end of statement' lhs[262516])
    unknown call_tmp[903334] "expr temp" "maybe param" "maybe type" "temp"
    (903337 'move' call_tmp[903334](262591 call _value _mt[203] lhs[262516]))
    (262597 call(262594 call (partial) dsiElementInitializationComplete _mt[203] call_tmp[903334]))
    (564372 'end of statement' lhs[262516])
    (625627 'move' ret[625622](625626 'deref' lhs[262516]))
    gotoReturn _end_chpl__coerceMove[625620] _end_chpl__coerceMove[625620]
    (564374 'end of statement' lhs[262516])
    label _end_chpl__coerceMove[625620]
    (625624 return ret[625622])
  }
  function chpl__coerceCopy[262602](arg dstType[262605]:_array[255540](?), arg rhs[262611]:range[240](?), arg definedConst[262615]:bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown ret[625633] "RVV" "temp"
    unknown eltType[262620] "dead at end of block" "insert auto destroy" "type variable"
    (651666 'move' eltType[262620](651664 call chpl__eltTypeFromArrayRuntimeType dstType[262605]))
    const dom[262626] "dead at end of block" "const" "ref var"
    (651671 'init ref decl' dom[262626])
    unknown call_tmp[903341] "expr temp" "maybe param" "maybe type" "temp"
    (903344 'move' call_tmp[903341](262628 call chpl__domainFromArrayRuntimeType dstType[262605]))
    (651669 'move' dom[262626](651668 'addr of' call_tmp[903341]))
    (262631 'end of statement')
    unknown call_tmp[903348] "maybe param" "maybe type" "temp"
    (903351 'move' call_tmp[903348](262638 call(262635 call (partial) buildArray _mt[203] dom[262626]) eltType[262620](initElts = 0)))
    unknown lhs[262633] "dead at end of block" "insert auto destroy" "no copy"
    (651673 'init var' lhs[262633] call_tmp[903348])
    (262643 'end of statement' dom[262626] eltType[262620])
    unknown call_tmp[903355] "expr temp" "maybe param" "maybe type" "temp"
    (903358 'move' call_tmp[903355](262651 call rank _mt[203] lhs[262633]))
    unknown call_tmp[903360] "expr temp" "maybe param" "maybe type" "temp"
    (903363 'move' call_tmp[903360](262648 call != call_tmp[903355] 1))
    unknown call_tmp[903365] "expr temp" "maybe param" "maybe type" "temp"
    (903368 'move' call_tmp[903365](262655 call _cond_test call_tmp[903360]))
    if call_tmp[903365]
    {
      (262645 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
    (262661 call chpl__transferArray lhs[262633] rhs[262611](kind = initCopy[257615]))
    (564379 'end of statement' lhs[262633])
    unknown call_tmp[903372] "expr temp" "maybe param" "maybe type" "temp"
    (903375 'move' call_tmp[903372](262670 call _value _mt[203] lhs[262633]))
    (262676 call(262673 call (partial) dsiElementInitializationComplete _mt[203] call_tmp[903372]))
    (564381 'end of statement' lhs[262633])
    (625638 'move' ret[625633](625637 'deref' lhs[262633]))
    gotoReturn _end_chpl__coerceCopy[625631] _end_chpl__coerceCopy[625631]
    (564383 'end of statement' lhs[262633])
    label _end_chpl__coerceCopy[625631]
    (625635 return ret[625633])
  }
  function chpl__coerceMove[262681](arg dstType[262684]:_array[255540](?), in arg rhs[262690]:range[240](?), arg definedConst[262694]:bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown ret[625644] "RVV" "temp"
    unknown eltType[262699] "dead at end of block" "insert auto destroy" "type variable"
    (651678 'move' eltType[262699](651676 call chpl__eltTypeFromArrayRuntimeType dstType[262684]))
    const dom[262705] "dead at end of block" "const" "ref var"
    (651683 'init ref decl' dom[262705])
    unknown call_tmp[903379] "expr temp" "maybe param" "maybe type" "temp"
    (903382 'move' call_tmp[903379](262707 call chpl__domainFromArrayRuntimeType dstType[262684]))
    (651681 'move' dom[262705](651680 'addr of' call_tmp[903379]))
    (262710 'end of statement')
    unknown call_tmp[903386] "maybe param" "maybe type" "temp"
    (903389 'move' call_tmp[903386](262717 call(262714 call (partial) buildArray _mt[203] dom[262705]) eltType[262699](initElts = 0)))
    unknown lhs[262712] "dead at end of block" "insert auto destroy" "no copy"
    (651685 'init var' lhs[262712] call_tmp[903386])
    (262722 'end of statement' dom[262705] eltType[262699])
    unknown call_tmp[903393] "expr temp" "maybe param" "maybe type" "temp"
    (903396 'move' call_tmp[903393](262730 call rank _mt[203] lhs[262712]))
    unknown call_tmp[903398] "expr temp" "maybe param" "maybe type" "temp"
    (903401 'move' call_tmp[903398](262727 call != call_tmp[903393] 1))
    unknown call_tmp[903403] "expr temp" "maybe param" "maybe type" "temp"
    (903406 'move' call_tmp[903403](262734 call _cond_test call_tmp[903398]))
    if call_tmp[903403]
    {
      (262724 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
    (262740 call chpl__transferArray lhs[262712] rhs[262690](kind = initCopy[257615]))
    (564388 'end of statement' lhs[262712])
    unknown call_tmp[903410] "expr temp" "maybe param" "maybe type" "temp"
    (903413 'move' call_tmp[903410](262749 call _value _mt[203] lhs[262712]))
    (262755 call(262752 call (partial) dsiElementInitializationComplete _mt[203] call_tmp[903410]))
    (564390 'end of statement' lhs[262712])
    (625649 'move' ret[625644](625648 'deref' lhs[262712]))
    gotoReturn _end_chpl__coerceMove[625642] _end_chpl__coerceMove[625642]
    (564392 'end of statement' lhs[262712])
    label _end_chpl__coerceMove[625642]
    (625646 return ret[625644])
  }
  function chpl__coerceCopy[262760](arg dstType[262763]:_array[255540](?), arg rhs[262767]:_tuple[246](?), arg definedConst[262771]:bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown ret[625655] "RVV" "temp"
    unknown eltType[262776] "dead at end of block" "insert auto destroy" "type variable"
    (651690 'move' eltType[262776](651688 call chpl__eltTypeFromArrayRuntimeType dstType[262763]))
    const dom[262782] "dead at end of block" "const" "ref var"
    (651695 'init ref decl' dom[262782])
    unknown call_tmp[903417] "expr temp" "maybe param" "maybe type" "temp"
    (903420 'move' call_tmp[903417](262784 call chpl__domainFromArrayRuntimeType dstType[262763]))
    (651693 'move' dom[262782](651692 'addr of' call_tmp[903417]))
    (262787 'end of statement')
    unknown call_tmp[903424] "maybe param" "maybe type" "temp"
    (903427 'move' call_tmp[903424](262794 call(262791 call (partial) buildArray _mt[203] dom[262782]) eltType[262776](initElts = 0)))
    unknown lhs[262789] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (651697 'init var' lhs[262789] call_tmp[903424])
    (262799 'end of statement' dom[262782] eltType[262776])
    unknown call_tmp[903431] "expr temp" "maybe param" "maybe type" "temp"
    (903434 'move' call_tmp[903431](262812 call(262809 call (partial) isRectangular _mt[203] lhs[262789])))
    unknown call_tmp[903436] "expr temp" "maybe param" "maybe type" "temp"
    (903439 'move' call_tmp[903436](262806 call ! call_tmp[903431]))
    unknown call_tmp[903441] "expr temp" "maybe param" "maybe type" "temp"
    (903444 'move' call_tmp[903441](262813 call _cond_test call_tmp[903436]))
    if call_tmp[903441]
    {
      (262801 call compilerError "Cannot assign from tuple to non-rectangular array")
    }
    (262819 call initArrFromTuple lhs[262789] rhs[262767] initCopy[257615])
    (564397 'end of statement' lhs[262789])
    unknown call_tmp[903448] "expr temp" "maybe param" "maybe type" "temp"
    (903451 'move' call_tmp[903448](262827 call _value _mt[203] lhs[262789]))
    (262833 call(262830 call (partial) dsiElementInitializationComplete _mt[203] call_tmp[903448]))
    (564399 'end of statement' lhs[262789])
    (625660 'move' ret[625655](625659 'deref' lhs[262789]))
    gotoReturn _end_chpl__coerceCopy[625653] _end_chpl__coerceCopy[625653]
    (564401 'end of statement' lhs[262789])
    label _end_chpl__coerceCopy[625653]
    (625657 return ret[625655])
  }
  function chpl__coerceMove[262838](arg dstType[262841]:_array[255540](?), in arg rhs[262845]:_tuple[246](?), arg definedConst[262849]:bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown ret[625666] "RVV" "temp"
    unknown eltType[262854] "dead at end of block" "insert auto destroy" "type variable"
    (651702 'move' eltType[262854](651700 call chpl__eltTypeFromArrayRuntimeType dstType[262841]))
    const dom[262860] "dead at end of block" "const" "ref var"
    (651707 'init ref decl' dom[262860])
    unknown call_tmp[903455] "expr temp" "maybe param" "maybe type" "temp"
    (903458 'move' call_tmp[903455](262862 call chpl__domainFromArrayRuntimeType dstType[262841]))
    (651705 'move' dom[262860](651704 'addr of' call_tmp[903455]))
    (262865 'end of statement')
    unknown call_tmp[903462] "maybe param" "maybe type" "temp"
    (903465 'move' call_tmp[903462](262872 call(262869 call (partial) buildArray _mt[203] dom[262860]) eltType[262854](initElts = 0)))
    unknown lhs[262867] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (651709 'init var' lhs[262867] call_tmp[903462])
    (262877 'end of statement' dom[262860] eltType[262854])
    unknown call_tmp[903469] "expr temp" "maybe param" "maybe type" "temp"
    (903472 'move' call_tmp[903469](262888 call(262885 call (partial) isRectangular _mt[203] lhs[262867])))
    unknown call_tmp[903474] "expr temp" "maybe param" "maybe type" "temp"
    (903477 'move' call_tmp[903474](262882 call ! call_tmp[903469]))
    unknown call_tmp[903479] "expr temp" "maybe param" "maybe type" "temp"
    (903482 'move' call_tmp[903479](262889 call _cond_test call_tmp[903474]))
    if call_tmp[903479]
    {
      (262879 call compilerError "Cannot assign from tuple to non-rectangular array")
    }
    (262895 call initArrFromTuple lhs[262867] rhs[262845] move[257613])
    (564406 'end of statement' lhs[262867])
    unknown call_tmp[903486] "expr temp" "maybe param" "maybe type" "temp"
    (903489 'move' call_tmp[903486](262903 call _value _mt[203] lhs[262867]))
    (262909 call(262906 call (partial) dsiElementInitializationComplete _mt[203] call_tmp[903486]))
    (564408 'end of statement' lhs[262867])
    (625671 'move' ret[625666](625670 'deref' lhs[262867]))
    gotoReturn _end_chpl__coerceMove[625664] _end_chpl__coerceMove[625664]
    (564410 'end of statement' lhs[262867])
    label _end_chpl__coerceMove[625664]
    (625668 return ret[625666])
  }
  function chpl__coerceCopy[262914](arg dstType[262917]:_array[255540](?), arg rhs[262923] :
  (262921 call desyncEltType dstType[262917]), arg definedConst[262927]:bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown ret[625677] "RVV" "temp"
    unknown eltType[262932] "dead at end of block" "insert auto destroy" "type variable"
    (651714 'move' eltType[262932](651712 call chpl__eltTypeFromArrayRuntimeType dstType[262917]))
    const dom[262938] "dead at end of block" "const" "ref var"
    (651719 'init ref decl' dom[262938])
    unknown call_tmp[903493] "expr temp" "maybe param" "maybe type" "temp"
    (903496 'move' call_tmp[903493](262940 call chpl__domainFromArrayRuntimeType dstType[262917]))
    (651717 'move' dom[262938](651716 'addr of' call_tmp[903493]))
    (262943 'end of statement')
    unknown call_tmp[903500] "maybe param" "maybe type" "temp"
    (903503 'move' call_tmp[903500](262950 call(262947 call (partial) buildArray _mt[203] dom[262938]) eltType[262932](initElts = 0)))
    unknown lhs[262945] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (651721 'init var' lhs[262945] call_tmp[903500])
    (262955 'end of statement' dom[262938] eltType[262932])
    Forall[262980] {
      induction variables:
        
        unknown e[262956] "index var" "insert auto destroy"
      iterated expressions:
        lhs[262945]
      shadow variables:
        rhs[262961] 'in' intent outer var rhs[262923]
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        unknown call_tmp[903507] "maybe param" "maybe type" "temp"
        (903510 'move' call_tmp[903507](262969 call eltType _mt[203] lhs[262945]))
        unknown copy[262967] "dead at end of block" "no auto destroy"
        (651723 'init var' copy[262967] rhs[262961] call_tmp[903507])
        (262974 'end of statement' rhs[262961] lhs[262945])
        (262975 '=' e[262956] copy[262967])
        (564416 'end of statement' e[262956] copy[262967])
      }
    }
    unknown call_tmp[903514] "expr temp" "maybe param" "maybe type" "temp"
    (903517 'move' call_tmp[903514](262984 call _value _mt[203] lhs[262945]))
    (262990 call(262987 call (partial) dsiElementInitializationComplete _mt[203] call_tmp[903514]))
    (564419 'end of statement' lhs[262945])
    (625682 'move' ret[625677](625681 'deref' lhs[262945]))
    gotoReturn _end_chpl__coerceCopy[625675] _end_chpl__coerceCopy[625675]
    (564421 'end of statement' lhs[262945])
    label _end_chpl__coerceCopy[625675]
    (625679 return ret[625677])
  }
  function chpl__coerceMove[262995](arg dstType[262998]:_array[255540](?), in arg rhs[263004] :
  (263002 call desyncEltType dstType[262998]), arg definedConst[263008]:bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown ret[625688] "RVV" "temp"
    unknown eltType[263013] "dead at end of block" "insert auto destroy" "type variable"
    (651728 'move' eltType[263013](651726 call chpl__eltTypeFromArrayRuntimeType dstType[262998]))
    const dom[263019] "dead at end of block" "const" "ref var"
    (651733 'init ref decl' dom[263019])
    unknown call_tmp[903521] "expr temp" "maybe param" "maybe type" "temp"
    (903524 'move' call_tmp[903521](263021 call chpl__domainFromArrayRuntimeType dstType[262998]))
    (651731 'move' dom[263019](651730 'addr of' call_tmp[903521]))
    (263024 'end of statement')
    unknown call_tmp[903528] "maybe param" "maybe type" "temp"
    (903531 'move' call_tmp[903528](263031 call(263028 call (partial) buildArray _mt[203] dom[263019]) eltType[263013](initElts = 0)))
    unknown lhs[263026] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (651735 'init var' lhs[263026] call_tmp[903528])
    (263036 'end of statement' dom[263019] eltType[263013])
    Forall[263058] {
      induction variables:
        
        unknown e[263037] "index var" "insert auto destroy"
      iterated expressions:
        lhs[263026]
      shadow variables:
        rhs[263042] 'in' intent outer var rhs[263004]
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        unknown copy[263048] "dead at end of block" "no auto destroy"
        (651737 'init var' copy[263048] rhs[263042] eltType[263013])
        (263052 'end of statement' rhs[263042] eltType[263013])
        (263053 '=' e[263037] copy[263048])
        (564427 'end of statement' e[263037] copy[263048])
      }
    }
    unknown call_tmp[903535] "expr temp" "maybe param" "maybe type" "temp"
    (903538 'move' call_tmp[903535](263062 call _value _mt[203] lhs[263026]))
    (263068 call(263065 call (partial) dsiElementInitializationComplete _mt[203] call_tmp[903535]))
    (564430 'end of statement' lhs[263026])
    (625693 'move' ret[625688](625692 'deref' lhs[263026]))
    gotoReturn _end_chpl__coerceMove[625686] _end_chpl__coerceMove[625686]
    (564432 'end of statement' lhs[263026])
    label _end_chpl__coerceMove[625686]
    (625690 return ret[625688])
  }
  function chpl__coerceCopy[263073](arg dstType[263076]:_array[255540](?), arg rhs[263080]:_iteratorRecord[165](?), arg definedConst[263084]:bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown ret[625699] "RVV" "temp"
    unknown eltType[263089] "dead at end of block" "insert auto destroy" "type variable"
    (651742 'move' eltType[263089](651740 call chpl__eltTypeFromArrayRuntimeType dstType[263076]))
    const dom[263095] "dead at end of block" "const" "ref var"
    (651747 'init ref decl' dom[263095])
    unknown call_tmp[903542] "expr temp" "maybe param" "maybe type" "temp"
    (903545 'move' call_tmp[903542](263097 call chpl__domainFromArrayRuntimeType dstType[263076]))
    (651745 'move' dom[263095](651744 'addr of' call_tmp[903542]))
    (263100 'end of statement')
    unknown call_tmp[903549] "maybe param" "maybe type" "temp"
    (903552 'move' call_tmp[903549](263107 call(263104 call (partial) buildArray _mt[203] dom[263095]) eltType[263089](initElts = 0)))
    unknown lhs[263102] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (651749 'init var' lhs[263102] call_tmp[903549])
    (263112 'end of statement' dom[263095] eltType[263089])
    (263114 call chpl__transferArray lhs[263102] rhs[263080](kind = initCopy[257615]))
    (564436 'end of statement' lhs[263102])
    unknown call_tmp[903556] "expr temp" "maybe param" "maybe type" "temp"
    (903559 'move' call_tmp[903556](263123 call _value _mt[203] lhs[263102]))
    (263129 call(263126 call (partial) dsiElementInitializationComplete _mt[203] call_tmp[903556]))
    (564438 'end of statement' lhs[263102])
    (625704 'move' ret[625699](625703 'deref' lhs[263102]))
    gotoReturn _end_chpl__coerceCopy[625697] _end_chpl__coerceCopy[625697]
    (564440 'end of statement' lhs[263102])
    label _end_chpl__coerceCopy[625697]
    (625701 return ret[625699])
  }
  function chpl__coerceMove[263134](arg dstType[263137]:_array[255540](?), arg rhs[263141]:_iteratorRecord[165](?), arg definedConst[263145]:bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown ret[625710] "RVV" "temp"
    unknown eltType[263150] "dead at end of block" "insert auto destroy" "type variable"
    (651754 'move' eltType[263150](651752 call chpl__eltTypeFromArrayRuntimeType dstType[263137]))
    const dom[263156] "dead at end of block" "const" "ref var"
    (651759 'init ref decl' dom[263156])
    unknown call_tmp[903563] "expr temp" "maybe param" "maybe type" "temp"
    (903566 'move' call_tmp[903563](263158 call chpl__domainFromArrayRuntimeType dstType[263137]))
    (651757 'move' dom[263156](651756 'addr of' call_tmp[903563]))
    (263161 'end of statement')
    unknown call_tmp[903570] "maybe param" "maybe type" "temp"
    (903573 'move' call_tmp[903570](263168 call(263165 call (partial) buildArray _mt[203] dom[263156]) eltType[263150](initElts = 0)))
    unknown lhs[263163] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (651761 'init var' lhs[263163] call_tmp[903570])
    (263173 'end of statement' dom[263156] eltType[263150])
    (263175 call chpl__transferArray lhs[263163] rhs[263141](kind = move[257613]))
    (564444 'end of statement' lhs[263163])
    unknown call_tmp[903577] "expr temp" "maybe param" "maybe type" "temp"
    (903580 'move' call_tmp[903577](263184 call _value _mt[203] lhs[263163]))
    (263190 call(263187 call (partial) dsiElementInitializationComplete _mt[203] call_tmp[903577]))
    (564446 'end of statement' lhs[263163])
    (625715 'move' ret[625710](625714 'deref' lhs[263163]))
    gotoReturn _end_chpl__coerceMove[625708] _end_chpl__coerceMove[625708]
    (564448 'end of statement' lhs[263163])
    label _end_chpl__coerceMove[625708]
    (625712 return ret[625710])
  }
  function chpl__coerceCopy[263195](arg dstType[263198]:_array[255540](?), arg rhs[263201]:_any[141](?), arg definedConst[263204]:bool[19]) : _unknown[42] "coerce fn" "last resort" "find user line"
  {
    unknown ret[625721] "RVV" "temp"
    unknown eltType[263209] "dead at end of block" "insert auto destroy" "type variable"
    (651766 'move' eltType[263209](651764 call chpl__eltTypeFromArrayRuntimeType dstType[263198]))
    const dom[263215] "dead at end of block" "const" "ref var"
    (651771 'init ref decl' dom[263215])
    unknown call_tmp[903584] "expr temp" "maybe param" "maybe type" "temp"
    (903587 'move' call_tmp[903584](263217 call chpl__domainFromArrayRuntimeType dstType[263198]))
    (651769 'move' dom[263215](651768 'addr of' call_tmp[903584]))
    (263220 'end of statement')
    unknown call_tmp[903591] "maybe param" "maybe type" "temp"
    (903594 'move' call_tmp[903591](263227 call(263224 call (partial) buildArray _mt[203] dom[263215]) eltType[263209](initElts = 0)))
    unknown lhs[263222] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (651773 'init var' lhs[263222] call_tmp[903591])
    (263232 'end of statement' dom[263215] eltType[263209])
    (263234 call chpl__transferArray lhs[263222] rhs[263201](kind = initCopy[257615]))
    (564452 'end of statement' lhs[263222])
    unknown call_tmp[903598] "expr temp" "maybe param" "maybe type" "temp"
    (903601 'move' call_tmp[903598](263243 call _value _mt[203] lhs[263222]))
    (263249 call(263246 call (partial) dsiElementInitializationComplete _mt[203] call_tmp[903598]))
    (564454 'end of statement' lhs[263222])
    (625726 'move' ret[625721](625725 'deref' lhs[263222]))
    gotoReturn _end_chpl__coerceCopy[625719] _end_chpl__coerceCopy[625719]
    (564456 'end of statement' lhs[263222])
    label _end_chpl__coerceCopy[625719]
    (625723 return ret[625721])
  }
  function chpl__coerceMove[263254](arg dstType[263257]:_array[255540](?), in arg rhs[263260]:_any[141](?), arg definedConst[263263]:bool[19]) : _unknown[42] "coerce fn" "last resort" "find user line"
  {
    unknown ret[625732] "RVV" "temp"
    unknown eltType[263268] "dead at end of block" "insert auto destroy" "type variable"
    (651778 'move' eltType[263268](651776 call chpl__eltTypeFromArrayRuntimeType dstType[263257]))
    const dom[263274] "dead at end of block" "const" "ref var"
    (651783 'init ref decl' dom[263274])
    unknown call_tmp[903605] "expr temp" "maybe param" "maybe type" "temp"
    (903608 'move' call_tmp[903605](263276 call chpl__domainFromArrayRuntimeType dstType[263257]))
    (651781 'move' dom[263274](651780 'addr of' call_tmp[903605]))
    (263279 'end of statement')
    unknown call_tmp[903612] "maybe param" "maybe type" "temp"
    (903615 'move' call_tmp[903612](263286 call(263283 call (partial) buildArray _mt[203] dom[263274]) eltType[263268](initElts = 0)))
    unknown lhs[263281] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (651785 'init var' lhs[263281] call_tmp[903612])
    (263291 'end of statement' dom[263274] eltType[263268])
    (263293 call chpl__transferArray lhs[263281] rhs[263260](kind = initCopy[257615]))
    (564460 'end of statement' lhs[263281])
    unknown call_tmp[903619] "expr temp" "maybe param" "maybe type" "temp"
    (903622 'move' call_tmp[903619](263302 call _value _mt[203] lhs[263281]))
    (263308 call(263305 call (partial) dsiElementInitializationComplete _mt[203] call_tmp[903619]))
    (564462 'end of statement' lhs[263281])
    (625737 'move' ret[625732](625736 'deref' lhs[263281]))
    gotoReturn _end_chpl__coerceMove[625730] _end_chpl__coerceMove[625730]
    (564464 'end of statement' lhs[263281])
    label _end_chpl__coerceMove[625730]
    (625734 return ret[625732])
  }
  function chpl__unref[263313](arg x[263318]:_array[255540](?)) : _unknown[42] "inline" "no copy return" "unref fn"
  {
    unknown ret[625743] "RVV" "temp"
    unknown ret[263329] "dead at end of block" "no auto destroy"
    (651787 'init var' ret[263329] x[263318])
    (263332 'end of statement')
    (625748 'move' ret[625743](625747 'deref' ret[263329]))
    gotoReturn _end_chpl__unref[625741] _end_chpl__unref[625741]
    (564466 'end of statement' ret[263329])
    label _end_chpl__unref[625741]
    (625745 return ret[625743])
  }
  where {
    unknown call_tmp[903628] "expr temp" "maybe param" "maybe type" "temp"
    (903631 'move' call_tmp[903628](263324 call _value _mt[203] x[263318]))
    (263322 call chpl__isArrayView call_tmp[903628])
  }
  function chpl__unref[263338](arg ir[263341]:_iteratorRecord[165](?)) : _unknown[42] "no copy return" "unref fn"
  {
    unknown ret[625754] "RVV" "temp"
    unknown call_tmp[903633] "maybe param" "maybe type" "temp"
    (903636 'move' call_tmp[903633](263348 call chpl__initCopy ir[263341](definedConst = 0)))
    unknown toArray[263346] "dead at end of block" "no auto destroy" "no copy"
    (651789 'init var' toArray[263346] call_tmp[903633])
    (263353 'end of statement')
    (625759 'move' ret[625754](625758 'deref' toArray[263346]))
    gotoReturn _end_chpl__unref[625752] _end_chpl__unref[625752]
    (564468 'end of statement' toArray[263346])
    label _end_chpl__unref[625752]
    (625756 return ret[625754])
  }
  function chpl__unref[263358](arg x[263363]:_array[255540](?)) : _unknown[42] "inline" "no copy return"
  {
    unknown ret[625765] "RVV" "temp"
    unknown ret[263368] "dead at end of block" "insert auto destroy" "no copy"
    (651791 'init var' ret[263368] x[263363])
    (263371 'end of statement')
    (625770 'move' ret[625765](625769 'deref' ret[263368]))
    gotoReturn _end_chpl__unref[625763] _end_chpl__unref[625763]
    (564470 'end of statement' ret[263368])
    label _end_chpl__unref[625763]
    (625767 return ret[625765])
  }
  function chpl__initCopy[263376](arg ir[263379]:_iteratorRecord[165](?), arg definedConst[263383]:bool[19]) : _unknown[42] "init copy fn"
  {
    unknown ret[625776] "RVV" "temp"
    unknown call_tmp[903640] "expr temp" "maybe param" "maybe type" "temp"
    (903643 'move' call_tmp[903640](263396 call _shape_ _mt[203] ir[263379]))
    unknown call_tmp[903645] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (903648 'move' call_tmp[903645](1000452 'new' _domain[225034](?) call_tmp[903640]))
    unknown shape[263391] "dead at end of block" "insert auto destroy"
    (651793 'init var' shape[263391] call_tmp[903645])
    (263400 'end of statement')
    unknown call_tmp[903652] "expr temp" "maybe param" "maybe type" "temp"
    (903655 'move' call_tmp[903652](263404 call _unowned _mt[203] shape[263391]))
    (263401 call = call_tmp[903652] 1)
    (564472 'end of statement' shape[263391])
    unknown call_tmp[903657] "expr temp" "maybe param" "maybe type" "temp"
    (903660 'move' call_tmp[903657](263410 call chpl__initCopy_shapeHelp shape[263391] ir[263379]))
    (625781 'move' ret[625776](625780 'deref' call_tmp[903657]))
    gotoReturn _end_chpl__initCopy[625774] _end_chpl__initCopy[625774]
    (564474 'end of statement' shape[263391])
    label _end_chpl__initCopy[625774]
    (625778 return ret[625776])
  }
  where {
    (263387 call chpl_iteratorHasDomainShape ir[263379])
  }
  function chpl__initCopy[263416](arg ir[263419]:_iteratorRecord[165](?), arg definedConst[263423]:bool[19]) : _unknown[42] "init copy fn"
  {
    unknown ret[625787] "RVV" "temp"
    unknown call_tmp[903664] "expr temp" "maybe param" "maybe type" "temp"
    (903667 'move' call_tmp[903664](263441 call _shape_ _mt[203] ir[263419]))
    unknown call_tmp[903669] "maybe param" "maybe type" "temp"
    (903672 'move' call_tmp[903669](263445 call chpl__buildDomainExpr call_tmp[903664] 0))
    unknown shape[263438] "dead at end of block" "insert auto destroy"
    (651795 'init var' shape[263438] call_tmp[903669])
    (263449 'end of statement')
    unknown call_tmp[903674] "expr temp" "maybe param" "maybe type" "temp"
    (903677 'move' call_tmp[903674](263452 call chpl__initCopy_shapeHelp shape[263438] ir[263419]))
    (625792 'move' ret[625787](625791 'deref' call_tmp[903674]))
    gotoReturn _end_chpl__initCopy[625785] _end_chpl__initCopy[625785]
    (564476 'end of statement' shape[263438])
    label _end_chpl__initCopy[625785]
    (625789 return ret[625787])
  }
  where {
    unknown tmp[501819] "maybe param" "temp"
    (501830 'move' tmp[501819](263429 call chpl_iteratorHasRangeShape ir[263419]))
    unknown call_tmp[903679] "expr temp" "maybe param" "maybe type" "temp"
    (903682 'move' call_tmp[903679](501832 call _cond_invalid tmp[501819]))
    if call_tmp[903679]
    {
      (501835 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[701941] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[701942] "maybe param" "temp"
    unknown call_tmp[903684] "expr temp" "maybe param" "maybe type" "temp"
    (903687 'move' call_tmp[903684](501820 call isTrue tmp[501819]))
    (701947 'move' tmp[701942](701945 call _cond_test call_tmp[903684]))
    if tmp[701942]
    {
      unknown tmp[701949] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[903689] "expr temp" "maybe param" "maybe type" "temp"
      (903692 'move' call_tmp[903689](263434 call chpl_iteratorFromForExpr ir[263419]))
      unknown call_tmp[903694] "expr temp" "maybe param" "maybe type" "temp"
      (903697 'move' call_tmp[903694](263431 call ! call_tmp[903689]))
      (701951 'move' tmp[701949](501823 call isTrue call_tmp[903694]))
      (701956 'move' tmp[701941](701953 '_paramFoldLogical' tmp[701942] tmp[701949]))
    }
    {
      (701961 'move' tmp[701941](701958 '_paramFoldLogical' tmp[701942] 0))
    }
    (1001642 call chpl_statementLevelSymbol tmp[701941])
  }
  function chpl__initCopy_shapeHelp[263458](arg shape[263461]:_domain[225034](?), arg ir[263465]:_iteratorRecord[165](?)) : _unknown[42] "no copy returns owned" "ignore transfer errors"
  {
    unknown ret[625798] "RVV" "temp"
    unknown call_tmp[903701] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (903704 'move' call_tmp[903701](263479 'typeof' ir[263465]))
    unknown call_tmp[903706] "expr temp" "maybe param" "maybe type" "temp"
    (903709 'move' call_tmp[903706](263477 call iteratorToArrayElementType call_tmp[903701]))
    unknown call_tmp[903711] "maybe param" "maybe type" "temp"
    (903714 'move' call_tmp[903711](263475 call(263472 call (partial) buildArray _mt[203] shape[263461]) call_tmp[903706](initElts = 0)))
    unknown result[263470] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (651797 'init var' result[263470] call_tmp[903711])
    (263483 'end of statement')
    unknown call_tmp[903718] "expr temp" "maybe param" "maybe type" "temp"
    (903721 'move' call_tmp[903718](263493 call eltType _mt[203] result[263470]))
    unknown call_tmp[903723] "expr temp" "maybe param" "maybe type" "temp"
    (903726 'move' call_tmp[903723](263491 call isArray call_tmp[903718]))
    unknown call_tmp[903728] "expr temp" "maybe param" "maybe type" "temp"
    (903731 'move' call_tmp[903728](263496 call _cond_test call_tmp[903723]))
    if call_tmp[903728]
    {
      (263485 call compilerError "creating an array of arrays using a for- or forall-expression is not supported, except when using a for-expression over a rang)
    }
    unknown call_tmp[903733] "expr temp" "maybe param" "maybe type" "temp"
    (903736 'move' call_tmp[903733](263926 call chpl_iteratorFromForExpr ir[263465]))
    unknown call_tmp[903738] "expr temp" "maybe param" "maybe type" "temp"
    (903741 'move' call_tmp[903738](263928 call _cond_test call_tmp[903733]))
    if call_tmp[903738]
    {
      unknown call_tmp[903745] "expr temp" "maybe param" "maybe type" "temp"
      (903748 'move' call_tmp[903745](263660 call eltType _mt[203] result[263470]))
      unknown call_tmp[903750] "expr temp" "maybe param" "maybe type" "temp"
      (903753 'move' call_tmp[903750](263658 call needsInitWorkaround call_tmp[903745]))
      unknown call_tmp[903755] "expr temp" "maybe param" "maybe type" "temp"
      (903758 'move' call_tmp[903755](263663 call _cond_test call_tmp[903750]))
      if call_tmp[903755]
      {
        {
          unknown _indexOfInterest[263533] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[263534] "expr temp" "temp"
          unknown call_tmp[903762] "expr temp" "maybe param" "maybe type" "temp"
          (903765 'move' call_tmp[903762](263543 call _dom _mt[203] result[263470]))
          unknown call_tmp[903767] "expr temp" "maybe param" "maybe type" "temp"
          (903770 'move' call_tmp[903767](263546 call _getIterator call_tmp[903762]))
          unknown call_tmp[903772] "expr temp" "maybe param" "maybe type" "temp"
          (903775 'move' call_tmp[903772](263549 call _getIterator ir[263465]))
          (263551 'move' _iterator[263534](263516 call _build_tuple call_tmp[903767] call_tmp[903772]))
          Defer
          {
            {
              (263579 call _freeIterator _iterator[263534])
            }
          }
          { scopeless type
            (263556 'move' _indexOfInterest[263533](263553 call iteratorIndex _iterator[263534]))
          }
          ForLoop[263535]
          {
            (263561 call _check_tuple_var_decl _indexOfInterest[263533] 2)
            (564480 'end of statement')
            unknown ri[263504] "index var" "insert auto destroy"
            (564481 'end of statement')
            (263568 'move' ri[263504](263565 call _indexOfInterest[263533] 0))
            (564482 'end of statement' ri[263504])
            unknown src[263506] "index var" "insert auto destroy"
            (564484 'end of statement')
            (263574 'move' src[263506](263571 call _indexOfInterest[263533] 1))
            (564485 'end of statement' src[263506])
            {
              unknown r[263519] "dead at end of block" "ref var"
              (651802 'init ref decl' r[263519])
              unknown call_tmp[903777] "expr temp" "maybe param" "maybe type" "temp"
              (903780 'move' call_tmp[903777](263521 call result[263470] ri[263504]))
              (651800 'move' r[263519](651799 'addr of' call_tmp[903777]))
              (263524 'end of statement')
              unknown copy[263526] "dead at end of block" "no auto destroy"
              (651804 'init var' copy[263526] src[263506])
              (263529 'end of statement' result[263470] ri[263504] src[263506])
              (263530 '=' r[263519] copy[263526])
              (564490 'end of statement' r[263519] copy[263526])
            }
            label _continueLabel[263538]
            _indexOfInterest[263533]
            _iterator[263534]
          }
          label _breakLabel[263539]
        }
      }
      {
        {
          unknown _indexOfInterest[263607] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[263608] "expr temp" "temp"
          unknown call_tmp[903782] "expr temp" "maybe param" "maybe type" "temp"
          (903785 'move' call_tmp[903782](263617 call _getIterator result[263470]))
          unknown call_tmp[903787] "expr temp" "maybe param" "maybe type" "temp"
          (903790 'move' call_tmp[903787](263620 call _getIterator ir[263465]))
          (263622 'move' _iterator[263608](263597 call _build_tuple call_tmp[903782] call_tmp[903787]))
          Defer
          {
            {
              (263650 call _freeIterator _iterator[263608])
            }
          }
          { scopeless type
            (263627 'move' _indexOfInterest[263607](263624 call iteratorIndex _iterator[263608]))
          }
          ForLoop[263609]
          {
            (263632 call _check_tuple_var_decl _indexOfInterest[263607] 2)
            (564494 'end of statement')
            unknown r[263588] "index var" "insert auto destroy"
            (564495 'end of statement')
            (263639 'move' r[263588](263636 call _indexOfInterest[263607] 0))
            (564496 'end of statement' r[263588])
            unknown src[263590] "index var" "insert auto destroy"
            (564498 'end of statement')
            (263645 'move' src[263590](263642 call _indexOfInterest[263607] 1))
            (564499 'end of statement' src[263590])
            {
              unknown copy[263600] "dead at end of block" "no auto destroy"
              (651806 'init var' copy[263600] src[263590])
              (263603 'end of statement' src[263590])
              (263604 '=' r[263588] copy[263600])
              (564502 'end of statement' r[263588] copy[263600])
            }
            label _continueLabel[263612]
            _indexOfInterest[263607]
            _iterator[263608]
          }
          label _breakLabel[263613]
        }
      }
    }
    {
      unknown call_tmp[903792] "expr temp" "maybe param" "maybe type" "temp"
      (903795 'move' call_tmp[903792](263919 call chpl_iteratorFromForeachExpr ir[263465]))
      unknown call_tmp[903797] "expr temp" "maybe param" "maybe type" "temp"
      (903800 'move' call_tmp[903797](263921 call _cond_test call_tmp[903792]))
      if call_tmp[903797]
      {
        unknown call_tmp[903804] "expr temp" "maybe param" "maybe type" "temp"
        (903807 'move' call_tmp[903804](263830 call eltType _mt[203] result[263470]))
        unknown call_tmp[903809] "expr temp" "maybe param" "maybe type" "temp"
        (903812 'move' call_tmp[903809](263828 call needsInitWorkaround call_tmp[903804]))
        unknown call_tmp[903814] "expr temp" "maybe param" "maybe type" "temp"
        (903817 'move' call_tmp[903814](263833 call _cond_test call_tmp[903809]))
        if call_tmp[903814]
        {
          {
            unknown _indexOfInterest[263701] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[263702] "expr temp" "temp"
            unknown call_tmp[903821] "expr temp" "maybe param" "maybe type" "temp"
            (903824 'move' call_tmp[903821](263711 call _dom _mt[203] result[263470]))
            unknown call_tmp[903826] "expr temp" "maybe param" "maybe type" "temp"
            (903829 'move' call_tmp[903826](263714 call _getIterator call_tmp[903821]))
            unknown call_tmp[903831] "expr temp" "maybe param" "maybe type" "temp"
            (903834 'move' call_tmp[903831](263717 call _getIterator ir[263465]))
            (263719 'move' _iterator[263702](263682 call _build_tuple call_tmp[903826] call_tmp[903831]))
            Defer
            {
              {
                (263747 call _freeIterator _iterator[263702])
              }
            }
            { scopeless type
              (263724 'move' _indexOfInterest[263701](263721 call iteratorIndex _iterator[263702]))
            }
            ForLoop[263703] order-independent
            {
              (263729 call _check_tuple_var_decl _indexOfInterest[263701] 2)
              (564506 'end of statement')
              unknown ri[263670] "index var" "insert auto destroy"
              (564507 'end of statement')
              (263736 'move' ri[263670](263733 call _indexOfInterest[263701] 0))
              (564508 'end of statement' ri[263670])
              unknown src[263672] "index var" "insert auto destroy"
              (564510 'end of statement')
              (263742 'move' src[263672](263739 call _indexOfInterest[263701] 1))
              (564511 'end of statement' src[263672])
              {
                unknown r[263685] "dead at end of block" "ref var"
                (651811 'init ref decl' r[263685])
                unknown call_tmp[903836] "expr temp" "maybe param" "maybe type" "temp"
                (903839 'move' call_tmp[903836](263687 call result[263470] ri[263670]))
                (651809 'move' r[263685](651808 'addr of' call_tmp[903836]))
                (263690 'end of statement')
                unknown copy[263692] "dead at end of block" "no auto destroy"
                (651813 'init var' copy[263692] src[263672])
                (263695 'end of statement' result[263470] ri[263670] src[263672])
                (263696 '=' r[263685] copy[263692])
                (564516 'end of statement' r[263685] copy[263692])
              }
              label _continueLabel[263706]
              _indexOfInterest[263701]
              _iterator[263702]
            }
            label _breakLabel[263707]
          }
        }
        {
          {
            unknown _indexOfInterest[263777] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[263778] "expr temp" "temp"
            unknown call_tmp[903841] "expr temp" "maybe param" "maybe type" "temp"
            (903844 'move' call_tmp[903841](263787 call _getIterator result[263470]))
            unknown call_tmp[903846] "expr temp" "maybe param" "maybe type" "temp"
            (903849 'move' call_tmp[903846](263790 call _getIterator ir[263465]))
            (263792 'move' _iterator[263778](263765 call _build_tuple call_tmp[903841] call_tmp[903846]))
            Defer
            {
              {
                (263820 call _freeIterator _iterator[263778])
              }
            }
            { scopeless type
              (263797 'move' _indexOfInterest[263777](263794 call iteratorIndex _iterator[263778]))
            }
            ForLoop[263779] order-independent
            {
              (263802 call _check_tuple_var_decl _indexOfInterest[263777] 2)
              (564520 'end of statement')
              unknown r[263756] "index var" "insert auto destroy"
              (564521 'end of statement')
              (263809 'move' r[263756](263806 call _indexOfInterest[263777] 0))
              (564522 'end of statement' r[263756])
              unknown src[263758] "index var" "insert auto destroy"
              (564524 'end of statement')
              (263815 'move' src[263758](263812 call _indexOfInterest[263777] 1))
              (564525 'end of statement' src[263758])
              {
                unknown copy[263768] "dead at end of block" "no auto destroy"
                (651815 'init var' copy[263768] src[263758])
                (263771 'end of statement' src[263758])
                (263772 '=' r[263756] copy[263768])
                (564528 'end of statement' r[263756] copy[263768])
              }
              label _continueLabel[263782]
              _indexOfInterest[263777]
              _iterator[263778]
            }
            label _breakLabel[263783]
          }
        }
      }
      {
        unknown call_tmp[903853] "expr temp" "maybe param" "maybe type" "temp"
        (903856 'move' call_tmp[903853](263911 call eltType _mt[203] result[263470]))
        unknown call_tmp[903858] "expr temp" "maybe param" "maybe type" "temp"
        (903861 'move' call_tmp[903858](263909 call needsInitWorkaround call_tmp[903853]))
        unknown call_tmp[903863] "expr temp" "maybe param" "maybe type" "temp"
        (903866 'move' call_tmp[903863](263914 call _cond_test call_tmp[903858]))
        if call_tmp[903863]
        {
          unknown call_tmp[903870] "expr temp" "maybe param" "maybe type" "temp"
          (903873 'move' call_tmp[903870](470335 call _dom _mt[203] result[263470]))
          unknown call_tmp[903875] "maybe param" "maybe type" "temp"
          (903878 'move' call_tmp[903875](470331 call chpl__staticAutoLocalCheck result[263470] call_tmp[903870]))
          unknown chpl__staticAutoLocalCheckSym[470330] "dead at end of block" "param" "temp"
          (651817 'init var' chpl__staticAutoLocalCheckSym[470330] call_tmp[903875])
          if chpl__staticAutoLocalCheckSym[470330]
          {
            unknown call_tmp[903882] "expr temp" "maybe param" "maybe type" "temp"
            (903885 'move' call_tmp[903882](263848 call _dom _mt[203] result[263470]))
            Forall[263877] {
              induction variables:
                
                unknown ri[263840] "index var" "insert auto destroy"
                
                unknown src[263842] "index var" "insert auto destroy"
              iterated expressions:
                call_tmp[903882]
                ir[263465]
              shadow variables:
                result[263855] 'ref' intent outer var result[263470]
                  init block
                  {
                  }
                  deinit block
                  {
                  }
              other variables
                forall body
              {
                unknown r[263861] "dead at end of block" "ref var"
                (651822 'init ref decl' r[263861])
                unknown call_tmp[903887] "expr temp" "maybe param" "maybe type" "temp"
                (903890 'move' call_tmp[903887](470341 'may be local access' result[263470] ri[263840] chpl__staticAutoLocalCheckSym[470330] 1))
                (651820 'move' r[263861](651819 'addr of' call_tmp[903887]))
                (263866 'end of statement')
                unknown copy[263868] "dead at end of block" "no auto destroy"
                (651824 'init var' copy[263868] src[263842])
                (263871 'end of statement' result[263470] ri[263840] src[263842])
                (263872 '=' r[263861] copy[263868])
                (564534 'end of statement' r[263861] copy[263868])
              }
            }
          }
          {
            unknown call_tmp[903894] "expr temp" "maybe param" "maybe type" "temp"
            (903897 'move' call_tmp[903894](470319 call _dom _mt[203] result[263470]))
            Forall[470313] {
              induction variables:
                
                unknown ri[470314] "index var" "insert auto destroy"
                
                unknown src[470316] "index var" "insert auto destroy"
              iterated expressions:
                call_tmp[903894]
                ir[263465]
              shadow variables:
                result[470324] 'ref' intent outer var result[263470]
                  init block
                  {
                  }
                  deinit block
                  {
                  }
              other variables
                forall body
              {
                unknown r[470300] "dead at end of block" "ref var"
                (651829 'init ref decl' r[470300])
                unknown call_tmp[903899] "expr temp" "maybe param" "maybe type" "temp"
                (903902 'move' call_tmp[903899](470302 call result[470324] ri[470314]))
                (651827 'move' r[470300](651826 'addr of' call_tmp[903899]))
                (470305 'end of statement')
                unknown copy[470306] "dead at end of block" "no auto destroy"
                (651831 'init var' copy[470306] src[470316])
                (470309 'end of statement' result[470324] ri[470314] src[470316])
                (470310 '=' r[470300] copy[470306])
                (564540 'end of statement' r[470300] copy[470306])
              }
            }
          }
        }
        {
          Forall[263904] {
            induction variables:
              
              unknown r[263883] "index var" "insert auto destroy"
              
              unknown src[263885] "index var" "insert auto destroy"
            iterated expressions:
              result[263470]
              ir[263465]
            shadow variables:
            other variables
              forall body
            {
              unknown copy[263895] "dead at end of block" "no auto destroy"
              (651833 'init var' copy[263895] src[263885])
              (263898 'end of statement' src[263885])
              (263899 '=' r[263883] copy[263895])
              (564544 'end of statement' r[263883] copy[263895])
            }
          }
        }
      }
    }
    unknown call_tmp[903906] "expr temp" "maybe param" "maybe type" "temp"
    (903909 'move' call_tmp[903906](263934 call _value _mt[203] result[263470]))
    (263940 call(263937 call (partial) dsiElementInitializationComplete _mt[203] call_tmp[903906]))
    (564547 'end of statement' result[263470])
    (625803 'move' ret[625798](625802 'deref' result[263470]))
    gotoReturn _end_chpl__initCopy_shapeHelp[625796] _end_chpl__initCopy_shapeHelp[625796]
    (564549 'end of statement' result[263470])
    label _end_chpl__initCopy_shapeHelp[625796]
    (625800 return ret[625798])
  }
  function chpl__throwErrorUnchecked[263945](in arg e[263950] :
  (263948 call _owned[238](?) Error[85511])) : _unknown[42] throws "unchecked throws" "no return value for void"
  {
    unknown call_tmp[903913] "expr temp" "maybe param" "maybe type" "temp"
    (903916 'move' call_tmp[903913](542457 call chpl_fix_thrown_error e[263950]))
    (263954 'throw' call_tmp[903913])
    (625807 return _void[46])
  }
  function chpl__initCopy[263958](arg ir[263961]:_iteratorRecord[165](?), arg definedConst[263965]:bool[19]) : _unknown[42] "init copy fn"
  {
    unknown ret[625811] "RVV" "temp"
    unknown call_tmp[903918] "maybe param" "maybe type" "temp"
    (903921 'move' call_tmp[903918](263972 call chpl_iteratorHasRangeShape ir[263961]))
    unknown shapeful[263970] "dead at end of block" "param"
    (651835 'init var' shapeful[263970] call_tmp[903918])
    (263975 'end of statement')
    unknown r[263977] "dead at end of block" "insert auto destroy"
    unknown tmp[701968] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[701969] "maybe param" "temp"
    (701974 'move' tmp[701969](701972 call _cond_test shapeful[263970]))
    if tmp[701969]
    {
      unknown tmp[701976] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (701978 'move' tmp[701976](263980 call _shape_ _mt[203] ir[263961]))
      (701983 'move' tmp[701968](701980 '_paramFoldLogical' tmp[701969] tmp[701976]))
    }
    {
      unknown tmp[701985] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (701987 'move' tmp[701985](263985 call chpl_build_bounded_range 1 0))
      (701992 'move' tmp[701968](701989 '_paramFoldLogical' tmp[701969] tmp[701985]))
    }
    (651837 'init var' r[263977] tmp[701968])
    (263991 'end of statement')
    unknown i[263993] "dead at end of block" "insert auto destroy"
    (651839 'init var' i[263993] 0)
    (263996 'end of statement')
    unknown call_tmp[903927] "maybe param" "maybe type" "temp"
    (903930 'move' call_tmp[903927](264003 call(264000 call (partial) sizeAs _mt[203] r[263977]) c_size_t[614]))
    unknown size[263998] "dead at end of block" "insert auto destroy"
    (651841 'init var' size[263998] call_tmp[903927])
    (264006 'end of statement')
    unknown elemType[264008] "dead at end of block" "insert auto destroy" "type variable"
    unknown call_tmp[903932] "expr temp" "maybe param" "used in type" "maybe type" "temp" "type variable"
    (903935 'move' call_tmp[903932](651845 'typeof' ir[263961]))
    (651847 'move' elemType[264008](651844 call iteratorToArrayElementType call_tmp[903932]))
    unknown call_tmp[903937] "maybe param" "maybe type" "temp"
    (903940 'move' call_tmp[903937](264017 call _ddata[67573](?) elemType[264008]))
    unknown data[264015] "dead at end of block" "insert auto destroy"
    (651849 'init var' data[264015] nil[32] call_tmp[903937])
    (264021 'end of statement')
    unknown callPostAlloc[264023] "dead at end of block" "insert auto destroy"
    (651851 'default init var' callPostAlloc[264023] bool[19])
    (264026 'end of statement')
    unknown subloc[264028] "dead at end of block" "insert auto destroy"
    (651853 'init var' subloc[264028] c_sublocid_none[135197])
    (264031 'end of statement')
    unknown call_tmp[903942] "expr temp" "maybe param" "maybe type" "temp"
    (903945 'move' call_tmp[903942](264041 call > size[263998] 0))
    unknown call_tmp[903947] "expr temp" "maybe param" "maybe type" "temp"
    (903950 'move' call_tmp[903947](264045 call _cond_test call_tmp[903942]))
    if call_tmp[903947]
    {
      unknown call_tmp[903952] "expr temp" "maybe param" "maybe type" "temp"
      (903955 'move' call_tmp[903952](264037 call _ddata_allocate_noinit elemType[264008] size[263998] callPostAlloc[264023]))
      (264033 call = data[264015] call_tmp[903952])
      (564554 'end of statement' data[264015] elemType[264008] size[263998] callPostAlloc[264023])
    }
    Try
    {
      {
        {
          unknown _indexOfInterest[264181] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[264182] "expr temp" "temp"
          (264191 'move' _iterator[264182](264189 call _getIterator ir[263961]))
          Defer
          {
            {
              (264206 call _freeIterator _iterator[264182])
            }
          }
          { scopeless type
            (264196 'move' _indexOfInterest[264181](264193 call iteratorIndex _iterator[264182]))
          }
          ForLoop[264183]
          {
            unknown elt[264050] "index var" "insert auto destroy"
            (564560 'end of statement')
            (264201 'move' elt[264050] _indexOfInterest[264181])
            (564561 'end of statement' elt[264050])
            {
              unknown call_tmp[903957] "maybe param" "maybe type" "temp"
              (903960 'move' call_tmp[903957](264057 call chpl__initCopy elt[264050] definedConst[263965]))
              unknown eltCopy[264055] "dead at end of block" "no auto destroy" "no copy"
              (651855 'init var' eltCopy[264055] call_tmp[903957])
              (264062 'end of statement' elt[264050])
              unknown call_tmp[903962] "expr temp" "maybe param" "maybe type" "temp"
              (903965 'move' call_tmp[903962](264164 call >= i[263993] size[263998]))
              unknown call_tmp[903967] "expr temp" "maybe param" "maybe type" "temp"
              (903970 'move' call_tmp[903967](264168 call _cond_test call_tmp[903962]))
              if call_tmp[903967]
              {
                unknown oldSize[264065] "dead at end of block" "insert auto destroy"
                (651857 'init var' oldSize[264065] size[263998])
                (264068 'end of statement')
                unknown oldData[264070] "dead at end of block" "insert auto destroy"
                (651859 'init var' oldData[264070] data[264015])
                (264073 'end of statement' size[263998] data[264015])
                unknown call_tmp[903972] "expr temp" "maybe param" "maybe type" "temp"
                (903975 'move' call_tmp[903972](264087 call == size[263998] 0))
                unknown call_tmp[903977] "expr temp" "maybe param" "maybe type" "temp"
                (903980 'move' call_tmp[903977](264091 call _cond_test call_tmp[903972]))
                if call_tmp[903977]
                {
                  (264074 call = size[263998] 4)
                  (564566 'end of statement' size[263998])
                }
                {
                  unknown call_tmp[903982] "expr temp" "maybe param" "maybe type" "temp"
                  (903985 'move' call_tmp[903982](264082 call * 2 size[263998]))
                  (264079 call = size[263998] call_tmp[903982])
                  (564568 'end of statement' size[263998])
                }
                unknown call_tmp[903987] "expr temp" "maybe param" "maybe type" "temp"
                (903990 'move' call_tmp[903987](264101 call _ddata_allocate_noinit elemType[264008] size[263998] callPostAlloc[264023]))
                (264097 call = data[264015] call_tmp[903987])
                (564570 'end of statement' data[264015] elemType[264008] size[263998] callPostAlloc[264023])
                {
                  unknown _indexOfInterest[264121] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[264122] "expr temp" "temp"
                  unknown call_tmp[903992] "expr temp" "maybe param" "maybe type" "temp"
                  (903995 'move' call_tmp[903992](264138 call chpl_direct_counted_range_iter 0 oldSize[264065]))
                  (264131 'move' _iterator[264122](264129 call _getIterator call_tmp[903992]))
                  Defer
                  {
                    {
                      (264153 call _freeIterator _iterator[264122])
                    }
                  }
                  { scopeless type
                    (264143 'move' _indexOfInterest[264121](264140 call iteratorIndex _iterator[264122]))
                  }
                  ForLoop[264123]
                  {
                    unknown i[264105] "index var" "insert auto destroy"
                    (564576 'end of statement')
                    (264148 'move' i[264105] _indexOfInterest[264121])
                    (564577 'end of statement' i[264105])
                    {
                      unknown call_tmp[903997] "expr temp" "maybe param" "maybe type" "temp"
                      (904000 'move' call_tmp[903997](264116 call data[264015] i[264105]))
                      unknown call_tmp[904002] "expr temp" "maybe param" "maybe type" "temp"
                      (904005 'move' call_tmp[904002](264119 call oldData[264070] i[264105]))
                      (264114 '=' call_tmp[903997] call_tmp[904002])
                      (564579 'end of statement' data[264015] i[264105] oldData[264070] i[264105])
                    }
                    label _continueLabel[264126]
                    _indexOfInterest[264121]
                    _iterator[264122]
                  }
                  label _breakLabel[264127]
                }
                (264161 call _ddata_free oldData[264070] oldSize[264065])
                (564584 'end of statement' oldData[264070] oldSize[264065])
              }
              unknown call_tmp[904007] "expr temp" "maybe param" "maybe type" "temp"
              (904010 'move' call_tmp[904007](264174 call data[264015] i[263993]))
              (264172 '=' call_tmp[904007] eltCopy[264055])
              (564587 'end of statement' data[264015] i[263993] eltCopy[264055])
              (264177 call += i[263993] 1)
              (564591 'end of statement' i[263993])
            }
            label _continueLabel[264186]
            _indexOfInterest[264181]
            _iterator[264182]
          }
          label _breakLabel[264187]
        }
      }
    }
    Catch e
    {
      unknown call_tmp[904012] "maybe param" "maybe type" "temp"
      (904015 'move' call_tmp[904012](395537 'current error'))
      unknown tmp[395534] "dead at end of block" "insert auto destroy" "temp"
      (651861 'init var' tmp[395534] call_tmp[904012])
      unknown call_tmp[904017] "expr temp" "maybe param" "maybe type" "temp"
      (904020 'move' call_tmp[904017](395540 'to non nilable class' tmp[395534]))
      unknown call_tmp[904022] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (904025 'move' call_tmp[904022](1000453 'new' _owned[238](?) call_tmp[904017]))
      unknown e[264277] "dead at end of block" "insert auto destroy"
      (651863 'init var' e[264277] call_tmp[904022])
      (564593 'end of statement')
      {
        {
          unknown _indexOfInterest[264230] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[264231] "expr temp" "temp"
          unknown call_tmp[904027] "expr temp" "maybe param" "maybe type" "temp"
          (904030 'move' call_tmp[904027](264244 call - i[263993] 1))
          unknown call_tmp[904032] "expr temp" "maybe param" "maybe type" "temp"
          (904035 'move' call_tmp[904032](264247 call chpl_direct_range_iter 0 call_tmp[904027]))
          (264240 'move' _iterator[264231](264238 call _getIterator call_tmp[904032]))
          Defer
          {
            {
              (264262 call _freeIterator _iterator[264231])
            }
          }
          { scopeless type
            (264252 'move' _indexOfInterest[264230](264249 call iteratorIndex _iterator[264231]))
          }
          ForLoop[264232]
          {
            unknown j[264215] "index var" "insert auto destroy"
            (564595 'end of statement')
            (264257 'move' j[264215] _indexOfInterest[264230])
            (564596 'end of statement' j[264215])
            {
              unknown call_tmp[904037] "expr temp" "maybe param" "maybe type" "temp"
              (904040 'move' call_tmp[904037](264228 call data[264015] j[264215]))
              (264226 call chpl__autoDestroy call_tmp[904037])
              (564598 'end of statement' data[264015] j[264215])
            }
            label _continueLabel[264235]
            _indexOfInterest[264230]
            _iterator[264231]
          }
          label _breakLabel[264236]
        }
        (264270 call _ddata_free data[264015] size[263998])
        (564601 'end of statement' data[264015] size[263998])
        (264274 call chpl__throwErrorUnchecked e[264277])
        (564604 'end of statement' e[264277])
      }
    }
    unknown tmp[501840] "maybe param" "temp"
    (501851 'move' tmp[501840] shapeful[263970])
    unknown call_tmp[904042] "expr temp" "maybe param" "maybe type" "temp"
    (904045 'move' call_tmp[904042](501853 call _cond_invalid tmp[501840]))
    if call_tmp[904042]
    {
      (501856 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[701999] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[702000] "maybe param" "temp"
    unknown call_tmp[904047] "expr temp" "maybe param" "maybe type" "temp"
    (904050 'move' call_tmp[904047](501841 call isTrue tmp[501840]))
    (702005 'move' tmp[702000](702003 call _cond_test call_tmp[904047]))
    if tmp[702000]
    {
      unknown tmp[702007] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[904054] "expr temp" "maybe param" "maybe type" "temp"
      (904057 'move' call_tmp[904054](264299 call(264296 call (partial) sizeAs _mt[203] r[263977]) uint(64)[86]))
      unknown call_tmp[904059] "expr temp" "maybe param" "maybe type" "temp"
      (904062 'move' call_tmp[904059](264292 call < i[263993] call_tmp[904054]))
      (702009 'move' tmp[702007](501844 call isTrue call_tmp[904059]))
      (702014 'move' tmp[701999](702011 '_paramFoldLogical' tmp[702000] tmp[702007]))
    }
    {
      (702019 'move' tmp[701999](702016 '_paramFoldLogical' tmp[702000] 0))
    }
    unknown call_tmp[904064] "expr temp" "maybe param" "maybe type" "temp"
    (904067 'move' call_tmp[904064](264301 call _cond_test tmp[701999]))
    if call_tmp[904064]
    {
      unknown call_tmp[904069] "expr temp" "maybe param" "maybe type" "temp"
      (904072 'move' call_tmp[904069](264284 call # r[263977] i[263993]))
      (264281 call = r[263977] call_tmp[904069])
      (564607 'end of statement' r[263977] i[263993])
    }
    unknown call_tmp[904074] "expr temp" "maybe param" "maybe type" "temp"
    (904077 'move' call_tmp[904074](264327 call ! shapeful[263970]))
    unknown call_tmp[904079] "expr temp" "maybe param" "maybe type" "temp"
    (904082 'move' call_tmp[904079](264330 call _cond_test call_tmp[904074]))
    if call_tmp[904079]
    {
      unknown tmp[702026] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[702027] "maybe param" "temp"
      unknown call_tmp[904084] "expr temp" "maybe param" "maybe type" "temp"
      (904087 'move' call_tmp[904084](264309 call == i[263993] 0))
      (702032 'move' tmp[702027](702030 call _cond_test call_tmp[904084]))
      if tmp[702027]
      {
        unknown tmp[702034] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (702036 'move' tmp[702034](264315 call chpl_build_bounded_range 1 0))
        (702041 'move' tmp[702026](702038 '_paramFoldLogical' tmp[702027] tmp[702034]))
      }
      {
        unknown tmp[702043] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[904089] "expr temp" "maybe param" "maybe type" "temp"
        (904092 'move' call_tmp[904089](264320 call chpl_build_low_bounded_range capturedIteratorLowBound[248241]))
        (702045 'move' tmp[702043](264317 call # call_tmp[904089] i[263993]))
        (702050 'move' tmp[702026](702047 '_paramFoldLogical' tmp[702027] tmp[702043]))
      }
      (264306 call = r[263977] tmp[702026])
      (564610 'end of statement' r[263977] i[263993])
    }
    unknown call_tmp[904094] "maybe param" "maybe type" "temp"
    (904097 'move' call_tmp[904094](264340 call chpl__buildDomainExpr r[263977] 0))
    unknown D[264336] "dead at end of block" "insert auto destroy"
    (651865 'init var' D[264336] call_tmp[904094])
    (264344 'end of statement' r[263977] elemType[264008])
    unknown call_tmp[904099] "expr temp" "maybe param" "maybe type" "temp"
    (904102 'move' call_tmp[904099](264440 call != data[264015] nil[32]))
    unknown call_tmp[904104] "expr temp" "maybe param" "maybe type" "temp"
    (904107 'move' call_tmp[904104](264444 call _cond_test call_tmp[904099]))
    if call_tmp[904104]
    {
      unknown call_tmp[904109] "expr temp" "maybe param" "maybe type" "temp"
      (904112 'move' call_tmp[904109](264352 call _cond_test callPostAlloc[264023]))
      if call_tmp[904109]
      {
        (264347 call _ddata_allocate_postalloc data[264015] size[263998])
        (564613 'end of statement' data[264015] size[263998])
      }
      { scopeless type
        unknown call_type_tmp[578693] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[904114] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (904117 'move' call_tmp[904114](264367 call data[264015] 0))
        (578697 'move' call_type_tmp[578693](264369 'typeof' call_tmp[904114]))
      }
      unknown call_tmp[904121] "expr temp" "maybe param" "maybe type" "temp"
      (904124 'move' call_tmp[904121](264371 call : size[263998] int(64)[10]))
      unknown call_tmp[904126] "maybe param" "maybe type" "temp"
      (904129 'move' call_tmp[904126](264365 call(264362 call (partial) buildArrayWith _mt[203] D[264336]) call_type_tmp[578693] data[264015] call_tmp[904121]))
      unknown A[264358] "dead at end of block" "insert auto destroy" "no copy"
      (651867 'init var' A[264358] call_tmp[904126])
      (264376 'end of statement' D[264336] data[264015] size[263998])
      { scopeless type
        unknown call_type_tmp[578699] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[904131] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (904134 'move' call_tmp[904131](264384 call data[264015] 0))
        (578703 'move' call_type_tmp[578699](264386 'typeof' call_tmp[904131]))
      }
      unknown call_tmp[904138] "expr temp" "maybe param" "maybe type" "temp"
      (904141 'move' call_tmp[904138](264380 call _value _mt[203] A[264358]))
      (264378 call chpl_decRefCountsForDomainsInArrayEltTypes call_tmp[904138] call_type_tmp[578699])
      (564619 'end of statement' A[264358] data[264015])
      unknown call_tmp[904145] "expr temp" "maybe param" "maybe type" "temp"
      (904148 'move' call_tmp[904145](264390 call _value _mt[203] A[264358]))
      unknown call_tmp[904152] "expr temp" "maybe param" "maybe type" "temp"
      (904155 'move' call_tmp[904152](264393 call _decEltRefCounts _mt[203] call_tmp[904145]))
      (264387 call = call_tmp[904152] 0)
      (564622 'end of statement' A[264358])
      (264397 'auto destroy runtime type' elemType[264008])
      (564624 'end of statement' elemType[264008])
      (625816 'move' ret[625811](625815 'deref' A[264358]))
      gotoReturn _end_chpl__initCopy[625809] _end_chpl__initCopy[625809]
      (564626 'end of statement' A[264358])
    }
    {
      unknown call_tmp[904157] "expr temp" "maybe param" "maybe type" "temp"
      (904160 'move' call_tmp[904157](264406 call _ddata_allocate_noinit elemType[264008] size[263998] callPostAlloc[264023]))
      (264402 call = data[264015] call_tmp[904157])
      (564628 'end of statement' data[264015] elemType[264008] size[263998] callPostAlloc[264023])
      unknown call_tmp[904162] "expr temp" "maybe param" "maybe type" "temp"
      (904165 'move' call_tmp[904162](264416 call _cond_test callPostAlloc[264023]))
      if call_tmp[904162]
      {
        (264411 call _ddata_allocate_postalloc data[264015] size[263998])
        (564633 'end of statement' data[264015] size[263998])
      }
      unknown call_tmp[904169] "expr temp" "maybe param" "maybe type" "temp"
      (904172 'move' call_tmp[904169](264430 call : size[263998] int(64)[10]))
      unknown call_tmp[904174] "maybe param" "maybe type" "temp"
      (904177 'move' call_tmp[904174](264427 call(264424 call (partial) buildArrayWith _mt[203] D[264336]) elemType[264008] data[264015] call_tmp[904169]))
      unknown A[264422] "dead at end of block" "insert auto destroy" "no copy"
      (651869 'init var' A[264422] call_tmp[904174])
      (264435 'end of statement' D[264336] elemType[264008] data[264015] size[263998])
      (264436 'auto destroy runtime type' elemType[264008])
      (564640 'end of statement' elemType[264008])
      (625821 'move' ret[625811](625820 'deref' A[264422]))
      gotoReturn _end_chpl__initCopy[625809] _end_chpl__initCopy[625809]
      (564642 'end of statement' A[264422])
    }
    label _end_chpl__initCopy[625809]
    (625813 return ret[625811])
  }
  function chpl_arrayToPtrErrorHelper[264450](const  ref arg arr[264455]:_array[255540](?)) : _unknown[42] "no return value for void"
  {
    unknown tmp[501861] "maybe param" "temp"
    unknown call_tmp[904181] "expr temp" "maybe param" "maybe type" "temp"
    (904184 'move' call_tmp[904181](264475 call(264472 call (partial) isRectangular _mt[203] arr[264455])))
    (501872 'move' tmp[501861](264469 call ! call_tmp[904181]))
    unknown call_tmp[904186] "expr temp" "maybe param" "maybe type" "temp"
    (904189 'move' call_tmp[904186](501874 call _cond_invalid tmp[501861]))
    if call_tmp[904186]
    {
      (501877 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[702057] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[702058] "maybe param" "temp"
    unknown call_tmp[904191] "expr temp" "maybe param" "maybe type" "temp"
    (904194 'move' call_tmp[904191](501862 call isTrue tmp[501861]))
    (702063 'move' tmp[702058](702061 call _cond_test call_tmp[904191]))
    if tmp[702058]
    {
      (702068 'move' tmp[702057](702065 '_paramFoldLogical' tmp[702058] 1))
    }
    {
      unknown tmp[702070] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[904198] "expr temp" "maybe param" "maybe type" "temp"
      (904201 'move' call_tmp[904198](264481 call _dom _mt[203] arr[264455]))
      unknown call_tmp[904203] "expr temp" "maybe param" "maybe type" "temp"
      (904206 'move' call_tmp[904203](264479 call chpl_domainDistIsLayout call_tmp[904198]))
      unknown call_tmp[904208] "expr temp" "maybe param" "maybe type" "temp"
      (904211 'move' call_tmp[904208](264476 call ! call_tmp[904203]))
      (702072 'move' tmp[702070](501866 call isTrue call_tmp[904208]))
      (702077 'move' tmp[702057](702074 '_paramFoldLogical' tmp[702058] tmp[702070]))
    }
    unknown call_tmp[904213] "expr temp" "maybe param" "maybe type" "temp"
    (904216 'move' call_tmp[904213](264484 call _cond_test tmp[702057]))
    if call_tmp[904213]
    {
      (264460 call compilerError "Only single-locale rectangular arrays can be passed to an external routine argument with array type"(errorDepth = 3))
    }
    unknown call_tmp[904220] "expr temp" "maybe param" "maybe type" "temp"
    (904223 'move' call_tmp[904220](264526 call _value _mt[203] arr[264455]))
    unknown call_tmp[904225] "expr temp" "maybe param" "maybe type" "temp"
    (904228 'move' call_tmp[904225](264529 '_wide_get_locale' call_tmp[904220]))
    unknown call_tmp[904230] "expr temp" "maybe param" "maybe type" "temp"
    (904233 'move' call_tmp[904230](264530 call chpl_localeID_to_locale call_tmp[904225]))
    unknown call_tmp[904235] "expr temp" "maybe param" "maybe type" "temp"
    (904238 'move' call_tmp[904235](451130 call here[135591]))
    unknown call_tmp[904240] "expr temp" "maybe param" "maybe type" "temp"
    (904243 'move' call_tmp[904240](264523 call != call_tmp[904230] call_tmp[904235]))
    unknown call_tmp[904245] "expr temp" "maybe param" "maybe type" "temp"
    (904248 'move' call_tmp[904245](264533 call _cond_test call_tmp[904240]))
    if call_tmp[904245]
    {
      unknown call_tmp[904252] "expr temp" "maybe param" "maybe type" "temp"
      (904255 'move' call_tmp[904252](264505 call _value _mt[203] arr[264455]))
      unknown call_tmp[904257] "expr temp" "maybe param" "maybe type" "temp"
      (904260 'move' call_tmp[904257](264511 '_wide_get_node' call_tmp[904252]))
      unknown call_tmp[904262] "expr temp" "maybe param" "maybe type" "temp"
      (904265 'move' call_tmp[904262](264502 call : call_tmp[904257] string[244]))
      unknown call_tmp[904267] "expr temp" "maybe param" "maybe type" "temp"
      (904270 'move' call_tmp[904267](264497 call + "An array can only be passed to an external routine from the locale on which it lives (array is on locale " call_tmp[904262]))
      unknown call_tmp[904272] "expr temp" "maybe param" "maybe type" "temp"
      (904275 'move' call_tmp[904272](264495 call + call_tmp[904267] ", call was made on locale "))
      unknown call_tmp[904277] "expr temp" "maybe param" "maybe type" "temp"
      (904280 'move' call_tmp[904277](408411 call here[135591]))
      unknown call_tmp[904284] "expr temp" "maybe param" "maybe type" "temp"
      (904287 'move' call_tmp[904284](264517 call id _mt[203] call_tmp[904277]))
      unknown call_tmp[904289] "expr temp" "maybe param" "maybe type" "temp"
      (904292 'move' call_tmp[904289](264514 call : call_tmp[904284] string[244]))
      unknown call_tmp[904294] "expr temp" "maybe param" "maybe type" "temp"
      (904297 'move' call_tmp[904294](264493 call + call_tmp[904272] call_tmp[904289]))
      unknown call_tmp[904299] "expr temp" "maybe param" "maybe type" "temp"
      (904302 'move' call_tmp[904299](264491 call + call_tmp[904294] ")"))
      (264490 call halt call_tmp[904299])
    }
    (625825 return _void[46])
  }
  function chpl_arrayToPtr[264540](ref arg arr[264545]:_array[255540](?), param arg castToVoidStar[264550]:bool[19] =
  0) : _unknown[42]
  {
    unknown ret[625829] "RVV" "temp"
    (264556 call chpl_arrayToPtrErrorHelper arr[264545])
    (564647 'end of statement')
    unknown call_tmp[904306] "expr temp" "maybe param" "maybe type" "temp"
    (904309 'move' call_tmp[904306](264568 call _dom _mt[203] arr[264545]))
    unknown call_tmp[904313] "expr temp" "maybe param" "maybe type" "temp"
    (904316 'move' call_tmp[904313](264571 call low _mt[203] call_tmp[904306]))
    unknown call_tmp[904318] "expr temp" "maybe param" "maybe type" "temp"
    (904321 'move' call_tmp[904318](264566 call arr[264545] call_tmp[904313]))
    unknown call_tmp[904323] "maybe param" "maybe type" "temp"
    (904326 'move' call_tmp[904323](264564 call c_pointer_return call_tmp[904318]))
    const ptr[264562] "dead at end of block" "const" "insert auto destroy"
    (651871 'init var' ptr[264562] call_tmp[904323])
    (264575 'end of statement')
    unknown call_tmp[904328] "expr temp" "maybe param" "maybe type" "temp"
    (904331 'move' call_tmp[904328](264588 call _cond_test castToVoidStar[264550]))
    if call_tmp[904328]
    {
      unknown call_tmp[904333] "expr temp" "maybe param" "maybe type" "temp"
      (904336 'move' call_tmp[904333](264581 call c_ptr[46891](?) void[4]))
      unknown call_tmp[904338] "expr temp" "maybe param" "maybe type" "temp"
      (904341 'move' call_tmp[904338](264577 call : ptr[264562] call_tmp[904333]))
      (625834 'move' ret[625829](625833 'deref' call_tmp[904338]))
      gotoReturn _end_chpl_arrayToPtr[625827] _end_chpl_arrayToPtr[625827]
      (564648 'end of statement' ptr[264562])
    }
    {
      (625839 'move' ret[625829](625838 'deref' ptr[264562]))
      gotoReturn _end_chpl_arrayToPtr[625827] _end_chpl_arrayToPtr[625827]
      (564650 'end of statement' ptr[264562])
    }
    label _end_chpl_arrayToPtr[625827]
    (625831 return ret[625829])
    (396912 'used modules list'(264559 'use' CTypes[51217]))
  }
  function chpl_arrayToPtrConst[264596](const  ref arg arr[264601]:_array[255540](?), param arg castToVoidStar[264606]:bool[19] =
  0) : _unknown[42]
  {
    unknown ret[625845] "RVV" "temp"
    (264612 call chpl_arrayToPtrErrorHelper arr[264601])
    (564652 'end of statement')
    unknown call_tmp[904345] "expr temp" "maybe param" "maybe type" "temp"
    (904348 'move' call_tmp[904345](264624 call _dom _mt[203] arr[264601]))
    unknown call_tmp[904352] "expr temp" "maybe param" "maybe type" "temp"
    (904355 'move' call_tmp[904352](264627 call low _mt[203] call_tmp[904345]))
    unknown call_tmp[904357] "expr temp" "maybe param" "maybe type" "temp"
    (904360 'move' call_tmp[904357](264622 call arr[264601] call_tmp[904352]))
    unknown call_tmp[904362] "maybe param" "maybe type" "temp"
    (904365 'move' call_tmp[904362](264620 call c_pointer_return_const call_tmp[904357]))
    const ptr[264618] "dead at end of block" "const" "insert auto destroy"
    (651873 'init var' ptr[264618] call_tmp[904362])
    (264631 'end of statement')
    unknown call_tmp[904367] "expr temp" "maybe param" "maybe type" "temp"
    (904370 'move' call_tmp[904367](264644 call _cond_test castToVoidStar[264606]))
    if call_tmp[904367]
    {
      unknown call_tmp[904372] "expr temp" "maybe param" "maybe type" "temp"
      (904375 'move' call_tmp[904372](264637 call c_ptrConst[46990](?) void[4]))
      unknown call_tmp[904377] "expr temp" "maybe param" "maybe type" "temp"
      (904380 'move' call_tmp[904377](264633 call : ptr[264618] call_tmp[904372]))
      (625850 'move' ret[625845](625849 'deref' call_tmp[904377]))
      gotoReturn _end_chpl_arrayToPtrConst[625843] _end_chpl_arrayToPtrConst[625843]
      (564653 'end of statement' ptr[264618])
    }
    {
      (625855 'move' ret[625845](625854 'deref' ptr[264618]))
      gotoReturn _end_chpl_arrayToPtrConst[625843] _end_chpl_arrayToPtrConst[625843]
      (564655 'end of statement' ptr[264618])
    }
    label _end_chpl_arrayToPtrConst[625843]
    (625847 return ret[625845])
    (396914 'used modules list'(264615 'use' CTypes[51217]))
  }
  function |writeSerializable[475292]() : _unknown[42] "ImplementsStmt wrapper"
  { writeSerializable[310070] _array[255540](?)
    {
    }
    (625861 return _void[46])
  }
  function |readDeserializable[475297]() : _unknown[42] "ImplementsStmt wrapper"
  { readDeserializable[310078] _array[255540](?)
    {
    }
    (625865 return _void[46])
  }
  (396888 'used modules list'(247440 'use' ChapelBase[77907])(247443 'use' ChapelTuple[106204])(247446 'use' ChapelLocale[137388])(247449 'use' ArrayViewSlice[138924])(247452 'use' ArrayViewRankChange[143254])(247455 'use' ArrayViewReindex[147214])(247459 'import' Reflection[1804])(247461 'use' ChapelDebugPrint[107066])(247464 'use' CTypes[51217])(247467 'use' ChapelPrivatization[147262])(247473 'use' ChplConfig[29952] 'only' compiledForSingleLocale, CHPL_LOCALE_MODEL)(247476 'use' ChapelArrayViewElision[149516])(247479 'use' ChapelDomain[225833]))
}