AST dump for ChapelDomain after pass normalize.
Module use list: ChapelBase ArrayViewRankChange ChapelTuple ChapelRange HaltWrappers Reflection FormattedIO MemMove 

{
  function chpl__init_ChapelDomain[468480]() : void[4] "insert line file info" "module init"
  {
    unknown tmp[649266] "temp"
    unknown call_tmp[863376] "expr temp" "maybe param" "maybe type" "temp"
    (863379 'move' call_tmp[863376](649275 call chpl_config_has_value c"defaultHashTableResizeThreshold" c"Built-in"))
    unknown call_tmp[863381] "expr temp" "maybe param" "maybe type" "temp"
    (863384 'move' call_tmp[863381](649278 call ! call_tmp[863376]))
    if call_tmp[863381]
    {
      (649271 'noop')
      (649294 'init var' tmp[649266] 0.5)
    }
    {
      unknown call_tmp[863386] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (863389 'move' call_tmp[863386](649282 'typeof' tmp[649266]))
      unknown call_tmp[863391] "expr temp" "maybe param" "maybe type" "temp"
      (863394 'move' call_tmp[863391](649285 call chpl_config_get_value c"defaultHashTableResizeThreshold" c"Built-in"))
      (649290 'move' tmp[649266](649288 call _command_line_cast c"defaultHashTableResizeThreshold" call_tmp[863386] call_tmp[863391]))
    }
    (649268 'move' defaultHashTableResizeThreshold[209951] tmp[649266])
    (209956 'end of statement')
    (649296 'init var' noNegativeStrideWarnings[209958] 0)
    (209961 'end of statement')
    (1001055 'resolution point' |contextManager[475262])
    (1001057 'end of statement')
    (1001058 'resolution point' |writeSerializable[475267])
    (1001060 'end of statement')
    (1001061 'resolution point' |readDeserializable[475272])
    (1001063 'end of statement')
    (621437 return _void[46])
  }
  const defaultHashTableResizeThreshold[209951] "config" "const" "insert auto destroy"
  unknown noNegativeStrideWarnings[209958] "config" "param"
  function _getDomain[209962](arg value[209964]:_any[141](?)) : _unknown[42] "no copy return" "return not owned"
  {
    unknown ret[619176] "RVV" "temp"
    unknown call_tmp[863396] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (863399 'move' call_tmp[863396](209978 'typeof' value[209964]))
    unknown call_tmp[863401] "expr temp" "maybe param" "maybe type" "temp"
    (863404 'move' call_tmp[863401](209976 call _to_unmanaged call_tmp[863396]))
    unknown call_tmp[863406] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (863409 'move' call_tmp[863406](209980 'typeof' value[209964]))
    unknown call_tmp[863411] "expr temp" "maybe param" "maybe type" "temp"
    (863414 'move' call_tmp[863411](209973 call != call_tmp[863401] call_tmp[863406]))
    unknown call_tmp[863416] "expr temp" "maybe param" "maybe type" "temp"
    (863419 'move' call_tmp[863416](209981 call _cond_test call_tmp[863411]))
    if call_tmp[863416]
    {
      (209968 call compilerError "Domain on borrow created")
    }
    unknown call_tmp[863421] "expr temp" "maybe param" "maybe type" "temp"
    (863424 'move' call_tmp[863421](210008 call _isPrivatized value[209964]))
    unknown call_tmp[863426] "expr temp" "maybe param" "maybe type" "temp"
    (863429 'move' call_tmp[863426](210010 call _cond_test call_tmp[863421]))
    if call_tmp[863426]
    {
      unknown call_tmp[863433] "expr temp" "maybe param" "maybe type" "temp"
      (863436 'move' call_tmp[863433](209991 call pid _mt[203] value[209964]))
      unknown call_tmp[863438] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (863441 'move' call_tmp[863438](1000340 'new' _domain[225034](?) call_tmp[863433] value[209964](_unowned = 1)))
      (619181 'move' ret[619176](619180 'deref' call_tmp[863438]))
      gotoReturn _end__getDomain[619174] _end__getDomain[619174]
    }
    {
      unknown call_tmp[863443] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (863446 'move' call_tmp[863443](1000341 'new' _domain[225034](?) nullPid[247489] value[209964](_unowned = 1)))
      (619186 'move' ret[619176](619185 'deref' call_tmp[863443]))
      gotoReturn _end__getDomain[619174] _end__getDomain[619174]
    }
    label _end__getDomain[619174]
    (619178 return ret[619176])
  }
  function tupleOfRangesSlice[210018](arg base[210020]:_any[141](?), arg slice[210022]:_any[141](?)) : _unknown[42]
  {
    unknown ret[619201] "RVV" "temp"
    unknown call_tmp[863450] "expr temp" "maybe param" "maybe type" "temp"
    (863453 'move' call_tmp[863450](210042 call size _mt[203] base[210020]))
    unknown call_tmp[863457] "expr temp" "maybe param" "maybe type" "temp"
    (863460 'move' call_tmp[863457](210046 call size _mt[203] slice[210022]))
    unknown call_tmp[863462] "expr temp" "maybe param" "maybe type" "temp"
    (863465 'move' call_tmp[863462](210039 call != call_tmp[863450] call_tmp[863457]))
    unknown call_tmp[863467] "expr temp" "maybe param" "maybe type" "temp"
    (863470 'move' call_tmp[863467](210049 call _cond_test call_tmp[863462]))
    if call_tmp[863467]
    {
      (210034 call compilerError "tuple size mismatch in tupleOfRangesSlice")
    }
    unknown call_tmp[863474] "maybe param" "maybe type" "temp"
    (863477 'move' call_tmp[863474](210057 call size _mt[203] base[210020]))
    unknown rank[210055] "dead at end of block" "param"
    (649298 'init var' rank[210055] call_tmp[863474])
    (210061 'end of statement')
    function resultStrides[210062](param arg dim[210065] :
    0 =
    0) param : _unknown[42]
    {
      unknown ret[619192] "RVV" "param" "temp"
      unknown tmp[691122] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[691123] "maybe param" "temp"
      unknown call_tmp[863479] "expr temp" "maybe param" "maybe type" "temp"
      (863482 'move' call_tmp[863479](210073 call - rank[210055] 1))
      unknown call_tmp[863484] "expr temp" "maybe param" "maybe type" "temp"
      (863487 'move' call_tmp[863484](210070 call == dim[210065] call_tmp[863479]))
      (691128 'move' tmp[691123](691126 call _cond_test call_tmp[863484]))
      if tmp[691123]
      {
        unknown tmp[691130] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[863489] "expr temp" "maybe param" "maybe type" "temp"
        (863492 'move' call_tmp[863489](210078 call base[210020] dim[210065]))
        unknown call_tmp[863494] "expr temp" "maybe param" "maybe type" "temp"
        (863497 'move' call_tmp[863494](210082 call slice[210022] dim[210065]))
        unknown call_tmp[863499] "expr temp" "maybe param" "maybe type" "temp"
        (863502 'move' call_tmp[863499](210080 call call_tmp[863489] call_tmp[863494]))
        (691132 'move' tmp[691130](210084 call strides _mt[203] call_tmp[863499]))
        (691137 'move' tmp[691122](691134 '_paramFoldLogical' tmp[691123] tmp[691130]))
      }
      {
        unknown tmp[691139] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[863506] "expr temp" "maybe param" "maybe type" "temp"
        (863509 'move' call_tmp[863506](210090 call base[210020] dim[210065]))
        unknown call_tmp[863511] "expr temp" "maybe param" "maybe type" "temp"
        (863514 'move' call_tmp[863511](210094 call slice[210022] dim[210065]))
        unknown call_tmp[863516] "expr temp" "maybe param" "maybe type" "temp"
        (863519 'move' call_tmp[863516](210092 call call_tmp[863506] call_tmp[863511]))
        unknown call_tmp[863523] "expr temp" "maybe param" "maybe type" "temp"
        (863526 'move' call_tmp[863523](210096 call strides _mt[203] call_tmp[863516]))
        unknown call_tmp[863528] "expr temp" "maybe param" "maybe type" "temp"
        (863531 'move' call_tmp[863528](210101 call + dim[210065] 1))
        unknown call_tmp[863533] "expr temp" "maybe param" "maybe type" "temp"
        (863536 'move' call_tmp[863533](210100 call resultStrides call_tmp[863528]))
        (691141 'move' tmp[691139](210088 call chpl_strideUnion call_tmp[863523] call_tmp[863533]))
        (691146 'move' tmp[691122](691143 '_paramFoldLogical' tmp[691123] tmp[691139]))
      }
      (619197 'move' ret[619192](619196 'deref' tmp[691122]))
      (619194 return ret[619192])
    }
    unknown r[210111] "dead at end of block" "insert auto destroy"
    unknown call_tmp[863538] "expr temp" "maybe param" "maybe type" "temp"
    (863541 'move' call_tmp[863538](210118 call base[210020] 0))
    unknown call_tmp[863545] "expr temp" "maybe param" "maybe type" "temp"
    (863548 'move' call_tmp[863545](210120 call idxType _mt[203] call_tmp[863538]))
    unknown call_tmp[863550] "expr temp" "maybe param" "maybe type" "temp"
    (863553 'move' call_tmp[863550](210128 call resultStrides))
    unknown call_tmp[863555] "expr temp" "maybe param" "maybe type" "temp"
    (863558 'move' call_tmp[863555](210116 call range[240](?) call_tmp[863545] both[107114] call_tmp[863550]))
    unknown call_tmp[863560] "expr temp" "maybe param" "maybe type" "temp"
    (863563 'move' call_tmp[863560](210112 call * rank[210055] call_tmp[863555]))
    (649300 'default init var' r[210111] call_tmp[863560])
    (210130 'end of statement')
    {
      unknown i[210131] "dead at end of block" "index var" "insert auto destroy"
      (649302 'init var' i[210131] 0)
      (559744 'end of statement')
      unknown tmp[210153] "maybe param" "temp"
      unknown call_tmp[863565] "expr temp" "maybe param" "maybe type" "temp"
      (863568 'move' call_tmp[863565](210134 call - rank[210055] 1))
      (210165 'move' tmp[210153](210163 call chpl_compute_low_param_loop_bound 0 call_tmp[863565]))
      unknown tmp[210154] "maybe param" "temp"
      unknown call_tmp[863570] "expr temp" "maybe param" "maybe type" "temp"
      (863573 'move' call_tmp[863570](210170 call - rank[210055] 1))
      (210175 'move' tmp[210154](210173 call chpl_compute_high_param_loop_bound 0 call_tmp[863570]))
      unknown tmp[210155] "maybe param" "temp"
      (210178 'move' tmp[210155] 1)
      ParamForLoop[210180]
      { i[210131] tmp[210153] tmp[210154] tmp[210155]
        {
          unknown call_tmp[863575] "expr temp" "maybe param" "maybe type" "temp"
          (863578 'move' call_tmp[863575](210144 call r[210111] i[210131]))
          unknown call_tmp[863580] "expr temp" "maybe param" "maybe type" "temp"
          (863583 'move' call_tmp[863580](210147 call base[210020] i[210131]))
          unknown call_tmp[863585] "expr temp" "maybe param" "maybe type" "temp"
          (863588 'move' call_tmp[863585](210151 call slice[210022] i[210131]))
          unknown call_tmp[863590] "expr temp" "maybe param" "maybe type" "temp"
          (863593 'move' call_tmp[863590](210149 call call_tmp[863580] call_tmp[863585]))
          (210141 call = call_tmp[863575] call_tmp[863590])
          (559745 'end of statement' r[210111] i[210131])
        }
      }
      label _unused_continueLabel[210157]
      label _breakLabel[210156]
    }
    (619206 'move' ret[619201](619205 'deref' r[210111]))
    gotoReturn _end_tupleOfRangesSlice[619199] _end_tupleOfRangesSlice[619199]
    (559748 'end of statement' r[210111])
    label _end_tupleOfRangesSlice[619199]
    (619203 return ret[619201])
  }
  where {
    unknown tmp[495246] "maybe param" "temp"
    (495257 'move' tmp[495246](210027 call chpl__isTupleOfRanges base[210020]))
    unknown call_tmp[863595] "expr temp" "maybe param" "maybe type" "temp"
    (863598 'move' call_tmp[863595](495259 call _cond_invalid tmp[495246]))
    if call_tmp[863595]
    {
      (495262 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[691153] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691154] "maybe param" "temp"
    unknown call_tmp[863600] "expr temp" "maybe param" "maybe type" "temp"
    (863603 'move' call_tmp[863600](495247 call isTrue tmp[495246]))
    (691159 'move' tmp[691154](691157 call _cond_test call_tmp[863600]))
    if tmp[691154]
    {
      unknown tmp[691161] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[863605] "expr temp" "maybe param" "maybe type" "temp"
      (863608 'move' call_tmp[863605](210030 call chpl__isTupleOfRanges slice[210022]))
      (691163 'move' tmp[691161](495250 call isTrue call_tmp[863605]))
      (691168 'move' tmp[691153](691165 '_paramFoldLogical' tmp[691154] tmp[691161]))
    }
    {
      (691173 'move' tmp[691153](691170 '_paramFoldLogical' tmp[691154] 0))
    }
    (1001534 call chpl_statementLevelSymbol tmp[691153])
  }
  function chpl__buildDomainRuntimeType[210194](arg dist[210196]:_any[141](?), param arg rank[210199]:int(64)[10], arg idxType[210203]:_any[141](?) =
  int(64)[10], param arg strides[210211]:strideKind[107137] =
  one[107127]) type : _unknown[42] "runtime type init fn"
  {
    unknown ret[619212] "RVV" "temp" "type variable"
    unknown call_tmp[863610] "insert auto destroy for explicit new" "maybe param" "used in type" "maybe type" "temp"
    (863613 'move' call_tmp[863610](1000342 'new' _domain[225034](?) dist[210196] rank[210199] idxType[210203] strides[210211]))
    (619217 'move' ret[619212](619216 'deref' call_tmp[863610]))
    (619214 return ret[619212])
  }
  function chpl__buildDomainRuntimeType[210226](arg dist[210228]:_any[141](?), arg idxType[210230]:_any[141](?), param arg parSafe[210234]:bool[19] =
  assocParSafeDefault[52121]) type : _unknown[42] "runtime type init fn"
  {
    unknown ret[619221] "RVV" "temp" "type variable"
    unknown call_tmp[863615] "expr temp" "maybe param" "maybe type" "temp"
    (863618 'move' call_tmp[863615](210246 call isDomainType idxType[210230]))
    unknown call_tmp[863620] "expr temp" "maybe param" "maybe type" "temp"
    (863623 'move' call_tmp[863620](210248 call _cond_test call_tmp[863615]))
    if call_tmp[863620]
    {
      (210240 call compilerError "Values of 'domain' type do not support hash functions yet, so cannot be used as an associative domain's index type")
    }
    unknown call_tmp[863625] "insert auto destroy for explicit new" "maybe param" "used in type" "maybe type" "temp"
    (863628 'move' call_tmp[863625](1000343 'new' _domain[225034](?) dist[210228] idxType[210230] parSafe[210234]))
    (619226 'move' ret[619221](619225 'deref' call_tmp[863625]))
    (619223 return ret[619221])
  }
  function isUltimatelyRectangularParent[210262](arg parentDom[210265]:_domain[225034](?)) param : _unknown[42] "private"
  {
    unknown ret[619230] "RVV" "param" "temp"
    unknown call_tmp[863632] "expr temp" "maybe param" "maybe type" "temp"
    (863635 'move' call_tmp[863632](210305 call(210302 call (partial) isRectangular _mt[203] parentDom[210265])))
    unknown call_tmp[863637] "expr temp" "maybe param" "maybe type" "temp"
    (863640 'move' call_tmp[863637](210306 call _cond_test call_tmp[863632]))
    if call_tmp[863637]
    {
      (619235 'move' ret[619230](619234 'deref' 1))
      gotoReturn _end_isUltimatelyRectangularParent[619228] _end_isUltimatelyRectangularParent[619228]
    }
    {
      unknown call_tmp[863644] "expr temp" "maybe param" "maybe type" "temp"
      (863647 'move' call_tmp[863644](210294 call(210291 call (partial) isSparse _mt[203] parentDom[210265])))
      unknown call_tmp[863649] "expr temp" "maybe param" "maybe type" "temp"
      (863652 'move' call_tmp[863649](210295 call _cond_test call_tmp[863644]))
      if call_tmp[863649]
      {
        unknown call_tmp[863656] "expr temp" "maybe param" "maybe type" "temp"
        (863659 'move' call_tmp[863656](210276 call _value _mt[203] parentDom[210265]))
        unknown call_tmp[863663] "expr temp" "maybe param" "maybe type" "temp"
        (863666 'move' call_tmp[863663](210281 call parentDom _mt[203] call_tmp[863656]))
        unknown call_tmp[863668] "expr temp" "maybe param" "maybe type" "temp"
        (863671 'move' call_tmp[863668](210274 call isUltimatelyRectangularParent call_tmp[863663]))
        (619240 'move' ret[619230](619239 'deref' call_tmp[863668]))
        gotoReturn _end_isUltimatelyRectangularParent[619228] _end_isUltimatelyRectangularParent[619228]
      }
      {
        (619245 'move' ret[619230](619244 'deref' 0))
        gotoReturn _end_isUltimatelyRectangularParent[619228] _end_isUltimatelyRectangularParent[619228]
      }
    }
    label _end_isUltimatelyRectangularParent[619228]
    (619232 return ret[619230])
  }
  function chpl__buildSparseDomainRuntimeType[210314](arg dist[210316]:_any[141](?), arg parentDom[210319]:_domain[225034](?)) type : _unknown[42] "runtime type init fn"
  {
    unknown ret[619251] "RVV" "temp" "type variable"
    unknown call_tmp[863673] "expr temp" "maybe param" "maybe type" "temp"
    (863676 'move' call_tmp[863673](210337 call isUltimatelyRectangularParent parentDom[210319]))
    unknown call_tmp[863678] "expr temp" "maybe param" "maybe type" "temp"
    (863681 'move' call_tmp[863678](210334 call ! call_tmp[863673]))
    unknown call_tmp[863683] "expr temp" "maybe param" "maybe type" "temp"
    (863686 'move' call_tmp[863683](210339 call _cond_test call_tmp[863678]))
    if call_tmp[863683]
    {
      unknown call_tmp[863688] "expr temp" "maybe param" "maybe type" "temp"
      (863691 'move' call_tmp[863688](210325 call + "sparse subdomains are currently supported only for " "rectangular domains"))
      (210324 call compilerError call_tmp[863688])
    }
    unknown call_tmp[863693] "insert auto destroy for explicit new" "maybe param" "used in type" "maybe type" "temp"
    (863696 'move' call_tmp[863693](1000344 'new' _domain[225034](?) dist[210316] parentDom[210319]))
    (619256 'move' ret[619251](619255 'deref' call_tmp[863693]))
    (619253 return ret[619251])
  }
  function chpl__buildSparseDomainRuntimeTypeForParentDomain[210352](arg parentDom[210354]:_any[141](?)) type : _unknown[42]
  {
    unknown ret[619260] "RVV" "temp" "type variable"
    unknown call_tmp[863698] "expr temp" "maybe param" "maybe type" "temp"
    (863701 'move' call_tmp[863698](210374 call isDomain parentDom[210354]))
    unknown call_tmp[863703] "expr temp" "maybe param" "maybe type" "temp"
    (863706 'move' call_tmp[863703](210371 call ! call_tmp[863698]))
    unknown call_tmp[863708] "expr temp" "maybe param" "maybe type" "temp"
    (863711 'move' call_tmp[863708](210376 call _cond_test call_tmp[863703]))
    if call_tmp[863708]
    {
      unknown call_tmp[863713] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (863716 'move' call_tmp[863713](210368 'typeof' parentDom[210354]))
      unknown call_tmp[863718] "expr temp" "maybe param" "maybe type" "temp"
      (863721 'move' call_tmp[863718](210365 call : call_tmp[863713] string[244]))
      (210358 call compilerError "building a sparse subdomain of a non-domain value" " of type " call_tmp[863718])
    }
    unknown call_tmp[863725] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (863728 'move' call_tmp[863725](210387 call defaultSparseDist _mt[203] parentDom[210354]))
    unknown call_tmp[863730] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (863733 'move' call_tmp[863730](210383 call chpl__buildSparseDomainRuntimeType call_tmp[863725] parentDom[210354]))
    (619265 'move' ret[619260](619264 'deref' call_tmp[863730]))
    (619262 return ret[619260])
  }
  function chpl__buildSparseDomainRuntimeTypeForParentDomain[210393](arg parentDom[210395]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    (210399 call compilerError "building a sparse subdomain of a type;" " please supply a domain value instead")
    (619267 return _void[46])
  }
  function chpl__convertRuntimeTypeToValue[210408](arg dist[210410]:_any[141](?), param arg rank[210413]:int(64)[10], arg idxType[210417]:_any[141](?) =
  int(64)[10], param arg strides[210421]:strideKind[107137], param arg isNoInit[210425]:bool[19], arg definedConst[210429]:bool[19]) : _unknown[42]
  {
    unknown ret[619271] "RVV" "temp"
    unknown call_tmp[863735] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (863738 'move' call_tmp[863735](1000345 'new' _domain[225034](?) dist[210410] rank[210413] idxType[210417] strides[210421] definedConst[210429]))
    (619276 'move' ret[619271](619275 'deref' call_tmp[863735]))
    (619273 return ret[619271])
  }
  function chpl__convertRuntimeTypeToValue[210444](arg dist[210446]:_any[141](?), arg idxType[210448]:_any[141](?), param arg parSafe[210451]:bool[19], param arg isNoInit[210455]:bool[19], arg definedConst[210459]:bool[19]) : _unknown[42]
  {
    unknown ret[619280] "RVV" "temp"
    unknown call_tmp[863740] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (863743 'move' call_tmp[863740](1000346 'new' _domain[225034](?) dist[210446] idxType[210448] parSafe[210451]))
    (619285 'move' ret[619280](619284 'deref' call_tmp[863740]))
    (619282 return ret[619280])
  }
  function chpl__convertRuntimeTypeToValue[210472](arg dist[210474]:_any[141](?), arg parentDom[210477]:_domain[225034](?), param arg isNoInit[210481]:bool[19], arg definedConst[210485]:bool[19]) : _unknown[42]
  {
    unknown ret[619289] "RVV" "temp"
    unknown call_tmp[863745] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (863748 'move' call_tmp[863745](1000347 'new' _domain[225034](?) dist[210474] parentDom[210477]))
    (619294 'move' ret[619289](619293 'deref' call_tmp[863745]))
    (619291 return ret[619289])
  }
  function chpl__convertValueToRuntimeType[210497](arg dom[210500]:_domain[225034](?)) type : _unknown[42]
  {
    unknown ret[619298] "RVV" "temp" "type variable"
    unknown call_tmp[863752] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (863755 'move' call_tmp[863752](210518 call distribution _mt[203] dom[210500]))
    unknown call_tmp[863759] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (863762 'move' call_tmp[863759](210522 call _value _mt[203] dom[210500]))
    unknown call_tmp[863766] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (863769 'move' call_tmp[863766](210525 call rank _mt[203] call_tmp[863759]))
    unknown call_tmp[863773] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (863776 'move' call_tmp[863773](210529 call _value _mt[203] dom[210500]))
    unknown call_tmp[863780] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (863783 'move' call_tmp[863780](210532 call idxType _mt[203] call_tmp[863773]))
    unknown call_tmp[863787] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (863790 'move' call_tmp[863787](210536 call _value _mt[203] dom[210500]))
    unknown call_tmp[863794] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (863797 'move' call_tmp[863794](210539 call strides _mt[203] call_tmp[863787]))
    unknown call_tmp[863799] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (863802 'move' call_tmp[863799](210514 call chpl__buildDomainRuntimeType call_tmp[863752] call_tmp[863766] call_tmp[863780] call_tmp[863794]))
    (619303 'move' ret[619298](619302 'deref' call_tmp[863799]))
    (619300 return ret[619298])
  }
  where {
    { scopeless type
      unknown call_type_tmp[578229] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[863806] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (863809 'move' call_tmp[863806](210506 call _value _mt[203] dom[210500]))
      (578233 'move' call_type_tmp[578229](210509 'typeof' call_tmp[863806]))
    }
    (395450 'is_subtype' BaseRectangularDom[443012](?) call_type_tmp[578229])
  }
  function chpl__convertValueToRuntimeType[210545](arg dom[210548]:_domain[225034](?)) type : _unknown[42]
  {
    unknown ret[619307] "RVV" "temp" "type variable"
    unknown call_tmp[863813] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (863816 'move' call_tmp[863813](210564 call distribution _mt[203] dom[210548]))
    unknown call_tmp[863820] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (863823 'move' call_tmp[863820](210568 call _value _mt[203] dom[210548]))
    unknown call_tmp[863827] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (863830 'move' call_tmp[863827](210571 call idxType _mt[203] call_tmp[863820]))
    unknown call_tmp[863834] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (863837 'move' call_tmp[863834](210575 call _value _mt[203] dom[210548]))
    unknown call_tmp[863841] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (863844 'move' call_tmp[863841](210578 call parSafe _mt[203] call_tmp[863834]))
    unknown call_tmp[863846] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (863849 'move' call_tmp[863846](210562 call chpl__buildDomainRuntimeType call_tmp[863813] call_tmp[863827] call_tmp[863841]))
    (619312 'move' ret[619307](619311 'deref' call_tmp[863846]))
    (619309 return ret[619307])
  }
  where {
    { scopeless type
      unknown call_type_tmp[578235] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[863853] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (863856 'move' call_tmp[863853](210554 call _value _mt[203] dom[210548]))
      (578239 'move' call_type_tmp[578235](210557 'typeof' call_tmp[863853]))
    }
    (395451 'is_subtype' BaseAssociativeDom[443017](?) call_type_tmp[578235])
  }
  function chpl__convertValueToRuntimeType[210584](arg dom[210587]:_domain[225034](?)) type : _unknown[42]
  {
    unknown ret[619316] "RVV" "temp" "type variable"
    unknown call_tmp[863860] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (863863 'move' call_tmp[863860](210603 call distribution _mt[203] dom[210587]))
    unknown call_tmp[863867] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (863870 'move' call_tmp[863867](210607 call _value _mt[203] dom[210587]))
    unknown call_tmp[863874] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (863877 'move' call_tmp[863874](210610 call parentDom _mt[203] call_tmp[863867]))
    unknown call_tmp[863879] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (863882 'move' call_tmp[863879](210601 call chpl__buildSparseDomainRuntimeType call_tmp[863860] call_tmp[863874]))
    (619321 'move' ret[619316](619320 'deref' call_tmp[863879]))
    (619318 return ret[619316])
  }
  where {
    { scopeless type
      unknown call_type_tmp[578241] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[863886] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (863889 'move' call_tmp[863886](210593 call _value _mt[203] dom[210587]))
      (578245 'move' call_type_tmp[578241](210596 'typeof' call_tmp[863886]))
    }
    (395452 'is_subtype' BaseSparseDom[443022](?) call_type_tmp[578241])
  }
  function chpl__convertValueToRuntimeType[210616](arg dom[210619]:_domain[225034](?)) type : _unknown[42]
  {
    unknown ret[619325] "RVV" "temp" "type variable"
    (210624 call compilerError "the global domain class of each domain map implementation must be a subclass of BaseRectangularDom, BaseAssociativeDom, or Bas 0)
    (559767 'end of statement')
    (619330 'move' ret[619325](619329 'deref' 0))
    (619327 return ret[619325])
  }
  function chpl__buildSubDomainType[210633](arg dom[210636]:_domain[225034](?)) type : _unknown[42]
  {
    unknown ret[619334] "RVV" "temp" "type variable"
    unknown call_tmp[863891] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (863894 'move' call_tmp[863891](210642 call chpl__convertValueToRuntimeType dom[210636]))
    (619339 'move' ret[619334](619338 'deref' call_tmp[863891]))
    (619336 return ret[619334])
  }
  function chpl__isTupleOfRanges[210646](arg tup[210648]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[619343] "RVV" "param" "temp"
    unknown call_tmp[863896] "expr temp" "maybe param" "maybe type" "temp"
    (863899 'move' call_tmp[863896](210657 call isTuple tup[210648]))
    unknown call_tmp[863901] "expr temp" "maybe param" "maybe type" "temp"
    (863904 'move' call_tmp[863901](210654 call ! call_tmp[863896]))
    unknown call_tmp[863906] "expr temp" "maybe param" "maybe type" "temp"
    (863909 'move' call_tmp[863906](210659 call _cond_test call_tmp[863901]))
    if call_tmp[863906]
    {
      (619348 'move' ret[619343](619347 'deref' 0))
      gotoReturn _end_chpl__isTupleOfRanges[619341] _end_chpl__isTupleOfRanges[619341]
    }
    {
      unknown i[210664] "dead at end of block" "index var" "insert auto destroy"
      (649304 'init var' i[210664] 0)
      (559771 'end of statement')
      unknown tmp[210693] "maybe param" "temp"
      unknown call_tmp[863913] "expr temp" "maybe param" "maybe type" "temp"
      (863916 'move' call_tmp[863913](210670 call size _mt[203] tup[210648]))
      unknown call_tmp[863918] "expr temp" "maybe param" "maybe type" "temp"
      (863921 'move' call_tmp[863918](210667 call - call_tmp[863913] 1))
      (210705 'move' tmp[210693](210703 call chpl_compute_low_param_loop_bound 0 call_tmp[863918]))
      unknown tmp[210694] "maybe param" "temp"
      unknown call_tmp[863925] "expr temp" "maybe param" "maybe type" "temp"
      (863928 'move' call_tmp[863925](210712 call size _mt[203] tup[210648]))
      unknown call_tmp[863930] "expr temp" "maybe param" "maybe type" "temp"
      (863933 'move' call_tmp[863930](210710 call - call_tmp[863925] 1))
      (210718 'move' tmp[210694](210716 call chpl_compute_high_param_loop_bound 0 call_tmp[863930]))
      unknown tmp[210695] "maybe param" "temp"
      (210721 'move' tmp[210695] 1)
      ParamForLoop[210723]
      { i[210664] tmp[210693] tmp[210694] tmp[210695]
        {
          { scopeless type
            unknown call_type_tmp[578247] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[863935] "expr temp" "maybe param" "used in type" "maybe type" "temp"
            (863938 'move' call_tmp[863935](210685 call tup[210648] i[210664]))
            (578251 'move' call_type_tmp[578247](210687 'typeof' call_tmp[863935]))
          }
          unknown call_tmp[863940] "expr temp" "maybe param" "maybe type" "temp"
          (863943 'move' call_tmp[863940](210683 call isRangeType call_type_tmp[578247]))
          unknown call_tmp[863945] "expr temp" "maybe param" "maybe type" "temp"
          (863948 'move' call_tmp[863945](210680 call ! call_tmp[863940]))
          unknown call_tmp[863950] "expr temp" "maybe param" "maybe type" "temp"
          (863953 'move' call_tmp[863950](210688 call _cond_test call_tmp[863945]))
          if call_tmp[863950]
          {
            (619353 'move' ret[619343](619352 'deref' 0))
            gotoReturn _end_chpl__isTupleOfRanges[619341] _end_chpl__isTupleOfRanges[619341]
          }
        }
      }
      label _unused_continueLabel[210697]
      label _breakLabel[210696]
    }
    (619358 'move' ret[619343](619357 'deref' 1))
    label _end_chpl__isTupleOfRanges[619341]
    (619345 return ret[619343])
  }
  function chpl__buildDomainExpr[210736](arg ranges[210739]:_any[141](?) ..., arg definedConst[210742]:_any[141](?)) : _unknown[42]
  {
    unknown ret[619362] "RVV" "temp"
    unknown call_tmp[863957] "maybe param" "maybe type" "temp"
    (863960 'move' call_tmp[863957](210751 call size _mt[203] ranges[210739]))
    unknown rank[210749] "dead at end of block" "param"
    (649306 'init var' rank[210749] call_tmp[863957])
    (210755 'end of statement')
    {
      unknown i[210756] "dead at end of block" "index var" "insert auto destroy"
      (649308 'init var' i[210756] 0)
      (559774 'end of statement')
      unknown tmp[210790] "maybe param" "temp"
      unknown call_tmp[863962] "expr temp" "maybe param" "maybe type" "temp"
      (863965 'move' call_tmp[863962](210759 call - rank[210749] 1))
      (210802 'move' tmp[210790](210800 call chpl_compute_low_param_loop_bound 1 call_tmp[863962]))
      unknown tmp[210791] "maybe param" "temp"
      unknown call_tmp[863967] "expr temp" "maybe param" "maybe type" "temp"
      (863970 'move' call_tmp[863967](210807 call - rank[210749] 1))
      (210812 'move' tmp[210791](210810 call chpl_compute_high_param_loop_bound 1 call_tmp[863967]))
      unknown tmp[210792] "maybe param" "temp"
      (210815 'move' tmp[210792] 1)
      ParamForLoop[210817]
      { i[210756] tmp[210790] tmp[210791] tmp[210792]
        unknown call_tmp[863972] "expr temp" "maybe param" "maybe type" "temp"
        (863975 'move' call_tmp[863972](210774 call ranges[210739] 0))
        unknown call_tmp[863979] "expr temp" "maybe param" "maybe type" "temp"
        (863982 'move' call_tmp[863979](210776 call idxType _mt[203] call_tmp[863972]))
        unknown call_tmp[863984] "expr temp" "maybe param" "maybe type" "temp"
        (863987 'move' call_tmp[863984](210780 call ranges[210739] i[210756]))
        unknown call_tmp[863991] "expr temp" "maybe param" "maybe type" "temp"
        (863994 'move' call_tmp[863991](210782 call idxType _mt[203] call_tmp[863984]))
        unknown call_tmp[863996] "expr temp" "maybe param" "maybe type" "temp"
        (863999 'move' call_tmp[863996](210771 call != call_tmp[863979] call_tmp[863991]))
        unknown call_tmp[864001] "expr temp" "maybe param" "maybe type" "temp"
        (864004 'move' call_tmp[864001](210785 call _cond_test call_tmp[863996]))
        if call_tmp[864001]
        {
          (210766 call compilerError "idxType varies among domain's dimensions")
        }
      }
      label _unused_continueLabel[210794]
      label _breakLabel[210793]
    }
    {
      unknown i[210826] "dead at end of block" "index var" "insert auto destroy"
      (649310 'init var' i[210826] 0)
      (559776 'end of statement')
      unknown tmp[210858] "maybe param" "temp"
      unknown call_tmp[864006] "expr temp" "maybe param" "maybe type" "temp"
      (864009 'move' call_tmp[864006](210829 call - rank[210749] 1))
      (210870 'move' tmp[210858](210868 call chpl_compute_low_param_loop_bound 0 call_tmp[864006]))
      unknown tmp[210859] "maybe param" "temp"
      unknown call_tmp[864011] "expr temp" "maybe param" "maybe type" "temp"
      (864014 'move' call_tmp[864011](210875 call - rank[210749] 1))
      (210880 'move' tmp[210859](210878 call chpl_compute_high_param_loop_bound 0 call_tmp[864011]))
      unknown tmp[210860] "maybe param" "temp"
      (210883 'move' tmp[210860] 1)
      ParamForLoop[210885]
      { i[210826] tmp[210858] tmp[210859] tmp[210860]
        unknown call_tmp[864016] "expr temp" "maybe param" "maybe type" "temp"
        (864019 'move' call_tmp[864016](210844 call ranges[210739] i[210826]))
        unknown call_tmp[864023] "expr temp" "maybe param" "maybe type" "temp"
        (864026 'move' call_tmp[864023](210846 call bounds _mt[203] call_tmp[864016]))
        unknown call_tmp[864028] "expr temp" "maybe param" "maybe type" "temp"
        (864031 'move' call_tmp[864028](210841 call != call_tmp[864023] both[107114]))
        unknown call_tmp[864033] "expr temp" "maybe param" "maybe type" "temp"
        (864036 'move' call_tmp[864033](210853 call _cond_test call_tmp[864028]))
        if call_tmp[864033]
        {
          (210836 call compilerError "one of domain's dimensions is not a bounded range")
        }
      }
      label _unused_continueLabel[210862]
      label _breakLabel[210861]
    }
    unknown d[210895] "dead at end of block" "insert auto destroy"
    unknown call_tmp[864038] "expr temp" "maybe param" "maybe type" "temp"
    (864041 'move' call_tmp[864038](210901 call ranges[210739] 0))
    unknown call_tmp[864045] "expr temp" "maybe param" "maybe type" "temp"
    (864048 'move' call_tmp[864045](210903 call idxType _mt[203] call_tmp[864038]))
    unknown call_tmp[864050] "expr temp" "maybe param" "maybe type" "temp"
    (864053 'move' call_tmp[864050](210907 call chpl_strideUnion ranges[210739]))
    unknown call_tmp[864055] "expr temp" "maybe param" "maybe type" "temp"
    (864058 'move' call_tmp[864055](210897 call chpl__buildDomainRuntimeType defaultDist[288287] rank[210749] call_tmp[864045] call_tmp[864050]))
    (649312 'default init var' d[210895] call_tmp[864055])
    (210910 'end of statement')
    (210915 call(210912 call (partial) setIndices _mt[203] d[210895]) ranges[210739])
    (559778 'end of statement' d[210895])
    unknown call_tmp[864062] "expr temp" "maybe param" "maybe type" "temp"
    (864065 'move' call_tmp[864062](210922 call _cond_test definedConst[210742]))
    if call_tmp[864062]
    {
      (210918 call chpl__setDomainConst d[210895])
      (559780 'end of statement' d[210895])
    }
    (619367 'move' ret[619362](619366 'deref' d[210895]))
    gotoReturn _end_chpl__buildDomainExpr[619360] _end_chpl__buildDomainExpr[619360]
    (559782 'end of statement' d[210895])
    label _end_chpl__buildDomainExpr[619360]
    (619364 return ret[619362])
  }
  where {
    (210745 call chpl__isTupleOfRanges ranges[210739])
  }
  function chpl__setDomainConst[210932](arg dom[210935]:_domain[225034](?)) : _unknown[42] "private" "no return value for void"
  {
    unknown call_tmp[864069] "expr temp" "maybe param" "maybe type" "temp"
    (864072 'move' call_tmp[864069](210942 call _value _mt[203] dom[210935]))
    unknown call_tmp[864076] "expr temp" "maybe param" "maybe type" "temp"
    (864079 'move' call_tmp[864076](210945 call definedConst _mt[203] call_tmp[864069]))
    (210939 call = call_tmp[864076] 1)
    (619371 return _void[46])
  }
  function chpl__buildDomainExpr[210951](const arg keys[210954]:_any[141](?) ..., arg definedConst[210957]:_any[141](?)) : _unknown[42]
  {
    unknown ret[619375] "RVV" "temp"
    unknown call_tmp[864083] "maybe param" "maybe type" "temp"
    (864086 'move' call_tmp[864083](210963 call size _mt[203] keys[210954]))
    unknown count[210961] "dead at end of block" "param"
    (649314 'init var' count[210961] call_tmp[864083])
    (210967 'end of statement')
    { scopeless type
      unknown call_type_tmp[578253] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[864088] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (864091 'move' call_tmp[864088](210971 call keys[210954] 0))
      (578257 'move' call_type_tmp[578253](210973 'typeof' call_tmp[864088]))
    }
    unknown keyType[210969] "dead at end of block" "insert auto destroy" "type variable"
    (649317 'move' keyType[210969] call_type_tmp[578253])
    {
      unknown i[210975] "dead at end of block" "index var" "insert auto destroy"
      (649319 'init var' i[210975] 0)
      (559785 'end of statement')
      unknown tmp[211032] "maybe param" "temp"
      unknown call_tmp[864093] "expr temp" "maybe param" "maybe type" "temp"
      (864096 'move' call_tmp[864093](210978 call - count[210961] 1))
      (211044 'move' tmp[211032](211042 call chpl_compute_low_param_loop_bound 1 call_tmp[864093]))
      unknown tmp[211033] "maybe param" "temp"
      unknown call_tmp[864098] "expr temp" "maybe param" "maybe type" "temp"
      (864101 'move' call_tmp[864098](211049 call - count[210961] 1))
      (211054 'move' tmp[211033](211052 call chpl_compute_high_param_loop_bound 1 call_tmp[864098]))
      unknown tmp[211034] "maybe param" "temp"
      (211057 'move' tmp[211034] 1)
      ParamForLoop[211059]
      { i[210975] tmp[211032] tmp[211033] tmp[211034]
        { scopeless type
          unknown call_type_tmp[578259] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[864103] "expr temp" "maybe param" "used in type" "maybe type" "temp"
          (864106 'move' call_tmp[864103](211025 call keys[210954] i[210975]))
          (578263 'move' call_type_tmp[578259](211027 'typeof' call_tmp[864103]))
        }
        unknown call_tmp[864108] "expr temp" "maybe param" "maybe type" "temp"
        (864111 'move' call_tmp[864108](211021 call != keyType[210969] call_type_tmp[578259]))
        unknown call_tmp[864113] "expr temp" "maybe param" "maybe type" "temp"
        (864116 'move' call_tmp[864113](211028 call _cond_test call_tmp[864108]))
        if call_tmp[864113]
        {
          { scopeless type
            unknown call_type_tmp[578265] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[864118] "expr temp" "maybe param" "used in type" "maybe type" "temp"
            (864121 'move' call_tmp[864118](211017 call keys[210954] i[210975]))
            (578269 'move' call_type_tmp[578265](211019 'typeof' call_tmp[864118]))
          }
          unknown call_tmp[864123] "expr temp" "maybe param" "maybe type" "temp"
          (864126 'move' call_tmp[864123](211000 call : i[210975] string[244]))
          unknown call_tmp[864128] "expr temp" "maybe param" "maybe type" "temp"
          (864131 'move' call_tmp[864128](210995 call + "Associative domain element " call_tmp[864123]))
          unknown call_tmp[864133] "expr temp" "maybe param" "maybe type" "temp"
          (864136 'move' call_tmp[864133](210993 call + call_tmp[864128] " expected to be of type "))
          unknown call_tmp[864138] "expr temp" "maybe param" "maybe type" "temp"
          (864141 'move' call_tmp[864138](211007 call : keyType[210969] string[244]))
          unknown call_tmp[864143] "expr temp" "maybe param" "maybe type" "temp"
          (864146 'move' call_tmp[864143](210991 call + call_tmp[864133] call_tmp[864138]))
          unknown call_tmp[864148] "expr temp" "maybe param" "maybe type" "temp"
          (864151 'move' call_tmp[864148](210989 call + call_tmp[864143] " but is of type "))
          unknown call_tmp[864153] "expr temp" "maybe param" "maybe type" "temp"
          (864156 'move' call_tmp[864153](211014 call : call_type_tmp[578265] string[244]))
          unknown call_tmp[864158] "expr temp" "maybe param" "maybe type" "temp"
          (864161 'move' call_tmp[864158](210987 call + call_tmp[864148] call_tmp[864153]))
          (210986 call compilerError call_tmp[864158])
          (559786 'end of statement' i[210975] keyType[210969])
        }
      }
      label _unused_continueLabel[211036]
      label _breakLabel[211035]
    }
    unknown D[211069] "dead at end of block" "insert auto destroy"
    unknown call_tmp[864163] "expr temp" "maybe param" "maybe type" "temp"
    (864166 'move' call_tmp[864163](211071 call chpl__buildDomainRuntimeType defaultDist[288287] keyType[210969]))
    (649321 'default init var' D[211069] call_tmp[864163])
    (211075 'end of statement' keyType[210969])
    (211082 call(211079 call (partial) requestCapacity _mt[203] D[211069]) count[210961])
    (559790 'end of statement' D[211069])
    {
      unknown i[211084] "dead at end of block" "index var" "insert auto destroy"
      (649323 'init var' i[211084] 0)
      (559792 'end of statement')
      unknown tmp[211100] "maybe param" "temp"
      unknown call_tmp[864170] "expr temp" "maybe param" "maybe type" "temp"
      (864173 'move' call_tmp[864170](211087 call - count[210961] 1))
      (211112 'move' tmp[211100](211110 call chpl_compute_low_param_loop_bound 0 call_tmp[864170]))
      unknown tmp[211101] "maybe param" "temp"
      unknown call_tmp[864175] "expr temp" "maybe param" "maybe type" "temp"
      (864178 'move' call_tmp[864175](211117 call - count[210961] 1))
      (211122 'move' tmp[211101](211120 call chpl_compute_high_param_loop_bound 0 call_tmp[864175]))
      unknown tmp[211102] "maybe param" "temp"
      (211125 'move' tmp[211102] 1)
      ParamForLoop[211127]
      { i[211084] tmp[211100] tmp[211101] tmp[211102]
        unknown call_tmp[864180] "expr temp" "maybe param" "maybe type" "temp"
        (864183 'move' call_tmp[864180](211097 call keys[210954] i[211084]))
        (211093 call += D[211069] call_tmp[864180])
        (559793 'end of statement' D[211069] i[211084])
      }
      label _unused_continueLabel[211104]
      label _breakLabel[211103]
    }
    (619380 'move' ret[619375](619379 'deref' D[211069]))
    gotoReturn _end_chpl__buildDomainExpr[619373] _end_chpl__buildDomainExpr[619373]
    (559796 'end of statement' D[211069])
    label _end_chpl__buildDomainExpr[619373]
    (619377 return ret[619375])
  }
  function chpl__ensureDomainExpr[211140](const  ref arg x[211143]:_domain[225034](?)) const ref : _unknown[42]
  {
    unknown ret[619386] "RVV" "temp"
    (619391 'move' ret[619386](619390 'addr of' x[211143]))
    (619388 return ret[619386])
  }
  function chpl_checkForAnonAssocDom[211151](arg dims[211153]:_any[141](?)) param : _unknown[42] "private"
  {
    unknown ret[619395] "RVV" "param" "temp"
    {
      unknown i[211157] "dead at end of block" "index var" "insert auto destroy"
      (649325 'init var' i[211157] 0)
      (559799 'end of statement')
      unknown tmp[211189] "maybe param" "temp"
      unknown call_tmp[864187] "expr temp" "maybe param" "maybe type" "temp"
      (864190 'move' call_tmp[864187](211161 call size _mt[203] dims[211153]))
      unknown call_tmp[864192] "expr temp" "maybe param" "maybe type" "temp"
      (864195 'move' call_tmp[864192](211164 call chpl__nudgeHighBound call_tmp[864187]))
      (211201 'move' tmp[211189](211199 call chpl_compute_low_param_loop_bound 0 call_tmp[864192]))
      unknown tmp[211190] "maybe param" "temp"
      unknown call_tmp[864199] "expr temp" "maybe param" "maybe type" "temp"
      (864202 'move' call_tmp[864199](211208 call size _mt[203] dims[211153]))
      unknown call_tmp[864204] "expr temp" "maybe param" "maybe type" "temp"
      (864207 'move' call_tmp[864204](211206 call chpl__nudgeHighBound call_tmp[864199]))
      (211213 'move' tmp[211190](211211 call chpl_compute_high_param_loop_bound 0 call_tmp[864204]))
      unknown tmp[211191] "maybe param" "temp"
      (211216 'move' tmp[211191] 1)
      ParamForLoop[211218]
      { i[211157] tmp[211189] tmp[211190] tmp[211191]
        unknown call_tmp[864209] "expr temp" "maybe param" "maybe type" "temp"
        (864212 'move' call_tmp[864209](211182 call dims[211153] i[211157]))
        unknown call_tmp[864214] "expr temp" "maybe param" "maybe type" "temp"
        (864217 'move' call_tmp[864214](211180 call isRange call_tmp[864209]))
        unknown call_tmp[864219] "expr temp" "maybe param" "maybe type" "temp"
        (864222 'move' call_tmp[864219](211177 call ! call_tmp[864214]))
        unknown call_tmp[864224] "expr temp" "maybe param" "maybe type" "temp"
        (864227 'move' call_tmp[864224](211184 call _cond_test call_tmp[864219]))
        if call_tmp[864224]
        {
          { scopeless type
            unknown call_type_tmp[578271] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[864229] "expr temp" "maybe param" "used in type" "maybe type" "temp"
            (864232 'move' call_tmp[864229](211172 call dims[211153] i[211157]))
            (578275 'move' call_type_tmp[578271](211174 'typeof' call_tmp[864229]))
          }
          unknown call_tmp[864234] "expr temp" "maybe param" "maybe type" "temp"
          (864237 'move' call_tmp[864234](211169 call : call_type_tmp[578271] string[244]))
          (619401 'move' ret[619395](619400 'coerce' call_tmp[864234] string[244]))
          gotoReturn _end_chpl_checkForAnonAssocDom[619393] _end_chpl_checkForAnonAssocDom[619393]
          (559800 'end of statement' i[211157])
        }
      }
      label _unused_continueLabel[211193]
      label _breakLabel[211192]
    }
    (619407 'move' ret[619395](619406 'coerce' "" string[244]))
    label _end_chpl_checkForAnonAssocDom[619393]
    (619397 return ret[619395])
  }
  { scopeless type
    string[244]
  }
  function chpl__ensureDomainExpr[211232](arg x[211235]:_any[141](?) ...) : _unknown[42] "compiler generated" "last resort"
  {
    unknown ret[619411] "RVV" "temp"
    unknown call_tmp[864239] "maybe param" "maybe type" "temp"
    (864242 'move' call_tmp[864239](211242 call chpl_checkForAnonAssocDom x[211235]))
    unknown dimType[211240] "dead at end of block" "param"
    (649327 'init var' dimType[211240] call_tmp[864239])
    (211245 'end of statement')
    unknown call_tmp[864244] "expr temp" "maybe param" "maybe type" "temp"
    (864247 'move' call_tmp[864244](211260 call != dimType[211240] ""))
    unknown call_tmp[864249] "expr temp" "maybe param" "maybe type" "temp"
    (864252 'move' call_tmp[864249](211264 call _cond_test call_tmp[864244]))
    if call_tmp[864249]
    {
      unknown call_tmp[864254] "expr temp" "maybe param" "maybe type" "temp"
      (864257 'move' call_tmp[864254](211250 call + "Arrays with anonymous domains must either be defined using a list of ranges or use curly brackets.  If you were trying to crea dimType[211240]))
      unknown call_tmp[864259] "expr temp" "maybe param" "maybe type" "temp"
      (864262 'move' call_tmp[864259](211248 call + call_tmp[864254] "' indices, please use curly brackets."))
      (211247 call compilerError call_tmp[864259])
    }
    unknown call_tmp[864264] "expr temp" "maybe param" "maybe type" "temp"
    (864267 'move' call_tmp[864264](211271 call chpl__buildDomainExpr(211273 'expand_tuple' x[211235])(definedConst = 1)))
    (619416 'move' ret[619411](619415 'deref' call_tmp[864264]))
    (619413 return ret[619411])
  }
  function chpl__ensureDomainExpr[211278](arg t[211280]:_any[141](?)) : _unknown[42] "compiler generated" "last resort" "no return value for void"
  {
    unknown call_tmp[864269] "expr temp" "maybe param" "maybe type" "temp"
    (864272 'move' call_tmp[864269](211288 call : t[211280] string[244]))
    (211284 call compilerError "Domain expression was a type ('" call_tmp[864269] "') rather than a domain value or range list as expected")
    (619418 return _void[46])
  }
  function chpl__isRectangularDomType[211297](arg domainType[211299]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[619422] "RVV" "param" "temp"
    unknown dom[211303] "dead at end of block" "insert auto destroy"
    (649329 'default init var' dom[211303] domainType[211299])
    (211306 'end of statement')
    unknown tmp[495267] "maybe param" "temp"
    (495278 'move' tmp[495267](211311 call isDomainType domainType[211299]))
    unknown call_tmp[864274] "expr temp" "maybe param" "maybe type" "temp"
    (864277 'move' call_tmp[864274](495280 call _cond_invalid tmp[495267]))
    if call_tmp[864274]
    {
      (495283 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[691180] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691181] "maybe param" "temp"
    unknown call_tmp[864279] "expr temp" "maybe param" "maybe type" "temp"
    (864282 'move' call_tmp[864279](495268 call isTrue tmp[495267]))
    (691186 'move' tmp[691181](691184 call _cond_test call_tmp[864279]))
    if tmp[691181]
    {
      unknown tmp[691188] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[864286] "expr temp" "maybe param" "maybe type" "temp"
      (864289 'move' call_tmp[864286](211317 call(211314 call (partial) isRectangular _mt[203] dom[211303])))
      (691190 'move' tmp[691188](495271 call isTrue call_tmp[864286]))
      (691195 'move' tmp[691180](691192 '_paramFoldLogical' tmp[691181] tmp[691188]))
    }
    {
      (691200 'move' tmp[691180](691197 '_paramFoldLogical' tmp[691181] 0))
    }
    (619427 'move' ret[619422](619426 'deref' tmp[691180]))
    gotoReturn _end_chpl__isRectangularDomType[619420] _end_chpl__isRectangularDomType[619420]
    (559804 'end of statement' dom[211303])
    label _end_chpl__isRectangularDomType[619420]
    (619424 return ret[619422])
  }
  function chpl__isSparseDomType[211320](arg domainType[211322]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[619433] "RVV" "param" "temp"
    unknown dom[211326] "dead at end of block" "insert auto destroy"
    (649331 'default init var' dom[211326] domainType[211322])
    (211329 'end of statement')
    unknown call_tmp[864293] "expr temp" "maybe param" "maybe type" "temp"
    (864296 'move' call_tmp[864293](211335 call(211332 call (partial) isSparse _mt[203] dom[211326])))
    (619438 'move' ret[619433](619437 'deref' call_tmp[864293]))
    gotoReturn _end_chpl__isSparseDomType[619431] _end_chpl__isSparseDomType[619431]
    (559806 'end of statement' dom[211326])
    label _end_chpl__isSparseDomType[619431]
    (619435 return ret[619433])
  }
  function chpl__parentDomainFromDomainRuntimeType[211338](arg domainType[211340]:_any[141](?)) : _unknown[42] "no copy return" "return not owned"
  {
    unknown ret[619444] "RVV" "temp"
    unknown call_tmp[864298] "maybe param" "maybe type" "temp"
    (864301 'move' call_tmp[864298](211345 'get runtime type field' domainType[211340] "parentDom"))
    unknown parentDom[211344] "dead at end of block" "no auto destroy" "no copy"
    (649333 'init var' parentDom[211344] call_tmp[864298])
    (211351 'end of statement')
    unknown call_tmp[864305] "expr temp" "maybe param" "maybe type" "temp"
    (864308 'move' call_tmp[864305](211356 call _value _mt[203] parentDom[211344]))
    unknown call_tmp[864310] "expr temp" "maybe param" "maybe type" "temp"
    (864313 'move' call_tmp[864310](211354 call _getDomain call_tmp[864305]))
    (619449 'move' ret[619444](619448 'deref' call_tmp[864310]))
    gotoReturn _end_chpl__parentDomainFromDomainRuntimeType[619442] _end_chpl__parentDomainFromDomainRuntimeType[619442]
    (559808 'end of statement' parentDom[211344])
    label _end_chpl__parentDomainFromDomainRuntimeType[619442]
    (619446 return ret[619444])
  }
  function chpl__domainFromArrayRuntimeType[211361](arg rtt[211363]:_any[141](?)) : _unknown[42] "no copy return" "return not owned"
  {
    unknown ret[619455] "RVV" "temp"
    unknown call_tmp[864315] "maybe param" "maybe type" "temp"
    (864318 'move' call_tmp[864315](211368 'get runtime type field' rtt[211363] "dom"))
    unknown dom[211367] "dead at end of block" "no auto destroy" "no copy"
    (649335 'init var' dom[211367] call_tmp[864315])
    (211372 'end of statement')
    unknown call_tmp[864322] "expr temp" "maybe param" "maybe type" "temp"
    (864325 'move' call_tmp[864322](211377 call _value _mt[203] dom[211367]))
    unknown call_tmp[864327] "expr temp" "maybe param" "maybe type" "temp"
    (864330 'move' call_tmp[864327](211375 call _getDomain call_tmp[864322]))
    (619460 'move' ret[619455](619459 'deref' call_tmp[864327]))
    gotoReturn _end_chpl__domainFromArrayRuntimeType[619453] _end_chpl__domainFromArrayRuntimeType[619453]
    (559810 'end of statement' dom[211367])
    label _end_chpl__domainFromArrayRuntimeType[619453]
    (619457 return ret[619455])
  }
  function chpl_isAssociativeDomClass[211382](arg dc[211385]:BaseAssociativeDom[443017](?)) param : _unknown[42]
  {
    unknown ret[619466] "RVV" "param" "temp"
    (619471 'move' ret[619466](619470 'deref' 1))
    (619468 return ret[619466])
  }
  function chpl_isAssociativeDomClass[211393](arg dc[211395]:_any[141](?)) param : _unknown[42] "last resort"
  {
    unknown ret[619475] "RVV" "param" "temp"
    (619480 'move' ret[619475](619479 'deref' 0))
    (619477 return ret[619475])
  }
  function errorIfNotRectangular[211402](arg dom[211405]:_domain[225034](?), param arg op[211408]:_any[141](?), param arg arrays[211411] :
  "" =
  "") : _unknown[42] "private" "no return value for void"
  {
    unknown tmp[495288] "maybe param" "temp"
    (495299 'move' tmp[495288](211432 call(211429 call (partial) isAssociative _mt[203] dom[211405])))
    unknown call_tmp[864334] "expr temp" "maybe param" "maybe type" "temp"
    (864337 'move' call_tmp[864334](495301 call _cond_invalid tmp[495288]))
    if call_tmp[864334]
    {
      (495304 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[691207] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691208] "maybe param" "temp"
    unknown call_tmp[864339] "expr temp" "maybe param" "maybe type" "temp"
    (864342 'move' call_tmp[864339](495289 call isTrue tmp[495288]))
    (691213 'move' tmp[691208](691211 call _cond_test call_tmp[864339]))
    if tmp[691208]
    {
      (691218 'move' tmp[691207](691215 '_paramFoldLogical' tmp[691208] 1))
    }
    {
      unknown tmp[691220] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[864346] "expr temp" "maybe param" "maybe type" "temp"
      (864349 'move' call_tmp[864346](211437 call(211434 call (partial) isSparse _mt[203] dom[211405])))
      (691222 'move' tmp[691220](495293 call isTrue call_tmp[864346]))
      (691227 'move' tmp[691207](691224 '_paramFoldLogical' tmp[691208] tmp[691220]))
    }
    unknown call_tmp[864351] "expr temp" "maybe param" "maybe type" "temp"
    (864354 'move' call_tmp[864351](211438 call _cond_test tmp[691207]))
    if call_tmp[864351]
    {
      (211416 call compilerError "cannot apply '" op[211408] "' to associative and sparse domains" arrays[211411])
    }
    unknown call_tmp[864358] "expr temp" "maybe param" "maybe type" "temp"
    (864361 'move' call_tmp[864358](211461 call(211458 call (partial) isRectangular _mt[203] dom[211405])))
    unknown call_tmp[864363] "expr temp" "maybe param" "maybe type" "temp"
    (864366 'move' call_tmp[864363](211455 call ! call_tmp[864358]))
    unknown call_tmp[864368] "expr temp" "maybe param" "maybe type" "temp"
    (864371 'move' call_tmp[864368](211462 call _cond_test call_tmp[864363]))
    if call_tmp[864368]
    {
      unknown call_tmp[864373] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (864376 'move' call_tmp[864373](211451 'typeof' dom[211405]))
      unknown call_tmp[864378] "expr temp" "maybe param" "maybe type" "temp"
      (864381 'move' call_tmp[864378](211448 call : call_tmp[864373] string[244]))
      (211444 call compilerError "cannot apply '" op[211408] "' to '" call_tmp[864378] "'")
    }
    (619482 return _void[46])
  }
  function chpl__checkDomainsMatch[211469](arg a[211474]:_array[255540](?), arg b[211477]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    unknown call_tmp[864383] "expr temp" "maybe param" "maybe type" "temp"
    (864386 'move' call_tmp[864383](211505 call _cond_test 1))
    if call_tmp[864383]
    {
      unknown call_tmp[864390] "expr temp" "maybe param" "maybe type" "temp"
      (864393 'move' call_tmp[864390](211496 call _dom _mt[203] a[211474]))
      unknown call_tmp[864395] "expr temp" "maybe param" "maybe type" "temp"
      (864398 'move' call_tmp[864395](211493 call != call_tmp[864390] b[211477]))
      unknown call_tmp[864400] "expr temp" "maybe param" "maybe type" "temp"
      (864403 'move' call_tmp[864400](211500 call _cond_test call_tmp[864395]))
      if call_tmp[864400]
      {
        (211489 call boundsCheckHalt module=[222] HaltWrappers[518] "domain mismatch on return")
        (405982 'referenced modules list' HaltWrappers[518])
      }
    }
    (619484 return _void[46])
    (396803 'used modules list'(211482 'import' HaltWrappers[518]))
  }
  function chpl__checkDomainsMatch[211511](arg a[211514]:_iteratorRecord[165](?), arg b[211517]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    unknown call_tmp[864405] "expr temp" "maybe param" "maybe type" "temp"
    (864408 'move' call_tmp[864405](211548 call _cond_test 1))
    if call_tmp[864405]
    {
      unknown tmp[211525] "dead at end of block" "insert auto destroy"
      (649337 'init var' tmp[211525] a[211514])
      (211528 'end of statement')
      unknown call_tmp[864412] "expr temp" "maybe param" "maybe type" "temp"
      (864415 'move' call_tmp[864412](211539 call _dom _mt[203] tmp[211525]))
      unknown call_tmp[864417] "expr temp" "maybe param" "maybe type" "temp"
      (864420 'move' call_tmp[864417](211536 call != call_tmp[864412] b[211517]))
      unknown call_tmp[864422] "expr temp" "maybe param" "maybe type" "temp"
      (864425 'move' call_tmp[864422](211543 call _cond_test call_tmp[864417]))
      if call_tmp[864422]
      {
        (211534 call boundsCheckHalt module=[222] HaltWrappers[518] "domain mismatch on return")
        (405989 'referenced modules list' HaltWrappers[518])
      }
    }
    (619486 return _void[46])
    (396805 'used modules list'(211522 'import' HaltWrappers[518]))
  }
  function chpl_countDomHelp[211554](arg dom[211556]:_any[141](?), arg counts[211558]:_any[141](?)) : _unknown[42]
  {
    unknown ret[619490] "RVV" "temp"
    unknown call_tmp[864429] "maybe param" "maybe type" "temp"
    (864432 'move' call_tmp[864429](211567 call(211564 call (partial) dims _mt[203] dom[211556])))
    unknown ranges[211562] "dead at end of block" "insert auto destroy"
    (649339 'init var' ranges[211562] call_tmp[864429])
    (211569 'end of statement')
    {
      unknown i[211570] "dead at end of block" "index var" "insert auto destroy"
      (649341 'init var' i[211570] 0)
      (559819 'end of statement')
      unknown tmp[211596] "maybe param" "temp"
      unknown call_tmp[864436] "expr temp" "maybe param" "maybe type" "temp"
      (864439 'move' call_tmp[864436](211576 call rank _mt[203] dom[211556]))
      unknown call_tmp[864441] "expr temp" "maybe param" "maybe type" "temp"
      (864444 'move' call_tmp[864441](211573 call - call_tmp[864436] 1))
      (211608 'move' tmp[211596](211606 call chpl_compute_low_param_loop_bound 0 call_tmp[864441]))
      unknown tmp[211597] "maybe param" "temp"
      unknown call_tmp[864448] "expr temp" "maybe param" "maybe type" "temp"
      (864451 'move' call_tmp[864448](211615 call rank _mt[203] dom[211556]))
      unknown call_tmp[864453] "expr temp" "maybe param" "maybe type" "temp"
      (864456 'move' call_tmp[864453](211613 call - call_tmp[864448] 1))
      (211621 'move' tmp[211597](211619 call chpl_compute_high_param_loop_bound 0 call_tmp[864453]))
      unknown tmp[211598] "maybe param" "temp"
      (211624 'move' tmp[211598] 1)
      ParamForLoop[211626]
      { i[211570] tmp[211596] tmp[211597] tmp[211598]
        unknown call_tmp[864458] "expr temp" "maybe param" "maybe type" "temp"
        (864461 'move' call_tmp[864458](211585 call ranges[211562] i[211570]))
        unknown call_tmp[864463] "expr temp" "maybe param" "maybe type" "temp"
        (864466 'move' call_tmp[864463](211590 call ranges[211562] i[211570]))
        unknown call_tmp[864468] "expr temp" "maybe param" "maybe type" "temp"
        (864471 'move' call_tmp[864468](211593 call counts[211558] i[211570]))
        unknown call_tmp[864473] "expr temp" "maybe param" "maybe type" "temp"
        (864476 'move' call_tmp[864473](211587 call # call_tmp[864463] call_tmp[864468]))
        (211582 call = call_tmp[864458] call_tmp[864473])
        (559820 'end of statement' ranges[211562] i[211570])
      }
      label _unused_continueLabel[211600]
      label _breakLabel[211599]
    }
    unknown call_tmp[864480] "expr temp" "maybe param" "maybe type" "temp"
    (864483 'move' call_tmp[864480](211640 call distribution _mt[203] dom[211556]))
    unknown call_tmp[864487] "expr temp" "maybe param" "maybe type" "temp"
    (864490 'move' call_tmp[864487](211644 call rank _mt[203] dom[211556]))
    unknown call_tmp[864494] "expr temp" "maybe param" "maybe type" "temp"
    (864497 'move' call_tmp[864494](211648 call idxType _mt[203] dom[211556]))
    unknown call_tmp[864501] "expr temp" "maybe param" "maybe type" "temp"
    (864504 'move' call_tmp[864501](211652 call strides _mt[203] dom[211556]))
    unknown call_tmp[864506] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (864509 'move' call_tmp[864506](1000348 'new' _domain[225034](?) call_tmp[864480] call_tmp[864487] call_tmp[864494] call_tmp[864501] ranges[211562]))
    (619495 'move' ret[619490](619494 'deref' call_tmp[864506]))
    gotoReturn _end_chpl_countDomHelp[619488] _end_chpl_countDomHelp[619488]
    (559823 'end of statement' ranges[211562])
    label _end_chpl_countDomHelp[619488]
    (619492 return ret[619490])
  }
  function #[211658](arg dom[211661]:_domain[225034](?), arg counts[211665]:integral[159](?)) : _unknown[42] "operator"
  {
    unknown ret[619501] "RVV" "temp"
    (211670 call errorIfNotRectangular dom[211661] "#" " and arrays")
    (559825 'end of statement')
    unknown call_tmp[864513] "expr temp" "maybe param" "maybe type" "temp"
    (864516 'move' call_tmp[864513](211687 call rank _mt[203] dom[211661]))
    unknown call_tmp[864518] "expr temp" "maybe param" "maybe type" "temp"
    (864521 'move' call_tmp[864518](211684 call != call_tmp[864513] 1))
    unknown call_tmp[864523] "expr temp" "maybe param" "maybe type" "temp"
    (864526 'move' call_tmp[864523](211691 call _cond_test call_tmp[864518]))
    if call_tmp[864523]
    {
      (211679 call compilerError "cannot apply '#' with an integer to multi-dimensional domains and arrays")
    }
    unknown call_tmp[864528] "expr temp" "maybe param" "maybe type" "temp"
    (864531 'move' call_tmp[864528](211702 call _build_tuple counts[211665]))
    unknown call_tmp[864533] "expr temp" "maybe param" "maybe type" "temp"
    (864536 'move' call_tmp[864533](211698 call chpl_countDomHelp dom[211661] call_tmp[864528]))
    (619506 'move' ret[619501](619505 'deref' call_tmp[864533]))
    (619503 return ret[619501])
  }
  function #[211706](arg dom[211709]:_domain[225034](?), arg counts[211713]:_tuple[246](?)) : _unknown[42] "operator"
  {
    unknown ret[619510] "RVV" "temp"
    (211718 call errorIfNotRectangular dom[211709] "#" " and arrays")
    (559828 'end of statement')
    unknown call_tmp[864540] "expr temp" "maybe param" "maybe type" "temp"
    (864543 'move' call_tmp[864540](211731 call size _mt[203] counts[211713]))
    unknown call_tmp[864547] "expr temp" "maybe param" "maybe type" "temp"
    (864550 'move' call_tmp[864547](211735 call rank _mt[203] dom[211709]))
    unknown call_tmp[864552] "expr temp" "maybe param" "maybe type" "temp"
    (864555 'move' call_tmp[864552](211728 call != call_tmp[864540] call_tmp[864547]))
    unknown call_tmp[864557] "expr temp" "maybe param" "maybe type" "temp"
    (864560 'move' call_tmp[864557](211738 call _cond_test call_tmp[864552]))
    if call_tmp[864557]
    {
      (211723 call compilerError "rank mismatch in '#'")
    }
    unknown call_tmp[864562] "expr temp" "maybe param" "maybe type" "temp"
    (864565 'move' call_tmp[864562](211745 call chpl_countDomHelp dom[211709] counts[211713]))
    (619515 'move' ret[619510](619514 'deref' call_tmp[864562]))
    (619512 return ret[619510])
  }
  function #[211750](arg dom[211753]:_domain[225034](?), arg counts[211756]:_any[141](?)) : _unknown[42] "last resort" "operator" "no return value for void"
  {
    unknown call_tmp[864567] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (864570 'move' call_tmp[864567](211765 'typeof' dom[211753]))
    unknown call_tmp[864572] "expr temp" "maybe param" "maybe type" "temp"
    (864575 'move' call_tmp[864572](211762 call : call_tmp[864567] string[244]))
    unknown call_tmp[864577] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (864580 'move' call_tmp[864577](211773 'typeof' counts[211756]))
    unknown call_tmp[864582] "expr temp" "maybe param" "maybe type" "temp"
    (864585 'move' call_tmp[864582](211770 call : call_tmp[864577] string[244]))
    (211760 call compilerError "cannot apply '#' to '" call_tmp[864572] "' using count(s) of type " call_tmp[864582])
    (619517 return _void[46])
  }
  function noRDadds[211777](arg t[211779]:_any[141](?)) param : _unknown[42] "private"
  {
    unknown ret[619521] "RVV" "param" "temp"
    unknown tmp[495309] "maybe param" "temp"
    unknown tmp[495330] "maybe param" "temp"
    unknown tmp[495351] "maybe param" "temp"
    (495362 'move' tmp[495351](211790 call isPrimitive t[211779]))
    unknown call_tmp[864587] "expr temp" "maybe param" "maybe type" "temp"
    (864590 'move' call_tmp[864587](495364 call _cond_invalid tmp[495351]))
    if call_tmp[864587]
    {
      (495367 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[691234] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691235] "maybe param" "temp"
    unknown call_tmp[864592] "expr temp" "maybe param" "maybe type" "temp"
    (864595 'move' call_tmp[864592](495352 call isTrue tmp[495351]))
    (691240 'move' tmp[691235](691238 call _cond_test call_tmp[864592]))
    if tmp[691235]
    {
      (691245 'move' tmp[691234](691242 '_paramFoldLogical' tmp[691235] 1))
    }
    {
      unknown tmp[691247] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[864597] "expr temp" "maybe param" "maybe type" "temp"
      (864600 'move' call_tmp[864597](211793 call isRange t[211779]))
      (691249 'move' tmp[691247](495356 call isTrue call_tmp[864597]))
      (691254 'move' tmp[691234](691251 '_paramFoldLogical' tmp[691235] tmp[691247]))
    }
    (495341 'move' tmp[495330] tmp[691234])
    unknown call_tmp[864602] "expr temp" "maybe param" "maybe type" "temp"
    (864605 'move' call_tmp[864602](495343 call _cond_invalid tmp[495330]))
    if call_tmp[864602]
    {
      (495346 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[691261] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691262] "maybe param" "temp"
    unknown call_tmp[864607] "expr temp" "maybe param" "maybe type" "temp"
    (864610 'move' call_tmp[864607](495331 call isTrue tmp[495330]))
    (691267 'move' tmp[691262](691265 call _cond_test call_tmp[864607]))
    if tmp[691262]
    {
      (691272 'move' tmp[691261](691269 '_paramFoldLogical' tmp[691262] 1))
    }
    {
      unknown tmp[691274] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[864612] "expr temp" "maybe param" "maybe type" "temp"
      (864615 'move' call_tmp[864612](211796 call isTuple t[211779]))
      (691276 'move' tmp[691274](495335 call isTrue call_tmp[864612]))
      (691281 'move' tmp[691261](691278 '_paramFoldLogical' tmp[691262] tmp[691274]))
    }
    (495320 'move' tmp[495309] tmp[691261])
    unknown call_tmp[864617] "expr temp" "maybe param" "maybe type" "temp"
    (864620 'move' call_tmp[864617](495322 call _cond_invalid tmp[495309]))
    if call_tmp[864617]
    {
      (495325 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[691288] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691289] "maybe param" "temp"
    unknown call_tmp[864622] "expr temp" "maybe param" "maybe type" "temp"
    (864625 'move' call_tmp[864622](495310 call isTrue tmp[495309]))
    (691294 'move' tmp[691289](691292 call _cond_test call_tmp[864622]))
    if tmp[691289]
    {
      (691299 'move' tmp[691288](691296 '_paramFoldLogical' tmp[691289] 1))
    }
    {
      unknown tmp[691301] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[864627] "expr temp" "maybe param" "maybe type" "temp"
      (864630 'move' call_tmp[864627](211799 call isEnum t[211779]))
      (691303 'move' tmp[691301](495314 call isTrue call_tmp[864627]))
      (691308 'move' tmp[691288](691305 '_paramFoldLogical' tmp[691289] tmp[691301]))
    }
    (619526 'move' ret[619521](619525 'deref' tmp[691288]))
    (619523 return ret[619521])
  }
  function +[211803](arg d[211806]:_domain[225034](?), arg i[211811]:_any[141](?)) : _unknown[42] "operator" "no return value for void"
  {
    unknown call_tmp[864632] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (864635 'move' call_tmp[864632](528440 'typeof' i[211811]))
    unknown call_tmp[864637] "expr temp" "maybe param" "maybe type" "temp"
    (864640 'move' call_tmp[864637](211830 call : call_tmp[864632] string[244]))
    (211826 call compilerError "addition of a rectangular domain and " call_tmp[864637] " is currently not supported")
    (619528 return _void[46])
  }
  where {
    unknown tmp[495372] "maybe param" "temp"
    (495383 'move' tmp[495372](211820 call(211817 call (partial) isRectangular _mt[203] d[211806])))
    unknown call_tmp[864644] "expr temp" "maybe param" "maybe type" "temp"
    (864647 'move' call_tmp[864644](495385 call _cond_invalid tmp[495372]))
    if call_tmp[864644]
    {
      (495388 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[691315] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691316] "maybe param" "temp"
    unknown call_tmp[864649] "expr temp" "maybe param" "maybe type" "temp"
    (864652 'move' call_tmp[864649](495373 call isTrue tmp[495372]))
    (691321 'move' tmp[691316](691319 call _cond_test call_tmp[864649]))
    if tmp[691316]
    {
      unknown tmp[691323] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[864654] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (864657 'move' call_tmp[864654](528442 'typeof' i[211811]))
      unknown call_tmp[864659] "expr temp" "maybe param" "maybe type" "temp"
      (864662 'move' call_tmp[864659](211822 call noRDadds call_tmp[864654]))
      (691325 'move' tmp[691323](495376 call isTrue call_tmp[864659]))
      (691330 'move' tmp[691315](691327 '_paramFoldLogical' tmp[691316] tmp[691323]))
    }
    {
      (691335 'move' tmp[691315](691332 '_paramFoldLogical' tmp[691316] 0))
    }
    (1001536 call chpl_statementLevelSymbol tmp[691315])
  }
  function +[211840](arg i[211844]:_any[141](?), arg d[211848]:_domain[225034](?)) : _unknown[42] "operator" "no return value for void"
  {
    unknown call_tmp[864664] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (864667 'move' call_tmp[864664](528444 'typeof' i[211844]))
    unknown call_tmp[864669] "expr temp" "maybe param" "maybe type" "temp"
    (864672 'move' call_tmp[864669](211867 call : call_tmp[864664] string[244]))
    (211863 call compilerError "addition of " call_tmp[864669] " and a rectangular domain is currently not supported")
    (619530 return _void[46])
  }
  where {
    unknown tmp[495393] "maybe param" "temp"
    (495404 'move' tmp[495393](211857 call(211854 call (partial) isRectangular _mt[203] d[211848])))
    unknown call_tmp[864676] "expr temp" "maybe param" "maybe type" "temp"
    (864679 'move' call_tmp[864676](495406 call _cond_invalid tmp[495393]))
    if call_tmp[864676]
    {
      (495409 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[691342] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691343] "maybe param" "temp"
    unknown call_tmp[864681] "expr temp" "maybe param" "maybe type" "temp"
    (864684 'move' call_tmp[864681](495394 call isTrue tmp[495393]))
    (691348 'move' tmp[691343](691346 call _cond_test call_tmp[864681]))
    if tmp[691343]
    {
      unknown tmp[691350] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[864686] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (864689 'move' call_tmp[864686](528446 'typeof' i[211844]))
      unknown call_tmp[864691] "expr temp" "maybe param" "maybe type" "temp"
      (864694 'move' call_tmp[864691](211859 call noRDadds call_tmp[864686]))
      (691352 'move' tmp[691350](495397 call isTrue call_tmp[864691]))
      (691357 'move' tmp[691342](691354 '_paramFoldLogical' tmp[691343] tmp[691350]))
    }
    {
      (691362 'move' tmp[691342](691359 '_paramFoldLogical' tmp[691343] 0))
    }
    (1001538 call chpl_statementLevelSymbol tmp[691342])
  }
  function -[211877](arg d[211880]:_domain[225034](?), arg i[211885]:_any[141](?)) : _unknown[42] "operator" "no return value for void"
  {
    unknown call_tmp[864696] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (864699 'move' call_tmp[864696](528448 'typeof' i[211885]))
    unknown call_tmp[864701] "expr temp" "maybe param" "maybe type" "temp"
    (864704 'move' call_tmp[864701](211904 call : call_tmp[864696] string[244]))
    (211900 call compilerError "subtraction of a rectangular domain and " call_tmp[864701] " is currently not supported")
    (619532 return _void[46])
  }
  where {
    unknown tmp[495414] "maybe param" "temp"
    (495425 'move' tmp[495414](211894 call(211891 call (partial) isRectangular _mt[203] d[211880])))
    unknown call_tmp[864708] "expr temp" "maybe param" "maybe type" "temp"
    (864711 'move' call_tmp[864708](495427 call _cond_invalid tmp[495414]))
    if call_tmp[864708]
    {
      (495430 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[691369] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691370] "maybe param" "temp"
    unknown call_tmp[864713] "expr temp" "maybe param" "maybe type" "temp"
    (864716 'move' call_tmp[864713](495415 call isTrue tmp[495414]))
    (691375 'move' tmp[691370](691373 call _cond_test call_tmp[864713]))
    if tmp[691370]
    {
      unknown tmp[691377] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[864718] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (864721 'move' call_tmp[864718](528450 'typeof' i[211885]))
      unknown call_tmp[864723] "expr temp" "maybe param" "maybe type" "temp"
      (864726 'move' call_tmp[864723](211896 call noRDadds call_tmp[864718]))
      (691379 'move' tmp[691377](495418 call isTrue call_tmp[864723]))
      (691384 'move' tmp[691369](691381 '_paramFoldLogical' tmp[691370] tmp[691377]))
    }
    {
      (691389 'move' tmp[691369](691386 '_paramFoldLogical' tmp[691370] 0))
    }
    (1001540 call chpl_statementLevelSymbol tmp[691369])
  }
  function +[211912](in arg d[211915]:_domain[225034](?), arg i[211921] :
  (211918 call chpl__buildIndexType d[211915])) : _unknown[42] "operator" "@unstable"
  {
    unknown ret[619536] "RVV" "temp"
    (211936 call(211933 call (partial) add _mt[203] d[211915]) i[211921])
    (559839 'end of statement')
    (619541 'move' ret[619536](619540 'deref' d[211915]))
    (619538 return ret[619536])
  }
  where {
    (211930 call(211927 call (partial) isIrregular _mt[203] d[211915]))
  }
  function +[211943](arg i[211945]:_any[141](?), in arg d[211948]:_domain[225034](?)) : _unknown[42] "operator" "@unstable"
  {
    unknown ret[619545] "RVV" "temp"
    (211970 call(211967 call (partial) add _mt[203] d[211948]) i[211945])
    (559841 'end of statement')
    (619550 'move' ret[619545](619549 'deref' d[211948]))
    (619547 return ret[619545])
  }
  where {
    unknown tmp[495435] "maybe param" "temp"
    unknown call_tmp[864734] "expr temp" "maybe param" "maybe type" "temp"
    (864737 'move' call_tmp[864734](211957 call chpl__buildIndexType d[211948]))
    unknown call_tmp[864739] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (864742 'move' call_tmp[864739](211956 'typeof' i[211945]))
    (495446 'move' tmp[495435](395453 'is_subtype' call_tmp[864734] call_tmp[864739]))
    unknown call_tmp[864744] "expr temp" "maybe param" "maybe type" "temp"
    (864747 'move' call_tmp[864744](495448 call _cond_invalid tmp[495435]))
    if call_tmp[864744]
    {
      (495451 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[691396] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691397] "maybe param" "temp"
    unknown call_tmp[864749] "expr temp" "maybe param" "maybe type" "temp"
    (864752 'move' call_tmp[864749](495436 call isTrue tmp[495435]))
    (691402 'move' tmp[691397](691400 call _cond_test call_tmp[864749]))
    if tmp[691397]
    {
      unknown tmp[691404] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[864756] "expr temp" "maybe param" "maybe type" "temp"
      (864759 'move' call_tmp[864756](211964 call(211961 call (partial) isIrregular _mt[203] d[211948])))
      (691406 'move' tmp[691404](495439 call isTrue call_tmp[864756]))
      (691411 'move' tmp[691396](691408 '_paramFoldLogical' tmp[691397] tmp[691404]))
    }
    {
      (691416 'move' tmp[691396](691413 '_paramFoldLogical' tmp[691397] 0))
    }
    (1001542 call chpl_statementLevelSymbol tmp[691396])
  }
  function +[211977](in arg d1[211980]:_domain[225034](?), arg d2[211984]:_domain[225034](?)) : _unknown[42] "operator" "@unstable"
  {
    unknown ret[619554] "RVV" "temp"
    {
      unknown _indexOfInterest[212018] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[212019] "expr temp" "temp"
      (212028 'move' _iterator[212019](212026 call _getIterator d2[211984]))
      Defer
      {
        {
          (212043 call _freeIterator _iterator[212019])
        }
      }
      { scopeless type
        (212033 'move' _indexOfInterest[212018](212030 call iteratorIndex _iterator[212019]))
      }
      ForLoop[212020]
      {
        unknown e[212008] "index var" "insert auto destroy"
        (559844 'end of statement')
        (212038 'move' e[212008] _indexOfInterest[212018])
        (559845 'end of statement' e[212008])
        (212015 call(212012 call (partial) add _mt[203] d1[211980]) e[212008])
        (559847 'end of statement' e[212008])
        label _continueLabel[212023]
        _indexOfInterest[212018]
        _iterator[212019]
      }
      label _breakLabel[212024]
    }
    (619559 'move' ret[619554](619558 'deref' d1[211980]))
    (619556 return ret[619554])
  }
  where {
    unknown tmp[495456] "maybe param" "temp"
    unknown tmp[495477] "maybe param" "temp"
    unknown call_tmp[864763] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (864766 'move' call_tmp[864763](211994 'typeof' d1[211980]))
    unknown call_tmp[864768] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (864771 'move' call_tmp[864768](211996 'typeof' d2[211984]))
    (495488 'move' tmp[495477](211991 call == call_tmp[864763] call_tmp[864768]))
    unknown call_tmp[864773] "expr temp" "maybe param" "maybe type" "temp"
    (864776 'move' call_tmp[864773](495490 call _cond_invalid tmp[495477]))
    if call_tmp[864773]
    {
      (495493 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[691423] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691424] "maybe param" "temp"
    unknown call_tmp[864778] "expr temp" "maybe param" "maybe type" "temp"
    (864781 'move' call_tmp[864778](495478 call isTrue tmp[495477]))
    (691429 'move' tmp[691424](691427 call _cond_test call_tmp[864778]))
    if tmp[691424]
    {
      unknown tmp[691431] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[864785] "expr temp" "maybe param" "maybe type" "temp"
      (864788 'move' call_tmp[864785](212001 call(211998 call (partial) isIrregular _mt[203] d1[211980])))
      (691433 'move' tmp[691431](495481 call isTrue call_tmp[864785]))
      (691438 'move' tmp[691423](691435 '_paramFoldLogical' tmp[691424] tmp[691431]))
    }
    {
      (691443 'move' tmp[691423](691440 '_paramFoldLogical' tmp[691424] 0))
    }
    (495467 'move' tmp[495456] tmp[691423])
    unknown call_tmp[864790] "expr temp" "maybe param" "maybe type" "temp"
    (864793 'move' call_tmp[864790](495469 call _cond_invalid tmp[495456]))
    if call_tmp[864790]
    {
      (495472 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[691450] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691451] "maybe param" "temp"
    unknown call_tmp[864795] "expr temp" "maybe param" "maybe type" "temp"
    (864798 'move' call_tmp[864795](495457 call isTrue tmp[495456]))
    (691456 'move' tmp[691451](691454 call _cond_test call_tmp[864795]))
    if tmp[691451]
    {
      unknown tmp[691458] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[864802] "expr temp" "maybe param" "maybe type" "temp"
      (864805 'move' call_tmp[864802](212006 call(212003 call (partial) isIrregular _mt[203] d2[211984])))
      (691460 'move' tmp[691458](495460 call isTrue call_tmp[864802]))
      (691465 'move' tmp[691450](691462 '_paramFoldLogical' tmp[691451] tmp[691458]))
    }
    {
      (691470 'move' tmp[691450](691467 '_paramFoldLogical' tmp[691451] 0))
    }
    (1001544 call chpl_statementLevelSymbol tmp[691450])
  }
  function +[212055](arg d1[212058]:_domain[225034](?), arg d2[212062]:_domain[225034](?)) : _unknown[42] "operator" "no return value for void"
  {
    unknown tmp[495498] "maybe param" "temp"
    (495509 'move' tmp[495498](212084 call(212081 call (partial) isRectangular _mt[203] d1[212058])))
    unknown call_tmp[864809] "expr temp" "maybe param" "maybe type" "temp"
    (864812 'move' call_tmp[864809](495511 call _cond_invalid tmp[495498]))
    if call_tmp[864809]
    {
      (495514 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[691477] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691478] "maybe param" "temp"
    unknown call_tmp[864814] "expr temp" "maybe param" "maybe type" "temp"
    (864817 'move' call_tmp[864814](495499 call isTrue tmp[495498]))
    (691483 'move' tmp[691478](691481 call _cond_test call_tmp[864814]))
    if tmp[691478]
    {
      (691488 'move' tmp[691477](691485 '_paramFoldLogical' tmp[691478] 1))
    }
    {
      unknown tmp[691490] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[864821] "expr temp" "maybe param" "maybe type" "temp"
      (864824 'move' call_tmp[864821](212089 call(212086 call (partial) isRectangular _mt[203] d2[212062])))
      (691492 'move' tmp[691490](495503 call isTrue call_tmp[864821]))
      (691497 'move' tmp[691477](691494 '_paramFoldLogical' tmp[691478] tmp[691490]))
    }
    unknown call_tmp[864826] "expr temp" "maybe param" "maybe type" "temp"
    (864829 'move' call_tmp[864826](212090 call _cond_test tmp[691477]))
    if call_tmp[864826]
    {
      (212067 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (212073 call compilerError "Cannot add indices to this domain type")
    }
    (619561 return _void[46])
  }
  function +=[212098](ref arg D[212101]:_domain[225034](?), arg idx[212104]:_any[141](?)) : _unknown[42] "assignop" "inline" "operator" "@unstable" "no return value for void"
  {
    (212111 call(212108 call (partial) add _mt[203] D[212101]) idx[212104])
    (619563 return _void[46])
  }
  function +=[212115](ref arg D[212118]:_domain[225034](?), param arg idx[212121]:_any[141](?)) : _unknown[42] "assignop" "inline" "operator" "@unstable" "no return value for void"
  {
    (212128 call(212125 call (partial) add _mt[203] D[212118]) idx[212121])
    (619565 return _void[46])
  }
  function -[212132](in arg d[212135]:_domain[225034](?), arg i[212141] :
  (212138 call chpl__buildIndexType d[212135])) : _unknown[42] "operator" "@unstable"
  {
    unknown ret[619569] "RVV" "temp"
    (212154 call(212151 call (partial) remove _mt[203] d[212135]) i[212141])
    (559855 'end of statement')
    (619574 'move' ret[619569](619573 'deref' d[212135]))
    (619571 return ret[619569])
  }
  where {
    (212148 call(212145 call (partial) isIrregular _mt[203] d[212135]))
  }
  function -[212161](in arg d1[212164]:_domain[225034](?), arg d2[212168]:_domain[225034](?)) : _unknown[42] "operator"
  {
    unknown ret[619578] "RVV" "temp"
    {
      unknown _indexOfInterest[212195] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[212196] "expr temp" "temp"
      (212205 'move' _iterator[212196](212203 call _getIterator d2[212168]))
      Defer
      {
        {
          (212220 call _freeIterator _iterator[212196])
        }
      }
      { scopeless type
        (212210 'move' _indexOfInterest[212195](212207 call iteratorIndex _iterator[212196]))
      }
      ForLoop[212197]
      {
        unknown e[212185] "index var" "insert auto destroy"
        (559858 'end of statement')
        (212215 'move' e[212185] _indexOfInterest[212195])
        (559859 'end of statement' e[212185])
        (212192 call(212189 call (partial) remove _mt[203] d1[212164]) e[212185])
        (559861 'end of statement' e[212185])
        label _continueLabel[212200]
        _indexOfInterest[212195]
        _iterator[212196]
      }
      label _breakLabel[212201]
    }
    (619583 'move' ret[619578](619582 'deref' d1[212164]))
    (619580 return ret[619578])
  }
  where {
    unknown tmp[495519] "maybe param" "temp"
    unknown call_tmp[864841] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (864844 'move' call_tmp[864841](212176 'typeof' d1[212164]))
    unknown call_tmp[864846] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (864849 'move' call_tmp[864846](212178 'typeof' d2[212168]))
    (495530 'move' tmp[495519](212173 call == call_tmp[864841] call_tmp[864846]))
    unknown call_tmp[864851] "expr temp" "maybe param" "maybe type" "temp"
    (864854 'move' call_tmp[864851](495532 call _cond_invalid tmp[495519]))
    if call_tmp[864851]
    {
      (495535 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[691504] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691505] "maybe param" "temp"
    unknown call_tmp[864856] "expr temp" "maybe param" "maybe type" "temp"
    (864859 'move' call_tmp[864856](495520 call isTrue tmp[495519]))
    (691510 'move' tmp[691505](691508 call _cond_test call_tmp[864856]))
    if tmp[691505]
    {
      unknown tmp[691512] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[864863] "expr temp" "maybe param" "maybe type" "temp"
      (864866 'move' call_tmp[864863](212183 call(212180 call (partial) isSparse _mt[203] d1[212164])))
      (691514 'move' tmp[691512](495523 call isTrue call_tmp[864863]))
      (691519 'move' tmp[691504](691516 '_paramFoldLogical' tmp[691505] tmp[691512]))
    }
    {
      (691524 'move' tmp[691504](691521 '_paramFoldLogical' tmp[691505] 0))
    }
    (1001546 call chpl_statementLevelSymbol tmp[691504])
  }
  function -[212232](arg d1[212235]:_domain[225034](?), arg d2[212239]:_domain[225034](?)) : _unknown[42] "operator" "no return value for void"
  {
    unknown tmp[495540] "maybe param" "temp"
    (495551 'move' tmp[495540](212261 call(212258 call (partial) isRectangular _mt[203] d1[212235])))
    unknown call_tmp[864870] "expr temp" "maybe param" "maybe type" "temp"
    (864873 'move' call_tmp[864870](495553 call _cond_invalid tmp[495540]))
    if call_tmp[864870]
    {
      (495556 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[691531] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691532] "maybe param" "temp"
    unknown call_tmp[864875] "expr temp" "maybe param" "maybe type" "temp"
    (864878 'move' call_tmp[864875](495541 call isTrue tmp[495540]))
    (691537 'move' tmp[691532](691535 call _cond_test call_tmp[864875]))
    if tmp[691532]
    {
      (691542 'move' tmp[691531](691539 '_paramFoldLogical' tmp[691532] 1))
    }
    {
      unknown tmp[691544] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[864882] "expr temp" "maybe param" "maybe type" "temp"
      (864885 'move' call_tmp[864882](212266 call(212263 call (partial) isRectangular _mt[203] d2[212239])))
      (691546 'move' tmp[691544](495545 call isTrue call_tmp[864882]))
      (691551 'move' tmp[691531](691548 '_paramFoldLogical' tmp[691532] tmp[691544]))
    }
    unknown call_tmp[864887] "expr temp" "maybe param" "maybe type" "temp"
    (864890 'move' call_tmp[864887](212267 call _cond_test tmp[691531]))
    if call_tmp[864887]
    {
      (212244 call compilerError "Cannot remove indices from a rectangular domain")
    }
    {
      (212250 call compilerError "Cannot remove indices from this domain type")
    }
    (619585 return _void[46])
  }
  function -=[212275](ref arg D[212278]:_domain[225034](?), arg idx[212281]:_any[141](?)) : _unknown[42] "assignop" "inline" "operator" "@unstable" "no return value for void"
  {
    (212288 call(212285 call (partial) remove _mt[203] D[212278]) idx[212281])
    (619587 return _void[46])
  }
  function -=[212292](ref arg D[212295]:_domain[225034](?), param arg idx[212298]:_any[141](?)) : _unknown[42] "assignop" "inline" "operator" "@unstable" "no return value for void"
  {
    (212305 call(212302 call (partial) remove _mt[203] D[212295]) idx[212298])
    (619589 return _void[46])
  }
  function ==[212309](arg d1[212312]:_domain[225034](?), arg d2[212316]:_domain[225034](?)) : _unknown[42] "inline" "operator"
  {
    unknown ret[619593] "RVV" "temp"
    unknown call_tmp[864898] "expr temp" "maybe param" "maybe type" "temp"
    (864901 'move' call_tmp[864898](212437 call _value _mt[203] d1[212312]))
    unknown call_tmp[864905] "expr temp" "maybe param" "maybe type" "temp"
    (864908 'move' call_tmp[864905](212440 call rank _mt[203] call_tmp[864898]))
    unknown call_tmp[864912] "expr temp" "maybe param" "maybe type" "temp"
    (864915 'move' call_tmp[864912](212444 call _value _mt[203] d2[212316]))
    unknown call_tmp[864919] "expr temp" "maybe param" "maybe type" "temp"
    (864922 'move' call_tmp[864919](212447 call rank _mt[203] call_tmp[864912]))
    unknown call_tmp[864924] "expr temp" "maybe param" "maybe type" "temp"
    (864927 'move' call_tmp[864924](212434 call != call_tmp[864905] call_tmp[864919]))
    unknown call_tmp[864929] "expr temp" "maybe param" "maybe type" "temp"
    (864932 'move' call_tmp[864929](212450 call _cond_test call_tmp[864924]))
    if call_tmp[864929]
    {
      (619598 'move' ret[619593](619597 'deref' 0))
      gotoReturn _end_==[619591] _end_==[619591]
    }
    {
      unknown call_tmp[864936] "expr temp" "maybe param" "maybe type" "temp"
      (864939 'move' call_tmp[864936](212423 call _value _mt[203] d1[212312]))
      unknown call_tmp[864943] "expr temp" "maybe param" "maybe type" "temp"
      (864946 'move' call_tmp[864943](212427 call _value _mt[203] d2[212316]))
      unknown call_tmp[864948] "expr temp" "maybe param" "maybe type" "temp"
      (864951 'move' call_tmp[864948](212420 call == call_tmp[864936] call_tmp[864943]))
      unknown call_tmp[864953] "expr temp" "maybe param" "maybe type" "temp"
      (864956 'move' call_tmp[864953](212430 call _cond_test call_tmp[864948]))
      if call_tmp[864953]
      {
        (619603 'move' ret[619593](619602 'deref' 1))
        gotoReturn _end_==[619591] _end_==[619591]
      }
      {
        {
          unknown i[212339] "dead at end of block" "index var" "insert auto destroy"
          (649343 'init var' i[212339] 0)
          (559871 'end of statement')
          unknown tmp[212376] "maybe param" "temp"
          unknown call_tmp[864960] "expr temp" "maybe param" "maybe type" "temp"
          (864963 'move' call_tmp[864960](212345 call _value _mt[203] d1[212312]))
          unknown call_tmp[864967] "expr temp" "maybe param" "maybe type" "temp"
          (864970 'move' call_tmp[864967](212348 call rank _mt[203] call_tmp[864960]))
          unknown call_tmp[864972] "expr temp" "maybe param" "maybe type" "temp"
          (864975 'move' call_tmp[864972](212342 call - call_tmp[864967] 1))
          (212388 'move' tmp[212376](212386 call chpl_compute_low_param_loop_bound 0 call_tmp[864972]))
          unknown tmp[212377] "maybe param" "temp"
          unknown call_tmp[864979] "expr temp" "maybe param" "maybe type" "temp"
          (864982 'move' call_tmp[864979](212397 call _value _mt[203] d1[212312]))
          unknown call_tmp[864986] "expr temp" "maybe param" "maybe type" "temp"
          (864989 'move' call_tmp[864986](212395 call rank _mt[203] call_tmp[864979]))
          unknown call_tmp[864991] "expr temp" "maybe param" "maybe type" "temp"
          (864994 'move' call_tmp[864991](212393 call - call_tmp[864986] 1))
          (212404 'move' tmp[212377](212402 call chpl_compute_high_param_loop_bound 0 call_tmp[864991]))
          unknown tmp[212378] "maybe param" "temp"
          (212407 'move' tmp[212378] 1)
          ParamForLoop[212409]
          { i[212339] tmp[212376] tmp[212377] tmp[212378]
            unknown call_tmp[864998] "expr temp" "maybe param" "maybe type" "temp"
            (865001 'move' call_tmp[864998](212363 call(212360 call (partial) dim _mt[203] d1[212312]) i[212339]))
            unknown call_tmp[865005] "expr temp" "maybe param" "maybe type" "temp"
            (865008 'move' call_tmp[865005](212369 call(212366 call (partial) dim _mt[203] d2[212316]) i[212339]))
            unknown call_tmp[865010] "expr temp" "maybe param" "maybe type" "temp"
            (865013 'move' call_tmp[865010](212357 call != call_tmp[864998] call_tmp[865005]))
            unknown call_tmp[865015] "expr temp" "maybe param" "maybe type" "temp"
            (865018 'move' call_tmp[865015](212371 call _cond_test call_tmp[865010]))
            if call_tmp[865015]
            {
              (619608 'move' ret[619593](619607 'deref' 0))
              gotoReturn _end_==[619591] _end_==[619591]
            }
          }
          label _unused_continueLabel[212380]
          label _breakLabel[212379]
        }
        (619613 'move' ret[619593](619612 'deref' 1))
        gotoReturn _end_==[619591] _end_==[619591]
      }
    }
    label _end_==[619591]
    (619595 return ret[619593])
  }
  where {
    unknown tmp[495561] "maybe param" "temp"
    (495572 'move' tmp[495561](212325 call(212322 call (partial) isRectangular _mt[203] d1[212312])))
    unknown call_tmp[865022] "expr temp" "maybe param" "maybe type" "temp"
    (865025 'move' call_tmp[865022](495574 call _cond_invalid tmp[495561]))
    if call_tmp[865022]
    {
      (495577 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[691558] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691559] "maybe param" "temp"
    unknown call_tmp[865027] "expr temp" "maybe param" "maybe type" "temp"
    (865030 'move' call_tmp[865027](495562 call isTrue tmp[495561]))
    (691564 'move' tmp[691559](691562 call _cond_test call_tmp[865027]))
    if tmp[691559]
    {
      unknown tmp[691566] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[865034] "expr temp" "maybe param" "maybe type" "temp"
      (865037 'move' call_tmp[865034](212330 call(212327 call (partial) isRectangular _mt[203] d2[212316])))
      (691568 'move' tmp[691566](495565 call isTrue call_tmp[865034]))
      (691573 'move' tmp[691558](691570 '_paramFoldLogical' tmp[691559] tmp[691566]))
    }
    {
      (691578 'move' tmp[691558](691575 '_paramFoldLogical' tmp[691559] 0))
    }
    (1001548 call chpl_statementLevelSymbol tmp[691558])
  }
  function !=[212458](arg d1[212461]:_domain[225034](?), arg d2[212465]:_domain[225034](?)) : _unknown[42] "inline" "operator"
  {
    unknown ret[619619] "RVV" "temp"
    unknown call_tmp[865039] "expr temp" "maybe param" "maybe type" "temp"
    (865042 'move' call_tmp[865039](212484 call == d1[212461] d2[212465]))
    unknown call_tmp[865044] "expr temp" "maybe param" "maybe type" "temp"
    (865047 'move' call_tmp[865044](212482 call ! call_tmp[865039]))
    (619624 'move' ret[619619](619623 'deref' call_tmp[865044]))
    (619621 return ret[619619])
  }
  where {
    unknown tmp[495582] "maybe param" "temp"
    (495593 'move' tmp[495582](212474 call(212471 call (partial) isRectangular _mt[203] d1[212461])))
    unknown call_tmp[865051] "expr temp" "maybe param" "maybe type" "temp"
    (865054 'move' call_tmp[865051](495595 call _cond_invalid tmp[495582]))
    if call_tmp[865051]
    {
      (495598 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[691585] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691586] "maybe param" "temp"
    unknown call_tmp[865056] "expr temp" "maybe param" "maybe type" "temp"
    (865059 'move' call_tmp[865056](495583 call isTrue tmp[495582]))
    (691591 'move' tmp[691586](691589 call _cond_test call_tmp[865056]))
    if tmp[691586]
    {
      unknown tmp[691593] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[865063] "expr temp" "maybe param" "maybe type" "temp"
      (865066 'move' call_tmp[865063](212479 call(212476 call (partial) isRectangular _mt[203] d2[212465])))
      (691595 'move' tmp[691593](495586 call isTrue call_tmp[865063]))
      (691600 'move' tmp[691585](691597 '_paramFoldLogical' tmp[691586] tmp[691593]))
    }
    {
      (691605 'move' tmp[691585](691602 '_paramFoldLogical' tmp[691586] 0))
    }
    (1001550 call chpl_statementLevelSymbol tmp[691585])
  }
  function ==[212491](arg d1[212494]:_domain[225034](?), arg d2[212498]:_domain[225034](?)) : _unknown[42] "inline" "operator"
  {
    unknown ret[619628] "RVV" "temp"
    unknown call_tmp[865070] "expr temp" "maybe param" "maybe type" "temp"
    (865073 'move' call_tmp[865070](212520 call _value _mt[203] d1[212494]))
    unknown call_tmp[865077] "expr temp" "maybe param" "maybe type" "temp"
    (865080 'move' call_tmp[865077](212524 call _value _mt[203] d2[212498]))
    unknown call_tmp[865082] "expr temp" "maybe param" "maybe type" "temp"
    (865085 'move' call_tmp[865082](212517 call == call_tmp[865070] call_tmp[865077]))
    unknown call_tmp[865087] "expr temp" "maybe param" "maybe type" "temp"
    (865090 'move' call_tmp[865087](212527 call _cond_test call_tmp[865082]))
    if call_tmp[865087]
    {
      (619633 'move' ret[619628](619632 'deref' 1))
      gotoReturn _end_==[619626] _end_==[619626]
    }
    unknown call_tmp[865094] "expr temp" "maybe param" "maybe type" "temp"
    (865097 'move' call_tmp[865094](212541 call(212538 call (partial) sizeAs _mt[203] d1[212494]) uint(64)[86]))
    unknown call_tmp[865101] "expr temp" "maybe param" "maybe type" "temp"
    (865104 'move' call_tmp[865101](212547 call(212544 call (partial) sizeAs _mt[203] d2[212498]) uint(64)[86]))
    unknown call_tmp[865106] "expr temp" "maybe param" "maybe type" "temp"
    (865109 'move' call_tmp[865106](212535 call != call_tmp[865094] call_tmp[865101]))
    unknown call_tmp[865111] "expr temp" "maybe param" "maybe type" "temp"
    (865114 'move' call_tmp[865111](212549 call _cond_test call_tmp[865106]))
    if call_tmp[865111]
    {
      (619638 'move' ret[619628](619637 'deref' 0))
      gotoReturn _end_==[619626] _end_==[619626]
    }
    {
      unknown _indexOfInterest[212573] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[212574] "expr temp" "temp"
      (212583 'move' _iterator[212574](212581 call _getIterator d1[212494]))
      Defer
      {
        {
          (212598 call _freeIterator _iterator[212574])
        }
      }
      { scopeless type
        (212588 'move' _indexOfInterest[212573](212585 call iteratorIndex _iterator[212574]))
      }
      ForLoop[212575]
      {
        unknown idx[212554] "index var" "insert auto destroy"
        (559878 'end of statement')
        (212593 'move' idx[212554] _indexOfInterest[212573])
        (559879 'end of statement' idx[212554])
        unknown call_tmp[865118] "expr temp" "maybe param" "maybe type" "temp"
        (865121 'move' call_tmp[865118](212566 call(212563 call (partial) contains _mt[203] d2[212498]) idx[212554]))
        unknown call_tmp[865123] "expr temp" "maybe param" "maybe type" "temp"
        (865126 'move' call_tmp[865123](212560 call ! call_tmp[865118]))
        unknown call_tmp[865128] "expr temp" "maybe param" "maybe type" "temp"
        (865131 'move' call_tmp[865128](212568 call _cond_test call_tmp[865123]))
        if call_tmp[865128]
        {
          (619643 'move' ret[619628](619642 'deref' 0))
          gotoReturn _end_==[619626] _end_==[619626]
        }
        label _continueLabel[212578]
        _indexOfInterest[212573]
        _iterator[212574]
      }
      label _breakLabel[212579]
    }
    (619648 'move' ret[619628](619647 'deref' 1))
    label _end_==[619626]
    (619630 return ret[619628])
  }
  where {
    unknown tmp[495603] "maybe param" "temp"
    (495614 'move' tmp[495603](212507 call(212504 call (partial) isAssociative _mt[203] d1[212494])))
    unknown call_tmp[865135] "expr temp" "maybe param" "maybe type" "temp"
    (865138 'move' call_tmp[865135](495616 call _cond_invalid tmp[495603]))
    if call_tmp[865135]
    {
      (495619 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[691612] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691613] "maybe param" "temp"
    unknown call_tmp[865140] "expr temp" "maybe param" "maybe type" "temp"
    (865143 'move' call_tmp[865140](495604 call isTrue tmp[495603]))
    (691618 'move' tmp[691613](691616 call _cond_test call_tmp[865140]))
    if tmp[691613]
    {
      unknown tmp[691620] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[865147] "expr temp" "maybe param" "maybe type" "temp"
      (865150 'move' call_tmp[865147](212512 call(212509 call (partial) isAssociative _mt[203] d2[212498])))
      (691622 'move' tmp[691620](495607 call isTrue call_tmp[865147]))
      (691627 'move' tmp[691612](691624 '_paramFoldLogical' tmp[691613] tmp[691620]))
    }
    {
      (691632 'move' tmp[691612](691629 '_paramFoldLogical' tmp[691613] 0))
    }
    (1001552 call chpl_statementLevelSymbol tmp[691612])
  }
  function !=[212610](arg d1[212613]:_domain[225034](?), arg d2[212617]:_domain[225034](?)) : _unknown[42] "inline" "operator"
  {
    unknown ret[619652] "RVV" "temp"
    unknown call_tmp[865152] "expr temp" "maybe param" "maybe type" "temp"
    (865155 'move' call_tmp[865152](212636 call == d1[212613] d2[212617]))
    unknown call_tmp[865157] "expr temp" "maybe param" "maybe type" "temp"
    (865160 'move' call_tmp[865157](212634 call ! call_tmp[865152]))
    (619657 'move' ret[619652](619656 'deref' call_tmp[865157]))
    (619654 return ret[619652])
  }
  where {
    unknown tmp[495624] "maybe param" "temp"
    (495635 'move' tmp[495624](212626 call(212623 call (partial) isAssociative _mt[203] d1[212613])))
    unknown call_tmp[865164] "expr temp" "maybe param" "maybe type" "temp"
    (865167 'move' call_tmp[865164](495637 call _cond_invalid tmp[495624]))
    if call_tmp[865164]
    {
      (495640 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[691639] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691640] "maybe param" "temp"
    unknown call_tmp[865169] "expr temp" "maybe param" "maybe type" "temp"
    (865172 'move' call_tmp[865169](495625 call isTrue tmp[495624]))
    (691645 'move' tmp[691640](691643 call _cond_test call_tmp[865169]))
    if tmp[691640]
    {
      unknown tmp[691647] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[865176] "expr temp" "maybe param" "maybe type" "temp"
      (865179 'move' call_tmp[865176](212631 call(212628 call (partial) isAssociative _mt[203] d2[212617])))
      (691649 'move' tmp[691647](495628 call isTrue call_tmp[865176]))
      (691654 'move' tmp[691639](691651 '_paramFoldLogical' tmp[691640] tmp[691647]))
    }
    {
      (691659 'move' tmp[691639](691656 '_paramFoldLogical' tmp[691640] 0))
    }
    (1001554 call chpl_statementLevelSymbol tmp[691639])
  }
  function ==[212643](arg d1[212646]:_domain[225034](?), arg d2[212650]:_domain[225034](?)) : _unknown[42] "inline" "operator"
  {
    unknown ret[619661] "RVV" "temp"
    unknown call_tmp[865183] "expr temp" "maybe param" "maybe type" "temp"
    (865186 'move' call_tmp[865183](212672 call _value _mt[203] d1[212646]))
    unknown call_tmp[865190] "expr temp" "maybe param" "maybe type" "temp"
    (865193 'move' call_tmp[865190](212676 call _value _mt[203] d2[212650]))
    unknown call_tmp[865195] "expr temp" "maybe param" "maybe type" "temp"
    (865198 'move' call_tmp[865195](212669 call == call_tmp[865183] call_tmp[865190]))
    unknown call_tmp[865200] "expr temp" "maybe param" "maybe type" "temp"
    (865203 'move' call_tmp[865200](212679 call _cond_test call_tmp[865195]))
    if call_tmp[865200]
    {
      (619666 'move' ret[619661](619665 'deref' 1))
      gotoReturn _end_==[619659] _end_==[619659]
    }
    unknown call_tmp[865207] "expr temp" "maybe param" "maybe type" "temp"
    (865210 'move' call_tmp[865207](212693 call(212690 call (partial) sizeAs _mt[203] d1[212646]) uint(64)[86]))
    unknown call_tmp[865214] "expr temp" "maybe param" "maybe type" "temp"
    (865217 'move' call_tmp[865214](212699 call(212696 call (partial) sizeAs _mt[203] d2[212650]) uint(64)[86]))
    unknown call_tmp[865219] "expr temp" "maybe param" "maybe type" "temp"
    (865222 'move' call_tmp[865219](212687 call != call_tmp[865207] call_tmp[865214]))
    unknown call_tmp[865224] "expr temp" "maybe param" "maybe type" "temp"
    (865227 'move' call_tmp[865224](212701 call _cond_test call_tmp[865219]))
    if call_tmp[865224]
    {
      (619671 'move' ret[619661](619670 'deref' 0))
      gotoReturn _end_==[619659] _end_==[619659]
    }
    unknown call_tmp[865231] "expr temp" "maybe param" "maybe type" "temp"
    (865234 'move' call_tmp[865231](212712 call _value _mt[203] d1[212646]))
    unknown call_tmp[865238] "expr temp" "maybe param" "maybe type" "temp"
    (865241 'move' call_tmp[865238](212715 call parentDom _mt[203] call_tmp[865231]))
    unknown call_tmp[865245] "expr temp" "maybe param" "maybe type" "temp"
    (865248 'move' call_tmp[865245](212719 call _value _mt[203] d2[212650]))
    unknown call_tmp[865252] "expr temp" "maybe param" "maybe type" "temp"
    (865255 'move' call_tmp[865252](212722 call parentDom _mt[203] call_tmp[865245]))
    unknown call_tmp[865257] "expr temp" "maybe param" "maybe type" "temp"
    (865260 'move' call_tmp[865257](212709 call != call_tmp[865238] call_tmp[865252]))
    unknown call_tmp[865262] "expr temp" "maybe param" "maybe type" "temp"
    (865265 'move' call_tmp[865262](212725 call _cond_test call_tmp[865257]))
    if call_tmp[865262]
    {
      (619676 'move' ret[619661](619675 'deref' 0))
      gotoReturn _end_==[619659] _end_==[619659]
    }
    {
      unknown _indexOfInterest[212749] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[212750] "expr temp" "temp"
      (212759 'move' _iterator[212750](212757 call _getIterator d1[212646]))
      Defer
      {
        {
          (212774 call _freeIterator _iterator[212750])
        }
      }
      { scopeless type
        (212764 'move' _indexOfInterest[212749](212761 call iteratorIndex _iterator[212750]))
      }
      ForLoop[212751]
      {
        unknown idx[212730] "index var" "insert auto destroy"
        (559888 'end of statement')
        (212769 'move' idx[212730] _indexOfInterest[212749])
        (559889 'end of statement' idx[212730])
        unknown call_tmp[865269] "expr temp" "maybe param" "maybe type" "temp"
        (865272 'move' call_tmp[865269](212742 call(212739 call (partial) contains _mt[203] d2[212650]) idx[212730]))
        unknown call_tmp[865274] "expr temp" "maybe param" "maybe type" "temp"
        (865277 'move' call_tmp[865274](212736 call ! call_tmp[865269]))
        unknown call_tmp[865279] "expr temp" "maybe param" "maybe type" "temp"
        (865282 'move' call_tmp[865279](212744 call _cond_test call_tmp[865274]))
        if call_tmp[865279]
        {
          (619681 'move' ret[619661](619680 'deref' 0))
          gotoReturn _end_==[619659] _end_==[619659]
        }
        label _continueLabel[212754]
        _indexOfInterest[212749]
        _iterator[212750]
      }
      label _breakLabel[212755]
    }
    (619686 'move' ret[619661](619685 'deref' 1))
    label _end_==[619659]
    (619663 return ret[619661])
  }
  where {
    unknown tmp[495645] "maybe param" "temp"
    (495656 'move' tmp[495645](212659 call(212656 call (partial) isSparse _mt[203] d1[212646])))
    unknown call_tmp[865286] "expr temp" "maybe param" "maybe type" "temp"
    (865289 'move' call_tmp[865286](495658 call _cond_invalid tmp[495645]))
    if call_tmp[865286]
    {
      (495661 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[691666] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691667] "maybe param" "temp"
    unknown call_tmp[865291] "expr temp" "maybe param" "maybe type" "temp"
    (865294 'move' call_tmp[865291](495646 call isTrue tmp[495645]))
    (691672 'move' tmp[691667](691670 call _cond_test call_tmp[865291]))
    if tmp[691667]
    {
      unknown tmp[691674] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[865298] "expr temp" "maybe param" "maybe type" "temp"
      (865301 'move' call_tmp[865298](212664 call(212661 call (partial) isSparse _mt[203] d2[212650])))
      (691676 'move' tmp[691674](495649 call isTrue call_tmp[865298]))
      (691681 'move' tmp[691666](691678 '_paramFoldLogical' tmp[691667] tmp[691674]))
    }
    {
      (691686 'move' tmp[691666](691683 '_paramFoldLogical' tmp[691667] 0))
    }
    (1001556 call chpl_statementLevelSymbol tmp[691666])
  }
  function !=[212786](arg d1[212789]:_domain[225034](?), arg d2[212793]:_domain[225034](?)) : _unknown[42] "inline" "operator"
  {
    unknown ret[619690] "RVV" "temp"
    unknown call_tmp[865303] "expr temp" "maybe param" "maybe type" "temp"
    (865306 'move' call_tmp[865303](212812 call == d1[212789] d2[212793]))
    unknown call_tmp[865308] "expr temp" "maybe param" "maybe type" "temp"
    (865311 'move' call_tmp[865308](212810 call ! call_tmp[865303]))
    (619695 'move' ret[619690](619694 'deref' call_tmp[865308]))
    (619692 return ret[619690])
  }
  where {
    unknown tmp[495666] "maybe param" "temp"
    (495677 'move' tmp[495666](212802 call(212799 call (partial) isSparse _mt[203] d1[212789])))
    unknown call_tmp[865315] "expr temp" "maybe param" "maybe type" "temp"
    (865318 'move' call_tmp[865315](495679 call _cond_invalid tmp[495666]))
    if call_tmp[865315]
    {
      (495682 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[691693] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691694] "maybe param" "temp"
    unknown call_tmp[865320] "expr temp" "maybe param" "maybe type" "temp"
    (865323 'move' call_tmp[865320](495667 call isTrue tmp[495666]))
    (691699 'move' tmp[691694](691697 call _cond_test call_tmp[865320]))
    if tmp[691694]
    {
      unknown tmp[691701] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[865327] "expr temp" "maybe param" "maybe type" "temp"
      (865330 'move' call_tmp[865327](212807 call(212804 call (partial) isSparse _mt[203] d2[212793])))
      (691703 'move' tmp[691701](495670 call isTrue call_tmp[865327]))
      (691708 'move' tmp[691693](691705 '_paramFoldLogical' tmp[691694] tmp[691701]))
    }
    {
      (691713 'move' tmp[691693](691710 '_paramFoldLogical' tmp[691694] 0))
    }
    (1001558 call chpl_statementLevelSymbol tmp[691693])
  }
  function cmpError[212819](arg d1[212821]:_any[141](?), arg d2[212823]:_any[141](?)) : _unknown[42] "private" "no return value for void"
  {
    unknown call_tmp[865334] "expr temp" "maybe param" "maybe type" "temp"
    (865337 'move' call_tmp[865334](212839 call(212836 call (partial) isRectangular _mt[203] d1[212821])))
    unknown call_tmp[865339] "expr temp" "maybe param" "maybe type" "temp"
    (865342 'move' call_tmp[865339](212840 call _cond_test call_tmp[865334]))
    if call_tmp[865339]
    {
      (212827 call compilerError "comparing a rectangular domain against" " an associative or sparse domain is not currently supported")
    }
    unknown call_tmp[865346] "expr temp" "maybe param" "maybe type" "temp"
    (865349 'move' call_tmp[865346](212858 call(212855 call (partial) isAssociative _mt[203] d1[212821])))
    unknown call_tmp[865351] "expr temp" "maybe param" "maybe type" "temp"
    (865354 'move' call_tmp[865351](212859 call _cond_test call_tmp[865346]))
    if call_tmp[865351]
    {
      (212846 call compilerError "comparing an associative domain against" " a rectangular or sparse domain is not currently supported")
    }
    unknown call_tmp[865358] "expr temp" "maybe param" "maybe type" "temp"
    (865361 'move' call_tmp[865358](212877 call(212874 call (partial) isSparse _mt[203] d1[212821])))
    unknown call_tmp[865363] "expr temp" "maybe param" "maybe type" "temp"
    (865366 'move' call_tmp[865363](212878 call _cond_test call_tmp[865358]))
    if call_tmp[865363]
    {
      (212865 call compilerError "comparing a sparse domain against" " a rectangular or associative domain is not currently supported")
    }
    unknown call_tmp[865368] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (865371 'move' call_tmp[865368](212891 'typeof' d1[212821]))
    unknown call_tmp[865373] "expr temp" "maybe param" "maybe type" "temp"
    (865376 'move' call_tmp[865373](212888 call : call_tmp[865368] string[244]))
    unknown call_tmp[865378] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (865381 'move' call_tmp[865378](212899 'typeof' d2[212823]))
    unknown call_tmp[865383] "expr temp" "maybe param" "maybe type" "temp"
    (865386 'move' call_tmp[865383](212896 call : call_tmp[865378] string[244]))
    (212884 call compilerError "comparing '" call_tmp[865373] "' against '" call_tmp[865383] "' is not currently supported")
    (619697 return _void[46])
  }
  function ==[212906](arg d1[212909]:_domain[225034](?), arg d2[212913]:_domain[225034](?)) : _unknown[42] "inline" "operator" "no return value for void"
  {
    (212918 call cmpError d1[212909] d2[212913])
    (619699 return _void[46])
  }
  function !=[212923](arg d1[212926]:_domain[225034](?), arg d2[212930]:_domain[225034](?)) : _unknown[42] "inline" "operator" "no return value for void"
  {
    (212935 call cmpError d1[212926] d2[212930])
    (619701 return _void[46])
  }
  function chpl_sameDomainKind[212940](arg d1[212943]:_domain[225034](?), arg d2[212947]:_domain[225034](?)) param : _unknown[42]
  {
    unknown ret[619705] "RVV" "param" "temp"
    unknown tmp[495687] "maybe param" "temp"
    unknown tmp[495708] "maybe param" "temp"
    unknown tmp[495729] "maybe param" "temp"
    (495740 'move' tmp[495729](212962 call(212959 call (partial) isRectangular _mt[203] d1[212943])))
    unknown call_tmp[865390] "expr temp" "maybe param" "maybe type" "temp"
    (865393 'move' call_tmp[865390](495742 call _cond_invalid tmp[495729]))
    if call_tmp[865390]
    {
      (495745 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[691720] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691721] "maybe param" "temp"
    unknown call_tmp[865395] "expr temp" "maybe param" "maybe type" "temp"
    (865398 'move' call_tmp[865395](495730 call isTrue tmp[495729]))
    (691726 'move' tmp[691721](691724 call _cond_test call_tmp[865395]))
    if tmp[691721]
    {
      unknown tmp[691728] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[865402] "expr temp" "maybe param" "maybe type" "temp"
      (865405 'move' call_tmp[865402](212967 call(212964 call (partial) isRectangular _mt[203] d2[212947])))
      (691730 'move' tmp[691728](495733 call isTrue call_tmp[865402]))
      (691735 'move' tmp[691720](691732 '_paramFoldLogical' tmp[691721] tmp[691728]))
    }
    {
      (691740 'move' tmp[691720](691737 '_paramFoldLogical' tmp[691721] 0))
    }
    (495719 'move' tmp[495708] tmp[691720])
    unknown call_tmp[865407] "expr temp" "maybe param" "maybe type" "temp"
    (865410 'move' call_tmp[865407](495721 call _cond_invalid tmp[495708]))
    if call_tmp[865407]
    {
      (495724 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[691774] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691775] "maybe param" "temp"
    unknown call_tmp[865412] "expr temp" "maybe param" "maybe type" "temp"
    (865415 'move' call_tmp[865412](495709 call isTrue tmp[495708]))
    (691780 'move' tmp[691775](691778 call _cond_test call_tmp[865412]))
    if tmp[691775]
    {
      (691785 'move' tmp[691774](691782 '_paramFoldLogical' tmp[691775] 1))
    }
    {
      unknown tmp[495750] "maybe param" "temp"
      (495761 'move' tmp[495750](212974 call(212971 call (partial) isAssociative _mt[203] d1[212943])))
      unknown call_tmp[865419] "expr temp" "maybe param" "maybe type" "temp"
      (865422 'move' call_tmp[865419](495763 call _cond_invalid tmp[495750]))
      if call_tmp[865419]
      {
        (495766 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[691747] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[691748] "maybe param" "temp"
      unknown call_tmp[865424] "expr temp" "maybe param" "maybe type" "temp"
      (865427 'move' call_tmp[865424](495751 call isTrue tmp[495750]))
      (691753 'move' tmp[691748](691751 call _cond_test call_tmp[865424]))
      if tmp[691748]
      {
        unknown tmp[691755] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[865431] "expr temp" "maybe param" "maybe type" "temp"
        (865434 'move' call_tmp[865431](212979 call(212976 call (partial) isAssociative _mt[203] d2[212947])))
        (691757 'move' tmp[691755](495754 call isTrue call_tmp[865431]))
        (691762 'move' tmp[691747](691759 '_paramFoldLogical' tmp[691748] tmp[691755]))
      }
      {
        (691767 'move' tmp[691747](691764 '_paramFoldLogical' tmp[691748] 0))
      }
      unknown tmp[691787] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (691789 'move' tmp[691787](495713 call isTrue tmp[691747]))
      (691794 'move' tmp[691774](691791 '_paramFoldLogical' tmp[691775] tmp[691787]))
    }
    (495698 'move' tmp[495687] tmp[691774])
    unknown call_tmp[865436] "expr temp" "maybe param" "maybe type" "temp"
    (865439 'move' call_tmp[865436](495700 call _cond_invalid tmp[495687]))
    if call_tmp[865436]
    {
      (495703 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[691828] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691829] "maybe param" "temp"
    unknown call_tmp[865441] "expr temp" "maybe param" "maybe type" "temp"
    (865444 'move' call_tmp[865441](495688 call isTrue tmp[495687]))
    (691834 'move' tmp[691829](691832 call _cond_test call_tmp[865441]))
    if tmp[691829]
    {
      (691839 'move' tmp[691828](691836 '_paramFoldLogical' tmp[691829] 1))
    }
    {
      unknown tmp[495771] "maybe param" "temp"
      (495782 'move' tmp[495771](212986 call(212983 call (partial) isSparse _mt[203] d1[212943])))
      unknown call_tmp[865448] "expr temp" "maybe param" "maybe type" "temp"
      (865451 'move' call_tmp[865448](495784 call _cond_invalid tmp[495771]))
      if call_tmp[865448]
      {
        (495787 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[691801] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[691802] "maybe param" "temp"
      unknown call_tmp[865453] "expr temp" "maybe param" "maybe type" "temp"
      (865456 'move' call_tmp[865453](495772 call isTrue tmp[495771]))
      (691807 'move' tmp[691802](691805 call _cond_test call_tmp[865453]))
      if tmp[691802]
      {
        unknown tmp[691809] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[865460] "expr temp" "maybe param" "maybe type" "temp"
        (865463 'move' call_tmp[865460](212991 call(212988 call (partial) isSparse _mt[203] d2[212947])))
        (691811 'move' tmp[691809](495775 call isTrue call_tmp[865460]))
        (691816 'move' tmp[691801](691813 '_paramFoldLogical' tmp[691802] tmp[691809]))
      }
      {
        (691821 'move' tmp[691801](691818 '_paramFoldLogical' tmp[691802] 0))
      }
      unknown tmp[691841] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (691843 'move' tmp[691841](495692 call isTrue tmp[691801]))
      (691848 'move' tmp[691828](691845 '_paramFoldLogical' tmp[691829] tmp[691841]))
    }
    (619710 'move' ret[619705](619709 'deref' tmp[691828]))
    (619707 return ret[619705])
  }
  function canBeIteratedOver[212994](const  ref arg arg[212996]:_any[141](?)) param : _unknown[42] "private"
  {
    unknown ret[619714] "RVV" "param" "temp"
    unknown tmp[495792] "maybe param" "temp"
    unknown call_tmp[865465] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (865468 'move' call_tmp[865465](213008 'typeof' arg[212996]))
    (495803 'move' tmp[495792](395454 'is_subtype' _iteratorRecord[165](?) call_tmp[865465]))
    unknown call_tmp[865470] "expr temp" "maybe param" "maybe type" "temp"
    (865473 'move' call_tmp[865470](495805 call _cond_invalid tmp[495792]))
    if call_tmp[865470]
    {
      (495808 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[691855] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691856] "maybe param" "temp"
    unknown call_tmp[865475] "expr temp" "maybe param" "maybe type" "temp"
    (865478 'move' call_tmp[865475](495793 call isTrue tmp[495792]))
    (691861 'move' tmp[691856](691859 call _cond_test call_tmp[865475]))
    if tmp[691856]
    {
      (691866 'move' tmp[691855](691863 '_paramFoldLogical' tmp[691856] 1))
    }
    {
      unknown tmp[691868] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[865480] "expr temp" "maybe param" "maybe type" "temp"
      (865483 'move' call_tmp[865480](213011 call canResolveMethod arg[212996] "these"))
      (691870 'move' tmp[691868](495797 call isTrue call_tmp[865480]))
      (691875 'move' tmp[691855](691872 '_paramFoldLogical' tmp[691856] tmp[691868]))
    }
    (619719 'move' ret[619714](619718 'deref' tmp[691855]))
    (619716 return ret[619714])
    (396807 'used modules list'(213000 'use' Reflection[1804]))
  }
  function domainDescription[213018](const  ref arg d[213020]:_any[141](?)) param : _unknown[42] "private"
  {
    unknown ret[619723] "RVV" "param" "temp"
    unknown tmp[691909] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691910] "maybe param" "temp"
    unknown call_tmp[865487] "expr temp" "maybe param" "maybe type" "temp"
    (865490 'move' call_tmp[865487](213028 call(213025 call (partial) isRectangular _mt[203] d[213020])))
    (691915 'move' tmp[691910](691913 call _cond_test call_tmp[865487]))
    if tmp[691910]
    {
      unknown tmp[691917] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[865494] "expr temp" "maybe param" "maybe type" "temp"
      (865497 'move' call_tmp[865494](213039 call rank _mt[203] d[213020]))
      unknown call_tmp[865499] "expr temp" "maybe param" "maybe type" "temp"
      (865502 'move' call_tmp[865499](213036 call : call_tmp[865494] string[244]))
      unknown call_tmp[865504] "expr temp" "maybe param" "maybe type" "temp"
      (865507 'move' call_tmp[865504](213031 call + "a rectangular " call_tmp[865499]))
      (691919 'move' tmp[691917](213029 call + call_tmp[865504] "-dim domain"))
      (691924 'move' tmp[691909](691921 '_paramFoldLogical' tmp[691910] tmp[691917]))
    }
    {
      unknown tmp[691882] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[691883] "maybe param" "temp"
      unknown call_tmp[865511] "expr temp" "maybe param" "maybe type" "temp"
      (865514 'move' call_tmp[865511](213050 call(213047 call (partial) isSparse _mt[203] d[213020])))
      (691888 'move' tmp[691883](691886 call _cond_test call_tmp[865511]))
      if tmp[691883]
      {
        unknown tmp[691890] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[865518] "expr temp" "maybe param" "maybe type" "temp"
        (865521 'move' call_tmp[865518](213061 call rank _mt[203] d[213020]))
        unknown call_tmp[865523] "expr temp" "maybe param" "maybe type" "temp"
        (865526 'move' call_tmp[865523](213058 call : call_tmp[865518] string[244]))
        unknown call_tmp[865528] "expr temp" "maybe param" "maybe type" "temp"
        (865531 'move' call_tmp[865528](213053 call + "a sparse " call_tmp[865523]))
        (691892 'move' tmp[691890](213051 call + call_tmp[865528] "-dim domain"))
        (691897 'move' tmp[691882](691894 '_paramFoldLogical' tmp[691883] tmp[691890]))
      }
      {
        (691902 'move' tmp[691882](691899 '_paramFoldLogical' tmp[691883] "an associative domain"))
      }
      (691929 'move' tmp[691909](691926 '_paramFoldLogical' tmp[691910] tmp[691882]))
    }
    (619728 'move' ret[619723](619727 'deref' tmp[691909]))
    (619725 return ret[619723])
  }
  function -[213077](arg a[213080]:_domain[225034](?), arg b[213084]:_domain[225034](?)) : _unknown[42] "operator" "@unstable"
  {
    unknown ret[619732] "RVV" "temp"
    unknown newDom[213102] "dead at end of block" "insert auto destroy"
    unknown call_tmp[865533] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (865536 'move' call_tmp[865533](213104 'typeof' a[213080]))
    (649345 'default init var' newDom[213102] call_tmp[865533])
    (213106 'end of statement')
    {
      unknown call_tmp[865538] "maybe param" "maybe type" "temp"
      (865541 'move' call_tmp[865538](213154 'task_get_serial'))
      unknown tmp[213153] "dead at end of block" "insert auto destroy" "temp"
      (649347 'init var' tmp[213153] call_tmp[865538])
      unknown call_tmp[865545] "expr temp" "maybe param" "maybe type" "temp"
      (865548 'move' call_tmp[865545](213144 call _value _mt[203] newDom[213102]))
      unknown call_tmp[865552] "expr temp" "maybe param" "maybe type" "temp"
      (865555 'move' call_tmp[865552](213147 call parSafe _mt[203] call_tmp[865545]))
      unknown call_tmp[865557] "expr temp" "maybe param" "maybe type" "temp"
      (865560 'move' call_tmp[865557](213141 call ! call_tmp[865552]))
      unknown call_tmp[865562] "expr temp" "maybe param" "maybe type" "temp"
      (865565 'move' call_tmp[865562](213150 call _cond_test call_tmp[865557]))
      if call_tmp[865562]
      {
        (213156 'task_set_serial' 1)
      }
      Defer
      {
        {
          (213160 'task_set_serial' tmp[213153])
        }
      }
      Forall[213138] {
        induction variables:
          
          unknown e[213107] "index var" "insert auto destroy"
        iterated expressions:
          a[213080]
        shadow variables:
          newDom[213112] 'ref' intent outer var newDom[213102]
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          unknown call_tmp[865569] "expr temp" "maybe param" "maybe type" "temp"
          (865572 'move' call_tmp[865569](213129 call(213126 call (partial) contains _mt[203] b[213084]) e[213107]))
          unknown call_tmp[865574] "expr temp" "maybe param" "maybe type" "temp"
          (865577 'move' call_tmp[865574](213123 call ! call_tmp[865569]))
          unknown call_tmp[865579] "expr temp" "maybe param" "maybe type" "temp"
          (865582 'move' call_tmp[865579](213131 call _cond_test call_tmp[865574]))
          if call_tmp[865579]
          {
            (213120 call(213117 call (partial) add _mt[203] newDom[213112]) e[213107])
            (559909 'end of statement' newDom[213112] e[213107])
          }
        }
      }
    }
    (619737 'move' ret[619732](619736 'deref' newDom[213102]))
    gotoReturn _end_-[619730] _end_-[619730]
    (559912 'end of statement' newDom[213102])
    label _end_-[619730]
    (619734 return ret[619732])
  }
  where {
    unknown tmp[495813] "maybe param" "temp"
    unknown call_tmp[865586] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (865589 'move' call_tmp[865586](213092 'typeof' a[213080]))
    unknown call_tmp[865591] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (865594 'move' call_tmp[865591](213094 'typeof' b[213084]))
    (495824 'move' tmp[495813](213089 call == call_tmp[865586] call_tmp[865591]))
    unknown call_tmp[865596] "expr temp" "maybe param" "maybe type" "temp"
    (865599 'move' call_tmp[865596](495826 call _cond_invalid tmp[495813]))
    if call_tmp[865596]
    {
      (495829 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[691936] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691937] "maybe param" "temp"
    unknown call_tmp[865601] "expr temp" "maybe param" "maybe type" "temp"
    (865604 'move' call_tmp[865601](495814 call isTrue tmp[495813]))
    (691942 'move' tmp[691937](691940 call _cond_test call_tmp[865601]))
    if tmp[691937]
    {
      unknown tmp[691944] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[865608] "expr temp" "maybe param" "maybe type" "temp"
      (865611 'move' call_tmp[865608](213099 call(213096 call (partial) isAssociative _mt[203] a[213080])))
      (691946 'move' tmp[691944](495817 call isTrue call_tmp[865608]))
      (691951 'move' tmp[691936](691948 '_paramFoldLogical' tmp[691937] tmp[691944]))
    }
    {
      (691956 'move' tmp[691936](691953 '_paramFoldLogical' tmp[691937] 0))
    }
    (1001560 call chpl_statementLevelSymbol tmp[691936])
  }
  function -=[213169](ref arg a[213172]:_domain[225034](?), arg b[213176]:_domain[225034](?)) : _unknown[42] "assignop" "operator" "@unstable" "no return value for void"
  {
    {
      unknown _indexOfInterest[213214] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[213215] "expr temp" "temp"
      (213224 'move' _iterator[213215](213222 call _getIterator b[213176]))
      Defer
      {
        {
          (213239 call _freeIterator _iterator[213215])
        }
      }
      { scopeless type
        (213229 'move' _indexOfInterest[213214](213226 call iteratorIndex _iterator[213215]))
      }
      ForLoop[213216]
      {
        unknown e[213193] "index var" "insert auto destroy"
        (559915 'end of statement')
        (213234 'move' e[213193] _indexOfInterest[213214])
        (559916 'end of statement' e[213193])
        unknown call_tmp[865615] "expr temp" "maybe param" "maybe type" "temp"
        (865618 'move' call_tmp[865615](213207 call(213204 call (partial) contains _mt[203] a[213172]) e[213193]))
        unknown call_tmp[865620] "expr temp" "maybe param" "maybe type" "temp"
        (865623 'move' call_tmp[865620](213209 call _cond_test call_tmp[865615]))
        if call_tmp[865620]
        {
          (213200 call(213197 call (partial) remove _mt[203] a[213172]) e[213193])
          (559918 'end of statement' e[213193])
        }
        label _continueLabel[213219]
        _indexOfInterest[213214]
        _iterator[213215]
      }
      label _breakLabel[213220]
    }
    (619741 return _void[46])
  }
  where {
    unknown tmp[495834] "maybe param" "temp"
    unknown call_tmp[865627] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (865630 'move' call_tmp[865627](213184 'typeof' a[213172]))
    unknown call_tmp[865632] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (865635 'move' call_tmp[865632](213186 'typeof' b[213176]))
    (495845 'move' tmp[495834](213181 call == call_tmp[865627] call_tmp[865632]))
    unknown call_tmp[865637] "expr temp" "maybe param" "maybe type" "temp"
    (865640 'move' call_tmp[865637](495847 call _cond_invalid tmp[495834]))
    if call_tmp[865637]
    {
      (495850 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[691963] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691964] "maybe param" "temp"
    unknown call_tmp[865642] "expr temp" "maybe param" "maybe type" "temp"
    (865645 'move' call_tmp[865642](495835 call isTrue tmp[495834]))
    (691969 'move' tmp[691964](691967 call _cond_test call_tmp[865642]))
    if tmp[691964]
    {
      unknown tmp[691971] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[865649] "expr temp" "maybe param" "maybe type" "temp"
      (865652 'move' call_tmp[865649](213191 call(213188 call (partial) isAssociative _mt[203] a[213172])))
      (691973 'move' tmp[691971](495838 call isTrue call_tmp[865649]))
      (691978 'move' tmp[691963](691975 '_paramFoldLogical' tmp[691964] tmp[691971]))
    }
    {
      (691983 'move' tmp[691963](691980 '_paramFoldLogical' tmp[691964] 0))
    }
    (1001562 call chpl_statementLevelSymbol tmp[691963])
  }
  function |[213249](arg a[213252]:_domain[225034](?), arg b[213256]:_domain[225034](?)) : _unknown[42] "operator" "@unstable"
  {
    unknown ret[619745] "RVV" "temp"
    unknown call_tmp[865654] "expr temp" "maybe param" "maybe type" "temp"
    (865657 'move' call_tmp[865654](213274 call + a[213252] b[213256]))
    (619750 'move' ret[619745](619749 'deref' call_tmp[865654]))
    (619747 return ret[619745])
  }
  where {
    unknown tmp[495855] "maybe param" "temp"
    unknown call_tmp[865659] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (865662 'move' call_tmp[865659](213264 'typeof' a[213252]))
    unknown call_tmp[865664] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (865667 'move' call_tmp[865664](213266 'typeof' b[213256]))
    (495866 'move' tmp[495855](213261 call == call_tmp[865659] call_tmp[865664]))
    unknown call_tmp[865669] "expr temp" "maybe param" "maybe type" "temp"
    (865672 'move' call_tmp[865669](495868 call _cond_invalid tmp[495855]))
    if call_tmp[865669]
    {
      (495871 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[691990] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691991] "maybe param" "temp"
    unknown call_tmp[865674] "expr temp" "maybe param" "maybe type" "temp"
    (865677 'move' call_tmp[865674](495856 call isTrue tmp[495855]))
    (691996 'move' tmp[691991](691994 call _cond_test call_tmp[865674]))
    if tmp[691991]
    {
      unknown tmp[691998] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[865681] "expr temp" "maybe param" "maybe type" "temp"
      (865684 'move' call_tmp[865681](213271 call(213268 call (partial) isAssociative _mt[203] a[213252])))
      (692000 'move' tmp[691998](495859 call isTrue call_tmp[865681]))
      (692005 'move' tmp[691990](692002 '_paramFoldLogical' tmp[691991] tmp[691998]))
    }
    {
      (692010 'move' tmp[691990](692007 '_paramFoldLogical' tmp[691991] 0))
    }
    (1001564 call chpl_statementLevelSymbol tmp[691990])
  }
  function |=[213281](ref arg a[213284]:_domain[225034](?), arg b[213288]:_domain[225034](?)) : _unknown[42] "assignop" "operator" "@unstable" "no return value for void"
  {
    {
      unknown _indexOfInterest[213315] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[213316] "expr temp" "temp"
      (213325 'move' _iterator[213316](213323 call _getIterator b[213288]))
      Defer
      {
        {
          (213340 call _freeIterator _iterator[213316])
        }
      }
      { scopeless type
        (213330 'move' _indexOfInterest[213315](213327 call iteratorIndex _iterator[213316]))
      }
      ForLoop[213317]
      {
        unknown e[213305] "index var" "insert auto destroy"
        (559922 'end of statement')
        (213335 'move' e[213305] _indexOfInterest[213315])
        (559923 'end of statement' e[213305])
        (213312 call(213309 call (partial) add _mt[203] a[213284]) e[213305])
        (559925 'end of statement' e[213305])
        label _continueLabel[213320]
        _indexOfInterest[213315]
        _iterator[213316]
      }
      label _breakLabel[213321]
    }
    (619752 return _void[46])
  }
  where {
    unknown tmp[495876] "maybe param" "temp"
    unknown call_tmp[865688] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (865691 'move' call_tmp[865688](213296 'typeof' a[213284]))
    unknown call_tmp[865693] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (865696 'move' call_tmp[865693](213298 'typeof' b[213288]))
    (495887 'move' tmp[495876](213293 call == call_tmp[865688] call_tmp[865693]))
    unknown call_tmp[865698] "expr temp" "maybe param" "maybe type" "temp"
    (865701 'move' call_tmp[865698](495889 call _cond_invalid tmp[495876]))
    if call_tmp[865698]
    {
      (495892 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[692017] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692018] "maybe param" "temp"
    unknown call_tmp[865703] "expr temp" "maybe param" "maybe type" "temp"
    (865706 'move' call_tmp[865703](495877 call isTrue tmp[495876]))
    (692023 'move' tmp[692018](692021 call _cond_test call_tmp[865703]))
    if tmp[692018]
    {
      unknown tmp[692025] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[865710] "expr temp" "maybe param" "maybe type" "temp"
      (865713 'move' call_tmp[865710](213303 call(213300 call (partial) isAssociative _mt[203] a[213284])))
      (692027 'move' tmp[692025](495880 call isTrue call_tmp[865710]))
      (692032 'move' tmp[692017](692029 '_paramFoldLogical' tmp[692018] tmp[692025]))
    }
    {
      (692037 'move' tmp[692017](692034 '_paramFoldLogical' tmp[692018] 0))
    }
    (1001566 call chpl_statementLevelSymbol tmp[692017])
  }
  function |=[213350](arg a[213353]:_domain[225034](?), arg b[213357]:_domain[225034](?)) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    (213367 call compilerError "cannot invoke '|=' on a rectangular domain")
    (619754 return _void[46])
  }
  where {
    (213364 call(213361 call (partial) isRectangular _mt[203] a[213353]))
  }
  function +=[213374](ref arg a[213377]:_domain[225034](?), arg b[213381]:_domain[225034](?)) : _unknown[42] "assignop" "operator" "@unstable" "no return value for void"
  {
    (213398 call |= a[213377] b[213381])
    (619756 return _void[46])
  }
  where {
    unknown tmp[495897] "maybe param" "temp"
    unknown call_tmp[865717] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (865720 'move' call_tmp[865717](213389 'typeof' a[213377]))
    unknown call_tmp[865722] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (865725 'move' call_tmp[865722](213391 'typeof' b[213381]))
    (495908 'move' tmp[495897](213386 call == call_tmp[865717] call_tmp[865722]))
    unknown call_tmp[865727] "expr temp" "maybe param" "maybe type" "temp"
    (865730 'move' call_tmp[865727](495910 call _cond_invalid tmp[495897]))
    if call_tmp[865727]
    {
      (495913 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[692044] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692045] "maybe param" "temp"
    unknown call_tmp[865732] "expr temp" "maybe param" "maybe type" "temp"
    (865735 'move' call_tmp[865732](495898 call isTrue tmp[495897]))
    (692050 'move' tmp[692045](692048 call _cond_test call_tmp[865732]))
    if tmp[692045]
    {
      unknown tmp[692052] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[865739] "expr temp" "maybe param" "maybe type" "temp"
      (865742 'move' call_tmp[865739](213396 call(213393 call (partial) isAssociative _mt[203] a[213377])))
      (692054 'move' tmp[692052](495901 call isTrue call_tmp[865739]))
      (692059 'move' tmp[692044](692056 '_paramFoldLogical' tmp[692045] tmp[692052]))
    }
    {
      (692064 'move' tmp[692044](692061 '_paramFoldLogical' tmp[692045] 0))
    }
    (1001568 call chpl_statementLevelSymbol tmp[692044])
  }
  function &[213405](arg a[213408]:_domain[225034](?), arg b[213412]:_domain[225034](?)) : _unknown[42] "operator" "@unstable"
  {
    unknown ret[619760] "RVV" "temp"
    unknown newDom[213430] "dead at end of block" "insert auto destroy"
    unknown call_tmp[865744] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (865747 'move' call_tmp[865744](213432 'typeof' a[213408]))
    (649349 'default init var' newDom[213430] call_tmp[865744])
    (213434 'end of statement')
    {
      unknown call_tmp[865749] "maybe param" "maybe type" "temp"
      (865752 'move' call_tmp[865749](213478 'task_get_serial'))
      unknown tmp[213477] "dead at end of block" "insert auto destroy" "temp"
      (649351 'init var' tmp[213477] call_tmp[865749])
      unknown call_tmp[865756] "expr temp" "maybe param" "maybe type" "temp"
      (865759 'move' call_tmp[865756](213468 call _value _mt[203] newDom[213430]))
      unknown call_tmp[865763] "expr temp" "maybe param" "maybe type" "temp"
      (865766 'move' call_tmp[865763](213471 call parSafe _mt[203] call_tmp[865756]))
      unknown call_tmp[865768] "expr temp" "maybe param" "maybe type" "temp"
      (865771 'move' call_tmp[865768](213465 call ! call_tmp[865763]))
      unknown call_tmp[865773] "expr temp" "maybe param" "maybe type" "temp"
      (865776 'move' call_tmp[865773](213474 call _cond_test call_tmp[865768]))
      if call_tmp[865773]
      {
        (213480 'task_set_serial' 1)
      }
      Defer
      {
        {
          (213484 'task_set_serial' tmp[213477])
        }
      }
      Forall[213462] {
        induction variables:
          
          unknown k[213435] "index var" "insert auto destroy"
        iterated expressions:
          a[213408]
        shadow variables:
          newDom[213440] 'ref' intent outer var newDom[213430]
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          unknown call_tmp[865780] "expr temp" "maybe param" "maybe type" "temp"
          (865783 'move' call_tmp[865780](213453 call(213450 call (partial) contains _mt[203] b[213412]) k[213435]))
          unknown call_tmp[865785] "expr temp" "maybe param" "maybe type" "temp"
          (865788 'move' call_tmp[865785](213455 call _cond_test call_tmp[865780]))
          if call_tmp[865785]
          {
            (213444 call += newDom[213440] k[213435])
            (559931 'end of statement' newDom[213440] k[213435])
          }
        }
      }
    }
    (619765 'move' ret[619760](619764 'deref' newDom[213430]))
    gotoReturn _end_&[619758] _end_&[619758]
    (559934 'end of statement' newDom[213430])
    label _end_&[619758]
    (619762 return ret[619760])
  }
  where {
    unknown tmp[495918] "maybe param" "temp"
    unknown call_tmp[865790] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (865793 'move' call_tmp[865790](213420 'typeof' a[213408]))
    unknown call_tmp[865795] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (865798 'move' call_tmp[865795](213422 'typeof' b[213412]))
    (495929 'move' tmp[495918](213417 call == call_tmp[865790] call_tmp[865795]))
    unknown call_tmp[865800] "expr temp" "maybe param" "maybe type" "temp"
    (865803 'move' call_tmp[865800](495931 call _cond_invalid tmp[495918]))
    if call_tmp[865800]
    {
      (495934 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[692071] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692072] "maybe param" "temp"
    unknown call_tmp[865805] "expr temp" "maybe param" "maybe type" "temp"
    (865808 'move' call_tmp[865805](495919 call isTrue tmp[495918]))
    (692077 'move' tmp[692072](692075 call _cond_test call_tmp[865805]))
    if tmp[692072]
    {
      unknown tmp[692079] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[865812] "expr temp" "maybe param" "maybe type" "temp"
      (865815 'move' call_tmp[865812](213427 call(213424 call (partial) isAssociative _mt[203] a[213408])))
      (692081 'move' tmp[692079](495922 call isTrue call_tmp[865812]))
      (692086 'move' tmp[692071](692083 '_paramFoldLogical' tmp[692072] tmp[692079]))
    }
    {
      (692091 'move' tmp[692071](692088 '_paramFoldLogical' tmp[692072] 0))
    }
    (1001570 call chpl_statementLevelSymbol tmp[692071])
  }
  function &=[213493](ref arg a[213496]:_domain[225034](?), arg b[213500]:_domain[225034](?)) : _unknown[42] "assignop" "operator" "@unstable" "no return value for void"
  {
    unknown removeSet[213518] "dead at end of block" "insert auto destroy"
    unknown call_tmp[865819] "expr temp" "maybe param" "maybe type" "temp"
    (865822 'move' call_tmp[865819](213523 call idxType _mt[203] a[213496]))
    unknown call_tmp[865824] "expr temp" "maybe param" "maybe type" "temp"
    (865827 'move' call_tmp[865824](213520 call chpl__buildDomainRuntimeType defaultDist[288287] call_tmp[865819]))
    (649353 'default init var' removeSet[213518] call_tmp[865824])
    (213527 'end of statement')
    {
      unknown _indexOfInterest[213549] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[213550] "expr temp" "temp"
      (213559 'move' _iterator[213550](213557 call _getIterator a[213496]))
      Defer
      {
        {
          (213574 call _freeIterator _iterator[213550])
        }
      }
      { scopeless type
        (213564 'move' _indexOfInterest[213549](213561 call iteratorIndex _iterator[213550]))
      }
      ForLoop[213551]
      {
        unknown e[213528] "index var" "insert auto destroy"
        (559937 'end of statement')
        (213569 'move' e[213528] _indexOfInterest[213549])
        (559938 'end of statement' e[213528])
        unknown call_tmp[865831] "expr temp" "maybe param" "maybe type" "temp"
        (865834 'move' call_tmp[865831](213542 call(213539 call (partial) contains _mt[203] b[213500]) e[213528]))
        unknown call_tmp[865836] "expr temp" "maybe param" "maybe type" "temp"
        (865839 'move' call_tmp[865836](213536 call ! call_tmp[865831]))
        unknown call_tmp[865841] "expr temp" "maybe param" "maybe type" "temp"
        (865844 'move' call_tmp[865841](213544 call _cond_test call_tmp[865836]))
        if call_tmp[865841]
        {
          (213531 call += removeSet[213518] e[213528])
          (559940 'end of statement' removeSet[213518] e[213528])
        }
        label _continueLabel[213554]
        _indexOfInterest[213549]
        _iterator[213550]
      }
      label _breakLabel[213555]
    }
    {
      unknown _indexOfInterest[213591] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[213592] "expr temp" "temp"
      (213601 'move' _iterator[213592](213599 call _getIterator removeSet[213518]))
      Defer
      {
        {
          (213616 call _freeIterator _iterator[213592])
        }
      }
      { scopeless type
        (213606 'move' _indexOfInterest[213591](213603 call iteratorIndex _iterator[213592]))
      }
      ForLoop[213593]
      {
        unknown e[213581] "index var" "insert auto destroy"
        (559944 'end of statement')
        (213611 'move' e[213581] _indexOfInterest[213591])
        (559945 'end of statement' e[213581])
        (213588 call(213585 call (partial) remove _mt[203] a[213496]) e[213581])
        (559947 'end of statement' e[213581])
        label _continueLabel[213596]
        _indexOfInterest[213591]
        _iterator[213592]
      }
      label _breakLabel[213597]
    }
    (619769 return _void[46])
  }
  where {
    unknown tmp[495939] "maybe param" "temp"
    unknown call_tmp[865848] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (865851 'move' call_tmp[865848](213508 'typeof' a[213496]))
    unknown call_tmp[865853] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (865856 'move' call_tmp[865853](213510 'typeof' b[213500]))
    (495950 'move' tmp[495939](213505 call == call_tmp[865848] call_tmp[865853]))
    unknown call_tmp[865858] "expr temp" "maybe param" "maybe type" "temp"
    (865861 'move' call_tmp[865858](495952 call _cond_invalid tmp[495939]))
    if call_tmp[865858]
    {
      (495955 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[692098] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692099] "maybe param" "temp"
    unknown call_tmp[865863] "expr temp" "maybe param" "maybe type" "temp"
    (865866 'move' call_tmp[865863](495940 call isTrue tmp[495939]))
    (692104 'move' tmp[692099](692102 call _cond_test call_tmp[865863]))
    if tmp[692099]
    {
      unknown tmp[692106] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[865870] "expr temp" "maybe param" "maybe type" "temp"
      (865873 'move' call_tmp[865870](213515 call(213512 call (partial) isAssociative _mt[203] a[213496])))
      (692108 'move' tmp[692106](495943 call isTrue call_tmp[865870]))
      (692113 'move' tmp[692098](692110 '_paramFoldLogical' tmp[692099] tmp[692106]))
    }
    {
      (692118 'move' tmp[692098](692115 '_paramFoldLogical' tmp[692099] 0))
    }
    (1001572 call chpl_statementLevelSymbol tmp[692098])
  }
  function &=[213626](arg a[213629]:_domain[225034](?), arg b[213633]:_domain[225034](?)) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    (213643 call compilerError "cannot invoke '&=' on a rectangular domain")
    (619771 return _void[46])
  }
  where {
    (213640 call(213637 call (partial) isRectangular _mt[203] a[213629]))
  }
  function ^[213650](arg a[213653]:_domain[225034](?), arg b[213657]:_domain[225034](?)) : _unknown[42] "operator" "@unstable"
  {
    unknown ret[619775] "RVV" "temp"
    unknown newDom[213675] "dead at end of block" "insert auto destroy"
    unknown call_tmp[865877] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (865880 'move' call_tmp[865877](213677 'typeof' a[213653]))
    (649355 'default init var' newDom[213675] call_tmp[865877])
    (213679 'end of statement')
    {
      unknown call_tmp[865882] "maybe param" "maybe type" "temp"
      (865885 'move' call_tmp[865882](213762 'task_get_serial'))
      unknown tmp[213761] "dead at end of block" "insert auto destroy" "temp"
      (649357 'init var' tmp[213761] call_tmp[865882])
      unknown call_tmp[865889] "expr temp" "maybe param" "maybe type" "temp"
      (865892 'move' call_tmp[865889](213752 call _value _mt[203] newDom[213675]))
      unknown call_tmp[865896] "expr temp" "maybe param" "maybe type" "temp"
      (865899 'move' call_tmp[865896](213755 call parSafe _mt[203] call_tmp[865889]))
      unknown call_tmp[865901] "expr temp" "maybe param" "maybe type" "temp"
      (865904 'move' call_tmp[865901](213749 call ! call_tmp[865896]))
      unknown call_tmp[865906] "expr temp" "maybe param" "maybe type" "temp"
      (865909 'move' call_tmp[865906](213758 call _cond_test call_tmp[865901]))
      if call_tmp[865906]
      {
        (213764 'task_set_serial' 1)
      }
      Defer
      {
        {
          (213768 'task_set_serial' tmp[213761])
        }
      }
      {
        Forall[213712] {
          induction variables:
            
            unknown k[213681] "index var" "insert auto destroy"
          iterated expressions:
            a[213653]
          shadow variables:
            newDom[213686] 'ref' intent outer var newDom[213675]
              init block
              {
              }
              deinit block
              {
              }
          other variables
            forall body
          {
            unknown call_tmp[865913] "expr temp" "maybe param" "maybe type" "temp"
            (865916 'move' call_tmp[865913](213703 call(213700 call (partial) contains _mt[203] b[213657]) k[213681]))
            unknown call_tmp[865918] "expr temp" "maybe param" "maybe type" "temp"
            (865921 'move' call_tmp[865918](213697 call ! call_tmp[865913]))
            unknown call_tmp[865923] "expr temp" "maybe param" "maybe type" "temp"
            (865926 'move' call_tmp[865923](213705 call _cond_test call_tmp[865918]))
            if call_tmp[865923]
            {
              (213694 call(213691 call (partial) add _mt[203] newDom[213686]) k[213681])
              (559952 'end of statement' newDom[213686] k[213681])
            }
          }
        }
        Forall[213746] {
          induction variables:
            
            unknown k[213715] "index var" "insert auto destroy"
          iterated expressions:
            b[213657]
          shadow variables:
            newDom[213720] 'ref' intent outer var newDom[213675]
              init block
              {
              }
              deinit block
              {
              }
          other variables
            forall body
          {
            unknown call_tmp[865932] "expr temp" "maybe param" "maybe type" "temp"
            (865935 'move' call_tmp[865932](213737 call(213734 call (partial) contains _mt[203] a[213653]) k[213715]))
            unknown call_tmp[865937] "expr temp" "maybe param" "maybe type" "temp"
            (865940 'move' call_tmp[865937](213731 call ! call_tmp[865932]))
            unknown call_tmp[865942] "expr temp" "maybe param" "maybe type" "temp"
            (865945 'move' call_tmp[865942](213739 call _cond_test call_tmp[865937]))
            if call_tmp[865942]
            {
              (213728 call(213725 call (partial) add _mt[203] newDom[213720]) k[213715])
              (559955 'end of statement' newDom[213720] k[213715])
            }
          }
        }
      }
    }
    (619780 'move' ret[619775](619779 'deref' newDom[213675]))
    gotoReturn _end_^[619773] _end_^[619773]
    (559958 'end of statement' newDom[213675])
    label _end_^[619773]
    (619777 return ret[619775])
  }
  where {
    unknown tmp[495960] "maybe param" "temp"
    unknown call_tmp[865949] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (865952 'move' call_tmp[865949](213665 'typeof' a[213653]))
    unknown call_tmp[865954] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (865957 'move' call_tmp[865954](213667 'typeof' b[213657]))
    (495971 'move' tmp[495960](213662 call == call_tmp[865949] call_tmp[865954]))
    unknown call_tmp[865959] "expr temp" "maybe param" "maybe type" "temp"
    (865962 'move' call_tmp[865959](495973 call _cond_invalid tmp[495960]))
    if call_tmp[865959]
    {
      (495976 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[692125] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692126] "maybe param" "temp"
    unknown call_tmp[865964] "expr temp" "maybe param" "maybe type" "temp"
    (865967 'move' call_tmp[865964](495961 call isTrue tmp[495960]))
    (692131 'move' tmp[692126](692129 call _cond_test call_tmp[865964]))
    if tmp[692126]
    {
      unknown tmp[692133] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[865971] "expr temp" "maybe param" "maybe type" "temp"
      (865974 'move' call_tmp[865971](213672 call(213669 call (partial) isAssociative _mt[203] a[213653])))
      (692135 'move' tmp[692133](495964 call isTrue call_tmp[865971]))
      (692140 'move' tmp[692125](692137 '_paramFoldLogical' tmp[692126] tmp[692133]))
    }
    {
      (692145 'move' tmp[692125](692142 '_paramFoldLogical' tmp[692126] 0))
    }
    (1001574 call chpl_statementLevelSymbol tmp[692125])
  }
  function ^=[213777](ref arg a[213780]:_domain[225034](?), arg b[213784]:_domain[225034](?)) : _unknown[42] "assignop" "operator" "@unstable" "no return value for void"
  {
    {
      unknown _indexOfInterest[213830] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[213831] "expr temp" "temp"
      (213840 'move' _iterator[213831](213838 call _getIterator b[213784]))
      Defer
      {
        {
          (213855 call _freeIterator _iterator[213831])
        }
      }
      { scopeless type
        (213845 'move' _indexOfInterest[213830](213842 call iteratorIndex _iterator[213831]))
      }
      ForLoop[213832]
      {
        unknown e[213801] "index var" "insert auto destroy"
        (559961 'end of statement')
        (213850 'move' e[213801] _indexOfInterest[213830])
        (559962 'end of statement' e[213801])
        unknown call_tmp[865978] "expr temp" "maybe param" "maybe type" "temp"
        (865981 'move' call_tmp[865978](213822 call(213819 call (partial) contains _mt[203] a[213780]) e[213801]))
        unknown call_tmp[865983] "expr temp" "maybe param" "maybe type" "temp"
        (865986 'move' call_tmp[865983](213824 call _cond_test call_tmp[865978]))
        if call_tmp[865983]
        {
          (213808 call(213805 call (partial) remove _mt[203] a[213780]) e[213801])
          (559964 'end of statement' e[213801])
        }
        {
          (213815 call(213812 call (partial) add _mt[203] a[213780]) e[213801])
          (559966 'end of statement' e[213801])
        }
        label _continueLabel[213835]
        _indexOfInterest[213830]
        _iterator[213831]
      }
      label _breakLabel[213836]
    }
    (619784 return _void[46])
  }
  where {
    unknown tmp[495981] "maybe param" "temp"
    unknown call_tmp[865992] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (865995 'move' call_tmp[865992](213792 'typeof' a[213780]))
    unknown call_tmp[865997] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (866000 'move' call_tmp[865997](213794 'typeof' b[213784]))
    (495992 'move' tmp[495981](213789 call == call_tmp[865992] call_tmp[865997]))
    unknown call_tmp[866002] "expr temp" "maybe param" "maybe type" "temp"
    (866005 'move' call_tmp[866002](495994 call _cond_invalid tmp[495981]))
    if call_tmp[866002]
    {
      (495997 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[692152] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692153] "maybe param" "temp"
    unknown call_tmp[866007] "expr temp" "maybe param" "maybe type" "temp"
    (866010 'move' call_tmp[866007](495982 call isTrue tmp[495981]))
    (692158 'move' tmp[692153](692156 call _cond_test call_tmp[866007]))
    if tmp[692153]
    {
      unknown tmp[692160] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[866014] "expr temp" "maybe param" "maybe type" "temp"
      (866017 'move' call_tmp[866014](213799 call(213796 call (partial) isAssociative _mt[203] a[213780])))
      (692162 'move' tmp[692160](495985 call isTrue call_tmp[866014]))
      (692167 'move' tmp[692152](692164 '_paramFoldLogical' tmp[692153] tmp[692160]))
    }
    {
      (692172 'move' tmp[692152](692169 '_paramFoldLogical' tmp[692153] 0))
    }
    (1001576 call chpl_statementLevelSymbol tmp[692152])
  }
  function ^=[213865](arg a[213868]:_domain[225034](?), arg b[213872]:_domain[225034](?)) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    (213882 call compilerError "cannot invoke '^=' on a rectangular domain")
    (619786 return _void[46])
  }
  where {
    (213879 call(213876 call (partial) isRectangular _mt[203] a[213868]))
  }
  function +=[213889](ref arg sd[213892]:_domain[225034](?), arg inds[213901]:_array[255540](?)) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    unknown call_tmp[866023] "expr temp" "maybe param" "maybe type" "temp"
    (866026 'move' call_tmp[866023](213918 call(213915 call (partial) sizeAs _mt[203] inds[213901]) int(64)[10]))
    unknown call_tmp[866028] "expr temp" "maybe param" "maybe type" "temp"
    (866031 'move' call_tmp[866028](213912 call == call_tmp[866023] 0))
    unknown call_tmp[866033] "expr temp" "maybe param" "maybe type" "temp"
    (866036 'move' call_tmp[866033](213921 call _cond_test call_tmp[866028]))
    if call_tmp[866033]
    {
      gotoReturn _end_+=[619788] _end_+=[619788]
    }
    unknown call_tmp[866040] "expr temp" "maybe param" "maybe type" "temp"
    (866043 'move' call_tmp[866040](213927 call _value _mt[203] sd[213892]))
    (213935 call(213932 call (partial) dsiBulkAdd _mt[203] call_tmp[866040]) inds[213901])
    label _end_+=[619788]
    (619790 return _void[46])
  }
  where {
    unknown call_tmp[866049] "expr temp" "maybe param" "maybe type" "temp"
    (866052 'move' call_tmp[866049](213908 call(213905 call (partial) isSparse _mt[203] sd[213892])))
    unknown call_tmp[866054] "expr temp" "maybe param" "maybe type" "temp"
    (866057 'move' call_tmp[866054](213896 call chpl__buildIndexType sd[213892]))
    unknown call_tmp[866061] "expr temp" "maybe param" "maybe type" "temp"
    (866064 'move' call_tmp[866061](528456 call eltType _mt[203] inds[213901]))
    unknown call_tmp[866066] "expr temp" "maybe param" "maybe type" "temp"
    (866069 'move' call_tmp[866066](528460 'is_instantiation_allow_values' call_tmp[866054] call_tmp[866061]))
    (528454 call & call_tmp[866049] call_tmp[866066])
  }
  function +=[213940](ref arg sd[213943]:_domain[225034](?), arg d[213947]:_domain[225034](?)) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    unknown call_tmp[866073] "expr temp" "maybe param" "maybe type" "temp"
    (866076 'move' call_tmp[866073](213988 call(213985 call (partial) sizeAs _mt[203] d[213947]) int(64)[10]))
    unknown call_tmp[866078] "expr temp" "maybe param" "maybe type" "temp"
    (866081 'move' call_tmp[866078](213982 call == call_tmp[866073] 0))
    unknown call_tmp[866083] "expr temp" "maybe param" "maybe type" "temp"
    (866086 'move' call_tmp[866083](213991 call _cond_test call_tmp[866078]))
    if call_tmp[866083]
    {
      gotoReturn _end_+=[619794] _end_+=[619794]
    }
    unknown call_tmp[866090] "maybe param" "maybe type" "temp"
    (866093 'move' call_tmp[866090](214002 call(213999 call (partial) sizeAs _mt[203] d[213947]) int(64)[10]))
    const indCount[213997] "dead at end of block" "const" "insert auto destroy"
    (649359 'init var' indCount[213997] call_tmp[866090])
    (214005 'end of statement')
    unknown arr[214007] "dead at end of block" "insert auto destroy"
    unknown call_tmp[866095] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (866098 'move' call_tmp[866095](214012 call chpl_build_low_bounded_range 0))
    unknown call_tmp[866100] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (866103 'move' call_tmp[866100](214009 call # call_tmp[866095] indCount[213997]))
    unknown call_tmp[866105] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (866108 'move' call_tmp[866105](214016 call chpl__buildDomainExpr call_tmp[866100] 1))
    unknown call_tmp[866110] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (866113 'move' call_tmp[866110](214018 call chpl__ensureDomainExpr call_tmp[866105]))
    unknown call_tmp[866115] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (866118 'move' call_tmp[866115](214020 call chpl__buildIndexType sd[213943]))
    unknown call_tmp[866120] "expr temp" "maybe param" "maybe type" "temp"
    (866123 'move' call_tmp[866120](214023 call chpl__buildArrayRuntimeType call_tmp[866110] call_tmp[866115]))
    (649361 'default init var' arr[214007] call_tmp[866120])
    (214026 'end of statement')
    {
      unknown _indexOfInterest[214047] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[214048] "expr temp" "temp"
      unknown call_tmp[866125] "expr temp" "maybe param" "maybe type" "temp"
      (866128 'move' call_tmp[866125](214057 call _getIterator d[213947]))
      unknown call_tmp[866130] "expr temp" "maybe param" "maybe type" "temp"
      (866133 'move' call_tmp[866130](214060 call chpl_build_low_bounded_range 0))
      unknown call_tmp[866135] "expr temp" "maybe param" "maybe type" "temp"
      (866138 'move' call_tmp[866135](214062 call _getIterator call_tmp[866130]))
      (214064 'move' _iterator[214048](214039 call _build_tuple call_tmp[866125] call_tmp[866135]))
      Defer
      {
        {
          (214092 call _freeIterator _iterator[214048])
        }
      }
      { scopeless type
        (214069 'move' _indexOfInterest[214047](214066 call iteratorIndex _iterator[214048]))
      }
      ForLoop[214049]
      {
        (214074 call _check_tuple_var_decl _indexOfInterest[214047] 2)
        (559974 'end of statement')
        unknown i[214028] "index var" "insert auto destroy"
        (559975 'end of statement')
        (214081 'move' i[214028](214078 call _indexOfInterest[214047] 0))
        (559976 'end of statement' i[214028])
        unknown j[214030] "index var" "insert auto destroy"
        (559978 'end of statement')
        (214087 'move' j[214030](214084 call _indexOfInterest[214047] 1))
        (559979 'end of statement' j[214030])
        unknown call_tmp[866140] "expr temp" "maybe param" "maybe type" "temp"
        (866143 'move' call_tmp[866140](214043 call arr[214007] j[214030]))
        (214040 call = call_tmp[866140] i[214028])
        (559981 'end of statement' arr[214007] j[214030] i[214028])
        label _continueLabel[214052]
        _indexOfInterest[214047]
        _iterator[214048]
      }
      label _breakLabel[214053]
    }
    unknown rowSorted[214100] "dead at end of block" "insert auto destroy"
    (649363 'init var' rowSorted[214100] 0)
    (214103 'end of statement' indCount[213997])
    unknown call_tmp[866147] "expr temp" "maybe param" "maybe type" "temp"
    (866150 'move' call_tmp[866147](214105 call _value _mt[203] sd[213943]))
    (214113 call(214110 call (partial) dsiBulkAddNoPreserveInds _mt[203] call_tmp[866147]) arr[214007] rowSorted[214100] 1)
    (559985 'end of statement' arr[214007] rowSorted[214100])
    label _end_+=[619794]
    (619796 return _void[46])
  }
  where {
    unknown tmp[496002] "maybe param" "temp"
    unknown tmp[496023] "maybe param" "temp"
    (496034 'move' tmp[496023](213958 call(213955 call (partial) isSparse _mt[203] sd[213943])))
    unknown call_tmp[866156] "expr temp" "maybe param" "maybe type" "temp"
    (866159 'move' call_tmp[866156](496036 call _cond_invalid tmp[496023]))
    if call_tmp[866156]
    {
      (496039 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[692179] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692180] "maybe param" "temp"
    unknown call_tmp[866161] "expr temp" "maybe param" "maybe type" "temp"
    (866164 'move' call_tmp[866161](496024 call isTrue tmp[496023]))
    (692185 'move' tmp[692180](692183 call _cond_test call_tmp[866161]))
    if tmp[692180]
    {
      unknown tmp[692187] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[866168] "expr temp" "maybe param" "maybe type" "temp"
      (866171 'move' call_tmp[866168](213962 call rank _mt[203] d[213947]))
      unknown call_tmp[866175] "expr temp" "maybe param" "maybe type" "temp"
      (866178 'move' call_tmp[866175](213966 call rank _mt[203] sd[213943]))
      unknown call_tmp[866180] "expr temp" "maybe param" "maybe type" "temp"
      (866183 'move' call_tmp[866180](213959 call == call_tmp[866168] call_tmp[866175]))
      (692189 'move' tmp[692187](496027 call isTrue call_tmp[866180]))
      (692194 'move' tmp[692179](692191 '_paramFoldLogical' tmp[692180] tmp[692187]))
    }
    {
      (692199 'move' tmp[692179](692196 '_paramFoldLogical' tmp[692180] 0))
    }
    (496013 'move' tmp[496002] tmp[692179])
    unknown call_tmp[866185] "expr temp" "maybe param" "maybe type" "temp"
    (866188 'move' call_tmp[866185](496015 call _cond_invalid tmp[496002]))
    if call_tmp[866185]
    {
      (496018 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[692206] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692207] "maybe param" "temp"
    unknown call_tmp[866190] "expr temp" "maybe param" "maybe type" "temp"
    (866193 'move' call_tmp[866190](496003 call isTrue tmp[496002]))
    (692212 'move' tmp[692207](692210 call _cond_test call_tmp[866190]))
    if tmp[692207]
    {
      unknown tmp[692214] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[866197] "expr temp" "maybe param" "maybe type" "temp"
      (866200 'move' call_tmp[866197](213972 call idxType _mt[203] sd[213943]))
      unknown call_tmp[866204] "expr temp" "maybe param" "maybe type" "temp"
      (866207 'move' call_tmp[866204](213976 call idxType _mt[203] d[213947]))
      unknown call_tmp[866209] "expr temp" "maybe param" "maybe type" "temp"
      (866212 'move' call_tmp[866209](213969 call == call_tmp[866197] call_tmp[866204]))
      (692216 'move' tmp[692214](496006 call isTrue call_tmp[866209]))
      (692221 'move' tmp[692206](692218 '_paramFoldLogical' tmp[692207] tmp[692214]))
    }
    {
      (692226 'move' tmp[692206](692223 '_paramFoldLogical' tmp[692207] 0))
    }
    (1001578 call chpl_statementLevelSymbol tmp[692206])
  }
  function -=[214120](ref arg sd[214123]:_domain[225034](?), arg inds[214132]:_array[255540](?)) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    {
      unknown _indexOfInterest[214149] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[214150] "expr temp" "temp"
      (214159 'move' _iterator[214150](214157 call _getIterator inds[214132]))
      Defer
      {
        {
          (214174 call _freeIterator _iterator[214150])
        }
      }
      { scopeless type
        (214164 'move' _indexOfInterest[214149](214161 call iteratorIndex _iterator[214150]))
      }
      ForLoop[214151]
      {
        unknown ind[214141] "index var" "insert auto destroy"
        (559989 'end of statement')
        (214169 'move' ind[214141] _indexOfInterest[214149])
        (559990 'end of statement' ind[214141])
        (214144 call -= sd[214123] ind[214141])
        (559992 'end of statement' ind[214141])
        label _continueLabel[214154]
        _indexOfInterest[214149]
        _iterator[214150]
      }
      label _breakLabel[214155]
    }
    (619800 return _void[46])
  }
  where {
    unknown call_tmp[866216] "expr temp" "maybe param" "maybe type" "temp"
    (866219 'move' call_tmp[866216](214139 call(214136 call (partial) isSparse _mt[203] sd[214123])))
    unknown call_tmp[866221] "expr temp" "maybe param" "maybe type" "temp"
    (866224 'move' call_tmp[866221](214127 call chpl__buildIndexType sd[214123]))
    unknown call_tmp[866228] "expr temp" "maybe param" "maybe type" "temp"
    (866231 'move' call_tmp[866228](528465 call eltType _mt[203] inds[214132]))
    unknown call_tmp[866233] "expr temp" "maybe param" "maybe type" "temp"
    (866236 'move' call_tmp[866233](528469 'is_instantiation_allow_values' call_tmp[866221] call_tmp[866228]))
    (528463 call & call_tmp[866216] call_tmp[866233])
  }
  function -=[214184](ref arg sd[214187]:_domain[225034](?), arg d[214191]:_domain[225034](?)) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    {
      unknown _indexOfInterest[214232] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[214233] "expr temp" "temp"
      (214242 'move' _iterator[214233](214240 call _getIterator d[214191]))
      Defer
      {
        {
          (214257 call _freeIterator _iterator[214233])
        }
      }
      { scopeless type
        (214247 'move' _indexOfInterest[214232](214244 call iteratorIndex _iterator[214233]))
      }
      ForLoop[214234]
      {
        unknown ind[214224] "index var" "insert auto destroy"
        (559995 'end of statement')
        (214252 'move' ind[214224] _indexOfInterest[214232])
        (559996 'end of statement' ind[214224])
        (214227 call -= sd[214187] ind[214224])
        (559998 'end of statement' ind[214224])
        label _continueLabel[214237]
        _indexOfInterest[214232]
        _iterator[214233]
      }
      label _breakLabel[214238]
    }
    (619802 return _void[46])
  }
  where {
    unknown tmp[496044] "maybe param" "temp"
    unknown tmp[496065] "maybe param" "temp"
    (496076 'move' tmp[496065](214202 call(214199 call (partial) isSparse _mt[203] sd[214187])))
    unknown call_tmp[866240] "expr temp" "maybe param" "maybe type" "temp"
    (866243 'move' call_tmp[866240](496078 call _cond_invalid tmp[496065]))
    if call_tmp[866240]
    {
      (496081 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[692233] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692234] "maybe param" "temp"
    unknown call_tmp[866245] "expr temp" "maybe param" "maybe type" "temp"
    (866248 'move' call_tmp[866245](496066 call isTrue tmp[496065]))
    (692239 'move' tmp[692234](692237 call _cond_test call_tmp[866245]))
    if tmp[692234]
    {
      unknown tmp[692241] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[866252] "expr temp" "maybe param" "maybe type" "temp"
      (866255 'move' call_tmp[866252](214206 call rank _mt[203] d[214191]))
      unknown call_tmp[866259] "expr temp" "maybe param" "maybe type" "temp"
      (866262 'move' call_tmp[866259](214210 call rank _mt[203] sd[214187]))
      unknown call_tmp[866264] "expr temp" "maybe param" "maybe type" "temp"
      (866267 'move' call_tmp[866264](214203 call == call_tmp[866252] call_tmp[866259]))
      (692243 'move' tmp[692241](496069 call isTrue call_tmp[866264]))
      (692248 'move' tmp[692233](692245 '_paramFoldLogical' tmp[692234] tmp[692241]))
    }
    {
      (692253 'move' tmp[692233](692250 '_paramFoldLogical' tmp[692234] 0))
    }
    (496055 'move' tmp[496044] tmp[692233])
    unknown call_tmp[866269] "expr temp" "maybe param" "maybe type" "temp"
    (866272 'move' call_tmp[866269](496057 call _cond_invalid tmp[496044]))
    if call_tmp[866269]
    {
      (496060 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[692260] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692261] "maybe param" "temp"
    unknown call_tmp[866274] "expr temp" "maybe param" "maybe type" "temp"
    (866277 'move' call_tmp[866274](496045 call isTrue tmp[496044]))
    (692266 'move' tmp[692261](692264 call _cond_test call_tmp[866274]))
    if tmp[692261]
    {
      unknown tmp[692268] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[866281] "expr temp" "maybe param" "maybe type" "temp"
      (866284 'move' call_tmp[866281](214216 call idxType _mt[203] sd[214187]))
      unknown call_tmp[866288] "expr temp" "maybe param" "maybe type" "temp"
      (866291 'move' call_tmp[866288](214220 call idxType _mt[203] d[214191]))
      unknown call_tmp[866293] "expr temp" "maybe param" "maybe type" "temp"
      (866296 'move' call_tmp[866293](214213 call == call_tmp[866281] call_tmp[866288]))
      (692270 'move' tmp[692268](496048 call isTrue call_tmp[866293]))
      (692275 'move' tmp[692260](692272 '_paramFoldLogical' tmp[692261] tmp[692268]))
    }
    {
      (692280 'move' tmp[692260](692277 '_paramFoldLogical' tmp[692261] 0))
    }
    (1001580 call chpl_statementLevelSymbol tmp[692260])
  }
  function =[214267](ref arg a[214270]:_domain[225034](?), arg b[214274]:_domain[225034](?)) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    unknown call_tmp[866300] "expr temp" "maybe param" "maybe type" "temp"
    (866303 'move' call_tmp[866300](214287 call rank _mt[203] a[214270]))
    unknown call_tmp[866307] "expr temp" "maybe param" "maybe type" "temp"
    (866310 'move' call_tmp[866307](214291 call rank _mt[203] b[214274]))
    unknown call_tmp[866312] "expr temp" "maybe param" "maybe type" "temp"
    (866315 'move' call_tmp[866312](214284 call != call_tmp[866300] call_tmp[866307]))
    unknown call_tmp[866317] "expr temp" "maybe param" "maybe type" "temp"
    (866320 'move' call_tmp[866317](214294 call _cond_test call_tmp[866312]))
    if call_tmp[866317]
    {
      (214279 call compilerError "rank mismatch in domain assignment")
    }
    unknown call_tmp[866324] "expr temp" "maybe param" "maybe type" "temp"
    (866327 'move' call_tmp[866324](214308 call idxType _mt[203] a[214270]))
    unknown call_tmp[866331] "expr temp" "maybe param" "maybe type" "temp"
    (866334 'move' call_tmp[866331](214312 call idxType _mt[203] b[214274]))
    unknown call_tmp[866336] "expr temp" "maybe param" "maybe type" "temp"
    (866339 'move' call_tmp[866336](214305 call != call_tmp[866324] call_tmp[866331]))
    unknown call_tmp[866341] "expr temp" "maybe param" "maybe type" "temp"
    (866344 'move' call_tmp[866341](214315 call _cond_test call_tmp[866336]))
    if call_tmp[866341]
    {
      (214300 call compilerError "index type mismatch in domain assignment")
    }
    unknown tmp[496086] "maybe param" "temp"
    (496097 'move' tmp[496086](214367 call(214364 call (partial) isRectangular _mt[203] a[214270])))
    unknown call_tmp[866348] "expr temp" "maybe param" "maybe type" "temp"
    (866351 'move' call_tmp[866348](496099 call _cond_invalid tmp[496086]))
    if call_tmp[866348]
    {
      (496102 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[692287] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692288] "maybe param" "temp"
    unknown call_tmp[866353] "expr temp" "maybe param" "maybe type" "temp"
    (866356 'move' call_tmp[866353](496087 call isTrue tmp[496086]))
    (692293 'move' tmp[692288](692291 call _cond_test call_tmp[866353]))
    if tmp[692288]
    {
      unknown tmp[692295] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[866360] "expr temp" "maybe param" "maybe type" "temp"
      (866363 'move' call_tmp[866360](214372 call(214369 call (partial) isRectangular _mt[203] b[214274])))
      (692297 'move' tmp[692295](496090 call isTrue call_tmp[866360]))
      (692302 'move' tmp[692287](692299 '_paramFoldLogical' tmp[692288] tmp[692295]))
    }
    {
      (692307 'move' tmp[692287](692304 '_paramFoldLogical' tmp[692288] 0))
    }
    unknown call_tmp[866365] "expr temp" "maybe param" "maybe type" "temp"
    (866368 'move' call_tmp[866365](214373 call _cond_test tmp[692287]))
    if call_tmp[866365]
    {
      unknown call_tmp[866372] "expr temp" "maybe param" "maybe type" "temp"
      (866375 'move' call_tmp[866372](214349 call strides _mt[203] a[214270]))
      unknown call_tmp[866379] "expr temp" "maybe param" "maybe type" "temp"
      (866382 'move' call_tmp[866379](214353 call strides _mt[203] b[214274]))
      unknown call_tmp[866384] "expr temp" "maybe param" "maybe type" "temp"
      (866387 'move' call_tmp[866384](214347 call chpl_assignStrideIsSafe call_tmp[866372] call_tmp[866379]))
      unknown call_tmp[866389] "expr temp" "maybe param" "maybe type" "temp"
      (866392 'move' call_tmp[866389](214344 call ! call_tmp[866384]))
      unknown call_tmp[866394] "expr temp" "maybe param" "maybe type" "temp"
      (866397 'move' call_tmp[866394](214356 call _cond_test call_tmp[866389]))
      if call_tmp[866394]
      {
        unknown call_tmp[866401] "expr temp" "maybe param" "maybe type" "temp"
        (866404 'move' call_tmp[866401](214328 call strides _mt[203] a[214270]))
        unknown call_tmp[866406] "expr temp" "maybe param" "maybe type" "temp"
        (866409 'move' call_tmp[866406](214325 call : call_tmp[866401] string[244]))
        unknown call_tmp[866413] "expr temp" "maybe param" "maybe type" "temp"
        (866416 'move' call_tmp[866413](214338 call strides _mt[203] b[214274]))
        unknown call_tmp[866418] "expr temp" "maybe param" "maybe type" "temp"
        (866421 'move' call_tmp[866418](214335 call : call_tmp[866413] string[244]))
        (214321 call compilerError "assigning to a domain with strideKind." call_tmp[866406] " from a domain with strideKind." call_tmp[866418] " without an explicit cast")
      }
    }
    unknown call_tmp[866425] "expr temp" "maybe param" "maybe type" "temp"
    (866428 'move' call_tmp[866425](214379 call _instance _mt[203] a[214270]))
    (214387 call(214384 call (partial) dsiAssignDomain _mt[203] call_tmp[866425]) b[214274](lhsPrivate = 0))
    (560004 'end of statement')
    unknown call_tmp[866434] "expr temp" "maybe param" "maybe type" "temp"
    (866437 'move' call_tmp[866434](214401 call _instance _mt[203] a[214270]))
    unknown call_tmp[866439] "expr temp" "maybe param" "maybe type" "temp"
    (866442 'move' call_tmp[866439](214399 call _isPrivatized call_tmp[866434]))
    unknown call_tmp[866444] "expr temp" "maybe param" "maybe type" "temp"
    (866447 'move' call_tmp[866444](214404 call _cond_test call_tmp[866439]))
    if call_tmp[866444]
    {
      unknown call_tmp[866451] "expr temp" "maybe param" "maybe type" "temp"
      (866454 'move' call_tmp[866451](214395 call _instance _mt[203] a[214270]))
      (214393 call _reprivatize call_tmp[866451])
    }
    (619804 return _void[46])
  }
  function chpl__checkTupIrregDomAssign[214410](const  ref arg d[214412]:_any[141](?), const  ref arg idx[214414]:_any[141](?), param arg msg[214416]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    unknown tmp[496107] "maybe param" "temp"
    unknown call_tmp[866458] "expr temp" "maybe param" "maybe type" "temp"
    (866461 'move' call_tmp[866458](214430 call fullIdxType _mt[203] d[214412]))
    unknown call_tmp[866463] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (866466 'move' call_tmp[866463](214426 'typeof' idx[214414]))
    (496118 'move' tmp[496107](395458 'is_coercible' call_tmp[866458] call_tmp[866463]))
    unknown call_tmp[866468] "expr temp" "maybe param" "maybe type" "temp"
    (866471 'move' call_tmp[866468](496120 call _cond_invalid tmp[496107]))
    if call_tmp[866468]
    {
      (496123 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[692368] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692369] "maybe param" "temp"
    unknown call_tmp[866473] "expr temp" "maybe param" "maybe type" "temp"
    (866476 'move' call_tmp[866473](496108 call isTrue tmp[496107]))
    (692374 'move' tmp[692369](692372 call _cond_test call_tmp[866473]))
    if tmp[692369]
    {
      (692379 'move' tmp[692368](692376 '_paramFoldLogical' tmp[692369] 1))
    }
    {
      unknown tmp[496128] "maybe param" "temp"
      unknown tmp[496149] "maybe param" "temp"
      (496160 'move' tmp[496149](214441 call(214438 call (partial) isSparse _mt[203] d[214412])))
      unknown call_tmp[866480] "expr temp" "maybe param" "maybe type" "temp"
      (866483 'move' call_tmp[866480](496162 call _cond_invalid tmp[496149]))
      if call_tmp[866480]
      {
        (496165 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[692314] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[692315] "maybe param" "temp"
      unknown call_tmp[866485] "expr temp" "maybe param" "maybe type" "temp"
      (866488 'move' call_tmp[866485](496150 call isTrue tmp[496149]))
      (692320 'move' tmp[692315](692318 call _cond_test call_tmp[866485]))
      if tmp[692315]
      {
        unknown tmp[692322] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[866492] "expr temp" "maybe param" "maybe type" "temp"
        (866495 'move' call_tmp[866492](214445 call rank _mt[203] d[214412]))
        unknown call_tmp[866497] "expr temp" "maybe param" "maybe type" "temp"
        (866500 'move' call_tmp[866497](214442 call == call_tmp[866492] 1))
        (692324 'move' tmp[692322](496153 call isTrue call_tmp[866497]))
        (692329 'move' tmp[692314](692326 '_paramFoldLogical' tmp[692315] tmp[692322]))
      }
      {
        (692334 'move' tmp[692314](692331 '_paramFoldLogical' tmp[692315] 0))
      }
      (496139 'move' tmp[496128] tmp[692314])
      unknown call_tmp[866502] "expr temp" "maybe param" "maybe type" "temp"
      (866505 'move' call_tmp[866502](496141 call _cond_invalid tmp[496128]))
      if call_tmp[866502]
      {
        (496144 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[692341] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[692342] "maybe param" "temp"
      unknown call_tmp[866507] "expr temp" "maybe param" "maybe type" "temp"
      (866510 'move' call_tmp[866507](496129 call isTrue tmp[496128]))
      (692347 'move' tmp[692342](692345 call _cond_test call_tmp[866507]))
      if tmp[692342]
      {
        unknown tmp[692349] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[866514] "expr temp" "maybe param" "maybe type" "temp"
        (866517 'move' call_tmp[866514](214457 call idxType _mt[203] d[214412]))
        unknown call_tmp[866519] "expr temp" "maybe param" "maybe type" "temp"
        (866522 'move' call_tmp[866519](214453 call * 1 call_tmp[866514]))
        unknown call_tmp[866524] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (866527 'move' call_tmp[866524](214452 'typeof' idx[214414]))
        unknown call_tmp[866529] "expr temp" "maybe param" "maybe type" "temp"
        (866532 'move' call_tmp[866529](395459 'is_coercible' call_tmp[866519] call_tmp[866524]))
        (692351 'move' tmp[692349](496132 call isTrue call_tmp[866529]))
        (692356 'move' tmp[692341](692353 '_paramFoldLogical' tmp[692342] tmp[692349]))
      }
      {
        (692361 'move' tmp[692341](692358 '_paramFoldLogical' tmp[692342] 0))
      }
      unknown tmp[692381] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (692383 'move' tmp[692381](496112 call isTrue tmp[692341]))
      (692388 'move' tmp[692368](692385 '_paramFoldLogical' tmp[692369] tmp[692381]))
    }
    unknown call_tmp[866534] "expr temp" "maybe param" "maybe type" "temp"
    (866537 'move' call_tmp[866534](214460 call _cond_test tmp[692368]))
    if call_tmp[866534]
    {
      gotoReturn _end_chpl__checkTupIrregDomAssign[619806] _end_chpl__checkTupIrregDomAssign[619806]
    }
    unknown call_tmp[866539] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (866542 'move' call_tmp[866539](214474 'typeof' idx[214414]))
    unknown call_tmp[866544] "expr temp" "maybe param" "maybe type" "temp"
    (866547 'move' call_tmp[866544](214471 call : call_tmp[866539] string[244]))
    unknown call_tmp[866549] "expr temp" "maybe param" "maybe type" "temp"
    (866552 'move' call_tmp[866549](214480 call domainDescription d[214412]))
    unknown call_tmp[866556] "expr temp" "maybe param" "maybe type" "temp"
    (866559 'move' call_tmp[866556](214488 call idxType _mt[203] d[214412]))
    unknown call_tmp[866561] "expr temp" "maybe param" "maybe type" "temp"
    (866564 'move' call_tmp[866561](214485 call : call_tmp[866556] string[244]))
    (214466 call compilerError "cannot assign a tuple " msg[214416] call_tmp[866544] " into " call_tmp[866549] " with idxType " call_tmp[866561])
    label _end_chpl__checkTupIrregDomAssign[619806]
    (619808 return _void[46])
  }
  function chpl__isLegalRectTupDomAssign[214494](arg d[214496]:_any[141](?), arg t[214498]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[619814] "RVV" "param" "temp"
    unknown call_tmp[866568] "expr temp" "maybe param" "maybe type" "temp"
    (866571 'move' call_tmp[866568](214510 call(214507 call (partial) isRectangular _mt[203] d[214496])))
    unknown call_tmp[866573] "expr temp" "maybe param" "maybe type" "temp"
    (866576 'move' call_tmp[866573](214504 call ! call_tmp[866568]))
    unknown call_tmp[866578] "expr temp" "maybe param" "maybe type" "temp"
    (866581 'move' call_tmp[866578](214511 call _cond_test call_tmp[866573]))
    if call_tmp[866578]
    {
      (619819 'move' ret[619814](619818 'deref' 0))
      gotoReturn _end_chpl__isLegalRectTupDomAssign[619812] _end_chpl__isLegalRectTupDomAssign[619812]
    }
    unknown call_tmp[866585] "expr temp" "maybe param" "maybe type" "temp"
    (866588 'move' call_tmp[866585](214524 call rank _mt[203] d[214496]))
    unknown call_tmp[866592] "expr temp" "maybe param" "maybe type" "temp"
    (866595 'move' call_tmp[866592](214528 call size _mt[203] t[214498]))
    unknown call_tmp[866597] "expr temp" "maybe param" "maybe type" "temp"
    (866600 'move' call_tmp[866597](214521 call == call_tmp[866585] call_tmp[866592]))
    unknown call_tmp[866602] "expr temp" "maybe param" "maybe type" "temp"
    (866605 'move' call_tmp[866602](214519 call ! call_tmp[866597]))
    unknown call_tmp[866607] "expr temp" "maybe param" "maybe type" "temp"
    (866610 'move' call_tmp[866607](214531 call _cond_test call_tmp[866602]))
    if call_tmp[866607]
    {
      (619824 'move' ret[619814](619823 'deref' 0))
      gotoReturn _end_chpl__isLegalRectTupDomAssign[619812] _end_chpl__isLegalRectTupDomAssign[619812]
    }
    {
      unknown dim[214536] "dead at end of block" "index var" "insert auto destroy"
      (649365 'init var' dim[214536] 0)
      (560011 'end of statement')
      unknown tmp[214563] "maybe param" "temp"
      unknown call_tmp[866614] "expr temp" "maybe param" "maybe type" "temp"
      (866617 'move' call_tmp[866614](214542 call size _mt[203] t[214498]))
      unknown call_tmp[866619] "expr temp" "maybe param" "maybe type" "temp"
      (866622 'move' call_tmp[866619](214539 call - call_tmp[866614] 1))
      (214575 'move' tmp[214563](214573 call chpl_compute_low_param_loop_bound 0 call_tmp[866619]))
      unknown tmp[214564] "maybe param" "temp"
      unknown call_tmp[866626] "expr temp" "maybe param" "maybe type" "temp"
      (866629 'move' call_tmp[866626](214582 call size _mt[203] t[214498]))
      unknown call_tmp[866631] "expr temp" "maybe param" "maybe type" "temp"
      (866634 'move' call_tmp[866631](214580 call - call_tmp[866626] 1))
      (214588 'move' tmp[214564](214586 call chpl_compute_high_param_loop_bound 0 call_tmp[866631]))
      unknown tmp[214565] "maybe param" "temp"
      (214591 'move' tmp[214565] 1)
      ParamForLoop[214593]
      { dim[214536] tmp[214563] tmp[214564] tmp[214565]
        unknown call_tmp[866636] "expr temp" "maybe param" "maybe type" "temp"
        (866639 'move' call_tmp[866636](214556 call t[214498] dim[214536]))
        unknown call_tmp[866641] "expr temp" "maybe param" "maybe type" "temp"
        (866644 'move' call_tmp[866641](214554 call isRange call_tmp[866636]))
        unknown call_tmp[866646] "expr temp" "maybe param" "maybe type" "temp"
        (866649 'move' call_tmp[866646](214551 call ! call_tmp[866641]))
        unknown call_tmp[866651] "expr temp" "maybe param" "maybe type" "temp"
        (866654 'move' call_tmp[866651](214558 call _cond_test call_tmp[866646]))
        if call_tmp[866651]
        {
          (619829 'move' ret[619814](619828 'deref' 0))
          gotoReturn _end_chpl__isLegalRectTupDomAssign[619812] _end_chpl__isLegalRectTupDomAssign[619812]
        }
      }
      label _unused_continueLabel[214567]
      label _breakLabel[214566]
    }
    {
      unknown dim[214602] "dead at end of block" "index var" "insert auto destroy"
      (649367 'init var' dim[214602] 0)
      (560013 'end of statement')
      unknown tmp[214635] "maybe param" "temp"
      unknown call_tmp[866658] "expr temp" "maybe param" "maybe type" "temp"
      (866661 'move' call_tmp[866658](214608 call size _mt[203] t[214498]))
      unknown call_tmp[866663] "expr temp" "maybe param" "maybe type" "temp"
      (866666 'move' call_tmp[866663](214605 call - call_tmp[866658] 1))
      (214647 'move' tmp[214635](214645 call chpl_compute_low_param_loop_bound 0 call_tmp[866663]))
      unknown tmp[214636] "maybe param" "temp"
      unknown call_tmp[866670] "expr temp" "maybe param" "maybe type" "temp"
      (866673 'move' call_tmp[866670](214654 call size _mt[203] t[214498]))
      unknown call_tmp[866675] "expr temp" "maybe param" "maybe type" "temp"
      (866678 'move' call_tmp[866675](214652 call - call_tmp[866670] 1))
      (214660 'move' tmp[214636](214658 call chpl_compute_high_param_loop_bound 0 call_tmp[866675]))
      unknown tmp[214637] "maybe param" "temp"
      (214663 'move' tmp[214637] 1)
      ParamForLoop[214665]
      { dim[214602] tmp[214635] tmp[214636] tmp[214637]
        unknown call_tmp[866682] "expr temp" "maybe param" "maybe type" "temp"
        (866685 'move' call_tmp[866682](214625 call(214622 call (partial) dim _mt[203] d[214496]) dim[214602]))
        unknown call_tmp[866687] "expr temp" "maybe param" "maybe type" "temp"
        (866690 'move' call_tmp[866687](214628 call t[214498] dim[214602]))
        unknown call_tmp[866692] "expr temp" "maybe param" "maybe type" "temp"
        (866695 'move' call_tmp[866692](214620 call chpl_assignStrideIsSafe call_tmp[866682] call_tmp[866687]))
        unknown call_tmp[866697] "expr temp" "maybe param" "maybe type" "temp"
        (866700 'move' call_tmp[866697](214617 call ! call_tmp[866692]))
        unknown call_tmp[866702] "expr temp" "maybe param" "maybe type" "temp"
        (866705 'move' call_tmp[866702](214630 call _cond_test call_tmp[866697]))
        if call_tmp[866702]
        {
          (619834 'move' ret[619814](619833 'deref' 0))
          gotoReturn _end_chpl__isLegalRectTupDomAssign[619812] _end_chpl__isLegalRectTupDomAssign[619812]
        }
      }
      label _unused_continueLabel[214639]
      label _breakLabel[214638]
    }
    (619839 'move' ret[619814](619838 'deref' 1))
    label _end_chpl__isLegalRectTupDomAssign[619812]
    (619816 return ret[619814])
  }
  function =[214678](ref arg a[214681]:_domain[225034](?), arg b[214685]:_tuple[246](?)) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    unknown call_tmp[866707] "expr temp" "maybe param" "maybe type" "temp"
    (866710 'move' call_tmp[866707](214856 call chpl__isLegalRectTupDomAssign a[214681] b[214685]))
    unknown call_tmp[866712] "expr temp" "maybe param" "maybe type" "temp"
    (866715 'move' call_tmp[866712](214859 call _cond_test call_tmp[866707]))
    if call_tmp[866712]
    {
      unknown call_tmp[866717] "expr temp" "maybe param" "maybe type" "temp"
      (866720 'move' call_tmp[866717](214697 call chpl__buildDomainExpr(214695 'expand_tuple' b[214685]) 1))
      (214690 call = a[214681] call_tmp[866717])
    }
    {
      unknown call_tmp[866724] "expr temp" "maybe param" "maybe type" "temp"
      (866727 'move' call_tmp[866724](214850 call(214847 call (partial) isRectangular _mt[203] a[214681])))
      unknown call_tmp[866729] "expr temp" "maybe param" "maybe type" "temp"
      (866732 'move' call_tmp[866729](214851 call _cond_test call_tmp[866724]))
      if call_tmp[866729]
      {
        unknown call_tmp[866734] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (866737 'move' call_tmp[866734](214708 'typeof' b[214685]))
        unknown call_tmp[866739] "expr temp" "maybe param" "maybe type" "temp"
        (866742 'move' call_tmp[866739](214705 call : call_tmp[866734] string[244]))
        (214701 call compilerError "cannot assign a " call_tmp[866739] " to a rectangular domain")
      }
      {
        (214718 call(214715 call (partial) clear _mt[203] a[214681]))
        (560018 'end of statement')
        unknown call_tmp[866746] "expr temp" "maybe param" "maybe type" "temp"
        (866749 'move' call_tmp[866746](214840 call isHomogeneousTuple b[214685]))
        unknown call_tmp[866751] "expr temp" "maybe param" "maybe type" "temp"
        (866754 'move' call_tmp[866751](214842 call _cond_test call_tmp[866746]))
        if call_tmp[866751]
        {
          unknown _indexOfInterest[214748] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[214749] "expr temp" "temp"
          unknown call_tmp[866758] "expr temp" "maybe param" "maybe type" "temp"
          (866761 'move' call_tmp[866758](214764 call size _mt[203] b[214685]))
          unknown call_tmp[866763] "expr temp" "maybe param" "maybe type" "temp"
          (866766 'move' call_tmp[866763](214768 call chpl_direct_counted_range_iter 0 call_tmp[866758]))
          (214758 'move' _iterator[214749](214756 call _getIterator call_tmp[866763]))
          Defer
          {
            {
              (214783 call _freeIterator _iterator[214749])
            }
          }
          { scopeless type
            (214773 'move' _indexOfInterest[214748](214770 call iteratorIndex _iterator[214749]))
          }
          ForLoop[214750]
          {
            unknown ind[214719] "index var" "insert auto destroy"
            (560020 'end of statement')
            (214778 'move' ind[214719] _indexOfInterest[214748])
            (560021 'end of statement' ind[214719])
            {
              unknown call_tmp[866768] "expr temp" "maybe param" "maybe type" "temp"
              (866771 'move' call_tmp[866768](214735 call b[214685] ind[214719]))
              (214732 call chpl__checkTupIrregDomAssign a[214681] call_tmp[866768] "of ")
              (560023 'end of statement' ind[214719])
              unknown call_tmp[866775] "expr temp" "maybe param" "maybe type" "temp"
              (866778 'move' call_tmp[866775](214746 call b[214685] ind[214719]))
              (214744 call(214741 call (partial) add _mt[203] a[214681]) call_tmp[866775])
              (560025 'end of statement' ind[214719])
            }
            label _continueLabel[214753]
            _indexOfInterest[214748]
            _iterator[214749]
          }
          label _breakLabel[214754]
        }
        {
          unknown _indexOfInterest[214807] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[214808] "expr temp" "temp"
          (214817 'move' _iterator[214808](214815 call _getIterator b[214685]))
          Defer
          {
            {
              (214832 call _freeIterator _iterator[214808])
            }
          }
          { scopeless type
            (214822 'move' _indexOfInterest[214807](214819 call iteratorIndex _iterator[214808]))
          }
          ForLoop[214809]
          {
            unknown ind[214790] "index var" "insert auto destroy"
            (560028 'end of statement')
            (214827 'move' ind[214790] _indexOfInterest[214807])
            (560029 'end of statement' ind[214790])
            {
              (214795 call chpl__checkTupIrregDomAssign a[214681] ind[214790] "containing ")
              (560031 'end of statement' ind[214790])
              (214805 call(214802 call (partial) add _mt[203] a[214681]) ind[214790])
              (560033 'end of statement' ind[214790])
            }
            label _continueLabel[214812]
            _indexOfInterest[214807]
            _iterator[214808]
          }
          label _breakLabel[214813]
        }
      }
    }
    (619841 return _void[46])
  }
  function =[214866](ref arg d[214869]:_domain[225034](?), arg r[214875]:range[240](?)) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    unknown call_tmp[866782] "expr temp" "maybe param" "maybe type" "temp"
    (866785 'move' call_tmp[866782](214885 call chpl__buildDomainExpr r[214875] 1))
    (214879 call = d[214869] call_tmp[866782])
    (619843 return _void[46])
  }
  function =[214889](ref arg a[214892]:_domain[225034](?), arg b[214895]:_any[141](?)) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    unknown call_tmp[866789] "expr temp" "maybe param" "maybe type" "temp"
    (866792 'move' call_tmp[866789](214914 call(214911 call (partial) isRectangular _mt[203] a[214892])))
    unknown call_tmp[866794] "expr temp" "maybe param" "maybe type" "temp"
    (866797 'move' call_tmp[866794](214915 call _cond_test call_tmp[866789]))
    if call_tmp[866794]
    {
      unknown call_tmp[866799] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (866802 'move' call_tmp[866799](214906 'typeof' b[214895]))
      unknown call_tmp[866804] "expr temp" "maybe param" "maybe type" "temp"
      (866807 'move' call_tmp[866804](214903 call : call_tmp[866799] string[244]))
      (214899 call compilerError "assigning " call_tmp[866804] " to a rectangular domain")
    }
    unknown call_tmp[866809] "expr temp" "maybe param" "maybe type" "temp"
    (866812 'move' call_tmp[866809](214935 call canBeIteratedOver b[214895]))
    unknown call_tmp[866814] "expr temp" "maybe param" "maybe type" "temp"
    (866817 'move' call_tmp[866814](214932 call ! call_tmp[866809]))
    unknown call_tmp[866819] "expr temp" "maybe param" "maybe type" "temp"
    (866822 'move' call_tmp[866819](214937 call _cond_test call_tmp[866814]))
    if call_tmp[866819]
    {
      unknown call_tmp[866824] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (866827 'move' call_tmp[866824](214926 'typeof' b[214895]))
      unknown call_tmp[866829] "expr temp" "maybe param" "maybe type" "temp"
      (866832 'move' call_tmp[866829](214923 call : call_tmp[866824] string[244]))
      (214921 call compilerError "assigning " call_tmp[866829] " to an irregular domain")
    }
    (214946 call(214943 call (partial) clear _mt[203] a[214892]))
    (560038 'end of statement')
    {
      unknown _indexOfInterest[214957] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[214958] "expr temp" "temp"
      (214967 'move' _iterator[214958](214965 call _getIterator b[214895]))
      Defer
      {
        {
          (214982 call _freeIterator _iterator[214958])
        }
      }
      { scopeless type
        (214972 'move' _indexOfInterest[214957](214969 call iteratorIndex _iterator[214958]))
      }
      ForLoop[214959]
      {
        unknown ind[214947] "index var" "insert auto destroy"
        (560040 'end of statement')
        (214977 'move' ind[214947] _indexOfInterest[214957])
        (560041 'end of statement' ind[214947])
        {
          (214955 call(214952 call (partial) add _mt[203] a[214892]) ind[214947])
          (560043 'end of statement' ind[214947])
        }
        label _continueLabel[214962]
        _indexOfInterest[214957]
        _iterator[214958]
      }
      label _breakLabel[214963]
    }
    (619845 return _void[46])
  }
  function allUint[214991](arg b[214993]:_any[141](?)) param : _unknown[42] "private"
  {
    unknown ret[619870] "RVV" "param" "temp"
    unknown call_tmp[866838] "expr temp" "maybe param" "maybe type" "temp"
    (866841 'move' call_tmp[866838](215000 call isInt b[214993]))
    unknown call_tmp[866843] "expr temp" "maybe param" "maybe type" "temp"
    (866846 'move' call_tmp[866843](215002 call _cond_test call_tmp[866838]))
    if call_tmp[866843]
    {
      (619875 'move' ret[619870](619874 'deref' 0))
      gotoReturn _end_allUint[619868] _end_allUint[619868]
    }
    unknown call_tmp[866848] "expr temp" "maybe param" "maybe type" "temp"
    (866851 'move' call_tmp[866848](215011 call isUint b[214993]))
    unknown call_tmp[866853] "expr temp" "maybe param" "maybe type" "temp"
    (866856 'move' call_tmp[866853](215013 call _cond_test call_tmp[866848]))
    if call_tmp[866853]
    {
      (619880 'move' ret[619870](619879 'deref' 1))
      gotoReturn _end_allUint[619868] _end_allUint[619868]
    }
    unknown call_tmp[866858] "expr temp" "maybe param" "maybe type" "temp"
    (866861 'move' call_tmp[866858](215024 call isTuple b[214993]))
    unknown call_tmp[866863] "expr temp" "maybe param" "maybe type" "temp"
    (866866 'move' call_tmp[866863](215026 call _cond_test call_tmp[866858]))
    if call_tmp[866863]
    {
      unknown call_tmp[866868] "expr temp" "maybe param" "maybe type" "temp"
      (866871 'move' call_tmp[866868](215020 call allUintTup 0))
      (619885 'move' ret[619870](619884 'deref' call_tmp[866868]))
      gotoReturn _end_allUint[619868] _end_allUint[619868]
    }
    (619890 'move' ret[619870](619889 'deref' 0))
    gotoReturn _end_allUint[619868] _end_allUint[619868]
    (560048 'end of statement')
    function allUintTup[215033](param arg dim[215035]:_any[141](?)) param : _unknown[42]
    {
      unknown ret[619849] "RVV" "param" "temp"
      unknown call_tmp[866875] "expr temp" "maybe param" "maybe type" "temp"
      (866878 'move' call_tmp[866875](215069 call size _mt[203] b[214993]))
      unknown call_tmp[866880] "expr temp" "maybe param" "maybe type" "temp"
      (866883 'move' call_tmp[866880](215065 call == dim[215035] call_tmp[866875]))
      unknown call_tmp[866885] "expr temp" "maybe param" "maybe type" "temp"
      (866888 'move' call_tmp[866885](215072 call _cond_test call_tmp[866880]))
      if call_tmp[866885]
      {
        (619854 'move' ret[619849](619853 'deref' 1))
        gotoReturn _end_allUintTup[619847] _end_allUintTup[619847]
      }
      {
        unknown call_tmp[866890] "expr temp" "maybe param" "maybe type" "temp"
        (866893 'move' call_tmp[866890](215057 call b[214993] dim[215035]))
        unknown call_tmp[866895] "expr temp" "maybe param" "maybe type" "temp"
        (866898 'move' call_tmp[866895](215055 call isUint call_tmp[866890]))
        unknown call_tmp[866900] "expr temp" "maybe param" "maybe type" "temp"
        (866903 'move' call_tmp[866900](215052 call ! call_tmp[866895]))
        unknown call_tmp[866905] "expr temp" "maybe param" "maybe type" "temp"
        (866908 'move' call_tmp[866905](215059 call _cond_test call_tmp[866900]))
        if call_tmp[866905]
        {
          (619859 'move' ret[619849](619858 'deref' 0))
          gotoReturn _end_allUintTup[619847] _end_allUintTup[619847]
        }
        {
          unknown call_tmp[866910] "expr temp" "maybe param" "maybe type" "temp"
          (866913 'move' call_tmp[866910](215047 call + dim[215035] 1))
          unknown call_tmp[866915] "expr temp" "maybe param" "maybe type" "temp"
          (866918 'move' call_tmp[866915](215046 call allUintTup call_tmp[866910]))
          (619864 'move' ret[619849](619863 'deref' call_tmp[866915]))
          gotoReturn _end_allUintTup[619847] _end_allUintTup[619847]
        }
      }
      label _end_allUintTup[619847]
      (619851 return ret[619849])
    }
    label _end_allUint[619868]
    (619872 return ret[619870])
  }
  function chpl_by[215082](arg a[215085]:_domain[225034](?), arg b[215088]:_any[141](?)) : _unknown[42] "operator"
  {
    unknown ret[619896] "RVV" "temp"
    (215092 call errorIfNotRectangular a[215085] "by")
    (560052 'end of statement')
    unknown newStrides[215098] "dead at end of block" "param"
    unknown tmp[692395] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692396] "maybe param" "temp"
    unknown call_tmp[866920] "expr temp" "maybe param" "maybe type" "temp"
    (866923 'move' call_tmp[866920](215102 call allUint b[215088]))
    unknown call_tmp[866925] "expr temp" "maybe param" "maybe type" "temp"
    (866928 'move' call_tmp[866925](215099 call ! call_tmp[866920]))
    (692401 'move' tmp[692396](692399 call _cond_test call_tmp[866925]))
    if tmp[692396]
    {
      (692406 'move' tmp[692395](692403 '_paramFoldLogical' tmp[692396] any[107135]))
    }
    {
      unknown tmp[692408] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[866932] "expr temp" "maybe param" "maybe type" "temp"
      (866935 'move' call_tmp[866932](215111 call strides _mt[203] a[215085]))
      (692410 'move' tmp[692408](215109 call chpl_strideProduct call_tmp[866932] positive[107131]))
      (692415 'move' tmp[692395](692412 '_paramFoldLogical' tmp[692396] tmp[692408]))
    }
    (649369 'init var' newStrides[215098] tmp[692395])
    (215122 'end of statement')
    unknown r[215124] "dead at end of block" "insert auto destroy"
    unknown call_tmp[866939] "expr temp" "maybe param" "maybe type" "temp"
    (866942 'move' call_tmp[866939](215128 call rank _mt[203] a[215085]))
    unknown call_tmp[866946] "expr temp" "maybe param" "maybe type" "temp"
    (866949 'move' call_tmp[866946](215134 call _value _mt[203] a[215085]))
    unknown call_tmp[866953] "expr temp" "maybe param" "maybe type" "temp"
    (866956 'move' call_tmp[866953](215137 call idxType _mt[203] call_tmp[866946]))
    unknown call_tmp[866958] "expr temp" "maybe param" "maybe type" "temp"
    (866961 'move' call_tmp[866958](215132 call range[240](?) call_tmp[866953] both[107114] newStrides[215098]))
    unknown call_tmp[866963] "expr temp" "maybe param" "maybe type" "temp"
    (866966 'move' call_tmp[866963](215125 call * call_tmp[866939] call_tmp[866958]))
    (649371 'default init var' r[215124] call_tmp[866963])
    (215146 'end of statement')
    unknown call_tmp[866970] "expr temp" "maybe param" "maybe type" "temp"
    (866973 'move' call_tmp[866970](215152 call rank _mt[203] a[215085]))
    unknown call_tmp[866975] "maybe param" "maybe type" "temp"
    (866978 'move' call_tmp[866975](215150 call _makeIndexTuple call_tmp[866970] b[215088] "step"(expand = 1)))
    unknown t[215148] "dead at end of block" "insert auto destroy"
    (649373 'init var' t[215148] call_tmp[866975])
    (215162 'end of statement')
    {
      unknown i[215163] "dead at end of block" "index var" "insert auto destroy"
      (649375 'init var' i[215163] 0)
      (560053 'end of statement')
      unknown tmp[215192] "maybe param" "temp"
      unknown call_tmp[866982] "expr temp" "maybe param" "maybe type" "temp"
      (866985 'move' call_tmp[866982](215169 call rank _mt[203] a[215085]))
      unknown call_tmp[866987] "expr temp" "maybe param" "maybe type" "temp"
      (866990 'move' call_tmp[866987](215166 call - call_tmp[866982] 1))
      (215204 'move' tmp[215192](215202 call chpl_compute_low_param_loop_bound 0 call_tmp[866987]))
      unknown tmp[215193] "maybe param" "temp"
      unknown call_tmp[866994] "expr temp" "maybe param" "maybe type" "temp"
      (866997 'move' call_tmp[866994](215211 call rank _mt[203] a[215085]))
      unknown call_tmp[866999] "expr temp" "maybe param" "maybe type" "temp"
      (867002 'move' call_tmp[866999](215209 call - call_tmp[866994] 1))
      (215217 'move' tmp[215193](215215 call chpl_compute_high_param_loop_bound 0 call_tmp[866999]))
      unknown tmp[215194] "maybe param" "temp"
      (215220 'move' tmp[215194] 1)
      ParamForLoop[215222]
      { i[215163] tmp[215192] tmp[215193] tmp[215194]
        unknown call_tmp[867004] "expr temp" "maybe param" "maybe type" "temp"
        (867007 'move' call_tmp[867004](215178 call r[215124] i[215163]))
        unknown call_tmp[867011] "expr temp" "maybe param" "maybe type" "temp"
        (867014 'move' call_tmp[867011](215186 call(215183 call (partial) dim _mt[203] a[215085]) i[215163]))
        unknown call_tmp[867016] "expr temp" "maybe param" "maybe type" "temp"
        (867019 'move' call_tmp[867016](215189 call t[215148] i[215163]))
        unknown call_tmp[867021] "expr temp" "maybe param" "maybe type" "temp"
        (867024 'move' call_tmp[867021](215180 call chpl_by call_tmp[867011] call_tmp[867016]))
        (215175 call = call_tmp[867004] call_tmp[867021])
        (560054 'end of statement' r[215124] i[215163] t[215148] i[215163])
      }
      label _unused_continueLabel[215196]
      label _breakLabel[215195]
    }
    unknown call_tmp[867028] "expr temp" "maybe param" "maybe type" "temp"
    (867031 'move' call_tmp[867028](215236 call distribution _mt[203] a[215085]))
    unknown call_tmp[867035] "expr temp" "maybe param" "maybe type" "temp"
    (867038 'move' call_tmp[867035](215240 call rank _mt[203] a[215085]))
    unknown call_tmp[867042] "expr temp" "maybe param" "maybe type" "temp"
    (867045 'move' call_tmp[867042](215244 call _value _mt[203] a[215085]))
    unknown call_tmp[867049] "expr temp" "maybe param" "maybe type" "temp"
    (867052 'move' call_tmp[867049](215247 call idxType _mt[203] call_tmp[867042]))
    unknown call_tmp[867054] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (867057 'move' call_tmp[867054](1000349 'new' _domain[225034](?) call_tmp[867028] call_tmp[867035] call_tmp[867049] newStrides[215098] r[215124]))
    (619901 'move' ret[619896](619900 'deref' call_tmp[867054]))
    gotoReturn _end_chpl_by[619894] _end_chpl_by[619894]
    (560059 'end of statement' r[215124])
    label _end_chpl_by[619894]
    (619898 return ret[619896])
  }
  function chpl_by[215254](arg a[215257]:_domain[225034](?), param arg b[215261]:integral[159](?)) : _unknown[42] "operator"
  {
    unknown ret[619907] "RVV" "temp"
    (215266 call errorIfNotRectangular a[215257] "by")
    (560061 'end of statement')
    unknown call_tmp[867061] "expr temp" "maybe param" "maybe type" "temp"
    (867064 'move' call_tmp[867061](215277 call(215274 call (partial) dim _mt[203] a[215257]) 0))
    unknown call_tmp[867066] "maybe param" "maybe type" "temp"
    (867069 'move' call_tmp[867066](215272 call chpl_strideProduct call_tmp[867061] b[215261]))
    unknown newStrides[215270] "dead at end of block" "param"
    (649377 'init var' newStrides[215270] call_tmp[867066])
    (215281 'end of statement')
    unknown r[215283] "dead at end of block" "insert auto destroy"
    unknown call_tmp[867073] "expr temp" "maybe param" "maybe type" "temp"
    (867076 'move' call_tmp[867073](215287 call rank _mt[203] a[215257]))
    unknown call_tmp[867080] "expr temp" "maybe param" "maybe type" "temp"
    (867083 'move' call_tmp[867080](215293 call _value _mt[203] a[215257]))
    unknown call_tmp[867087] "expr temp" "maybe param" "maybe type" "temp"
    (867090 'move' call_tmp[867087](215296 call idxType _mt[203] call_tmp[867080]))
    unknown call_tmp[867092] "expr temp" "maybe param" "maybe type" "temp"
    (867095 'move' call_tmp[867092](215291 call range[240](?) call_tmp[867087] both[107114] newStrides[215270]))
    unknown call_tmp[867097] "expr temp" "maybe param" "maybe type" "temp"
    (867100 'move' call_tmp[867097](215284 call * call_tmp[867073] call_tmp[867092]))
    (649379 'default init var' r[215283] call_tmp[867097])
    (215305 'end of statement')
    {
      unknown i[215306] "dead at end of block" "index var" "insert auto destroy"
      (649381 'init var' i[215306] 0)
      (560062 'end of statement')
      unknown tmp[215333] "maybe param" "temp"
      unknown call_tmp[867104] "expr temp" "maybe param" "maybe type" "temp"
      (867107 'move' call_tmp[867104](215312 call rank _mt[203] a[215257]))
      unknown call_tmp[867109] "expr temp" "maybe param" "maybe type" "temp"
      (867112 'move' call_tmp[867109](215309 call - call_tmp[867104] 1))
      (215345 'move' tmp[215333](215343 call chpl_compute_low_param_loop_bound 0 call_tmp[867109]))
      unknown tmp[215334] "maybe param" "temp"
      unknown call_tmp[867116] "expr temp" "maybe param" "maybe type" "temp"
      (867119 'move' call_tmp[867116](215352 call rank _mt[203] a[215257]))
      unknown call_tmp[867121] "expr temp" "maybe param" "maybe type" "temp"
      (867124 'move' call_tmp[867121](215350 call - call_tmp[867116] 1))
      (215358 'move' tmp[215334](215356 call chpl_compute_high_param_loop_bound 0 call_tmp[867121]))
      unknown tmp[215335] "maybe param" "temp"
      (215361 'move' tmp[215335] 1)
      ParamForLoop[215363]
      { i[215306] tmp[215333] tmp[215334] tmp[215335]
        unknown call_tmp[867126] "expr temp" "maybe param" "maybe type" "temp"
        (867129 'move' call_tmp[867126](215321 call r[215283] i[215306]))
        unknown call_tmp[867133] "expr temp" "maybe param" "maybe type" "temp"
        (867136 'move' call_tmp[867133](215329 call(215326 call (partial) dim _mt[203] a[215257]) i[215306]))
        unknown call_tmp[867138] "expr temp" "maybe param" "maybe type" "temp"
        (867141 'move' call_tmp[867138](215323 call chpl_by call_tmp[867133] b[215261]))
        (215318 call = call_tmp[867126] call_tmp[867138])
        (560063 'end of statement' r[215283] i[215306])
      }
      label _unused_continueLabel[215337]
      label _breakLabel[215336]
    }
    unknown call_tmp[867145] "expr temp" "maybe param" "maybe type" "temp"
    (867148 'move' call_tmp[867145](215377 call distribution _mt[203] a[215257]))
    unknown call_tmp[867152] "expr temp" "maybe param" "maybe type" "temp"
    (867155 'move' call_tmp[867152](215381 call rank _mt[203] a[215257]))
    unknown call_tmp[867159] "expr temp" "maybe param" "maybe type" "temp"
    (867162 'move' call_tmp[867159](215385 call _value _mt[203] a[215257]))
    unknown call_tmp[867166] "expr temp" "maybe param" "maybe type" "temp"
    (867169 'move' call_tmp[867166](215388 call idxType _mt[203] call_tmp[867159]))
    unknown call_tmp[867171] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (867174 'move' call_tmp[867171](1000350 'new' _domain[225034](?) call_tmp[867145] call_tmp[867152] call_tmp[867166] newStrides[215270] r[215283]))
    (619912 'move' ret[619907](619911 'deref' call_tmp[867171]))
    gotoReturn _end_chpl_by[619905] _end_chpl_by[619905]
    (560066 'end of statement' r[215283])
    label _end_chpl_by[619905]
    (619909 return ret[619907])
  }
  function chpl_align[215395](arg a[215398]:_domain[225034](?), arg b[215401]:_any[141](?)) : _unknown[42] "operator"
  {
    unknown ret[619918] "RVV" "temp"
    (215405 call errorIfNotRectangular a[215398] "align")
    (560068 'end of statement')
    unknown r[215411] "dead at end of block" "insert auto destroy"
    unknown call_tmp[867178] "expr temp" "maybe param" "maybe type" "temp"
    (867181 'move' call_tmp[867178](215415 call rank _mt[203] a[215398]))
    unknown call_tmp[867185] "expr temp" "maybe param" "maybe type" "temp"
    (867188 'move' call_tmp[867185](215421 call _value _mt[203] a[215398]))
    unknown call_tmp[867192] "expr temp" "maybe param" "maybe type" "temp"
    (867195 'move' call_tmp[867192](215424 call idxType _mt[203] call_tmp[867185]))
    unknown call_tmp[867199] "expr temp" "maybe param" "maybe type" "temp"
    (867202 'move' call_tmp[867199](215432 call strides _mt[203] a[215398]))
    unknown call_tmp[867204] "expr temp" "maybe param" "maybe type" "temp"
    (867207 'move' call_tmp[867204](215419 call range[240](?) call_tmp[867192] both[107114] call_tmp[867199]))
    unknown call_tmp[867209] "expr temp" "maybe param" "maybe type" "temp"
    (867212 'move' call_tmp[867209](215412 call * call_tmp[867178] call_tmp[867204]))
    (649383 'default init var' r[215411] call_tmp[867209])
    (215436 'end of statement')
    unknown call_tmp[867216] "expr temp" "maybe param" "maybe type" "temp"
    (867219 'move' call_tmp[867216](215442 call rank _mt[203] a[215398]))
    unknown call_tmp[867221] "maybe param" "maybe type" "temp"
    (867224 'move' call_tmp[867221](215440 call _makeIndexTuple call_tmp[867216] b[215401] "alignment"(expand = 1)))
    unknown t[215438] "dead at end of block" "insert auto destroy"
    (649385 'init var' t[215438] call_tmp[867221])
    (215452 'end of statement')
    {
      unknown i[215453] "dead at end of block" "index var" "insert auto destroy"
      (649387 'init var' i[215453] 0)
      (560069 'end of statement')
      unknown tmp[215482] "maybe param" "temp"
      unknown call_tmp[867228] "expr temp" "maybe param" "maybe type" "temp"
      (867231 'move' call_tmp[867228](215459 call rank _mt[203] a[215398]))
      unknown call_tmp[867233] "expr temp" "maybe param" "maybe type" "temp"
      (867236 'move' call_tmp[867233](215456 call - call_tmp[867228] 1))
      (215494 'move' tmp[215482](215492 call chpl_compute_low_param_loop_bound 0 call_tmp[867233]))
      unknown tmp[215483] "maybe param" "temp"
      unknown call_tmp[867240] "expr temp" "maybe param" "maybe type" "temp"
      (867243 'move' call_tmp[867240](215501 call rank _mt[203] a[215398]))
      unknown call_tmp[867245] "expr temp" "maybe param" "maybe type" "temp"
      (867248 'move' call_tmp[867245](215499 call - call_tmp[867240] 1))
      (215507 'move' tmp[215483](215505 call chpl_compute_high_param_loop_bound 0 call_tmp[867245]))
      unknown tmp[215484] "maybe param" "temp"
      (215510 'move' tmp[215484] 1)
      ParamForLoop[215512]
      { i[215453] tmp[215482] tmp[215483] tmp[215484]
        unknown call_tmp[867250] "expr temp" "maybe param" "maybe type" "temp"
        (867253 'move' call_tmp[867250](215468 call r[215411] i[215453]))
        unknown call_tmp[867257] "expr temp" "maybe param" "maybe type" "temp"
        (867260 'move' call_tmp[867257](215476 call(215473 call (partial) dim _mt[203] a[215398]) i[215453]))
        unknown call_tmp[867262] "expr temp" "maybe param" "maybe type" "temp"
        (867265 'move' call_tmp[867262](215479 call t[215438] i[215453]))
        unknown call_tmp[867267] "expr temp" "maybe param" "maybe type" "temp"
        (867270 'move' call_tmp[867267](215470 call chpl_align call_tmp[867257] call_tmp[867262]))
        (215465 call = call_tmp[867250] call_tmp[867267])
        (560070 'end of statement' r[215411] i[215453] t[215438] i[215453])
      }
      label _unused_continueLabel[215486]
      label _breakLabel[215485]
    }
    unknown call_tmp[867274] "expr temp" "maybe param" "maybe type" "temp"
    (867277 'move' call_tmp[867274](215526 call distribution _mt[203] a[215398]))
    unknown call_tmp[867281] "expr temp" "maybe param" "maybe type" "temp"
    (867284 'move' call_tmp[867281](215530 call rank _mt[203] a[215398]))
    unknown call_tmp[867288] "expr temp" "maybe param" "maybe type" "temp"
    (867291 'move' call_tmp[867288](215534 call _value _mt[203] a[215398]))
    unknown call_tmp[867295] "expr temp" "maybe param" "maybe type" "temp"
    (867298 'move' call_tmp[867295](215537 call idxType _mt[203] call_tmp[867288]))
    unknown call_tmp[867302] "expr temp" "maybe param" "maybe type" "temp"
    (867305 'move' call_tmp[867302](215541 call strides _mt[203] a[215398]))
    unknown call_tmp[867307] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (867310 'move' call_tmp[867307](1000351 'new' _domain[225034](?) call_tmp[867274] call_tmp[867281] call_tmp[867295] call_tmp[867302] r[215411]))
    (619923 'move' ret[619918](619922 'deref' call_tmp[867307]))
    gotoReturn _end_chpl_align[619916] _end_chpl_align[619916]
    (560075 'end of statement' r[215411])
    label _end_chpl_align[619916]
    (619920 return ret[619918])
  }
  function chpl_domainDistIsLayout[215547](arg d[215550]:_domain[225034](?)) param : _unknown[42]
  {
    unknown ret[619929] "RVV" "param" "temp"
    unknown call_tmp[867314] "expr temp" "maybe param" "maybe type" "temp"
    (867317 'move' call_tmp[867314](215556 call distribution _mt[203] d[215550]))
    unknown call_tmp[867321] "expr temp" "maybe param" "maybe type" "temp"
    (867324 'move' call_tmp[867321](215559 call _value _mt[203] call_tmp[867314]))
    unknown call_tmp[867328] "expr temp" "maybe param" "maybe type" "temp"
    (867331 'move' call_tmp[867328](215565 call(215562 call (partial) dsiIsLayout _mt[203] call_tmp[867321])))
    (619934 'move' ret[619929](619933 'deref' call_tmp[867328]))
    (619931 return ret[619929])
  }
  function chpl__coerceCopy[215568](arg dstType[215571]:_domain[225034](?), arg rhs[215575]:_domain[225034](?), arg definedConst[215579]:bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown ret[619938] "RVV" "temp"
    unknown call_tmp[867333] "maybe param" "maybe type" "temp"
    (867336 'move' call_tmp[867333](215586 call chpl_domainDistIsLayout rhs[215575]))
    unknown rhsIsLayout[215584] "dead at end of block" "param"
    (649389 'init var' rhsIsLayout[215584] call_tmp[867333])
    (215589 'end of statement')
    unknown call_tmp[867338] "maybe param" "maybe type" "temp"
    (867341 'move' call_tmp[867338](215593 call chpl__coerceHelp dstType[215571] definedConst[215579]))
    unknown lhs[215591] "dead at end of block" "insert auto destroy" "no copy"
    (649391 'init var' lhs[215591] call_tmp[867338])
    (215597 'end of statement')
    (215598 call = lhs[215591] rhs[215575])
    (560078 'end of statement' lhs[215591])
    unknown tmp[496170] "maybe param" "temp"
    (496181 'move' tmp[496170](215611 call chpl_domainDistIsLayout lhs[215591]))
    unknown call_tmp[867343] "expr temp" "maybe param" "maybe type" "temp"
    (867346 'move' call_tmp[867343](496183 call _cond_invalid tmp[496170]))
    if call_tmp[867343]
    {
      (496186 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[692422] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692423] "maybe param" "temp"
    unknown call_tmp[867348] "expr temp" "maybe param" "maybe type" "temp"
    (867351 'move' call_tmp[867348](496171 call isTrue tmp[496170]))
    (692428 'move' tmp[692423](692426 call _cond_test call_tmp[867348]))
    if tmp[692423]
    {
      unknown tmp[692430] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[867353] "expr temp" "maybe param" "maybe type" "temp"
      (867356 'move' call_tmp[867353](215613 call ! rhsIsLayout[215584]))
      (692432 'move' tmp[692430](496174 call isTrue call_tmp[867353]))
      (692437 'move' tmp[692422](692434 '_paramFoldLogical' tmp[692423] tmp[692430]))
    }
    {
      (692442 'move' tmp[692422](692439 '_paramFoldLogical' tmp[692423] 0))
    }
    unknown call_tmp[867358] "expr temp" "maybe param" "maybe type" "temp"
    (867361 'move' call_tmp[867358](215616 call _cond_test tmp[692422]))
    if call_tmp[867358]
    {
      (215603 call compilerWarning "initializing a non-distributed domain from a distributed domain. If you didn't mean to do that, add a dmapped clause to the ty)
    }
    (619943 'move' ret[619938](619942 'deref' lhs[215591]))
    gotoReturn _end_chpl__coerceCopy[619936] _end_chpl__coerceCopy[619936]
    (560082 'end of statement' lhs[215591])
    label _end_chpl__coerceCopy[619936]
    (619940 return ret[619938])
  }
  function chpl__coerceMove[215625](arg dstType[215628]:_domain[225034](?), in arg rhs[215632]:_domain[225034](?), arg definedConst[215636]:bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown ret[619949] "RVV" "temp"
    unknown call_tmp[867363] "maybe param" "maybe type" "temp"
    (867366 'move' call_tmp[867363](215643 call chpl_domainDistIsLayout rhs[215632]))
    unknown rhsIsLayout[215641] "dead at end of block" "param"
    (649393 'init var' rhsIsLayout[215641] call_tmp[867363])
    (215646 'end of statement')
    unknown call_tmp[867368] "maybe param" "maybe type" "temp"
    (867371 'move' call_tmp[867368](215650 call chpl__coerceHelp dstType[215628] definedConst[215636]))
    unknown lhs[215648] "dead at end of block" "insert auto destroy" "no copy"
    (649395 'init var' lhs[215648] call_tmp[867368])
    (215654 'end of statement')
    (215655 call = lhs[215648] rhs[215632])
    (560084 'end of statement' lhs[215648])
    unknown tmp[496191] "maybe param" "temp"
    (496202 'move' tmp[496191](215666 call chpl_domainDistIsLayout lhs[215648]))
    unknown call_tmp[867373] "expr temp" "maybe param" "maybe type" "temp"
    (867376 'move' call_tmp[867373](496204 call _cond_invalid tmp[496191]))
    if call_tmp[867373]
    {
      (496207 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[692449] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692450] "maybe param" "temp"
    unknown call_tmp[867378] "expr temp" "maybe param" "maybe type" "temp"
    (867381 'move' call_tmp[867378](496192 call isTrue tmp[496191]))
    (692455 'move' tmp[692450](692453 call _cond_test call_tmp[867378]))
    if tmp[692450]
    {
      unknown tmp[692457] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[867383] "expr temp" "maybe param" "maybe type" "temp"
      (867386 'move' call_tmp[867383](215668 call ! rhsIsLayout[215641]))
      (692459 'move' tmp[692457](496195 call isTrue call_tmp[867383]))
      (692464 'move' tmp[692449](692461 '_paramFoldLogical' tmp[692450] tmp[692457]))
    }
    {
      (692469 'move' tmp[692449](692466 '_paramFoldLogical' tmp[692450] 0))
    }
    unknown call_tmp[867388] "expr temp" "maybe param" "maybe type" "temp"
    (867391 'move' call_tmp[867388](215671 call _cond_test tmp[692449]))
    if call_tmp[867388]
    {
      (215660 call compilerWarning "initializing a non-distributed domain from a distributed domain. If you didn't mean to do that, add a dmapped clause to the ty)
    }
    (619954 'move' ret[619949](619953 'deref' lhs[215648]))
    gotoReturn _end_chpl__coerceMove[619947] _end_chpl__coerceMove[619947]
    (560088 'end of statement' lhs[215648])
    label _end_chpl__coerceMove[619947]
    (619951 return ret[619949])
  }
  function chpl__coerceCopy[215680](arg dstType[215683]:_domain[225034](?), arg rhs[215687]:_tuple[246](?), arg definedConst[215691]:bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown ret[619960] "RVV" "temp"
    unknown call_tmp[867393] "maybe param" "maybe type" "temp"
    (867396 'move' call_tmp[867393](215698 call chpl__coerceHelp dstType[215683] definedConst[215691]))
    unknown lhs[215696] "dead at end of block" "insert auto destroy" "no copy"
    (649397 'init var' lhs[215696] call_tmp[867393])
    (215702 'end of statement')
    unknown call_tmp[867398] "expr temp" "maybe param" "maybe type" "temp"
    (867401 'move' call_tmp[867398](215719 call chpl__isLegalRectTupDomAssign lhs[215696] rhs[215687]))
    unknown call_tmp[867403] "expr temp" "maybe param" "maybe type" "temp"
    (867406 'move' call_tmp[867403](215722 call _cond_test call_tmp[867398]))
    if call_tmp[867403]
    {
      unknown call_tmp[867408] "expr temp" "maybe param" "maybe type" "temp"
      (867411 'move' call_tmp[867408](215711 call chpl__buildDomainExpr(215709 'expand_tuple' rhs[215687]) 1))
      (215704 call = lhs[215696] call_tmp[867408])
      (560090 'end of statement' lhs[215696])
    }
    {
      (215714 call = lhs[215696] rhs[215687])
      (560092 'end of statement' lhs[215696])
    }
    (619965 'move' ret[619960](619964 'deref' lhs[215696]))
    gotoReturn _end_chpl__coerceCopy[619958] _end_chpl__coerceCopy[619958]
    (560094 'end of statement' lhs[215696])
    label _end_chpl__coerceCopy[619958]
    (619962 return ret[619960])
  }
  function chpl__coerceMove[215730](arg dstType[215733]:_domain[225034](?), in arg rhs[215737]:_tuple[246](?), arg definedConst[215741]:bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown ret[619971] "RVV" "temp"
    unknown call_tmp[867413] "maybe param" "maybe type" "temp"
    (867416 'move' call_tmp[867413](215748 call chpl__coerceHelp dstType[215733] definedConst[215741]))
    unknown lhs[215746] "dead at end of block" "insert auto destroy" "no copy"
    (649399 'init var' lhs[215746] call_tmp[867413])
    (215752 'end of statement')
    unknown call_tmp[867418] "expr temp" "maybe param" "maybe type" "temp"
    (867421 'move' call_tmp[867418](215769 call chpl__isLegalRectTupDomAssign lhs[215746] rhs[215737]))
    unknown call_tmp[867423] "expr temp" "maybe param" "maybe type" "temp"
    (867426 'move' call_tmp[867423](215772 call _cond_test call_tmp[867418]))
    if call_tmp[867423]
    {
      unknown call_tmp[867428] "expr temp" "maybe param" "maybe type" "temp"
      (867431 'move' call_tmp[867428](215761 call chpl__buildDomainExpr(215759 'expand_tuple' rhs[215737]) 1))
      (215754 call = lhs[215746] call_tmp[867428])
      (560096 'end of statement' lhs[215746])
    }
    {
      (215764 call = lhs[215746] rhs[215737])
      (560098 'end of statement' lhs[215746])
    }
    (619976 'move' ret[619971](619975 'deref' lhs[215746]))
    gotoReturn _end_chpl__coerceMove[619969] _end_chpl__coerceMove[619969]
    (560100 'end of statement' lhs[215746])
    label _end_chpl__coerceMove[619969]
    (619973 return ret[619971])
  }
  function chpl__coerceCopy[215780](arg dstType[215783]:_domain[225034](?), arg rhs[215789]:range[240](?), arg definedConst[215793]:bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown ret[619982] "RVV" "temp"
    unknown call_tmp[867433] "maybe param" "maybe type" "temp"
    (867436 'move' call_tmp[867433](215800 call chpl__coerceHelp dstType[215783] definedConst[215793]))
    unknown lhs[215798] "dead at end of block" "insert auto destroy" "no copy"
    (649401 'init var' lhs[215798] call_tmp[867433])
    (215804 'end of statement')
    unknown call_tmp[867438] "expr temp" "maybe param" "maybe type" "temp"
    (867441 'move' call_tmp[867438](215811 call chpl__buildDomainExpr rhs[215789] 1))
    (215805 call = lhs[215798] call_tmp[867438])
    (560102 'end of statement' lhs[215798])
    (619987 'move' ret[619982](619986 'deref' lhs[215798]))
    gotoReturn _end_chpl__coerceCopy[619980] _end_chpl__coerceCopy[619980]
    (560104 'end of statement' lhs[215798])
    label _end_chpl__coerceCopy[619980]
    (619984 return ret[619982])
  }
  function chpl__coerceMove[215817](arg dstType[215820]:_domain[225034](?), in arg rhs[215826]:range[240](?), arg definedConst[215830]:bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown ret[619993] "RVV" "temp"
    unknown call_tmp[867443] "maybe param" "maybe type" "temp"
    (867446 'move' call_tmp[867443](215837 call chpl__coerceHelp dstType[215820] definedConst[215830]))
    unknown lhs[215835] "dead at end of block" "insert auto destroy" "no copy"
    (649403 'init var' lhs[215835] call_tmp[867443])
    (215841 'end of statement')
    unknown call_tmp[867448] "expr temp" "maybe param" "maybe type" "temp"
    (867451 'move' call_tmp[867448](215848 call chpl__buildDomainExpr rhs[215826] 1))
    (215842 call = lhs[215835] call_tmp[867448])
    (560106 'end of statement' lhs[215835])
    (619998 'move' ret[619993](619997 'deref' lhs[215835]))
    gotoReturn _end_chpl__coerceMove[619991] _end_chpl__coerceMove[619991]
    (560108 'end of statement' lhs[215835])
    label _end_chpl__coerceMove[619991]
    (619995 return ret[619993])
  }
  function chpl__coerceCopy[215854](arg dstType[215857]:_domain[225034](?), arg rhs[215861]:_iteratorRecord[165](?), arg definedConst[215865]:bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown ret[620004] "RVV" "temp"
    unknown call_tmp[867453] "maybe param" "maybe type" "temp"
    (867456 'move' call_tmp[867453](215872 call chpl__coerceHelp dstType[215857] definedConst[215865]))
    unknown lhs[215870] "dead at end of block" "insert auto destroy" "no copy"
    (649405 'init var' lhs[215870] call_tmp[867453])
    (215876 'end of statement')
    unknown call_tmp[867460] "expr temp" "maybe param" "maybe type" "temp"
    (867463 'move' call_tmp[867460](215891 call(215888 call (partial) isRectangular _mt[203] lhs[215870])))
    unknown call_tmp[867465] "expr temp" "maybe param" "maybe type" "temp"
    (867468 'move' call_tmp[867465](215892 call _cond_test call_tmp[867460]))
    if call_tmp[867465]
    {
      unknown call_tmp[867470] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (867473 'move' call_tmp[867470](215883 'typeof' rhs[215861]))
      unknown call_tmp[867475] "expr temp" "maybe param" "maybe type" "temp"
      (867478 'move' call_tmp[867475](215880 call : call_tmp[867470] string[244]))
      (215878 call compilerError "assigning " call_tmp[867475] " to a rectangular domain")
    }
    (215901 call(215898 call (partial) clear _mt[203] lhs[215870]))
    (560111 'end of statement' lhs[215870])
    {
      unknown _indexOfInterest[215912] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[215913] "expr temp" "temp"
      (215922 'move' _iterator[215913](215920 call _getIterator rhs[215861]))
      Defer
      {
        {
          (215937 call _freeIterator _iterator[215913])
        }
      }
      { scopeless type
        (215927 'move' _indexOfInterest[215912](215924 call iteratorIndex _iterator[215913]))
      }
      ForLoop[215914]
      {
        unknown ind[215902] "index var" "insert auto destroy"
        (560114 'end of statement')
        (215932 'move' ind[215902] _indexOfInterest[215912])
        (560115 'end of statement' ind[215902])
        {
          (215910 call(215907 call (partial) add _mt[203] lhs[215870]) ind[215902])
          (560117 'end of statement' lhs[215870] ind[215902])
        }
        label _continueLabel[215917]
        _indexOfInterest[215912]
        _iterator[215913]
      }
      label _breakLabel[215918]
    }
    (620009 'move' ret[620004](620008 'deref' lhs[215870]))
    gotoReturn _end_chpl__coerceCopy[620002] _end_chpl__coerceCopy[620002]
    (560120 'end of statement' lhs[215870])
    label _end_chpl__coerceCopy[620002]
    (620006 return ret[620004])
  }
  function chpl__coerceMove[215948](arg dstType[215951]:_domain[225034](?), arg rhs[215955]:_iteratorRecord[165](?), arg definedConst[215959]:bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown ret[620015] "RVV" "temp"
    unknown call_tmp[867484] "maybe param" "maybe type" "temp"
    (867487 'move' call_tmp[867484](215966 call chpl__coerceHelp dstType[215951] definedConst[215959]))
    unknown lhs[215964] "dead at end of block" "insert auto destroy" "no copy"
    (649407 'init var' lhs[215964] call_tmp[867484])
    (215970 'end of statement')
    unknown call_tmp[867491] "expr temp" "maybe param" "maybe type" "temp"
    (867494 'move' call_tmp[867491](215985 call(215982 call (partial) isRectangular _mt[203] lhs[215964])))
    unknown call_tmp[867496] "expr temp" "maybe param" "maybe type" "temp"
    (867499 'move' call_tmp[867496](215986 call _cond_test call_tmp[867491]))
    if call_tmp[867496]
    {
      unknown call_tmp[867501] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (867504 'move' call_tmp[867501](215977 'typeof' rhs[215955]))
      unknown call_tmp[867506] "expr temp" "maybe param" "maybe type" "temp"
      (867509 'move' call_tmp[867506](215974 call : call_tmp[867501] string[244]))
      (215972 call compilerError "assigning " call_tmp[867506] " to a rectangular domain")
    }
    (215995 call(215992 call (partial) clear _mt[203] lhs[215964]))
    (560123 'end of statement' lhs[215964])
    {
      unknown _indexOfInterest[216006] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[216007] "expr temp" "temp"
      (216016 'move' _iterator[216007](216014 call _getIterator rhs[215955]))
      Defer
      {
        {
          (216031 call _freeIterator _iterator[216007])
        }
      }
      { scopeless type
        (216021 'move' _indexOfInterest[216006](216018 call iteratorIndex _iterator[216007]))
      }
      ForLoop[216008]
      {
        unknown ind[215996] "index var" "insert auto destroy"
        (560126 'end of statement')
        (216026 'move' ind[215996] _indexOfInterest[216006])
        (560127 'end of statement' ind[215996])
        {
          (216004 call(216001 call (partial) add _mt[203] lhs[215964]) ind[215996])
          (560129 'end of statement' lhs[215964] ind[215996])
        }
        label _continueLabel[216011]
        _indexOfInterest[216006]
        _iterator[216007]
      }
      label _breakLabel[216012]
    }
    (620020 'move' ret[620015](620019 'deref' lhs[215964]))
    gotoReturn _end_chpl__coerceMove[620013] _end_chpl__coerceMove[620013]
    (560132 'end of statement' lhs[215964])
    label _end_chpl__coerceMove[620013]
    (620017 return ret[620015])
  }
  function chpl__coerceCopy[216042](arg dstType[216045]:_domain[225034](?), arg rhs[216048]:_any[141](?), arg definedConst[216051]:bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown ret[620026] "RVV" "temp"
    unknown call_tmp[867515] "maybe param" "maybe type" "temp"
    (867518 'move' call_tmp[867515](216058 call chpl__coerceHelp dstType[216045] definedConst[216051]))
    unknown lhs[216056] "dead at end of block" "insert auto destroy" "no copy"
    (649409 'init var' lhs[216056] call_tmp[867515])
    (216062 'end of statement')
    unknown call_tmp[867522] "expr temp" "maybe param" "maybe type" "temp"
    (867525 'move' call_tmp[867522](216077 call(216074 call (partial) isRectangular _mt[203] lhs[216056])))
    unknown call_tmp[867527] "expr temp" "maybe param" "maybe type" "temp"
    (867530 'move' call_tmp[867527](216078 call _cond_test call_tmp[867522]))
    if call_tmp[867527]
    {
      unknown call_tmp[867532] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (867535 'move' call_tmp[867532](216069 'typeof' rhs[216048]))
      unknown call_tmp[867537] "expr temp" "maybe param" "maybe type" "temp"
      (867540 'move' call_tmp[867537](216066 call : call_tmp[867532] string[244]))
      (216064 call compilerError "assigning " call_tmp[867537] " to a rectangular domain")
    }
    unknown call_tmp[867542] "expr temp" "maybe param" "maybe type" "temp"
    (867545 'move' call_tmp[867542](216096 call canBeIteratedOver rhs[216048]))
    unknown call_tmp[867547] "expr temp" "maybe param" "maybe type" "temp"
    (867550 'move' call_tmp[867547](216093 call ! call_tmp[867542]))
    unknown call_tmp[867552] "expr temp" "maybe param" "maybe type" "temp"
    (867555 'move' call_tmp[867552](216098 call _cond_test call_tmp[867547]))
    if call_tmp[867552]
    {
      unknown call_tmp[867557] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (867560 'move' call_tmp[867557](216089 'typeof' rhs[216048]))
      unknown call_tmp[867562] "expr temp" "maybe param" "maybe type" "temp"
      (867565 'move' call_tmp[867562](216086 call : call_tmp[867557] string[244]))
      (216084 call compilerError "assigning " call_tmp[867562] " to an irregular domain")
    }
    (216107 call(216104 call (partial) clear _mt[203] lhs[216056]))
    (560136 'end of statement' lhs[216056])
    {
      unknown _indexOfInterest[216118] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[216119] "expr temp" "temp"
      (216128 'move' _iterator[216119](216126 call _getIterator rhs[216048]))
      Defer
      {
        {
          (216143 call _freeIterator _iterator[216119])
        }
      }
      { scopeless type
        (216133 'move' _indexOfInterest[216118](216130 call iteratorIndex _iterator[216119]))
      }
      ForLoop[216120]
      {
        unknown ind[216108] "index var" "insert auto destroy"
        (560139 'end of statement')
        (216138 'move' ind[216108] _indexOfInterest[216118])
        (560140 'end of statement' ind[216108])
        {
          (216116 call(216113 call (partial) add _mt[203] lhs[216056]) ind[216108])
          (560142 'end of statement' lhs[216056] ind[216108])
        }
        label _continueLabel[216123]
        _indexOfInterest[216118]
        _iterator[216119]
      }
      label _breakLabel[216124]
    }
    (620031 'move' ret[620026](620030 'deref' lhs[216056]))
    gotoReturn _end_chpl__coerceCopy[620024] _end_chpl__coerceCopy[620024]
    (560145 'end of statement' lhs[216056])
    label _end_chpl__coerceCopy[620024]
    (620028 return ret[620026])
  }
  function chpl__coerceMove[216154](arg dstType[216157]:_domain[225034](?), in arg rhs[216160]:_any[141](?), arg definedConst[216163]:bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown ret[620037] "RVV" "temp"
    unknown call_tmp[867571] "maybe param" "maybe type" "temp"
    (867574 'move' call_tmp[867571](216170 call chpl__coerceHelp dstType[216157] definedConst[216163]))
    unknown lhs[216168] "dead at end of block" "insert auto destroy" "no copy"
    (649411 'init var' lhs[216168] call_tmp[867571])
    (216174 'end of statement')
    unknown call_tmp[867578] "expr temp" "maybe param" "maybe type" "temp"
    (867581 'move' call_tmp[867578](216189 call(216186 call (partial) isRectangular _mt[203] lhs[216168])))
    unknown call_tmp[867583] "expr temp" "maybe param" "maybe type" "temp"
    (867586 'move' call_tmp[867583](216190 call _cond_test call_tmp[867578]))
    if call_tmp[867583]
    {
      unknown call_tmp[867588] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (867591 'move' call_tmp[867588](216181 'typeof' rhs[216160]))
      unknown call_tmp[867593] "expr temp" "maybe param" "maybe type" "temp"
      (867596 'move' call_tmp[867593](216178 call : call_tmp[867588] string[244]))
      (216176 call compilerError "assigning " call_tmp[867593] " to a rectangular domain")
    }
    unknown call_tmp[867598] "expr temp" "maybe param" "maybe type" "temp"
    (867601 'move' call_tmp[867598](216208 call canBeIteratedOver rhs[216160]))
    unknown call_tmp[867603] "expr temp" "maybe param" "maybe type" "temp"
    (867606 'move' call_tmp[867603](216205 call ! call_tmp[867598]))
    unknown call_tmp[867608] "expr temp" "maybe param" "maybe type" "temp"
    (867611 'move' call_tmp[867608](216210 call _cond_test call_tmp[867603]))
    if call_tmp[867608]
    {
      unknown call_tmp[867613] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (867616 'move' call_tmp[867613](216201 'typeof' rhs[216160]))
      unknown call_tmp[867618] "expr temp" "maybe param" "maybe type" "temp"
      (867621 'move' call_tmp[867618](216198 call : call_tmp[867613] string[244]))
      (216196 call compilerError "assigning " call_tmp[867618] " to an irregular domain")
    }
    (216219 call(216216 call (partial) clear _mt[203] lhs[216168]))
    (560149 'end of statement' lhs[216168])
    {
      unknown _indexOfInterest[216230] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[216231] "expr temp" "temp"
      (216240 'move' _iterator[216231](216238 call _getIterator rhs[216160]))
      Defer
      {
        {
          (216255 call _freeIterator _iterator[216231])
        }
      }
      { scopeless type
        (216245 'move' _indexOfInterest[216230](216242 call iteratorIndex _iterator[216231]))
      }
      ForLoop[216232]
      {
        unknown ind[216220] "index var" "insert auto destroy"
        (560152 'end of statement')
        (216250 'move' ind[216220] _indexOfInterest[216230])
        (560153 'end of statement' ind[216220])
        {
          (216228 call(216225 call (partial) add _mt[203] lhs[216168]) ind[216220])
          (560155 'end of statement' lhs[216168] ind[216220])
        }
        label _continueLabel[216235]
        _indexOfInterest[216230]
        _iterator[216231]
      }
      label _breakLabel[216236]
    }
    (620042 'move' ret[620037](620041 'deref' lhs[216168]))
    gotoReturn _end_chpl__coerceMove[620035] _end_chpl__coerceMove[620035]
    (560158 'end of statement' lhs[216168])
    label _end_chpl__coerceMove[620035]
    (620039 return ret[620037])
  }
  function _domain[225034](?).chpl__promotionType[216283](arg _mt[216287]:_MT[201], arg this[216285]:_domain[225034](?)) type : _unknown[42] "method" "primary method"
  {
    unknown ret[620048] "RVV" "temp" "type variable"
    unknown call_tmp[867629] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (867632 'move' call_tmp[867629](443501 call rank _mt[203] this[216285]))
    unknown call_tmp[867636] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (867639 'move' call_tmp[867636](406204 call _value _mt[203] this[216285]))
    unknown call_tmp[867643] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (867646 'move' call_tmp[867643](216295 call idxType _mt[203] call_tmp[867636]))
    unknown call_tmp[867648] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (867651 'move' call_tmp[867648](216291 call chpl__buildIndexType call_tmp[867629] call_tmp[867643]))
    (620053 'move' ret[620048](620052 'deref' call_tmp[867648]))
    (620050 return ret[620048])
  }
  function _domain[225034](?).init[216300](arg _mt[216314]:_MT[201], ref arg this[216302]:_domain[225034](?), arg _pid[216305]:int(64)[10], arg _instance[216308]:_any[141](?), arg _unowned[216311]:bool[19]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown _pid[528491] "temp"
    (528494 'init var' _pid[528491] _pid[216305] int(64)[10])
    (528496 'init field' this[216302] c"_pid" _pid[528491])
    (560161 'end of statement')
    unknown _instance[528500] "temp"
    (528502 'init var' _instance[528500] _instance[216308])
    (528504 'init field' this[216302] c"_instance" _instance[528500])
    (560162 'end of statement')
    unknown _unowned[528508] "temp"
    (528511 'init var' _unowned[528508] _unowned[216311] bool[19])
    (528513 'init field' this[216302] c"_unowned" _unowned[528508])
    (560163 'end of statement')
    (620055 return _void[46])
  }
  function _domain[225034](?).init[216340](arg _mt[216346]:_MT[201], ref arg this[216342]:_domain[225034](?), arg value[216344]:_any[141](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[867653] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (867656 'move' call_tmp[867653](216358 'typeof' value[216344]))
    unknown call_tmp[867658] "expr temp" "maybe param" "maybe type" "temp"
    (867661 'move' call_tmp[867658](216356 call _to_unmanaged call_tmp[867653]))
    unknown call_tmp[867663] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (867666 'move' call_tmp[867663](216360 'typeof' value[216344]))
    unknown call_tmp[867668] "expr temp" "maybe param" "maybe type" "temp"
    (867671 'move' call_tmp[867668](216353 call != call_tmp[867658] call_tmp[867663]))
    unknown call_tmp[867673] "expr temp" "maybe param" "maybe type" "temp"
    (867676 'move' call_tmp[867673](216361 call _cond_test call_tmp[867668]))
    if call_tmp[867673]
    {
      (216350 call compilerError "Domain on borrow created")
    }
    unknown call_tmp[867678] "expr temp" "maybe param" "maybe type" "temp"
    (867681 'move' call_tmp[867678](216408 call _isPrivatized value[216344]))
    unknown call_tmp[867683] "expr temp" "maybe param" "maybe type" "temp"
    (867686 'move' call_tmp[867683](216410 call _cond_test call_tmp[867678]))
    if call_tmp[867683]
    {
      unknown call_tmp[867690] "expr temp" "maybe param" "maybe type" "temp"
      (867693 'move' call_tmp[867690](216391 call pid _mt[203] value[216344]))
      unknown call_tmp[867695] "expr temp" "maybe param" "maybe type" "temp"
      (867698 'move' call_tmp[867695](216388 call == call_tmp[867690] nullPid[247489]))
      unknown call_tmp[867700] "expr temp" "maybe param" "maybe type" "temp"
      (867703 'move' call_tmp[867700](216395 call _cond_test call_tmp[867695]))
      if call_tmp[867700]
      {
        unknown call_tmp[867705] "maybe param" "maybe type" "temp"
        (867708 'move' call_tmp[867705](216375 call _newPrivatizedClass value[216344]))
        unknown _pid[528517] "temp"
        (528520 'init var' _pid[528517] call_tmp[867705] int(64)[10])
        (528522 'init field' this[216342] c"_pid" _pid[528517])
        (560165 'end of statement')
      }
      {
        unknown call_tmp[867712] "maybe param" "maybe type" "temp"
        (867715 'move' call_tmp[867712](216385 call pid _mt[203] value[216344]))
        unknown _pid[528526] "temp"
        (528529 'init var' _pid[528526] call_tmp[867712] int(64)[10])
        (528531 'init field' this[216342] c"_pid" _pid[528526])
        (560166 'end of statement')
      }
    }
    {
      unknown _pid[528535] "temp"
      (528538 'init var' _pid[528535] nullPid[247489] int(64)[10])
      (528540 'init field' this[216342] c"_pid" _pid[528535])
      (560167 'end of statement')
    }
    unknown _instance[528544] "temp"
    (528546 'init var' _instance[528544] value[216344])
    (528548 'init field' this[216342] c"_instance" _instance[528544])
    (560168 'end of statement')
    val _unowned[528553]:bool[19] "temp"
    (528556 'default init var' _unowned[528553] bool[19])
    (528558 '.=' this[216342] c"_unowned" _unowned[528553])
    (560169 'end of statement')
    (620057 return _void[46])
  }
  function _domain[225034](?).init[216423](arg _mt[216450]:_MT[201], ref arg this[216425]:_domain[225034](?), arg d[216427]:_any[141](?), param arg rank[216430]:int(64)[10], arg idxType[216434]:_any[141](?) =
  int(64)[10], param arg strides[216441] :
  one[107127] =
  one[107127], arg definedConst[216446]:bool[19] =
  0) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[867721] "expr temp" "maybe param" "maybe type" "temp"
    (867724 'move' call_tmp[867721](216464 call(216461 call (partial) newRectangularDom _mt[203] d[216427]) rank[216430] idxType[216434] strides[216441] definedConst[216446]))
    (216457 call(216454 call (partial) init _mt[203] this[216425]) call_tmp[867721])
    (620059 return _void[46])
  }
  function _domain[225034](?).init[216471](arg _mt[216512]:_MT[201], ref arg this[216473]:_domain[225034](?), arg d[216475]:_any[141](?), param arg rank[216478]:int(64)[10], arg idxType[216482]:_any[141](?) =
  int(64)[10], param arg strides[216489] :
  one[107127] =
  one[107127], arg ranges[216503] :
  unknown call_tmp[867726] "expr temp" "maybe param" "maybe type" "temp", arg definedConst[216508]:bool[19] =
  0) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[867735] "expr temp" "maybe param" "maybe type" "temp"
    (867738 'move' call_tmp[867735](216524 call(216521 call (partial) newRectangularDom _mt[203] d[216475]) rank[216478] idxType[216482] strides[216489] ranges[216503] definedConst[216508]))
    (216519 call(216516 call (partial) init _mt[203] this[216473]) call_tmp[867735])
    (620061 return _void[46])
  }
  function _domain[225034](?).init[216532](arg _mt[216552]:_MT[201], ref arg this[216534]:_domain[225034](?), arg d[216536]:_any[141](?), arg idxType[216538]:_any[141](?), param arg parSafe[216542]:bool[19] =
  1, arg definedConst[216548]:bool[19] =
  0) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[867744] "expr temp" "maybe param" "maybe type" "temp"
    (867747 'move' call_tmp[867744](216566 call(216563 call (partial) newAssociativeDom _mt[203] d[216536]) idxType[216538] parSafe[216542]))
    (216559 call(216556 call (partial) init _mt[203] this[216534]) call_tmp[867744])
    (620063 return _void[46])
  }
  function _domain[225034](?).init[216571](arg _mt[216587]:_MT[201], ref arg this[216573]:_domain[225034](?), arg d[216575]:_any[141](?), arg dom[216578]:_domain[225034](?), arg definedConst[216583]:bool[19] =
  0) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[867755] "expr temp" "maybe param" "maybe type" "temp"
    (867758 'move' call_tmp[867755](216603 call rank _mt[203] dom[216578]))
    unknown call_tmp[867762] "expr temp" "maybe param" "maybe type" "temp"
    (867765 'move' call_tmp[867762](216607 call _value _mt[203] dom[216578]))
    unknown call_tmp[867769] "expr temp" "maybe param" "maybe type" "temp"
    (867772 'move' call_tmp[867769](216610 call idxType _mt[203] call_tmp[867762]))
    unknown call_tmp[867774] "expr temp" "maybe param" "maybe type" "temp"
    (867777 'move' call_tmp[867774](216601 call(216598 call (partial) newSparseDom _mt[203] d[216575]) call_tmp[867755] call_tmp[867769] dom[216578]))
    (216594 call(216591 call (partial) init _mt[203] this[216573]) call_tmp[867774])
    (620065 return _void[46])
  }
  function _domain[225034](?).init=[216616](arg _mt[216624]:_MT[201], ref arg this[216618]:_domain[225034](?), const  ref arg other[216621]:_domain[225034](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[867783] "expr temp" "maybe param" "maybe type" "temp"
    (867786 'move' call_tmp[867783](216638 call distribution _mt[203] other[216621]))
    unknown call_tmp[867790] "expr temp" "maybe param" "maybe type" "temp"
    (867793 'move' call_tmp[867790](216642 call rank _mt[203] other[216621]))
    unknown call_tmp[867797] "expr temp" "maybe param" "maybe type" "temp"
    (867800 'move' call_tmp[867797](216646 call idxType _mt[203] other[216621]))
    unknown call_tmp[867804] "expr temp" "maybe param" "maybe type" "temp"
    (867807 'move' call_tmp[867804](216650 call strides _mt[203] other[216621]))
    unknown call_tmp[867811] "expr temp" "maybe param" "maybe type" "temp"
    (867814 'move' call_tmp[867811](216657 call(216654 call (partial) dims _mt[203] other[216621])))
    (216636 call(216633 call (partial) init _mt[203] this[216618]) call_tmp[867783] call_tmp[867790] call_tmp[867797] call_tmp[867804] call_tmp[867811])
    (620067 return _void[46])
  }
  where {
    (216630 call(216627 call (partial) isRectangular _mt[203] other[216621]))
  }
  function _domain[225034](?).init=[216661](arg _mt[216669]:_MT[201], ref arg this[216663]:_domain[225034](?), const  ref arg other[216666]:_domain[225034](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[867820] "expr temp" "maybe param" "maybe type" "temp"
    (867823 'move' call_tmp[867820](216739 call(216736 call (partial) isAssociative _mt[203] other[216666])))
    unknown call_tmp[867825] "expr temp" "maybe param" "maybe type" "temp"
    (867828 'move' call_tmp[867825](216740 call _cond_test call_tmp[867820]))
    if call_tmp[867825]
    {
      unknown call_tmp[867834] "expr temp" "maybe param" "maybe type" "temp"
      (867837 'move' call_tmp[867834](216679 call distribution _mt[203] other[216666]))
      unknown call_tmp[867841] "expr temp" "maybe param" "maybe type" "temp"
      (867844 'move' call_tmp[867841](216683 call idxType _mt[203] other[216666]))
      unknown call_tmp[867848] "expr temp" "maybe param" "maybe type" "temp"
      (867851 'move' call_tmp[867848](216687 call parSafe _mt[203] other[216666]))
      (216677 call(216674 call (partial) init _mt[203] this[216663]) call_tmp[867834] call_tmp[867841] call_tmp[867848])
    }
    {
      unknown call_tmp[867855] "expr temp" "maybe param" "maybe type" "temp"
      (867858 'move' call_tmp[867855](216730 call(216727 call (partial) isSparse _mt[203] other[216666])))
      unknown call_tmp[867860] "expr temp" "maybe param" "maybe type" "temp"
      (867863 'move' call_tmp[867860](216731 call _cond_test call_tmp[867855]))
      if call_tmp[867860]
      {
        unknown call_tmp[867869] "expr temp" "maybe param" "maybe type" "temp"
        (867872 'move' call_tmp[867869](216697 call distribution _mt[203] other[216666]))
        unknown call_tmp[867876] "expr temp" "maybe param" "maybe type" "temp"
        (867879 'move' call_tmp[867876](216701 call parentDom _mt[203] other[216666]))
        (216695 call(216692 call (partial) init _mt[203] this[216663]) call_tmp[867869] call_tmp[867876])
      }
      {
        unknown call_tmp[867881] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (867884 'move' call_tmp[867881](216711 'typeof' this[216663]))
        unknown call_tmp[867886] "expr temp" "maybe param" "maybe type" "temp"
        (867889 'move' call_tmp[867886](216708 call : call_tmp[867881] string[244]))
        unknown call_tmp[867891] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (867894 'move' call_tmp[867891](216717 'typeof' other[216666]))
        unknown call_tmp[867896] "expr temp" "maybe param" "maybe type" "temp"
        (867899 'move' call_tmp[867896](216714 call : call_tmp[867891] string[244]))
        (216706 call compilerError "cannot initialize '" call_tmp[867886] "' from '" call_tmp[867896] "'")
        (560177 'end of statement')
        (216724 call(216721 call (partial) init _mt[203] this[216663]) nil[32])
      }
    }
    unknown call_tmp[867905] "expr temp" "maybe param" "maybe type" "temp"
    (867908 'move' call_tmp[867905](406248 call _instance _mt[203] this[216663]))
    (216749 call(216746 call (partial) dsiAssignDomain _mt[203] call_tmp[867905]) other[216666](lhsPrivate = 1))
    (620069 return _void[46])
  }
  function _domain[225034](?)._value[216755](arg _mt[216759]:_MT[201], arg this[216757]:_domain[225034](?)) : _unknown[42] "inline" "method" "primary method" "no parens"
  {
    unknown ret[620073] "RVV" "temp"
    unknown call_tmp[867914] "expr temp" "maybe param" "maybe type" "temp"
    (867917 'move' call_tmp[867914](443559 call _instance _mt[203] this[216757]))
    unknown call_tmp[867919] "expr temp" "maybe param" "maybe type" "temp"
    (867922 'move' call_tmp[867919](216773 call _isPrivatized call_tmp[867914]))
    unknown call_tmp[867924] "expr temp" "maybe param" "maybe type" "temp"
    (867927 'move' call_tmp[867924](216775 call _cond_test call_tmp[867919]))
    if call_tmp[867924]
    {
      { scopeless type
        unknown call_type_tmp[578277] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[867931] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (867934 'move' call_tmp[867931](443544 call _instance _mt[203] this[216757]))
        (578281 'move' call_type_tmp[578277](216767 'typeof' call_tmp[867931]))
      }
      unknown call_tmp[867938] "expr temp" "maybe param" "maybe type" "temp"
      (867941 'move' call_tmp[867938](443549 call _pid _mt[203] this[216757]))
      unknown call_tmp[867943] "expr temp" "maybe param" "maybe type" "temp"
      (867946 'move' call_tmp[867943](216765 call chpl_getPrivatizedCopy call_type_tmp[578277] call_tmp[867938]))
      (620078 'move' ret[620073](620077 'deref' call_tmp[867943]))
      gotoReturn _end__value[620071] _end__value[620071]
    }
    {
      unknown call_tmp[867950] "expr temp" "maybe param" "maybe type" "temp"
      (867953 'move' call_tmp[867950](443554 call _instance _mt[203] this[216757]))
      (620083 'move' ret[620073](620082 'deref' call_tmp[867950]))
      gotoReturn _end__value[620071] _end__value[620071]
    }
    label _end__value[620071]
    (620075 return ret[620073])
  }
  function _domain[225034](?).chpl_forwarding_expr1[216782](arg _mt[216787]:_MT[201], arg this[216785]:_domain[225034](?)) : _unknown[42] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[620089] "RVV" "temp"
    (620093 'move' ret[620089](443563 call _value _mt[203] this[216785]))
    (620091 return ret[620089])
  }
  function _domain[225034](?).chpl__serialize[216796](arg _mt[216800]:_MT[201], arg this[216798]:_domain[225034](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[620097] "RVV" "temp"
    unknown call_tmp[867959] "expr temp" "maybe param" "maybe type" "temp"
    (867962 'move' call_tmp[867959](216813 call _value _mt[203] this[216798]))
    unknown call_tmp[867966] "expr temp" "maybe param" "maybe type" "temp"
    (867969 'move' call_tmp[867966](216819 call(216816 call (partial) chpl__serialize _mt[203] call_tmp[867959])))
    (620102 'move' ret[620097](620101 'deref' call_tmp[867966]))
    (620099 return ret[620097])
  }
  where {
    unknown call_tmp[867973] "expr temp" "maybe param" "maybe type" "temp"
    (867976 'move' call_tmp[867973](216803 call _value _mt[203] this[216798]))
    (216809 call(216806 call (partial) isDefaultRectangular _mt[203] call_tmp[867973]))
  }
  function _domain[225034](?).chpl__deserialize[216823](arg _mt[216829]:_MT[201], arg this[216825]:_domain[225034](?), arg data[216827]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[620106] "RVV" "temp"
    unknown valueType[216833] "dead at end of block" "insert auto destroy" "type variable"
    (649416 'move' valueType[216833](649413 'static field type' this[216825] "_instance"))
    (560183 'end of statement')
    unknown call_tmp[867980] "expr temp" "maybe param" "maybe type" "temp"
    (867983 'move' call_tmp[867980](216843 call _to_borrowed valueType[216833]))
    unknown call_tmp[867987] "expr temp" "maybe param" "maybe type" "temp"
    (867990 'move' call_tmp[867987](216848 call(216845 call (partial) chpl__deserialize _mt[203] call_tmp[867980]) data[216827]))
    unknown call_tmp[867992] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (867995 'move' call_tmp[867992](1000352 'new' _domain[225034](?) call_tmp[867987]))
    (620111 'move' ret[620106](620110 'deref' call_tmp[867992]))
    gotoReturn _end_chpl__deserialize[620104] _end_chpl__deserialize[620104]
    (560184 'end of statement' valueType[216833])
    label _end_chpl__deserialize[620104]
    (620108 return ret[620106])
  }
  function _domain[225034](?)._do_destroy[216852](arg _mt[216856]:_MT[201], arg this[216854]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[867999] "expr temp" "maybe param" "maybe type" "temp"
    (868002 'move' call_tmp[867999](443594 call _unowned _mt[203] this[216854]))
    unknown call_tmp[868004] "expr temp" "maybe param" "maybe type" "temp"
    (868007 'move' call_tmp[868004](216966 call ! call_tmp[867999]))
    unknown call_tmp[868009] "expr temp" "maybe param" "maybe type" "temp"
    (868012 'move' call_tmp[868009](216969 call _cond_test call_tmp[868004]))
    if call_tmp[868009]
    {
      {
        const tmp[216957] "const" "temp"
        unknown call_tmp[868016] "expr temp" "maybe param" "maybe type" "temp"
        (868019 'move' call_tmp[868016](443572 call _instance _mt[203] this[216854]))
        unknown call_tmp[868021] "expr temp" "maybe param" "maybe type" "temp"
        (868024 'move' call_tmp[868021](216954 '_wide_get_locale' call_tmp[868016]))
        (216958 'move' tmp[216957](216955 'deref' call_tmp[868021]))
        {
          unknown call_tmp[868028] "maybe param" "maybe type" "temp"
          (868031 'move' call_tmp[868028](443577 call _instance _mt[203] this[216854]))
          const inst[216863] "dead at end of block" "const" "insert auto destroy"
          (649418 'init var' inst[216863] call_tmp[868028])
          (216866 'end of statement')
          unknown call_tmp[868035] "maybe param" "maybe type" "temp"
          (868038 'move' call_tmp[868035](216876 call(216873 call (partial) remove _mt[203] inst[216863])))
          unknown tmp[216877] "dead at end of block" "insert auto destroy" "temp"
          (649420 'init var' tmp[216877] call_tmp[868035])
          (216884 call _check_tuple_var_decl tmp[216877] 2)
          (560186 'end of statement')
          unknown call_tmp[868040] "maybe param" "maybe type" "temp"
          (868043 'move' call_tmp[868040](216878 call tmp[216877] 0))
          unknown domToFree[216868] "dead at end of block" "insert auto destroy"
          (649422 'init var' domToFree[216868] call_tmp[868040])
          unknown call_tmp[868045] "maybe param" "maybe type" "temp"
          (868048 'move' call_tmp[868045](216881 call tmp[216877] 1))
          unknown distToRemove[216870] "dead at end of block" "insert auto destroy"
          (649424 'init var' distToRemove[216870] call_tmp[868045])
          (216889 'end of statement')
          unknown distToFree[216891] "dead at end of block" "insert auto destroy"
          (649426 'init var' distToFree[216891] nil[32] unmanaged BaseDist?[468142])
          (216897 'end of statement')
          unknown call_tmp[868050] "expr temp" "maybe param" "maybe type" "temp"
          (868053 'move' call_tmp[868050](216909 call != distToRemove[216870] nil[32]))
          unknown call_tmp[868055] "expr temp" "maybe param" "maybe type" "temp"
          (868058 'move' call_tmp[868055](216913 call _cond_test call_tmp[868050]))
          if call_tmp[868055]
          {
            unknown call_tmp[868060] "expr temp" "maybe param" "maybe type" "temp"
            (868063 'move' call_tmp[868060](216902 call postfix! distToRemove[216870]))
            unknown call_tmp[868067] "expr temp" "maybe param" "maybe type" "temp"
            (868070 'move' call_tmp[868067](216908 call(216905 call (partial) remove _mt[203] call_tmp[868060])))
            (216899 call = distToFree[216891] call_tmp[868067])
            (560187 'end of statement' distToFree[216891] distToRemove[216870])
          }
          unknown call_tmp[868072] "expr temp" "maybe param" "maybe type" "temp"
          (868075 'move' call_tmp[868072](216924 call != domToFree[216868] nil[32]))
          unknown call_tmp[868077] "expr temp" "maybe param" "maybe type" "temp"
          (868080 'move' call_tmp[868077](216928 call _cond_test call_tmp[868072]))
          if call_tmp[868077]
          {
            unknown call_tmp[868082] "expr temp" "maybe param" "maybe type" "temp"
            (868085 'move' call_tmp[868082](216921 call _isPrivatized inst[216863]))
            (216918 call _delete_dom inst[216863] call_tmp[868082])
            (560190 'end of statement' inst[216863])
          }
          unknown call_tmp[868087] "expr temp" "maybe param" "maybe type" "temp"
          (868090 'move' call_tmp[868087](216945 call != distToFree[216891] nil[32]))
          unknown call_tmp[868092] "expr temp" "maybe param" "maybe type" "temp"
          (868095 'move' call_tmp[868092](216949 call _cond_test call_tmp[868087]))
          if call_tmp[868092]
          {
            unknown call_tmp[868097] "expr temp" "maybe param" "maybe type" "temp"
            (868100 'move' call_tmp[868097](216935 call postfix! distToFree[216891]))
            unknown call_tmp[868104] "expr temp" "maybe param" "maybe type" "temp"
            (868107 'move' call_tmp[868104](216941 call dist _mt[203] inst[216863]))
            unknown call_tmp[868109] "expr temp" "maybe param" "maybe type" "temp"
            (868112 'move' call_tmp[868109](216939 call _isPrivatized call_tmp[868104]))
            (216934 call _delete_dist call_tmp[868097] call_tmp[868109])
            (560192 'end of statement' distToFree[216891] inst[216863])
          }
        }
        (216961 'elided on block' 0 tmp[216957])
      }
    }
    {
    }
    (620115 return _void[46])
  }
  function _domain[225034](?).deinit[216975](arg _mt[216979]:_MT[201], arg this[216977]:_domain[225034](?)) : _unknown[42] "destructor" "method" "primary method" "no return value for void"
  {
    (216983 call(443598 call (partial) _do_destroy _mt[203] this[216977]))
    (620117 return _void[46])
  }
  function _domain[225034](?).distribution[216986](arg _mt[216990]:_MT[201], arg this[216988]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens" "return not owned"
  {
    unknown ret[620121] "RVV" "temp"
    unknown call_tmp[868118] "expr temp" "maybe param" "maybe type" "temp"
    (868121 'move' call_tmp[868118](443602 call _value _mt[203] this[216988]))
    unknown call_tmp[868123] "expr temp" "maybe param" "maybe type" "temp"
    (868126 'move' call_tmp[868123](217014 call canResolveMethod call_tmp[868118] "dsiGetDist"))
    unknown call_tmp[868128] "expr temp" "maybe param" "maybe type" "temp"
    (868131 'move' call_tmp[868128](217019 call _cond_test call_tmp[868123]))
    if call_tmp[868128]
    {
      unknown call_tmp[868135] "expr temp" "maybe param" "maybe type" "temp"
      (868138 'move' call_tmp[868135](406256 call _value _mt[203] this[216988]))
      unknown call_tmp[868142] "expr temp" "maybe param" "maybe type" "temp"
      (868145 'move' call_tmp[868142](217004 call(217001 call (partial) dsiGetDist _mt[203] call_tmp[868135])))
      (620126 'move' ret[620121](620125 'deref' call_tmp[868142]))
      gotoReturn _end_distribution[620119] _end_distribution[620119]
    }
    {
      unknown call_tmp[868149] "expr temp" "maybe param" "maybe type" "temp"
      (868152 'move' call_tmp[868149](406260 call _value _mt[203] this[216988]))
      unknown call_tmp[868156] "expr temp" "maybe param" "maybe type" "temp"
      (868159 'move' call_tmp[868156](217010 call dist _mt[203] call_tmp[868149]))
      unknown call_tmp[868161] "expr temp" "maybe param" "maybe type" "temp"
      (868164 'move' call_tmp[868161](217008 call _getDistribution call_tmp[868156]))
      (620131 'move' ret[620121](620130 'deref' call_tmp[868161]))
      gotoReturn _end_distribution[620119] _end_distribution[620119]
    }
    label _end_distribution[620119]
    (620123 return ret[620121])
    (396809 'used modules list'(216994 'use' Reflection[1804]))
  }
  function _domain[225034](?).dist[217025](arg _mt[217029]:_MT[201], arg this[217027]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens" "no return value for void"
  {
    (217033 call compilerError "'domain.dist' is no longer supported," " use 'domain.distribution' instead")
    (620135 return _void[46])
  }
  function _domain[225034](?).rank[217042](arg _mt[217046]:_MT[201], arg this[217044]:_domain[225034](?)) param : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[620139] "RVV" "param" "temp"
    unknown tmp[496212] "maybe param" "temp"
    (496223 'move' tmp[496212](217064 call(217061 call (partial) isRectangular _mt[203] this[217044])))
    unknown call_tmp[868168] "expr temp" "maybe param" "maybe type" "temp"
    (868171 'move' call_tmp[868168](496225 call _cond_invalid tmp[496212]))
    if call_tmp[868168]
    {
      (496228 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[692476] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692477] "maybe param" "temp"
    unknown call_tmp[868173] "expr temp" "maybe param" "maybe type" "temp"
    (868176 'move' call_tmp[868173](496213 call isTrue tmp[496212]))
    (692482 'move' tmp[692477](692480 call _cond_test call_tmp[868173]))
    if tmp[692477]
    {
      (692487 'move' tmp[692476](692484 '_paramFoldLogical' tmp[692477] 1))
    }
    {
      unknown tmp[692489] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[868180] "expr temp" "maybe param" "maybe type" "temp"
      (868183 'move' call_tmp[868180](217069 call(217066 call (partial) isSparse _mt[203] this[217044])))
      (692491 'move' tmp[692489](496217 call isTrue call_tmp[868180]))
      (692496 'move' tmp[692476](692493 '_paramFoldLogical' tmp[692477] tmp[692489]))
    }
    unknown call_tmp[868185] "expr temp" "maybe param" "maybe type" "temp"
    (868188 'move' call_tmp[868185](217070 call _cond_test tmp[692476]))
    if call_tmp[868185]
    {
      unknown call_tmp[868192] "expr temp" "maybe param" "maybe type" "temp"
      (868195 'move' call_tmp[868192](406264 call _value _mt[203] this[217044]))
      unknown call_tmp[868199] "expr temp" "maybe param" "maybe type" "temp"
      (868202 'move' call_tmp[868199](217051 call rank _mt[203] call_tmp[868192]))
      (620144 'move' ret[620139](620143 'deref' call_tmp[868199]))
      gotoReturn _end_rank[620137] _end_rank[620137]
    }
    {
      (620149 'move' ret[620139](620148 'deref' 1))
      gotoReturn _end_rank[620137] _end_rank[620137]
    }
    label _end_rank[620137]
    (620141 return ret[620139])
  }
  function _domain[225034](?).idxType[217078](arg _mt[217082]:_MT[201], arg this[217080]:_domain[225034](?)) type : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[620155] "RVV" "temp" "type variable"
    unknown call_tmp[868206] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (868209 'move' call_tmp[868206](406270 call _value _mt[203] this[217080]))
    unknown call_tmp[868213] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (868216 'move' call_tmp[868213](217087 call idxType _mt[203] call_tmp[868206]))
    (620160 'move' ret[620155](620159 'deref' call_tmp[868213]))
    (620157 return ret[620155])
  }
  function _domain[225034](?).fullIdxType[217092](arg _mt[217096]:_MT[201], arg this[217094]:_domain[225034](?)) type : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[620164] "RVV" "temp" "type variable"
    unknown tmp[496233] "maybe param" "temp"
    (496244 'move' tmp[496233](217123 call(217120 call (partial) isAssociative _mt[203] this[217094])))
    unknown call_tmp[868220] "expr temp" "maybe param" "maybe type" "temp"
    (868223 'move' call_tmp[868220](496246 call _cond_invalid tmp[496233]))
    if call_tmp[868220]
    {
      (496249 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[692503] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692504] "maybe param" "temp"
    unknown call_tmp[868225] "expr temp" "maybe param" "maybe type" "temp"
    (868228 'move' call_tmp[868225](496234 call isTrue tmp[496233]))
    (692509 'move' tmp[692504](692507 call _cond_test call_tmp[868225]))
    if tmp[692504]
    {
      (692514 'move' tmp[692503](692511 '_paramFoldLogical' tmp[692504] 1))
    }
    {
      unknown tmp[692516] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[868232] "expr temp" "maybe param" "maybe type" "temp"
      (868235 'move' call_tmp[868232](217127 call rank _mt[203] this[217094]))
      unknown call_tmp[868237] "expr temp" "maybe param" "maybe type" "temp"
      (868240 'move' call_tmp[868237](217124 call == call_tmp[868232] 1))
      (692518 'move' tmp[692516](496238 call isTrue call_tmp[868237]))
      (692523 'move' tmp[692503](692520 '_paramFoldLogical' tmp[692504] tmp[692516]))
    }
    unknown call_tmp[868242] "expr temp" "maybe param" "maybe type" "temp"
    (868245 'move' call_tmp[868242](217131 call _cond_test tmp[692503]))
    if call_tmp[868242]
    {
      unknown call_tmp[868249] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (868252 'move' call_tmp[868249](217102 call idxType _mt[203] this[217094]))
      (620169 'move' ret[620164](620168 'deref' call_tmp[868249]))
      gotoReturn _end_fullIdxType[620162] _end_fullIdxType[620162]
    }
    {
      unknown call_tmp[868256] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (868259 'move' call_tmp[868256](217110 call rank _mt[203] this[217094]))
      unknown call_tmp[868263] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (868266 'move' call_tmp[868263](217114 call idxType _mt[203] this[217094]))
      unknown call_tmp[868268] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (868271 'move' call_tmp[868268](217107 call * call_tmp[868256] call_tmp[868263]))
      (620174 'move' ret[620164](620173 'deref' call_tmp[868268]))
      gotoReturn _end_fullIdxType[620162] _end_fullIdxType[620162]
    }
    label _end_fullIdxType[620162]
    (620166 return ret[620164])
  }
  function _domain[225034](?).chpl_integralIdxType[217137](arg _mt[217141]:_MT[201], arg this[217139]:_domain[225034](?)) type : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[620180] "RVV" "temp" "type variable"
    unknown call_tmp[868275] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (868278 'move' call_tmp[868275](406279 call _value _mt[203] this[217139]))
    unknown call_tmp[868282] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (868285 'move' call_tmp[868282](217148 call idxType _mt[203] call_tmp[868275]))
    unknown call_tmp[868287] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (868290 'move' call_tmp[868287](217146 call chpl__idxTypeToIntIdxType call_tmp[868282]))
    (620185 'move' ret[620180](620184 'deref' call_tmp[868287]))
    (620182 return ret[620180])
  }
  function _domain[225034](?).strides[217153](arg _mt[217157]:_MT[201], arg this[217155]:_domain[225034](?)) param : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[620189] "RVV" "param" "temp"
    unknown call_tmp[868294] "expr temp" "maybe param" "maybe type" "temp"
    (868297 'move' call_tmp[868294](406284 call _value _mt[203] this[217155]))
    unknown call_tmp[868301] "expr temp" "maybe param" "maybe type" "temp"
    (868304 'move' call_tmp[868301](217167 call strides _mt[203] call_tmp[868294]))
    (620194 'move' ret[620189](620193 'deref' call_tmp[868301]))
    (620191 return ret[620189])
  }
  where {
    (217163 call(217160 call (partial) isRectangular _mt[203] this[217155]))
  }
  function _domain[225034](?).strides[217173](arg _mt[217177]:_MT[201], arg this[217175]:_domain[225034](?)) param : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[620198] "RVV" "param" "temp"
    unknown call_tmp[868310] "expr temp" "maybe param" "maybe type" "temp"
    (868313 'move' call_tmp[868310](406289 call _value _mt[203] this[217175]))
    unknown call_tmp[868317] "expr temp" "maybe param" "maybe type" "temp"
    (868320 'move' call_tmp[868317](217187 call parentDom _mt[203] call_tmp[868310]))
    unknown call_tmp[868324] "expr temp" "maybe param" "maybe type" "temp"
    (868327 'move' call_tmp[868324](217190 call strides _mt[203] call_tmp[868317]))
    (620203 'move' ret[620198](620202 'deref' call_tmp[868324]))
    (620200 return ret[620198])
  }
  where {
    (217183 call(217180 call (partial) isSparse _mt[203] this[217175]))
  }
  function _domain[225034](?).strides[217196](arg _mt[217200]:_MT[201], arg this[217198]:_domain[225034](?)) param : _unknown[42] "method" "primary method" "no parens" "no return value for void"
  {
    (217209 call compilerError "associative domains do not support .strides")
    (620205 return _void[46])
  }
  where {
    (217206 call(217203 call (partial) isAssociative _mt[203] this[217198]))
  }
  function _domain[225034](?).hasUnitStride[217216](arg _mt[217220]:_MT[201], arg this[217218]:_domain[225034](?)) param : _unknown[42] "method" "primary method"
  {
    unknown ret[620209] "RVV" "param" "temp"
    unknown call_tmp[868335] "expr temp" "maybe param" "maybe type" "temp"
    (868338 'move' call_tmp[868335](406294 call strides _mt[203] this[217218]))
    unknown call_tmp[868342] "expr temp" "maybe param" "maybe type" "temp"
    (868345 'move' call_tmp[868342](217228 call(217225 call (partial) isOne _mt[203] call_tmp[868335])))
    (620214 'move' ret[620209](620213 'deref' call_tmp[868342]))
    (620211 return ret[620209])
  }
  function _domain[225034](?).hasPosNegUnitStride[217231](arg _mt[217235]:_MT[201], arg this[217233]:_domain[225034](?)) param : _unknown[42] "method" "primary method"
  {
    unknown ret[620218] "RVV" "param" "temp"
    unknown call_tmp[868349] "expr temp" "maybe param" "maybe type" "temp"
    (868352 'move' call_tmp[868349](406298 call strides _mt[203] this[217233]))
    unknown call_tmp[868356] "expr temp" "maybe param" "maybe type" "temp"
    (868359 'move' call_tmp[868356](217243 call(217240 call (partial) isPosNegOne _mt[203] call_tmp[868349])))
    (620223 'move' ret[620218](620222 'deref' call_tmp[868356]))
    (620220 return ret[620218])
  }
  function _domain[225034](?).stride[217246](arg _mt[217250]:_MT[201], arg this[217248]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[620227] "RVV" "temp"
    unknown call_tmp[868363] "expr temp" "maybe param" "maybe type" "temp"
    (868366 'move' call_tmp[868363](406302 call _value _mt[203] this[217248]))
    unknown call_tmp[868370] "expr temp" "maybe param" "maybe type" "temp"
    (868373 'move' call_tmp[868370](217255 call dsiStride _mt[203] call_tmp[868363]))
    (620232 'move' ret[620227](620231 'deref' call_tmp[868370]))
    (620229 return ret[620227])
  }
  function _domain[225034](?).stride[217260](arg _mt[217264]:_MT[201], arg this[217262]:_domain[225034](?)) param : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[620236] "RVV" "param" "temp"
    unknown tmp[692530] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692531] "maybe param" "temp"
    unknown call_tmp[868377] "expr temp" "maybe param" "maybe type" "temp"
    (868380 'move' call_tmp[868377](406310 call strides _mt[203] this[217262]))
    unknown call_tmp[868384] "expr temp" "maybe param" "maybe type" "temp"
    (868387 'move' call_tmp[868384](217291 call(217288 call (partial) isOne _mt[203] call_tmp[868377])))
    (692536 'move' tmp[692531](692534 call _cond_test call_tmp[868384]))
    if tmp[692531]
    {
      (692541 'move' tmp[692530](692538 '_paramFoldLogical' tmp[692531] 1))
    }
    {
      unknown tmp[692543] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (692545 'move' tmp[692543](217293 call - 1))
      (692550 'move' tmp[692530](692547 '_paramFoldLogical' tmp[692531] tmp[692543]))
    }
    (620241 'move' ret[620236](620240 'deref' tmp[692530]))
    (620238 return ret[620236])
  }
  where {
    unknown tmp[496254] "maybe param" "temp"
    unknown tmp[496275] "maybe param" "temp"
    unknown call_tmp[868391] "expr temp" "maybe param" "maybe type" "temp"
    (868394 'move' call_tmp[868391](443606 call rank _mt[203] this[217262]))
    (496286 'move' tmp[496275](217270 call == call_tmp[868391] 1))
    unknown call_tmp[868396] "expr temp" "maybe param" "maybe type" "temp"
    (868399 'move' call_tmp[868396](496288 call _cond_invalid tmp[496275]))
    if call_tmp[868396]
    {
      (496291 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[692584] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692585] "maybe param" "temp"
    unknown call_tmp[868401] "expr temp" "maybe param" "maybe type" "temp"
    (868404 'move' call_tmp[868401](496276 call isTrue tmp[496275]))
    (692590 'move' tmp[692585](692588 call _cond_test call_tmp[868401]))
    if tmp[692585]
    {
      unknown tmp[496296] "maybe param" "temp"
      (496307 'move' tmp[496296](217277 call(443610 call (partial) isRectangular _mt[203] this[217262])))
      unknown call_tmp[868408] "expr temp" "maybe param" "maybe type" "temp"
      (868411 'move' call_tmp[868408](496309 call _cond_invalid tmp[496296]))
      if call_tmp[868408]
      {
        (496312 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[692557] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[692558] "maybe param" "temp"
      unknown call_tmp[868413] "expr temp" "maybe param" "maybe type" "temp"
      (868416 'move' call_tmp[868413](496297 call isTrue tmp[496296]))
      (692563 'move' tmp[692558](692561 call _cond_test call_tmp[868413]))
      if tmp[692558]
      {
        (692568 'move' tmp[692557](692565 '_paramFoldLogical' tmp[692558] 1))
      }
      {
        unknown tmp[692570] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[868420] "expr temp" "maybe param" "maybe type" "temp"
        (868423 'move' call_tmp[868420](217279 call(443614 call (partial) isSparse _mt[203] this[217262])))
        (692572 'move' tmp[692570](496301 call isTrue call_tmp[868420]))
        (692577 'move' tmp[692557](692574 '_paramFoldLogical' tmp[692558] tmp[692570]))
      }
      unknown tmp[692592] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (692594 'move' tmp[692592](496279 call isTrue tmp[692557]))
      (692599 'move' tmp[692584](692596 '_paramFoldLogical' tmp[692585] tmp[692592]))
    }
    {
      (692604 'move' tmp[692584](692601 '_paramFoldLogical' tmp[692585] 0))
    }
    (496265 'move' tmp[496254] tmp[692584])
    unknown call_tmp[868425] "expr temp" "maybe param" "maybe type" "temp"
    (868428 'move' call_tmp[868425](496267 call _cond_invalid tmp[496254]))
    if call_tmp[868425]
    {
      (496270 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[692611] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692612] "maybe param" "temp"
    unknown call_tmp[868430] "expr temp" "maybe param" "maybe type" "temp"
    (868433 'move' call_tmp[868430](496255 call isTrue tmp[496254]))
    (692617 'move' tmp[692612](692615 call _cond_test call_tmp[868430]))
    if tmp[692612]
    {
      unknown tmp[692619] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[868437] "expr temp" "maybe param" "maybe type" "temp"
      (868440 'move' call_tmp[868437](406306 call strides _mt[203] this[217262]))
      unknown call_tmp[868444] "expr temp" "maybe param" "maybe type" "temp"
      (868447 'move' call_tmp[868444](217284 call(217281 call (partial) isPosNegOne _mt[203] call_tmp[868437])))
      (692621 'move' tmp[692619](496258 call isTrue call_tmp[868444]))
      (692626 'move' tmp[692611](692623 '_paramFoldLogical' tmp[692612] tmp[692619]))
    }
    {
      (692631 'move' tmp[692611](692628 '_paramFoldLogical' tmp[692612] 0))
    }
    (1001582 call chpl_statementLevelSymbol tmp[692611])
  }
  function _domain[225034](?).alignment[217302](arg _mt[217306]:_MT[201], arg this[217304]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[620245] "RVV" "temp"
    unknown call_tmp[868451] "expr temp" "maybe param" "maybe type" "temp"
    (868454 'move' call_tmp[868451](406314 call _value _mt[203] this[217304]))
    unknown call_tmp[868458] "expr temp" "maybe param" "maybe type" "temp"
    (868461 'move' call_tmp[868458](217311 call dsiAlignment _mt[203] call_tmp[868451]))
    (620250 'move' ret[620245](620249 'deref' call_tmp[868458]))
    (620247 return ret[620245])
  }
  function _domain[225034](?).alignment[217316](arg _mt[217320]:_MT[201], arg this[217318]:_domain[225034](?)) param : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[620254] "RVV" "param" "temp"
    (620259 'move' ret[620254](620258 'deref' 0))
    (620256 return ret[620254])
  }
  where {
    unknown tmp[496317] "maybe param" "temp"
    unknown tmp[496338] "maybe param" "temp"
    unknown call_tmp[868465] "expr temp" "maybe param" "maybe type" "temp"
    (868468 'move' call_tmp[868465](443618 call rank _mt[203] this[217318]))
    (496349 'move' tmp[496338](217326 call == call_tmp[868465] 1))
    unknown call_tmp[868470] "expr temp" "maybe param" "maybe type" "temp"
    (868473 'move' call_tmp[868470](496351 call _cond_invalid tmp[496338]))
    if call_tmp[868470]
    {
      (496354 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[692665] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692666] "maybe param" "temp"
    unknown call_tmp[868475] "expr temp" "maybe param" "maybe type" "temp"
    (868478 'move' call_tmp[868475](496339 call isTrue tmp[496338]))
    (692671 'move' tmp[692666](692669 call _cond_test call_tmp[868475]))
    if tmp[692666]
    {
      unknown tmp[496359] "maybe param" "temp"
      (496370 'move' tmp[496359](217333 call(443622 call (partial) isRectangular _mt[203] this[217318])))
      unknown call_tmp[868482] "expr temp" "maybe param" "maybe type" "temp"
      (868485 'move' call_tmp[868482](496372 call _cond_invalid tmp[496359]))
      if call_tmp[868482]
      {
        (496375 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[692638] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[692639] "maybe param" "temp"
      unknown call_tmp[868487] "expr temp" "maybe param" "maybe type" "temp"
      (868490 'move' call_tmp[868487](496360 call isTrue tmp[496359]))
      (692644 'move' tmp[692639](692642 call _cond_test call_tmp[868487]))
      if tmp[692639]
      {
        (692649 'move' tmp[692638](692646 '_paramFoldLogical' tmp[692639] 1))
      }
      {
        unknown tmp[692651] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[868494] "expr temp" "maybe param" "maybe type" "temp"
        (868497 'move' call_tmp[868494](217335 call(443626 call (partial) isSparse _mt[203] this[217318])))
        (692653 'move' tmp[692651](496364 call isTrue call_tmp[868494]))
        (692658 'move' tmp[692638](692655 '_paramFoldLogical' tmp[692639] tmp[692651]))
      }
      unknown tmp[692673] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (692675 'move' tmp[692673](496342 call isTrue tmp[692638]))
      (692680 'move' tmp[692665](692677 '_paramFoldLogical' tmp[692666] tmp[692673]))
    }
    {
      (692685 'move' tmp[692665](692682 '_paramFoldLogical' tmp[692666] 0))
    }
    (496328 'move' tmp[496317] tmp[692665])
    unknown call_tmp[868499] "expr temp" "maybe param" "maybe type" "temp"
    (868502 'move' call_tmp[868499](496330 call _cond_invalid tmp[496317]))
    if call_tmp[868499]
    {
      (496333 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[692692] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692693] "maybe param" "temp"
    unknown call_tmp[868504] "expr temp" "maybe param" "maybe type" "temp"
    (868507 'move' call_tmp[868504](496318 call isTrue tmp[496317]))
    (692698 'move' tmp[692693](692696 call _cond_test call_tmp[868504]))
    if tmp[692693]
    {
      unknown tmp[692700] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[868511] "expr temp" "maybe param" "maybe type" "temp"
      (868514 'move' call_tmp[868511](406318 call strides _mt[203] this[217318]))
      unknown call_tmp[868518] "expr temp" "maybe param" "maybe type" "temp"
      (868521 'move' call_tmp[868518](217340 call(217337 call (partial) isPosNegOne _mt[203] call_tmp[868511])))
      (692702 'move' tmp[692700](496321 call isTrue call_tmp[868518]))
      (692707 'move' tmp[692692](692704 '_paramFoldLogical' tmp[692693] tmp[692700]))
    }
    {
      (692712 'move' tmp[692692](692709 '_paramFoldLogical' tmp[692693] 0))
    }
    (1001584 call chpl_statementLevelSymbol tmp[692692])
  }
  function _domain[225034](?).targetLocales[217347](arg _mt[217351]:_MT[201], arg this[217349]:_domain[225034](?)) const ref : _unknown[42] "method" "primary method"
  {
    unknown ret[620263] "RVV" "temp"
    unknown call_tmp[868525] "expr temp" "maybe param" "maybe type" "temp"
    (868528 'move' call_tmp[868525](406322 call _value _mt[203] this[217349]))
    unknown call_tmp[868532] "expr temp" "maybe param" "maybe type" "temp"
    (868535 'move' call_tmp[868532](217359 call(217356 call (partial) dsiTargetLocales _mt[203] call_tmp[868525])))
    (620268 'move' ret[620263](620267 'addr of' call_tmp[868532]))
    (620265 return ret[620263])
  }
  function _domain[225034](?).these[217362](arg _mt[217366]:_MT[201], arg this[217364]:_domain[225034](?)) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[620272] "RVV" "temp"
    {
      unknown _indexOfInterest[217379] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[217380] "expr temp" "temp"
      unknown call_tmp[868539] "expr temp" "maybe param" "maybe type" "temp"
      (868542 'move' call_tmp[868539](406326 call _value _mt[203] this[217364]))
      unknown call_tmp[868546] "expr temp" "maybe param" "maybe type" "temp"
      (868549 'move' call_tmp[868546](217375 call(217372 call (partial) these _mt[203] call_tmp[868539])))
      (217389 'move' _iterator[217380](217387 call _getIterator call_tmp[868546]))
      Defer
      {
        {
          (217404 call _freeIterator _iterator[217380])
        }
      }
      { scopeless type
        (217394 'move' _indexOfInterest[217379](217391 call iteratorIndex _iterator[217380]))
      }
      ForLoop[217381]
      {
        unknown i[217369] "index var" "insert auto destroy"
        (560218 'end of statement')
        (217399 'move' i[217369] _indexOfInterest[217379])
        (560219 'end of statement' i[217369])
        {
          unknown yret[620276] "YVV" "temp"
          (620279 'move' yret[620276](620278 'deref' i[217369]))
          (217377 yield yret[620276])
          (560221 'end of statement' i[217369])
        }
        label _continueLabel[217384]
        _indexOfInterest[217379]
        _iterator[217380]
      }
      label _breakLabel[217385]
    }
    (620274 return ret[620272])
  }
  function _domain[225034](?).these[217413](arg _mt[217421]:_MT[201], arg this[217415]:_domain[225034](?), param arg tag[217418]:iterKind[52144]) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[620284] "RVV" "temp"
    {
      unknown _indexOfInterest[217452] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[217453] "expr temp" "temp"
      unknown call_tmp[868553] "expr temp" "maybe param" "maybe type" "temp"
      (868556 'move' call_tmp[868553](406335 call _value _mt[203] this[217415]))
      unknown call_tmp[868560] "expr temp" "maybe param" "maybe type" "temp"
      (868563 'move' call_tmp[868560](217447 call(217444 call (partial) these _mt[203] call_tmp[868553]) tag[217418]))
      (217462 'move' _iterator[217453](217460 call _getIterator call_tmp[868560]))
      Defer
      {
        {
          (217477 call _freeIterator _iterator[217453])
        }
      }
      { scopeless type
        (217467 'move' _indexOfInterest[217452](217464 call iteratorIndex _iterator[217453]))
      }
      ForLoop[217454]
      {
        unknown i[217441] "index var" "insert auto destroy"
        (560224 'end of statement')
        (217472 'move' i[217441] _indexOfInterest[217452])
        (560225 'end of statement' i[217441])
        unknown yret[620288] "YVV" "temp"
        (620291 'move' yret[620288](620290 'deref' i[217441]))
        (217449 yield yret[620288])
        (560227 'end of statement' i[217441])
        label _continueLabel[217457]
        _indexOfInterest[217452]
        _iterator[217453]
      }
      label _breakLabel[217458]
    }
    (620286 return ret[620284])
  }
  where {
    unknown tmp[496380] "maybe param" "temp"
    (496391 'move' tmp[496380](217425 call == tag[217418] standalone[52142]))
    unknown call_tmp[868565] "expr temp" "maybe param" "maybe type" "temp"
    (868568 'move' call_tmp[868565](496393 call _cond_invalid tmp[496380]))
    if call_tmp[868565]
    {
      (496396 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[692719] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692720] "maybe param" "temp"
    unknown call_tmp[868570] "expr temp" "maybe param" "maybe type" "temp"
    (868573 'move' call_tmp[868570](496381 call isTrue tmp[496380]))
    (692725 'move' tmp[692720](692723 call _cond_test call_tmp[868570]))
    if tmp[692720]
    {
      unknown tmp[692727] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[868575] "expr temp" "maybe param" "maybe type" "temp"
      (868578 'move' call_tmp[868575](217432 'resolves'(217437 call(217434 call .(406331 call . this[217415] c"_value") c"these")(tag = tag[217418]))))
      (692729 'move' tmp[692727](496384 call isTrue call_tmp[868575]))
      (692734 'move' tmp[692719](692731 '_paramFoldLogical' tmp[692720] tmp[692727]))
    }
    {
      (692739 'move' tmp[692719](692736 '_paramFoldLogical' tmp[692720] 0))
    }
    (1001586 call chpl_statementLevelSymbol tmp[692719])
  }
  function _domain[225034](?).these[217487](arg _mt[217495]:_MT[201], arg this[217489]:_domain[225034](?), param arg tag[217492]:iterKind[52144]) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[620296] "RVV" "temp"
    {
      unknown _indexOfInterest[217516] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[217517] "expr temp" "temp"
      unknown call_tmp[868582] "expr temp" "maybe param" "maybe type" "temp"
      (868585 'move' call_tmp[868582](406340 call _value _mt[203] this[217489]))
      unknown call_tmp[868589] "expr temp" "maybe param" "maybe type" "temp"
      (868592 'move' call_tmp[868589](217511 call(217508 call (partial) these _mt[203] call_tmp[868582]) tag[217492]))
      (217526 'move' _iterator[217517](217524 call _getIterator call_tmp[868589]))
      Defer
      {
        {
          (217541 call _freeIterator _iterator[217517])
        }
      }
      { scopeless type
        (217531 'move' _indexOfInterest[217516](217528 call iteratorIndex _iterator[217517]))
      }
      ForLoop[217518]
      {
        unknown followThis[217505] "index var" "insert auto destroy"
        (560230 'end of statement')
        (217536 'move' followThis[217505] _indexOfInterest[217516])
        (560231 'end of statement' followThis[217505])
        unknown yret[620300] "YVV" "temp"
        (620303 'move' yret[620300](620302 'deref' followThis[217505]))
        (217513 yield yret[620300])
        (560233 'end of statement' followThis[217505])
        label _continueLabel[217521]
        _indexOfInterest[217516]
        _iterator[217517]
      }
      label _breakLabel[217522]
    }
    (620298 return ret[620296])
  }
  where {
    (217497 call == tag[217492] leader[52138])
  }
  function _domain[225034](?).these[217551](arg _mt[217567]:_MT[201], arg this[217553]:_domain[225034](?), param arg tag[217556]:iterKind[52144], arg followThis[217559]:_any[141](?), param arg fast[217563]:bool[19] =
  0) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[620308] "RVV" "temp"
    unknown call_tmp[868594] "expr temp" "maybe param" "maybe type" "temp"
    (868597 'move' call_tmp[868594](217670 'resolves'(217675 call(217672 call .(406353 call . this[217553] c"_value") c"these")(tag = tag[217556]) followThis[217559](fast = fast[217563]))))
    unknown call_tmp[868599] "expr temp" "maybe param" "maybe type" "temp"
    (868602 'move' call_tmp[868599](217681 call _cond_test call_tmp[868594]))
    if call_tmp[868599]
    {
      {
        unknown _indexOfInterest[217593] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[217594] "expr temp" "temp"
        unknown call_tmp[868606] "expr temp" "maybe param" "maybe type" "temp"
        (868609 'move' call_tmp[868606](406345 call _value _mt[203] this[217553]))
        unknown call_tmp[868613] "expr temp" "maybe param" "maybe type" "temp"
        (868616 'move' call_tmp[868613](217584 call(217581 call (partial) these _mt[203] call_tmp[868606])(tag = tag[217556]) followThis[217559](fast = fast[217563])))
        (217603 'move' _iterator[217594](217601 call _getIterator call_tmp[868613]))
        Defer
        {
          {
            (217618 call _freeIterator _iterator[217594])
          }
        }
        { scopeless type
          (217608 'move' _indexOfInterest[217593](217605 call iteratorIndex _iterator[217594]))
        }
        ForLoop[217595]
        {
          unknown i[217578] "index var" "insert auto destroy"
          (560236 'end of statement')
          (217613 'move' i[217578] _indexOfInterest[217593])
          (560237 'end of statement' i[217578])
          unknown yret[620312] "YVV" "temp"
          (620315 'move' yret[620312](620314 'deref' i[217578]))
          (217590 yield yret[620312])
          (560239 'end of statement' i[217578])
          label _continueLabel[217598]
          _indexOfInterest[217593]
          _iterator[217594]
        }
        label _breakLabel[217599]
      }
    }
    {
      {
        unknown _indexOfInterest[217638] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[217639] "expr temp" "temp"
        unknown call_tmp[868620] "expr temp" "maybe param" "maybe type" "temp"
        (868623 'move' call_tmp[868620](406349 call _value _mt[203] this[217553]))
        unknown call_tmp[868627] "expr temp" "maybe param" "maybe type" "temp"
        (868630 'move' call_tmp[868627](217632 call(217629 call (partial) these _mt[203] call_tmp[868620]) tag[217556] followThis[217559]))
        (217648 'move' _iterator[217639](217646 call _getIterator call_tmp[868627]))
        Defer
        {
          {
            (217663 call _freeIterator _iterator[217639])
          }
        }
        { scopeless type
          (217653 'move' _indexOfInterest[217638](217650 call iteratorIndex _iterator[217639]))
        }
        ForLoop[217640]
        {
          unknown i[217626] "index var" "insert auto destroy"
          (560242 'end of statement')
          (217658 'move' i[217626] _indexOfInterest[217638])
          (560243 'end of statement' i[217626])
          unknown yret[620318] "YVV" "temp"
          (620321 'move' yret[620318](620320 'deref' i[217626]))
          (217635 yield yret[620318])
          (560245 'end of statement' i[217626])
          label _continueLabel[217643]
          _indexOfInterest[217638]
          _iterator[217639]
        }
        label _breakLabel[217644]
      }
    }
    (620310 return ret[620308])
  }
  where {
    (217569 call == tag[217556] follower[52140])
  }
  function _domain[225034](?).this[217688](arg _mt[217696]:_MT[201], arg this[217690]:_domain[225034](?), arg d[217693]:_domain[225034](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[620326] "RVV" "temp"
    unknown call_tmp[868634] "expr temp" "maybe param" "maybe type" "temp"
    (868637 'move' call_tmp[868634](217720 call rank _mt[203] d[217693]))
    unknown call_tmp[868641] "expr temp" "maybe param" "maybe type" "temp"
    (868644 'move' call_tmp[868641](443655 call rank _mt[203] this[217690]))
    unknown call_tmp[868646] "expr temp" "maybe param" "maybe type" "temp"
    (868649 'move' call_tmp[868646](217717 call == call_tmp[868634] call_tmp[868641]))
    unknown call_tmp[868651] "expr temp" "maybe param" "maybe type" "temp"
    (868654 'move' call_tmp[868651](217724 call _cond_test call_tmp[868646]))
    if call_tmp[868651]
    {
      unknown call_tmp[868658] "expr temp" "maybe param" "maybe type" "temp"
      (868661 'move' call_tmp[868658](217708 call(217705 call (partial) getIndices _mt[203] d[217693])))
      unknown call_tmp[868663] "expr temp" "maybe param" "maybe type" "temp"
      (868666 'move' call_tmp[868663](217701 call this[217690](217709 'expand_tuple' call_tmp[868658])))
      (620331 'move' ret[620326](620330 'deref' call_tmp[868663]))
      gotoReturn _end_this[620324] _end_this[620324]
    }
    {
      (217712 call compilerError "slicing a domain with a domain of a different rank")
    }
    label _end_this[620324]
    (620328 return ret[620326])
  }
  function _domain[225034](?).this[217732](arg _mt[217740]:_MT[201], arg this[217734]:_domain[225034](?), arg ranges[217737]:_any[141](?) ...) : _unknown[42] "method" "primary method"
  {
    unknown ret[620337] "RVV" "temp"
    unknown call_tmp[868672] "expr temp" "maybe param" "maybe type" "temp"
    (868675 'move' call_tmp[868672](217751 call(443664 call (partial) dims _mt[203] this[217734])))
    unknown call_tmp[868677] "maybe param" "maybe type" "temp"
    (868680 'move' call_tmp[868677](217749 call tupleOfRangesSlice call_tmp[868672] ranges[217737]))
    const r[217747] "dead at end of block" "const" "insert auto destroy"
    (649428 'init var' r[217747] call_tmp[868677])
    (217754 'end of statement')
    unknown call_tmp[868684] "expr temp" "maybe param" "maybe type" "temp"
    (868687 'move' call_tmp[868684](443670 call distribution _mt[203] this[217734]))
    unknown call_tmp[868691] "expr temp" "maybe param" "maybe type" "temp"
    (868694 'move' call_tmp[868691](443674 call rank _mt[203] this[217734]))
    unknown call_tmp[868698] "expr temp" "maybe param" "maybe type" "temp"
    (868701 'move' call_tmp[868698](406359 call _value _mt[203] this[217734]))
    unknown call_tmp[868705] "expr temp" "maybe param" "maybe type" "temp"
    (868708 'move' call_tmp[868705](217762 call idxType _mt[203] call_tmp[868698]))
    unknown call_tmp[868710] "expr temp" "maybe param" "maybe type" "temp"
    (868713 'move' call_tmp[868710](217766 call r[217747] 0))
    unknown call_tmp[868717] "expr temp" "maybe param" "maybe type" "temp"
    (868720 'move' call_tmp[868717](217768 call strides _mt[203] call_tmp[868710]))
    unknown call_tmp[868722] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (868725 'move' call_tmp[868722](1000353 'new' _domain[225034](?) call_tmp[868684] call_tmp[868691] call_tmp[868705] call_tmp[868717] r[217747]))
    (620342 'move' ret[620337](620341 'deref' call_tmp[868722]))
    gotoReturn _end_this[620335] _end_this[620335]
    (560249 'end of statement' r[217747])
    label _end_this[620335]
    (620339 return ret[620337])
  }
  where {
    (217743 call chpl__isTupleOfRanges ranges[217737])
  }
  function _domain[225034](?).this[217775](arg _mt[217783]:_MT[201], arg this[217777]:_domain[225034](?), arg args[217780]:_any[141](?) ...) : _unknown[42] "method" "primary method"
  {
    unknown ret[620348] "RVV" "temp"
    unknown collapsedDim[217794] "dead at end of block" "insert auto destroy"
    unknown call_tmp[868731] "expr temp" "maybe param" "maybe type" "temp"
    (868734 'move' call_tmp[868731](443685 call rank _mt[203] this[217777]))
    unknown call_tmp[868736] "expr temp" "maybe param" "maybe type" "temp"
    (868739 'move' call_tmp[868736](217795 call * call_tmp[868731] bool[19]))
    (649430 'default init var' collapsedDim[217794] call_tmp[868736])
    (217800 'end of statement')
    unknown idx[217802] "dead at end of block" "insert auto destroy"
    unknown call_tmp[868743] "expr temp" "maybe param" "maybe type" "temp"
    (868746 'move' call_tmp[868743](443690 call rank _mt[203] this[217777]))
    unknown call_tmp[868750] "expr temp" "maybe param" "maybe type" "temp"
    (868753 'move' call_tmp[868750](443694 call idxType _mt[203] this[217777]))
    unknown call_tmp[868755] "expr temp" "maybe param" "maybe type" "temp"
    (868758 'move' call_tmp[868755](217803 call * call_tmp[868743] call_tmp[868750]))
    (649432 'default init var' idx[217802] call_tmp[868755])
    (217808 'end of statement')
    unknown call_tmp[868760] "maybe param" "maybe type" "temp"
    (868763 'move' call_tmp[868760](217812 call chpl__countRanges(217814 'expand_tuple' args[217780])))
    unknown uprank[217810] "dead at end of block" "param"
    (649434 'init var' uprank[217810] call_tmp[868760])
    (217816 'end of statement')
    unknown call_tmp[868767] "expr temp" "maybe param" "maybe type" "temp"
    (868770 'move' call_tmp[868767](217822 call strides _mt[203] this[217777]))
    unknown call_tmp[868772] "expr temp" "maybe param" "maybe type" "temp"
    (868775 'move' call_tmp[868772](217826 call chpl_strideUnionRC args[217780]))
    unknown call_tmp[868777] "maybe param" "maybe type" "temp"
    (868780 'move' call_tmp[868777](217820 call chpl_strideUnion call_tmp[868767] call_tmp[868772]))
    unknown upstrides[217818] "dead at end of block" "param"
    (649436 'init var' upstrides[217818] call_tmp[868777])
    (217829 'end of statement')
    unknown upranges[217831] "dead at end of block" "insert auto destroy"
    unknown call_tmp[868784] "expr temp" "maybe param" "maybe type" "temp"
    (868787 'move' call_tmp[868784](406368 call _value _mt[203] this[217777]))
    unknown call_tmp[868791] "expr temp" "maybe param" "maybe type" "temp"
    (868794 'move' call_tmp[868791](217838 call idxType _mt[203] call_tmp[868784]))
    unknown call_tmp[868796] "expr temp" "maybe param" "maybe type" "temp"
    (868799 'move' call_tmp[868796](217836 call range[240](?)(idxType = call_tmp[868791])(strides = upstrides[217818])))
    unknown call_tmp[868801] "expr temp" "maybe param" "maybe type" "temp"
    (868804 'move' call_tmp[868801](217832 call * uprank[217810] call_tmp[868796]))
    (649438 'default init var' upranges[217831] call_tmp[868801])
    (217845 'end of statement')
    unknown updim[217847] "dead at end of block" "insert auto destroy"
    (649440 'init var' updim[217847] 0)
    (217850 'end of statement')
    {
      unknown i[217851] "dead at end of block" "index var" "insert auto destroy"
      (649442 'init var' i[217851] 0)
      (560251 'end of statement')
      unknown tmp[217925] "maybe param" "temp"
      unknown call_tmp[868808] "expr temp" "maybe param" "maybe type" "temp"
      (868811 'move' call_tmp[868808](443703 call rank _mt[203] this[217777]))
      unknown call_tmp[868813] "expr temp" "maybe param" "maybe type" "temp"
      (868816 'move' call_tmp[868813](217854 call - call_tmp[868808] 1))
      (217937 'move' tmp[217925](217935 call chpl_compute_low_param_loop_bound 0 call_tmp[868813]))
      unknown tmp[217926] "maybe param" "temp"
      unknown call_tmp[868820] "expr temp" "maybe param" "maybe type" "temp"
      (868823 'move' call_tmp[868820](443730 call rank _mt[203] this[217777]))
      unknown call_tmp[868825] "expr temp" "maybe param" "maybe type" "temp"
      (868828 'move' call_tmp[868825](217942 call - call_tmp[868820] 1))
      (217947 'move' tmp[217926](217945 call chpl_compute_high_param_loop_bound 0 call_tmp[868825]))
      unknown tmp[217927] "maybe param" "temp"
      (217950 'move' tmp[217927] 1)
      ParamForLoop[217952]
      { i[217851] tmp[217925] tmp[217926] tmp[217927]
        {
          unknown call_tmp[868830] "expr temp" "maybe param" "maybe type" "temp"
          (868833 'move' call_tmp[868830](217919 call args[217780] i[217851]))
          unknown call_tmp[868835] "expr temp" "maybe param" "maybe type" "temp"
          (868838 'move' call_tmp[868835](217917 call isRange call_tmp[868830]))
          unknown call_tmp[868840] "expr temp" "maybe param" "maybe type" "temp"
          (868843 'move' call_tmp[868840](217921 call _cond_test call_tmp[868835]))
          if call_tmp[868840]
          {
            unknown call_tmp[868845] "expr temp" "maybe param" "maybe type" "temp"
            (868848 'move' call_tmp[868845](217865 call collapsedDim[217794] i[217851]))
            (217862 call = call_tmp[868845] 0)
            (560252 'end of statement' collapsedDim[217794] i[217851])
            unknown call_tmp[868850] "expr temp" "maybe param" "maybe type" "temp"
            (868853 'move' call_tmp[868850](217871 call idx[217802] i[217851]))
            unknown call_tmp[868857] "expr temp" "maybe param" "maybe type" "temp"
            (868860 'move' call_tmp[868857](217874 call(443711 call (partial) dim _mt[203] this[217777]) i[217851]))
            unknown call_tmp[868864] "expr temp" "maybe param" "maybe type" "temp"
            (868867 'move' call_tmp[868864](217876 call low _mt[203] call_tmp[868857]))
            (217868 call = call_tmp[868850] call_tmp[868864])
            (560255 'end of statement' idx[217802] i[217851])
            unknown call_tmp[868869] "expr temp" "maybe param" "maybe type" "temp"
            (868872 'move' call_tmp[868869](217882 call upranges[217831] updim[217847]))
            unknown call_tmp[868876] "expr temp" "maybe param" "maybe type" "temp"
            (868879 'move' call_tmp[868876](217885 call _value _mt[203] this[217777]))
            unknown call_tmp[868883] "expr temp" "maybe param" "maybe type" "temp"
            (868886 'move' call_tmp[868883](217891 call(217888 call (partial) dsiDim _mt[203] call_tmp[868876]) i[217851]))
            unknown call_tmp[868888] "expr temp" "maybe param" "maybe type" "temp"
            (868891 'move' call_tmp[868888](217895 call args[217780] i[217851]))
            unknown call_tmp[868893] "expr temp" "maybe param" "maybe type" "temp"
            (868896 'move' call_tmp[868893](217893 call call_tmp[868883] call_tmp[868888]))
            (217879 call = call_tmp[868869] call_tmp[868893])
            (560258 'end of statement' upranges[217831] updim[217847] i[217851])
            (217897 call += updim[217847] 1)
            (560262 'end of statement' updim[217847])
          }
          {
            unknown call_tmp[868898] "expr temp" "maybe param" "maybe type" "temp"
            (868901 'move' call_tmp[868898](217905 call collapsedDim[217794] i[217851]))
            (217902 call = call_tmp[868898] 1)
            (560264 'end of statement' collapsedDim[217794] i[217851])
            unknown call_tmp[868903] "expr temp" "maybe param" "maybe type" "temp"
            (868906 'move' call_tmp[868903](217911 call idx[217802] i[217851]))
            unknown call_tmp[868908] "expr temp" "maybe param" "maybe type" "temp"
            (868911 'move' call_tmp[868908](217914 call args[217780] i[217851]))
            (217908 call = call_tmp[868903] call_tmp[868908])
            (560267 'end of statement' idx[217802] i[217851])
          }
        }
      }
      label _unused_continueLabel[217929]
      label _breakLabel[217928]
    }
    { scopeless type
      unknown call_type_tmp[578283] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[868913] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (868916 'move' call_tmp[868913](217964 call upranges[217831] 0))
      (578287 'move' call_type_tmp[578283](217966 'typeof' call_tmp[868913]))
    }
    const emptyrange[217962] "dead at end of block" "const" "insert auto destroy"
    (649444 'default init var' emptyrange[217962] call_type_tmp[578283])
    (217968 'end of statement')
    unknown call_tmp[868920] "expr temp" "maybe param" "maybe type" "temp"
    (868923 'move' call_tmp[868920](218025 call(443740 call (partial) contains _mt[203] this[217777]) idx[217802]))
    unknown call_tmp[868925] "expr temp" "maybe param" "maybe type" "temp"
    (868928 'move' call_tmp[868925](218022 call ! call_tmp[868920]))
    unknown call_tmp[868930] "expr temp" "maybe param" "maybe type" "temp"
    (868933 'move' call_tmp[868930](218027 call _cond_test call_tmp[868925]))
    if call_tmp[868930]
    {
      {
        unknown d[217970] "dead at end of block" "index var" "insert auto destroy"
        (649446 'init var' d[217970] 0)
        (560271 'end of statement')
        unknown tmp[217986] "maybe param" "temp"
        unknown call_tmp[868935] "expr temp" "maybe param" "maybe type" "temp"
        (868938 'move' call_tmp[868935](217973 call - uprank[217810] 1))
        (217998 'move' tmp[217986](217996 call chpl_compute_low_param_loop_bound 0 call_tmp[868935]))
        unknown tmp[217987] "maybe param" "temp"
        unknown call_tmp[868940] "expr temp" "maybe param" "maybe type" "temp"
        (868943 'move' call_tmp[868940](218003 call - uprank[217810] 1))
        (218008 'move' tmp[217987](218006 call chpl_compute_high_param_loop_bound 0 call_tmp[868940]))
        unknown tmp[217988] "maybe param" "temp"
        (218011 'move' tmp[217988] 1)
        ParamForLoop[218013]
        { d[217970] tmp[217986] tmp[217987] tmp[217988]
          unknown call_tmp[868945] "expr temp" "maybe param" "maybe type" "temp"
          (868948 'move' call_tmp[868945](217982 call upranges[217831] d[217970]))
          (217979 call = call_tmp[868945] emptyrange[217962])
          (560272 'end of statement' upranges[217831] d[217970] emptyrange[217962])
        }
        label _unused_continueLabel[217990]
        label _breakLabel[217989]
      }
    }
    unknown call_tmp[868952] "expr temp" "maybe param" "maybe type" "temp"
    (868955 'move' call_tmp[868952](406373 call distribution _mt[203] this[217777]))
    unknown call_tmp[868959] "expr temp" "maybe param" "maybe type" "temp"
    (868962 'move' call_tmp[868959](218039 call _pid _mt[203] call_tmp[868952]))
    unknown call_tmp[868966] "expr temp" "maybe param" "maybe type" "temp"
    (868969 'move' call_tmp[868966](406377 call distribution _mt[203] this[217777]))
    unknown call_tmp[868973] "expr temp" "maybe param" "maybe type" "temp"
    (868976 'move' call_tmp[868973](218044 call _instance _mt[203] call_tmp[868966]))
    unknown call_tmp[868978] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (868981 'move' call_tmp[868978](1000354 'new' ArrayViewRankChangeDist[431335](?)(downDistPid = call_tmp[868959])(downDistInst = call_tmp[868973])(collapsedDim = collapsedDim[217794])(idx = idx[217802])(_chpl_manager = unmanaged[183](?))))
    const rcdist[218032] "dead at end of block" "const" "insert auto destroy"
    (649448 'init var' rcdist[218032] call_tmp[868978])
    (218053 'end of statement')
    unknown call_tmp[868983] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (868986 'move' call_tmp[868983](1000355 'new' _distribution[268253](?) rcdist[218032]))
    const rcdistRec[218055] "dead at end of block" "const" "insert auto destroy"
    (649450 'init var' rcdistRec[218055] call_tmp[868983])
    (218061 'end of statement' upranges[217831] collapsedDim[217794] idx[217802] rcdist[218032])
    unknown call_tmp[868988] "expr temp" "maybe param" "maybe type" "temp"
    (868991 'move' call_tmp[868988](218069 call upranges[217831] 0))
    unknown call_tmp[868995] "expr temp" "maybe param" "maybe type" "temp"
    (868998 'move' call_tmp[868995](218071 call idxType _mt[203] call_tmp[868988]))
    unknown call_tmp[869000] "expr temp" "maybe param" "maybe type" "temp"
    (869003 'move' call_tmp[869000](218075 call upranges[217831] 0))
    unknown call_tmp[869007] "expr temp" "maybe param" "maybe type" "temp"
    (869010 'move' call_tmp[869007](218077 call strides _mt[203] call_tmp[869000]))
    unknown call_tmp[869012] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (869015 'move' call_tmp[869012](1000356 'new' _domain[225034](?) rcdistRec[218055] uprank[217810] call_tmp[868995] call_tmp[869007] upranges[217831]))
    (620353 'move' ret[620348](620352 'deref' call_tmp[869012]))
    gotoReturn _end_this[620346] _end_this[620346]
    (560279 'end of statement' rcdistRec[218055] upranges[217831])
    label _end_this[620346]
    (620350 return ret[620348])
  }
  where {
    unknown call_tmp[869019] "expr temp" "maybe param" "maybe type" "temp"
    (869022 'move' call_tmp[869019](406363 call _value _mt[203] this[217777]))
    unknown call_tmp[869026] "expr temp" "maybe param" "maybe type" "temp"
    (869029 'move' call_tmp[869026](217789 call idxType _mt[203] call_tmp[869019]))
    (217786 call _validRankChangeArgs args[217780] call_tmp[869026])
  }
  function _domain[225034](?).this[218084](arg _mt[218094]:_MT[201], arg this[218086]:_domain[225034](?), arg i[218090]:integral[159](?) ...) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (218098 call compilerError "domain slice requires a range in at least one dimension")
    (620357 return _void[46])
  }
  function _domain[225034](?).this[218104](arg _mt[218113]:_MT[201], arg this[218106]:_domain[225034](?), arg args[218110]:_any[141](?) ...) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[869035] "expr temp" "maybe param" "maybe type" "temp"
    (869038 'move' call_tmp[869035](443762 call rank _mt[203] this[218106]))
    unknown call_tmp[869040] "expr temp" "maybe param" "maybe type" "temp"
    (869043 'move' call_tmp[869040](218128 call == numArgs[218108] call_tmp[869035]))
    unknown call_tmp[869045] "expr temp" "maybe param" "maybe type" "temp"
    (869048 'move' call_tmp[869045](218132 call _cond_test call_tmp[869040]))
    if call_tmp[869045]
    {
      (218118 call compilerError "invalid argument types for domain slicing")
    }
    {
      (218123 call compilerError "a domain slice requires either a single domain argument or exactly one argument per domain dimension")
    }
    (620359 return _void[46])
  }
  function _domain[225034](?).isEmpty[218139](arg _mt[218143]:_MT[201], arg this[218141]:_domain[225034](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[620363] "RVV" "temp"
    unknown call_tmp[869052] "expr temp" "maybe param" "maybe type" "temp"
    (869055 'move' call_tmp[869052](218154 call(218151 call (partial) sizeAs _mt[203] this[218141]) uint(64)[86]))
    unknown call_tmp[869057] "expr temp" "maybe param" "maybe type" "temp"
    (869060 'move' call_tmp[869057](218148 call == call_tmp[869052] 0))
    (620369 'move' ret[620363](620368 'coerce' call_tmp[869057] bool[19]))
    (620365 return ret[620363])
  }
  { scopeless type
    bool[19]
  }
  function _domain[225034](?).size[218160](arg _mt[218164]:_MT[201], arg this[218162]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[620373] "RVV" "temp"
    unknown call_tmp[869064] "expr temp" "maybe param" "maybe type" "temp"
    (869067 'move' call_tmp[869064](218173 call(218170 call (partial) sizeAs _mt[203] this[218162]) int(64)[10]))
    (620379 'move' ret[620373](620378 'coerce' call_tmp[869064] int(64)[10]))
    (620375 return ret[620373])
  }
  { scopeless type
    int(64)[10]
  }
  function _domain[225034](?).sizeAs[218178](arg _mt[218186]:_MT[201], arg this[218180]:_domain[225034](?), arg t[218183]:integral[159](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[620383] "RVV" "temp"
    unknown call_tmp[869071] "expr temp" "maybe param" "maybe type" "temp"
    (869074 'move' call_tmp[869071](406383 call _value _mt[203] this[218180]))
    unknown call_tmp[869078] "maybe param" "maybe type" "temp"
    (869081 'move' call_tmp[869078](218198 call dsiNumIndices _mt[203] call_tmp[869071]))
    const size[218194] "dead at end of block" "const" "insert auto destroy"
    (649452 'init var' size[218194] call_tmp[869078])
    (218202 'end of statement')
    unknown tmp[496401] "maybe param" "temp"
    unknown tmp[496422] "maybe param" "temp"
    (496433 'move' tmp[496422] 1)
    unknown call_tmp[869083] "expr temp" "maybe param" "maybe type" "temp"
    (869086 'move' call_tmp[869083](496435 call _cond_invalid tmp[496422]))
    if call_tmp[869083]
    {
      (496438 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[692746] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692747] "maybe param" "temp"
    unknown call_tmp[869088] "expr temp" "maybe param" "maybe type" "temp"
    (869091 'move' call_tmp[869088](496423 call isTrue tmp[496422]))
    (692752 'move' tmp[692747](692750 call _cond_test call_tmp[869088]))
    if tmp[692747]
    {
      unknown tmp[692754] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[869093] "expr temp" "maybe param" "maybe type" "temp"
      (869096 'move' call_tmp[869093](218256 call != t[218183] uint(64)[86]))
      (692756 'move' tmp[692754](496426 call isTrue call_tmp[869093]))
      (692761 'move' tmp[692746](692758 '_paramFoldLogical' tmp[692747] tmp[692754]))
    }
    {
      (692766 'move' tmp[692746](692763 '_paramFoldLogical' tmp[692747] 0))
    }
    (496412 'move' tmp[496401] tmp[692746])
    unknown call_tmp[869098] "expr temp" "maybe param" "maybe type" "temp"
    (869101 'move' call_tmp[869098](496414 call _cond_invalid tmp[496401]))
    if call_tmp[869098]
    {
      (496417 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[692773] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692774] "maybe param" "temp"
    unknown call_tmp[869103] "expr temp" "maybe param" "maybe type" "temp"
    (869106 'move' call_tmp[869103](496402 call isTrue tmp[496401]))
    (692779 'move' tmp[692774](692777 call _cond_test call_tmp[869103]))
    if tmp[692774]
    {
      unknown tmp[692781] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[869108] "expr temp" "maybe param" "maybe type" "temp"
      (869111 'move' call_tmp[869108](218264 call max t[218183]))
      unknown call_tmp[869113] "expr temp" "maybe param" "maybe type" "temp"
      (869116 'move' call_tmp[869113](218260 call > size[218194] call_tmp[869108]))
      (692783 'move' tmp[692781](496405 call isTrue call_tmp[869113]))
      (692788 'move' tmp[692773](692785 '_paramFoldLogical' tmp[692774] tmp[692781]))
    }
    {
      (692793 'move' tmp[692773](692790 '_paramFoldLogical' tmp[692774] 0))
    }
    unknown call_tmp[869118] "expr temp" "maybe param" "maybe type" "temp"
    (869121 'move' call_tmp[869118](218266 call _cond_test tmp[692773]))
    if call_tmp[869118]
    {
      unknown call_tmp[869123] "expr temp" "maybe param" "maybe type" "temp"
      (869126 'move' call_tmp[869123](218213 call : t[218183] string[244]))
      unknown call_tmp[869128] "expr temp" "maybe param" "maybe type" "temp"
      (869131 'move' call_tmp[869128](218208 call + ".size query exceeds max(" call_tmp[869123]))
      unknown call_tmp[869133] "maybe param" "maybe type" "temp"
      (869136 'move' call_tmp[869133](218206 call + call_tmp[869128] ")"))
      unknown error[218205] "dead at end of block" "insert auto destroy"
      (649454 'init var' error[218205] call_tmp[869133])
      (218219 'end of statement')
      unknown call_tmp[869140] "expr temp" "maybe param" "maybe type" "temp"
      (869143 'move' call_tmp[869140](218240 call(218237 call (partial) isRectangular _mt[203] this[218180])))
      unknown call_tmp[869145] "expr temp" "maybe param" "maybe type" "temp"
      (869148 'move' call_tmp[869145](218241 call _cond_test call_tmp[869140]))
      if call_tmp[869145]
      {
        unknown call_tmp[869150] "expr temp" "maybe param" "maybe type" "temp"
        (869153 'move' call_tmp[869150](218231 call : this[218180] string[244]))
        unknown call_tmp[869155] "expr temp" "maybe param" "maybe type" "temp"
        (869158 'move' call_tmp[869155](218226 call + " for: '" call_tmp[869150]))
        unknown call_tmp[869160] "expr temp" "maybe param" "maybe type" "temp"
        (869163 'move' call_tmp[869160](218224 call + call_tmp[869155] "'"))
        (218221 call += error[218205] call_tmp[869160])
        (560289 'end of statement' error[218205])
      }
      (218249 call boundsCheckHalt module=[222] HaltWrappers[518] error[218205])
      (560291 'end of statement' error[218205])
      (406388 'referenced modules list' HaltWrappers[518])
    }
    unknown call_tmp[869165] "expr temp" "maybe param" "maybe type" "temp"
    (869168 'move' call_tmp[869165](218271 call : size[218194] t[218183]))
    (620389 'move' ret[620383](620388 'coerce' call_tmp[869165] t[218183]))
    gotoReturn _end_sizeAs[620381] _end_sizeAs[620381]
    (560293 'end of statement' size[218194])
    label _end_sizeAs[620381]
    (620385 return ret[620383])
    (396811 'used modules list'(218191 'use' HaltWrappers[518]))
  }
  { scopeless type
    t[218183]
  }
  function _domain[225034](?).dims[218278](arg _mt[218282]:_MT[201], arg this[218280]:_domain[225034](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[620395] "RVV" "temp"
    unknown call_tmp[869172] "expr temp" "maybe param" "maybe type" "temp"
    (869175 'move' call_tmp[869172](406394 call _value _mt[203] this[218280]))
    unknown call_tmp[869179] "expr temp" "maybe param" "maybe type" "temp"
    (869182 'move' call_tmp[869179](218290 call(218287 call (partial) dsiDims _mt[203] call_tmp[869172])))
    (620400 'move' ret[620395](620399 'deref' call_tmp[869179]))
    (620397 return ret[620395])
  }
  function _domain[225034](?).dim[218293](arg _mt[218301]:_MT[201], arg this[218295]:_domain[225034](?), arg d[218298]:int(64)[10]) : _unknown[42] "method" "primary method"
  {
    unknown ret[620404] "RVV" "temp"
    unknown call_tmp[869184] "expr temp" "maybe param" "maybe type" "temp"
    (869187 'move' call_tmp[869184](218355 call _cond_test 1))
    if call_tmp[869184]
    {
      unknown tmp[496443] "maybe param" "temp"
      (496454 'move' tmp[496443](218341 call < d[218298] 0))
      unknown call_tmp[869189] "expr temp" "maybe param" "maybe type" "temp"
      (869192 'move' call_tmp[869189](496456 call _cond_invalid tmp[496443]))
      if call_tmp[869189]
      {
        (496459 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[692800] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[692801] "maybe param" "temp"
      unknown call_tmp[869194] "expr temp" "maybe param" "maybe type" "temp"
      (869197 'move' call_tmp[869194](496444 call isTrue tmp[496443]))
      (692806 'move' tmp[692801](692804 call _cond_test call_tmp[869194]))
      if tmp[692801]
      {
        (692811 'move' tmp[692800](692808 '_paramFoldLogical' tmp[692801] 1))
      }
      {
        unknown tmp[692813] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[869201] "expr temp" "maybe param" "maybe type" "temp"
        (869204 'move' call_tmp[869201](443786 call rank _mt[203] this[218295]))
        unknown call_tmp[869206] "expr temp" "maybe param" "maybe type" "temp"
        (869209 'move' call_tmp[869206](218345 call >= d[218298] call_tmp[869201]))
        (692815 'move' tmp[692813](496448 call isTrue call_tmp[869206]))
        (692820 'move' tmp[692800](692817 '_paramFoldLogical' tmp[692801] tmp[692813]))
      }
      unknown call_tmp[869211] "expr temp" "maybe param" "maybe type" "temp"
      (869214 'move' call_tmp[869211](218349 call _cond_test tmp[692800]))
      if call_tmp[869211]
      {
        unknown call_tmp[869220] "expr temp" "maybe param" "maybe type" "temp"
        (869223 'move' call_tmp[869220](443780 call rank _mt[203] this[218295]))
        unknown call_tmp[869225] "expr temp" "maybe param" "maybe type" "temp"
        (869228 'move' call_tmp[869225](218333 call - call_tmp[869220] 1))
        unknown call_tmp[869230] "expr temp" "maybe param" "maybe type" "temp"
        (869233 'move' call_tmp[869230](218331 call(218328 call (partial) format _mt[203] "dim(%i) is out-of-bounds; must be 0..%i") d[218298] call_tmp[869225]))
        (218324 call boundsCheckHalt module=[222] HaltWrappers[518] call_tmp[869230])
        (406398 'referenced modules list' HaltWrappers[518])
      }
    }
    unknown call_tmp[869237] "expr temp" "maybe param" "maybe type" "temp"
    (869240 'move' call_tmp[869237](406404 call _value _mt[203] this[218295]))
    unknown call_tmp[869244] "expr temp" "maybe param" "maybe type" "temp"
    (869247 'move' call_tmp[869244](218365 call(218362 call (partial) dsiDim _mt[203] call_tmp[869237]) d[218298]))
    (620409 'move' ret[620404](620408 'deref' call_tmp[869244]))
    (620406 return ret[620404])
    (396813 'used modules list'(218305 'use' HaltWrappers[518])(218319 'import' FormattedIO[208298].{string}))
  }
  function _domain[225034](?).dim[218369](arg _mt[218377]:_MT[201], arg this[218371]:_domain[225034](?), param arg d[218374]:int(64)[10]) : _unknown[42] "method" "primary method"
  {
    unknown ret[620413] "RVV" "temp"
    unknown tmp[496464] "maybe param" "temp"
    (496475 'move' tmp[496464](218392 call < d[218374] 0))
    unknown call_tmp[869249] "expr temp" "maybe param" "maybe type" "temp"
    (869252 'move' call_tmp[869249](496477 call _cond_invalid tmp[496464]))
    if call_tmp[869249]
    {
      (496480 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[692827] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692828] "maybe param" "temp"
    unknown call_tmp[869254] "expr temp" "maybe param" "maybe type" "temp"
    (869257 'move' call_tmp[869254](496465 call isTrue tmp[496464]))
    (692833 'move' tmp[692828](692831 call _cond_test call_tmp[869254]))
    if tmp[692828]
    {
      (692838 'move' tmp[692827](692835 '_paramFoldLogical' tmp[692828] 1))
    }
    {
      unknown tmp[692840] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[869261] "expr temp" "maybe param" "maybe type" "temp"
      (869264 'move' call_tmp[869261](443798 call rank _mt[203] this[218371]))
      unknown call_tmp[869266] "expr temp" "maybe param" "maybe type" "temp"
      (869269 'move' call_tmp[869266](218399 call - call_tmp[869261] 1))
      unknown call_tmp[869271] "expr temp" "maybe param" "maybe type" "temp"
      (869274 'move' call_tmp[869271](218396 call > d[218374] call_tmp[869266]))
      (692842 'move' tmp[692840](496469 call isTrue call_tmp[869271]))
      (692847 'move' tmp[692827](692844 '_paramFoldLogical' tmp[692828] tmp[692840]))
    }
    unknown call_tmp[869276] "expr temp" "maybe param" "maybe type" "temp"
    (869279 'move' call_tmp[869276](218403 call _cond_test tmp[692827]))
    if call_tmp[869276]
    {
      unknown call_tmp[869283] "expr temp" "maybe param" "maybe type" "temp"
      (869286 'move' call_tmp[869283](443792 call rank _mt[203] this[218371]))
      unknown call_tmp[869288] "expr temp" "maybe param" "maybe type" "temp"
      (869291 'move' call_tmp[869288](218385 call - call_tmp[869283] 1))
      (218381 call compilerError "dim() must take a value from 0.." call_tmp[869288])
    }
    unknown call_tmp[869295] "expr temp" "maybe param" "maybe type" "temp"
    (869298 'move' call_tmp[869295](406408 call _value _mt[203] this[218371]))
    unknown call_tmp[869302] "expr temp" "maybe param" "maybe type" "temp"
    (869305 'move' call_tmp[869302](218413 call(218410 call (partial) dsiDim _mt[203] call_tmp[869295]) d[218374]))
    (620418 'move' ret[620413](620417 'deref' call_tmp[869302]))
    (620415 return ret[620413])
  }
  function _domain[225034](?).dimIter[218417](arg _mt[218425]:_MT[201], arg this[218419]:_domain[225034](?), param arg d[218421]:_any[141](?), arg ind[218423]:_any[141](?)) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[620422] "RVV" "temp"
    {
      unknown _indexOfInterest[218442] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[218443] "expr temp" "temp"
      unknown call_tmp[869309] "expr temp" "maybe param" "maybe type" "temp"
      (869312 'move' call_tmp[869309](406412 call _value _mt[203] this[218419]))
      unknown call_tmp[869316] "expr temp" "maybe param" "maybe type" "temp"
      (869319 'move' call_tmp[869316](218436 call(218433 call (partial) dimIter _mt[203] call_tmp[869309]) d[218421] ind[218423]))
      (218452 'move' _iterator[218443](218450 call _getIterator call_tmp[869316]))
      Defer
      {
        {
          (218467 call _freeIterator _iterator[218443])
        }
      }
      { scopeless type
        (218457 'move' _indexOfInterest[218442](218454 call iteratorIndex _iterator[218443]))
      }
      ForLoop[218444]
      {
        unknown i[218428] "index var" "insert auto destroy"
        (560303 'end of statement')
        (218462 'move' i[218428] _indexOfInterest[218442])
        (560304 'end of statement' i[218428])
        unknown yret[620426] "YVV" "temp"
        (620429 'move' yret[620426](620428 'deref' i[218428]))
        (218439 yield yret[620426])
        (560306 'end of statement' i[218428])
        label _continueLabel[218447]
        _indexOfInterest[218442]
        _iterator[218443]
      }
      label _breakLabel[218448]
    }
    (620424 return ret[620422])
  }
  function _domain[225034](?).shape[218476](arg _mt[218480]:_MT[201], arg this[218478]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[620434] "RVV" "temp"
    unknown call_tmp[869323] "expr temp" "maybe param" "maybe type" "temp"
    (869326 'move' call_tmp[869323](218501 call(443812 call (partial) chpl_shapeAs _mt[203] this[218478]) int(64)[10]))
    unknown call_tmp[869330] "expr temp" "maybe param" "maybe type" "temp"
    (869333 'move' call_tmp[869330](620441 call rank _mt[203] this[218478]))
    unknown call_tmp[869335] "expr temp" "maybe param" "maybe type" "temp"
    (869338 'move' call_tmp[869335](620439 call * call_tmp[869330] int(64)[10]))
    (620446 'move' ret[620434](620445 'coerce' call_tmp[869323] call_tmp[869335]))
    (620436 return ret[620434])
  }
  where {
    unknown tmp[496485] "maybe param" "temp"
    (496496 'move' tmp[496485](218492 call(218489 call (partial) isRectangular _mt[203] this[218478])))
    unknown call_tmp[869342] "expr temp" "maybe param" "maybe type" "temp"
    (869345 'move' call_tmp[869342](496498 call _cond_invalid tmp[496485]))
    if call_tmp[869342]
    {
      (496501 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[692854] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692855] "maybe param" "temp"
    unknown call_tmp[869347] "expr temp" "maybe param" "maybe type" "temp"
    (869350 'move' call_tmp[869347](496486 call isTrue tmp[496485]))
    (692860 'move' tmp[692855](692858 call _cond_test call_tmp[869347]))
    if tmp[692855]
    {
      (692865 'move' tmp[692854](692862 '_paramFoldLogical' tmp[692855] 1))
    }
    {
      unknown tmp[692867] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[869354] "expr temp" "maybe param" "maybe type" "temp"
      (869357 'move' call_tmp[869354](218497 call(218494 call (partial) isSparse _mt[203] this[218478])))
      (692869 'move' tmp[692867](496490 call isTrue call_tmp[869354]))
      (692874 'move' tmp[692854](692871 '_paramFoldLogical' tmp[692855] tmp[692867]))
    }
    (1001588 call chpl_statementLevelSymbol tmp[692854])
  }
  { scopeless type
    unknown call_tmp[869361] "expr temp" "maybe param" "maybe type" "temp"
    (869364 'move' call_tmp[869361](443806 call rank _mt[203] this[218478]))
    (218482 call * call_tmp[869361] int(64)[10])
  }
  function _domain[225034](?).chpl_shapeAs[218507](arg _mt[218515]:_MT[201], arg this[218509]:_domain[225034](?), arg t[218512]:integral[159](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[620450] "RVV" "temp"
    unknown s[218519] "dead at end of block" "insert auto destroy"
    unknown call_tmp[869368] "expr temp" "maybe param" "maybe type" "temp"
    (869371 'move' call_tmp[869368](443817 call rank _mt[203] this[218509]))
    unknown call_tmp[869373] "expr temp" "maybe param" "maybe type" "temp"
    (869376 'move' call_tmp[869373](218520 call * call_tmp[869368] t[218512]))
    (649456 'default init var' s[218519] call_tmp[869373])
    (218525 'end of statement')
    {
      unknown _indexOfInterest[218558] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[218559] "expr temp" "temp"
      unknown call_tmp[869380] "expr temp" "maybe param" "maybe type" "temp"
      (869383 'move' call_tmp[869380](218582 call size _mt[203] s[218519]))
      unknown call_tmp[869385] "expr temp" "maybe param" "maybe type" "temp"
      (869388 'move' call_tmp[869385](218586 call chpl_direct_counted_range_iter 0 call_tmp[869380]))
      unknown call_tmp[869390] "expr temp" "maybe param" "maybe type" "temp"
      (869393 'move' call_tmp[869390](218576 call _getIterator call_tmp[869385]))
      unknown call_tmp[869397] "expr temp" "maybe param" "maybe type" "temp"
      (869400 'move' call_tmp[869397](218589 call(443825 call (partial) dims _mt[203] this[218509])))
      unknown call_tmp[869402] "expr temp" "maybe param" "maybe type" "temp"
      (869405 'move' call_tmp[869402](218590 call _getIterator call_tmp[869397]))
      (218592 'move' _iterator[218559](218545 call _build_tuple call_tmp[869390] call_tmp[869402]))
      Defer
      {
        {
          (218620 call _freeIterator _iterator[218559])
        }
      }
      { scopeless type
        (218597 'move' _indexOfInterest[218558](218594 call iteratorIndex _iterator[218559]))
      }
      ForLoop[218560]
      {
        (218602 call _check_tuple_var_decl _indexOfInterest[218558] 2)
        (560310 'end of statement')
        unknown i[218527] "index var" "insert auto destroy"
        (560311 'end of statement')
        (218609 'move' i[218527](218606 call _indexOfInterest[218558] 0))
        (560312 'end of statement' i[218527])
        unknown r[218529] "index var" "insert auto destroy"
        (560314 'end of statement')
        (218615 'move' r[218529](218612 call _indexOfInterest[218558] 1))
        (560315 'end of statement' r[218529])
        unknown call_tmp[869407] "expr temp" "maybe param" "maybe type" "temp"
        (869410 'move' call_tmp[869407](218549 call s[218519] i[218527]))
        unknown call_tmp[869414] "expr temp" "maybe param" "maybe type" "temp"
        (869417 'move' call_tmp[869414](218555 call(218552 call (partial) sizeAs _mt[203] r[218529]) t[218512]))
        (218546 call = call_tmp[869407] call_tmp[869414])
        (560317 'end of statement' s[218519] i[218527] r[218529])
        label _continueLabel[218563]
        _indexOfInterest[218558]
        _iterator[218559]
      }
      label _breakLabel[218564]
    }
    (620455 'move' ret[620450](620454 'deref' s[218519]))
    gotoReturn _end_chpl_shapeAs[620448] _end_chpl_shapeAs[620448]
    (560321 'end of statement' s[218519])
    label _end_chpl_shapeAs[620448]
    (620452 return ret[620450])
  }
  function _domain[225034](?).shape[218631](arg _mt[218635]:_MT[201], arg this[218633]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[620461] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[578289] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[869421] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (869424 'move' call_tmp[869421](443830 call size _mt[203] this[218633]))
      (578293 'move' call_type_tmp[578289](218647 'typeof' call_tmp[869421]))
    }
    unknown s[218644] "dead at end of block" "insert auto destroy"
    unknown call_tmp[869426] "expr temp" "maybe param" "maybe type" "temp"
    (869429 'move' call_tmp[869426](218648 call _build_tuple call_type_tmp[578289]))
    (649458 'default init var' s[218644] call_tmp[869426])
    (218651 'end of statement')
    unknown call_tmp[869431] "expr temp" "maybe param" "maybe type" "temp"
    (869434 'move' call_tmp[869431](218655 call s[218644] 0))
    unknown call_tmp[869438] "expr temp" "maybe param" "maybe type" "temp"
    (869441 'move' call_tmp[869438](443835 call size _mt[203] this[218633]))
    (218652 call = call_tmp[869431] call_tmp[869438])
    (560323 'end of statement' s[218644])
    (620466 'move' ret[620461](620465 'deref' s[218644]))
    gotoReturn _end_shape[620459] _end_shape[620459]
    (560325 'end of statement' s[218644])
    label _end_shape[620459]
    (620463 return ret[620461])
  }
  where {
    (218641 call(218638 call (partial) isAssociative _mt[203] this[218633]))
  }
  function _domain[225034](?).shape[218663](arg _mt[218667]:_MT[201], arg this[218665]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens" "no return value for void"
  {
    (218671 call compilerError ".shape not supported on this domain")
    (620470 return _void[46])
  }
  function _domain[225034](?).indices[218677](arg _mt[218681]:_MT[201], arg this[218679]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens" "no return value for void"
  {
    (218685 call compilerError "domains do not support '.indices'")
    (620472 return _void[46])
  }
  function _domain[225034](?).boundingBox[218691](arg _mt[218695]:_MT[201], arg this[218693]:_domain[225034](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[620476] "RVV" "temp"
    unknown dst[218704] "dead at end of block" "insert auto destroy"
    unknown call_tmp[869447] "expr temp" "maybe param" "maybe type" "temp"
    (869450 'move' call_tmp[869447](443840 call rank _mt[203] this[218693]))
    unknown call_tmp[869454] "expr temp" "maybe param" "maybe type" "temp"
    (869457 'move' call_tmp[869454](218711 call idxType _mt[203] this[218693]))
    unknown call_tmp[869459] "expr temp" "maybe param" "maybe type" "temp"
    (869462 'move' call_tmp[869459](218709 call range[240](?) call_tmp[869454] both[107114] one[107127]))
    unknown call_tmp[869464] "expr temp" "maybe param" "maybe type" "temp"
    (869467 'move' call_tmp[869464](218705 call * call_tmp[869447] call_tmp[869459]))
    (649460 'default init var' dst[218704] call_tmp[869464])
    (218723 'end of statement')
    unknown call_tmp[869471] "maybe param" "maybe type" "temp"
    (869474 'move' call_tmp[869471](218730 call(218727 call (partial) dims _mt[203] this[218693])))
    const src[218725] "dead at end of block" "const" "insert auto destroy"
    (649462 'init var' src[218725] call_tmp[869471])
    (218732 'end of statement')
    {
      unknown dim[218733] "dead at end of block" "index var" "insert auto destroy"
      (649464 'init var' dim[218733] 0)
      (560329 'end of statement')
      unknown tmp[218757] "maybe param" "temp"
      unknown call_tmp[869478] "expr temp" "maybe param" "maybe type" "temp"
      (869481 'move' call_tmp[869478](443845 call rank _mt[203] this[218693]))
      unknown call_tmp[869483] "expr temp" "maybe param" "maybe type" "temp"
      (869486 'move' call_tmp[869483](218736 call - call_tmp[869478] 1))
      (218769 'move' tmp[218757](218767 call chpl_compute_low_param_loop_bound 0 call_tmp[869483]))
      unknown tmp[218758] "maybe param" "temp"
      unknown call_tmp[869490] "expr temp" "maybe param" "maybe type" "temp"
      (869493 'move' call_tmp[869490](443853 call rank _mt[203] this[218693]))
      unknown call_tmp[869495] "expr temp" "maybe param" "maybe type" "temp"
      (869498 'move' call_tmp[869495](218774 call - call_tmp[869490] 1))
      (218779 'move' tmp[218758](218777 call chpl_compute_high_param_loop_bound 0 call_tmp[869495]))
      unknown tmp[218759] "maybe param" "temp"
      (218782 'move' tmp[218759] 1)
      ParamForLoop[218784]
      { dim[218733] tmp[218757] tmp[218758] tmp[218759]
        unknown call_tmp[869500] "expr temp" "maybe param" "maybe type" "temp"
        (869503 'move' call_tmp[869500](218745 call dst[218704] dim[218733]))
        unknown call_tmp[869505] "expr temp" "maybe param" "maybe type" "temp"
        (869508 'move' call_tmp[869505](218748 call src[218725] dim[218733]))
        unknown call_tmp[869512] "expr temp" "maybe param" "maybe type" "temp"
        (869515 'move' call_tmp[869512](218755 call(218752 call (partial) boundingBox _mt[203] call_tmp[869505])))
        (218742 call = call_tmp[869500] call_tmp[869512])
        (560330 'end of statement' dst[218704] dim[218733] src[218725] dim[218733])
      }
      label _unused_continueLabel[218761]
      label _breakLabel[218760]
    }
    unknown call_tmp[869517] "expr temp" "maybe param" "maybe type" "temp"
    (869520 'move' call_tmp[869517](218798 call chpl__buildDomainExpr(218796 'expand_tuple' dst[218704]) 1))
    (620481 'move' ret[620476](620480 'deref' call_tmp[869517]))
    gotoReturn _end_boundingBox[620474] _end_boundingBox[620474]
    (560335 'end of statement' dst[218704])
    label _end_boundingBox[620474]
    (620478 return ret[620476])
  }
  where {
    (218701 call(218698 call (partial) isRectangular _mt[203] this[218693]))
  }
  function _domain[225034](?).low[218803](arg _mt[218807]:_MT[201], arg this[218805]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[620487] "RVV" "temp"
    unknown call_tmp[869526] "expr temp" "maybe param" "maybe type" "temp"
    (869529 'move' call_tmp[869526](406426 call _value _mt[203] this[218805]))
    unknown call_tmp[869533] "expr temp" "maybe param" "maybe type" "temp"
    (869536 'move' call_tmp[869533](218812 call dsiAlignedLow _mt[203] call_tmp[869526]))
    (620492 'move' ret[620487](620491 'deref' call_tmp[869533]))
    (620489 return ret[620487])
  }
  function _domain[225034](?).low[218817](arg _mt[218821]:_MT[201], arg this[218819]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens" "no return value for void"
  {
    (218830 call compilerError "associative domains do not support '.low'")
    (620494 return _void[46])
  }
  where {
    (218827 call(218824 call (partial) isAssociative _mt[203] this[218819]))
  }
  function _domain[225034](?).high[218837](arg _mt[218841]:_MT[201], arg this[218839]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[620498] "RVV" "temp"
    unknown call_tmp[869542] "expr temp" "maybe param" "maybe type" "temp"
    (869545 'move' call_tmp[869542](406431 call _value _mt[203] this[218839]))
    unknown call_tmp[869549] "expr temp" "maybe param" "maybe type" "temp"
    (869552 'move' call_tmp[869549](218846 call dsiAlignedHigh _mt[203] call_tmp[869542]))
    (620503 'move' ret[620498](620502 'deref' call_tmp[869549]))
    (620500 return ret[620498])
  }
  function _domain[225034](?).high[218851](arg _mt[218855]:_MT[201], arg this[218853]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens" "no return value for void"
  {
    (218864 call compilerError "associative domains do not support '.high'")
    (620505 return _void[46])
  }
  where {
    (218861 call(218858 call (partial) isAssociative _mt[203] this[218853]))
  }
  function _domain[225034](?).lowBound[218871](arg _mt[218875]:_MT[201], arg this[218873]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[620509] "RVV" "temp"
    unknown call_tmp[869558] "expr temp" "maybe param" "maybe type" "temp"
    (869561 'move' call_tmp[869558](406436 call _value _mt[203] this[218873]))
    unknown call_tmp[869565] "expr temp" "maybe param" "maybe type" "temp"
    (869568 'move' call_tmp[869565](218880 call dsiLow _mt[203] call_tmp[869558]))
    (620514 'move' ret[620509](620513 'deref' call_tmp[869565]))
    (620511 return ret[620509])
  }
  function _domain[225034](?).highBound[218885](arg _mt[218889]:_MT[201], arg this[218887]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[620518] "RVV" "temp"
    unknown call_tmp[869572] "expr temp" "maybe param" "maybe type" "temp"
    (869575 'move' call_tmp[869572](406440 call _value _mt[203] this[218887]))
    unknown call_tmp[869579] "expr temp" "maybe param" "maybe type" "temp"
    (869582 'move' call_tmp[869579](218894 call dsiHigh _mt[203] call_tmp[869572]))
    (620523 'move' ret[620518](620522 'deref' call_tmp[869579]))
    (620520 return ret[620518])
  }
  function _domain[225034](?).first[218899](arg _mt[218903]:_MT[201], arg this[218901]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[620527] "RVV" "temp"
    unknown call_tmp[869586] "expr temp" "maybe param" "maybe type" "temp"
    (869589 'move' call_tmp[869586](406444 call _value _mt[203] this[218901]))
    unknown call_tmp[869593] "expr temp" "maybe param" "maybe type" "temp"
    (869596 'move' call_tmp[869593](218908 call dsiFirst _mt[203] call_tmp[869586]))
    (620532 'move' ret[620527](620531 'deref' call_tmp[869593]))
    (620529 return ret[620527])
  }
  function _domain[225034](?).last[218913](arg _mt[218917]:_MT[201], arg this[218915]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[620536] "RVV" "temp"
    unknown call_tmp[869600] "expr temp" "maybe param" "maybe type" "temp"
    (869603 'move' call_tmp[869600](406448 call _value _mt[203] this[218915]))
    unknown call_tmp[869607] "expr temp" "maybe param" "maybe type" "temp"
    (869610 'move' call_tmp[869607](218922 call dsiLast _mt[203] call_tmp[869600]))
    (620541 'move' ret[620536](620540 'deref' call_tmp[869607]))
    (620538 return ret[620536])
  }
  function _domain[225034](?).chpl_checkEltType[218927](arg _mt[218933]:_MT[201], arg this[218929]:_domain[225034](?), arg eltType[218931]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[869612] "expr temp" "maybe param" "maybe type" "temp"
    (869615 'move' call_tmp[869612](218942 call == eltType[218931] void[4]))
    unknown call_tmp[869617] "expr temp" "maybe param" "maybe type" "temp"
    (869620 'move' call_tmp[869617](218946 call _cond_test call_tmp[869612]))
    if call_tmp[869617]
    {
      (218938 call compilerError "array element type cannot be 'void'")
    }
    unknown call_tmp[869622] "expr temp" "maybe param" "maybe type" "temp"
    (869625 'move' call_tmp[869622](218956 call == eltType[218931] nothing[7]))
    unknown call_tmp[869627] "expr temp" "maybe param" "maybe type" "temp"
    (869630 'move' call_tmp[869627](218960 call _cond_test call_tmp[869622]))
    if call_tmp[869627]
    {
      (218952 call compilerError "array element type cannot be 'nothing'")
    }
    unknown call_tmp[869632] "expr temp" "maybe param" "maybe type" "temp"
    (869635 'move' call_tmp[869632](219041 call isGenericType eltType[218931]))
    unknown call_tmp[869637] "expr temp" "maybe param" "maybe type" "temp"
    (869640 'move' call_tmp[869637](219043 call _cond_test call_tmp[869632]))
    if call_tmp[869637]
    {
      unknown call_tmp[869642] "expr temp" "maybe param" "maybe type" "temp"
      (869645 'move' call_tmp[869642](218972 call : eltType[218931] string[244]))
      unknown call_tmp[869647] "expr temp" "maybe param" "maybe type" "temp"
      (869650 'move' call_tmp[869647](218967 call + "creating an array with element type " call_tmp[869642]))
      (218966 call compilerWarning call_tmp[869647])
      (560347 'end of statement')
      unknown tmp[496506] "maybe param" "temp"
      (496517 'move' tmp[496506](218985 call isClassType eltType[218931]))
      unknown call_tmp[869652] "expr temp" "maybe param" "maybe type" "temp"
      (869655 'move' call_tmp[869652](496519 call _cond_invalid tmp[496506]))
      if call_tmp[869652]
      {
        (496522 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[692881] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[692882] "maybe param" "temp"
      unknown call_tmp[869657] "expr temp" "maybe param" "maybe type" "temp"
      (869660 'move' call_tmp[869657](496507 call isTrue tmp[496506]))
      (692887 'move' tmp[692882](692885 call _cond_test call_tmp[869657]))
      if tmp[692882]
      {
        unknown tmp[692889] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[869662] "expr temp" "maybe param" "maybe type" "temp"
        (869665 'move' call_tmp[869662](218991 call : eltType[218931] borrowed[174](?)))
        unknown call_tmp[869667] "expr temp" "maybe param" "maybe type" "temp"
        (869670 'move' call_tmp[869667](218990 call isGenericType call_tmp[869662]))
        unknown call_tmp[869672] "expr temp" "maybe param" "maybe type" "temp"
        (869675 'move' call_tmp[869672](218987 call ! call_tmp[869667]))
        (692891 'move' tmp[692889](496510 call isTrue call_tmp[869672]))
        (692896 'move' tmp[692881](692893 '_paramFoldLogical' tmp[692882] tmp[692889]))
      }
      {
        (692901 'move' tmp[692881](692898 '_paramFoldLogical' tmp[692882] 0))
      }
      unknown call_tmp[869677] "expr temp" "maybe param" "maybe type" "temp"
      (869680 'move' call_tmp[869677](218995 call _cond_test tmp[692881]))
      if call_tmp[869677]
      {
        (218978 call compilerWarning "which is a class type with generic management")
      }
      (219000 call compilerError "array element type cannot currently be generic")
    }
    {
      unknown tmp[496527] "maybe param" "temp"
      (496538 'move' tmp[496527](219030 call(219027 call (partial) isSparse _mt[203] this[218929])))
      unknown call_tmp[869684] "expr temp" "maybe param" "maybe type" "temp"
      (869687 'move' call_tmp[869684](496540 call _cond_invalid tmp[496527]))
      if call_tmp[869684]
      {
        (496543 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[692908] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[692909] "maybe param" "temp"
      unknown call_tmp[869689] "expr temp" "maybe param" "maybe type" "temp"
      (869692 'move' call_tmp[869689](496528 call isTrue tmp[496527]))
      (692914 'move' tmp[692909](692912 call _cond_test call_tmp[869689]))
      if tmp[692909]
      {
        unknown tmp[692916] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[869694] "expr temp" "maybe param" "maybe type" "temp"
        (869697 'move' call_tmp[869694](219034 call isDefaultInitializable eltType[218931]))
        unknown call_tmp[869699] "expr temp" "maybe param" "maybe type" "temp"
        (869702 'move' call_tmp[869699](219031 call ! call_tmp[869694]))
        (692918 'move' tmp[692916](496531 call isTrue call_tmp[869699]))
        (692923 'move' tmp[692908](692920 '_paramFoldLogical' tmp[692909] tmp[692916]))
      }
      {
        (692928 'move' tmp[692908](692925 '_paramFoldLogical' tmp[692909] 0))
      }
      unknown call_tmp[869704] "expr temp" "maybe param" "maybe type" "temp"
      (869707 'move' call_tmp[869704](219036 call _cond_test tmp[692908]))
      if call_tmp[869704]
      {
        unknown call_tmp[869709] "expr temp" "maybe param" "maybe type" "temp"
        (869712 'move' call_tmp[869709](219018 call isNonNilableClass eltType[218931]))
        unknown call_tmp[869714] "expr temp" "maybe param" "maybe type" "temp"
        (869717 'move' call_tmp[869714](219020 call _cond_test call_tmp[869709]))
        if call_tmp[869714]
        {
          (219007 call compilerError "sparse arrays of non-nilable classes are not currently supported")
        }
        {
          (219013 call compilerError "sparse arrays of non-default-initializable types are not currently supported")
        }
      }
    }
    (620543 return _void[46])
  }
  function _domain[225034](?).chpl_checkNegativeStride[219050](arg _mt[219054]:_MT[201], arg this[219052]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[869719] "expr temp" "maybe param" "maybe type" "temp"
    (869722 'move' call_tmp[869719](219060 call _cond_test noNegativeStrideWarnings[209958]))
    if call_tmp[869719]
    {
      gotoReturn _end_chpl_checkNegativeStride[620545] _end_chpl_checkNegativeStride[620545]
    }
    unknown call_tmp[869726] "expr temp" "maybe param" "maybe type" "temp"
    (869729 'move' call_tmp[869726](219148 call(219145 call (partial) isRectangular _mt[203] this[219052])))
    unknown call_tmp[869731] "expr temp" "maybe param" "maybe type" "temp"
    (869734 'move' call_tmp[869731](219149 call _cond_test call_tmp[869726]))
    if call_tmp[869731]
    {
      unknown call_tmp[869738] "expr temp" "maybe param" "maybe type" "temp"
      (869741 'move' call_tmp[869738](219133 call strides _mt[203] this[219052]))
      unknown call_tmp[869745] "expr temp" "maybe param" "maybe type" "temp"
      (869748 'move' call_tmp[869745](219139 call(219136 call (partial) isPositive _mt[203] call_tmp[869738])))
      unknown call_tmp[869750] "expr temp" "maybe param" "maybe type" "temp"
      (869753 'move' call_tmp[869750](219130 call ! call_tmp[869745]))
      unknown call_tmp[869755] "expr temp" "maybe param" "maybe type" "temp"
      (869758 'move' call_tmp[869755](219140 call _cond_test call_tmp[869750]))
      if call_tmp[869755]
      {
        {
          unknown _indexOfInterest[219098] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[219099] "expr temp" "temp"
          unknown call_tmp[869762] "expr temp" "maybe param" "maybe type" "temp"
          (869765 'move' call_tmp[869762](219072 call stride _mt[203] this[219052]))
          unknown call_tmp[869767] "expr temp" "maybe param" "maybe type" "temp"
          (869770 'move' call_tmp[869767](219070 call chpl__tuplify call_tmp[869762]))
          (219108 'move' _iterator[219099](219106 call _getIterator call_tmp[869767]))
          Defer
          {
            {
              (219123 call _freeIterator _iterator[219099])
            }
          }
          { scopeless type
            (219113 'move' _indexOfInterest[219098](219110 call iteratorIndex _iterator[219099]))
          }
          ForLoop[219100]
          {
            unknown s[219067] "index var" "insert auto destroy"
            (560356 'end of statement')
            (219118 'move' s[219067] _indexOfInterest[219098])
            (560357 'end of statement' s[219067])
            {
              unknown call_tmp[869772] "expr temp" "maybe param" "maybe type" "temp"
              (869775 'move' call_tmp[869772](219090 call < s[219067] 0))
              unknown call_tmp[869777] "expr temp" "maybe param" "maybe type" "temp"
              (869780 'move' call_tmp[869777](219094 call _cond_test call_tmp[869772]))
              if call_tmp[869777]
              {
                unknown call_tmp[869784] "expr temp" "maybe param" "maybe type" "temp"
                (869787 'move' call_tmp[869784](219086 call(219083 call (partial) dsiDims _mt[203] this[219052])))
                (219078 call warning "arrays and array slices with negatively-strided dimensions are currently unsupported and may lead to unexpected behavior; comp call_tmp[869784])
                (560359 'end of statement')
                break _breakLabel[219104] _breakLabel[219104]
              }
            }
            label _continueLabel[219103]
            _indexOfInterest[219098]
            _iterator[219099]
          }
          label _breakLabel[219104]
        }
      }
    }
    label _end_chpl_checkNegativeStride[620545]
    (620547 return _void[46])
  }
  function _domain[225034](?).buildArray[219155](arg _mt[219165]:_MT[201], arg this[219157]:_domain[225034](?), arg eltType[219159]:_any[141](?), param arg initElts[219162]:bool[19]) : _unknown[42] "method" "primary method" "no copy return"
  {
    unknown ret[620555] "RVV" "temp"
    (219169 call(443873 call (partial) chpl_checkEltType _mt[203] this[219157]) eltType[219159])
    (560360 'end of statement')
    (219172 call(443878 call (partial) chpl_checkNegativeStride _mt[203] this[219157]))
    (560361 'end of statement')
    unknown call_tmp[869795] "expr temp" "maybe param" "maybe type" "temp"
    (869798 'move' call_tmp[869795](406457 call _value _mt[203] this[219157]))
    unknown call_tmp[869802] "maybe param" "maybe type" "temp"
    (869805 'move' call_tmp[869802](219179 call(219176 call (partial) dsiBuildArray _mt[203] call_tmp[869795]) eltType[219159] initElts[219162]))
    unknown x[219174] "dead at end of block" "insert auto destroy"
    (649466 'init var' x[219174] call_tmp[869802])
    (219183 'end of statement')
    function help[219184]() : _unknown[42] "dont disable remote value forwarding" "no return value for void"
    {
      unknown call_tmp[869809] "expr temp" "maybe param" "maybe type" "temp"
      (869812 'move' call_tmp[869809](406461 call _value _mt[203] this[219157]))
      (219193 call(219190 call (partial) add_arr _mt[203] call_tmp[869809]) x[219174])
      (620551 return _void[46])
    }
    (219198 call help)
    (560363 'end of statement')
    unknown call_tmp[869818] "expr temp" "maybe param" "maybe type" "temp"
    (869821 'move' call_tmp[869818](219203 call eltType _mt[203] x[219174]))
    (219200 call chpl_incRefCountsForDomainsInArrayEltTypes x[219174] call_tmp[869818])
    (560364 'end of statement' x[219174])
    unknown call_tmp[869823] "expr temp" "maybe param" "maybe type" "temp"
    (869826 'move' call_tmp[869823](219208 call _newArray x[219174]))
    (620560 'move' ret[620555](620559 'deref' call_tmp[869823]))
    gotoReturn _end_buildArray[620553] _end_buildArray[620553]
    (560366 'end of statement' x[219174])
    label _end_buildArray[620553]
    (620557 return ret[620555])
  }
  function _domain[225034](?).tryCreateArray[219212](arg _mt[219218]:_MT[201], arg this[219214]:_domain[225034](?), arg eltType[219216]:_any[141](?)) : _unknown[42] throws "method" "primary method" "no copy return" "@unstable"
  {
    unknown ret[620568] "RVV" "temp"
    unknown call_tmp[869828] "expr temp" "maybe param" "maybe type" "temp"
    (869831 'move' call_tmp[869828](219234 'resolves'(219241 call(219238 call .(406466 call . this[219214] c"_value") c"doiTryCreateArray") eltType[219216])))
    unknown call_tmp[869833] "expr temp" "maybe param" "maybe type" "temp"
    (869836 'move' call_tmp[869833](219232 call ! call_tmp[869828]))
    unknown call_tmp[869838] "expr temp" "maybe param" "maybe type" "temp"
    (869841 'move' call_tmp[869838](219243 call _cond_test call_tmp[869833]))
    if call_tmp[869838]
    {
      unknown call_tmp[869843] "expr temp" "maybe param" "maybe type" "temp"
      (869846 'move' call_tmp[869843](219223 call + "cannot call 'tryCreateArray' on domains that do not" " support a 'doiTryCreateArray' method."))
      (219222 call compilerError call_tmp[869843])
    }
    (219249 call(443888 call (partial) chpl_checkEltType _mt[203] this[219214]) eltType[219216])
    (560369 'end of statement')
    (219252 call(443893 call (partial) chpl_checkNegativeStride _mt[203] this[219214]))
    (560370 'end of statement')
    unknown call_tmp[869854] "expr temp" "maybe param" "maybe type" "temp"
    (869857 'move' call_tmp[869854](406470 call _value _mt[203] this[219214]))
    unknown call_tmp[869861] "maybe param" "maybe type" "temp"
    (869864 'move' call_tmp[869861](219259 call(219256 call (partial) doiTryCreateArray _mt[203] call_tmp[869854]) eltType[219216]))
    unknown x[219254] "dead at end of block" "insert auto destroy"
    (649468 'init var' x[219254] call_tmp[869861])
    (219262 'end of statement')
    function help[219263]() : _unknown[42] "dont disable remote value forwarding" "no return value for void"
    {
      unknown call_tmp[869868] "expr temp" "maybe param" "maybe type" "temp"
      (869871 'move' call_tmp[869868](406474 call _value _mt[203] this[219214]))
      (219270 call(219267 call (partial) add_arr _mt[203] call_tmp[869868]) x[219254])
      (620564 return _void[46])
    }
    (219275 call help)
    (560372 'end of statement')
    unknown call_tmp[869877] "expr temp" "maybe param" "maybe type" "temp"
    (869880 'move' call_tmp[869877](219280 call eltType _mt[203] x[219254]))
    (219277 call chpl_incRefCountsForDomainsInArrayEltTypes x[219254] call_tmp[869877])
    (560373 'end of statement' x[219254])
    unknown call_tmp[869882] "expr temp" "maybe param" "maybe type" "temp"
    (869885 'move' call_tmp[869882](219285 call _newArray x[219254]))
    (620573 'move' ret[620568](620572 'deref' call_tmp[869882]))
    gotoReturn _end_tryCreateArray[620566] _end_tryCreateArray[620566]
    (560375 'end of statement' x[219254])
    label _end_tryCreateArray[620566]
    (620570 return ret[620568])
  }
  function _domain[225034](?).tryCreateArray[219289](arg _mt[219300]:_MT[201], arg this[219291]:_domain[225034](?), arg eltType[219293]:_any[141](?), arg initExpr[219297]:_any[141](?)) : _unknown[42] throws "method" "primary method" "no copy return" "@unstable"
  {
    unknown ret[620581] "RVV" "temp"
    unknown call_tmp[869887] "expr temp" "maybe param" "maybe type" "temp"
    (869890 'move' call_tmp[869887](219322 'resolves'(219327 call(219324 call .(406479 call . this[219291] c"_value") c"doiTryCreateArray") eltType[219293])))
    unknown call_tmp[869892] "expr temp" "maybe param" "maybe type" "temp"
    (869895 'move' call_tmp[869892](219320 call ! call_tmp[869887]))
    unknown call_tmp[869897] "expr temp" "maybe param" "maybe type" "temp"
    (869900 'move' call_tmp[869897](219329 call _cond_test call_tmp[869892]))
    if call_tmp[869897]
    {
      unknown call_tmp[869902] "expr temp" "maybe param" "maybe type" "temp"
      (869905 'move' call_tmp[869902](219315 call + "cannot call 'tryCreateArray' on domains that do not" " support a 'doiTryCreateArray' method."))
      (219314 call compilerError call_tmp[869902])
    }
    (219335 call(443906 call (partial) chpl_checkEltType _mt[203] this[219291]) eltType[219293])
    (560378 'end of statement')
    (219338 call(443911 call (partial) chpl_checkNegativeStride _mt[203] this[219291]))
    (560379 'end of statement')
    unknown call_tmp[869913] "expr temp" "maybe param" "maybe type" "temp"
    (869916 'move' call_tmp[869913](406483 call _value _mt[203] this[219291]))
    unknown call_tmp[869920] "maybe param" "maybe type" "temp"
    (869923 'move' call_tmp[869920](219345 call(219342 call (partial) doiTryCreateArray _mt[203] call_tmp[869913]) eltType[219293]))
    unknown x[219340] "dead at end of block" "insert auto destroy"
    (649470 'init var' x[219340] call_tmp[869920])
    (219348 'end of statement')
    function help[219349]() : _unknown[42] "dont disable remote value forwarding" "no return value for void"
    {
      unknown call_tmp[869927] "expr temp" "maybe param" "maybe type" "temp"
      (869930 'move' call_tmp[869927](406487 call _value _mt[203] this[219291]))
      (219356 call(219353 call (partial) add_arr _mt[203] call_tmp[869927]) x[219340])
      (620577 return _void[46])
    }
    (219361 call help)
    (560381 'end of statement')
    unknown call_tmp[869936] "expr temp" "maybe param" "maybe type" "temp"
    (869939 'move' call_tmp[869936](219366 call eltType _mt[203] x[219340]))
    (219363 call chpl_incRefCountsForDomainsInArrayEltTypes x[219340] call_tmp[869936])
    (560382 'end of statement' x[219340])
    unknown call_tmp[869941] "maybe param" "maybe type" "temp"
    (869944 'move' call_tmp[869941](219372 call _newArray x[219340]))
    unknown res[219370] "dead at end of block" "insert auto destroy"
    (649472 'init var' res[219370] call_tmp[869941])
    (219375 'end of statement' x[219340])
    (219376 call = res[219370] initExpr[219297])
    (560385 'end of statement' res[219370])
    (620586 'move' ret[620581](620585 'deref' res[219370]))
    gotoReturn _end_tryCreateArray[620579] _end_tryCreateArray[620579]
    (560387 'end of statement' res[219370])
    label _end_tryCreateArray[620579]
    (620583 return ret[620581])
  }
  where {
    unknown tmp[496548] "maybe param" "temp"
    unknown call_tmp[869946] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (869949 'move' call_tmp[869946](528562 'typeof' initExpr[219297]))
    (496559 'move' tmp[496548](395461 'is_subtype' _iteratorRecord[165](?) call_tmp[869946]))
    unknown call_tmp[869951] "expr temp" "maybe param" "maybe type" "temp"
    (869954 'move' call_tmp[869951](496561 call _cond_invalid tmp[496548]))
    if call_tmp[869951]
    {
      (496564 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[692935] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692936] "maybe param" "temp"
    unknown call_tmp[869956] "expr temp" "maybe param" "maybe type" "temp"
    (869959 'move' call_tmp[869956](496549 call isTrue tmp[496548]))
    (692941 'move' tmp[692936](692939 call _cond_test call_tmp[869956]))
    if tmp[692936]
    {
      (692946 'move' tmp[692935](692943 '_paramFoldLogical' tmp[692936] 1))
    }
    {
      unknown tmp[692948] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[869961] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (869964 'move' call_tmp[869961](528564 'typeof' initExpr[219297]))
      unknown call_tmp[869966] "expr temp" "maybe param" "maybe type" "temp"
      (869969 'move' call_tmp[869966](395462 'is_coercible' eltType[219293] call_tmp[869961]))
      (692950 'move' tmp[692948](496553 call isTrue call_tmp[869966]))
      (692955 'move' tmp[692935](692952 '_paramFoldLogical' tmp[692936] tmp[692948]))
    }
    (1001590 call chpl_statementLevelSymbol tmp[692935])
  }
  function _domain[225034](?).tryCreateArray[219385](arg _mt[219400]:_MT[201], arg this[219387]:_domain[225034](?), arg eltType[219389]:_any[141](?), arg initExpr[219397]:_array[255540](?)) : _unknown[42] throws "method" "primary method" "no copy return" "@unstable"
  {
    unknown ret[620594] "RVV" "temp"
    const-ref _chpl__domain_expr_dom[528568] "dead at end of block" "const" "ref var" "temp"
    (528577 'init ref decl' _chpl__domain_expr_dom[528568])
    (560389 'end of statement')
    unknown call_tmp[869973] "expr temp" "maybe param" "maybe type" "temp"
    (869976 'move' call_tmp[869973](528569 call _dom _mt[203] initExpr[219397]))
    (528575 'move' _chpl__domain_expr_dom[528568](528574 'addr of' call_tmp[869973]))
    unknown call_tmp[869978] "expr temp" "maybe param" "maybe type" "temp"
    (869981 'move' call_tmp[869978](219428 'resolves'(219433 call(219430 call .(406494 call . this[219387] c"_value") c"doiTryCreateArray") eltType[219389])))
    unknown call_tmp[869983] "expr temp" "maybe param" "maybe type" "temp"
    (869986 'move' call_tmp[869983](219426 call ! call_tmp[869978]))
    unknown call_tmp[869988] "expr temp" "maybe param" "maybe type" "temp"
    (869991 'move' call_tmp[869988](219435 call _cond_test call_tmp[869983]))
    if call_tmp[869988]
    {
      unknown call_tmp[869993] "expr temp" "maybe param" "maybe type" "temp"
      (869996 'move' call_tmp[869993](219421 call + "cannot call 'tryCreateArray' on domains that do not" " support a 'doiTryCreateArray' method."))
      (219420 call compilerError call_tmp[869993])
    }
    unknown call_tmp[869998] "expr temp" "maybe param" "maybe type" "temp"
    (870001 'move' call_tmp[869998](219561 call _cond_test 1))
    if call_tmp[869998]
    {
      unknown _indexOfInterest[219491] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[219492] "expr temp" "temp"
      unknown call_tmp[870005] "expr temp" "maybe param" "maybe type" "temp"
      (870008 'move' call_tmp[870005](219504 call(219501 call (partial) dims _mt[203] this[219387])))
      unknown call_tmp[870010] "expr temp" "maybe param" "maybe type" "temp"
      (870013 'move' call_tmp[870010](219505 call _getIterator call_tmp[870005]))
      unknown call_tmp[870017] "expr temp" "maybe param" "maybe type" "temp"
      (870020 'move' call_tmp[870017](219511 call(219508 call (partial) dims _mt[203] _chpl__domain_expr_dom[528568])))
      unknown call_tmp[870022] "expr temp" "maybe param" "maybe type" "temp"
      (870025 'move' call_tmp[870022](219512 call _getIterator call_tmp[870017]))
      unknown call_tmp[870027] "expr temp" "maybe param" "maybe type" "temp"
      (870030 'move' call_tmp[870027](219515 call chpl_build_low_bounded_range 0))
      unknown call_tmp[870032] "expr temp" "maybe param" "maybe type" "temp"
      (870035 'move' call_tmp[870032](219517 call _getIterator call_tmp[870027]))
      (219519 'move' _iterator[219492](219463 call _build_tuple call_tmp[870010] call_tmp[870022] call_tmp[870032]))
      Defer
      {
        {
          (219553 call _freeIterator _iterator[219492])
        }
      }
      { scopeless type
        (219524 'move' _indexOfInterest[219491](219521 call iteratorIndex _iterator[219492]))
      }
      ForLoop[219493]
      {
        (219529 call _check_tuple_var_decl _indexOfInterest[219491] 3)
        (560392 'end of statement')
        unknown d[219441] "index var" "insert auto destroy"
        (560393 'end of statement')
        (219536 'move' d[219441](219533 call _indexOfInterest[219491] 0))
        (560394 'end of statement' d[219441])
        unknown ad[219443] "index var" "insert auto destroy"
        (560396 'end of statement')
        (219542 'move' ad[219443](219539 call _indexOfInterest[219491] 1))
        (560397 'end of statement' ad[219443])
        unknown i[219445] "index var" "insert auto destroy"
        (560399 'end of statement')
        (219548 'move' i[219445](219545 call _indexOfInterest[219491] 2))
        (560400 'end of statement' i[219445])
        unknown call_tmp[870039] "expr temp" "maybe param" "maybe type" "temp"
        (870042 'move' call_tmp[870039](219479 call size _mt[203] d[219441]))
        unknown call_tmp[870046] "expr temp" "maybe param" "maybe type" "temp"
        (870049 'move' call_tmp[870046](219483 call size _mt[203] ad[219443]))
        unknown call_tmp[870051] "expr temp" "maybe param" "maybe type" "temp"
        (870054 'move' call_tmp[870051](219476 call != call_tmp[870039] call_tmp[870046]))
        unknown call_tmp[870056] "expr temp" "maybe param" "maybe type" "temp"
        (870059 'move' call_tmp[870056](219486 call _cond_test call_tmp[870051]))
        if call_tmp[870056]
        {
          unknown call_tmp[870061] "expr temp" "maybe param" "maybe type" "temp"
          (870064 'move' call_tmp[870061](219471 call : i[219445] string[244]))
          unknown call_tmp[870066] "expr temp" "maybe param" "maybe type" "temp"
          (870069 'move' call_tmp[870066](219466 call + "Domain size mismatch in 'tryCreateArray' dimension " call_tmp[870061]))
          (219465 call halt call_tmp[870066])
          (560402 'end of statement' i[219445])
        }
        label _continueLabel[219496]
        _indexOfInterest[219491]
        _iterator[219492]
      }
      label _breakLabel[219497]
    }
    (219566 call(443927 call (partial) chpl_checkEltType _mt[203] this[219387]) eltType[219389])
    (560404 'end of statement')
    (219569 call(443932 call (partial) chpl_checkNegativeStride _mt[203] this[219387]))
    (560405 'end of statement')
    unknown call_tmp[870077] "expr temp" "maybe param" "maybe type" "temp"
    (870080 'move' call_tmp[870077](406502 call _value _mt[203] this[219387]))
    unknown call_tmp[870084] "maybe param" "maybe type" "temp"
    (870087 'move' call_tmp[870084](219576 call(219573 call (partial) doiTryCreateArray _mt[203] call_tmp[870077]) eltType[219389]))
    unknown x[219571] "dead at end of block" "insert auto destroy"
    (649474 'init var' x[219571] call_tmp[870084])
    (219579 'end of statement')
    function help[219580]() : _unknown[42] "dont disable remote value forwarding" "no return value for void"
    {
      unknown call_tmp[870091] "expr temp" "maybe param" "maybe type" "temp"
      (870094 'move' call_tmp[870091](406506 call _value _mt[203] this[219387]))
      (219587 call(219584 call (partial) add_arr _mt[203] call_tmp[870091]) x[219571])
      (620590 return _void[46])
    }
    (219592 call help)
    (560407 'end of statement')
    unknown call_tmp[870100] "expr temp" "maybe param" "maybe type" "temp"
    (870103 'move' call_tmp[870100](219597 call eltType _mt[203] x[219571]))
    (219594 call chpl_incRefCountsForDomainsInArrayEltTypes x[219571] call_tmp[870100])
    (560408 'end of statement' x[219571])
    unknown call_tmp[870105] "maybe param" "maybe type" "temp"
    (870108 'move' call_tmp[870105](219603 call _newArray x[219571]))
    unknown res[219601] "dead at end of block" "insert auto destroy"
    (649476 'init var' res[219601] call_tmp[870105])
    (219606 'end of statement' x[219571])
    (219607 call = res[219601] initExpr[219397])
    (560411 'end of statement' res[219601])
    (620599 'move' ret[620594](620598 'deref' res[219601]))
    gotoReturn _end_tryCreateArray[620592] _end_tryCreateArray[620592]
    (560413 'end of statement' res[219601])
    label _end_tryCreateArray[620592]
    (620596 return ret[620594])
  }
  where {
    unknown tmp[496569] "maybe param" "temp"
    unknown call_tmp[870112] "expr temp" "maybe param" "maybe type" "temp"
    (870115 'move' call_tmp[870112](219407 call rank _mt[203] this[219387]))
    unknown call_tmp[870119] "expr temp" "maybe param" "maybe type" "temp"
    (870122 'move' call_tmp[870119](528580 call _dom _mt[203] initExpr[219397]))
    unknown call_tmp[870126] "expr temp" "maybe param" "maybe type" "temp"
    (870129 'move' call_tmp[870126](219411 call rank _mt[203] call_tmp[870119]))
    (496580 'move' tmp[496569](219404 call == call_tmp[870112] call_tmp[870126]))
    unknown call_tmp[870131] "expr temp" "maybe param" "maybe type" "temp"
    (870134 'move' call_tmp[870131](496582 call _cond_invalid tmp[496569]))
    if call_tmp[870131]
    {
      (496585 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[692962] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[692963] "maybe param" "temp"
    unknown call_tmp[870136] "expr temp" "maybe param" "maybe type" "temp"
    (870139 'move' call_tmp[870136](496570 call isTrue tmp[496569]))
    (692968 'move' tmp[692963](692966 call _cond_test call_tmp[870136]))
    if tmp[692963]
    {
      unknown tmp[692970] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[870143] "expr temp" "maybe param" "maybe type" "temp"
      (870146 'move' call_tmp[870143](528584 call eltType _mt[203] initExpr[219397]))
      unknown call_tmp[870148] "expr temp" "maybe param" "maybe type" "temp"
      (870151 'move' call_tmp[870148](395463 'is_coercible' eltType[219389] call_tmp[870143]))
      (692972 'move' tmp[692970](496573 call isTrue call_tmp[870148]))
      (692977 'move' tmp[692962](692974 '_paramFoldLogical' tmp[692963] tmp[692970]))
    }
    {
      (692982 'move' tmp[692962](692979 '_paramFoldLogical' tmp[692963] 0))
    }
    (1001592 call chpl_statementLevelSymbol tmp[692962])
  }
  function _domain[225034](?).buildArrayWith[219616](arg _mt[219632]:_MT[201], arg this[219618]:_domain[225034](?), arg eltType[219620]:_any[141](?), arg data[219625] :
  (219623 call _ddata[67573](?) eltType[219620]), arg allocSize[219629]:int(64)[10]) : _unknown[42] "method" "primary method" "no copy return"
  {
    unknown ret[620607] "RVV" "temp"
    (219636 call(443945 call (partial) chpl_checkEltType _mt[203] this[219618]) eltType[219620])
    (560415 'end of statement')
    (219639 call(443950 call (partial) chpl_checkNegativeStride _mt[203] this[219618]))
    (560416 'end of statement')
    unknown call_tmp[870159] "expr temp" "maybe param" "maybe type" "temp"
    (870162 'move' call_tmp[870159](406511 call _value _mt[203] this[219618]))
    unknown call_tmp[870166] "maybe param" "maybe type" "temp"
    (870169 'move' call_tmp[870166](219648 call(219645 call (partial) dsiBuildArrayWith _mt[203] call_tmp[870159]) eltType[219620] data[219625] allocSize[219629]))
    unknown x[219641] "dead at end of block" "insert auto destroy"
    (649478 'init var' x[219641] call_tmp[870166])
    (219653 'end of statement')
    function help[219654]() : _unknown[42] "dont disable remote value forwarding" "no return value for void"
    {
      unknown call_tmp[870173] "expr temp" "maybe param" "maybe type" "temp"
      (870176 'move' call_tmp[870173](406515 call _value _mt[203] this[219618]))
      (219661 call(219658 call (partial) add_arr _mt[203] call_tmp[870173]) x[219641])
      (620603 return _void[46])
    }
    (219666 call help)
    (560418 'end of statement')
    unknown call_tmp[870182] "expr temp" "maybe param" "maybe type" "temp"
    (870185 'move' call_tmp[870182](219671 call eltType _mt[203] x[219641]))
    (219668 call chpl_incRefCountsForDomainsInArrayEltTypes x[219641] call_tmp[870182])
    (560419 'end of statement' x[219641])
    unknown call_tmp[870187] "expr temp" "maybe param" "maybe type" "temp"
    (870190 'move' call_tmp[870187](219676 call _newArray x[219641]))
    (620612 'move' ret[620607](620611 'deref' call_tmp[870187]))
    gotoReturn _end_buildArrayWith[620605] _end_buildArrayWith[620605]
    (560421 'end of statement' x[219641])
    label _end_buildArrayWith[620605]
    (620609 return ret[620607])
  }
  function unsafeAssignManager[221006](?)._arraysOverLhsDom[219717](arg _mt[219721]:_MT[201], arg this[219719]:unsafeAssignManager[221006](?)) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[620618] "RVV" "temp"
    {
      unknown _indexOfInterest[219745] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[219746] "expr temp" "temp"
      unknown call_tmp[870194] "expr temp" "maybe param" "maybe type" "temp"
      (870197 'move' call_tmp[870194](406523 call _lhsInstance _mt[203] this[219719]))
      unknown call_tmp[870201] "expr temp" "maybe param" "maybe type" "temp"
      (870204 'move' call_tmp[870201](219729 call _arrs _mt[203] call_tmp[870194]))
      (219755 'move' _iterator[219746](219753 call _getIterator call_tmp[870201]))
      Defer
      {
        {
          (219770 call _freeIterator _iterator[219746])
        }
      }
      { scopeless type
        (219760 'move' _indexOfInterest[219745](219757 call iteratorIndex _iterator[219746]))
      }
      ForLoop[219747]
      {
        unknown baseArr[219724] "index var" "insert auto destroy"
        (560424 'end of statement')
        (219765 'move' baseArr[219724] _indexOfInterest[219745])
        (560425 'end of statement' baseArr[219724])
        unknown call_tmp[870206] "expr temp" "maybe param" "maybe type" "temp"
        (870209 'move' call_tmp[870206](219738 call chpl__isArrayView baseArr[219724]))
        unknown call_tmp[870211] "expr temp" "maybe param" "maybe type" "temp"
        (870214 'move' call_tmp[870211](219735 call ! call_tmp[870206]))
        unknown call_tmp[870216] "expr temp" "maybe param" "maybe type" "temp"
        (870219 'move' call_tmp[870216](219740 call _cond_test call_tmp[870211]))
        if call_tmp[870216]
        {
          unknown yret[620622] "YVV" "temp"
          (620625 'move' yret[620622](620624 'deref' baseArr[219724]))
          (219732 yield yret[620622])
          (560427 'end of statement' baseArr[219724])
        }
        label _continueLabel[219750]
        _indexOfInterest[219745]
        _iterator[219746]
      }
      label _breakLabel[219751]
    }
    (620620 return ret[620618])
  }
  function unsafeAssignManager[221006](?).postinit[219779](arg _mt[219783]:_MT[201], arg this[219781]:unsafeAssignManager[221006](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[219842] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[219843] "expr temp" "temp"
      unknown call_tmp[870223] "expr temp" "maybe param" "maybe type" "temp"
      (870226 'move' call_tmp[870223](219789 call(443967 call (partial) _arraysOverLhsDom _mt[203] this[219781])))
      (219852 'move' _iterator[219843](219850 call _getIterator call_tmp[870223]))
      Defer
      {
        {
          (219867 call _freeIterator _iterator[219843])
        }
      }
      { scopeless type
        (219857 'move' _indexOfInterest[219842](219854 call iteratorIndex _iterator[219843]))
      }
      ForLoop[219844]
      {
        unknown baseArr[219786] "index var" "insert auto destroy"
        (560430 'end of statement')
        (219862 'move' baseArr[219786] _indexOfInterest[219842])
        (560431 'end of statement' baseArr[219786])
        {
          unknown call_tmp[870230] "expr temp" "maybe param" "maybe type" "temp"
          (870233 'move' call_tmp[870230](443975 call _checks _mt[203] this[219781]))
          unknown call_tmp[870235] "expr temp" "maybe param" "maybe type" "temp"
          (870238 'move' call_tmp[870235](219838 call _cond_test call_tmp[870230]))
          if call_tmp[870235]
          {
            unknown tmp[496590] "maybe param" "temp"
            unknown call_tmp[870242] "expr temp" "maybe param" "maybe type" "temp"
            (870245 'move' call_tmp[870242](219823 call(219820 call (partial) chpl_isElementTypeDefaultInitializable _mt[203] baseArr[219786])))
            (496601 'move' tmp[496590](219815 call ! call_tmp[870242]))
            unknown call_tmp[870247] "expr temp" "maybe param" "maybe type" "temp"
            (870250 'move' call_tmp[870247](496603 call _cond_invalid tmp[496590]))
            if call_tmp[870247]
            {
              (496606 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[692989] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[692990] "maybe param" "temp"
            unknown call_tmp[870252] "expr temp" "maybe param" "maybe type" "temp"
            (870255 'move' call_tmp[870252](496591 call isTrue tmp[496590]))
            (692995 'move' tmp[692990](692993 call _cond_test call_tmp[870252]))
            if tmp[692990]
            {
              unknown tmp[692997] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[870259] "expr temp" "maybe param" "maybe type" "temp"
              (870262 'move' call_tmp[870259](219832 call(219829 call (partial) chpl_isElementTypeNonNilableClass _mt[203] baseArr[219786])))
              unknown call_tmp[870264] "expr temp" "maybe param" "maybe type" "temp"
              (870267 'move' call_tmp[870264](219824 call ! call_tmp[870259]))
              (692999 'move' tmp[692997](496594 call isTrue call_tmp[870264]))
              (693004 'move' tmp[692989](693001 '_paramFoldLogical' tmp[692990] tmp[692997]))
            }
            {
              (693009 'move' tmp[692989](693006 '_paramFoldLogical' tmp[692990] 0))
            }
            unknown call_tmp[870269] "expr temp" "maybe param" "maybe type" "temp"
            (870272 'move' call_tmp[870269](219833 call _cond_test tmp[692989]))
            if call_tmp[870269]
            {
              unknown call_tmp[870274] "expr temp" "maybe param" "maybe type" "temp"
              (870277 'move' call_tmp[870274](219797 call + "Checks in 'unsafeAssign' for arrays of non-" "default-initializable elements are not "))
              unknown call_tmp[870279] "maybe param" "maybe type" "temp"
              (870282 'move' call_tmp[870279](219795 call + call_tmp[870274] "supported yet"))
              unknown msg[219794] "dead at end of block" "param"
              (649480 'init var' msg[219794] call_tmp[870279])
              (219809 'end of statement')
              (219811 call halt msg[219794])
            }
          }
        }
        label _continueLabel[219847]
        _indexOfInterest[219842]
        _iterator[219843]
      }
      label _breakLabel[219848]
    }
    (620628 return _void[46])
  }
  function unsafeAssignManager[221006](?).checks[219876](arg _mt[219880]:_MT[201], arg this[219878]:unsafeAssignManager[221006](?)) param : _unknown[42] "inline" "method" "primary method" "no parens"
  {
    unknown ret[620632] "RVV" "param" "temp"
    unknown call_tmp[870286] "expr temp" "maybe param" "maybe type" "temp"
    (870289 'move' call_tmp[870286](443980 call _checks _mt[203] this[219878]))
    (620637 'move' ret[620632](620636 'deref' call_tmp[870286]))
    (620634 return ret[620632])
  }
  function unsafeAssignManager[221006](?).isClassReferenceNil[219887](arg _mt[219893]:_MT[201], arg this[219889]:unsafeAssignManager[221006](?), const  ref arg x[219891]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[620641] "RVV" "temp"
    unknown call_tmp[870291] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (870294 'move' call_tmp[870291](219922 'typeof' x[219891]))
    unknown call_tmp[870296] "expr temp" "maybe param" "maybe type" "temp"
    (870299 'move' call_tmp[870296](219920 call isClassType call_tmp[870291]))
    unknown call_tmp[870301] "expr temp" "maybe param" "maybe type" "temp"
    (870304 'move' call_tmp[870301](219923 call _cond_test call_tmp[870296]))
    if call_tmp[870301]
    {
      unknown tmp[693016] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[693017] "maybe param" "temp"
      unknown call_tmp[870306] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (870309 'move' call_tmp[870306](219901 'typeof' x[219891]))
      unknown call_tmp[870311] "expr temp" "maybe param" "maybe type" "temp"
      (870314 'move' call_tmp[870311](219899 call isBorrowedOrUnmanagedClassType call_tmp[870306]))
      (693022 'move' tmp[693017](693020 call _cond_test call_tmp[870311]))
      if tmp[693017]
      {
        unknown tmp[693024] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (693026 'move' tmp[693024](219902 call == x[219891] nil[32]))
        (693031 'move' tmp[693016](693028 '_paramFoldLogical' tmp[693017] tmp[693024]))
      }
      {
        unknown tmp[693033] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[870318] "expr temp" "maybe param" "maybe type" "temp"
        (870321 'move' call_tmp[870318](219909 call chpl_p _mt[203] x[219891]))
        (693035 'move' tmp[693033](219906 call == call_tmp[870318] nil[32]))
        (693040 'move' tmp[693016](693037 '_paramFoldLogical' tmp[693017] tmp[693033]))
      }
      (620646 'move' ret[620641](620645 'deref' tmp[693016]))
      gotoReturn _end_isClassReferenceNil[620639] _end_isClassReferenceNil[620639]
    }
    {
      (620651 'move' ret[620641](620650 'deref' 0))
      gotoReturn _end_isClassReferenceNil[620639] _end_isClassReferenceNil[620639]
    }
    label _end_isClassReferenceNil[620639]
    (620643 return ret[620641])
  }
  function unsafeAssignManager[221006](?).isClassReferenceNil[219929](arg _mt[219935]:_MT[201], arg this[219931]:unsafeAssignManager[221006](?), const  ref arg x[219933]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[620657] "RVV" "temp"
    unknown call_tmp[870323] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (870326 'move' call_tmp[870323](219940 'typeof' this[219931]))
    unknown call_tmp[870330] "expr temp" "maybe param" "maybe type" "temp"
    (870333 'move' call_tmp[870330](219946 call(219943 call (partial) isClassReferenceNil _mt[203] call_tmp[870323]) x[219933]))
    (620662 'move' ret[620657](620661 'deref' call_tmp[870330]))
    (620659 return ret[620657])
  }
  function unsafeAssignManager[221006](?)._checkThatArrayShapeIsSupported[219950](arg _mt[219956]:_MT[201], arg this[219952]:unsafeAssignManager[221006](?), arg arr[219954]:_any[141](?)) param : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[870337] "expr temp" "maybe param" "maybe type" "temp"
    (870340 'move' call_tmp[870337](219988 call(219985 call (partial) isDefaultRectangular _mt[203] arr[219954])))
    unknown call_tmp[870342] "expr temp" "maybe param" "maybe type" "temp"
    (870345 'move' call_tmp[870342](219982 call ! call_tmp[870337]))
    unknown call_tmp[870347] "expr temp" "maybe param" "maybe type" "temp"
    (870350 'move' call_tmp[870347](219989 call _cond_test call_tmp[870342]))
    if call_tmp[870347]
    {
      unknown call_tmp[870352] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (870355 'move' call_tmp[870352](219974 'typeof' arr[219954]))
      unknown call_tmp[870357] "expr temp" "maybe param" "maybe type" "temp"
      (870360 'move' call_tmp[870357](219971 call : call_tmp[870352] string[244]))
      unknown call_tmp[870362] "expr temp" "maybe param" "maybe type" "temp"
      (870365 'move' call_tmp[870362](219966 call + "The array shape " call_tmp[870357]))
      unknown call_tmp[870367] "expr temp" "maybe param" "maybe type" "temp"
      (870370 'move' call_tmp[870367](219964 call + call_tmp[870362] " is "))
      unknown call_tmp[870372] "expr temp" "maybe param" "maybe type" "temp"
      (870375 'move' call_tmp[870372](219962 call + call_tmp[870367] "not supported"))
      (219961 call compilerError call_tmp[870372])
    }
    (620664 return _void[46])
  }
  function unsafeAssignManager[221006](?)._checkThatIndexMatchesArrayShape[219995](arg _mt[220003]:_MT[201], arg this[219997]:unsafeAssignManager[221006](?), arg arr[219999]:_any[141](?), arg idx[220001]:_any[141](?)) param : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown tmp[496611] "maybe param" "temp"
    unknown call_tmp[870379] "expr temp" "maybe param" "maybe type" "temp"
    (870382 'move' call_tmp[870379](220057 call rank _mt[203] arr[219999]))
    (496622 'move' tmp[496611](220054 call > call_tmp[870379] 1))
    unknown call_tmp[870384] "expr temp" "maybe param" "maybe type" "temp"
    (870387 'move' call_tmp[870384](496624 call _cond_invalid tmp[496611]))
    if call_tmp[870384]
    {
      (496627 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[693047] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[693048] "maybe param" "temp"
    unknown call_tmp[870389] "expr temp" "maybe param" "maybe type" "temp"
    (870392 'move' call_tmp[870389](496612 call isTrue tmp[496611]))
    (693053 'move' tmp[693048](693051 call _cond_test call_tmp[870389]))
    if tmp[693048]
    {
      (693058 'move' tmp[693047](693055 '_paramFoldLogical' tmp[693048] 1))
    }
    {
      unknown tmp[693060] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[870394] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (870397 'move' call_tmp[870394](220064 'typeof' idx[220001]))
      unknown call_tmp[870401] "expr temp" "maybe param" "maybe type" "temp"
      (870404 'move' call_tmp[870401](220066 call idxType _mt[203] arr[219999]))
      unknown call_tmp[870406] "expr temp" "maybe param" "maybe type" "temp"
      (870409 'move' call_tmp[870406](220061 call != call_tmp[870394] call_tmp[870401]))
      (693062 'move' tmp[693060](496616 call isTrue call_tmp[870406]))
      (693067 'move' tmp[693047](693064 '_paramFoldLogical' tmp[693048] tmp[693060]))
    }
    unknown call_tmp[870411] "expr temp" "maybe param" "maybe type" "temp"
    (870414 'move' call_tmp[870411](220069 call _cond_test tmp[693047]))
    if call_tmp[870411]
    {
      unknown call_tmp[870416] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (870419 'move' call_tmp[870416](220037 'typeof' idx[220001]))
      unknown call_tmp[870423] "expr temp" "maybe param" "maybe type" "temp"
      (870426 'move' call_tmp[870423](220041 call rank _mt[203] arr[219999]))
      unknown call_tmp[870430] "expr temp" "maybe param" "maybe type" "temp"
      (870433 'move' call_tmp[870430](220045 call idxType _mt[203] arr[219999]))
      unknown call_tmp[870435] "expr temp" "maybe param" "maybe type" "temp"
      (870438 'move' call_tmp[870435](220038 call * call_tmp[870423] call_tmp[870430]))
      unknown call_tmp[870440] "expr temp" "maybe param" "maybe type" "temp"
      (870443 'move' call_tmp[870440](220034 call != call_tmp[870416] call_tmp[870435]))
      unknown call_tmp[870445] "expr temp" "maybe param" "maybe type" "temp"
      (870448 'move' call_tmp[870445](220048 call _cond_test call_tmp[870440]))
      if call_tmp[870445]
      {
        unknown call_tmp[870450] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (870453 'move' call_tmp[870450](220022 'typeof' idx[220001]))
        unknown call_tmp[870455] "expr temp" "maybe param" "maybe type" "temp"
        (870458 'move' call_tmp[870455](220019 call : call_tmp[870450] string[244]))
        unknown call_tmp[870460] "expr temp" "maybe param" "maybe type" "temp"
        (870463 'move' call_tmp[870460](220014 call + "invalid index type " call_tmp[870455]))
        unknown call_tmp[870465] "expr temp" "maybe param" "maybe type" "temp"
        (870468 'move' call_tmp[870465](220012 call + call_tmp[870460] " for array with rank "))
        unknown call_tmp[870472] "expr temp" "maybe param" "maybe type" "temp"
        (870475 'move' call_tmp[870472](220030 call rank _mt[203] arr[219999]))
        unknown call_tmp[870477] "expr temp" "maybe param" "maybe type" "temp"
        (870480 'move' call_tmp[870477](220027 call : call_tmp[870472] string[244]))
        unknown call_tmp[870482] "expr temp" "maybe param" "maybe type" "temp"
        (870485 'move' call_tmp[870482](220010 call + call_tmp[870465] call_tmp[870477]))
        (220009 call compilerError call_tmp[870482])
      }
    }
    (620666 return _void[46])
  }
  function unsafeAssignManager[221006](?)._isBaseArrClassElementNil[220075](arg _mt[220085]:_MT[201], arg this[220077]:unsafeAssignManager[221006](?), arg baseArr[220080]:BaseArr[424790](?), arg idx[220083]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[620670] "RVV" "temp"
    unknown call_tmp[870489] "expr temp" "maybe param" "maybe type" "temp"
    (870492 'move' call_tmp[870489](220098 call chpl__tuplify idx[220083]))
    unknown call_tmp[870494] "expr temp" "maybe param" "maybe type" "temp"
    (870497 'move' call_tmp[870494](220095 call(220092 call (partial) chpl_unsafeAssignIsClassElementNil _mt[203] baseArr[220080]) this[220077] call_tmp[870489]))
    (620675 'move' ret[620670](620674 'deref' call_tmp[870494]))
    (620672 return ret[620670])
  }
  function unsafeAssignManager[221006](?).isElementInitialized[220102](arg _mt[220115]:_MT[201], arg this[220104]:unsafeAssignManager[221006](?), arg arr[220110]:_array[255540](?), arg idx[220113]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[620679] "RVV" "temp"
    (220119 call(443998 call (partial) _checkThatArrayShapeIsSupported _mt[203] this[220104]) arr[220110])
    (560443 'end of statement')
    (220122 call(444005 call (partial) _checkThatIndexMatchesArrayShape _mt[203] this[220104]) arr[220110] idx[220113])
    (560444 'end of statement')
    unknown call_tmp[870505] "expr temp" "maybe param" "maybe type" "temp"
    (870508 'move' call_tmp[870505](444024 call _checks _mt[203] this[220104]))
    unknown call_tmp[870510] "expr temp" "maybe param" "maybe type" "temp"
    (870513 'move' call_tmp[870510](220205 call _cond_test call_tmp[870505]))
    if call_tmp[870510]
    {
      unknown T[220127] "dead at end of block" "insert auto destroy" "type variable"
      (649486 'move' T[220127](649483 call eltType _mt[203] arr[220110]))
      (560445 'end of statement')
      unknown call_tmp[870517] "expr temp" "maybe param" "maybe type" "temp"
      (870520 'move' call_tmp[870517](220174 call isNonNilableClassType T[220127]))
      unknown call_tmp[870522] "expr temp" "maybe param" "maybe type" "temp"
      (870525 'move' call_tmp[870522](220176 call _cond_test call_tmp[870517]))
      if call_tmp[870522]
      {
        unknown call_tmp[870527] "maybe param" "maybe type" "temp"
        (870530 'move' call_tmp[870527](220137 call chpl__getActualArray arr[220110]))
        unknown baseArr[220135] "dead at end of block" "insert auto destroy"
        (649488 'init var' baseArr[220135] call_tmp[870527])
        (220140 'end of statement')
        unknown call_tmp[870534] "expr temp" "maybe param" "maybe type" "temp"
        (870537 'move' call_tmp[870534](220145 call(444014 call (partial) _isBaseArrClassElementNil _mt[203] this[220104]) baseArr[220135] idx[220113]))
        unknown call_tmp[870539] "expr temp" "maybe param" "maybe type" "temp"
        (870542 'move' call_tmp[870539](220142 call ! call_tmp[870534]))
        (620684 'move' ret[620679](620683 'deref' call_tmp[870539]))
        gotoReturn _end_isElementInitialized[620677] _end_isElementInitialized[620677]
        (560446 'end of statement' baseArr[220135])
      }
      {
        unknown call_tmp[870544] "expr temp" "maybe param" "maybe type" "temp"
        (870547 'move' call_tmp[870544](220167 call isDefaultInitializable T[220127]))
        unknown call_tmp[870549] "expr temp" "maybe param" "maybe type" "temp"
        (870552 'move' call_tmp[870549](220164 call ! call_tmp[870544]))
        unknown call_tmp[870554] "expr temp" "maybe param" "maybe type" "temp"
        (870557 'move' call_tmp[870554](220169 call _cond_test call_tmp[870549]))
        if call_tmp[870554]
        {
          unknown call_tmp[870559] "expr temp" "maybe param" "maybe type" "temp"
          (870562 'move' call_tmp[870559](220151 call + "Checking if a non-default-initializable element is " "initialized is not supported yet"))
          (220150 call halt call_tmp[870559])
          (560448 'end of statement')
          (620689 'move' ret[620679](620688 'deref' 0))
          gotoReturn _end_isElementInitialized[620677] _end_isElementInitialized[620677]
        }
        {
          (620694 'move' ret[620679](620693 'deref' 1))
          gotoReturn _end_isElementInitialized[620677] _end_isElementInitialized[620677]
        }
      }
    }
    {
      unknown call_tmp[870564] "expr temp" "maybe param" "maybe type" "temp"
      (870567 'move' call_tmp[870564](220186 call + "Cannot check initialization state of non-" "default-initializable array elements from a "))
      unknown call_tmp[870569] "maybe param" "maybe type" "temp"
      (870572 'move' call_tmp[870569](220184 call + call_tmp[870564] "manager initialized with 'checks=false'"))
      unknown msg[220183] "dead at end of block" "param"
      (649490 'init var' msg[220183] call_tmp[870569])
      (220198 'end of statement')
      (220200 call compilerError msg[220183])
      (560451 'end of statement')
      (620699 'move' ret[620679](620698 'deref' 0))
      gotoReturn _end_isElementInitialized[620677] _end_isElementInitialized[620677]
    }
    label _end_isElementInitialized[620677]
    (620681 return ret[620679])
  }
  function unsafeAssignManager[221006](?)._checkIfAllElementsAreInitialized[220211](arg _mt[220217]:_MT[201], arg this[220213]:unsafeAssignManager[221006](?), arg baseArr[220215]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[870576] "expr temp" "maybe param" "maybe type" "temp"
    (870579 'move' call_tmp[870576](220307 call(220304 call (partial) chpl_isElementTypeNonNilableClass _mt[203] baseArr[220215])))
    unknown call_tmp[870581] "expr temp" "maybe param" "maybe type" "temp"
    (870584 'move' call_tmp[870581](220308 call _cond_test call_tmp[870576]))
    if call_tmp[870581]
    {
      {
        unknown _indexOfInterest[220243] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[220244] "expr temp" "temp"
        unknown call_tmp[870588] "expr temp" "maybe param" "maybe type" "temp"
        (870591 'move' call_tmp[870588](220224 call(444030 call (partial) newIndices _mt[203] this[220213])))
        (220253 'move' _iterator[220244](220251 call _getIterator call_tmp[870588]))
        Defer
        {
          {
            (220268 call _freeIterator _iterator[220244])
          }
        }
        { scopeless type
          (220258 'move' _indexOfInterest[220243](220255 call iteratorIndex _iterator[220244]))
        }
        ForLoop[220245]
        {
          unknown idx[220221] "index var" "insert auto destroy"
          (560454 'end of statement')
          (220263 'move' idx[220221] _indexOfInterest[220243])
          (560455 'end of statement' idx[220221])
          {
            unknown call_tmp[870595] "expr temp" "maybe param" "maybe type" "temp"
            (870598 'move' call_tmp[870595](220236 call(444035 call (partial) _isBaseArrClassElementNil _mt[203] this[220213]) baseArr[220215] idx[220221]))
            unknown call_tmp[870600] "expr temp" "maybe param" "maybe type" "temp"
            (870603 'move' call_tmp[870600](220239 call _cond_test call_tmp[870595]))
            if call_tmp[870600]
            {
              (220233 call(220230 call (partial) chpl_unsafeAssignHaltUninitializedElement _mt[203] baseArr[220215]) idx[220221])
              (560457 'end of statement' idx[220221])
            }
          }
          label _continueLabel[220248]
          _indexOfInterest[220243]
          _iterator[220244]
        }
        label _breakLabel[220249]
      }
    }
    {
      unknown call_tmp[870609] "expr temp" "maybe param" "maybe type" "temp"
      (870612 'move' call_tmp[870609](220298 call(220295 call (partial) chpl_isElementTypeDefaultInitializable _mt[203] baseArr[220215])))
      unknown call_tmp[870614] "expr temp" "maybe param" "maybe type" "temp"
      (870617 'move' call_tmp[870614](220292 call ! call_tmp[870609]))
      unknown call_tmp[870619] "expr temp" "maybe param" "maybe type" "temp"
      (870622 'move' call_tmp[870619](220299 call _cond_test call_tmp[870614]))
      if call_tmp[870619]
      {
        unknown call_tmp[870624] "expr temp" "maybe param" "maybe type" "temp"
        (870627 'move' call_tmp[870624](220278 call + "internal error: checks for arrays of non-default-" "initializable elements are not supported"))
        (220277 call halt call_tmp[870624])
      }
      {
        (220288 call halt "Internal error!")
      }
    }
    (620703 return _void[46])
  }
  function unsafeAssignManager[221006](?)._ensureNoLongerManagingThis[220315](arg _mt[220319]:_MT[201], ref arg this[220317]:unsafeAssignManager[221006](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[870631] "expr temp" "maybe param" "maybe type" "temp"
    (870634 'move' call_tmp[870631](444049 call _isActiveManager _mt[203] this[220317]))
    unknown call_tmp[870636] "expr temp" "maybe param" "maybe type" "temp"
    (870639 'move' call_tmp[870636](220329 call ! call_tmp[870631]))
    unknown call_tmp[870641] "expr temp" "maybe param" "maybe type" "temp"
    (870644 'move' call_tmp[870641](220332 call _cond_test call_tmp[870636]))
    if call_tmp[870641]
    {
      gotoReturn _end__ensureNoLongerManagingThis[620705] _end__ensureNoLongerManagingThis[620705]
    }
    {
      unknown call_tmp[870648] "expr temp" "maybe param" "maybe type" "temp"
      (870651 'move' call_tmp[870648](444044 call _isActiveManager _mt[203] this[220317]))
      (220324 call = call_tmp[870648] 0)
    }
    {
      unknown _indexOfInterest[220381] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[220382] "expr temp" "temp"
      unknown call_tmp[870655] "expr temp" "maybe param" "maybe type" "temp"
      (870658 'move' call_tmp[870655](220341 call(444053 call (partial) _arraysOverLhsDom _mt[203] this[220317])))
      (220391 'move' _iterator[220382](220389 call _getIterator call_tmp[870655]))
      Defer
      {
        {
          (220406 call _freeIterator _iterator[220382])
        }
      }
      { scopeless type
        (220396 'move' _indexOfInterest[220381](220393 call iteratorIndex _iterator[220382]))
      }
      ForLoop[220383]
      {
        unknown baseArr[220338] "index var" "insert auto destroy"
        (560464 'end of statement')
        (220401 'move' baseArr[220338] _indexOfInterest[220381])
        (560465 'end of statement' baseArr[220338])
        {
          unknown call_tmp[870662] "expr temp" "maybe param" "maybe type" "temp"
          (870665 'move' call_tmp[870662](220376 call(220373 call (partial) chpl_isElementTypeDefaultInitializable _mt[203] baseArr[220338])))
          unknown call_tmp[870667] "expr temp" "maybe param" "maybe type" "temp"
          (870670 'move' call_tmp[870667](220370 call ! call_tmp[870662]))
          unknown call_tmp[870672] "expr temp" "maybe param" "maybe type" "temp"
          (870675 'move' call_tmp[870672](220377 call _cond_test call_tmp[870667]))
          if call_tmp[870672]
          {
            unknown call_tmp[870679] "expr temp" "maybe param" "maybe type" "temp"
            (870682 'move' call_tmp[870679](444065 call _checks _mt[203] this[220317]))
            unknown call_tmp[870684] "expr temp" "maybe param" "maybe type" "temp"
            (870687 'move' call_tmp[870684](220349 call _cond_test call_tmp[870679]))
            if call_tmp[870684]
            {
              (220345 call(444059 call (partial) _checkIfAllElementsAreInitialized _mt[203] this[220317]) baseArr[220338])
              (560467 'end of statement' baseArr[220338])
            }
            const policy[220355] "dead at end of block" "const" "insert auto destroy"
            (649492 'init var' policy[220355] normalInit[67542])
            (220361 'end of statement')
            (220368 call(220365 call (partial) chpl_setResizePolicy _mt[203] baseArr[220338]) policy[220355])
            (560469 'end of statement' baseArr[220338] policy[220355])
          }
        }
        label _continueLabel[220386]
        _indexOfInterest[220381]
        _iterator[220382]
      }
      label _breakLabel[220387]
    }
    label _end__ensureNoLongerManagingThis[620705]
    (620707 return _void[46])
  }
  function unsafeAssignManager[221006](?).deinit[220415](arg _mt[220419]:_MT[201], ref arg this[220417]:unsafeAssignManager[221006](?)) : _unknown[42] "destructor" "method" "primary method" "no return value for void"
  {
    (220423 call(444072 call (partial) _ensureNoLongerManagingThis _mt[203] this[220417]))
    (620711 return _void[46])
  }
  function unsafeAssignManager[221006](?)._isArrayOwnedByLhsDomain[220426](arg _mt[220432]:_MT[201], arg this[220428]:unsafeAssignManager[221006](?), arg arr[220430]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[620715] "RVV" "temp"
    unknown call_tmp[870697] "expr temp" "maybe param" "maybe type" "temp"
    (870700 'move' call_tmp[870697](220444 call(220441 call (partial) dsiGetBaseDom _mt[203] arr[220430])))
    unknown call_tmp[870704] "expr temp" "maybe param" "maybe type" "temp"
    (870707 'move' call_tmp[870704](444077 call _lhsInstance _mt[203] this[220428]))
    unknown call_tmp[870709] "expr temp" "maybe param" "maybe type" "temp"
    (870712 'move' call_tmp[870709](220436 call == call_tmp[870697] call_tmp[870704]))
    (620720 'move' ret[620715](620719 'deref' call_tmp[870709]))
    (620717 return ret[620715])
  }
  function unsafeAssignManager[221006](?)._moveInitializeElement[220448](arg _mt[220458]:_MT[201], arg this[220450]:unsafeAssignManager[221006](?), ref arg arr[220452]:_any[141](?), arg idx[220454]:_any[141](?), in arg value[220456]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown elem[220470] "dead at end of block" "ref var"
    (649497 'init ref decl' elem[220470])
    unknown call_tmp[870714] "expr temp" "maybe param" "maybe type" "temp"
    (870717 'move' call_tmp[870714](220472 call arr[220452] idx[220454]))
    (649495 'move' elem[220470](649494 'addr of' call_tmp[870714]))
    (220475 'end of statement')
    (220477 call moveInitialize elem[220470] value[220456])
    (560474 'end of statement' elem[220470])
    (620722 return _void[46])
    (396816 'used modules list'(220468 'import' MemMove[209934].{moveInitialize}))
  }
  function unsafeAssignManager[221006](?)._checkNoChecksWhenNonDefaultInitializableEltType[220482](arg _mt[220488]:_MT[201], arg this[220484]:unsafeAssignManager[221006](?), arg arr[220486]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[870721] "expr temp" "maybe param" "maybe type" "temp"
    (870724 'move' call_tmp[870721](444087 call _checks _mt[203] this[220484]))
    unknown call_tmp[870726] "expr temp" "maybe param" "maybe type" "temp"
    (870729 'move' call_tmp[870726](220530 call _cond_test call_tmp[870721]))
    if call_tmp[870726]
    {
      unknown tmp[496632] "maybe param" "temp"
      unknown call_tmp[870733] "expr temp" "maybe param" "maybe type" "temp"
      (870736 'move' call_tmp[870733](220514 call eltType _mt[203] arr[220486]))
      unknown call_tmp[870738] "expr temp" "maybe param" "maybe type" "temp"
      (870741 'move' call_tmp[870738](220512 call isDefaultInitializable call_tmp[870733]))
      (496643 'move' tmp[496632](220509 call ! call_tmp[870738]))
      unknown call_tmp[870743] "expr temp" "maybe param" "maybe type" "temp"
      (870746 'move' call_tmp[870743](496645 call _cond_invalid tmp[496632]))
      if call_tmp[870743]
      {
        (496648 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[693074] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[693075] "maybe param" "temp"
      unknown call_tmp[870748] "expr temp" "maybe param" "maybe type" "temp"
      (870751 'move' call_tmp[870748](496633 call isTrue tmp[496632]))
      (693080 'move' tmp[693075](693078 call _cond_test call_tmp[870748]))
      if tmp[693075]
      {
        unknown tmp[693082] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[870755] "expr temp" "maybe param" "maybe type" "temp"
        (870758 'move' call_tmp[870755](220522 call eltType _mt[203] arr[220486]))
        unknown call_tmp[870760] "expr temp" "maybe param" "maybe type" "temp"
        (870763 'move' call_tmp[870760](220520 call isNonNilableClass call_tmp[870755]))
        unknown call_tmp[870765] "expr temp" "maybe param" "maybe type" "temp"
        (870768 'move' call_tmp[870765](220517 call ! call_tmp[870760]))
        (693084 'move' tmp[693082](496636 call isTrue call_tmp[870765]))
        (693089 'move' tmp[693074](693086 '_paramFoldLogical' tmp[693075] tmp[693082]))
      }
      {
        (693094 'move' tmp[693074](693091 '_paramFoldLogical' tmp[693075] 0))
      }
      unknown call_tmp[870770] "expr temp" "maybe param" "maybe type" "temp"
      (870773 'move' call_tmp[870770](220525 call _cond_test tmp[693074]))
      if call_tmp[870770]
      {
        unknown call_tmp[870775] "expr temp" "maybe param" "maybe type" "temp"
        (870778 'move' call_tmp[870775](220497 call + "Checks in 'unsafeAssign' for arrays of non-" "default-initializable elements are not "))
        unknown call_tmp[870780] "maybe param" "maybe type" "temp"
        (870783 'move' call_tmp[870780](220495 call + call_tmp[870775] "supported yet"))
        unknown msg[220494] "dead at end of block" "param"
        (649499 'init var' msg[220494] call_tmp[870780])
        (220503 'end of statement')
        (220505 call compilerError msg[220494])
      }
    }
    (620724 return _void[46])
  }
  function unsafeAssignManager[221006](?).initialize[220536](arg _mt[220556]:_MT[201], arg this[220538]:unsafeAssignManager[221006](?), ref arg arr[220544]:_array[255540](?), arg idx[220547]:_any[141](?), in arg value[220553] :
  (220550 call eltType _mt[203] arr[220544])) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[870789] "expr temp" "maybe param" "maybe type" "temp"
    (870792 'move' call_tmp[870789](220601 call eltType _mt[203] arr[220544]))
    unknown call_tmp[870794] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (870797 'move' call_tmp[870794](220605 'typeof' value[220553]))
    unknown call_tmp[870799] "expr temp" "maybe param" "maybe type" "temp"
    (870802 'move' call_tmp[870799](220598 call != call_tmp[870789] call_tmp[870794]))
    unknown call_tmp[870804] "expr temp" "maybe param" "maybe type" "temp"
    (870807 'move' call_tmp[870804](220606 call _cond_test call_tmp[870799]))
    if call_tmp[870804]
    {
      unknown call_tmp[870809] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (870812 'move' call_tmp[870809](220584 'typeof' value[220553]))
      unknown call_tmp[870814] "expr temp" "maybe param" "maybe type" "temp"
      (870817 'move' call_tmp[870814](220581 call : call_tmp[870809] string[244]))
      unknown call_tmp[870819] "expr temp" "maybe param" "maybe type" "temp"
      (870822 'move' call_tmp[870819](220576 call + "Initialization value type '" call_tmp[870814]))
      unknown call_tmp[870824] "expr temp" "maybe param" "maybe type" "temp"
      (870827 'move' call_tmp[870824](220574 call + call_tmp[870819] "' does not match array element type '"))
      unknown call_tmp[870831] "expr temp" "maybe param" "maybe type" "temp"
      (870834 'move' call_tmp[870831](220592 call eltType _mt[203] arr[220544]))
      unknown call_tmp[870836] "expr temp" "maybe param" "maybe type" "temp"
      (870839 'move' call_tmp[870836](220589 call : call_tmp[870831] string[244]))
      unknown call_tmp[870841] "expr temp" "maybe param" "maybe type" "temp"
      (870844 'move' call_tmp[870841](220572 call + call_tmp[870824] call_tmp[870836]))
      unknown call_tmp[870846] "expr temp" "maybe param" "maybe type" "temp"
      (870849 'move' call_tmp[870846](220570 call + call_tmp[870841] "'"))
      (220569 call compilerError call_tmp[870846])
    }
    (220612 call(444093 call (partial) _checkThatArrayShapeIsSupported _mt[203] this[220538]) arr[220544])
    (560479 'end of statement')
    (220615 call(444098 call (partial) _checkThatIndexMatchesArrayShape _mt[203] this[220538]) arr[220544] idx[220547])
    (560480 'end of statement')
    (220619 call(444106 call (partial) _checkNoChecksWhenNonDefaultInitializableEltType _mt[203] this[220538]) arr[220544])
    (560481 'end of statement')
    unknown call_tmp[870859] "expr temp" "maybe param" "maybe type" "temp"
    (870862 'move' call_tmp[870859](220650 call eltType _mt[203] arr[220544]))
    unknown call_tmp[870864] "expr temp" "maybe param" "maybe type" "temp"
    (870867 'move' call_tmp[870864](220648 call isDefaultInitializable call_tmp[870859]))
    unknown call_tmp[870869] "expr temp" "maybe param" "maybe type" "temp"
    (870872 'move' call_tmp[870869](220653 call _cond_test call_tmp[870864]))
    if call_tmp[870869]
    {
      unknown call_tmp[870874] "expr temp" "maybe param" "maybe type" "temp"
      (870877 'move' call_tmp[870874](220629 call + "Cannot call 'initialize' on array with " "default-initializable element type "))
      unknown call_tmp[870879] "expr temp" "maybe param" "maybe type" "temp"
      (870882 'move' call_tmp[870879](220627 call + call_tmp[870874] "'"))
      unknown call_tmp[870886] "expr temp" "maybe param" "maybe type" "temp"
      (870889 'move' call_tmp[870886](220641 call eltType _mt[203] arr[220544]))
      unknown call_tmp[870891] "expr temp" "maybe param" "maybe type" "temp"
      (870894 'move' call_tmp[870891](220638 call : call_tmp[870886] string[244]))
      unknown call_tmp[870896] "expr temp" "maybe param" "maybe type" "temp"
      (870899 'move' call_tmp[870896](220625 call + call_tmp[870879] call_tmp[870891]))
      unknown call_tmp[870901] "expr temp" "maybe param" "maybe type" "temp"
      (870904 'move' call_tmp[870901](220623 call + call_tmp[870896] "'"))
      (220622 call compilerError call_tmp[870901])
    }
    unknown call_tmp[870908] "expr temp" "maybe param" "maybe type" "temp"
    (870911 'move' call_tmp[870908](220672 call(444113 call (partial) _isArrayOwnedByLhsDomain _mt[203] this[220538]) arr[220544]))
    unknown call_tmp[870913] "expr temp" "maybe param" "maybe type" "temp"
    (870916 'move' call_tmp[870913](220669 call ! call_tmp[870908]))
    unknown call_tmp[870918] "expr temp" "maybe param" "maybe type" "temp"
    (870921 'move' call_tmp[870918](220674 call _cond_test call_tmp[870913]))
    if call_tmp[870918]
    {
      unknown call_tmp[870923] "expr temp" "maybe param" "maybe type" "temp"
      (870926 'move' call_tmp[870923](220660 call + "Can only initialize elements of arrays declared over " "the domain being resized"))
      (220659 call halt call_tmp[870923])
    }
    unknown call_tmp[870930] "expr temp" "maybe param" "maybe type" "temp"
    (870933 'move' call_tmp[870930](220694 call _dom _mt[203] arr[220544]))
    unknown call_tmp[870937] "expr temp" "maybe param" "maybe type" "temp"
    (870940 'move' call_tmp[870937](220700 call(220697 call (partial) contains _mt[203] call_tmp[870930]) idx[220547]))
    unknown call_tmp[870942] "expr temp" "maybe param" "maybe type" "temp"
    (870945 'move' call_tmp[870942](220691 call ! call_tmp[870937]))
    unknown call_tmp[870947] "expr temp" "maybe param" "maybe type" "temp"
    (870950 'move' call_tmp[870947](220702 call _cond_test call_tmp[870942]))
    if call_tmp[870947]
    {
      unknown call_tmp[870954] "expr temp" "maybe param" "maybe type" "temp"
      (870957 'move' call_tmp[870954](220687 call(220684 call (partial) format _mt[203] "Array index out of bounds: %\?") idx[220547]))
      (220680 call halt call_tmp[870954])
    }
    unknown call_tmp[870961] "expr temp" "maybe param" "maybe type" "temp"
    (870964 'move' call_tmp[870961](444130 call _checks _mt[203] this[220538]))
    unknown call_tmp[870966] "expr temp" "maybe param" "maybe type" "temp"
    (870969 'move' call_tmp[870966](220729 call _cond_test call_tmp[870961]))
    if call_tmp[870966]
    {
      unknown call_tmp[870973] "expr temp" "maybe param" "maybe type" "temp"
      (870976 'move' call_tmp[870973](220721 call(444123 call (partial) isElementInitialized _mt[203] this[220538]) arr[220544] idx[220547]))
      unknown call_tmp[870978] "expr temp" "maybe param" "maybe type" "temp"
      (870981 'move' call_tmp[870978](220724 call _cond_test call_tmp[870973]))
      if call_tmp[870978]
      {
        unknown call_tmp[870985] "expr temp" "maybe param" "maybe type" "temp"
        (870988 'move' call_tmp[870985](220717 call(220714 call (partial) format _mt[203] "Element at array index '%\?' is already initialized") idx[220547]))
        (220710 call halt call_tmp[870985])
      }
    }
    (220734 call(444136 call (partial) _moveInitializeElement _mt[203] this[220538]) arr[220544] idx[220547] value[220553])
    (620726 return _void[46])
    (396818 'used modules list'(220567 'import' FormattedIO[208298].{string}))
  }
  function unsafeAssignManager[221006](?).enterContext[220740](arg _mt[220744]:_MT[201], ref arg this[220742]:unsafeAssignManager[221006](?)) ref : _unknown[42] "method" "primary method"
  {
    unknown ret[620730] "RVV" "temp"
    unknown call_tmp[870994] "expr temp" "maybe param" "maybe type" "temp"
    (870997 'move' call_tmp[870994](444149 call _isActiveManager _mt[203] this[220742]))
    unknown call_tmp[870999] "expr temp" "maybe param" "maybe type" "temp"
    (871002 'move' call_tmp[870999](220759 call _cond_test call_tmp[870994]))
    if call_tmp[870999]
    {
      (220749 call halt "Cannot nest a manager for unsafe domain assignment")
    }
    {
      unknown call_tmp[871006] "expr temp" "maybe param" "maybe type" "temp"
      (871009 'move' call_tmp[871006](444144 call _isActiveManager _mt[203] this[220742]))
      (220754 call = call_tmp[871006] 1)
    }
    {
      unknown _indexOfInterest[220845] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[220846] "expr temp" "temp"
      unknown call_tmp[871013] "expr temp" "maybe param" "maybe type" "temp"
      (871016 'move' call_tmp[871013](220766 call(444153 call (partial) _arraysOverLhsDom _mt[203] this[220742])))
      (220855 'move' _iterator[220846](220853 call _getIterator call_tmp[871013]))
      Defer
      {
        {
          (220870 call _freeIterator _iterator[220846])
        }
      }
      { scopeless type
        (220860 'move' _indexOfInterest[220845](220857 call iteratorIndex _iterator[220846]))
      }
      ForLoop[220847]
      {
        unknown baseArr[220763] "index var" "insert auto destroy"
        (560490 'end of statement')
        (220865 'move' baseArr[220763] _indexOfInterest[220845])
        (560491 'end of statement' baseArr[220763])
        {
          unknown call_tmp[871020] "expr temp" "maybe param" "maybe type" "temp"
          (871023 'move' call_tmp[871020](220775 call(220772 call (partial) chpl_isElementTypeDefaultInitializable _mt[203] baseArr[220763])))
          unknown call_tmp[871025] "expr temp" "maybe param" "maybe type" "temp"
          (871028 'move' call_tmp[871025](220776 call _cond_test call_tmp[871020]))
          if call_tmp[871025]
          {
            continue _continueLabel[220850] _continueLabel[220850]
          }
          unknown call_tmp[871032] "expr temp" "maybe param" "maybe type" "temp"
          (871035 'move' call_tmp[871032](220840 call(220837 call (partial) chpl_isElementTypeNonNilableClass _mt[203] baseArr[220763])))
          unknown call_tmp[871037] "expr temp" "maybe param" "maybe type" "temp"
          (871040 'move' call_tmp[871037](220841 call _cond_test call_tmp[871032]))
          if call_tmp[871037]
          {
            const policy[220783] "dead at end of block" "const" "insert auto destroy"
            unknown tmp[693101] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[693102] "maybe param" "temp"
            unknown call_tmp[871044] "expr temp" "maybe param" "maybe type" "temp"
            (871047 'move' call_tmp[871044](444158 call _checks _mt[203] this[220742]))
            (693107 'move' tmp[693102](693105 call _cond_test call_tmp[871044]))
            if tmp[693102]
            {
              (693112 'move' tmp[693101](693109 '_paramFoldLogical' tmp[693102] skipInitButClearMem[67546]))
            }
            {
              (693117 'move' tmp[693101](693114 '_paramFoldLogical' tmp[693102] skipInit[67544]))
            }
            (649501 'init var' policy[220783] tmp[693101])
            (220797 'end of statement')
            (220802 call(220799 call (partial) chpl_setResizePolicy _mt[203] baseArr[220763]) policy[220783])
            (560493 'end of statement' baseArr[220763] policy[220783])
          }
          {
            unknown call_tmp[871053] "expr temp" "maybe param" "maybe type" "temp"
            (871056 'move' call_tmp[871053](444165 call _checks _mt[203] this[220742]))
            unknown call_tmp[871058] "expr temp" "maybe param" "maybe type" "temp"
            (871061 'move' call_tmp[871058](220832 call _cond_test call_tmp[871053]))
            if call_tmp[871058]
            {
              unknown call_tmp[871063] "expr temp" "maybe param" "maybe type" "temp"
              (871066 'move' call_tmp[871063](220808 call + "Runtime checks are currently only supported for " "arrays of non-nilable classes"))
              (220807 call halt call_tmp[871063])
            }
            {
              const policy[220818] "dead at end of block" "const" "insert auto destroy"
              (649503 'init var' policy[220818] skipInitButClearMem[67546])
              (220824 'end of statement')
              (220829 call(220826 call (partial) chpl_setResizePolicy _mt[203] baseArr[220763]) policy[220818])
              (560497 'end of statement' baseArr[220763] policy[220818])
            }
          }
        }
        label _continueLabel[220850]
        _indexOfInterest[220845]
        _iterator[220846]
      }
      label _breakLabel[220851]
    }
    unknown call_tmp[871072] "expr temp" "maybe param" "maybe type" "temp"
    (871075 'move' call_tmp[871072](444173 call _lhsPid _mt[203] this[220742]))
    unknown call_tmp[871079] "expr temp" "maybe param" "maybe type" "temp"
    (871082 'move' call_tmp[871079](444178 call _lhsInstance _mt[203] this[220742]))
    unknown call_tmp[871084] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (871087 'move' call_tmp[871084](1000357 'new' _domain[225034](?) call_tmp[871072] call_tmp[871079](_unowned = 1)))
    unknown lhsTmpDom[220878] "dead at end of block" "insert auto destroy"
    (649505 'init var' lhsTmpDom[220878] call_tmp[871084])
    (220887 'end of statement')
    unknown call_tmp[871091] "expr temp" "maybe param" "maybe type" "temp"
    (871094 'move' call_tmp[871091](444186 call _rhsPid _mt[203] this[220742]))
    unknown call_tmp[871098] "expr temp" "maybe param" "maybe type" "temp"
    (871101 'move' call_tmp[871098](444193 call _rhsInstance _mt[203] this[220742]))
    unknown call_tmp[871103] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (871106 'move' call_tmp[871103](1000358 'new' _domain[225034](?) call_tmp[871091] call_tmp[871098](_unowned = 1)))
    unknown rhsTmpDom[220889] "dead at end of block" "insert auto destroy"
    (649507 'init var' rhsTmpDom[220889] call_tmp[871103])
    (220898 'end of statement')
    (220899 call = lhsTmpDom[220878] rhsTmpDom[220889])
    (560500 'end of statement' lhsTmpDom[220878] rhsTmpDom[220889])
    (620735 'move' ret[620730](620734 'addr of' this[220742]))
    (620732 return ret[620730])
  }
  function unsafeAssignManager[221006](?).exitContext[220907](arg _mt[220918]:_MT[201], ref arg this[220909]:unsafeAssignManager[221006](?), in arg err[220915] :
  (220912 call _owned[238](?) borrowed Error?[467977])) : _unknown[42] throws "method" "primary method" "no return value for void"
  {
    (220922 call(444202 call (partial) _ensureNoLongerManagingThis _mt[203] this[220909]))
    (560504 'end of statement')
    unknown call_tmp[871110] "expr temp" "maybe param" "maybe type" "temp"
    (871113 'move' call_tmp[871110](220927 call _cond_test err[220915]))
    if call_tmp[871110]
    {
      unknown call_tmp[871115] "expr temp" "maybe param" "maybe type" "temp"
      (871118 'move' call_tmp[871115](542449 call chpl_fix_thrown_error err[220915]))
      (220923 'throw' call_tmp[871115])
    }
    (620737 return _void[46])
  }
  function unsafeAssignManager[221006](?).newIndices[220934](arg _mt[220938]:_MT[201], arg this[220936]:unsafeAssignManager[221006](?)) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[620741] "RVV" "temp"
    unknown call_tmp[871122] "expr temp" "maybe param" "maybe type" "temp"
    (871125 'move' call_tmp[871122](444210 call _rhsPid _mt[203] this[220936]))
    unknown call_tmp[871129] "expr temp" "maybe param" "maybe type" "temp"
    (871132 'move' call_tmp[871129](444215 call _rhsInstance _mt[203] this[220936]))
    unknown call_tmp[871134] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (871137 'move' call_tmp[871134](1000359 'new' _domain[225034](?) call_tmp[871122] call_tmp[871129](_unowned = 1)))
    unknown rhsTmpDom[220942] "dead at end of block" "insert auto destroy"
    (649509 'init var' rhsTmpDom[220942] call_tmp[871134])
    (220951 'end of statement')
    {
      unknown _indexOfInterest[220971] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[220972] "expr temp" "temp"
      (220981 'move' _iterator[220972](220979 call _getIterator rhsTmpDom[220942]))
      Defer
      {
        {
          (220996 call _freeIterator _iterator[220972])
        }
      }
      { scopeless type
        (220986 'move' _indexOfInterest[220971](220983 call iteratorIndex _iterator[220972]))
      }
      ForLoop[220973]
      {
        unknown idx[220952] "index var" "insert auto destroy"
        (560507 'end of statement')
        (220991 'move' idx[220952] _indexOfInterest[220971])
        (560508 'end of statement' idx[220952])
        unknown call_tmp[871141] "expr temp" "maybe param" "maybe type" "temp"
        (871144 'move' call_tmp[871141](406563 call _oldLhsDomainCopy _mt[203] this[220936]))
        unknown call_tmp[871148] "expr temp" "maybe param" "maybe type" "temp"
        (871151 'move' call_tmp[871148](220964 call(220961 call (partial) contains _mt[203] call_tmp[871141]) idx[220952]))
        unknown call_tmp[871153] "expr temp" "maybe param" "maybe type" "temp"
        (871156 'move' call_tmp[871153](220958 call ! call_tmp[871148]))
        unknown call_tmp[871158] "expr temp" "maybe param" "maybe type" "temp"
        (871161 'move' call_tmp[871158](220966 call _cond_test call_tmp[871153]))
        if call_tmp[871158]
        {
          unknown yret[620745] "YVV" "temp"
          (620748 'move' yret[620745](620747 'deref' idx[220952]))
          (220955 yield yret[620745])
          (560510 'end of statement' idx[220952])
        }
        label _continueLabel[220976]
        _indexOfInterest[220971]
        _iterator[220972]
      }
      label _breakLabel[220977]
    }
    (620743 return ret[620741])
  }
  function _domain[225034](?).unsafeAssign[221008](arg _mt[221022]:_MT[201], ref arg this[221010]:_domain[225034](?), const  ref arg dom[221013]:_domain[225034](?), param arg checks[221018]:bool[19] =
  0) : _unknown[42] "method" "primary method"
  {
    unknown ret[620753] "RVV" "temp"
    unknown call_tmp[871165] "expr temp" "maybe param" "maybe type" "temp"
    (871168 'move' call_tmp[871165](444227 call _value _mt[203] this[221010]))
    unknown call_tmp[871172] "expr temp" "maybe param" "maybe type" "temp"
    (871175 'move' call_tmp[871172](444232 call _pid _mt[203] this[221010]))
    unknown call_tmp[871179] "expr temp" "maybe param" "maybe type" "temp"
    (871182 'move' call_tmp[871179](221036 call _value _mt[203] dom[221013]))
    unknown call_tmp[871186] "expr temp" "maybe param" "maybe type" "temp"
    (871189 'move' call_tmp[871186](221041 call _pid _mt[203] dom[221013]))
    unknown call_tmp[871191] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (871194 'move' call_tmp[871191](1000360 'new' unsafeAssignManager[221006](?)(_lhsInstance = call_tmp[871165])(_lhsPid = call_tmp[871172])(_oldLhsDomainCopy = this[221010])(_rhsInstance = call_tmp[871179])(_rhsPid = call_tmp[871186])(_checks = checks[221018])(_isActiveManager = 0)))
    (620758 'move' ret[620753](620757 'deref' call_tmp[871191]))
    (620755 return ret[620753])
  }
  function _domain[225034](?).clear[221051](arg _mt[221055]:_MT[201], ref arg this[221053]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown emptyDom[221064] "dead at end of block" "insert auto destroy"
    unknown call_tmp[871196] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (871199 'move' call_tmp[871196](221066 'typeof' this[221053]))
    (649511 'default init var' emptyDom[221064] call_tmp[871196])
    (221068 'end of statement')
    (221069 call = this[221053] emptyDom[221064])
    (560513 'end of statement' emptyDom[221064])
    (620760 return _void[46])
  }
  where {
    (221061 call(221058 call (partial) isRectangular _mt[203] this[221053]))
  }
  function _domain[225034](?).clear[221076](arg _mt[221080]:_MT[201], ref arg this[221078]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[871205] "expr temp" "maybe param" "maybe type" "temp"
    (871208 'move' call_tmp[871205](406570 call _value _mt[203] this[221078]))
    (221089 call(221086 call (partial) dsiClear _mt[203] call_tmp[871205]))
    (620762 return _void[46])
  }
  function _domain[225034](?).remove[221092](arg _mt[221098]:_MT[201], ref arg this[221094]:_domain[225034](?), arg idx[221096]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[620766] "RVV" "temp"
    unknown call_tmp[871214] "expr temp" "maybe param" "maybe type" "temp"
    (871217 'move' call_tmp[871214](406574 call _value _mt[203] this[221094]))
    unknown call_tmp[871221] "expr temp" "maybe param" "maybe type" "temp"
    (871224 'move' call_tmp[871221](221108 call(221105 call (partial) dsiRemove _mt[203] call_tmp[871214]) idx[221096]))
    (620771 'move' ret[620766](620770 'deref' call_tmp[871221]))
    (620768 return ret[620766])
  }
  function _domain[225034](?).add[221112](arg _mt[221118]:_MT[201], ref arg this[221114]:_domain[225034](?), in arg idx[221116]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[620775] "RVV" "temp"
    unknown call_tmp[871228] "expr temp" "maybe param" "maybe type" "temp"
    (871231 'move' call_tmp[871228](221126 call(444242 call (partial) isRectangular _mt[203] this[221114])))
    unknown call_tmp[871233] "expr temp" "maybe param" "maybe type" "temp"
    (871236 'move' call_tmp[871233](221127 call _cond_test call_tmp[871228]))
    if call_tmp[871233]
    {
      (221122 call compilerError "Cannot add indices to a rectangular domain")
    }
    unknown tmp[496653] "maybe param" "temp"
    unknown call_tmp[871240] "expr temp" "maybe param" "maybe type" "temp"
    (871243 'move' call_tmp[871240](444248 call fullIdxType _mt[203] this[221114]))
    unknown call_tmp[871245] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (871248 'move' call_tmp[871245](221147 'typeof' idx[221116]))
    (496664 'move' tmp[496653](395465 'is_coercible' call_tmp[871240] call_tmp[871245]))
    unknown call_tmp[871250] "expr temp" "maybe param" "maybe type" "temp"
    (871253 'move' call_tmp[871250](496666 call _cond_invalid tmp[496653]))
    if call_tmp[871250]
    {
      (496669 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[693178] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[693179] "maybe param" "temp"
    unknown call_tmp[871255] "expr temp" "maybe param" "maybe type" "temp"
    (871258 'move' call_tmp[871255](496654 call isTrue tmp[496653]))
    (693184 'move' tmp[693179](693182 call _cond_test call_tmp[871255]))
    if tmp[693179]
    {
      (693189 'move' tmp[693178](693186 '_paramFoldLogical' tmp[693179] 1))
    }
    {
      unknown tmp[496674] "maybe param" "temp"
      unknown tmp[496695] "maybe param" "temp"
      (496706 'move' tmp[496695](221154 call(444252 call (partial) isSparse _mt[203] this[221114])))
      unknown call_tmp[871262] "expr temp" "maybe param" "maybe type" "temp"
      (871265 'move' call_tmp[871262](496708 call _cond_invalid tmp[496695]))
      if call_tmp[871262]
      {
        (496711 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[693124] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[693125] "maybe param" "temp"
      unknown call_tmp[871267] "expr temp" "maybe param" "maybe type" "temp"
      (871270 'move' call_tmp[871267](496696 call isTrue tmp[496695]))
      (693130 'move' tmp[693125](693128 call _cond_test call_tmp[871267]))
      if tmp[693125]
      {
        unknown tmp[693132] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[871274] "expr temp" "maybe param" "maybe type" "temp"
        (871277 'move' call_tmp[871274](444256 call rank _mt[203] this[221114]))
        unknown call_tmp[871279] "expr temp" "maybe param" "maybe type" "temp"
        (871282 'move' call_tmp[871279](221155 call == call_tmp[871274] 1))
        (693134 'move' tmp[693132](496699 call isTrue call_tmp[871279]))
        (693139 'move' tmp[693124](693136 '_paramFoldLogical' tmp[693125] tmp[693132]))
      }
      {
        (693144 'move' tmp[693124](693141 '_paramFoldLogical' tmp[693125] 0))
      }
      (496685 'move' tmp[496674] tmp[693124])
      unknown call_tmp[871284] "expr temp" "maybe param" "maybe type" "temp"
      (871287 'move' call_tmp[871284](496687 call _cond_invalid tmp[496674]))
      if call_tmp[871284]
      {
        (496690 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[693151] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[693152] "maybe param" "temp"
      unknown call_tmp[871289] "expr temp" "maybe param" "maybe type" "temp"
      (871292 'move' call_tmp[871289](496675 call isTrue tmp[496674]))
      (693157 'move' tmp[693152](693155 call _cond_test call_tmp[871289]))
      if tmp[693152]
      {
        unknown tmp[693159] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[871296] "expr temp" "maybe param" "maybe type" "temp"
        (871299 'move' call_tmp[871296](444261 call idxType _mt[203] this[221114]))
        unknown call_tmp[871301] "expr temp" "maybe param" "maybe type" "temp"
        (871304 'move' call_tmp[871301](221163 call * 1 call_tmp[871296]))
        unknown call_tmp[871306] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (871309 'move' call_tmp[871306](221162 'typeof' idx[221116]))
        unknown call_tmp[871311] "expr temp" "maybe param" "maybe type" "temp"
        (871314 'move' call_tmp[871311](395466 'is_coercible' call_tmp[871301] call_tmp[871306]))
        (693161 'move' tmp[693159](496678 call isTrue call_tmp[871311]))
        (693166 'move' tmp[693151](693163 '_paramFoldLogical' tmp[693152] tmp[693159]))
      }
      {
        (693171 'move' tmp[693151](693168 '_paramFoldLogical' tmp[693152] 0))
      }
      unknown tmp[693191] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (693193 'move' tmp[693191](496658 call isTrue tmp[693151]))
      (693198 'move' tmp[693178](693195 '_paramFoldLogical' tmp[693179] tmp[693191]))
    }
    unknown call_tmp[871316] "expr temp" "maybe param" "maybe type" "temp"
    (871319 'move' call_tmp[871316](221167 call _cond_test tmp[693178]))
    if call_tmp[871316]
    {
      unknown call_tmp[871323] "expr temp" "maybe param" "maybe type" "temp"
      (871326 'move' call_tmp[871323](406578 call _value _mt[203] this[221114]))
      unknown call_tmp[871330] "expr temp" "maybe param" "maybe type" "temp"
      (871333 'move' call_tmp[871330](221139 call(221136 call (partial) dsiAdd _mt[203] call_tmp[871323]) idx[221116]))
      (620780 'move' ret[620775](620779 'deref' call_tmp[871330]))
      gotoReturn _end_add[620773] _end_add[620773]
    }
    unknown promoType[221173] "dead at end of block" "insert auto destroy" "type variable"
    (649515 'move' promoType[221173](649513 'scalar promotion type' idx[221116]))
    (560520 'end of statement')
    unknown call_tmp[871337] "expr temp" "maybe param" "maybe type" "temp"
    (871340 'move' call_tmp[871337](444286 call fullIdxType _mt[203] this[221114]))
    unknown call_tmp[871342] "expr temp" "maybe param" "maybe type" "temp"
    (871345 'move' call_tmp[871342](395467 'is_coercible' call_tmp[871337] promoType[221173]))
    unknown call_tmp[871347] "expr temp" "maybe param" "maybe type" "temp"
    (871350 'move' call_tmp[871347](221248 call _cond_test call_tmp[871342]))
    if call_tmp[871347]
    {
      unknown tmp[496716] "maybe param" "temp"
      (496727 'move' tmp[496716](221213 call(444274 call (partial) isSparse _mt[203] this[221114])))
      unknown call_tmp[871354] "expr temp" "maybe param" "maybe type" "temp"
      (871357 'move' call_tmp[871354](496729 call _cond_invalid tmp[496716]))
      if call_tmp[871354]
      {
        (496732 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[693232] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[693233] "maybe param" "temp"
      unknown call_tmp[871359] "expr temp" "maybe param" "maybe type" "temp"
      (871362 'move' call_tmp[871359](496717 call isTrue tmp[496716]))
      (693238 'move' tmp[693233](693236 call _cond_test call_tmp[871359]))
      if tmp[693233]
      {
        (693243 'move' tmp[693232](693240 '_paramFoldLogical' tmp[693233] 1))
      }
      {
        unknown tmp[496737] "maybe param" "temp"
        (496748 'move' tmp[496737](221217 call(444278 call (partial) isAssociative _mt[203] this[221114])))
        unknown call_tmp[871366] "expr temp" "maybe param" "maybe type" "temp"
        (871369 'move' call_tmp[871366](496750 call _cond_invalid tmp[496737]))
        if call_tmp[871366]
        {
          (496753 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[693205] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[693206] "maybe param" "temp"
        unknown call_tmp[871371] "expr temp" "maybe param" "maybe type" "temp"
        (871374 'move' call_tmp[871371](496738 call isTrue tmp[496737]))
        (693211 'move' tmp[693206](693209 call _cond_test call_tmp[871371]))
        if tmp[693206]
        {
          unknown tmp[693213] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[871378] "expr temp" "maybe param" "maybe type" "temp"
          (871381 'move' call_tmp[871378](221221 call parSafe _mt[203] this[221114]))
          unknown call_tmp[871383] "expr temp" "maybe param" "maybe type" "temp"
          (871386 'move' call_tmp[871383](221218 call ! call_tmp[871378]))
          (693215 'move' tmp[693213](496741 call isTrue call_tmp[871383]))
          (693220 'move' tmp[693205](693217 '_paramFoldLogical' tmp[693206] tmp[693213]))
        }
        {
          (693225 'move' tmp[693205](693222 '_paramFoldLogical' tmp[693206] 0))
        }
        unknown tmp[693245] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (693247 'move' tmp[693245](496721 call isTrue tmp[693205]))
        (693252 'move' tmp[693232](693249 '_paramFoldLogical' tmp[693233] tmp[693245]))
      }
      unknown call_tmp[871388] "expr temp" "maybe param" "maybe type" "temp"
      (871391 'move' call_tmp[871388](221224 call _cond_test tmp[693232]))
      if call_tmp[871388]
      {
        unknown tmp[693259] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[693260] "maybe param" "temp"
        unknown call_tmp[871395] "expr temp" "maybe param" "maybe type" "temp"
        (871398 'move' call_tmp[871395](221184 call(444266 call (partial) isSparse _mt[203] this[221114])))
        (693265 'move' tmp[693260](693263 call _cond_test call_tmp[871395]))
        if tmp[693260]
        {
          (693270 'move' tmp[693259](693267 '_paramFoldLogical' tmp[693260] "a sparse"))
        }
        {
          (693275 'move' tmp[693259](693272 '_paramFoldLogical' tmp[693260] "an associative"))
        }
        unknown tmp[693282] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[693283] "maybe param" "temp"
        unknown call_tmp[871402] "expr temp" "maybe param" "maybe type" "temp"
        (871405 'move' call_tmp[871402](221201 call(444270 call (partial) isSparse _mt[203] this[221114])))
        (693288 'move' tmp[693283](693286 call _cond_test call_tmp[871402]))
        if tmp[693283]
        {
          (693293 'move' tmp[693282](693290 '_paramFoldLogical' tmp[693283] ""))
        }
        {
          (693298 'move' tmp[693282](693295 '_paramFoldLogical' tmp[693283] " or declaring the domain type with 'parSafe=true'"))
        }
        (221179 call compilerWarning "this promoted addition of indices to " tmp[693259] " domain may be unsafe due to race conditions;" " consider replacing promotion with an explicit for loop" tmp[693282])
      }
      function chpl__loopexpr_iter4[715796](arg iterator[715798]:_any[141](?), arg this[715936]:_domain[225034](?)) : _unknown[42] "do not unref for yields" "compiler generated" "iterator fn"
      {
        unknown ret[715947] "RVV" "temp"
        {
          unknown _indexOfInterest[715803] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[715804] "expr temp" "temp"
          (715813 'move' _iterator[715804](715811 call _getIterator iterator[715798]))
          Defer
          {
            {
              (715828 call _freeIterator _iterator[715804])
            }
          }
          { scopeless type
            (715818 'move' _indexOfInterest[715803](715815 call iteratorIndex _iterator[715804]))
          }
          ForLoop[715805] for-expr
          {
            unknown oneIdx[221231] "index var" "insert auto destroy"
            (715940 'end of statement')
            (715823 'move' oneIdx[221231] _indexOfInterest[715803])
            (715941 'end of statement' oneIdx[221231])
            {
              {
                unknown yret[715951] "YVV" "temp"
                unknown call_tmp[715959] "expr temp" "maybe param" "maybe type" "temp"
                (715962 'move' call_tmp[715959](406583 call _value _mt[203] this[715936]))
                unknown call_tmp[715966] "expr temp" "maybe param" "maybe type" "temp"
                (715969 'move' call_tmp[715966](221238 call(221235 call (partial) dsiAdd _mt[203] call_tmp[715959]) oneIdx[221231]))
                (715954 'move' yret[715951](715953 'deref' call_tmp[715966]))
                (715800 yield yret[715951])
                (715943 'end of statement' oneIdx[221231])
              }
            }
            label _continueLabel[715808]
            _indexOfInterest[715803]
            _iterator[715804]
          }
          label _breakLabel[715809]
        }
        (715949 return ret[715947])
      }
      function chpl__loopexpr_iter4[715835](param arg tag[715839]:iterKind[52144], arg iterator[715842]:_any[141](?), arg this[715863]:_domain[225034](?)) : _unknown[42] "compiler generated" "fn returns iterator"
      {
        unknown ret[715996] "RVV" "temp"
        const _leaderIterator[715854] "const" "expr temp" "temp"
        (715859 'move' _leaderIterator[715854](715856 call _toLeader iterator[715842]))
        (716001 'move' ret[715996](716000 'deref' _leaderIterator[715854]))
        (715998 return ret[715996])
      }
      where {
        unknown tmp[715972] "maybe param" "temp"
        (715983 'move' tmp[715972](715844 call == tag[715839] leader[52138]))
        unknown call_tmp[716030] "expr temp" "maybe param" "maybe type" "temp"
        (716033 'move' call_tmp[716030](715985 call _cond_invalid tmp[715972]))
        if call_tmp[716030]
        {
          (715988 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[716003] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[716004] "maybe param" "temp"
        unknown call_tmp[716035] "expr temp" "maybe param" "maybe type" "temp"
        (716038 'move' call_tmp[716035](715973 call isTrue tmp[715972]))
        (716009 'move' tmp[716004](716007 call _cond_test call_tmp[716035]))
        if tmp[716004]
        {
          unknown tmp[716011] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[716040] "expr temp" "maybe param" "maybe type" "temp"
          (716043 'move' call_tmp[716040](715848 'call resolves' "_toLeader" iterator[715842]))
          (716013 'move' tmp[716011](715976 call isTrue call_tmp[716040]))
          (716018 'move' tmp[716003](716015 '_paramFoldLogical' tmp[716004] tmp[716011]))
        }
        {
          (716023 'move' tmp[716003](716020 '_paramFoldLogical' tmp[716004] 0))
        }
        (1001686 call chpl_statementLevelSymbol tmp[716003])
      }
      function chpl__loopexpr_iter4[715865](param arg tag[715869]:iterKind[52144], arg followThis[715872]:_any[141](?), arg iterator[715874]:_any[141](?), arg this[715934]:_domain[225034](?)) : _unknown[42] "do not unref for yields" "compiler generated" "iterator fn"
      {
        unknown ret[716054] "RVV" "temp"
        const _followerIterator[715881] "const" "expr temp" "temp"
        (715887 'move' _followerIterator[715881](715883 call _toFollower iterator[715874] followThis[715872]))
        {
          unknown _indexOfInterest[715902] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[715903] "expr temp" "temp"
          (715912 'move' _iterator[715903](715910 call _getIterator _followerIterator[715881]))
          Defer
          {
            {
              (715927 call _freeIterator _iterator[715903])
            }
          }
          { scopeless type
            (715917 'move' _indexOfInterest[715902](715914 call iteratorIndex _iterator[715903]))
          }
          ForLoop[715904] order-independent lowered-forall for-expr
          {
            unknown oneIdx[715794] "index var" "insert auto destroy"
            (716047 'end of statement')
            (715922 'move' oneIdx[715794] _indexOfInterest[715902])
            (716048 'end of statement' oneIdx[715794])
            {
              {
                unknown yret[716058] "YVV" "temp"
                unknown call_tmp[716066] "expr temp" "maybe param" "maybe type" "temp"
                (716069 'move' call_tmp[716066](715894 call _value _mt[203] this[715934]))
                unknown call_tmp[716073] "expr temp" "maybe param" "maybe type" "temp"
                (716076 'move' call_tmp[716073](715898 call(715892 call (partial) dsiAdd _mt[203] call_tmp[716066]) oneIdx[715794]))
                (716061 'move' yret[716058](716060 'deref' call_tmp[716073]))
                (715890 yield yret[716058])
                (716050 'end of statement' oneIdx[715794])
              }
            }
            label _continueLabel[715907]
            _indexOfInterest[715902]
            _iterator[715903]
          }
          label _breakLabel[715908]
        }
        (716056 return ret[716054])
      }
      where {
        (715877 call == tag[715869] follower[52140])
      }
      function chpl__forallexpr4[715692](arg iterExpr[715695]:_any[141](?), arg this[715699]:_domain[225034](?)) : _unknown[42] "compiler generated" "compiler nested function" "maybe array type" "maybe type" "fn returns iterator"
      {
        unknown ret[716086] "RVV" "maybe type" "temp"
        function _isArrayTypeFn[715703]() : _unknown[42] "compiler generated" "inline"
        {
          unknown _iterator[715708] "temp"
          (715713 'move' _iterator[715708](715710 call _getIterator iterExpr[715695]))
          unknown _indexOfInterest[715715] "an _indexOfInterest or chpl__followIdx variable" "temp"
          (715720 'move' _indexOfInterest[715715](715717 call iteratorIndex _iterator[715708]))
          unknown oneIdx[715723] "index var" "insert auto destroy"
          (715728 'move' oneIdx[715723] _indexOfInterest[715715])
          unknown isType_result[715730] "param" "temp"
          { scopeless
            Try!
            {
              {
                {
                  unknown call_tmp[716102] "expr temp" "maybe param" "maybe type" "temp"
                  (716105 'move' call_tmp[716102](715736 call _value _mt[203] this[715699]))
                  unknown call_tmp[716109] "expr temp" "maybe param" "maybe type" "temp"
                  (716112 'move' call_tmp[716109](715740 call(715734 call (partial) dsiAdd _mt[203] call_tmp[716102]) oneIdx[715723]))
                  (715744 'move' isType_result[715730](715742 call isType call_tmp[716109]))
                }
              }
            }
          }
          if isType_result[715730]
          {
            (715750 'move' _isArrayType[715706] 1)
          }
          {
            (715753 'move' _isArrayType[715706] 0)
          }
          (716082 return _void[46])
        }
        unknown _isArrayType[715706] "maybe param" "temp"
        { scopeless type
          (715760 call _isArrayTypeFn[715703])
        }
        if _isArrayType[715706]
        {
          unknown _arrayType[715762] "expr temp" "maybe type" "temp"
          unknown _domain[715765] "expr temp" "no auto destroy" "temp"
          (715770 'move' _domain[715765](715767 call chpl__ensureDomainExpr iterExpr[715695]))
          (715774 call compilerError "unimplemented feature: if you are attempting to use skyline arrays, they are not yet supported; if not, remove the index expre)
          (716079 'end of statement')
          (715777 'move' _arrayType[715762] nil[32])
          (716091 'move' ret[716086](716090 'deref' _arrayType[715762]))
          gotoReturn _end_chpl__forallexpr4[716084] _end_chpl__forallexpr4[716084]
        }
        {
          unknown _iterator[715784] "expr temp" "maybe ref" "temp"
          (715786 'move' _iterator[715784] iterExpr[715695])
          unknown call_tmp[716114] "expr temp" "maybe param" "maybe type" "temp"
          (716117 'move' call_tmp[716114](715789 call chpl__loopexpr_iter4 _iterator[715784] this[715699]))
          (716096 'move' ret[716086](716095 'deref' call_tmp[716114]))
          gotoReturn _end_chpl__forallexpr4[716084] _end_chpl__forallexpr4[716084]
        }
        label _end_chpl__forallexpr4[716084]
        (716088 return ret[716086])
      }
      unknown call_tmp[716119] "expr temp" "maybe param" "maybe type" "temp"
      (716122 'move' call_tmp[716119](715697 call chpl__forallexpr4 idx[221116] this[221114]))
      (716126 'iterator record set shape' call_tmp[716119] idx[221116] 2)
      unknown call_tmp[871407] "expr temp" "maybe param" "maybe type" "temp"
      (871410 'move' call_tmp[871407](221242 'reduce' SumReduceScanOp[429526](?) call_tmp[716119] 0))
      (620785 'move' ret[620775](620784 'deref' call_tmp[871407]))
      gotoReturn _end_add[620773] _end_add[620773]
    }
    unknown call_tmp[871412] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (871415 'move' call_tmp[871412](221260 'typeof' idx[221116]))
    unknown call_tmp[871417] "expr temp" "maybe param" "maybe type" "temp"
    (871420 'move' call_tmp[871417](221257 call : call_tmp[871412] string[244]))
    unknown call_tmp[871422] "expr temp" "maybe param" "maybe type" "temp"
    (871425 'move' call_tmp[871422](221264 call domainDescription this[221114]))
    unknown call_tmp[871429] "expr temp" "maybe param" "maybe type" "temp"
    (871432 'move' call_tmp[871429](444292 call idxType _mt[203] this[221114]))
    unknown call_tmp[871434] "expr temp" "maybe param" "maybe type" "temp"
    (871437 'move' call_tmp[871434](221267 call : call_tmp[871429] string[244]))
    (221253 call compilerError "cannot add a " call_tmp[871417] " to " call_tmp[871422] " with idxType " call_tmp[871434])
    label _end_add[620773]
    (620777 return ret[620775])
  }
  function _domain[225034](?).bulkAdd[221273](arg _mt[221299]:_MT[201], ref arg this[221275]:_domain[225034](?), arg inds[221284]:_array[255540](?), arg dataSorted[221288] :
  0 =
  0, arg isUnique[221292] :
  0 =
  0, arg addOn[221296] :
  nilLocale[135253] =
  nilLocale[135253]) : _unknown[42] "method" "primary method" "@unstable"
  {
    unknown ret[620791] "RVV" "temp"
    unknown call_tmp[871441] "expr temp" "maybe param" "maybe type" "temp"
    (871444 'move' call_tmp[871441](221323 call(221320 call (partial) isEmpty _mt[203] inds[221284])))
    unknown call_tmp[871446] "expr temp" "maybe param" "maybe type" "temp"
    (871449 'move' call_tmp[871446](221324 call _cond_test call_tmp[871441]))
    if call_tmp[871446]
    {
      (620796 'move' ret[620791](620795 'deref' 0))
      gotoReturn _end_bulkAdd[620789] _end_bulkAdd[620789]
    }
    unknown call_tmp[871453] "expr temp" "maybe param" "maybe type" "temp"
    (871456 'move' call_tmp[871453](406597 call _value _mt[203] this[221275]))
    unknown call_tmp[871460] "expr temp" "maybe param" "maybe type" "temp"
    (871463 'move' call_tmp[871460](221334 call(221331 call (partial) dsiBulkAdd _mt[203] call_tmp[871453]) inds[221284] dataSorted[221288] isUnique[221292] addOn[221296]))
    (620801 'move' ret[620791](620800 'deref' call_tmp[871460]))
    label _end_bulkAdd[620789]
    (620793 return ret[620791])
  }
  where {
    unknown tmp[496758] "maybe param" "temp"
    (496769 'move' tmp[496758](221307 call(221304 call (partial) isSparse _mt[203] this[221275])))
    unknown call_tmp[871467] "expr temp" "maybe param" "maybe type" "temp"
    (871470 'move' call_tmp[871467](496771 call _cond_invalid tmp[496758]))
    if call_tmp[871467]
    {
      (496774 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[693305] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[693306] "maybe param" "temp"
    unknown call_tmp[871472] "expr temp" "maybe param" "maybe type" "temp"
    (871475 'move' call_tmp[871472](496759 call isTrue tmp[496758]))
    (693311 'move' tmp[693306](693309 call _cond_test call_tmp[871472]))
    if tmp[693306]
    {
      unknown tmp[693313] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[871479] "expr temp" "maybe param" "maybe type" "temp"
      (871482 'move' call_tmp[871479](406592 call _value _mt[203] this[221275]))
      unknown call_tmp[871486] "expr temp" "maybe param" "maybe type" "temp"
      (871489 'move' call_tmp[871486](221311 call rank _mt[203] call_tmp[871479]))
      unknown call_tmp[871491] "expr temp" "maybe param" "maybe type" "temp"
      (871494 'move' call_tmp[871491](221308 call == call_tmp[871486] 1))
      (693315 'move' tmp[693313](496762 call isTrue call_tmp[871491]))
      (693320 'move' tmp[693305](693317 '_paramFoldLogical' tmp[693306] tmp[693313]))
    }
    {
      (693325 'move' tmp[693305](693322 '_paramFoldLogical' tmp[693306] 0))
    }
    unknown call_tmp[871498] "expr temp" "maybe param" "maybe type" "temp"
    (871501 'move' call_tmp[871498](406587 call _value _mt[203] this[221275]))
    unknown call_tmp[871505] "expr temp" "maybe param" "maybe type" "temp"
    (871508 'move' call_tmp[871505](221279 call idxType _mt[203] call_tmp[871498]))
    unknown call_tmp[871512] "expr temp" "maybe param" "maybe type" "temp"
    (871515 'move' call_tmp[871512](528596 call eltType _mt[203] inds[221284]))
    unknown call_tmp[871517] "expr temp" "maybe param" "maybe type" "temp"
    (871520 'move' call_tmp[871517](528600 'is_instantiation_allow_values' call_tmp[871505] call_tmp[871512]))
    (528594 call & tmp[693305] call_tmp[871517])
  }
  function _domain[225034](?).bulkAddNoPreserveInds[221342](arg _mt[221368]:_MT[201], ref arg this[221344]:_domain[225034](?), ref arg inds[221353]:_array[255540](?), arg dataSorted[221357] :
  0 =
  0, arg isUnique[221361] :
  0 =
  0, arg addOn[221365] :
  nilLocale[135253] =
  nilLocale[135253]) : _unknown[42] "method" "primary method" "@unstable"
  {
    unknown ret[620805] "RVV" "temp"
    unknown call_tmp[871524] "expr temp" "maybe param" "maybe type" "temp"
    (871527 'move' call_tmp[871524](221392 call(221389 call (partial) isEmpty _mt[203] inds[221353])))
    unknown call_tmp[871529] "expr temp" "maybe param" "maybe type" "temp"
    (871532 'move' call_tmp[871529](221393 call _cond_test call_tmp[871524]))
    if call_tmp[871529]
    {
      (620810 'move' ret[620805](620809 'deref' 0))
      gotoReturn _end_bulkAddNoPreserveInds[620803] _end_bulkAddNoPreserveInds[620803]
    }
    unknown call_tmp[871536] "expr temp" "maybe param" "maybe type" "temp"
    (871539 'move' call_tmp[871536](406611 call _value _mt[203] this[221344]))
    unknown call_tmp[871543] "expr temp" "maybe param" "maybe type" "temp"
    (871546 'move' call_tmp[871543](221403 call(221400 call (partial) dsiBulkAddNoPreserveInds _mt[203] call_tmp[871536]) inds[221353] dataSorted[221357] isUnique[221361] addOn[221365]))
    (620815 'move' ret[620805](620814 'deref' call_tmp[871543]))
    label _end_bulkAddNoPreserveInds[620803]
    (620807 return ret[620805])
  }
  where {
    unknown tmp[496779] "maybe param" "temp"
    (496790 'move' tmp[496779](221376 call(221373 call (partial) isSparse _mt[203] this[221344])))
    unknown call_tmp[871550] "expr temp" "maybe param" "maybe type" "temp"
    (871553 'move' call_tmp[871550](496792 call _cond_invalid tmp[496779]))
    if call_tmp[871550]
    {
      (496795 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[693332] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[693333] "maybe param" "temp"
    unknown call_tmp[871555] "expr temp" "maybe param" "maybe type" "temp"
    (871558 'move' call_tmp[871555](496780 call isTrue tmp[496779]))
    (693338 'move' tmp[693333](693336 call _cond_test call_tmp[871555]))
    if tmp[693333]
    {
      unknown tmp[693340] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[871562] "expr temp" "maybe param" "maybe type" "temp"
      (871565 'move' call_tmp[871562](406606 call _value _mt[203] this[221344]))
      unknown call_tmp[871569] "expr temp" "maybe param" "maybe type" "temp"
      (871572 'move' call_tmp[871569](221380 call rank _mt[203] call_tmp[871562]))
      unknown call_tmp[871574] "expr temp" "maybe param" "maybe type" "temp"
      (871577 'move' call_tmp[871574](221377 call == call_tmp[871569] 1))
      (693342 'move' tmp[693340](496783 call isTrue call_tmp[871574]))
      (693347 'move' tmp[693332](693344 '_paramFoldLogical' tmp[693333] tmp[693340]))
    }
    {
      (693352 'move' tmp[693332](693349 '_paramFoldLogical' tmp[693333] 0))
    }
    unknown call_tmp[871581] "expr temp" "maybe param" "maybe type" "temp"
    (871584 'move' call_tmp[871581](406601 call _value _mt[203] this[221344]))
    unknown call_tmp[871588] "expr temp" "maybe param" "maybe type" "temp"
    (871591 'move' call_tmp[871588](221348 call idxType _mt[203] call_tmp[871581]))
    unknown call_tmp[871595] "expr temp" "maybe param" "maybe type" "temp"
    (871598 'move' call_tmp[871595](528605 call eltType _mt[203] inds[221353]))
    unknown call_tmp[871600] "expr temp" "maybe param" "maybe type" "temp"
    (871603 'move' call_tmp[871600](528609 'is_instantiation_allow_values' call_tmp[871588] call_tmp[871595]))
    (528603 call & tmp[693332] call_tmp[871600])
  }
  function _domain[225034](?).createIndexBuffer[221411](arg _mt[221419]:_MT[201], arg this[221413]:_domain[225034](?), arg size[221416]:int(64)[10]) : _unknown[42] "inline" "method" "primary method" "@unstable"
  {
    unknown ret[620819] "RVV" "temp"
    unknown call_tmp[871607] "expr temp" "maybe param" "maybe type" "temp"
    (871610 'move' call_tmp[871607](406615 call _value _mt[203] this[221413]))
    unknown call_tmp[871614] "expr temp" "maybe param" "maybe type" "temp"
    (871617 'move' call_tmp[871614](221427 call(221424 call (partial) dsiCreateIndexBuffer _mt[203] call_tmp[871607]) size[221416]))
    (620824 'move' ret[620819](620823 'deref' call_tmp[871614]))
    (620821 return ret[620819])
  }
  function _domain[225034](?).bulkAdd[221431](arg _mt[221463]:_MT[201], ref arg this[221433]:_domain[225034](?), arg inds[221448]:_array[255540](?), arg dataSorted[221452] :
  0 =
  0, arg isUnique[221456] :
  0 =
  0, arg addOn[221460] :
  nilLocale[135253] =
  nilLocale[135253]) : _unknown[42] "method" "primary method" "@unstable"
  {
    unknown ret[620828] "RVV" "temp"
    unknown call_tmp[871621] "expr temp" "maybe param" "maybe type" "temp"
    (871624 'move' call_tmp[871621](221487 call(221484 call (partial) isEmpty _mt[203] inds[221448])))
    unknown call_tmp[871626] "expr temp" "maybe param" "maybe type" "temp"
    (871629 'move' call_tmp[871626](221488 call _cond_test call_tmp[871621]))
    if call_tmp[871626]
    {
      (620833 'move' ret[620828](620832 'deref' 0))
      gotoReturn _end_bulkAdd[620826] _end_bulkAdd[620826]
    }
    unknown call_tmp[871633] "expr temp" "maybe param" "maybe type" "temp"
    (871636 'move' call_tmp[871633](406633 call _value _mt[203] this[221433]))
    unknown call_tmp[871640] "expr temp" "maybe param" "maybe type" "temp"
    (871643 'move' call_tmp[871640](221498 call(221495 call (partial) dsiBulkAdd _mt[203] call_tmp[871633]) inds[221448] dataSorted[221452] isUnique[221456] addOn[221460]))
    (620838 'move' ret[620828](620837 'deref' call_tmp[871640]))
    label _end_bulkAdd[620826]
    (620830 return ret[620828])
  }
  where {
    unknown tmp[496800] "maybe param" "temp"
    (496811 'move' tmp[496800](221471 call(221468 call (partial) isSparse _mt[203] this[221433])))
    unknown call_tmp[871647] "expr temp" "maybe param" "maybe type" "temp"
    (871650 'move' call_tmp[871647](496813 call _cond_invalid tmp[496800]))
    if call_tmp[871647]
    {
      (496816 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[693359] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[693360] "maybe param" "temp"
    unknown call_tmp[871652] "expr temp" "maybe param" "maybe type" "temp"
    (871655 'move' call_tmp[871652](496801 call isTrue tmp[496800]))
    (693365 'move' tmp[693360](693363 call _cond_test call_tmp[871652]))
    if tmp[693360]
    {
      unknown tmp[693367] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[871659] "expr temp" "maybe param" "maybe type" "temp"
      (871662 'move' call_tmp[871659](406628 call _value _mt[203] this[221433]))
      unknown call_tmp[871666] "expr temp" "maybe param" "maybe type" "temp"
      (871669 'move' call_tmp[871666](221475 call rank _mt[203] call_tmp[871659]))
      unknown call_tmp[871671] "expr temp" "maybe param" "maybe type" "temp"
      (871674 'move' call_tmp[871671](221472 call > call_tmp[871666] 1))
      (693369 'move' tmp[693367](496804 call isTrue call_tmp[871671]))
      (693374 'move' tmp[693359](693371 '_paramFoldLogical' tmp[693360] tmp[693367]))
    }
    {
      (693379 'move' tmp[693359](693376 '_paramFoldLogical' tmp[693360] 0))
    }
    unknown call_tmp[871678] "expr temp" "maybe param" "maybe type" "temp"
    (871681 'move' call_tmp[871678](406619 call _value _mt[203] this[221433]))
    unknown call_tmp[871685] "expr temp" "maybe param" "maybe type" "temp"
    (871688 'move' call_tmp[871685](221439 call rank _mt[203] call_tmp[871678]))
    unknown call_tmp[871692] "expr temp" "maybe param" "maybe type" "temp"
    (871695 'move' call_tmp[871692](406623 call _value _mt[203] this[221433]))
    unknown call_tmp[871699] "expr temp" "maybe param" "maybe type" "temp"
    (871702 'move' call_tmp[871699](221443 call idxType _mt[203] call_tmp[871692]))
    unknown call_tmp[871704] "expr temp" "maybe param" "maybe type" "temp"
    (871707 'move' call_tmp[871704](221436 call * call_tmp[871685] call_tmp[871699]))
    unknown call_tmp[871711] "expr temp" "maybe param" "maybe type" "temp"
    (871714 'move' call_tmp[871711](528614 call eltType _mt[203] inds[221448]))
    unknown call_tmp[871716] "expr temp" "maybe param" "maybe type" "temp"
    (871719 'move' call_tmp[871716](528618 'is_instantiation_allow_values' call_tmp[871704] call_tmp[871711]))
    (528612 call & tmp[693359] call_tmp[871716])
  }
  function _domain[225034](?).bulkAddNoPreserveInds[221506](arg _mt[221538]:_MT[201], ref arg this[221508]:_domain[225034](?), ref arg inds[221523]:_array[255540](?), arg dataSorted[221527] :
  0 =
  0, arg isUnique[221531] :
  0 =
  0, arg addOn[221535] :
  nilLocale[135253] =
  nilLocale[135253]) : _unknown[42] "method" "primary method" "@unstable"
  {
    unknown ret[620842] "RVV" "temp"
    unknown call_tmp[871723] "expr temp" "maybe param" "maybe type" "temp"
    (871726 'move' call_tmp[871723](221562 call(221559 call (partial) isEmpty _mt[203] inds[221523])))
    unknown call_tmp[871728] "expr temp" "maybe param" "maybe type" "temp"
    (871731 'move' call_tmp[871728](221563 call _cond_test call_tmp[871723]))
    if call_tmp[871728]
    {
      (620847 'move' ret[620842](620846 'deref' 0))
      gotoReturn _end_bulkAddNoPreserveInds[620840] _end_bulkAddNoPreserveInds[620840]
    }
    unknown call_tmp[871735] "expr temp" "maybe param" "maybe type" "temp"
    (871738 'move' call_tmp[871735](406651 call _value _mt[203] this[221508]))
    unknown call_tmp[871742] "expr temp" "maybe param" "maybe type" "temp"
    (871745 'move' call_tmp[871742](221573 call(221570 call (partial) dsiBulkAddNoPreserveInds _mt[203] call_tmp[871735]) inds[221523] dataSorted[221527] isUnique[221531] addOn[221535]))
    (620852 'move' ret[620842](620851 'deref' call_tmp[871742]))
    label _end_bulkAddNoPreserveInds[620840]
    (620844 return ret[620842])
  }
  where {
    unknown tmp[496821] "maybe param" "temp"
    (496832 'move' tmp[496821](221546 call(221543 call (partial) isSparse _mt[203] this[221508])))
    unknown call_tmp[871749] "expr temp" "maybe param" "maybe type" "temp"
    (871752 'move' call_tmp[871749](496834 call _cond_invalid tmp[496821]))
    if call_tmp[871749]
    {
      (496837 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[693386] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[693387] "maybe param" "temp"
    unknown call_tmp[871754] "expr temp" "maybe param" "maybe type" "temp"
    (871757 'move' call_tmp[871754](496822 call isTrue tmp[496821]))
    (693392 'move' tmp[693387](693390 call _cond_test call_tmp[871754]))
    if tmp[693387]
    {
      unknown tmp[693394] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[871761] "expr temp" "maybe param" "maybe type" "temp"
      (871764 'move' call_tmp[871761](406646 call _value _mt[203] this[221508]))
      unknown call_tmp[871768] "expr temp" "maybe param" "maybe type" "temp"
      (871771 'move' call_tmp[871768](221550 call rank _mt[203] call_tmp[871761]))
      unknown call_tmp[871773] "expr temp" "maybe param" "maybe type" "temp"
      (871776 'move' call_tmp[871773](221547 call > call_tmp[871768] 1))
      (693396 'move' tmp[693394](496825 call isTrue call_tmp[871773]))
      (693401 'move' tmp[693386](693398 '_paramFoldLogical' tmp[693387] tmp[693394]))
    }
    {
      (693406 'move' tmp[693386](693403 '_paramFoldLogical' tmp[693387] 0))
    }
    unknown call_tmp[871780] "expr temp" "maybe param" "maybe type" "temp"
    (871783 'move' call_tmp[871780](406637 call _value _mt[203] this[221508]))
    unknown call_tmp[871787] "expr temp" "maybe param" "maybe type" "temp"
    (871790 'move' call_tmp[871787](221514 call rank _mt[203] call_tmp[871780]))
    unknown call_tmp[871794] "expr temp" "maybe param" "maybe type" "temp"
    (871797 'move' call_tmp[871794](406641 call _value _mt[203] this[221508]))
    unknown call_tmp[871801] "expr temp" "maybe param" "maybe type" "temp"
    (871804 'move' call_tmp[871801](221518 call idxType _mt[203] call_tmp[871794]))
    unknown call_tmp[871806] "expr temp" "maybe param" "maybe type" "temp"
    (871809 'move' call_tmp[871806](221511 call * call_tmp[871787] call_tmp[871801]))
    unknown call_tmp[871813] "expr temp" "maybe param" "maybe type" "temp"
    (871816 'move' call_tmp[871813](528623 call eltType _mt[203] inds[221523]))
    unknown call_tmp[871818] "expr temp" "maybe param" "maybe type" "temp"
    (871821 'move' call_tmp[871818](528627 'is_instantiation_allow_values' call_tmp[871806] call_tmp[871813]))
    (528621 call & tmp[693386] call_tmp[871818])
  }
  function _domain[225034](?).bulkAdd[221581](arg _mt[221589]:_MT[201], arg this[221583]:_domain[225034](?), arg args[221586]:_any[141](?) ...) : _unknown[42] "last resort" "method" "primary method" "no return value for void"
  {
    (221593 call compilerError "incompatible argument(s) or this domain type does not support 'bulkAdd'")
    (620854 return _void[46])
  }
  function _domain[225034](?).bulkAddNoPreserveInds[221599](arg _mt[221607]:_MT[201], arg this[221601]:_domain[225034](?), arg args[221604]:_any[141](?) ...) : _unknown[42] "last resort" "method" "primary method" "no return value for void"
  {
    (221611 call compilerError "incompatible argument(s) or this domain type does not support 'bulkAddNoPreserveInds'")
    (620856 return _void[46])
  }
  function _domain[225034](?).requestCapacity[221617](arg _mt[221623]:_MT[201], ref arg this[221619]:_domain[225034](?), arg capacity[221621]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[871823] "expr temp" "maybe param" "maybe type" "temp"
    (871826 'move' call_tmp[871823](221632 call < capacity[221621] 0))
    unknown call_tmp[871828] "expr temp" "maybe param" "maybe type" "temp"
    (871831 'move' call_tmp[871828](221636 call _cond_test call_tmp[871823]))
    if call_tmp[871828]
    {
      (221627 call halt "domain.requestCapacity can only be invoked when capacity >= 0")
    }
    unknown call_tmp[871835] "expr temp" "maybe param" "maybe type" "temp"
    (871838 'move' call_tmp[871835](221653 call(221650 call (partial) isAssociative _mt[203] this[221619])))
    unknown call_tmp[871840] "expr temp" "maybe param" "maybe type" "temp"
    (871843 'move' call_tmp[871840](221647 call ! call_tmp[871835]))
    unknown call_tmp[871845] "expr temp" "maybe param" "maybe type" "temp"
    (871848 'move' call_tmp[871845](221654 call _cond_test call_tmp[871840]))
    if call_tmp[871845]
    {
      (221642 call compilerError "domain.requestCapacity only applies to associative domains")
    }
    unknown call_tmp[871852] "expr temp" "maybe param" "maybe type" "temp"
    (871855 'move' call_tmp[871852](406656 call _value _mt[203] this[221619]))
    (221665 call(221662 call (partial) dsiRequestCapacity _mt[203] call_tmp[871852]) capacity[221621])
    (620858 return _void[46])
  }
  function _domain[225034](?).contains[221669](arg _mt[221683]:_MT[201], arg this[221671]:_domain[225034](?), const arg idx[221680] :
  unknown call_tmp[871861] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "method" "primary method"
  {
    unknown ret[620862] "RVV" "temp"
    unknown tmp[496842] "maybe param" "temp"
    (496853 'move' tmp[496842](221716 call(221713 call (partial) isRectangular _mt[203] this[221671])))
    unknown call_tmp[871882] "expr temp" "maybe param" "maybe type" "temp"
    (871885 'move' call_tmp[871882](496855 call _cond_invalid tmp[496842]))
    if call_tmp[871882]
    {
      (496858 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[693413] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[693414] "maybe param" "temp"
    unknown call_tmp[871887] "expr temp" "maybe param" "maybe type" "temp"
    (871890 'move' call_tmp[871887](496843 call isTrue tmp[496842]))
    (693419 'move' tmp[693414](693417 call _cond_test call_tmp[871887]))
    if tmp[693414]
    {
      (693424 'move' tmp[693413](693421 '_paramFoldLogical' tmp[693414] 1))
    }
    {
      unknown tmp[693426] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[871894] "expr temp" "maybe param" "maybe type" "temp"
      (871897 'move' call_tmp[871894](221721 call(221718 call (partial) isSparse _mt[203] this[221671])))
      (693428 'move' tmp[693426](496847 call isTrue call_tmp[871894]))
      (693433 'move' tmp[693413](693430 '_paramFoldLogical' tmp[693414] tmp[693426]))
    }
    unknown call_tmp[871899] "expr temp" "maybe param" "maybe type" "temp"
    (871902 'move' call_tmp[871899](221722 call _cond_test tmp[693413]))
    if call_tmp[871899]
    {
      unknown call_tmp[871906] "expr temp" "maybe param" "maybe type" "temp"
      (871909 'move' call_tmp[871906](406664 call _value _mt[203] this[221671]))
      unknown call_tmp[871915] "expr temp" "maybe param" "maybe type" "temp"
      (871918 'move' call_tmp[871915](444323 call rank _mt[203] this[221671]))
      unknown call_tmp[871920] "expr temp" "maybe param" "maybe type" "temp"
      (871923 'move' call_tmp[871920](221693 call _makeIndexTuple call_tmp[871915] idx[221680] "index"))
      unknown call_tmp[871925] "expr temp" "maybe param" "maybe type" "temp"
      (871928 'move' call_tmp[871925](221691 call(221688 call (partial) dsiMember _mt[203] call_tmp[871906]) call_tmp[871920]))
      (620867 'move' ret[620862](620866 'deref' call_tmp[871925]))
      gotoReturn _end_contains[620860] _end_contains[620860]
    }
    {
      unknown call_tmp[871932] "expr temp" "maybe param" "maybe type" "temp"
      (871935 'move' call_tmp[871932](406668 call _value _mt[203] this[221671]))
      unknown call_tmp[871939] "expr temp" "maybe param" "maybe type" "temp"
      (871942 'move' call_tmp[871939](221707 call idx[221680] 0))
      unknown call_tmp[871944] "expr temp" "maybe param" "maybe type" "temp"
      (871947 'move' call_tmp[871944](221705 call(221702 call (partial) dsiMember _mt[203] call_tmp[871932]) call_tmp[871939]))
      (620872 'move' ret[620862](620871 'deref' call_tmp[871944]))
      gotoReturn _end_contains[620860] _end_contains[620860]
    }
    label _end_contains[620860]
    (620864 return ret[620862])
  }
  function _domain[225034](?).contains[221730](arg _mt[221743]:_MT[201], arg this[221732]:_domain[225034](?), const arg idx[221739] ... :
  unknown call_tmp[871951] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "inline" "method" "primary method"
  {
    unknown ret[620878] "RVV" "temp"
    unknown call_tmp[871962] "expr temp" "maybe param" "maybe type" "temp"
    (871965 'move' call_tmp[871962](221748 call(444333 call (partial) contains _mt[203] this[221732]) idx[221739]))
    (620883 'move' ret[620878](620882 'deref' call_tmp[871962]))
    (620880 return ret[620878])
  }
  function _domain[225034](?).contains[221752](arg _mt[221760]:_MT[201], arg this[221754]:_domain[225034](?), arg other[221757]:_domain[225034](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[620887] "RVV" "temp"
    unknown call_tmp[871969] "expr temp" "maybe param" "maybe type" "temp"
    (871972 'move' call_tmp[871969](221787 call rank _mt[203] this[221754]))
    unknown call_tmp[871976] "expr temp" "maybe param" "maybe type" "temp"
    (871979 'move' call_tmp[871976](221791 call rank _mt[203] other[221757]))
    unknown call_tmp[871981] "expr temp" "maybe param" "maybe type" "temp"
    (871984 'move' call_tmp[871981](221784 call != call_tmp[871969] call_tmp[871976]))
    unknown call_tmp[871986] "expr temp" "maybe param" "maybe type" "temp"
    (871989 'move' call_tmp[871986](221794 call _cond_test call_tmp[871981]))
    if call_tmp[871986]
    {
      unknown call_tmp[871993] "expr temp" "maybe param" "maybe type" "temp"
      (871996 'move' call_tmp[871993](221771 call rank _mt[203] this[221754]))
      unknown call_tmp[871998] "expr temp" "maybe param" "maybe type" "temp"
      (872001 'move' call_tmp[871998](221768 call : call_tmp[871993] string[244]))
      unknown call_tmp[872005] "expr temp" "maybe param" "maybe type" "temp"
      (872008 'move' call_tmp[872005](221779 call rank _mt[203] other[221757]))
      unknown call_tmp[872010] "expr temp" "maybe param" "maybe type" "temp"
      (872013 'move' call_tmp[872010](221776 call : call_tmp[872005] string[244]))
      (221764 call compilerError "rank mismatch in 'domain.contains()': " call_tmp[871998] " vs. " call_tmp[872010])
    }
    unknown tmp[496863] "maybe param" "temp"
    (496874 'move' tmp[496863](221997 call(221994 call (partial) isRectangular _mt[203] this[221754])))
    unknown call_tmp[872017] "expr temp" "maybe param" "maybe type" "temp"
    (872020 'move' call_tmp[872017](496876 call _cond_invalid tmp[496863]))
    if call_tmp[872017]
    {
      (496879 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[693440] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[693441] "maybe param" "temp"
    unknown call_tmp[872022] "expr temp" "maybe param" "maybe type" "temp"
    (872025 'move' call_tmp[872022](496864 call isTrue tmp[496863]))
    (693446 'move' tmp[693441](693444 call _cond_test call_tmp[872022]))
    if tmp[693441]
    {
      unknown tmp[693448] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[872029] "expr temp" "maybe param" "maybe type" "temp"
      (872032 'move' call_tmp[872029](222002 call(221999 call (partial) isRectangular _mt[203] other[221757])))
      (693450 'move' tmp[693448](496867 call isTrue call_tmp[872029]))
      (693455 'move' tmp[693440](693452 '_paramFoldLogical' tmp[693441] tmp[693448]))
    }
    {
      (693460 'move' tmp[693440](693457 '_paramFoldLogical' tmp[693441] 0))
    }
    unknown call_tmp[872034] "expr temp" "maybe param" "maybe type" "temp"
    (872037 'move' call_tmp[872034](222003 call _cond_test tmp[693440]))
    if call_tmp[872034]
    {
      unknown call_tmp[872041] "maybe param" "maybe type" "temp"
      (872044 'move' call_tmp[872041](221806 call(221803 call (partial) dims _mt[203] this[221754])))
      const thisDims[221801] "dead at end of block" "const" "insert auto destroy"
      (649517 'init var' thisDims[221801] call_tmp[872041])
      (221808 'end of statement')
      unknown call_tmp[872048] "maybe param" "maybe type" "temp"
      (872051 'move' call_tmp[872048](221815 call(221812 call (partial) dims _mt[203] other[221757])))
      const otherDims[221810] "dead at end of block" "const" "insert auto destroy"
      (649519 'init var' otherDims[221810] call_tmp[872048])
      (221817 'end of statement')
      {
        unknown i[221818] "dead at end of block" "index var" "insert auto destroy"
        (649521 'init var' i[221818] 0)
        (560545 'end of statement')
        unknown tmp[221849] "maybe param" "temp"
        unknown call_tmp[872055] "expr temp" "maybe param" "maybe type" "temp"
        (872058 'move' call_tmp[872055](221822 call rank _mt[203] this[221754]))
        unknown call_tmp[872060] "expr temp" "maybe param" "maybe type" "temp"
        (872063 'move' call_tmp[872060](221825 call chpl__nudgeHighBound call_tmp[872055]))
        (221861 'move' tmp[221849](221859 call chpl_compute_low_param_loop_bound 0 call_tmp[872060]))
        unknown tmp[221850] "maybe param" "temp"
        unknown call_tmp[872067] "expr temp" "maybe param" "maybe type" "temp"
        (872070 'move' call_tmp[872067](221868 call rank _mt[203] this[221754]))
        unknown call_tmp[872072] "expr temp" "maybe param" "maybe type" "temp"
        (872075 'move' call_tmp[872072](221866 call chpl__nudgeHighBound call_tmp[872067]))
        (221873 'move' tmp[221850](221871 call chpl_compute_high_param_loop_bound 0 call_tmp[872072]))
        unknown tmp[221851] "maybe param" "temp"
        (221876 'move' tmp[221851] 1)
        ParamForLoop[221878]
        { i[221818] tmp[221849] tmp[221850] tmp[221851]
          unknown call_tmp[872077] "expr temp" "maybe param" "maybe type" "temp"
          (872080 'move' call_tmp[872077](221835 call thisDims[221801] i[221818]))
          unknown call_tmp[872084] "expr temp" "maybe param" "maybe type" "temp"
          (872087 'move' call_tmp[872084](221842 call otherDims[221810] i[221818]))
          unknown call_tmp[872089] "expr temp" "maybe param" "maybe type" "temp"
          (872092 'move' call_tmp[872089](221840 call(221837 call (partial) contains _mt[203] call_tmp[872077]) call_tmp[872084]))
          unknown call_tmp[872094] "expr temp" "maybe param" "maybe type" "temp"
          (872097 'move' call_tmp[872094](221832 call ! call_tmp[872089]))
          unknown call_tmp[872099] "expr temp" "maybe param" "maybe type" "temp"
          (872102 'move' call_tmp[872099](221844 call _cond_test call_tmp[872094]))
          if call_tmp[872099]
          {
            (620892 'move' ret[620887](620891 'deref' 0))
            gotoReturn _end_contains[620885] _end_contains[620885]
          }
        }
        label _unused_continueLabel[221853]
        label _breakLabel[221852]
      }
      (620897 'move' ret[620887](620896 'deref' 1))
      gotoReturn _end_contains[620885] _end_contains[620885]
    }
    {
      unknown call_tmp[872106] "expr temp" "maybe param" "maybe type" "temp"
      (872109 'move' call_tmp[872106](221924 call idxType _mt[203] this[221754]))
      unknown call_tmp[872113] "expr temp" "maybe param" "maybe type" "temp"
      (872116 'move' call_tmp[872113](221920 call idxType _mt[203] other[221757]))
      unknown call_tmp[872118] "expr temp" "maybe param" "maybe type" "temp"
      (872121 'move' call_tmp[872118](395468 'is_coercible' call_tmp[872106] call_tmp[872113]))
      unknown call_tmp[872123] "expr temp" "maybe param" "maybe type" "temp"
      (872126 'move' call_tmp[872123](221915 call ! call_tmp[872118]))
      unknown call_tmp[872128] "expr temp" "maybe param" "maybe type" "temp"
      (872131 'move' call_tmp[872128](221927 call _cond_test call_tmp[872123]))
      if call_tmp[872128]
      {
        unknown call_tmp[872135] "expr temp" "maybe param" "maybe type" "temp"
        (872138 'move' call_tmp[872135](221901 call idxType _mt[203] other[221757]))
        unknown call_tmp[872140] "expr temp" "maybe param" "maybe type" "temp"
        (872143 'move' call_tmp[872140](221898 call : call_tmp[872135] string[244]))
        unknown call_tmp[872147] "expr temp" "maybe param" "maybe type" "temp"
        (872150 'move' call_tmp[872147](221909 call idxType _mt[203] this[221754]))
        unknown call_tmp[872152] "expr temp" "maybe param" "maybe type" "temp"
        (872155 'move' call_tmp[872152](221906 call : call_tmp[872147] string[244]))
        (221891 call compilerError "incompatible idxType in 'domain.contains()':" " cannot convert from '" call_tmp[872140] "' to '" call_tmp[872152] "'")
      }
      unknown call_tmp[872159] "maybe param" "maybe type" "temp"
      (872162 'move' call_tmp[872159](221938 call(221935 call (partial) sizeAs _mt[203] other[221757]) uint(64)[86]))
      const otherSize[221933] "dead at end of block" "const" "insert auto destroy"
      (649523 'init var' otherSize[221933] call_tmp[872159])
      (221941 'end of statement')
      unknown call_tmp[872164] "expr temp" "maybe param" "maybe type" "temp"
      (872167 'move' call_tmp[872164](221945 call == otherSize[221933] 0))
      unknown call_tmp[872169] "expr temp" "maybe param" "maybe type" "temp"
      (872172 'move' call_tmp[872169](221949 call _cond_test call_tmp[872164]))
      if call_tmp[872169]
      {
        (620902 'move' ret[620887](620901 'deref' 1))
        gotoReturn _end_contains[620885] _end_contains[620885]
      }
      unknown call_tmp[872176] "maybe param" "maybe type" "temp"
      (872179 'move' call_tmp[872176](221960 call(221957 call (partial) sizeAs _mt[203] this[221754]) uint(64)[86]))
      const thisSize[221955] "dead at end of block" "const" "insert auto destroy"
      (649525 'init var' thisSize[221955] call_tmp[872176])
      (221963 'end of statement')
      unknown call_tmp[872181] "expr temp" "maybe param" "maybe type" "temp"
      (872184 'move' call_tmp[872181](221967 call < thisSize[221955] otherSize[221933]))
      unknown call_tmp[872186] "expr temp" "maybe param" "maybe type" "temp"
      (872189 'move' call_tmp[872186](221971 call _cond_test call_tmp[872181]))
      if call_tmp[872186]
      {
        (620907 'move' ret[620887](620906 'deref' 0))
        gotoReturn _end_contains[620885] _end_contains[620885]
      }
      function chpl__loopexpr_iter5[716150](arg iterator[716152]:_any[141](?), arg this[716287]:_domain[225034](?)) : _unknown[42] "do not unref for yields" "compiler generated" "iterator fn"
      {
        unknown ret[716298] "RVV" "temp"
        {
          unknown _indexOfInterest[716157] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[716158] "expr temp" "temp"
          (716167 'move' _iterator[716158](716165 call _getIterator iterator[716152]))
          Defer
          {
            {
              (716182 call _freeIterator _iterator[716158])
            }
          }
          { scopeless type
            (716172 'move' _indexOfInterest[716157](716169 call iteratorIndex _iterator[716158]))
          }
          ForLoop[716159] for-expr
          {
            unknown i[221978] "index var" "insert auto destroy"
            (716291 'end of statement')
            (716177 'move' i[221978] _indexOfInterest[716157])
            (716292 'end of statement' i[221978])
            {
              {
                unknown yret[716302] "YVV" "temp"
                unknown call_tmp[716310] "expr temp" "maybe param" "maybe type" "temp"
                (716313 'move' call_tmp[716310](221985 call(221982 call (partial) contains _mt[203] this[716287]) i[221978]))
                (716305 'move' yret[716302](716304 'deref' call_tmp[716310]))
                (716154 yield yret[716302])
                (716294 'end of statement' i[221978])
              }
            }
            label _continueLabel[716162]
            _indexOfInterest[716157]
            _iterator[716158]
          }
          label _breakLabel[716163]
        }
        (716300 return ret[716298])
      }
      function chpl__loopexpr_iter5[716189](param arg tag[716193]:iterKind[52144], arg iterator[716196]:_any[141](?), arg this[716217]:_domain[225034](?)) : _unknown[42] "compiler generated" "fn returns iterator"
      {
        unknown ret[716340] "RVV" "temp"
        const _leaderIterator[716208] "const" "expr temp" "temp"
        (716213 'move' _leaderIterator[716208](716210 call _toLeader iterator[716196]))
        (716345 'move' ret[716340](716344 'deref' _leaderIterator[716208]))
        (716342 return ret[716340])
      }
      where {
        unknown tmp[716316] "maybe param" "temp"
        (716327 'move' tmp[716316](716198 call == tag[716193] leader[52138]))
        unknown call_tmp[716374] "expr temp" "maybe param" "maybe type" "temp"
        (716377 'move' call_tmp[716374](716329 call _cond_invalid tmp[716316]))
        if call_tmp[716374]
        {
          (716332 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[716347] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[716348] "maybe param" "temp"
        unknown call_tmp[716379] "expr temp" "maybe param" "maybe type" "temp"
        (716382 'move' call_tmp[716379](716317 call isTrue tmp[716316]))
        (716353 'move' tmp[716348](716351 call _cond_test call_tmp[716379]))
        if tmp[716348]
        {
          unknown tmp[716355] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[716384] "expr temp" "maybe param" "maybe type" "temp"
          (716387 'move' call_tmp[716384](716202 'call resolves' "_toLeader" iterator[716196]))
          (716357 'move' tmp[716355](716320 call isTrue call_tmp[716384]))
          (716362 'move' tmp[716347](716359 '_paramFoldLogical' tmp[716348] tmp[716355]))
        }
        {
          (716367 'move' tmp[716347](716364 '_paramFoldLogical' tmp[716348] 0))
        }
        (1001688 call chpl_statementLevelSymbol tmp[716347])
      }
      function chpl__loopexpr_iter5[716219](param arg tag[716223]:iterKind[52144], arg followThis[716226]:_any[141](?), arg iterator[716228]:_any[141](?), arg this[716285]:_domain[225034](?)) : _unknown[42] "do not unref for yields" "compiler generated" "iterator fn"
      {
        unknown ret[716398] "RVV" "temp"
        const _followerIterator[716235] "const" "expr temp" "temp"
        (716241 'move' _followerIterator[716235](716237 call _toFollower iterator[716228] followThis[716226]))
        {
          unknown _indexOfInterest[716253] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[716254] "expr temp" "temp"
          (716263 'move' _iterator[716254](716261 call _getIterator _followerIterator[716235]))
          Defer
          {
            {
              (716278 call _freeIterator _iterator[716254])
            }
          }
          { scopeless type
            (716268 'move' _indexOfInterest[716253](716265 call iteratorIndex _iterator[716254]))
          }
          ForLoop[716255] order-independent lowered-forall for-expr
          {
            unknown i[716148] "index var" "insert auto destroy"
            (716391 'end of statement')
            (716273 'move' i[716148] _indexOfInterest[716253])
            (716392 'end of statement' i[716148])
            {
              {
                unknown yret[716402] "YVV" "temp"
                unknown call_tmp[716410] "expr temp" "maybe param" "maybe type" "temp"
                (716413 'move' call_tmp[716410](716249 call(716246 call (partial) contains _mt[203] this[716285]) i[716148]))
                (716405 'move' yret[716402](716404 'deref' call_tmp[716410]))
                (716244 yield yret[716402])
                (716394 'end of statement' i[716148])
              }
            }
            label _continueLabel[716258]
            _indexOfInterest[716253]
            _iterator[716254]
          }
          label _breakLabel[716259]
        }
        (716400 return ret[716398])
      }
      where {
        (716231 call == tag[716223] follower[52140])
      }
      function chpl__forallexpr5[716128](arg iterExpr[716131]:_any[141](?), arg this[716135]:_domain[225034](?)) : _unknown[42] "compiler generated" "compiler nested function" "maybe array type" "fn returns iterator"
      {
        unknown ret[716418] "RVV" "temp"
        unknown _iterator[716138] "expr temp" "maybe ref" "temp"
        (716140 'move' _iterator[716138] iterExpr[716131])
        unknown call_tmp[716425] "expr temp" "maybe param" "maybe type" "temp"
        (716428 'move' call_tmp[716425](716143 call chpl__loopexpr_iter5 _iterator[716138] this[716135]))
        (716423 'move' ret[716418](716422 'deref' call_tmp[716425]))
        (716420 return ret[716418])
      }
      unknown call_tmp[716430] "expr temp" "maybe param" "maybe type" "temp"
      (716433 'move' call_tmp[716430](716133 call chpl__forallexpr5 other[221757] this[221754]))
      (716437 'iterator record set shape' call_tmp[716430] other[221757] 2)
      unknown call_tmp[872191] "expr temp" "maybe param" "maybe type" "temp"
      (872194 'move' call_tmp[872191](221989 'reduce' LogicalAndReduceScanOp[429773](?) call_tmp[716430] 0))
      (620912 'move' ret[620887](620911 'deref' call_tmp[872191]))
      gotoReturn _end_contains[620885] _end_contains[620885]
    }
    label _end_contains[620885]
    (620889 return ret[620887])
  }
  function _domain[225034](?).indexOrder[222009](arg _mt[222015]:_MT[201], arg this[222011]:_domain[225034](?), arg i[222013]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[620918] "RVV" "temp"
    unknown call_tmp[872198] "expr temp" "maybe param" "maybe type" "temp"
    (872201 'move' call_tmp[872198](406695 call _value _mt[203] this[222011]))
    unknown call_tmp[872207] "expr temp" "maybe param" "maybe type" "temp"
    (872210 'move' call_tmp[872207](444349 call rank _mt[203] this[222011]))
    unknown call_tmp[872212] "expr temp" "maybe param" "maybe type" "temp"
    (872215 'move' call_tmp[872212](222025 call _makeIndexTuple call_tmp[872207] i[222013] "index"))
    unknown call_tmp[872217] "expr temp" "maybe param" "maybe type" "temp"
    (872220 'move' call_tmp[872217](222023 call(222020 call (partial) dsiIndexOrder _mt[203] call_tmp[872198]) call_tmp[872212]))
    (620923 'move' ret[620918](620922 'deref' call_tmp[872217]))
    (620920 return ret[620918])
  }
  function _domain[225034](?).orderToIndex[222031](arg _mt[222039]:_MT[201], arg this[222033]:_domain[225034](?), arg order[222036]:int(64)[10]) : _unknown[42] "method" "primary method" "@unstable"
  {
    unknown ret[620927] "RVV" "temp"
    unknown call_tmp[872222] "expr temp" "maybe param" "maybe type" "temp"
    (872225 'move' call_tmp[872222](222060 call _cond_test 1))
    if call_tmp[872222]
    {
      (222056 call(444356 call (partial) checkOrderBounds _mt[203] this[222033]) order[222036])
    }
    unknown rankOrder[222066] "dead at end of block" "insert auto destroy"
    (649527 'init var' rankOrder[222066] order[222036])
    (222069 'end of statement')
    unknown idx[222071] "dead at end of block" "insert auto destroy"
    unknown call_tmp[872231] "expr temp" "maybe param" "maybe type" "temp"
    (872234 'move' call_tmp[872231](444363 call rank _mt[203] this[222033]))
    unknown call_tmp[872238] "expr temp" "maybe param" "maybe type" "temp"
    (872241 'move' call_tmp[872238](406701 call _value _mt[203] this[222033]))
    unknown call_tmp[872245] "expr temp" "maybe param" "maybe type" "temp"
    (872248 'move' call_tmp[872245](222076 call idxType _mt[203] call_tmp[872238]))
    unknown call_tmp[872250] "expr temp" "maybe param" "maybe type" "temp"
    (872253 'move' call_tmp[872250](222072 call * call_tmp[872231] call_tmp[872245]))
    (649529 'default init var' idx[222071] call_tmp[872250])
    (222080 'end of statement')
    unknown call_tmp[872257] "maybe param" "maybe type" "temp"
    (872260 'move' call_tmp[872257](222087 call(222084 call (partial) sizeAs _mt[203] this[222033]) int(64)[10]))
    unknown div[222082] "dead at end of block" "insert auto destroy"
    (649531 'init var' div[222082] call_tmp[872257])
    (222090 'end of statement')
    {
      unknown i[222091] "dead at end of block" "index var" "insert auto destroy"
      (649533 'init var' i[222091] 0)
      (560554 'end of statement')
      unknown tmp[222195] "maybe param" "temp"
      unknown call_tmp[872264] "expr temp" "maybe param" "maybe type" "temp"
      (872267 'move' call_tmp[872264](444367 call rank _mt[203] this[222033]))
      unknown call_tmp[872269] "expr temp" "maybe param" "maybe type" "temp"
      (872272 'move' call_tmp[872269](222095 call chpl__nudgeHighBound call_tmp[872264]))
      (222207 'move' tmp[222195](222205 call chpl_compute_low_param_loop_bound 0 call_tmp[872269]))
      unknown tmp[222196] "maybe param" "temp"
      unknown call_tmp[872276] "expr temp" "maybe param" "maybe type" "temp"
      (872279 'move' call_tmp[872276](444392 call rank _mt[203] this[222033]))
      unknown call_tmp[872281] "expr temp" "maybe param" "maybe type" "temp"
      (872284 'move' call_tmp[872281](222212 call chpl__nudgeHighBound call_tmp[872276]))
      (222216 'move' tmp[222196](222214 call chpl_compute_high_param_loop_bound 0 call_tmp[872281]))
      unknown tmp[222197] "maybe param" "temp"
      (222219 'move' tmp[222197] 1)
      ParamForLoop[222221]
      { i[222091] tmp[222195] tmp[222196] tmp[222197]
        {
          unknown call_tmp[872288] "maybe param" "maybe type" "temp"
          (872291 'move' call_tmp[872288](222106 call(222103 call (partial) dim _mt[203] this[222033]) i[222091]))
          unknown currDim[222101] "dead at end of block" "insert auto destroy"
          (649535 'init var' currDim[222101] call_tmp[872288])
          (222109 'end of statement')
          unknown call_tmp[872295] "expr temp" "maybe param" "maybe type" "temp"
          (872298 'move' call_tmp[872295](222117 call(222114 call (partial) sizeAs _mt[203] currDim[222101]) int(64)[10]))
          (222110 call /= div[222082] call_tmp[872295])
          (560556 'end of statement' div[222082] currDim[222101])
          unknown call_tmp[872302] "maybe param" "maybe type" "temp"
          (872305 'move' call_tmp[872302](222122 call low _mt[203] currDim[222101]))
          const lo[222120] "dead at end of block" "const" "insert auto destroy"
          (649537 'init var' lo[222120] call_tmp[872302])
          (222126 'end of statement')
          unknown call_tmp[872309] "maybe param" "maybe type" "temp"
          (872312 'move' call_tmp[872309](222130 call high _mt[203] currDim[222101]))
          const hi[222128] "dead at end of block" "const" "insert auto destroy"
          (649539 'init var' hi[222128] call_tmp[872309])
          (222134 'end of statement')
          unknown call_tmp[872316] "maybe param" "maybe type" "temp"
          (872319 'move' call_tmp[872316](222138 call stride _mt[203] currDim[222101]))
          const stride[222136] "dead at end of block" "const" "insert auto destroy"
          (649541 'init var' stride[222136] call_tmp[872316])
          (222142 'end of statement')
          unknown call_tmp[872321] "maybe param" "maybe type" "temp"
          (872324 'move' call_tmp[872321](222145 call / rankOrder[222066] div[222082]))
          const zeroInd[222144] "dead at end of block" "const" "insert auto destroy"
          (649543 'init var' zeroInd[222144] call_tmp[872321])
          (222150 'end of statement')
          unknown call_tmp[872326] "maybe param" "maybe type" "temp"
          (872329 'move' call_tmp[872326](222153 call * zeroInd[222144] stride[222136]))
          unknown currInd[222152] "dead at end of block" "insert auto destroy"
          (649545 'init var' currInd[222152] call_tmp[872326])
          (222158 'end of statement' i[222091] currDim[222101] rankOrder[222066] div[222082] zeroInd[222144] stride[222136])
          unknown call_tmp[872331] "expr temp" "maybe param" "maybe type" "temp"
          (872334 'move' call_tmp[872331](222169 call < stride[222136] 0))
          unknown call_tmp[872336] "expr temp" "maybe param" "maybe type" "temp"
          (872339 'move' call_tmp[872336](222173 call _cond_test call_tmp[872331]))
          if call_tmp[872336]
          {
            (222159 call += currInd[222152] hi[222128])
            (560564 'end of statement' currInd[222152] hi[222128])
          }
          {
            (222164 call += currInd[222152] lo[222120])
            (560567 'end of statement' currInd[222152] lo[222120])
          }
          unknown call_tmp[872341] "expr temp" "maybe param" "maybe type" "temp"
          (872344 'move' call_tmp[872341](222182 call idx[222071] i[222091]))
          unknown call_tmp[872348] "expr temp" "maybe param" "maybe type" "temp"
          (872351 'move' call_tmp[872348](444385 call idxType _mt[203] this[222033]))
          unknown call_tmp[872353] "expr temp" "maybe param" "maybe type" "temp"
          (872356 'move' call_tmp[872353](222184 call : currInd[222152] call_tmp[872348]))
          (222179 call = call_tmp[872341] call_tmp[872353])
          (560570 'end of statement' idx[222071] i[222091] currInd[222152])
          unknown call_tmp[872358] "expr temp" "maybe param" "maybe type" "temp"
          (872361 'move' call_tmp[872358](222191 call % rankOrder[222066] div[222082]))
          (222188 call = rankOrder[222066] call_tmp[872358])
          (560574 'end of statement' rankOrder[222066] div[222082])
        }
      }
      label _unused_continueLabel[222199]
      label _breakLabel[222198]
    }
    unknown call_tmp[872365] "expr temp" "maybe param" "maybe type" "temp"
    (872368 'move' call_tmp[872365](222241 call rank _mt[203] this[222033]))
    unknown call_tmp[872370] "expr temp" "maybe param" "maybe type" "temp"
    (872373 'move' call_tmp[872370](222238 call == call_tmp[872365] 1))
    unknown call_tmp[872375] "expr temp" "maybe param" "maybe type" "temp"
    (872378 'move' call_tmp[872375](222245 call _cond_test call_tmp[872370]))
    if call_tmp[872375]
    {
      unknown call_tmp[872380] "expr temp" "maybe param" "maybe type" "temp"
      (872383 'move' call_tmp[872380](222232 call idx[222071] 0))
      (620932 'move' ret[620927](620931 'deref' call_tmp[872380]))
      gotoReturn _end_orderToIndex[620925] _end_orderToIndex[620925]
      (560577 'end of statement' idx[222071])
    }
    {
      (620937 'move' ret[620927](620936 'deref' idx[222071]))
      gotoReturn _end_orderToIndex[620925] _end_orderToIndex[620925]
      (560579 'end of statement' idx[222071])
    }
    label _end_orderToIndex[620925]
    (620929 return ret[620927])
  }
  where {
    unknown tmp[496884] "maybe param" "temp"
    (496895 'move' tmp[496884](222047 call(222044 call (partial) isRectangular _mt[203] this[222033])))
    unknown call_tmp[872387] "expr temp" "maybe param" "maybe type" "temp"
    (872390 'move' call_tmp[872387](496897 call _cond_invalid tmp[496884]))
    if call_tmp[872387]
    {
      (496900 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[693467] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[693468] "maybe param" "temp"
    unknown call_tmp[872392] "expr temp" "maybe param" "maybe type" "temp"
    (872395 'move' call_tmp[872392](496885 call isTrue tmp[496884]))
    (693473 'move' tmp[693468](693471 call _cond_test call_tmp[872392]))
    if tmp[693468]
    {
      unknown tmp[693475] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[872399] "expr temp" "maybe param" "maybe type" "temp"
      (872402 'move' call_tmp[872399](222051 call idxType _mt[203] this[222033]))
      unknown call_tmp[872404] "expr temp" "maybe param" "maybe type" "temp"
      (872407 'move' call_tmp[872404](222049 call isNumericType call_tmp[872399]))
      (693477 'move' tmp[693475](496888 call isTrue call_tmp[872404]))
      (693482 'move' tmp[693467](693479 '_paramFoldLogical' tmp[693468] tmp[693475]))
    }
    {
      (693487 'move' tmp[693467](693484 '_paramFoldLogical' tmp[693468] 0))
    }
    (1001594 call chpl_statementLevelSymbol tmp[693467])
  }
  function _domain[225034](?).orderToIndex[222254](arg _mt[222260]:_MT[201], arg this[222256]:_domain[225034](?), arg order[222258]:_any[141](?)) : _unknown[42] "last resort" "method" "primary method" "no return value for void"
  {
    unknown tmp[496905] "maybe param" "temp"
    (496916 'move' tmp[496905](222284 call(222281 call (partial) isRectangular _mt[203] this[222256])))
    unknown call_tmp[872411] "expr temp" "maybe param" "maybe type" "temp"
    (872414 'move' call_tmp[872411](496918 call _cond_invalid tmp[496905]))
    if call_tmp[872411]
    {
      (496921 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[693494] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[693495] "maybe param" "temp"
    unknown call_tmp[872416] "expr temp" "maybe param" "maybe type" "temp"
    (872419 'move' call_tmp[872416](496906 call isTrue tmp[496905]))
    (693500 'move' tmp[693495](693498 call _cond_test call_tmp[872416]))
    if tmp[693495]
    {
      unknown tmp[693502] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[872423] "expr temp" "maybe param" "maybe type" "temp"
      (872426 'move' call_tmp[872423](222288 call idxType _mt[203] this[222256]))
      unknown call_tmp[872428] "expr temp" "maybe param" "maybe type" "temp"
      (872431 'move' call_tmp[872428](222286 call isNumericType call_tmp[872423]))
      (693504 'move' tmp[693502](496909 call isTrue call_tmp[872428]))
      (693509 'move' tmp[693494](693506 '_paramFoldLogical' tmp[693495] tmp[693502]))
    }
    {
      (693514 'move' tmp[693494](693511 '_paramFoldLogical' tmp[693495] 0))
    }
    unknown call_tmp[872433] "expr temp" "maybe param" "maybe type" "temp"
    (872436 'move' call_tmp[872433](222291 call _cond_test tmp[693494]))
    if call_tmp[872433]
    {
      (222264 call compilerError "illegal value passed to orderToIndex():" " the argument 'order' must be an integer, excluding uint(64)")
    }
    {
      (222273 call compilerError "this domain type does not support 'orderToIndex'")
    }
    (620941 return _void[46])
  }
  function _domain[225034](?).checkOrderBounds[222299](arg _mt[222307]:_MT[201], arg this[222301]:_domain[225034](?), arg order[222304]:int(64)[10]) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown tmp[496926] "maybe param" "temp"
    unknown call_tmp[872440] "expr temp" "maybe param" "maybe type" "temp"
    (872443 'move' call_tmp[872440](222356 call(222353 call (partial) sizeAs _mt[203] this[222301]) uint(64)[86]))
    (496937 'move' tmp[496926](222349 call >= order[222304] call_tmp[872440]))
    unknown call_tmp[872445] "expr temp" "maybe param" "maybe type" "temp"
    (872448 'move' call_tmp[872445](496939 call _cond_invalid tmp[496926]))
    if call_tmp[872445]
    {
      (496942 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[693521] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[693522] "maybe param" "temp"
    unknown call_tmp[872450] "expr temp" "maybe param" "maybe type" "temp"
    (872453 'move' call_tmp[872450](496927 call isTrue tmp[496926]))
    (693527 'move' tmp[693522](693525 call _cond_test call_tmp[872450]))
    if tmp[693522]
    {
      (693532 'move' tmp[693521](693529 '_paramFoldLogical' tmp[693522] 1))
    }
    {
      unknown tmp[693534] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[872455] "expr temp" "maybe param" "maybe type" "temp"
      (872458 'move' call_tmp[872455](222358 call < order[222304] 0))
      (693536 'move' tmp[693534](496931 call isTrue call_tmp[872455]))
      (693541 'move' tmp[693521](693538 '_paramFoldLogical' tmp[693522] tmp[693534]))
    }
    unknown call_tmp[872460] "expr temp" "maybe param" "maybe type" "temp"
    (872463 'move' call_tmp[872460](222362 call _cond_test tmp[693521]))
    if call_tmp[872460]
    {
      unknown call_tmp[872467] "expr temp" "maybe param" "maybe type" "temp"
      (872470 'move' call_tmp[872467](222340 call(222337 call (partial) isEmpty _mt[203] this[222301])))
      unknown call_tmp[872472] "expr temp" "maybe param" "maybe type" "temp"
      (872475 'move' call_tmp[872472](222341 call _cond_test call_tmp[872467]))
      if call_tmp[872472]
      {
        (222312 call halt "orderToIndex() invoked on an empty domain")
      }
      {
        unknown call_tmp[872479] "expr temp" "maybe param" "maybe type" "temp"
        (872482 'move' call_tmp[872479](222332 call(222329 call (partial) sizeAs _mt[203] this[222301]) uint(64)[86]))
        unknown call_tmp[872484] "expr temp" "maybe param" "maybe type" "temp"
        (872487 'move' call_tmp[872484](222326 call - call_tmp[872479] 1))
        (222318 call halt "illegal order in orderToIndex(): " order[222304] ". For this domain, order must lie in 0.." call_tmp[872484])
      }
    }
    (620943 return _void[46])
  }
  function _domain[225034](?).position[222368](arg _mt[222374]:_MT[201], arg this[222370]:_domain[225034](?), arg i[222372]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[620947] "RVV" "temp"
    unknown call_tmp[872491] "expr temp" "maybe param" "maybe type" "temp"
    (872494 'move' call_tmp[872491](444409 call rank _mt[203] this[222370]))
    unknown call_tmp[872496] "maybe param" "maybe type" "temp"
    (872499 'move' call_tmp[872496](222388 call _makeIndexTuple call_tmp[872491] i[222372] "index"))
    unknown ind[222386] "dead at end of block" "insert auto destroy"
    (649547 'init var' ind[222386] call_tmp[872496])
    unknown pos[222379] "dead at end of block" "insert auto destroy"
    unknown call_tmp[872503] "expr temp" "maybe param" "maybe type" "temp"
    (872506 'move' call_tmp[872503](444401 call rank _mt[203] this[222370]))
    unknown call_tmp[872510] "expr temp" "maybe param" "maybe type" "temp"
    (872513 'move' call_tmp[872510](444405 call chpl_integralIdxType _mt[203] this[222370]))
    unknown call_tmp[872515] "expr temp" "maybe param" "maybe type" "temp"
    (872518 'move' call_tmp[872515](222380 call * call_tmp[872503] call_tmp[872510]))
    (649549 'default init var' pos[222379] call_tmp[872515])
    (222393 'end of statement')
    {
      unknown _indexOfInterest[222422] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[222423] "expr temp" "temp"
      unknown call_tmp[872522] "expr temp" "maybe param" "maybe type" "temp"
      (872525 'move' call_tmp[872522](444419 call rank _mt[203] this[222370]))
      unknown call_tmp[872527] "expr temp" "maybe param" "maybe type" "temp"
      (872530 'move' call_tmp[872527](222436 call - call_tmp[872522] 1))
      unknown call_tmp[872532] "expr temp" "maybe param" "maybe type" "temp"
      (872535 'move' call_tmp[872532](222439 call chpl_direct_range_iter 0 call_tmp[872527]))
      (222432 'move' _iterator[222423](222430 call _getIterator call_tmp[872532]))
      Defer
      {
        {
          (222454 call _freeIterator _iterator[222423])
        }
      }
      { scopeless type
        (222444 'move' _indexOfInterest[222422](222441 call iteratorIndex _iterator[222423]))
      }
      ForLoop[222424]
      {
        unknown d[222394] "index var" "insert auto destroy"
        (560588 'end of statement')
        (222449 'move' d[222394] _indexOfInterest[222422])
        (560589 'end of statement' d[222394])
        unknown call_tmp[872537] "expr temp" "maybe param" "maybe type" "temp"
        (872540 'move' call_tmp[872537](222406 call pos[222379] d[222394]))
        unknown call_tmp[872544] "expr temp" "maybe param" "maybe type" "temp"
        (872547 'move' call_tmp[872544](406717 call _value _mt[203] this[222370]))
        unknown call_tmp[872551] "expr temp" "maybe param" "maybe type" "temp"
        (872554 'move' call_tmp[872551](222412 call(222409 call (partial) dsiDim _mt[203] call_tmp[872544]) d[222394]))
        unknown call_tmp[872558] "expr temp" "maybe param" "maybe type" "temp"
        (872561 'move' call_tmp[872558](222419 call ind[222386] d[222394]))
        unknown call_tmp[872563] "expr temp" "maybe param" "maybe type" "temp"
        (872566 'move' call_tmp[872563](222417 call(222414 call (partial) indexOrder _mt[203] call_tmp[872551]) call_tmp[872558]))
        (222403 call = call_tmp[872537] call_tmp[872563])
        (560591 'end of statement' pos[222379] d[222394] ind[222386] d[222394])
        label _continueLabel[222427]
        _indexOfInterest[222422]
        _iterator[222423]
      }
      label _breakLabel[222428]
    }
    (620952 'move' ret[620947](620951 'deref' pos[222379]))
    gotoReturn _end_position[620945] _end_position[620945]
    (560596 'end of statement' pos[222379])
    label _end_position[620945]
    (620949 return ret[620947])
  }
  function _domain[225034](?).expand[222465](arg _mt[222476]:_MT[201], arg this[222467]:_domain[225034](?), arg off[222473]:_tuple[246](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[872570] "expr temp" "maybe param" "maybe type" "temp"
    (872573 'move' call_tmp[872570](222519 call(222516 call (partial) isAssociative _mt[203] this[222467])))
    unknown call_tmp[872575] "expr temp" "maybe param" "maybe type" "temp"
    (872578 'move' call_tmp[872575](222520 call _cond_test call_tmp[872570]))
    if call_tmp[872575]
    {
      (222487 call compilerError "expand not supported on associative domains")
    }
    {
      unknown call_tmp[872582] "expr temp" "maybe param" "maybe type" "temp"
      (872585 'move' call_tmp[872582](222508 call(222505 call (partial) isSparse _mt[203] this[222467])))
      unknown call_tmp[872587] "expr temp" "maybe param" "maybe type" "temp"
      (872590 'move' call_tmp[872587](222509 call _cond_test call_tmp[872582]))
      if call_tmp[872587]
      {
        (222493 call compilerError "expand not supported on sparse domains")
      }
      {
        (222499 call compilerError "expand not supported on this domain type")
      }
    }
    (620956 return _void[46])
  }
  where {
    unknown call_tmp[872594] "expr temp" "maybe param" "maybe type" "temp"
    (872597 'move' call_tmp[872594](222484 call(222481 call (partial) isRectangular _mt[203] this[222467])))
    unknown call_tmp[872599] "expr temp" "maybe param" "maybe type" "temp"
    (872602 'move' call_tmp[872599](222478 call ! call_tmp[872594]))
    unknown call_tmp[872604] "expr temp" "maybe param" "maybe type" "temp"
    (872607 'move' call_tmp[872604](528630 'is star tuple type' off[222473]))
    unknown call_tmp[872609] "expr temp" "maybe param" "maybe type" "temp"
    (872612 'move' call_tmp[872609](528631 call & call_tmp[872599] call_tmp[872604]))
    unknown call_tmp[872616] "expr temp" "maybe param" "maybe type" "temp"
    (872619 'move' call_tmp[872616](528639 call rank _mt[203] this[222467]))
    unknown call_tmp[872621] "expr temp" "maybe param" "maybe type" "temp"
    (872624 'move' call_tmp[872621](528635 'query' off[222473] 1))
    unknown call_tmp[872626] "expr temp" "maybe param" "maybe type" "temp"
    (872629 'move' call_tmp[872626](528642 call == call_tmp[872616] call_tmp[872621]))
    unknown call_tmp[872631] "expr temp" "maybe param" "maybe type" "temp"
    (872634 'move' call_tmp[872631](528644 call & call_tmp[872609] call_tmp[872626]))
    unknown call_tmp[872636] "expr temp" "maybe param" "maybe type" "temp"
    (872639 'move' call_tmp[872636](528650 'query' off[222473] 2))
    unknown call_tmp[872641] "expr temp" "maybe param" "maybe type" "temp"
    (872644 'move' call_tmp[872641](528653 'is_instantiation_allow_values' integral[159](?) call_tmp[872636]))
    (528654 call & call_tmp[872631] call_tmp[872641])
  }
  function _domain[225034](?).expand[222529](arg _mt[222539]:_MT[201], arg this[222531]:_domain[225034](?), arg off[222535]:integral[159](?) ...) : _unknown[42] "method" "primary method" "@unstable"
  {
    unknown ret[620960] "RVV" "temp"
    unknown call_tmp[872650] "expr temp" "maybe param" "maybe type" "temp"
    (872653 'move' call_tmp[872650](222544 call(444434 call (partial) expand _mt[203] this[222531]) off[222535]))
    (620965 'move' ret[620960](620964 'deref' call_tmp[872650]))
    (620962 return ret[620960])
  }
  function _domain[225034](?).expand[222548](arg _mt[222559]:_MT[201], arg this[222550]:_domain[225034](?), arg off[222556]:_tuple[246](?)) : _unknown[42] "compiler added where" "method" "primary method" "@unstable"
  {
    unknown ret[620969] "RVV" "temp"
    unknown call_tmp[872657] "maybe param" "maybe type" "temp"
    (872660 'move' call_tmp[872657](222565 call(444444 call (partial) dims _mt[203] this[222550])))
    unknown ranges[222563] "dead at end of block" "insert auto destroy"
    (649551 'init var' ranges[222563] call_tmp[872657])
    (222567 'end of statement')
    {
      unknown _indexOfInterest[222623] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[222624] "expr temp" "temp"
      unknown call_tmp[872664] "expr temp" "maybe param" "maybe type" "temp"
      (872667 'move' call_tmp[872664](444459 call rank _mt[203] this[222550]))
      unknown call_tmp[872669] "expr temp" "maybe param" "maybe type" "temp"
      (872672 'move' call_tmp[872669](222637 call - call_tmp[872664] 1))
      unknown call_tmp[872674] "expr temp" "maybe param" "maybe type" "temp"
      (872677 'move' call_tmp[872674](222640 call chpl_direct_range_iter 0 call_tmp[872669]))
      (222633 'move' _iterator[222624](222631 call _getIterator call_tmp[872674]))
      Defer
      {
        {
          (222655 call _freeIterator _iterator[222624])
        }
      }
      { scopeless type
        (222645 'move' _indexOfInterest[222623](222642 call iteratorIndex _iterator[222624]))
      }
      ForLoop[222625]
      {
        unknown i[222568] "index var" "insert auto destroy"
        (560603 'end of statement')
        (222650 'move' i[222568] _indexOfInterest[222623])
        (560604 'end of statement' i[222568])
        {
          unknown call_tmp[872679] "expr temp" "maybe param" "maybe type" "temp"
          (872682 'move' call_tmp[872679](222581 call ranges[222563] i[222568]))
          unknown call_tmp[872684] "expr temp" "maybe param" "maybe type" "temp"
          (872687 'move' call_tmp[872684](222584 call ranges[222563] i[222568]))
          unknown call_tmp[872691] "expr temp" "maybe param" "maybe type" "temp"
          (872694 'move' call_tmp[872691](222593 call off[222556] i[222568]))
          unknown call_tmp[872696] "expr temp" "maybe param" "maybe type" "temp"
          (872699 'move' call_tmp[872696](222591 call(222588 call (partial) expand _mt[203] call_tmp[872684]) call_tmp[872691]))
          (222578 call = call_tmp[872679] call_tmp[872696])
          (560606 'end of statement' ranges[222563] i[222568])
          unknown call_tmp[872701] "expr temp" "maybe param" "maybe type" "temp"
          (872704 'move' call_tmp[872701](222608 call ranges[222563] i[222568]))
          unknown call_tmp[872708] "expr temp" "maybe param" "maybe type" "temp"
          (872711 'move' call_tmp[872708](222610 call lowBound _mt[203] call_tmp[872701]))
          unknown call_tmp[872713] "expr temp" "maybe param" "maybe type" "temp"
          (872716 'move' call_tmp[872713](222614 call ranges[222563] i[222568]))
          unknown call_tmp[872720] "expr temp" "maybe param" "maybe type" "temp"
          (872723 'move' call_tmp[872720](222616 call highBound _mt[203] call_tmp[872713]))
          unknown call_tmp[872725] "expr temp" "maybe param" "maybe type" "temp"
          (872728 'move' call_tmp[872725](222605 call > call_tmp[872708] call_tmp[872720]))
          unknown call_tmp[872730] "expr temp" "maybe param" "maybe type" "temp"
          (872733 'move' call_tmp[872730](222619 call _cond_test call_tmp[872725]))
          if call_tmp[872730]
          {
            (222597 call halt "***Error: Degenerate dimension created in dimension " i[222568] "***")
            (560609 'end of statement' i[222568])
          }
        }
        label _continueLabel[222628]
        _indexOfInterest[222623]
        _iterator[222624]
      }
      label _breakLabel[222629]
    }
    unknown call_tmp[872737] "expr temp" "maybe param" "maybe type" "temp"
    (872740 'move' call_tmp[872737](444464 call distribution _mt[203] this[222550]))
    unknown call_tmp[872744] "expr temp" "maybe param" "maybe type" "temp"
    (872747 'move' call_tmp[872744](444468 call rank _mt[203] this[222550]))
    unknown call_tmp[872751] "expr temp" "maybe param" "maybe type" "temp"
    (872754 'move' call_tmp[872751](406724 call _value _mt[203] this[222550]))
    unknown call_tmp[872758] "expr temp" "maybe param" "maybe type" "temp"
    (872761 'move' call_tmp[872758](222669 call idxType _mt[203] call_tmp[872751]))
    unknown call_tmp[872765] "expr temp" "maybe param" "maybe type" "temp"
    (872768 'move' call_tmp[872765](444472 call strides _mt[203] this[222550]))
    unknown call_tmp[872770] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (872773 'move' call_tmp[872770](1000361 'new' _domain[225034](?) call_tmp[872737] call_tmp[872744] call_tmp[872758] call_tmp[872765] ranges[222563]))
    (620974 'move' ret[620969](620973 'deref' call_tmp[872770]))
    gotoReturn _end_expand[620967] _end_expand[620967]
    (560611 'end of statement' ranges[222563])
    label _end_expand[620967]
    (620971 return ret[620969])
  }
  where {
    unknown call_tmp[872775] "expr temp" "maybe param" "maybe type" "temp"
    (872778 'move' call_tmp[872775](528660 'is star tuple type' off[222556]))
    unknown call_tmp[872780] "expr temp" "maybe param" "maybe type" "temp"
    (872783 'move' call_tmp[872780](528663 call & 1 call_tmp[872775]))
    unknown call_tmp[872787] "expr temp" "maybe param" "maybe type" "temp"
    (872790 'move' call_tmp[872787](528671 call rank _mt[203] this[222550]))
    unknown call_tmp[872792] "expr temp" "maybe param" "maybe type" "temp"
    (872795 'move' call_tmp[872792](528667 'query' off[222556] 1))
    unknown call_tmp[872797] "expr temp" "maybe param" "maybe type" "temp"
    (872800 'move' call_tmp[872797](528674 call == call_tmp[872787] call_tmp[872792]))
    unknown call_tmp[872802] "expr temp" "maybe param" "maybe type" "temp"
    (872805 'move' call_tmp[872802](528676 call & call_tmp[872780] call_tmp[872797]))
    unknown call_tmp[872807] "expr temp" "maybe param" "maybe type" "temp"
    (872810 'move' call_tmp[872807](528682 'query' off[222556] 2))
    unknown call_tmp[872812] "expr temp" "maybe param" "maybe type" "temp"
    (872815 'move' call_tmp[872812](528685 'is_instantiation_allow_values' integral[159](?) call_tmp[872807]))
    (528686 call & call_tmp[872802] call_tmp[872812])
  }
  function _domain[225034](?).expand[222676](arg _mt[222684]:_MT[201], arg this[222678]:_domain[225034](?), arg off[222681]:integral[159](?)) : _unknown[42] "method" "primary method" "@unstable"
  {
    unknown ret[620980] "RVV" "temp"
    unknown call_tmp[872819] "maybe param" "maybe type" "temp"
    (872822 'move' call_tmp[872819](222694 call(444482 call (partial) dims _mt[203] this[222678])))
    unknown ranges[222692] "dead at end of block" "insert auto destroy"
    (649553 'init var' ranges[222692] call_tmp[872819])
    (222696 'end of statement')
    {
      unknown _indexOfInterest[222720] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[222721] "expr temp" "temp"
      unknown call_tmp[872826] "expr temp" "maybe param" "maybe type" "temp"
      (872829 'move' call_tmp[872826](444494 call rank _mt[203] this[222678]))
      unknown call_tmp[872831] "expr temp" "maybe param" "maybe type" "temp"
      (872834 'move' call_tmp[872831](222734 call - call_tmp[872826] 1))
      unknown call_tmp[872836] "expr temp" "maybe param" "maybe type" "temp"
      (872839 'move' call_tmp[872836](222737 call chpl_direct_range_iter 0 call_tmp[872831]))
      (222730 'move' _iterator[222721](222728 call _getIterator call_tmp[872836]))
      Defer
      {
        {
          (222752 call _freeIterator _iterator[222721])
        }
      }
      { scopeless type
        (222742 'move' _indexOfInterest[222720](222739 call iteratorIndex _iterator[222721]))
      }
      ForLoop[222722]
      {
        unknown i[222697] "index var" "insert auto destroy"
        (560614 'end of statement')
        (222747 'move' i[222697] _indexOfInterest[222720])
        (560615 'end of statement' i[222697])
        unknown call_tmp[872841] "expr temp" "maybe param" "maybe type" "temp"
        (872844 'move' call_tmp[872841](222709 call ranges[222692] i[222697]))
        unknown call_tmp[872848] "expr temp" "maybe param" "maybe type" "temp"
        (872851 'move' call_tmp[872848](222712 call(444488 call (partial) dim _mt[203] this[222678]) i[222697]))
        unknown call_tmp[872855] "expr temp" "maybe param" "maybe type" "temp"
        (872858 'move' call_tmp[872855](222717 call(222714 call (partial) expand _mt[203] call_tmp[872848]) off[222681]))
        (222706 call = call_tmp[872841] call_tmp[872855])
        (560617 'end of statement' ranges[222692] i[222697])
        label _continueLabel[222725]
        _indexOfInterest[222720]
        _iterator[222721]
      }
      label _breakLabel[222726]
    }
    unknown call_tmp[872862] "expr temp" "maybe param" "maybe type" "temp"
    (872865 'move' call_tmp[872862](444499 call distribution _mt[203] this[222678]))
    unknown call_tmp[872869] "expr temp" "maybe param" "maybe type" "temp"
    (872872 'move' call_tmp[872869](444503 call rank _mt[203] this[222678]))
    unknown call_tmp[872876] "expr temp" "maybe param" "maybe type" "temp"
    (872879 'move' call_tmp[872876](406728 call _value _mt[203] this[222678]))
    unknown call_tmp[872883] "expr temp" "maybe param" "maybe type" "temp"
    (872886 'move' call_tmp[872883](222766 call idxType _mt[203] call_tmp[872876]))
    unknown call_tmp[872890] "expr temp" "maybe param" "maybe type" "temp"
    (872893 'move' call_tmp[872890](444507 call strides _mt[203] this[222678]))
    unknown call_tmp[872895] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (872898 'move' call_tmp[872895](1000362 'new' _domain[225034](?) call_tmp[872862] call_tmp[872869] call_tmp[872883] call_tmp[872890] ranges[222692]))
    (620985 'move' ret[620980](620984 'deref' call_tmp[872895]))
    gotoReturn _end_expand[620978] _end_expand[620978]
    (560620 'end of statement' ranges[222692])
    label _end_expand[620978]
    (620982 return ret[620980])
  }
  where {
    unknown call_tmp[872902] "expr temp" "maybe param" "maybe type" "temp"
    (872905 'move' call_tmp[872902](444478 call rank _mt[203] this[222678]))
    (222686 call > call_tmp[872902] 1)
  }
  function _domain[225034](?).exterior[222774](arg _mt[222785]:_MT[201], arg this[222776]:_domain[225034](?), arg off[222782]:_tuple[246](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[872909] "expr temp" "maybe param" "maybe type" "temp"
    (872912 'move' call_tmp[872909](222828 call(222825 call (partial) isAssociative _mt[203] this[222776])))
    unknown call_tmp[872914] "expr temp" "maybe param" "maybe type" "temp"
    (872917 'move' call_tmp[872914](222829 call _cond_test call_tmp[872909]))
    if call_tmp[872914]
    {
      (222796 call compilerError "exterior not supported on associative domains")
    }
    {
      unknown call_tmp[872921] "expr temp" "maybe param" "maybe type" "temp"
      (872924 'move' call_tmp[872921](222817 call(222814 call (partial) isSparse _mt[203] this[222776])))
      unknown call_tmp[872926] "expr temp" "maybe param" "maybe type" "temp"
      (872929 'move' call_tmp[872926](222818 call _cond_test call_tmp[872921]))
      if call_tmp[872926]
      {
        (222802 call compilerError "exterior not supported on sparse domains")
      }
      {
        (222808 call compilerError "exterior not supported on this domain type")
      }
    }
    (620989 return _void[46])
  }
  where {
    unknown call_tmp[872933] "expr temp" "maybe param" "maybe type" "temp"
    (872936 'move' call_tmp[872933](222793 call(222790 call (partial) isRectangular _mt[203] this[222776])))
    unknown call_tmp[872938] "expr temp" "maybe param" "maybe type" "temp"
    (872941 'move' call_tmp[872938](222787 call ! call_tmp[872933]))
    unknown call_tmp[872943] "expr temp" "maybe param" "maybe type" "temp"
    (872946 'move' call_tmp[872943](528692 'is star tuple type' off[222782]))
    unknown call_tmp[872948] "expr temp" "maybe param" "maybe type" "temp"
    (872951 'move' call_tmp[872948](528693 call & call_tmp[872938] call_tmp[872943]))
    unknown call_tmp[872955] "expr temp" "maybe param" "maybe type" "temp"
    (872958 'move' call_tmp[872955](528701 call rank _mt[203] this[222776]))
    unknown call_tmp[872960] "expr temp" "maybe param" "maybe type" "temp"
    (872963 'move' call_tmp[872960](528697 'query' off[222782] 1))
    unknown call_tmp[872965] "expr temp" "maybe param" "maybe type" "temp"
    (872968 'move' call_tmp[872965](528704 call == call_tmp[872955] call_tmp[872960]))
    unknown call_tmp[872970] "expr temp" "maybe param" "maybe type" "temp"
    (872973 'move' call_tmp[872970](528706 call & call_tmp[872948] call_tmp[872965]))
    unknown call_tmp[872975] "expr temp" "maybe param" "maybe type" "temp"
    (872978 'move' call_tmp[872975](528712 'query' off[222782] 2))
    unknown call_tmp[872980] "expr temp" "maybe param" "maybe type" "temp"
    (872983 'move' call_tmp[872980](528715 'is_instantiation_allow_values' integral[159](?) call_tmp[872975]))
    (528716 call & call_tmp[872970] call_tmp[872980])
  }
  function _domain[225034](?).exterior[222838](arg _mt[222848]:_MT[201], arg this[222840]:_domain[225034](?), arg off[222844]:integral[159](?) ...) : _unknown[42] "method" "primary method" "@unstable"
  {
    unknown ret[620993] "RVV" "temp"
    unknown call_tmp[872989] "expr temp" "maybe param" "maybe type" "temp"
    (872992 'move' call_tmp[872989](222853 call(444522 call (partial) exterior _mt[203] this[222840]) off[222844]))
    (620998 'move' ret[620993](620997 'deref' call_tmp[872989]))
    (620995 return ret[620993])
  }
  function _domain[225034](?).exterior[222857](arg _mt[222868]:_MT[201], arg this[222859]:_domain[225034](?), arg off[222865]:_tuple[246](?)) : _unknown[42] "compiler added where" "method" "primary method" "@unstable"
  {
    unknown ret[621002] "RVV" "temp"
    unknown call_tmp[872996] "maybe param" "maybe type" "temp"
    (872999 'move' call_tmp[872996](222874 call(444532 call (partial) dims _mt[203] this[222859])))
    unknown ranges[222872] "dead at end of block" "insert auto destroy"
    (649555 'init var' ranges[222872] call_tmp[872996])
    (222876 'end of statement')
    {
      unknown _indexOfInterest[222904] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[222905] "expr temp" "temp"
      unknown call_tmp[873003] "expr temp" "maybe param" "maybe type" "temp"
      (873006 'move' call_tmp[873003](444545 call rank _mt[203] this[222859]))
      unknown call_tmp[873008] "expr temp" "maybe param" "maybe type" "temp"
      (873011 'move' call_tmp[873008](222918 call - call_tmp[873003] 1))
      unknown call_tmp[873013] "expr temp" "maybe param" "maybe type" "temp"
      (873016 'move' call_tmp[873013](222921 call chpl_direct_range_iter 0 call_tmp[873008]))
      (222914 'move' _iterator[222905](222912 call _getIterator call_tmp[873013]))
      Defer
      {
        {
          (222936 call _freeIterator _iterator[222905])
        }
      }
      { scopeless type
        (222926 'move' _indexOfInterest[222904](222923 call iteratorIndex _iterator[222905]))
      }
      ForLoop[222906]
      {
        unknown i[222877] "index var" "insert auto destroy"
        (560627 'end of statement')
        (222931 'move' i[222877] _indexOfInterest[222904])
        (560628 'end of statement' i[222877])
        unknown call_tmp[873018] "expr temp" "maybe param" "maybe type" "temp"
        (873021 'move' call_tmp[873018](222889 call ranges[222872] i[222877]))
        unknown call_tmp[873025] "expr temp" "maybe param" "maybe type" "temp"
        (873028 'move' call_tmp[873025](222892 call(444538 call (partial) dim _mt[203] this[222859]) i[222877]))
        unknown call_tmp[873032] "expr temp" "maybe param" "maybe type" "temp"
        (873035 'move' call_tmp[873032](222901 call off[222865] i[222877]))
        unknown call_tmp[873037] "expr temp" "maybe param" "maybe type" "temp"
        (873040 'move' call_tmp[873037](222899 call(222896 call (partial) exterior _mt[203] call_tmp[873025]) call_tmp[873032]))
        (222886 call = call_tmp[873018] call_tmp[873037])
        (560630 'end of statement' ranges[222872] i[222877])
        label _continueLabel[222909]
        _indexOfInterest[222904]
        _iterator[222905]
      }
      label _breakLabel[222910]
    }
    unknown call_tmp[873044] "expr temp" "maybe param" "maybe type" "temp"
    (873047 'move' call_tmp[873044](444550 call distribution _mt[203] this[222859]))
    unknown call_tmp[873051] "expr temp" "maybe param" "maybe type" "temp"
    (873054 'move' call_tmp[873051](444554 call rank _mt[203] this[222859]))
    unknown call_tmp[873058] "expr temp" "maybe param" "maybe type" "temp"
    (873061 'move' call_tmp[873058](406735 call _value _mt[203] this[222859]))
    unknown call_tmp[873065] "expr temp" "maybe param" "maybe type" "temp"
    (873068 'move' call_tmp[873065](222950 call idxType _mt[203] call_tmp[873058]))
    unknown call_tmp[873072] "expr temp" "maybe param" "maybe type" "temp"
    (873075 'move' call_tmp[873072](444558 call strides _mt[203] this[222859]))
    unknown call_tmp[873077] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (873080 'move' call_tmp[873077](1000363 'new' _domain[225034](?) call_tmp[873044] call_tmp[873051] call_tmp[873065] call_tmp[873072] ranges[222872]))
    (621007 'move' ret[621002](621006 'deref' call_tmp[873077]))
    gotoReturn _end_exterior[621000] _end_exterior[621000]
    (560633 'end of statement' ranges[222872])
    label _end_exterior[621000]
    (621004 return ret[621002])
  }
  where {
    unknown call_tmp[873082] "expr temp" "maybe param" "maybe type" "temp"
    (873085 'move' call_tmp[873082](528722 'is star tuple type' off[222865]))
    unknown call_tmp[873087] "expr temp" "maybe param" "maybe type" "temp"
    (873090 'move' call_tmp[873087](528725 call & 1 call_tmp[873082]))
    unknown call_tmp[873094] "expr temp" "maybe param" "maybe type" "temp"
    (873097 'move' call_tmp[873094](528733 call rank _mt[203] this[222859]))
    unknown call_tmp[873099] "expr temp" "maybe param" "maybe type" "temp"
    (873102 'move' call_tmp[873099](528729 'query' off[222865] 1))
    unknown call_tmp[873104] "expr temp" "maybe param" "maybe type" "temp"
    (873107 'move' call_tmp[873104](528736 call == call_tmp[873094] call_tmp[873099]))
    unknown call_tmp[873109] "expr temp" "maybe param" "maybe type" "temp"
    (873112 'move' call_tmp[873109](528738 call & call_tmp[873087] call_tmp[873104]))
    unknown call_tmp[873114] "expr temp" "maybe param" "maybe type" "temp"
    (873117 'move' call_tmp[873114](528744 'query' off[222865] 2))
    unknown call_tmp[873119] "expr temp" "maybe param" "maybe type" "temp"
    (873122 'move' call_tmp[873119](528747 'is_instantiation_allow_values' integral[159](?) call_tmp[873114]))
    (528748 call & call_tmp[873109] call_tmp[873119])
  }
  function _domain[225034](?).exterior[222957](arg _mt[222965]:_MT[201], arg this[222959]:_domain[225034](?), arg off[222962]:integral[159](?)) : _unknown[42] "method" "primary method" "@unstable"
  {
    unknown ret[621013] "RVV" "temp"
    unknown offTup[222973] "dead at end of block" "insert auto destroy"
    unknown call_tmp[873126] "expr temp" "maybe param" "maybe type" "temp"
    (873129 'move' call_tmp[873126](444568 call rank _mt[203] this[222959]))
    unknown call_tmp[873131] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (873134 'move' call_tmp[873131](222978 'typeof' off[222962]))
    unknown call_tmp[873136] "expr temp" "maybe param" "maybe type" "temp"
    (873139 'move' call_tmp[873136](222974 call * call_tmp[873126] call_tmp[873131]))
    (649557 'default init var' offTup[222973] call_tmp[873136])
    (222980 'end of statement')
    {
      unknown _indexOfInterest[222997] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[222998] "expr temp" "temp"
      unknown call_tmp[873143] "expr temp" "maybe param" "maybe type" "temp"
      (873146 'move' call_tmp[873143](444576 call rank _mt[203] this[222959]))
      unknown call_tmp[873148] "expr temp" "maybe param" "maybe type" "temp"
      (873151 'move' call_tmp[873148](223011 call - call_tmp[873143] 1))
      unknown call_tmp[873153] "expr temp" "maybe param" "maybe type" "temp"
      (873156 'move' call_tmp[873153](223014 call chpl_direct_range_iter 0 call_tmp[873148]))
      (223007 'move' _iterator[222998](223005 call _getIterator call_tmp[873153]))
      Defer
      {
        {
          (223029 call _freeIterator _iterator[222998])
        }
      }
      { scopeless type
        (223019 'move' _indexOfInterest[222997](223016 call iteratorIndex _iterator[222998]))
      }
      ForLoop[222999]
      {
        unknown i[222981] "index var" "insert auto destroy"
        (560636 'end of statement')
        (223024 'move' i[222981] _indexOfInterest[222997])
        (560637 'end of statement' i[222981])
        unknown call_tmp[873158] "expr temp" "maybe param" "maybe type" "temp"
        (873161 'move' call_tmp[873158](222993 call offTup[222973] i[222981]))
        (222990 call = call_tmp[873158] off[222962])
        (560639 'end of statement' offTup[222973] i[222981])
        label _continueLabel[223002]
        _indexOfInterest[222997]
        _iterator[222998]
      }
      label _breakLabel[223003]
    }
    unknown call_tmp[873165] "expr temp" "maybe param" "maybe type" "temp"
    (873168 'move' call_tmp[873165](223038 call(444580 call (partial) exterior _mt[203] this[222959]) offTup[222973]))
    (621018 'move' ret[621013](621017 'deref' call_tmp[873165]))
    gotoReturn _end_exterior[621011] _end_exterior[621011]
    (560642 'end of statement' offTup[222973])
    label _end_exterior[621011]
    (621015 return ret[621013])
  }
  where {
    unknown call_tmp[873172] "expr temp" "maybe param" "maybe type" "temp"
    (873175 'move' call_tmp[873172](444564 call rank _mt[203] this[222959]))
    (222967 call != call_tmp[873172] 1)
  }
  function _domain[225034](?).interior[223043](arg _mt[223054]:_MT[201], arg this[223045]:_domain[225034](?), arg off[223051]:_tuple[246](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[873179] "expr temp" "maybe param" "maybe type" "temp"
    (873182 'move' call_tmp[873179](223097 call(223094 call (partial) isAssociative _mt[203] this[223045])))
    unknown call_tmp[873184] "expr temp" "maybe param" "maybe type" "temp"
    (873187 'move' call_tmp[873184](223098 call _cond_test call_tmp[873179]))
    if call_tmp[873184]
    {
      (223065 call compilerError "interior not supported on associative domains")
    }
    {
      unknown call_tmp[873191] "expr temp" "maybe param" "maybe type" "temp"
      (873194 'move' call_tmp[873191](223086 call(223083 call (partial) isSparse _mt[203] this[223045])))
      unknown call_tmp[873196] "expr temp" "maybe param" "maybe type" "temp"
      (873199 'move' call_tmp[873196](223087 call _cond_test call_tmp[873191]))
      if call_tmp[873196]
      {
        (223071 call compilerError "interior not supported on sparse domains")
      }
      {
        (223077 call compilerError "interior not supported on this domain type")
      }
    }
    (621022 return _void[46])
  }
  where {
    unknown call_tmp[873203] "expr temp" "maybe param" "maybe type" "temp"
    (873206 'move' call_tmp[873203](223062 call(223059 call (partial) isRectangular _mt[203] this[223045])))
    unknown call_tmp[873208] "expr temp" "maybe param" "maybe type" "temp"
    (873211 'move' call_tmp[873208](223056 call ! call_tmp[873203]))
    unknown call_tmp[873213] "expr temp" "maybe param" "maybe type" "temp"
    (873216 'move' call_tmp[873213](528754 'is star tuple type' off[223051]))
    unknown call_tmp[873218] "expr temp" "maybe param" "maybe type" "temp"
    (873221 'move' call_tmp[873218](528755 call & call_tmp[873208] call_tmp[873213]))
    unknown call_tmp[873225] "expr temp" "maybe param" "maybe type" "temp"
    (873228 'move' call_tmp[873225](528763 call rank _mt[203] this[223045]))
    unknown call_tmp[873230] "expr temp" "maybe param" "maybe type" "temp"
    (873233 'move' call_tmp[873230](528759 'query' off[223051] 1))
    unknown call_tmp[873235] "expr temp" "maybe param" "maybe type" "temp"
    (873238 'move' call_tmp[873235](528766 call == call_tmp[873225] call_tmp[873230]))
    unknown call_tmp[873240] "expr temp" "maybe param" "maybe type" "temp"
    (873243 'move' call_tmp[873240](528768 call & call_tmp[873218] call_tmp[873235]))
    unknown call_tmp[873245] "expr temp" "maybe param" "maybe type" "temp"
    (873248 'move' call_tmp[873245](528774 'query' off[223051] 2))
    unknown call_tmp[873250] "expr temp" "maybe param" "maybe type" "temp"
    (873253 'move' call_tmp[873250](528777 'is_instantiation_allow_values' integral[159](?) call_tmp[873245]))
    (528778 call & call_tmp[873240] call_tmp[873250])
  }
  function _domain[225034](?).interior[223107](arg _mt[223117]:_MT[201], arg this[223109]:_domain[225034](?), arg off[223113]:integral[159](?) ...) : _unknown[42] "method" "primary method" "@unstable"
  {
    unknown ret[621026] "RVV" "temp"
    unknown call_tmp[873259] "expr temp" "maybe param" "maybe type" "temp"
    (873262 'move' call_tmp[873259](223122 call(444595 call (partial) interior _mt[203] this[223109]) off[223113]))
    (621031 'move' ret[621026](621030 'deref' call_tmp[873259]))
    (621028 return ret[621026])
  }
  function _domain[225034](?).interior[223126](arg _mt[223137]:_MT[201], arg this[223128]:_domain[225034](?), arg off[223134]:_tuple[246](?)) : _unknown[42] "compiler added where" "method" "primary method" "@unstable"
  {
    unknown ret[621035] "RVV" "temp"
    unknown call_tmp[873266] "maybe param" "maybe type" "temp"
    (873269 'move' call_tmp[873266](223143 call(444605 call (partial) dims _mt[203] this[223128])))
    unknown ranges[223141] "dead at end of block" "insert auto destroy"
    (649559 'init var' ranges[223141] call_tmp[873266])
    (223145 'end of statement')
    {
      unknown _indexOfInterest[223250] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[223251] "expr temp" "temp"
      unknown call_tmp[873273] "expr temp" "maybe param" "maybe type" "temp"
      (873276 'move' call_tmp[873273](444643 call rank _mt[203] this[223128]))
      unknown call_tmp[873278] "expr temp" "maybe param" "maybe type" "temp"
      (873281 'move' call_tmp[873278](223264 call - call_tmp[873273] 1))
      unknown call_tmp[873283] "expr temp" "maybe param" "maybe type" "temp"
      (873286 'move' call_tmp[873283](223267 call chpl_direct_range_iter 0 call_tmp[873278]))
      (223260 'move' _iterator[223251](223258 call _getIterator call_tmp[873283]))
      Defer
      {
        {
          (223282 call _freeIterator _iterator[223251])
        }
      }
      { scopeless type
        (223272 'move' _indexOfInterest[223250](223269 call iteratorIndex _iterator[223251]))
      }
      ForLoop[223252]
      {
        unknown i[223146] "index var" "insert auto destroy"
        (560649 'end of statement')
        (223277 'move' i[223146] _indexOfInterest[223250])
        (560650 'end of statement' i[223146])
        {
          unknown tmp[496947] "maybe param" "temp"
          unknown tmp[496968] "maybe param" "temp"
          unknown call_tmp[873288] "expr temp" "maybe param" "maybe type" "temp"
          (873291 'move' call_tmp[873288](223171 call off[223134] i[223146]))
          (496979 'move' tmp[496968](223168 call > call_tmp[873288] 0))
          unknown call_tmp[873293] "expr temp" "maybe param" "maybe type" "temp"
          (873296 'move' call_tmp[873293](496981 call _cond_invalid tmp[496968]))
          if call_tmp[873293]
          {
            (496984 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[693548] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[693549] "maybe param" "temp"
          unknown call_tmp[873298] "expr temp" "maybe param" "maybe type" "temp"
          (873301 'move' call_tmp[873298](496969 call isTrue tmp[496968]))
          (693554 'move' tmp[693549](693552 call _cond_test call_tmp[873298]))
          if tmp[693549]
          {
            unknown tmp[693556] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[873305] "expr temp" "maybe param" "maybe type" "temp"
            (873308 'move' call_tmp[873305](223181 call(444612 call (partial) dim _mt[203] this[223128]) i[223146]))
            unknown call_tmp[873312] "expr temp" "maybe param" "maybe type" "temp"
            (873315 'move' call_tmp[873312](223183 call _high _mt[203] call_tmp[873305]))
            unknown call_tmp[873317] "expr temp" "maybe param" "maybe type" "temp"
            (873320 'move' call_tmp[873317](223178 call + call_tmp[873312] 1))
            unknown call_tmp[873322] "expr temp" "maybe param" "maybe type" "temp"
            (873325 'move' call_tmp[873322](223188 call off[223134] i[223146]))
            unknown call_tmp[873327] "expr temp" "maybe param" "maybe type" "temp"
            (873330 'move' call_tmp[873327](223176 call - call_tmp[873317] call_tmp[873322]))
            unknown call_tmp[873334] "expr temp" "maybe param" "maybe type" "temp"
            (873337 'move' call_tmp[873334](223191 call(444619 call (partial) dim _mt[203] this[223128]) i[223146]))
            unknown call_tmp[873341] "expr temp" "maybe param" "maybe type" "temp"
            (873344 'move' call_tmp[873341](223193 call _low _mt[203] call_tmp[873334]))
            unknown call_tmp[873346] "expr temp" "maybe param" "maybe type" "temp"
            (873349 'move' call_tmp[873346](223174 call < call_tmp[873327] call_tmp[873341]))
            (693558 'move' tmp[693556](496972 call isTrue call_tmp[873346]))
            (693563 'move' tmp[693548](693560 '_paramFoldLogical' tmp[693549] tmp[693556]))
          }
          {
            (693568 'move' tmp[693548](693565 '_paramFoldLogical' tmp[693549] 0))
          }
          (496958 'move' tmp[496947] tmp[693548])
          unknown call_tmp[873351] "expr temp" "maybe param" "maybe type" "temp"
          (873354 'move' call_tmp[873351](496960 call _cond_invalid tmp[496947]))
          if call_tmp[873351]
          {
            (496963 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[693602] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[693603] "maybe param" "temp"
          unknown call_tmp[873356] "expr temp" "maybe param" "maybe type" "temp"
          (873359 'move' call_tmp[873356](496948 call isTrue tmp[496947]))
          (693608 'move' tmp[693603](693606 call _cond_test call_tmp[873356]))
          if tmp[693603]
          {
            (693613 'move' tmp[693602](693610 '_paramFoldLogical' tmp[693603] 1))
          }
          {
            unknown tmp[496989] "maybe param" "temp"
            unknown call_tmp[873361] "expr temp" "maybe param" "maybe type" "temp"
            (873364 'move' call_tmp[873361](223201 call off[223134] i[223146]))
            (497000 'move' tmp[496989](223198 call < call_tmp[873361] 0))
            unknown call_tmp[873366] "expr temp" "maybe param" "maybe type" "temp"
            (873369 'move' call_tmp[873366](497002 call _cond_invalid tmp[496989]))
            if call_tmp[873366]
            {
              (497005 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[693575] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[693576] "maybe param" "temp"
            unknown call_tmp[873371] "expr temp" "maybe param" "maybe type" "temp"
            (873374 'move' call_tmp[873371](496990 call isTrue tmp[496989]))
            (693581 'move' tmp[693576](693579 call _cond_test call_tmp[873371]))
            if tmp[693576]
            {
              unknown tmp[693583] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[873378] "expr temp" "maybe param" "maybe type" "temp"
              (873381 'move' call_tmp[873378](223211 call(444626 call (partial) dim _mt[203] this[223128]) i[223146]))
              unknown call_tmp[873385] "expr temp" "maybe param" "maybe type" "temp"
              (873388 'move' call_tmp[873385](223213 call _low _mt[203] call_tmp[873378]))
              unknown call_tmp[873390] "expr temp" "maybe param" "maybe type" "temp"
              (873393 'move' call_tmp[873390](223208 call - call_tmp[873385] 1))
              unknown call_tmp[873395] "expr temp" "maybe param" "maybe type" "temp"
              (873398 'move' call_tmp[873395](223218 call off[223134] i[223146]))
              unknown call_tmp[873400] "expr temp" "maybe param" "maybe type" "temp"
              (873403 'move' call_tmp[873400](223206 call - call_tmp[873390] call_tmp[873395]))
              unknown call_tmp[873407] "expr temp" "maybe param" "maybe type" "temp"
              (873410 'move' call_tmp[873407](223221 call(444633 call (partial) dim _mt[203] this[223128]) i[223146]))
              unknown call_tmp[873414] "expr temp" "maybe param" "maybe type" "temp"
              (873417 'move' call_tmp[873414](223223 call _high _mt[203] call_tmp[873407]))
              unknown call_tmp[873419] "expr temp" "maybe param" "maybe type" "temp"
              (873422 'move' call_tmp[873419](223204 call > call_tmp[873400] call_tmp[873414]))
              (693585 'move' tmp[693583](496993 call isTrue call_tmp[873419]))
              (693590 'move' tmp[693575](693587 '_paramFoldLogical' tmp[693576] tmp[693583]))
            }
            {
              (693595 'move' tmp[693575](693592 '_paramFoldLogical' tmp[693576] 0))
            }
            unknown tmp[693615] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (693617 'move' tmp[693615](496952 call isTrue tmp[693575]))
            (693622 'move' tmp[693602](693619 '_paramFoldLogical' tmp[693603] tmp[693615]))
          }
          unknown call_tmp[873424] "expr temp" "maybe param" "maybe type" "temp"
          (873427 'move' call_tmp[873424](223226 call _cond_test tmp[693602]))
          if call_tmp[873424]
          {
            (223158 call halt "***Error: Argument to 'interior' function out of range in dimension " i[223146] "***")
            (560654 'end of statement' i[223146])
          }
          unknown call_tmp[873429] "expr temp" "maybe param" "maybe type" "temp"
          (873432 'move' call_tmp[873429](223233 call ranges[223141] i[223146]))
          unknown call_tmp[873436] "expr temp" "maybe param" "maybe type" "temp"
          (873439 'move' call_tmp[873436](406742 call _value _mt[203] this[223128]))
          unknown call_tmp[873443] "expr temp" "maybe param" "maybe type" "temp"
          (873446 'move' call_tmp[873443](223239 call(223236 call (partial) dsiDim _mt[203] call_tmp[873436]) i[223146]))
          unknown call_tmp[873450] "expr temp" "maybe param" "maybe type" "temp"
          (873453 'move' call_tmp[873450](223248 call off[223134] i[223146]))
          unknown call_tmp[873455] "expr temp" "maybe param" "maybe type" "temp"
          (873458 'move' call_tmp[873455](223246 call(223243 call (partial) interior _mt[203] call_tmp[873443]) call_tmp[873450]))
          (223230 call = call_tmp[873429] call_tmp[873455])
          (560656 'end of statement' ranges[223141] i[223146])
        }
        label _continueLabel[223255]
        _indexOfInterest[223250]
        _iterator[223251]
      }
      label _breakLabel[223256]
    }
    unknown call_tmp[873462] "expr temp" "maybe param" "maybe type" "temp"
    (873465 'move' call_tmp[873462](444648 call distribution _mt[203] this[223128]))
    unknown call_tmp[873469] "expr temp" "maybe param" "maybe type" "temp"
    (873472 'move' call_tmp[873469](444652 call rank _mt[203] this[223128]))
    unknown call_tmp[873476] "expr temp" "maybe param" "maybe type" "temp"
    (873479 'move' call_tmp[873476](406746 call _value _mt[203] this[223128]))
    unknown call_tmp[873483] "expr temp" "maybe param" "maybe type" "temp"
    (873486 'move' call_tmp[873483](223296 call idxType _mt[203] call_tmp[873476]))
    unknown call_tmp[873490] "expr temp" "maybe param" "maybe type" "temp"
    (873493 'move' call_tmp[873490](444656 call strides _mt[203] this[223128]))
    unknown call_tmp[873495] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (873498 'move' call_tmp[873495](1000364 'new' _domain[225034](?) call_tmp[873462] call_tmp[873469] call_tmp[873483] call_tmp[873490] ranges[223141]))
    (621040 'move' ret[621035](621039 'deref' call_tmp[873495]))
    gotoReturn _end_interior[621033] _end_interior[621033]
    (560659 'end of statement' ranges[223141])
    label _end_interior[621033]
    (621037 return ret[621035])
  }
  where {
    unknown call_tmp[873500] "expr temp" "maybe param" "maybe type" "temp"
    (873503 'move' call_tmp[873500](528784 'is star tuple type' off[223134]))
    unknown call_tmp[873505] "expr temp" "maybe param" "maybe type" "temp"
    (873508 'move' call_tmp[873505](528787 call & 1 call_tmp[873500]))
    unknown call_tmp[873512] "expr temp" "maybe param" "maybe type" "temp"
    (873515 'move' call_tmp[873512](528795 call rank _mt[203] this[223128]))
    unknown call_tmp[873517] "expr temp" "maybe param" "maybe type" "temp"
    (873520 'move' call_tmp[873517](528791 'query' off[223134] 1))
    unknown call_tmp[873522] "expr temp" "maybe param" "maybe type" "temp"
    (873525 'move' call_tmp[873522](528798 call == call_tmp[873512] call_tmp[873517]))
    unknown call_tmp[873527] "expr temp" "maybe param" "maybe type" "temp"
    (873530 'move' call_tmp[873527](528800 call & call_tmp[873505] call_tmp[873522]))
    unknown call_tmp[873532] "expr temp" "maybe param" "maybe type" "temp"
    (873535 'move' call_tmp[873532](528806 'query' off[223134] 2))
    unknown call_tmp[873537] "expr temp" "maybe param" "maybe type" "temp"
    (873540 'move' call_tmp[873537](528809 'is_instantiation_allow_values' integral[159](?) call_tmp[873532]))
    (528810 call & call_tmp[873527] call_tmp[873537])
  }
  function _domain[225034](?).interior[223303](arg _mt[223311]:_MT[201], arg this[223305]:_domain[225034](?), arg off[223308]:integral[159](?)) : _unknown[42] "method" "primary method" "@unstable"
  {
    unknown ret[621046] "RVV" "temp"
    unknown offTup[223319] "dead at end of block" "insert auto destroy"
    unknown call_tmp[873544] "expr temp" "maybe param" "maybe type" "temp"
    (873547 'move' call_tmp[873544](444666 call rank _mt[203] this[223305]))
    unknown call_tmp[873549] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (873552 'move' call_tmp[873549](223324 'typeof' off[223308]))
    unknown call_tmp[873554] "expr temp" "maybe param" "maybe type" "temp"
    (873557 'move' call_tmp[873554](223320 call * call_tmp[873544] call_tmp[873549]))
    (649561 'default init var' offTup[223319] call_tmp[873554])
    (223326 'end of statement')
    {
      unknown _indexOfInterest[223343] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[223344] "expr temp" "temp"
      unknown call_tmp[873561] "expr temp" "maybe param" "maybe type" "temp"
      (873564 'move' call_tmp[873561](444674 call rank _mt[203] this[223305]))
      unknown call_tmp[873566] "expr temp" "maybe param" "maybe type" "temp"
      (873569 'move' call_tmp[873566](223357 call - call_tmp[873561] 1))
      unknown call_tmp[873571] "expr temp" "maybe param" "maybe type" "temp"
      (873574 'move' call_tmp[873571](223360 call chpl_direct_range_iter 0 call_tmp[873566]))
      (223353 'move' _iterator[223344](223351 call _getIterator call_tmp[873571]))
      Defer
      {
        {
          (223375 call _freeIterator _iterator[223344])
        }
      }
      { scopeless type
        (223365 'move' _indexOfInterest[223343](223362 call iteratorIndex _iterator[223344]))
      }
      ForLoop[223345]
      {
        unknown i[223327] "index var" "insert auto destroy"
        (560662 'end of statement')
        (223370 'move' i[223327] _indexOfInterest[223343])
        (560663 'end of statement' i[223327])
        unknown call_tmp[873576] "expr temp" "maybe param" "maybe type" "temp"
        (873579 'move' call_tmp[873576](223339 call offTup[223319] i[223327]))
        (223336 call = call_tmp[873576] off[223308])
        (560665 'end of statement' offTup[223319] i[223327])
        label _continueLabel[223348]
        _indexOfInterest[223343]
        _iterator[223344]
      }
      label _breakLabel[223349]
    }
    unknown call_tmp[873583] "expr temp" "maybe param" "maybe type" "temp"
    (873586 'move' call_tmp[873583](223384 call(444678 call (partial) interior _mt[203] this[223305]) offTup[223319]))
    (621051 'move' ret[621046](621050 'deref' call_tmp[873583]))
    gotoReturn _end_interior[621044] _end_interior[621044]
    (560668 'end of statement' offTup[223319])
    label _end_interior[621044]
    (621048 return ret[621046])
  }
  where {
    unknown call_tmp[873590] "expr temp" "maybe param" "maybe type" "temp"
    (873593 'move' call_tmp[873590](444662 call rank _mt[203] this[223305]))
    (223313 call != call_tmp[873590] 1)
  }
  function _domain[225034](?).translate[223389](arg _mt[223400]:_MT[201], arg this[223391]:_domain[225034](?), arg off[223397]:_tuple[246](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[873597] "expr temp" "maybe param" "maybe type" "temp"
    (873600 'move' call_tmp[873597](223443 call(223440 call (partial) isAssociative _mt[203] this[223391])))
    unknown call_tmp[873602] "expr temp" "maybe param" "maybe type" "temp"
    (873605 'move' call_tmp[873602](223444 call _cond_test call_tmp[873597]))
    if call_tmp[873602]
    {
      (223411 call compilerError "translate not supported on associative domains")
    }
    {
      unknown call_tmp[873609] "expr temp" "maybe param" "maybe type" "temp"
      (873612 'move' call_tmp[873609](223432 call(223429 call (partial) isSparse _mt[203] this[223391])))
      unknown call_tmp[873614] "expr temp" "maybe param" "maybe type" "temp"
      (873617 'move' call_tmp[873614](223433 call _cond_test call_tmp[873609]))
      if call_tmp[873614]
      {
        (223417 call compilerError "translate not supported on sparse domains")
      }
      {
        (223423 call compilerError "translate not supported on this domain type")
      }
    }
    (621055 return _void[46])
  }
  where {
    unknown call_tmp[873621] "expr temp" "maybe param" "maybe type" "temp"
    (873624 'move' call_tmp[873621](223408 call(223405 call (partial) isRectangular _mt[203] this[223391])))
    unknown call_tmp[873626] "expr temp" "maybe param" "maybe type" "temp"
    (873629 'move' call_tmp[873626](223402 call ! call_tmp[873621]))
    unknown call_tmp[873631] "expr temp" "maybe param" "maybe type" "temp"
    (873634 'move' call_tmp[873631](528816 'is star tuple type' off[223397]))
    unknown call_tmp[873636] "expr temp" "maybe param" "maybe type" "temp"
    (873639 'move' call_tmp[873636](528817 call & call_tmp[873626] call_tmp[873631]))
    unknown call_tmp[873643] "expr temp" "maybe param" "maybe type" "temp"
    (873646 'move' call_tmp[873643](528825 call rank _mt[203] this[223391]))
    unknown call_tmp[873648] "expr temp" "maybe param" "maybe type" "temp"
    (873651 'move' call_tmp[873648](528821 'query' off[223397] 1))
    unknown call_tmp[873653] "expr temp" "maybe param" "maybe type" "temp"
    (873656 'move' call_tmp[873653](528828 call == call_tmp[873643] call_tmp[873648]))
    unknown call_tmp[873658] "expr temp" "maybe param" "maybe type" "temp"
    (873661 'move' call_tmp[873658](528830 call & call_tmp[873636] call_tmp[873653]))
    unknown call_tmp[873663] "expr temp" "maybe param" "maybe type" "temp"
    (873666 'move' call_tmp[873663](528836 'query' off[223397] 2))
    unknown call_tmp[873668] "expr temp" "maybe param" "maybe type" "temp"
    (873671 'move' call_tmp[873668](528839 'is_instantiation_allow_values' integral[159](?) call_tmp[873663]))
    (528840 call & call_tmp[873658] call_tmp[873668])
  }
  function _domain[225034](?).translate[223453](arg _mt[223463]:_MT[201], arg this[223455]:_domain[225034](?), arg off[223459]:integral[159](?) ...) : _unknown[42] "method" "primary method" "@unstable"
  {
    unknown ret[621059] "RVV" "temp"
    unknown call_tmp[873677] "expr temp" "maybe param" "maybe type" "temp"
    (873680 'move' call_tmp[873677](223468 call(444693 call (partial) translate _mt[203] this[223455]) off[223459]))
    (621064 'move' ret[621059](621063 'deref' call_tmp[873677]))
    (621061 return ret[621059])
  }
  function _domain[225034](?).translate[223472](arg _mt[223483]:_MT[201], arg this[223474]:_domain[225034](?), arg off[223480]:_tuple[246](?)) : _unknown[42] "compiler added where" "method" "primary method" "@unstable"
  {
    unknown ret[621068] "RVV" "temp"
    unknown call_tmp[873684] "maybe param" "maybe type" "temp"
    (873687 'move' call_tmp[873684](223489 call(444703 call (partial) dims _mt[203] this[223474])))
    unknown ranges[223487] "dead at end of block" "insert auto destroy"
    (649563 'init var' ranges[223487] call_tmp[873684])
    (223491 'end of statement')
    {
      unknown _indexOfInterest[223522] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[223523] "expr temp" "temp"
      unknown call_tmp[873691] "expr temp" "maybe param" "maybe type" "temp"
      (873694 'move' call_tmp[873691](444712 call rank _mt[203] this[223474]))
      unknown call_tmp[873696] "expr temp" "maybe param" "maybe type" "temp"
      (873699 'move' call_tmp[873696](223536 call - call_tmp[873691] 1))
      unknown call_tmp[873701] "expr temp" "maybe param" "maybe type" "temp"
      (873704 'move' call_tmp[873701](223539 call chpl_direct_range_iter 0 call_tmp[873696]))
      (223532 'move' _iterator[223523](223530 call _getIterator call_tmp[873701]))
      Defer
      {
        {
          (223554 call _freeIterator _iterator[223523])
        }
      }
      { scopeless type
        (223544 'move' _indexOfInterest[223522](223541 call iteratorIndex _iterator[223523]))
      }
      ForLoop[223524]
      {
        unknown i[223492] "index var" "insert auto destroy"
        (560675 'end of statement')
        (223549 'move' i[223492] _indexOfInterest[223522])
        (560676 'end of statement' i[223492])
        unknown call_tmp[873706] "expr temp" "maybe param" "maybe type" "temp"
        (873709 'move' call_tmp[873706](223504 call ranges[223487] i[223492]))
        unknown call_tmp[873713] "expr temp" "maybe param" "maybe type" "temp"
        (873716 'move' call_tmp[873713](406753 call _value _mt[203] this[223474]))
        unknown call_tmp[873720] "expr temp" "maybe param" "maybe type" "temp"
        (873723 'move' call_tmp[873720](223510 call(223507 call (partial) dsiDim _mt[203] call_tmp[873713]) i[223492]))
        unknown call_tmp[873727] "expr temp" "maybe param" "maybe type" "temp"
        (873730 'move' call_tmp[873727](223519 call off[223480] i[223492]))
        unknown call_tmp[873732] "expr temp" "maybe param" "maybe type" "temp"
        (873735 'move' call_tmp[873732](223517 call(223514 call (partial) translate _mt[203] call_tmp[873720]) call_tmp[873727]))
        (223501 call = call_tmp[873706] call_tmp[873732])
        (560678 'end of statement' ranges[223487] i[223492])
        label _continueLabel[223527]
        _indexOfInterest[223522]
        _iterator[223523]
      }
      label _breakLabel[223528]
    }
    unknown call_tmp[873739] "expr temp" "maybe param" "maybe type" "temp"
    (873742 'move' call_tmp[873739](444717 call distribution _mt[203] this[223474]))
    unknown call_tmp[873746] "expr temp" "maybe param" "maybe type" "temp"
    (873749 'move' call_tmp[873746](444721 call rank _mt[203] this[223474]))
    unknown call_tmp[873753] "expr temp" "maybe param" "maybe type" "temp"
    (873756 'move' call_tmp[873753](406757 call _value _mt[203] this[223474]))
    unknown call_tmp[873760] "expr temp" "maybe param" "maybe type" "temp"
    (873763 'move' call_tmp[873760](223568 call idxType _mt[203] call_tmp[873753]))
    unknown call_tmp[873767] "expr temp" "maybe param" "maybe type" "temp"
    (873770 'move' call_tmp[873767](444725 call strides _mt[203] this[223474]))
    unknown call_tmp[873772] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (873775 'move' call_tmp[873772](1000365 'new' _domain[225034](?) call_tmp[873739] call_tmp[873746] call_tmp[873760] call_tmp[873767] ranges[223487]))
    (621073 'move' ret[621068](621072 'deref' call_tmp[873772]))
    gotoReturn _end_translate[621066] _end_translate[621066]
    (560681 'end of statement' ranges[223487])
    label _end_translate[621066]
    (621070 return ret[621068])
  }
  where {
    unknown call_tmp[873777] "expr temp" "maybe param" "maybe type" "temp"
    (873780 'move' call_tmp[873777](528846 'is star tuple type' off[223480]))
    unknown call_tmp[873782] "expr temp" "maybe param" "maybe type" "temp"
    (873785 'move' call_tmp[873782](528849 call & 1 call_tmp[873777]))
    unknown call_tmp[873789] "expr temp" "maybe param" "maybe type" "temp"
    (873792 'move' call_tmp[873789](528857 call rank _mt[203] this[223474]))
    unknown call_tmp[873794] "expr temp" "maybe param" "maybe type" "temp"
    (873797 'move' call_tmp[873794](528853 'query' off[223480] 1))
    unknown call_tmp[873799] "expr temp" "maybe param" "maybe type" "temp"
    (873802 'move' call_tmp[873799](528860 call == call_tmp[873789] call_tmp[873794]))
    unknown call_tmp[873804] "expr temp" "maybe param" "maybe type" "temp"
    (873807 'move' call_tmp[873804](528862 call & call_tmp[873782] call_tmp[873799]))
    unknown call_tmp[873809] "expr temp" "maybe param" "maybe type" "temp"
    (873812 'move' call_tmp[873809](528868 'query' off[223480] 2))
    unknown call_tmp[873814] "expr temp" "maybe param" "maybe type" "temp"
    (873817 'move' call_tmp[873814](528871 'is_instantiation_allow_values' integral[159](?) call_tmp[873809]))
    (528872 call & call_tmp[873804] call_tmp[873814])
  }
  function _domain[225034](?).translate[223575](arg _mt[223583]:_MT[201], arg this[223577]:_domain[225034](?), arg off[223580]:integral[159](?)) : _unknown[42] "method" "primary method" "@unstable"
  {
    unknown ret[621079] "RVV" "temp"
    unknown offTup[223591] "dead at end of block" "insert auto destroy"
    unknown call_tmp[873821] "expr temp" "maybe param" "maybe type" "temp"
    (873824 'move' call_tmp[873821](444735 call rank _mt[203] this[223577]))
    unknown call_tmp[873826] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (873829 'move' call_tmp[873826](223596 'typeof' off[223580]))
    unknown call_tmp[873831] "expr temp" "maybe param" "maybe type" "temp"
    (873834 'move' call_tmp[873831](223592 call * call_tmp[873821] call_tmp[873826]))
    (649565 'default init var' offTup[223591] call_tmp[873831])
    (223598 'end of statement')
    {
      unknown _indexOfInterest[223615] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[223616] "expr temp" "temp"
      unknown call_tmp[873838] "expr temp" "maybe param" "maybe type" "temp"
      (873841 'move' call_tmp[873838](444743 call rank _mt[203] this[223577]))
      unknown call_tmp[873843] "expr temp" "maybe param" "maybe type" "temp"
      (873846 'move' call_tmp[873843](223629 call - call_tmp[873838] 1))
      unknown call_tmp[873848] "expr temp" "maybe param" "maybe type" "temp"
      (873851 'move' call_tmp[873848](223632 call chpl_direct_range_iter 0 call_tmp[873843]))
      (223625 'move' _iterator[223616](223623 call _getIterator call_tmp[873848]))
      Defer
      {
        {
          (223647 call _freeIterator _iterator[223616])
        }
      }
      { scopeless type
        (223637 'move' _indexOfInterest[223615](223634 call iteratorIndex _iterator[223616]))
      }
      ForLoop[223617]
      {
        unknown i[223599] "index var" "insert auto destroy"
        (560684 'end of statement')
        (223642 'move' i[223599] _indexOfInterest[223615])
        (560685 'end of statement' i[223599])
        unknown call_tmp[873853] "expr temp" "maybe param" "maybe type" "temp"
        (873856 'move' call_tmp[873853](223611 call offTup[223591] i[223599]))
        (223608 call = call_tmp[873853] off[223580])
        (560687 'end of statement' offTup[223591] i[223599])
        label _continueLabel[223620]
        _indexOfInterest[223615]
        _iterator[223616]
      }
      label _breakLabel[223621]
    }
    unknown call_tmp[873860] "expr temp" "maybe param" "maybe type" "temp"
    (873863 'move' call_tmp[873860](223656 call(444747 call (partial) translate _mt[203] this[223577]) offTup[223591]))
    (621084 'move' ret[621079](621083 'deref' call_tmp[873860]))
    gotoReturn _end_translate[621077] _end_translate[621077]
    (560690 'end of statement' offTup[223591])
    label _end_translate[621077]
    (621081 return ret[621079])
  }
  where {
    unknown call_tmp[873867] "expr temp" "maybe param" "maybe type" "temp"
    (873870 'move' call_tmp[873867](444731 call rank _mt[203] this[223577]))
    (223585 call != call_tmp[873867] 1)
  }
  function _domain[225034](?).chpl__unTranslate[223661](arg _mt[223671]:_MT[201], arg this[223663]:_domain[225034](?), arg off[223667]:integral[159](?) ...) : _unknown[42] "method" "primary method"
  {
    unknown ret[621090] "RVV" "temp"
    unknown call_tmp[873876] "expr temp" "maybe param" "maybe type" "temp"
    (873879 'move' call_tmp[873876](223676 call(444757 call (partial) chpl__unTranslate _mt[203] this[223663]) off[223667]))
    (621095 'move' ret[621090](621094 'deref' call_tmp[873876]))
    (621092 return ret[621090])
  }
  function _domain[225034](?).chpl__unTranslate[223680](arg _mt[223691]:_MT[201], arg this[223682]:_domain[225034](?), arg off[223688] :
  unknown call_tmp[873883] "expr temp" "maybe param" "maybe type" "temp") : _unknown[42] "method" "primary method"
  {
    unknown ret[621099] "RVV" "temp"
    unknown call_tmp[873897] "maybe param" "maybe type" "temp"
    (873900 'move' call_tmp[873897](223697 call(444770 call (partial) dims _mt[203] this[223682])))
    unknown ranges[223695] "dead at end of block" "insert auto destroy"
    (649567 'init var' ranges[223695] call_tmp[873897])
    (223699 'end of statement')
    {
      unknown _indexOfInterest[223727] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[223728] "expr temp" "temp"
      unknown call_tmp[873904] "expr temp" "maybe param" "maybe type" "temp"
      (873907 'move' call_tmp[873904](444783 call rank _mt[203] this[223682]))
      unknown call_tmp[873909] "expr temp" "maybe param" "maybe type" "temp"
      (873912 'move' call_tmp[873909](223741 call - call_tmp[873904] 1))
      unknown call_tmp[873914] "expr temp" "maybe param" "maybe type" "temp"
      (873917 'move' call_tmp[873914](223744 call chpl_direct_range_iter 0 call_tmp[873909]))
      (223737 'move' _iterator[223728](223735 call _getIterator call_tmp[873914]))
      Defer
      {
        {
          (223759 call _freeIterator _iterator[223728])
        }
      }
      { scopeless type
        (223749 'move' _indexOfInterest[223727](223746 call iteratorIndex _iterator[223728]))
      }
      ForLoop[223729]
      {
        unknown i[223700] "index var" "insert auto destroy"
        (560694 'end of statement')
        (223754 'move' i[223700] _indexOfInterest[223727])
        (560695 'end of statement' i[223700])
        unknown call_tmp[873919] "expr temp" "maybe param" "maybe type" "temp"
        (873922 'move' call_tmp[873919](223712 call ranges[223695] i[223700]))
        unknown call_tmp[873926] "expr temp" "maybe param" "maybe type" "temp"
        (873929 'move' call_tmp[873926](223715 call(444776 call (partial) dim _mt[203] this[223682]) i[223700]))
        unknown call_tmp[873933] "expr temp" "maybe param" "maybe type" "temp"
        (873936 'move' call_tmp[873933](223724 call off[223688] i[223700]))
        unknown call_tmp[873938] "expr temp" "maybe param" "maybe type" "temp"
        (873941 'move' call_tmp[873938](223722 call(223719 call (partial) chpl__unTranslate _mt[203] call_tmp[873926]) call_tmp[873933]))
        (223709 call = call_tmp[873919] call_tmp[873938])
        (560697 'end of statement' ranges[223695] i[223700])
        label _continueLabel[223732]
        _indexOfInterest[223727]
        _iterator[223728]
      }
      label _breakLabel[223733]
    }
    unknown call_tmp[873945] "expr temp" "maybe param" "maybe type" "temp"
    (873948 'move' call_tmp[873945](444788 call distribution _mt[203] this[223682]))
    unknown call_tmp[873952] "expr temp" "maybe param" "maybe type" "temp"
    (873955 'move' call_tmp[873952](444792 call rank _mt[203] this[223682]))
    unknown call_tmp[873959] "expr temp" "maybe param" "maybe type" "temp"
    (873962 'move' call_tmp[873959](406761 call _value _mt[203] this[223682]))
    unknown call_tmp[873966] "expr temp" "maybe param" "maybe type" "temp"
    (873969 'move' call_tmp[873966](223773 call idxType _mt[203] call_tmp[873959]))
    unknown call_tmp[873973] "expr temp" "maybe param" "maybe type" "temp"
    (873976 'move' call_tmp[873973](444796 call strides _mt[203] this[223682]))
    unknown call_tmp[873978] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (873981 'move' call_tmp[873978](1000366 'new' _domain[225034](?) call_tmp[873945] call_tmp[873952] call_tmp[873966] call_tmp[873973] ranges[223695]))
    (621104 'move' ret[621099](621103 'deref' call_tmp[873978]))
    gotoReturn _end_chpl__unTranslate[621097] _end_chpl__unTranslate[621097]
    (560700 'end of statement' ranges[223695])
    label _end_chpl__unTranslate[621097]
    (621101 return ret[621099])
  }
  function _domain[225034](?).setIndices[223780](arg _mt[223786]:_MT[201], ref arg this[223782]:_domain[225034](?), arg x[223784]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[873985] "expr temp" "maybe param" "maybe type" "temp"
    (873988 'move' call_tmp[873985](406765 call _value _mt[203] this[223782]))
    (223793 call(223790 call (partial) dsiSetIndices _mt[203] call_tmp[873985]) x[223784])
    (560702 'end of statement')
    unknown call_tmp[873994] "expr temp" "maybe param" "maybe type" "temp"
    (873997 'move' call_tmp[873994](444807 call _instance _mt[203] this[223782]))
    unknown call_tmp[873999] "expr temp" "maybe param" "maybe type" "temp"
    (874002 'move' call_tmp[873999](223800 call _isPrivatized call_tmp[873994]))
    unknown call_tmp[874004] "expr temp" "maybe param" "maybe type" "temp"
    (874007 'move' call_tmp[874004](223802 call _cond_test call_tmp[873999]))
    if call_tmp[874004]
    {
      unknown call_tmp[874011] "expr temp" "maybe param" "maybe type" "temp"
      (874014 'move' call_tmp[874011](444802 call _value _mt[203] this[223782]))
      (223797 call _reprivatize call_tmp[874011])
    }
    (621108 return _void[46])
  }
  function _domain[225034](?).getIndices[223808](arg _mt[223812]:_MT[201], arg this[223810]:_domain[225034](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[621112] "RVV" "temp"
    unknown call_tmp[874018] "expr temp" "maybe param" "maybe type" "temp"
    (874021 'move' call_tmp[874018](406769 call _value _mt[203] this[223810]))
    unknown call_tmp[874025] "expr temp" "maybe param" "maybe type" "temp"
    (874028 'move' call_tmp[874025](223822 call(223819 call (partial) dsiGetIndices _mt[203] call_tmp[874018])))
    (621117 'move' ret[621112](621116 'deref' call_tmp[874025]))
    (621114 return ret[621112])
  }
  function _domain[225034](?).serialize[223825](arg _mt[223833]:_MT[201], arg this[223827]:_domain[225034](?), arg writer[223829]:_any[141](?), ref arg serializer[223831]:_any[141](?)) : _unknown[42] throws "method" "primary method" "no return value for void"
  {
    unknown call_tmp[874032] "expr temp" "maybe param" "maybe type" "temp"
    (874035 'move' call_tmp[874032](406773 call _value _mt[203] this[223827]))
    (223842 call(223839 call (partial) dsiSerialWrite _mt[203] call_tmp[874032]) writer[223829])
    (621119 return _void[46])
  }
  function _domain[225034](?).deserialize[223846](arg _mt[223854]:_MT[201], ref arg this[223848]:_domain[225034](?), arg reader[223850]:_any[141](?), ref arg deserializer[223852]:_any[141](?)) : _unknown[42] throws "method" "primary method" "no return value for void"
  {
    unknown call_tmp[874041] "expr temp" "maybe param" "maybe type" "temp"
    (874044 'move' call_tmp[874041](406777 call _value _mt[203] this[223848]))
    (223863 call(223860 call (partial) dsiSerialRead _mt[203] call_tmp[874041]) reader[223850])
    (621121 return _void[46])
  }
  function _domain[225034](?).deserializeFrom[223867](arg _mt[223875]:_MT[201], arg this[223869]:_domain[225034](?), arg reader[223871]:_any[141](?), ref arg deserializer[223873]:_any[141](?)) : _unknown[42] throws "method" "primary method"
  {
    unknown ret[621125] "RVV" "temp"
    unknown ret[223879] "dead at end of block" "insert auto destroy"
    (649569 'default init var' ret[223879] this[223869])
    (223882 'end of statement')
    (223887 call(223884 call (partial) deserialize _mt[203] ret[223879]) reader[223871] deserializer[223873])
    (560707 'end of statement' ret[223879])
    (621130 'move' ret[621125](621129 'deref' ret[223879]))
    gotoReturn _end_deserializeFrom[621123] _end_deserializeFrom[621123]
    (560709 'end of statement' ret[223879])
    label _end_deserializeFrom[621123]
    (621127 return ret[621125])
  }
  function _domain[225034](?).localSlice[223894](arg _mt[223902]:_MT[201], arg this[223896]:_domain[225034](?), arg r[223899]:_any[141](?) ...) : _unknown[42] "method" "primary method"
  {
    unknown ret[621136] "RVV" "temp"
    unknown call_tmp[874054] "expr temp" "maybe param" "maybe type" "temp"
    (874057 'move' call_tmp[874054](444826 call _value _mt[203] this[223896]))
    unknown call_tmp[874059] "expr temp" "maybe param" "maybe type" "temp"
    (874062 'move' call_tmp[874059](223936 '_wide_get_locale' call_tmp[874054]))
    unknown call_tmp[874064] "expr temp" "maybe param" "maybe type" "temp"
    (874067 'move' call_tmp[874064](223937 call chpl_localeID_to_locale call_tmp[874059]))
    unknown call_tmp[874069] "expr temp" "maybe param" "maybe type" "temp"
    (874072 'move' call_tmp[874069](444829 call here[135591]))
    unknown call_tmp[874074] "expr temp" "maybe param" "maybe type" "temp"
    (874077 'move' call_tmp[874074](223933 call != call_tmp[874064] call_tmp[874069]))
    unknown call_tmp[874079] "expr temp" "maybe param" "maybe type" "temp"
    (874082 'move' call_tmp[874079](223940 call _cond_test call_tmp[874074]))
    if call_tmp[874079]
    {
      unknown call_tmp[874086] "expr temp" "maybe param" "maybe type" "temp"
      (874089 'move' call_tmp[874086](444822 call _value _mt[203] this[223896]))
      unknown call_tmp[874091] "expr temp" "maybe param" "maybe type" "temp"
      (874094 'move' call_tmp[874091](223924 '_wide_get_node' call_tmp[874086]))
      unknown call_tmp[874096] "expr temp" "maybe param" "maybe type" "temp"
      (874099 'move' call_tmp[874096](406785 call here[135591]))
      unknown call_tmp[874103] "expr temp" "maybe param" "maybe type" "temp"
      (874106 'move' call_tmp[874103](223929 call id _mt[203] call_tmp[874096]))
      (223916 call halt "Attempting to take a local slice of a domain on locale " call_tmp[874091] " from locale " call_tmp[874103])
    }
    unknown call_tmp[874108] "expr temp" "maybe param" "maybe type" "temp"
    (874111 'move' call_tmp[874108](223947 call this[223896](223949 'expand_tuple' r[223899])))
    (621141 'move' ret[621136](621140 'deref' call_tmp[874108]))
    (621138 return ret[621136])
  }
  where {
    unknown tmp[497010] "maybe param" "temp"
    (497021 'move' tmp[497010](223907 call chpl__isTupleOfRanges r[223899]))
    unknown call_tmp[874113] "expr temp" "maybe param" "maybe type" "temp"
    (874116 'move' call_tmp[874113](497023 call _cond_invalid tmp[497010]))
    if call_tmp[874113]
    {
      (497026 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[693629] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[693630] "maybe param" "temp"
    unknown call_tmp[874118] "expr temp" "maybe param" "maybe type" "temp"
    (874121 'move' call_tmp[874118](497011 call isTrue tmp[497010]))
    (693635 'move' tmp[693630](693633 call _cond_test call_tmp[874118]))
    if tmp[693630]
    {
      unknown tmp[693637] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[874125] "expr temp" "maybe param" "maybe type" "temp"
      (874128 'move' call_tmp[874125](406782 call _value _mt[203] this[223896]))
      unknown call_tmp[874132] "expr temp" "maybe param" "maybe type" "temp"
      (874135 'move' call_tmp[874132](223913 call(223910 call (partial) isDefaultRectangular _mt[203] call_tmp[874125])))
      (693639 'move' tmp[693637](497014 call isTrue call_tmp[874132]))
      (693644 'move' tmp[693629](693641 '_paramFoldLogical' tmp[693630] tmp[693637]))
    }
    {
      (693649 'move' tmp[693629](693646 '_paramFoldLogical' tmp[693630] 0))
    }
    (1001596 call chpl_statementLevelSymbol tmp[693629])
  }
  function _domain[225034](?).localSlice[223953](arg _mt[223961]:_MT[201], arg this[223955]:_domain[225034](?), arg r[223958]:_any[141](?) ...) : _unknown[42] "method" "primary method" "no where doc"
  {
    unknown ret[621145] "RVV" "temp"
    unknown call_tmp[874141] "expr temp" "maybe param" "maybe type" "temp"
    (874144 'move' call_tmp[874141](406792 call _value _mt[203] this[223955]))
    unknown call_tmp[874148] "expr temp" "maybe param" "maybe type" "temp"
    (874151 'move' call_tmp[874148](223985 call chpl_strideUnion r[223958]))
    unknown call_tmp[874153] "expr temp" "maybe param" "maybe type" "temp"
    (874156 'move' call_tmp[874153](223983 call(223980 call (partial) dsiLocalSlice _mt[203] call_tmp[874141]) call_tmp[874148] r[223958]))
    (621150 'move' ret[621145](621149 'deref' call_tmp[874153]))
    (621147 return ret[621145])
  }
  where {
    unknown tmp[497031] "maybe param" "temp"
    (497042 'move' tmp[497031](223966 call chpl__isTupleOfRanges r[223958]))
    unknown call_tmp[874158] "expr temp" "maybe param" "maybe type" "temp"
    (874161 'move' call_tmp[874158](497044 call _cond_invalid tmp[497031]))
    if call_tmp[874158]
    {
      (497047 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[693656] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[693657] "maybe param" "temp"
    unknown call_tmp[874163] "expr temp" "maybe param" "maybe type" "temp"
    (874166 'move' call_tmp[874163](497032 call isTrue tmp[497031]))
    (693662 'move' tmp[693657](693660 call _cond_test call_tmp[874163]))
    if tmp[693657]
    {
      unknown tmp[693664] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[874170] "expr temp" "maybe param" "maybe type" "temp"
      (874173 'move' call_tmp[874170](406788 call _value _mt[203] this[223955]))
      unknown call_tmp[874177] "expr temp" "maybe param" "maybe type" "temp"
      (874180 'move' call_tmp[874177](223974 call(223971 call (partial) isDefaultRectangular _mt[203] call_tmp[874170])))
      unknown call_tmp[874182] "expr temp" "maybe param" "maybe type" "temp"
      (874185 'move' call_tmp[874182](223968 call ! call_tmp[874177]))
      (693666 'move' tmp[693664](497035 call isTrue call_tmp[874182]))
      (693671 'move' tmp[693656](693668 '_paramFoldLogical' tmp[693657] tmp[693664]))
    }
    {
      (693676 'move' tmp[693656](693673 '_paramFoldLogical' tmp[693657] 0))
    }
    (1001598 call chpl_statementLevelSymbol tmp[693656])
  }
  function _domain[225034](?).localSlice[223991](arg _mt[223999]:_MT[201], arg this[223993]:_domain[225034](?), arg d[223996]:_domain[225034](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[621154] "RVV" "temp"
    unknown call_tmp[874191] "expr temp" "maybe param" "maybe type" "temp"
    (874194 'move' call_tmp[874191](224009 call(224006 call (partial) getIndices _mt[203] d[223996])))
    unknown call_tmp[874196] "expr temp" "maybe param" "maybe type" "temp"
    (874199 'move' call_tmp[874196](224004 call(444844 call (partial) localSlice _mt[203] this[223993])(224010 'expand_tuple' call_tmp[874191])))
    (621159 'move' ret[621154](621158 'deref' call_tmp[874196]))
    (621156 return ret[621154])
  }
  function _domain[225034](?).sorted[224013](arg _mt[224025]:_MT[201], arg this[224015]:_domain[225034](?), arg comparator[224021]:_any[141](?) :
  (1002287 call chpl_defaultComparator) =
  (224020 call chpl_defaultComparator)) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[621163] "RVV" "temp"
    {
      unknown _indexOfInterest[224041] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[224042] "expr temp" "temp"
      unknown call_tmp[874203] "expr temp" "maybe param" "maybe type" "temp"
      (874206 'move' call_tmp[874203](406797 call _value _mt[203] this[224015]))
      unknown call_tmp[874210] "expr temp" "maybe param" "maybe type" "temp"
      (874213 'move' call_tmp[874210](224036 call(224033 call (partial) dsiSorted _mt[203] call_tmp[874203]) comparator[224021]))
      (224051 'move' _iterator[224042](224049 call _getIterator call_tmp[874210]))
      Defer
      {
        {
          (224066 call _freeIterator _iterator[224042])
        }
      }
      { scopeless type
        (224056 'move' _indexOfInterest[224041](224053 call iteratorIndex _iterator[224042]))
      }
      ForLoop[224043]
      {
        unknown i[224028] "index var" "insert auto destroy"
        (560716 'end of statement')
        (224061 'move' i[224028] _indexOfInterest[224041])
        (560717 'end of statement' i[224028])
        {
          unknown yret[621167] "YVV" "temp"
          (621170 'move' yret[621167](621169 'deref' i[224028]))
          (224039 yield yret[621167])
          (560719 'end of statement' i[224028])
        }
        label _continueLabel[224046]
        _indexOfInterest[224041]
        _iterator[224042]
      }
      label _breakLabel[224047]
    }
    (621165 return ret[621163])
  }
  function _domain[225034](?).displayRepresentation[224075](arg _mt[224079]:_MT[201], arg this[224077]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[874217] "expr temp" "maybe param" "maybe type" "temp"
    (874220 'move' call_tmp[874217](406801 call _value _mt[203] this[224077]))
    (224086 call(224083 call (partial) dsiDisplayRepresentation _mt[203] call_tmp[874217]))
    (621173 return _void[46])
  }
  function _domain[225034](?).defaultSparseDist[224089](arg _mt[224093]:_MT[201], arg this[224091]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown ret[621177] "RVV" "temp"
    unknown call_tmp[874226] "expr temp" "maybe param" "maybe type" "temp"
    (874229 'move' call_tmp[874226](224098 call distribution _mt[203] this[224091]))
    (621182 'move' ret[621177](621181 'deref' call_tmp[874226]))
    (621179 return ret[621177])
  }
  function _domain[225034](?).hasSingleLocalSubdomain[224103](arg _mt[224107]:_MT[201], arg this[224105]:_domain[225034](?)) param : _unknown[42] "method" "primary method" "@unstable"
  {
    unknown ret[621186] "RVV" "param" "temp"
    unknown call_tmp[874233] "expr temp" "maybe param" "maybe type" "temp"
    (874236 'move' call_tmp[874233](406806 call _value _mt[203] this[224105]))
    unknown call_tmp[874240] "expr temp" "maybe param" "maybe type" "temp"
    (874243 'move' call_tmp[874240](224115 call(224112 call (partial) dsiHasSingleLocalSubdomain _mt[203] call_tmp[874233])))
    (621191 'move' ret[621186](621190 'deref' call_tmp[874240]))
    (621188 return ret[621186])
  }
  function _domain[225034](?).localSubdomain[224118](arg _mt[224128]:_MT[201], arg this[224120]:_domain[225034](?), arg loc[224124]:locale[234] =
  (444849 call here[135591])) : _unknown[42] "method" "primary method"
  {
    unknown ret[621195] "RVV" "temp"
    unknown call_tmp[874247] "expr temp" "maybe param" "maybe type" "temp"
    (874250 'move' call_tmp[874247](406810 call _value _mt[203] this[224120]))
    unknown call_tmp[874254] "expr temp" "maybe param" "maybe type" "temp"
    (874257 'move' call_tmp[874254](224143 call(224140 call (partial) dsiHasSingleLocalSubdomain _mt[203] call_tmp[874247])))
    unknown call_tmp[874259] "expr temp" "maybe param" "maybe type" "temp"
    (874262 'move' call_tmp[874259](224137 call ! call_tmp[874254]))
    unknown call_tmp[874264] "expr temp" "maybe param" "maybe type" "temp"
    (874267 'move' call_tmp[874264](224144 call _cond_test call_tmp[874259]))
    if call_tmp[874264]
    {
      (224132 call compilerError "the domain may have multiple local subdomains")
    }
    unknown call_tmp[874271] "expr temp" "maybe param" "maybe type" "temp"
    (874274 'move' call_tmp[874271](406814 call _value _mt[203] this[224120]))
    unknown call_tmp[874278] "expr temp" "maybe param" "maybe type" "temp"
    (874281 'move' call_tmp[874278](224154 call(224151 call (partial) dsiLocalSubdomain _mt[203] call_tmp[874271]) loc[224124]))
    (621200 'move' ret[621195](621199 'deref' call_tmp[874278]))
    (621197 return ret[621195])
  }
  function _domain[225034](?).localSubdomains[224158](arg _mt[224168]:_MT[201], arg this[224160]:_domain[225034](?), arg loc[224164]:locale[234] =
  (444852 call here[135591])) : _unknown[42] "iterator fn" "method" "primary method" "@unstable" "no return value for void"
  {
    unknown ret[621204] "RVV" "temp"
    unknown call_tmp[874285] "expr temp" "maybe param" "maybe type" "temp"
    (874288 'move' call_tmp[874285](406822 call _value _mt[203] this[224160]))
    unknown call_tmp[874292] "expr temp" "maybe param" "maybe type" "temp"
    (874295 'move' call_tmp[874292](224226 call(224223 call (partial) dsiHasSingleLocalSubdomain _mt[203] call_tmp[874285])))
    unknown call_tmp[874297] "expr temp" "maybe param" "maybe type" "temp"
    (874300 'move' call_tmp[874297](224227 call _cond_test call_tmp[874292]))
    if call_tmp[874297]
    {
      unknown yret[621208] "YVV" "temp"
      unknown call_tmp[874304] "expr temp" "maybe param" "maybe type" "temp"
      (874307 'move' call_tmp[874304](224174 call(444855 call (partial) localSubdomain _mt[203] this[224160]) loc[224164]))
      (621211 'move' yret[621208](621210 'deref' call_tmp[874304]))
      (224172 yield yret[621208])
    }
    {
      {
        unknown _indexOfInterest[224190] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[224191] "expr temp" "temp"
        unknown call_tmp[874311] "expr temp" "maybe param" "maybe type" "temp"
        (874314 'move' call_tmp[874311](406818 call _value _mt[203] this[224160]))
        unknown call_tmp[874318] "expr temp" "maybe param" "maybe type" "temp"
        (874321 'move' call_tmp[874318](224183 call(224180 call (partial) dsiLocalSubdomains _mt[203] call_tmp[874311]) loc[224164]))
        (224200 'move' _iterator[224191](224198 call _getIterator call_tmp[874318]))
        Defer
        {
          {
            (224215 call _freeIterator _iterator[224191])
          }
        }
        { scopeless type
          (224205 'move' _indexOfInterest[224190](224202 call iteratorIndex _iterator[224191]))
        }
        ForLoop[224192] order-independent
        {
          unknown d[224177] "index var" "insert auto destroy"
          (560728 'end of statement')
          (224210 'move' d[224177] _indexOfInterest[224190])
          (560729 'end of statement' d[224177])
          unknown yret[621214] "YVV" "temp"
          (621217 'move' yret[621214](621216 'deref' d[224177]))
          (224185 yield yret[621214])
          (560731 'end of statement' d[224177])
          label _continueLabel[224195]
          _indexOfInterest[224190]
          _iterator[224191]
        }
        label _breakLabel[224196]
      }
    }
    (621206 return ret[621204])
  }
  function _domain[225034](?).supportsAutoLocalAccess[224233](arg _mt[224237]:_MT[201], arg this[224235]:_domain[225034](?)) param : _unknown[42] "method" "primary method"
  {
    unknown ret[621222] "RVV" "param" "temp"
    unknown call_tmp[874325] "expr temp" "maybe param" "maybe type" "temp"
    (874328 'move' call_tmp[874325](406826 call _value _mt[203] this[224235]))
    unknown call_tmp[874332] "expr temp" "maybe param" "maybe type" "temp"
    (874335 'move' call_tmp[874332](224245 call(224242 call (partial) dsiSupportsAutoLocalAccess _mt[203] call_tmp[874325])))
    (621227 'move' ret[621222](621226 'deref' call_tmp[874332]))
    (621224 return ret[621222])
  }
  function _domain[225034](?).supportsOffsetAutoLocalAccess[224248](arg _mt[224252]:_MT[201], arg this[224250]:_domain[225034](?)) param : _unknown[42] "method" "primary method"
  {
    unknown ret[621231] "RVV" "param" "temp"
    unknown call_tmp[874339] "expr temp" "maybe param" "maybe type" "temp"
    (874342 'move' call_tmp[874339](406830 call _value _mt[203] this[224250]))
    unknown call_tmp[874346] "expr temp" "maybe param" "maybe type" "temp"
    (874349 'move' call_tmp[874346](224262 call(224259 call (partial) dsiSupportsOffsetAutoLocalAccess _mt[203] call_tmp[874339])))
    (621236 'move' ret[621231](621235 'deref' call_tmp[874346]))
    (621233 return ret[621231])
  }
  function _domain[225034](?).autoLocalAccessOffsetCheck[224265](arg _mt[224271]:_MT[201], arg this[224267]:_domain[225034](?), arg offsets[224269]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    unknown ret[621240] "RVV" "temp"
    unknown call_tmp[874353] "expr temp" "maybe param" "maybe type" "temp"
    (874356 'move' call_tmp[874353](406834 call _value _mt[203] this[224267]))
    unknown call_tmp[874360] "expr temp" "maybe param" "maybe type" "temp"
    (874363 'move' call_tmp[874360](224281 call(224278 call (partial) dsiAutoLocalAccessOffsetCheck _mt[203] call_tmp[874353]) offsets[224269]))
    (621245 'move' ret[621240](621244 'deref' call_tmp[874360]))
    (621242 return ret[621240])
  }
  function _domain[225034](?).iteratorYieldsLocalElements[224285](arg _mt[224289]:_MT[201], arg this[224287]:_domain[225034](?)) param : _unknown[42] "method" "primary method"
  {
    unknown ret[621249] "RVV" "param" "temp"
    unknown call_tmp[874367] "expr temp" "maybe param" "maybe type" "temp"
    (874370 'move' call_tmp[874367](406838 call _value _mt[203] this[224287]))
    unknown call_tmp[874374] "expr temp" "maybe param" "maybe type" "temp"
    (874377 'move' call_tmp[874374](224299 call(224296 call (partial) dsiIteratorYieldsLocalElements _mt[203] call_tmp[874367])))
    (621254 'move' ret[621249](621253 'deref' call_tmp[874374]))
    (621251 return ret[621249])
  }
  function _domain[225034](?).tryCast[224302](arg _mt[224310]:_MT[201], arg this[224304]:_domain[225034](?), arg t[224307]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no where doc"
  {
    unknown ret[621258] "RVV" "temp"
    unknown call_tmp[874381] "expr temp" "maybe param" "maybe type" "temp"
    (874384 'move' call_tmp[874381](224340 call(224337 call (partial) chpl_domainTryCastHelper _mt[203] this[224304]) t[224307]))
    (621263 'move' ret[621258](621262 'deref' call_tmp[874381]))
    (621260 return ret[621258])
  }
  where {
    unknown tmp[497052] "maybe param" "temp"
    unknown tmp[497073] "maybe param" "temp"
    (497084 'move' tmp[497073](224317 call chpl__isRectangularDomType t[224307]))
    unknown call_tmp[874386] "expr temp" "maybe param" "maybe type" "temp"
    (874389 'move' call_tmp[874386](497086 call _cond_invalid tmp[497073]))
    if call_tmp[874386]
    {
      (497089 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[693683] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[693684] "maybe param" "temp"
    unknown call_tmp[874391] "expr temp" "maybe param" "maybe type" "temp"
    (874394 'move' call_tmp[874391](497074 call isTrue tmp[497073]))
    (693689 'move' tmp[693684](693687 call _cond_test call_tmp[874391]))
    if tmp[693684]
    {
      unknown tmp[693691] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[874398] "expr temp" "maybe param" "maybe type" "temp"
      (874401 'move' call_tmp[874398](224323 call(224320 call (partial) isRectangular _mt[203] this[224304])))
      (693693 'move' tmp[693691](497077 call isTrue call_tmp[874398]))
      (693698 'move' tmp[693683](693695 '_paramFoldLogical' tmp[693684] tmp[693691]))
    }
    {
      (693703 'move' tmp[693683](693700 '_paramFoldLogical' tmp[693684] 0))
    }
    (497063 'move' tmp[497052] tmp[693683])
    unknown call_tmp[874403] "expr temp" "maybe param" "maybe type" "temp"
    (874406 'move' call_tmp[874403](497065 call _cond_invalid tmp[497052]))
    if call_tmp[874403]
    {
      (497068 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[693710] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[693711] "maybe param" "temp"
    unknown call_tmp[874408] "expr temp" "maybe param" "maybe type" "temp"
    (874411 'move' call_tmp[874408](497053 call isTrue tmp[497052]))
    (693716 'move' tmp[693711](693714 call _cond_test call_tmp[874408]))
    if tmp[693711]
    {
      unknown tmp[693718] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[874415] "expr temp" "maybe param" "maybe type" "temp"
      (874418 'move' call_tmp[874415](224330 call(224327 call (partial) chpl_domainTryCastIsSafe _mt[203] this[224304]) t[224307]))
      (693720 'move' tmp[693718](497056 call isTrue call_tmp[874415]))
      (693725 'move' tmp[693710](693722 '_paramFoldLogical' tmp[693711] tmp[693718]))
    }
    {
      (693730 'move' tmp[693710](693727 '_paramFoldLogical' tmp[693711] 0))
    }
    (1001600 call chpl_statementLevelSymbol tmp[693710])
  }
  function _domain[225034](?).tryCast[224346](arg _mt[224354]:_MT[201], arg this[224348]:_domain[225034](?), arg t[224351]:_domain[225034](?)) : _unknown[42] throws "method" "primary method"
  {
    unknown ret[621267] "RVV" "temp"
    unknown tmp[497094] "maybe param" "temp"
    unknown call_tmp[874420] "expr temp" "maybe param" "maybe type" "temp"
    (874423 'move' call_tmp[874420](224389 call chpl__isRectangularDomType t[224351]))
    (497105 'move' tmp[497094](224386 call ! call_tmp[874420]))
    unknown call_tmp[874425] "expr temp" "maybe param" "maybe type" "temp"
    (874428 'move' call_tmp[874425](497107 call _cond_invalid tmp[497094]))
    if call_tmp[874425]
    {
      (497110 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[693737] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[693738] "maybe param" "temp"
    unknown call_tmp[874430] "expr temp" "maybe param" "maybe type" "temp"
    (874433 'move' call_tmp[874430](497095 call isTrue tmp[497094]))
    (693743 'move' tmp[693738](693741 call _cond_test call_tmp[874430]))
    if tmp[693738]
    {
      (693748 'move' tmp[693737](693745 '_paramFoldLogical' tmp[693738] 1))
    }
    {
      unknown tmp[693750] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[874437] "expr temp" "maybe param" "maybe type" "temp"
      (874440 'move' call_tmp[874437](224397 call(224394 call (partial) isRectangular _mt[203] this[224348])))
      unknown call_tmp[874442] "expr temp" "maybe param" "maybe type" "temp"
      (874445 'move' call_tmp[874442](224391 call ! call_tmp[874437]))
      (693752 'move' tmp[693750](497099 call isTrue call_tmp[874442]))
      (693757 'move' tmp[693737](693754 '_paramFoldLogical' tmp[693738] tmp[693750]))
    }
    unknown call_tmp[874447] "expr temp" "maybe param" "maybe type" "temp"
    (874450 'move' call_tmp[874447](224398 call _cond_test tmp[693737]))
    if call_tmp[874447]
    {
      unknown call_tmp[874452] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (874455 'move' call_tmp[874452](224365 'typeof' this[224348]))
      unknown call_tmp[874457] "expr temp" "maybe param" "maybe type" "temp"
      (874460 'move' call_tmp[874457](224362 call : call_tmp[874452] string[244]))
      unknown call_tmp[874462] "expr temp" "maybe param" "maybe type" "temp"
      (874465 'move' call_tmp[874462](224368 call : t[224351] string[244]))
      (224358 call compilerError "tryCast() from " call_tmp[874457] " to " call_tmp[874462] " is not available")
    }
    {
      unknown call_tmp[874469] "expr temp" "maybe param" "maybe type" "temp"
      (874472 'move' call_tmp[874469](224381 call(224378 call (partial) chpl_domainTryCastHelper _mt[203] this[224348]) t[224351]))
      (621272 'move' ret[621267](621271 'deref' call_tmp[874469]))
      gotoReturn _end_tryCast[621265] _end_tryCast[621265]
    }
    label _end_tryCast[621265]
    (621269 return ret[621267])
  }
  function _domain[225034](?).chpl_domainTryCastHelper[224406](arg _mt[224414]:_MT[201], arg this[224408]:_domain[225034](?), arg t[224411]:_domain[225034](?)) : _unknown[42] throws "inline" "method" "primary method"
  {
    unknown ret[621278] "RVV" "temp"
    unknown tmpD[224418] "dead at end of block" "insert auto destroy"
    (649571 'default init var' tmpD[224418] t[224411])
    (224421 'end of statement')
    const d[224423] "dead at end of block" "const" "ref var"
    (649576 'init ref decl' d[224423])
    (649574 'move' d[224423](649573 'addr of' this[224408]))
    (224426 'end of statement')
    unknown call_tmp[874476] "expr temp" "maybe param" "maybe type" "temp"
    (874479 'move' call_tmp[874476](224534 call rank _mt[203] tmpD[224418]))
    unknown call_tmp[874483] "expr temp" "maybe param" "maybe type" "temp"
    (874486 'move' call_tmp[874483](224538 call rank _mt[203] d[224423]))
    unknown call_tmp[874488] "expr temp" "maybe param" "maybe type" "temp"
    (874491 'move' call_tmp[874488](224531 call != call_tmp[874476] call_tmp[874483]))
    unknown call_tmp[874493] "expr temp" "maybe param" "maybe type" "temp"
    (874496 'move' call_tmp[874493](224541 call _cond_test call_tmp[874488]))
    if call_tmp[874493]
    {
      (224428 call compilerError "rank mismatch in tryCast()")
    }
    {
      unknown call_tmp[874500] "maybe param" "maybe type" "temp"
      (874503 'move' call_tmp[874500](224440 call(224437 call (partial) getIndices _mt[203] d[224423])))
      unknown inds[224435] "dead at end of block" "insert auto destroy"
      (649578 'init var' inds[224435] call_tmp[874500])
      (224442 'end of statement')
      { scopeless type
        unknown call_type_tmp[578295] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[874507] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (874510 'move' call_tmp[874507](224449 call(224446 call (partial) getIndices _mt[203] tmpD[224418])))
        (578299 'move' call_type_tmp[578295](224450 'typeof' call_tmp[874507]))
      }
      unknown newInds[224444] "dead at end of block" "insert auto destroy"
      (649580 'default init var' newInds[224444] call_type_tmp[578295])
      (224452 'end of statement' d[224423] tmpD[224418])
      {
        unknown i[224453] "dead at end of block" "index var" "insert auto destroy"
        (649582 'init var' i[224453] 0)
        (560744 'end of statement')
        unknown tmp[224484] "maybe param" "temp"
        unknown call_tmp[874514] "expr temp" "maybe param" "maybe type" "temp"
        (874517 'move' call_tmp[874514](224459 call rank _mt[203] tmpD[224418]))
        unknown call_tmp[874519] "expr temp" "maybe param" "maybe type" "temp"
        (874522 'move' call_tmp[874519](224456 call - call_tmp[874514] 1))
        (224496 'move' tmp[224484](224494 call chpl_compute_low_param_loop_bound 0 call_tmp[874519]))
        unknown tmp[224485] "maybe param" "temp"
        unknown call_tmp[874526] "expr temp" "maybe param" "maybe type" "temp"
        (874529 'move' call_tmp[874526](224503 call rank _mt[203] tmpD[224418]))
        unknown call_tmp[874531] "expr temp" "maybe param" "maybe type" "temp"
        (874534 'move' call_tmp[874531](224501 call - call_tmp[874526] 1))
        (224509 'move' tmp[224485](224507 call chpl_compute_high_param_loop_bound 0 call_tmp[874531]))
        unknown tmp[224486] "maybe param" "temp"
        (224512 'move' tmp[224486] 1)
        ParamForLoop[224514]
        { i[224453] tmp[224484] tmp[224485] tmp[224486]
          {
            { scopeless type
              unknown call_type_tmp[578301] "expr temp" "maybe type" "temp" "type variable"
              unknown call_tmp[874536] "expr temp" "maybe param" "used in type" "maybe type" "temp"
              (874539 'move' call_tmp[874536](224481 call newInds[224444] i[224453]))
              (578305 'move' call_type_tmp[578301](224483 'typeof' call_tmp[874536]))
            }
            unknown call_tmp[874541] "expr temp" "maybe param" "maybe type" "temp"
            (874544 'move' call_tmp[874541](224469 call newInds[224444] i[224453]))
            unknown call_tmp[874546] "expr temp" "maybe param" "maybe type" "temp"
            (874549 'move' call_tmp[874546](224472 call inds[224435] i[224453]))
            unknown call_tmp[874553] "expr temp" "maybe param" "maybe type" "temp"
            (874556 'move' call_tmp[874553](224479 call(224476 call (partial) tryCast _mt[203] call_tmp[874546]) call_type_tmp[578301]))
            (224466 call = call_tmp[874541] call_tmp[874553])
            (560745 'end of statement' newInds[224444] i[224453] inds[224435] i[224453])
          }
        }
        label _unused_continueLabel[224488]
        label _breakLabel[224487]
      }
      (224527 call(224524 call (partial) setIndices _mt[203] tmpD[224418]) newInds[224444])
      (560750 'end of statement' tmpD[224418] newInds[224444])
      (621283 'move' ret[621278](621282 'deref' tmpD[224418]))
      gotoReturn _end_chpl_domainTryCastHelper[621276] _end_chpl_domainTryCastHelper[621276]
      (560753 'end of statement' tmpD[224418])
    }
    label _end_chpl_domainTryCastHelper[621276]
    (621280 return ret[621278])
  }
  function _domain[225034](?).chpl_domainTryCastIsSafe[224548](arg _mt[224556]:_MT[201], arg this[224550]:_domain[225034](?), arg t[224553]:_domain[225034](?)) param : _unknown[42] "method" "primary method"
  {
    unknown ret[621289] "RVV" "param" "temp"
    unknown dst[224560] "dead at end of block" "insert auto destroy"
    (649584 'default init var' dst[224560] t[224553])
    (224563 'end of statement')
    unknown tmp[497115] "maybe param" "temp"
    (497126 'move' tmp[497115](224572 call(224569 call (partial) isRectangular _mt[203] this[224550])))
    unknown call_tmp[874562] "expr temp" "maybe param" "maybe type" "temp"
    (874565 'move' call_tmp[874562](497128 call _cond_invalid tmp[497115]))
    if call_tmp[874562]
    {
      (497131 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[693764] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[693765] "maybe param" "temp"
    unknown call_tmp[874567] "expr temp" "maybe param" "maybe type" "temp"
    (874570 'move' call_tmp[874567](497116 call isTrue tmp[497115]))
    (693770 'move' tmp[693765](693768 call _cond_test call_tmp[874567]))
    if tmp[693765]
    {
      unknown tmp[693772] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[874574] "expr temp" "maybe param" "maybe type" "temp"
      (874577 'move' call_tmp[874574](224577 call(224574 call (partial) isRectangular _mt[203] dst[224560])))
      (693774 'move' tmp[693772](497119 call isTrue call_tmp[874574]))
      (693779 'move' tmp[693764](693776 '_paramFoldLogical' tmp[693765] tmp[693772]))
    }
    {
      (693784 'move' tmp[693764](693781 '_paramFoldLogical' tmp[693765] 0))
    }
    (224565 call compilerAssert tmp[693764])
    (560756 'end of statement' dst[224560])
    { scopeless type
      unknown call_type_tmp[578307] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[874581] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (874584 'move' call_tmp[874581](224591 call(224588 call (partial) dim _mt[203] dst[224560]) 0))
      (578311 'move' call_type_tmp[578307](224593 'typeof' call_tmp[874581]))
    }
    unknown call_tmp[874588] "expr temp" "maybe param" "maybe type" "temp"
    (874591 'move' call_tmp[874588](224585 call(224582 call (partial) dim _mt[203] this[224550]) 0))
    unknown call_tmp[874593] "expr temp" "maybe param" "maybe type" "temp"
    (874596 'move' call_tmp[874593](224580 call chpl_tryCastIsSafe call_tmp[874588] call_type_tmp[578307]))
    (621294 'move' ret[621289](621293 'deref' call_tmp[874593]))
    gotoReturn _end_chpl_domainTryCastIsSafe[621287] _end_chpl_domainTryCastIsSafe[621287]
    (560758 'end of statement' dst[224560])
    label _end_chpl_domainTryCastIsSafe[621287]
    (621291 return ret[621289])
  }
  function _domain[225034](?).:[224596](arg _mt[224608]:_MT[201], arg this[224598]:_domain[225034](?), arg d[224601]:_domain[225034](?), arg t[224605]:_domain[225034](?)) : _unknown[42] "method" "primary method" "operator"
  {
    unknown ret[621300] "RVV" "temp"
    unknown call_tmp[874600] "expr temp" "maybe param" "maybe type" "temp"
    (874603 'move' call_tmp[874600](224638 call(224635 call (partial) chpl_domainCastHelper _mt[203] d[224601]) t[224605]))
    (621305 'move' ret[621300](621304 'deref' call_tmp[874600]))
    (621302 return ret[621300])
  }
  where {
    unknown tmp[497136] "maybe param" "temp"
    unknown tmp[497157] "maybe param" "temp"
    (497168 'move' tmp[497157](224615 call chpl__isRectangularDomType t[224605]))
    unknown call_tmp[874605] "expr temp" "maybe param" "maybe type" "temp"
    (874608 'move' call_tmp[874605](497170 call _cond_invalid tmp[497157]))
    if call_tmp[874605]
    {
      (497173 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[693791] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[693792] "maybe param" "temp"
    unknown call_tmp[874610] "expr temp" "maybe param" "maybe type" "temp"
    (874613 'move' call_tmp[874610](497158 call isTrue tmp[497157]))
    (693797 'move' tmp[693792](693795 call _cond_test call_tmp[874610]))
    if tmp[693792]
    {
      unknown tmp[693799] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[874617] "expr temp" "maybe param" "maybe type" "temp"
      (874620 'move' call_tmp[874617](224621 call(224618 call (partial) isRectangular _mt[203] d[224601])))
      (693801 'move' tmp[693799](497161 call isTrue call_tmp[874617]))
      (693806 'move' tmp[693791](693803 '_paramFoldLogical' tmp[693792] tmp[693799]))
    }
    {
      (693811 'move' tmp[693791](693808 '_paramFoldLogical' tmp[693792] 0))
    }
    (497147 'move' tmp[497136] tmp[693791])
    unknown call_tmp[874622] "expr temp" "maybe param" "maybe type" "temp"
    (874625 'move' call_tmp[874622](497149 call _cond_invalid tmp[497136]))
    if call_tmp[874622]
    {
      (497152 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[693818] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[693819] "maybe param" "temp"
    unknown call_tmp[874627] "expr temp" "maybe param" "maybe type" "temp"
    (874630 'move' call_tmp[874627](497137 call isTrue tmp[497136]))
    (693824 'move' tmp[693819](693822 call _cond_test call_tmp[874627]))
    if tmp[693819]
    {
      unknown tmp[693826] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[874634] "expr temp" "maybe param" "maybe type" "temp"
      (874637 'move' call_tmp[874634](224628 call(224625 call (partial) chpl_domainCastIsSafe _mt[203] d[224601]) t[224605]))
      (693828 'move' tmp[693826](497140 call isTrue call_tmp[874634]))
      (693833 'move' tmp[693818](693830 '_paramFoldLogical' tmp[693819] tmp[693826]))
    }
    {
      (693838 'move' tmp[693818](693835 '_paramFoldLogical' tmp[693819] 0))
    }
    (1001602 call chpl_statementLevelSymbol tmp[693818])
  }
  function _domain[225034](?).:[224644](arg _mt[224656]:_MT[201], arg this[224646]:_domain[225034](?), arg d[224649]:_domain[225034](?), arg t[224653]:_domain[225034](?)) : _unknown[42] throws "method" "primary method" "operator"
  {
    unknown ret[621309] "RVV" "temp"
    unknown tmp[497178] "maybe param" "temp"
    unknown call_tmp[874639] "expr temp" "maybe param" "maybe type" "temp"
    (874642 'move' call_tmp[874639](224689 call chpl__isRectangularDomType t[224653]))
    (497189 'move' tmp[497178](224686 call ! call_tmp[874639]))
    unknown call_tmp[874644] "expr temp" "maybe param" "maybe type" "temp"
    (874647 'move' call_tmp[874644](497191 call _cond_invalid tmp[497178]))
    if call_tmp[874644]
    {
      (497194 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[693845] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[693846] "maybe param" "temp"
    unknown call_tmp[874649] "expr temp" "maybe param" "maybe type" "temp"
    (874652 'move' call_tmp[874649](497179 call isTrue tmp[497178]))
    (693851 'move' tmp[693846](693849 call _cond_test call_tmp[874649]))
    if tmp[693846]
    {
      (693856 'move' tmp[693845](693853 '_paramFoldLogical' tmp[693846] 1))
    }
    {
      unknown tmp[693858] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[874656] "expr temp" "maybe param" "maybe type" "temp"
      (874659 'move' call_tmp[874656](224697 call(224694 call (partial) isRectangular _mt[203] d[224649])))
      unknown call_tmp[874661] "expr temp" "maybe param" "maybe type" "temp"
      (874664 'move' call_tmp[874661](224691 call ! call_tmp[874656]))
      (693860 'move' tmp[693858](497183 call isTrue call_tmp[874661]))
      (693865 'move' tmp[693845](693862 '_paramFoldLogical' tmp[693846] tmp[693858]))
    }
    unknown call_tmp[874666] "expr temp" "maybe param" "maybe type" "temp"
    (874669 'move' call_tmp[874666](224698 call _cond_test tmp[693845]))
    if call_tmp[874666]
    {
      unknown call_tmp[874671] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (874674 'move' call_tmp[874671](224667 'typeof' d[224649]))
      unknown call_tmp[874676] "expr temp" "maybe param" "maybe type" "temp"
      (874679 'move' call_tmp[874676](224664 call : call_tmp[874671] string[244]))
      unknown call_tmp[874681] "expr temp" "maybe param" "maybe type" "temp"
      (874684 'move' call_tmp[874681](224670 call : t[224653] string[244]))
      (224660 call compilerError "cast from " call_tmp[874676] " to " call_tmp[874681] " is not available")
    }
    {
      unknown call_tmp[874688] "expr temp" "maybe param" "maybe type" "temp"
      (874691 'move' call_tmp[874688](224681 call(224678 call (partial) chpl_domainCastHelper _mt[203] d[224649]) t[224653]))
      (621314 'move' ret[621309](621313 'deref' call_tmp[874688]))
      gotoReturn _end_:[621307] _end_:[621307]
    }
    label _end_:[621307]
    (621311 return ret[621309])
  }
  function _domain[225034](?).chpl_domainCastHelper[224706](arg _mt[224714]:_MT[201], arg this[224708]:_domain[225034](?), arg t[224711]:_domain[225034](?)) : _unknown[42] throws "inline" "method" "primary method"
  {
    unknown ret[621320] "RVV" "temp"
    unknown tmpD[224718] "dead at end of block" "insert auto destroy"
    (649586 'default init var' tmpD[224718] t[224711])
    (224721 'end of statement')
    const d[224723] "dead at end of block" "const" "ref var"
    (649591 'init ref decl' d[224723])
    (649589 'move' d[224723](649588 'addr of' this[224708]))
    (224726 'end of statement')
    unknown call_tmp[874695] "expr temp" "maybe param" "maybe type" "temp"
    (874698 'move' call_tmp[874695](224830 call rank _mt[203] tmpD[224718]))
    unknown call_tmp[874702] "expr temp" "maybe param" "maybe type" "temp"
    (874705 'move' call_tmp[874702](224834 call rank _mt[203] d[224723]))
    unknown call_tmp[874707] "expr temp" "maybe param" "maybe type" "temp"
    (874710 'move' call_tmp[874707](224827 call != call_tmp[874695] call_tmp[874702]))
    unknown call_tmp[874712] "expr temp" "maybe param" "maybe type" "temp"
    (874715 'move' call_tmp[874712](224837 call _cond_test call_tmp[874707]))
    if call_tmp[874712]
    {
      (224728 call compilerError "rank mismatch in cast")
    }
    {
      unknown call_tmp[874719] "maybe param" "maybe type" "temp"
      (874722 'move' call_tmp[874719](224740 call(224737 call (partial) getIndices _mt[203] d[224723])))
      unknown inds[224735] "dead at end of block" "insert auto destroy"
      (649593 'init var' inds[224735] call_tmp[874719])
      (224742 'end of statement')
      { scopeless type
        unknown call_type_tmp[578313] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[874726] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (874729 'move' call_tmp[874726](224749 call(224746 call (partial) getIndices _mt[203] tmpD[224718])))
        (578317 'move' call_type_tmp[578313](224750 'typeof' call_tmp[874726]))
      }
      unknown newInds[224744] "dead at end of block" "insert auto destroy"
      (649595 'default init var' newInds[224744] call_type_tmp[578313])
      (224752 'end of statement' d[224723] tmpD[224718])
      {
        unknown i[224753] "dead at end of block" "index var" "insert auto destroy"
        (649597 'init var' i[224753] 0)
        (560767 'end of statement')
        unknown tmp[224780] "maybe param" "temp"
        unknown call_tmp[874733] "expr temp" "maybe param" "maybe type" "temp"
        (874736 'move' call_tmp[874733](224759 call rank _mt[203] tmpD[224718]))
        unknown call_tmp[874738] "expr temp" "maybe param" "maybe type" "temp"
        (874741 'move' call_tmp[874738](224756 call - call_tmp[874733] 1))
        (224792 'move' tmp[224780](224790 call chpl_compute_low_param_loop_bound 0 call_tmp[874738]))
        unknown tmp[224781] "maybe param" "temp"
        unknown call_tmp[874745] "expr temp" "maybe param" "maybe type" "temp"
        (874748 'move' call_tmp[874745](224799 call rank _mt[203] tmpD[224718]))
        unknown call_tmp[874750] "expr temp" "maybe param" "maybe type" "temp"
        (874753 'move' call_tmp[874750](224797 call - call_tmp[874745] 1))
        (224805 'move' tmp[224781](224803 call chpl_compute_high_param_loop_bound 0 call_tmp[874750]))
        unknown tmp[224782] "maybe param" "temp"
        (224808 'move' tmp[224782] 1)
        ParamForLoop[224810]
        { i[224753] tmp[224780] tmp[224781] tmp[224782]
          {
            { scopeless type
              unknown call_type_tmp[578319] "expr temp" "maybe type" "temp" "type variable"
              unknown call_tmp[874755] "expr temp" "maybe param" "used in type" "maybe type" "temp"
              (874758 'move' call_tmp[874755](224777 call newInds[224744] i[224753]))
              (578323 'move' call_type_tmp[578319](224779 'typeof' call_tmp[874755]))
            }
            unknown call_tmp[874760] "expr temp" "maybe param" "maybe type" "temp"
            (874763 'move' call_tmp[874760](224769 call newInds[224744] i[224753]))
            unknown call_tmp[874765] "expr temp" "maybe param" "maybe type" "temp"
            (874768 'move' call_tmp[874765](224774 call inds[224735] i[224753]))
            unknown call_tmp[874770] "expr temp" "maybe param" "maybe type" "temp"
            (874773 'move' call_tmp[874770](224771 call : call_tmp[874765] call_type_tmp[578319]))
            (224766 call = call_tmp[874760] call_tmp[874770])
            (560768 'end of statement' newInds[224744] i[224753] inds[224735] i[224753])
          }
        }
        label _unused_continueLabel[224784]
        label _breakLabel[224783]
      }
      (224823 call(224820 call (partial) setIndices _mt[203] tmpD[224718]) newInds[224744])
      (560773 'end of statement' tmpD[224718] newInds[224744])
      (621325 'move' ret[621320](621324 'deref' tmpD[224718]))
      gotoReturn _end_chpl_domainCastHelper[621318] _end_chpl_domainCastHelper[621318]
      (560776 'end of statement' tmpD[224718])
    }
    label _end_chpl_domainCastHelper[621318]
    (621322 return ret[621320])
  }
  function _domain[225034](?).chpl_domainCastIsSafe[224844](arg _mt[224852]:_MT[201], arg this[224846]:_domain[225034](?), arg t[224849]:_domain[225034](?)) param : _unknown[42] "method" "primary method"
  {
    unknown ret[621331] "RVV" "param" "temp"
    unknown dst[224856] "dead at end of block" "insert auto destroy"
    (649599 'default init var' dst[224856] t[224849])
    (224859 'end of statement')
    unknown tmp[497199] "maybe param" "temp"
    (497210 'move' tmp[497199](224868 call(224865 call (partial) isRectangular _mt[203] this[224846])))
    unknown call_tmp[874779] "expr temp" "maybe param" "maybe type" "temp"
    (874782 'move' call_tmp[874779](497212 call _cond_invalid tmp[497199]))
    if call_tmp[874779]
    {
      (497215 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[693872] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[693873] "maybe param" "temp"
    unknown call_tmp[874784] "expr temp" "maybe param" "maybe type" "temp"
    (874787 'move' call_tmp[874784](497200 call isTrue tmp[497199]))
    (693878 'move' tmp[693873](693876 call _cond_test call_tmp[874784]))
    if tmp[693873]
    {
      unknown tmp[693880] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[874791] "expr temp" "maybe param" "maybe type" "temp"
      (874794 'move' call_tmp[874791](224873 call(224870 call (partial) isRectangular _mt[203] dst[224856])))
      (693882 'move' tmp[693880](497203 call isTrue call_tmp[874791]))
      (693887 'move' tmp[693872](693884 '_paramFoldLogical' tmp[693873] tmp[693880]))
    }
    {
      (693892 'move' tmp[693872](693889 '_paramFoldLogical' tmp[693873] 0))
    }
    (224861 call compilerAssert tmp[693872])
    (560779 'end of statement' dst[224856])
    { scopeless type
      unknown call_type_tmp[578325] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[874798] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (874801 'move' call_tmp[874798](224887 call(224884 call (partial) dim _mt[203] dst[224856]) 0))
      (578329 'move' call_type_tmp[578325](224889 'typeof' call_tmp[874798]))
    }
    unknown call_tmp[874805] "expr temp" "maybe param" "maybe type" "temp"
    (874808 'move' call_tmp[874805](224881 call(224878 call (partial) dim _mt[203] this[224846]) 0))
    unknown call_tmp[874810] "expr temp" "maybe param" "maybe type" "temp"
    (874813 'move' call_tmp[874810](224876 call chpl_castIsSafe call_tmp[874805] call_type_tmp[578325]))
    (621336 'move' ret[621331](621335 'deref' call_tmp[874810]))
    gotoReturn _end_chpl_domainCastIsSafe[621329] _end_chpl_domainCastIsSafe[621329]
    (560781 'end of statement' dst[224856])
    label _end_chpl_domainCastIsSafe[621329]
    (621333 return ret[621331])
  }
  function _domain[225034](?).:[224892](arg _mt[224904]:_MT[201], arg this[224894]:_domain[225034](?), arg val[224897]:_domain[225034](?), arg t[224901]:string[244]) : _unknown[42] "method" "primary method" "operator"
  {
    unknown ret[621342] "RVV" "temp"
    unknown call_tmp[874817] "expr temp" "maybe param" "maybe type" "temp"
    (874820 'move' call_tmp[874817](224945 call _value _mt[203] val[224897]))
    unknown call_tmp[874822] "expr temp" "maybe param" "maybe type" "temp"
    (874825 'move' call_tmp[874822](224943 call canResolveMethod call_tmp[874817] "doiToString"))
    unknown call_tmp[874827] "expr temp" "maybe param" "maybe type" "temp"
    (874830 'move' call_tmp[874827](224951 call _cond_test call_tmp[874822]))
    if call_tmp[874827]
    {
      unknown call_tmp[874834] "expr temp" "maybe param" "maybe type" "temp"
      (874837 'move' call_tmp[874834](224913 call _value _mt[203] val[224897]))
      unknown call_tmp[874841] "expr temp" "maybe param" "maybe type" "temp"
      (874844 'move' call_tmp[874841](224921 call(224918 call (partial) doiToString _mt[203] call_tmp[874834])))
      (621347 'move' ret[621342](621346 'deref' call_tmp[874841]))
      gotoReturn _end_:[621340] _end_:[621340]
    }
    {
      unknown call_tmp[874848] "expr temp" "maybe param" "maybe type" "temp"
      (874851 'move' call_tmp[874848](224939 call(224936 call (partial) format _mt[203] "%\?") val[224897]))
      (621352 'move' ret[621342](621351 'deref' call_tmp[874848]))
      gotoReturn _end_:[621340] _end_:[621340]
      (396822 'used modules list'(224931 'import' FormattedIO[208298].{string}))
    }
    label _end_:[621340]
    (621344 return ret[621342])
    (396820 'used modules list'(224908 'use' Reflection[1804]))
  }
  function _domain[225034](?).isRectangular[224957](arg _mt[224961]:_MT[201], arg this[224959]:_domain[225034](?)) param : _unknown[42] "method" "primary method"
  {
    unknown ret[621358] "RVV" "param" "temp"
    unknown call_tmp[874855] "expr temp" "maybe param" "maybe type" "temp"
    (874858 'move' call_tmp[874855](224966 call _value _mt[203] this[224959]))
    unknown call_tmp[874862] "expr temp" "maybe param" "maybe type" "temp"
    (874865 'move' call_tmp[874862](224972 call(224969 call (partial) isRectangular _mt[203] call_tmp[874855])))
    (621363 'move' ret[621358](621362 'deref' call_tmp[874862]))
    (621360 return ret[621358])
  }
  function _domain[225034](?).isIrregular[224975](arg _mt[224979]:_MT[201], arg this[224977]:_domain[225034](?)) param : _unknown[42] "method" "primary method"
  {
    unknown ret[621367] "RVV" "param" "temp"
    unknown tmp[497220] "maybe param" "temp"
    (497231 'move' tmp[497220](224989 call(224986 call (partial) isSparse _mt[203] this[224977])))
    unknown call_tmp[874869] "expr temp" "maybe param" "maybe type" "temp"
    (874872 'move' call_tmp[874869](497233 call _cond_invalid tmp[497220]))
    if call_tmp[874869]
    {
      (497236 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[693899] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[693900] "maybe param" "temp"
    unknown call_tmp[874874] "expr temp" "maybe param" "maybe type" "temp"
    (874877 'move' call_tmp[874874](497221 call isTrue tmp[497220]))
    (693905 'move' tmp[693900](693903 call _cond_test call_tmp[874874]))
    if tmp[693900]
    {
      (693910 'move' tmp[693899](693907 '_paramFoldLogical' tmp[693900] 1))
    }
    {
      unknown tmp[693912] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[874881] "expr temp" "maybe param" "maybe type" "temp"
      (874884 'move' call_tmp[874881](224994 call(224991 call (partial) isAssociative _mt[203] this[224977])))
      (693914 'move' tmp[693912](497225 call isTrue call_tmp[874881]))
      (693919 'move' tmp[693899](693916 '_paramFoldLogical' tmp[693900] tmp[693912]))
    }
    (621372 'move' ret[621367](621371 'deref' tmp[693899]))
    (621369 return ret[621367])
  }
  function _domain[225034](?).isAssociative[224997](arg _mt[225001]:_MT[201], arg this[224999]:_domain[225034](?)) param : _unknown[42] "method" "primary method"
  {
    unknown ret[621376] "RVV" "param" "temp"
    unknown call_tmp[874888] "expr temp" "maybe param" "maybe type" "temp"
    (874891 'move' call_tmp[874888](225006 call _value _mt[203] this[224999]))
    unknown call_tmp[874895] "expr temp" "maybe param" "maybe type" "temp"
    (874898 'move' call_tmp[874895](225012 call(225009 call (partial) isAssociative _mt[203] call_tmp[874888])))
    (621381 'move' ret[621376](621380 'deref' call_tmp[874895]))
    (621378 return ret[621376])
  }
  function _domain[225034](?).isSparse[225015](arg _mt[225019]:_MT[201], arg this[225017]:_domain[225034](?)) param : _unknown[42] "method" "primary method"
  {
    unknown ret[621385] "RVV" "param" "temp"
    unknown call_tmp[874902] "expr temp" "maybe param" "maybe type" "temp"
    (874905 'move' call_tmp[874902](225024 call _value _mt[203] this[225017]))
    unknown call_tmp[874909] "expr temp" "maybe param" "maybe type" "temp"
    (874912 'move' call_tmp[874909](225030 call(225027 call (partial) isSparse _mt[203] call_tmp[874902])))
    (621390 'move' ret[621385](621389 'deref' call_tmp[874909]))
    (621387 return ret[621385])
  }
  type _domain[225034](?) val _pid[216270]:int(64)[10] int(64)[10] unknown _instance[216275] "owned" val _unowned[216279]:bool[19] bool[19] forwarding ( )
  function makeRectangularDomain[225036](arg low[225040]:_any[141](?), arg high[225045]:_any[141](?), param arg inclusive[225050]:bool[19] =
  1) : _unknown[42] "@unstable"
  {
    unknown ret[621394] "RVV" "temp"
    unknown tmp[693926] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[693927] "maybe param" "temp"
    (693932 'move' tmp[693927](693930 call _cond_test inclusive[225050]))
    if tmp[693927]
    {
      unknown tmp[693934] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[874914] "expr temp" "maybe param" "maybe type" "temp"
      (874917 'move' call_tmp[874914](225068 call chpl_build_bounded_range low[225040] high[225045]))
      (693936 'move' tmp[693934](225071 call chpl__buildDomainExpr call_tmp[874914] 1))
      (693941 'move' tmp[693926](693938 '_paramFoldLogical' tmp[693927] tmp[693934]))
    }
    {
      unknown tmp[693943] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[874919] "expr temp" "maybe param" "maybe type" "temp"
      (874922 'move' call_tmp[874919](225076 call chpl__nudgeHighBound high[225045]))
      unknown call_tmp[874924] "expr temp" "maybe param" "maybe type" "temp"
      (874927 'move' call_tmp[874924](225078 call chpl_build_bounded_range low[225040] call_tmp[874919]))
      (693945 'move' tmp[693943](225081 call chpl__buildDomainExpr call_tmp[874924] 1))
      (693950 'move' tmp[693926](693947 '_paramFoldLogical' tmp[693927] tmp[693943]))
    }
    (621399 'move' ret[621394](621398 'deref' tmp[693926]))
    (621396 return ret[621394])
  }
  where {
    unknown tmp[497241] "maybe param" "temp"
    unknown call_tmp[874929] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (874932 'move' call_tmp[874929](528876 'typeof' low[225040]))
    (497252 'move' tmp[497241](225057 call chpl_isValidRangeIdxType call_tmp[874929]))
    unknown call_tmp[874934] "expr temp" "maybe param" "maybe type" "temp"
    (874937 'move' call_tmp[874934](497254 call _cond_invalid tmp[497241]))
    if call_tmp[874934]
    {
      (497257 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[693957] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[693958] "maybe param" "temp"
    unknown call_tmp[874939] "expr temp" "maybe param" "maybe type" "temp"
    (874942 'move' call_tmp[874939](497242 call isTrue tmp[497241]))
    (693963 'move' tmp[693958](693961 call _cond_test call_tmp[874939]))
    if tmp[693958]
    {
      unknown tmp[693965] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[874944] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (874947 'move' call_tmp[874944](528878 'typeof' high[225045]))
      unknown call_tmp[874949] "expr temp" "maybe param" "maybe type" "temp"
      (874952 'move' call_tmp[874949](225060 call chpl_isValidRangeIdxType call_tmp[874944]))
      (693967 'move' tmp[693965](497245 call isTrue call_tmp[874949]))
      (693972 'move' tmp[693957](693969 '_paramFoldLogical' tmp[693958] tmp[693965]))
    }
    {
      (693977 'move' tmp[693957](693974 '_paramFoldLogical' tmp[693958] 0))
    }
    (1001604 call chpl_statementLevelSymbol tmp[693957])
  }
  function makeRectangularDomain[225089](arg low[225093]:_any[141](?), arg high[225098]:_any[141](?), param arg inclusive[225103]:bool[19] =
  1) : _unknown[42] "@unstable"
  {
    unknown ret[621403] "RVV" "temp"
    unknown call_tmp[874956] "maybe param" "maybe type" "temp"
    (874959 'move' call_tmp[874956](225165 call size _mt[203] low[225093]))
    unknown size[225163] "dead at end of block" "param"
    (649601 'init var' size[225163] call_tmp[874956])
    (225169 'end of statement')
    unknown eltType[225171] "dead at end of block" "insert auto destroy" "split inited" "type variable" _gsplitinit[39]
    { scopeless type
      unknown call_type_tmp[578331] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[874961] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (874964 'move' call_tmp[874961](225197 call low[225093] 0))
      (578335 'move' call_type_tmp[578331](225199 'typeof' call_tmp[874961]))
    }
    { scopeless type
      unknown call_type_tmp[578337] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[874966] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (874969 'move' call_tmp[874966](225201 call high[225098] 0))
      (578341 'move' call_type_tmp[578337](225203 'typeof' call_tmp[874966]))
    }
    unknown call_tmp[874971] "expr temp" "maybe param" "maybe type" "temp"
    (874974 'move' call_tmp[874971](225194 call == call_type_tmp[578331] call_type_tmp[578337]))
    unknown call_tmp[874976] "expr temp" "maybe param" "maybe type" "temp"
    (874979 'move' call_tmp[874976](225204 call _cond_test call_tmp[874971]))
    if call_tmp[874976]
    {
      { scopeless type
        unknown call_type_tmp[578343] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[874981] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (874984 'move' call_tmp[874981](225178 call low[225093] 0))
        (578347 'move' call_type_tmp[578343](225180 'typeof' call_tmp[874981]))
      }
      (649604 'move' eltType[225171] call_type_tmp[578343])
      (560791 'end of statement' eltType[225171])
    }
    {
      { scopeless type
        unknown call_type_tmp[578349] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[874986] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (874989 'move' call_tmp[874986](225188 call low[225093] 0))
        unknown call_tmp[874991] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (874994 'move' call_tmp[874991](225191 call high[225098] 0))
        unknown call_tmp[874996] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (874999 'move' call_tmp[874996](225185 call + call_tmp[874986] call_tmp[874991]))
        (578353 'move' call_type_tmp[578349](225193 'typeof' call_tmp[874996]))
      }
      (649607 'move' eltType[225171] call_type_tmp[578349])
      (560793 'end of statement' eltType[225171])
    }
    unknown ranges[225209] "dead at end of block" "insert auto destroy"
    unknown call_tmp[875001] "expr temp" "maybe param" "maybe type" "temp"
    (875004 'move' call_tmp[875001](225214 call range[240](?) eltType[225171]))
    unknown call_tmp[875006] "expr temp" "maybe param" "maybe type" "temp"
    (875009 'move' call_tmp[875006](225210 call * size[225163] call_tmp[875001]))
    (649609 'default init var' ranges[225209] call_tmp[875006])
    (225217 'end of statement')
    {
      unknown i[225218] "dead at end of block" "index var" "insert auto destroy"
      (649611 'init var' i[225218] 0)
      (560796 'end of statement')
      unknown tmp[225264] "maybe param" "temp"
      unknown call_tmp[875011] "expr temp" "maybe param" "maybe type" "temp"
      (875014 'move' call_tmp[875011](225222 call chpl__nudgeHighBound size[225163]))
      (225276 'move' tmp[225264](225274 call chpl_compute_low_param_loop_bound 0 call_tmp[875011]))
      unknown tmp[225265] "maybe param" "temp"
      unknown call_tmp[875016] "expr temp" "maybe param" "maybe type" "temp"
      (875019 'move' call_tmp[875016](225281 call chpl__nudgeHighBound size[225163]))
      (225285 'move' tmp[225265](225283 call chpl_compute_high_param_loop_bound 0 call_tmp[875016]))
      unknown tmp[225266] "maybe param" "temp"
      (225288 'move' tmp[225266] 1)
      ParamForLoop[225290]
      { i[225218] tmp[225264] tmp[225265] tmp[225266]
        {
          unknown call_tmp[875021] "expr temp" "maybe param" "maybe type" "temp"
          (875024 'move' call_tmp[875021](225258 call _cond_test inclusive[225103]))
          if call_tmp[875021]
          {
            unknown call_tmp[875026] "expr temp" "maybe param" "maybe type" "temp"
            (875029 'move' call_tmp[875026](225230 call ranges[225209] i[225218]))
            unknown call_tmp[875031] "expr temp" "maybe param" "maybe type" "temp"
            (875034 'move' call_tmp[875031](225233 call low[225093] i[225218]))
            unknown call_tmp[875036] "expr temp" "maybe param" "maybe type" "temp"
            (875039 'move' call_tmp[875036](225236 call high[225098] i[225218]))
            unknown call_tmp[875041] "expr temp" "maybe param" "maybe type" "temp"
            (875044 'move' call_tmp[875041](225238 call chpl_build_bounded_range call_tmp[875031] call_tmp[875036]))
            (225227 call = call_tmp[875026] call_tmp[875041])
            (560797 'end of statement' ranges[225209] i[225218])
          }
          {
            unknown call_tmp[875046] "expr temp" "maybe param" "maybe type" "temp"
            (875049 'move' call_tmp[875046](225244 call ranges[225209] i[225218]))
            unknown call_tmp[875051] "expr temp" "maybe param" "maybe type" "temp"
            (875054 'move' call_tmp[875051](225247 call low[225093] i[225218]))
            unknown call_tmp[875056] "expr temp" "maybe param" "maybe type" "temp"
            (875059 'move' call_tmp[875056](225250 call high[225098] i[225218]))
            unknown call_tmp[875061] "expr temp" "maybe param" "maybe type" "temp"
            (875064 'move' call_tmp[875061](225252 call chpl__nudgeHighBound call_tmp[875056]))
            unknown call_tmp[875066] "expr temp" "maybe param" "maybe type" "temp"
            (875069 'move' call_tmp[875066](225254 call chpl_build_bounded_range call_tmp[875051] call_tmp[875061]))
            (225241 call = call_tmp[875046] call_tmp[875066])
            (560800 'end of statement' ranges[225209] i[225218])
          }
        }
      }
      label _unused_continueLabel[225268]
      label _breakLabel[225267]
    }
    unknown call_tmp[875071] "maybe param" "maybe type" "temp"
    (875074 'move' call_tmp[875071](225302 call chpl__buildDomainRuntimeType defaultDist[288287] size[225163] eltType[225171]))
    const d[225300] "dead at end of block" "const" "insert auto destroy"
    (649613 'init var' d[225300] ranges[225209] call_tmp[875071])
    (225308 'end of statement' eltType[225171] ranges[225209])
    (621408 'move' ret[621403](621407 'deref' d[225300]))
    gotoReturn _end_makeRectangularDomain[621401] _end_makeRectangularDomain[621401]
    (560804 'end of statement' d[225300])
    label _end_makeRectangularDomain[621401]
    (621405 return ret[621403])
  }
  where {
    unknown tmp[497262] "maybe param" "temp"
    unknown tmp[497283] "maybe param" "temp"
    unknown tmp[497304] "maybe param" "temp"
    unknown tmp[497325] "maybe param" "temp"
    unknown tmp[497346] "maybe param" "temp"
    (497357 'move' tmp[497346](225118 call isTuple low[225093]))
    unknown call_tmp[875076] "expr temp" "maybe param" "maybe type" "temp"
    (875079 'move' call_tmp[875076](497359 call _cond_invalid tmp[497346]))
    if call_tmp[875076]
    {
      (497362 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[693984] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[693985] "maybe param" "temp"
    unknown call_tmp[875081] "expr temp" "maybe param" "maybe type" "temp"
    (875084 'move' call_tmp[875081](497347 call isTrue tmp[497346]))
    (693990 'move' tmp[693985](693988 call _cond_test call_tmp[875081]))
    if tmp[693985]
    {
      unknown tmp[693992] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[875086] "expr temp" "maybe param" "maybe type" "temp"
      (875089 'move' call_tmp[875086](225121 call isTuple high[225098]))
      (693994 'move' tmp[693992](497350 call isTrue call_tmp[875086]))
      (693999 'move' tmp[693984](693996 '_paramFoldLogical' tmp[693985] tmp[693992]))
    }
    {
      (694004 'move' tmp[693984](694001 '_paramFoldLogical' tmp[693985] 0))
    }
    (497336 'move' tmp[497325] tmp[693984])
    unknown call_tmp[875091] "expr temp" "maybe param" "maybe type" "temp"
    (875094 'move' call_tmp[875091](497338 call _cond_invalid tmp[497325]))
    if call_tmp[875091]
    {
      (497341 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[694011] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[694012] "maybe param" "temp"
    unknown call_tmp[875096] "expr temp" "maybe param" "maybe type" "temp"
    (875099 'move' call_tmp[875096](497326 call isTrue tmp[497325]))
    (694017 'move' tmp[694012](694015 call _cond_test call_tmp[875096]))
    if tmp[694012]
    {
      unknown tmp[694019] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[875101] "expr temp" "maybe param" "maybe type" "temp"
      (875104 'move' call_tmp[875101](225124 call isHomogeneousTuple low[225093]))
      (694021 'move' tmp[694019](497329 call isTrue call_tmp[875101]))
      (694026 'move' tmp[694011](694023 '_paramFoldLogical' tmp[694012] tmp[694019]))
    }
    {
      (694031 'move' tmp[694011](694028 '_paramFoldLogical' tmp[694012] 0))
    }
    (497315 'move' tmp[497304] tmp[694011])
    unknown call_tmp[875106] "expr temp" "maybe param" "maybe type" "temp"
    (875109 'move' call_tmp[875106](497317 call _cond_invalid tmp[497304]))
    if call_tmp[875106]
    {
      (497320 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[694038] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[694039] "maybe param" "temp"
    unknown call_tmp[875111] "expr temp" "maybe param" "maybe type" "temp"
    (875114 'move' call_tmp[875111](497305 call isTrue tmp[497304]))
    (694044 'move' tmp[694039](694042 call _cond_test call_tmp[875111]))
    if tmp[694039]
    {
      unknown tmp[694046] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[875116] "expr temp" "maybe param" "maybe type" "temp"
      (875119 'move' call_tmp[875116](225127 call isHomogeneousTuple high[225098]))
      (694048 'move' tmp[694046](497308 call isTrue call_tmp[875116]))
      (694053 'move' tmp[694038](694050 '_paramFoldLogical' tmp[694039] tmp[694046]))
    }
    {
      (694058 'move' tmp[694038](694055 '_paramFoldLogical' tmp[694039] 0))
    }
    (497294 'move' tmp[497283] tmp[694038])
    unknown call_tmp[875121] "expr temp" "maybe param" "maybe type" "temp"
    (875124 'move' call_tmp[875121](497296 call _cond_invalid tmp[497283]))
    if call_tmp[875121]
    {
      (497299 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[694065] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[694066] "maybe param" "temp"
    unknown call_tmp[875126] "expr temp" "maybe param" "maybe type" "temp"
    (875129 'move' call_tmp[875126](497284 call isTrue tmp[497283]))
    (694071 'move' tmp[694066](694069 call _cond_test call_tmp[875126]))
    if tmp[694066]
    {
      unknown tmp[694073] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[875133] "expr temp" "maybe param" "maybe type" "temp"
      (875136 'move' call_tmp[875133](225132 call size _mt[203] low[225093]))
      unknown call_tmp[875140] "expr temp" "maybe param" "maybe type" "temp"
      (875143 'move' call_tmp[875140](225136 call size _mt[203] high[225098]))
      unknown call_tmp[875145] "expr temp" "maybe param" "maybe type" "temp"
      (875148 'move' call_tmp[875145](225129 call == call_tmp[875133] call_tmp[875140]))
      (694075 'move' tmp[694073](497287 call isTrue call_tmp[875145]))
      (694080 'move' tmp[694065](694077 '_paramFoldLogical' tmp[694066] tmp[694073]))
    }
    {
      (694085 'move' tmp[694065](694082 '_paramFoldLogical' tmp[694066] 0))
    }
    (497273 'move' tmp[497262] tmp[694065])
    unknown call_tmp[875150] "expr temp" "maybe param" "maybe type" "temp"
    (875153 'move' call_tmp[875150](497275 call _cond_invalid tmp[497262]))
    if call_tmp[875150]
    {
      (497278 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[694119] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[694120] "maybe param" "temp"
    unknown call_tmp[875155] "expr temp" "maybe param" "maybe type" "temp"
    (875158 'move' call_tmp[875155](497263 call isTrue tmp[497262]))
    (694125 'move' tmp[694120](694123 call _cond_test call_tmp[875155]))
    if tmp[694120]
    {
      unknown tmp[497367] "maybe param" "temp"
      { scopeless type
        unknown call_type_tmp[578355] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[875160] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (875163 'move' call_tmp[875160](225148 call high[225098] 0))
        (578359 'move' call_type_tmp[578355](225150 'typeof' call_tmp[875160]))
      }
      { scopeless type
        unknown call_type_tmp[578361] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[875165] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (875168 'move' call_tmp[875165](225144 call low[225093] 0))
        (578365 'move' call_type_tmp[578361](225146 'typeof' call_tmp[875165]))
      }
      (497378 'move' tmp[497367](395470 'is_coercible' call_type_tmp[578355] call_type_tmp[578361]))
      unknown call_tmp[875170] "expr temp" "maybe param" "maybe type" "temp"
      (875173 'move' call_tmp[875170](497380 call _cond_invalid tmp[497367]))
      if call_tmp[875170]
      {
        (497383 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[694092] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[694093] "maybe param" "temp"
      unknown call_tmp[875175] "expr temp" "maybe param" "maybe type" "temp"
      (875178 'move' call_tmp[875175](497368 call isTrue tmp[497367]))
      (694098 'move' tmp[694093](694096 call _cond_test call_tmp[875175]))
      if tmp[694093]
      {
        (694103 'move' tmp[694092](694100 '_paramFoldLogical' tmp[694093] 1))
      }
      {
        { scopeless type
          unknown call_type_tmp[578367] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[875180] "expr temp" "maybe param" "used in type" "maybe type" "temp"
          (875183 'move' call_tmp[875180](225158 call low[225093] 0))
          (578371 'move' call_type_tmp[578367](225160 'typeof' call_tmp[875180]))
        }
        { scopeless type
          unknown call_type_tmp[578373] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[875185] "expr temp" "maybe param" "used in type" "maybe type" "temp"
          (875188 'move' call_tmp[875185](225154 call high[225098] 0))
          (578377 'move' call_type_tmp[578373](225156 'typeof' call_tmp[875185]))
        }
        unknown tmp[694105] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[875190] "expr temp" "maybe param" "maybe type" "temp"
        (875193 'move' call_tmp[875190](395471 'is_coercible' call_type_tmp[578367] call_type_tmp[578373]))
        (694107 'move' tmp[694105](497372 call isTrue call_tmp[875190]))
        (694112 'move' tmp[694092](694109 '_paramFoldLogical' tmp[694093] tmp[694105]))
      }
      unknown tmp[694127] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (694129 'move' tmp[694127](497266 call isTrue tmp[694092]))
      (694134 'move' tmp[694119](694131 '_paramFoldLogical' tmp[694120] tmp[694127]))
    }
    {
      (694139 'move' tmp[694119](694136 '_paramFoldLogical' tmp[694120] 0))
    }
    (1001606 call chpl_statementLevelSymbol tmp[694119])
  }
  function makeRectangularDomain[225314](arg low[225318]:_any[141](?), arg high[225323]:_any[141](?), param arg inclusive[225328]:bool[19] =
  1) : _unknown[42] "@unstable"
  {
    unknown ret[621414] "RVV" "temp"
    unknown size[225342] "dead at end of block" "param"
    unknown tmp[694146] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[694147] "maybe param" "temp"
    unknown call_tmp[875195] "expr temp" "maybe param" "maybe type" "temp"
    (875198 'move' call_tmp[875195](225344 call isTuple low[225318]))
    (694152 'move' tmp[694147](694150 call _cond_test call_tmp[875195]))
    if tmp[694147]
    {
      unknown tmp[694154] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (694156 'move' tmp[694154](225347 call size _mt[203] low[225318]))
      (694161 'move' tmp[694146](694158 '_paramFoldLogical' tmp[694147] tmp[694154]))
    }
    {
      unknown tmp[694163] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (694165 'move' tmp[694163](225351 call size _mt[203] high[225323]))
      (694170 'move' tmp[694146](694167 '_paramFoldLogical' tmp[694147] tmp[694163]))
    }
    (649615 'init var' size[225342] tmp[694146])
    (225358 'end of statement')
    unknown eltType[225360] "dead at end of block" "insert auto destroy" "type variable"
    unknown tmp[694223] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[694224] "maybe param" "temp"
    unknown call_tmp[875204] "expr temp" "maybe param" "maybe type" "temp"
    (875207 'move' call_tmp[875204](649618 call isTuple low[225318]))
    (694229 'move' tmp[694224](694227 call _cond_test call_tmp[875204]))
    if tmp[694224]
    {
      { scopeless type
        unknown call_type_tmp[649622] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[875209] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (875212 'move' call_tmp[875209](649628 call low[225318] 0))
        (649624 'move' call_type_tmp[649622](649626 'typeof' call_tmp[875209]))
      }
      unknown tmp[694177] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[694178] "maybe param" "temp"
      unknown call_tmp[875214] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (875217 'move' call_tmp[875214](649633 'typeof' high[225323]))
      unknown call_tmp[875219] "expr temp" "maybe param" "maybe type" "temp"
      (875222 'move' call_tmp[875219](649631 call == call_type_tmp[649622] call_tmp[875214]))
      (694183 'move' tmp[694178](694181 call _cond_test call_tmp[875219]))
      if tmp[694178]
      {
        { scopeless type
          unknown call_type_tmp[649637] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[875224] "expr temp" "maybe param" "used in type" "maybe type" "temp"
          (875227 'move' call_tmp[875224](649643 call low[225318] 0))
          (649639 'move' call_type_tmp[649637](649641 'typeof' call_tmp[875224]))
        }
        (694188 'move' tmp[694177](694185 '_paramFoldLogical' tmp[694178] call_type_tmp[649637]))
      }
      {
        { scopeless type
          unknown call_type_tmp[649648] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[875229] "expr temp" "maybe param" "used in type" "maybe type" "temp"
          (875232 'move' call_tmp[875229](649656 call low[225318] 0))
          unknown call_tmp[875234] "expr temp" "maybe param" "used in type" "maybe type" "temp"
          (875237 'move' call_tmp[875234](649654 call + call_tmp[875229] high[225323]))
          (649650 'move' call_type_tmp[649648](649652 'typeof' call_tmp[875234]))
        }
        (694193 'move' tmp[694177](694190 '_paramFoldLogical' tmp[694178] call_type_tmp[649648]))
      }
      (694234 'move' tmp[694223](694231 '_paramFoldLogical' tmp[694224] tmp[694177]))
    }
    {
      { scopeless type
        unknown call_type_tmp[649663] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[875239] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (875242 'move' call_tmp[875239](649669 call high[225323] 0))
        (649665 'move' call_type_tmp[649663](649667 'typeof' call_tmp[875239]))
      }
      unknown tmp[694200] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[694201] "maybe param" "temp"
      unknown call_tmp[875244] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (875247 'move' call_tmp[875244](649674 'typeof' low[225318]))
      unknown call_tmp[875249] "expr temp" "maybe param" "maybe type" "temp"
      (875252 'move' call_tmp[875249](649672 call == call_type_tmp[649663] call_tmp[875244]))
      (694206 'move' tmp[694201](694204 call _cond_test call_tmp[875249]))
      if tmp[694201]
      {
        { scopeless type
          unknown call_type_tmp[649678] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[875254] "expr temp" "maybe param" "used in type" "maybe type" "temp"
          (875257 'move' call_tmp[875254](649684 call high[225323] 0))
          (649680 'move' call_type_tmp[649678](649682 'typeof' call_tmp[875254]))
        }
        (694211 'move' tmp[694200](694208 '_paramFoldLogical' tmp[694201] call_type_tmp[649678]))
      }
      {
        { scopeless type
          unknown call_type_tmp[649689] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[875259] "expr temp" "maybe param" "used in type" "maybe type" "temp"
          (875262 'move' call_tmp[875259](649698 call high[225323] 0))
          unknown call_tmp[875264] "expr temp" "maybe param" "used in type" "maybe type" "temp"
          (875267 'move' call_tmp[875264](649695 call + low[225318] call_tmp[875259]))
          (649691 'move' call_type_tmp[649689](649693 'typeof' call_tmp[875264]))
        }
        (694216 'move' tmp[694200](694213 '_paramFoldLogical' tmp[694201] call_type_tmp[649689]))
      }
      (694239 'move' tmp[694223](694236 '_paramFoldLogical' tmp[694224] tmp[694200]))
    }
    (649703 'move' eltType[225360] tmp[694223])
    unknown ranges[225413] "dead at end of block" "insert auto destroy"
    unknown call_tmp[875269] "expr temp" "maybe param" "maybe type" "temp"
    (875272 'move' call_tmp[875269](225418 call range[240](?) eltType[225360]))
    unknown call_tmp[875274] "expr temp" "maybe param" "maybe type" "temp"
    (875277 'move' call_tmp[875274](225414 call * size[225342] call_tmp[875269]))
    (649705 'default init var' ranges[225413] call_tmp[875274])
    (225421 'end of statement')
    unknown call_tmp[875279] "expr temp" "maybe param" "maybe type" "temp"
    (875282 'move' call_tmp[875279](225629 call isTuple low[225318]))
    unknown call_tmp[875284] "expr temp" "maybe param" "maybe type" "temp"
    (875287 'move' call_tmp[875284](225631 call _cond_test call_tmp[875279]))
    if call_tmp[875284]
    {
      unknown call_tmp[875289] "expr temp" "maybe param" "maybe type" "temp"
      (875292 'move' call_tmp[875289](225442 call isHomogeneousTuple low[225318]))
      unknown call_tmp[875294] "expr temp" "maybe param" "maybe type" "temp"
      (875297 'move' call_tmp[875294](225439 call ! call_tmp[875289]))
      unknown call_tmp[875299] "expr temp" "maybe param" "maybe type" "temp"
      (875302 'move' call_tmp[875299](225444 call _cond_test call_tmp[875294]))
      if call_tmp[875299]
      {
        unknown call_tmp[875304] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (875307 'move' call_tmp[875304](225435 'typeof' low[225318]))
        unknown call_tmp[875309] "expr temp" "maybe param" "maybe type" "temp"
        (875312 'move' call_tmp[875309](225432 call : call_tmp[875304] string[244]))
        unknown call_tmp[875314] "expr temp" "maybe param" "maybe type" "temp"
        (875317 'move' call_tmp[875314](225427 call + "Domains defined using tuple bounds must use homogenous tuples, but got '" call_tmp[875309]))
        unknown call_tmp[875319] "expr temp" "maybe param" "maybe type" "temp"
        (875322 'move' call_tmp[875319](225425 call + call_tmp[875314] "'"))
        (225424 call compilerError call_tmp[875319])
      }
      {
        unknown i[225449] "dead at end of block" "index var" "insert auto destroy"
        (649707 'init var' i[225449] 0)
        (560808 'end of statement')
        unknown tmp[225491] "maybe param" "temp"
        unknown call_tmp[875324] "expr temp" "maybe param" "maybe type" "temp"
        (875327 'move' call_tmp[875324](225453 call chpl__nudgeHighBound size[225342]))
        (225503 'move' tmp[225491](225501 call chpl_compute_low_param_loop_bound 0 call_tmp[875324]))
        unknown tmp[225492] "maybe param" "temp"
        unknown call_tmp[875329] "expr temp" "maybe param" "maybe type" "temp"
        (875332 'move' call_tmp[875329](225508 call chpl__nudgeHighBound size[225342]))
        (225512 'move' tmp[225492](225510 call chpl_compute_high_param_loop_bound 0 call_tmp[875329]))
        unknown tmp[225493] "maybe param" "temp"
        (225515 'move' tmp[225493] 1)
        ParamForLoop[225517]
        { i[225449] tmp[225491] tmp[225492] tmp[225493]
          {
            unknown call_tmp[875334] "expr temp" "maybe param" "maybe type" "temp"
            (875337 'move' call_tmp[875334](225485 call _cond_test inclusive[225328]))
            if call_tmp[875334]
            {
              unknown call_tmp[875339] "expr temp" "maybe param" "maybe type" "temp"
              (875342 'move' call_tmp[875339](225461 call ranges[225413] i[225449]))
              unknown call_tmp[875344] "expr temp" "maybe param" "maybe type" "temp"
              (875347 'move' call_tmp[875344](225464 call low[225318] i[225449]))
              unknown call_tmp[875349] "expr temp" "maybe param" "maybe type" "temp"
              (875352 'move' call_tmp[875349](225467 call chpl_build_bounded_range call_tmp[875344] high[225323]))
              (225458 call = call_tmp[875339] call_tmp[875349])
              (560809 'end of statement' ranges[225413] i[225449])
            }
            {
              unknown call_tmp[875354] "expr temp" "maybe param" "maybe type" "temp"
              (875357 'move' call_tmp[875354](225473 call ranges[225413] i[225449]))
              unknown call_tmp[875359] "expr temp" "maybe param" "maybe type" "temp"
              (875362 'move' call_tmp[875359](225476 call low[225318] i[225449]))
              unknown call_tmp[875364] "expr temp" "maybe param" "maybe type" "temp"
              (875367 'move' call_tmp[875364](225479 call chpl__nudgeHighBound high[225323]))
              unknown call_tmp[875369] "expr temp" "maybe param" "maybe type" "temp"
              (875372 'move' call_tmp[875369](225481 call chpl_build_bounded_range call_tmp[875359] call_tmp[875364]))
              (225470 call = call_tmp[875354] call_tmp[875369])
              (560812 'end of statement' ranges[225413] i[225449])
            }
          }
        }
        label _unused_continueLabel[225495]
        label _breakLabel[225494]
      }
    }
    {
      unknown call_tmp[875374] "expr temp" "maybe param" "maybe type" "temp"
      (875377 'move' call_tmp[875374](225544 call isHomogeneousTuple high[225323]))
      unknown call_tmp[875379] "expr temp" "maybe param" "maybe type" "temp"
      (875382 'move' call_tmp[875379](225541 call ! call_tmp[875374]))
      unknown call_tmp[875384] "expr temp" "maybe param" "maybe type" "temp"
      (875387 'move' call_tmp[875384](225546 call _cond_test call_tmp[875379]))
      if call_tmp[875384]
      {
        unknown call_tmp[875389] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (875392 'move' call_tmp[875389](225537 'typeof' high[225323]))
        unknown call_tmp[875394] "expr temp" "maybe param" "maybe type" "temp"
        (875397 'move' call_tmp[875394](225534 call : call_tmp[875389] string[244]))
        unknown call_tmp[875399] "expr temp" "maybe param" "maybe type" "temp"
        (875402 'move' call_tmp[875399](225531 call + "Domains defined using tuple bounds must use homogenous tuples, but got '" call_tmp[875394]))
        unknown call_tmp[875404] "expr temp" "maybe param" "maybe type" "temp"
        (875407 'move' call_tmp[875404](225529 call + call_tmp[875399] "'"))
        (225528 call compilerError call_tmp[875404])
      }
      {
        unknown i[225551] "dead at end of block" "index var" "insert auto destroy"
        (649709 'init var' i[225551] 0)
        (560816 'end of statement')
        unknown tmp[225593] "maybe param" "temp"
        unknown call_tmp[875409] "expr temp" "maybe param" "maybe type" "temp"
        (875412 'move' call_tmp[875409](225555 call chpl__nudgeHighBound size[225342]))
        (225605 'move' tmp[225593](225603 call chpl_compute_low_param_loop_bound 0 call_tmp[875409]))
        unknown tmp[225594] "maybe param" "temp"
        unknown call_tmp[875414] "expr temp" "maybe param" "maybe type" "temp"
        (875417 'move' call_tmp[875414](225610 call chpl__nudgeHighBound size[225342]))
        (225614 'move' tmp[225594](225612 call chpl_compute_high_param_loop_bound 0 call_tmp[875414]))
        unknown tmp[225595] "maybe param" "temp"
        (225617 'move' tmp[225595] 1)
        ParamForLoop[225619]
        { i[225551] tmp[225593] tmp[225594] tmp[225595]
          {
            unknown call_tmp[875419] "expr temp" "maybe param" "maybe type" "temp"
            (875422 'move' call_tmp[875419](225587 call _cond_test inclusive[225328]))
            if call_tmp[875419]
            {
              unknown call_tmp[875424] "expr temp" "maybe param" "maybe type" "temp"
              (875427 'move' call_tmp[875424](225563 call ranges[225413] i[225551]))
              unknown call_tmp[875429] "expr temp" "maybe param" "maybe type" "temp"
              (875432 'move' call_tmp[875429](225567 call high[225323] i[225551]))
              unknown call_tmp[875434] "expr temp" "maybe param" "maybe type" "temp"
              (875437 'move' call_tmp[875434](225569 call chpl_build_bounded_range low[225318] call_tmp[875429]))
              (225560 call = call_tmp[875424] call_tmp[875434])
              (560817 'end of statement' ranges[225413] i[225551])
            }
            {
              unknown call_tmp[875439] "expr temp" "maybe param" "maybe type" "temp"
              (875442 'move' call_tmp[875439](225575 call ranges[225413] i[225551]))
              unknown call_tmp[875444] "expr temp" "maybe param" "maybe type" "temp"
              (875447 'move' call_tmp[875444](225579 call high[225323] i[225551]))
              unknown call_tmp[875449] "expr temp" "maybe param" "maybe type" "temp"
              (875452 'move' call_tmp[875449](225581 call chpl__nudgeHighBound call_tmp[875444]))
              unknown call_tmp[875454] "expr temp" "maybe param" "maybe type" "temp"
              (875457 'move' call_tmp[875454](225583 call chpl_build_bounded_range low[225318] call_tmp[875449]))
              (225572 call = call_tmp[875439] call_tmp[875454])
              (560820 'end of statement' ranges[225413] i[225551])
            }
          }
        }
        label _unused_continueLabel[225597]
        label _breakLabel[225596]
      }
    }
    unknown call_tmp[875459] "maybe param" "maybe type" "temp"
    (875462 'move' call_tmp[875459](225638 call chpl__buildDomainRuntimeType defaultDist[288287] size[225342] eltType[225360]))
    const d[225636] "dead at end of block" "const" "insert auto destroy"
    (649711 'init var' d[225636] ranges[225413] call_tmp[875459])
    (225644 'end of statement' eltType[225360] ranges[225413])
    (621419 'move' ret[621414](621418 'deref' d[225636]))
    gotoReturn _end_makeRectangularDomain[621412] _end_makeRectangularDomain[621412]
    (560824 'end of statement' d[225636])
    label _end_makeRectangularDomain[621412]
    (621416 return ret[621414])
  }
  where {
    unknown call_tmp[875464] "expr temp" "maybe param" "maybe type" "temp"
    (875467 'move' call_tmp[875464](225335 call isTuple low[225318]))
    unknown call_tmp[875469] "expr temp" "maybe param" "maybe type" "temp"
    (875472 'move' call_tmp[875469](225338 call isTuple high[225323]))
    (225332 call != call_tmp[875464] call_tmp[875469])
  }
  function makeRectangularDomain[225650](arg low[225654]:_any[141](?), arg high[225659]:_any[141](?), param arg inclusive[225664]:bool[19] =
  1) : _unknown[42] "last resort" "no return value for void"
  {
    unknown tmp[497430] "maybe param" "temp"
    unknown call_tmp[875474] "expr temp" "maybe param" "maybe type" "temp"
    (875477 'move' call_tmp[875474](225817 call isHomogeneousTuple low[225654]))
    (497441 'move' tmp[497430](225814 call ! call_tmp[875474]))
    unknown call_tmp[875479] "expr temp" "maybe param" "maybe type" "temp"
    (875482 'move' call_tmp[875479](497443 call _cond_invalid tmp[497430]))
    if call_tmp[875479]
    {
      (497446 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[694246] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[694247] "maybe param" "temp"
    unknown call_tmp[875484] "expr temp" "maybe param" "maybe type" "temp"
    (875487 'move' call_tmp[875484](497431 call isTrue tmp[497430]))
    (694252 'move' tmp[694247](694250 call _cond_test call_tmp[875484]))
    if tmp[694247]
    {
      (694257 'move' tmp[694246](694254 '_paramFoldLogical' tmp[694247] 1))
    }
    {
      unknown tmp[694259] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[875489] "expr temp" "maybe param" "maybe type" "temp"
      (875492 'move' call_tmp[875489](225822 call isHomogeneousTuple high[225659]))
      unknown call_tmp[875494] "expr temp" "maybe param" "maybe type" "temp"
      (875497 'move' call_tmp[875494](225819 call ! call_tmp[875489]))
      (694261 'move' tmp[694259](497435 call isTrue call_tmp[875494]))
      (694266 'move' tmp[694246](694263 '_paramFoldLogical' tmp[694247] tmp[694259]))
    }
    unknown call_tmp[875499] "expr temp" "maybe param" "maybe type" "temp"
    (875502 'move' call_tmp[875499](225824 call _cond_test tmp[694246]))
    if call_tmp[875499]
    {
      unknown call_tmp[875504] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (875507 'move' call_tmp[875504](225691 'typeof' low[225654]))
      unknown call_tmp[875509] "expr temp" "maybe param" "maybe type" "temp"
      (875512 'move' call_tmp[875509](225688 call : call_tmp[875504] string[244]))
      unknown call_tmp[875514] "expr temp" "maybe param" "maybe type" "temp"
      (875517 'move' call_tmp[875514](225685 call + "Domains defined using tuple bounds must use homogenous tuples, but got '" call_tmp[875509]))
      unknown call_tmp[875519] "expr temp" "maybe param" "maybe type" "temp"
      (875522 'move' call_tmp[875519](225683 call + call_tmp[875514] "' and '"))
      unknown call_tmp[875524] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (875527 'move' call_tmp[875524](225697 'typeof' high[225659]))
      unknown call_tmp[875529] "expr temp" "maybe param" "maybe type" "temp"
      (875532 'move' call_tmp[875529](225694 call : call_tmp[875524] string[244]))
      unknown call_tmp[875534] "expr temp" "maybe param" "maybe type" "temp"
      (875537 'move' call_tmp[875534](225681 call + call_tmp[875519] call_tmp[875529]))
      unknown call_tmp[875539] "expr temp" "maybe param" "maybe type" "temp"
      (875542 'move' call_tmp[875539](225679 call + call_tmp[875534] "'"))
      (225678 call compilerError call_tmp[875539])
    }
    {
      unknown call_tmp[875546] "expr temp" "maybe param" "maybe type" "temp"
      (875549 'move' call_tmp[875546](225799 call size _mt[203] low[225654]))
      unknown call_tmp[875553] "expr temp" "maybe param" "maybe type" "temp"
      (875556 'move' call_tmp[875553](225803 call size _mt[203] high[225659]))
      unknown call_tmp[875558] "expr temp" "maybe param" "maybe type" "temp"
      (875561 'move' call_tmp[875558](225796 call != call_tmp[875546] call_tmp[875553]))
      unknown call_tmp[875563] "expr temp" "maybe param" "maybe type" "temp"
      (875566 'move' call_tmp[875563](225806 call _cond_test call_tmp[875558]))
      if call_tmp[875563]
      {
        unknown call_tmp[875568] "expr temp" "maybe param" "maybe type" "temp"
        (875571 'move' call_tmp[875568](225711 call + "Domains defined using tuple bounds must use tuples of the same length, " "but got '"))
        unknown call_tmp[875573] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (875576 'move' call_tmp[875573](225722 'typeof' low[225654]))
        unknown call_tmp[875578] "expr temp" "maybe param" "maybe type" "temp"
        (875581 'move' call_tmp[875578](225719 call : call_tmp[875573] string[244]))
        unknown call_tmp[875583] "expr temp" "maybe param" "maybe type" "temp"
        (875586 'move' call_tmp[875583](225709 call + call_tmp[875568] call_tmp[875578]))
        unknown call_tmp[875588] "expr temp" "maybe param" "maybe type" "temp"
        (875591 'move' call_tmp[875588](225707 call + call_tmp[875583] "' and '"))
        unknown call_tmp[875593] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (875596 'move' call_tmp[875593](225728 'typeof' high[225659]))
        unknown call_tmp[875598] "expr temp" "maybe param" "maybe type" "temp"
        (875601 'move' call_tmp[875598](225725 call : call_tmp[875593] string[244]))
        unknown call_tmp[875603] "expr temp" "maybe param" "maybe type" "temp"
        (875606 'move' call_tmp[875603](225705 call + call_tmp[875588] call_tmp[875598]))
        unknown call_tmp[875608] "expr temp" "maybe param" "maybe type" "temp"
        (875611 'move' call_tmp[875608](225703 call + call_tmp[875603] "'"))
        (225702 call compilerError call_tmp[875608])
      }
      {
        unknown tmp[497409] "maybe param" "temp"
        { scopeless type
          unknown call_type_tmp[578415] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[875613] "expr temp" "maybe param" "used in type" "maybe type" "temp"
          (875616 'move' call_tmp[875613](225778 call high[225659] 0))
          (578419 'move' call_type_tmp[578415](225780 'typeof' call_tmp[875613]))
        }
        { scopeless type
          unknown call_type_tmp[578421] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[875618] "expr temp" "maybe param" "used in type" "maybe type" "temp"
          (875621 'move' call_tmp[875618](225774 call low[225654] 0))
          (578425 'move' call_type_tmp[578421](225776 'typeof' call_tmp[875618]))
        }
        (497420 'move' tmp[497409](395472 'is_coercible' call_type_tmp[578415] call_type_tmp[578421]))
        unknown call_tmp[875623] "expr temp" "maybe param" "maybe type" "temp"
        (875626 'move' call_tmp[875623](497422 call _cond_invalid tmp[497409]))
        if call_tmp[875623]
        {
          (497425 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[694273] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[694274] "maybe param" "temp"
        unknown call_tmp[875628] "expr temp" "maybe param" "maybe type" "temp"
        (875631 'move' call_tmp[875628](497410 call isTrue tmp[497409]))
        (694279 'move' tmp[694274](694277 call _cond_test call_tmp[875628]))
        if tmp[694274]
        {
          (694284 'move' tmp[694273](694281 '_paramFoldLogical' tmp[694274] 1))
        }
        {
          { scopeless type
            unknown call_type_tmp[578427] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[875633] "expr temp" "maybe param" "used in type" "maybe type" "temp"
            (875636 'move' call_tmp[875633](225788 call low[225654] 0))
            (578431 'move' call_type_tmp[578427](225790 'typeof' call_tmp[875633]))
          }
          { scopeless type
            unknown call_type_tmp[578433] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[875638] "expr temp" "maybe param" "used in type" "maybe type" "temp"
            (875641 'move' call_tmp[875638](225784 call high[225659] 0))
            (578437 'move' call_type_tmp[578433](225786 'typeof' call_tmp[875638]))
          }
          unknown tmp[694286] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[875643] "expr temp" "maybe param" "maybe type" "temp"
          (875646 'move' call_tmp[875643](395473 'is_coercible' call_type_tmp[578427] call_type_tmp[578433]))
          (694288 'move' tmp[694286](497414 call isTrue call_tmp[875643]))
          (694293 'move' tmp[694273](694290 '_paramFoldLogical' tmp[694274] tmp[694286]))
        }
        unknown call_tmp[875648] "expr temp" "maybe param" "maybe type" "temp"
        (875651 'move' call_tmp[875648](225767 call ! tmp[694273]))
        unknown call_tmp[875653] "expr temp" "maybe param" "maybe type" "temp"
        (875656 'move' call_tmp[875653](225791 call _cond_test call_tmp[875648]))
        if call_tmp[875653]
        {
          { scopeless type
            unknown call_type_tmp[578439] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[875658] "expr temp" "maybe param" "used in type" "maybe type" "temp"
            (875661 'move' call_tmp[875658](225753 call low[225654] 0))
            (578443 'move' call_type_tmp[578439](225755 'typeof' call_tmp[875658]))
          }
          { scopeless type
            unknown call_type_tmp[578445] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[875663] "expr temp" "maybe param" "used in type" "maybe type" "temp"
            (875666 'move' call_tmp[875663](225761 call high[225659] 0))
            (578449 'move' call_type_tmp[578445](225763 'typeof' call_tmp[875663]))
          }
          unknown call_tmp[875668] "expr temp" "maybe param" "maybe type" "temp"
          (875671 'move' call_tmp[875668](225742 call + "Domains defined using tuple bounds must use tuples of coercible types. " "Cannot coerce between '"))
          unknown call_tmp[875673] "expr temp" "maybe param" "maybe type" "temp"
          (875676 'move' call_tmp[875673](225750 call : call_type_tmp[578439] string[244]))
          unknown call_tmp[875678] "expr temp" "maybe param" "maybe type" "temp"
          (875681 'move' call_tmp[875678](225740 call + call_tmp[875668] call_tmp[875673]))
          unknown call_tmp[875683] "expr temp" "maybe param" "maybe type" "temp"
          (875686 'move' call_tmp[875683](225738 call + call_tmp[875678] "' and '"))
          unknown call_tmp[875688] "expr temp" "maybe param" "maybe type" "temp"
          (875691 'move' call_tmp[875688](225758 call : call_type_tmp[578445] string[244]))
          unknown call_tmp[875693] "expr temp" "maybe param" "maybe type" "temp"
          (875696 'move' call_tmp[875693](225736 call + call_tmp[875683] call_tmp[875688]))
          unknown call_tmp[875698] "expr temp" "maybe param" "maybe type" "temp"
          (875701 'move' call_tmp[875698](225734 call + call_tmp[875693] "'"))
          (225733 call compilerError call_tmp[875698])
        }
      }
    }
    (621423 return _void[46])
  }
  where {
    unknown tmp[497388] "maybe param" "temp"
    (497399 'move' tmp[497388](225671 call isTuple low[225654]))
    unknown call_tmp[875703] "expr temp" "maybe param" "maybe type" "temp"
    (875706 'move' call_tmp[875703](497401 call _cond_invalid tmp[497388]))
    if call_tmp[875703]
    {
      (497404 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[694300] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[694301] "maybe param" "temp"
    unknown call_tmp[875708] "expr temp" "maybe param" "maybe type" "temp"
    (875711 'move' call_tmp[875708](497389 call isTrue tmp[497388]))
    (694306 'move' tmp[694301](694304 call _cond_test call_tmp[875708]))
    if tmp[694301]
    {
      unknown tmp[694308] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[875713] "expr temp" "maybe param" "maybe type" "temp"
      (875716 'move' call_tmp[875713](225674 call isTuple high[225659]))
      (694310 'move' tmp[694308](497392 call isTrue call_tmp[875713]))
      (694315 'move' tmp[694300](694312 '_paramFoldLogical' tmp[694301] tmp[694308]))
    }
    {
      (694320 'move' tmp[694300](694317 '_paramFoldLogical' tmp[694301] 0))
    }
    (1001608 call chpl_statementLevelSymbol tmp[694300])
  }
  function |contextManager[475262]() : _unknown[42] "ImplementsStmt wrapper"
  { contextManager[314611] unsafeAssignManager[221006](?)
    {
    }
    (621427 return _void[46])
  }
  function |writeSerializable[475267]() : _unknown[42] "ImplementsStmt wrapper"
  { writeSerializable[310070] _domain[225034](?)
    {
    }
    (621431 return _void[46])
  }
  function |readDeserializable[475272]() : _unknown[42] "ImplementsStmt wrapper"
  { readDeserializable[310078] _domain[225034](?)
    {
    }
    (621435 return _void[46])
  }
  type unsafeAssignManager[221006](?) unknown _lhsInstance[219683] val _lhsPid[219687]:int(64)[10] int(64)[10] unknown _rhsInstance[219692] val _rhsPid[219696]:int(64)[10] int(64)[10] val _oldLhsDomainCopy[219701]:_domain[225034](?) "marked generic" _domain[225034](?) unknown _checks[219708] "param" bool[19] val _isActiveManager[219713]:bool[19] bool[19]
  (396798 'used modules list'(209938 'use' ChapelBase[77907])(209942 'use' ArrayViewRankChange[143254])(209944 'use' ChapelTuple[106204])(209948 'use' ChapelRange[129915] 'only' chpl_isValidRangeIdxType))
}