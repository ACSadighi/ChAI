AST dump for MemTracking after pass scopeResolve.
Module use list: ChapelStandard CTypes 

{
  const memTrack[310276] "config" "const" "@unstable" 0 bool[19]
  (310280 'end of statement')
  const memStats[310282] "config" "const" "@unstable" 0 bool[19]
  (310286 'end of statement')
  const memLeaksByType[310288] "config" "const" "@unstable" 0 bool[19]
  (310292 'end of statement')
  const memLeaks[310294] "config" "const" "@unstable" 0 bool[19]
  (310298 'end of statement')
  const memMax[310300] "config" "const" "@unstable" 0 uint(64)[86]
  (310304 'end of statement')
  const memThreshold[310306] "config" "const" "@unstable" 0 uint(64)[86]
  (310310 'end of statement')
  const memLog[310312] "config" "const" "@unstable" string[244]
  (310315 'end of statement')
  const memLeaksLog[310317] "config" "const" "no auto destroy" "@unstable" string[244]
  (310320 'end of statement')
  const memLeaksByDesc[310322] "config" "const" "no auto destroy" "@unstable" string[244]
  (310325 'end of statement')
  const cMemMax[310337] "const"(310342 call(310339 call . memMax[310300] c"safeCast") c_size_t[614])
  const cMemThreshold[310328] "const"(310333 call(310330 call . memThreshold[310306] c"safeCast") c_size_t[614])
  (310345 'end of statement')
  function chpl_memTracking_returnConfigVals[310346](ref arg ret_memTrack[310349] :
  bool[19], ref arg ret_memStats[310353] :
  bool[19], ref arg ret_memLeaksByType[310357] :
  bool[19], ref arg ret_memLeaksByDesc[310363] :
  (310361 call c_ptrConst[46990](?) c_char[562]), ref arg ret_memLeaks[310367] :
  bool[19], ref arg ret_memMax[310371] :
  c_size_t[614], ref arg ret_memThreshold[310375] :
  c_size_t[614], ref arg ret_memLog[310381] :
  (310379 call c_ptrConst[46990](?) c_char[562]), ref arg ret_memLeaksLog[310387] :
  (310385 call c_ptrConst[46990](?) c_char[562])) : _unknown[42] "export" "local args" "no return value for void"
  {
    (310391 call = ret_memTrack[310349] memTrack[310276])
    (310395 call = ret_memStats[310353] memStats[310282])
    (310399 call = ret_memLeaksByType[310357] memLeaksByType[310288])
    (310403 call = ret_memLeaks[310367] memLeaks[310294])
    (310407 call = ret_memMax[310371] cMemMax[310337])
    (310411 call = ret_memThreshold[310375] cMemThreshold[310328])
    if(310559 call _cond_test(310552 call !=(310555 call .(410496 call here[135591]) c"id") 0))
    {
      if(310449 call _cond_test(310442 call !(310448 call(310445 call . memLeaksByDesc[310322] c"isEmpty"))))
      {
        unknown local_memLeaksByDesc[310418] memLeaksByDesc[310322]
        (310421 'end of statement')
        (310422 call =(310425 call . local_memLeaksByDesc[310418] c"isOwned") 0)
        (310429 call = ret_memLeaksByDesc[310363](310436 call(310433 call . local_memLeaksByDesc[310418] c"c_str")))
      }
      {
        (310438 call = ret_memLeaksByDesc[310363] nil[32])
      }
      if(310486 call _cond_test(310479 call !(310485 call(310482 call . memLog[310312] c"isEmpty"))))
      {
        unknown local_memLog[310455] memLog[310312]
        (310458 'end of statement')
        (310459 call =(310462 call . local_memLog[310455] c"isOwned") 0)
        (310466 call = ret_memLog[310381](310473 call(310470 call . local_memLog[310455] c"c_str")))
      }
      {
        (310475 call = ret_memLog[310381] nil[32])
      }
      if(310523 call _cond_test(310516 call !(310522 call(310519 call . memLeaksLog[310317] c"isEmpty"))))
      {
        unknown local_memLeaksLog[310492] memLeaksLog[310317]
        (310495 'end of statement')
        (310496 call =(310499 call . local_memLeaksLog[310492] c"isOwned") 0)
        (310503 call = ret_memLeaksLog[310387](310510 call(310507 call . local_memLeaksLog[310492] c"c_str")))
      }
      {
        (310512 call = ret_memLeaksLog[310387] nil[32])
      }
    }
    {
      (310528 call = ret_memLeaksByDesc[310363](310535 call(310532 call . memLeaksByDesc[310322] c"c_str")))
      (310536 call = ret_memLog[310381](310543 call(310540 call . memLog[310312] c"c_str")))
      (310544 call = ret_memLeaksLog[310387](310551 call(310548 call . memLeaksLog[310317] c"c_str")))
    }
  }
  (397056 'used modules list'(310272 'use' ChapelStandard[315387])(310274 'use' CTypes[51217]))
}