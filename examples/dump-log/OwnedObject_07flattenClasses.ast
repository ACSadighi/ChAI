AST dump for OwnedObject after pass flattenClasses.
Module use list: ChapelStandard HaltWrappers 

{
  function _owned[238](?).chpl_forwarding_expr1[79038](arg _mt[79043]:_MT[201], arg this[79041]:_owned[238](?)) : _unknown[42] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    (79048 return(79047 call(422013 call . this[79041] c"borrow")))
  }
  type _owned[238](?) unknown chpl_t[79029] "type variable" unknown chpl_p[79032] "owned"(79033 'to nilable class' chpl_t[79029]) forwarding ( )
  type owned?[467987](?)
  type owned[467983](?)
  type _owned[467876](?)
  function _owned[238](?).init[79053](arg _mt[79061]:_MT[201], arg this[79056]:_owned[238](?) :
  _owned[238](?), arg chpl_t[79059]:_any[141](?)) : _unknown[42] "leaves this nil" "method" "no return value for void"
  {
    if(79075 call _cond_test(79070 call !(79073 call isClass chpl_t[79059])))
    {
      (79065 call compilerError "owned only works with classes")
    }
    (79080 call =(79085 call . this[79056] c"chpl_t")(79089 call _to_borrowed chpl_t[79059]))
    (79091 call =(79096 call . this[79056] c"chpl_p") nil[32])
  }
  function _owned[238](?).init[79102](arg _mt[79112]:_MT[201], arg this[79105]:_owned[238](?) :
  _owned[238](?), arg p[79109] :
  borrowed[174](?)) : _unknown[42] "method" "no return value for void"
  {
    (79116 call compilerError "cannot initialize owned from a borrow")
    (79124 call(79121 call . this[79105] c"init")(79126 call _to_unmanaged p[79109]))
  }
  function _owned[238](?).init[79130](arg _mt[79140]:_MT[201], arg this[79133]:_owned[238](?) :
  _owned[238](?), arg p[79137] :
  unmanaged[183](?)) : _unknown[42] "method" "no return value for void"
  {
    (79143 call =(79146 call . this[79133] c"chpl_t")(79150 call _to_borrowed(79152 'typeof' p[79137])))
    (79153 call =(79156 call . this[79133] c"chpl_p")(79160 call _to_borrowed p[79137]))
  }
  function _owned[238](?).init[79164](arg _mt[79175]:_MT[201], arg this[79167]:_owned[238](?) :
  _owned[238](?), arg p[79172] :
  unknown T[79170]) : _unknown[42] "method" "no return value for void"
  {
    (79202 call compilerError "owned only works with classes")
    (79204 call =(79207 call . this[79167] c"chpl_t") T[79170])
    (79211 call =(79214 call . this[79167] c"chpl_p") p[79172])
  }
  where {
    (79177 call &&(79179 call &&(79181 call ==(79184 call isClass T[79170]) 0)(79187 call ==(394732 'is_subtype' _owned[238](?) T[79170]) 0))(79194 call ==(79197 call isIterator p[79172]) 0))
  }
  function _owned[238](?).init=[79221](arg _mt[79231]:_MT[201], arg this[79224]:_owned[238](?) :
  _owned[238](?), ref arg src[79228] :
  _owned[238](?)) : _unknown[42] "method" "no return value for void"
  {
    (79234 call =(79237 call . this[79224] c"chpl_t")(79257 IfExpr (79240 call !=(79244 call .(79243 'typeof' this[79224]) c"chpl_t") ?[227]) then
    { scopeless
      (79250 call .(79249 'typeof' this[79224]) c"chpl_t")
    } else
    { scopeless
      (79254 call _to_borrowed(79256 'typeof' src[79228]))
    } ))
    if(79294 call _cond_test(79280 call ==(394733 'is_coercible'(79290 call .(79289 'typeof' this[79224]) c"chpl_t")(79285 call . src[79228] c"chpl_t")) 0))
    {
      (79261 call compilerError "cannot initialize '"(79265 call :(79268 'typeof' this[79224]) string[244]) "' from a '"(79273 call :(79276 'typeof' src[79228]) string[244]) "'")
    }
    (79299 call =(79302 call . this[79224] c"chpl_p")(79309 call(79306 call . _owned[238](?) c"release") src[79228]))
    (79315 call(79312 call . this[79224] c"chpl__initThisType"))
    if(79341 call _cond_test(79332 call &&(79335 call isNonNilableClass(79337 'typeof' this[79224]))(79339 call isNilableClass src[79228])))
    {
      (79317 call compilerError "cannot initialize '"(79319 call :(79322 'typeof' this[79224]) string[244]) "' from a '"(79325 call :(79328 'typeof' src[79228]) string[244]) "'")
    }
  }
  function _owned[238](?).init=[79348](arg _mt[79358]:_MT[201], arg this[79351]:_owned[238](?) :
  _owned[238](?), arg src[79355] :
  _shared[242](?)) : _unknown[42] "method" "no return value for void"
  {
    (79362 call compilerError "cannot initialize '"(79364 call :(79367 'typeof' this[79351]) string[244]) "' from a '"(79370 call :(79373 'typeof' src[79355]) string[244]) "'")
    (79376 call =(79379 call . this[79351] c"chpl_t")(79399 IfExpr (79382 call !=(79386 call .(79385 'typeof' this[79351]) c"chpl_t") ?[227]) then
    { scopeless
      (79392 call .(79391 'typeof' this[79351]) c"chpl_t")
    } else
    { scopeless
      (79396 call _to_borrowed(79398 'typeof' src[79355]))
    } ))
  }
  function _owned[238](?).init=[79404](arg _mt[79414]:_MT[201], arg this[79407]:_owned[238](?) :
  _owned[238](?), arg src[79411] :
  borrowed[174](?)) : _unknown[42] "method" "no return value for void"
  {
    (79418 call compilerError "cannot initialize '"(79420 call :(79423 'typeof' this[79407]) string[244]) "' from a '"(79426 call :(79429 'typeof' src[79411]) string[244]) "'")
    (79432 call =(79435 call . this[79407] c"chpl_t")(79455 IfExpr (79438 call !=(79442 call .(79441 'typeof' this[79407]) c"chpl_t") ?[227]) then
    { scopeless
      (79448 call .(79447 'typeof' this[79407]) c"chpl_t")
    } else
    { scopeless
      (79452 call _to_borrowed(79454 'typeof' src[79411]))
    } ))
  }
  function _owned[238](?).init=[79460](arg _mt[79470]:_MT[201], arg this[79463]:_owned[238](?) :
  _owned[238](?), arg src[79467] :
  unmanaged[183](?)) : _unknown[42] "method" "no return value for void"
  {
    (79474 call compilerError "cannot initialize '"(79476 call :(79479 'typeof' this[79463]) string[244]) "' from a '"(79482 call :(79485 'typeof' src[79467]) string[244]) "'")
    (79488 call =(79491 call . this[79463] c"chpl_t")(79511 IfExpr (79494 call !=(79498 call .(79497 'typeof' this[79463]) c"chpl_t") ?[227]) then
    { scopeless
      (79504 call .(79503 'typeof' this[79463]) c"chpl_t")
    } else
    { scopeless
      (79508 call _to_borrowed(79510 'typeof' src[79467]))
    } ))
  }
  function _owned[238](?).init=[79516](arg _mt[79526]:_MT[201], arg this[79519]:_owned[238](?) :
  _owned[238](?), arg src[79523] :
  _nilType[30]) : _unknown[42] "leaves this nil" "method" "no return value for void"
  {
    if(79543 call _cond_test(79535 call ==(79539 call .(79538 'typeof' this[79519]) c"chpl_t") ?[227]))
    {
      (79530 call compilerError "Cannot establish type of owned when initializing with 'nil'")
    }
    (79552 call(79549 call . this[79519] c"init")(79555 call .(79554 'typeof' this[79519]) c"chpl_t"))
    if(79573 call _cond_test(79571 call isNonNilableClass(422063 call . this[79519] c"chpl_t")))
    {
      (79559 call compilerError "cannot initialize '"(79561 call :(79564 'typeof' this[79519]) string[244]) "' from 'nil'")
    }
  }
  function _owned[238](?).init[79580](arg _mt[79590]:_MT[201], arg this[79583]:_owned[238](?) :
  _owned[238](?), ref arg src[79587] :
  _owned[238](?)) : _unknown[42] "method" "no return value for void"
  {
    (79593 call =(79596 call . this[79583] c"chpl_t")(79600 call . src[79587] c"chpl_t"))
    (79603 call =(79606 call . this[79583] c"chpl_p")(79613 call(79610 call . _owned[238](?) c"release") src[79587]))
  }
  function _owned[467876](?).adopt[79617](arg _mt[79625]:_MT[201], arg this[79620]:_owned[467876](?), arg source[79623]:_any[141](?)) : _unknown[42] "method" "no return value for void"
  {
    (79629 call compilerError "cannot adopt a "(79633 call :(79636 'typeof' source[79623]) string[244]))
  }
  function _owned[467876](?).adopt[79640](arg _mt[79650]:_MT[201], arg this[79643]:_owned[467876](?), in arg obj[79647] :
  unmanaged[183](?)) : _unknown[42] "inline" "method"
  {
    (79653 return(79654 'new'(79656 call _owned[238](?) obj[79647])))
  }
  function _owned[467876](?).release[79660](arg _mt[79668]:_MT[201], arg this[79663]:_owned[467876](?), arg source[79666]:_any[141](?)) : _unknown[42] "method" "no return value for void"
  {
    (79672 call compilerError "cannot release a "(79676 call :(79679 'typeof' source[79666]) string[244]))
  }
  function _owned[467876](?).release[79683](arg _mt[79693]:_MT[201], arg this[79686]:_owned[467876](?), ref arg obj[79690] :
  _owned[238](?)) : _unknown[42] "inline" "method"
  {
    unknown oldPtr[79697](79699 call . obj[79690] c"chpl_p")
    (79703 'end of statement')
    unknown t[79705] "type variable"(79707 call . obj[79690] c"chpl_t")
    (79711 call =(79714 call . obj[79690] c"chpl_p") nil[32])
    (79718 return(79733 IfExpr (79719 call ==(79722 call _to_nilable t[79705]) t[79705]) then
    { scopeless
      (79726 call _to_unmanaged oldPtr[79697])
    } else
    { scopeless
      (79729 call _to_unmanaged(79730 call postfix! oldPtr[79697]))
    } ))
  }
  function _owned[238](?).deinit[79738](arg _mt[79744]:_MT[201], arg this[79741]:_owned[238](?) :
  _owned[238](?)) : _unknown[42] "destructor" "method" "no return value for void"
  {
    if(79767 call _cond_test(79765 call isClass(422089 call . this[79741] c"chpl_p")))
    {
      if(79759 call _cond_test(79755 call !=(422084 call . this[79741] c"chpl_p") nil[32]))
      {
        (79752 call chpl__delete(79750 call _to_unmanaged(422079 call . this[79741] c"chpl_p")))
      }
    }
  }
  function _owned[238](?).borrow[79773](arg _mt[79779]:_MT[201], arg this[79776]:_owned[238](?) :
  _owned[238](?)) : _unknown[42] "nil from this" "method"
  {
    if(79796 call _cond_test(79790 call ==(79793 call _to_nilable(422104 call . this[79776] c"chpl_t"))(422109 call . this[79776] c"chpl_t")))
    {
      (79783 return(422094 call . this[79776] c"chpl_p"))
    }
    {
      (79786 return(79787 call postfix!(422099 call . this[79776] c"chpl_p")))
    }
  }
  function =[79802](ref arg lhs[79805] :
  _owned[238](?), ref arg rhs[79809] :
  _owned[238](?)) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    if(79844 call _cond_test(79828 call &&(79830 call ==(79833 call . lhs[79805] c"chpl_p") nil[32])(79837 call ==(79840 call . rhs[79809] c"chpl_p") nil[32])))
    {
      (79826 return _void[46])
    }
    if(79885 call _cond_test(79881 call || 1 enablePostfixBangChecks[52057]))
    {
      if(79877 call _cond_test(79872 call isNonNilableClass(79874 call . lhs[79805] c"chpl_t")))
      {
        if(79867 call _cond_test(79860 call ==(79863 call . rhs[79809] c"chpl_p") nil[32]))
        {
          (79856 call nilCheckHalt module=[222] HaltWrappers[518] "assigning nil to non-nilable owned")
          (400214 'referenced modules list' HaltWrappers[518])
        }
      }
    }
    if(79934 call _cond_test(79922 call !(394735 'is_coercible'(79931 call . lhs[79805] c"chpl_t")(79927 call . rhs[79809] c"chpl_t"))))
    {
      (79890 call compilerError(79891 call +(79893 call +(79895 call +(79897 call +(79899 call + "cannot assign to '"(79904 call :(79907 'typeof' lhs[79805]) string[244])) "' ") "from '")(79915 call :(79918 'typeof' rhs[79809]) string[244])) "'"))
    }
    unknown oldPtr[79940](79942 call _to_unmanaged(79944 call . lhs[79805] c"chpl_p"))
    (79948 'end of statement')
    (79949 call =(79952 call . lhs[79805] c"chpl_p")(79959 call(79956 call . _owned[238](?) c"release") rhs[79809]))
    (79963 call chpl__delete oldPtr[79940])
    (396066 'used modules list'(79825 'import' HaltWrappers[518]))
  }
  where {
    (79812 call !(79814 call &&(79817 call isNonNilableClass lhs[79805])(79820 call isNilableClass rhs[79809])))
  }
  function =[79969](ref arg lhs[79972] :
  _owned[238](?), arg rhs[79976] :
  _nilType[30]) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    (79987 call chpl__delete(79985 call(79982 call . _owned[238](?) c"release") lhs[79972]))
  }
  function <=>[79992](ref arg lhs[79995] :
  _owned[238](?), ref arg rhs[80000] :
  (79999 'typeof' lhs[79995])) : _unknown[42] "operator" "no return value for void"
  {
    (80004 call <=>(80007 call . lhs[79995] c"chpl_p")(80011 call . rhs[80000] c"chpl_p"))
  }
  function chpl__initCopy[80016](ref arg src[80019] :
  _owned[238](?), arg definedConst[80023] :
  bool[19]) : _unknown[42] "init copy fn"
  {
    unknown ret[80028](80029 'new'(80031 call _owned[238](?) src[80019]))
    (80034 'end of statement')
    (80035 return ret[80028])
  }
  function chpl__autoCopy[80039](ref arg src[80042] :
  _owned[238](?), arg definedConst[80046] :
  bool[19]) : _unknown[42] "auto copy fn"
  {
    unknown ret[80051](80052 'new'(80054 call _owned[238](?) src[80042]))
    (80057 'end of statement')
    (80058 return ret[80051])
  }
  function chpl__autoDestroy[80062](ref arg x[80065] :
  _owned[238](?)) : _unknown[42] "auto destroy fn" "no return value for void"
  {
    (80069 'call destructor'(80070 'deref' x[80065]))
  }
  function _owned[238](?).serialize[80074](arg _mt[80084]:_MT[201], arg this[80077]:_owned[238](?) :
  _owned[238](?), arg writer[80080]:_any[141](?), ref arg serializer[80082]:_any[141](?)) : _unknown[42] throws "method" "no return value for void"
  {
    (80088 call(422142 call . this[80077] c"_readWriteHelper") writer[80080])
  }
  function _owned[238](?)._readWriteHelper[80092](arg _mt[80100]:_MT[201], arg this[80095]:_owned[238](?) :
  _owned[238](?), arg f[80098]:_any[141](?)) : _unknown[42] throws "method" "no return value for void"
  {
    if(80259 call _cond_test(80254 call isNonNilableClass(80256 call . this[80095] c"chpl_t")))
    {
      unknown tmp[80105](80106 call :(80108 call postfix!(80111 call . this[80095] c"chpl_p")) _borrowedNonNilable[177](?))
      (80117 'end of statement')
      if(80142 call _cond_test(80139 call . f[80098] c"_writing"))
      {
        (80122 call(80119 call . f[80098] c"write") tmp[80105])
      }
      {
        (80125 call = tmp[80105](80132 call(80129 call . f[80098] c"read")(80134 'typeof' tmp[80105])))
      }
      if(80158 call _cond_test(80154 call == tmp[80105] nil[32]))
      {
        (80149 call halt "internal error - read nil")
      }
      if(80176 call _cond_test(80169 call != tmp[80105](80173 call . this[80095] c"chpl_p")))
      {
        (80164 call halt "internal error - read changed ptr")
      }
    }
    {
      unknown tmp[80183](80184 call :(80187 call . this[80095] c"chpl_p") _borrowedNilable[180](?))
      (80194 'end of statement')
      if(80217 call _cond_test(80214 call . f[80098] c"_writing"))
      {
        (80199 call(80196 call . f[80098] c"write") tmp[80183])
      }
      {
        (80202 call = tmp[80183](80209 call(80206 call . f[80098] c"read")(80211 'typeof' tmp[80183])))
      }
      if(80234 call _cond_test(80227 call != tmp[80183](80231 call . this[80095] c"chpl_p")))
      {
        (80224 call halt "internal error - read changed ptr")
      }
      if(80248 call _cond_test(80244 call == tmp[80183] nil[32]))
      {
        (80239 call = this[80095] nil[32])
      }
    }
  }
  function _owned[238](?).deserialize[80265](arg _mt[80275]:_MT[201], arg this[80268]:_owned[238](?) :
  _owned[238](?), arg reader[80271]:_any[141](?), ref arg deserializer[80273]:_any[141](?)) : _unknown[42] throws "method" "no return value for void"
  {
    unknown tmp[80279](80280 call :(80282 call postfix!(80285 call . this[80268] c"chpl_p")) _borrowedNonNilable[177](?))
    (80291 'end of statement')
    (80296 call(80293 call . reader[80271] c"read") tmp[80279])
  }
  function :[80300](in arg x[80305] :
  owned[467983](?), arg t[80312] :
  owned?[467987](?)) : _unknown[42] "inline" "operator"
  {
    unknown castPtr[80329](80330 call :(80333 call . x[80305] c"chpl_p")(80337 call _to_nilable(80339 call _to_unmanaged(80341 call . t[80312] c"chpl_t"))))
    (80345 'end of statement')
    (80346 call =(80349 call . x[80305] c"chpl_p") nil[32])
    (80353 return(80354 'new'(80356 call _owned[238](?) castPtr[80329])))
  }
  where {
    (394736 'is_subtype'(80322 call _to_nonnil(80324 call . t[80312] c"chpl_t"))(80318 call . x[80305] c"chpl_t"))
  }
  function :[80361](in arg x[80367] :
  owned?[467987](?), arg t[80374] :
  owned?[467987](?)) : _unknown[42] "inline" "operator"
  {
    unknown castPtr[80389](80390 call :(80393 call . x[80367] c"chpl_p")(80397 call _to_nilable(80399 call _to_unmanaged(80401 call . t[80374] c"chpl_t"))))
    (80405 'end of statement')
    (80406 call =(80409 call . x[80367] c"chpl_p") nil[32])
    (80413 return(80414 'new'(80416 call _owned[238](?) castPtr[80389])))
  }
  where {
    (394737 'is_subtype'(80384 call . t[80374] c"chpl_t")(80380 call . x[80367] c"chpl_t"))
  }
  function :[80421](in arg x[80426] :
  owned[467983](?), arg t[80432] :
  owned[467983](?)) : _unknown[42] "inline" "operator"
  {
    unknown castPtr[80447](80448 call :(80451 call . x[80426] c"chpl_p")(80455 call _to_nilable(80457 call _to_unmanaged(80459 call . t[80432] c"chpl_t"))))
    (80463 'end of statement')
    (80464 call =(80467 call . x[80426] c"chpl_p") nil[32])
    (80471 return(80472 'new'(80474 call _owned[238](?)(80475 call postfix! castPtr[80447]))))
  }
  where {
    (394738 'is_subtype'(80442 call . t[80432] c"chpl_t")(80438 call . x[80426] c"chpl_t"))
  }
  function :[80481](in arg x[80487] :
  owned?[467987](?), arg t[80493] :
  owned[467983](?)) : _unknown[42] throws "inline" "operator"
  {
    unknown castPtr[80510](80511 call :(80514 call . x[80487] c"chpl_p")(80518 call _to_nilable(80520 call _to_unmanaged(80522 call . t[80493] c"chpl_t"))))
    (80526 'end of statement')
    if(80538 call _cond_test(80534 call == castPtr[80510] nil[32]))
    {
      (80528 'throw'(80529 'new'(_chpl_manager = _owned[238](?))(80533 call NilClassError[421132](?))))
    }
    (80542 call =(80545 call . x[80487] c"chpl_p") nil[32])
    (80549 return(80550 'new'(80552 call _owned[238](?)(80553 call postfix! castPtr[80510]))))
  }
  where {
    (394739 'is_subtype'(80505 call . t[80493] c"chpl_t")(80499 call _to_nonnil(80501 call . x[80487] c"chpl_t")))
  }
  function :[80559](ref arg x[80565] :
  owned?[467987](?), arg t[80571] :
  owned[467983](?)) : _unknown[42] throws "inline" "operator"
  {
    if(80601 call _cond_test(80594 call ==(80597 call . x[80565] c"chpl_p") nil[32]))
    {
      (80588 'throw'(80589 'new'(_chpl_manager = _owned[238](?))(80593 call NilClassError[421132](?))))
    }
    unknown castPtr[80606](80621 'try-expr'(80607 call :(80610 call . x[80565] c"chpl_p")(80614 call _to_nonnil(80616 call _to_unmanaged(80618 call . t[80571] c"chpl_t")))))
    (80623 'end of statement')
    (80624 call =(80627 call . x[80565] c"chpl_p") nil[32])
    (80631 return(80632 'new'(80634 call _owned[238](?) castPtr[80606])))
  }
  where {
    (394740 'is_proper_subtype'(80581 call _to_nonnil(80583 call . x[80565] c"chpl_t"))(80577 call . t[80571] c"chpl_t"))
  }
  function :[80639](ref arg x[80644] :
  owned[467983](?), arg t[80650] :
  owned[467983](?)) : _unknown[42] throws "inline" "operator"
  {
    unknown castPtr[80665](80680 'try-expr'(80666 call :(80669 call . x[80644] c"chpl_p")(80673 call _to_nonnil(80675 call _to_unmanaged(80677 call . t[80650] c"chpl_t")))))
    (80682 'end of statement')
    (80683 call =(80686 call . x[80644] c"chpl_p") nil[32])
    (80690 return(80691 'new'(80693 call _owned[238](?) castPtr[80665])))
  }
  where {
    (394741 'is_proper_subtype'(80660 call . x[80644] c"chpl_t")(80656 call . t[80650] c"chpl_t"))
  }
  function :[80698](ref arg x[80704] :
  owned?[467987](?), arg t[80711] :
  owned?[467987](?)) : _unknown[42] "inline" "operator"
  {
    unknown castPtr[80726](80727 call :(80730 call . x[80704] c"chpl_p")(80734 call _to_nilable(80736 call _to_unmanaged(80738 call . t[80711] c"chpl_t"))))
    (80742 'end of statement')
    if(80755 call _cond_test(80751 call != castPtr[80726] nil[32]))
    {
      (80744 call =(80747 call . x[80704] c"chpl_p") nil[32])
    }
    (80759 return(80760 'new'(80762 call _owned[238](?) castPtr[80726])))
  }
  where {
    (394742 'is_proper_subtype'(80721 call . x[80704] c"chpl_t")(80717 call . t[80711] c"chpl_t"))
  }
  function :[80767](ref arg x[80772] :
  owned[467983](?), arg t[80779] :
  owned?[467987](?)) : _unknown[42] "inline" "operator"
  {
    unknown castPtr[80796](80797 call :(80800 call . x[80772] c"chpl_p")(80804 call _to_nilable(80806 call _to_unmanaged(80808 call . t[80779] c"chpl_t"))))
    (80812 'end of statement')
    if(80825 call _cond_test(80821 call != castPtr[80796] nil[32]))
    {
      (80814 call =(80817 call . x[80772] c"chpl_p") nil[32])
    }
    (80829 return(80830 'new'(80832 call _owned[238](?) castPtr[80796])))
  }
  where {
    (394743 'is_proper_subtype'(80791 call . x[80772] c"chpl_t")(80785 call _to_nonnil(80787 call . t[80779] c"chpl_t")))
  }
  function :[80837](arg x[80840] :
  _nilType[30], arg t[80844] :
  _owned[238](?)) : _unknown[42] "inline" "operator"
  {
    if(80860 call _cond_test(80855 call isNonNilableClass(80857 call . t[80844] c"chpl_t")))
    {
      (80849 call compilerError "Illegal cast from nil to non-nilable owned type")
    }
    if(80874 call _cond_test(80872 call isGenericType t[80844]))
    {
      (80866 call compilerError "illegal cast from nil to a generic owned type")
    }
    unknown tmp[80880] t[80844]
    (80883 'end of statement')
    (80884 return tmp[80880])
  }
  function postfix![80888](const  ref arg x[80891] :
  _owned[238](?)) : _unknown[42] "always propagate line file info" "inline"
  {
    if(80935 call _cond_test 1)
    {
      if(80930 call _cond_test(80918 call ==(80921 call _to_nilable(80923 call . x[80891] c"chpl_t"))(80927 call . x[80891] c"chpl_t")))
      {
        if(80914 call _cond_test(80907 call ==(80910 call . x[80891] c"chpl_p") nil[32]))
        {
          (80905 call nilCheckHalt module=[222] HaltWrappers[518] "argument to ! is nil")
          (400285 'referenced modules list' HaltWrappers[518])
        }
      }
    }
    (80939 return(80941 call _to_nonnil(80943 call . x[80891] c"chpl_p")))
    (396068 'used modules list'(80897 'import' HaltWrappers[518]))
  } writeSerializable[310070] _owned[238](?)
  {
  } readDeserializable[310078] _owned[238](?)
  {
  }
  (396064 'used modules list'(79023 'use' ChapelStandard[315387]))
}