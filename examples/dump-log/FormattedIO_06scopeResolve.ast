AST dump for FormattedIO after pass scopeResolve.
Module use list: ChapelStandard IO CTypes POSIX OS Regex 

{
  function _toIntegral[197227](arg x[197231] :
  unknown t[197229]) : _unknown[42] "inline" "private"
  {
    (197238 return(197242 call _build_tuple x[197231] 1))
  }
  where {
    (197235 call isIntegralType t[197229])
  }
  function _toIntegral[197247](arg x[197251] :
  unknown t[197249]) : _unknown[42] throws "inline" "private"
  {
    unknown ret[197266](197270 call _build_tuple int(64)[10] bool[19])
    (197273 'end of statement')
    if(197298 call _cond_test(197296 call isAbstractEnumType t[197249]))
    {
      (197274 call = ret[197266](197280 call _build_tuple 0 0))
    }
    {
      (197283 call = ret[197266](197292 call _build_tuple(197287 call : x[197251] int(64)[10]) 1))
    }
    (197304 return ret[197266])
  }
  where {
    (197254 call &&(197257 call _isIoPrimitiveType t[197249])(197259 call !(197262 call isIntegralType t[197249])))
  }
  function _toIntegral[197309](arg x[197313] :
  unknown t[197311]) : _unknown[42] "inline" "private"
  {
    (197322 return(197326 call _build_tuple 0 0))
  }
  where {
    (197316 call !(197319 call _isIoPrimitiveType t[197311]))
  }
  function _toSigned[197331](arg x[197337] :
  (197334 call int(64)[10] unknown w[197335])) : _unknown[42] "inline" "private"
  {
    (197341 return(197345 call _build_tuple x[197337] 1))
  }
  function _toSigned[197349](arg x[197355] :
  (197352 call uint(64)[86] unknown w[197353])) : _unknown[42] "inline" "private"
  {
    (197359 return(197368 call _build_tuple(197361 call : x[197355](197365 call int(64)[10] w[197353])) 1))
  }
  function _toSigned[197372](arg x[197376] :
  unknown t[197374]) : _unknown[42] throws "inline" "private"
  {
    unknown ret[197391](197395 call _build_tuple int(64)[10] bool[19])
    (197398 'end of statement')
    if(197423 call _cond_test(197421 call isAbstractEnumType t[197374]))
    {
      (197399 call = ret[197391](197405 call _build_tuple 0 0))
    }
    {
      (197408 call = ret[197391](197417 call _build_tuple(197412 call : x[197376] int(64)[10]) 1))
    }
    (197429 return ret[197391])
  }
  where {
    (197379 call &&(197382 call _isIoPrimitiveType t[197374])(197384 call !(197387 call isIntegralType t[197374])))
  }
  function _toSigned[197434](arg x[197438] :
  unknown t[197436]) : _unknown[42] "inline" "private"
  {
    (197447 return(197454 call _build_tuple(197449 call : 0 int(64)[10]) 0))
  }
  where {
    (197441 call !(197444 call _isIoPrimitiveType t[197436]))
  }
  function _toUnsigned[197459](arg x[197465] :
  (197462 call uint(64)[86] unknown w[197463])) : _unknown[42] "inline" "private"
  {
    (197469 return(197473 call _build_tuple x[197465] 1))
  }
  function _toUnsigned[197477](arg x[197483] :
  (197480 call int(64)[10] unknown w[197481])) : _unknown[42] "inline" "private"
  {
    (197487 return(197496 call _build_tuple(197489 call : x[197483](197493 call uint(64)[86] w[197481])) 1))
  }
  function _toUnsigned[197500](arg x[197504] :
  unknown t[197502]) : _unknown[42] throws "inline" "private"
  {
    unknown ret[197519](197523 call _build_tuple uint(64)[86] bool[19])
    (197526 'end of statement')
    if(197554 call _cond_test(197552 call isAbstractEnumType t[197502]))
    {
      (197527 call = ret[197519](197536 call _build_tuple(197531 call : 0 uint(64)[86]) 0))
    }
    {
      (197539 call = ret[197519](197548 call _build_tuple(197543 call : x[197504] uint(64)[86]) 1))
    }
    (197560 return ret[197519])
  }
  where {
    (197507 call &&(197510 call _isIoPrimitiveType t[197502])(197512 call !(197515 call isIntegralType t[197502])))
  }
  function _toUnsigned[197565](arg x[197569] :
  unknown t[197567]) : _unknown[42] "inline" "private"
  {
    (197578 return(197585 call _build_tuple(197580 call : 0 uint(64)[86]) 0))
  }
  where {
    (197572 call !(197575 call _isIoPrimitiveType t[197567]))
  }
  function _toReal[197590](arg x[197594] :
  unknown t[197592]) : _unknown[42] "inline" "private"
  {
    (197601 return(197605 call _build_tuple x[197594] 1))
  }
  where {
    (197598 call isRealType t[197592])
  }
  function _toReal[197610](arg x[197614] :
  unknown t[197612]) : _unknown[42] throws "inline" "private"
  {
    unknown ret[197629](197633 call _build_tuple real(64)[13] bool[19])
    (197636 'end of statement')
    if(197661 call _cond_test(197659 call isAbstractEnumType t[197612]))
    {
      (197637 call = ret[197629](197643 call _build_tuple 0.0 0))
    }
    {
      (197646 call = ret[197629](197655 call _build_tuple(197650 call : x[197614] real(64)[13]) 1))
    }
    (197667 return ret[197629])
  }
  where {
    (197617 call &&(197620 call _isIoPrimitiveType t[197612])(197622 call !(197625 call isRealType t[197612])))
  }
  function _toReal[197672](arg x[197676] :
  unknown t[197674]) : _unknown[42] "inline" "private"
  {
    (197685 return(197689 call _build_tuple 0.0 0))
  }
  where {
    (197679 call !(197682 call _isIoPrimitiveType t[197674]))
  }
  function _toImag[197694](arg x[197698] :
  unknown t[197696]) : _unknown[42] "inline" "private"
  {
    (197705 return(197709 call _build_tuple x[197698] 1))
  }
  where {
    (197702 call isImagType t[197696])
  }
  function _toImag[197714](arg x[197718] :
  unknown t[197716]) : _unknown[42] throws "inline" "private"
  {
    unknown ret[197733](197737 call _build_tuple imag(64)[101] bool[19])
    (197740 'end of statement')
    if(197765 call _cond_test(197763 call isAbstractEnumType t[197716]))
    {
      (197741 call = ret[197733](197747 call _build_tuple 0.0i 0))
    }
    {
      (197750 call = ret[197733](197759 call _build_tuple(197754 call : x[197718] imag(64)[101]) 1))
    }
    (197771 return ret[197733])
  }
  where {
    (197721 call &&(197724 call _isIoPrimitiveType t[197716])(197726 call !(197729 call isImagType t[197716])))
  }
  function _toImag[197776](arg x[197780] :
  unknown t[197778]) : _unknown[42] "inline" "private"
  {
    (197789 return(197793 call _build_tuple 0.0i 0))
  }
  where {
    (197783 call !(197786 call _isIoPrimitiveType t[197778]))
  }
  function _toComplex[197798](arg x[197802] :
  unknown t[197800]) : _unknown[42] "inline" "private"
  {
    (197809 return(197813 call _build_tuple x[197802] 1))
  }
  where {
    (197806 call isComplexType t[197800])
  }
  function _toComplex[197818](arg x[197822] :
  unknown t[197820]) : _unknown[42] throws "inline" "private"
  {
    unknown ret[197837](197841 call _build_tuple complex(128)[111] bool[19])
    (197844 'end of statement')
    if(197872 call _cond_test(197870 call isAbstractEnumType t[197820]))
    {
      (197845 call = ret[197837](197854 call _build_tuple(197849 call + 0.0 0.0i) 0))
    }
    {
      (197857 call = ret[197837](197866 call _build_tuple(197861 call : x[197822] complex(128)[111]) 1))
    }
    (197878 return ret[197837])
  }
  where {
    (197825 call &&(197828 call _isIoPrimitiveType t[197820])(197830 call !(197833 call isComplexType t[197820])))
  }
  function _toComplex[197883](arg x[197887] :
  unknown t[197885]) : _unknown[42] "inline" "private"
  {
    (197896 return(197903 call _build_tuple(197898 call + 0.0 0.0i) 0))
  }
  where {
    (197890 call !(197893 call _isIoPrimitiveType t[197885]))
  }
  function _toRealOrComplex[197908](arg x[197912] :
  unknown t[197910]) : _unknown[42] "inline" "private"
  {
    (197919 return(197923 call _build_tuple x[197912] 1))
  }
  where {
    (197916 call isComplexType t[197910])
  }
  function _toRealOrComplex[197928](arg x[197932] :
  unknown t[197930]) : _unknown[42] "inline" "private"
  {
    (197944 return(197948 call _build_tuple x[197932] 1))
  }
  where {
    (197935 call ||(197938 call isRealType t[197930])(197941 call isImagType t[197930]))
  }
  function _toRealOrComplex[197953](arg x[197957] :
  unknown t[197955]) : _unknown[42] "inline" "private"
  {
    (197985 return(197992 call _build_tuple(197987 call : x[197957] real(64)[13]) 1))
  }
  where {
    (197960 call &&(197962 call &&(197964 call &&(197967 call _isIoPrimitiveType t[197955])(197969 call !(197972 call isComplexType t[197955])))(197974 call !(197977 call isRealType t[197955])))(197979 call !(197982 call isImagType t[197955])))
  }
  function _toRealOrComplex[197997](arg x[198001] :
  unknown t[197999]) : _unknown[42] "inline" "private"
  {
    (198010 return(198014 call _build_tuple 0.0 0))
  }
  where {
    (198004 call !(198007 call _isIoPrimitiveType t[197999]))
  }
  function _toNumeric[198019](arg x[198023] :
  unknown t[198021]) : _unknown[42] "inline" "private"
  {
    (198030 return(198034 call _build_tuple x[198023] 1))
  }
  where {
    (198027 call isNumericType t[198021])
  }
  function _toNumeric[198039](arg x[198043] :
  unknown t[198041]) : _unknown[42] throws "inline" "private"
  {
    unknown ret[198058](198062 call _build_tuple int(64)[10] bool[19])
    (198065 'end of statement')
    if(198090 call _cond_test(198088 call isAbstractEnumType t[198041]))
    {
      (198066 call = ret[198058](198072 call _build_tuple 0 0))
    }
    {
      (198075 call = ret[198058](198084 call _build_tuple(198079 call : x[198043] int(64)[10]) 1))
    }
    (198096 return ret[198058])
  }
  where {
    (198046 call &&(198049 call _isIoPrimitiveType t[198041])(198051 call !(198054 call isNumericType t[198041])))
  }
  function _toNumeric[198101](arg x[198105] :
  unknown t[198103]) : _unknown[42] "inline" "private"
  {
    (198114 return(198118 call _build_tuple 0 0))
  }
  where {
    (198108 call !(198111 call _isIoPrimitiveType t[198103]))
  }
  function _toBytes[198123](arg x[198126] :
  bytes[232]) : _unknown[42] "inline" "private"
  {
    (198130 return(198134 call _build_tuple x[198126] 1))
  }
  function _toBytes[198138](arg x[198141] :
  string[244]) : _unknown[42] "inline" "private"
  {
    (198145 return(198152 call _build_tuple(198147 call : x[198141] bytes[232]) 1))
  }
  function _toBytes[198156](arg x[198160] :
  unknown t[198158]) : _unknown[42] "inline" "private"
  {
    (198164 return(198171 call _build_tuple(198166 call : "" bytes[232]) 0))
  }
  function _toString[198175](arg x[198178] :
  string[244]) : _unknown[42] "inline" "private"
  {
    (198182 return(198186 call _build_tuple x[198178] 1))
  }
  function _toString[198190](arg x[198193] :
  bytes[232]) : _unknown[42] "inline" "private"
  {
    (198197 return(198201 call _build_tuple "" 0))
  }
  function _toString[198205](arg x[198209] :
  unknown t[198207]) : _unknown[42] "inline" "private"
  {
    if(198250 call _cond_test(198248 call isPrimitiveType t[198207]))
    {
      (198229 return(198236 call _build_tuple(198231 call : x[198209] string[244]) 1))
    }
    {
      (198239 return(198245 call _build_tuple(198242 call chpl_stringify x[198209]) 1))
    }
  }
  where {
    (198212 call &&(198214 call &&(198217 call _isIoPrimitiveType t[198207])(198219 call != t[198207] bytes[232]))(198223 call != t[198207] string[244]))
  }
  function _toString[198257](arg x[198261] :
  unknown t[198259]) : _unknown[42] "inline" "private"
  {
    (198270 return(198274 call _build_tuple "" 0))
  }
  where {
    (198264 call !(198267 call _isIoPrimitiveType t[198259]))
  }
  function _toChar[198279](arg x[198283] :
  unknown t[198281]) : _unknown[42] "inline" "private"
  {
    (198290 return(198299 call _build_tuple(198292 call : x[198283](198296 call int(64)[10] 32)) 1))
  }
  where {
    (198287 call isIntegralType t[198281])
  }
  function _toChar[198304](arg x[198308] :
  unknown t[198306]) : _unknown[42] "private"
  {
    unknown chr[198317](198319 call int(64)[10] 32)
    (198322 'end of statement')
    unknown nbytes[198324] c_int[522]
    (198327 'end of statement')
    unknown local_x[198329](198334 call(198331 call . x[198308] c"localize"))
    (198336 'end of statement')
    (198338 call qio_decode_char_buf chr[198317] nbytes[198324](198345 call(198342 call . local_x[198329] c"c_str"))(198346 call :(198349 call . local_x[198329] c"numBytes") c_ssize_t[620]))
    (198353 return(198357 call _build_tuple chr[198317] 1))
  }
  where {
    (198311 call == t[198306] string[244])
  }
  function _toChar[198362](arg x[198366] :
  unknown t[198364]) : _unknown[42] "inline" "private"
  {
    (198381 return(198390 call _build_tuple(198383 call : 0(198387 call int(64)[10] 32)) 0))
  }
  where {
    (198369 call !(198371 call ||(198373 call == t[198364] string[244])(198378 call isIntegralType t[198364])))
  }
  function _setIfPrimitive[198395](ref arg lhs[198399] :
  unknown t[198397], arg rhs[198404] :
  unknown t2[198402], arg argi[198408] :
  int(64)[10]) : _unknown[42] "private"
  {
    unknown empty[198423] t2[198402]
    (198426 'end of statement')
    if(198441 call _cond_test(198437 call == rhs[198404] empty[198423]))
    {
      (198428 call = lhs[198399] 0)
    }
    {
      (198433 call = lhs[198399] 1)
    }
    (198445 return 0)
  }
  where {
    (198412 call &&(198414 call == t[198397] bool[19])(198419 call _isIoPrimitiveType t2[198402]))
  }
  { scopeless type
    errorCode[12828]
  }
  function _setIfPrimitive[198451](ref arg lhs[198455] :
  unknown t[198453], arg rhs[198460] :
  unknown t2[198458], arg argi[198464] :
  int(64)[10]) : _unknown[42] "private"
  {
    Try
    {
      {
        if(198574 call _cond_test(198572 call isAbstractEnumType t[198453]))
        {
          if(198494 call _cond_test(198492 call isStringType t2[198458]))
          {
            (198481 call = lhs[198455](198484 call : rhs[198460] t[198453]))
          }
          {
            (198489 return ERANGE[11411])
          }
        }
        {
          if(198567 call _cond_test(198565 call isEnumType t[198453]))
          {
            if(198526 call _cond_test(198518 call ||(198521 call isIntType t2[198458])(198524 call isStringType t2[198458])))
            {
              (198500 call = lhs[198455](198503 call : rhs[198460] t[198453]))
            }
            {
              (198508 call = lhs[198455](198511 call :(198513 call : rhs[198460] int(64)[10]) t[198453]))
            }
          }
          {
            if(198560 call _cond_test(198552 call &&(198555 call isBytesType t2[198458])(198558 call isStringType t[198453])))
            {
              (198532 call = lhs[198455](198539 call(198536 call . rhs[198460] c"decode") strict[37976]))
            }
            {
              (198545 call = lhs[198455](198548 call : rhs[198460] t[198453]))
            }
          }
        }
      }
    }
    Catch
    {
      unknown tmp[395106] "temp"(395109 'current error')
      unknown chpl_anon_error[395112](395118 'new'(395117 call _owned[238](?)(395114 'to non nilable class' tmp[395106])))
      {
        (198581 return ERANGE[11411])
      }
    }
    (198586 return 0)
  }
  where {
    (198468 call &&(198470 call != t[198453] bool[19])(198475 call _isIoPrimitiveType t[198453]))
  }
  { scopeless type
    errorCode[12828]
  }
  function _setIfPrimitive[198592](ref arg lhs[198596] :
  unknown t[198594], arg rhs[198599]:_any[141](?), arg argi[198602] :
  int(64)[10]) : _unknown[42] "inline" "private"
  {
    (198612 return(198614 call qio_format_error_arg_mismatch argi[198602]))
  }
  where {
    (198606 call !(198609 call _isIoPrimitiveType t[198594]))
  }
  { scopeless type
    errorCode[12828]
  }
  function _setIfChar[198620](ref arg lhs[198624] :
  unknown t[198622], arg rhs[198630] :
  (198628 call int(64)[10] 32)) : _unknown[42] "inline" "private" "no return value for void"
  {
    (198638 call = lhs[198624](198641 call :(198643 'new'(198645 call _internalIoChar[176999] rhs[198630])) string[244]))
  }
  where {
    (198633 call == t[198622] string[244])
  }
  function _setIfChar[198651](ref arg lhs[198655] :
  unknown t[198653], arg rhs[198661] :
  (198659 call int(64)[10] 32)) : _unknown[42] "inline" "private" "no return value for void"
  {
    (198668 call = lhs[198655](198671 call : rhs[198661] t[198653]))
  }
  where {
    (198665 call isIntegralType t[198653])
  }
  function _setIfChar[198678](ref arg lhs[198682] :
  unknown t[198680], arg rhs[198688] :
  (198686 call int(64)[10] 32)) : _unknown[42] "inline" "private" "no return value for void"
  {
  }
  where {
    (198691 call !(198693 call ||(198695 call == t[198680] string[244])(198700 call isIntegralType t[198680])))
  }
  function _toRegex[198706](arg x[198710] :
  unknown t[198708]) : _unknown[42] "inline" "private"
  {
    (198720 return(198724 call _build_tuple x[198710] 1))
  }
  where {
    (395119 'is_subtype'(198717 call regex[156365](?) ?[227]) t[198708])
  }
  function _toRegex[198729](arg x[198733] :
  unknown t[198731]) : _unknown[42] "inline" "private"
  {
    unknown r[198738](198740 call regex[156365](?) string[244])
    (198743 'end of statement')
    (198744 return(198748 call _build_tuple r[198738] 0))
  }
  function _channel_regex_info[199049].clear[198801](arg _mt[198805]:_MT[201], arg this[198803]:_channel_regex_info[199049]) : _unknown[42] "method" "primary method" "no return value for void"
  {
    if(198813 call _cond_test(440755 call . this[198803] c"releaseRegex"))
    {
      (198810 call qio_regex_release(440750 call . this[198803] c"theRegex"))
    }
    (198817 call =(440760 call . this[198803] c"theRegex")(198821 call qio_regex_null))
    (198822 call =(440765 call . this[198803] c"hasRegex") 0)
    (198826 call =(440770 call . this[198803] c"matchedRegex") 0)
    (198830 call =(440775 call . this[198803] c"releaseRegex") 0)
    if(198843 call _cond_test(440790 call . this[198803] c"matches"))
    {
      (198835 call _ddata_free(440780 call . this[198803] c"matches")(198837 call +(440785 call . this[198803] c"ncaptures") 1))
    }
    {
      unknown _indexOfInterest[198863] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[198864] "expr temp" "temp"
      (198873 'move' _iterator[198864](198871 call _getIterator(198880 call chpl_direct_counted_range_iter 0(440801 call . this[198803] c"ncaptures"))))
      Defer
      {
        {
          (198895 call _freeIterator _iterator[198864])
        }
      }
      { scopeless type
        (198885 'move' _indexOfInterest[198863](198882 call iteratorIndex _iterator[198864]))
      }
      ForLoop[198865]
      {
        unknown i[198848] "index var" "insert auto destroy"
        (198890 'move' i[198848] _indexOfInterest[198863])
        (198856 call =(198859 call(440795 call . this[198803] c"capArr") i[198848]) b"")
        label _continueLabel[198868]
        _indexOfInterest[198863]
        _iterator[198864]
      }
      label _breakLabel[198869]
    }
    if(198908 call _cond_test(440816 call . this[198803] c"capArr"))
    {
      (198903 call _ddata_free(440806 call . this[198803] c"capArr")(440811 call . this[198803] c"ncaptures"))
    }
  }
  function _channel_regex_info[199049].allocate_captures[198915](arg _mt[198919]:_MT[201], arg this[198917]:_channel_regex_info[199049]) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (198922 call =(440821 call . this[198917] c"ncaptures")(198926 call qio_regex_get_ncaptures(440826 call . this[198917] c"theRegex")))
    (198928 call =(440831 call . this[198917] c"matches")(198932 call _ddata_allocate qio_regex_string_piece_t[153880](198934 call +(440837 call . this[198917] c"ncaptures") 1)))
    (198938 call =(440842 call . this[198917] c"capArr")(198942 call _ddata_allocate bytes[232](440847 call . this[198917] c"ncaptures")))
    (198945 call =(440852 call . this[198917] c"capturei") 0)
  }
  function _channel_regex_info[199049].deinit[198951](arg _mt[198955]:_MT[201], arg this[198953]:_channel_regex_info[199049]) : _unknown[42] "destructor" "method" "primary method" "no return value for void"
  {
    (198959 call(440856 call . this[198953] c"clear"))
  }
  function _channel_regex_info[199049].serialize[198962](arg _mt[198970]:_MT[201], arg this[198964]:_channel_regex_info[199049], arg writer[198966]:_any[141](?), ref arg serializer[198968]:_any[141](?)) : _unknown[42] throws "method" "primary method" "method overrides" "no return value for void"
  {
    (198977 call(198974 call . writer[198966] c"write")(198978 call + "{hasRegex = "(198983 call :(440861 call . this[198964] c"hasRegex") string[244])))
    (198991 call(198988 call . writer[198966] c"write")(198992 call + ", matchedRegex = "(198997 call :(440866 call . this[198964] c"matchedRegex") string[244])))
    (199005 call(199002 call . writer[198966] c"write")(199006 call + ", releaseRegex = "(199011 call :(440871 call . this[198964] c"releaseRegex") string[244])))
    (199019 call(199016 call . writer[198966] c"write")(199020 call + ", ... capturei = "(199025 call :(440876 call . this[198964] c"capturei") string[244])))
    (199033 call(199030 call . writer[198966] c"write")(199034 call +(199036 call + ", ncaptures = "(199041 call :(440881 call . this[198964] c"ncaptures") string[244])) "}"))
  }
  type _channel_regex_info[199049] val super[397595]:RootClass[236] "super class" unknown hasRegex[198755] 0 unknown matchedRegex[198760] 0 unknown releaseRegex[198765] 0 unknown theRegex[198770](198772 call qio_regex_null) unknown matches[198776] nil[32](198778 call _ddata[67573](?) qio_regex_string_piece_t[153880]) unknown capArr[198784] nil[32](198786 call _ddata[67573](?) bytes[232]) unknown capturei[198792] int(64)[10] unknown ncaptures[198797] int(64)[10]
  type unmanaged _channel_regex_info?[468136]
  type _channel_regex_info?[468133](?)
  type unmanaged _channel_regex_info[468130]
  type _channel_regex_info[397587](?)
  function fileReader[170893](?)._match_regex_if_needed[199051](arg _mt[199078]:_MT[201], arg this[199054]:fileReader[170893](?) :
  fileReader[170893](?), arg cur[199058] :
  c_size_t[614], arg len[199062] :
  c_size_t[614], ref arg error[199066] :
  errorCode[12828], ref arg style[199070] :
  iostyleInternal[164872], arg r[199075] :
  unmanaged _channel_regex_info[468130]) : _unknown[42] "method" "no return value for void"
  {
    if(199431 call _cond_test(199426 call qio_regex_ok(199428 call . r[199075] c"theRegex")))
    {
      if(199090 call _cond_test(199087 call . r[199075] c"matchedRegex"))
      {
        (199082 return _void[46])
      }
      (199095 call =(199098 call . r[199075] c"matchedRegex") 1)
      (199108 call(199105 call . r[199075] c"allocate_captures"))
      unknown ncaps[199110](199114 call . r[199075] c"ncaptures")
      (199118 'end of statement')
      unknown nm[199120](199121 call + ncaps[199110] 1)
      (199126 'end of statement')
      unknown maxlen[199128](199135 call . style[199070] c"max_width_characters")(199130 call int(64)[10] 64)
      (199139 'end of statement')
      unknown can_discard[199141](199142 call == cur[199058] len[199062])
      (199147 'end of statement')
      if(199165 call _cond_test(199157 call == maxlen[199128](199161 call max(199163 call uint(64)[86] 32))))
      {
        (199148 call = maxlen[199128](199152 call max(199154 call int(64)[10] 64)))
      }
      unknown before_match[199171](199173 call qio_channel_offset_unlocked(440896 call . this[199054] c"_channel_internal"))
      (199176 'end of statement')
      (199177 call = error[199066](199181 call qio_regex_channel_match(199185 call . r[199075] c"theRegex") 0(440902 call . this[199054] c"_channel_internal") maxlen[199128] QIO_REGEX_ANCHOR_START[153855] can_discard[199141] 1 0(199198 call . r[199075] c"matches") nm[199120]))
      unknown after_match[199203](199205 call qio_channel_offset_unlocked(440911 call . this[199054] c"_channel_internal"))
      (199208 'end of statement')
      if(199415 call _cond_test(199412 call ! error[199066]))
      {
        {
          unknown _indexOfInterest[199255] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[199256] "expr temp" "temp"
          (199265 'move' _iterator[199256](199263 call _getIterator(199272 call chpl_direct_counted_range_iter 0 ncaps[199110])))
          Defer
          {
            {
              (199287 call _freeIterator _iterator[199256])
            }
          }
          { scopeless type
            (199277 'move' _indexOfInterest[199255](199274 call iteratorIndex _iterator[199256]))
          }
          ForLoop[199257]
          {
            unknown j[199210] "index var" "insert auto destroy"
            (199282 'move' j[199210] _indexOfInterest[199255])
            {
              unknown m[199220](199222 call _to_regexMatch(199227 call(199224 call . r[199075] c"matches")(199228 call + 1 j[199210])))
              (199233 'end of statement')
              (199235 call(440916 call . this[199054] c"_extractMatch") m[199220](199243 call(199240 call . r[199075] c"capArr") j[199210]) error[199066])
              if(199250 call _cond_test error[199066])
              {
                break _breakLabel[199261] _breakLabel[199261]
              }
            }
            label _continueLabel[199260]
            _indexOfInterest[199255]
            _iterator[199256]
          }
          label _breakLabel[199261]
        }
        unknown cur[199295](199297 call qio_channel_offset_unlocked(440926 call . this[199054] c"_channel_internal"))
        (199300 'end of statement')
        unknown target[199302](199303 call :(199305 call +(199313 call .(199311 call(199308 call . r[199075] c"matches") 0) c"offset")(199322 call .(199320 call(199317 call . r[199075] c"matches") 0) c"len")) int(64)[10])
        (199327 'end of statement')
        (199328 call = error[199066](199332 call qio_channel_advance 0(440932 call . this[199054] c"_channel_internal")(199335 call - target[199302] cur[199295])))
      }
      {
        {
          unknown _indexOfInterest[199358] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[199359] "expr temp" "temp"
          (199368 'move' _iterator[199359](199366 call _getIterator(199375 call chpl_direct_counted_range_iter 0 ncaps[199110])))
          Defer
          {
            {
              (199390 call _freeIterator _iterator[199359])
            }
          }
          { scopeless type
            (199380 'move' _indexOfInterest[199358](199377 call iteratorIndex _iterator[199359]))
          }
          ForLoop[199360]
          {
            unknown j[199340] "index var" "insert auto destroy"
            (199385 'move' j[199340] _indexOfInterest[199358])
            {
              (199349 call =(199355 call(199352 call . r[199075] c"capArr") j[199340]) b"")
            }
            label _continueLabel[199363]
            _indexOfInterest[199358]
            _iterator[199359]
          }
          label _breakLabel[199364]
        }
        unknown cur[199398](199400 call qio_channel_offset_unlocked(440941 call . this[199054] c"_channel_internal"))
        (199403 'end of statement')
        (199405 call qio_channel_advance 0(440946 call . this[199054] c"_channel_internal")(199408 call - before_match[199171] cur[199398]))
      }
    }
    {
      (199420 call = error[199066](199424 call qio_format_error_bad_regex))
    }
  }
  function fileReader[170893](?)._format_reader[199437](arg _mt[199478]:_MT[201], arg this[199440]:fileReader[170893](?) :
  fileReader[170893](?), arg fmtStr[199445] :
  unknown fmtType[199443], ref arg cur[199449] :
  c_size_t[614], arg len[199453] :
  c_size_t[614], ref arg error[199457] :
  errorCode[12828], ref arg conv[199461] :
  qio_conv_t[167955], ref arg gotConv[199465] :
  bool[19], ref arg style[199469] :
  iostyleInternal[164872], ref arg r[199475] :
  unmanaged _channel_regex_info?[468136]) : _unknown[42] "method" "no return value for void"
  {
    if(199497 call _cond_test(199493 call != r[199475] nil[32]))
    {
      (199481 call =(199488 call .(199483 call postfix! r[199475]) c"hasRegex") 0)
    }
    if(199947 call _cond_test(199944 call ! error[199457]))
    {
      const fmt[199504] "const" "ref var"(199513 call(199510 call .(199509 call(199506 call . fmtStr[199445] c"localize")) c"c_str"))
      (199515 'end of statement')
      {
        unknown tmp[199917] "temp"
        (199941 'move' tmp[199917](199936 call _cond_test(199938 call < cur[199449] len[199453])))
        WhileDo[199922]
        {
          {
            (199521 call = gotConv[199465] 0)
            if(199529 call _cond_test error[199457])
            {
              break _breakLabel[199921] _breakLabel[199921]
            }
            unknown end[199535](199537 call uint(64)[86] 64)
            (199540 'end of statement')
            (199541 call = error[199457](199545 call qio_conv_parse fmt[199504] cur[199449] end[199535] 1 conv[199461] style[199469]))
            if(199554 call _cond_test error[199457])
            {
            }
            (199558 call = cur[199449](199561 call : end[199535] c_size_t[614]))
            if(199569 call _cond_test error[199457])
            {
              break _breakLabel[199921] _breakLabel[199921]
            }
            if(199912 call _cond_test(199905 call ==(199908 call . conv[199461] c"argType") QIO_CONV_ARG_TYPE_NONE_LITERAL[168048]))
            {
              if(199704 call _cond_test(199697 call ==(199700 call . conv[199461] c"literal_is_whitespace") 2))
              {
                unknown offsetA[199577](199579 call qio_channel_offset_unlocked(440977 call . this[199440] c"_channel_internal"))
                (199582 'end of statement')
                (199583 call = error[199457](199587 call qio_channel_skip_past_newline 0(440983 call . this[199440] c"_channel_internal") 1))
                unknown offsetB[199592](199594 call qio_channel_offset_unlocked(440988 call . this[199440] c"_channel_internal"))
                (199597 'end of statement')
                if(199612 call _cond_test(199603 call &&(199605 call ! error[199457])(199608 call == offsetA[199577] offsetB[199592])))
                {
                  (199599 call = error[199457](440992 call EFORMAT[177345]))
                }
              }
              {
                if(199693 call _cond_test(199684 call ==(199689 call . conv[199461] c"literal_is_whitespace") 1))
                {
                  unknown offsetA[199618](199620 call qio_channel_offset_unlocked(440999 call . this[199440] c"_channel_internal"))
                  (199623 'end of statement')
                  (199624 call = error[199457](199628 call qio_channel_scan_literal_2 0(441005 call . this[199440] c"_channel_internal")(199632 call . conv[199461] c"literal") 0 1))
                  unknown offsetB[199638](199640 call qio_channel_offset_unlocked(441010 call . this[199440] c"_channel_internal"))
                  (199643 'end of statement')
                  if(199658 call _cond_test(199649 call &&(199651 call ! error[199457])(199654 call == offsetA[199618] offsetB[199638])))
                  {
                    (199645 call = error[199457](441014 call EFORMAT[177345]))
                  }
                }
                {
                  (199663 call = error[199457](199667 call qio_channel_scan_literal_2 0(441022 call . this[199440] c"_channel_internal")(199671 call . conv[199461] c"literal")(199674 call :(199679 call . conv[199461] c"literal_length") c_ssize_t[620]) 0))
                }
              }
            }
            {
              if(199901 call _cond_test(199892 call ==(199897 call . conv[199461] c"argType") QIO_CONV_ARG_TYPE_NONE_REGEX_LITERAL[168043]))
              {
                if(199723 call _cond_test(199719 call == r[199475] nil[32]))
                {
                  (199710 call = r[199475](199713 'new'(_chpl_manager = unmanaged[183](?))(199717 call _channel_regex_info[397587](?))))
                }
                const rnn[199729] "const"(199730 call postfix! r[199475])
                (199734 'end of statement')
                (199739 call(199736 call . rnn[199729] c"clear"))
                unknown errstr[199741] string[244]
                (199744 'end of statement')
                (199746 call qio_regex_create_compile_flags_2(199750 call . conv[199461] c"regex")(199756 call . conv[199461] c"regex_length")(199762 call . conv[199461] c"regex_flags")(199768 call . conv[199461] c"regex_flags_length")(199771 call == fmtType[199443] string[244])(199776 call . rnn[199729] c"theRegex"))
                (199779 call =(199784 call . rnn[199729] c"releaseRegex") 1)
                if(199880 call _cond_test(199875 call qio_regex_ok(199877 call . rnn[199729] c"theRegex")))
                {
                  (199789 call =(199792 call . rnn[199729] c"hasRegex") 1)
                  (199796 call =(199799 call . rnn[199729] c"ncaptures")(199803 call qio_regex_get_ncaptures(199805 call . rnn[199729] c"theRegex")))
                  if(199864 call _cond_test(199824 call ||(199826 call ||(199828 call ||(199830 call >(199833 call . rnn[199729] c"ncaptures") 0)(199837 call !=(199842 call . conv[199461] c"preArg1") QIO_CONV_UNK[167958]))(199846 call !=(199851 call . conv[199461] c"preArg2") QIO_CONV_UNK[167958]))(199855 call !=(199860 call . conv[199461] c"preArg3") QIO_CONV_UNK[167958])))
                  {
                    (199809 call = gotConv[199465] 1)
                    break _breakLabel[199921] _breakLabel[199921]
                  }
                  {
                    (199818 call(441035 call . this[199440] c"_match_regex_if_needed") cur[199449] len[199453] error[199457] style[199469] rnn[199729])
                  }
                }
                {
                  (199869 call = error[199457](199873 call qio_format_error_bad_regex))
                }
              }
              {
                (199885 call = gotConv[199465] 1)
                break _breakLabel[199921] _breakLabel[199921]
              }
            }
          }
          label _continueLabel[199920]
          (199931 'move' tmp[199917](199926 call _cond_test(199928 call < cur[199449] len[199453])))
          tmp[199917]
        }
        label _breakLabel[199921]
      }
    }
  }
  function fileWriter[170987](?)._format_reader[199953](arg _mt[199988]:_MT[201], arg this[199956]:fileWriter[170987](?) :
  fileWriter[170987](?), arg fmtStr[199961] :
  unknown fmtType[199959], ref arg cur[199965] :
  c_size_t[614], arg len[199969] :
  c_size_t[614], ref arg error[199973] :
  errorCode[12828], ref arg conv[199977] :
  qio_conv_t[167955], ref arg gotConv[199981] :
  bool[19], ref arg style[199985] :
  iostyleInternal[164872]) : _unknown[42] "method" "no return value for void"
  {
    if(200149 call _cond_test(200146 call ! error[199973]))
    {
      const fmt[199993] "const" "ref var"(200002 call(199999 call .(199998 call(199995 call . fmtStr[199961] c"localize")) c"c_str"))
      (200004 'end of statement')
      {
        unknown tmp[200119] "temp"
        (200143 'move' tmp[200119](200138 call _cond_test(200140 call < cur[199965] len[199969])))
        WhileDo[200124]
        {
          {
            (200010 call = gotConv[199981] 0)
            if(200018 call _cond_test error[199973])
            {
              break _breakLabel[200123] _breakLabel[200123]
            }
            unknown end[200024](200026 call uint(64)[86] 64)
            (200029 'end of statement')
            (200030 call = error[199973](200034 call qio_conv_parse fmt[199993] cur[199965] end[200024] 0 conv[199977] style[199985]))
            if(200043 call _cond_test error[199973])
            {
            }
            (200047 call = cur[199965](200050 call : end[200024] c_size_t[614]))
            if(200058 call _cond_test error[199973])
            {
              break _breakLabel[200123] _breakLabel[200123]
            }
            if(200114 call _cond_test(200107 call ==(200110 call . conv[199977] c"argType") QIO_CONV_ARG_TYPE_NONE_LITERAL[168048]))
            {
              (200064 call = error[199973](200068 call qio_channel_print_literal_2 0(441077 call . this[199956] c"_channel_internal")(200072 call . conv[199977] c"literal")(200075 call :(200078 call . conv[199977] c"literal_length") c_ssize_t[620])))
            }
            {
              if(200103 call _cond_test(200096 call ==(200099 call . conv[199977] c"argType") QIO_CONV_ARG_TYPE_NONE_REGEX_LITERAL[168043]))
              {
                (200083 call = error[199973](200087 call qio_format_error_write_regex))
              }
              {
                (200089 call = gotConv[199981] 1)
                break _breakLabel[200123] _breakLabel[200123]
              }
            }
          }
          label _continueLabel[200122]
          (200133 'move' tmp[200119](200128 call _cond_test(200130 call < cur[199965] len[199969])))
          tmp[200119]
        }
        label _breakLabel[200123]
      }
    }
  }
  function _conv_helper[200155](ref arg error[200158] :
  errorCode[12828], ref arg conv[200162] :
  qio_conv_t[167955], ref arg gotConv[200166] :
  bool[19], ref arg j[200170] :
  int(64)[10], arg argType[200176] :
  (200174 call c_ptr[46891](?) c_int[522]), arg argTypeLen[200180] :
  int(64)[10]) : _unknown[42] "private" "no return value for void"
  {
    function boundsCheckHelp[200184]() : _unknown[42] "no return value for void"
    {
      if(200208 call _cond_test 1)
      {
        if(200203 call _cond_test(200199 call >= j[200170] argTypeLen[200180]))
        {
          (200190 call halt "Index " j[200170] " is accessed on argType of length " argTypeLen[200180])
        }
      }
    }
    (200215 call boundsCheckHelp)
    if(200219 call _cond_test error[200158])
    {
      (200216 return _void[46])
    }
    if(200343 call _cond_test gotConv[200166])
    {
      if(200246 call _cond_test(200239 call !=(200242 call . conv[200162] c"preArg1") QIO_CONV_UNK[167958]))
      {
        (200226 call =(200229 call argType[200176] j[200170])(200232 call . conv[200162] c"preArg1"))
        (200235 call += j[200170] 1)
      }
      (200251 call boundsCheckHelp)
      if(200273 call _cond_test(200266 call !=(200269 call . conv[200162] c"preArg2") QIO_CONV_UNK[167958]))
      {
        (200253 call =(200256 call argType[200176] j[200170])(200259 call . conv[200162] c"preArg2"))
        (200262 call += j[200170] 1)
      }
      (200278 call boundsCheckHelp)
      if(200300 call _cond_test(200293 call !=(200296 call . conv[200162] c"preArg3") QIO_CONV_UNK[167958]))
      {
        (200280 call =(200283 call argType[200176] j[200170])(200286 call . conv[200162] c"preArg3"))
        (200289 call += j[200170] 1)
      }
      (200305 call boundsCheckHelp)
      if(200338 call _cond_test(200331 call !=(200334 call . conv[200162] c"argType") QIO_CONV_UNK[167958]))
      {
        if(200323 call _cond_test(200317 call ==(200320 call argType[200176] j[200170]) QIO_CONV_UNK[167958]))
        {
          (200308 call =(200311 call argType[200176] j[200170])(200314 call . conv[200162] c"argType"))
        }
        (200327 call += j[200170] 1)
      }
    }
  }
  function _conv_sethandler[200349](ref arg error[200352] :
  errorCode[12828], arg argtypei[200356] :
  c_int[522], ref arg style[200360] :
  iostyleInternal[164872], arg i[200364] :
  int(64)[10], arg argi[200367]:_any[141](?), arg isReadf[200370] :
  bool[19]) : _unknown[42] throws "private"
  {
    if(200379 call _cond_test error[200352])
    {
      (200375 return 0)
    }
    {
      unknown tmp[200972] "expr temp" "maybe param" "maybe type" "temp"
      (200974 'move' tmp[200972] argtypei[200356])
      if(200979 call _cond_test(200976 call == tmp[200972] QIO_CONV_SET_MIN_WIDTH_COLS[168053]))
      {
        unknown tmp[200398] "temp"(200396 call _toIntegral argi[200367])
        (200405 call _check_tuple_var_decl tmp[200398] 2)
        unknown t[200391](200399 call tmp[200398] 0)
        unknown ok[200393](200402 call tmp[200398] 1)
        (200410 'end of statement')
        if(200436 call _cond_test(200433 call ! ok[200393]))
        {
          (200412 call = error[200352](200416 call qio_format_error_arg_mismatch i[200364]))
        }
        {
          (200418 call =(200423 call . style[200360] c"min_width_columns")(200426 call : t[200391](200430 call uint(64)[86] 32)))
        }
      }
      {
        if(200985 call _cond_test(200982 call == tmp[200972] QIO_CONV_SET_MAX_WIDTH_COLS[168058]))
        {
          unknown tmp[200454] "temp"(200452 call _toIntegral argi[200367])
          (200461 call _check_tuple_var_decl tmp[200454] 2)
          unknown t[200447](200455 call tmp[200454] 0)
          unknown ok[200449](200458 call tmp[200454] 1)
          (200466 'end of statement')
          if(200492 call _cond_test(200489 call ! ok[200449]))
          {
            (200468 call = error[200352](200472 call qio_format_error_arg_mismatch i[200364]))
          }
          {
            (200474 call =(200479 call . style[200360] c"max_width_columns")(200482 call : t[200447](200486 call uint(64)[86] 32)))
          }
        }
        {
          if(200992 call _cond_test(200989 call == tmp[200972] QIO_CONV_SET_MAX_WIDTH_CHARS[168063]))
          {
            unknown tmp[200510] "temp"(200508 call _toIntegral argi[200367])
            (200517 call _check_tuple_var_decl tmp[200510] 2)
            unknown t[200503](200511 call tmp[200510] 0)
            unknown ok[200505](200514 call tmp[200510] 1)
            (200522 'end of statement')
            if(200546 call _cond_test(200543 call ! ok[200505]))
            {
              (200524 call = error[200352](200528 call qio_format_error_arg_mismatch i[200364]))
            }
            {
              (200530 call =(200533 call . style[200360] c"max_width_characters")(200536 call : t[200503](200540 call uint(64)[86] 32)))
            }
          }
          {
            if(200999 call _cond_test(200996 call == tmp[200972] QIO_CONV_SET_MAX_WIDTH_BYTES[168068]))
            {
              unknown tmp[200564] "temp"(200562 call _toIntegral argi[200367])
              (200571 call _check_tuple_var_decl tmp[200564] 2)
              unknown t[200557](200565 call tmp[200564] 0)
              unknown ok[200559](200568 call tmp[200564] 1)
              (200576 'end of statement')
              if(200602 call _cond_test(200599 call ! ok[200559]))
              {
                (200578 call = error[200352](200582 call qio_format_error_arg_mismatch i[200364]))
              }
              {
                (200584 call =(200589 call . style[200360] c"max_width_bytes")(200592 call : t[200557](200596 call uint(64)[86] 32)))
              }
            }
            {
              if(201006 call _cond_test(201003 call == tmp[200972] QIO_CONV_SET_PRECISION[168073]))
              {
                unknown tmp[200620] "temp"(200618 call _toIntegral argi[200367])
                (200627 call _check_tuple_var_decl tmp[200620] 2)
                unknown t[200613](200621 call tmp[200620] 0)
                unknown ok[200615](200624 call tmp[200620] 1)
                (200632 'end of statement')
                if(200656 call _cond_test(200653 call ! ok[200615]))
                {
                  (200634 call = error[200352](200638 call qio_format_error_arg_mismatch i[200364]))
                }
                {
                  (200640 call =(200643 call . style[200360] c"precision")(200646 call : t[200613](200650 call int(64)[10] 32)))
                }
              }
              {
                if(201013 call _cond_test(201010 call == tmp[200972] QIO_CONV_SET_STRINGSTART[168088]))
                {
                  unknown tmp[200674] "temp"(200672 call _toChar argi[200367])
                  (200681 call _check_tuple_var_decl tmp[200674] 2)
                  unknown t[200667](200675 call tmp[200674] 0)
                  unknown ok[200669](200678 call tmp[200674] 1)
                  (200686 'end of statement')
                  if(200710 call _cond_test(200707 call ! ok[200669]))
                  {
                    (200688 call = error[200352](200692 call qio_format_error_arg_mismatch i[200364]))
                  }
                  {
                    (200694 call =(200699 call . style[200360] c"string_start")(200702 call : t[200667] style_char_t[164529]))
                  }
                }
                {
                  if(201020 call _cond_test(201017 call == tmp[200972] QIO_CONV_SET_STRINGEND[168098]))
                  {
                    unknown tmp[200728] "temp"(200726 call _toChar argi[200367])
                    (200735 call _check_tuple_var_decl tmp[200728] 2)
                    unknown t[200721](200729 call tmp[200728] 0)
                    unknown ok[200723](200732 call tmp[200728] 1)
                    (200740 'end of statement')
                    if(200762 call _cond_test(200759 call ! ok[200723]))
                    {
                      (200742 call = error[200352](200746 call qio_format_error_arg_mismatch i[200364]))
                    }
                    {
                      (200748 call =(200751 call . style[200360] c"string_end")(200754 call : t[200721] style_char_t[164529]))
                    }
                  }
                  {
                    if(201027 call _cond_test(201024 call == tmp[200972] QIO_CONV_SET_STRINGSTARTEND[168093]))
                    {
                      unknown tmp[200780] "temp"(200778 call _toChar argi[200367])
                      (200787 call _check_tuple_var_decl tmp[200780] 2)
                      unknown t[200773](200781 call tmp[200780] 0)
                      unknown ok[200775](200784 call tmp[200780] 1)
                      (200792 'end of statement')
                      if(200824 call _cond_test(200821 call ! ok[200775]))
                      {
                        (200794 call = error[200352](200798 call qio_format_error_arg_mismatch i[200364]))
                      }
                      {
                        (200801 call =(200804 call . style[200360] c"string_start")(200807 call : t[200773] style_char_t[164529]))
                        (200811 call =(200814 call . style[200360] c"string_end")(200817 call : t[200773] style_char_t[164529]))
                      }
                    }
                    {
                      if(201034 call _cond_test(201031 call == tmp[200972] QIO_CONV_SET_STRINGLEN[168078]))
                      {
                        unknown tmp[200841] "temp"(200839 call _toIntegral argi[200367])
                        (200848 call _check_tuple_var_decl tmp[200841] 2)
                        unknown t[200834](200842 call tmp[200841] 0)
                        unknown ok[200836](200845 call tmp[200841] 1)
                        (200853 'end of statement')
                        if(200877 call _cond_test(200874 call ! ok[200836]))
                        {
                          (200855 call = error[200352](200859 call qio_format_error_arg_mismatch i[200364]))
                        }
                        {
                          (200862 call =(200865 call . style[200360] c"str_style")(200868 call : t[200834](200872 call int(64)[10] 64)))
                        }
                      }
                      {
                        if(201041 call _cond_test(201038 call == tmp[200972] QIO_CONV_SET_TERMINATOR[168083]))
                        {
                          unknown tmp[200894] "temp"(200892 call _toChar argi[200367])
                          (200901 call _check_tuple_var_decl tmp[200894] 2)
                          unknown t[200887](200895 call tmp[200894] 0)
                          unknown ok[200889](200898 call tmp[200894] 1)
                          (200906 'end of statement')
                          if(200945 call _cond_test(200942 call ! ok[200889]))
                          {
                            (200908 call = error[200352](200912 call qio_format_error_arg_mismatch i[200364]))
                          }
                          {
                            (200915 call =(200918 call . style[200360] c"str_style")(200921 call -(200923 call -(200925 call : t[200887](200929 call uint(64)[86] 8))(200931 call : data_null[164182](200940 call int(64)[10] 64)))))
                          }
                        }
                        {
                          if(201048 call _cond_test(201045 call == tmp[200972] QIO_CONV_SET_DONE[168108]))
                          {
                          }
                          {
                            if(201055 call _cond_test(201052 call == tmp[200972] QIO_CONV_UNK[167958]))
                            {
                              (200959 call = error[200352](200963 call qio_format_error_too_many_args))
                            }
                            {
                              (200968 return 1)
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    (201059 return 0)
  }
  { scopeless type
    bool[19]
  }
  function fileWriter[170987](?)._write_signed[201064](arg _mt[201084]:_MT[201], arg this[201067]:fileWriter[170987](?) :
  fileWriter[170987](?), arg width[201073] :
  (201071 call uint(64)[86] 32), arg t[201077] :
  int(64)[10], arg i[201081] :
  int(64)[10]) : _unknown[42] "method"
  {
    unknown err[201089] errorCode[12828]
    (201092 'end of statement')
    unknown byteorder[201094](201096 call qio_channel_byteorder(441200 call . this[201067] c"_channel_internal"))
    (201099 'end of statement')
    {
      unknown tmp[201208] "expr temp" "maybe param" "maybe type" "temp"
      (201210 'move' tmp[201208] width[201073])
      if(201215 call _cond_test(201212 call == tmp[201208] 1))
      {
        unknown x[201107](201108 call : t[201077](201112 call int(64)[10] 8))
        (201115 'end of statement')
        (201116 call = err[201089](201120 call qio_channel_write_int8 0(441208 call . this[201067] c"_channel_internal") x[201107]))
      }
      {
        if(201221 call _cond_test(201218 call == tmp[201208] 2))
        {
          unknown x[201130](201131 call : t[201077](201135 call int(64)[10] 16))
          (201138 'end of statement')
          (201139 call = err[201089](201143 call qio_channel_write_int16 0 byteorder[201094](441217 call . this[201067] c"_channel_internal") x[201130]))
        }
        {
          if(201228 call _cond_test(201225 call == tmp[201208] 4))
          {
            unknown x[201154](201155 call : t[201077](201159 call int(64)[10] 32))
            (201162 'end of statement')
            (201163 call = err[201089](201167 call qio_channel_write_int32 0 byteorder[201094](441226 call . this[201067] c"_channel_internal") x[201154]))
          }
          {
            if(201235 call _cond_test(201232 call == tmp[201208] 8))
            {
              unknown x[201178](201179 call : t[201077](201183 call int(64)[10] 64))
              (201186 'end of statement')
              (201187 call = err[201089](201191 call qio_channel_write_int64 0 byteorder[201094](441235 call . this[201067] c"_channel_internal") x[201178]))
            }
            {
              (201200 call = err[201089](201204 call qio_format_error_arg_mismatch i[201081]))
            }
          }
        }
      }
    }
    (201239 return err[201089])
  }
  { scopeless type
    errorCode[12828]
  }
  function fileReader[170893](?)._read_signed[201244](arg _mt[201264]:_MT[201], arg this[201247]:fileReader[170893](?) :
  fileReader[170893](?), arg width[201253] :
  (201251 call uint(64)[86] 32), out arg t[201257] :
  int(64)[10], arg i[201261] :
  int(64)[10]) : _unknown[42] "method"
  {
    unknown err[201269] errorCode[12828]
    (201272 'end of statement')
    unknown byteorder[201274](201276 call qio_channel_byteorder(441246 call . this[201247] c"_channel_internal"))
    (201279 'end of statement')
    {
      unknown tmp[201392] "expr temp" "maybe param" "maybe type" "temp"
      (201394 'move' tmp[201392] width[201253])
      if(201399 call _cond_test(201396 call == tmp[201392] 1))
      {
        unknown x[201287](201289 call int(64)[10] 8)
        (201292 'end of statement')
        (201293 call = err[201269](201297 call qio_channel_read_int8 0(441253 call . this[201247] c"_channel_internal") x[201287]))
        (201301 call = t[201257] x[201287])
      }
      {
        if(201405 call _cond_test(201402 call == tmp[201392] 2))
        {
          unknown x[201311](201313 call int(64)[10] 16)
          (201316 'end of statement')
          (201317 call = err[201269](201321 call qio_channel_read_int16 0 byteorder[201274](441263 call . this[201247] c"_channel_internal") x[201311]))
          (201326 call = t[201257] x[201311])
        }
        {
          if(201412 call _cond_test(201409 call == tmp[201392] 4))
          {
            unknown x[201336](201338 call int(64)[10] 32)
            (201341 'end of statement')
            (201342 call = err[201269](201346 call qio_channel_read_int32 0 byteorder[201274](441273 call . this[201247] c"_channel_internal") x[201336]))
            (201351 call = t[201257] x[201336])
          }
          {
            if(201419 call _cond_test(201416 call == tmp[201392] 8))
            {
              unknown x[201361](201363 call int(64)[10] 64)
              (201366 'end of statement')
              (201367 call = err[201269](201371 call qio_channel_read_int64 0 byteorder[201274](441283 call . this[201247] c"_channel_internal") x[201361]))
              (201376 call = t[201257] x[201361])
            }
            {
              (201384 call = err[201269](201388 call qio_format_error_arg_mismatch i[201261]))
            }
          }
        }
      }
    }
    (201423 return err[201269])
  }
  { scopeless type
    errorCode[12828]
  }
  function fileWriter[170987](?)._write_unsigned[201428](arg _mt[201448]:_MT[201], arg this[201431]:fileWriter[170987](?) :
  fileWriter[170987](?), arg width[201437] :
  (201435 call uint(64)[86] 32), arg t[201441] :
  uint(64)[86], arg i[201445] :
  int(64)[10]) : _unknown[42] "method"
  {
    unknown err[201452] errorCode[12828]
    (201455 'end of statement')
    unknown byteorder[201457](201459 call qio_channel_byteorder(441295 call . this[201431] c"_channel_internal"))
    (201462 'end of statement')
    {
      unknown tmp[201571] "expr temp" "maybe param" "maybe type" "temp"
      (201573 'move' tmp[201571] width[201437])
      if(201578 call _cond_test(201575 call == tmp[201571] 1))
      {
        unknown x[201470](201471 call : t[201441](201475 call uint(64)[86] 8))
        (201478 'end of statement')
        (201479 call = err[201452](201483 call qio_channel_write_uint8 0(441303 call . this[201431] c"_channel_internal") x[201470]))
      }
      {
        if(201584 call _cond_test(201581 call == tmp[201571] 2))
        {
          unknown x[201493](201494 call : t[201441](201498 call uint(64)[86] 16))
          (201501 'end of statement')
          (201502 call = err[201452](201506 call qio_channel_write_uint16 0 byteorder[201457](441312 call . this[201431] c"_channel_internal") x[201493]))
        }
        {
          if(201591 call _cond_test(201588 call == tmp[201571] 4))
          {
            unknown x[201517](201518 call : t[201441](201522 call uint(64)[86] 32))
            (201525 'end of statement')
            (201526 call = err[201452](201530 call qio_channel_write_uint32 0 byteorder[201457](441321 call . this[201431] c"_channel_internal") x[201517]))
          }
          {
            if(201598 call _cond_test(201595 call == tmp[201571] 8))
            {
              unknown x[201541](201542 call : t[201441](201546 call uint(64)[86] 64))
              (201549 'end of statement')
              (201550 call = err[201452](201554 call qio_channel_write_uint64 0 byteorder[201457](441330 call . this[201431] c"_channel_internal") x[201541]))
            }
            {
              (201563 call = err[201452](201567 call qio_format_error_arg_mismatch i[201445]))
            }
          }
        }
      }
    }
    (201602 return err[201452])
  }
  function fileReader[170893](?)._read_unsigned[201606](arg _mt[201626]:_MT[201], arg this[201609]:fileReader[170893](?) :
  fileReader[170893](?), arg width[201615] :
  (201613 call uint(64)[86] 32), out arg t[201619] :
  uint(64)[86], arg i[201623] :
  int(64)[10]) : _unknown[42] "method"
  {
    unknown err[201630] errorCode[12828]
    (201633 'end of statement')
    unknown byteorder[201635](201637 call qio_channel_byteorder(441340 call . this[201609] c"_channel_internal"))
    (201640 'end of statement')
    {
      unknown tmp[201753] "expr temp" "maybe param" "maybe type" "temp"
      (201755 'move' tmp[201753] width[201615])
      if(201760 call _cond_test(201757 call == tmp[201753] 1))
      {
        unknown x[201648](201650 call uint(64)[86] 8)
        (201653 'end of statement')
        (201654 call = err[201630](201658 call qio_channel_read_uint8 0(441347 call . this[201609] c"_channel_internal") x[201648]))
        (201662 call = t[201619] x[201648])
      }
      {
        if(201766 call _cond_test(201763 call == tmp[201753] 2))
        {
          unknown x[201672](201674 call uint(64)[86] 16)
          (201677 'end of statement')
          (201678 call = err[201630](201682 call qio_channel_read_uint16 0 byteorder[201635](441357 call . this[201609] c"_channel_internal") x[201672]))
          (201687 call = t[201619] x[201672])
        }
        {
          if(201773 call _cond_test(201770 call == tmp[201753] 4))
          {
            unknown x[201697](201699 call uint(64)[86] 32)
            (201702 'end of statement')
            (201703 call = err[201630](201707 call qio_channel_read_uint32 0 byteorder[201635](441367 call . this[201609] c"_channel_internal") x[201697]))
            (201712 call = t[201619] x[201697])
          }
          {
            if(201780 call _cond_test(201777 call == tmp[201753] 8))
            {
              unknown x[201722](201724 call uint(64)[86] 64)
              (201727 'end of statement')
              (201728 call = err[201630](201732 call qio_channel_read_uint64 0 byteorder[201635](441377 call . this[201609] c"_channel_internal") x[201722]))
              (201737 call = t[201619] x[201722])
            }
            {
              (201745 call = err[201630](201749 call qio_format_error_arg_mismatch i[201623]))
            }
          }
        }
      }
    }
    (201784 return err[201630])
  }
  function fileWriter[170987](?)._write_real[201788](arg _mt[201808]:_MT[201], arg this[201791]:fileWriter[170987](?) :
  fileWriter[170987](?), arg width[201797] :
  (201795 call uint(64)[86] 32), arg t[201801] :
  real(64)[13], arg i[201805] :
  int(64)[10]) : _unknown[42] "method"
  {
    unknown err[201812] errorCode[12828]
    (201815 'end of statement')
    unknown byteorder[201817](201819 call qio_channel_byteorder(441389 call . this[201791] c"_channel_internal"))
    (201822 'end of statement')
    {
      unknown tmp[201884] "expr temp" "maybe param" "maybe type" "temp"
      (201886 'move' tmp[201884] width[201797])
      if(201891 call _cond_test(201888 call == tmp[201884] 4))
      {
        unknown x[201830](201831 call : t[201801](201835 call real(64)[13] 32))
        (201838 'end of statement')
        (201839 call = err[201812](201843 call qio_channel_write_float32 0 byteorder[201817](441398 call . this[201791] c"_channel_internal") x[201830]))
      }
      {
        if(201897 call _cond_test(201894 call == tmp[201884] 8))
        {
          unknown x[201854](201855 call : t[201801](201859 call real(64)[13] 64))
          (201862 'end of statement')
          (201863 call = err[201812](201867 call qio_channel_write_float64 0 byteorder[201817](441407 call . this[201791] c"_channel_internal") x[201854]))
        }
        {
          (201876 call = err[201812](201880 call qio_format_error_arg_mismatch i[201805]))
        }
      }
    }
    (201901 return err[201812])
  }
  function fileReader[170893](?)._read_real[201905](arg _mt[201925]:_MT[201], arg this[201908]:fileReader[170893](?) :
  fileReader[170893](?), arg width[201914] :
  (201912 call uint(64)[86] 32), out arg t[201918] :
  real(64)[13], arg i[201922] :
  int(64)[10]) : _unknown[42] "method"
  {
    unknown err[201929] errorCode[12828]
    (201932 'end of statement')
    unknown byteorder[201934](201936 call qio_channel_byteorder(441417 call . this[201908] c"_channel_internal"))
    (201939 'end of statement')
    {
      unknown tmp[202003] "expr temp" "maybe param" "maybe type" "temp"
      (202005 'move' tmp[202003] width[201914])
      if(202010 call _cond_test(202007 call == tmp[202003] 4))
      {
        unknown x[201947](201949 call real(64)[13] 32)
        (201952 'end of statement')
        (201953 call = err[201929](201957 call qio_channel_read_float32 0 byteorder[201934](441425 call . this[201908] c"_channel_internal") x[201947]))
        (201962 call = t[201918] x[201947])
      }
      {
        if(202016 call _cond_test(202013 call == tmp[202003] 8))
        {
          unknown x[201972](201974 call real(64)[13] 64)
          (201977 'end of statement')
          (201978 call = err[201929](201982 call qio_channel_read_float64 0 byteorder[201934](441435 call . this[201908] c"_channel_internal") x[201972]))
          (201987 call = t[201918] x[201972])
        }
        {
          (201995 call = err[201929](201999 call qio_format_error_arg_mismatch i[201922]))
        }
      }
    }
    (202020 return err[201929])
  }
  function fileWriter[170987](?)._write_complex[202024](arg _mt[202044]:_MT[201], arg this[202027]:fileWriter[170987](?) :
  fileWriter[170987](?), arg width[202033] :
  (202031 call uint(64)[86] 32), arg t[202037] :
  complex(128)[111], arg i[202041] :
  int(64)[10]) : _unknown[42] "method"
  {
    unknown err[202048] 0 errorCode[12828]
    (202052 'end of statement')
    unknown byteorder[202054](202056 call qio_channel_byteorder(441447 call . this[202027] c"_channel_internal"))
    (202059 'end of statement')
    {
      unknown tmp[202187] "expr temp" "maybe param" "maybe type" "temp"
      (202189 'move' tmp[202187] width[202033])
      if(202194 call _cond_test(202191 call == tmp[202187] 8))
      {
        unknown x[202067](202068 call : t[202037](202072 call complex(128)[111] 64))
        (202075 'end of statement')
        unknown re[202077](202079 call . x[202067] c"re")
        (202083 'end of statement')
        unknown im[202085](202087 call . x[202067] c"im")
        (202091 'end of statement')
        (202092 call = err[202048](202096 call qio_channel_write_float32 0 byteorder[202054](441456 call . this[202027] c"_channel_internal") re[202077]))
        if(202114 call _cond_test(202111 call ! err[202048]))
        {
          (202102 call = err[202048](202106 call qio_channel_write_float32 0 byteorder[202054](441464 call . this[202027] c"_channel_internal") im[202085]))
        }
      }
      {
        if(202200 call _cond_test(202197 call == tmp[202187] 16))
        {
          unknown x[202124](202125 call : t[202037](202129 call complex(128)[111] 128))
          (202132 'end of statement')
          unknown re[202134](202136 call . x[202124] c"re")
          (202140 'end of statement')
          unknown im[202142](202144 call . x[202124] c"im")
          (202148 'end of statement')
          (202149 call = err[202048](202153 call qio_channel_write_float64 0 byteorder[202054](441474 call . this[202027] c"_channel_internal") re[202134]))
          if(202171 call _cond_test(202168 call ! err[202048]))
          {
            (202159 call = err[202048](202163 call qio_channel_write_float64 0 byteorder[202054](441482 call . this[202027] c"_channel_internal") im[202142]))
          }
        }
        {
          (202179 call = err[202048](202183 call qio_format_error_arg_mismatch i[202041]))
        }
      }
    }
    (202204 return err[202048])
  }
  function fileReader[170893](?)._read_complex[202208](arg _mt[202228]:_MT[201], arg this[202211]:fileReader[170893](?) :
  fileReader[170893](?), arg width[202217] :
  (202215 call uint(64)[86] 32), out arg t[202221] :
  complex(128)[111], arg i[202225] :
  int(64)[10]) : _unknown[42] "method"
  {
    unknown err[202232] 0 errorCode[12828]
    (202236 'end of statement')
    unknown byteorder[202238](202240 call qio_channel_byteorder(441493 call . this[202211] c"_channel_internal"))
    (202243 'end of statement')
    {
      unknown tmp[202403] "expr temp" "maybe param" "maybe type" "temp"
      (202405 'move' tmp[202403] width[202217])
      if(202410 call _cond_test(202407 call == tmp[202403] 8))
      {
        unknown x[202251](202253 call complex(128)[111] 64)
        (202256 'end of statement')
        unknown re[202258](202263 'typeof'(202260 call . x[202251] c"re"))
        (202265 'end of statement')
        unknown im[202267](202272 'typeof'(202269 call . x[202251] c"im"))
        (202274 'end of statement')
        (202275 call = err[202232](202279 call qio_channel_read_float32 0 byteorder[202238](441501 call . this[202211] c"_channel_internal") re[202258]))
        if(202297 call _cond_test(202294 call ! err[202232]))
        {
          (202285 call = err[202232](202289 call qio_channel_read_float32 0 byteorder[202238](441509 call . this[202211] c"_channel_internal") im[202267]))
        }
        (202301 call = x[202251](202304 call :(202309 call _build_tuple re[202258] im[202267])(202312 call complex(128)[111] 64)))
        (202314 call = t[202221] x[202251])
      }
      {
        if(202416 call _cond_test(202413 call == tmp[202403] 16))
        {
          unknown x[202324](202326 call complex(128)[111] 128)
          (202329 'end of statement')
          unknown re[202331](202336 'typeof'(202333 call . x[202324] c"re"))
          (202338 'end of statement')
          unknown im[202340](202345 'typeof'(202342 call . x[202324] c"im"))
          (202347 'end of statement')
          (202348 call = err[202232](202352 call qio_channel_read_float64 0 byteorder[202238](441523 call . this[202211] c"_channel_internal") re[202331]))
          if(202370 call _cond_test(202367 call ! err[202232]))
          {
            (202358 call = err[202232](202362 call qio_channel_read_float64 0 byteorder[202238](441531 call . this[202211] c"_channel_internal") im[202340]))
          }
          (202374 call = x[202324](202377 call :(202382 call _build_tuple re[202331] im[202340])(202385 call complex(128)[111] 128)))
          (202387 call = t[202221] x[202324])
        }
        {
          (202395 call = err[202232](202399 call qio_format_error_arg_mismatch i[202225]))
        }
      }
    }
    (202420 return err[202232])
  }
  function fileWriter[170987](?)._writefOne[202424](arg _mt[202480]:_MT[201], arg this[202427]:fileWriter[170987](?) :
  fileWriter[170987](?), arg fmtStr[202430]:_any[141](?), ref arg arg[202432]:_any[141](?), arg i[202435] :
  int(64)[10], ref arg cur[202439] :
  c_size_t[614], ref arg j[202443] :
  int(64)[10], arg argType[202449] :
  (202447 call c_ptr[46891](?) c_int[522]), arg argTypeLen[202453] :
  int(64)[10], ref arg conv[202457] :
  qio_conv_t[167955], ref arg gotConv[202461] :
  bool[19], ref arg style[202465] :
  iostyleInternal[164872], ref arg err[202469] :
  errorCode[12828], arg origLocale[202473] :
  locale[234], arg len[202477] :
  c_size_t[614]) : _unknown[42] throws "method" "no return value for void"
  {
    if(202500 call _cond_test 1)
    {
      if(202495 call _cond_test(202491 call >= i[202435] argTypeLen[202453]))
      {
        (202486 call halt "Index " i[202435] " is accessed on argType of length " argTypeLen[202453])
      }
    }
    (202504 call = gotConv[202461] 0)
    if(202527 call _cond_test(202523 call <= j[202443] i[202435]))
    {
      (202515 call(202512 call . this[202427] c"_format_reader") fmtStr[202430] cur[202439] len[202477] err[202469] conv[202457] gotConv[202461] style[202465])
    }
    (202532 call _conv_helper err[202469] conv[202457] gotConv[202461] j[202443] argType[202449] argTypeLen[202453])
    unknown domore[202540](202542 call _conv_sethandler err[202469](202545 call argType[202449] i[202435]) style[202465] i[202435] arg[202432] 0)
    (202552 'end of statement')
    if(203407 call _cond_test domore[202540])
    {
      (202558 call(202555 call . this[202427] c"_set_styleInternal") style[202465])
      {
        unknown tmp[203301] "expr temp" "maybe param" "maybe type" "temp"
        (203303 'move' tmp[203301](202561 call argType[202449] i[202435]))
        if(203313 call _cond_test(203311 call ||(203305 call == tmp[203301] QIO_CONV_ARG_TYPE_SIGNED[167968])(203308 call == tmp[203301] QIO_CONV_ARG_TYPE_BINARY_SIGNED[167973])))
        {
          if(202584 call _cond_test(202575 call !=(202578 call . style[202465] c"precision")(202581 call - 1)))
          {
            (202570 call warning "Setting precision for integer format specifiers is not supported; use '%n' instead")
          }
          unknown tmp[202597] "temp"(202595 call _toSigned arg[202432])
          (202604 call _check_tuple_var_decl tmp[202597] 2)
          unknown t[202590](202598 call tmp[202597] 0)
          unknown ok[202592](202601 call tmp[202597] 1)
          (202609 'end of statement')
          if(202657 call _cond_test(202654 call ! ok[202592]))
          {
            (202611 call = err[202469](202615 call qio_format_error_arg_mismatch i[202435]))
          }
          {
            if(202648 call _cond_test(202642 call ==(202645 call argType[202449] i[202435]) QIO_CONV_ARG_TYPE_BINARY_SIGNED[167973]))
            {
              (202618 call = err[202469](202622 call(441591 call . this[202427] c"_write_signed")(202624 call . style[202465] c"max_width_bytes") t[202590] i[202435]))
            }
            {
              Try
              {
                {
                  (202632 call(441597 call . this[202427] c"_writeOne") dynamic[164113] t[202590] origLocale[202473])
                }
              }
            }
          }
        }
        {
          if(203324 call _cond_test(203322 call ||(203316 call == tmp[203301] QIO_CONV_ARG_TYPE_UNSIGNED[167978])(203319 call == tmp[203301] QIO_CONV_ARG_TYPE_BINARY_UNSIGNED[167983])))
          {
            if(202680 call _cond_test(202671 call !=(202674 call . style[202465] c"precision")(202677 call - 1)))
            {
              (202668 call warning "Setting precision for integer format specifiers is not supported; use '%n' instead")
            }
            unknown tmp[202693] "temp"(202691 call _toUnsigned arg[202432])
            (202700 call _check_tuple_var_decl tmp[202693] 2)
            unknown t[202686](202694 call tmp[202693] 0)
            unknown ok[202688](202697 call tmp[202693] 1)
            (202705 'end of statement')
            if(202753 call _cond_test(202750 call ! ok[202688]))
            {
              (202707 call = err[202469](202711 call qio_format_error_arg_mismatch i[202435]))
            }
            {
              if(202744 call _cond_test(202738 call ==(202741 call argType[202449] i[202435]) QIO_CONV_ARG_TYPE_BINARY_UNSIGNED[167983]))
              {
                (202714 call = err[202469](202718 call(441615 call . this[202427] c"_write_unsigned")(202720 call . style[202465] c"max_width_bytes") t[202686] i[202435]))
              }
              {
                Try
                {
                  {
                    (202728 call(441621 call . this[202427] c"_writeOne") dynamic[164113] t[202686] origLocale[202473])
                  }
                }
              }
            }
          }
          {
            if(203336 call _cond_test(203334 call ||(203328 call == tmp[203301] QIO_CONV_ARG_TYPE_REAL[167988])(203331 call == tmp[203301] QIO_CONV_ARG_TYPE_BINARY_REAL[167993])))
            {
              unknown tmp[202771] "temp"(202769 call _toReal arg[202432])
              (202778 call _check_tuple_var_decl tmp[202771] 2)
              unknown t[202764](202772 call tmp[202771] 0)
              unknown ok[202766](202775 call tmp[202771] 1)
              (202783 'end of statement')
              if(202831 call _cond_test(202828 call ! ok[202766]))
              {
                (202785 call = err[202469](202789 call qio_format_error_arg_mismatch i[202435]))
              }
              {
                if(202822 call _cond_test(202816 call ==(202819 call argType[202449] i[202435]) QIO_CONV_ARG_TYPE_BINARY_REAL[167993]))
                {
                  (202792 call = err[202469](202796 call(441639 call . this[202427] c"_write_real")(202798 call . style[202465] c"max_width_bytes") t[202764] i[202435]))
                }
                {
                  Try
                  {
                    {
                      (202806 call(441645 call . this[202427] c"_writeOne") dynamic[164113] t[202764] origLocale[202473])
                    }
                  }
                }
              }
            }
            {
              if(203348 call _cond_test(203346 call ||(203340 call == tmp[203301] QIO_CONV_ARG_TYPE_IMAG[167998])(203343 call == tmp[203301] QIO_CONV_ARG_TYPE_BINARY_IMAG[168003])))
              {
                unknown tmp[202849] "temp"(202847 call _toImag arg[202432])
                (202856 call _check_tuple_var_decl tmp[202849] 2)
                unknown t[202842](202850 call tmp[202849] 0)
                unknown ok[202844](202853 call tmp[202849] 1)
                (202861 'end of statement')
                if(202912 call _cond_test(202909 call ! ok[202844]))
                {
                  (202863 call = err[202469](202867 call qio_format_error_arg_mismatch i[202435]))
                }
                {
                  if(202903 call _cond_test(202897 call ==(202900 call argType[202449] i[202435]) QIO_CONV_ARG_TYPE_BINARY_IMAG[168003]))
                  {
                    (202870 call = err[202469](202874 call(441661 call . this[202427] c"_write_real")(202876 call . style[202465] c"max_width_bytes")(202879 call : t[202842] real(64)[13]) i[202435]))
                  }
                  {
                    Try
                    {
                      {
                        (202887 call(441667 call . this[202427] c"_writeOne") dynamic[164113] t[202842] origLocale[202473])
                      }
                    }
                  }
                }
              }
              {
                if(203360 call _cond_test(203358 call ||(203352 call == tmp[203301] QIO_CONV_ARG_TYPE_COMPLEX[168008])(203355 call == tmp[203301] QIO_CONV_ARG_TYPE_BINARY_COMPLEX[168013])))
                {
                  unknown tmp[202930] "temp"(202928 call _toComplex arg[202432])
                  (202937 call _check_tuple_var_decl tmp[202930] 2)
                  unknown t[202923](202931 call tmp[202930] 0)
                  unknown ok[202925](202934 call tmp[202930] 1)
                  (202942 'end of statement')
                  if(202990 call _cond_test(202987 call ! ok[202925]))
                  {
                    (202944 call = err[202469](202948 call qio_format_error_arg_mismatch i[202435]))
                  }
                  {
                    if(202981 call _cond_test(202975 call ==(202978 call argType[202449] i[202435]) QIO_CONV_ARG_TYPE_BINARY_COMPLEX[168013]))
                    {
                      (202951 call = err[202469](202955 call(441685 call . this[202427] c"_write_complex")(202957 call . style[202465] c"max_width_bytes") t[202923] i[202435]))
                    }
                    {
                      Try
                      {
                        {
                          (202965 call(441691 call . this[202427] c"_writeOne") dynamic[164113] t[202923] origLocale[202473])
                        }
                      }
                    }
                  }
                }
                {
                  if(203367 call _cond_test(203364 call == tmp[203301] QIO_CONV_ARG_TYPE_NUMERIC[167963]))
                  {
                    unknown tmp[203007] "temp"(203005 call _toNumeric arg[202432])
                    (203014 call _check_tuple_var_decl tmp[203007] 2)
                    unknown t[203000](203008 call tmp[203007] 0)
                    unknown ok[203002](203011 call tmp[203007] 1)
                    (203019 'end of statement')
                    if(203042 call _cond_test(203039 call ! ok[203002]))
                    {
                      (203021 call = err[202469](203025 call qio_format_error_arg_mismatch i[202435]))
                    }
                    {
                      Try
                      {
                        {
                          (203029 call(441705 call . this[202427] c"_writeOne") dynamic[164113] t[203000] origLocale[202473])
                        }
                      }
                    }
                  }
                  {
                    if(203374 call _cond_test(203371 call == tmp[203301] QIO_CONV_ARG_TYPE_CHAR[168018]))
                    {
                      unknown tmp[203060] "temp"(203058 call _toChar arg[202432])
                      (203067 call _check_tuple_var_decl tmp[203060] 2)
                      unknown t[203053](203061 call tmp[203060] 0)
                      unknown ok[203055](203064 call tmp[203060] 1)
                      (203072 'end of statement')
                      if(203098 call _cond_test(203095 call ! ok[203055]))
                      {
                        (203074 call = err[202469](203078 call qio_format_error_arg_mismatch i[202435]))
                      }
                      {
                        Try
                        {
                          {
                            (203082 call(441716 call . this[202427] c"_writeOne") dynamic[164113](203087 'new'(203089 call _internalIoChar[176999] t[203053])) origLocale[202473])
                          }
                        }
                      }
                    }
                    {
                      if(203381 call _cond_test(203378 call == tmp[203301] QIO_CONV_ARG_TYPE_BINARY_STRING[168028]))
                      {
                        unknown tmp[203116] "temp"(203114 call _toBytes arg[202432])
                        (203123 call _check_tuple_var_decl tmp[203116] 2)
                        unknown t[203109](203117 call tmp[203116] 0)
                        unknown ok[203111](203120 call tmp[203116] 1)
                        (203128 'end of statement')
                        if(203151 call _cond_test(203148 call ! ok[203111]))
                        {
                          (203130 call = err[202469](203134 call qio_format_error_arg_mismatch i[202435]))
                        }
                        {
                          Try
                          {
                            {
                              (203138 call(441728 call . this[202427] c"_writeOne") dynamic[164113] t[203109] origLocale[202473])
                            }
                          }
                        }
                      }
                      {
                        if(203388 call _cond_test(203385 call == tmp[203301] QIO_CONV_ARG_TYPE_STRING[168023]))
                        {
                          unknown tmp[203169] "temp"(203167 call _toString arg[202432])
                          (203176 call _check_tuple_var_decl tmp[203169] 2)
                          unknown t[203162](203170 call tmp[203169] 0)
                          unknown ok[203164](203173 call tmp[203169] 1)
                          (203181 'end of statement')
                          if(203204 call _cond_test(203201 call ! ok[203164]))
                          {
                            (203183 call = err[202469](203187 call qio_format_error_arg_mismatch i[202435]))
                          }
                          {
                            Try
                            {
                              {
                                (203191 call(441739 call . this[202427] c"_writeOne") dynamic[164113] t[203162] origLocale[202473])
                              }
                            }
                          }
                        }
                        {
                          if(203395 call _cond_test(203392 call == tmp[203301] QIO_CONV_ARG_TYPE_REGEX[168038]))
                          {
                            (203214 call = err[202469](203218 call qio_format_error_write_regex))
                          }
                          {
                            if(203402 call _cond_test(203399 call == tmp[203301] QIO_CONV_ARG_TYPE_SERDE[168033]))
                            {
                              if(203263 call _cond_test(203259 call !=(441765 call . this[202427] c"serializerType") nothing[7]))
                              {
                                if(203235 call _cond_test(203231 call ==(441751 call . this[202427] c"serializerType") binarySerializer[174153]))
                                {
                                  (203227 call warnBinary(203229 'typeof' arg[202432]) 3)
                                }
                                (203243 call(203240 call . this[202427] c"_serializeOne") arg[202432] origLocale[202473])
                              }
                              {
                                Try
                                {
                                  {
                                    (203249 call(441758 call . this[202427] c"_writeOne") dynamic[164113] arg[202432] origLocale[202473])
                                  }
                                }
                              }
                            }
                            {
                              (203271 'throw'(203272 'new'(_chpl_manager = _owned[238](?))(203276 call IllegalArgumentError[414940](?)(203277 call +(203279 call +(203281 call + "illegal argument 'args("(203286 call : i[202435] string[244])) ")': writef internal error ")(203293 call :(203296 call argType[202449] i[202435]) string[244])))))
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  function fileWriter[170987](?).writef[203413](arg _mt[203429]:_MT[201], arg this[203416]:fileWriter[170987](?) :
  fileWriter[170987](?), arg fmtStr[203421] :
  unknown t[203419], const arg args[203426]:_any[141](?) ...) : _unknown[42] throws "method" "no return value for void"
  {
    const origLocale[203441] "const"(203446 call(203443 call . this[203416] c"getLocaleOfIoRequest"))
    (203448 'end of statement')
    unknown err[203450] 0 errorCode[12828]
    (203454 'end of statement')
    {
      const tmp[203729] "const" "temp"
      (203730 'move' tmp[203729](203727 'deref'(203726 '_wide_get_locale'(203456 call . this[203416] c"_home"))))
      {
        Try
        {
          {
            (203465 call(203462 call . this[203416] c"lock"))
          }
        }
        Defer
        {
          {
            (203474 call(203471 call . this[203416] c"unlock"))
          }
        }
        unknown save_style[203478](203484 call(203481 call . this[203416] c"_styleInternal")) iostyleInternal[164872]
        (203486 'end of statement')
        Defer
        {
          {
            (203492 call(203489 call . this[203416] c"_set_styleInternal") save_style[203478])
          }
        }
        unknown cur[203497] 0 c_size_t[614]
        (203501 'end of statement')
        unknown len[203503](203505 call :(203508 call . fmtStr[203421] c"size") c_size_t[614]) c_size_t[614]
        (203513 'end of statement')
        unknown conv[203515] qio_conv_t[167955]
        (203518 'end of statement')
        unknown gotConv[203520] bool[19]
        (203523 'end of statement')
        unknown style[203525] iostyleInternal[164872]
        (203528 'end of statement')
        unknown argTypeLen[203530] "param"(203531 call + k[203424] 5)
        (203536 'end of statement')
        unknown argType[203538](203540 call c_array[47643](?) c_int[522] argTypeLen[203530])
        (203544 'end of statement')
        {
          unknown _indexOfInterest[203564] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[203565] "expr temp" "temp"
          (203574 'move' _iterator[203565](203572 call _getIterator(203584 call chpl_direct_range_iter 0(203578 call -(203580 call . argType[203538] c"size") 1))))
          Defer
          {
            {
              (203599 call _freeIterator _iterator[203565])
            }
          }
          { scopeless type
            (203589 'move' _indexOfInterest[203564](203586 call iteratorIndex _iterator[203565]))
          }
          ForLoop[203566]
          {
            unknown i[203545] "index var" "insert auto destroy"
            (203594 'move' i[203545] _indexOfInterest[203564])
            {
              (203558 call =(203561 call argType[203538] i[203545]) QIO_CONV_UNK[167958])
            }
            label _continueLabel[203569]
            _indexOfInterest[203564]
            _iterator[203565]
          }
          label _breakLabel[203570]
        }
        unknown j[203607] 0
        (203610 'end of statement')
        {
          unknown i[203611] "index var" 0
          unknown tmp[203642] "maybe param" "temp"
          (203654 'move' tmp[203642](203652 call chpl_compute_low_param_loop_bound 0(203614 call - k[203424] 1)))
          unknown tmp[203643] "maybe param" "temp"
          (203664 'move' tmp[203643](203662 call chpl_compute_high_param_loop_bound 0(203659 call - k[203424] 1)))
          unknown tmp[203644] "maybe param" "temp"
          (203667 'move' tmp[203644] 1)
          ParamForLoop[203669]
          { i[203611] tmp[203642] tmp[203643] tmp[203644]
            {
              (203622 call(441796 call . this[203416] c"_writefOne") fmtStr[203421](203625 call args[203426] i[203611]) i[203611] cur[203497] j[203607](203631 call c_ptrTo(203633 call argType[203538] 0)) argTypeLen[203530] conv[203515] gotConv[203520] style[203525] err[203450] origLocale[203441] len[203503])
            }
          }
          label _unused_continueLabel[203646]
          label _breakLabel[203645]
        }
        if(203722 call _cond_test(203719 call ! err[203450]))
        {
          if(203701 call _cond_test(203697 call < cur[203497] len[203503]))
          {
            unknown dummy[203681] c_int[522]
            (203684 'end of statement')
            (203689 call(203686 call . this[203416] c"_format_reader") fmtStr[203421] cur[203497] len[203503] err[203450] conv[203515] gotConv[203520] style[203525])
          }
          if(203715 call _cond_test(203711 call < cur[203497] len[203503]))
          {
            (203706 call = err[203450](203710 call qio_format_error_too_few_args))
          }
        }
      }
      (203733 'elided on block' 0 tmp[203729])
    }
    if(203751 call _cond_test err[203450])
    {
      Try
      {
        {
          (203742 call(203739 call . this[203416] c"_ch_ioerror") err[203450] "in fileWriter.writef(fmt:string)")
        }
      }
    }
  }
  where {
    (203431 call ||(203434 call isStringType t[203419])(203437 call isBytesType t[203419]))
  }
  function fileWriter[170987](?).writef[203759](arg _mt[203770]:_MT[201], arg this[203762]:fileWriter[170987](?) :
  fileWriter[170987](?), arg fmtStr[203767] :
  unknown t[203765]) : _unknown[42] throws "method"
  {
    unknown err[203782] 0 errorCode[12828]
    (203786 'end of statement')
    {
      const tmp[203930] "const" "temp"
      (203931 'move' tmp[203930](203928 'deref'(203927 '_wide_get_locale'(203788 call . this[203762] c"_home"))))
      {
        Try
        {
          {
            (203797 call(203794 call . this[203762] c"lock"))
          }
        }
        Defer
        {
          {
            (203806 call(203803 call . this[203762] c"unlock"))
          }
        }
        unknown save_style[203810](203816 call(203813 call . this[203762] c"_styleInternal")) iostyleInternal[164872]
        (203818 'end of statement')
        Defer
        {
          {
            (203824 call(203821 call . this[203762] c"_set_styleInternal") save_style[203810])
          }
        }
        unknown cur[203829] 0 c_size_t[614]
        (203833 'end of statement')
        unknown len[203835](203837 call :(203840 call . fmtStr[203767] c"size") c_size_t[614]) c_size_t[614]
        (203845 'end of statement')
        unknown conv[203847] qio_conv_t[167955]
        (203850 'end of statement')
        unknown gotConv[203852] bool[19]
        (203855 'end of statement')
        unknown style[203857] iostyleInternal[164872]
        (203860 'end of statement')
        unknown end[203862] c_size_t[614]
        (203865 'end of statement')
        unknown dummy[203867] c_int[522]
        (203870 'end of statement')
        (203872 call(441844 call . this[203762] c"_format_reader") fmtStr[203767] cur[203829] len[203835] err[203782] conv[203847] gotConv[203852] style[203857])
        if(203895 call _cond_test(203892 call ! err[203782]))
        {
          if(203888 call _cond_test gotConv[203852])
          {
            (203882 call = err[203782](203886 call qio_format_error_too_few_args))
          }
        }
        if(203917 call _cond_test(203914 call ! err[203782]))
        {
          if(203910 call _cond_test(203906 call < cur[203829] len[203835]))
          {
            (203901 call = err[203782](203905 call qio_format_error_too_few_args))
          }
        }
        (203925 call(203922 call . this[203762] c"_set_styleInternal") save_style[203810])
      }
      (203934 'elided on block' 0 tmp[203930])
    }
    if(203952 call _cond_test err[203782])
    {
      Try
      {
        {
          (203943 call(203940 call . this[203762] c"_ch_ioerror") err[203782] "in fileWriter.writef(fmt:string, ...)")
        }
      }
    }
    (203957 return 1)
  }
  where {
    (203772 call ||(203775 call isStringType t[203765])(203778 call isBytesType t[203765]))
  }
  function fileReader[170893](?).readf[203962](arg _mt[203978]:_MT[201], arg this[203965]:fileReader[170893](?) :
  fileReader[170893](?), arg fmtStr[203970] :
  unknown t[203968], ref arg args[203975]:_any[141](?) ...) : _unknown[42] throws "method"
  {
    const origLocale[203991] "const"(203996 call(203993 call . this[203965] c"getLocaleOfIoRequest"))
    (203998 'end of statement')
    unknown err[204000] 0 errorCode[12828]
    (204004 'end of statement')
    {
      const tmp[205955] "const" "temp"
      (205956 'move' tmp[205955](205953 'deref'(205952 '_wide_get_locale'(204006 call . this[203965] c"_home"))))
      {
        Try
        {
          {
            (204015 call(204012 call . this[203965] c"lock"))
          }
        }
        Defer
        {
          {
            (204024 call(204021 call . this[203965] c"unlock"))
          }
        }
        unknown save_style[204028](204034 call(204031 call . this[203965] c"_styleInternal")) iostyleInternal[164872]
        (204036 'end of statement')
        Defer
        {
          {
            (204042 call(204039 call . this[203965] c"_set_styleInternal") save_style[204028])
          }
        }
        unknown cur[204047] 0 c_size_t[614]
        (204051 'end of statement')
        unknown len[204053](204055 call :(204058 call . fmtStr[203970] c"size") c_size_t[614]) c_size_t[614]
        (204063 'end of statement')
        unknown conv[204065] qio_conv_t[167955]
        (204068 'end of statement')
        unknown gotConv[204070] bool[19]
        (204073 'end of statement')
        unknown style[204075] iostyleInternal[164872]
        (204078 'end of statement')
        unknown end[204080] c_size_t[614]
        (204083 'end of statement')
        unknown argTypeLen[204085] "param"(204086 call + k[203973] 5)
        (204091 'end of statement')
        unknown argType[204093](204095 call c_array[47643](?) c_int[522] argTypeLen[204085])
        (204099 'end of statement')
        unknown r[204101] unmanaged _channel_regex_info?[468136]
        (204106 'end of statement')
        Defer
        {
          {
            if(204114 call _cond_test r[204101])
            {
              (204110 call chpl__delete r[204101])
            }
          }
        }
        {
          unknown _indexOfInterest[204140] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[204141] "expr temp" "temp"
          (204150 'move' _iterator[204141](204148 call _getIterator(204160 call chpl_direct_range_iter 0(204154 call -(204156 call . argType[204093] c"size") 1))))
          Defer
          {
            {
              (204175 call _freeIterator _iterator[204141])
            }
          }
          { scopeless type
            (204165 'move' _indexOfInterest[204140](204162 call iteratorIndex _iterator[204141]))
          }
          ForLoop[204142]
          {
            unknown i[204121] "index var" "insert auto destroy"
            (204170 'move' i[204121] _indexOfInterest[204140])
            {
              (204134 call =(204137 call argType[204093] i[204121]) QIO_CONV_UNK[167958])
            }
            label _continueLabel[204145]
            _indexOfInterest[204140]
            _iterator[204141]
          }
          label _breakLabel[204146]
        }
        (204182 call = err[204000](204186 call qio_channel_mark 0(441890 call . this[203965] c"_channel_internal")))
        if(205947 call _cond_test(205944 call ! err[204000]))
        {
          Try
          {
            {
              unknown j[204191] 0
              (204194 'end of statement')
              {
                unknown i[204195] "index var" 0
                unknown tmp[205827] "maybe param" "temp"
                (205839 'move' tmp[205827](205837 call chpl_compute_low_param_loop_bound 0(204198 call - k[203973] 1)))
                unknown tmp[205828] "maybe param" "temp"
                (205849 'move' tmp[205828](205847 call chpl_compute_high_param_loop_bound 0(205844 call - k[203973] 1)))
                unknown tmp[205829] "maybe param" "temp"
                (205852 'move' tmp[205829] 1)
                ParamForLoop[205854]
                { i[204195] tmp[205827] tmp[205828] tmp[205829]
                  {
                    if(204346 call _cond_test(204342 call <= j[204191] i[204195]))
                    {
                      (204207 call(441895 call . this[203965] c"_format_reader") fmtStr[203970] cur[204047] len[204053] err[204000] conv[204065] gotConv[204070] style[204075] r[204101])
                      if(204338 call _cond_test(204334 call != r[204101] nil[32]))
                      {
                        const rnn[204218] "const"(204219 call postfix! r[204101])
                        (204223 'end of statement')
                        if(204330 call _cond_test(204327 call . rnn[204218] c"hasRegex"))
                        {
                          if(204244 call _cond_test(204231 call >(204233 call -(204235 call + i[204195](204239 call . rnn[204218] c"ncaptures")) 1) k[203973]))
                          {
                            (204226 call = err[204000](204230 call qio_format_error_too_few_args))
                          }
                          {
                            unknown _indexOfInterest[204284] "an _indexOfInterest or chpl__followIdx variable" "temp"
                            unknown _iterator[204285] "expr temp" "temp"
                            (204294 'move' _iterator[204285](204292 call _getIterator(204304 call chpl_direct_counted_range_iter 0(204300 call . rnn[204218] c"ncaptures"))))
                            Defer
                            {
                              {
                                (204319 call _freeIterator _iterator[204285])
                              }
                            }
                            { scopeless type
                              (204309 'move' _indexOfInterest[204284](204306 call iteratorIndex _iterator[204285]))
                            }
                            ForLoop[204286]
                            {
                              unknown z[204248] "index var" "insert auto destroy"
                              (204314 'move' z[204248] _indexOfInterest[204284])
                              {
                                if(204280 call _cond_test(204270 call <=(204272 call + i[204195] z[204248])(204277 call . argType[204093] c"size")))
                                {
                                  (204261 call =(204264 call argType[204093](204265 call + i[204195] z[204248])) QIO_CONV_SET_CAPTURE[168103])
                                }
                              }
                              label _continueLabel[204289]
                              _indexOfInterest[204284]
                              _iterator[204285]
                            }
                            label _breakLabel[204290]
                          }
                        }
                      }
                    }
                    (204351 call _conv_helper err[204000] conv[204065] gotConv[204070] j[204191] argType[204093](argTypeLen =(204357 call + k[203973] 5)))
                    unknown domore[204363](204365 call _conv_sethandler err[204000](204368 call argType[204093] i[204195]) style[204075] i[204195](204373 call args[203975] i[204195]) 0)
                    (204377 'end of statement')
                    if(205823 call _cond_test domore[204363])
                    {
                      (204383 call(204380 call . this[203965] c"_set_styleInternal") style[204075])
                      {
                        unknown tmp[205710] "expr temp" "maybe param" "maybe type" "temp"
                        (205712 'move' tmp[205710](204386 call argType[204093] i[204195]))
                        if(205722 call _cond_test(205720 call ||(205714 call == tmp[205710] QIO_CONV_ARG_TYPE_SIGNED[167968])(205717 call == tmp[205710] QIO_CONV_ARG_TYPE_BINARY_SIGNED[167973])))
                        {
                          unknown tmp[204404] "temp"(204400 call _toSigned(204402 call args[203975] i[204195]))
                          (204411 call _check_tuple_var_decl tmp[204404] 2)
                          unknown t[204395](204405 call tmp[204404] 0)
                          unknown ok[204397](204408 call tmp[204404] 1)
                          (204416 'end of statement')
                          if(204488 call _cond_test(204485 call ! ok[204397]))
                          {
                            (204418 call = err[204000](204422 call qio_format_error_arg_mismatch i[204195]))
                          }
                          {
                            unknown ti[204426] int(64)[10]
                            (204429 'end of statement')
                            if(204460 call _cond_test(204454 call ==(204457 call argType[204093] i[204195]) QIO_CONV_ARG_TYPE_BINARY_SIGNED[167973]))
                            {
                              (204430 call = err[204000](204434 call(441945 call . this[203965] c"_read_signed")(204436 call . style[204075] c"max_width_bytes") ti[204426] i[204195]))
                            }
                            {
                              Try
                              {
                                {
                                  (204444 call(441951 call . this[203965] c"_readOne") dynamic[164113] ti[204426] origLocale[203991])
                                }
                              }
                            }
                            if(204480 call _cond_test(204477 call ! err[204000]))
                            {
                              (204466 call = err[204000](204470 call _setIfPrimitive(204472 call args[203975] i[204195]) ti[204426] i[204195]))
                            }
                          }
                        }
                        {
                          if(205733 call _cond_test(205731 call ||(205725 call == tmp[205710] QIO_CONV_ARG_TYPE_UNSIGNED[167978])(205728 call == tmp[205710] QIO_CONV_ARG_TYPE_BINARY_UNSIGNED[167983])))
                          {
                            unknown tmp[204508] "temp"(204504 call _toUnsigned(204506 call args[203975] i[204195]))
                            (204515 call _check_tuple_var_decl tmp[204508] 2)
                            unknown t[204499](204509 call tmp[204508] 0)
                            unknown ok[204501](204512 call tmp[204508] 1)
                            (204520 'end of statement')
                            if(204592 call _cond_test(204589 call ! ok[204501]))
                            {
                              (204522 call = err[204000](204526 call qio_format_error_arg_mismatch i[204195]))
                            }
                            {
                              unknown ti[204530] uint(64)[86]
                              (204533 'end of statement')
                              if(204564 call _cond_test(204558 call ==(204561 call argType[204093] i[204195]) QIO_CONV_ARG_TYPE_BINARY_UNSIGNED[167983]))
                              {
                                (204534 call = err[204000](204538 call(441976 call . this[203965] c"_read_unsigned")(204540 call . style[204075] c"max_width_bytes") ti[204530] i[204195]))
                              }
                              {
                                Try
                                {
                                  {
                                    (204548 call(441982 call . this[203965] c"_readOne") dynamic[164113] ti[204530] origLocale[203991])
                                  }
                                }
                              }
                              if(204584 call _cond_test(204581 call ! err[204000]))
                              {
                                (204570 call = err[204000](204574 call _setIfPrimitive(204576 call args[203975] i[204195]) ti[204530] i[204195]))
                              }
                            }
                          }
                          {
                            if(205745 call _cond_test(205743 call ||(205737 call == tmp[205710] QIO_CONV_ARG_TYPE_REAL[167988])(205740 call == tmp[205710] QIO_CONV_ARG_TYPE_BINARY_REAL[167993])))
                            {
                              unknown tmp[204612] "temp"(204608 call _toReal(204610 call args[203975] i[204195]))
                              (204619 call _check_tuple_var_decl tmp[204612] 2)
                              unknown t[204603](204613 call tmp[204612] 0)
                              unknown ok[204605](204616 call tmp[204612] 1)
                              (204624 'end of statement')
                              if(204696 call _cond_test(204693 call ! ok[204605]))
                              {
                                (204626 call = err[204000](204630 call qio_format_error_arg_mismatch i[204195]))
                              }
                              {
                                unknown ti[204634] real(64)[13]
                                (204637 'end of statement')
                                if(204668 call _cond_test(204662 call ==(204665 call argType[204093] i[204195]) QIO_CONV_ARG_TYPE_BINARY_REAL[167993]))
                                {
                                  (204638 call = err[204000](204642 call(442007 call . this[203965] c"_read_real")(204644 call . style[204075] c"max_width_bytes") ti[204634] i[204195]))
                                }
                                {
                                  Try
                                  {
                                    {
                                      (204652 call(442013 call . this[203965] c"_readOne") dynamic[164113] ti[204634] origLocale[203991])
                                    }
                                  }
                                }
                                if(204688 call _cond_test(204685 call ! err[204000]))
                                {
                                  (204674 call = err[204000](204678 call _setIfPrimitive(204680 call args[203975] i[204195]) ti[204634] i[204195]))
                                }
                              }
                            }
                            {
                              if(205757 call _cond_test(205755 call ||(205749 call == tmp[205710] QIO_CONV_ARG_TYPE_IMAG[167998])(205752 call == tmp[205710] QIO_CONV_ARG_TYPE_BINARY_IMAG[168003])))
                              {
                                unknown tmp[204716] "temp"(204712 call _toImag(204714 call args[203975] i[204195]))
                                (204723 call _check_tuple_var_decl tmp[204716] 2)
                                unknown t[204707](204717 call tmp[204716] 0)
                                unknown ok[204709](204720 call tmp[204716] 1)
                                (204728 'end of statement')
                                if(204811 call _cond_test(204808 call ! ok[204709]))
                                {
                                  (204730 call = err[204000](204734 call qio_format_error_arg_mismatch i[204195]))
                                }
                                {
                                  unknown ti[204738] imag(64)[101]
                                  (204741 'end of statement')
                                  if(204784 call _cond_test(204778 call ==(204781 call argType[204093] i[204195]) QIO_CONV_ARG_TYPE_BINARY_IMAG[168003]))
                                  {
                                    unknown tr[204744] real(64)[13]
                                    (204747 'end of statement')
                                    (204748 call = err[204000](204752 call(442037 call . this[203965] c"_read_real")(204754 call . style[204075] c"max_width_bytes") tr[204744] i[204195]))
                                    (204759 call = ti[204738](204762 call : tr[204744] imag(64)[101]))
                                  }
                                  {
                                    Try
                                    {
                                      {
                                        (204768 call(442046 call . this[203965] c"_readOne") dynamic[164113] ti[204738] origLocale[203991])
                                      }
                                    }
                                  }
                                  if(204803 call _cond_test(204800 call ! err[204000]))
                                  {
                                    (204789 call = err[204000](204793 call _setIfPrimitive(204795 call args[203975] i[204195]) ti[204738] i[204195]))
                                  }
                                }
                              }
                              {
                                if(205769 call _cond_test(205767 call ||(205761 call == tmp[205710] QIO_CONV_ARG_TYPE_COMPLEX[168008])(205764 call == tmp[205710] QIO_CONV_ARG_TYPE_BINARY_COMPLEX[168013])))
                                {
                                  unknown tmp[204831] "temp"(204827 call _toComplex(204829 call args[203975] i[204195]))
                                  (204838 call _check_tuple_var_decl tmp[204831] 2)
                                  unknown t[204822](204832 call tmp[204831] 0)
                                  unknown ok[204824](204835 call tmp[204831] 1)
                                  (204843 'end of statement')
                                  if(204915 call _cond_test(204912 call ! ok[204824]))
                                  {
                                    (204845 call = err[204000](204849 call qio_format_error_arg_mismatch i[204195]))
                                  }
                                  {
                                    unknown ti[204853] complex(128)[111]
                                    (204856 'end of statement')
                                    if(204887 call _cond_test(204881 call ==(204884 call argType[204093] i[204195]) QIO_CONV_ARG_TYPE_BINARY_COMPLEX[168013]))
                                    {
                                      (204857 call = err[204000](204861 call(442071 call . this[203965] c"_read_complex")(204863 call . style[204075] c"max_width_bytes") ti[204853] i[204195]))
                                    }
                                    {
                                      Try
                                      {
                                        {
                                          (204871 call(442077 call . this[203965] c"_readOne") dynamic[164113] ti[204853] origLocale[203991])
                                        }
                                      }
                                    }
                                    if(204907 call _cond_test(204904 call ! err[204000]))
                                    {
                                      (204893 call = err[204000](204897 call _setIfPrimitive(204899 call args[203975] i[204195]) ti[204853] i[204195]))
                                    }
                                  }
                                }
                                {
                                  if(205776 call _cond_test(205773 call == tmp[205710] QIO_CONV_ARG_TYPE_NUMERIC[167963]))
                                  {
                                    unknown tmp[204934] "temp"(204930 call _toNumeric(204932 call args[203975] i[204195]))
                                    (204941 call _check_tuple_var_decl tmp[204934] 2)
                                    unknown t[204925](204935 call tmp[204934] 0)
                                    unknown ok[204927](204938 call tmp[204934] 1)
                                    (204946 'end of statement')
                                    if(204994 call _cond_test(204991 call ! ok[204927]))
                                    {
                                      (204948 call = err[204000](204952 call qio_format_error_arg_mismatch i[204195]))
                                    }
                                    {
                                      unknown ti[204956] t[204925]
                                      (204959 'end of statement')
                                      Try
                                      {
                                        {
                                          (204962 call(442099 call . this[203965] c"_readOne") dynamic[164113] ti[204956] origLocale[203991])
                                        }
                                      }
                                      if(204986 call _cond_test(204983 call ! err[204000]))
                                      {
                                        (204972 call = err[204000](204976 call _setIfPrimitive(204978 call args[203975] i[204195]) ti[204956] i[204195]))
                                      }
                                    }
                                  }
                                  {
                                    if(205783 call _cond_test(205780 call == tmp[205710] QIO_CONV_ARG_TYPE_CHAR[168018]))
                                    {
                                      unknown tmp[205013] "temp"(205009 call _toChar(205011 call args[203975] i[204195]))
                                      (205020 call _check_tuple_var_decl tmp[205013] 2)
                                      unknown t[205004](205014 call tmp[205013] 0)
                                      unknown ok[205006](205017 call tmp[205013] 1)
                                      (205025 'end of statement')
                                      unknown chr[205027](205028 'new'(205030 call _internalIoChar[176999] t[205004]))
                                      (205033 'end of statement')
                                      if(205056 call _cond_test(205053 call ! ok[205006]))
                                      {
                                        (205035 call = err[204000](205039 call qio_format_error_arg_mismatch i[204195]))
                                      }
                                      {
                                        Try
                                        {
                                          {
                                            (205043 call(442119 call . this[203965] c"_readOne") dynamic[164113] chr[205027] origLocale[203991])
                                          }
                                        }
                                      }
                                      if(205074 call _cond_test(205071 call ! err[204000]))
                                      {
                                        (205062 call _setIfChar(205064 call args[203975] i[204195])(205067 call . chr[205027] c"ch"))
                                      }
                                    }
                                    {
                                      if(205790 call _cond_test(205787 call == tmp[205710] QIO_CONV_ARG_TYPE_BINARY_STRING[168028]))
                                      {
                                        unknown tmp[205094] "temp"(205090 call _toBytes(205092 call args[203975] i[204195]))
                                        (205101 call _check_tuple_var_decl tmp[205094] 2)
                                        unknown t[205085](205095 call tmp[205094] 0)
                                        unknown ok[205087](205098 call tmp[205094] 1)
                                        (205106 'end of statement')
                                        if(205129 call _cond_test(205126 call ! ok[205087]))
                                        {
                                          (205108 call = err[204000](205112 call qio_format_error_arg_mismatch i[204195]))
                                        }
                                        {
                                          Try
                                          {
                                            {
                                              (205116 call(442134 call . this[203965] c"_readOne") dynamic[164113] t[205085] origLocale[203991])
                                            }
                                          }
                                        }
                                        if(205148 call _cond_test(205145 call ! err[204000]))
                                        {
                                          (205134 call = err[204000](205138 call _setIfPrimitive(205140 call args[203975] i[204195]) t[205085] i[204195]))
                                        }
                                      }
                                      {
                                        if(205797 call _cond_test(205794 call == tmp[205710] QIO_CONV_ARG_TYPE_STRING[168023]))
                                        {
                                          unknown tmp[205168] "temp"(205164 call _toString(205166 call args[203975] i[204195]))
                                          (205175 call _check_tuple_var_decl tmp[205168] 2)
                                          unknown t[205159](205169 call tmp[205168] 0)
                                          unknown ok[205161](205172 call tmp[205168] 1)
                                          (205180 'end of statement')
                                          if(205203 call _cond_test(205200 call ! ok[205161]))
                                          {
                                            (205182 call = err[204000](205186 call qio_format_error_arg_mismatch i[204195]))
                                          }
                                          {
                                            Try
                                            {
                                              {
                                                (205190 call(442152 call . this[203965] c"_readOne") dynamic[164113] t[205159] origLocale[203991])
                                              }
                                            }
                                          }
                                          if(205222 call _cond_test(205219 call ! err[204000]))
                                          {
                                            (205208 call = err[204000](205212 call _setIfPrimitive(205214 call args[203975] i[204195]) t[205159] i[204195]))
                                          }
                                        }
                                        {
                                          if(205804 call _cond_test(205801 call == tmp[205710] QIO_CONV_ARG_TYPE_REGEX[168038]))
                                          {
                                            unknown tmp[205242] "temp"(205238 call _toRegex(205240 call args[203975] i[204195]))
                                            (205249 call _check_tuple_var_decl tmp[205242] 2)
                                            unknown t[205233](205243 call tmp[205242] 0)
                                            unknown ok[205235](205246 call tmp[205242] 1)
                                            (205254 'end of statement')
                                            if(205431 call _cond_test(205428 call ! ok[205235]))
                                            {
                                              (205256 call = err[204000](205260 call qio_format_error_arg_mismatch i[204195]))
                                            }
                                            {
                                              if(205276 call _cond_test(205272 call == r[204101] nil[32]))
                                              {
                                                (205263 call = r[204101](205266 'new'(_chpl_manager = unmanaged[183](?))(205270 call _channel_regex_info[397587](?))))
                                              }
                                              const rnn[205282] "const"(205283 call postfix! r[204101])
                                              (205287 'end of statement')
                                              (205292 call(205289 call . rnn[205282] c"clear"))
                                              (205293 call =(205296 call . rnn[205282] c"theRegex")(205300 call . t[205233] c"_regex"))
                                              (205303 call =(205306 call . rnn[205282] c"hasRegex") 1)
                                              (205310 call =(205313 call . rnn[205282] c"releaseRegex") 0)
                                              (205318 call(442174 call . this[203965] c"_match_regex_if_needed") cur[204047] len[204053] err[204000] style[204075] rnn[205282])
                                              if(205343 call _cond_test(205330 call >(205332 call -(205334 call + i[204195](205338 call . rnn[205282] c"ncaptures")) 1) k[203973]))
                                              {
                                                (205325 call = err[204000](205329 call qio_format_error_too_few_args))
                                              }
                                              {
                                                unknown _indexOfInterest[205386] "an _indexOfInterest or chpl__followIdx variable" "temp"
                                                unknown _iterator[205387] "expr temp" "temp"
                                                (205396 'move' _iterator[205387](205394 call _getIterator(205406 call chpl_direct_counted_range_iter 0(205402 call . rnn[205282] c"ncaptures"))))
                                                Defer
                                                {
                                                  {
                                                    (205421 call _freeIterator _iterator[205387])
                                                  }
                                                }
                                                { scopeless type
                                                  (205411 'move' _indexOfInterest[205386](205408 call iteratorIndex _iterator[205387]))
                                                }
                                                ForLoop[205388]
                                                {
                                                  unknown z[205347] "index var" "insert auto destroy"
                                                  (205416 'move' z[205347] _indexOfInterest[205386])
                                                  {
                                                    if(205382 call _cond_test(205372 call <=(205374 call + i[204195] z[205347])(205379 call . argType[204093] c"size")))
                                                    {
                                                      (205360 call =(205363 call argType[204093](205364 call +(205366 call + i[204195] z[205347]) 1)) QIO_CONV_SET_CAPTURE[168103])
                                                    }
                                                  }
                                                  label _continueLabel[205391]
                                                  _indexOfInterest[205386]
                                                  _iterator[205387]
                                                }
                                                label _breakLabel[205392]
                                              }
                                            }
                                          }
                                          {
                                            if(205811 call _cond_test(205808 call == tmp[205710] QIO_CONV_ARG_TYPE_SERDE[168033]))
                                            {
                                              if(205487 call _cond_test(205483 call !=(442213 call . this[203965] c"deserializerType") nothing[7]))
                                              {
                                                if(205453 call _cond_test(205449 call ==(442197 call . this[203965] c"deserializerType") binaryDeserializer[175632]))
                                                {
                                                  (205443 call warnBinaryRead(205447 'typeof'(205445 call args[203975] i[204195])) 4)
                                                }
                                                (205463 call(205460 call . this[203965] c"_deserializeOne")(205465 call args[203975] i[204195]) origLocale[203991])
                                              }
                                              {
                                                Try
                                                {
                                                  {
                                                    (205471 call(442205 call . this[203965] c"_readOne") dynamic[164113](205477 call args[203975] i[204195]) origLocale[203991])
                                                  }
                                                }
                                              }
                                            }
                                            {
                                              if(205818 call _cond_test(205815 call == tmp[205710] QIO_CONV_SET_CAPTURE[168103]))
                                              {
                                                if(205674 call _cond_test(205670 call == r[204101] nil[32]))
                                                {
                                                  (205497 call = err[204000](205501 call qio_format_error_bad_regex))
                                                }
                                                {
                                                  const rnn[205504] "const"(205505 call postfix! r[204101])
                                                  (205509 'end of statement')
                                                  (205511 call(442221 call . this[203965] c"_match_regex_if_needed") cur[204047] len[204053] err[204000] style[204075] rnn[205504])
                                                  if(205666 call _cond_test(205656 call >=(205659 call . rnn[205504] c"capturei")(205663 call . rnn[205504] c"ncaptures")))
                                                  {
                                                    (205518 call = err[204000](205522 call qio_format_error_bad_regex))
                                                  }
                                                  {
                                                    if(205645 call _cond_test(205640 call _isIoPrimitiveType(205644 'typeof'(205642 call args[203975] i[204195]))))
                                                    {
                                                      Try
                                                      {
                                                        {
                                                          if(205612 call _cond_test(205605 call ==(205610 'typeof'(205608 call args[203975] i[204195])) string[244]))
                                                          {
                                                            (205526 call =(205529 call args[203975] i[204195])(205545 call(205542 call .(205535 call(205532 call . rnn[205504] c"capArr")(205539 call . rnn[205504] c"capturei")) c"decode")))
                                                          }
                                                          {
                                                            if(205599 call _cond_test(205594 call isEnumType(205598 'typeof'(205596 call args[203975] i[204195]))))
                                                            {
                                                              (205547 call =(205550 call args[203975] i[204195])(205552 call :(205566 call(205563 call .(205558 call(205555 call . rnn[205504] c"capArr")(205560 call . rnn[205504] c"capturei")) c"decode"))(205570 'typeof'(205568 call args[203975] i[204195]))))
                                                            }
                                                            {
                                                              (205572 call =(205575 call args[203975] i[204195])(205577 call :(205583 call(205580 call . rnn[205504] c"capArr")(205585 call . rnn[205504] c"capturei"))(205591 'typeof'(205589 call args[203975] i[204195]))))
                                                            }
                                                          }
                                                        }
                                                      }
                                                      Catch e : DecodeError
                                                      {
                                                        unknown tmp[395123] "temp"(395127 'dynamic_cast' unmanaged DecodeError?[468253](395126 'current error'))
                                                        if(395130 '!=' tmp[395123] nil[32])
                                                        {
                                                          unknown e[205628](395140 'new'(395139 call _owned[238](?)(395136 'to non nilable class' tmp[395123])))
                                                          {
                                                            (205621 call = err[204000](205625 call qio_format_error_arg_mismatch i[204195]))
                                                          }
                                                        }
                                                        {
                                                        }
                                                      }
                                                      Catch
                                                      {
                                                        unknown tmp[395142] "temp"(395145 'current error')
                                                        unknown chpl_anon_error[395148](395154 'new'(395153 call _owned[238](?)(395150 'to non nilable class' tmp[395142])))
                                                        {
                                                          (205631 call = err[204000](205635 call qio_format_error_bad_regex))
                                                        }
                                                      }
                                                    }
                                                    (205649 call +=(205652 call . rnn[205504] c"capturei") 1)
                                                  }
                                                }
                                              }
                                              {
                                                (205682 'throw'(205683 'new'(_chpl_manager = _owned[238](?))(205687 call IllegalArgumentError[414940](?)(205688 call +(205690 call +(205692 call + "illegal argument 'args("(205695 call : i[204195] string[244])) ")': readf internal error ")(205702 call :(205705 call argType[204093] i[204195]) string[244])))))
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                label _unused_continueLabel[205831]
                label _breakLabel[205830]
              }
              if(205891 call _cond_test(205888 call ! err[204000]))
              {
                if(205884 call _cond_test(205880 call < cur[204047] len[204053]))
                {
                  unknown dummy[205866] c_int[522]
                  (205869 'end of statement')
                  (205871 call(442259 call . this[203965] c"_format_reader") fmtStr[203970] cur[204047] len[204053] err[204000] conv[204065] gotConv[204070] style[204075] r[204101])
                }
              }
              if(205913 call _cond_test(205910 call ! err[204000]))
              {
                if(205906 call _cond_test(205902 call < cur[204047] len[204053]))
                {
                  (205897 call = err[204000](205901 call qio_format_error_too_few_args))
                }
              }
              if(205928 call _cond_test(205925 call ! err[204000]))
              {
                (205919 call qio_channel_commit_unlocked(442279 call . this[203965] c"_channel_internal"))
              }
              {
                (205923 call qio_channel_revert_unlocked(442284 call . this[203965] c"_channel_internal"))
              }
            }
          }
          Catch thrownError : EofError
          {
            unknown tmp[395156] "temp"(395160 'dynamic_cast' unmanaged EofError?[468265](395159 'current error'))
            if(395163 '!=' tmp[395156] nil[32])
            {
              unknown thrownError[205940](395173 'new'(395172 call _owned[238](?)(395169 'to non nilable class' tmp[395156])))
              {
                (205935 call = err[204000](442290 call EEOF[177311]))
              }
            }
            {
            }
          }
        }
      }
      (205959 'elided on block' 0 tmp[205955])
    }
    if(205994 call _cond_test(205991 call ! err[204000]))
    {
      (205964 return 1)
    }
    {
      if(205987 call _cond_test(205983 call == err[204000](442295 call EEOF[177311])))
      {
        (205967 return 0)
      }
      {
        Try
        {
          {
            (205975 call(205972 call . this[203965] c"_ch_ioerror") err[204000] "in fileReader.readf(fmt:string, ...)")
          }
        }
      }
    }
    (205999 return 0)
  }
  where {
    (203981 call ||(203984 call isStringType t[203968])(203987 call isBytesType t[203968]))
  }
  { scopeless type
    bool[19]
  }
  function fileReader[170893](?).readf[206005](arg _mt[206016]:_MT[201], arg this[206008]:fileReader[170893](?) :
  fileReader[170893](?), arg fmtStr[206013] :
  unknown t[206011]) : _unknown[42] throws "method"
  {
    unknown err[206028] 0 errorCode[12828]
    (206032 'end of statement')
    {
      const tmp[206214] "const" "temp"
      (206215 'move' tmp[206214](206212 'deref'(206211 '_wide_get_locale'(206034 call . this[206008] c"_home"))))
      {
        Try
        {
          {
            (206043 call(206040 call . this[206008] c"lock"))
          }
        }
        Defer
        {
          {
            (206052 call(206049 call . this[206008] c"unlock"))
          }
        }
        unknown save_style[206056](206062 call(206059 call . this[206008] c"_styleInternal")) iostyleInternal[164872]
        (206064 'end of statement')
        Defer
        {
          {
            (206070 call(206067 call . this[206008] c"_set_styleInternal") save_style[206056])
          }
        }
        unknown cur[206075] 0 c_size_t[614]
        (206079 'end of statement')
        unknown len[206081](206083 call :(206086 call . fmtStr[206013] c"size") c_size_t[614]) c_size_t[614]
        (206091 'end of statement')
        unknown conv[206093] qio_conv_t[167955]
        (206096 'end of statement')
        unknown gotConv[206098] bool[19]
        (206101 'end of statement')
        unknown style[206103] iostyleInternal[164872]
        (206106 'end of statement')
        unknown end[206108] c_size_t[614]
        (206111 'end of statement')
        unknown dummy[206113] c_int[522]
        (206116 'end of statement')
        unknown r[206118] unmanaged _channel_regex_info?[468136]
        (206123 'end of statement')
        Defer
        {
          {
            if(206131 call _cond_test r[206118])
            {
              (206127 call chpl__delete r[206118])
            }
          }
        }
        (206138 call = err[206028](206142 call qio_channel_mark 0(442317 call . this[206008] c"_channel_internal")))
        if(206170 call _cond_test(206167 call ! err[206028]))
        {
          (206147 call(442321 call . this[206008] c"_format_reader") fmtStr[206013] cur[206075] len[206081] err[206028] conv[206093] gotConv[206098] style[206103] r[206118])
          if(206163 call _cond_test gotConv[206098])
          {
            (206157 call = err[206028](206161 call qio_format_error_too_few_args))
          }
        }
        if(206192 call _cond_test(206189 call ! err[206028]))
        {
          if(206185 call _cond_test(206181 call < cur[206075] len[206081]))
          {
            (206176 call = err[206028](206180 call qio_format_error_too_few_args))
          }
        }
        if(206207 call _cond_test(206204 call ! err[206028]))
        {
          (206198 call qio_channel_commit_unlocked(442341 call . this[206008] c"_channel_internal"))
        }
        {
          (206202 call qio_channel_revert_unlocked(442346 call . this[206008] c"_channel_internal"))
        }
      }
      (206218 'elided on block' 0 tmp[206214])
    }
    if(206255 call _cond_test(206252 call ! err[206028]))
    {
      (206223 return 1)
    }
    {
      if(206248 call _cond_test(206244 call == err[206028](442352 call EEOF[177311])))
      {
        (206226 return 0)
      }
      {
        Try
        {
          {
            (206234 call(206231 call . this[206008] c"_ch_ioerror") err[206028] "in fileReader.readf(fmt:string)")
          }
        }
        (206242 return 0)
      }
    }
  }
  where {
    (206018 call ||(206021 call isStringType t[206011])(206024 call isBytesType t[206011]))
  }
  function readf[206263](arg fmt[206266] :
  string[244], ref arg args[206271]:_any[141](?) ...) : _unknown[42] throws
  {
    (206276 return(206287 'try-expr'(206283 call(206280 call . stdin[196736] c"readf") fmt[206266](206286 'expand_tuple' args[206271]))))
  }
  { scopeless type
    bool[19]
  }
  function readf[206291](arg fmt[206294] :
  string[244]) : _unknown[42] throws
  {
    (206299 return(206306 'try-expr'(206304 call(206301 call . stdin[196736] c"readf") fmt[206294])))
  }
  { scopeless type
    bool[19]
  }
  function fileReader[170893](?)._skipField[206310](arg _mt[206316]:_MT[201], arg this[206313]:fileReader[170893](?) :
  fileReader[170893](?)) : _unknown[42] throws "method" "no return value for void"
  {
    unknown err[206320] 0 errorCode[12828]
    (206324 'end of statement')
    {
      const tmp[206381] "const" "temp"
      (206382 'move' tmp[206381](206379 'deref'(206378 '_wide_get_locale'(206326 call . this[206313] c"_home"))))
      {
        Try
        {
          {
            (206335 call(206332 call . this[206313] c"lock"))
          }
        }
        Defer
        {
          {
            (206344 call(206341 call . this[206313] c"unlock"))
          }
        }
        unknown st[206348](206353 call(206350 call . this[206313] c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE[77175])
        (206356 'end of statement')
        if(206374 call _cond_test(206370 call == st[206348] QIO_AGGREGATE_FORMAT_JSON[77225]))
        {
          (206358 call = err[206320](206362 call qio_channel_skip_json_field 0(442365 call . this[206313] c"_channel_internal")))
        }
        {
          (206366 call = err[206320] ENOTSUP[11356])
        }
      }
      (206385 'elided on block' 0 tmp[206381])
    }
    if(206403 call _cond_test err[206320])
    {
      Try
      {
        {
          (206394 call(206391 call . this[206313] c"_ch_ioerror") err[206320] "in skipField")
        }
      }
    }
  }
  function string[244].format[206410](arg _mt[206421]:_MT[201], arg this[206413]:string[244] :
  string[244], arg args[206418]:_any[141](?) ...) : _unknown[42] throws "method"
  {
    Try
    {
      {
        (206426 return(206428 call chpl_do_format this[206413](206431 'expand_tuple' args[206418])))
      }
    }
    Catch e : IllegalArgumentError
    {
      unknown tmp[395175] "temp"(395179 'dynamic_cast' unmanaged IllegalArgumentError?[468283](395178 'current error'))
      if(395182 '!=' tmp[395175] nil[32])
      {
        unknown e[206438](395192 'new'(395191 call _owned[238](?)(395188 'to non nilable class' tmp[395175])))
        {
          (206435 'throw' e[206438])
        }
      }
      {
      }
    }
    Catch e : EofError
    {
      unknown tmp[395194] "temp"(395198 'dynamic_cast' unmanaged EofError?[468265](395197 'current error'))
      if(395201 '!=' tmp[395194] nil[32])
      {
        unknown e[206445](395211 'new'(395210 call _owned[238](?)(395207 'to non nilable class' tmp[395194])))
        {
          (206442 'throw' e[206445])
        }
      }
      {
      }
    }
    Catch e : UnexpectedEofError
    {
      unknown tmp[395213] "temp"(395217 'dynamic_cast' unmanaged UnexpectedEofError?[468271](395216 'current error'))
      if(395220 '!=' tmp[395213] nil[32])
      {
        unknown e[206452](395230 'new'(395229 call _owned[238](?)(395226 'to non nilable class' tmp[395213])))
        {
          (206449 'throw' e[206452])
        }
      }
      {
      }
    }
    Catch e : BadFormatError
    {
      unknown tmp[395232] "temp"(395236 'dynamic_cast' unmanaged BadFormatError?[468259](395235 'current error'))
      if(395239 '!=' tmp[395232] nil[32])
      {
        unknown e[206459](395249 'new'(395248 call _owned[238](?)(395245 'to non nilable class' tmp[395232])))
        {
          (206456 'throw' e[206459])
        }
      }
      {
      }
    }
    Catch e : SystemError
    {
      unknown tmp[395251] "temp"(395255 'dynamic_cast' unmanaged SystemError?[468277](395254 'current error'))
      if(395258 '!=' tmp[395251] nil[32])
      {
        unknown e[206477](395268 'new'(395267 call _owned[238](?)(395264 'to non nilable class' tmp[395251])))
        {
          Try
          {
            {
              (206465 call ioerror(206467 call . e[206477] c"err") "in string.format")
            }
          }
        }
      }
      {
      }
    }
    Catch e : DecodeError
    {
      unknown tmp[395270] "temp"(395274 'dynamic_cast' unmanaged DecodeError?[468253](395273 'current error'))
      if(395277 '!=' tmp[395270] nil[32])
      {
        unknown e[206493](395287 'new'(395286 call _owned[238](?)(395283 'to non nilable class' tmp[395270])))
        {
          Try
          {
            {
              (206483 call ioerror(206484 call : EILSEQ[11191] errorCode[12828]) "in string.format")
            }
          }
        }
      }
      {
      }
    }
    Catch
    {
      unknown tmp[395289] "temp"(395292 'current error')
      unknown chpl_anon_error[395295](395301 'new'(395300 call _owned[238](?)(395297 'to non nilable class' tmp[395289])))
      {
        Try
        {
          {
            (206498 call ioerror(206499 call : EINVAL[11206] errorCode[12828]) "in string.format")
          }
        }
      }
    }
    (206510 return "")
  }
  { scopeless type
    string[244]
  }
  function bytes[232].format[206515](arg _mt[206526]:_MT[201], arg this[206518]:bytes[232] :
  bytes[232], arg args[206523]:_any[141](?) ...) : _unknown[42] throws "method"
  {
    Try
    {
      {
        (206531 return(206533 call chpl_do_format this[206518](206536 'expand_tuple' args[206523])))
      }
    }
    Catch e : EofError
    {
      unknown tmp[395303] "temp"(395307 'dynamic_cast' unmanaged EofError?[468265](395306 'current error'))
      if(395310 '!=' tmp[395303] nil[32])
      {
        unknown e[206543](395320 'new'(395319 call _owned[238](?)(395316 'to non nilable class' tmp[395303])))
        {
          (206540 'throw' e[206543])
        }
      }
      {
      }
    }
    Catch e : UnexpectedEofError
    {
      unknown tmp[395322] "temp"(395326 'dynamic_cast' unmanaged UnexpectedEofError?[468271](395325 'current error'))
      if(395329 '!=' tmp[395322] nil[32])
      {
        unknown e[206550](395339 'new'(395338 call _owned[238](?)(395335 'to non nilable class' tmp[395322])))
        {
          (206547 'throw' e[206550])
        }
      }
      {
      }
    }
    Catch e : BadFormatError
    {
      unknown tmp[395341] "temp"(395345 'dynamic_cast' unmanaged BadFormatError?[468259](395344 'current error'))
      if(395348 '!=' tmp[395341] nil[32])
      {
        unknown e[206557](395358 'new'(395357 call _owned[238](?)(395354 'to non nilable class' tmp[395341])))
        {
          (206554 'throw' e[206557])
        }
      }
      {
      }
    }
    Catch e : SystemError
    {
      unknown tmp[395360] "temp"(395364 'dynamic_cast' unmanaged SystemError?[468277](395363 'current error'))
      if(395367 '!=' tmp[395360] nil[32])
      {
        unknown e[206575](395377 'new'(395376 call _owned[238](?)(395373 'to non nilable class' tmp[395360])))
        {
          Try
          {
            {
              (206563 call ioerror(206565 call . e[206575] c"err") "in bytes.format")
            }
          }
        }
      }
      {
      }
    }
    Catch
    {
      unknown tmp[395379] "temp"(395382 'current error')
      unknown chpl_anon_error[395385](395391 'new'(395390 call _owned[238](?)(395387 'to non nilable class' tmp[395379])))
      {
        Try
        {
          {
            (206580 call ioerror(206581 call : EINVAL[11206] errorCode[12828]) "in bytes.format")
          }
        }
      }
    }
    (206592 return b"")
  }
  { scopeless type
    bytes[232]
  }
  function chpl_do_format[206597](arg fmt[206601] :
  unknown t[206599], arg args[206606]:_any[141](?) ...) : _unknown[42] throws "private"
  {
    unknown f[206620](206623 'try-expr'(206622 call openMemFile))
    (206625 'end of statement')
    Defer
    {
      {
        Try
        {
          {
            (206632 call(206629 call . f[206620] c"close"))
          }
        }
        Catch
        {
          unknown tmp[395393] "temp"(395396 'current error')
          unknown chpl_anon_error[395399](395405 'new'(395404 call _owned[238](?)(395401 'to non nilable class' tmp[395393])))
          {
          }
        }
      }
    }
    unknown offset[206641] 0 int(64)[10]
    (206645 'end of statement')
    {
      unknown w[206648](206656 'try-expr'(206653 call(206650 call . f[206620] c"writer")(locking = 0)))
      (206658 'end of statement')
      Defer
      {
        {
          Try
          {
            {
              (206665 call(206662 call . w[206648] c"close"))
            }
          }
          Catch
          {
            unknown tmp[395407] "temp"(395410 'current error')
            unknown chpl_anon_error[395413](395419 'new'(395418 call _owned[238](?)(395415 'to non nilable class' tmp[395407])))
            {
            }
          }
        }
      }
      Try
      {
        {
          (206678 call(206675 call . w[206648] c"writef") fmt[206601](206681 'expand_tuple' args[206606]))
        }
      }
      Try!
      {
        {
          (206690 call(206687 call . w[206648] c"lock"))
        }
      }
      (206694 call = offset[206641](206701 call(206698 call . w[206648] c"offset")))
      (206706 call(206703 call . w[206648] c"unlock"))
      Try
      {
        {
          (206712 call(206709 call . w[206648] c"close"))
        }
      }
    }
    unknown buf[206717](206719 call allocate(206721 call uint(64)[86] 8)(206730 call(206727 call .(206723 call + offset[206641] 1) c"safeCast") c_size_t[614]))
    (206733 'end of statement')
    unknown r[206735](206743 'try-expr'(206740 call(206737 call . f[206620] c"reader")(locking = 0)))
    (206745 'end of statement')
    Defer
    {
      {
        Try
        {
          {
            (206752 call(206749 call . r[206735] c"close"))
          }
        }
        Catch
        {
          unknown tmp[395421] "temp"(395424 'current error')
          unknown chpl_anon_error[395427](395433 'new'(395432 call _owned[238](?)(395429 'to non nilable class' tmp[395421])))
          {
          }
        }
      }
    }
    Try
    {
      {
        (206765 call(206762 call . r[206735] c"readBinary") buf[206717] offset[206641])
      }
    }
    Try
    {
      {
        (206776 call(206773 call . r[206735] c"close"))
      }
    }
    Try
    {
      {
        (206785 call(206782 call . f[206620] c"close"))
      }
    }
    (206789 call =(206792 call buf[206717] offset[206641]) 0)
    (206795 return(206800 call(206797 call . t[206599] c"createAdoptingBuffer") buf[206717] offset[206641](206803 call + offset[206641] 1)))
  }
  where {
    (206610 call ||(206613 call isStringType t[206599])(206616 call isBytesType t[206599]))
  }
  { scopeless type
    t[206599]
  }
  function qio_regex_channel_match[206814](const  ref arg re[206817] :
  qio_regex_t[153611], arg threadsafe[206821] :
  c_int[522], arg ch[206825] :
  qio_channel_ptr_t[164507], arg maxlen[206831] :
  (206829 call int(64)[10] 64), arg anchor[206835] :
  c_int[522], arg can_discard[206839] :
  bool[19], arg keep_unmatched[206843] :
  bool[19], arg keep_whole_pattern[206847] :
  bool[19], arg submatch[206853] :
  (206851 call _ddata[67573](?) qio_regex_string_piece_t[153880]), arg nsubmatch[206859] :
  (206857 call int(64)[10] 64)) : _unknown[42] "extern" "local args" "no fn body" "private"
  {
  }
  { scopeless type
    errorCode[12828]
  }
  function fileReader[170893](?)._extractMatch[206866](arg _mt[206884]:_MT[201], arg this[206869]:fileReader[170893](?) :
  fileReader[170893](?), arg m[206873] :
  regexMatch[154054], ref arg arg[206877] :
  regexMatch[154054], ref arg error[206881] :
  errorCode[12828]) : _unknown[42] "method" "no return value for void"
  {
    (206887 call = arg[206877] m[206873])
  }
  function fileReader[170893](?)._extractMatch[206893](arg _mt[206911]:_MT[201], arg this[206896]:fileReader[170893](?) :
  fileReader[170893](?), arg m[206900] :
  regexMatch[154054], ref arg arg[206904] :
  bytes[232], ref arg error[206908] :
  errorCode[12828]) : _unknown[42] "method" "no return value for void"
  {
    unknown cur[206915](206917 call int(64)[10] 64)
    (206920 'end of statement')
    unknown target[206922](206923 call :(206926 call . m[206900] c"byteOffset") int(64)[10])
    (206931 'end of statement')
    unknown len[206933](206935 call . m[206900] c"numBytes")
    (206939 'end of statement')
    const oldPosition[206941] "const"(206943 call qio_channel_offset_unlocked(442435 call . this[206896] c"_channel_internal"))
    (206946 'end of statement')
    if(206958 call _cond_test(206952 call !(206955 call . m[206900] c"matched")))
    {
      (206948 call = arg[206904] b"")
    }
    if(206982 call _cond_test(206979 call ! error[206908]))
    {
      (206964 call qio_channel_revert_unlocked(442441 call . this[206896] c"_channel_internal"))
      (206966 call = error[206908](206970 call qio_channel_mark 0(442447 call . this[206896] c"_channel_internal")))
      (206973 call = cur[206915](206977 call qio_channel_offset_unlocked(442453 call . this[206896] c"_channel_internal")))
    }
    if(207001 call _cond_test(206998 call ! error[206908]))
    {
      (206987 call = error[206908](206991 call qio_channel_advance 0(442460 call . this[206896] c"_channel_internal")(206994 call - target[206922] cur[206915])))
    }
    unknown s[207006] bytes[232]
    (207009 'end of statement')
    if(207065 call _cond_test(207062 call ! error[206908]))
    {
      unknown gotlen[207012](207014 call int(64)[10] 64)
      (207017 'end of statement')
      unknown ts[207019](207021 call c_ptrConst[46990](?) c_char[562])
      (207024 'end of statement')
      (207025 call = error[206908](207029 call qio_channel_read_string 0(207031 call : native[164116] c_int[522])(207038 call : len[206933](207042 call int(64)[10] 64))(442473 call . this[206896] c"_channel_internal") ts[207019] gotlen[207012](207047 call : len[206933] c_ssize_t[620])))
      (207051 call = s[207006](207058 call(207055 call . bytes[232] c"createAdoptingBuffer") ts[207019](length = gotlen[207012])))
    }
    if(207082 call _cond_test(207079 call ! error[206908]))
    {
      (207070 call = arg[206904] s[207006])
    }
    {
      (207075 call = arg[206904] b"")
    }
    (207086 call = cur[206915](207090 call qio_channel_offset_unlocked(442491 call . this[206896] c"_channel_internal")))
    if(207105 call _cond_test(207101 call > oldPosition[206941] cur[206915]))
    {
      (207093 call qio_channel_advance 0(442496 call . this[206896] c"_channel_internal")(207096 call - oldPosition[206941] cur[206915]))
    }
  }
  function fileReader[170893](?)._extractMatch[207112](arg _mt[207131]:_MT[201], arg this[207115]:fileReader[170893](?) :
  fileReader[170893](?), arg m[207119] :
  regexMatch[154054], ref arg arg[207124] :
  unknown t[207122], ref arg error[207128] :
  errorCode[12828]) : _unknown[42] "method" "no return value for void"
  {
    if(207161 call _cond_test(207155 call !(207158 call . m[207119] c"matched")))
    {
      unknown empty[207146](207148 'typeof' arg[207124])
      (207150 'end of statement')
      (207151 call = arg[207124] empty[207146])
    }
    unknown s[207166] bytes[232]
    (207169 'end of statement')
    (207171 call(442512 call . this[207115] c"_extractMatch") m[207119] s[207166] error[207128])
    if(207227 call _cond_test(207224 call ! error[207128]))
    {
      if(207209 call _cond_test(207204 call ==(207207 'typeof' arg[207124]) string[244]))
      {
        Try
        {
          {
            (207178 call = arg[207124](207185 call(207182 call . s[207166] c"decode")))
          }
        }
        Catch
        {
          unknown tmp[395435] "temp"(395438 'current error')
          unknown chpl_anon_error[395441](395447 'new'(395446 call _owned[238](?)(395443 'to non nilable class' tmp[395435])))
          {
            (207188 call = error[207128](442520 call EFORMAT[177345]))
          }
        }
      }
      {
        (207196 call = arg[207124](207199 call : s[207166](207203 'typeof' arg[207124])))
      }
    }
    {
      unknown empty[207215](207217 'typeof' arg[207124])
      (207219 'end of statement')
      (207220 call = arg[207124] empty[207215])
    }
  }
  where {
    (207133 call &&(207135 call != t[207122] regexMatch[154054])(207139 call != t[207122] bytes[232]))
  }
  function fileReader[170893](?).extractMatch[207234](arg _mt[207246]:_MT[201], arg this[207237]:fileReader[170893](?) :
  fileReader[170893](?), arg m[207241] :
  regexMatch[154054], ref arg arg[207244]:_any[141](?)) : _unknown[42] throws "method" "no return value for void"
  {
    unknown err[207250] 0 errorCode[12828]
    (207254 'end of statement')
    {
      const tmp[207285] "const" "temp"
      (207286 'move' tmp[207285](207283 'deref'(207282 '_wide_get_locale'(207256 call . this[207237] c"_home"))))
      {
        Try
        {
          {
            (207265 call(207262 call . this[207237] c"lock"))
          }
        }
        Defer
        {
          {
            (207274 call(207271 call . this[207237] c"unlock"))
          }
        }
        (207278 call(442533 call . this[207237] c"_extractMatch") m[207241] arg[207244] err[207250])
      }
      (207289 'elided on block' 0 tmp[207285])
    }
    if(207318 call _cond_test err[207250])
    {
      Try
      {
        {
          (207299 call(207296 call . this[207237] c"_ch_ioerror") err[207250](207301 call +(207303 call + "in fileReader.extractMatch(m:regexMatch, ref "(207308 call :(207311 'typeof' arg[207244]) string[244])) ")"))
        }
      }
    }
  }
  function fileReader[170893](?)._ch_handle_captures[207324](arg _mt[207346]:_MT[201], arg this[207327]:fileReader[170893](?) :
  fileReader[170893](?), arg matches[207333] :
  (207331 call _ddata[67573](?) qio_regex_string_piece_t[153880]), arg nmatches[207337] :
  int(64)[10], ref arg captures[207340]:_any[141](?), ref arg error[207343] :
  errorCode[12828]) : _unknown[42] "method" "no return value for void"
  {
    (207350 call assert(207351 call >= nmatches[207337](207355 call . captures[207340] c"size")))
    {
      unknown i[207358] "index var" 0
      unknown tmp[207387] "maybe param" "temp"
      (207399 'move' tmp[207387](207397 call chpl_compute_low_param_loop_bound 0(207361 call -(207364 call . captures[207340] c"size") 1)))
      unknown tmp[207388] "maybe param" "temp"
      (207412 'move' tmp[207388](207410 call chpl_compute_high_param_loop_bound 0(207404 call -(207406 call . captures[207340] c"size") 1)))
      unknown tmp[207389] "maybe param" "temp"
      (207415 'move' tmp[207389] 1)
      ParamForLoop[207417]
      { i[207358] tmp[207387] tmp[207388] tmp[207389]
        {
          unknown m[207372](207374 call _to_regexMatch(207376 call matches[207333] i[207358]))
          (207379 'end of statement')
          (207381 call(442549 call . this[207327] c"_extractMatch") m[207372](207384 call captures[207340] i[207358]) error[207343])
        }
      }
      label _unused_continueLabel[207391]
      label _breakLabel[207390]
    }
  }
  function advanceToEof[207428](arg fr[207431] :
  fileReader[170893](?)) : _unknown[42] "private"
  {
    unknown error[207437] 0 errorCode[12828]
    (207441 'end of statement')
    (207442 call = error[207437](207446 call qio_channel_advance 0(207449 call . fr[207431] c"_channel_internal")(207453 call max(207455 call int(64)[10] 64))))
    if(207466 call _cond_test(207462 call == error[207437](442562 call EEOF[177311])))
    {
      (207457 call = error[207437] 0)
    }
    (207471 return error[207437])
  }
  { scopeless type
    errorCode[12828]
  }
  function _searchHelp[207476](ref arg fr[207479] :
  fileReader[170893](?), arg re[207485] :
  (207483 call regex[156365](?) ?[227]), ref arg error[207489] :
  errorCode[12828], param arg numMatches[207492]:_any[141](?), param arg doCapture[207495] :
  bool[19], ref arg captures[207498]:_any[141](?)) : _unknown[42] "inline" "private"
  {
    unknown m[207503] regexMatch[154054]
    (207506 'end of statement')
    {
      const tmp[207708] "const" "temp"
      (207709 'move' tmp[207708](207706 'deref'(207705 '_wide_get_locale'(207508 call . fr[207479] c"_home"))))
      {
        Try!
        {
          {
            (207517 call(207514 call . fr[207479] c"lock"))
          }
        }
        Defer
        {
          {
            (207526 call(207523 call . fr[207479] c"unlock"))
          }
        }
        unknown nm[207530] "param" numMatches[207492]
        (207533 'end of statement')
        unknown matches[207535](207537 call _ddata_allocate qio_regex_string_piece_t[153880] nm[207530])
        (207541 'end of statement')
        (207542 call = error[207489](207546 call qio_channel_mark 0(207549 call . fr[207479] c"_channel_internal")))
        if(207581 call _cond_test(207578 call ! error[207489]))
        {
          (207553 call = error[207489](207557 call qio_regex_channel_match(207559 call . re[207485] c"_regex") 0(207564 call . fr[207479] c"_channel_internal")(207568 call max(207570 call int(64)[10] 64)) QIO_REGEX_ANCHOR_UNANCHORED[153850] 1 0 1 matches[207535] nm[207530]))
        }
        if(207600 call _cond_test(207590 call ||(207592 call == error[207489](442582 call EFORMAT[177345]))(207596 call == error[207489](442585 call EEOF[177311]))))
        {
          (207585 call = error[207489] 0)
        }
        if(207697 call _cond_test(207694 call ! error[207489]))
        {
          (207606 call = m[207503](207610 call _to_regexMatch(207612 call matches[207535] 0)))
          if(207690 call _cond_test(207687 call . m[207503] c"matched"))
          {
            if(207628 call _cond_test doCapture[207495])
            {
              (207622 call(207619 call . fr[207479] c"_ch_handle_captures") matches[207535] nm[207530] captures[207498] error[207489])
            }
            (207633 call qio_channel_revert_unlocked(207635 call . fr[207479] c"_channel_internal"))
            unknown cur[207639](207641 call qio_channel_offset_unlocked(207643 call . fr[207479] c"_channel_internal"))
            (207647 'end of statement')
            unknown target[207649](207650 call :(207653 call . m[207503] c"byteOffset") int(64)[10])
            (207658 'end of statement')
            (207659 call = error[207489](207663 call qio_channel_advance 0(207666 call . fr[207479] c"_channel_internal")(207669 call - target[207649] cur[207639])))
          }
          {
            (207675 call qio_channel_commit_unlocked(207677 call . fr[207479] c"_channel_internal"))
            (207680 call = error[207489](207684 call advanceToEof fr[207479]))
          }
        }
        (207702 call _ddata_free matches[207535] nm[207530])
      }
      (207712 'elided on block' 0 tmp[207708])
    }
    (207716 return m[207503])
  }
  { scopeless type
    regexMatch[154054]
  }
  function fileReader[170893](?).search[207721](arg _mt[207733]:_MT[201], ref arg this[207724]:fileReader[170893](?) :
  fileReader[170893](?), arg re[207730] :
  (207728 call regex[156365](?) ?[227])) : _unknown[42] throws "method"
  {
    unknown e[207738] 0 errorCode[12828]
    (207742 'end of statement')
    unknown dummy[207744] int(64)[10]
    (207747 'end of statement')
    unknown ret[207749](207751 call _searchHelp this[207724] re[207730] e[207738] 1 0 dummy[207744])
    (207759 'end of statement')
    if(207774 call _cond_test e[207738])
    {
      Try
      {
        {
          (207765 call(207762 call . this[207724] c"_ch_ioerror") e[207738] "in fileReader.search")
        }
      }
    }
    (207779 return ret[207749])
  }
  { scopeless type
    regexMatch[154054]
  }
  function fileReader[170893](?).search[207784](arg _mt[207801]:_MT[201], ref arg this[207787]:fileReader[170893](?) :
  fileReader[170893](?), arg re[207793] :
  (207791 call regex[156365](?) ?[227]), ref arg captures[207798]:_any[141](?) ...) : _unknown[42] throws "method"
  {
    unknown e[207806] 0 errorCode[12828]
    (207810 'end of statement')
    unknown ret[207812](207814 call _searchHelp this[207787] re[207793] e[207806](207818 call +(207821 call . captures[207798] c"size") 1) 1 captures[207798])
    (207828 'end of statement')
    if(207841 call _cond_test e[207806])
    {
      Try
      {
        {
          (207834 call(207831 call . this[207787] c"_ch_ioerror") e[207806] "in fileReader.search")
        }
      }
    }
    (207846 return ret[207812])
  }
  { scopeless type
    regexMatch[154054]
  }
  function fileReader[170893](?).matches[207851](arg _mt[207875]:_MT[201], arg this[207854]:fileReader[170893](?) :
  fileReader[170893](?), arg re[207860] :
  (207858 call regex[156365](?) ?[227]), param arg captures[207864] =
  0, arg maxmatches[207871] :
  int(64)[10] =
  (207869 call max int(64)[10])) : _unknown[42] "iterator fn" "method" "no return value for void"
  {
    unknown go[207879] 1
    (207882 'end of statement')
    unknown i[207884] 0
    (207887 'end of statement')
    unknown error[207889] 0 errorCode[12828]
    (207893 'end of statement')
    unknown nret[207895] "param"(207896 call + captures[207864] 1)
    (207901 'end of statement')
    unknown ret[207903](207904 call * nret[207895] regexMatch[154054])
    (207909 'end of statement')
    Try!
    {
      {
        (207912 call(442629 call . this[207854] c"lock"))
      }
    }
    {
      const tmp[207929] "const" "temp"
      (207930 'move' tmp[207929](207927 'deref'(207926 '_wide_get_locale'(207917 call . this[207854] c"_home"))))
      Try!
      {
        {
          (207922 call(442633 call . this[207854] c"mark"))
        }
      }
      (207933 'elided on block' 0 tmp[207929])
    }
    {
      unknown tmp[208205] "temp"
      (208235 'move' tmp[208205](208227 call _cond_test(208229 call && go[207879](208232 call < i[207884] maxmatches[207871]))))
      WhileDo[208210]
      {
        {
          {
            const tmp[208182] "const" "temp"
            (208183 'move' tmp[208182](208180 'deref'(208179 '_wide_get_locale'(207946 call . this[207854] c"_home"))))
            {
              unknown m[207951] regexMatch[154054]
              (207954 'end of statement')
              const matches[207956] "const"(207958 call _ddata_allocate qio_regex_string_piece_t[153880] nret[207895])
              (207962 'end of statement')
              if(207989 call _cond_test(207986 call ! error[207889]))
              {
                (207964 call = error[207889](207968 call qio_regex_channel_match(207970 call . re[207860] c"_regex") 0(442642 call . this[207854] c"_channel_internal")(207976 call max(207978 call int(64)[10] 64)) QIO_REGEX_ANCHOR_UNANCHORED[153850] 1 0 1 matches[207956] nret[207895]))
              }
              if(208160 call _cond_test(208157 call ! error[207889]))
              {
                (207994 call = m[207951](207998 call _to_regexMatch(208000 call matches[207956] 0)))
                if(208153 call _cond_test(208150 call . m[207951] c"matched"))
                {
                  {
                    unknown i[208003] "index var" 0
                    unknown tmp[208028] "maybe param" "temp"
                    (208040 'move' tmp[208028](208038 call chpl_compute_low_param_loop_bound 0(208006 call - nret[207895] 1)))
                    unknown tmp[208029] "maybe param" "temp"
                    (208050 'move' tmp[208029](208048 call chpl_compute_high_param_loop_bound 0(208045 call - nret[207895] 1)))
                    unknown tmp[208030] "maybe param" "temp"
                    (208053 'move' tmp[208030] 1)
                    ParamForLoop[208055]
                    { i[208003] tmp[208028] tmp[208029] tmp[208030]
                      {
                        (208013 call = m[207951](208017 call _to_regexMatch(208019 call matches[207956] i[208003])))
                        (208022 call(442656 call . this[207854] c"_extractMatch") m[207951](208025 call ret[207903] i[208003]) error[207889])
                      }
                    }
                    label _unused_continueLabel[208032]
                    label _breakLabel[208031]
                  }
                  (208065 call qio_channel_revert_unlocked(442666 call . this[207854] c"_channel_internal"))
                  (208067 call = error[207889](208071 call qio_channel_mark 0(442672 call . this[207854] c"_channel_internal")))
                  if(208144 call _cond_test(208141 call ! error[207889]))
                  {
                    unknown cur[208076](208078 call qio_channel_offset_unlocked(442677 call . this[207854] c"_channel_internal"))
                    (208081 'end of statement')
                    unknown target[208083](208084 call :(208087 call . m[207951] c"byteOffset") int(64)[10])
                    (208092 'end of statement')
                    (208093 call = error[207889](208097 call qio_channel_advance 0(442683 call . this[207854] c"_channel_internal")(208100 call - target[208083] cur[208076])))
                    if(208137 call _cond_test(208130 call ==(208133 call . m[207951] c"numBytes") 0))
                    {
                      (208105 call = error[207889](208109 call qio_channel_advance 0(442691 call . this[207854] c"_channel_internal") 1))
                      if(208126 call _cond_test(208122 call == error[207889](442697 call EEOF[177311])))
                      {
                        (208114 call = error[207889] 0)
                        (208118 call = go[207879] 0)
                      }
                    }
                  }
                }
                {
                }
              }
              (208165 call _ddata_free matches[207956] nret[207895])
              if(208174 call _cond_test error[207889])
              {
                (208168 call = go[207879] 0)
              }
            }
            (208186 'elided on block' 0 tmp[208182])
          }
          if(208196 call _cond_test(208193 call ! error[207889]))
          {
            (208190 yield ret[207903])
          }
          (208201 call += i[207884] 1)
        }
        label _continueLabel[208208]
        (208222 'move' tmp[208205](208214 call _cond_test(208216 call && go[207879](208219 call < i[207884] maxmatches[207871]))))
        tmp[208205]
      }
      label _breakLabel[208209]
    }
    (208239 call(442715 call . this[207854] c"commit"))
    if(208251 call _cond_test(208247 call < i[207884] maxmatches[207871]))
    {
      (208241 call = error[207889](208245 call advanceToEof this[207854]))
    }
    (208256 call(442723 call . this[207854] c"unlock"))
    if(208272 call _cond_test(208262 call ||(208264 call == error[207889](442728 call EFORMAT[177345]))(208268 call == error[207889](442731 call EEOF[177311]))))
    {
      (208257 call = error[207889] 0)
    }
    if(208291 call _cond_test error[207889])
    {
      Try!
      {
        {
          (208282 call(208279 call . this[207854] c"_ch_ioerror") error[207889] "in fileReader.matches")
        }
      }
    }
  } writeSerializable[310070] _channel_regex_info[397587](?)
  {
  }
  (396780 'used modules list'(387026 'use' ChapelStandard[315387])(197213 'use' IO[208303])(197216 'use' CTypes[51217])(197222 'use' POSIX[12822])(197225 'use' OS[15571])(206812 'use' Regex[158724]))
}