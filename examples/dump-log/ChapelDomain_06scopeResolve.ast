AST dump for ChapelDomain after pass scopeResolve.
Module use list: ChapelBase ArrayViewRankChange ChapelTuple ChapelRange HaltWrappers Reflection FormattedIO MemMove 

{
  const defaultHashTableResizeThreshold[209951] "config" "const" 0.5
  (209956 'end of statement')
  unknown noNegativeStrideWarnings[209958] "config" "param" 0
  (209961 'end of statement')
  function _getDomain[209962](arg value[209964]:_any[141](?)) : _unknown[42] "no copy return" "return not owned"
  {
    if(209981 call _cond_test(209973 call !=(209976 call _to_unmanaged(209978 'typeof' value[209964]))(209980 'typeof' value[209964])))
    {
      (209968 call compilerError "Domain on borrow created")
    }
    if(210010 call _cond_test(210008 call _isPrivatized value[209964]))
    {
      (209986 return(209987 'new'(209989 call _domain[225034](?)(209991 call . value[209964] c"pid") value[209964](_unowned = 1))))
    }
    {
      (209998 return(209999 'new'(210001 call _domain[225034](?) nullPid[247489] value[209964](_unowned = 1))))
    }
  }
  function tupleOfRangesSlice[210018](arg base[210020]:_any[141](?), arg slice[210022]:_any[141](?)) : _unknown[42]
  {
    if(210049 call _cond_test(210039 call !=(210042 call . base[210020] c"size")(210046 call . slice[210022] c"size")))
    {
      (210034 call compilerError "tuple size mismatch in tupleOfRangesSlice")
    }
    unknown rank[210055] "param"(210057 call . base[210020] c"size")
    (210061 'end of statement')
    function resultStrides[210062](param arg dim[210065] =
    0) param : _unknown[42]
    {
      (210069 return(210105 IfExpr (210070 call == dim[210065](210073 call - rank[210055] 1)) then
      { scopeless
        (210084 call .(210080 call(210078 call base[210020] dim[210065])(210082 call slice[210022] dim[210065])) c"strides")
      } else
      { scopeless
        (210088 call chpl_strideUnion(210096 call .(210092 call(210090 call base[210020] dim[210065])(210094 call slice[210022] dim[210065])) c"strides")(210100 call resultStrides(210101 call + dim[210065] 1)))
      } ))
    }
    unknown r[210111](210112 call * rank[210055](210116 call range[240](?)(210120 call .(210118 call base[210020] 0) c"idxType") both[107114](210128 call resultStrides)))
    (210130 'end of statement')
    {
      unknown i[210131] "index var" 0
      unknown tmp[210153] "maybe param" "temp"
      (210165 'move' tmp[210153](210163 call chpl_compute_low_param_loop_bound 0(210134 call - rank[210055] 1)))
      unknown tmp[210154] "maybe param" "temp"
      (210175 'move' tmp[210154](210173 call chpl_compute_high_param_loop_bound 0(210170 call - rank[210055] 1)))
      unknown tmp[210155] "maybe param" "temp"
      (210178 'move' tmp[210155] 1)
      ParamForLoop[210180]
      { i[210131] tmp[210153] tmp[210154] tmp[210155]
        {
          (210141 call =(210144 call r[210111] i[210131])(210149 call(210147 call base[210020] i[210131])(210151 call slice[210022] i[210131])))
        }
      }
      label _unused_continueLabel[210157]
      label _breakLabel[210156]
    }
    (210189 return r[210111])
  }
  where {
    (210024 call &&(210027 call chpl__isTupleOfRanges base[210020])(210030 call chpl__isTupleOfRanges slice[210022]))
  }
  function chpl__buildDomainRuntimeType[210194](arg dist[210196]:_any[141](?), param arg rank[210199] :
  int(64)[10], arg idxType[210203]:_any[141](?) =
  int(64)[10], param arg strides[210211] :
  strideKind[107137] =
  one[107127]) type : _unknown[42] "runtime type init fn"
  {
    (210216 return(210217 'new'(210219 call _domain[225034](?) dist[210196] rank[210199] idxType[210203] strides[210211])))
  }
  function chpl__buildDomainRuntimeType[210226](arg dist[210228]:_any[141](?), arg idxType[210230]:_any[141](?), param arg parSafe[210234] :
  bool[19] =
  assocParSafeDefault[52121]) type : _unknown[42] "runtime type init fn"
  {
    if(210248 call _cond_test(210246 call isDomainType idxType[210230]))
    {
      (210240 call compilerError "Values of 'domain' type do not support hash functions yet, so cannot be used as an associative domain's index type")
    }
    (210253 return(210254 'new'(210256 call _domain[225034](?) dist[210228] idxType[210230] parSafe[210234])))
  }
  function isUltimatelyRectangularParent[210262](arg parentDom[210265] :
  _domain[225034](?)) param : _unknown[42] "private"
  {
    if(210306 call _cond_test(210305 call(210302 call . parentDom[210265] c"isRectangular")))
    {
      (210269 return 1)
    }
    {
      if(210295 call _cond_test(210294 call(210291 call . parentDom[210265] c"isSparse")))
      {
        (210272 return(210274 call isUltimatelyRectangularParent(210281 call .(210276 call . parentDom[210265] c"_value") c"parentDom")))
      }
      {
        (210285 return 0)
      }
    }
  }
  function chpl__buildSparseDomainRuntimeType[210314](arg dist[210316]:_any[141](?), arg parentDom[210319] :
  _domain[225034](?)) type : _unknown[42] "runtime type init fn"
  {
    if(210339 call _cond_test(210334 call !(210337 call isUltimatelyRectangularParent parentDom[210319])))
    {
      (210324 call compilerError(210325 call + "sparse subdomains are currently supported only for " "rectangular domains"))
    }
    (210344 return(210345 'new'(210347 call _domain[225034](?) dist[210316] parentDom[210319])))
  }
  function chpl__buildSparseDomainRuntimeTypeForParentDomain[210352](arg parentDom[210354]:_any[141](?)) type : _unknown[42]
  {
    if(210376 call _cond_test(210371 call !(210374 call isDomain parentDom[210354])))
    {
      (210358 call compilerError "building a sparse subdomain of a non-domain value" " of type "(210365 call :(210368 'typeof' parentDom[210354]) string[244]))
    }
    (210381 return(210383 call chpl__buildSparseDomainRuntimeType(210387 call . parentDom[210354] c"defaultSparseDist") parentDom[210354]))
  }
  function chpl__buildSparseDomainRuntimeTypeForParentDomain[210393](arg parentDom[210395]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    (210399 call compilerError "building a sparse subdomain of a type;" " please supply a domain value instead")
  }
  function chpl__convertRuntimeTypeToValue[210408](arg dist[210410]:_any[141](?), param arg rank[210413] :
  int(64)[10], arg idxType[210417]:_any[141](?) =
  int(64)[10], param arg strides[210421] :
  strideKind[107137], param arg isNoInit[210425] :
  bool[19], arg definedConst[210429] :
  bool[19]) : _unknown[42]
  {
    (210433 return(210434 'new'(210436 call _domain[225034](?) dist[210410] rank[210413] idxType[210417] strides[210421] definedConst[210429])))
  }
  function chpl__convertRuntimeTypeToValue[210444](arg dist[210446]:_any[141](?), arg idxType[210448]:_any[141](?), param arg parSafe[210451] :
  bool[19], param arg isNoInit[210455] :
  bool[19], arg definedConst[210459] :
  bool[19]) : _unknown[42]
  {
    (210463 return(210464 'new'(210466 call _domain[225034](?) dist[210446] idxType[210448] parSafe[210451])))
  }
  function chpl__convertRuntimeTypeToValue[210472](arg dist[210474]:_any[141](?), arg parentDom[210477] :
  _domain[225034](?), param arg isNoInit[210481] :
  bool[19], arg definedConst[210485] :
  bool[19]) : _unknown[42]
  {
    (210489 return(210490 'new'(210492 call _domain[225034](?) dist[210474] parentDom[210477])))
  }
  function chpl__convertValueToRuntimeType[210497](arg dom[210500] :
  _domain[225034](?)) type : _unknown[42]
  {
    (210512 return(210514 call chpl__buildDomainRuntimeType(210518 call . dom[210500] c"distribution")(210525 call .(210522 call . dom[210500] c"_value") c"rank")(210532 call .(210529 call . dom[210500] c"_value") c"idxType")(210539 call .(210536 call . dom[210500] c"_value") c"strides")))
  }
  where {
    (395450 'is_subtype' BaseRectangularDom[443012](?)(210509 'typeof'(210506 call . dom[210500] c"_value")))
  }
  function chpl__convertValueToRuntimeType[210545](arg dom[210548] :
  _domain[225034](?)) type : _unknown[42]
  {
    (210560 return(210562 call chpl__buildDomainRuntimeType(210564 call . dom[210548] c"distribution")(210571 call .(210568 call . dom[210548] c"_value") c"idxType")(210578 call .(210575 call . dom[210548] c"_value") c"parSafe")))
  }
  where {
    (395451 'is_subtype' BaseAssociativeDom[443017](?)(210557 'typeof'(210554 call . dom[210548] c"_value")))
  }
  function chpl__convertValueToRuntimeType[210584](arg dom[210587] :
  _domain[225034](?)) type : _unknown[42]
  {
    (210599 return(210601 call chpl__buildSparseDomainRuntimeType(210603 call . dom[210587] c"distribution")(210610 call .(210607 call . dom[210587] c"_value") c"parentDom")))
  }
  where {
    (395452 'is_subtype' BaseSparseDom[443022](?)(210596 'typeof'(210593 call . dom[210587] c"_value")))
  }
  function chpl__convertValueToRuntimeType[210616](arg dom[210619] :
  _domain[225034](?)) type : _unknown[42]
  {
    (210624 call compilerError "the global domain class of each domain map implementation must be a subclass of BaseRectangularDom, BaseAssociativeDom, or Bas 0)
    (210629 return 0)
  }
  function chpl__buildSubDomainType[210633](arg dom[210636] :
  _domain[225034](?)) type : _unknown[42]
  {
    (210640 return(210642 call chpl__convertValueToRuntimeType dom[210636]))
  }
  function chpl__isTupleOfRanges[210646](arg tup[210648]:_any[141](?)) param : _unknown[42]
  {
    if(210659 call _cond_test(210654 call !(210657 call isTuple tup[210648])))
    {
      (210651 return 0)
    }
    {
      unknown i[210664] "index var" 0
      unknown tmp[210693] "maybe param" "temp"
      (210705 'move' tmp[210693](210703 call chpl_compute_low_param_loop_bound 0(210667 call -(210670 call . tup[210648] c"size") 1)))
      unknown tmp[210694] "maybe param" "temp"
      (210718 'move' tmp[210694](210716 call chpl_compute_high_param_loop_bound 0(210710 call -(210712 call . tup[210648] c"size") 1)))
      unknown tmp[210695] "maybe param" "temp"
      (210721 'move' tmp[210695] 1)
      ParamForLoop[210723]
      { i[210664] tmp[210693] tmp[210694] tmp[210695]
        {
          if(210688 call _cond_test(210680 call !(210683 call isRangeType(210687 'typeof'(210685 call tup[210648] i[210664])))))
          {
            (210677 return 0)
          }
        }
      }
      label _unused_continueLabel[210697]
      label _breakLabel[210696]
    }
    (210732 return 1)
  }
  function chpl__buildDomainExpr[210736](arg ranges[210739]:_any[141](?) ..., arg definedConst[210742]:_any[141](?)) : _unknown[42]
  {
    unknown rank[210749] "param"(210751 call . ranges[210739] c"size")
    (210755 'end of statement')
    {
      unknown i[210756] "index var" 0
      unknown tmp[210790] "maybe param" "temp"
      (210802 'move' tmp[210790](210800 call chpl_compute_low_param_loop_bound 1(210759 call - rank[210749] 1)))
      unknown tmp[210791] "maybe param" "temp"
      (210812 'move' tmp[210791](210810 call chpl_compute_high_param_loop_bound 1(210807 call - rank[210749] 1)))
      unknown tmp[210792] "maybe param" "temp"
      (210815 'move' tmp[210792] 1)
      ParamForLoop[210817]
      { i[210756] tmp[210790] tmp[210791] tmp[210792]
        if(210785 call _cond_test(210771 call !=(210776 call .(210774 call ranges[210739] 0) c"idxType")(210782 call .(210780 call ranges[210739] i[210756]) c"idxType")))
        {
          (210766 call compilerError "idxType varies among domain's dimensions")
        }
      }
      label _unused_continueLabel[210794]
      label _breakLabel[210793]
    }
    {
      unknown i[210826] "index var" 0
      unknown tmp[210858] "maybe param" "temp"
      (210870 'move' tmp[210858](210868 call chpl_compute_low_param_loop_bound 0(210829 call - rank[210749] 1)))
      unknown tmp[210859] "maybe param" "temp"
      (210880 'move' tmp[210859](210878 call chpl_compute_high_param_loop_bound 0(210875 call - rank[210749] 1)))
      unknown tmp[210860] "maybe param" "temp"
      (210883 'move' tmp[210860] 1)
      ParamForLoop[210885]
      { i[210826] tmp[210858] tmp[210859] tmp[210860]
        if(210853 call _cond_test(210841 call !=(210846 call .(210844 call ranges[210739] i[210826]) c"bounds") both[107114]))
        {
          (210836 call compilerError "one of domain's dimensions is not a bounded range")
        }
      }
      label _unused_continueLabel[210862]
      label _breakLabel[210861]
    }
    unknown d[210895](210897 call chpl__buildDomainRuntimeType defaultDist[288287] rank[210749](210903 call .(210901 call ranges[210739] 0) c"idxType")(210907 call chpl_strideUnion ranges[210739]))
    (210910 'end of statement')
    (210915 call(210912 call . d[210895] c"setIndices") ranges[210739])
    if(210922 call _cond_test definedConst[210742])
    {
      (210918 call chpl__setDomainConst d[210895])
    }
    (210927 return d[210895])
  }
  where {
    (210745 call chpl__isTupleOfRanges ranges[210739])
  }
  function chpl__setDomainConst[210932](arg dom[210935] :
  _domain[225034](?)) : _unknown[42] "private" "no return value for void"
  {
    (210939 call =(210945 call .(210942 call . dom[210935] c"_value") c"definedConst") 1)
  }
  function chpl__buildDomainExpr[210951](const arg keys[210954]:_any[141](?) ..., arg definedConst[210957]:_any[141](?)) : _unknown[42]
  {
    unknown count[210961] "param"(210963 call . keys[210954] c"size")
    (210967 'end of statement')
    unknown keyType[210969] "type variable"(210973 'typeof'(210971 call keys[210954] 0))
    {
      unknown i[210975] "index var" 0
      unknown tmp[211032] "maybe param" "temp"
      (211044 'move' tmp[211032](211042 call chpl_compute_low_param_loop_bound 1(210978 call - count[210961] 1)))
      unknown tmp[211033] "maybe param" "temp"
      (211054 'move' tmp[211033](211052 call chpl_compute_high_param_loop_bound 1(211049 call - count[210961] 1)))
      unknown tmp[211034] "maybe param" "temp"
      (211057 'move' tmp[211034] 1)
      ParamForLoop[211059]
      { i[210975] tmp[211032] tmp[211033] tmp[211034]
        if(211028 call _cond_test(211021 call != keyType[210969](211027 'typeof'(211025 call keys[210954] i[210975]))))
        {
          (210986 call compilerError(210987 call +(210989 call +(210991 call +(210993 call +(210995 call + "Associative domain element "(211000 call : i[210975] string[244])) " expected to be of type ")(211007 call : keyType[210969] string[244])) " but is of type ")(211014 call :(211019 'typeof'(211017 call keys[210954] i[210975])) string[244])))
        }
      }
      label _unused_continueLabel[211036]
      label _breakLabel[211035]
    }
    unknown D[211069](211071 call chpl__buildDomainRuntimeType defaultDist[288287] keyType[210969])
    (211075 'end of statement')
    (211082 call(211079 call . D[211069] c"requestCapacity") count[210961])
    {
      unknown i[211084] "index var" 0
      unknown tmp[211100] "maybe param" "temp"
      (211112 'move' tmp[211100](211110 call chpl_compute_low_param_loop_bound 0(211087 call - count[210961] 1)))
      unknown tmp[211101] "maybe param" "temp"
      (211122 'move' tmp[211101](211120 call chpl_compute_high_param_loop_bound 0(211117 call - count[210961] 1)))
      unknown tmp[211102] "maybe param" "temp"
      (211125 'move' tmp[211102] 1)
      ParamForLoop[211127]
      { i[211084] tmp[211100] tmp[211101] tmp[211102]
        (211093 call += D[211069](211097 call keys[210954] i[211084]))
      }
      label _unused_continueLabel[211104]
      label _breakLabel[211103]
    }
    (211136 return D[211069])
  }
  function chpl__ensureDomainExpr[211140](const  ref arg x[211143] :
  _domain[225034](?)) const ref : _unknown[42]
  {
    (211147 return x[211143])
  }
  function chpl_checkForAnonAssocDom[211151](arg dims[211153]:_any[141](?)) param : _unknown[42] "private"
  {
    {
      unknown i[211157] "index var" 0
      unknown tmp[211189] "maybe param" "temp"
      (211201 'move' tmp[211189](211199 call chpl_compute_low_param_loop_bound 0(211164 call chpl__nudgeHighBound(211161 call . dims[211153] c"size"))))
      unknown tmp[211190] "maybe param" "temp"
      (211213 'move' tmp[211190](211211 call chpl_compute_high_param_loop_bound 0(211206 call chpl__nudgeHighBound(211208 call . dims[211153] c"size"))))
      unknown tmp[211191] "maybe param" "temp"
      (211216 'move' tmp[211191] 1)
      ParamForLoop[211218]
      { i[211157] tmp[211189] tmp[211190] tmp[211191]
        if(211184 call _cond_test(211177 call !(211180 call isRange(211182 call dims[211153] i[211157]))))
        {
          (211168 return(211169 call :(211174 'typeof'(211172 call dims[211153] i[211157])) string[244]))
        }
      }
      label _unused_continueLabel[211193]
      label _breakLabel[211192]
    }
    (211227 return "")
  }
  { scopeless type
    string[244]
  }
  function chpl__ensureDomainExpr[211232](arg x[211235]:_any[141](?) ...) : _unknown[42] "compiler generated" "last resort"
  {
    unknown dimType[211240] "param"(211242 call chpl_checkForAnonAssocDom x[211235])
    (211245 'end of statement')
    if(211264 call _cond_test(211260 call != dimType[211240] ""))
    {
      (211247 call compilerError(211248 call +(211250 call + "Arrays with anonymous domains must either be defined using a list of ranges or use curly brackets.  If you were trying to crea dimType[211240]) "' indices, please use curly brackets."))
    }
    (211269 return(211271 call chpl__buildDomainExpr(211273 'expand_tuple' x[211235])(definedConst = 1)))
  }
  function chpl__ensureDomainExpr[211278](arg t[211280]:_any[141](?)) : _unknown[42] "compiler generated" "last resort" "no return value for void"
  {
    (211284 call compilerError "Domain expression was a type ('"(211288 call : t[211280] string[244]) "') rather than a domain value or range list as expected")
  }
  function chpl__isRectangularDomType[211297](arg domainType[211299]:_any[141](?)) param : _unknown[42]
  {
    unknown dom[211303] domainType[211299]
    (211306 'end of statement')
    (211307 return(211308 call &&(211311 call isDomainType domainType[211299])(211317 call(211314 call . dom[211303] c"isRectangular"))))
  }
  function chpl__isSparseDomType[211320](arg domainType[211322]:_any[141](?)) param : _unknown[42]
  {
    unknown dom[211326] domainType[211322]
    (211329 'end of statement')
    (211330 return(211335 call(211332 call . dom[211326] c"isSparse")))
  }
  function chpl__parentDomainFromDomainRuntimeType[211338](arg domainType[211340]:_any[141](?)) : _unknown[42] "no copy return" "return not owned"
  {
    unknown parentDom[211344] "no auto destroy" "no copy"(211345 'get runtime type field' domainType[211340] "parentDom")
    (211351 'end of statement')
    (211352 return(211354 call _getDomain(211356 call . parentDom[211344] c"_value")))
  }
  function chpl__domainFromArrayRuntimeType[211361](arg rtt[211363]:_any[141](?)) : _unknown[42] "no copy return" "return not owned"
  {
    unknown dom[211367] "no auto destroy" "no copy"(211368 'get runtime type field' rtt[211363] "dom")
    (211372 'end of statement')
    (211373 return(211375 call _getDomain(211377 call . dom[211367] c"_value")))
  }
  function chpl_isAssociativeDomClass[211382](arg dc[211385] :
  BaseAssociativeDom[443017](?)) param : _unknown[42]
  {
    (211389 return 1)
  }
  function chpl_isAssociativeDomClass[211393](arg dc[211395]:_any[141](?)) param : _unknown[42] "last resort"
  {
    (211398 return 0)
  }
  function errorIfNotRectangular[211402](arg dom[211405] :
  _domain[225034](?), param arg op[211408]:_any[141](?), param arg arrays[211411] =
  "") : _unknown[42] "private" "no return value for void"
  {
    if(211438 call _cond_test(211426 call ||(211432 call(211429 call . dom[211405] c"isAssociative"))(211437 call(211434 call . dom[211405] c"isSparse"))))
    {
      (211416 call compilerError "cannot apply '" op[211408] "' to associative and sparse domains" arrays[211411])
    }
    if(211462 call _cond_test(211455 call !(211461 call(211458 call . dom[211405] c"isRectangular"))))
    {
      (211444 call compilerError "cannot apply '" op[211408] "' to '"(211448 call :(211451 'typeof' dom[211405]) string[244]) "'")
    }
  }
  function chpl__checkDomainsMatch[211469](arg a[211474] :
  (211472 call chpl__buildArrayRuntimeType nil[32]), arg b[211477]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    if(211505 call _cond_test 1)
    {
      if(211500 call _cond_test(211493 call !=(211496 call . a[211474] c"_dom") b[211477]))
      {
        (211489 call boundsCheckHalt module=[222] HaltWrappers[518] "domain mismatch on return")
        (405982 'referenced modules list' HaltWrappers[518])
      }
    }
    (396803 'used modules list'(211482 'import' HaltWrappers[518]))
  }
  function chpl__checkDomainsMatch[211511](arg a[211514] :
  _iteratorRecord[165](?), arg b[211517]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    if(211548 call _cond_test 1)
    {
      unknown tmp[211525] a[211514]
      (211528 'end of statement')
      if(211543 call _cond_test(211536 call !=(211539 call . tmp[211525] c"_dom") b[211517]))
      {
        (211534 call boundsCheckHalt module=[222] HaltWrappers[518] "domain mismatch on return")
        (405989 'referenced modules list' HaltWrappers[518])
      }
    }
    (396805 'used modules list'(211522 'import' HaltWrappers[518]))
  }
  function chpl_countDomHelp[211554](arg dom[211556]:_any[141](?), arg counts[211558]:_any[141](?)) : _unknown[42]
  {
    unknown ranges[211562](211567 call(211564 call . dom[211556] c"dims"))
    (211569 'end of statement')
    {
      unknown i[211570] "index var" 0
      unknown tmp[211596] "maybe param" "temp"
      (211608 'move' tmp[211596](211606 call chpl_compute_low_param_loop_bound 0(211573 call -(211576 call . dom[211556] c"rank") 1)))
      unknown tmp[211597] "maybe param" "temp"
      (211621 'move' tmp[211597](211619 call chpl_compute_high_param_loop_bound 0(211613 call -(211615 call . dom[211556] c"rank") 1)))
      unknown tmp[211598] "maybe param" "temp"
      (211624 'move' tmp[211598] 1)
      ParamForLoop[211626]
      { i[211570] tmp[211596] tmp[211597] tmp[211598]
        (211582 call =(211585 call ranges[211562] i[211570])(211587 call #(211590 call ranges[211562] i[211570])(211593 call counts[211558] i[211570])))
      }
      label _unused_continueLabel[211600]
      label _breakLabel[211599]
    }
    (211635 return(211636 'new'(211638 call _domain[225034](?)(211640 call . dom[211556] c"distribution")(211644 call . dom[211556] c"rank")(211648 call . dom[211556] c"idxType")(211652 call . dom[211556] c"strides") ranges[211562])))
  }
  function #[211658](arg dom[211661] :
  _domain[225034](?), arg counts[211665] :
  integral[159](?)) : _unknown[42] "operator"
  {
    (211670 call errorIfNotRectangular dom[211661] "#" " and arrays")
    if(211691 call _cond_test(211684 call !=(211687 call . dom[211661] c"rank") 1))
    {
      (211679 call compilerError "cannot apply '#' with an integer to multi-dimensional domains and arrays")
    }
    (211696 return(211698 call chpl_countDomHelp dom[211661](211702 call _build_tuple counts[211665])))
  }
  function #[211706](arg dom[211709] :
  _domain[225034](?), arg counts[211713] :
  _tuple[246](?)) : _unknown[42] "operator"
  {
    (211718 call errorIfNotRectangular dom[211709] "#" " and arrays")
    if(211738 call _cond_test(211728 call !=(211731 call . counts[211713] c"size")(211735 call . dom[211709] c"rank")))
    {
      (211723 call compilerError "rank mismatch in '#'")
    }
    (211743 return(211745 call chpl_countDomHelp dom[211709] counts[211713]))
  }
  function #[211750](arg dom[211753] :
  _domain[225034](?), arg counts[211756]:_any[141](?)) : _unknown[42] "last resort" "operator" "no return value for void"
  {
    (211760 call compilerError "cannot apply '#' to '"(211762 call :(211765 'typeof' dom[211753]) string[244]) "' using count(s) of type "(211770 call :(211773 'typeof' counts[211756]) string[244]))
  }
  function noRDadds[211777](arg t[211779]:_any[141](?)) param : _unknown[42] "private"
  {
    (211782 return(211783 call ||(211785 call ||(211787 call ||(211790 call isPrimitive t[211779])(211793 call isRange t[211779]))(211796 call isTuple t[211779]))(211799 call isEnum t[211779])))
  }
  function +[211803](arg d[211806] :
  _domain[225034](?), arg i[211811] :
  unknown t[211809]) : _unknown[42] "operator" "no return value for void"
  {
    (211826 call compilerError "addition of a rectangular domain and "(211830 call : t[211809] string[244]) " is currently not supported")
  }
  where {
    (211814 call &&(211820 call(211817 call . d[211806] c"isRectangular"))(211822 call noRDadds t[211809]))
  }
  function +[211840](arg i[211844] :
  unknown t[211842], arg d[211848] :
  _domain[225034](?)) : _unknown[42] "operator" "no return value for void"
  {
    (211863 call compilerError "addition of "(211867 call : t[211842] string[244]) " and a rectangular domain is currently not supported")
  }
  where {
    (211851 call &&(211857 call(211854 call . d[211848] c"isRectangular"))(211859 call noRDadds t[211842]))
  }
  function -[211877](arg d[211880] :
  _domain[225034](?), arg i[211885] :
  unknown t[211883]) : _unknown[42] "operator" "no return value for void"
  {
    (211900 call compilerError "subtraction of a rectangular domain and "(211904 call : t[211883] string[244]) " is currently not supported")
  }
  where {
    (211888 call &&(211894 call(211891 call . d[211880] c"isRectangular"))(211896 call noRDadds t[211883]))
  }
  function +[211912](in arg d[211915] :
  _domain[225034](?), arg i[211921] :
  (211918 call chpl__buildIndexType d[211915])) : _unknown[42] "operator" "@unstable"
  {
    (211936 call(211933 call . d[211915] c"add") i[211921])
    (211938 return d[211915])
  }
  where {
    (211930 call(211927 call . d[211915] c"isIrregular"))
  }
  function +[211943](arg i[211945]:_any[141](?), in arg d[211948] :
  _domain[225034](?)) : _unknown[42] "operator" "@unstable"
  {
    (211970 call(211967 call . d[211948] c"add") i[211945])
    (211972 return d[211948])
  }
  where {
    (211951 call &&(395453 'is_subtype'(211957 call chpl__buildIndexType d[211948])(211956 'typeof' i[211945]))(211964 call(211961 call . d[211948] c"isIrregular")))
  }
  function +[211977](in arg d1[211980] :
  _domain[225034](?), arg d2[211984] :
  _domain[225034](?)) : _unknown[42] "operator" "@unstable"
  {
    {
      unknown _indexOfInterest[212018] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[212019] "expr temp" "temp"
      (212028 'move' _iterator[212019](212026 call _getIterator d2[211984]))
      Defer
      {
        {
          (212043 call _freeIterator _iterator[212019])
        }
      }
      { scopeless type
        (212033 'move' _indexOfInterest[212018](212030 call iteratorIndex _iterator[212019]))
      }
      ForLoop[212020]
      {
        unknown e[212008] "index var" "insert auto destroy"
        (212038 'move' e[212008] _indexOfInterest[212018])
        (212015 call(212012 call . d1[211980] c"add") e[212008])
        label _continueLabel[212023]
        _indexOfInterest[212018]
        _iterator[212019]
      }
      label _breakLabel[212024]
    }
    (212050 return d1[211980])
  }
  where {
    (211987 call &&(211989 call &&(211991 call ==(211994 'typeof' d1[211980])(211996 'typeof' d2[211984]))(212001 call(211998 call . d1[211980] c"isIrregular")))(212006 call(212003 call . d2[211984] c"isIrregular")))
  }
  function +[212055](arg d1[212058] :
  _domain[225034](?), arg d2[212062] :
  _domain[225034](?)) : _unknown[42] "operator" "no return value for void"
  {
    if(212090 call _cond_test(212078 call ||(212084 call(212081 call . d1[212058] c"isRectangular"))(212089 call(212086 call . d2[212062] c"isRectangular"))))
    {
      (212067 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (212073 call compilerError "Cannot add indices to this domain type")
    }
  }
  function +=[212098](ref arg D[212101] :
  _domain[225034](?), arg idx[212104]:_any[141](?)) : _unknown[42] "assignop" "inline" "operator" "@unstable" "no return value for void"
  {
    (212111 call(212108 call . D[212101] c"add") idx[212104])
  }
  function +=[212115](ref arg D[212118] :
  _domain[225034](?), param arg idx[212121]:_any[141](?)) : _unknown[42] "assignop" "inline" "operator" "@unstable" "no return value for void"
  {
    (212128 call(212125 call . D[212118] c"add") idx[212121])
  }
  function -[212132](in arg d[212135] :
  _domain[225034](?), arg i[212141] :
  (212138 call chpl__buildIndexType d[212135])) : _unknown[42] "operator" "@unstable"
  {
    (212154 call(212151 call . d[212135] c"remove") i[212141])
    (212156 return d[212135])
  }
  where {
    (212148 call(212145 call . d[212135] c"isIrregular"))
  }
  function -[212161](in arg d1[212164] :
  _domain[225034](?), arg d2[212168] :
  _domain[225034](?)) : _unknown[42] "operator"
  {
    {
      unknown _indexOfInterest[212195] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[212196] "expr temp" "temp"
      (212205 'move' _iterator[212196](212203 call _getIterator d2[212168]))
      Defer
      {
        {
          (212220 call _freeIterator _iterator[212196])
        }
      }
      { scopeless type
        (212210 'move' _indexOfInterest[212195](212207 call iteratorIndex _iterator[212196]))
      }
      ForLoop[212197]
      {
        unknown e[212185] "index var" "insert auto destroy"
        (212215 'move' e[212185] _indexOfInterest[212195])
        (212192 call(212189 call . d1[212164] c"remove") e[212185])
        label _continueLabel[212200]
        _indexOfInterest[212195]
        _iterator[212196]
      }
      label _breakLabel[212201]
    }
    (212227 return d1[212164])
  }
  where {
    (212171 call &&(212173 call ==(212176 'typeof' d1[212164])(212178 'typeof' d2[212168]))(212183 call(212180 call . d1[212164] c"isSparse")))
  }
  function -[212232](arg d1[212235] :
  _domain[225034](?), arg d2[212239] :
  _domain[225034](?)) : _unknown[42] "operator" "no return value for void"
  {
    if(212267 call _cond_test(212255 call ||(212261 call(212258 call . d1[212235] c"isRectangular"))(212266 call(212263 call . d2[212239] c"isRectangular"))))
    {
      (212244 call compilerError "Cannot remove indices from a rectangular domain")
    }
    {
      (212250 call compilerError "Cannot remove indices from this domain type")
    }
  }
  function -=[212275](ref arg D[212278] :
  _domain[225034](?), arg idx[212281]:_any[141](?)) : _unknown[42] "assignop" "inline" "operator" "@unstable" "no return value for void"
  {
    (212288 call(212285 call . D[212278] c"remove") idx[212281])
  }
  function -=[212292](ref arg D[212295] :
  _domain[225034](?), param arg idx[212298]:_any[141](?)) : _unknown[42] "assignop" "inline" "operator" "@unstable" "no return value for void"
  {
    (212305 call(212302 call . D[212295] c"remove") idx[212298])
  }
  function ==[212309](arg d1[212312] :
  _domain[225034](?), arg d2[212316] :
  _domain[225034](?)) : _unknown[42] "inline" "operator"
  {
    if(212450 call _cond_test(212434 call !=(212440 call .(212437 call . d1[212312] c"_value") c"rank")(212447 call .(212444 call . d2[212316] c"_value") c"rank")))
    {
      (212333 return 0)
    }
    {
      if(212430 call _cond_test(212420 call ==(212423 call . d1[212312] c"_value")(212427 call . d2[212316] c"_value")))
      {
        (212336 return 1)
      }
      {
        {
          unknown i[212339] "index var" 0
          unknown tmp[212376] "maybe param" "temp"
          (212388 'move' tmp[212376](212386 call chpl_compute_low_param_loop_bound 0(212342 call -(212348 call .(212345 call . d1[212312] c"_value") c"rank") 1)))
          unknown tmp[212377] "maybe param" "temp"
          (212404 'move' tmp[212377](212402 call chpl_compute_high_param_loop_bound 0(212393 call -(212395 call .(212397 call . d1[212312] c"_value") c"rank") 1)))
          unknown tmp[212378] "maybe param" "temp"
          (212407 'move' tmp[212378] 1)
          ParamForLoop[212409]
          { i[212339] tmp[212376] tmp[212377] tmp[212378]
            if(212371 call _cond_test(212357 call !=(212363 call(212360 call . d1[212312] c"dim") i[212339])(212369 call(212366 call . d2[212316] c"dim") i[212339])))
            {
              (212354 return 0)
            }
          }
          label _unused_continueLabel[212380]
          label _breakLabel[212379]
        }
        (212418 return 1)
      }
    }
  }
  where {
    (212319 call &&(212325 call(212322 call . d1[212312] c"isRectangular"))(212330 call(212327 call . d2[212316] c"isRectangular")))
  }
  function !=[212458](arg d1[212461] :
  _domain[225034](?), arg d2[212465] :
  _domain[225034](?)) : _unknown[42] "inline" "operator"
  {
    (212481 return(212482 call !(212484 call == d1[212461] d2[212465])))
  }
  where {
    (212468 call &&(212474 call(212471 call . d1[212461] c"isRectangular"))(212479 call(212476 call . d2[212465] c"isRectangular")))
  }
  function ==[212491](arg d1[212494] :
  _domain[225034](?), arg d2[212498] :
  _domain[225034](?)) : _unknown[42] "inline" "operator"
  {
    if(212527 call _cond_test(212517 call ==(212520 call . d1[212494] c"_value")(212524 call . d2[212498] c"_value")))
    {
      (212514 return 1)
    }
    if(212549 call _cond_test(212535 call !=(212541 call(212538 call . d1[212494] c"sizeAs") uint(64)[86])(212547 call(212544 call . d2[212498] c"sizeAs") uint(64)[86])))
    {
      (212532 return 0)
    }
    {
      unknown _indexOfInterest[212573] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[212574] "expr temp" "temp"
      (212583 'move' _iterator[212574](212581 call _getIterator d1[212494]))
      Defer
      {
        {
          (212598 call _freeIterator _iterator[212574])
        }
      }
      { scopeless type
        (212588 'move' _indexOfInterest[212573](212585 call iteratorIndex _iterator[212574]))
      }
      ForLoop[212575]
      {
        unknown idx[212554] "index var" "insert auto destroy"
        (212593 'move' idx[212554] _indexOfInterest[212573])
        if(212568 call _cond_test(212560 call !(212566 call(212563 call . d2[212498] c"contains") idx[212554])))
        {
          (212557 return 0)
        }
        label _continueLabel[212578]
        _indexOfInterest[212573]
        _iterator[212574]
      }
      label _breakLabel[212579]
    }
    (212605 return 1)
  }
  where {
    (212501 call &&(212507 call(212504 call . d1[212494] c"isAssociative"))(212512 call(212509 call . d2[212498] c"isAssociative")))
  }
  function !=[212610](arg d1[212613] :
  _domain[225034](?), arg d2[212617] :
  _domain[225034](?)) : _unknown[42] "inline" "operator"
  {
    (212633 return(212634 call !(212636 call == d1[212613] d2[212617])))
  }
  where {
    (212620 call &&(212626 call(212623 call . d1[212613] c"isAssociative"))(212631 call(212628 call . d2[212617] c"isAssociative")))
  }
  function ==[212643](arg d1[212646] :
  _domain[225034](?), arg d2[212650] :
  _domain[225034](?)) : _unknown[42] "inline" "operator"
  {
    if(212679 call _cond_test(212669 call ==(212672 call . d1[212646] c"_value")(212676 call . d2[212650] c"_value")))
    {
      (212666 return 1)
    }
    if(212701 call _cond_test(212687 call !=(212693 call(212690 call . d1[212646] c"sizeAs") uint(64)[86])(212699 call(212696 call . d2[212650] c"sizeAs") uint(64)[86])))
    {
      (212684 return 0)
    }
    if(212725 call _cond_test(212709 call !=(212715 call .(212712 call . d1[212646] c"_value") c"parentDom")(212722 call .(212719 call . d2[212650] c"_value") c"parentDom")))
    {
      (212706 return 0)
    }
    {
      unknown _indexOfInterest[212749] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[212750] "expr temp" "temp"
      (212759 'move' _iterator[212750](212757 call _getIterator d1[212646]))
      Defer
      {
        {
          (212774 call _freeIterator _iterator[212750])
        }
      }
      { scopeless type
        (212764 'move' _indexOfInterest[212749](212761 call iteratorIndex _iterator[212750]))
      }
      ForLoop[212751]
      {
        unknown idx[212730] "index var" "insert auto destroy"
        (212769 'move' idx[212730] _indexOfInterest[212749])
        if(212744 call _cond_test(212736 call !(212742 call(212739 call . d2[212650] c"contains") idx[212730])))
        {
          (212733 return 0)
        }
        label _continueLabel[212754]
        _indexOfInterest[212749]
        _iterator[212750]
      }
      label _breakLabel[212755]
    }
    (212781 return 1)
  }
  where {
    (212653 call &&(212659 call(212656 call . d1[212646] c"isSparse"))(212664 call(212661 call . d2[212650] c"isSparse")))
  }
  function !=[212786](arg d1[212789] :
  _domain[225034](?), arg d2[212793] :
  _domain[225034](?)) : _unknown[42] "inline" "operator"
  {
    (212809 return(212810 call !(212812 call == d1[212789] d2[212793])))
  }
  where {
    (212796 call &&(212802 call(212799 call . d1[212789] c"isSparse"))(212807 call(212804 call . d2[212793] c"isSparse")))
  }
  function cmpError[212819](arg d1[212821]:_any[141](?), arg d2[212823]:_any[141](?)) : _unknown[42] "private" "no return value for void"
  {
    if(212840 call _cond_test(212839 call(212836 call . d1[212821] c"isRectangular")))
    {
      (212827 call compilerError "comparing a rectangular domain against" " an associative or sparse domain is not currently supported")
    }
    if(212859 call _cond_test(212858 call(212855 call . d1[212821] c"isAssociative")))
    {
      (212846 call compilerError "comparing an associative domain against" " a rectangular or sparse domain is not currently supported")
    }
    if(212878 call _cond_test(212877 call(212874 call . d1[212821] c"isSparse")))
    {
      (212865 call compilerError "comparing a sparse domain against" " a rectangular or associative domain is not currently supported")
    }
    (212884 call compilerError "comparing '"(212888 call :(212891 'typeof' d1[212821]) string[244]) "' against '"(212896 call :(212899 'typeof' d2[212823]) string[244]) "' is not currently supported")
  }
  function ==[212906](arg d1[212909] :
  _domain[225034](?), arg d2[212913] :
  _domain[225034](?)) : _unknown[42] "inline" "operator" "no return value for void"
  {
    (212918 call cmpError d1[212909] d2[212913])
  }
  function !=[212923](arg d1[212926] :
  _domain[225034](?), arg d2[212930] :
  _domain[225034](?)) : _unknown[42] "inline" "operator" "no return value for void"
  {
    (212935 call cmpError d1[212926] d2[212930])
  }
  function chpl_sameDomainKind[212940](arg d1[212943] :
  _domain[225034](?), arg d2[212947] :
  _domain[225034](?)) param : _unknown[42]
  {
    (212951 return(212952 call ||(212954 call ||(212956 call &&(212962 call(212959 call . d1[212943] c"isRectangular"))(212967 call(212964 call . d2[212947] c"isRectangular")))(212968 call &&(212974 call(212971 call . d1[212943] c"isAssociative"))(212979 call(212976 call . d2[212947] c"isAssociative"))))(212980 call &&(212986 call(212983 call . d1[212943] c"isSparse"))(212991 call(212988 call . d2[212947] c"isSparse")))))
  }
  function canBeIteratedOver[212994](const  ref arg arg[212996]:_any[141](?)) param : _unknown[42] "private"
  {
    (213002 return(213003 call ||(395454 'is_subtype' _iteratorRecord[165](?)(213008 'typeof' arg[212996]))(213011 call canResolveMethod arg[212996] "these")))
    (396807 'used modules list'(213000 'use' Reflection[1804]))
  }
  function domainDescription[213018](const  ref arg d[213020]:_any[141](?)) param : _unknown[42] "private"
  {
    (213023 return(213072 IfExpr (213028 call(213025 call . d[213020] c"isRectangular")) then
    { scopeless
      (213029 call +(213031 call + "a rectangular "(213036 call :(213039 call . d[213020] c"rank") string[244])) "-dim domain")
    } else
    { scopeless(213069 IfExpr (213050 call(213047 call . d[213020] c"isSparse")) then
      { scopeless
        (213051 call +(213053 call + "a sparse "(213058 call :(213061 call . d[213020] c"rank") string[244])) "-dim domain")
      } else
      { scopeless
        "an associative domain"
      } )
    } ))
  }
  function -[213077](arg a[213080] :
  _domain[225034](?), arg b[213084] :
  _domain[225034](?)) : _unknown[42] "operator" "@unstable"
  {
    unknown newDom[213102](213104 'typeof' a[213080])
    (213106 'end of statement')
    {
      unknown tmp[213153] "temp"(213154 'task_get_serial')
      if(213150 call _cond_test(213141 call !(213147 call .(213144 call . newDom[213102] c"_value") c"parSafe")))
      {
        (213156 'task_set_serial' 1)
      }
      Defer
      {
        {
          (213160 'task_set_serial' tmp[213153])
        }
      }
      Forall[213138] {
        induction variables:
          
          unknown e[213107] "index var" "insert auto destroy"
        iterated expressions:
          a[213080]
        shadow variables:
          newDom[213112] 'ref' intent outer var newDom[213102]
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          if(213131 call _cond_test(213123 call !(213129 call(213126 call . b[213084] c"contains") e[213107])))
          {
            (213120 call(213117 call . newDom[213112] c"add") e[213107])
          }
        }
      }
    }
    (213164 return newDom[213102])
  }
  where {
    (213087 call &&(213089 call ==(213092 'typeof' a[213080])(213094 'typeof' b[213084]))(213099 call(213096 call . a[213080] c"isAssociative")))
  }
  function -=[213169](ref arg a[213172] :
  _domain[225034](?), arg b[213176] :
  _domain[225034](?)) : _unknown[42] "assignop" "operator" "@unstable" "no return value for void"
  {
    {
      unknown _indexOfInterest[213214] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[213215] "expr temp" "temp"
      (213224 'move' _iterator[213215](213222 call _getIterator b[213176]))
      Defer
      {
        {
          (213239 call _freeIterator _iterator[213215])
        }
      }
      { scopeless type
        (213229 'move' _indexOfInterest[213214](213226 call iteratorIndex _iterator[213215]))
      }
      ForLoop[213216]
      {
        unknown e[213193] "index var" "insert auto destroy"
        (213234 'move' e[213193] _indexOfInterest[213214])
        if(213209 call _cond_test(213207 call(213204 call . a[213172] c"contains") e[213193]))
        {
          (213200 call(213197 call . a[213172] c"remove") e[213193])
        }
        label _continueLabel[213219]
        _indexOfInterest[213214]
        _iterator[213215]
      }
      label _breakLabel[213220]
    }
  }
  where {
    (213179 call &&(213181 call ==(213184 'typeof' a[213172])(213186 'typeof' b[213176]))(213191 call(213188 call . a[213172] c"isAssociative")))
  }
  function |[213249](arg a[213252] :
  _domain[225034](?), arg b[213256] :
  _domain[225034](?)) : _unknown[42] "operator" "@unstable"
  {
    (213273 return(213274 call + a[213252] b[213256]))
  }
  where {
    (213259 call &&(213261 call ==(213264 'typeof' a[213252])(213266 'typeof' b[213256]))(213271 call(213268 call . a[213252] c"isAssociative")))
  }
  function |=[213281](ref arg a[213284] :
  _domain[225034](?), arg b[213288] :
  _domain[225034](?)) : _unknown[42] "assignop" "operator" "@unstable" "no return value for void"
  {
    {
      unknown _indexOfInterest[213315] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[213316] "expr temp" "temp"
      (213325 'move' _iterator[213316](213323 call _getIterator b[213288]))
      Defer
      {
        {
          (213340 call _freeIterator _iterator[213316])
        }
      }
      { scopeless type
        (213330 'move' _indexOfInterest[213315](213327 call iteratorIndex _iterator[213316]))
      }
      ForLoop[213317]
      {
        unknown e[213305] "index var" "insert auto destroy"
        (213335 'move' e[213305] _indexOfInterest[213315])
        (213312 call(213309 call . a[213284] c"add") e[213305])
        label _continueLabel[213320]
        _indexOfInterest[213315]
        _iterator[213316]
      }
      label _breakLabel[213321]
    }
  }
  where {
    (213291 call &&(213293 call ==(213296 'typeof' a[213284])(213298 'typeof' b[213288]))(213303 call(213300 call . a[213284] c"isAssociative")))
  }
  function |=[213350](arg a[213353] :
  _domain[225034](?), arg b[213357] :
  _domain[225034](?)) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    (213367 call compilerError "cannot invoke '|=' on a rectangular domain")
  }
  where {
    (213364 call(213361 call . a[213353] c"isRectangular"))
  }
  function +=[213374](ref arg a[213377] :
  _domain[225034](?), arg b[213381] :
  _domain[225034](?)) : _unknown[42] "assignop" "operator" "@unstable" "no return value for void"
  {
    (213398 call |= a[213377] b[213381])
  }
  where {
    (213384 call &&(213386 call ==(213389 'typeof' a[213377])(213391 'typeof' b[213381]))(213396 call(213393 call . a[213377] c"isAssociative")))
  }
  function &[213405](arg a[213408] :
  _domain[225034](?), arg b[213412] :
  _domain[225034](?)) : _unknown[42] "operator" "@unstable"
  {
    unknown newDom[213430](213432 'typeof' a[213408])
    (213434 'end of statement')
    {
      unknown tmp[213477] "temp"(213478 'task_get_serial')
      if(213474 call _cond_test(213465 call !(213471 call .(213468 call . newDom[213430] c"_value") c"parSafe")))
      {
        (213480 'task_set_serial' 1)
      }
      Defer
      {
        {
          (213484 'task_set_serial' tmp[213477])
        }
      }
      Forall[213462] {
        induction variables:
          
          unknown k[213435] "index var" "insert auto destroy"
        iterated expressions:
          a[213408]
        shadow variables:
          newDom[213440] 'ref' intent outer var newDom[213430]
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          if(213455 call _cond_test(213453 call(213450 call . b[213412] c"contains") k[213435]))
          {
            (213444 call += newDom[213440] k[213435])
          }
        }
      }
    }
    (213488 return newDom[213430])
  }
  where {
    (213415 call &&(213417 call ==(213420 'typeof' a[213408])(213422 'typeof' b[213412]))(213427 call(213424 call . a[213408] c"isAssociative")))
  }
  function &=[213493](ref arg a[213496] :
  _domain[225034](?), arg b[213500] :
  _domain[225034](?)) : _unknown[42] "assignop" "operator" "@unstable" "no return value for void"
  {
    unknown removeSet[213518](213520 call chpl__buildDomainRuntimeType defaultDist[288287](213523 call . a[213496] c"idxType"))
    (213527 'end of statement')
    {
      unknown _indexOfInterest[213549] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[213550] "expr temp" "temp"
      (213559 'move' _iterator[213550](213557 call _getIterator a[213496]))
      Defer
      {
        {
          (213574 call _freeIterator _iterator[213550])
        }
      }
      { scopeless type
        (213564 'move' _indexOfInterest[213549](213561 call iteratorIndex _iterator[213550]))
      }
      ForLoop[213551]
      {
        unknown e[213528] "index var" "insert auto destroy"
        (213569 'move' e[213528] _indexOfInterest[213549])
        if(213544 call _cond_test(213536 call !(213542 call(213539 call . b[213500] c"contains") e[213528])))
        {
          (213531 call += removeSet[213518] e[213528])
        }
        label _continueLabel[213554]
        _indexOfInterest[213549]
        _iterator[213550]
      }
      label _breakLabel[213555]
    }
    {
      unknown _indexOfInterest[213591] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[213592] "expr temp" "temp"
      (213601 'move' _iterator[213592](213599 call _getIterator removeSet[213518]))
      Defer
      {
        {
          (213616 call _freeIterator _iterator[213592])
        }
      }
      { scopeless type
        (213606 'move' _indexOfInterest[213591](213603 call iteratorIndex _iterator[213592]))
      }
      ForLoop[213593]
      {
        unknown e[213581] "index var" "insert auto destroy"
        (213611 'move' e[213581] _indexOfInterest[213591])
        (213588 call(213585 call . a[213496] c"remove") e[213581])
        label _continueLabel[213596]
        _indexOfInterest[213591]
        _iterator[213592]
      }
      label _breakLabel[213597]
    }
  }
  where {
    (213503 call &&(213505 call ==(213508 'typeof' a[213496])(213510 'typeof' b[213500]))(213515 call(213512 call . a[213496] c"isAssociative")))
  }
  function &=[213626](arg a[213629] :
  _domain[225034](?), arg b[213633] :
  _domain[225034](?)) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    (213643 call compilerError "cannot invoke '&=' on a rectangular domain")
  }
  where {
    (213640 call(213637 call . a[213629] c"isRectangular"))
  }
  function ^[213650](arg a[213653] :
  _domain[225034](?), arg b[213657] :
  _domain[225034](?)) : _unknown[42] "operator" "@unstable"
  {
    unknown newDom[213675](213677 'typeof' a[213653])
    (213679 'end of statement')
    {
      unknown tmp[213761] "temp"(213762 'task_get_serial')
      if(213758 call _cond_test(213749 call !(213755 call .(213752 call . newDom[213675] c"_value") c"parSafe")))
      {
        (213764 'task_set_serial' 1)
      }
      Defer
      {
        {
          (213768 'task_set_serial' tmp[213761])
        }
      }
      {
        Forall[213712] {
          induction variables:
            
            unknown k[213681] "index var" "insert auto destroy"
          iterated expressions:
            a[213653]
          shadow variables:
            newDom[213686] 'ref' intent outer var newDom[213675]
              init block
              {
              }
              deinit block
              {
              }
          other variables
            forall body
          {
            if(213705 call _cond_test(213697 call !(213703 call(213700 call . b[213657] c"contains") k[213681])))
            {
              (213694 call(213691 call . newDom[213686] c"add") k[213681])
            }
          }
        }
        Forall[213746] {
          induction variables:
            
            unknown k[213715] "index var" "insert auto destroy"
          iterated expressions:
            b[213657]
          shadow variables:
            newDom[213720] 'ref' intent outer var newDom[213675]
              init block
              {
              }
              deinit block
              {
              }
          other variables
            forall body
          {
            if(213739 call _cond_test(213731 call !(213737 call(213734 call . a[213653] c"contains") k[213715])))
            {
              (213728 call(213725 call . newDom[213720] c"add") k[213715])
            }
          }
        }
      }
    }
    (213772 return newDom[213675])
  }
  where {
    (213660 call &&(213662 call ==(213665 'typeof' a[213653])(213667 'typeof' b[213657]))(213672 call(213669 call . a[213653] c"isAssociative")))
  }
  function ^=[213777](ref arg a[213780] :
  _domain[225034](?), arg b[213784] :
  _domain[225034](?)) : _unknown[42] "assignop" "operator" "@unstable" "no return value for void"
  {
    {
      unknown _indexOfInterest[213830] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[213831] "expr temp" "temp"
      (213840 'move' _iterator[213831](213838 call _getIterator b[213784]))
      Defer
      {
        {
          (213855 call _freeIterator _iterator[213831])
        }
      }
      { scopeless type
        (213845 'move' _indexOfInterest[213830](213842 call iteratorIndex _iterator[213831]))
      }
      ForLoop[213832]
      {
        unknown e[213801] "index var" "insert auto destroy"
        (213850 'move' e[213801] _indexOfInterest[213830])
        if(213824 call _cond_test(213822 call(213819 call . a[213780] c"contains") e[213801]))
        {
          (213808 call(213805 call . a[213780] c"remove") e[213801])
        }
        {
          (213815 call(213812 call . a[213780] c"add") e[213801])
        }
        label _continueLabel[213835]
        _indexOfInterest[213830]
        _iterator[213831]
      }
      label _breakLabel[213836]
    }
  }
  where {
    (213787 call &&(213789 call ==(213792 'typeof' a[213780])(213794 'typeof' b[213784]))(213799 call(213796 call . a[213780] c"isAssociative")))
  }
  function ^=[213865](arg a[213868] :
  _domain[225034](?), arg b[213872] :
  _domain[225034](?)) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    (213882 call compilerError "cannot invoke '^=' on a rectangular domain")
  }
  where {
    (213879 call(213876 call . a[213868] c"isRectangular"))
  }
  function +=[213889](ref arg sd[213892] :
  _domain[225034](?), arg inds[213901] :
  (213899 call chpl__buildArrayRuntimeType nil[32](213896 call chpl__buildIndexType sd[213892]))) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    if(213921 call _cond_test(213912 call ==(213918 call(213915 call . inds[213901] c"sizeAs") int(64)[10]) 0))
    {
      (213910 return _void[46])
    }
    (213935 call(213932 call .(213927 call . sd[213892] c"_value") c"dsiBulkAdd") inds[213901])
  }
  where {
    (213908 call(213905 call . sd[213892] c"isSparse"))
  }
  function +=[213940](ref arg sd[213943] :
  _domain[225034](?), arg d[213947] :
  _domain[225034](?)) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    if(213991 call _cond_test(213982 call ==(213988 call(213985 call . d[213947] c"sizeAs") int(64)[10]) 0))
    {
      (213980 return _void[46])
    }
    const indCount[213997] "const"(214002 call(213999 call . d[213947] c"sizeAs") int(64)[10])
    (214005 'end of statement')
    unknown arr[214007](214023 call chpl__buildArrayRuntimeType(214018 call chpl__ensureDomainExpr(214016 call chpl__buildDomainExpr(214009 call #(214012 call chpl_build_low_bounded_range 0) indCount[213997]) 1))(214020 call chpl__buildIndexType sd[213943]))
    (214026 'end of statement')
    {
      unknown _indexOfInterest[214047] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[214048] "expr temp" "temp"
      (214064 'move' _iterator[214048](214039 call _build_tuple(214057 call _getIterator d[213947])(214062 call _getIterator(214060 call chpl_build_low_bounded_range 0))))
      Defer
      {
        {
          (214092 call _freeIterator _iterator[214048])
        }
      }
      { scopeless type
        (214069 'move' _indexOfInterest[214047](214066 call iteratorIndex _iterator[214048]))
      }
      ForLoop[214049]
      {
        (214074 call _check_tuple_var_decl _indexOfInterest[214047] 2)
        unknown i[214028] "index var" "insert auto destroy"
        (214081 'move' i[214028](214078 call _indexOfInterest[214047] 0))
        unknown j[214030] "index var" "insert auto destroy"
        (214087 'move' j[214030](214084 call _indexOfInterest[214047] 1))
        (214040 call =(214043 call arr[214007] j[214030]) i[214028])
        label _continueLabel[214052]
        _indexOfInterest[214047]
        _iterator[214048]
      }
      label _breakLabel[214053]
    }
    unknown rowSorted[214100] 0
    (214103 'end of statement')
    (214113 call(214110 call .(214105 call . sd[213943] c"_value") c"dsiBulkAddNoPreserveInds") arr[214007] rowSorted[214100] 1)
  }
  where {
    (213950 call &&(213952 call &&(213958 call(213955 call . sd[213943] c"isSparse"))(213959 call ==(213962 call . d[213947] c"rank")(213966 call . sd[213943] c"rank")))(213969 call ==(213972 call . sd[213943] c"idxType")(213976 call . d[213947] c"idxType")))
  }
  function -=[214120](ref arg sd[214123] :
  _domain[225034](?), arg inds[214132] :
  (214130 call chpl__buildArrayRuntimeType nil[32](214127 call chpl__buildIndexType sd[214123]))) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    {
      unknown _indexOfInterest[214149] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[214150] "expr temp" "temp"
      (214159 'move' _iterator[214150](214157 call _getIterator inds[214132]))
      Defer
      {
        {
          (214174 call _freeIterator _iterator[214150])
        }
      }
      { scopeless type
        (214164 'move' _indexOfInterest[214149](214161 call iteratorIndex _iterator[214150]))
      }
      ForLoop[214151]
      {
        unknown ind[214141] "index var" "insert auto destroy"
        (214169 'move' ind[214141] _indexOfInterest[214149])
        (214144 call -= sd[214123] ind[214141])
        label _continueLabel[214154]
        _indexOfInterest[214149]
        _iterator[214150]
      }
      label _breakLabel[214155]
    }
  }
  where {
    (214139 call(214136 call . sd[214123] c"isSparse"))
  }
  function -=[214184](ref arg sd[214187] :
  _domain[225034](?), arg d[214191] :
  _domain[225034](?)) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    {
      unknown _indexOfInterest[214232] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[214233] "expr temp" "temp"
      (214242 'move' _iterator[214233](214240 call _getIterator d[214191]))
      Defer
      {
        {
          (214257 call _freeIterator _iterator[214233])
        }
      }
      { scopeless type
        (214247 'move' _indexOfInterest[214232](214244 call iteratorIndex _iterator[214233]))
      }
      ForLoop[214234]
      {
        unknown ind[214224] "index var" "insert auto destroy"
        (214252 'move' ind[214224] _indexOfInterest[214232])
        (214227 call -= sd[214187] ind[214224])
        label _continueLabel[214237]
        _indexOfInterest[214232]
        _iterator[214233]
      }
      label _breakLabel[214238]
    }
  }
  where {
    (214194 call &&(214196 call &&(214202 call(214199 call . sd[214187] c"isSparse"))(214203 call ==(214206 call . d[214191] c"rank")(214210 call . sd[214187] c"rank")))(214213 call ==(214216 call . sd[214187] c"idxType")(214220 call . d[214191] c"idxType")))
  }
  function =[214267](ref arg a[214270] :
  _domain[225034](?), arg b[214274] :
  _domain[225034](?)) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    if(214294 call _cond_test(214284 call !=(214287 call . a[214270] c"rank")(214291 call . b[214274] c"rank")))
    {
      (214279 call compilerError "rank mismatch in domain assignment")
    }
    if(214315 call _cond_test(214305 call !=(214308 call . a[214270] c"idxType")(214312 call . b[214274] c"idxType")))
    {
      (214300 call compilerError "index type mismatch in domain assignment")
    }
    if(214373 call _cond_test(214361 call &&(214367 call(214364 call . a[214270] c"isRectangular"))(214372 call(214369 call . b[214274] c"isRectangular"))))
    {
      if(214356 call _cond_test(214344 call !(214347 call chpl_assignStrideIsSafe(214349 call . a[214270] c"strides")(214353 call . b[214274] c"strides"))))
      {
        (214321 call compilerError "assigning to a domain with strideKind."(214325 call :(214328 call . a[214270] c"strides") string[244]) " from a domain with strideKind."(214335 call :(214338 call . b[214274] c"strides") string[244]) " without an explicit cast")
      }
    }
    (214387 call(214384 call .(214379 call . a[214270] c"_instance") c"dsiAssignDomain") b[214274](lhsPrivate = 0))
    if(214404 call _cond_test(214399 call _isPrivatized(214401 call . a[214270] c"_instance")))
    {
      (214393 call _reprivatize(214395 call . a[214270] c"_instance"))
    }
  }
  function chpl__checkTupIrregDomAssign[214410](const  ref arg d[214412]:_any[141](?), const  ref arg idx[214414]:_any[141](?), param arg msg[214416]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    if(214460 call _cond_test(214421 call ||(395458 'is_coercible'(214430 call . d[214412] c"fullIdxType")(214426 'typeof' idx[214414]))(214433 call &&(214435 call &&(214441 call(214438 call . d[214412] c"isSparse"))(214442 call ==(214445 call . d[214412] c"rank") 1))(395459 'is_coercible'(214453 call * 1(214457 call . d[214412] c"idxType"))(214452 'typeof' idx[214414])))))
    {
      (214419 return _void[46])
    }
    (214466 call compilerError "cannot assign a tuple " msg[214416](214471 call :(214474 'typeof' idx[214414]) string[244]) " into "(214480 call domainDescription d[214412]) " with idxType "(214485 call :(214488 call . d[214412] c"idxType") string[244]))
  }
  function chpl__isLegalRectTupDomAssign[214494](arg d[214496]:_any[141](?), arg t[214498]:_any[141](?)) param : _unknown[42]
  {
    if(214511 call _cond_test(214504 call !(214510 call(214507 call . d[214496] c"isRectangular"))))
    {
      (214501 return 0)
    }
    if(214531 call _cond_test(214519 call !(214521 call ==(214524 call . d[214496] c"rank")(214528 call . t[214498] c"size"))))
    {
      (214516 return 0)
    }
    {
      unknown dim[214536] "index var" 0
      unknown tmp[214563] "maybe param" "temp"
      (214575 'move' tmp[214563](214573 call chpl_compute_low_param_loop_bound 0(214539 call -(214542 call . t[214498] c"size") 1)))
      unknown tmp[214564] "maybe param" "temp"
      (214588 'move' tmp[214564](214586 call chpl_compute_high_param_loop_bound 0(214580 call -(214582 call . t[214498] c"size") 1)))
      unknown tmp[214565] "maybe param" "temp"
      (214591 'move' tmp[214565] 1)
      ParamForLoop[214593]
      { dim[214536] tmp[214563] tmp[214564] tmp[214565]
        if(214558 call _cond_test(214551 call !(214554 call isRange(214556 call t[214498] dim[214536]))))
        {
          (214548 return 0)
        }
      }
      label _unused_continueLabel[214567]
      label _breakLabel[214566]
    }
    {
      unknown dim[214602] "index var" 0
      unknown tmp[214635] "maybe param" "temp"
      (214647 'move' tmp[214635](214645 call chpl_compute_low_param_loop_bound 0(214605 call -(214608 call . t[214498] c"size") 1)))
      unknown tmp[214636] "maybe param" "temp"
      (214660 'move' tmp[214636](214658 call chpl_compute_high_param_loop_bound 0(214652 call -(214654 call . t[214498] c"size") 1)))
      unknown tmp[214637] "maybe param" "temp"
      (214663 'move' tmp[214637] 1)
      ParamForLoop[214665]
      { dim[214602] tmp[214635] tmp[214636] tmp[214637]
        if(214630 call _cond_test(214617 call !(214620 call chpl_assignStrideIsSafe(214625 call(214622 call . d[214496] c"dim") dim[214602])(214628 call t[214498] dim[214602]))))
        {
          (214614 return 0)
        }
      }
      label _unused_continueLabel[214639]
      label _breakLabel[214638]
    }
    (214674 return 1)
  }
  function =[214678](ref arg a[214681] :
  _domain[225034](?), arg b[214685] :
  _tuple[246](?)) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    if(214859 call _cond_test(214856 call chpl__isLegalRectTupDomAssign a[214681] b[214685]))
    {
      (214690 call = a[214681](214697 call chpl__buildDomainExpr(214695 'expand_tuple' b[214685]) 1))
    }
    {
      if(214851 call _cond_test(214850 call(214847 call . a[214681] c"isRectangular")))
      {
        (214701 call compilerError "cannot assign a "(214705 call :(214708 'typeof' b[214685]) string[244]) " to a rectangular domain")
      }
      {
        (214718 call(214715 call . a[214681] c"clear"))
        if(214842 call _cond_test(214840 call isHomogeneousTuple b[214685]))
        {
          unknown _indexOfInterest[214748] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[214749] "expr temp" "temp"
          (214758 'move' _iterator[214749](214756 call _getIterator(214768 call chpl_direct_counted_range_iter 0(214764 call . b[214685] c"size"))))
          Defer
          {
            {
              (214783 call _freeIterator _iterator[214749])
            }
          }
          { scopeless type
            (214773 'move' _indexOfInterest[214748](214770 call iteratorIndex _iterator[214749]))
          }
          ForLoop[214750]
          {
            unknown ind[214719] "index var" "insert auto destroy"
            (214778 'move' ind[214719] _indexOfInterest[214748])
            {
              (214732 call chpl__checkTupIrregDomAssign a[214681](214735 call b[214685] ind[214719]) "of ")
              (214744 call(214741 call . a[214681] c"add")(214746 call b[214685] ind[214719]))
            }
            label _continueLabel[214753]
            _indexOfInterest[214748]
            _iterator[214749]
          }
          label _breakLabel[214754]
        }
        {
          unknown _indexOfInterest[214807] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[214808] "expr temp" "temp"
          (214817 'move' _iterator[214808](214815 call _getIterator b[214685]))
          Defer
          {
            {
              (214832 call _freeIterator _iterator[214808])
            }
          }
          { scopeless type
            (214822 'move' _indexOfInterest[214807](214819 call iteratorIndex _iterator[214808]))
          }
          ForLoop[214809]
          {
            unknown ind[214790] "index var" "insert auto destroy"
            (214827 'move' ind[214790] _indexOfInterest[214807])
            {
              (214795 call chpl__checkTupIrregDomAssign a[214681] ind[214790] "containing ")
              (214805 call(214802 call . a[214681] c"add") ind[214790])
            }
            label _continueLabel[214812]
            _indexOfInterest[214807]
            _iterator[214808]
          }
          label _breakLabel[214813]
        }
      }
    }
  }
  function =[214866](ref arg d[214869] :
  _domain[225034](?), arg r[214875] :
  (214873 call range[240](?) ?[227])) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    (214879 call = d[214869](214885 call chpl__buildDomainExpr r[214875] 1))
  }
  function =[214889](ref arg a[214892] :
  _domain[225034](?), arg b[214895]:_any[141](?)) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    if(214915 call _cond_test(214914 call(214911 call . a[214892] c"isRectangular")))
    {
      (214899 call compilerError "assigning "(214903 call :(214906 'typeof' b[214895]) string[244]) " to a rectangular domain")
    }
    if(214937 call _cond_test(214932 call !(214935 call canBeIteratedOver b[214895])))
    {
      (214921 call compilerError "assigning "(214923 call :(214926 'typeof' b[214895]) string[244]) " to an irregular domain")
    }
    (214946 call(214943 call . a[214892] c"clear"))
    {
      unknown _indexOfInterest[214957] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[214958] "expr temp" "temp"
      (214967 'move' _iterator[214958](214965 call _getIterator b[214895]))
      Defer
      {
        {
          (214982 call _freeIterator _iterator[214958])
        }
      }
      { scopeless type
        (214972 'move' _indexOfInterest[214957](214969 call iteratorIndex _iterator[214958]))
      }
      ForLoop[214959]
      {
        unknown ind[214947] "index var" "insert auto destroy"
        (214977 'move' ind[214947] _indexOfInterest[214957])
        {
          (214955 call(214952 call . a[214892] c"add") ind[214947])
        }
        label _continueLabel[214962]
        _indexOfInterest[214957]
        _iterator[214958]
      }
      label _breakLabel[214963]
    }
  }
  function allUint[214991](arg b[214993]:_any[141](?)) param : _unknown[42] "private"
  {
    if(215002 call _cond_test(215000 call isInt b[214993]))
    {
      (214996 return 0)
    }
    if(215013 call _cond_test(215011 call isUint b[214993]))
    {
      (215007 return 1)
    }
    if(215026 call _cond_test(215024 call isTuple b[214993]))
    {
      (215018 return(215020 call allUintTup 0))
    }
    (215031 return 0)
    function allUintTup[215033](param arg dim[215035]:_any[141](?)) param : _unknown[42]
    {
      if(215072 call _cond_test(215065 call == dim[215035](215069 call . b[214993] c"size")))
      {
        (215038 return 1)
      }
      {
        if(215059 call _cond_test(215052 call !(215055 call isUint(215057 call b[214993] dim[215035]))))
        {
          (215041 return 0)
        }
        {
          (215044 return(215046 call allUintTup(215047 call + dim[215035] 1)))
        }
      }
    }
  }
  function chpl_by[215082](arg a[215085] :
  _domain[225034](?), arg b[215088]:_any[141](?)) : _unknown[42] "operator"
  {
    (215092 call errorIfNotRectangular a[215085] "by")
    unknown newStrides[215098] "param"(215118 IfExpr (215099 call !(215102 call allUint b[215088])) then
    { scopeless
      any[107135]
    } else
    { scopeless
      (215109 call chpl_strideProduct(215111 call . a[215085] c"strides") positive[107131])
    } )
    (215122 'end of statement')
    unknown r[215124](215125 call *(215128 call . a[215085] c"rank")(215132 call range[240](?)(215137 call .(215134 call . a[215085] c"_value") c"idxType") both[107114] newStrides[215098]))
    (215146 'end of statement')
    unknown t[215148](215150 call _makeIndexTuple(215152 call . a[215085] c"rank") b[215088] "step"(expand = 1))
    (215162 'end of statement')
    {
      unknown i[215163] "index var" 0
      unknown tmp[215192] "maybe param" "temp"
      (215204 'move' tmp[215192](215202 call chpl_compute_low_param_loop_bound 0(215166 call -(215169 call . a[215085] c"rank") 1)))
      unknown tmp[215193] "maybe param" "temp"
      (215217 'move' tmp[215193](215215 call chpl_compute_high_param_loop_bound 0(215209 call -(215211 call . a[215085] c"rank") 1)))
      unknown tmp[215194] "maybe param" "temp"
      (215220 'move' tmp[215194] 1)
      ParamForLoop[215222]
      { i[215163] tmp[215192] tmp[215193] tmp[215194]
        (215175 call =(215178 call r[215124] i[215163])(215180 call chpl_by(215186 call(215183 call . a[215085] c"dim") i[215163])(215189 call t[215148] i[215163])))
      }
      label _unused_continueLabel[215196]
      label _breakLabel[215195]
    }
    (215231 return(215232 'new'(215234 call _domain[225034](?)(215236 call . a[215085] c"distribution")(215240 call . a[215085] c"rank")(215247 call .(215244 call . a[215085] c"_value") c"idxType") newStrides[215098] r[215124])))
  }
  function chpl_by[215254](arg a[215257] :
  _domain[225034](?), param arg b[215261] :
  integral[159](?)) : _unknown[42] "operator"
  {
    (215266 call errorIfNotRectangular a[215257] "by")
    unknown newStrides[215270] "param"(215272 call chpl_strideProduct(215277 call(215274 call . a[215257] c"dim") 0) b[215261])
    (215281 'end of statement')
    unknown r[215283](215284 call *(215287 call . a[215257] c"rank")(215291 call range[240](?)(215296 call .(215293 call . a[215257] c"_value") c"idxType") both[107114] newStrides[215270]))
    (215305 'end of statement')
    {
      unknown i[215306] "index var" 0
      unknown tmp[215333] "maybe param" "temp"
      (215345 'move' tmp[215333](215343 call chpl_compute_low_param_loop_bound 0(215309 call -(215312 call . a[215257] c"rank") 1)))
      unknown tmp[215334] "maybe param" "temp"
      (215358 'move' tmp[215334](215356 call chpl_compute_high_param_loop_bound 0(215350 call -(215352 call . a[215257] c"rank") 1)))
      unknown tmp[215335] "maybe param" "temp"
      (215361 'move' tmp[215335] 1)
      ParamForLoop[215363]
      { i[215306] tmp[215333] tmp[215334] tmp[215335]
        (215318 call =(215321 call r[215283] i[215306])(215323 call chpl_by(215329 call(215326 call . a[215257] c"dim") i[215306]) b[215261]))
      }
      label _unused_continueLabel[215337]
      label _breakLabel[215336]
    }
    (215372 return(215373 'new'(215375 call _domain[225034](?)(215377 call . a[215257] c"distribution")(215381 call . a[215257] c"rank")(215388 call .(215385 call . a[215257] c"_value") c"idxType") newStrides[215270] r[215283])))
  }
  function chpl_align[215395](arg a[215398] :
  _domain[225034](?), arg b[215401]:_any[141](?)) : _unknown[42] "operator"
  {
    (215405 call errorIfNotRectangular a[215398] "align")
    unknown r[215411](215412 call *(215415 call . a[215398] c"rank")(215419 call range[240](?)(215424 call .(215421 call . a[215398] c"_value") c"idxType") both[107114](215432 call . a[215398] c"strides")))
    (215436 'end of statement')
    unknown t[215438](215440 call _makeIndexTuple(215442 call . a[215398] c"rank") b[215401] "alignment"(expand = 1))
    (215452 'end of statement')
    {
      unknown i[215453] "index var" 0
      unknown tmp[215482] "maybe param" "temp"
      (215494 'move' tmp[215482](215492 call chpl_compute_low_param_loop_bound 0(215456 call -(215459 call . a[215398] c"rank") 1)))
      unknown tmp[215483] "maybe param" "temp"
      (215507 'move' tmp[215483](215505 call chpl_compute_high_param_loop_bound 0(215499 call -(215501 call . a[215398] c"rank") 1)))
      unknown tmp[215484] "maybe param" "temp"
      (215510 'move' tmp[215484] 1)
      ParamForLoop[215512]
      { i[215453] tmp[215482] tmp[215483] tmp[215484]
        (215465 call =(215468 call r[215411] i[215453])(215470 call chpl_align(215476 call(215473 call . a[215398] c"dim") i[215453])(215479 call t[215438] i[215453])))
      }
      label _unused_continueLabel[215486]
      label _breakLabel[215485]
    }
    (215521 return(215522 'new'(215524 call _domain[225034](?)(215526 call . a[215398] c"distribution")(215530 call . a[215398] c"rank")(215537 call .(215534 call . a[215398] c"_value") c"idxType")(215541 call . a[215398] c"strides") r[215411])))
  }
  function chpl_domainDistIsLayout[215547](arg d[215550] :
  _domain[225034](?)) param : _unknown[42]
  {
    (215554 return(215565 call(215562 call .(215559 call .(215556 call . d[215550] c"distribution") c"_value") c"dsiIsLayout")))
  }
  function chpl__coerceCopy[215568](arg dstType[215571] :
  _domain[225034](?), arg rhs[215575] :
  _domain[225034](?), arg definedConst[215579] :
  bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown rhsIsLayout[215584] "param"(215586 call chpl_domainDistIsLayout rhs[215575])
    (215589 'end of statement')
    unknown lhs[215591] "no copy"(215593 call chpl__coerceHelp dstType[215571] definedConst[215579])
    (215597 'end of statement')
    (215598 call = lhs[215591] rhs[215575])
    if(215616 call _cond_test(215608 call &&(215611 call chpl_domainDistIsLayout lhs[215591])(215613 call ! rhsIsLayout[215584])))
    {
      (215603 call compilerWarning "initializing a non-distributed domain from a distributed domain. If you didn't mean to do that, add a dmapped clause to the ty)
    }
    (215621 return lhs[215591])
  }
  function chpl__coerceMove[215625](arg dstType[215628] :
  _domain[225034](?), in arg rhs[215632] :
  _domain[225034](?), arg definedConst[215636] :
  bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown rhsIsLayout[215641] "param"(215643 call chpl_domainDistIsLayout rhs[215632])
    (215646 'end of statement')
    unknown lhs[215648] "no copy"(215650 call chpl__coerceHelp dstType[215628] definedConst[215636])
    (215654 'end of statement')
    (215655 call = lhs[215648] rhs[215632])
    if(215671 call _cond_test(215663 call &&(215666 call chpl_domainDistIsLayout lhs[215648])(215668 call ! rhsIsLayout[215641])))
    {
      (215660 call compilerWarning "initializing a non-distributed domain from a distributed domain. If you didn't mean to do that, add a dmapped clause to the ty)
    }
    (215676 return lhs[215648])
  }
  function chpl__coerceCopy[215680](arg dstType[215683] :
  _domain[225034](?), arg rhs[215687] :
  _tuple[246](?), arg definedConst[215691] :
  bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown lhs[215696] "no copy"(215698 call chpl__coerceHelp dstType[215683] definedConst[215691])
    (215702 'end of statement')
    if(215722 call _cond_test(215719 call chpl__isLegalRectTupDomAssign lhs[215696] rhs[215687]))
    {
      (215704 call = lhs[215696](215711 call chpl__buildDomainExpr(215709 'expand_tuple' rhs[215687]) 1))
    }
    {
      (215714 call = lhs[215696] rhs[215687])
    }
    (215726 return lhs[215696])
  }
  function chpl__coerceMove[215730](arg dstType[215733] :
  _domain[225034](?), in arg rhs[215737] :
  _tuple[246](?), arg definedConst[215741] :
  bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown lhs[215746] "no copy"(215748 call chpl__coerceHelp dstType[215733] definedConst[215741])
    (215752 'end of statement')
    if(215772 call _cond_test(215769 call chpl__isLegalRectTupDomAssign lhs[215746] rhs[215737]))
    {
      (215754 call = lhs[215746](215761 call chpl__buildDomainExpr(215759 'expand_tuple' rhs[215737]) 1))
    }
    {
      (215764 call = lhs[215746] rhs[215737])
    }
    (215776 return lhs[215746])
  }
  function chpl__coerceCopy[215780](arg dstType[215783] :
  _domain[225034](?), arg rhs[215789] :
  (215787 call range[240](?) ?[227]), arg definedConst[215793] :
  bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown lhs[215798] "no copy"(215800 call chpl__coerceHelp dstType[215783] definedConst[215793])
    (215804 'end of statement')
    (215805 call = lhs[215798](215811 call chpl__buildDomainExpr rhs[215789] 1))
    (215813 return lhs[215798])
  }
  function chpl__coerceMove[215817](arg dstType[215820] :
  _domain[225034](?), in arg rhs[215826] :
  (215824 call range[240](?) ?[227]), arg definedConst[215830] :
  bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown lhs[215835] "no copy"(215837 call chpl__coerceHelp dstType[215820] definedConst[215830])
    (215841 'end of statement')
    (215842 call = lhs[215835](215848 call chpl__buildDomainExpr rhs[215826] 1))
    (215850 return lhs[215835])
  }
  function chpl__coerceCopy[215854](arg dstType[215857] :
  _domain[225034](?), arg rhs[215861] :
  _iteratorRecord[165](?), arg definedConst[215865] :
  bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown lhs[215870] "no copy"(215872 call chpl__coerceHelp dstType[215857] definedConst[215865])
    (215876 'end of statement')
    if(215892 call _cond_test(215891 call(215888 call . lhs[215870] c"isRectangular")))
    {
      (215878 call compilerError "assigning "(215880 call :(215883 'typeof' rhs[215861]) string[244]) " to a rectangular domain")
    }
    (215901 call(215898 call . lhs[215870] c"clear"))
    {
      unknown _indexOfInterest[215912] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[215913] "expr temp" "temp"
      (215922 'move' _iterator[215913](215920 call _getIterator rhs[215861]))
      Defer
      {
        {
          (215937 call _freeIterator _iterator[215913])
        }
      }
      { scopeless type
        (215927 'move' _indexOfInterest[215912](215924 call iteratorIndex _iterator[215913]))
      }
      ForLoop[215914]
      {
        unknown ind[215902] "index var" "insert auto destroy"
        (215932 'move' ind[215902] _indexOfInterest[215912])
        {
          (215910 call(215907 call . lhs[215870] c"add") ind[215902])
        }
        label _continueLabel[215917]
        _indexOfInterest[215912]
        _iterator[215913]
      }
      label _breakLabel[215918]
    }
    (215944 return lhs[215870])
  }
  function chpl__coerceMove[215948](arg dstType[215951] :
  _domain[225034](?), arg rhs[215955] :
  _iteratorRecord[165](?), arg definedConst[215959] :
  bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown lhs[215964] "no copy"(215966 call chpl__coerceHelp dstType[215951] definedConst[215959])
    (215970 'end of statement')
    if(215986 call _cond_test(215985 call(215982 call . lhs[215964] c"isRectangular")))
    {
      (215972 call compilerError "assigning "(215974 call :(215977 'typeof' rhs[215955]) string[244]) " to a rectangular domain")
    }
    (215995 call(215992 call . lhs[215964] c"clear"))
    {
      unknown _indexOfInterest[216006] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[216007] "expr temp" "temp"
      (216016 'move' _iterator[216007](216014 call _getIterator rhs[215955]))
      Defer
      {
        {
          (216031 call _freeIterator _iterator[216007])
        }
      }
      { scopeless type
        (216021 'move' _indexOfInterest[216006](216018 call iteratorIndex _iterator[216007]))
      }
      ForLoop[216008]
      {
        unknown ind[215996] "index var" "insert auto destroy"
        (216026 'move' ind[215996] _indexOfInterest[216006])
        {
          (216004 call(216001 call . lhs[215964] c"add") ind[215996])
        }
        label _continueLabel[216011]
        _indexOfInterest[216006]
        _iterator[216007]
      }
      label _breakLabel[216012]
    }
    (216038 return lhs[215964])
  }
  function chpl__coerceCopy[216042](arg dstType[216045] :
  _domain[225034](?), arg rhs[216048]:_any[141](?), arg definedConst[216051] :
  bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown lhs[216056] "no copy"(216058 call chpl__coerceHelp dstType[216045] definedConst[216051])
    (216062 'end of statement')
    if(216078 call _cond_test(216077 call(216074 call . lhs[216056] c"isRectangular")))
    {
      (216064 call compilerError "assigning "(216066 call :(216069 'typeof' rhs[216048]) string[244]) " to a rectangular domain")
    }
    if(216098 call _cond_test(216093 call !(216096 call canBeIteratedOver rhs[216048])))
    {
      (216084 call compilerError "assigning "(216086 call :(216089 'typeof' rhs[216048]) string[244]) " to an irregular domain")
    }
    (216107 call(216104 call . lhs[216056] c"clear"))
    {
      unknown _indexOfInterest[216118] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[216119] "expr temp" "temp"
      (216128 'move' _iterator[216119](216126 call _getIterator rhs[216048]))
      Defer
      {
        {
          (216143 call _freeIterator _iterator[216119])
        }
      }
      { scopeless type
        (216133 'move' _indexOfInterest[216118](216130 call iteratorIndex _iterator[216119]))
      }
      ForLoop[216120]
      {
        unknown ind[216108] "index var" "insert auto destroy"
        (216138 'move' ind[216108] _indexOfInterest[216118])
        {
          (216116 call(216113 call . lhs[216056] c"add") ind[216108])
        }
        label _continueLabel[216123]
        _indexOfInterest[216118]
        _iterator[216119]
      }
      label _breakLabel[216124]
    }
    (216150 return lhs[216056])
  }
  function chpl__coerceMove[216154](arg dstType[216157] :
  _domain[225034](?), in arg rhs[216160]:_any[141](?), arg definedConst[216163] :
  bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown lhs[216168] "no copy"(216170 call chpl__coerceHelp dstType[216157] definedConst[216163])
    (216174 'end of statement')
    if(216190 call _cond_test(216189 call(216186 call . lhs[216168] c"isRectangular")))
    {
      (216176 call compilerError "assigning "(216178 call :(216181 'typeof' rhs[216160]) string[244]) " to a rectangular domain")
    }
    if(216210 call _cond_test(216205 call !(216208 call canBeIteratedOver rhs[216160])))
    {
      (216196 call compilerError "assigning "(216198 call :(216201 'typeof' rhs[216160]) string[244]) " to an irregular domain")
    }
    (216219 call(216216 call . lhs[216168] c"clear"))
    {
      unknown _indexOfInterest[216230] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[216231] "expr temp" "temp"
      (216240 'move' _iterator[216231](216238 call _getIterator rhs[216160]))
      Defer
      {
        {
          (216255 call _freeIterator _iterator[216231])
        }
      }
      { scopeless type
        (216245 'move' _indexOfInterest[216230](216242 call iteratorIndex _iterator[216231]))
      }
      ForLoop[216232]
      {
        unknown ind[216220] "index var" "insert auto destroy"
        (216250 'move' ind[216220] _indexOfInterest[216230])
        {
          (216228 call(216225 call . lhs[216168] c"add") ind[216220])
        }
        label _continueLabel[216235]
        _indexOfInterest[216230]
        _iterator[216231]
      }
      label _breakLabel[216236]
    }
    (216262 return lhs[216168])
  }
  function _domain[225034](?).chpl__promotionType[216283](arg _mt[216287]:_MT[201], arg this[216285]:_domain[225034](?)) type : _unknown[42] "method" "primary method"
  {
    (216290 return(216291 call chpl__buildIndexType(443501 call . this[216285] c"rank")(216295 call .(406204 call . this[216285] c"_value") c"idxType")))
  }
  function _domain[225034](?).init[216300](arg _mt[216314]:_MT[201], arg this[216302]:_domain[225034](?), arg _pid[216305] :
  int(64)[10], arg _instance[216308]:_any[141](?), arg _unowned[216311] :
  bool[19]) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (216317 call =(216320 call . this[216302] c"_pid") _pid[216305])
    (216324 call =(216327 call . this[216302] c"_instance") _instance[216308])
    (216331 call =(216334 call . this[216302] c"_unowned") _unowned[216311])
  }
  function _domain[225034](?).init[216340](arg _mt[216346]:_MT[201], arg this[216342]:_domain[225034](?), arg value[216344]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    if(216361 call _cond_test(216353 call !=(216356 call _to_unmanaged(216358 'typeof' value[216344]))(216360 'typeof' value[216344])))
    {
      (216350 call compilerError "Domain on borrow created")
    }
    if(216410 call _cond_test(216408 call _isPrivatized value[216344]))
    {
      if(216395 call _cond_test(216388 call ==(216391 call . value[216344] c"pid") nullPid[247489]))
      {
        (216368 call =(216371 call . this[216342] c"_pid")(216375 call _newPrivatizedClass value[216344]))
      }
      {
        (216378 call =(216381 call . this[216342] c"_pid")(216385 call . value[216344] c"pid"))
      }
    }
    {
      (216400 call =(216403 call . this[216342] c"_pid") nullPid[247489])
    }
    (216414 call =(216417 call . this[216342] c"_instance") value[216344])
  }
  function _domain[225034](?).init[216423](arg _mt[216450]:_MT[201], arg this[216425]:_domain[225034](?), arg d[216427]:_any[141](?), param arg rank[216430] :
  int(64)[10], arg idxType[216434]:_any[141](?) =
  int(64)[10], param arg strides[216441] =
  one[107127], arg definedConst[216446] :
  bool[19] =
  0) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (216457 call(216454 call . this[216425] c"init")(216464 call(216461 call . d[216427] c"newRectangularDom") rank[216430] idxType[216434] strides[216441] definedConst[216446]))
  }
  function _domain[225034](?).init[216471](arg _mt[216512]:_MT[201], arg this[216473]:_domain[225034](?), arg d[216475]:_any[141](?), param arg rank[216478] :
  int(64)[10], arg idxType[216482]:_any[141](?) =
  int(64)[10], param arg strides[216489] =
  one[107127], arg ranges[216503] :
  (216492 call * rank[216478](216496 call range[240](?) idxType[216482] both[107114] strides[216489])), arg definedConst[216508] :
  bool[19] =
  0) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (216519 call(216516 call . this[216473] c"init")(216524 call(216521 call . d[216475] c"newRectangularDom") rank[216478] idxType[216482] strides[216489] ranges[216503] definedConst[216508]))
  }
  function _domain[225034](?).init[216532](arg _mt[216552]:_MT[201], arg this[216534]:_domain[225034](?), arg d[216536]:_any[141](?), arg idxType[216538]:_any[141](?), param arg parSafe[216542] :
  bool[19] =
  1, arg definedConst[216548] :
  bool[19] =
  0) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (216559 call(216556 call . this[216534] c"init")(216566 call(216563 call . d[216536] c"newAssociativeDom") idxType[216538] parSafe[216542]))
  }
  function _domain[225034](?).init[216571](arg _mt[216587]:_MT[201], arg this[216573]:_domain[225034](?), arg d[216575]:_any[141](?), arg dom[216578] :
  _domain[225034](?), arg definedConst[216583] :
  bool[19] =
  0) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (216594 call(216591 call . this[216573] c"init")(216601 call(216598 call . d[216575] c"newSparseDom")(216603 call . dom[216578] c"rank")(216610 call .(216607 call . dom[216578] c"_value") c"idxType") dom[216578]))
  }
  function _domain[225034](?).init=[216616](arg _mt[216624]:_MT[201], arg this[216618]:_domain[225034](?), const  ref arg other[216621] :
  _domain[225034](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (216636 call(216633 call . this[216618] c"init")(216638 call . other[216621] c"distribution")(216642 call . other[216621] c"rank")(216646 call . other[216621] c"idxType")(216650 call . other[216621] c"strides")(216657 call(216654 call . other[216621] c"dims")))
  }
  where {
    (216630 call(216627 call . other[216621] c"isRectangular"))
  }
  function _domain[225034](?).init=[216661](arg _mt[216669]:_MT[201], arg this[216663]:_domain[225034](?), const  ref arg other[216666] :
  _domain[225034](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    if(216740 call _cond_test(216739 call(216736 call . other[216666] c"isAssociative")))
    {
      (216677 call(216674 call . this[216663] c"init")(216679 call . other[216666] c"distribution")(216683 call . other[216666] c"idxType")(216687 call . other[216666] c"parSafe"))
    }
    {
      if(216731 call _cond_test(216730 call(216727 call . other[216666] c"isSparse")))
      {
        (216695 call(216692 call . this[216663] c"init")(216697 call . other[216666] c"distribution")(216701 call . other[216666] c"parentDom"))
      }
      {
        (216706 call compilerError "cannot initialize '"(216708 call :(216711 'typeof' this[216663]) string[244]) "' from '"(216714 call :(216717 'typeof' other[216666]) string[244]) "'")
        (216724 call(216721 call . this[216663] c"init") nil[32])
      }
    }
    (216749 call(216746 call .(406248 call . this[216663] c"_instance") c"dsiAssignDomain") other[216666](lhsPrivate = 1))
  }
  function _domain[225034](?)._value[216755](arg _mt[216759]:_MT[201], arg this[216757]:_domain[225034](?)) : _unknown[42] "inline" "method" "primary method" "no parens"
  {
    if(216775 call _cond_test(216773 call _isPrivatized(443559 call . this[216757] c"_instance")))
    {
      (216763 return(216765 call chpl_getPrivatizedCopy(216767 'typeof'(443544 call . this[216757] c"_instance"))(443549 call . this[216757] c"_pid")))
    }
    {
      (216770 return(443554 call . this[216757] c"_instance"))
    }
  }
  function _domain[225034](?).chpl_forwarding_expr1[216782](arg _mt[216787]:_MT[201], arg this[216785]:_domain[225034](?)) : _unknown[42] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    (216793 return(443563 call . this[216785] c"_value"))
  }
  function _domain[225034](?).chpl__serialize[216796](arg _mt[216800]:_MT[201], arg this[216798]:_domain[225034](?)) : _unknown[42] "method" "primary method"
  {
    (216811 return(216819 call(216816 call .(216813 call . this[216798] c"_value") c"chpl__serialize")))
  }
  where {
    (216809 call(216806 call .(216803 call . this[216798] c"_value") c"isDefaultRectangular"))
  }
  function _domain[225034](?).chpl__deserialize[216823](arg _mt[216829]:_MT[201], arg this[216825]:_domain[225034](?), arg data[216827]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    unknown valueType[216833] "type variable"(216834 'static field type' this[216825] "_instance")
    (216838 return(216839 'new'(216841 call _domain[225034](?)(216848 call(216845 call .(216843 call _to_borrowed valueType[216833]) c"chpl__deserialize") data[216827]))))
  }
  function _domain[225034](?)._do_destroy[216852](arg _mt[216856]:_MT[201], arg this[216854]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    if(216969 call _cond_test(216966 call !(443594 call . this[216854] c"_unowned")))
    {
      {
        const tmp[216957] "const" "temp"
        (216958 'move' tmp[216957](216955 'deref'(216954 '_wide_get_locale'(443572 call . this[216854] c"_instance"))))
        {
          const inst[216863] "const"(443577 call . this[216854] c"_instance")
          (216866 'end of statement')
          unknown tmp[216877] "temp"(216876 call(216873 call . inst[216863] c"remove"))
          (216884 call _check_tuple_var_decl tmp[216877] 2)
          unknown domToFree[216868](216878 call tmp[216877] 0)
          unknown distToRemove[216870](216881 call tmp[216877] 1)
          (216889 'end of statement')
          unknown distToFree[216891] nil[32] unmanaged BaseDist?[468142]
          (216897 'end of statement')
          if(216913 call _cond_test(216909 call != distToRemove[216870] nil[32]))
          {
            (216899 call = distToFree[216891](216908 call(216905 call .(216902 call postfix! distToRemove[216870]) c"remove")))
          }
          if(216928 call _cond_test(216924 call != domToFree[216868] nil[32]))
          {
            (216918 call _delete_dom inst[216863](216921 call _isPrivatized inst[216863]))
          }
          if(216949 call _cond_test(216945 call != distToFree[216891] nil[32]))
          {
            (216934 call _delete_dist(216935 call postfix! distToFree[216891])(216939 call _isPrivatized(216941 call . inst[216863] c"dist")))
          }
        }
        (216961 'elided on block' 0 tmp[216957])
      }
    }
    {
    }
  }
  function _domain[225034](?).deinit[216975](arg _mt[216979]:_MT[201], arg this[216977]:_domain[225034](?)) : _unknown[42] "destructor" "method" "primary method" "no return value for void"
  {
    (216983 call(443598 call . this[216977] c"_do_destroy"))
  }
  function _domain[225034](?).distribution[216986](arg _mt[216990]:_MT[201], arg this[216988]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens" "return not owned"
  {
    if(217019 call _cond_test(217014 call canResolveMethod(443602 call . this[216988] c"_value") "dsiGetDist"))
    {
      (216997 return(217004 call(217001 call .(406256 call . this[216988] c"_value") c"dsiGetDist")))
    }
    {
      (217006 return(217008 call _getDistribution(217010 call .(406260 call . this[216988] c"_value") c"dist")))
    }
    (396809 'used modules list'(216994 'use' Reflection[1804]))
  }
  function _domain[225034](?).dist[217025](arg _mt[217029]:_MT[201], arg this[217027]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens" "no return value for void"
  {
    (217033 call compilerError "'domain.dist' is no longer supported," " use 'domain.distribution' instead")
  }
  function _domain[225034](?).rank[217042](arg _mt[217046]:_MT[201], arg this[217044]:_domain[225034](?)) param : _unknown[42] "method" "primary method" "no parens"
  {
    if(217070 call _cond_test(217058 call ||(217064 call(217061 call . this[217044] c"isRectangular"))(217069 call(217066 call . this[217044] c"isSparse"))))
    {
      (217049 return(217051 call .(406264 call . this[217044] c"_value") c"rank"))
    }
    {
      (217055 return 1)
    }
  }
  function _domain[225034](?).idxType[217078](arg _mt[217082]:_MT[201], arg this[217080]:_domain[225034](?)) type : _unknown[42] "method" "primary method" "no parens"
  {
    (217085 return(217087 call .(406270 call . this[217080] c"_value") c"idxType"))
  }
  function _domain[225034](?).fullIdxType[217092](arg _mt[217096]:_MT[201], arg this[217094]:_domain[225034](?)) type : _unknown[42] "method" "primary method" "no parens"
  {
    if(217131 call _cond_test(217117 call ||(217123 call(217120 call . this[217094] c"isAssociative"))(217124 call ==(217127 call . this[217094] c"rank") 1)))
    {
      (217100 return(217102 call . this[217094] c"idxType"))
    }
    {
      (217106 return(217107 call *(217110 call . this[217094] c"rank")(217114 call . this[217094] c"idxType")))
    }
  }
  function _domain[225034](?).chpl_integralIdxType[217137](arg _mt[217141]:_MT[201], arg this[217139]:_domain[225034](?)) type : _unknown[42] "method" "primary method" "no parens"
  {
    (217144 return(217146 call chpl__idxTypeToIntIdxType(217148 call .(406279 call . this[217139] c"_value") c"idxType")))
  }
  function _domain[225034](?).strides[217153](arg _mt[217157]:_MT[201], arg this[217155]:_domain[225034](?)) param : _unknown[42] "method" "primary method" "no parens"
  {
    (217165 return(217167 call .(406284 call . this[217155] c"_value") c"strides"))
  }
  where {
    (217163 call(217160 call . this[217155] c"isRectangular"))
  }
  function _domain[225034](?).strides[217173](arg _mt[217177]:_MT[201], arg this[217175]:_domain[225034](?)) param : _unknown[42] "method" "primary method" "no parens"
  {
    (217185 return(217190 call .(217187 call .(406289 call . this[217175] c"_value") c"parentDom") c"strides"))
  }
  where {
    (217183 call(217180 call . this[217175] c"isSparse"))
  }
  function _domain[225034](?).strides[217196](arg _mt[217200]:_MT[201], arg this[217198]:_domain[225034](?)) param : _unknown[42] "method" "primary method" "no parens" "no return value for void"
  {
    (217209 call compilerError "associative domains do not support .strides")
  }
  where {
    (217206 call(217203 call . this[217198] c"isAssociative"))
  }
  function _domain[225034](?).hasUnitStride[217216](arg _mt[217220]:_MT[201], arg this[217218]:_domain[225034](?)) param : _unknown[42] "method" "primary method"
  {
    (217223 return(217228 call(217225 call .(406294 call . this[217218] c"strides") c"isOne")))
  }
  function _domain[225034](?).hasPosNegUnitStride[217231](arg _mt[217235]:_MT[201], arg this[217233]:_domain[225034](?)) param : _unknown[42] "method" "primary method"
  {
    (217238 return(217243 call(217240 call .(406298 call . this[217233] c"strides") c"isPosNegOne")))
  }
  function _domain[225034](?).stride[217246](arg _mt[217250]:_MT[201], arg this[217248]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (217253 return(217255 call .(406302 call . this[217248] c"_value") c"dsiStride"))
  }
  function _domain[225034](?).stride[217260](arg _mt[217264]:_MT[201], arg this[217262]:_domain[225034](?)) param : _unknown[42] "method" "primary method" "no parens"
  {
    (217286 return(217296 IfExpr (217291 call(217288 call .(406310 call . this[217262] c"strides") c"isOne")) then
    { scopeless
      1
    } else
    { scopeless
      (217293 call - 1)
    } ))
  }
  where {
    (217266 call &&(217268 call &&(217270 call ==(443606 call . this[217262] c"rank") 1)(217274 call ||(217277 call(443610 call . this[217262] c"isRectangular"))(217279 call(443614 call . this[217262] c"isSparse"))))(217284 call(217281 call .(406306 call . this[217262] c"strides") c"isPosNegOne")))
  }
  function _domain[225034](?).alignment[217302](arg _mt[217306]:_MT[201], arg this[217304]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (217309 return(217311 call .(406314 call . this[217304] c"_value") c"dsiAlignment"))
  }
  function _domain[225034](?).alignment[217316](arg _mt[217320]:_MT[201], arg this[217318]:_domain[225034](?)) param : _unknown[42] "method" "primary method" "no parens"
  {
    (217342 return 0)
  }
  where {
    (217322 call &&(217324 call &&(217326 call ==(443618 call . this[217318] c"rank") 1)(217330 call ||(217333 call(443622 call . this[217318] c"isRectangular"))(217335 call(443626 call . this[217318] c"isSparse"))))(217340 call(217337 call .(406318 call . this[217318] c"strides") c"isPosNegOne")))
  }
  function _domain[225034](?).targetLocales[217347](arg _mt[217351]:_MT[201], arg this[217349]:_domain[225034](?)) const ref : _unknown[42] "method" "primary method"
  {
    (217354 return(217359 call(217356 call .(406322 call . this[217349] c"_value") c"dsiTargetLocales")))
  }
  function _domain[225034](?).these[217362](arg _mt[217366]:_MT[201], arg this[217364]:_domain[225034](?)) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[217379] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[217380] "expr temp" "temp"
      (217389 'move' _iterator[217380](217387 call _getIterator(217375 call(217372 call .(406326 call . this[217364] c"_value") c"these"))))
      Defer
      {
        {
          (217404 call _freeIterator _iterator[217380])
        }
      }
      { scopeless type
        (217394 'move' _indexOfInterest[217379](217391 call iteratorIndex _iterator[217380]))
      }
      ForLoop[217381]
      {
        unknown i[217369] "index var" "insert auto destroy"
        (217399 'move' i[217369] _indexOfInterest[217379])
        {
          (217377 yield i[217369])
        }
        label _continueLabel[217384]
        _indexOfInterest[217379]
        _iterator[217380]
      }
      label _breakLabel[217385]
    }
  }
  function _domain[225034](?).these[217413](arg _mt[217421]:_MT[201], arg this[217415]:_domain[225034](?), param arg tag[217418] :
  iterKind[52144]) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[217452] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[217453] "expr temp" "temp"
      (217462 'move' _iterator[217453](217460 call _getIterator(217447 call(217444 call .(406335 call . this[217415] c"_value") c"these") tag[217418])))
      Defer
      {
        {
          (217477 call _freeIterator _iterator[217453])
        }
      }
      { scopeless type
        (217467 'move' _indexOfInterest[217452](217464 call iteratorIndex _iterator[217453]))
      }
      ForLoop[217454]
      {
        unknown i[217441] "index var" "insert auto destroy"
        (217472 'move' i[217441] _indexOfInterest[217452])
        (217449 yield i[217441])
        label _continueLabel[217457]
        _indexOfInterest[217452]
        _iterator[217453]
      }
      label _breakLabel[217458]
    }
  }
  where {
    (217423 call &&(217425 call == tag[217418] standalone[52142])(217432 'resolves'(217437 call(217434 call .(406331 call . this[217415] c"_value") c"these")(tag = tag[217418]))))
  }
  function _domain[225034](?).these[217487](arg _mt[217495]:_MT[201], arg this[217489]:_domain[225034](?), param arg tag[217492] :
  iterKind[52144]) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[217516] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[217517] "expr temp" "temp"
      (217526 'move' _iterator[217517](217524 call _getIterator(217511 call(217508 call .(406340 call . this[217489] c"_value") c"these") tag[217492])))
      Defer
      {
        {
          (217541 call _freeIterator _iterator[217517])
        }
      }
      { scopeless type
        (217531 'move' _indexOfInterest[217516](217528 call iteratorIndex _iterator[217517]))
      }
      ForLoop[217518]
      {
        unknown followThis[217505] "index var" "insert auto destroy"
        (217536 'move' followThis[217505] _indexOfInterest[217516])
        (217513 yield followThis[217505])
        label _continueLabel[217521]
        _indexOfInterest[217516]
        _iterator[217517]
      }
      label _breakLabel[217522]
    }
  }
  where {
    (217497 call == tag[217492] leader[52138])
  }
  function _domain[225034](?).these[217551](arg _mt[217567]:_MT[201], arg this[217553]:_domain[225034](?), param arg tag[217556] :
  iterKind[52144], arg followThis[217559]:_any[141](?), param arg fast[217563] :
  bool[19] =
  0) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(217681 call _cond_test(217670 'resolves'(217675 call(217672 call .(406353 call . this[217553] c"_value") c"these")(tag = tag[217556]) followThis[217559](fast = fast[217563]))))
    {
      {
        unknown _indexOfInterest[217593] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[217594] "expr temp" "temp"
        (217603 'move' _iterator[217594](217601 call _getIterator(217584 call(217581 call .(406345 call . this[217553] c"_value") c"these")(tag = tag[217556]) followThis[217559](fast = fast[217563]))))
        Defer
        {
          {
            (217618 call _freeIterator _iterator[217594])
          }
        }
        { scopeless type
          (217608 'move' _indexOfInterest[217593](217605 call iteratorIndex _iterator[217594]))
        }
        ForLoop[217595]
        {
          unknown i[217578] "index var" "insert auto destroy"
          (217613 'move' i[217578] _indexOfInterest[217593])
          (217590 yield i[217578])
          label _continueLabel[217598]
          _indexOfInterest[217593]
          _iterator[217594]
        }
        label _breakLabel[217599]
      }
    }
    {
      {
        unknown _indexOfInterest[217638] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[217639] "expr temp" "temp"
        (217648 'move' _iterator[217639](217646 call _getIterator(217632 call(217629 call .(406349 call . this[217553] c"_value") c"these") tag[217556] followThis[217559])))
        Defer
        {
          {
            (217663 call _freeIterator _iterator[217639])
          }
        }
        { scopeless type
          (217653 'move' _indexOfInterest[217638](217650 call iteratorIndex _iterator[217639]))
        }
        ForLoop[217640]
        {
          unknown i[217626] "index var" "insert auto destroy"
          (217658 'move' i[217626] _indexOfInterest[217638])
          (217635 yield i[217626])
          label _continueLabel[217643]
          _indexOfInterest[217638]
          _iterator[217639]
        }
        label _breakLabel[217644]
      }
    }
  }
  where {
    (217569 call == tag[217556] follower[52140])
  }
  function _domain[225034](?).this[217688](arg _mt[217696]:_MT[201], arg this[217690]:_domain[225034](?), arg d[217693] :
  _domain[225034](?)) : _unknown[42] "method" "primary method"
  {
    if(217724 call _cond_test(217717 call ==(217720 call . d[217693] c"rank")(443655 call . this[217690] c"rank")))
    {
      (217699 return(217701 call this[217690](217709 'expand_tuple'(217708 call(217705 call . d[217693] c"getIndices")))))
    }
    {
      (217712 call compilerError "slicing a domain with a domain of a different rank")
    }
  }
  function _domain[225034](?).this[217732](arg _mt[217740]:_MT[201], arg this[217734]:_domain[225034](?), arg ranges[217737]:_any[141](?) ...) : _unknown[42] "method" "primary method"
  {
    const r[217747] "const"(217749 call tupleOfRangesSlice(217751 call(443664 call . this[217734] c"dims")) ranges[217737])
    (217754 'end of statement')
    (217755 return(217756 'new'(217758 call _domain[225034](?)(443670 call . this[217734] c"distribution")(443674 call . this[217734] c"rank")(217762 call .(406359 call . this[217734] c"_value") c"idxType")(217768 call .(217766 call r[217747] 0) c"strides") r[217747])))
  }
  where {
    (217743 call chpl__isTupleOfRanges ranges[217737])
  }
  function _domain[225034](?).this[217775](arg _mt[217783]:_MT[201], arg this[217777]:_domain[225034](?), arg args[217780]:_any[141](?) ...) : _unknown[42] "method" "primary method"
  {
    unknown collapsedDim[217794](217795 call *(443685 call . this[217777] c"rank") bool[19])
    (217800 'end of statement')
    unknown idx[217802](217803 call *(443690 call . this[217777] c"rank")(443694 call . this[217777] c"idxType"))
    (217808 'end of statement')
    unknown uprank[217810] "param"(217812 call chpl__countRanges(217814 'expand_tuple' args[217780]))
    (217816 'end of statement')
    unknown upstrides[217818] "param"(217820 call chpl_strideUnion(217822 call . this[217777] c"strides")(217826 call chpl_strideUnionRC args[217780]))
    (217829 'end of statement')
    unknown upranges[217831](217832 call * uprank[217810](217836 call range[240](?)(idxType =(217838 call .(406368 call . this[217777] c"_value") c"idxType"))(strides = upstrides[217818])))
    (217845 'end of statement')
    unknown updim[217847] 0
    (217850 'end of statement')
    {
      unknown i[217851] "index var" 0
      unknown tmp[217925] "maybe param" "temp"
      (217937 'move' tmp[217925](217935 call chpl_compute_low_param_loop_bound 0(217854 call -(443703 call . this[217777] c"rank") 1)))
      unknown tmp[217926] "maybe param" "temp"
      (217947 'move' tmp[217926](217945 call chpl_compute_high_param_loop_bound 0(217942 call -(443730 call . this[217777] c"rank") 1)))
      unknown tmp[217927] "maybe param" "temp"
      (217950 'move' tmp[217927] 1)
      ParamForLoop[217952]
      { i[217851] tmp[217925] tmp[217926] tmp[217927]
        {
          if(217921 call _cond_test(217917 call isRange(217919 call args[217780] i[217851])))
          {
            (217862 call =(217865 call collapsedDim[217794] i[217851]) 0)
            (217868 call =(217871 call idx[217802] i[217851])(217876 call .(217874 call(443711 call . this[217777] c"dim") i[217851]) c"low"))
            (217879 call =(217882 call upranges[217831] updim[217847])(217893 call(217891 call(217888 call .(217885 call . this[217777] c"_value") c"dsiDim") i[217851])(217895 call args[217780] i[217851])))
            (217897 call += updim[217847] 1)
          }
          {
            (217902 call =(217905 call collapsedDim[217794] i[217851]) 1)
            (217908 call =(217911 call idx[217802] i[217851])(217914 call args[217780] i[217851]))
          }
        }
      }
      label _unused_continueLabel[217929]
      label _breakLabel[217928]
    }
    const emptyrange[217962] "const"(217966 'typeof'(217964 call upranges[217831] 0))
    (217968 'end of statement')
    if(218027 call _cond_test(218022 call !(218025 call(443740 call . this[217777] c"contains") idx[217802])))
    {
      {
        unknown d[217970] "index var" 0
        unknown tmp[217986] "maybe param" "temp"
        (217998 'move' tmp[217986](217996 call chpl_compute_low_param_loop_bound 0(217973 call - uprank[217810] 1)))
        unknown tmp[217987] "maybe param" "temp"
        (218008 'move' tmp[217987](218006 call chpl_compute_high_param_loop_bound 0(218003 call - uprank[217810] 1)))
        unknown tmp[217988] "maybe param" "temp"
        (218011 'move' tmp[217988] 1)
        ParamForLoop[218013]
        { d[217970] tmp[217986] tmp[217987] tmp[217988]
          (217979 call =(217982 call upranges[217831] d[217970]) emptyrange[217962])
        }
        label _unused_continueLabel[217990]
        label _breakLabel[217989]
      }
    }
    const rcdist[218032] "const"(218033 'new'(_chpl_manager = unmanaged[183](?))(218037 call ArrayViewRankChangeDist[431335](?)(downDistPid =(218039 call .(406373 call . this[217777] c"distribution") c"_pid"))(downDistInst =(218044 call .(406377 call . this[217777] c"distribution") c"_instance"))(collapsedDim = collapsedDim[217794])(idx = idx[217802])))
    (218053 'end of statement')
    const rcdistRec[218055] "const"(218056 'new'(218058 call _distribution[268253](?) rcdist[218032]))
    (218061 'end of statement')
    (218062 return(218063 'new'(218065 call _domain[225034](?) rcdistRec[218055] uprank[217810](218071 call .(218069 call upranges[217831] 0) c"idxType")(218077 call .(218075 call upranges[217831] 0) c"strides") upranges[217831])))
  }
  where {
    (217786 call _validRankChangeArgs args[217780](217789 call .(406363 call . this[217777] c"_value") c"idxType"))
  }
  function _domain[225034](?).this[218084](arg _mt[218094]:_MT[201], arg this[218086]:_domain[225034](?), arg i[218090] ... :
  integral[159](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (218098 call compilerError "domain slice requires a range in at least one dimension")
  }
  function _domain[225034](?).this[218104](arg _mt[218113]:_MT[201], arg this[218106]:_domain[225034](?), arg args[218110]:_any[141](?) ...) : _unknown[42] "method" "primary method" "no return value for void"
  {
    if(218132 call _cond_test(218128 call == numArgs[218108](443762 call . this[218106] c"rank")))
    {
      (218118 call compilerError "invalid argument types for domain slicing")
    }
    {
      (218123 call compilerError "a domain slice requires either a single domain argument or exactly one argument per domain dimension")
    }
  }
  function _domain[225034](?).isEmpty[218139](arg _mt[218143]:_MT[201], arg this[218141]:_domain[225034](?)) : _unknown[42] "method" "primary method"
  {
    (218147 return(218148 call ==(218154 call(218151 call . this[218141] c"sizeAs") uint(64)[86]) 0))
  }
  { scopeless type
    bool[19]
  }
  function _domain[225034](?).size[218160](arg _mt[218164]:_MT[201], arg this[218162]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (218168 return(218173 call(218170 call . this[218162] c"sizeAs") int(64)[10]))
  }
  { scopeless type
    int(64)[10]
  }
  function _domain[225034](?).sizeAs[218178](arg _mt[218186]:_MT[201], arg this[218180]:_domain[225034](?), arg t[218183] :
  integral[159](?)) : _unknown[42] "method" "primary method"
  {
    const size[218194] "const"(218198 call .(406383 call . this[218180] c"_value") c"dsiNumIndices")
    (218202 'end of statement')
    if(218266 call _cond_test(218251 call &&(218253 call && 1(218256 call != t[218183] uint(64)[86]))(218260 call > size[218194](218264 call max t[218183]))))
    {
      unknown error[218205](218206 call +(218208 call + ".size query exceeds max("(218213 call : t[218183] string[244])) ")")
      (218219 'end of statement')
      if(218241 call _cond_test(218240 call(218237 call . this[218180] c"isRectangular")))
      {
        (218221 call += error[218205](218224 call +(218226 call + " for: '"(218231 call : this[218180] string[244])) "'"))
      }
      (218249 call boundsCheckHalt module=[222] HaltWrappers[518] error[218205])
      (406388 'referenced modules list' HaltWrappers[518])
    }
    (218270 return(218271 call : size[218194] t[218183]))
    (396811 'used modules list'(218191 'use' HaltWrappers[518]))
  }
  { scopeless type
    t[218183]
  }
  function _domain[225034](?).dims[218278](arg _mt[218282]:_MT[201], arg this[218280]:_domain[225034](?)) : _unknown[42] "method" "primary method"
  {
    (218285 return(218290 call(218287 call .(406394 call . this[218280] c"_value") c"dsiDims")))
  }
  function _domain[225034](?).dim[218293](arg _mt[218301]:_MT[201], arg this[218295]:_domain[225034](?), arg d[218298] :
  int(64)[10]) : _unknown[42] "method" "primary method"
  {
    if(218355 call _cond_test 1)
    {
      if(218349 call _cond_test(218339 call ||(218341 call < d[218298] 0)(218345 call >= d[218298](443786 call . this[218295] c"rank"))))
      {
        (218324 call boundsCheckHalt module=[222] HaltWrappers[518](218337 'try!-expr'(218331 call(218328 call . "dim(%i) is out-of-bounds; must be 0..%i" c"format") d[218298](218333 call -(443780 call . this[218295] c"rank") 1))))
        (406398 'referenced modules list' HaltWrappers[518])
      }
    }
    (218360 return(218365 call(218362 call .(406404 call . this[218295] c"_value") c"dsiDim") d[218298]))
    (396813 'used modules list'(218305 'use' HaltWrappers[518])(218319 'import' FormattedIO[208298].{string}))
  }
  function _domain[225034](?).dim[218369](arg _mt[218377]:_MT[201], arg this[218371]:_domain[225034](?), param arg d[218374] :
  int(64)[10]) : _unknown[42] "method" "primary method"
  {
    if(218403 call _cond_test(218390 call ||(218392 call < d[218374] 0)(218396 call > d[218374](218399 call -(443798 call . this[218371] c"rank") 1))))
    {
      (218381 call compilerError "dim() must take a value from 0.."(218385 call -(443792 call . this[218371] c"rank") 1))
    }
    (218408 return(218413 call(218410 call .(406408 call . this[218371] c"_value") c"dsiDim") d[218374]))
  }
  function _domain[225034](?).dimIter[218417](arg _mt[218425]:_MT[201], arg this[218419]:_domain[225034](?), param arg d[218421]:_any[141](?), arg ind[218423]:_any[141](?)) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[218442] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[218443] "expr temp" "temp"
      (218452 'move' _iterator[218443](218450 call _getIterator(218436 call(218433 call .(406412 call . this[218419] c"_value") c"dimIter") d[218421] ind[218423])))
      Defer
      {
        {
          (218467 call _freeIterator _iterator[218443])
        }
      }
      { scopeless type
        (218457 'move' _indexOfInterest[218442](218454 call iteratorIndex _iterator[218443]))
      }
      ForLoop[218444]
      {
        unknown i[218428] "index var" "insert auto destroy"
        (218462 'move' i[218428] _indexOfInterest[218442])
        (218439 yield i[218428])
        label _continueLabel[218447]
        _indexOfInterest[218442]
        _iterator[218443]
      }
      label _breakLabel[218448]
    }
  }
  function _domain[225034](?).shape[218476](arg _mt[218480]:_MT[201], arg this[218478]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (218499 return(218501 call(443812 call . this[218478] c"chpl_shapeAs") int(64)[10]))
  }
  where {
    (218486 call ||(218492 call(218489 call . this[218478] c"isRectangular"))(218497 call(218494 call . this[218478] c"isSparse")))
  }
  { scopeless type
    (218482 call *(443806 call . this[218478] c"rank") int(64)[10])
  }
  function _domain[225034](?).chpl_shapeAs[218507](arg _mt[218515]:_MT[201], arg this[218509]:_domain[225034](?), arg t[218512] :
  integral[159](?)) : _unknown[42] "method" "primary method"
  {
    unknown s[218519](218520 call *(443817 call . this[218509] c"rank") t[218512])
    (218525 'end of statement')
    {
      unknown _indexOfInterest[218558] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[218559] "expr temp" "temp"
      (218592 'move' _iterator[218559](218545 call _build_tuple(218576 call _getIterator(218586 call chpl_direct_counted_range_iter 0(218582 call . s[218519] c"size")))(218590 call _getIterator(218589 call(443825 call . this[218509] c"dims")))))
      Defer
      {
        {
          (218620 call _freeIterator _iterator[218559])
        }
      }
      { scopeless type
        (218597 'move' _indexOfInterest[218558](218594 call iteratorIndex _iterator[218559]))
      }
      ForLoop[218560]
      {
        (218602 call _check_tuple_var_decl _indexOfInterest[218558] 2)
        unknown i[218527] "index var" "insert auto destroy"
        (218609 'move' i[218527](218606 call _indexOfInterest[218558] 0))
        unknown r[218529] "index var" "insert auto destroy"
        (218615 'move' r[218529](218612 call _indexOfInterest[218558] 1))
        (218546 call =(218549 call s[218519] i[218527])(218555 call(218552 call . r[218529] c"sizeAs") t[218512]))
        label _continueLabel[218563]
        _indexOfInterest[218558]
        _iterator[218559]
      }
      label _breakLabel[218564]
    }
    (218627 return s[218519])
  }
  function _domain[225034](?).shape[218631](arg _mt[218635]:_MT[201], arg this[218633]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown s[218644](218648 call _build_tuple(218647 'typeof'(443830 call . this[218633] c"size")))
    (218651 'end of statement')
    (218652 call =(218655 call s[218644] 0)(443835 call . this[218633] c"size"))
    (218658 return s[218644])
  }
  where {
    (218641 call(218638 call . this[218633] c"isAssociative"))
  }
  function _domain[225034](?).shape[218663](arg _mt[218667]:_MT[201], arg this[218665]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens" "no return value for void"
  {
    (218671 call compilerError ".shape not supported on this domain")
  }
  function _domain[225034](?).indices[218677](arg _mt[218681]:_MT[201], arg this[218679]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens" "no return value for void"
  {
    (218685 call compilerError "domains do not support '.indices'")
  }
  function _domain[225034](?).boundingBox[218691](arg _mt[218695]:_MT[201], arg this[218693]:_domain[225034](?)) : _unknown[42] "method" "primary method"
  {
    unknown dst[218704](218705 call *(443840 call . this[218693] c"rank")(218709 call range[240](?)(218711 call . this[218693] c"idxType") both[107114] one[107127]))
    (218723 'end of statement')
    const src[218725] "const"(218730 call(218727 call . this[218693] c"dims"))
    (218732 'end of statement')
    {
      unknown dim[218733] "index var" 0
      unknown tmp[218757] "maybe param" "temp"
      (218769 'move' tmp[218757](218767 call chpl_compute_low_param_loop_bound 0(218736 call -(443845 call . this[218693] c"rank") 1)))
      unknown tmp[218758] "maybe param" "temp"
      (218779 'move' tmp[218758](218777 call chpl_compute_high_param_loop_bound 0(218774 call -(443853 call . this[218693] c"rank") 1)))
      unknown tmp[218759] "maybe param" "temp"
      (218782 'move' tmp[218759] 1)
      ParamForLoop[218784]
      { dim[218733] tmp[218757] tmp[218758] tmp[218759]
        (218742 call =(218745 call dst[218704] dim[218733])(218755 call(218752 call .(218748 call src[218725] dim[218733]) c"boundingBox")))
      }
      label _unused_continueLabel[218761]
      label _breakLabel[218760]
    }
    (218793 return(218798 call chpl__buildDomainExpr(218796 'expand_tuple' dst[218704]) 1))
  }
  where {
    (218701 call(218698 call . this[218693] c"isRectangular"))
  }
  function _domain[225034](?).low[218803](arg _mt[218807]:_MT[201], arg this[218805]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (218810 return(218812 call .(406426 call . this[218805] c"_value") c"dsiAlignedLow"))
  }
  function _domain[225034](?).low[218817](arg _mt[218821]:_MT[201], arg this[218819]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens" "no return value for void"
  {
    (218830 call compilerError "associative domains do not support '.low'")
  }
  where {
    (218827 call(218824 call . this[218819] c"isAssociative"))
  }
  function _domain[225034](?).high[218837](arg _mt[218841]:_MT[201], arg this[218839]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (218844 return(218846 call .(406431 call . this[218839] c"_value") c"dsiAlignedHigh"))
  }
  function _domain[225034](?).high[218851](arg _mt[218855]:_MT[201], arg this[218853]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens" "no return value for void"
  {
    (218864 call compilerError "associative domains do not support '.high'")
  }
  where {
    (218861 call(218858 call . this[218853] c"isAssociative"))
  }
  function _domain[225034](?).lowBound[218871](arg _mt[218875]:_MT[201], arg this[218873]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (218878 return(218880 call .(406436 call . this[218873] c"_value") c"dsiLow"))
  }
  function _domain[225034](?).highBound[218885](arg _mt[218889]:_MT[201], arg this[218887]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (218892 return(218894 call .(406440 call . this[218887] c"_value") c"dsiHigh"))
  }
  function _domain[225034](?).first[218899](arg _mt[218903]:_MT[201], arg this[218901]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (218906 return(218908 call .(406444 call . this[218901] c"_value") c"dsiFirst"))
  }
  function _domain[225034](?).last[218913](arg _mt[218917]:_MT[201], arg this[218915]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (218920 return(218922 call .(406448 call . this[218915] c"_value") c"dsiLast"))
  }
  function _domain[225034](?).chpl_checkEltType[218927](arg _mt[218933]:_MT[201], arg this[218929]:_domain[225034](?), arg eltType[218931]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    if(218946 call _cond_test(218942 call == eltType[218931] void[4]))
    {
      (218938 call compilerError "array element type cannot be 'void'")
    }
    if(218960 call _cond_test(218956 call == eltType[218931] nothing[7]))
    {
      (218952 call compilerError "array element type cannot be 'nothing'")
    }
    if(219043 call _cond_test(219041 call isGenericType eltType[218931]))
    {
      (218966 call compilerWarning(218967 call + "creating an array with element type "(218972 call : eltType[218931] string[244])))
      if(218995 call _cond_test(218982 call &&(218985 call isClassType eltType[218931])(218987 call !(218990 call isGenericType(218991 call : eltType[218931] borrowed[174](?))))))
      {
        (218978 call compilerWarning "which is a class type with generic management")
      }
      (219000 call compilerError "array element type cannot currently be generic")
    }
    {
      if(219036 call _cond_test(219024 call &&(219030 call(219027 call . this[218929] c"isSparse"))(219031 call !(219034 call isDefaultInitializable eltType[218931]))))
      {
        if(219020 call _cond_test(219018 call isNonNilableClass eltType[218931]))
        {
          (219007 call compilerError "sparse arrays of non-nilable classes are not currently supported")
        }
        {
          (219013 call compilerError "sparse arrays of non-default-initializable types are not currently supported")
        }
      }
    }
  }
  function _domain[225034](?).chpl_checkNegativeStride[219050](arg _mt[219054]:_MT[201], arg this[219052]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    if(219060 call _cond_test noNegativeStrideWarnings[209958])
    {
      (219057 return _void[46])
    }
    if(219149 call _cond_test(219148 call(219145 call . this[219052] c"isRectangular")))
    {
      if(219140 call _cond_test(219130 call !(219139 call(219136 call .(219133 call . this[219052] c"strides") c"isPositive"))))
      {
        {
          unknown _indexOfInterest[219098] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[219099] "expr temp" "temp"
          (219108 'move' _iterator[219099](219106 call _getIterator(219070 call chpl__tuplify(219072 call . this[219052] c"stride"))))
          Defer
          {
            {
              (219123 call _freeIterator _iterator[219099])
            }
          }
          { scopeless type
            (219113 'move' _indexOfInterest[219098](219110 call iteratorIndex _iterator[219099]))
          }
          ForLoop[219100]
          {
            unknown s[219067] "index var" "insert auto destroy"
            (219118 'move' s[219067] _indexOfInterest[219098])
            {
              if(219094 call _cond_test(219090 call < s[219067] 0))
              {
                (219078 call warning "arrays and array slices with negatively-strided dimensions are currently unsupported and may lead to unexpected behavior; comp(219086 call(219083 call . this[219052] c"dsiDims")))
                break _breakLabel[219104] _breakLabel[219104]
              }
            }
            label _continueLabel[219103]
            _indexOfInterest[219098]
            _iterator[219099]
          }
          label _breakLabel[219104]
        }
      }
    }
  }
  function _domain[225034](?).buildArray[219155](arg _mt[219165]:_MT[201], arg this[219157]:_domain[225034](?), arg eltType[219159]:_any[141](?), param arg initElts[219162] :
  bool[19]) : _unknown[42] "method" "primary method" "no copy return"
  {
    (219169 call(443873 call . this[219157] c"chpl_checkEltType") eltType[219159])
    (219172 call(443878 call . this[219157] c"chpl_checkNegativeStride"))
    unknown x[219174](219179 call(219176 call .(406457 call . this[219157] c"_value") c"dsiBuildArray") eltType[219159] initElts[219162])
    (219183 'end of statement')
    function help[219184]() : _unknown[42] "dont disable remote value forwarding" "no return value for void"
    {
      (219193 call(219190 call .(406461 call . this[219157] c"_value") c"add_arr") x[219174])
    }
    (219198 call help)
    (219200 call chpl_incRefCountsForDomainsInArrayEltTypes x[219174](219203 call . x[219174] c"eltType"))
    (219206 return(219208 call _newArray x[219174]))
  }
  function _domain[225034](?).tryCreateArray[219212](arg _mt[219218]:_MT[201], arg this[219214]:_domain[225034](?), arg eltType[219216]:_any[141](?)) : _unknown[42] throws "method" "primary method" "no copy return" "@unstable"
  {
    if(219243 call _cond_test(219232 call !(219234 'resolves'(219241 call(219238 call .(406466 call . this[219214] c"_value") c"doiTryCreateArray") eltType[219216]))))
    {
      (219222 call compilerError(219223 call + "cannot call 'tryCreateArray' on domains that do not" " support a 'doiTryCreateArray' method."))
    }
    (219249 call(443888 call . this[219214] c"chpl_checkEltType") eltType[219216])
    (219252 call(443893 call . this[219214] c"chpl_checkNegativeStride"))
    unknown x[219254](219259 call(219256 call .(406470 call . this[219214] c"_value") c"doiTryCreateArray") eltType[219216])
    (219262 'end of statement')
    function help[219263]() : _unknown[42] "dont disable remote value forwarding" "no return value for void"
    {
      (219270 call(219267 call .(406474 call . this[219214] c"_value") c"add_arr") x[219254])
    }
    (219275 call help)
    (219277 call chpl_incRefCountsForDomainsInArrayEltTypes x[219254](219280 call . x[219254] c"eltType"))
    (219283 return(219285 call _newArray x[219254]))
  }
  function _domain[225034](?).tryCreateArray[219289](arg _mt[219300]:_MT[201], arg this[219291]:_domain[225034](?), arg eltType[219293]:_any[141](?), arg initExpr[219297] :
  unknown t[219295]) : _unknown[42] throws "method" "primary method" "no copy return" "@unstable"
  {
    if(219329 call _cond_test(219320 call !(219322 'resolves'(219327 call(219324 call .(406479 call . this[219291] c"_value") c"doiTryCreateArray") eltType[219293]))))
    {
      (219314 call compilerError(219315 call + "cannot call 'tryCreateArray' on domains that do not" " support a 'doiTryCreateArray' method."))
    }
    (219335 call(443906 call . this[219291] c"chpl_checkEltType") eltType[219293])
    (219338 call(443911 call . this[219291] c"chpl_checkNegativeStride"))
    unknown x[219340](219345 call(219342 call .(406483 call . this[219291] c"_value") c"doiTryCreateArray") eltType[219293])
    (219348 'end of statement')
    function help[219349]() : _unknown[42] "dont disable remote value forwarding" "no return value for void"
    {
      (219356 call(219353 call .(406487 call . this[219291] c"_value") c"add_arr") x[219340])
    }
    (219361 call help)
    (219363 call chpl_incRefCountsForDomainsInArrayEltTypes x[219340](219366 call . x[219340] c"eltType"))
    unknown res[219370](219372 call _newArray x[219340])
    (219375 'end of statement')
    (219376 call = res[219370] initExpr[219297])
    (219380 return res[219370])
  }
  where {
    (219302 call ||(395461 'is_subtype' _iteratorRecord[165](?) t[219295])(395462 'is_coercible' eltType[219293] t[219295]))
  }
  function _domain[225034](?).tryCreateArray[219385](arg _mt[219400]:_MT[201], arg this[219387]:_domain[225034](?), arg eltType[219389]:_any[141](?), arg initExpr[219397] :
  (219395 call chpl__buildArrayRuntimeType unknown dom[219391] unknown arrayEltType[219393])) : _unknown[42] throws "method" "primary method" "no copy return" "@unstable"
  {
    if(219435 call _cond_test(219426 call !(219428 'resolves'(219433 call(219430 call .(406494 call . this[219387] c"_value") c"doiTryCreateArray") eltType[219389]))))
    {
      (219420 call compilerError(219421 call + "cannot call 'tryCreateArray' on domains that do not" " support a 'doiTryCreateArray' method."))
    }
    if(219561 call _cond_test 1)
    {
      unknown _indexOfInterest[219491] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[219492] "expr temp" "temp"
      (219519 'move' _iterator[219492](219463 call _build_tuple(219505 call _getIterator(219504 call(219501 call . this[219387] c"dims")))(219512 call _getIterator(219511 call(219508 call . dom[219391] c"dims")))(219517 call _getIterator(219515 call chpl_build_low_bounded_range 0))))
      Defer
      {
        {
          (219553 call _freeIterator _iterator[219492])
        }
      }
      { scopeless type
        (219524 'move' _indexOfInterest[219491](219521 call iteratorIndex _iterator[219492]))
      }
      ForLoop[219493]
      {
        (219529 call _check_tuple_var_decl _indexOfInterest[219491] 3)
        unknown d[219441] "index var" "insert auto destroy"
        (219536 'move' d[219441](219533 call _indexOfInterest[219491] 0))
        unknown ad[219443] "index var" "insert auto destroy"
        (219542 'move' ad[219443](219539 call _indexOfInterest[219491] 1))
        unknown i[219445] "index var" "insert auto destroy"
        (219548 'move' i[219445](219545 call _indexOfInterest[219491] 2))
        if(219486 call _cond_test(219476 call !=(219479 call . d[219441] c"size")(219483 call . ad[219443] c"size")))
        {
          (219465 call halt(219466 call + "Domain size mismatch in 'tryCreateArray' dimension "(219471 call : i[219445] string[244])))
        }
        label _continueLabel[219496]
        _indexOfInterest[219491]
        _iterator[219492]
      }
      label _breakLabel[219497]
    }
    (219566 call(443927 call . this[219387] c"chpl_checkEltType") eltType[219389])
    (219569 call(443932 call . this[219387] c"chpl_checkNegativeStride"))
    unknown x[219571](219576 call(219573 call .(406502 call . this[219387] c"_value") c"doiTryCreateArray") eltType[219389])
    (219579 'end of statement')
    function help[219580]() : _unknown[42] "dont disable remote value forwarding" "no return value for void"
    {
      (219587 call(219584 call .(406506 call . this[219387] c"_value") c"add_arr") x[219571])
    }
    (219592 call help)
    (219594 call chpl_incRefCountsForDomainsInArrayEltTypes x[219571](219597 call . x[219571] c"eltType"))
    unknown res[219601](219603 call _newArray x[219571])
    (219606 'end of statement')
    (219607 call = res[219601] initExpr[219397])
    (219611 return res[219601])
  }
  where {
    (219402 call &&(219404 call ==(219407 call . this[219387] c"rank")(219411 call . dom[219391] c"rank"))(395463 'is_coercible' eltType[219389] arrayEltType[219393]))
  }
  function _domain[225034](?).buildArrayWith[219616](arg _mt[219632]:_MT[201], arg this[219618]:_domain[225034](?), arg eltType[219620]:_any[141](?), arg data[219625] :
  (219623 call _ddata[67573](?) eltType[219620]), arg allocSize[219629] :
  int(64)[10]) : _unknown[42] "method" "primary method" "no copy return"
  {
    (219636 call(443945 call . this[219618] c"chpl_checkEltType") eltType[219620])
    (219639 call(443950 call . this[219618] c"chpl_checkNegativeStride"))
    unknown x[219641](219648 call(219645 call .(406511 call . this[219618] c"_value") c"dsiBuildArrayWith") eltType[219620] data[219625] allocSize[219629])
    (219653 'end of statement')
    function help[219654]() : _unknown[42] "dont disable remote value forwarding" "no return value for void"
    {
      (219661 call(219658 call .(406515 call . this[219618] c"_value") c"add_arr") x[219641])
    }
    (219666 call help)
    (219668 call chpl_incRefCountsForDomainsInArrayEltTypes x[219641](219671 call . x[219641] c"eltType"))
    (219674 return(219676 call _newArray x[219641]))
  }
  function unsafeAssignManager[221006](?)._arraysOverLhsDom[219717](arg _mt[219721]:_MT[201], arg this[219719]:unsafeAssignManager[221006](?)) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[219745] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[219746] "expr temp" "temp"
      (219755 'move' _iterator[219746](219753 call _getIterator(219729 call .(406523 call . this[219719] c"_lhsInstance") c"_arrs")))
      Defer
      {
        {
          (219770 call _freeIterator _iterator[219746])
        }
      }
      { scopeless type
        (219760 'move' _indexOfInterest[219745](219757 call iteratorIndex _iterator[219746]))
      }
      ForLoop[219747]
      {
        unknown baseArr[219724] "index var" "insert auto destroy"
        (219765 'move' baseArr[219724] _indexOfInterest[219745])
        if(219740 call _cond_test(219735 call !(219738 call chpl__isArrayView baseArr[219724])))
        {
          (219732 yield baseArr[219724])
        }
        label _continueLabel[219750]
        _indexOfInterest[219745]
        _iterator[219746]
      }
      label _breakLabel[219751]
    }
  }
  function unsafeAssignManager[221006](?).postinit[219779](arg _mt[219783]:_MT[201], arg this[219781]:unsafeAssignManager[221006](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[219842] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[219843] "expr temp" "temp"
      (219852 'move' _iterator[219843](219850 call _getIterator(219789 call(443967 call . this[219781] c"_arraysOverLhsDom"))))
      Defer
      {
        {
          (219867 call _freeIterator _iterator[219843])
        }
      }
      { scopeless type
        (219857 'move' _indexOfInterest[219842](219854 call iteratorIndex _iterator[219843]))
      }
      ForLoop[219844]
      {
        unknown baseArr[219786] "index var" "insert auto destroy"
        (219862 'move' baseArr[219786] _indexOfInterest[219842])
        {
          if(219838 call _cond_test(443975 call . this[219781] c"_checks"))
          {
            if(219833 call _cond_test(219813 call &&(219815 call !(219823 call(219820 call . baseArr[219786] c"chpl_isElementTypeDefaultInitializable")))(219824 call !(219832 call(219829 call . baseArr[219786] c"chpl_isElementTypeNonNilableClass")))))
            {
              unknown msg[219794] "param"(219795 call +(219797 call + "Checks in 'unsafeAssign' for arrays of non-" "default-initializable elements are not ") "supported yet")
              (219809 'end of statement')
              (219811 call halt msg[219794])
            }
          }
        }
        label _continueLabel[219847]
        _indexOfInterest[219842]
        _iterator[219843]
      }
      label _breakLabel[219848]
    }
  }
  function unsafeAssignManager[221006](?).checks[219876](arg _mt[219880]:_MT[201], arg this[219878]:unsafeAssignManager[221006](?)) param : _unknown[42] "inline" "method" "primary method" "no parens"
  {
    (219883 return(443980 call . this[219878] c"_checks"))
  }
  function unsafeAssignManager[221006](?).isClassReferenceNil[219887](arg _mt[219893]:_MT[201], arg this[219889]:unsafeAssignManager[221006](?), const  ref arg x[219891]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    if(219923 call _cond_test(219920 call isClassType(219922 'typeof' x[219891])))
    {
      (219897 return(219913 IfExpr (219899 call isBorrowedOrUnmanagedClassType(219901 'typeof' x[219891])) then
      { scopeless
        (219902 call == x[219891] nil[32])
      } else
      { scopeless
        (219906 call ==(219909 call . x[219891] c"chpl_p") nil[32])
      } ))
    }
    {
      (219917 return 0)
    }
  }
  function unsafeAssignManager[221006](?).isClassReferenceNil[219929](arg _mt[219935]:_MT[201], arg this[219931]:unsafeAssignManager[221006](?), const  ref arg x[219933]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    (219938 return(219946 call(219943 call .(219940 'typeof' this[219931]) c"isClassReferenceNil") x[219933]))
  }
  function unsafeAssignManager[221006](?)._checkThatArrayShapeIsSupported[219950](arg _mt[219956]:_MT[201], arg this[219952]:unsafeAssignManager[221006](?), arg arr[219954]:_any[141](?)) param : _unknown[42] "method" "primary method" "no return value for void"
  {
    if(219989 call _cond_test(219982 call !(219988 call(219985 call . arr[219954] c"isDefaultRectangular"))))
    {
      (219961 call compilerError(219962 call +(219964 call +(219966 call + "The array shape "(219971 call :(219974 'typeof' arr[219954]) string[244])) " is ") "not supported"))
    }
  }
  function unsafeAssignManager[221006](?)._checkThatIndexMatchesArrayShape[219995](arg _mt[220003]:_MT[201], arg this[219997]:unsafeAssignManager[221006](?), arg arr[219999]:_any[141](?), arg idx[220001]:_any[141](?)) param : _unknown[42] "method" "primary method" "no return value for void"
  {
    if(220069 call _cond_test(220052 call ||(220054 call >(220057 call . arr[219999] c"rank") 1)(220061 call !=(220064 'typeof' idx[220001])(220066 call . arr[219999] c"idxType"))))
    {
      if(220048 call _cond_test(220034 call !=(220037 'typeof' idx[220001])(220038 call *(220041 call . arr[219999] c"rank")(220045 call . arr[219999] c"idxType"))))
      {
        (220009 call compilerError(220010 call +(220012 call +(220014 call + "invalid index type "(220019 call :(220022 'typeof' idx[220001]) string[244])) " for array with rank ")(220027 call :(220030 call . arr[219999] c"rank") string[244])))
      }
    }
  }
  function unsafeAssignManager[221006](?)._isBaseArrClassElementNil[220075](arg _mt[220085]:_MT[201], arg this[220077]:unsafeAssignManager[221006](?), arg baseArr[220080] :
  BaseArr[424790](?), arg idx[220083]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    (220088 return(220095 call(220092 call . baseArr[220080] c"chpl_unsafeAssignIsClassElementNil") this[220077](220098 call chpl__tuplify idx[220083])))
  }
  function unsafeAssignManager[221006](?).isElementInitialized[220102](arg _mt[220115]:_MT[201], arg this[220104]:unsafeAssignManager[221006](?), arg arr[220110] :
  (220108 call chpl__buildArrayRuntimeType unknown d[220106]), arg idx[220113]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    (220119 call(443998 call . this[220104] c"_checkThatArrayShapeIsSupported") arr[220110])
    (220122 call(444005 call . this[220104] c"_checkThatIndexMatchesArrayShape") arr[220110] idx[220113])
    if(220205 call _cond_test(444024 call . this[220104] c"_checks"))
    {
      unknown T[220127] "type variable"(220129 call . arr[220110] c"eltType")
      if(220176 call _cond_test(220174 call isNonNilableClassType T[220127]))
      {
        unknown baseArr[220135](220137 call chpl__getActualArray arr[220110])
        (220140 'end of statement')
        (220141 return(220142 call !(220145 call(444014 call . this[220104] c"_isBaseArrClassElementNil") baseArr[220135] idx[220113])))
      }
      {
        if(220169 call _cond_test(220164 call !(220167 call isDefaultInitializable T[220127])))
        {
          (220150 call halt(220151 call + "Checking if a non-default-initializable element is " "initialized is not supported yet"))
          (220159 return 0)
        }
        {
          (220162 return 1)
        }
      }
    }
    {
      unknown msg[220183] "param"(220184 call +(220186 call + "Cannot check initialization state of non-" "default-initializable array elements from a ") "manager initialized with 'checks=false'")
      (220198 'end of statement')
      (220200 call compilerError msg[220183])
      (220202 return 0)
    }
  }
  function unsafeAssignManager[221006](?)._checkIfAllElementsAreInitialized[220211](arg _mt[220217]:_MT[201], arg this[220213]:unsafeAssignManager[221006](?), arg baseArr[220215]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    if(220308 call _cond_test(220307 call(220304 call . baseArr[220215] c"chpl_isElementTypeNonNilableClass")))
    {
      {
        unknown _indexOfInterest[220243] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[220244] "expr temp" "temp"
        (220253 'move' _iterator[220244](220251 call _getIterator(220224 call(444030 call . this[220213] c"newIndices"))))
        Defer
        {
          {
            (220268 call _freeIterator _iterator[220244])
          }
        }
        { scopeless type
          (220258 'move' _indexOfInterest[220243](220255 call iteratorIndex _iterator[220244]))
        }
        ForLoop[220245]
        {
          unknown idx[220221] "index var" "insert auto destroy"
          (220263 'move' idx[220221] _indexOfInterest[220243])
          {
            if(220239 call _cond_test(220236 call(444035 call . this[220213] c"_isBaseArrClassElementNil") baseArr[220215] idx[220221]))
            {
              (220233 call(220230 call . baseArr[220215] c"chpl_unsafeAssignHaltUninitializedElement") idx[220221])
            }
          }
          label _continueLabel[220248]
          _indexOfInterest[220243]
          _iterator[220244]
        }
        label _breakLabel[220249]
      }
    }
    {
      if(220299 call _cond_test(220292 call !(220298 call(220295 call . baseArr[220215] c"chpl_isElementTypeDefaultInitializable"))))
      {
        (220277 call halt(220278 call + "internal error: checks for arrays of non-default-" "initializable elements are not supported"))
      }
      {
        (220288 call halt "Internal error!")
      }
    }
  }
  function unsafeAssignManager[221006](?)._ensureNoLongerManagingThis[220315](arg _mt[220319]:_MT[201], ref arg this[220317]:unsafeAssignManager[221006](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    if(220332 call _cond_test(220329 call !(444049 call . this[220317] c"_isActiveManager")))
    {
      (220322 return _void[46])
    }
    {
      (220324 call =(444044 call . this[220317] c"_isActiveManager") 0)
    }
    {
      unknown _indexOfInterest[220381] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[220382] "expr temp" "temp"
      (220391 'move' _iterator[220382](220389 call _getIterator(220341 call(444053 call . this[220317] c"_arraysOverLhsDom"))))
      Defer
      {
        {
          (220406 call _freeIterator _iterator[220382])
        }
      }
      { scopeless type
        (220396 'move' _indexOfInterest[220381](220393 call iteratorIndex _iterator[220382]))
      }
      ForLoop[220383]
      {
        unknown baseArr[220338] "index var" "insert auto destroy"
        (220401 'move' baseArr[220338] _indexOfInterest[220381])
        {
          if(220377 call _cond_test(220370 call !(220376 call(220373 call . baseArr[220338] c"chpl_isElementTypeDefaultInitializable"))))
          {
            if(220349 call _cond_test(444065 call . this[220317] c"_checks"))
            {
              (220345 call(444059 call . this[220317] c"_checkIfAllElementsAreInitialized") baseArr[220338])
            }
            const policy[220355] "const" normalInit[67542]
            (220361 'end of statement')
            (220368 call(220365 call . baseArr[220338] c"chpl_setResizePolicy") policy[220355])
          }
        }
        label _continueLabel[220386]
        _indexOfInterest[220381]
        _iterator[220382]
      }
      label _breakLabel[220387]
    }
  }
  function unsafeAssignManager[221006](?).deinit[220415](arg _mt[220419]:_MT[201], ref arg this[220417]:unsafeAssignManager[221006](?)) : _unknown[42] "destructor" "method" "primary method" "no return value for void"
  {
    (220423 call(444072 call . this[220417] c"_ensureNoLongerManagingThis"))
  }
  function unsafeAssignManager[221006](?)._isArrayOwnedByLhsDomain[220426](arg _mt[220432]:_MT[201], arg this[220428]:unsafeAssignManager[221006](?), arg arr[220430]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    (220435 return(220436 call ==(220444 call(220441 call . arr[220430] c"dsiGetBaseDom"))(444077 call . this[220428] c"_lhsInstance")))
  }
  function unsafeAssignManager[221006](?)._moveInitializeElement[220448](arg _mt[220458]:_MT[201], arg this[220450]:unsafeAssignManager[221006](?), ref arg arr[220452]:_any[141](?), arg idx[220454]:_any[141](?), in arg value[220456]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown elem[220470] "ref var"(220472 call arr[220452] idx[220454])
    (220475 'end of statement')
    (220477 call moveInitialize elem[220470] value[220456])
    (396816 'used modules list'(220468 'import' MemMove[209934].{moveInitialize}))
  }
  function unsafeAssignManager[221006](?)._checkNoChecksWhenNonDefaultInitializableEltType[220482](arg _mt[220488]:_MT[201], arg this[220484]:unsafeAssignManager[221006](?), arg arr[220486]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    if(220530 call _cond_test(444087 call . this[220484] c"_checks"))
    {
      if(220525 call _cond_test(220507 call &&(220509 call !(220512 call isDefaultInitializable(220514 call . arr[220486] c"eltType")))(220517 call !(220520 call isNonNilableClass(220522 call . arr[220486] c"eltType")))))
      {
        unknown msg[220494] "param"(220495 call +(220497 call + "Checks in 'unsafeAssign' for arrays of non-" "default-initializable elements are not ") "supported yet")
        (220503 'end of statement')
        (220505 call compilerError msg[220494])
      }
    }
  }
  function unsafeAssignManager[221006](?).initialize[220536](arg _mt[220556]:_MT[201], arg this[220538]:unsafeAssignManager[221006](?), ref arg arr[220544] :
  (220542 call chpl__buildArrayRuntimeType unknown d[220540]), arg idx[220547]:_any[141](?), in arg value[220553] :
  (220550 call . arr[220544] c"eltType")) : _unknown[42] "method" "primary method" "no return value for void"
  {
    if(220606 call _cond_test(220598 call !=(220601 call . arr[220544] c"eltType")(220605 'typeof' value[220553])))
    {
      (220569 call compilerError(220570 call +(220572 call +(220574 call +(220576 call + "Initialization value type '"(220581 call :(220584 'typeof' value[220553]) string[244])) "' does not match array element type '")(220589 call :(220592 call . arr[220544] c"eltType") string[244])) "'"))
    }
    (220612 call(444093 call . this[220538] c"_checkThatArrayShapeIsSupported") arr[220544])
    (220615 call(444098 call . this[220538] c"_checkThatIndexMatchesArrayShape") arr[220544] idx[220547])
    (220619 call(444106 call . this[220538] c"_checkNoChecksWhenNonDefaultInitializableEltType") arr[220544])
    if(220653 call _cond_test(220648 call isDefaultInitializable(220650 call . arr[220544] c"eltType")))
    {
      (220622 call compilerError(220623 call +(220625 call +(220627 call +(220629 call + "Cannot call 'initialize' on array with " "default-initializable element type ") "'")(220638 call :(220641 call . arr[220544] c"eltType") string[244])) "'"))
    }
    if(220674 call _cond_test(220669 call !(220672 call(444113 call . this[220538] c"_isArrayOwnedByLhsDomain") arr[220544])))
    {
      (220659 call halt(220660 call + "Can only initialize elements of arrays declared over " "the domain being resized"))
    }
    if(220702 call _cond_test(220691 call !(220700 call(220697 call .(220694 call . arr[220544] c"_dom") c"contains") idx[220547])))
    {
      (220680 call halt(220689 'try!-expr'(220687 call(220684 call . "Array index out of bounds: %\?" c"format") idx[220547])))
    }
    if(220729 call _cond_test(444130 call . this[220538] c"_checks"))
    {
      if(220724 call _cond_test(220721 call(444123 call . this[220538] c"isElementInitialized") arr[220544] idx[220547]))
      {
        (220710 call halt(220719 'try!-expr'(220717 call(220714 call . "Element at array index '%\?' is already initialized" c"format") idx[220547])))
      }
    }
    (220734 call(444136 call . this[220538] c"_moveInitializeElement") arr[220544] idx[220547] value[220553])
    (396818 'used modules list'(220567 'import' FormattedIO[208298].{string}))
  }
  function unsafeAssignManager[221006](?).enterContext[220740](arg _mt[220744]:_MT[201], ref arg this[220742]:unsafeAssignManager[221006](?)) ref : _unknown[42] "method" "primary method"
  {
    if(220759 call _cond_test(444149 call . this[220742] c"_isActiveManager"))
    {
      (220749 call halt "Cannot nest a manager for unsafe domain assignment")
    }
    {
      (220754 call =(444144 call . this[220742] c"_isActiveManager") 1)
    }
    {
      unknown _indexOfInterest[220845] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[220846] "expr temp" "temp"
      (220855 'move' _iterator[220846](220853 call _getIterator(220766 call(444153 call . this[220742] c"_arraysOverLhsDom"))))
      Defer
      {
        {
          (220870 call _freeIterator _iterator[220846])
        }
      }
      { scopeless type
        (220860 'move' _indexOfInterest[220845](220857 call iteratorIndex _iterator[220846]))
      }
      ForLoop[220847]
      {
        unknown baseArr[220763] "index var" "insert auto destroy"
        (220865 'move' baseArr[220763] _indexOfInterest[220845])
        {
          if(220776 call _cond_test(220775 call(220772 call . baseArr[220763] c"chpl_isElementTypeDefaultInitializable")))
          {
            continue _continueLabel[220850] _continueLabel[220850]
          }
          if(220841 call _cond_test(220840 call(220837 call . baseArr[220763] c"chpl_isElementTypeNonNilableClass")))
          {
            const policy[220783] "const"(220793 IfExpr (444158 call . this[220742] c"_checks") then
            { scopeless
              skipInitButClearMem[67546]
            } else
            { scopeless
              skipInit[67544]
            } )
            (220797 'end of statement')
            (220802 call(220799 call . baseArr[220763] c"chpl_setResizePolicy") policy[220783])
          }
          {
            if(220832 call _cond_test(444165 call . this[220742] c"_checks"))
            {
              (220807 call halt(220808 call + "Runtime checks are currently only supported for " "arrays of non-nilable classes"))
            }
            {
              const policy[220818] "const" skipInitButClearMem[67546]
              (220824 'end of statement')
              (220829 call(220826 call . baseArr[220763] c"chpl_setResizePolicy") policy[220818])
            }
          }
        }
        label _continueLabel[220850]
        _indexOfInterest[220845]
        _iterator[220846]
      }
      label _breakLabel[220851]
    }
    unknown lhsTmpDom[220878](220879 'new'(220881 call _domain[225034](?)(444173 call . this[220742] c"_lhsPid")(444178 call . this[220742] c"_lhsInstance")(_unowned = 1)))
    (220887 'end of statement')
    unknown rhsTmpDom[220889](220890 'new'(220892 call _domain[225034](?)(444186 call . this[220742] c"_rhsPid")(444193 call . this[220742] c"_rhsInstance")(_unowned = 1)))
    (220898 'end of statement')
    (220899 call = lhsTmpDom[220878] rhsTmpDom[220889])
    (220903 return this[220742])
  }
  function unsafeAssignManager[221006](?).exitContext[220907](arg _mt[220918]:_MT[201], ref arg this[220909]:unsafeAssignManager[221006](?), in arg err[220915] :
  (220912 call _owned[238](?) borrowed Error?[467977])) : _unknown[42] throws "method" "primary method" "no return value for void"
  {
    (220922 call(444202 call . this[220909] c"_ensureNoLongerManagingThis"))
    if(220927 call _cond_test err[220915])
    {
      (220923 'throw' err[220915])
    }
  }
  function unsafeAssignManager[221006](?).newIndices[220934](arg _mt[220938]:_MT[201], arg this[220936]:unsafeAssignManager[221006](?)) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown rhsTmpDom[220942](220943 'new'(220945 call _domain[225034](?)(444210 call . this[220936] c"_rhsPid")(444215 call . this[220936] c"_rhsInstance")(_unowned = 1)))
    (220951 'end of statement')
    {
      unknown _indexOfInterest[220971] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[220972] "expr temp" "temp"
      (220981 'move' _iterator[220972](220979 call _getIterator rhsTmpDom[220942]))
      Defer
      {
        {
          (220996 call _freeIterator _iterator[220972])
        }
      }
      { scopeless type
        (220986 'move' _indexOfInterest[220971](220983 call iteratorIndex _iterator[220972]))
      }
      ForLoop[220973]
      {
        unknown idx[220952] "index var" "insert auto destroy"
        (220991 'move' idx[220952] _indexOfInterest[220971])
        if(220966 call _cond_test(220958 call !(220964 call(220961 call .(406563 call . this[220936] c"_oldLhsDomainCopy") c"contains") idx[220952])))
        {
          (220955 yield idx[220952])
        }
        label _continueLabel[220976]
        _indexOfInterest[220971]
        _iterator[220972]
      }
      label _breakLabel[220977]
    }
  }
  function _domain[225034](?).unsafeAssign[221008](arg _mt[221022]:_MT[201], ref arg this[221010]:_domain[225034](?), const  ref arg dom[221013] :
  _domain[225034](?), param arg checks[221018] :
  bool[19] =
  0) : _unknown[42] "method" "primary method"
  {
    (221025 return(221026 'new'(221028 call unsafeAssignManager[221006](?)(_lhsInstance =(444227 call . this[221010] c"_value"))(_lhsPid =(444232 call . this[221010] c"_pid"))(_oldLhsDomainCopy = this[221010])(_rhsInstance =(221036 call . dom[221013] c"_value"))(_rhsPid =(221041 call . dom[221013] c"_pid"))(_checks = checks[221018])(_isActiveManager = 0))))
  }
  function _domain[225034](?).clear[221051](arg _mt[221055]:_MT[201], ref arg this[221053]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown emptyDom[221064](221066 'typeof' this[221053])
    (221068 'end of statement')
    (221069 call = this[221053] emptyDom[221064])
  }
  where {
    (221061 call(221058 call . this[221053] c"isRectangular"))
  }
  function _domain[225034](?).clear[221076](arg _mt[221080]:_MT[201], ref arg this[221078]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (221089 call(221086 call .(406570 call . this[221078] c"_value") c"dsiClear"))
  }
  function _domain[225034](?).remove[221092](arg _mt[221098]:_MT[201], ref arg this[221094]:_domain[225034](?), arg idx[221096]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    (221101 return(221108 call(221105 call .(406574 call . this[221094] c"_value") c"dsiRemove") idx[221096]))
  }
  function _domain[225034](?).add[221112](arg _mt[221118]:_MT[201], ref arg this[221114]:_domain[225034](?), in arg idx[221116]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    if(221127 call _cond_test(221126 call(444242 call . this[221114] c"isRectangular")))
    {
      (221122 call compilerError "Cannot add indices to a rectangular domain")
    }
    if(221167 call _cond_test(221142 call ||(395465 'is_coercible'(444248 call . this[221114] c"fullIdxType")(221147 'typeof' idx[221116]))(221149 call &&(221151 call &&(221154 call(444252 call . this[221114] c"isSparse"))(221155 call ==(444256 call . this[221114] c"rank") 1))(395466 'is_coercible'(221163 call * 1(444261 call . this[221114] c"idxType"))(221162 'typeof' idx[221116])))))
    {
      (221132 return(221139 call(221136 call .(406578 call . this[221114] c"_value") c"dsiAdd") idx[221116]))
    }
    unknown promoType[221173] "type variable"(221174 'scalar promotion type' idx[221116])
    if(221248 call _cond_test(395467 'is_coercible'(444286 call . this[221114] c"fullIdxType") promoType[221173]))
    {
      if(221224 call _cond_test(221210 call ||(221213 call(444274 call . this[221114] c"isSparse"))(221214 call &&(221217 call(444278 call . this[221114] c"isAssociative"))(221218 call !(221221 call . this[221114] c"parSafe")))))
      {
        (221179 call compilerWarning "this promoted addition of indices to "(221191 IfExpr (221184 call(444266 call . this[221114] c"isSparse")) then
        { scopeless
          "a sparse"
        } else
        { scopeless
          "an associative"
        } ) " domain may be unsafe due to race conditions;" " consider replacing promotion with an explicit for loop"(221206 IfExpr (221201 call(444270 call . this[221114] c"isSparse")) then
        { scopeless
          ""
        } else
        { scopeless
          " or declaring the domain type with 'parSafe=true'"
        } ))
      }
      (221229 return(221242 'reduce' SumReduceScanOp[429526](?)(221240 [  unknown oneIdx[221231] "index var"  in  idx[221116] ]
      {
        (221238 call(221235 call .(406583 call . this[221114] c"_value") c"dsiAdd") oneIdx[221231])
      } ) 0))
    }
    (221253 call compilerError "cannot add a "(221257 call :(221260 'typeof' idx[221116]) string[244]) " to "(221264 call domainDescription this[221114]) " with idxType "(221267 call :(444292 call . this[221114] c"idxType") string[244]))
  }
  function _domain[225034](?).bulkAdd[221273](arg _mt[221299]:_MT[201], ref arg this[221275]:_domain[225034](?), arg inds[221284] :
  (221282 call chpl__buildArrayRuntimeType nil[32](221279 call .(406587 call . this[221275] c"_value") c"idxType")), arg dataSorted[221288] =
  0, arg isUnique[221292] =
  0, arg addOn[221296] =
  nilLocale[135253]) : _unknown[42] "method" "primary method" "@unstable"
  {
    if(221324 call _cond_test(221323 call(221320 call . inds[221284] c"isEmpty")))
    {
      (221316 return 0)
    }
    (221329 return(221334 call(221331 call .(406597 call . this[221275] c"_value") c"dsiBulkAdd") inds[221284] dataSorted[221288] isUnique[221292] addOn[221296]))
  }
  where {
    (221301 call &&(221307 call(221304 call . this[221275] c"isSparse"))(221308 call ==(221311 call .(406592 call . this[221275] c"_value") c"rank") 1))
  }
  function _domain[225034](?).bulkAddNoPreserveInds[221342](arg _mt[221368]:_MT[201], ref arg this[221344]:_domain[225034](?), ref arg inds[221353] :
  (221351 call chpl__buildArrayRuntimeType nil[32](221348 call .(406601 call . this[221344] c"_value") c"idxType")), arg dataSorted[221357] =
  0, arg isUnique[221361] =
  0, arg addOn[221365] =
  nilLocale[135253]) : _unknown[42] "method" "primary method" "@unstable"
  {
    if(221393 call _cond_test(221392 call(221389 call . inds[221353] c"isEmpty")))
    {
      (221385 return 0)
    }
    (221398 return(221403 call(221400 call .(406611 call . this[221344] c"_value") c"dsiBulkAddNoPreserveInds") inds[221353] dataSorted[221357] isUnique[221361] addOn[221365]))
  }
  where {
    (221370 call &&(221376 call(221373 call . this[221344] c"isSparse"))(221377 call ==(221380 call .(406606 call . this[221344] c"_value") c"rank") 1))
  }
  function _domain[225034](?).createIndexBuffer[221411](arg _mt[221419]:_MT[201], arg this[221413]:_domain[225034](?), arg size[221416] :
  int(64)[10]) : _unknown[42] "inline" "method" "primary method" "@unstable"
  {
    (221422 return(221427 call(221424 call .(406615 call . this[221413] c"_value") c"dsiCreateIndexBuffer") size[221416]))
  }
  function _domain[225034](?).bulkAdd[221431](arg _mt[221463]:_MT[201], ref arg this[221433]:_domain[225034](?), arg inds[221448] :
  (221446 call chpl__buildArrayRuntimeType nil[32](221436 call *(221439 call .(406619 call . this[221433] c"_value") c"rank")(221443 call .(406623 call . this[221433] c"_value") c"idxType"))), arg dataSorted[221452] =
  0, arg isUnique[221456] =
  0, arg addOn[221460] =
  nilLocale[135253]) : _unknown[42] "method" "primary method" "@unstable"
  {
    if(221488 call _cond_test(221487 call(221484 call . inds[221448] c"isEmpty")))
    {
      (221480 return 0)
    }
    (221493 return(221498 call(221495 call .(406633 call . this[221433] c"_value") c"dsiBulkAdd") inds[221448] dataSorted[221452] isUnique[221456] addOn[221460]))
  }
  where {
    (221465 call &&(221471 call(221468 call . this[221433] c"isSparse"))(221472 call >(221475 call .(406628 call . this[221433] c"_value") c"rank") 1))
  }
  function _domain[225034](?).bulkAddNoPreserveInds[221506](arg _mt[221538]:_MT[201], ref arg this[221508]:_domain[225034](?), ref arg inds[221523] :
  (221521 call chpl__buildArrayRuntimeType nil[32](221511 call *(221514 call .(406637 call . this[221508] c"_value") c"rank")(221518 call .(406641 call . this[221508] c"_value") c"idxType"))), arg dataSorted[221527] =
  0, arg isUnique[221531] =
  0, arg addOn[221535] =
  nilLocale[135253]) : _unknown[42] "method" "primary method" "@unstable"
  {
    if(221563 call _cond_test(221562 call(221559 call . inds[221523] c"isEmpty")))
    {
      (221555 return 0)
    }
    (221568 return(221573 call(221570 call .(406651 call . this[221508] c"_value") c"dsiBulkAddNoPreserveInds") inds[221523] dataSorted[221527] isUnique[221531] addOn[221535]))
  }
  where {
    (221540 call &&(221546 call(221543 call . this[221508] c"isSparse"))(221547 call >(221550 call .(406646 call . this[221508] c"_value") c"rank") 1))
  }
  function _domain[225034](?).bulkAdd[221581](arg _mt[221589]:_MT[201], arg this[221583]:_domain[225034](?), arg args[221586]:_any[141](?) ...) : _unknown[42] "last resort" "method" "primary method" "no return value for void"
  {
    (221593 call compilerError "incompatible argument(s) or this domain type does not support 'bulkAdd'")
  }
  function _domain[225034](?).bulkAddNoPreserveInds[221599](arg _mt[221607]:_MT[201], arg this[221601]:_domain[225034](?), arg args[221604]:_any[141](?) ...) : _unknown[42] "last resort" "method" "primary method" "no return value for void"
  {
    (221611 call compilerError "incompatible argument(s) or this domain type does not support 'bulkAddNoPreserveInds'")
  }
  function _domain[225034](?).requestCapacity[221617](arg _mt[221623]:_MT[201], ref arg this[221619]:_domain[225034](?), arg capacity[221621]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    if(221636 call _cond_test(221632 call < capacity[221621] 0))
    {
      (221627 call halt "domain.requestCapacity can only be invoked when capacity >= 0")
    }
    if(221654 call _cond_test(221647 call !(221653 call(221650 call . this[221619] c"isAssociative"))))
    {
      (221642 call compilerError "domain.requestCapacity only applies to associative domains")
    }
    (221665 call(221662 call .(406656 call . this[221619] c"_value") c"dsiRequestCapacity") capacity[221621])
  }
  function _domain[225034](?).contains[221669](arg _mt[221683]:_MT[201], arg this[221671]:_domain[225034](?), const arg idx[221680] :
  (221673 call *(444319 call . this[221671] c"rank")(221677 call .(406660 call . this[221671] c"_value") c"idxType"))) : _unknown[42] "method" "primary method"
  {
    if(221722 call _cond_test(221710 call ||(221716 call(221713 call . this[221671] c"isRectangular"))(221721 call(221718 call . this[221671] c"isSparse"))))
    {
      (221686 return(221691 call(221688 call .(406664 call . this[221671] c"_value") c"dsiMember")(221693 call _makeIndexTuple(444323 call . this[221671] c"rank") idx[221680] "index")))
    }
    {
      (221700 return(221705 call(221702 call .(406668 call . this[221671] c"_value") c"dsiMember")(221707 call idx[221680] 0)))
    }
  }
  function _domain[225034](?).contains[221730](arg _mt[221743]:_MT[201], arg this[221732]:_domain[225034](?), const arg idx[221739] ... :
  (221735 call .(406674 call . this[221732] c"_value") c"idxType")) : _unknown[42] "inline" "method" "primary method"
  {
    (221746 return(221748 call(444333 call . this[221732] c"contains") idx[221739]))
  }
  function _domain[225034](?).contains[221752](arg _mt[221760]:_MT[201], arg this[221754]:_domain[225034](?), arg other[221757] :
  _domain[225034](?)) : _unknown[42] "method" "primary method"
  {
    if(221794 call _cond_test(221784 call !=(221787 call . this[221754] c"rank")(221791 call . other[221757] c"rank")))
    {
      (221764 call compilerError "rank mismatch in 'domain.contains()': "(221768 call :(221771 call . this[221754] c"rank") string[244]) " vs. "(221776 call :(221779 call . other[221757] c"rank") string[244]))
    }
    if(222003 call _cond_test(221991 call &&(221997 call(221994 call . this[221754] c"isRectangular"))(222002 call(221999 call . other[221757] c"isRectangular"))))
    {
      const thisDims[221801] "const"(221806 call(221803 call . this[221754] c"dims"))
      (221808 'end of statement')
      const otherDims[221810] "const"(221815 call(221812 call . other[221757] c"dims"))
      (221817 'end of statement')
      {
        unknown i[221818] "index var" 0
        unknown tmp[221849] "maybe param" "temp"
        (221861 'move' tmp[221849](221859 call chpl_compute_low_param_loop_bound 0(221825 call chpl__nudgeHighBound(221822 call . this[221754] c"rank"))))
        unknown tmp[221850] "maybe param" "temp"
        (221873 'move' tmp[221850](221871 call chpl_compute_high_param_loop_bound 0(221866 call chpl__nudgeHighBound(221868 call . this[221754] c"rank"))))
        unknown tmp[221851] "maybe param" "temp"
        (221876 'move' tmp[221851] 1)
        ParamForLoop[221878]
        { i[221818] tmp[221849] tmp[221850] tmp[221851]
          if(221844 call _cond_test(221832 call !(221840 call(221837 call .(221835 call thisDims[221801] i[221818]) c"contains")(221842 call otherDims[221810] i[221818]))))
          {
            (221829 return 0)
          }
        }
        label _unused_continueLabel[221853]
        label _breakLabel[221852]
      }
      (221887 return 1)
    }
    {
      if(221927 call _cond_test(221915 call !(395468 'is_coercible'(221924 call . this[221754] c"idxType")(221920 call . other[221757] c"idxType"))))
      {
        (221891 call compilerError "incompatible idxType in 'domain.contains()':" " cannot convert from '"(221898 call :(221901 call . other[221757] c"idxType") string[244]) "' to '"(221906 call :(221909 call . this[221754] c"idxType") string[244]) "'")
      }
      const otherSize[221933] "const"(221938 call(221935 call . other[221757] c"sizeAs") uint(64)[86])
      (221941 'end of statement')
      if(221949 call _cond_test(221945 call == otherSize[221933] 0))
      {
        (221942 return 1)
      }
      const thisSize[221955] "const"(221960 call(221957 call . this[221754] c"sizeAs") uint(64)[86])
      (221963 'end of statement')
      if(221971 call _cond_test(221967 call < thisSize[221955] otherSize[221933]))
      {
        (221964 return 0)
      }
      (221976 return(221989 'reduce' LogicalAndReduceScanOp[429773](?)(221987 forall  unknown i[221978] "index var"  in  other[221757] do
      {
        (221985 call(221982 call . this[221754] c"contains") i[221978])
      } ) 0))
    }
  }
  function _domain[225034](?).indexOrder[222009](arg _mt[222015]:_MT[201], arg this[222011]:_domain[225034](?), arg i[222013]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    (222018 return(222023 call(222020 call .(406695 call . this[222011] c"_value") c"dsiIndexOrder")(222025 call _makeIndexTuple(444349 call . this[222011] c"rank") i[222013] "index")))
  }
  function _domain[225034](?).orderToIndex[222031](arg _mt[222039]:_MT[201], arg this[222033]:_domain[225034](?), arg order[222036] :
  int(64)[10]) : _unknown[42] "method" "primary method" "@unstable"
  {
    if(222060 call _cond_test 1)
    {
      (222056 call(444356 call . this[222033] c"checkOrderBounds") order[222036])
    }
    unknown rankOrder[222066] order[222036]
    (222069 'end of statement')
    unknown idx[222071](222072 call *(444363 call . this[222033] c"rank")(222076 call .(406701 call . this[222033] c"_value") c"idxType"))
    (222080 'end of statement')
    unknown div[222082](222087 call(222084 call . this[222033] c"sizeAs") int(64)[10])
    (222090 'end of statement')
    {
      unknown i[222091] "index var" 0
      unknown tmp[222195] "maybe param" "temp"
      (222207 'move' tmp[222195](222205 call chpl_compute_low_param_loop_bound 0(222095 call chpl__nudgeHighBound(444367 call . this[222033] c"rank"))))
      unknown tmp[222196] "maybe param" "temp"
      (222216 'move' tmp[222196](222214 call chpl_compute_high_param_loop_bound 0(222212 call chpl__nudgeHighBound(444392 call . this[222033] c"rank"))))
      unknown tmp[222197] "maybe param" "temp"
      (222219 'move' tmp[222197] 1)
      ParamForLoop[222221]
      { i[222091] tmp[222195] tmp[222196] tmp[222197]
        {
          unknown currDim[222101](222106 call(222103 call . this[222033] c"dim") i[222091])
          (222109 'end of statement')
          (222110 call /= div[222082](222117 call(222114 call . currDim[222101] c"sizeAs") int(64)[10]))
          const lo[222120] "const"(222122 call . currDim[222101] c"low")
          (222126 'end of statement')
          const hi[222128] "const"(222130 call . currDim[222101] c"high")
          (222134 'end of statement')
          const stride[222136] "const"(222138 call . currDim[222101] c"stride")
          (222142 'end of statement')
          const zeroInd[222144] "const"(222145 call / rankOrder[222066] div[222082])
          (222150 'end of statement')
          unknown currInd[222152](222153 call * zeroInd[222144] stride[222136])
          (222158 'end of statement')
          if(222173 call _cond_test(222169 call < stride[222136] 0))
          {
            (222159 call += currInd[222152] hi[222128])
          }
          {
            (222164 call += currInd[222152] lo[222120])
          }
          (222179 call =(222182 call idx[222071] i[222091])(222184 call : currInd[222152](444385 call . this[222033] c"idxType")))
          (222188 call = rankOrder[222066](222191 call % rankOrder[222066] div[222082]))
        }
      }
      label _unused_continueLabel[222199]
      label _breakLabel[222198]
    }
    if(222245 call _cond_test(222238 call ==(222241 call . this[222033] c"rank") 1))
    {
      (222230 return(222232 call idx[222071] 0))
    }
    {
      (222235 return idx[222071])
    }
  }
  where {
    (222041 call &&(222047 call(222044 call . this[222033] c"isRectangular"))(222049 call isNumericType(222051 call . this[222033] c"idxType")))
  }
  function _domain[225034](?).orderToIndex[222254](arg _mt[222260]:_MT[201], arg this[222256]:_domain[225034](?), arg order[222258]:_any[141](?)) : _unknown[42] "last resort" "method" "primary method" "no return value for void"
  {
    if(222291 call _cond_test(222278 call &&(222284 call(222281 call . this[222256] c"isRectangular"))(222286 call isNumericType(222288 call . this[222256] c"idxType"))))
    {
      (222264 call compilerError "illegal value passed to orderToIndex():" " the argument 'order' must be an integer, excluding uint(64)")
    }
    {
      (222273 call compilerError "this domain type does not support 'orderToIndex'")
    }
  }
  function _domain[225034](?).checkOrderBounds[222299](arg _mt[222307]:_MT[201], arg this[222301]:_domain[225034](?), arg order[222304] :
  int(64)[10]) : _unknown[42] "method" "primary method" "no return value for void"
  {
    if(222362 call _cond_test(222347 call ||(222349 call >= order[222304](222356 call(222353 call . this[222301] c"sizeAs") uint(64)[86]))(222358 call < order[222304] 0)))
    {
      if(222341 call _cond_test(222340 call(222337 call . this[222301] c"isEmpty")))
      {
        (222312 call halt "orderToIndex() invoked on an empty domain")
      }
      {
        (222318 call halt "illegal order in orderToIndex(): " order[222304] ". For this domain, order must lie in 0.."(222326 call -(222332 call(222329 call . this[222301] c"sizeAs") uint(64)[86]) 1))
      }
    }
  }
  function _domain[225034](?).position[222368](arg _mt[222374]:_MT[201], arg this[222370]:_domain[225034](?), arg i[222372]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    unknown ind[222386](222388 call _makeIndexTuple(444409 call . this[222370] c"rank") i[222372] "index")
    unknown pos[222379](222380 call *(444401 call . this[222370] c"rank")(444405 call . this[222370] c"chpl_integralIdxType"))
    (222393 'end of statement')
    {
      unknown _indexOfInterest[222422] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[222423] "expr temp" "temp"
      (222432 'move' _iterator[222423](222430 call _getIterator(222439 call chpl_direct_range_iter 0(222436 call -(444419 call . this[222370] c"rank") 1))))
      Defer
      {
        {
          (222454 call _freeIterator _iterator[222423])
        }
      }
      { scopeless type
        (222444 'move' _indexOfInterest[222422](222441 call iteratorIndex _iterator[222423]))
      }
      ForLoop[222424]
      {
        unknown d[222394] "index var" "insert auto destroy"
        (222449 'move' d[222394] _indexOfInterest[222422])
        (222403 call =(222406 call pos[222379] d[222394])(222417 call(222414 call .(222412 call(222409 call .(406717 call . this[222370] c"_value") c"dsiDim") d[222394]) c"indexOrder")(222419 call ind[222386] d[222394])))
        label _continueLabel[222427]
        _indexOfInterest[222422]
        _iterator[222423]
      }
      label _breakLabel[222428]
    }
    (222461 return pos[222379])
  }
  function _domain[225034](?).expand[222465](arg _mt[222476]:_MT[201], arg this[222467]:_domain[225034](?), arg off[222473] :
  (222469 call *(444424 call . this[222467] c"rank") integral[159](?))) : _unknown[42] "method" "primary method" "no return value for void"
  {
    if(222520 call _cond_test(222519 call(222516 call . this[222467] c"isAssociative")))
    {
      (222487 call compilerError "expand not supported on associative domains")
    }
    {
      if(222509 call _cond_test(222508 call(222505 call . this[222467] c"isSparse")))
      {
        (222493 call compilerError "expand not supported on sparse domains")
      }
      {
        (222499 call compilerError "expand not supported on this domain type")
      }
    }
  }
  where {
    (222478 call !(222484 call(222481 call . this[222467] c"isRectangular")))
  }
  function _domain[225034](?).expand[222529](arg _mt[222539]:_MT[201], arg this[222531]:_domain[225034](?), arg off[222535] ... :
  integral[159](?)) : _unknown[42] "method" "primary method" "@unstable"
  {
    (222542 return(222544 call(444434 call . this[222531] c"expand") off[222535]))
  }
  function _domain[225034](?).expand[222548](arg _mt[222559]:_MT[201], arg this[222550]:_domain[225034](?), arg off[222556] :
  (222552 call *(444439 call . this[222550] c"rank") integral[159](?))) : _unknown[42] "method" "primary method" "@unstable"
  {
    unknown ranges[222563](222565 call(444444 call . this[222550] c"dims"))
    (222567 'end of statement')
    {
      unknown _indexOfInterest[222623] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[222624] "expr temp" "temp"
      (222633 'move' _iterator[222624](222631 call _getIterator(222640 call chpl_direct_range_iter 0(222637 call -(444459 call . this[222550] c"rank") 1))))
      Defer
      {
        {
          (222655 call _freeIterator _iterator[222624])
        }
      }
      { scopeless type
        (222645 'move' _indexOfInterest[222623](222642 call iteratorIndex _iterator[222624]))
      }
      ForLoop[222625]
      {
        unknown i[222568] "index var" "insert auto destroy"
        (222650 'move' i[222568] _indexOfInterest[222623])
        {
          (222578 call =(222581 call ranges[222563] i[222568])(222591 call(222588 call .(222584 call ranges[222563] i[222568]) c"expand")(222593 call off[222556] i[222568])))
          if(222619 call _cond_test(222605 call >(222610 call .(222608 call ranges[222563] i[222568]) c"lowBound")(222616 call .(222614 call ranges[222563] i[222568]) c"highBound")))
          {
            (222597 call halt "***Error: Degenerate dimension created in dimension " i[222568] "***")
          }
        }
        label _continueLabel[222628]
        _indexOfInterest[222623]
        _iterator[222624]
      }
      label _breakLabel[222629]
    }
    (222662 return(222663 'new'(222665 call _domain[225034](?)(444464 call . this[222550] c"distribution")(444468 call . this[222550] c"rank")(222669 call .(406724 call . this[222550] c"_value") c"idxType")(444472 call . this[222550] c"strides") ranges[222563])))
  }
  function _domain[225034](?).expand[222676](arg _mt[222684]:_MT[201], arg this[222678]:_domain[225034](?), arg off[222681] :
  integral[159](?)) : _unknown[42] "method" "primary method" "@unstable"
  {
    unknown ranges[222692](222694 call(444482 call . this[222678] c"dims"))
    (222696 'end of statement')
    {
      unknown _indexOfInterest[222720] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[222721] "expr temp" "temp"
      (222730 'move' _iterator[222721](222728 call _getIterator(222737 call chpl_direct_range_iter 0(222734 call -(444494 call . this[222678] c"rank") 1))))
      Defer
      {
        {
          (222752 call _freeIterator _iterator[222721])
        }
      }
      { scopeless type
        (222742 'move' _indexOfInterest[222720](222739 call iteratorIndex _iterator[222721]))
      }
      ForLoop[222722]
      {
        unknown i[222697] "index var" "insert auto destroy"
        (222747 'move' i[222697] _indexOfInterest[222720])
        (222706 call =(222709 call ranges[222692] i[222697])(222717 call(222714 call .(222712 call(444488 call . this[222678] c"dim") i[222697]) c"expand") off[222681]))
        label _continueLabel[222725]
        _indexOfInterest[222720]
        _iterator[222721]
      }
      label _breakLabel[222726]
    }
    (222759 return(222760 'new'(222762 call _domain[225034](?)(444499 call . this[222678] c"distribution")(444503 call . this[222678] c"rank")(222766 call .(406728 call . this[222678] c"_value") c"idxType")(444507 call . this[222678] c"strides") ranges[222692])))
  }
  where {
    (222686 call >(444478 call . this[222678] c"rank") 1)
  }
  function _domain[225034](?).exterior[222774](arg _mt[222785]:_MT[201], arg this[222776]:_domain[225034](?), arg off[222782] :
  (222778 call *(444512 call . this[222776] c"rank") integral[159](?))) : _unknown[42] "method" "primary method" "no return value for void"
  {
    if(222829 call _cond_test(222828 call(222825 call . this[222776] c"isAssociative")))
    {
      (222796 call compilerError "exterior not supported on associative domains")
    }
    {
      if(222818 call _cond_test(222817 call(222814 call . this[222776] c"isSparse")))
      {
        (222802 call compilerError "exterior not supported on sparse domains")
      }
      {
        (222808 call compilerError "exterior not supported on this domain type")
      }
    }
  }
  where {
    (222787 call !(222793 call(222790 call . this[222776] c"isRectangular")))
  }
  function _domain[225034](?).exterior[222838](arg _mt[222848]:_MT[201], arg this[222840]:_domain[225034](?), arg off[222844] ... :
  integral[159](?)) : _unknown[42] "method" "primary method" "@unstable"
  {
    (222851 return(222853 call(444522 call . this[222840] c"exterior") off[222844]))
  }
  function _domain[225034](?).exterior[222857](arg _mt[222868]:_MT[201], arg this[222859]:_domain[225034](?), arg off[222865] :
  (222861 call *(444527 call . this[222859] c"rank") integral[159](?))) : _unknown[42] "method" "primary method" "@unstable"
  {
    unknown ranges[222872](222874 call(444532 call . this[222859] c"dims"))
    (222876 'end of statement')
    {
      unknown _indexOfInterest[222904] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[222905] "expr temp" "temp"
      (222914 'move' _iterator[222905](222912 call _getIterator(222921 call chpl_direct_range_iter 0(222918 call -(444545 call . this[222859] c"rank") 1))))
      Defer
      {
        {
          (222936 call _freeIterator _iterator[222905])
        }
      }
      { scopeless type
        (222926 'move' _indexOfInterest[222904](222923 call iteratorIndex _iterator[222905]))
      }
      ForLoop[222906]
      {
        unknown i[222877] "index var" "insert auto destroy"
        (222931 'move' i[222877] _indexOfInterest[222904])
        (222886 call =(222889 call ranges[222872] i[222877])(222899 call(222896 call .(222892 call(444538 call . this[222859] c"dim") i[222877]) c"exterior")(222901 call off[222865] i[222877])))
        label _continueLabel[222909]
        _indexOfInterest[222904]
        _iterator[222905]
      }
      label _breakLabel[222910]
    }
    (222943 return(222944 'new'(222946 call _domain[225034](?)(444550 call . this[222859] c"distribution")(444554 call . this[222859] c"rank")(222950 call .(406735 call . this[222859] c"_value") c"idxType")(444558 call . this[222859] c"strides") ranges[222872])))
  }
  function _domain[225034](?).exterior[222957](arg _mt[222965]:_MT[201], arg this[222959]:_domain[225034](?), arg off[222962] :
  integral[159](?)) : _unknown[42] "method" "primary method" "@unstable"
  {
    unknown offTup[222973](222974 call *(444568 call . this[222959] c"rank")(222978 'typeof' off[222962]))
    (222980 'end of statement')
    {
      unknown _indexOfInterest[222997] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[222998] "expr temp" "temp"
      (223007 'move' _iterator[222998](223005 call _getIterator(223014 call chpl_direct_range_iter 0(223011 call -(444576 call . this[222959] c"rank") 1))))
      Defer
      {
        {
          (223029 call _freeIterator _iterator[222998])
        }
      }
      { scopeless type
        (223019 'move' _indexOfInterest[222997](223016 call iteratorIndex _iterator[222998]))
      }
      ForLoop[222999]
      {
        unknown i[222981] "index var" "insert auto destroy"
        (223024 'move' i[222981] _indexOfInterest[222997])
        (222990 call =(222993 call offTup[222973] i[222981]) off[222962])
        label _continueLabel[223002]
        _indexOfInterest[222997]
        _iterator[222998]
      }
      label _breakLabel[223003]
    }
    (223036 return(223038 call(444580 call . this[222959] c"exterior") offTup[222973]))
  }
  where {
    (222967 call !=(444564 call . this[222959] c"rank") 1)
  }
  function _domain[225034](?).interior[223043](arg _mt[223054]:_MT[201], arg this[223045]:_domain[225034](?), arg off[223051] :
  (223047 call *(444585 call . this[223045] c"rank") integral[159](?))) : _unknown[42] "method" "primary method" "no return value for void"
  {
    if(223098 call _cond_test(223097 call(223094 call . this[223045] c"isAssociative")))
    {
      (223065 call compilerError "interior not supported on associative domains")
    }
    {
      if(223087 call _cond_test(223086 call(223083 call . this[223045] c"isSparse")))
      {
        (223071 call compilerError "interior not supported on sparse domains")
      }
      {
        (223077 call compilerError "interior not supported on this domain type")
      }
    }
  }
  where {
    (223056 call !(223062 call(223059 call . this[223045] c"isRectangular")))
  }
  function _domain[225034](?).interior[223107](arg _mt[223117]:_MT[201], arg this[223109]:_domain[225034](?), arg off[223113] ... :
  integral[159](?)) : _unknown[42] "method" "primary method" "@unstable"
  {
    (223120 return(223122 call(444595 call . this[223109] c"interior") off[223113]))
  }
  function _domain[225034](?).interior[223126](arg _mt[223137]:_MT[201], arg this[223128]:_domain[225034](?), arg off[223134] :
  (223130 call *(444600 call . this[223128] c"rank") integral[159](?))) : _unknown[42] "method" "primary method" "@unstable"
  {
    unknown ranges[223141](223143 call(444605 call . this[223128] c"dims"))
    (223145 'end of statement')
    {
      unknown _indexOfInterest[223250] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[223251] "expr temp" "temp"
      (223260 'move' _iterator[223251](223258 call _getIterator(223267 call chpl_direct_range_iter 0(223264 call -(444643 call . this[223128] c"rank") 1))))
      Defer
      {
        {
          (223282 call _freeIterator _iterator[223251])
        }
      }
      { scopeless type
        (223272 'move' _indexOfInterest[223250](223269 call iteratorIndex _iterator[223251]))
      }
      ForLoop[223252]
      {
        unknown i[223146] "index var" "insert auto destroy"
        (223277 'move' i[223146] _indexOfInterest[223250])
        {
          if(223226 call _cond_test(223164 call ||(223166 call &&(223168 call >(223171 call off[223134] i[223146]) 0)(223174 call <(223176 call -(223178 call +(223183 call .(223181 call(444612 call . this[223128] c"dim") i[223146]) c"_high") 1)(223188 call off[223134] i[223146]))(223193 call .(223191 call(444619 call . this[223128] c"dim") i[223146]) c"_low")))(223196 call &&(223198 call <(223201 call off[223134] i[223146]) 0)(223204 call >(223206 call -(223208 call -(223213 call .(223211 call(444626 call . this[223128] c"dim") i[223146]) c"_low") 1)(223218 call off[223134] i[223146]))(223223 call .(223221 call(444633 call . this[223128] c"dim") i[223146]) c"_high")))))
          {
            (223158 call halt "***Error: Argument to 'interior' function out of range in dimension " i[223146] "***")
          }
          (223230 call =(223233 call ranges[223141] i[223146])(223246 call(223243 call .(223239 call(223236 call .(406742 call . this[223128] c"_value") c"dsiDim") i[223146]) c"interior")(223248 call off[223134] i[223146])))
        }
        label _continueLabel[223255]
        _indexOfInterest[223250]
        _iterator[223251]
      }
      label _breakLabel[223256]
    }
    (223289 return(223290 'new'(223292 call _domain[225034](?)(444648 call . this[223128] c"distribution")(444652 call . this[223128] c"rank")(223296 call .(406746 call . this[223128] c"_value") c"idxType")(444656 call . this[223128] c"strides") ranges[223141])))
  }
  function _domain[225034](?).interior[223303](arg _mt[223311]:_MT[201], arg this[223305]:_domain[225034](?), arg off[223308] :
  integral[159](?)) : _unknown[42] "method" "primary method" "@unstable"
  {
    unknown offTup[223319](223320 call *(444666 call . this[223305] c"rank")(223324 'typeof' off[223308]))
    (223326 'end of statement')
    {
      unknown _indexOfInterest[223343] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[223344] "expr temp" "temp"
      (223353 'move' _iterator[223344](223351 call _getIterator(223360 call chpl_direct_range_iter 0(223357 call -(444674 call . this[223305] c"rank") 1))))
      Defer
      {
        {
          (223375 call _freeIterator _iterator[223344])
        }
      }
      { scopeless type
        (223365 'move' _indexOfInterest[223343](223362 call iteratorIndex _iterator[223344]))
      }
      ForLoop[223345]
      {
        unknown i[223327] "index var" "insert auto destroy"
        (223370 'move' i[223327] _indexOfInterest[223343])
        (223336 call =(223339 call offTup[223319] i[223327]) off[223308])
        label _continueLabel[223348]
        _indexOfInterest[223343]
        _iterator[223344]
      }
      label _breakLabel[223349]
    }
    (223382 return(223384 call(444678 call . this[223305] c"interior") offTup[223319]))
  }
  where {
    (223313 call !=(444662 call . this[223305] c"rank") 1)
  }
  function _domain[225034](?).translate[223389](arg _mt[223400]:_MT[201], arg this[223391]:_domain[225034](?), arg off[223397] :
  (223393 call *(444683 call . this[223391] c"rank") integral[159](?))) : _unknown[42] "method" "primary method" "no return value for void"
  {
    if(223444 call _cond_test(223443 call(223440 call . this[223391] c"isAssociative")))
    {
      (223411 call compilerError "translate not supported on associative domains")
    }
    {
      if(223433 call _cond_test(223432 call(223429 call . this[223391] c"isSparse")))
      {
        (223417 call compilerError "translate not supported on sparse domains")
      }
      {
        (223423 call compilerError "translate not supported on this domain type")
      }
    }
  }
  where {
    (223402 call !(223408 call(223405 call . this[223391] c"isRectangular")))
  }
  function _domain[225034](?).translate[223453](arg _mt[223463]:_MT[201], arg this[223455]:_domain[225034](?), arg off[223459] ... :
  integral[159](?)) : _unknown[42] "method" "primary method" "@unstable"
  {
    (223466 return(223468 call(444693 call . this[223455] c"translate") off[223459]))
  }
  function _domain[225034](?).translate[223472](arg _mt[223483]:_MT[201], arg this[223474]:_domain[225034](?), arg off[223480] :
  (223476 call *(444698 call . this[223474] c"rank") integral[159](?))) : _unknown[42] "method" "primary method" "@unstable"
  {
    unknown ranges[223487](223489 call(444703 call . this[223474] c"dims"))
    (223491 'end of statement')
    {
      unknown _indexOfInterest[223522] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[223523] "expr temp" "temp"
      (223532 'move' _iterator[223523](223530 call _getIterator(223539 call chpl_direct_range_iter 0(223536 call -(444712 call . this[223474] c"rank") 1))))
      Defer
      {
        {
          (223554 call _freeIterator _iterator[223523])
        }
      }
      { scopeless type
        (223544 'move' _indexOfInterest[223522](223541 call iteratorIndex _iterator[223523]))
      }
      ForLoop[223524]
      {
        unknown i[223492] "index var" "insert auto destroy"
        (223549 'move' i[223492] _indexOfInterest[223522])
        (223501 call =(223504 call ranges[223487] i[223492])(223517 call(223514 call .(223510 call(223507 call .(406753 call . this[223474] c"_value") c"dsiDim") i[223492]) c"translate")(223519 call off[223480] i[223492])))
        label _continueLabel[223527]
        _indexOfInterest[223522]
        _iterator[223523]
      }
      label _breakLabel[223528]
    }
    (223561 return(223562 'new'(223564 call _domain[225034](?)(444717 call . this[223474] c"distribution")(444721 call . this[223474] c"rank")(223568 call .(406757 call . this[223474] c"_value") c"idxType")(444725 call . this[223474] c"strides") ranges[223487])))
  }
  function _domain[225034](?).translate[223575](arg _mt[223583]:_MT[201], arg this[223577]:_domain[225034](?), arg off[223580] :
  integral[159](?)) : _unknown[42] "method" "primary method" "@unstable"
  {
    unknown offTup[223591](223592 call *(444735 call . this[223577] c"rank")(223596 'typeof' off[223580]))
    (223598 'end of statement')
    {
      unknown _indexOfInterest[223615] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[223616] "expr temp" "temp"
      (223625 'move' _iterator[223616](223623 call _getIterator(223632 call chpl_direct_range_iter 0(223629 call -(444743 call . this[223577] c"rank") 1))))
      Defer
      {
        {
          (223647 call _freeIterator _iterator[223616])
        }
      }
      { scopeless type
        (223637 'move' _indexOfInterest[223615](223634 call iteratorIndex _iterator[223616]))
      }
      ForLoop[223617]
      {
        unknown i[223599] "index var" "insert auto destroy"
        (223642 'move' i[223599] _indexOfInterest[223615])
        (223608 call =(223611 call offTup[223591] i[223599]) off[223580])
        label _continueLabel[223620]
        _indexOfInterest[223615]
        _iterator[223616]
      }
      label _breakLabel[223621]
    }
    (223654 return(223656 call(444747 call . this[223577] c"translate") offTup[223591]))
  }
  where {
    (223585 call !=(444731 call . this[223577] c"rank") 1)
  }
  function _domain[225034](?).chpl__unTranslate[223661](arg _mt[223671]:_MT[201], arg this[223663]:_domain[225034](?), arg off[223667] ... :
  integral[159](?)) : _unknown[42] "method" "primary method"
  {
    (223674 return(223676 call(444757 call . this[223663] c"chpl__unTranslate") off[223667]))
  }
  function _domain[225034](?).chpl__unTranslate[223680](arg _mt[223691]:_MT[201], arg this[223682]:_domain[225034](?), arg off[223688] :
  (223684 call *(444762 call . this[223682] c"rank")(444766 call . this[223682] c"chpl_integralIdxType"))) : _unknown[42] "method" "primary method"
  {
    unknown ranges[223695](223697 call(444770 call . this[223682] c"dims"))
    (223699 'end of statement')
    {
      unknown _indexOfInterest[223727] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[223728] "expr temp" "temp"
      (223737 'move' _iterator[223728](223735 call _getIterator(223744 call chpl_direct_range_iter 0(223741 call -(444783 call . this[223682] c"rank") 1))))
      Defer
      {
        {
          (223759 call _freeIterator _iterator[223728])
        }
      }
      { scopeless type
        (223749 'move' _indexOfInterest[223727](223746 call iteratorIndex _iterator[223728]))
      }
      ForLoop[223729]
      {
        unknown i[223700] "index var" "insert auto destroy"
        (223754 'move' i[223700] _indexOfInterest[223727])
        (223709 call =(223712 call ranges[223695] i[223700])(223722 call(223719 call .(223715 call(444776 call . this[223682] c"dim") i[223700]) c"chpl__unTranslate")(223724 call off[223688] i[223700])))
        label _continueLabel[223732]
        _indexOfInterest[223727]
        _iterator[223728]
      }
      label _breakLabel[223733]
    }
    (223766 return(223767 'new'(223769 call _domain[225034](?)(444788 call . this[223682] c"distribution")(444792 call . this[223682] c"rank")(223773 call .(406761 call . this[223682] c"_value") c"idxType")(444796 call . this[223682] c"strides") ranges[223695])))
  }
  function _domain[225034](?).setIndices[223780](arg _mt[223786]:_MT[201], ref arg this[223782]:_domain[225034](?), arg x[223784]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (223793 call(223790 call .(406765 call . this[223782] c"_value") c"dsiSetIndices") x[223784])
    if(223802 call _cond_test(223800 call _isPrivatized(444807 call . this[223782] c"_instance")))
    {
      (223797 call _reprivatize(444802 call . this[223782] c"_value"))
    }
  }
  function _domain[225034](?).getIndices[223808](arg _mt[223812]:_MT[201], arg this[223810]:_domain[225034](?)) : _unknown[42] "method" "primary method"
  {
    (223815 return(223822 call(223819 call .(406769 call . this[223810] c"_value") c"dsiGetIndices")))
  }
  function _domain[225034](?).serialize[223825](arg _mt[223833]:_MT[201], arg this[223827]:_domain[225034](?), arg writer[223829]:_any[141](?), ref arg serializer[223831]:_any[141](?)) : _unknown[42] throws "method" "primary method" "no return value for void"
  {
    (223842 call(223839 call .(406773 call . this[223827] c"_value") c"dsiSerialWrite") writer[223829])
  }
  function _domain[225034](?).deserialize[223846](arg _mt[223854]:_MT[201], ref arg this[223848]:_domain[225034](?), arg reader[223850]:_any[141](?), ref arg deserializer[223852]:_any[141](?)) : _unknown[42] throws "method" "primary method" "no return value for void"
  {
    (223863 call(223860 call .(406777 call . this[223848] c"_value") c"dsiSerialRead") reader[223850])
  }
  function _domain[225034](?).deserializeFrom[223867](arg _mt[223875]:_MT[201], arg this[223869]:_domain[225034](?), arg reader[223871]:_any[141](?), ref arg deserializer[223873]:_any[141](?)) : _unknown[42] throws "method" "primary method"
  {
    unknown ret[223879] this[223869]
    (223882 'end of statement')
    (223887 call(223884 call . ret[223879] c"deserialize") reader[223871] deserializer[223873])
    (223890 return ret[223879])
  }
  function _domain[225034](?).localSlice[223894](arg _mt[223902]:_MT[201], arg this[223896]:_domain[225034](?), arg r[223899]:_any[141](?) ...) : _unknown[42] "method" "primary method"
  {
    if(223940 call _cond_test(223933 call !=(223937 call chpl_localeID_to_locale(223936 '_wide_get_locale'(444826 call . this[223896] c"_value")))(444829 call here[135591])))
    {
      (223916 call halt "Attempting to take a local slice of a domain on locale "(223924 '_wide_get_node'(444822 call . this[223896] c"_value")) " from locale "(223929 call .(406785 call here[135591]) c"id"))
    }
    (223945 return(223947 call this[223896](223949 'expand_tuple' r[223899])))
  }
  where {
    (223904 call &&(223907 call chpl__isTupleOfRanges r[223899])(223913 call(223910 call .(406782 call . this[223896] c"_value") c"isDefaultRectangular")))
  }
  function _domain[225034](?).localSlice[223953](arg _mt[223961]:_MT[201], arg this[223955]:_domain[225034](?), arg r[223958]:_any[141](?) ...) : _unknown[42] "method" "primary method" "no where doc"
  {
    (223976 return(223983 call(223980 call .(406792 call . this[223955] c"_value") c"dsiLocalSlice")(223985 call chpl_strideUnion r[223958]) r[223958]))
  }
  where {
    (223963 call &&(223966 call chpl__isTupleOfRanges r[223958])(223968 call !(223974 call(223971 call .(406788 call . this[223955] c"_value") c"isDefaultRectangular"))))
  }
  function _domain[225034](?).localSlice[223991](arg _mt[223999]:_MT[201], arg this[223993]:_domain[225034](?), arg d[223996] :
  _domain[225034](?)) : _unknown[42] "method" "primary method"
  {
    (224002 return(224004 call(444844 call . this[223993] c"localSlice")(224010 'expand_tuple'(224009 call(224006 call . d[223996] c"getIndices")))))
  }
  function _domain[225034](?).sorted[224013](arg _mt[224025]:_MT[201], arg this[224015]:_domain[225034](?), arg comparator[224021] :
  unknown t[224017] =
  (224020 call chpl_defaultComparator)) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[224041] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[224042] "expr temp" "temp"
      (224051 'move' _iterator[224042](224049 call _getIterator(224036 call(224033 call .(406797 call . this[224015] c"_value") c"dsiSorted") comparator[224021])))
      Defer
      {
        {
          (224066 call _freeIterator _iterator[224042])
        }
      }
      { scopeless type
        (224056 'move' _indexOfInterest[224041](224053 call iteratorIndex _iterator[224042]))
      }
      ForLoop[224043]
      {
        unknown i[224028] "index var" "insert auto destroy"
        (224061 'move' i[224028] _indexOfInterest[224041])
        {
          (224039 yield i[224028])
        }
        label _continueLabel[224046]
        _indexOfInterest[224041]
        _iterator[224042]
      }
      label _breakLabel[224047]
    }
  }
  function _domain[225034](?).displayRepresentation[224075](arg _mt[224079]:_MT[201], arg this[224077]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (224086 call(224083 call .(406801 call . this[224077] c"_value") c"dsiDisplayRepresentation"))
  }
  function _domain[225034](?).defaultSparseDist[224089](arg _mt[224093]:_MT[201], arg this[224091]:_domain[225034](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (224096 return(224098 call . this[224091] c"distribution"))
  }
  function _domain[225034](?).hasSingleLocalSubdomain[224103](arg _mt[224107]:_MT[201], arg this[224105]:_domain[225034](?)) param : _unknown[42] "method" "primary method" "@unstable"
  {
    (224110 return(224115 call(224112 call .(406806 call . this[224105] c"_value") c"dsiHasSingleLocalSubdomain")))
  }
  function _domain[225034](?).localSubdomain[224118](arg _mt[224128]:_MT[201], arg this[224120]:_domain[225034](?), arg loc[224124] :
  locale[234] =
  (444849 call here[135591])) : _unknown[42] "method" "primary method"
  {
    if(224144 call _cond_test(224137 call !(224143 call(224140 call .(406810 call . this[224120] c"_value") c"dsiHasSingleLocalSubdomain"))))
    {
      (224132 call compilerError "the domain may have multiple local subdomains")
    }
    (224149 return(224154 call(224151 call .(406814 call . this[224120] c"_value") c"dsiLocalSubdomain") loc[224124]))
  }
  function _domain[225034](?).localSubdomains[224158](arg _mt[224168]:_MT[201], arg this[224160]:_domain[225034](?), arg loc[224164] :
  locale[234] =
  (444852 call here[135591])) : _unknown[42] "iterator fn" "method" "primary method" "@unstable" "no return value for void"
  {
    if(224227 call _cond_test(224226 call(224223 call .(406822 call . this[224160] c"_value") c"dsiHasSingleLocalSubdomain")))
    {
      (224172 yield(224174 call(444855 call . this[224160] c"localSubdomain") loc[224164]))
    }
    {
      {
        unknown _indexOfInterest[224190] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[224191] "expr temp" "temp"
        (224200 'move' _iterator[224191](224198 call _getIterator(224183 call(224180 call .(406818 call . this[224160] c"_value") c"dsiLocalSubdomains") loc[224164])))
        Defer
        {
          {
            (224215 call _freeIterator _iterator[224191])
          }
        }
        { scopeless type
          (224205 'move' _indexOfInterest[224190](224202 call iteratorIndex _iterator[224191]))
        }
        ForLoop[224192] order-independent
        {
          unknown d[224177] "index var" "insert auto destroy"
          (224210 'move' d[224177] _indexOfInterest[224190])
          (224185 yield d[224177])
          label _continueLabel[224195]
          _indexOfInterest[224190]
          _iterator[224191]
        }
        label _breakLabel[224196]
      }
    }
  }
  function _domain[225034](?).supportsAutoLocalAccess[224233](arg _mt[224237]:_MT[201], arg this[224235]:_domain[225034](?)) param : _unknown[42] "method" "primary method"
  {
    (224240 return(224245 call(224242 call .(406826 call . this[224235] c"_value") c"dsiSupportsAutoLocalAccess")))
  }
  function _domain[225034](?).supportsOffsetAutoLocalAccess[224248](arg _mt[224252]:_MT[201], arg this[224250]:_domain[225034](?)) param : _unknown[42] "method" "primary method"
  {
    (224255 return(224262 call(224259 call .(406830 call . this[224250] c"_value") c"dsiSupportsOffsetAutoLocalAccess")))
  }
  function _domain[225034](?).autoLocalAccessOffsetCheck[224265](arg _mt[224271]:_MT[201], arg this[224267]:_domain[225034](?), arg offsets[224269]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    (224274 return(224281 call(224278 call .(406834 call . this[224267] c"_value") c"dsiAutoLocalAccessOffsetCheck") offsets[224269]))
  }
  function _domain[225034](?).iteratorYieldsLocalElements[224285](arg _mt[224289]:_MT[201], arg this[224287]:_domain[225034](?)) param : _unknown[42] "method" "primary method"
  {
    (224292 return(224299 call(224296 call .(406838 call . this[224287] c"_value") c"dsiIteratorYieldsLocalElements")))
  }
  function _domain[225034](?).tryCast[224302](arg _mt[224310]:_MT[201], arg this[224304]:_domain[225034](?), arg t[224307] :
  _domain[225034](?)) : _unknown[42] "method" "primary method" "no where doc"
  {
    (224333 return(224342 'try!-expr'(224340 call(224337 call . this[224304] c"chpl_domainTryCastHelper") t[224307])))
  }
  where {
    (224312 call &&(224314 call &&(224317 call chpl__isRectangularDomType t[224307])(224323 call(224320 call . this[224304] c"isRectangular")))(224330 call(224327 call . this[224304] c"chpl_domainTryCastIsSafe") t[224307]))
  }
  function _domain[225034](?).tryCast[224346](arg _mt[224354]:_MT[201], arg this[224348]:_domain[225034](?), arg t[224351] :
  _domain[225034](?)) : _unknown[42] throws "method" "primary method"
  {
    if(224398 call _cond_test(224384 call ||(224386 call !(224389 call chpl__isRectangularDomType t[224351]))(224391 call !(224397 call(224394 call . this[224348] c"isRectangular")))))
    {
      (224358 call compilerError "tryCast() from "(224362 call :(224365 'typeof' this[224348]) string[244]) " to "(224368 call : t[224351] string[244]) " is not available")
    }
    {
      (224376 return(224381 call(224378 call . this[224348] c"chpl_domainTryCastHelper") t[224351]))
    }
  }
  function _domain[225034](?).chpl_domainTryCastHelper[224406](arg _mt[224414]:_MT[201], arg this[224408]:_domain[225034](?), arg t[224411] :
  _domain[225034](?)) : _unknown[42] throws "inline" "method" "primary method"
  {
    unknown tmpD[224418] t[224411]
    (224421 'end of statement')
    const d[224423] "const" "ref var" this[224408]
    (224426 'end of statement')
    if(224541 call _cond_test(224531 call !=(224534 call . tmpD[224418] c"rank")(224538 call . d[224423] c"rank")))
    {
      (224428 call compilerError "rank mismatch in tryCast()")
    }
    {
      unknown inds[224435](224440 call(224437 call . d[224423] c"getIndices"))
      (224442 'end of statement')
      unknown newInds[224444](224450 'typeof'(224449 call(224446 call . tmpD[224418] c"getIndices")))
      (224452 'end of statement')
      {
        unknown i[224453] "index var" 0
        unknown tmp[224484] "maybe param" "temp"
        (224496 'move' tmp[224484](224494 call chpl_compute_low_param_loop_bound 0(224456 call -(224459 call . tmpD[224418] c"rank") 1)))
        unknown tmp[224485] "maybe param" "temp"
        (224509 'move' tmp[224485](224507 call chpl_compute_high_param_loop_bound 0(224501 call -(224503 call . tmpD[224418] c"rank") 1)))
        unknown tmp[224486] "maybe param" "temp"
        (224512 'move' tmp[224486] 1)
        ParamForLoop[224514]
        { i[224453] tmp[224484] tmp[224485] tmp[224486]
          {
            (224466 call =(224469 call newInds[224444] i[224453])(224479 call(224476 call .(224472 call inds[224435] i[224453]) c"tryCast")(224483 'typeof'(224481 call newInds[224444] i[224453]))))
          }
        }
        label _unused_continueLabel[224488]
        label _breakLabel[224487]
      }
      (224527 call(224524 call . tmpD[224418] c"setIndices") newInds[224444])
      (224529 return tmpD[224418])
    }
  }
  function _domain[225034](?).chpl_domainTryCastIsSafe[224548](arg _mt[224556]:_MT[201], arg this[224550]:_domain[225034](?), arg t[224553] :
  _domain[225034](?)) param : _unknown[42] "method" "primary method"
  {
    unknown dst[224560] t[224553]
    (224563 'end of statement')
    (224565 call compilerAssert(224566 call &&(224572 call(224569 call . this[224550] c"isRectangular"))(224577 call(224574 call . dst[224560] c"isRectangular"))))
    (224578 return(224580 call chpl_tryCastIsSafe(224585 call(224582 call . this[224550] c"dim") 0)(224593 'typeof'(224591 call(224588 call . dst[224560] c"dim") 0))))
  }
  function _domain[225034](?).:[224596](arg _mt[224608]:_MT[201], arg this[224598]:_domain[225034](?), arg d[224601] :
  _domain[225034](?), arg t[224605] :
  _domain[225034](?)) : _unknown[42] "method" "primary method" "operator"
  {
    (224631 return(224640 'try!-expr'(224638 call(224635 call . d[224601] c"chpl_domainCastHelper") t[224605])))
  }
  where {
    (224610 call &&(224612 call &&(224615 call chpl__isRectangularDomType t[224605])(224621 call(224618 call . d[224601] c"isRectangular")))(224628 call(224625 call . d[224601] c"chpl_domainCastIsSafe") t[224605]))
  }
  function _domain[225034](?).:[224644](arg _mt[224656]:_MT[201], arg this[224646]:_domain[225034](?), arg d[224649] :
  _domain[225034](?), arg t[224653] :
  _domain[225034](?)) : _unknown[42] throws "method" "primary method" "operator"
  {
    if(224698 call _cond_test(224684 call ||(224686 call !(224689 call chpl__isRectangularDomType t[224653]))(224691 call !(224697 call(224694 call . d[224649] c"isRectangular")))))
    {
      (224660 call compilerError "cast from "(224664 call :(224667 'typeof' d[224649]) string[244]) " to "(224670 call : t[224653] string[244]) " is not available")
    }
    {
      (224676 return(224681 call(224678 call . d[224649] c"chpl_domainCastHelper") t[224653]))
    }
  }
  function _domain[225034](?).chpl_domainCastHelper[224706](arg _mt[224714]:_MT[201], arg this[224708]:_domain[225034](?), arg t[224711] :
  _domain[225034](?)) : _unknown[42] throws "inline" "method" "primary method"
  {
    unknown tmpD[224718] t[224711]
    (224721 'end of statement')
    const d[224723] "const" "ref var" this[224708]
    (224726 'end of statement')
    if(224837 call _cond_test(224827 call !=(224830 call . tmpD[224718] c"rank")(224834 call . d[224723] c"rank")))
    {
      (224728 call compilerError "rank mismatch in cast")
    }
    {
      unknown inds[224735](224740 call(224737 call . d[224723] c"getIndices"))
      (224742 'end of statement')
      unknown newInds[224744](224750 'typeof'(224749 call(224746 call . tmpD[224718] c"getIndices")))
      (224752 'end of statement')
      {
        unknown i[224753] "index var" 0
        unknown tmp[224780] "maybe param" "temp"
        (224792 'move' tmp[224780](224790 call chpl_compute_low_param_loop_bound 0(224756 call -(224759 call . tmpD[224718] c"rank") 1)))
        unknown tmp[224781] "maybe param" "temp"
        (224805 'move' tmp[224781](224803 call chpl_compute_high_param_loop_bound 0(224797 call -(224799 call . tmpD[224718] c"rank") 1)))
        unknown tmp[224782] "maybe param" "temp"
        (224808 'move' tmp[224782] 1)
        ParamForLoop[224810]
        { i[224753] tmp[224780] tmp[224781] tmp[224782]
          {
            (224766 call =(224769 call newInds[224744] i[224753])(224771 call :(224774 call inds[224735] i[224753])(224779 'typeof'(224777 call newInds[224744] i[224753]))))
          }
        }
        label _unused_continueLabel[224784]
        label _breakLabel[224783]
      }
      (224823 call(224820 call . tmpD[224718] c"setIndices") newInds[224744])
      (224825 return tmpD[224718])
    }
  }
  function _domain[225034](?).chpl_domainCastIsSafe[224844](arg _mt[224852]:_MT[201], arg this[224846]:_domain[225034](?), arg t[224849] :
  _domain[225034](?)) param : _unknown[42] "method" "primary method"
  {
    unknown dst[224856] t[224849]
    (224859 'end of statement')
    (224861 call compilerAssert(224862 call &&(224868 call(224865 call . this[224846] c"isRectangular"))(224873 call(224870 call . dst[224856] c"isRectangular"))))
    (224874 return(224876 call chpl_castIsSafe(224881 call(224878 call . this[224846] c"dim") 0)(224889 'typeof'(224887 call(224884 call . dst[224856] c"dim") 0))))
  }
  function _domain[225034](?).:[224892](arg _mt[224904]:_MT[201], arg this[224894]:_domain[225034](?), arg val[224897] :
  _domain[225034](?), arg t[224901] :
  string[244]) : _unknown[42] "method" "primary method" "operator"
  {
    if(224951 call _cond_test(224943 call canResolveMethod(224945 call . val[224897] c"_value") "doiToString"))
    {
      (224911 return(224921 call(224918 call .(224913 call . val[224897] c"_value") c"doiToString")))
    }
    {
      (224932 return(224941 'try!-expr'(224939 call(224936 call . "%\?" c"format") val[224897])))
      (396822 'used modules list'(224931 'import' FormattedIO[208298].{string}))
    }
    (396820 'used modules list'(224908 'use' Reflection[1804]))
  }
  function _domain[225034](?).isRectangular[224957](arg _mt[224961]:_MT[201], arg this[224959]:_domain[225034](?)) param : _unknown[42] "method" "primary method"
  {
    (224964 return(224972 call(224969 call .(224966 call . this[224959] c"_value") c"isRectangular")))
  }
  function _domain[225034](?).isIrregular[224975](arg _mt[224979]:_MT[201], arg this[224977]:_domain[225034](?)) param : _unknown[42] "method" "primary method"
  {
    (224982 return(224983 call ||(224989 call(224986 call . this[224977] c"isSparse"))(224994 call(224991 call . this[224977] c"isAssociative"))))
  }
  function _domain[225034](?).isAssociative[224997](arg _mt[225001]:_MT[201], arg this[224999]:_domain[225034](?)) param : _unknown[42] "method" "primary method"
  {
    (225004 return(225012 call(225009 call .(225006 call . this[224999] c"_value") c"isAssociative")))
  }
  function _domain[225034](?).isSparse[225015](arg _mt[225019]:_MT[201], arg this[225017]:_domain[225034](?)) param : _unknown[42] "method" "primary method"
  {
    (225022 return(225030 call(225027 call .(225024 call . this[225017] c"_value") c"isSparse")))
  }
  type _domain[225034](?) unknown _pid[216270] int(64)[10] unknown _instance[216275] "owned" unknown _unowned[216279] bool[19] type unsafeAssignManager[221006](?) unknown _lhsInstance[219683] unknown _lhsPid[219687] int(64)[10] unknown _rhsInstance[219692] unknown _rhsPid[219696] int(64)[10] unknown _oldLhsDomainCopy[219701] "marked generic" _domain[225034](?) unknown _checks[219708] "param" bool[19] unknown _isActiveManager[219713] bool[19] forwarding ( )
  function makeRectangularDomain[225036](arg low[225040] :
  unknown t1[225038], arg high[225045] :
  unknown t2[225043], param arg inclusive[225050] :
  bool[19] =
  1) : _unknown[42] "@unstable"
  {
    (225063 return(225083 IfExpr  inclusive[225050] then
    { scopeless
      (225071 call chpl__buildDomainExpr(225068 call chpl_build_bounded_range low[225040] high[225045]) 1)
    } else
    { scopeless
      (225081 call chpl__buildDomainExpr(225078 call chpl_build_bounded_range low[225040](225076 call chpl__nudgeHighBound high[225045])) 1)
    } ))
  }
  where {
    (225054 call &&(225057 call chpl_isValidRangeIdxType t1[225038])(225060 call chpl_isValidRangeIdxType t2[225043]))
  }
  function makeRectangularDomain[225089](arg low[225093] :
  unknown t1[225091], arg high[225098] :
  unknown t2[225096], param arg inclusive[225103] :
  bool[19] =
  1) : _unknown[42] "@unstable"
  {
    unknown size[225163] "param"(225165 call . low[225093] c"size")
    (225169 'end of statement')
    unknown eltType[225171] "type variable" _gsplitinit[39]
    if(225204 call _cond_test(225194 call ==(225199 'typeof'(225197 call low[225093] 0))(225203 'typeof'(225201 call high[225098] 0))))
    {
      (225174 call = eltType[225171](225180 'typeof'(225178 call low[225093] 0)))
    }
    {
      (225182 call = eltType[225171](225193 'typeof'(225185 call +(225188 call low[225093] 0)(225191 call high[225098] 0))))
    }
    unknown ranges[225209](225210 call * size[225163](225214 call range[240](?) eltType[225171]))
    (225217 'end of statement')
    {
      unknown i[225218] "index var" 0
      unknown tmp[225264] "maybe param" "temp"
      (225276 'move' tmp[225264](225274 call chpl_compute_low_param_loop_bound 0(225222 call chpl__nudgeHighBound size[225163])))
      unknown tmp[225265] "maybe param" "temp"
      (225285 'move' tmp[225265](225283 call chpl_compute_high_param_loop_bound 0(225281 call chpl__nudgeHighBound size[225163])))
      unknown tmp[225266] "maybe param" "temp"
      (225288 'move' tmp[225266] 1)
      ParamForLoop[225290]
      { i[225218] tmp[225264] tmp[225265] tmp[225266]
        {
          if(225258 call _cond_test inclusive[225103])
          {
            (225227 call =(225230 call ranges[225209] i[225218])(225238 call chpl_build_bounded_range(225233 call low[225093] i[225218])(225236 call high[225098] i[225218])))
          }
          {
            (225241 call =(225244 call ranges[225209] i[225218])(225254 call chpl_build_bounded_range(225247 call low[225093] i[225218])(225252 call chpl__nudgeHighBound(225250 call high[225098] i[225218]))))
          }
        }
      }
      label _unused_continueLabel[225268]
      label _breakLabel[225267]
    }
    const d[225300] "const" ranges[225209](225302 call chpl__buildDomainRuntimeType defaultDist[288287] size[225163] eltType[225171])
    (225308 'end of statement')
    (225309 return d[225300])
  }
  where {
    (225107 call &&(225109 call &&(225111 call &&(225113 call &&(225115 call &&(225118 call isTuple low[225093])(225121 call isTuple high[225098]))(225124 call isHomogeneousTuple low[225093]))(225127 call isHomogeneousTuple high[225098]))(225129 call ==(225132 call . low[225093] c"size")(225136 call . high[225098] c"size")))(225139 call ||(395470 'is_coercible'(225150 'typeof'(225148 call high[225098] 0))(225146 'typeof'(225144 call low[225093] 0)))(395471 'is_coercible'(225160 'typeof'(225158 call low[225093] 0))(225156 'typeof'(225154 call high[225098] 0)))))
  }
  function makeRectangularDomain[225314](arg low[225318] :
  unknown t1[225316], arg high[225323] :
  unknown t2[225321], param arg inclusive[225328] :
  bool[19] =
  1) : _unknown[42] "@unstable"
  {
    unknown size[225342] "param"(225354 IfExpr (225344 call isTuple low[225318]) then
    { scopeless
      (225347 call . low[225318] c"size")
    } else
    { scopeless
      (225351 call . high[225323] c"size")
    } )
    (225358 'end of statement')
    unknown eltType[225360] "type variable"(225408 IfExpr (225362 call isTuple low[225318]) then
    { scopeless(225383 IfExpr (225364 call ==(225369 'typeof'(225367 call low[225318] 0))(225371 'typeof' high[225323])) then
      { scopeless
        (225375 'typeof'(225373 call low[225318] 0))
      } else
      { scopeless
        (225382 'typeof'(225376 call +(225379 call low[225318] 0) high[225323]))
      } )
    } else
    { scopeless(225405 IfExpr (225386 call ==(225391 'typeof'(225389 call high[225323] 0))(225393 'typeof' low[225318])) then
      { scopeless
        (225397 'typeof'(225395 call high[225323] 0))
      } else
      { scopeless
        (225404 'typeof'(225398 call + low[225318](225402 call high[225323] 0)))
      } )
    } )
    unknown ranges[225413](225414 call * size[225342](225418 call range[240](?) eltType[225360]))
    (225421 'end of statement')
    if(225631 call _cond_test(225629 call isTuple low[225318]))
    {
      if(225444 call _cond_test(225439 call !(225442 call isHomogeneousTuple low[225318])))
      {
        (225424 call compilerError(225425 call +(225427 call + "Domains defined using tuple bounds must use homogenous tuples, but got '"(225432 call :(225435 'typeof' low[225318]) string[244])) "'"))
      }
      {
        unknown i[225449] "index var" 0
        unknown tmp[225491] "maybe param" "temp"
        (225503 'move' tmp[225491](225501 call chpl_compute_low_param_loop_bound 0(225453 call chpl__nudgeHighBound size[225342])))
        unknown tmp[225492] "maybe param" "temp"
        (225512 'move' tmp[225492](225510 call chpl_compute_high_param_loop_bound 0(225508 call chpl__nudgeHighBound size[225342])))
        unknown tmp[225493] "maybe param" "temp"
        (225515 'move' tmp[225493] 1)
        ParamForLoop[225517]
        { i[225449] tmp[225491] tmp[225492] tmp[225493]
          {
            if(225485 call _cond_test inclusive[225328])
            {
              (225458 call =(225461 call ranges[225413] i[225449])(225467 call chpl_build_bounded_range(225464 call low[225318] i[225449]) high[225323]))
            }
            {
              (225470 call =(225473 call ranges[225413] i[225449])(225481 call chpl_build_bounded_range(225476 call low[225318] i[225449])(225479 call chpl__nudgeHighBound high[225323])))
            }
          }
        }
        label _unused_continueLabel[225495]
        label _breakLabel[225494]
      }
    }
    {
      if(225546 call _cond_test(225541 call !(225544 call isHomogeneousTuple high[225323])))
      {
        (225528 call compilerError(225529 call +(225531 call + "Domains defined using tuple bounds must use homogenous tuples, but got '"(225534 call :(225537 'typeof' high[225323]) string[244])) "'"))
      }
      {
        unknown i[225551] "index var" 0
        unknown tmp[225593] "maybe param" "temp"
        (225605 'move' tmp[225593](225603 call chpl_compute_low_param_loop_bound 0(225555 call chpl__nudgeHighBound size[225342])))
        unknown tmp[225594] "maybe param" "temp"
        (225614 'move' tmp[225594](225612 call chpl_compute_high_param_loop_bound 0(225610 call chpl__nudgeHighBound size[225342])))
        unknown tmp[225595] "maybe param" "temp"
        (225617 'move' tmp[225595] 1)
        ParamForLoop[225619]
        { i[225551] tmp[225593] tmp[225594] tmp[225595]
          {
            if(225587 call _cond_test inclusive[225328])
            {
              (225560 call =(225563 call ranges[225413] i[225551])(225569 call chpl_build_bounded_range low[225318](225567 call high[225323] i[225551])))
            }
            {
              (225572 call =(225575 call ranges[225413] i[225551])(225583 call chpl_build_bounded_range low[225318](225581 call chpl__nudgeHighBound(225579 call high[225323] i[225551]))))
            }
          }
        }
        label _unused_continueLabel[225597]
        label _breakLabel[225596]
      }
    }
    const d[225636] "const" ranges[225413](225638 call chpl__buildDomainRuntimeType defaultDist[288287] size[225342] eltType[225360])
    (225644 'end of statement')
    (225645 return d[225636])
  }
  where {
    (225332 call !=(225335 call isTuple low[225318])(225338 call isTuple high[225323]))
  }
  function makeRectangularDomain[225650](arg low[225654] :
  unknown t1[225652], arg high[225659] :
  unknown t2[225657], param arg inclusive[225664] :
  bool[19] =
  1) : _unknown[42] "last resort" "no return value for void"
  {
    if(225824 call _cond_test(225812 call ||(225814 call !(225817 call isHomogeneousTuple low[225654]))(225819 call !(225822 call isHomogeneousTuple high[225659]))))
    {
      (225678 call compilerError(225679 call +(225681 call +(225683 call +(225685 call + "Domains defined using tuple bounds must use homogenous tuples, but got '"(225688 call :(225691 'typeof' low[225654]) string[244])) "' and '")(225694 call :(225697 'typeof' high[225659]) string[244])) "'"))
    }
    {
      if(225806 call _cond_test(225796 call !=(225799 call . low[225654] c"size")(225803 call . high[225659] c"size")))
      {
        (225702 call compilerError(225703 call +(225705 call +(225707 call +(225709 call +(225711 call + "Domains defined using tuple bounds must use tuples of the same length, " "but got '")(225719 call :(225722 'typeof' low[225654]) string[244])) "' and '")(225725 call :(225728 'typeof' high[225659]) string[244])) "'"))
      }
      {
        if(225791 call _cond_test(225767 call !(225769 call ||(395472 'is_coercible'(225780 'typeof'(225778 call high[225659] 0))(225776 'typeof'(225774 call low[225654] 0)))(395473 'is_coercible'(225790 'typeof'(225788 call low[225654] 0))(225786 'typeof'(225784 call high[225659] 0))))))
        {
          (225733 call compilerError(225734 call +(225736 call +(225738 call +(225740 call +(225742 call + "Domains defined using tuple bounds must use tuples of coercible types. " "Cannot coerce between '")(225750 call :(225755 'typeof'(225753 call low[225654] 0)) string[244])) "' and '")(225758 call :(225763 'typeof'(225761 call high[225659] 0)) string[244])) "'"))
        }
      }
    }
  }
  where {
    (225668 call &&(225671 call isTuple low[225654])(225674 call isTuple high[225659]))
  } contextManager[314611] unsafeAssignManager[221006](?)
  {
  } writeSerializable[310070] _domain[225034](?)
  {
  } readDeserializable[310078] _domain[225034](?)
  {
  }
  (396798 'used modules list'(209938 'use' ChapelBase[77907])(209942 'use' ArrayViewRankChange[143254])(209944 'use' ChapelTuple[106204])(209948 'use' ChapelRange[129915] 'only' chpl_isValidRangeIdxType))
}