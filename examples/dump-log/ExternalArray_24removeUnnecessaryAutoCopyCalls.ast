AST dump for ExternalArray after pass removeUnnecessaryAutoCopyCalls.
Module use list: ChapelStandard CTypes HaltWrappers 

{
  function chpl__init_ExternalArray[468546]() : void[4] "insert line file info" "module init" "resolved"
  {
    (629019 return _void[46])
  }
  function _ref(chpl_opaque_array)[1465679]._instance[1275503](ref arg this[1275507]:_ref(chpl_opaque_array)[1465679]) ref : _ref(c_ptr(void))[1465623] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this" "resolved"
  {
    ref ret[1275517]:_ref(c_ptr(void))[1465623] "dead after last mention" "RVV" "temp"
    ref call_tmp[1275524]:_ref(c_ptr(void))[1465623] "dead after last mention" "maybe param" "temp"
    (1275527 'move' call_tmp[1275524](1275511 '.' this[1275507] _instance[286510]))
    (1275522 'move' ret[1275517] call_tmp[1275524])
    (1275519 return ret[1275517])
  }
  function _ref(chpl_opaque_array)[1465679]._unowned[1275529](ref arg this[1275533]:_ref(chpl_opaque_array)[1465679]) ref : _ref(bool)[1466299] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this" "resolved"
  {
    ref ret[1275543]:_ref(bool)[1466299] "dead after last mention" "RVV" "temp"
    ref call_tmp[1275550]:_ref(bool)[1466299] "dead after last mention" "maybe param" "temp"
    (1275553 'move' call_tmp[1275550](1275537 '.' this[1275533] _unowned[286517]))
    (1275548 'move' ret[1275543] call_tmp[1275550])
    (1275545 return ret[1275543])
  }
  type chpl_opaque_array[286522] val _pid[286505]:int(64)[10] val _instance[286510]:c_ptr(void)[1465614] const-val _unowned[286517]:bool[19]
  function chpl_call_free_func[286601](const in arg func[286606]:c_ptr(void)[1465614], const in arg elts[286612]:c_ptr(void)[1465614]) : void[4] "extern" "local args" "no fn body" "resolved"
  {
  }
  function cleanupOpaqueArray[287537](const  ref arg arr[287540]:_ref(chpl_opaque_array)[1465679]) : void[4] "export" "local args" "resolved" "no return value for void"
  {
    const-ref call_tmp[919419]:_ref(c_ptr(void))[1465623] "dead after last mention" "maybe param" "reference to a const" "temp"
    (919422 'move' call_tmp[919419](287549 call _instance[1275503] arr[287540]))
    val call_tmp[919424]:BaseArr[272224] "dead after last mention" "maybe param" "temp"
    val coerce_tmp[3881999]:c_ptr(void)[1465614] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
    (3882003 'move' coerce_tmp[3881999](3882001 'deref' call_tmp[919419]))
    (919427 'move' call_tmp[919424](287546 call :[3881970] coerce_tmp[3881999]))
    val cleanup[287545]:BaseArr[272224] "dead at end of block" "insert auto destroy"
    (652640 'move' cleanup[287545] call_tmp[919424])
    const-val call_tmp[919429]:bool[19] "dead after last mention" "expr temp" "maybe param" "temp"
    (919432 'move' call_tmp[919429](287568 call _cond_test[1778268] cleanup[287545]))
    if call_tmp[919429]
    {
      const-ref call_tmp[919436]:_ref(bool)[1466299] "dead after last mention" "maybe param" "reference to a const" "temp"
      (919439 'move' call_tmp[919436](287560 call _unowned[1275529] arr[287540]))
      val call_tmp[919441]:BaseArr[272224] "dead after last mention" "expr temp" "maybe param" "temp"
      (919444 'move' call_tmp[919441] cleanup[287545])
      const-val coerce_tmp[3882606]:bool[19] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (3882610 'move' coerce_tmp[3882606](3882608 'deref' call_tmp[919436]))
      val default_arg_deinitElts[3882631]:bool[19] "dead after last mention" "default actual temp" "expr temp" "maybe param" "maybe type" "suppress lvalue error" "temp"
      (287558 call _do_destroy_arr[3882014] coerce_tmp[3882606] call_tmp[919441] 1)
    }
    (629017 return _void[46])
  }
}