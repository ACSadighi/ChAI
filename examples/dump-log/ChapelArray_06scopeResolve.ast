AST dump for ChapelArray after pass scopeResolve.
Module use list: ChapelBase ChapelTuple ChapelLocale ArrayViewSlice ArrayViewRankChange ArrayViewReindex Reflection ChapelDebugPrint CTypes ChapelPrivatization ChplConfig ChapelArrayViewElision ChapelDomain Sort HaltWrappers FormattedIO ChapelShortArrayTransfer 

{
  unknown numPrivateObjects[247482](247484 call chpl__processorAtomicType int(64)[10])
  (247487 'end of statement')
  unknown nullPid[247489] "param"(247490 call - 1)
  (247494 'end of statement')
  unknown debugBulkTransfer[247496] "config" "param" 0
  (247499 'end of statement')
  unknown useBulkTransfer[247501] "config" "param" 1
  (247504 'end of statement')
  unknown useBulkTransferStride[247506] "config" "param" 1
  (247509 'end of statement')
  unknown useBulkPtrTransfer[247511] "config" "param" useBulkTransfer[247501]
  (247514 'end of statement')
  unknown disableConstDomainOpt[247516] "config" "param" 0
  (247519 'end of statement')
  unknown debugOptimizedSwap[247521] "config" "param" 0
  (247524 'end of statement')
  unknown PODValAccess[247526] "config" "param" 1
  (247529 'end of statement')
  unknown useBulkTransferDist[247531] "config" "param" 0
  (247534 'end of statement')
  unknown arrayAsVecGrowthFactor[247536] "config" "param" 1.5
  (247539 'end of statement')
  unknown debugArrayAsVec[247541] "config" "param" 0
  (247544 'end of statement')
  unknown logDistArrEltAccess[247546] "config" "param" 0
  (247549 'end of statement')
  unknown logAllArrEltAccess[247551] "config" "param" 0
  (247554 'end of statement')
  function _isPrivatized[247555](arg value[247557]:_any[141](?)) param : _unknown[42]
  {
    (247560 return(247561 call &&(247563 call ||(247565 call !(247568 call compiledForSingleLocale))(247569 call == CHPL_LOCALE_MODEL[29682] "gpu"))(247573 call ||(247575 call && 0(247584 call(247581 call .(247578 call postfix! value[247557]) c"dsiSupportsPrivatization")))(247593 call(247590 call .(247585 call postfix! value[247557]) c"dsiRequiresPrivatization")))))
  }
  function _newPrivatizedClass[247596](arg value[247598]:_any[141](?)) : _unknown[42]
  {
    const pid[247603] "const"(247610 call(247607 call . numPrivateObjects[247482] c"fetchAdd") 1)
    (247613 'end of statement')
    const hereID[247615] "const"(247617 call .(407542 call here[135591]) c"id")
    (247621 'end of statement')
    const privatizeData[247623] "const"(247630 call(247627 call . value[247598] c"dsiGetPrivatizeData"))
    (247632 'end of statement')
    const definedConst[247634] "const"(247645 IfExpr (395507 'is_subtype' BaseDom[424169](?)(247638 'typeof' value[247598])) then
    { scopeless
      (247641 call . value[247598] c"definedConst")
    } else
    { scopeless
      none[48]
    } )
    (247649 'end of statement')
    {
      unknown tmpIter[390274] "expr temp" "maybe ref" "no copy" "temp"
      (390277 'move' tmpIter[390274] Locales[309572])
      unknown isBounded[390485] "maybe param" "temp"
      (390491 'move' isBounded[390485](390487 call chpl_supportsBoundedCoforall tmpIter[390274] 0))
      if isBounded[390485]
      {
        const _coforallCount[390354] "const" "end count" "temp"
        (390422 'move' _coforallCount[390354](390419 call _endCountAlloc 1))
        unknown numTasks[390355] "temp"
        (390406 'move' numTasks[390355](390402 call chpl_boundedCoforallSize tmpIter[390274] 0))
        (390397 call _upEndCount _coforallCount[390354] 1 numTasks[390355])
        (390394 call chpl_resetTaskSpawn numTasks[390355])
        unknown _indexOfInterest[390362] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[390363] "expr temp" "temp"
        (390372 'move' _iterator[390363](390370 call _getIterator tmpIter[390274]))
        Defer
        {
          {
            (390387 call _freeIterator _iterator[390363])
          }
        }
        { scopeless type
          (390377 'move' _indexOfInterest[390362](390374 call iteratorIndex _iterator[390363]))
        }
        ForLoop[390364]
        {
          unknown loc[390281] "coforall index var" "index var" "insert auto destroy"
          (390382 'move' loc[390281] _indexOfInterest[390362])
          {
            {
              const tmp[390287] "const" "temp"
              (390289 'move' tmp[390287](390291 'deref'(390292 '_wide_get_locale' loc[390281])))
              {
                if(390296 call _cond_test(390298 call != hereID[247615](390301 call .(412872 call here[135591]) c"id")))
                {
                  unknown newValue[390306](390311 call(390308 call . value[247598] c"dsiPrivatize") privatizeData[247623])
                  (390314 'end of statement')
                  if(390316 call _cond_test(395508 'is_subtype' BaseDom[424169](?)(390319 'typeof' value[247598])))
                  {
                    (390324 call =(390326 call . newValue[390306] c"definedConst") definedConst[247634])
                  }
                  (390331 'chpl_newPrivatizedClass' newValue[390306] pid[247603])
                  (390335 call =(390337 call . newValue[390306] c"pid") pid[247603])
                }
                {
                  (390342 'chpl_newPrivatizedClass' value[247598] pid[247603])
                  (390346 call =(390348 call . value[247598] c"pid") pid[247603])
                }
              }
              (390284 'elided on block' 0 tmp[390287])
            }
            (390357 call _downEndCount _coforallCount[390354] nil[32])
            (390356 'coforall loop')
          }
          label _continueLabel[390367]
          _indexOfInterest[390362]
          _iterator[390363]
        }
        label _breakLabel[390368]
        Defer
        {
          {
            (390409 call _endCountFree _coforallCount[390354])
          }
        }
        (390414 call _waitEndCount _coforallCount[390354] 1 numTasks[390355])
      }
      {
        const _coforallCount[390426] "const" "end count" "temp"
        (390482 'move' _coforallCount[390426](390479 call _endCountAlloc 1))
        unknown _indexOfInterest[390434] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[390435] "expr temp" "temp"
        (390444 'move' _iterator[390435](390442 call _getIterator tmpIter[390274]))
        Defer
        {
          {
            (390459 call _freeIterator _iterator[390435])
          }
        }
        { scopeless type
          (390449 'move' _indexOfInterest[390434](390446 call iteratorIndex _iterator[390435]))
        }
        ForLoop[390436]
        {
          unknown loc[247650] "coforall index var" "index var" "insert auto destroy"
          (390454 'move' loc[247650] _indexOfInterest[390434])
          (390466 call _upEndCount _coforallCount[390426] 1)
          {
            {
              const tmp[247720] "const" "temp"
              (247721 'move' tmp[247720](247718 'deref'(247717 '_wide_get_locale' loc[247650])))
              {
                if(247713 call _cond_test(247706 call != hereID[247615](247710 call .(407550 call here[135591]) c"id")))
                {
                  unknown newValue[247657](247664 call(247661 call . value[247598] c"dsiPrivatize") privatizeData[247623])
                  (247667 'end of statement')
                  if(247681 call _cond_test(395509 'is_subtype' BaseDom[424169](?)(247679 'typeof' value[247598])))
                  {
                    (247669 call =(247672 call . newValue[247657] c"definedConst") definedConst[247634])
                  }
                  (247685 'chpl_newPrivatizedClass' newValue[247657] pid[247603])
                  (247688 call =(247691 call . newValue[247657] c"pid") pid[247603])
                }
                {
                  (247696 'chpl_newPrivatizedClass' value[247598] pid[247603])
                  (247699 call =(247702 call . value[247598] c"pid") pid[247603])
                }
              }
              (247724 'elided on block' 0 tmp[247720])
            }
            (390429 call _downEndCount _coforallCount[390426] nil[32])
            (390428 'coforall loop')
          }
          label _continueLabel[390439]
          _indexOfInterest[390434]
          _iterator[390435]
        }
        label _breakLabel[390440]
        Defer
        {
          {
            (390470 call _endCountFree _coforallCount[390426])
          }
        }
        (390475 call _waitEndCount _coforallCount[390426] 1)
      }
    }
    (247729 return pid[247603])
  }
  { scopeless type
    int(64)[10]
  }
  function _freePrivatizedClass[247734](arg pid[247737] :
  int(64)[10], arg original[247741] :
  RootClass[419105](?)) : _unknown[42] "no return value for void"
  {
    if(247752 call _cond_test(247748 call == pid[247737] nullPid[247489]))
    {
      (247746 return _void[46])
    }
    {
      unknown tmpIter[390495] "expr temp" "maybe ref" "no copy" "temp"
      (390498 'move' tmpIter[390495] Locales[309572])
      unknown isBounded[390680] "maybe param" "temp"
      (390686 'move' isBounded[390680](390682 call chpl_supportsBoundedCoforall tmpIter[390495] 0))
      if isBounded[390680]
      {
        const _coforallCount[390549] "const" "end count" "temp"
        (390617 'move' _coforallCount[390549](390614 call _endCountAlloc 1))
        unknown numTasks[390550] "temp"
        (390601 'move' numTasks[390550](390597 call chpl_boundedCoforallSize tmpIter[390495] 0))
        (390592 call _upEndCount _coforallCount[390549] 1 numTasks[390550])
        (390589 call chpl_resetTaskSpawn numTasks[390550])
        unknown _indexOfInterest[390557] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[390558] "expr temp" "temp"
        (390567 'move' _iterator[390558](390565 call _getIterator tmpIter[390495]))
        Defer
        {
          {
            (390582 call _freeIterator _iterator[390558])
          }
        }
        { scopeless type
          (390572 'move' _indexOfInterest[390557](390569 call iteratorIndex _iterator[390558]))
        }
        ForLoop[390559]
        {
          unknown loc[390502] "coforall index var" "index var" "insert auto destroy"
          (390577 'move' loc[390502] _indexOfInterest[390557])
          {
            {
              const tmp[390508] "const" "temp"
              (390510 'move' tmp[390508](390512 'deref'(390513 '_wide_get_locale' loc[390502])))
              {
                unknown prv[390517](390519 call chpl_getPrivatizedCopy unmanaged RootClass[468145] pid[247737])
                (390524 'end of statement')
                if(390526 call _cond_test(390528 call != prv[390517] original[247741]))
                {
                  (390534 call chpl__delete prv[390517])
                }
                function chpl_clearPrivatizedClass[390537](arg pid[390541] :
                int(64)[10]) : void[4] "extern" "local args" "no fn body"
                {
                }
                (390546 call chpl_clearPrivatizedClass pid[247737])
              }
              (390505 'elided on block' 0 tmp[390508])
            }
            (390552 call _downEndCount _coforallCount[390549] nil[32])
            (390551 'coforall loop')
          }
          label _continueLabel[390562]
          _indexOfInterest[390557]
          _iterator[390558]
        }
        label _breakLabel[390563]
        Defer
        {
          {
            (390604 call _endCountFree _coforallCount[390549])
          }
        }
        (390609 call _waitEndCount _coforallCount[390549] 1 numTasks[390550])
      }
      {
        const _coforallCount[390621] "const" "end count" "temp"
        (390677 'move' _coforallCount[390621](390674 call _endCountAlloc 1))
        unknown _indexOfInterest[390629] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[390630] "expr temp" "temp"
        (390639 'move' _iterator[390630](390637 call _getIterator tmpIter[390495]))
        Defer
        {
          {
            (390654 call _freeIterator _iterator[390630])
          }
        }
        { scopeless type
          (390644 'move' _indexOfInterest[390629](390641 call iteratorIndex _iterator[390630]))
        }
        ForLoop[390631]
        {
          unknown loc[247757] "coforall index var" "index var" "insert auto destroy"
          (390649 'move' loc[247757] _indexOfInterest[390629])
          (390661 call _upEndCount _coforallCount[390621] 1)
          {
            {
              const tmp[247799] "const" "temp"
              (247800 'move' tmp[247799](247797 'deref'(247796 '_wide_get_locale' loc[247757])))
              {
                unknown prv[247763](247765 call chpl_getPrivatizedCopy unmanaged RootClass[468145] pid[247737])
                (247770 'end of statement')
                if(247780 call _cond_test(247776 call != prv[247763] original[247741]))
                {
                  (247773 call chpl__delete prv[247763])
                }
                function chpl_clearPrivatizedClass[247785](arg pid[247788] :
                int(64)[10]) : void[4] "extern" "local args" "no fn body"
                {
                }
                (247794 call chpl_clearPrivatizedClass pid[247737])
              }
              (247803 'elided on block' 0 tmp[247799])
            }
            (390624 call _downEndCount _coforallCount[390621] nil[32])
            (390623 'coforall loop')
          }
          label _continueLabel[390634]
          _indexOfInterest[390629]
          _iterator[390630]
        }
        label _breakLabel[390635]
        Defer
        {
          {
            (390665 call _endCountFree _coforallCount[390621])
          }
        }
        (390670 call _waitEndCount _coforallCount[390621] 1)
      }
    }
  }
  { scopeless type
    void[4]
  }
  function _reprivatize[247811](arg value[247813]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    const pid[247818] "const"(247820 call . value[247813] c"pid")
    (247824 'end of statement')
    const hereID[247826] "const"(247828 call .(407553 call here[135591]) c"id")
    (247832 'end of statement')
    const reprivatizeData[247834] "const"(247841 call(247838 call . value[247813] c"dsiGetReprivatizeData"))
    (247843 'end of statement')
    {
      unknown tmpIter[390690] "expr temp" "maybe ref" "no copy" "temp"
      (390693 'move' tmpIter[390690] Locales[309572])
      unknown isBounded[390874] "maybe param" "temp"
      (390880 'move' isBounded[390874](390876 call chpl_supportsBoundedCoforall tmpIter[390690] 0))
      if isBounded[390874]
      {
        const _coforallCount[390743] "const" "end count" "temp"
        (390811 'move' _coforallCount[390743](390808 call _endCountAlloc 1))
        unknown numTasks[390744] "temp"
        (390795 'move' numTasks[390744](390791 call chpl_boundedCoforallSize tmpIter[390690] 0))
        (390786 call _upEndCount _coforallCount[390743] 1 numTasks[390744])
        (390783 call chpl_resetTaskSpawn numTasks[390744])
        unknown _indexOfInterest[390751] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[390752] "expr temp" "temp"
        (390761 'move' _iterator[390752](390759 call _getIterator tmpIter[390690]))
        Defer
        {
          {
            (390776 call _freeIterator _iterator[390752])
          }
        }
        { scopeless type
          (390766 'move' _indexOfInterest[390751](390763 call iteratorIndex _iterator[390752]))
        }
        ForLoop[390753]
        {
          unknown loc[390697] "coforall index var" "index var" "insert auto destroy"
          (390771 'move' loc[390697] _indexOfInterest[390751])
          {
            {
              const tmp[390703] "const" "temp"
              (390705 'move' tmp[390703](390707 'deref'(390708 '_wide_get_locale' loc[390697])))
              {
                unknown newValue[390712] value[247813]
                (390715 'end of statement')
                if(390717 call _cond_test(390719 call != hereID[247826](390722 call .(412878 call here[135591]) c"id")))
                {
                  (390727 call = newValue[390712](390730 call chpl_getPrivatizedCopy(390731 'typeof' newValue[390712]) pid[247818]))
                  (390738 call(390735 call . newValue[390712] c"dsiReprivatize") value[247813] reprivatizeData[247834])
                }
              }
              (390700 'elided on block' 0 tmp[390703])
            }
            (390746 call _downEndCount _coforallCount[390743] nil[32])
            (390745 'coforall loop')
          }
          label _continueLabel[390756]
          _indexOfInterest[390751]
          _iterator[390752]
        }
        label _breakLabel[390757]
        Defer
        {
          {
            (390798 call _endCountFree _coforallCount[390743])
          }
        }
        (390803 call _waitEndCount _coforallCount[390743] 1 numTasks[390744])
      }
      {
        const _coforallCount[390815] "const" "end count" "temp"
        (390871 'move' _coforallCount[390815](390868 call _endCountAlloc 1))
        unknown _indexOfInterest[390823] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[390824] "expr temp" "temp"
        (390833 'move' _iterator[390824](390831 call _getIterator tmpIter[390690]))
        Defer
        {
          {
            (390848 call _freeIterator _iterator[390824])
          }
        }
        { scopeless type
          (390838 'move' _indexOfInterest[390823](390835 call iteratorIndex _iterator[390824]))
        }
        ForLoop[390825]
        {
          unknown loc[247844] "coforall index var" "index var" "insert auto destroy"
          (390843 'move' loc[247844] _indexOfInterest[390823])
          (390855 call _upEndCount _coforallCount[390815] 1)
          {
            {
              const tmp[247886] "const" "temp"
              (247887 'move' tmp[247886](247884 'deref'(247883 '_wide_get_locale' loc[247844])))
              {
                unknown newValue[247850] value[247813]
                (247853 'end of statement')
                if(247879 call _cond_test(247872 call != hereID[247826](247876 call .(407557 call here[135591]) c"id")))
                {
                  (247855 call = newValue[247850](247859 call chpl_getPrivatizedCopy(247861 'typeof' newValue[247850]) pid[247818]))
                  (247869 call(247866 call . newValue[247850] c"dsiReprivatize") value[247813] reprivatizeData[247834])
                }
              }
              (247890 'elided on block' 0 tmp[247886])
            }
            (390818 call _downEndCount _coforallCount[390815] nil[32])
            (390817 'coforall loop')
          }
          label _continueLabel[390828]
          _indexOfInterest[390823]
          _iterator[390824]
        }
        label _breakLabel[390829]
        Defer
        {
          {
            (390859 call _endCountFree _coforallCount[390815])
          }
        }
        (390864 call _waitEndCount _coforallCount[390815] 1)
      }
    }
  }
  { scopeless type
    void[4]
  }
  function _makeIndexTuple[247898](param arg rank[247900]:_any[141](?), arg t[247903] :
  _tuple[246](?), param arg concept[247907] :
  string[244], param arg expand[247912] :
  bool[19] =
  0) : _unknown[42]
  {
    if(247937 call _cond_test(247930 call == rank[247900](247934 call . t[247903] c"size")))
    {
      (247917 return t[247903])
    }
    {
      (247921 call compilerError "rank of the " concept[247907] " must match domain rank")
    }
  }
  function _makeIndexTuple[247945](param arg rank[247947]:_any[141](?), arg val[247950] :
  integral[159](?), param arg concept[247954] :
  string[244], param arg expand[247959] :
  bool[19] =
  0) : _unknown[42]
  {
    if(248054 call _cond_test(248047 call || expand[247959](248050 call == rank[247947] 1)))
    {
      unknown t[247966](247967 call * rank[247947](247971 'typeof' val[247950]))
      (247973 'end of statement')
      {
        unknown i[247974] "index var" 0
        unknown tmp[247990] "maybe param" "temp"
        (248002 'move' tmp[247990](248000 call chpl_compute_low_param_loop_bound 0(247977 call - rank[247947] 1)))
        unknown tmp[247991] "maybe param" "temp"
        (248012 'move' tmp[247991](248010 call chpl_compute_high_param_loop_bound 0(248007 call - rank[247947] 1)))
        unknown tmp[247992] "maybe param" "temp"
        (248015 'move' tmp[247992] 1)
        ParamForLoop[248017]
        { i[247974] tmp[247990] tmp[247991] tmp[247992]
          (247983 call =(247986 call t[247966] i[247974]) val[247950])
        }
        label _unused_continueLabel[247994]
        label _breakLabel[247993]
      }
      (248026 return t[247966])
    }
    {
      (248030 call compilerWarning concept[247954] " is of type "(248035 call :(248038 'typeof' val[247950]) string[244]))
      (248041 call compilerError "rank of the " concept[247954] " must match domain rank")
      (248045 return val[247950])
    }
  }
  function _makeIndexTuple[248060](param arg rank[248062]:_any[141](?), arg val[248064]:_any[141](?), param arg concept[248067] :
  string[244], param arg expand[248072] :
  bool[19] =
  0) : _unknown[42] "last resort" "no return value for void"
  {
    (248078 call compilerError "cannot use " concept[248067] " of type "(248084 call :(248087 'typeof' val[248064]) string[244]))
  }
  function _newArray[248091](arg value[248093]:_any[141](?)) : _unknown[42] "no copy return"
  {
    if(248115 call _cond_test(248113 call _isPrivatized value[248093]))
    {
      (248096 return(248097 'new'(248099 call _array[255540](?)(248101 call _newPrivatizedClass value[248093]) value[248093])))
    }
    {
      (248105 return(248106 'new'(248108 call _array[255540](?) nullPid[247489] value[248093])))
    }
  }
  function _getDistribution[248123](arg value[248125]:_any[141](?)) : _unknown[42]
  {
    if(248152 call _cond_test(248150 call _isPrivatized value[248125]))
    {
      (248128 return(248129 'new'(248131 call _distribution[268253](?)(248133 call . value[248125] c"pid") value[248125](_unowned = 1))))
    }
    {
      (248140 return(248141 'new'(248143 call _distribution[268253](?) nullPid[247489] value[248125](_unowned = 1))))
    }
  }
  function chpl__buildArrayRuntimeType[248160](arg dom[248163] :
  _domain[225034](?), arg eltType[248166]:_any[141](?)) type : _unknown[42] "runtime type init fn"
  {
    (248169 return(248174 call(248171 call . dom[248163] c"buildArray") eltType[248166] 0))
  }
  function chpl__convertRuntimeTypeToValue[248179](arg dom[248182] :
  _domain[225034](?), arg eltType[248185]:_any[141](?), param arg isNoInit[248188] :
  bool[19], arg definedConst[248192] :
  bool[19]) : _unknown[42] "no copy returns owned"
  {
    (248196 return(248201 call(248198 call . dom[248182] c"buildArray") eltType[248185](248203 call ! isNoInit[248188])))
  }
  function chpl__convertValueToRuntimeType[248208](arg arr[248213] :
  (248211 call chpl__buildArrayRuntimeType nil[32])) type : _unknown[42]
  {
    (248217 return(248219 call chpl__buildArrayRuntimeType(248221 call . arr[248213] c"_dom")(248225 call . arr[248213] c"eltType")))
  }
  unknown CHPL_WARN_DOMAIN_LITERAL[248231] "config" "param" "unset"
  (248234 'end of statement')
  unknown arrayLiteralLowBound[248236] "config" "param" defaultLowBound[52100]
  (248239 'end of statement')
  unknown capturedIteratorLowBound[248241] "config" "param" defaultLowBound[52100]
  (248244 'end of statement')
  function chpl__buildArrayExpr[248245](in arg elems[248249]:_any[141](?) ...) : _unknown[42] "ignore transfer errors"
  {
    if(248276 call _cond_test(248265 call &&(248267 call == CHPL_WARN_DOMAIN_LITERAL[248231] "true")(248272 call isRange(248274 call elems[248249] 0))))
    {
      (248255 call compilerWarning "Encountered an array literal with range element(s)." " Did you mean a domain literal here\?" " If so, use {...} instead of [...].")
    }
    unknown homog[248281] "param"(248283 call isHomogeneousTuple elems[248249])
    (248286 'end of statement')
    unknown eltType[248288] "type variable"(248297 IfExpr  homog[248281] then
    { scopeless
      (248293 'typeof'(248291 call elems[248249] 0))
    } else
    { scopeless
      (248295 call chpl_computeUnifiedType elems[248249])
    } )
    unknown dom[248302](248311 call chpl__buildDomainExpr(248304 call #(248307 call chpl_build_low_bounded_range arrayLiteralLowBound[248236]) k[248247]) 0)
    (248315 'end of statement')
    unknown arr[248317](248322 call(248319 call . dom[248302] c"buildArray") eltType[248288](initElts = 0))
    (248327 'end of statement')
    if(248518 call _cond_test homog[248281])
    {
      {
        unknown _indexOfInterest[248358] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[248359] "expr temp" "temp"
        (248368 'move' _iterator[248359](248366 call _getIterator(248374 call chpl_direct_range_iter 0(248372 call chpl__nudgeHighBound k[248247]))))
        Defer
        {
          {
            (248389 call _freeIterator _iterator[248359])
          }
        }
        { scopeless type
          (248379 'move' _indexOfInterest[248358](248376 call iteratorIndex _iterator[248359]))
        }
        ForLoop[248360]
        {
          unknown i[248329] "index var" "insert auto destroy"
          (248384 'move' i[248329] _indexOfInterest[248358])
          {
            unknown dst[248339] "ref var"(248341 call arr[248317](248342 call + i[248329] arrayLiteralLowBound[248236]))
            (248347 'end of statement')
            unknown src[248349] "ref var"(248351 call elems[248249] i[248329])
            (248354 'end of statement')
            (248355 '=' dst[248339] src[248349])
          }
          label _continueLabel[248363]
          _indexOfInterest[248358]
          _iterator[248359]
        }
        label _breakLabel[248364]
      }
    }
    {
      {
        unknown i[248397] "index var" 0
        unknown tmp[248481] "maybe param" "temp"
        (248493 'move' tmp[248481](248491 call chpl_compute_low_param_loop_bound 0(248400 call - k[248247] 1)))
        unknown tmp[248482] "maybe param" "temp"
        (248503 'move' tmp[248482](248501 call chpl_compute_high_param_loop_bound 0(248498 call - k[248247] 1)))
        unknown tmp[248483] "maybe param" "temp"
        (248506 'move' tmp[248483] 1)
        ParamForLoop[248508]
        { i[248397] tmp[248481] tmp[248482] tmp[248483]
          {
            unknown dst[248408] "ref var"(248410 call arr[248317](248411 call + i[248397] arrayLiteralLowBound[248236]))
            (248416 'end of statement')
            unknown src[248418] "ref var"(248420 call elems[248249] i[248397])
            (248423 'end of statement')
            unknown currType[248425] "type variable"(248427 'typeof' src[248418])
            if(248477 call _cond_test(248463 call ||(248465 call == currType[248425] eltType[248288])(248473 call canResolve module=[222] Reflection[1804] "=" dst[248408] src[248418])))
            {
              (248430 '=' dst[248408] src[248418])
            }
            {
              (248435 call compilerError(248436 call +(248438 call +(248440 call +(248442 call +(248444 call + "Array literal element "(248449 call : i[248397] string[244])) " expected to be of type ")(248454 call : eltType[248288] string[244])) " but is of type ")(248459 call : currType[248425] string[244])))
            }
            (407567 'referenced modules list' Reflection[1804])
          }
        }
        label _unused_continueLabel[248485]
        label _breakLabel[248484]
      }
    }
    (248526 call(248523 call . arr[248317] c"dsiElementInitializationComplete"))
    (248527 return arr[248317])
  }
  function chpl_computeUnifiedType[248531](arg x[248534] :
  _tuple[246](?)) type : _unknown[42]
  {
    if(248553 call _cond_test(248551 call isHomogeneousTuple x[248534]))
    {
      (248539 return(248543 'typeof'(248541 call x[248534] 0)))
    }
    {
      (248545 return(248549 'typeof'(248547 call chpl_computeUnifiedTypeHelp x[248534])))
    }
  }
  function chpl_computeUnifiedTypeHelp[248559](arg x[248562] :
  _tuple[246](?), arg j[248567] :
  int(64)[10] =
  0) : _unknown[42] "compute unified type helper"
  {
    {
      unknown i[248572] "index var" 0
      unknown tmp[248598] "maybe param" "temp"
      (248610 'move' tmp[248598](248608 call chpl_compute_low_param_loop_bound 0(248579 call chpl__nudgeHighBound(248576 call . x[248562] c"size"))))
      unknown tmp[248599] "maybe param" "temp"
      (248622 'move' tmp[248599](248620 call chpl_compute_high_param_loop_bound 0(248615 call chpl__nudgeHighBound(248617 call . x[248562] c"size"))))
      unknown tmp[248600] "maybe param" "temp"
      (248625 'move' tmp[248600] 1)
      ParamForLoop[248627]
      { i[248572] tmp[248598] tmp[248599] tmp[248600]
        {
          if(248593 call _cond_test(248589 call == i[248572] j[248567]))
          {
            (248584 return(248586 call x[248562] i[248572]))
          }
        }
      }
      label _unused_continueLabel[248602]
      label _breakLabel[248601]
    }
    (248637 call halt "Should never get here")
  }
  function chpl__buildAssociativeArrayExpr[248643](const arg elems[248647]:_any[141](?) ...) : _unknown[42]
  {
    unknown keyType[248652] "type variable"(248656 'typeof'(248654 call elems[248647] 0))
    unknown valType[248659] "type variable"(248663 'typeof'(248661 call elems[248647] 1))
    unknown D[248666](248668 call chpl__buildDomainRuntimeType defaultDist[288287] keyType[248652])
    (248672 'end of statement')
    (248677 call(248674 call . D[248666] c"requestCapacity")(248678 call / k[248645] 2))
    unknown A[248683](248688 call chpl__buildArrayRuntimeType(248685 call chpl__ensureDomainExpr D[248666]) valType[248659])
    (248691 'end of statement')
    {
      unknown i[248692] "index var" 0
      unknown tmp[248824] "maybe param" "temp"
      (248835 'move' tmp[248824](248833 call chpl_compute_low_param_loop_bound 0(248697 call - k[248645] 1)))
      unknown tmp[248825] "maybe param" "temp"
      (248845 'move' tmp[248825](248843 call chpl_compute_high_param_loop_bound 0(248840 call - k[248645] 1)))
      unknown tmp[248826] "maybe param" "temp"
      (248848 'move' tmp[248826] 2)
      ParamForLoop[248850]
      { i[248692] tmp[248824] tmp[248825] tmp[248826]
        {
          unknown elemKey[248706](248708 call elems[248647] i[248692])
          (248711 'end of statement')
          unknown elemVal[248713](248715 call elems[248647](248716 call + i[248692] 1))
          (248721 'end of statement')
          unknown elemKeyType[248723] "type variable"(248725 'typeof' elemKey[248706])
          unknown elemValType[248728] "type variable"(248730 'typeof' elemVal[248713])
          if(248769 call _cond_test(248765 call != elemKeyType[248723] keyType[248652]))
          {
            (248734 call compilerError(248735 call +(248737 call +(248739 call +(248741 call +(248743 call + "Associative array key element "(248748 call :(248750 call / i[248692] 2) string[244])) " expected to be of type ")(248756 call : keyType[248652] string[244])) " but is of type ")(248761 call : elemKeyType[248723] string[244])))
          }
          if(248810 call _cond_test(248806 call != elemValType[248728] valType[248659]))
          {
            (248775 call compilerError(248776 call +(248778 call +(248780 call +(248782 call +(248784 call + "Associative array value element "(248789 call :(248791 call / i[248692] 2) string[244])) " expected to be of type ")(248797 call : valType[248659] string[244])) " but is of type ")(248802 call : elemValType[248728] string[244])))
          }
          (248814 call += D[248666] elemKey[248706])
          (248818 call =(248821 call A[248683] elemKey[248706]) elemVal[248713])
        }
      }
      label _unused_continueLabel[248828]
      label _breakLabel[248827]
    }
    (248859 return A[248683])
  }
  function chpl_incRefCountsForDomainsInArrayEltTypes[248863](arg arr[248867] :
  unmanaged BaseArr[468148], arg eltType[248870]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    if(248919 call _cond_test(248917 call isArrayType eltType[248870]))
    {
      (248874 call =(248879 call . arr[248867] c"_decEltRefCounts") 1)
      unknown arrayEltType[248884] "type variable"(248886 call chpl__eltTypeFromArrayRuntimeType eltType[248870])
      const dom[248890] "const" "ref var"(248892 call chpl__domainFromArrayRuntimeType eltType[248870])
      (248895 'end of statement')
      const dv[248897] "const"(248899 call . dom[248890] c"_instance")
      (248903 'end of statement')
      (248910 call(248907 call . dv[248897] c"add_containing_arr") arr[248867])
      (248913 call chpl_incRefCountsForDomainsInArrayEltTypes arr[248867] arrayEltType[248884])
    }
  }
  function chpl_decRefCountsForDomainsInArrayEltTypes[248925](arg arr[248929] :
  unmanaged BaseArr[468148], arg eltType[248932]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    if(249106 call _cond_test(249104 call isArrayType eltType[248932]))
    {
      if(248949 call _cond_test(248942 call ==(248945 call . arr[248929] c"_decEltRefCounts") 0))
      {
        (248937 call halt "Decrementing array's elements' ref counts without having incremented first!")
      }
      unknown arrayEltType[248955] "type variable"(248957 call chpl__eltTypeFromArrayRuntimeType eltType[248932])
      const dom[248961] "const" "ref var"(248963 call chpl__domainFromArrayRuntimeType eltType[248932])
      (248966 'end of statement')
      (248968 call chpl_decRefCountsForDomainsInArrayEltTypes arr[248929] arrayEltType[248955])
      unknown removeDom[248972](248982 call(248979 call .(248974 call . dom[248961] c"_instance") c"remove_containing_arr") arr[248929])
      (248985 'end of statement')
      if(249099 call _cond_test removeDom[248972])
      {
        {
          const tmp[249090] "const" "temp"
          (249091 'move' tmp[249090](249088 'deref'(249087 '_wide_get_locale'(248988 call . dom[248961] c"_instance"))))
          {
            const inst[248993] "const"(248995 call . dom[248961] c"_instance")
            (248999 'end of statement')
            unknown tmp[249010] "temp"(249009 call(249006 call . inst[248993] c"remove"))
            (249017 call _check_tuple_var_decl tmp[249010] 2)
            unknown domToFree[249001](249011 call tmp[249010] 0)
            unknown distToRemove[249003](249014 call tmp[249010] 1)
            (249022 'end of statement')
            unknown distToFree[249024] nil[32] unmanaged BaseDist?[468142]
            (249030 'end of statement')
            if(249046 call _cond_test(249042 call != distToRemove[249003] nil[32]))
            {
              (249032 call = distToFree[249024](249041 call(249038 call .(249035 call postfix! distToRemove[249003]) c"remove")))
            }
            if(249061 call _cond_test(249057 call != domToFree[249001] nil[32]))
            {
              (249051 call _delete_dom inst[248993](249054 call _isPrivatized inst[248993]))
            }
            if(249082 call _cond_test(249078 call != distToFree[249024] nil[32]))
            {
              (249067 call _delete_dist(249068 call postfix! distToFree[249024])(249072 call _isPrivatized(249074 call . inst[248993] c"dist")))
            }
          }
          (249094 'elided on block' 0 tmp[249090])
        }
      }
    }
  }
  function chpl__distributed[249112](arg d[249114]:_any[141](?), arg dom[249117] :
  _domain[225034](?), arg definedConst[249121] :
  bool[19]) : _unknown[42]
  {
    if(249268 call _cond_test definedConst[249121])
    {
      if(249192 call _cond_test(249191 call(249188 call . dom[249117] c"isRectangular")))
      {
        const distDom[249128] "const"(249129 'new'(249131 call _domain[225034](?)(249136 call(249133 call . d[249114] c"newRectangularDom")(249138 call . dom[249117] c"rank")(249145 call .(249142 call . dom[249117] c"_value") c"idxType")(249152 call .(249149 call . dom[249117] c"_value") c"strides")(249159 call(249156 call . dom[249117] c"dims")) definedConst[249121])))
        (249162 'end of statement')
        (249163 return distDom[249128])
      }
      {
        const distDom[249167] "const" dom[249117](249168 call chpl__distributed d[249114](249172 call chpl__buildDomainRuntimeType defaultDist[288287](249178 call .(249175 call . dom[249117] c"_value") c"idxType")) 1)
        (249184 'end of statement')
        (249185 return distDom[249167])
      }
    }
    {
      if(249263 call _cond_test(249262 call(249259 call . dom[249117] c"isRectangular")))
      {
        unknown distDom[249199](249200 'new'(249202 call _domain[225034](?)(249207 call(249204 call . d[249114] c"newRectangularDom")(249209 call . dom[249117] c"rank")(249216 call .(249213 call . dom[249117] c"_value") c"idxType")(249223 call .(249220 call . dom[249117] c"_value") c"strides")(249230 call(249227 call . dom[249117] c"dims")) definedConst[249121])))
        (249233 'end of statement')
        (249234 return distDom[249199])
      }
      {
        unknown distDom[249238] dom[249117](249239 call chpl__distributed d[249114](249243 call chpl__buildDomainRuntimeType defaultDist[288287](249249 call .(249246 call . dom[249117] c"_value") c"idxType")) 1)
        (249255 'end of statement')
        (249256 return distDom[249238])
      }
    }
  }
  function chpl__distributed[249274](arg d[249276]:_any[141](?), arg expr[249278]:_any[141](?), arg definedConst[249281] :
  bool[19]) : _unknown[42] "last resort" "no return value for void"
  {
    (249286 call compilerError "'dmapped' can currently only be applied to domains.")
  }
  function chpl__isArrayView[249292](arg arr[249294]:_any[141](?)) param : _unknown[42]
  {
    const value[249298] "const"(249307 IfExpr (249300 call isArray arr[249294]) then
    { scopeless
      (249303 call . arr[249294] c"_value")
    } else
    { scopeless
      arr[249294]
    } )
    (249311 'end of statement')
    unknown isSlice[249313] "param"(249318 call(249315 call . value[249298] c"isSliceArrayView"))
    (249320 'end of statement')
    unknown isRankChange[249322] "param"(249327 call(249324 call . value[249298] c"isRankChangeArrayView"))
    (249329 'end of statement')
    unknown isReindex[249331] "param"(249336 call(249333 call . value[249298] c"isReindexArrayView"))
    (249338 'end of statement')
    (249339 return(249340 call ||(249342 call || isSlice[249313] isRankChange[249322]) isReindex[249331]))
  }
  function chpl__getActualArray[249349](arg arr[249351]:_any[141](?)) : _unknown[42]
  {
    unknown value[249355](249364 IfExpr (249357 call isArray arr[249351]) then
    { scopeless
      (249360 call . arr[249351] c"_value")
    } else
    { scopeless
      arr[249351]
    } )
    (249368 'end of statement')
    unknown ret[249370](249380 IfExpr (249372 call chpl__isArrayView value[249355]) then
    { scopeless
      (249378 call(249375 call . value[249355] c"_getActualArray"))
    } else
    { scopeless
      value[249355]
    } )
    (249384 'end of statement')
    (249385 return ret[249370])
  }
  function chpl__isDROrDRView[249389](arg arg[249391]:_any[141](?)) param : _unknown[42]
  {
    if(249513 call _cond_test(249503 call ||(249506 call isDomain arg[249391])(395511 'is_subtype' BaseDom[424169](?)(249511 'typeof' arg[249391]))))
    {
      const value[249396] "const"(249405 IfExpr (249398 call isDomain arg[249391]) then
      { scopeless
        (249401 call . arg[249391] c"_value")
      } else
      { scopeless
        arg[249391]
      } )
      (249409 'end of statement')
      unknown isDR[249411] "param"(249416 call(249413 call . value[249396] c"isDefaultRectangular"))
      (249418 'end of statement')
      unknown isDRView[249420] "param"(249421 call &&(249424 call chpl__isDomainView value[249396])(249432 call(249429 call .(249427 call chpl__getActualDomain value[249396]) c"isDefaultRectangular")))
      (249434 'end of statement')
      (249435 return(249436 call || isDR[249411] isDRView[249420]))
    }
    {
      if(249499 call _cond_test(249489 call ||(249492 call isArray arg[249391])(395512 'is_subtype' BaseArr[424790](?)(249497 'typeof' arg[249391]))))
      {
        const value[249442] "const"(249451 IfExpr (249444 call isArray arg[249391]) then
        { scopeless
          (249447 call . arg[249391] c"_value")
        } else
        { scopeless
          arg[249391]
        } )
        (249455 'end of statement')
        unknown isDR[249457] "param"(249462 call(249459 call . value[249442] c"isDefaultRectangular"))
        (249464 'end of statement')
        unknown isDRView[249466] "param"(249467 call &&(249470 call chpl__isArrayView value[249442])(249478 call(249475 call .(249473 call chpl__getActualArray value[249442]) c"isDefaultRectangular")))
        (249480 'end of statement')
        (249481 return(249482 call || isDR[249457] isDRView[249466]))
      }
      {
        (249487 return 0)
      }
    }
  }
  function chpl__isDomainView[249520](arg dom[249522]:_any[141](?)) param : _unknown[42]
  {
    const value[249526] "const"(249535 IfExpr (249528 call isDomain dom[249522]) then
    { scopeless
      (249531 call . dom[249522] c"_value")
    } else
    { scopeless
      dom[249522]
    } )
    (249539 'end of statement')
    unknown isSlice[249541] "param"(249548 call(249545 call . value[249526] c"isSliceDomainView"))
    (249550 'end of statement')
    unknown isRankChange[249552] "param"(249559 call(249556 call . value[249526] c"isRankChangeDomainView"))
    (249561 'end of statement')
    unknown isReindex[249563] "param"(249570 call(249567 call . value[249526] c"isReindexDomainView"))
    (249572 'end of statement')
    (249573 return(249574 call ||(249576 call || isSlice[249541] isRankChange[249552]) isReindex[249563]))
  }
  function chpl__getActualDomain[249583](arg dom[249585]:_any[141](?)) : _unknown[42]
  {
    unknown value[249589](249598 IfExpr (249591 call isDomain dom[249585]) then
    { scopeless
      (249594 call . dom[249585] c"_value")
    } else
    { scopeless
      dom[249585]
    } )
    (249602 'end of statement')
    unknown ret[249604](249614 IfExpr (249606 call chpl__isDomainView value[249589]) then
    { scopeless
      (249612 call(249609 call . value[249589] c"_getActualDomain"))
    } else
    { scopeless
      value[249589]
    } )
    (249618 'end of statement')
    (249619 return ret[249604])
  }
  function chpl__distributed[249623](arg d[249625]:_any[141](?), arg domainType[249627]:_any[141](?), arg definedConst[249630] :
  bool[19]) type : _unknown[42]
  {
    if(249649 call _cond_test(249644 call !(249647 call isDomainType domainType[249627])))
    {
      (249635 call compilerError "cannot apply 'dmapped' to the non-domain type "(249639 call : domainType[249627] string[244]))
    }
    if(249732 call _cond_test(249730 call chpl__isRectangularDomType domainType[249627]))
    {
      unknown dom[249656] domainType[249627]
      (249659 'end of statement')
      (249660 return(249662 call chpl__buildDomainRuntimeType d[249625](249668 call .(249665 call . dom[249656] c"_value") c"rank")(249675 call .(249672 call . dom[249656] c"_value") c"idxType")(249682 call .(249679 call . dom[249656] c"_value") c"strides")))
    }
    {
      if(249725 call _cond_test(249723 call chpl__isSparseDomType domainType[249627]))
      {
        const parentDom[249687] "const" "ref var"(249689 call chpl__parentDomainFromDomainRuntimeType domainType[249627])
        (249692 'end of statement')
        (249693 return(249695 call chpl__buildSparseDomainRuntimeType d[249625] parentDom[249687]))
      }
      {
        unknown dom[249700] domainType[249627]
        (249703 'end of statement')
        (249704 return(249706 call chpl__buildDomainRuntimeType d[249625](249712 call .(249709 call . dom[249700] c"_value") c"idxType")(249719 call .(249716 call . dom[249700] c"_value") c"parSafe")))
      }
    }
  }
  function chpl__distributionFromDomainRuntimeType[249739](arg rtt[249741]:_any[141](?)) : _unknown[42] "return not owned"
  {
    unknown dist[249745] "no auto destroy" "no copy"(249746 'get runtime type field' rtt[249741] "dist")
    (249752 'end of statement')
    (249753 return(249755 call _getDistribution(249757 call . dist[249745] c"_value")))
  }
  function chpl__eltTypeFromArrayRuntimeType[249762](arg rtt[249764]:_any[141](?)) type : _unknown[42]
  {
    unknown eltType[249768] "no auto destroy" "no copy" "type variable"(249769 'get runtime type field' rtt[249764] "eltType")
    (249773 return eltType[249768])
  }
  function chpl__instanceTypeFromArrayRuntimeType[249777](arg rtt[249779]:_any[141](?)) type : _unknown[42] "ignore runtime type"
  {
    (249782 'chpl_warning' "chpl__instanceTypeFromArrayRuntimeType should not be run")
    (249786 return(249787 'static field type' rtt[249779] "_instance"))
  }
  function chpl__instanceTypeFromDomainRuntimeType[249792](arg rtt[249794]:_any[141](?)) type : _unknown[42] "ignore runtime type"
  {
    (249797 'chpl_warning' "chpl__instanceTypeFromArrayRuntimeType should not be run")
    (249799 return(249800 'static field type' rtt[249794] "_instance"))
  }
  function chpl__buildIndexType[249805](param arg rank[249808] :
  int(64)[10], arg idxType[249811]:_any[141](?)) type : _unknown[42]
  {
    (249818 return idxType[249811])
  }
  where {
    (249813 call == rank[249808] 1)
  }
  function chpl__buildIndexType[249823](param arg rank[249826] :
  int(64)[10], arg idxType[249829]:_any[141](?)) type : _unknown[42]
  {
    (249836 return(249837 call * rank[249826] idxType[249829]))
  }
  where {
    (249831 call > rank[249826] 1)
  }
  function chpl__buildIndexType[249844](param arg rank[249847] :
  int(64)[10]) type : _unknown[42]
  {
    (249851 return(249853 call chpl__buildIndexType rank[249847] int(64)[10]))
  }
  function chpl__buildIndexType[249858](arg d[249861] :
  _domain[225034](?)) type : _unknown[42]
  {
    (249865 return(249867 call chpl__buildIndexType(249869 call . d[249861] c"rank")(249876 call .(249873 call . d[249861] c"_value") c"idxType")))
  }
  function chpl__checkRetEltTypeMatch[249881](arg a[249886] :
  (249884 call chpl__buildArrayRuntimeType nil[32]), arg b[249889]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    if(249917 call _cond_test(249910 call !=(249913 call . a[249886] c"eltType") b[249889]))
    {
      (249894 call compilerError "array element type mismatch in return from "(249898 call :(249901 call . a[249886] c"eltType") string[244]) " to "(249906 call : b[249889] string[244]))
    }
  }
  function chpl__checkRetEltTypeMatch[249923](arg a[249926] :
  _iteratorRecord[165](?), arg b[249929]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    unknown eltType[249933] "type variable"(249935 call iteratorToArrayElementType(249937 'typeof' a[249926]))
    if(249956 call _cond_test(249952 call != eltType[249933] b[249929]))
    {
      (249941 call compilerError "array element type mismatch in return from "(249943 call : eltType[249933] string[244]) " to "(249948 call : b[249929] string[244]))
    }
  }
  function chpl__checkOutEltTypeMatch[249962](arg a[249967] :
  (249965 call chpl__buildArrayRuntimeType nil[32]), arg b[249970]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    if(250003 call _cond_test(249996 call !=(249999 call . a[249967] c"eltType") b[249970]))
    {
      (249975 call compilerError "array element type mismatch in initializing out formal " "with element type "(249982 call : b[249970] string[244]) " from array with element type "(249989 call :(249992 call . a[249967] c"eltType") string[244]))
    }
  }
  function chpl__checkOutEltTypeMatch[250009](arg a[250012] :
  _iteratorRecord[165](?), arg b[250015]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    unknown eltType[250019] "type variable"(250021 call iteratorToArrayElementType(250023 'typeof' a[250012]))
    if(250045 call _cond_test(250041 call != eltType[250019] b[250015]))
    {
      (250027 call compilerError "array element type mismatch in initializing out formal " "with element type "(250030 call : b[250015] string[244]) " from iterator with element type "(250037 call : eltType[250019] string[244]))
    }
  }
  type dmap[250053]
  function chpl__buildDistType[250055](arg t[250057]:_any[141](?)) type : _unknown[42]
  {
    unknown x[250067](250071 'to nilable class from type'(250069 call _to_unmanaged t[250057]))
    (250073 'end of statement')
    unknown y[250075](250076 'new'(250078 call _distribution[268253](?)(250079 call postfix! x[250067])))
    (250083 'end of statement')
    (250084 return(250086 'typeof' y[250075]))
  }
  where {
    (395513 'is_subtype' BaseDist[443581](?)(250062 call _to_borrowed t[250057]))
  }
  function chpl__buildDistType[250090](arg t[250093] :
  record[51](?)) type : _unknown[42]
  {
    (250098 call compilerWarning "The use of 'dmap' is deprecated for this distribution; please replace 'dmap(<DistName>(<args>))' with '<DistName>(<args>)'")
    (250102 return t[250093])
  }
  function chpl__buildDistType[250106](arg t[250108]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    (250112 call compilerError "illegal domain map type specifier - must be a subclass of BaseDist")
  }
  function chpl__buildDistValue[250118](arg x[250121] :
  unmanaged[183](?)) : _unknown[42]
  {
    (250134 return(250135 'new'(250137 call _distribution[268253](?) x[250121])))
  }
  where {
    (395514 'is_subtype' BaseDist[443581](?)(250131 'typeof'(250130 call(250127 call . x[250121] c"borrow"))))
  }
  function chpl__buildDistValue[250142](in arg x[250145] :
  _owned[238](?)) : _unknown[42]
  {
    (250158 return(250159 'new'(250161 call _distribution[268253](?)(250166 call(250163 call . _owned[238](?) c"release") x[250145]))))
  }
  where {
    (395515 'is_subtype' BaseDist[443581](?)(250155 'typeof'(250154 call(250151 call . x[250145] c"borrow"))))
  }
  function chpl__buildDistValue[250171](const  ref arg x[250174] :
  record[51](?)) const ref : _unknown[42]
  {
    (250178 return x[250174])
  }
  function chpl__buildDistValue[250182](arg x[250184]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    (250188 call compilerError "illegal domain map value specifier - must be a subclass of BaseDist")
  }
  function chpl__buildDistDMapValue[250194](const  ref arg x[250197] :
  record[51](?)) const ref : _unknown[42]
  {
    (250202 call compilerWarning "The use of 'dmap' is deprecated for this distribution; please replace 'new dmap(new <DistName>(<args>))' with 'new <DistName>()
    (250206 return(250208 call chpl__buildDistValue x[250197]))
  }
  function chpl__buildDistDMapValue[250212](arg x[250215] :
  unmanaged[183](?)) : _unknown[42]
  {
    (250228 return(250229 'new'(250231 call _distribution[268253](?) x[250215])))
  }
  where {
    (395516 'is_subtype' BaseDist[443581](?)(250225 'typeof'(250224 call(250221 call . x[250215] c"borrow"))))
  }
  function chpl__buildDistDMapValue[250236](in arg x[250239] :
  _owned[238](?)) : _unknown[42]
  {
    (250252 return(250253 'new'(250255 call _distribution[268253](?)(250260 call(250257 call . _owned[238](?) c"release") x[250239]))))
  }
  where {
    (395517 'is_subtype' BaseDist[443581](?)(250249 'typeof'(250248 call(250245 call . x[250239] c"borrow"))))
  }
  function ==[250265](arg d1[250270] :
  (250268 call _distribution[268253](?) ?[227]), arg d2[250276] :
  (250274 call _distribution[268253](?) ?[227])) : _unknown[42] "inline" "operator"
  {
    if(250293 call _cond_test(250283 call ==(250286 call . d1[250270] c"_value")(250290 call . d2[250276] c"_value")))
    {
      (250280 return 1)
    }
    (250298 return(250306 call(250303 call .(250300 call . d1[250270] c"_value") c"dsiEqualDMaps")(250308 call . d2[250276] c"_value")))
  }
  function ==[250313](arg d1[250318] :
  (250316 call _distribution[268253](?) ?[227]), arg d2[250322] :
  record[51](?)) param : _unknown[42] "inline" "operator"
  {
    (250326 return 0)
  }
  function ==[250330](arg d1[250333] :
  record[51](?), arg d2[250339] :
  (250337 call _distribution[268253](?) ?[227])) param : _unknown[42] "inline" "operator"
  {
    (250343 return 0)
  }
  function !=[250347](arg d1[250352] :
  (250350 call _distribution[268253](?) ?[227]), arg d2[250358] :
  (250356 call _distribution[268253](?) ?[227])) : _unknown[42] "inline" "operator"
  {
    (250362 return(250363 call !(250365 call == d1[250352] d2[250358])))
  }
  function !=[250371](arg d1[250376] :
  (250374 call _distribution[268253](?) ?[227]), arg d2[250380] :
  record[51](?)) param : _unknown[42] "inline" "operator"
  {
    (250384 return 1)
  }
  function !=[250388](arg d1[250391] :
  record[51](?), arg d2[250397] :
  (250395 call _distribution[268253](?) ?[227])) param : _unknown[42] "inline" "operator"
  {
    (250401 return 1)
  }
  function chpl_defaultComparator[250405]() : _unknown[42]
  {
    (250411 return(250412 'new'(250414 call DefaultComparator[246408])))
    (396902 'used modules list'(250409 'use' Sort[247204]))
  }
  function shouldReturnRvalueByValue[250417](arg t[250419]:_any[141](?)) param : _unknown[42]
  {
    if(250428 call _cond_test(250425 call ! PODValAccess[247526]))
    {
      (250422 return 0)
    }
    if(250439 call _cond_test(250437 call isPODType t[250419]))
    {
      (250433 return 1)
    }
    (250444 return 0)
  }
  function _array[255540](?).chpl__serialize[250465](arg _mt[250469]:_MT[201], arg this[250467]:_array[255540](?)) : _unknown[42] "method" "primary method"
  {
    (250479 return(250484 call(250481 call .(407644 call . this[250467] c"_instance") c"chpl__serialize")))
  }
  where {
    (250477 call(250474 call .(407639 call . this[250467] c"_instance") c"chpl__rvfMe"))
  }
  function _array[255540](?).chpl__deserialize[250488](arg _mt[250494]:_MT[201], arg this[250490]:_array[255540](?), arg data[250492]:_any[141](?)) : _unknown[42] "method" "primary method" "no copy return"
  {
    unknown arrinst[250498](250507 call(250504 call .(250500 call _to_borrowed(250501 'static field type' this[250490] "_instance")) c"chpl__deserialize") data[250492])
    (250510 'end of statement')
    (250511 return(250512 'new'(250514 call _array[255540](?) nullPid[247489] arrinst[250498](_unowned = 1))))
  }
  function _array[255540](?).chpl__promotionType[250521](arg _mt[250525]:_MT[201], arg this[250523]:_array[255540](?)) type : _unknown[42] "method" "primary method"
  {
    (250528 return(250530 call .(407648 call . this[250523] c"_value") c"eltType"))
  }
  function _array[255540](?)._value[250535](arg _mt[250539]:_MT[201], arg this[250537]:_array[255540](?)) : _unknown[42] "alias scope from this" "inline" "method" "primary method" "no parens"
  {
    if(250555 call _cond_test(250553 call _isPrivatized(449516 call . this[250537] c"_instance")))
    {
      (250543 return(250545 call chpl_getPrivatizedCopy(250547 'typeof'(449501 call . this[250537] c"_instance"))(449506 call . this[250537] c"_pid")))
    }
    {
      (250550 return(449511 call . this[250537] c"_instance"))
    }
  }
  function _array[255540](?).chpl_forwarding_expr1[250562](arg _mt[250567]:_MT[201], arg this[250565]:_array[255540](?)) : _unknown[42] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    (250577 return(449520 call . this[250565] c"_value"))
  }
  function _array[255540](?).deinit[250580](arg _mt[250584]:_MT[201], arg this[250582]:_array[255540](?)) : _unknown[42] "destructor" "method" "primary method" "no return value for void"
  {
    (250588 call _do_destroy_array this[250582])
  }
  function _array[255540](?).eltType[250592](arg _mt[250596]:_MT[201], arg this[250594]:_array[255540](?)) type : _unknown[42] "method" "primary method" "no parens"
  {
    (250599 return(250601 call .(407652 call . this[250594] c"_value") c"eltType"))
  }
  function _array[255540](?).idxType[250606](arg _mt[250610]:_MT[201], arg this[250608]:_array[255540](?)) type : _unknown[42] "method" "primary method" "no parens"
  {
    (250613 return(250615 call .(407656 call . this[250608] c"_value") c"idxType"))
  }
  function _array[255540](?).fullIdxType[250620](arg _mt[250624]:_MT[201], arg this[250622]:_array[255540](?)) type : _unknown[42] "method" "primary method" "no parens"
  {
    (250627 return(250632 call .(250629 call . this[250622] c"_dom") c"fullIdxType"))
  }
  function _array[255540](?)._dom[250637](arg _mt[250641]:_MT[201], arg this[250639]:_array[255540](?)) : _unknown[42] "method" "primary method" "no copy return" "no parens" "return not owned"
  {
    (250644 return(250646 call _getDomain(250648 call .(407661 call . this[250639] c"_value") c"dom")))
  }
  function _array[255540](?).rank[250653](arg _mt[250657]:_MT[201], arg this[250655]:_array[255540](?)) param : _unknown[42] "method" "primary method" "no parens"
  {
    (250660 return(250665 call .(250662 call . this[250655] c"_dom") c"rank"))
  }
  function _array[255540](?).strides[250670](arg _mt[250674]:_MT[201], arg this[250672]:_array[255540](?)) param : _unknown[42] "method" "primary method" "no parens"
  {
    (250677 return(250682 call .(250679 call . this[250672] c"_dom") c"strides"))
  }
  function _array[255540](?).hasUnitStride[250687](arg _mt[250691]:_MT[201], arg this[250689]:_array[255540](?)) param : _unknown[42] "method" "primary method"
  {
    (250694 return(250699 call(250696 call .(407667 call . this[250689] c"strides") c"isOne")))
  }
  function _array[255540](?).hasPosNegUnitStride[250702](arg _mt[250706]:_MT[201], arg this[250704]:_array[255540](?)) param : _unknown[42] "method" "primary method"
  {
    (250709 return(250714 call(250711 call .(407671 call . this[250704] c"strides") c"isPosNegOne")))
  }
  function _array[255540](?).indices[250717](arg _mt[250721]:_MT[201], arg this[250719]:_array[255540](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (250740 return(250749 call chpl__buildDomainExpr(250747 'expand_tuple'(250746 call(250743 call .(407677 call . this[250719] c"_dom") c"getIndices"))) 1))
  }
  where {
    (250723 call &&(250725 call !(250731 call(250728 call . this[250719] c"isSparse")))(250732 call !(250738 call(250735 call . this[250719] c"isAssociative"))))
  }
  function _array[255540](?).indices[250754](arg _mt[250758]:_MT[201], arg this[250756]:_array[255540](?)) : _unknown[42] "iterator fn" "method" "primary method" "no parens" "no return value for void"
  {
    {
      unknown _indexOfInterest[250779] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[250780] "expr temp" "temp"
      (250789 'move' _iterator[250780](250787 call _getIterator(449525 call . this[250756] c"_dom")))
      Defer
      {
        {
          (250804 call _freeIterator _iterator[250780])
        }
      }
      { scopeless type
        (250794 'move' _indexOfInterest[250779](250791 call iteratorIndex _iterator[250780]))
      }
      ForLoop[250781]
      {
        unknown i[250773] "index var" "insert auto destroy"
        (250799 'move' i[250773] _indexOfInterest[250779])
        (250776 yield i[250773])
        label _continueLabel[250784]
        _indexOfInterest[250779]
        _iterator[250780]
      }
      label _breakLabel[250785]
    }
  }
  where {
    (250760 call ||(250766 call(250763 call . this[250756] c"isSparse"))(250771 call(250768 call . this[250756] c"isAssociative")))
  }
  function _array[255540](?).checkAccess[250814](arg _mt[250822]:_MT[201], arg this[250816]:_array[255540](?), arg indices[250818]:_any[141](?), arg value[250820]:_any[141](?)) : _unknown[42] "always propagate line file info" "insert line file info" "method" "primary method" "no return value for void"
  {
    if(251124 call _cond_test(251123 call(251120 call . this[250816] c"isRectangular")))
    {
      if(251115 call _cond_test(251105 call !(251113 call(251110 call . value[250820] c"dsiBoundsCheck") indices[250818])))
      {
        if(251101 call _cond_test(251097 call ==(449567 call . this[250816] c"rank") 1))
        {
          (250829 call halt "array index out of bounds\n" "note: index was "(250837 call indices[250818] 0) " but array bounds are "(250849 call(250846 call .(250843 call . value[250820] c"dom") c"dsiDim") 0))
        }
        {
          unknown istr[250853] ""
          (250856 'end of statement')
          unknown bstr[250858] ""
          (250861 'end of statement')
          {
            unknown i[250862] "index var" 0
            unknown tmp[250913] "maybe param" "temp"
            (250925 'move' tmp[250913](250923 call chpl_compute_low_param_loop_bound 0(250865 call -(449531 call . this[250816] c"rank") 1)))
            unknown tmp[250914] "maybe param" "temp"
            (250935 'move' tmp[250914](250933 call chpl_compute_high_param_loop_bound 0(250930 call -(449543 call . this[250816] c"rank") 1)))
            unknown tmp[250915] "maybe param" "temp"
            (250938 'move' tmp[250915] 1)
            ParamForLoop[250940]
            { i[250862] tmp[250913] tmp[250914] tmp[250915]
              {
                if(250885 call _cond_test(250881 call != i[250862] 0))
                {
                  (250873 call += istr[250853] ", ")
                  (250877 call += bstr[250858] ", ")
                }
                (250889 call += istr[250853](250892 call :(250895 call indices[250818] i[250862]) string[244]))
                (250898 call += bstr[250858](250901 call :(250910 call(250907 call .(250904 call . value[250820] c"dom") c"dsiDim") i[250862]) string[244]))
              }
            }
            label _unused_continueLabel[250917]
            label _breakLabel[250916]
          }
          unknown dimstr[250950] ""
          (250953 'end of statement')
          {
            unknown i[250954] "index var" 0
            unknown tmp[251040] "maybe param" "temp"
            (251052 'move' tmp[251040](251050 call chpl_compute_low_param_loop_bound 0(250957 call -(449547 call . this[250816] c"rank") 1)))
            unknown tmp[251041] "maybe param" "temp"
            (251062 'move' tmp[251041](251060 call chpl_compute_high_param_loop_bound 0(251057 call -(449560 call . this[250816] c"rank") 1)))
            unknown tmp[251042] "maybe param" "temp"
            (251065 'move' tmp[251042] 1)
            ParamForLoop[251067]
            { i[250954] tmp[251040] tmp[251041] tmp[251042]
              {
                if(251036 call _cond_test(251018 call !(251032 call(251029 call .(251027 call(251024 call .(251021 call . value[250820] c"dom") c"dsiDim") i[250954]) c"contains")(251034 call indices[250818] i[250954]))))
                {
                  if(251014 call _cond_test(251010 call == dimstr[250950] ""))
                  {
                    (250966 call = dimstr[250950](250969 call +(250971 call +(250973 call +(250975 call +(250977 call + "out of bounds in dimension "(250982 call : i[250954] string[244])) " because index ")(250989 call :(250992 call indices[250818] i[250954]) string[244])) " is not in ")(250998 call :(251007 call(251004 call .(251001 call . value[250820] c"dom") c"dsiDim") i[250954]) string[244])))
                  }
                }
              }
            }
            label _unused_continueLabel[251044]
            label _breakLabel[251043]
          }
          (251077 call halt "array index out of bounds\n" "note: index was (" istr[250853] ") " "but array bounds are (" bstr[250858] ")\n" "note: " dimstr[250950])
        }
      }
    }
  }
  function _array[255540](?).checkSlice[251130](arg _mt[251140]:_MT[201], arg this[251132]:_array[255540](?), arg d[251135] :
  _domain[225034](?), arg value[251138]:_any[141](?)) : _unknown[42] "always propagate line file info" "insert line file info" "method" "primary method" "no return value for void"
  {
    if(251229 call _cond_test(251217 call ||(251223 call(251220 call . d[251135] c"isRectangular"))(251228 call(251225 call . d[251135] c"isSparse"))))
    {
      (251145 call(449575 call . this[251132] c"checkSlice")(251151 'expand_tuple'(251150 call(251147 call . d[251135] c"dsiDims")))(value = value[251138]))
    }
    {
      if(251213 call _cond_test(251212 call(251209 call . d[251135] c"isAssociative")))
      {
        Forall[251199] {
          induction variables:
            
            unknown i[251158] "index var" "insert auto destroy"
          iterated expressions:
            d[251135]
          shadow variables:
          other variables
            forall body
          {
            if(251192 call _cond_test(251181 call !(251190 call(251187 call .(251184 call . this[251132] c"_dom") c"dsiMember") i[251158])))
            {
              (251165 call boundsCheckHalt module=[222] HaltWrappers[518](251166 call +(251168 call + "index '"(251173 call : i[251158] string[244])) "' is out-of-bounds"))
              (407690 'referenced modules list' HaltWrappers[518])
            }
          }
        }
        (396904 'used modules list'(251156 'use' HaltWrappers[518]))
      }
      {
        (251204 call compilerError "This style of array slicing is not yet supported")
      }
    }
  }
  function _array[255540](?).checkSlice[251236](arg _mt[251246]:_MT[201], arg this[251238]:_array[255540](?), arg ranges[251241]:_any[141](?) ..., arg value[251244]:_any[141](?)) : _unknown[42] "always propagate line file info" "insert line file info" "method" "primary method" "no return value for void"
  {
    if(251611 call _cond_test(251610 call(251607 call . this[251238] c"isRectangular")))
    {
      unknown ok[251254] 1
      (251257 'end of statement')
      {
        unknown i[251258] "index var" 0
        unknown tmp[251297] "maybe param" "temp"
        (251309 'move' tmp[251297](251307 call chpl_compute_low_param_loop_bound 0(251261 call -(449588 call . this[251238] c"rank") 1)))
        unknown tmp[251298] "maybe param" "temp"
        (251319 'move' tmp[251298](251317 call chpl_compute_high_param_loop_bound 0(251314 call -(449596 call . this[251238] c"rank") 1)))
        unknown tmp[251299] "maybe param" "temp"
        (251322 'move' tmp[251299] 1)
        ParamForLoop[251324]
        { i[251258] tmp[251297] tmp[251298] tmp[251299]
          {
            {
              unknown tmp[251286] "temp"
              (251289 'move' tmp[251286](251288 'addr of' ok[251254]))
              (251294 call = tmp[251286](251291 call && tmp[251286](251281 call(251278 call .(251276 call(251273 call .(251270 call . value[251244] c"dom") c"dsiDim") i[251258]) c"chpl_boundsCheck")(251283 call ranges[251241] i[251258]))))
            }
          }
        }
        label _unused_continueLabel[251301]
        label _breakLabel[251300]
      }
      if(251602 call _cond_test(251598 call == ok[251254] 0))
      {
        if(251594 call _cond_test(251590 call ==(449637 call . this[251238] c"rank") 1))
        {
          (251336 call halt "array slice out of bounds\n" "note: slice index was "(251344 call ranges[251241] 0) " but array bounds are "(251354 call(251351 call .(251348 call . value[251244] c"dom") c"dsiDim") 0))
        }
        {
          unknown istr[251358] ""
          (251361 'end of statement')
          unknown bstr[251363] ""
          (251366 'end of statement')
          {
            unknown i[251367] "index var" 0
            unknown tmp[251418] "maybe param" "temp"
            (251430 'move' tmp[251418](251428 call chpl_compute_low_param_loop_bound 0(251370 call -(449601 call . this[251238] c"rank") 1)))
            unknown tmp[251419] "maybe param" "temp"
            (251440 'move' tmp[251419](251438 call chpl_compute_high_param_loop_bound 0(251435 call -(449613 call . this[251238] c"rank") 1)))
            unknown tmp[251420] "maybe param" "temp"
            (251443 'move' tmp[251420] 1)
            ParamForLoop[251445]
            { i[251367] tmp[251418] tmp[251419] tmp[251420]
              {
                if(251390 call _cond_test(251386 call != i[251367] 0))
                {
                  (251378 call += istr[251358] ", ")
                  (251382 call += bstr[251363] ", ")
                }
                (251394 call += istr[251358](251397 call :(251400 call ranges[251241] i[251367]) string[244]))
                (251403 call += bstr[251363](251406 call :(251415 call(251412 call .(251409 call . value[251244] c"dom") c"dsiDim") i[251367]) string[244]))
              }
            }
            label _unused_continueLabel[251422]
            label _breakLabel[251421]
          }
          unknown dimstr[251455] ""
          (251458 'end of statement')
          {
            unknown i[251459] "index var" 0
            unknown tmp[251541] "maybe param" "temp"
            (251553 'move' tmp[251541](251551 call chpl_compute_low_param_loop_bound 0(251462 call -(449617 call . this[251238] c"rank") 1)))
            unknown tmp[251542] "maybe param" "temp"
            (251563 'move' tmp[251542](251561 call chpl_compute_high_param_loop_bound 0(251558 call -(449630 call . this[251238] c"rank") 1)))
            unknown tmp[251543] "maybe param" "temp"
            (251566 'move' tmp[251543] 1)
            ParamForLoop[251568]
            { i[251459] tmp[251541] tmp[251542] tmp[251543]
              {
                if(251537 call _cond_test(251519 call !(251533 call(251530 call .(251528 call(251525 call .(251522 call . value[251244] c"dom") c"dsiDim") i[251459]) c"chpl_boundsCheck")(251535 call ranges[251241] i[251459]))))
                {
                  if(251515 call _cond_test(251511 call == dimstr[251455] ""))
                  {
                    (251471 call = dimstr[251455](251474 call +(251476 call +(251478 call +(251480 call +(251482 call + "out of bounds in dimension "(251485 call : i[251459] string[244])) " because slice index ")(251492 call :(251495 call ranges[251241] i[251459]) string[244])) " is not in ")(251499 call :(251508 call(251505 call .(251502 call . value[251244] c"dom") c"dsiDim") i[251459]) string[244])))
                  }
                }
              }
            }
            label _unused_continueLabel[251545]
            label _breakLabel[251544]
          }
          (251578 call halt "array slice out of bounds\n" "note: slice index was (" istr[251358] ") " "but array bounds are (" bstr[251363] ")\n" "note: " dimstr[251455])
        }
      }
    }
  }
  where {
    (251249 call chpl__isTupleOfRanges ranges[251241])
  }
  function _array[255540](?).this[251618](arg _mt[251635]:_MT[201], ref arg this[251620]:_array[255540](?), const arg i[251632] :
  (251622 call *(449642 call . this[251620] c"rank")(251629 call .(251626 call .(407706 call . this[251620] c"_value") c"dom") c"idxType"))) ref : _unknown[42] "alias scope from this" "no promotion when by ref" "inline" "method" "primary method" "reference to const when const this" "removable array access"
  {
    const value[251639] "const"(449646 call . this[251620] c"_value")
    (251642 'end of statement')
    if(251650 call _cond_test 1)
    {
      (251644 call(449652 call . this[251620] c"checkAccess") i[251632](value = value[251639]))
    }
    if(251671 call _cond_test(251661 call || logAllArrEltAccess[247551](251664 call && logDistArrEltAccess[247546](251667 call !(251670 call(449663 call . this[251620] c"chpl_isNonDistributedArray"))))))
    {
      (251656 call chpl_debug_writeln "default _array accessor was called")
    }
    if(251706 call _cond_test(251694 call ||(251700 call(251697 call . this[251620] c"isRectangular"))(251705 call(251702 call . this[251620] c"isSparse"))))
    {
      (251676 return(251681 call(251678 call . value[251639] c"dsiAccess") i[251632]))
    }
    {
      (251684 return(251689 call(251686 call . value[251639] c"dsiAccess")(251691 call i[251632] 0)))
    }
  }
  function _array[255540](?).this[251714](arg _mt[251731]:_MT[201], const arg this[251716]:_array[255540](?), const arg i[251728] :
  (251718 call *(449669 call . this[251716] c"rank")(251725 call .(251722 call .(407714 call . this[251716] c"_value") c"dom") c"idxType"))) : _unknown[42] "alias scope from this" "inline" "method" "primary method"
  {
    const value[251741] "const"(449673 call . this[251716] c"_value")
    (251744 'end of statement')
    if(251752 call _cond_test 1)
    {
      (251746 call(449677 call . this[251716] c"checkAccess") i[251728](value = value[251741]))
    }
    if(251771 call _cond_test(251761 call || logAllArrEltAccess[247551](251764 call && logDistArrEltAccess[247546](251767 call !(251770 call(449686 call . this[251716] c"chpl_isNonDistributedArray"))))))
    {
      (251758 call chpl_debug_writeln "default _array accessor was called")
    }
    if(251806 call _cond_test(251794 call ||(251800 call(251797 call . this[251716] c"isRectangular"))(251805 call(251802 call . this[251716] c"isSparse"))))
    {
      (251776 return(251781 call(251778 call . value[251741] c"dsiAccess") i[251728]))
    }
    {
      (251784 return(251789 call(251786 call . value[251741] c"dsiAccess")(251791 call i[251728] 0)))
    }
  }
  where {
    (251734 call shouldReturnRvalueByValue(251736 call .(407718 call . this[251716] c"_value") c"eltType"))
  }
  function _array[255540](?).this[251815](arg _mt[251832]:_MT[201], const arg this[251817]:_array[255540](?), const arg i[251829] :
  (251819 call *(449692 call . this[251817] c"rank")(251826 call .(251823 call .(407726 call . this[251817] c"_value") c"dom") c"idxType"))) const ref : _unknown[42] "alias scope from this" "inline" "method" "primary method"
  {
    const value[251836] "const"(449696 call . this[251817] c"_value")
    (251839 'end of statement')
    if(251847 call _cond_test 1)
    {
      (251841 call(449700 call . this[251817] c"checkAccess") i[251829](value = value[251836]))
    }
    if(251866 call _cond_test(251856 call || logAllArrEltAccess[247551](251859 call && logDistArrEltAccess[247546](251862 call !(251865 call(449709 call . this[251817] c"chpl_isNonDistributedArray"))))))
    {
      (251853 call chpl_debug_writeln "default _array accessor was called")
    }
    if(251901 call _cond_test(251889 call ||(251895 call(251892 call . this[251817] c"isRectangular"))(251900 call(251897 call . this[251817] c"isSparse"))))
    {
      (251871 return(251876 call(251873 call . value[251836] c"dsiAccess") i[251829]))
    }
    {
      (251879 return(251884 call(251881 call . value[251836] c"dsiAccess")(251886 call i[251829] 0)))
    }
  }
  function _array[255540](?).this[251909](arg _mt[251925]:_MT[201], ref arg this[251911]:_array[255540](?), const arg i[251921] ... :
  (251917 call .(251914 call .(407734 call . this[251911] c"_value") c"dom") c"idxType")) ref : _unknown[42] "alias scope from this" "no promotion when by ref" "inline" "method" "primary method" "reference to const when const this" "removable array access"
  {
    (251928 return(251930 call this[251911] i[251921]))
  }
  function _array[255540](?).this[251934](arg _mt[251950]:_MT[201], const arg this[251936]:_array[255540](?), const arg i[251946] ... :
  (251942 call .(251939 call .(407738 call . this[251936] c"_value") c"dom") c"idxType")) : _unknown[42] "alias scope from this" "inline" "method" "primary method"
  {
    (251959 return(251961 call this[251936] i[251946]))
  }
  where {
    (251953 call shouldReturnRvalueByValue(251955 call .(407742 call . this[251936] c"_value") c"eltType"))
  }
  function _array[255540](?).this[251966](arg _mt[251982]:_MT[201], const arg this[251968]:_array[255540](?), const arg i[251978] ... :
  (251974 call .(251971 call .(407746 call . this[251968] c"_value") c"dom") c"idxType")) const ref : _unknown[42] "alias scope from this" "inline" "method" "primary method"
  {
    (251985 return(251987 call this[251968] i[251978]))
  }
  function _array[255540](?).localAccess[251991](arg _mt[252008]:_MT[201], ref arg this[251993]:_array[255540](?), arg i[252005] :
  (251995 call *(449733 call . this[251993] c"rank")(252002 call .(251999 call .(407750 call . this[251993] c"_value") c"dom") c"idxType"))) ref : _unknown[42] "alias scope from this" "no promotion when by ref" "inline" "method" "primary method" "reference to const when const this"
  {
    const value[252012] "const"(449737 call . this[251993] c"_value")
    (252015 'end of statement')
    if(252023 call _cond_test 1)
    {
      (252017 call(449741 call . this[251993] c"checkAccess") i[252005](value = value[252012]))
    }
    if(252044 call _cond_test(252034 call || logAllArrEltAccess[247551](252037 call && logDistArrEltAccess[247546](252040 call !(252043 call(449750 call . this[251993] c"chpl_isNonDistributedArray"))))))
    {
      (252029 call chpl_debug_writeln "local _array accessor was called")
    }
    if(252092 call _cond_test(252091 call(449758 call . this[251993] c"chpl_isNonDistributedArray")))
    {
      (252049 return(252051 call this[251993] i[252005]))
    }
    {
      if(252084 call _cond_test(252072 call ||(252078 call(252075 call . this[251993] c"isRectangular"))(252083 call(252080 call . this[251993] c"isSparse"))))
      {
        (252054 return(252059 call(252056 call . value[252012] c"dsiLocalAccess") i[252005]))
      }
      {
        (252062 return(252067 call(252064 call . value[252012] c"dsiLocalAccess")(252069 call i[252005] 0)))
      }
    }
  }
  function _array[255540](?).localAccess[252100](arg _mt[252117]:_MT[201], const arg this[252102]:_array[255540](?), arg i[252114] :
  (252104 call *(449762 call . this[252102] c"rank")(252111 call .(252108 call .(407758 call . this[252102] c"_value") c"dom") c"idxType"))) : _unknown[42] "alias scope from this" "inline" "method" "primary method"
  {
    const value[252127] "const"(449766 call . this[252102] c"_value")
    (252130 'end of statement')
    if(252138 call _cond_test 1)
    {
      (252132 call(449770 call . this[252102] c"checkAccess") i[252114](value = value[252127]))
    }
    if(252157 call _cond_test(252147 call || logAllArrEltAccess[247551](252150 call && logDistArrEltAccess[247546](252153 call !(252156 call(449779 call . this[252102] c"chpl_isNonDistributedArray"))))))
    {
      (252144 call chpl_debug_writeln "local _array accessor was called")
    }
    if(252205 call _cond_test(252204 call(449787 call . this[252102] c"chpl_isNonDistributedArray")))
    {
      (252162 return(252164 call this[252102] i[252114]))
    }
    {
      if(252197 call _cond_test(252185 call ||(252191 call(252188 call . this[252102] c"isRectangular"))(252196 call(252193 call . this[252102] c"isSparse"))))
      {
        (252167 return(252172 call(252169 call . value[252127] c"dsiLocalAccess") i[252114]))
      }
      {
        (252175 return(252180 call(252177 call . value[252127] c"dsiLocalAccess")(252182 call i[252114] 0)))
      }
    }
  }
  where {
    (252120 call shouldReturnRvalueByValue(252122 call .(407762 call . this[252102] c"_value") c"eltType"))
  }
  function _array[255540](?).localAccess[252214](arg _mt[252231]:_MT[201], const arg this[252216]:_array[255540](?), arg i[252228] :
  (252218 call *(449791 call . this[252216] c"rank")(252225 call .(252222 call .(407770 call . this[252216] c"_value") c"dom") c"idxType"))) const ref : _unknown[42] "alias scope from this" "inline" "method" "primary method"
  {
    const value[252235] "const"(449795 call . this[252216] c"_value")
    (252238 'end of statement')
    if(252246 call _cond_test 1)
    {
      (252240 call(449799 call . this[252216] c"checkAccess") i[252228](value = value[252235]))
    }
    if(252265 call _cond_test(252255 call || logAllArrEltAccess[247551](252258 call && logDistArrEltAccess[247546](252261 call !(252264 call(449808 call . this[252216] c"chpl_isNonDistributedArray"))))))
    {
      (252252 call chpl_debug_writeln "local _array accessor was called")
    }
    if(252313 call _cond_test(252312 call(449816 call . this[252216] c"chpl_isNonDistributedArray")))
    {
      (252270 return(252272 call this[252216] i[252228]))
    }
    {
      if(252305 call _cond_test(252293 call ||(252299 call(252296 call . this[252216] c"isRectangular"))(252304 call(252301 call . this[252216] c"isSparse"))))
      {
        (252275 return(252280 call(252277 call . value[252235] c"dsiLocalAccess") i[252228]))
      }
      {
        (252283 return(252288 call(252285 call . value[252235] c"dsiLocalAccess")(252290 call i[252228] 0)))
      }
    }
  }
  function _array[255540](?).localAccess[252321](arg _mt[252337]:_MT[201], ref arg this[252323]:_array[255540](?), arg i[252333] ... :
  (252329 call .(252326 call .(407778 call . this[252323] c"_value") c"dom") c"idxType")) ref : _unknown[42] "alias scope from this" "no promotion when by ref" "inline" "method" "primary method" "reference to const when const this"
  {
    (252340 return(252342 call(449826 call . this[252323] c"localAccess") i[252333]))
  }
  function _array[255540](?).localAccess[252346](arg _mt[252362]:_MT[201], const arg this[252348]:_array[255540](?), arg i[252358] ... :
  (252354 call .(252351 call .(407782 call . this[252348] c"_value") c"dom") c"idxType")) : _unknown[42] "alias scope from this" "inline" "method" "primary method"
  {
    (252371 return(252373 call(449835 call . this[252348] c"localAccess") i[252358]))
  }
  where {
    (252365 call shouldReturnRvalueByValue(252367 call .(407786 call . this[252348] c"_value") c"eltType"))
  }
  function _array[255540](?).localAccess[252378](arg _mt[252394]:_MT[201], const arg this[252380]:_array[255540](?), arg i[252390] ... :
  (252386 call .(252383 call .(407790 call . this[252380] c"_value") c"dom") c"idxType")) const ref : _unknown[42] "alias scope from this" "inline" "method" "primary method"
  {
    (252397 return(252399 call(449844 call . this[252380] c"localAccess") i[252390]))
  }
  function _array[255540](?).this[252403](arg _mt[252411]:_MT[201], arg this[252405]:_array[255540](?), arg d[252408] :
  _domain[225034](?)) : _unknown[42] "no promotion when by ref" "method" "primary method" "reference to const when const this" "fn returns aliasing array"
  {
    if(252427 call _cond_test(252420 call !=(252423 call . d[252408] c"rank")(449850 call . this[252405] c"rank")))
    {
      (252415 call compilerError "slicing an array with a domain of a different rank")
    }
    if(252438 call _cond_test 1)
    {
      (252433 call(449854 call . this[252405] c"checkSlice") d[252408](449859 call . this[252405] c"_value"))
    }
    (252449 call(252446 call . d[252408] c"chpl_checkNegativeStride"))
    const tmp[252491] "const" "temp"(252488 IfExpr (252459 call(252456 call .(407796 call . this[252405] c"_value") c"isSliceArrayView")) then
    { scopeless
      (252475 call _build_tuple(252465 call .(252462 call . this[252405] c"_value") c"arr")(252472 call .(252469 call . this[252405] c"_value") c"_ArrPid"))
    } else
    { scopeless
      (252486 call _build_tuple(252479 call . this[252405] c"_value")(252483 call . this[252405] c"_pid"))
    } )
    (252498 call _check_tuple_var_decl tmp[252491] 2)
    const arr[252451] "const"(252492 call tmp[252491] 0)
    const arrpid[252453] "const"(252495 call tmp[252491] 1)
    (252503 'end of statement')
    unknown a[252505](252506 'new'(_chpl_manager = unmanaged[183](?))(252510 call ArrayViewSliceArr[431012](?)(eltType =(252512 call . this[252405] c"eltType"))(_DomPid =(252517 call . d[252408] c"_pid"))(dom =(252522 call . d[252408] c"_instance"))(_ArrPid = arrpid[252453])(_ArrInstance = arr[252451])))
    (252531 'end of statement')
    (252539 call(252536 call .(252533 call . d[252408] c"_value") c"add_arr") a[252505](locking = 1)(addToList = 0))
    (252545 return(252547 call _newArray a[252505]))
  }
  function _array[255540](?).this[252551](arg _mt[252559]:_MT[201], arg this[252553]:_array[255540](?), arg ranges[252556]:_any[141](?) ...) : _unknown[42] "no promotion when by ref" "method" "primary method" "reference to const when const this" "fn returns aliasing array"
  {
    if(252573 call _cond_test 1)
    {
      (252566 call(449874 call . this[252553] c"checkSlice")(252568 'expand_tuple' ranges[252556])(value =(449879 call . this[252553] c"_value")))
    }
    unknown d[252579] "no auto destroy"(252581 call(449884 call . this[252553] c"_dom")(252583 'expand_tuple' ranges[252556]))
    (252585 'end of statement')
    (252586 call =(252592 call .(252589 call . d[252579] c"_value") c"_free_when_no_arrs") 1)
    (252596 call =(252602 call .(252599 call . d[252579] c"_value") c"definedConst") 1)
    (252610 call(252607 call . d[252579] c"chpl_checkNegativeStride"))
    const tmp[252652] "const" "temp"(252649 IfExpr (252620 call(252617 call .(407811 call . this[252553] c"_value") c"isSliceArrayView")) then
    { scopeless
      (252636 call _build_tuple(252626 call .(252623 call . this[252553] c"_value") c"arr")(252633 call .(252630 call . this[252553] c"_value") c"_ArrPid"))
    } else
    { scopeless
      (252647 call _build_tuple(252640 call . this[252553] c"_value")(252644 call . this[252553] c"_pid"))
    } )
    (252659 call _check_tuple_var_decl tmp[252652] 2)
    const arr[252612] "const"(252653 call tmp[252652] 0)
    const arrpid[252614] "const"(252656 call tmp[252652] 1)
    (252664 'end of statement')
    unknown a[252666](252667 'new'(_chpl_manager = unmanaged[183](?))(252671 call ArrayViewSliceArr[431012](?)(eltType =(252673 call . this[252553] c"eltType"))(_DomPid =(252678 call . d[252579] c"_pid"))(dom =(252683 call . d[252579] c"_instance"))(_ArrPid = arrpid[252614])(_ArrInstance = arr[252612])))
    (252692 'end of statement')
    (252700 call(252697 call .(252694 call . d[252579] c"_value") c"add_arr") a[252666](locking = 0)(addToList = 0))
    (252706 return(252708 call _newArray a[252666]))
  }
  where {
    (252562 call chpl__isTupleOfRanges ranges[252556])
  }
  function _array[255540](?).this[252713](arg _mt[252721]:_MT[201], arg this[252715]:_array[255540](?), arg args[252718]:_any[141](?) ...) : _unknown[42] "no promotion when by ref" "method" "primary method" "reference to const when const this" "fn returns aliasing array"
  {
    if(252739 call _cond_test 1)
    {
      (252735 call(449901 call . this[252715] c"checkRankChange") args[252718])
    }
    unknown rcdom[252745] "no copy"(252750 call(252747 call . this[252715] c"_dom")(252752 'expand_tuple' args[252718]))
    (252754 'end of statement')
    (252755 call =(252758 call . rcdom[252745] c"definedConst") 1)
    (252766 call(252763 call . rcdom[252745] c"chpl_checkNegativeStride"))
    const tmp[252783] "const" "temp"(252781 call _build_tuple(252774 call . this[252715] c"_value")(252778 call . this[252715] c"_pid"))
    (252790 call _check_tuple_var_decl tmp[252783] 2)
    const arr[252768] "const"(252784 call tmp[252783] 0)
    const arrpid[252770] "const"(252787 call tmp[252783] 1)
    (252795 'end of statement')
    unknown a[252797](252798 'new'(_chpl_manager = unmanaged[183](?))(252802 call ArrayViewRankChangeArr[431464](?)(eltType =(252804 call . this[252715] c"eltType"))(_DomPid =(252809 call . rcdom[252745] c"_pid"))(dom =(252814 call . rcdom[252745] c"_instance"))(_ArrPid = arrpid[252770])(_ArrInstance = arr[252768])(collapsedDim =(252826 call .(252823 call . rcdom[252745] c"_value") c"collapsedDim"))(idx =(252834 call .(252831 call . rcdom[252745] c"_value") c"idx"))(ownsArrInstance = 0)))
    (252841 'end of statement')
    (252849 call(252846 call .(252843 call . rcdom[252745] c"_value") c"add_arr") a[252797](locking = 0))
    (252853 return(252855 call _newArray a[252797]))
  }
  where {
    (252724 call _validRankChangeArgs args[252718](252730 call .(252727 call .(407823 call . this[252715] c"_value") c"dom") c"idxType"))
  }
  function _array[255540](?).dims[252860](arg _mt[252864]:_MT[201], arg this[252862]:_array[255540](?)) : _unknown[42] "method" "primary method"
  {
    (252867 return(252875 call(252872 call .(252869 call . this[252862] c"_dom") c"dims")))
  }
  function _array[255540](?).dim[252878](arg _mt[252886]:_MT[201], arg this[252880]:_array[255540](?), arg d[252883] :
  int(64)[10]) : _unknown[42] "method" "primary method"
  {
    (252889 return(252897 call(252894 call .(252891 call . this[252880] c"_dom") c"dim") d[252883]))
  }
  function _array[255540](?).dim[252901](arg _mt[252909]:_MT[201], arg this[252903]:_array[255540](?), param arg d[252906] :
  int(64)[10]) : _unknown[42] "method" "primary method"
  {
    (252912 return(252920 call(252917 call .(252914 call . this[252903] c"_dom") c"dim") d[252906]))
  }
  function _array[255540](?).checkRankChange[252924](arg _mt[252930]:_MT[201], arg this[252926]:_array[255540](?), arg args[252928]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    {
      unknown i[252933] "index var" 0
      unknown tmp[252979] "maybe param" "temp"
      (252991 'move' tmp[252979](252989 call chpl_compute_low_param_loop_bound 0(252936 call -(252939 call . args[252928] c"size") 1)))
      unknown tmp[252980] "maybe param" "temp"
      (253004 'move' tmp[252980](253002 call chpl_compute_high_param_loop_bound 0(252996 call -(252998 call . args[252928] c"size") 1)))
      unknown tmp[252981] "maybe param" "temp"
      (253007 'move' tmp[252981] 1)
      ParamForLoop[253009]
      { i[252933] tmp[252979] tmp[252980] tmp[252981]
        if(252974 call _cond_test(252956 call !(252970 call(252967 call .(252965 call(252962 call .(252959 call .(407842 call . this[252926] c"_value") c"dom") c"dsiDim") i[252933]) c"chpl_boundsCheck")(252972 call args[252928] i[252933]))))
        {
          (252946 call halt "array slice out of bounds in dimension " i[252933] ": "(252953 call args[252928] i[252933]))
        }
      }
      label _unused_continueLabel[252983]
      label _breakLabel[252982]
    }
  }
  function _array[255540](?).localSlice[253020](arg _mt[253028]:_MT[201], arg this[253022]:_array[255540](?), arg r[253025]:_any[141](?) ...) : _unknown[42] "no promotion when by ref" "method" "primary method" "reference to const when const this" "fn returns aliasing array"
  {
    if(253047 call _cond_test 1)
    {
      (253040 call(449927 call . this[253022] c"checkSlice")(253042 'expand_tuple' r[253025])(value =(449932 call . this[253022] c"_value")))
    }
    unknown dom[253053](253055 call(449937 call . this[253022] c"_dom")(253057 'expand_tuple' r[253025]))
    (253059 'end of statement')
    (253060 return(253062 call(449944 call . this[253022] c"chpl__localSliceDefaultArithArrHelp") dom[253053]))
  }
  where {
    (253030 call &&(253033 call chpl__isDROrDRView this[253022])(253036 call chpl__isTupleOfRanges r[253025]))
  }
  function _array[255540](?).localSlice[253067](arg _mt[253075]:_MT[201], arg this[253069]:_array[255540](?), arg d[253072] :
  _domain[225034](?)) : _unknown[42] "no promotion when by ref" "method" "primary method" "reference to const when const this" "fn returns aliasing array"
  {
    if(253093 call _cond_test 1)
    {
      (253082 call(449951 call . this[253069] c"checkSlice")(253088 'expand_tuple'(253087 call(253084 call . d[253072] c"getIndices")))(value =(449955 call . this[253069] c"_value")))
    }
    (253098 return(253100 call(449960 call . this[253069] c"chpl__localSliceDefaultArithArrHelp") d[253072]))
  }
  where {
    (253078 call chpl__isDROrDRView this[253069])
  }
  function _array[255540](?).tryCopy[253105](arg _mt[253109]:_MT[201], arg this[253107]:_array[255540](?)) : _unknown[42] throws "method" "primary method" "@unstable"
  {
    if(253143 call _cond_test(253126 call !(253128 'resolves'(253138 call(253135 call .(253130 call . this[253107] c"_dom") c"tryCreateArray")(253140 call . this[253107] c"eltType")))))
    {
      (253116 call compilerError(253117 call + "cannot call 'tryCopy' on arrays that do not" " support a 'tryCreateArray' method."))
    }
    unknown res[253149](253157 call(253154 call .(253151 call . this[253107] c"_dom") c"tryCreateArray")(253159 call . this[253107] c"eltType"))
    (253163 'end of statement')
    (253164 call = res[253149] this[253107])
    (253168 return res[253149])
    (396906 'used modules list'(253113 'use' Reflection[1804]))
  }
  function _array[255540](?).chpl__localSliceDefaultArithArrHelp[253172](arg _mt[253180]:_MT[201], arg this[253174]:_array[255540](?), arg d[253177] :
  _domain[225034](?)) : _unknown[42] "method" "primary method" "no copy return"
  {
    if(253206 call _cond_test(253199 call !=(253203 call chpl_localeID_to_locale(253202 '_wide_get_locale'(449973 call . this[253174] c"_value")))(449976 call here[135591])))
    {
      (253184 call halt "Attempting to take a local slice of an array on locale "(253192 '_wide_get_node'(449969 call . this[253174] c"_value")) " from locale "(253195 call .(407851 call here[135591]) c"id"))
    }
    (253211 return(253213 call this[253174] d[253177]))
  }
  function _array[255540](?).localSlice[253217](arg _mt[253225]:_MT[201], arg this[253219]:_array[255540](?), arg r[253222]:_any[141](?) ...) : _unknown[42] "no promotion when by ref" "method" "primary method" "reference to const when const this" "fn returns aliasing array"
  {
    if(253246 call _cond_test 1)
    {
      (253239 call(449987 call . this[253219] c"checkSlice")(253241 'expand_tuple' r[253222])(value =(449992 call . this[253219] c"_value")))
    }
    (253251 return(253256 call(253253 call .(407854 call . this[253219] c"_value") c"dsiLocalSlice") r[253222]))
  }
  where {
    (253227 call &&(253230 call chpl__isTupleOfRanges r[253222])(253232 call !(253235 call chpl__isDROrDRView this[253219])))
  }
  function _array[255540](?).localSlice[253261](arg _mt[253269]:_MT[201], arg this[253263]:_array[255540](?), arg d[253266] :
  _domain[225034](?)) : _unknown[42] "no promotion when by ref" "method" "primary method" "reference to const when const this" "fn returns aliasing array"
  {
    (253272 return(253274 call(449999 call . this[253263] c"localSlice")(253280 'expand_tuple'(253279 call(253276 call . d[253266] c"getIndices")))))
  }
  function _array[255540](?).these[253283](arg _mt[253287]:_MT[201], arg this[253285]:_array[255540](?)) ref : _unknown[42] "iterator fn" "method" "primary method" "reference to const when const this" "no return value for void"
  {
    {
      unknown _indexOfInterest[253300] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[253301] "expr temp" "temp"
      (253310 'move' _iterator[253301](253308 call _getIterator(253296 call(253293 call .(407859 call . this[253285] c"_value") c"these"))))
      Defer
      {
        {
          (253325 call _freeIterator _iterator[253301])
        }
      }
      { scopeless type
        (253315 'move' _indexOfInterest[253300](253312 call iteratorIndex _iterator[253301]))
      }
      ForLoop[253302]
      {
        unknown i[253290] "index var" "insert auto destroy"
        (253320 'move' i[253290] _indexOfInterest[253300])
        {
          (253298 yield i[253290])
        }
        label _continueLabel[253305]
        _indexOfInterest[253300]
        _iterator[253301]
      }
      label _breakLabel[253306]
    }
  }
  function _array[255540](?).these[253334](arg _mt[253342]:_MT[201], arg this[253336]:_array[255540](?), param arg tag[253339] :
  iterKind[52144]) ref : _unknown[42] "iterator fn" "method" "primary method" "reference to const when const this" "no return value for void"
  {
    {
      unknown _indexOfInterest[253373] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[253374] "expr temp" "temp"
      (253383 'move' _iterator[253374](253381 call _getIterator(253368 call(253365 call .(407868 call . this[253336] c"_value") c"these") tag[253339])))
      Defer
      {
        {
          (253398 call _freeIterator _iterator[253374])
        }
      }
      { scopeless type
        (253388 'move' _indexOfInterest[253373](253385 call iteratorIndex _iterator[253374]))
      }
      ForLoop[253375]
      {
        unknown i[253362] "index var" "insert auto destroy"
        (253393 'move' i[253362] _indexOfInterest[253373])
        (253370 yield i[253362])
        label _continueLabel[253378]
        _indexOfInterest[253373]
        _iterator[253374]
      }
      label _breakLabel[253379]
    }
  }
  where {
    (253344 call &&(253346 call == tag[253339] standalone[52142])(253353 'resolves'(253358 call(253355 call .(407864 call . this[253336] c"_value") c"these")(tag = tag[253339]))))
  }
  function _array[255540](?).these[253408](arg _mt[253416]:_MT[201], arg this[253410]:_array[255540](?), param arg tag[253413] :
  iterKind[52144]) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[253437] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[253438] "expr temp" "temp"
      (253447 'move' _iterator[253438](253445 call _getIterator(253432 call(253429 call .(407873 call . this[253410] c"_value") c"these") tag[253413])))
      Defer
      {
        {
          (253462 call _freeIterator _iterator[253438])
        }
      }
      { scopeless type
        (253452 'move' _indexOfInterest[253437](253449 call iteratorIndex _iterator[253438]))
      }
      ForLoop[253439]
      {
        unknown followThis[253426] "index var" "insert auto destroy"
        (253457 'move' followThis[253426] _indexOfInterest[253437])
        (253434 yield followThis[253426])
        label _continueLabel[253442]
        _indexOfInterest[253437]
        _iterator[253438]
      }
      label _breakLabel[253443]
    }
  }
  where {
    (253418 call == tag[253413] leader[52138])
  }
  function _array[255540](?).these[253472](arg _mt[253488]:_MT[201], arg this[253474]:_array[255540](?), param arg tag[253477] :
  iterKind[52144], arg followThis[253480]:_any[141](?), param arg fast[253484] :
  bool[19] =
  0) ref : _unknown[42] "iterator fn" "method" "primary method" "reference to const when const this" "no return value for void"
  {
    if(253602 call _cond_test(253591 'resolves'(253596 call(253593 call .(407886 call . this[253474] c"_value") c"these")(tag = tag[253477]) followThis[253480](fast = fast[253484]))))
    {
      {
        unknown _indexOfInterest[253514] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[253515] "expr temp" "temp"
        (253524 'move' _iterator[253515](253522 call _getIterator(253505 call(253502 call .(407878 call . this[253474] c"_value") c"these")(tag = tag[253477]) followThis[253480](fast = fast[253484]))))
        Defer
        {
          {
            (253539 call _freeIterator _iterator[253515])
          }
        }
        { scopeless type
          (253529 'move' _indexOfInterest[253514](253526 call iteratorIndex _iterator[253515]))
        }
        ForLoop[253516]
        {
          unknown i[253499] "index var" "insert auto destroy"
          (253534 'move' i[253499] _indexOfInterest[253514])
          (253511 yield i[253499])
          label _continueLabel[253519]
          _indexOfInterest[253514]
          _iterator[253515]
        }
        label _breakLabel[253520]
      }
    }
    {
      {
        unknown _indexOfInterest[253559] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[253560] "expr temp" "temp"
        (253569 'move' _iterator[253560](253567 call _getIterator(253553 call(253550 call .(407882 call . this[253474] c"_value") c"these") tag[253477] followThis[253480])))
        Defer
        {
          {
            (253584 call _freeIterator _iterator[253560])
          }
        }
        { scopeless type
          (253574 'move' _indexOfInterest[253559](253571 call iteratorIndex _iterator[253560]))
        }
        ForLoop[253561]
        {
          unknown i[253547] "index var" "insert auto destroy"
          (253579 'move' i[253547] _indexOfInterest[253559])
          (253556 yield i[253547])
          label _continueLabel[253564]
          _indexOfInterest[253559]
          _iterator[253560]
        }
        label _breakLabel[253565]
      }
    }
  }
  where {
    (253490 call == tag[253477] follower[52140])
  }
  function _array[255540](?).size[253609](arg _mt[253613]:_MT[201], arg this[253611]:_array[255540](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (253617 return(253619 call .(407890 call . this[253611] c"_dom") c"size"))
  }
  { scopeless type
    int(64)[10]
  }
  function _array[255540](?).sizeAs[253625](arg _mt[253633]:_MT[201], arg this[253627]:_array[255540](?), arg t[253630] :
  integral[159](?)) : _unknown[42] "method" "primary method"
  {
    (253637 return(253642 call(253639 call .(407894 call . this[253627] c"_dom") c"sizeAs") t[253630]))
  }
  { scopeless type
    t[253630]
  }
  function _array[255540](?).chpl_checkArrArgDoms[253647](arg _mt[253659]:_MT[201], arg this[253649]:_array[255540](?), arg formalDom[253652] :
  _domain[225034](?), param arg runtimeChecks[253656] :
  bool[19]) : _unknown[42] "inline" "method" "primary method" "no return value for void"
  {
    if(253709 call _cond_test(253696 call !=(253699 call . formalDom[253652] c"rank")(253706 call .(253703 call . this[253649] c"_dom") c"rank")))
    {
      (253663 call compilerError(253664 call +(253666 call +(253668 call + "Rank mismatch passing array argument: expected "(253673 call :(253676 call . formalDom[253652] c"rank") string[244])) " but got ")(253683 call :(253689 call .(253686 call . this[253649] c"_dom") c"rank") string[244]))(errorDepth = 2))
    }
    if(253794 call _cond_test(253782 call !=(253791 'typeof'(253788 call .(253785 call . formalDom[253652] c"distribution") c"_value")) unmanaged DefaultDist[468151]))
    {
      if(253732 call _cond_test(253723 call !=(253726 'typeof' formalDom[253652])(253731 'typeof'(253728 call . this[253649] c"_dom"))))
      {
        (253716 call compilerError "Domain type mismatch in passing array argument"(errorDepth = 2))
      }
      if(253777 call _cond_test(253761 call && runtimeChecks[253656](253764 call !=(253767 call . formalDom[253652] c"distribution")(253774 call .(253771 call . this[253649] c"_dom") c"distribution"))))
      {
        (253738 call halt "Domain map mismatch passing array argument:\n" "  Formal domain map is: "(253746 call . formalDom[253652] c"distribution") "\n" "  Actual domain map is: "(253757 call .(253754 call . this[253649] c"_dom") c"distribution"))
      }
    }
    if(253826 call _cond_test(253816 call && runtimeChecks[253656](253819 call != formalDom[253652](253823 call . this[253649] c"_dom"))))
    {
      (253799 call halt "Domain mismatch passing array argument:\n" "  Formal domain is: " formalDom[253652] "\n" "  Actual domain is: "(253812 call . this[253649] c"_dom"))
    }
  }
  function _array[255540](?).reindex[253833](arg _mt[253841]:_MT[201], arg this[253835]:_array[255540](?), arg newDomain[253838] :
  _domain[225034](?)) : _unknown[42] "inline" "method" "primary method" "fn returns aliasing array"
  {
    (253859 return(253861 call(450041 call . this[253835] c"reindex")(253867 'expand_tuple'(253866 call(253863 call . newDomain[253838] c"dims")))))
  }
  where {
    (253843 call &&(253852 call(253849 call .(253846 call . this[253835] c"_dom") c"isRectangular"))(253857 call(253854 call . newDomain[253838] c"isRectangular")))
  }
  function _array[255540](?).reindex[253871](arg _mt[253879]:_MT[201], arg this[253873]:_array[255540](?), arg newDims[253876]:_any[141](?) ...) : _unknown[42] "method" "primary method" "fn returns aliasing array"
  {
    {
      unknown i[253890] "index var" 0
      unknown tmp[253920] "maybe param" "temp"
      (253932 'move' tmp[253920](253930 call chpl_compute_low_param_loop_bound 0(253893 call -(253896 call . newDims[253876] c"size") 1)))
      unknown tmp[253921] "maybe param" "temp"
      (253945 'move' tmp[253921](253943 call chpl_compute_high_param_loop_bound 0(253937 call -(253939 call . newDims[253876] c"size") 1)))
      unknown tmp[253922] "maybe param" "temp"
      (253948 'move' tmp[253922] 1)
      ParamForLoop[253950]
      { i[253890] tmp[253920] tmp[253921] tmp[253922]
        if(253915 call _cond_test(253908 call !(253911 call isRange(253913 call newDims[253876] i[253890]))))
        {
          (253903 call compilerError "cannot reindex() a rectangular array to a tuple containing non-ranges")
        }
      }
      label _unused_continueLabel[253924]
      label _breakLabel[253923]
    }
    if(253998 call _cond_test(253988 call !=(253991 call . this[253873] c"rank")(253995 call . newDims[253876] c"size")))
    {
      (253960 call compilerError(253961 call +(253963 call +(253965 call + "rank mismatch: cannot reindex() from "(253970 call :(253973 call . this[253873] c"rank") string[244])) " dimension(s) to ")(253980 call :(253983 call . newDims[253876] c"size") string[244])))
    }
    const dom[254004] "const"(254009 call .(254006 call . this[253873] c"_value") c"dom")
    (254013 'end of statement')
    const origDims[254015] "const"(254020 call(254017 call . dom[254004] c"dsiDims"))
    (254022 'end of statement')
    {
      unknown i[254023] "index var" 0
      unknown tmp[254113] "maybe param" "temp"
      (254125 'move' tmp[254113](254123 call chpl_compute_low_param_loop_bound 0(254026 call -(450047 call . this[253873] c"rank") 1)))
      unknown tmp[254114] "maybe param" "temp"
      (254135 'move' tmp[254114](254133 call chpl_compute_high_param_loop_bound 0(254130 call -(450067 call . this[253873] c"rank") 1)))
      unknown tmp[254115] "maybe param" "temp"
      (254138 'move' tmp[254115] 1)
      ParamForLoop[254140]
      { i[254023] tmp[254113] tmp[254114] tmp[254115]
        {
          if(254071 call _cond_test(254053 call !=(254061 call(254058 call .(254056 call newDims[253876] i[254023]) c"sizeAs") uint(64)[86])(254069 call(254066 call .(254064 call origDims[254015] i[254023]) c"sizeAs") uint(64)[86])))
          {
            (254034 call halt "extent mismatch in dimension "(254038 call + i[254023] 1) ": cannot reindex() from "(254046 call origDims[254015] i[254023]) " to "(254050 call newDims[253876] i[254023]))
          }
          if(254108 call _cond_test(254085 call &&(254087 call &&(254089 call ! noNegativeStrideWarnings[209958])(254098 call(254095 call .(254093 call origDims[254015] i[254023]) c"hasPositiveStride")))(254099 call !(254107 call(254104 call .(254102 call newDims[253876] i[254023]) c"hasPositiveStride")))))
          {
            (254077 call warning "arrays and array slices with negatively-strided dimensions are currently unsupported and may lead to unexpected behavior; comp origDims[254015] " to " newDims[253876])
          }
        }
      }
      label _unused_continueLabel[254117]
      label _breakLabel[254116]
    }
    const updom[254150] "const" "no auto destroy"(254155 call chpl__buildDomainExpr(254153 'expand_tuple' newDims[253876]) 1)
    (254158 'end of statement')
    const redist[254160] "const"(254161 'new'(_chpl_manager = unmanaged[183](?))(254165 call ArrayViewReindexDist[432451](?)(downDistPid =(254173 call .(254170 call .(254167 call . this[253873] c"_dom") c"distribution") c"_pid"))(downDistInst =(254184 call .(254181 call .(254178 call . this[253873] c"_dom") c"distribution") c"_instance"))(updom =(254189 call . updom[254150] c"_value"))(downdomPid =(254194 call . dom[254004] c"pid"))(downdomInst = dom[254004])))
    (254201 'end of statement')
    const redistRec[254203] "const"(254204 'new'(254206 call _distribution[268253](?) redist[254160]))
    (254209 'end of statement')
    const newDom[254211] "const" "no auto destroy" "no copy"(254212 'new'(254214 call _domain[225034](?) redistRec[254203](450078 call . this[253873] c"rank")(254218 call . updom[254150] c"idxType")(254222 call . updom[254150] c"strides")(254229 call(254226 call . updom[254150] c"dims"))(definedConst = 1)))
    (254233 'end of statement')
    (254234 call =(254240 call .(254237 call . newDom[254211] c"_value") c"_free_when_no_arrs") 1)
    const tmp[254260] "const" "temp"(254258 call _build_tuple(254251 call . this[253873] c"_value")(254255 call . this[253873] c"_pid"))
    (254267 call _check_tuple_var_decl tmp[254260] 2)
    const arr[254245] "const"(254261 call tmp[254260] 0)
    const arrpid[254247] "const"(254264 call tmp[254260] 1)
    (254272 'end of statement')
    unknown x[254274](254275 'new'(_chpl_manager = unmanaged[183](?))(254279 call ArrayViewReindexArr[432594](?)(eltType =(254281 call . this[253873] c"eltType"))(_DomPid =(254286 call . newDom[254211] c"_pid"))(dom =(254291 call . newDom[254211] c"_instance"))(_ArrPid = arrpid[254247])(_ArrInstance = arr[254245])(ownsArrInstance = 0)))
    (254302 'end of statement')
    (254310 call(254307 call .(254304 call . newDom[254211] c"_value") c"add_arr") x[254274](locking = 0))
    (254314 return(254316 call _newArray x[254274]))
  }
  where {
    (253888 call(253885 call .(253882 call . this[253873] c"_dom") c"isRectangular"))
  }
  function _array[255540](?).reindex[254321](arg _mt[254329]:_MT[201], arg this[254323]:_array[255540](?), arg d[254326] :
  _domain[225034](?)) : _unknown[42] "method" "primary method" "fn returns aliasing array" "no return value for void"
  {
    (254333 call compilerError "Reindexing non-rectangular arrays is not permitted.")
  }
  function _array[255540](?).serialize[254339](arg _mt[254347]:_MT[201], arg this[254341]:_array[255540](?), arg writer[254343]:_any[141](?), ref arg serializer[254345]:_any[141](?)) : _unknown[42] throws "method" "primary method" "no return value for void"
  {
    unknown arrayStyle[254351](254356 call(254353 call . writer[254343] c"styleElement") QIO_STYLE_ELEMENT_ARRAY[77170])
    (254359 'end of statement')
    unknown ischpl[254361](254362 call &&(254364 call == arrayStyle[254351] QIO_ARRAY_FORMAT_CHPL[77205])(254368 call !(254374 call(254371 call . writer[254343] c"_binary"))))
    (254376 'end of statement')
    if(254394 call _cond_test(254387 call &&(254389 call >(450092 call . this[254341] c"rank") 1) ischpl[254361]))
    {
      (254378 'throw'(254379 'new'(_chpl_manager = _owned[238](?))(254383 call IllegalArgumentError[414940](?) "Cannot perform Chapel write of multidimensional array.")))
    }
    (254402 call(254399 call .(407938 call . this[254341] c"_value") c"dsiSerialWrite") writer[254343])
  }
  function _array[255540](?).deserialize[254406](arg _mt[254414]:_MT[201], ref arg this[254408]:_array[255540](?), arg reader[254410]:_any[141](?), ref arg deserializer[254412]:_any[141](?)) : _unknown[42] throws "method" "primary method" "no return value for void"
  {
    unknown arrayStyle[254418](254423 call(254420 call . reader[254410] c"styleElement") QIO_STYLE_ELEMENT_ARRAY[77170])
    (254426 'end of statement')
    unknown ischpl[254428](254429 call &&(254431 call == arrayStyle[254418] QIO_ARRAY_FORMAT_CHPL[77205])(254435 call !(254441 call(254438 call . reader[254410] c"_binary"))))
    (254443 'end of statement')
    if(254461 call _cond_test(254454 call &&(254456 call >(450102 call . this[254408] c"rank") 1) ischpl[254428]))
    {
      (254445 'throw'(254446 'new'(_chpl_manager = _owned[238](?))(254450 call IllegalArgumentError[414940](?) "Cannot perform Chapel read of multidimensional array.")))
    }
    (254469 call(254466 call .(407944 call . this[254408] c"_value") c"dsiSerialRead") reader[254410])
  }
  function _array[255540](?).deserializeFrom[254473](arg _mt[254481]:_MT[201], arg this[254475]:_array[255540](?), arg reader[254477]:_any[141](?), ref arg deserializer[254479]:_any[141](?)) : _unknown[42] throws "method" "primary method"
  {
    unknown ret[254485] this[254475]
    (254488 'end of statement')
    (254493 call(254490 call . ret[254485] c"deserialize") reader[254477] deserializer[254479])
    (254496 return ret[254485])
  }
  function _array[255540](?).IRV[254500](arg _mt[254504]:_MT[201], arg this[254502]:_array[255540](?)) : _unknown[42] "method" "primary method" "no parens" "no return value for void"
  {
    (254515 call compilerError "only sparse arrays have an IRV")
  }
  where {
    (254506 call !(254512 call(254509 call . this[254502] c"isSparse")))
  }
  function _array[255540](?).IRV[254522](arg _mt[254526]:_MT[201], arg this[254524]:_array[255540](?)) ref : _unknown[42] "method" "primary method" "no parens"
  {
    (254534 return(254538 call .(407951 call . this[254524] c"_value") c"IRV"))
  }
  where {
    (254532 call(254529 call . this[254524] c"isSparse"))
  }
  function _array[255540](?).displayRepresentation[254544](arg _mt[254548]:_MT[201], arg this[254546]:_array[255540](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (254555 call(254552 call .(407955 call . this[254546] c"_value") c"dsiDisplayRepresentation"))
  }
  function _array[255540](?).targetLocales[254558](arg _mt[254562]:_MT[201], arg this[254560]:_array[255540](?)) const ref : _unknown[42] "method" "primary method"
  {
    (254565 return(254570 call(254567 call .(407959 call . this[254560] c"_value") c"dsiTargetLocales")))
  }
  function _array[255540](?).hasSingleLocalSubdomain[254573](arg _mt[254577]:_MT[201], arg this[254575]:_array[255540](?)) param : _unknown[42] "method" "primary method" "@unstable"
  {
    (254580 return(254585 call(254582 call .(407963 call . this[254575] c"_value") c"dsiHasSingleLocalSubdomain")))
  }
  function _array[255540](?).localSubdomain[254588](arg _mt[254598]:_MT[201], arg this[254590]:_array[255540](?), arg loc[254594] :
  locale[234] =
  (450111 call here[135591])) : _unknown[42] "method" "primary method"
  {
    if(254614 call _cond_test(254607 call !(254613 call(254610 call .(407967 call . this[254590] c"_value") c"dsiHasSingleLocalSubdomain"))))
    {
      (254602 call compilerError "the array may have multiple local subdomains")
    }
    (254619 return(254624 call(254621 call .(407971 call . this[254590] c"_value") c"dsiLocalSubdomain") loc[254594]))
  }
  function _array[255540](?).localSubdomains[254628](arg _mt[254638]:_MT[201], arg this[254630]:_array[255540](?), arg loc[254634] :
  locale[234] =
  (450114 call here[135591])) : _unknown[42] "iterator fn" "method" "primary method" "@unstable" "no return value for void"
  {
    if(254695 call _cond_test(254694 call(254691 call .(407979 call . this[254630] c"_value") c"dsiHasSingleLocalSubdomain")))
    {
      (254642 yield(254644 call(450117 call . this[254630] c"localSubdomain") loc[254634]))
    }
    {
      {
        unknown _indexOfInterest[254658] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[254659] "expr temp" "temp"
        (254668 'move' _iterator[254659](254666 call _getIterator(254653 call(254650 call .(407975 call . this[254630] c"_value") c"dsiLocalSubdomains") loc[254634])))
        Defer
        {
          {
            (254683 call _freeIterator _iterator[254659])
          }
        }
        { scopeless type
          (254673 'move' _indexOfInterest[254658](254670 call iteratorIndex _iterator[254659]))
        }
        ForLoop[254660]
        {
          unknown d[254647] "index var" "insert auto destroy"
          (254678 'move' d[254647] _indexOfInterest[254658])
          (254655 yield d[254647])
          label _continueLabel[254663]
          _indexOfInterest[254658]
          _iterator[254659]
        }
        label _breakLabel[254664]
      }
    }
  }
  function _array[255540](?).chpl__isDense1DArray[254701](arg _mt[254705]:_MT[201], arg this[254703]:_array[255540](?)) param : _unknown[42] "method" "primary method"
  {
    (254708 return(254709 call &&(254711 call &&(254717 call(254714 call . this[254703] c"isRectangular"))(254718 call ==(254721 call . this[254703] c"rank") 1))(254732 call(254729 call .(254726 call . this[254703] c"_value") c"hasUnitStride"))))
  }
  function _array[255540](?).isEmpty[254735](arg _mt[254739]:_MT[201], arg this[254737]:_array[255540](?)) : _unknown[42] "method" "primary method"
  {
    (254743 return(254744 call ==(254750 call(254747 call . this[254737] c"sizeAs") uint(64)[86]) 0))
  }
  { scopeless type
    bool[19]
  }
  function _array[255540](?).last[254756](arg _mt[254760]:_MT[201], arg this[254758]:_array[255540](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    if(254785 call _cond_test(254769 call ||(254771 call !(254777 call(254774 call . this[254758] c"isRectangular")))(254778 call !=(254781 call . this[254758] c"rank") 1)))
    {
      (254764 call compilerError "last is only supported on 1D rectangular arrays")
    }
    if(254801 call _cond_test(254796 call && 1(254800 call(450126 call . this[254758] c"isEmpty"))))
    {
      (254791 call halt "last called on an empty array")
    }
    (254806 return(254808 call this[254758](254813 call .(254810 call . this[254758] c"_dom") c"last")))
  }
  function _array[255540](?).first[254818](arg _mt[254822]:_MT[201], arg this[254820]:_array[255540](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    if(254847 call _cond_test(254831 call ||(254833 call !(254839 call(254836 call . this[254820] c"isRectangular")))(254840 call !=(254843 call . this[254820] c"rank") 1)))
    {
      (254826 call compilerError "first is only supported on 1D rectangular arrays")
    }
    if(254863 call _cond_test(254858 call && 1(254862 call(450132 call . this[254820] c"isEmpty"))))
    {
      (254853 call halt "first called on an empty array")
    }
    (254868 return(254870 call this[254820](254875 call .(254872 call . this[254820] c"_dom") c"first")))
  }
  function _array[255540](?).find[254880](arg _mt[254892]:_MT[201], arg this[254882]:_array[255540](?), arg val[254885] :
  (450137 call . this[254882] c"eltType"), ref arg idx[254889] :
  (450141 call . this[254882] c"fullIdxType")) : _unknown[42] "method" "primary method"
  {
    function max[254896](arg e[254899] :
    enum[147](?)) : _unknown[42]
    {
      (254903 return(254905 call chpl__orderToEnum(254906 call -(254909 call . e[254899] c"size") 1) e[254899]))
    }
    if(255196 call _cond_test(255182 call &&(255188 call(255185 call . this[254882] c"isSparse"))(255189 call == val[254885](255193 call . this[254882] c"IRV"))))
    {
      {
        unknown _indexOfInterest[254960] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[254961] "expr temp" "temp"
        (254970 'move' _iterator[254961](254968 call _getIterator(254926 call .(254923 call .(254920 call . this[254882] c"_dom") c"_value") c"parentDom")))
        Defer
        {
          {
            (254985 call _freeIterator _iterator[254961])
          }
        }
        { scopeless type
          (254975 'move' _indexOfInterest[254960](254972 call iteratorIndex _iterator[254961]))
        }
        ForLoop[254962]
        {
          unknown i[254917] "index var" "insert auto destroy"
          (254980 'move' i[254917] _indexOfInterest[254960])
          {
            if(254956 call _cond_test(254937 call ||(254939 call !(254948 call(254945 call .(254942 call . this[254882] c"_dom") c"contains") i[254917]))(254950 call ==(254953 call this[254882] i[254917]) val[254885])))
            {
              (254931 call = idx[254889] i[254917])
              (254935 return 1)
            }
          }
          label _continueLabel[254965]
          _indexOfInterest[254960]
          _iterator[254961]
        }
        label _breakLabel[254966]
      }
      (254992 return 0)
    }
    {
      if(255178 call _cond_test(255164 call &&(255166 call !=(255169 call . this[254882] c"idxType") bool[19])(255173 'call and fn resolves' "max"(450186 call . this[254882] c"fullIdxType"))))
      {
        unknown foundIt[254996] 0
        (254999 'end of statement')
        unknown locIdx[255001](255003 call max(450154 call . this[254882] c"fullIdxType"))
        (255006 'end of statement')
        Forall[255061] {
          induction variables:
            
            unknown i[255007] "index var" "insert auto destroy"
          iterated expressions:
            (255010 call . this[254882] c"_dom")
          shadow variables:
            locIdx[255016] 'reduce' intent outer var locIdx[255001]
              init block
              {
              }
              deinit block
              {
              }
            foundIt[255023] 'reduce' intent outer var foundIt[254996]
              init block
              {
              }
              deinit block
              {
              }
          other variables
            forall body
          {
            if(255055 call _cond_test(255038 call &&(255040 call ==(255043 call this[254882] i[255007]) val[254885])(255046 call ||(255048 call ! foundIt[255023])(255051 call < i[255007] locIdx[255016]))))
            {
              (255030 call = locIdx[255016] i[255007])
              (255034 call = foundIt[255023] 1)
            }
          }
        }
        if(255070 call _cond_test foundIt[254996])
        {
          (255064 call = idx[254889] locIdx[255001])
        }
        (255075 return foundIt[254996])
      }
      {
        unknown foundIt[255079] 0
        (255082 'end of statement')
        {
          unknown _indexOfInterest[255130] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[255131] "expr temp" "temp"
          (255140 'move' _iterator[255131](255138 call _getIterator(255086 call . this[254882] c"_dom")))
          Defer
          {
            {
              (255155 call _freeIterator _iterator[255131])
            }
          }
          { scopeless type
            (255145 'move' _indexOfInterest[255130](255142 call iteratorIndex _iterator[255131]))
          }
          ForLoop[255132]
          {
            unknown i[255083] "index var" "insert auto destroy"
            (255150 'move' i[255083] _indexOfInterest[255130])
            {
              if(255126 call _cond_test(255120 call ==(255123 call this[254882] i[255083]) val[254885]))
              {
                if(255116 call _cond_test foundIt[255079])
                {
                  if(255101 call _cond_test(255097 call < i[255083] idx[254889]))
                  {
                    (255092 call = idx[254889] i[255083])
                  }
                }
                {
                  (255107 call = idx[254889] i[255083])
                  (255111 call = foundIt[255079] 1)
                }
              }
            }
            label _continueLabel[255135]
            _indexOfInterest[255130]
            _iterator[255131]
          }
          label _breakLabel[255136]
        }
        (255162 return foundIt[255079])
      }
    }
  }
  { scopeless type
    bool[19]
  }
  function _array[255540](?).find[255204](arg _mt[255212]:_MT[201], arg this[255206]:_array[255540](?), arg val[255209] :
  (450191 call . this[255206] c"eltType")) : _unknown[42] "method" "primary method"
  {
    if(255246 call _cond_test(255222 call ||(255224 call !(255226 call ||(255232 call(255229 call . this[255206] c"isRectangular"))(255237 call(255234 call . this[255206] c"isSparse"))))(255238 call !(255241 call isIntegralType(255243 call . this[255206] c"idxType")))))
    {
      (255217 call compilerError "This array type does not currently support the 1-argument '.find()' method; try using the 2-argument version'")
    }
    unknown idx[255252](450199 call . this[255206] c"fullIdxType")
    (255255 'end of statement')
    if(255275 call _cond_test(255272 call(450204 call . this[255206] c"find") val[255209] idx[255252]))
    {
      (255256 return idx[255252])
    }
    {
      (255259 return(255260 call -(255266 call .(255263 call . this[255206] c"_dom") c"lowBound") 1))
    }
  }
  { scopeless type
    (450195 call . this[255206] c"fullIdxType")
  }
  function _array[255540](?).count[255284](arg _mt[255295]:_MT[201], arg this[255286]:_array[255540](?), arg val[255292] :
  (255289 call . this[255286] c"eltType")) : _unknown[42] "method" "primary method"
  {
    (255299 return(255305 'reduce' SumReduceScanOp[429526](?)(255301 call == this[255286] val[255292]) 0))
  }
  { scopeless type
    int(64)[10]
  }
  function _array[255540](?).shape[255310](arg _mt[255314]:_MT[201], arg this[255312]:_array[255540](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (255333 return(255340 call .(255335 call . this[255312] c"_dom") c"shape"))
  }
  where {
    (255320 call ||(255326 call(255323 call . this[255312] c"isRectangular"))(255331 call(255328 call . this[255312] c"isSparse")))
  }
  { scopeless type
    (255316 call *(450213 call . this[255312] c"rank") int(64)[10])
  }
  function _array[255540](?).shape[255347](arg _mt[255351]:_MT[201], arg this[255349]:_array[255540](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown s[255360](255364 call _build_tuple(255363 'typeof'(450217 call . this[255349] c"size")))
    (255367 'end of statement')
    (255368 call =(255371 call s[255360] 0)(450222 call . this[255349] c"size"))
    (255374 return s[255360])
  }
  where {
    (255357 call(255354 call . this[255349] c"isAssociative"))
  }
  function _array[255540](?).shape[255379](arg _mt[255383]:_MT[201], arg this[255381]:_array[255540](?)) : _unknown[42] "method" "primary method" "no parens" "no return value for void"
  {
    (255387 call compilerError ".shape not supported on this array")
  }
  function _array[255540](?)._scan[255393](arg _mt[255399]:_MT[201], arg this[255395]:_array[255540](?), arg op[255397]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    (255416 return(255423 call(255420 call .(408017 call . this[255395] c"_value") c"doiScan") op[255397](255426 call . this[255395] c"_dom")))
  }
  where {
    (255405 call canResolveMethod module=[222] Reflection[1804](450227 call . this[255395] c"_value") "doiScan" op[255397](255412 call . this[255395] c"_dom"))
    (408010 'referenced modules list' Reflection[1804])
  }
  function _array[255540](?).iteratorYieldsLocalElements[255432](arg _mt[255436]:_MT[201], arg this[255434]:_array[255540](?)) param : _unknown[42] "method" "primary method"
  {
    (255439 return(255444 call(255441 call .(408022 call . this[255434] c"_value") c"dsiIteratorYieldsLocalElements")))
  }
  function _array[255540](?).chpl_isNonDistributedArray[255447](arg _mt[255451]:_MT[201], arg this[255449]:_array[255540](?)) param : _unknown[42] "method" "primary method"
  {
    (255454 return(255456 call chpl_domainDistIsLayout(255458 call _getDomain(255462 call .(255460 call chpl__getActualArray(450233 call . this[255449] c"_value")) c"dom"))))
  }
  function _array[255540](?).isRectangular[255467](arg _mt[255471]:_MT[201], arg this[255469]:_array[255540](?)) param : _unknown[42] "method" "primary method"
  {
    (255474 return(255482 call(255479 call .(255476 call . this[255469] c"_dom") c"isRectangular")))
  }
  function _array[255540](?).isIrregular[255485](arg _mt[255489]:_MT[201], arg this[255487]:_array[255540](?)) param : _unknown[42] "method" "primary method"
  {
    (255492 return(255500 call(255497 call .(255494 call . this[255487] c"_dom") c"isIrregular")))
  }
  function _array[255540](?).isAssociative[255503](arg _mt[255507]:_MT[201], arg this[255505]:_array[255540](?)) param : _unknown[42] "method" "primary method"
  {
    (255510 return(255518 call(255515 call .(255512 call . this[255505] c"_dom") c"isAssociative")))
  }
  function _array[255540](?).isSparse[255521](arg _mt[255525]:_MT[201], arg this[255523]:_array[255540](?)) param : _unknown[42] "method" "primary method"
  {
    (255528 return(255536 call(255533 call .(255530 call . this[255523] c"_dom") c"isSparse")))
  }
  type _array[255540](?) unknown _pid[250452] int(64)[10] unknown _instance[250457] "alias scope from this" "owned" unknown _unowned[250461] bool[19] forwarding ( )
  function _do_destroy_arr[255542](arg _unowned[255545] :
  bool[19], arg _instance[255548]:_any[141](?), arg deinitElts[255551] =
  1) : _unknown[42] "inline" "no return value for void"
  {
    if(255782 call _cond_test(255779 call ! _unowned[255545]))
    {
      {
        const tmp[255757] "const" "temp"
        (255758 'move' tmp[255757](255755 'deref'(255754 '_wide_get_locale' _instance[255548])))
        {
          unknown arrIsInList[255559] "param"(255560 call !(255566 call(255563 call . _instance[255548] c"isSliceArrayView")))
          (255568 'end of statement')
          unknown tmp[255580] "temp"(255578 call(255575 call . _instance[255548] c"remove") arrIsInList[255559])
          (255587 call _check_tuple_var_decl tmp[255580] 2)
          unknown arrToFree[255570](255581 call tmp[255580] 0)
          unknown domToRemove[255572](255584 call tmp[255580] 1)
          (255592 'end of statement')
          unknown domToFree[255594] nil[32] unmanaged BaseDom?[468157]
          (255600 'end of statement')
          unknown distToRemove[255602] nil[32] unmanaged BaseDist?[468142]
          (255608 'end of statement')
          unknown distToFree[255610] nil[32] unmanaged BaseDist?[468142]
          (255616 'end of statement')
          unknown domIsPrivatized[255618] 0
          (255621 'end of statement')
          const instanceDom[255623] "const" domToRemove[255572]
          (255626 'end of statement')
          if(255661 call _cond_test(255657 call != domToRemove[255572] nil[32]))
          {
            (255640 call =(255631 call _build_tuple domToFree[255594] distToRemove[255602])(255639 call(255636 call .(255633 call postfix! domToRemove[255572]) c"remove")))
            (255642 call = domIsPrivatized[255618](255645 call && 0(255648 call !=(255653 call .(255650 call postfix! domToRemove[255572]) c"pid") nullPid[247489])))
          }
          unknown distIsPrivatized[255666] 0
          (255669 'end of statement')
          if(255700 call _cond_test(255696 call != distToRemove[255602] nil[32]))
          {
            (255671 call = distToFree[255610](255680 call(255677 call .(255674 call postfix! distToRemove[255602]) c"remove")))
            (255681 call = distIsPrivatized[255666](255684 call && 0(255687 call !=(255692 call .(255689 call postfix! distToRemove[255602]) c"pid") nullPid[247489])))
          }
          if(255717 call _cond_test(255713 call != arrToFree[255570] nil[32]))
          {
            (255705 call _delete_arr _instance[255548](255708 call _isPrivatized _instance[255548])(deinitElts = deinitElts[255551]))
          }
          if(255733 call _cond_test(255729 call != domToFree[255594] nil[32]))
          {
            (255723 call _delete_dom(255724 call postfix! instanceDom[255623]) domIsPrivatized[255618])
          }
          if(255749 call _cond_test(255745 call != distToFree[255610] nil[32]))
          {
            (255739 call _delete_dist(255740 call postfix! distToFree[255610]) distIsPrivatized[255666])
          }
        }
        (255761 'elided on block' 0 tmp[255757])
      }
    }
    {
      if(255775 call _cond_test(255773 call chpl__isArrayView _instance[255548]))
      {
        (255769 call chpl__delete _instance[255548])
      }
    }
  }
  function _do_destroy_array[255788](arg array[255791] :
  _array[255540](?), arg deinitElts[255795] =
  1) : _unknown[42] "inline" "no return value for void"
  {
    (255800 call _do_destroy_arr(255802 call . array[255791] c"_unowned")(255806 call . array[255791] c"_instance") deinitElts[255795])
  }
  function _deinitElementsIsParallel[255812](arg eltType[255814]:_any[141](?), arg size[255817] :
  integral[159](?)) : _unknown[42]
  {
    (255821 return(255822 call ==(255825 call init_elts_method size[255817] eltType[255814]) parallelInit[66983]))
  }
  function _deinitElements[255834](ref arg array[255837] :
  _array[255540](?)) : _unknown[42] "no return value for void"
  {
    unknown needsDestroy[255842] "param"(255843 'needs auto destroy'(255845 call . array[255837] c"eltType"))
    (255849 'end of statement')
    if(255919 call _cond_test needsDestroy[255842])
    {
      if(255914 call _cond_test(255905 call _deinitElementsIsParallel(255907 call . array[255837] c"eltType")(255911 call . array[255837] c"size")))
      {
        Forall[255861] {
          induction variables:
            
            unknown elt[255852] "index var" "insert auto destroy"
          iterated expressions:
            array[255837]
          shadow variables:
          other variables
            forall body
          {
            (255857 call chpl__autoDestroy elt[255852])
          }
        }
      }
      {
        {
          unknown _indexOfInterest[255872] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[255873] "expr temp" "temp"
          (255882 'move' _iterator[255873](255880 call _getIterator array[255837]))
          Defer
          {
            {
              (255897 call _freeIterator _iterator[255873])
            }
          }
          { scopeless type
            (255887 'move' _indexOfInterest[255872](255884 call iteratorIndex _iterator[255873]))
          }
          ForLoop[255874]
          {
            unknown elt[255865] "index var" "insert auto destroy"
            (255892 'move' elt[255865] _indexOfInterest[255872])
            {
              (255870 call chpl__autoDestroy elt[255865])
            }
            label _continueLabel[255877]
            _indexOfInterest[255872]
            _iterator[255873]
          }
          label _breakLabel[255878]
        }
      }
    }
    (255932 call(255929 call .(255924 call . array[255837] c"_instance") c"dsiElementDeinitializationComplete"))
  }
  function _array[255540](?).equals[255935](arg _mt[255945]:_MT[201], arg this[255938]:_array[255540](?) :
  _array[255540](?), arg that[255942] :
  _array[255540](?)) : _unknown[42] "method" "@unstable"
  {
    if(255962 call _cond_test(255952 call ==(255955 call . this[255938] c"_value")(255959 call . that[255942] c"_value")))
    {
      (255949 return 1)
    }
    if(255980 call _cond_test(255970 call !=(255973 call . this[255938] c"rank")(255977 call . that[255942] c"rank")))
    {
      (255967 return 0)
    }
    if(256002 call _cond_test(255988 call !=(255994 call(255991 call . this[255938] c"sizeAs") uint(64)[86])(256000 call(255997 call . that[255942] c"sizeAs") uint(64)[86])))
    {
      (255985 return 0)
    }
    if(256117 call _cond_test(256099 call &&(256108 call(256105 call .(256102 call . this[255938] c"_dom") c"isRectangular"))(256116 call(256113 call .(256110 call . that[255942] c"_dom") c"isRectangular"))))
    {
      {
        unknown _indexOfInterest[256057] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[256058] "expr temp" "temp"
        (256067 'move' _iterator[256058](256065 call _getIterator(256077 call chpl_direct_counted_range_iter 0(256073 call . this[255938] c"rank"))))
        Defer
        {
          {
            (256092 call _freeIterator _iterator[256058])
          }
        }
        { scopeless type
          (256082 'move' _indexOfInterest[256057](256079 call iteratorIndex _iterator[256058]))
        }
        ForLoop[256059]
        {
          unknown d[256008] "index var" "insert auto destroy"
          (256087 'move' d[256008] _indexOfInterest[256057])
          if(256052 call _cond_test(256022 call !=(256036 call(256033 call .(256031 call(256028 call .(256025 call . this[255938] c"_dom") c"dim") d[256008]) c"sizeAs") uint(64)[86])(256050 call(256047 call .(256045 call(256042 call .(256039 call . that[255942] c"_dom") c"dim") d[256008]) c"sizeAs") uint(64)[86])))
          {
            (256019 return 0)
          }
          label _continueLabel[256062]
          _indexOfInterest[256057]
          _iterator[256058]
        }
        label _breakLabel[256063]
      }
    }
    if(256190 call _cond_test(256185 call isArrayType(256187 call . this[255938] c"eltType")))
    {
      unknown ret[256123] 1
      (256126 'end of statement')
      Forall[256169] {
        induction variables:
          
          unknown thisArr[256128] "index var" "insert auto destroy"
          
          unknown thatArr[256130] "index var" "insert auto destroy"
        iterated expressions:
          this[255938]
          that[255942]
        shadow variables:
          ret[256141] 'reduce' intent outer var ret[256123]
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          unknown tmp[256156] "temp"
          (256159 'move' tmp[256156](256158 'addr of' ret[256141]))
          (256164 call = tmp[256156](256161 call && tmp[256156](256153 call(256150 call . thisArr[256128] c"equals") thatArr[256130])))
        }
      }
      (256173 return ret[256123])
    }
    {
      (256176 return(256182 'reduce' LogicalAndReduceScanOp[429773](?)(256178 call == this[255938] that[255942]) 0))
    }
  }
  { scopeless type
    bool[19]
  }
  function :[256197](param arg arg[256199]:_any[141](?), arg t[256202] :
  _array[255540](?)) : _unknown[42] "operator"
  {
    unknown result[256207] t[256202]
    (256210 'end of statement')
    (256212 call chpl__transferArray result[256207] arg[256199])
    (256215 return result[256207])
  }
  function :[256219](arg x[256224] :
  (256222 call chpl__buildArrayRuntimeType nil[32]), arg t[256228] :
  string[244]) : _unknown[42] "deprecated" "operator"
  {
    (256241 return(256248 'try!-expr'(256246 call(256243 call . "%\?" c"format") x[256224])))
    (396908 'used modules list'(256240 'import' FormattedIO[208298].{string}))
  }
  function :[256251](in arg x[256258] :
  (256256 call chpl__buildArrayRuntimeType nil[32] unknown et[256254]), arg t[256262] :
  et[256254]) : _unknown[42] "last resort" "operator"
  {
    (256270 return x[256258])
  }
  where {
    (256265 call == t[256262] et[256254])
  }
  function #[256275](arg arr[256280] :
  (256278 call chpl__buildArrayRuntimeType nil[32]), arg counts[256284] :
  integral[159](?)) : _unknown[42] "operator" "fn returns aliasing array"
  {
    (256288 return(256290 call arr[256280](256291 call #(256294 call . arr[256280] c"_dom") counts[256284])))
  }
  function #[256300](arg arr[256305] :
  (256303 call chpl__buildArrayRuntimeType nil[32]), arg counts[256309] :
  _tuple[246](?)) : _unknown[42] "operator" "fn returns aliasing array"
  {
    (256313 return(256315 call arr[256305](256316 call #(256319 call . arr[256305] c"_dom") counts[256309])))
  }
  function #[256325](arg arr[256330] :
  (256328 call chpl__buildArrayRuntimeType nil[32]), arg counts[256333]:_any[141](?)) : _unknown[42] "last resort" "operator" "no return value for void"
  {
    (256337 call compilerError "cannot apply '#' to '"(256339 call :(256342 'typeof' arr[256330]) string[244]) "' using count(s) of type "(256345 call :(256348 'typeof' counts[256333]) string[244]))
  }
  function isCollapsedDimension[256352](arg r[256364] :
  (256355 call range[240](?) unknown e[256356] unknown b[256358] unknown s[256360] unknown a[256362])) param : _unknown[42]
  {
    (256368 return 0)
  }
  function isCollapsedDimension[256372](arg r[256374]:_any[141](?)) param : _unknown[42]
  {
    (256377 return 1)
  }
  function chpl__countRanges[256381](arg arg[256383]:_any[141](?)) param : _unknown[42]
  {
    (256386 return(256387 call :(256390 call isRangeValue arg[256383]) int(64)[10]))
  }
  function chpl__countRanges[256395](arg arg[256397]:_any[141](?), arg args[256400]:_any[141](?) ...) param : _unknown[42]
  {
    (256404 return(256405 call +(256408 call chpl__countRanges arg[256397])(256411 call chpl__countRanges(256413 'expand_tuple' args[256400]))))
  }
  function _validRankChangeArgs[256416](arg args[256418]:_any[141](?), arg idxType[256420]:_any[141](?)) param : _unknown[42]
  {
    function _validRankChangeArg[256423](arg idxType[256425]:_any[141](?), arg r[256430] :
    (256428 call range[240](?) ?[227])) param : _unknown[42]
    {
      (256434 return 1)
    }
    function _validRankChangeArg[256438](arg idxType[256440]:_any[141](?), arg i[256443] :
    idxType[256440]) param : _unknown[42]
    {
      (256447 return 1)
    }
    function _validRankChangeArg[256451](arg idxType[256453]:_any[141](?), arg x[256455]:_any[141](?)) param : _unknown[42] "last resort"
    {
      (256458 return 0)
    }
    function allValid[256462]() param : _unknown[42]
    {
      {
        unknown dim[256465] "index var" 0
        unknown tmp[256494] "maybe param" "temp"
        (256506 'move' tmp[256494](256504 call chpl_compute_low_param_loop_bound 0(256468 call -(256471 call . args[256418] c"size") 1)))
        unknown tmp[256495] "maybe param" "temp"
        (256519 'move' tmp[256495](256517 call chpl_compute_high_param_loop_bound 0(256511 call -(256513 call . args[256418] c"size") 1)))
        unknown tmp[256496] "maybe param" "temp"
        (256522 'move' tmp[256496] 1)
        ParamForLoop[256524]
        { dim[256465] tmp[256494] tmp[256495] tmp[256496]
          {
            if(256489 call _cond_test(256481 call !(256484 call _validRankChangeArg idxType[256420](256487 call args[256418] dim[256465]))))
            {
              (256478 return 0)
            }
          }
        }
        label _unused_continueLabel[256498]
        label _breakLabel[256497]
      }
      (256533 return 1)
    }
    function oneRange[256537]() param : _unknown[42]
    {
      {
        unknown dim[256540] "index var" 0
        unknown tmp[256566] "maybe param" "temp"
        (256578 'move' tmp[256566](256576 call chpl_compute_low_param_loop_bound 0(256543 call -(256546 call . args[256418] c"size") 1)))
        unknown tmp[256567] "maybe param" "temp"
        (256591 'move' tmp[256567](256589 call chpl_compute_high_param_loop_bound 0(256583 call -(256585 call . args[256418] c"size") 1)))
        unknown tmp[256568] "maybe param" "temp"
        (256594 'move' tmp[256568] 1)
        ParamForLoop[256596]
        { dim[256540] tmp[256566] tmp[256567] tmp[256568]
          {
            if(256561 call _cond_test(256557 call isRange(256559 call args[256418] dim[256540])))
            {
              (256553 return 1)
            }
          }
        }
        label _unused_continueLabel[256570]
        label _breakLabel[256569]
      }
      (256605 return 0)
    }
    function oneNonRange[256609]() param : _unknown[42]
    {
      {
        unknown dim[256612] "index var" 0
        unknown tmp[256640] "maybe param" "temp"
        (256652 'move' tmp[256640](256650 call chpl_compute_low_param_loop_bound 0(256615 call -(256618 call . args[256418] c"size") 1)))
        unknown tmp[256641] "maybe param" "temp"
        (256665 'move' tmp[256641](256663 call chpl_compute_high_param_loop_bound 0(256657 call -(256659 call . args[256418] c"size") 1)))
        unknown tmp[256642] "maybe param" "temp"
        (256668 'move' tmp[256642] 1)
        ParamForLoop[256670]
        { dim[256612] tmp[256640] tmp[256641] tmp[256642]
          {
            if(256635 call _cond_test(256628 call !(256631 call isRange(256633 call args[256418] dim[256612]))))
            {
              (256625 return 1)
            }
          }
        }
        label _unused_continueLabel[256644]
        label _breakLabel[256643]
      }
      (256679 return 0)
    }
    (256683 return(256684 call &&(256686 call &&(256689 call allValid)(256691 call oneRange))(256693 call oneNonRange)))
  }
  function =[256696](ref arg a[256699] :
  _distribution[268253](?), arg b[256703] :
  _distribution[268253](?)) : _unknown[42] "assignop" "operator" "@unstable" "no return value for void"
  {
    if(256801 call _cond_test(256794 call ==(256797 call . a[256699] c"_value") nil[32]))
    {
      (256708 'move' a[256699](256711 call chpl__autoCopy(256718 call(256715 call . b[256703] c"clone"))(definedConst = 0)))
    }
    {
      if(256740 call _cond_test(256728 call !=(256734 'typeof'(256731 call . a[256699] c"_value"))(256739 'typeof'(256736 call . b[256703] c"_value"))))
      {
        (256723 call compilerError "type mismatch in distribution assignment")
      }
      if(256771 call _cond_test(256761 call ==(256764 call . a[256699] c"_value")(256768 call . b[256703] c"_value")))
      {
      }
      {
        (256755 call(256752 call .(256747 call . a[256699] c"_value") c"dsiAssign")(256757 call . b[256703] c"_value"))
      }
      if(256789 call _cond_test(256784 call _isPrivatized(256786 call . a[256699] c"_instance")))
      {
        (256777 call _reprivatize(256779 call . a[256699] c"_value"))
      }
    }
  }
  function chpl__serializeAssignment[256807](arg a[256809]:_any[141](?), arg b[256811]:_any[141](?)) param : _unknown[42]
  {
    if(256829 call _cond_test(256817 call &&(256819 call !=(256822 call . a[256809] c"rank") 1)(256827 call isRange b[256811])))
    {
      (256814 return 1)
    }
    if(256894 call _cond_test(256837 call ||(256839 call &&(256841 call &&(256843 call !(256849 call(256846 call . a[256809] c"isRectangular")))(256850 call !(256856 call(256853 call . a[256809] c"isAssociative"))))(256857 call !(256863 call(256860 call . a[256809] c"isSparse"))))(256864 call &&(256866 call &&(256868 call &&(256871 call isArray b[256811])(256873 call !(256879 call(256876 call . b[256811] c"isRectangular"))))(256880 call !(256886 call(256883 call . b[256811] c"isAssociative"))))(256887 call !(256893 call(256890 call . b[256811] c"isSparse"))))))
    {
      (256834 return 1)
    }
    (256899 return 0)
  }
  function isCopyableOrSyncSingle[256903](arg t[256905]:_any[141](?)) param : _unknown[42] "private"
  {
    (256908 return(256909 call ||(256912 call isSyncType t[256905])(256915 call isCopyableType t[256905])))
  }
  function isConstCopyableOrSyncSingle[256919](arg t[256921]:_any[141](?)) param : _unknown[42] "private"
  {
    (256924 return(256925 call ||(256928 call isSyncType t[256921])(256931 call isConstCopyableType t[256921])))
  }
  function chpl__compatibleForBulkTransfer[256935](arg a[256937]:_any[141](?), arg b[256939]:_any[141](?), param arg kind[256942] :
  _tElt[257619]) param : _unknown[42]
  {
    if(256952 call _cond_test(256949 call ! useBulkTransfer[247501]))
    {
      (256946 return 0)
    }
    if(256970 call _cond_test(256960 call !=(256963 call . a[256937] c"eltType")(256967 call . b[256939] c"eltType")))
    {
      (256957 return 0)
    }
    if(256987 call _cond_test(256978 call == kind[256942] move[257613]))
    {
      (256975 return 1)
    }
    if(257012 call _cond_test(256995 call &&(256997 call == kind[256942] initCopy[257615])(257007 call isConstCopyableOrSyncSingle(257009 call . a[256937] c"eltType"))))
    {
      (256992 return 1)
    }
    if(257028 call _cond_test(257020 call !(257023 call chpl__supportedDataTypeForBulkTransfer(257025 call . a[256937] c"eltType"))))
    {
      (257017 return 0)
    }
    (257033 return 1)
  }
  function chpl__supportedDataTypeForBulkTransfer[257037](arg t[257039]:_any[141](?)) param : _unknown[42]
  {
    if(257093 call _cond_test(257083 call ||(395518 'is_subtype' borrowed[174](?) t[257039])(395519 'is_subtype' unmanaged[183](?) t[257039])))
    {
      (257043 return 0)
    }
    {
      if(257078 call _cond_test(257070 call ||(257073 call isRecordType t[257039])(257076 call isTupleType t[257039])))
      {
        (257046 return(257048 call isPODType t[257039]))
      }
      {
        if(257066 call _cond_test(257064 call isUnionType t[257039]))
        {
          (257051 return 0)
        }
        {
          unknown x[257055] "unsafe" t[257039]
          (257058 'end of statement')
          (257059 return(257061 call chpl__supportedDataTypeForBulkTransfer x[257055]))
        }
      }
    }
  }
  function chpl__supportedDataTypeForBulkTransfer[257100](arg x[257103] :
  string[244]) param : _unknown[42]
  {
    (257107 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[257111](arg x[257114] :
  bytes[232]) param : _unknown[42]
  {
    (257118 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[257122](arg x[257125] :
  _syncvar[132579](?)) param : _unknown[42]
  {
    (257129 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[257133](arg x[257136] :
  _domain[225034](?)) param : _unknown[42]
  {
    (257140 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[257144](arg x[257149] :
  (257147 call chpl__buildArrayRuntimeType nil[32])) param : _unknown[42]
  {
    (257153 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[257157](arg x[257160] :
  _distribution[268253](?)) param : _unknown[42]
  {
    (257164 return 1)
  }
  function chpl__supportedDataTypeForBulkTransfer[257168](arg x[257171] :
  locale[234]) param : _unknown[42]
  {
    (257175 return 1)
  }
  function chpl__supportedDataTypeForBulkTransfer[257179](arg x[257182] :
  chpl_anycomplex[144](?)) param : _unknown[42]
  {
    (257186 return 1)
  }
  function chpl__supportedDataTypeForBulkTransfer[257190](arg x[257194] :
  RootClass[236]) param : _unknown[42]
  {
    (257198 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[257202](arg x[257204]:_any[141](?)) param : _unknown[42]
  {
    (257207 return 1)
  }
  function checkArrayShapesUponAssignment[257211](arg a[257213]:_any[141](?), arg b[257215]:_any[141](?), arg forSwap[257218] =
  0) : _unknown[42] "no return value for void"
  {
    if(257410 call _cond_test(257398 call &&(257404 call(257401 call . a[257213] c"isRectangular"))(257409 call(257406 call . b[257215] c"isRectangular"))))
    {
      const aDims[257224] "const"(257244 IfExpr (257226 call isProtoSlice a[257213]) then
      { scopeless
        (257232 call(257229 call . a[257213] c"dims"))
      } else
      { scopeless
        (257243 call(257240 call .(257237 call .(257234 call . a[257213] c"_value") c"dom") c"dsiDims"))
      } )
      (257248 'end of statement')
      const bDims[257250] "const"(257270 IfExpr (257252 call isProtoSlice b[257215]) then
      { scopeless
        (257258 call(257255 call . b[257215] c"dims"))
      } else
      { scopeless
        (257269 call(257266 call .(257263 call .(257260 call . b[257215] c"_value") c"dom") c"dsiDims"))
      } )
      (257274 'end of statement')
      (257276 call compilerAssert(257277 call ==(257280 call . aDims[257224] c"size")(257284 call . bDims[257250] c"size")))
      {
        unknown i[257287] "index var" 0
        unknown tmp[257358] "maybe param" "temp"
        (257370 'move' tmp[257358](257368 call chpl_compute_low_param_loop_bound 0(257290 call -(257293 call . aDims[257224] c"size") 1)))
        unknown tmp[257359] "maybe param" "temp"
        (257383 'move' tmp[257359](257381 call chpl_compute_high_param_loop_bound 0(257375 call -(257377 call . aDims[257224] c"size") 1)))
        unknown tmp[257360] "maybe param" "temp"
        (257386 'move' tmp[257360] 1)
        ParamForLoop[257388]
        { i[257287] tmp[257358] tmp[257359] tmp[257360]
          {
            if(257353 call _cond_test(257335 call !=(257343 call(257340 call .(257338 call aDims[257224] i[257287]) c"sizeAs") uint(64)[86])(257351 call(257348 call .(257346 call bDims[257250] i[257287]) c"sizeAs") uint(64)[86])))
            {
              (257301 call halt(257309 IfExpr  forSwap[257218] then
              { scopeless
                "swapping"
              } else
              { scopeless
                "assigning"
              } ) " between arrays of different shapes in dimension " i[257287] ": "(257323 call(257320 call .(257318 call aDims[257224] i[257287]) c"sizeAs") uint(64)[86]) " vs. "(257332 call(257329 call .(257327 call bDims[257250] i[257287]) c"sizeAs") uint(64)[86]))
            }
          }
        }
        label _unused_continueLabel[257362]
        label _breakLabel[257361]
      }
    }
    {
    }
  }
  function arrayOrProtoSliceAssign[257416](ref arg a[257418]:_any[141](?), arg b[257420]:_any[141](?)) : _unknown[42] "inline" "private" "find user line" "no return value for void"
  {
    if(257439 call _cond_test(257429 call !=(257432 call . a[257418] c"rank")(257436 call . b[257420] c"rank")))
    {
      (257424 call compilerError "rank mismatch in array assignment")
    }
    if(257453 call _cond_test(257446 call ==(257449 call . b[257420] c"_value") nil[32]))
    {
      (257444 return _void[46])
    }
    unknown eqVals[257459] bool[19]
    (257462 'end of statement')
    if(257511 call _cond_test(257503 call &&(257506 call isArray a[257418])(257509 call isArray b[257420])))
    {
      (257464 call = eqVals[257459](257467 call ==(257470 call . a[257418] c"_value")(257474 call . b[257420] c"_value")))
    }
    {
      if(257499 call _cond_test(257491 call &&(257494 call isProtoSlice a[257418])(257497 call isProtoSlice b[257420])))
      {
        (257478 call = eqVals[257459](257481 call == a[257418] b[257420]))
      }
      {
        (257487 call compilerError "Internal error: cross-type assignments are not supported")
      }
    }
    if(257519 call _cond_test eqVals[257459])
    {
      (257517 return _void[46])
    }
    if(257545 call _cond_test(257525 call &&(257527 call ==(257533 call(257530 call . a[257418] c"sizeAs") uint(64)[86]) 0)(257536 call ==(257542 call(257539 call . b[257420] c"sizeAs") uint(64)[86]) 0)))
    {
      (257523 return _void[46])
    }
    if(257556 call _cond_test 1)
    {
      (257551 call checkArrayShapesUponAssignment a[257418] b[257420])
    }
    (257562 call chpl__uncheckedArrayTransfer a[257418] b[257420](kind = assign[257617]))
  }
  function =[257574](ref arg a[257579] :
  (257577 call chpl__buildArrayRuntimeType nil[32]), arg b[257585] :
  (257583 call chpl__buildArrayRuntimeType nil[32])) : _unknown[42] "assignop" "inline" "operator" "find user line" "no return value for void"
  {
    (257590 call arrayOrProtoSliceAssign a[257579] b[257585])
  }
  function =[257595](ref arg a[257598] :
  chpl__protoSlice[148800](?), arg b[257602] :
  chpl__protoSlice[148800](?)) : _unknown[42] "assignop" "inline" "operator" "find user line" "no return value for void"
  {
    (257607 call arrayOrProtoSliceAssign a[257598] b[257602])
  }
  type _tElt[257619] def move[257613]:_tElt[257619] def initCopy[257615]:_tElt[257619] def assign[257617]:_tElt[257619]
  function needsInitWorkaround[257622](arg t[257624]:_any[141](?)) param : _unknown[42] "private"
  {
    (257627 return(257628 call ||(257630 call ||(395523 'is_subtype' _array[255540](?) t[257624])(395524 'is_subtype' _domain[225034](?) t[257624]))(395525 'is_subtype' _distribution[268253](?) t[257624])))
  }
  function initCopyAfterTransfer[257646](ref arg a[257651] :
  (257649 call chpl__buildArrayRuntimeType nil[32])) : _unknown[42] "private" "ignore transfer errors" "no return value for void"
  {
    if(257757 call _cond_test(257752 call needsInitWorkaround(257754 call . a[257651] c"eltType")))
    {
      Forall[257690] {
        induction variables:
          
          unknown ai[257656] "index var" "insert auto destroy"
        iterated expressions:
          (257659 call . a[257651] c"_dom")
        shadow variables:
          a[257664] 'ref' intent outer var a[257651]
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          unknown aa[257670] "ref var"(257672 call a[257664] ai[257656])
          (257675 'end of statement')
          unknown copy[257677] "no auto destroy" aa[257670](257679 call . a[257664] c"eltType")
          (257684 'end of statement')
          (257685 '=' aa[257670] copy[257677])
        }
      }
    }
    {
      if(257747 call _cond_test(257742 call isSyncType(257744 call . a[257651] c"eltType")))
      {
        Forall[257716] {
          induction variables:
            
            unknown aa[257694] "index var" "insert auto destroy"
          iterated expressions:
            a[257651]
          shadow variables:
          other variables
            forall body
          {
            unknown copy[257699] "no auto destroy"(257708 call(257705 call . aa[257694] c"readFE"))(257701 call . a[257651] c"eltType")
            (257710 'end of statement')
            (257711 '=' aa[257694] copy[257699])
          }
        }
      }
      {
        Forall[257738] {
          induction variables:
            
            unknown aa[257720] "index var" "insert auto destroy"
          iterated expressions:
            a[257651]
          shadow variables:
          other variables
            forall body
          {
            unknown copy[257725] "no auto destroy" aa[257720](257727 call . a[257651] c"eltType")
            (257732 'end of statement')
            (257733 '=' aa[257720] copy[257725])
          }
        }
      }
    }
  }
  function fixRuntimeType[257764](arg eltType[257766]:_any[141](?), ref arg elt[257768]:_any[141](?)) : _unknown[42] "private" "no return value for void"
  {
    unknown runtimeTypesDiffer[257772] 0
    (257775 'end of statement')
    if(257891 call _cond_test(257881 call ||(395526 'is_subtype' _array[255540](?) eltType[257766])(395527 'is_subtype' _domain[225034](?) eltType[257766])))
    {
      if(257816 call _cond_test(395528 'is_subtype' _array[255540](?) eltType[257766]))
      {
        const lhsDomain[257779] "const" "ref var"(257781 call chpl__domainFromArrayRuntimeType eltType[257766])
        (257784 'end of statement')
        const rhsDomain[257786] "const" "ref var"(257788 call . elt[257768] c"_dom")
        (257792 'end of statement')
        if(257808 call _cond_test(257798 call !=(257801 call . lhsDomain[257779] c"_instance")(257805 call . rhsDomain[257786] c"_instance")))
        {
          (257794 call = runtimeTypesDiffer[257772] 1)
        }
      }
      if(257859 call _cond_test(395529 'is_subtype' _domain[225034](?) eltType[257766]))
      {
        const lhsDist[257822] "const" "ref var"(257824 call chpl__distributionFromDomainRuntimeType eltType[257766])
        (257827 'end of statement')
        const rhsDist[257829] "const" "ref var"(257831 call . elt[257768] c"distribution")
        (257835 'end of statement')
        if(257851 call _cond_test(257841 call !=(257844 call . lhsDist[257822] c"_instance")(257848 call . rhsDist[257829] c"_instance")))
        {
          (257837 call = runtimeTypesDiffer[257772] 1)
        }
      }
      if(257877 call _cond_test runtimeTypesDiffer[257772])
      {
        unknown copy[257865] "no auto destroy" elt[257768] eltType[257766]
        (257869 'end of statement')
        (257871 call chpl__autoDestroy elt[257768])
        (257873 '=' elt[257768] copy[257865])
      }
    }
  }
  function fixEltRuntimeTypesAfterTransfer[257897](ref arg a[257902] :
  (257900 call chpl__buildArrayRuntimeType nil[32])) : _unknown[42] "private" "no return value for void"
  {
    if(257962 call _cond_test(257957 call needsInitWorkaround(257959 call . a[257902] c"eltType")))
    {
      Forall[257936] {
        induction variables:
          
          unknown ai[257907] "index var" "insert auto destroy"
        iterated expressions:
          (257910 call . a[257902] c"_dom")
        shadow variables:
          a[257915] 'ref' intent outer var a[257902]
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          unknown aa[257921] "ref var"(257923 call a[257915] ai[257907])
          (257926 'end of statement')
          (257928 call fixRuntimeType(257930 call . a[257915] c"eltType") aa[257921])
        }
      }
    }
    {
      Forall[257953] {
        induction variables:
          
          unknown aa[257940] "index var" "insert auto destroy"
        iterated expressions:
          a[257902]
        shadow variables:
        other variables
          forall body
        {
          (257945 call fixRuntimeType(257947 call . a[257902] c"eltType") aa[257940])
        }
      }
    }
  }
  function chpl__uncheckedArrayTransfer[257968](ref arg a[257970]:_any[141](?), arg b[257972]:_any[141](?), param arg kind[257974]:_any[141](?)) : _unknown[42] "inline" "find user line" "no return value for void"
  {
    if(258078 call _cond_test(258075 call chpl__serializeAssignment a[257970] b[257972]))
    {
      (257982 call chpl__transferArray a[257970] b[257972] kind[257974])
    }
    {
      if(258069 call _cond_test(258059 call &&(258062 call chpl__staticCheckShortArrayTransfer a[257970] b[257972])(258066 call chpl__dynamicCheckShortArrayTransfer a[257970] b[257972])))
      {
        (257988 call chpl__transferArray a[257970] b[257972] kind[257974](alwaysSerialize = 1))
      }
      {
        if(258054 call _cond_test(258050 call chpl__compatibleForBulkTransfer a[257970] b[257972] kind[257974]))
        {
          if(258010 call _cond_test(258007 call chpl__bulkTransferArray a[257970] b[257972]))
          {
            (257997 call chpl__initAfterBulkTransfer a[257970] kind[257974])
          }
          {
            (258002 call chpl__transferArray a[257970] b[257972] kind[257974])
          }
        }
        {
          if(258045 call _cond_test(258041 call chpl__compatibleForWidePtrBulkTransfer a[257970] b[257972] kind[257974]))
          {
            if(258030 call _cond_test(258027 call chpl__bulkTransferPtrArray a[257970] b[257972]))
            {
              (258017 call chpl__initAfterBulkTransfer a[257970] kind[257974])
            }
            {
              (258022 call chpl__transferArray a[257970] b[257972] kind[257974])
            }
          }
          {
            (258036 call chpl__transferArray a[257970] b[257972] kind[257974])
          }
        }
      }
    }
    (396910 'used modules list'(257978 'use' ChapelShortArrayTransfer[247436]))
  }
  function chpl__initAfterBulkTransfer[258085](ref arg a[258087]:_any[141](?), param arg kind[258089]:_any[141](?)) : _unknown[42] "inline" "no return value for void"
  {
    if(258146 call _cond_test(258129 call &&(258131 call == kind[258089] initCopy[257615])(258138 call !(258141 call isPODType(258143 call . a[258087] c"eltType")))))
    {
      (258094 call initCopyAfterTransfer a[258087])
    }
    {
      if(258125 call _cond_test(258100 call &&(258102 call == kind[258089] move[257613])(258109 call ||(395530 'is_subtype' _array[255540](?)(258114 call . a[258087] c"eltType"))(395531 'is_subtype' _domain[225034](?)(258121 call . a[258087] c"eltType")))))
      {
        (258098 call fixEltRuntimeTypesAfterTransfer a[258087])
      }
    }
  }
  function chpl__compatibleForWidePtrBulkTransfer[258153](arg a[258155]:_any[141](?), arg b[258157]:_any[141](?), param arg kind[258163] =
  assign[257617]) param : _unknown[42]
  {
    if(258173 call _cond_test(258170 call ! useBulkPtrTransfer[247511]))
    {
      (258167 return 0)
    }
    if(258201 call _cond_test(258181 call !(258183 call &&(258192 call(258189 call .(258186 call . a[258155] c"_value") c"isDefaultRectangular"))(258200 call(258197 call .(258194 call . b[258157] c"_value") c"isDefaultRectangular")))))
    {
      (258178 return 0)
    }
    if(258219 call _cond_test(258209 call !=(258212 call . a[258155] c"eltType")(258216 call . b[258157] c"eltType")))
    {
      (258206 return 0)
    }
    if(258235 call _cond_test(258227 call !(258230 call isClass(258232 call . a[258155] c"eltType"))))
    {
      (258224 return 0)
    }
    if(258249 call _cond_test(258244 call isOwnedClass(258246 call . a[258155] c"eltType")))
    {
      (258240 return 0)
    }
    if(258263 call _cond_test(258258 call isSharedClass(258260 call . a[258155] c"eltType")))
    {
      (258254 return 0)
    }
    (258268 return 1)
  }
  function chpl__bulkTransferPtrArray[258272](ref arg a[258277] :
  (258275 call chpl__buildArrayRuntimeType nil[32]), arg b[258283] :
  (258281 call chpl__buildArrayRuntimeType nil[32])) : _unknown[42] "inline"
  {
    const aDom[258288] "const"(258290 call . a[258277] c"_dom")
    (258294 'end of statement')
    const bDom[258296] "const"(258298 call . b[258283] c"_dom")
    (258302 'end of statement')
    if(258310 call _cond_test(258306 call != aDom[258288] bDom[258296]))
    {
      (258303 return 0)
    }
    if(258330 call _cond_test(258323 'is wide pointer'(258325 call a[258277](258327 call . aDom[258288] c"low"))))
    {
      (258316 return(258318 call chpl__bulkTransferArray a[258277] aDom[258288] b[258283] bDom[258296]))
    }
    (258334 return 0)
  }
  function chpl__bulkTransferArray[258338](ref arg a[258344] :
  (258342 call chpl__buildArrayRuntimeType unknown AD[258340]), arg b[258351] :
  (258349 call chpl__buildArrayRuntimeType unknown BD[258347])) : _unknown[42] "inline"
  {
    (258355 return(258357 call chpl__bulkTransferArray a[258344] AD[258340] b[258351] BD[258347]))
  }
  function chpl__bulkTransferArray[258364](ref arg a[258367] :
  chpl__protoSlice[148800](?), arg b[258371] :
  chpl__protoSlice[148800](?)) : _unknown[42] "inline"
  {
    if(258382 call _cond_test debugBulkTransfer[247496])
    {
      (258377 call chpl_debug_writeln "Performing protoSlice bulk transfer")
    }
    (258386 return(258388 call chpl__bulkTransferArray(258396 call(258393 call .(258390 call . a[258367] c"ptrToArr") c"deref"))(258400 call . a[258367] c"domOrRange")(258410 call(258407 call .(258404 call . b[258371] c"ptrToArr") c"deref"))(258412 call . b[258371] c"domOrRange")))
  }
  function chpl__bulkTransferArray[258417](ref arg a[258422] :
  (258420 call chpl__buildArrayRuntimeType nil[32]), arg AD[258425]:_any[141](?), const  ref arg b[258430] :
  (258428 call chpl__buildArrayRuntimeType nil[32]), arg BD[258433]:_any[141](?)) : _unknown[42] "inline"
  {
    (258436 return(258438 call chpl__bulkTransferArray(258440 call . a[258422] c"_value") AD[258425](258445 call . b[258430] c"_value") BD[258433]))
  }
  function chpl__bulkTransferArray[258451](arg destClass[258453]:_any[141](?), arg destView[258455]:_any[141](?), arg srcClass[258457]:_any[141](?), arg srcView[258459]:_any[141](?)) : _unknown[42] "inline"
  {
    unknown success[258463] 0
    (258466 'end of statement')
    function bulkTransferDebug[258467](arg msg[258470] :
    string[244]) : _unknown[42] "inline" "no return value for void"
    {
      if(258482 call _cond_test debugBulkTransfer[247496])
      {
        (258475 call chpl_debug_writeln "operator =(a:[],b:[]): " msg[258470])
      }
    }
    (258490 call bulkTransferDebug "in chpl__bulkTransferArray")
    if(258632 call _cond_test(258624 call canResolveMethod module=[222] Reflection[1804] destClass[258453] "doiBulkTransferFromKnown" destView[258455] srcClass[258457] srcView[258459]))
    {
      (258496 call bulkTransferDebug "attempting doiBulkTransferFromKnown")
      (258500 call = success[258463](258509 call(258506 call . destClass[258453] c"doiBulkTransferFromKnown") destView[258455] srcClass[258457] srcView[258459]))
    }
    {
      if(258615 call _cond_test(258607 call canResolveMethod module=[222] Reflection[1804] srcClass[258457] "doiBulkTransferToKnown" srcView[258459] destClass[258453] destView[258455]))
      {
        (258515 call bulkTransferDebug "attempting doiBulkTransferToKnown")
        (258519 call = success[258463](258528 call(258525 call . srcClass[258457] c"doiBulkTransferToKnown") srcView[258459] destClass[258453] destView[258455]))
      }
      {
        if(258598 call _cond_test(258590 call canResolveMethod module=[222] Reflection[1804] destClass[258453] "doiBulkTransferFromAny" destView[258455] srcClass[258457] srcView[258459]))
        {
          (258534 call bulkTransferDebug "attempting doiBulkTransferFromAny")
          (258538 call = success[258463](258547 call(258544 call . destClass[258453] c"doiBulkTransferFromAny") destView[258455] srcClass[258457] srcView[258459]))
        }
        {
          if(258582 call _cond_test(258574 call canResolveMethod module=[222] Reflection[1804] srcClass[258457] "doiBulkTransferToAny" srcView[258459] destClass[258453] destView[258455]))
          {
            (258553 call bulkTransferDebug "attempting doiBulkTransferToAny")
            (258557 call = success[258463](258566 call(258563 call . srcClass[258457] c"doiBulkTransferToAny") srcView[258459] destClass[258453] destView[258455]))
          }
          (408144 'referenced modules list' Reflection[1804])
        }
        (408150 'referenced modules list' Reflection[1804])
      }
      (408156 'referenced modules list' Reflection[1804])
    }
    if(258650 call _cond_test success[258463])
    {
      (258638 call bulkTransferDebug "successfully completed bulk transfer")
    }
    {
      (258644 call bulkTransferDebug "bulk transfer did not happen")
    }
    (258656 return success[258463])
    (408162 'referenced modules list' Reflection[1804])
  }
  function chpl__transferArray[258660](ref arg a[258662]:_any[141](?), const  ref arg b[258664]:_any[141](?), param arg kind[258670] =
  assign[257617], param arg alwaysSerialize[258674] =
  0) : _unknown[42] "inline" "ignore transfer errors" "find user line" "no return value for void"
  {
    if(259557 call _cond_test(259535 call ||(259537 call ==(259540 call . a[258662] c"eltType")(259544 'typeof' b[258664]))(259545 call &&(259548 call _isPrimitiveType(259550 call . a[258662] c"eltType"))(259554 call _isPrimitiveType(259556 'typeof' b[258664])))))
    {
      if(258809 call _cond_test(258793 call ||(258795 call == kind[258670] move[257613])(258802 call == kind[258670] initCopy[257615])))
      {
        if(258758 call _cond_test(258753 call needsInitWorkaround(258755 call . a[258662] c"eltType")))
        {
          Forall[258721] {
            induction variables:
              
              unknown ai[258687] "index var" "insert auto destroy"
            iterated expressions:
              (258690 call . a[258662] c"_dom")
            shadow variables:
              b[258695] 'in' intent outer var b[258664]
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              unknown aa[258701] "ref var"(258703 call a[258662] ai[258687])
              (258706 'end of statement')
              unknown copy[258708] "no auto destroy" b[258695](258710 call . a[258662] c"eltType")
              (258715 'end of statement')
              (258716 '=' aa[258701] copy[258708])
            }
          }
        }
        {
          Forall[258749] {
            induction variables:
              
              unknown aa[258725] "index var" "insert auto destroy"
            iterated expressions:
              a[258662]
            shadow variables:
              b[258730] 'in' intent outer var b[258664]
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              unknown copy[258736] "no auto destroy" b[258730](258738 call . a[258662] c"eltType")
              (258743 'end of statement')
              (258744 '=' aa[258725] copy[258736])
            }
          }
        }
      }
      {
        if(258789 call _cond_test(258782 call == kind[258670] assign[257617]))
        {
          Forall[258779] {
            induction variables:
              
              unknown aa[258763] "index var" "insert auto destroy"
            iterated expressions:
              a[258662]
            shadow variables:
              b[258768] 'in' intent outer var b[258664]
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              (258773 call = aa[258763] b[258768])
            }
          }
        }
      }
    }
    {
      if(259531 call _cond_test(259524 call || alwaysSerialize[258674](259528 call chpl__serializeAssignment a[258662] b[258664])))
      {
        if(259258 call _cond_test(259251 call == kind[258670] move[257613]))
        {
          if(258983 call _cond_test(258978 call needsInitWorkaround(258980 call . a[258662] c"eltType")))
          {
            {
              unknown _indexOfInterest[258850] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[258851] "expr temp" "temp"
              (258868 'move' _iterator[258851](258830 call _build_tuple(258863 call _getIterator(258860 call . a[258662] c"_dom"))(258866 call _getIterator b[258664])))
              Defer
              {
                {
                  (258896 call _freeIterator _iterator[258851])
                }
              }
              { scopeless type
                (258873 'move' _indexOfInterest[258850](258870 call iteratorIndex _iterator[258851]))
              }
              ForLoop[258852]
              {
                (258878 call _check_tuple_var_decl _indexOfInterest[258850] 2)
                unknown ai[258818] "index var" "insert auto destroy"
                (258885 'move' ai[258818](258882 call _indexOfInterest[258850] 0))
                unknown bb[258820] "index var" "insert auto destroy"
                (258891 'move' bb[258820](258888 call _indexOfInterest[258850] 1))
                {
                  unknown aa[258833] "ref var"(258835 call a[258662] ai[258818])
                  (258838 'end of statement')
                  (258839 '=' aa[258833](258841 'steal' bb[258820]))
                  (258844 call fixRuntimeType(258846 call . a[258662] c"eltType") aa[258833])
                }
                label _continueLabel[258855]
                _indexOfInterest[258850]
                _iterator[258851]
              }
              label _breakLabel[258856]
            }
          }
          {
            {
              unknown _indexOfInterest[258927] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[258928] "expr temp" "temp"
              (258942 'move' _iterator[258928](258914 call _build_tuple(258937 call _getIterator a[258662])(258940 call _getIterator b[258664])))
              Defer
              {
                {
                  (258970 call _freeIterator _iterator[258928])
                }
              }
              { scopeless type
                (258947 'move' _indexOfInterest[258927](258944 call iteratorIndex _iterator[258928]))
              }
              ForLoop[258929]
              {
                (258952 call _check_tuple_var_decl _indexOfInterest[258927] 2)
                unknown aa[258905] "index var" "insert auto destroy"
                (258959 'move' aa[258905](258956 call _indexOfInterest[258927] 0))
                unknown bb[258907] "index var" "insert auto destroy"
                (258965 'move' bb[258907](258962 call _indexOfInterest[258927] 1))
                {
                  (258916 '=' aa[258905](258918 'steal' bb[258907]))
                  (258921 call fixRuntimeType(258923 call . a[258662] c"eltType") aa[258905])
                }
                label _continueLabel[258932]
                _indexOfInterest[258927]
                _iterator[258928]
              }
              label _breakLabel[258933]
            }
          }
        }
        {
          if(259246 call _cond_test(259239 call == kind[258670] initCopy[257615]))
          {
            if(259157 call _cond_test(259152 call needsInitWorkaround(259154 call . a[258662] c"eltType")))
            {
              {
                unknown _indexOfInterest[259023] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[259024] "expr temp" "temp"
                (259041 'move' _iterator[259024](259002 call _build_tuple(259036 call _getIterator(259033 call . a[258662] c"_dom"))(259039 call _getIterator b[258664])))
                Defer
                {
                  {
                    (259069 call _freeIterator _iterator[259024])
                  }
                }
                { scopeless type
                  (259046 'move' _indexOfInterest[259023](259043 call iteratorIndex _iterator[259024]))
                }
                ForLoop[259025]
                {
                  (259051 call _check_tuple_var_decl _indexOfInterest[259023] 2)
                  unknown ai[258990] "index var" "insert auto destroy"
                  (259058 'move' ai[258990](259055 call _indexOfInterest[259023] 0))
                  unknown bb[258992] "index var" "insert auto destroy"
                  (259064 'move' bb[258992](259061 call _indexOfInterest[259023] 1))
                  {
                    unknown aa[259005] "ref var"(259007 call a[258662] ai[258990])
                    (259010 'end of statement')
                    unknown copy[259012] "no auto destroy" b[258664](259014 call . a[258662] c"eltType")
                    (259019 'end of statement')
                    (259020 '=' aa[259005] copy[259012])
                  }
                  label _continueLabel[259028]
                  _indexOfInterest[259023]
                  _iterator[259024]
                }
                label _breakLabel[259029]
              }
            }
            {
              {
                unknown _indexOfInterest[259101] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[259102] "expr temp" "temp"
                (259116 'move' _iterator[259102](259087 call _build_tuple(259111 call _getIterator a[258662])(259114 call _getIterator b[258664])))
                Defer
                {
                  {
                    (259144 call _freeIterator _iterator[259102])
                  }
                }
                { scopeless type
                  (259121 'move' _indexOfInterest[259101](259118 call iteratorIndex _iterator[259102]))
                }
                ForLoop[259103]
                {
                  (259126 call _check_tuple_var_decl _indexOfInterest[259101] 2)
                  unknown aa[259078] "index var" "insert auto destroy"
                  (259133 'move' aa[259078](259130 call _indexOfInterest[259101] 0))
                  unknown bb[259080] "index var" "insert auto destroy"
                  (259139 'move' bb[259080](259136 call _indexOfInterest[259101] 1))
                  {
                    unknown copy[259090] "no auto destroy" b[258664](259092 call . a[258662] c"eltType")
                    (259097 'end of statement')
                    (259098 '=' aa[259078] copy[259090])
                  }
                  label _continueLabel[259106]
                  _indexOfInterest[259101]
                  _iterator[259102]
                }
                label _breakLabel[259107]
              }
            }
          }
          {
            if(259235 call _cond_test(259228 call == kind[258670] assign[257617]))
            {
              {
                unknown _indexOfInterest[259178] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[259179] "expr temp" "temp"
                (259193 'move' _iterator[259179](259172 call _build_tuple(259188 call _getIterator a[258662])(259191 call _getIterator b[258664])))
                Defer
                {
                  {
                    (259221 call _freeIterator _iterator[259179])
                  }
                }
                { scopeless type
                  (259198 'move' _indexOfInterest[259178](259195 call iteratorIndex _iterator[259179]))
                }
                ForLoop[259180]
                {
                  (259203 call _check_tuple_var_decl _indexOfInterest[259178] 2)
                  unknown aa[259163] "index var" "insert auto destroy"
                  (259210 'move' aa[259163](259207 call _indexOfInterest[259178] 0))
                  unknown bb[259165] "index var" "insert auto destroy"
                  (259216 'move' bb[259165](259213 call _indexOfInterest[259178] 1))
                  {
                    (259174 call = aa[259163] bb[259165])
                  }
                  label _continueLabel[259183]
                  _indexOfInterest[259178]
                  _iterator[259179]
                }
                label _breakLabel[259184]
              }
            }
          }
        }
      }
      {
        if(259519 call _cond_test(259512 call == kind[258670] move[257613]))
        {
          if(259347 call _cond_test(259342 call needsInitWorkaround(259344 call . a[258662] c"eltType")))
          {
            Forall[259307] {
              induction variables:
                
                unknown ai[259267] "index var" "insert auto destroy"
                
                unknown bb[259269] "index var" "insert auto destroy"
              iterated expressions:
                (259275 call . a[258662] c"_dom")
                b[258664]
              shadow variables:
                a[259301] 'ref' intent outer var a[258662]
                  init block
                  {
                  }
                  deinit block
                  {
                  }
              other variables
                forall body
              {
                unknown aa[259282] "ref var"(259284 call a[259301] ai[259267])
                (259287 'end of statement')
                (259288 '=' aa[259282](259290 'steal' bb[259269]))
                (259293 call fixRuntimeType(259295 call . a[259301] c"eltType") aa[259282])
              }
            }
          }
          {
            Forall[259337] {
              induction variables:
                
                unknown aa[259313] "index var" "insert auto destroy"
                
                unknown bb[259315] "index var" "insert auto destroy"
              iterated expressions:
                a[258662]
                b[258664]
              shadow variables:
              other variables
                forall body
              {
                (259324 '=' aa[259313](259326 'steal' bb[259315]))
                (259329 call fixRuntimeType(259331 call . a[258662] c"eltType") aa[259313])
              }
            }
          }
        }
        {
          if(259507 call _cond_test(259500 call == kind[258670] initCopy[257615]))
          {
            if(259462 call _cond_test(259457 call needsInitWorkaround(259459 call . a[258662] c"eltType")))
            {
              Forall[259395] {
                induction variables:
                  
                  unknown ai[259354] "index var" "insert auto destroy"
                  
                  unknown bb[259356] "index var" "insert auto destroy"
                iterated expressions:
                  (259362 call . a[258662] c"_dom")
                  b[258664]
                shadow variables:
                  a[259389] 'ref' intent outer var a[258662]
                    init block
                    {
                    }
                    deinit block
                    {
                    }
                other variables
                  forall body
                {
                  unknown aa[259369] "ref var"(259371 call a[259389] ai[259354])
                  (259374 'end of statement')
                  unknown copy[259376] "no auto destroy" bb[259356](259378 call . a[259389] c"eltType")
                  (259383 'end of statement')
                  (259384 '=' aa[259369] copy[259376])
                }
              }
            }
            {
              Forall[259452] {
                induction variables:
                  
                  unknown aa[259401] "index var" "insert auto destroy"
                  
                  unknown bb[259403] "index var" "insert auto destroy"
                iterated expressions:
                  a[258662]
                  b[258664]
                shadow variables:
                other variables
                  forall body
                {
                  if(259446 call _cond_test(259443 call isSyncType(259445 'typeof' bb[259403])))
                  {
                    unknown copy[259414] "no auto destroy"(259423 call(259420 call . bb[259403] c"readFE"))(259416 call . a[258662] c"eltType")
                    (259425 'end of statement')
                    (259426 '=' aa[259401] copy[259414])
                  }
                  {
                    unknown copy[259431] "no auto destroy" bb[259403](259433 call . a[258662] c"eltType")
                    (259438 'end of statement')
                    (259439 '=' aa[259401] copy[259431])
                  }
                }
              }
            }
          }
          {
            if(259496 call _cond_test(259489 call == kind[258670] assign[257617]))
            {
              Forall[259485] {
                induction variables:
                  
                  unknown aa[259468] "index var" "insert auto destroy"
                  
                  unknown bb[259470] "index var" "insert auto destroy"
                iterated expressions:
                  a[258662]
                  b[258664]
                shadow variables:
                other variables
                  forall body
                {
                  (259479 call = aa[259468] bb[259470])
                }
              }
            }
          }
        }
      }
    }
  }
  {
    (258681 call <=(258678 'lifetime_of' a[258662])(258680 'lifetime_of' b[258664]))
  }
  function chpl__transferArray[259565](ref arg a[259570] :
  (259568 call chpl__buildArrayRuntimeType nil[32]), param arg b[259573]:_any[141](?), param arg kind[259579] =
  assign[257617]) : _unknown[42] "inline" "find user line" "no return value for void"
  {
    Forall[259593] {
      induction variables:
        
        unknown aa[259583] "index var" "insert auto destroy"
      iterated expressions:
        a[259570]
      shadow variables:
      other variables
        forall body
      {
        (259586 call = aa[259583] b[259573])
      }
    }
  }
  function =[259598](ref arg a[259603] :
  (259601 call chpl__buildArrayRuntimeType nil[32]), arg b[259607] :
  _domain[225034](?)) : _unknown[42] "assignop" "inline" "operator" "no return value for void"
  {
    if(259625 call _cond_test(259615 call !=(259618 call . a[259603] c"rank")(259622 call . b[259607] c"rank")))
    {
      (259612 call compilerError "rank mismatch in array assignment")
    }
    if(259648 call _cond_test(259636 call &&(259642 call(259639 call . b[259607] c"isAssociative"))(259647 call(259644 call . a[259603] c"isRectangular"))))
    {
      (259631 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    (259654 call chpl__transferArray a[259603] b[259607])
  }
  function =[259659](ref arg a[259664] :
  (259662 call chpl__buildArrayRuntimeType nil[32]), arg b[259670] :
  (259668 call range[240](?) ?[227])) : _unknown[42] "assignop" "inline" "operator" "no return value for void"
  {
    if(259692 call _cond_test(259685 call ==(259688 call . a[259664] c"rank") 1))
    {
      (259675 call chpl__transferArray a[259664] b[259670])
    }
    {
      (259680 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
  }
  function =[259700](ref arg a[259705] :
  (259703 call chpl__buildArrayRuntimeType nil[32]), arg b[259709] :
  _iteratorRecord[165](?)) : _unknown[42] "assignop" "inline" "operator" "no return value for void"
  {
    (259714 call chpl__transferArray a[259705] b[259709])
  }
  function =[259719](ref arg a[259724] :
  (259722 call chpl__buildArrayRuntimeType nil[32]), arg b[259729] :
  unknown t[259727]) : _unknown[42] "assignop" "inline" "last resort" "operator" "no return value for void"
  {
    (259750 call chpl__transferArray a[259724] b[259729])
  }
  where {
    (259732 call !(259734 call ||(259737 call isTupleType t[259727])(395532 'is_coercible'(259743 call _desync(259745 call . a[259724] c"eltType")) t[259727])))
  }
  function helpInitArrFromTuple[259756](ref arg j[259758]:_any[141](?), param arg rank[259761] :
  int(64)[10], ref arg a[259767] :
  (259765 call chpl__buildArrayRuntimeType nil[32]), arg b[259771] :
  _tuple[246](?), param arg kind[259775] :
  _tElt[257619]) : _unknown[42] "private" "no return value for void"
  {
    unknown idxType[259799] "type variable"(259804 call .(259801 call . a[259767] c"_dom") c"idxType")
    unknown strType[259787] "type variable"(259789 call chpl__signedType(259794 call .(259791 call . a[259767] c"_dom") c"chpl_integralIdxType"))
    (259808 'end of statement')
    const stride[259832] "const"(259848 call .(259840 call(259837 call .(259834 call . a[259767] c"_dom") c"dim")(259841 call -(259844 call . a[259767] c"rank") rank[259761])) c"stride")
    const start[259811] "const"(259827 call .(259819 call(259816 call .(259813 call . a[259767] c"_dom") c"dim")(259820 call -(259823 call . a[259767] c"rank") rank[259761])) c"firstAsInt")
    (259852 'end of statement')
    if(260126 call _cond_test(260122 call == rank[259761] 1))
    {
      {
        unknown i[259854] "index var" 0
        unknown tmp[259994] "maybe param" "temp"
        (260006 'move' tmp[259994](260004 call chpl_compute_low_param_loop_bound 0(259857 call -(259860 call . b[259771] c"size") 1)))
        unknown tmp[259995] "maybe param" "temp"
        (260019 'move' tmp[259995](260017 call chpl_compute_high_param_loop_bound 0(260011 call -(260013 call . b[259771] c"size") 1)))
        unknown tmp[259996] "maybe param" "temp"
        (260022 'move' tmp[259996] 1)
        ParamForLoop[260024]
        { i[259854] tmp[259994] tmp[259995] tmp[259996]
          {
            (259867 call =(259870 call j[259758](259871 call -(259874 call . a[259767] c"rank") rank[259761]))(259879 call chpl__intToIdx idxType[259799](259881 call +(259883 call : start[259811] strType[259787])(259887 call * i[259854] stride[259832]))))
            unknown dst[259892] "ref var"(259894 call a[259767] j[259758])
            (259897 'end of statement')
            const src[259899] "const" "ref var"(259901 call b[259771] i[259854])
            (259904 'end of statement')
            if(259989 call _cond_test(259982 call == kind[259775] move[257613]))
            {
              if(259937 call _cond_test(259935 call isArray dst[259892]))
              {
                unknown newArr[259908] "no auto destroy" "no copy"(259910 call chpl__coerceMove(259912 call . a[259767] c"eltType") src[259899](definedConst = 0))
                (259919 'end of statement')
                (259920 '=' dst[259892] newArr[259908])
              }
              {
                (259924 '=' dst[259892] src[259899])
                (259928 call fixRuntimeType(259930 call . a[259767] c"eltType") dst[259892])
              }
            }
            {
              if(259977 call _cond_test(259970 call == kind[259775] initCopy[257615]))
              {
                unknown copy[259943] "no auto destroy" src[259899](259945 call . a[259767] c"eltType")
                (259950 'end of statement')
                (259951 '=' dst[259892] copy[259943])
              }
              {
                if(259966 call _cond_test(259959 call == kind[259775] assign[257617]))
                {
                  (259955 call = dst[259892] src[259899])
                }
              }
            }
          }
        }
        label _unused_continueLabel[259998]
        label _breakLabel[259997]
      }
    }
    {
      {
        unknown i[260034] "index var" 0
        unknown tmp[260083] "maybe param" "temp"
        (260095 'move' tmp[260083](260093 call chpl_compute_low_param_loop_bound 0(260037 call -(260040 call . b[259771] c"size") 1)))
        unknown tmp[260084] "maybe param" "temp"
        (260108 'move' tmp[260084](260106 call chpl_compute_high_param_loop_bound 0(260100 call -(260102 call . b[259771] c"size") 1)))
        unknown tmp[260085] "maybe param" "temp"
        (260111 'move' tmp[260085] 1)
        ParamForLoop[260113]
        { i[260034] tmp[260083] tmp[260084] tmp[260085]
          {
            (260047 call =(260050 call j[259758](260051 call -(260054 call . a[259767] c"rank") rank[259761]))(260059 call chpl__intToIdx idxType[259799](260061 call +(260063 call : start[259811] strType[259787])(260067 call * i[260034] stride[259832]))))
            (260072 call helpInitArrFromTuple j[259758](260074 call - rank[259761] 1) a[259767](260080 call b[259771] i[260034]) kind[259775])
          }
        }
        label _unused_continueLabel[260087]
        label _breakLabel[260086]
      }
    }
  }
  {
    (259782 call <(259779 'lifetime_of' a[259767])(259781 'lifetime_of' b[259771]))
  }
  function initArrFromTuple[260133](ref arg a[260138] :
  (260136 call chpl__buildArrayRuntimeType nil[32]), arg b[260142] :
  _tuple[246](?), param arg kind[260146] :
  _tElt[257619]) : _unknown[42] "private" "no return value for void"
  {
    unknown j[260151](260152 call *(260155 call . a[260138] c"rank")(260162 call .(260159 call . a[260138] c"_dom") c"idxType"))
    (260166 'end of statement')
    (260168 call helpInitArrFromTuple j[260151](260171 call . a[260138] c"rank") a[260138] b[260142] kind[260146])
  }
  function =[260179](ref arg a[260184] :
  (260182 call chpl__buildArrayRuntimeType nil[32]), arg b[260188] :
  _tuple[246](?)) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    (260198 call initArrFromTuple a[260184] b[260188] assign[257617])
  }
  where {
    (260195 call(260192 call . a[260184] c"isRectangular"))
  }
  function _desync[260208](arg t[260211] :
  _syncvar[132579](?)) type : _unknown[42]
  {
    unknown x[260216] t[260211]
    (260219 'end of statement')
    (260220 return(260222 call . x[260216] c"valType"))
  }
  function _desync[260227](arg t[260229]:_any[141](?)) type : _unknown[42]
  {
    unknown x[260236] t[260229]
    (260239 'end of statement')
    (260240 return(260246 'typeof'(260245 call(260242 call . x[260236] c"read"))))
  }
  where {
    (260232 call isAtomicType t[260229])
  }
  function _desync[260250](arg t[260253] :
  _array[255540](?)) type : _unknown[42]
  {
    unknown eltType[260258] "type variable"(260260 call chpl__eltTypeFromArrayRuntimeType t[260253])
    const dom[260264] "const" "ref var"(260266 call chpl__domainFromArrayRuntimeType t[260253])
    (260269 'end of statement')
    (260270 return(260275 [  dom[260264] ]
    {
      (260273 call _desync eltType[260258])
    } ))
  }
  function _desync[260279](arg t[260281]:_any[141](?)) type : _unknown[42]
  {
    (260284 return t[260281])
  }
  function desyncEltType[260288](arg t[260291] :
  _array[255540](?)) type : _unknown[42] "private"
  {
    unknown eltType[260296] "type variable"(260298 call chpl__eltTypeFromArrayRuntimeType t[260291])
    (260301 return(260303 call _desync eltType[260296]))
  }
  function =[260307](ref arg a[260312] :
  (260310 call chpl__buildArrayRuntimeType nil[32]), arg b[260321] :
  (260316 call _desync(260318 call . a[260312] c"eltType"))) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    Forall[260335] {
      induction variables:
        
        unknown e[260325] "index var" "insert auto destroy"
      iterated expressions:
        a[260312]
      shadow variables:
      other variables
        forall body
      {
        (260328 call = e[260325] b[260321])
      }
    }
  }
  function =[260340](ref arg a[260345] :
  (260343 call chpl__buildArrayRuntimeType nil[32]), arg b[260354] :
  (260349 call _desync(260351 call . a[260345] c"eltType"))) : _unknown[42] "assignop" "deprecated" "operator" "no return value for void"
  {
    Forall[260374] {
      induction variables:
        
        unknown e[260364] "index var" "insert auto destroy"
      iterated expressions:
        a[260345]
      shadow variables:
      other variables
        forall body
      {
        (260367 call = e[260364] b[260354])
      }
    }
  }
  where {
    (260358 call isSyncType(260360 call . a[260345] c"eltType"))
  }
  function +=[260380](ref arg a[260385] :
  (260383 call chpl__buildArrayRuntimeType nil[32]), arg b[260394] :
  (260389 call _desync(260391 call . a[260385] c"eltType"))) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    Forall[260408] {
      induction variables:
        
        unknown e[260398] "index var" "insert auto destroy"
      iterated expressions:
        a[260385]
      shadow variables:
      other variables
        forall body
      {
        (260401 call += e[260398] b[260394])
      }
    }
  }
  function +=[260413](ref arg a[260418] :
  (260416 call chpl__buildArrayRuntimeType nil[32]), arg b[260427] :
  (260422 call _desync(260424 call . a[260418] c"eltType"))) : _unknown[42] "assignop" "deprecated" "operator" "no return value for void"
  {
    Forall[260447] {
      induction variables:
        
        unknown e[260437] "index var" "insert auto destroy"
      iterated expressions:
        a[260418]
      shadow variables:
      other variables
        forall body
      {
        (260440 call += e[260437] b[260427])
      }
    }
  }
  where {
    (260431 call isSyncType(260433 call . a[260418] c"eltType"))
  }
  function -=[260453](ref arg a[260458] :
  (260456 call chpl__buildArrayRuntimeType nil[32]), arg b[260467] :
  (260462 call _desync(260464 call . a[260458] c"eltType"))) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    Forall[260481] {
      induction variables:
        
        unknown e[260471] "index var" "insert auto destroy"
      iterated expressions:
        a[260458]
      shadow variables:
      other variables
        forall body
      {
        (260474 call -= e[260471] b[260467])
      }
    }
  }
  function -=[260486](ref arg a[260491] :
  (260489 call chpl__buildArrayRuntimeType nil[32]), arg b[260500] :
  (260495 call _desync(260497 call . a[260491] c"eltType"))) : _unknown[42] "assignop" "deprecated" "operator" "no return value for void"
  {
    Forall[260520] {
      induction variables:
        
        unknown e[260510] "index var" "insert auto destroy"
      iterated expressions:
        a[260491]
      shadow variables:
      other variables
        forall body
      {
        (260513 call -= e[260510] b[260500])
      }
    }
  }
  where {
    (260504 call isSyncType(260506 call . a[260491] c"eltType"))
  }
  function *=[260526](ref arg a[260531] :
  (260529 call chpl__buildArrayRuntimeType nil[32]), arg b[260540] :
  (260535 call _desync(260537 call . a[260531] c"eltType"))) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    Forall[260554] {
      induction variables:
        
        unknown e[260544] "index var" "insert auto destroy"
      iterated expressions:
        a[260531]
      shadow variables:
      other variables
        forall body
      {
        (260547 call *= e[260544] b[260540])
      }
    }
  }
  function *=[260559](ref arg a[260564] :
  (260562 call chpl__buildArrayRuntimeType nil[32]), arg b[260573] :
  (260568 call _desync(260570 call . a[260564] c"eltType"))) : _unknown[42] "assignop" "deprecated" "operator" "no return value for void"
  {
    Forall[260593] {
      induction variables:
        
        unknown e[260583] "index var" "insert auto destroy"
      iterated expressions:
        a[260564]
      shadow variables:
      other variables
        forall body
      {
        (260586 call *= e[260583] b[260573])
      }
    }
  }
  where {
    (260577 call isSyncType(260579 call . a[260564] c"eltType"))
  }
  function /=[260599](ref arg a[260604] :
  (260602 call chpl__buildArrayRuntimeType nil[32]), arg b[260613] :
  (260608 call _desync(260610 call . a[260604] c"eltType"))) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    Forall[260627] {
      induction variables:
        
        unknown e[260617] "index var" "insert auto destroy"
      iterated expressions:
        a[260604]
      shadow variables:
      other variables
        forall body
      {
        (260620 call /= e[260617] b[260613])
      }
    }
  }
  function /=[260632](ref arg a[260637] :
  (260635 call chpl__buildArrayRuntimeType nil[32]), arg b[260646] :
  (260641 call _desync(260643 call . a[260637] c"eltType"))) : _unknown[42] "assignop" "deprecated" "operator" "no return value for void"
  {
    Forall[260666] {
      induction variables:
        
        unknown e[260656] "index var" "insert auto destroy"
      iterated expressions:
        a[260637]
      shadow variables:
      other variables
        forall body
      {
        (260659 call /= e[260656] b[260646])
      }
    }
  }
  where {
    (260650 call isSyncType(260652 call . a[260637] c"eltType"))
  }
  function %=[260672](ref arg a[260677] :
  (260675 call chpl__buildArrayRuntimeType nil[32]), arg b[260686] :
  (260681 call _desync(260683 call . a[260677] c"eltType"))) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    Forall[260700] {
      induction variables:
        
        unknown e[260690] "index var" "insert auto destroy"
      iterated expressions:
        a[260677]
      shadow variables:
      other variables
        forall body
      {
        (260693 call %= e[260690] b[260686])
      }
    }
  }
  function %=[260705](ref arg a[260710] :
  (260708 call chpl__buildArrayRuntimeType nil[32]), arg b[260719] :
  (260714 call _desync(260716 call . a[260710] c"eltType"))) : _unknown[42] "assignop" "deprecated" "operator" "no return value for void"
  {
    Forall[260739] {
      induction variables:
        
        unknown e[260729] "index var" "insert auto destroy"
      iterated expressions:
        a[260710]
      shadow variables:
      other variables
        forall body
      {
        (260732 call %= e[260729] b[260719])
      }
    }
  }
  where {
    (260723 call isSyncType(260725 call . a[260710] c"eltType"))
  }
  function **=[260745](ref arg a[260750] :
  (260748 call chpl__buildArrayRuntimeType nil[32]), arg b[260759] :
  (260754 call _desync(260756 call . a[260750] c"eltType"))) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    Forall[260773] {
      induction variables:
        
        unknown e[260763] "index var" "insert auto destroy"
      iterated expressions:
        a[260750]
      shadow variables:
      other variables
        forall body
      {
        (260766 call **= e[260763] b[260759])
      }
    }
  }
  function **=[260778](ref arg a[260783] :
  (260781 call chpl__buildArrayRuntimeType nil[32]), arg b[260792] :
  (260787 call _desync(260789 call . a[260783] c"eltType"))) : _unknown[42] "assignop" "deprecated" "operator" "no return value for void"
  {
    Forall[260812] {
      induction variables:
        
        unknown e[260802] "index var" "insert auto destroy"
      iterated expressions:
        a[260783]
      shadow variables:
      other variables
        forall body
      {
        (260805 call **= e[260802] b[260792])
      }
    }
  }
  where {
    (260796 call isSyncType(260798 call . a[260783] c"eltType"))
  }
  function &=[260818](ref arg a[260823] :
  (260821 call chpl__buildArrayRuntimeType nil[32]), arg b[260832] :
  (260827 call _desync(260829 call . a[260823] c"eltType"))) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    Forall[260846] {
      induction variables:
        
        unknown e[260836] "index var" "insert auto destroy"
      iterated expressions:
        a[260823]
      shadow variables:
      other variables
        forall body
      {
        (260839 call &= e[260836] b[260832])
      }
    }
  }
  function &=[260851](ref arg a[260856] :
  (260854 call chpl__buildArrayRuntimeType nil[32]), arg b[260865] :
  (260860 call _desync(260862 call . a[260856] c"eltType"))) : _unknown[42] "assignop" "deprecated" "operator" "no return value for void"
  {
    Forall[260885] {
      induction variables:
        
        unknown e[260875] "index var" "insert auto destroy"
      iterated expressions:
        a[260856]
      shadow variables:
      other variables
        forall body
      {
        (260878 call &= e[260875] b[260865])
      }
    }
  }
  where {
    (260869 call isSyncType(260871 call . a[260856] c"eltType"))
  }
  function |=[260891](ref arg a[260896] :
  (260894 call chpl__buildArrayRuntimeType nil[32]), arg b[260905] :
  (260900 call _desync(260902 call . a[260896] c"eltType"))) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    Forall[260919] {
      induction variables:
        
        unknown e[260909] "index var" "insert auto destroy"
      iterated expressions:
        a[260896]
      shadow variables:
      other variables
        forall body
      {
        (260912 call |= e[260909] b[260905])
      }
    }
  }
  function |=[260924](ref arg a[260929] :
  (260927 call chpl__buildArrayRuntimeType nil[32]), arg b[260938] :
  (260933 call _desync(260935 call . a[260929] c"eltType"))) : _unknown[42] "assignop" "deprecated" "operator" "no return value for void"
  {
    Forall[260958] {
      induction variables:
        
        unknown e[260948] "index var" "insert auto destroy"
      iterated expressions:
        a[260929]
      shadow variables:
      other variables
        forall body
      {
        (260951 call |= e[260948] b[260938])
      }
    }
  }
  where {
    (260942 call isSyncType(260944 call . a[260929] c"eltType"))
  }
  function ^=[260964](ref arg a[260969] :
  (260967 call chpl__buildArrayRuntimeType nil[32]), arg b[260978] :
  (260973 call _desync(260975 call . a[260969] c"eltType"))) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    Forall[260992] {
      induction variables:
        
        unknown e[260982] "index var" "insert auto destroy"
      iterated expressions:
        a[260969]
      shadow variables:
      other variables
        forall body
      {
        (260985 call ^= e[260982] b[260978])
      }
    }
  }
  function ^=[260997](ref arg a[261002] :
  (261000 call chpl__buildArrayRuntimeType nil[32]), arg b[261011] :
  (261006 call _desync(261008 call . a[261002] c"eltType"))) : _unknown[42] "assignop" "deprecated" "operator" "no return value for void"
  {
    Forall[261031] {
      induction variables:
        
        unknown e[261021] "index var" "insert auto destroy"
      iterated expressions:
        a[261002]
      shadow variables:
      other variables
        forall body
      {
        (261024 call ^= e[261021] b[261011])
      }
    }
  }
  where {
    (261015 call isSyncType(261017 call . a[261002] c"eltType"))
  }
  function >>=[261037](ref arg a[261042] :
  (261040 call chpl__buildArrayRuntimeType nil[32]), arg b[261051] :
  (261046 call _desync(261048 call . a[261042] c"eltType"))) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    Forall[261065] {
      induction variables:
        
        unknown e[261055] "index var" "insert auto destroy"
      iterated expressions:
        a[261042]
      shadow variables:
      other variables
        forall body
      {
        (261058 call >>= e[261055] b[261051])
      }
    }
  }
  function >>=[261070](ref arg a[261075] :
  (261073 call chpl__buildArrayRuntimeType nil[32]), arg b[261084] :
  (261079 call _desync(261081 call . a[261075] c"eltType"))) : _unknown[42] "assignop" "deprecated" "operator" "no return value for void"
  {
    Forall[261104] {
      induction variables:
        
        unknown e[261094] "index var" "insert auto destroy"
      iterated expressions:
        a[261075]
      shadow variables:
      other variables
        forall body
      {
        (261097 call >>= e[261094] b[261084])
      }
    }
  }
  where {
    (261088 call isSyncType(261090 call . a[261075] c"eltType"))
  }
  function <<=[261110](ref arg a[261115] :
  (261113 call chpl__buildArrayRuntimeType nil[32]), arg b[261124] :
  (261119 call _desync(261121 call . a[261115] c"eltType"))) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    Forall[261138] {
      induction variables:
        
        unknown e[261128] "index var" "insert auto destroy"
      iterated expressions:
        a[261115]
      shadow variables:
      other variables
        forall body
      {
        (261131 call <<= e[261128] b[261124])
      }
    }
  }
  function <<=[261143](ref arg a[261148] :
  (261146 call chpl__buildArrayRuntimeType nil[32]), arg b[261157] :
  (261152 call _desync(261154 call . a[261148] c"eltType"))) : _unknown[42] "assignop" "deprecated" "operator" "no return value for void"
  {
    Forall[261177] {
      induction variables:
        
        unknown e[261167] "index var" "insert auto destroy"
      iterated expressions:
        a[261148]
      shadow variables:
      other variables
        forall body
      {
        (261170 call <<= e[261167] b[261157])
      }
    }
  }
  where {
    (261161 call isSyncType(261163 call . a[261148] c"eltType"))
  }
  function <=>[261183](ref arg x[261189] :
  (261187 call chpl__buildArrayRuntimeType unknown xD[261185]), ref arg y[261196] :
  (261194 call chpl__buildArrayRuntimeType unknown yD[261192])) : _unknown[42] "inline" "operator" "no return value for void"
  {
    if(261216 call _cond_test(261206 call !=(261209 call . x[261189] c"rank")(261213 call . y[261196] c"rank")))
    {
      (261201 call compilerError "rank mismatch in array swap")
    }
    if(261229 call _cond_test 1)
    {
      (261222 call checkArrayShapesUponAssignment x[261189] y[261196](forSwap = 1))
    }
    unknown hasSwapped[261235] 0 bool[19]
    (261239 'end of statement')
    if(261289 call _cond_test(261279 call ==(261282 call . x[261189] c"eltType")(261286 call . y[261196] c"eltType")))
    {
      if(261275 call _cond_test(261263 call canResolveMethod module=[222] Reflection[1804](261265 call . x[261189] c"_value") "doiOptimizedSwap"(261272 call . y[261196] c"_value")))
      {
        (261242 call = hasSwapped[261235](261254 call(261251 call .(261246 call . x[261189] c"_value") c"doiOptimizedSwap")(261256 call . y[261196] c"_value")))
      }
      (408274 'referenced modules list' Reflection[1804])
    }
    if(261319 call _cond_test(261316 call ! hasSwapped[261235]))
    {
      Forall[261312] {
        induction variables:
          
          unknown a[261295] "index var" "insert auto destroy"
          
          unknown b[261297] "index var" "insert auto destroy"
        iterated expressions:
          x[261189]
          y[261196]
        shadow variables:
        other variables
          forall body
        {
          (261305 call <=> a[261295] b[261297])
        }
      }
    }
  }
  function reshape[261325](arg A[261330] :
  (261328 call chpl__buildArrayRuntimeType nil[32]), arg D[261334] :
  _domain[225034](?)) : _unknown[42]
  {
    if(261356 call _cond_test(261349 call !(261355 call(261352 call . D[261334] c"isRectangular"))))
    {
      (261339 call compilerError "reshape(A,D) is meaningful only when D is a rectangular domain; got D: "(261343 call :(261346 'typeof' D[261334]) string[244]))
    }
    if(261399 call _cond_test(261385 call !=(261391 call(261388 call . A[261330] c"sizeAs") int(64)[10])(261397 call(261394 call . D[261334] c"sizeAs") int(64)[10])))
    {
      (261362 call halt "reshape(A,D) is invoked when A has "(261370 call(261367 call . A[261330] c"sizeAs") int(64)[10]) " elements, but D has "(261379 call(261376 call . D[261334] c"sizeAs") int(64)[10]) " indices")
    }
    unknown B[261405](261428 for (261420 call _build_tuple unknown i[261416] "index var" unknown a[261418] "index var")  in  zip(261425 call _build_tuple D[261334] A[261330]) do
    {
      a[261418]
    } )(261413 call chpl__buildArrayRuntimeType(261407 call chpl__ensureDomainExpr D[261334])(261410 call . A[261330] c"eltType"))
    (261431 'end of statement')
    (261432 return B[261405])
  }
  function reshape[261436](arg A[261439] :
  _iteratorRecord[165](?), arg D[261443] :
  _domain[225034](?)) : _unknown[42]
  {
    if(261463 call _cond_test(261456 call !(261462 call(261459 call . D[261443] c"isRectangular"))))
    {
      (261448 call compilerError "reshape(A,D) is meaningful only when D is a rectangular domain; got D: "(261450 call :(261453 'typeof' D[261443]) string[244]))
    }
    unknown B[261469](261483 for (261475 call _build_tuple unknown i[261471] "index var" unknown a[261473] "index var")  in  zip(261480 call _build_tuple D[261443] A[261439]) do
    {
      a[261473]
    } )
    (261486 'end of statement')
    (261487 return B[261469])
  }
  function linearize[261491](arg Xs[261493]:_any[141](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    {
      unknown _indexOfInterest[261502] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[261503] "expr temp" "temp"
      (261512 'move' _iterator[261503](261510 call _getIterator Xs[261493]))
      Defer
      {
        {
          (261527 call _freeIterator _iterator[261503])
        }
      }
      { scopeless type
        (261517 'move' _indexOfInterest[261502](261514 call iteratorIndex _iterator[261503]))
      }
      ForLoop[261504]
      {
        unknown x[261496] "index var" "insert auto destroy"
        (261522 'move' x[261496] _indexOfInterest[261502])
        (261499 yield x[261496])
        label _continueLabel[261507]
        _indexOfInterest[261502]
        _iterator[261503]
      }
      label _breakLabel[261508]
    }
  }
  function chpl__initCopy[261536](const  ref arg rhs[261539] :
  _domain[225034](?), arg definedConst[261543] :
  bool[19]) : _unknown[42] "init copy fn"
  {
    unknown lhs[261553](261554 'new'(261556 call _domain[225034](?)(261558 call . rhs[261539] c"distribution")(261562 call . rhs[261539] c"rank")(261566 call . rhs[261539] c"idxType")(261570 call . rhs[261539] c"strides")(261577 call(261574 call . rhs[261539] c"dims"))(definedConst = definedConst[261543])))
    (261581 'end of statement')
    (261582 return lhs[261553])
  }
  where {
    (261550 call(261547 call . rhs[261539] c"isRectangular"))
  }
  function chpl__initCopy[261587](const  ref arg rhs[261590] :
  _domain[225034](?), arg definedConst[261594] :
  bool[19]) : _unknown[42] "init copy fn"
  {
    unknown lhs[261604](261605 'new'(261607 call _domain[225034](?)(261609 call . rhs[261590] c"distribution")(261613 call . rhs[261590] c"idxType")(261617 call . rhs[261590] c"parSafe")(definedConst = definedConst[261594])))
    (261623 'end of statement')
    (261631 call(261628 call .(261625 call . lhs[261604] c"_instance") c"dsiAssignDomain") rhs[261590](lhsPrivate = 1))
    (261635 return lhs[261604])
  }
  where {
    (261601 call(261598 call . rhs[261590] c"isAssociative"))
  }
  function chpl__initCopy[261640](const  ref arg rhs[261643] :
  _domain[225034](?), arg definedConst[261647] :
  bool[19]) : _unknown[42] "init copy fn"
  {
    unknown lhs[261657](261658 'new'(261660 call _domain[225034](?)(261662 call . rhs[261643] c"distribution")(261666 call . rhs[261643] c"parentDom")(definedConst = definedConst[261647])))
    (261672 'end of statement')
    (261680 call(261677 call .(261674 call . lhs[261657] c"_instance") c"dsiAssignDomain") rhs[261643](lhsPrivate = 1))
    (261684 return lhs[261657])
  }
  where {
    (261654 call(261651 call . rhs[261643] c"isSparse"))
  }
  function chpl__autoCopy[261689](const  ref arg x[261692] :
  _domain[225034](?), arg definedConst[261696] :
  bool[19]) : _unknown[42] "auto copy fn"
  {
    unknown b[261701] "no copy"(261703 call chpl__initCopy x[261692] definedConst[261696])
    (261707 'end of statement')
    (261708 return b[261701])
  }
  unknown localizeConstDomains[261718] "config" "param" 1
  unknown debugLocalizedConstDomains[261714] "config" "param" 0
  (261721 'end of statement')
  function chpl__initCopy[261722](const  ref arg rhs[261727] :
  (261725 call chpl__buildArrayRuntimeType nil[32]), arg definedConst[261731] :
  bool[19]) : _unknown[42] "init copy fn"
  {
    const localize[261736] "const"(261737 call &&(261739 call &&(261741 call && localizeConstDomains[261718](261744 call > numLocales[305007] 1))(261748 call || definedConst[261731](261755 call .(261752 call . rhs[261727] c"_dom") c"definedConst")))(261758 call !=(261768 call chpl_localeID_to_locale(261767 '_wide_get_locale'(261764 call .(261761 call . rhs[261727] c"_dom") c"_value")))(450812 call here[135591])))
    (261772 'end of statement')
    if(261804 call _cond_test debugLocalizedConstDomains[261714])
    {
      (261774 call writeln "In initCopy(definedConst=" definedConst[261731] "), domain definedConst: "(261786 call .(261783 call . rhs[261727] c"_dom") c"definedConst") "; "(261799 IfExpr  localize[261736] then
      { scopeless
        "localizing"
      } else
      { scopeless
        "taking normal path"
      } ))
    }
    if(261848 call _cond_test localize[261736])
    {
      const lhsDom[261811] "const"(261813 call . rhs[261727] c"_dom")
      (261817 'end of statement')
      unknown lhs[261819] "no copy" rhs[261727](261827 call chpl__buildArrayRuntimeType(261821 call chpl__ensureDomainExpr lhsDom[261811])(261824 call . rhs[261727] c"eltType"))
      (261831 'end of statement')
      (261832 return lhs[261819])
    }
    {
      unknown lhs[261836] "no copy"(261838 call chpl__coerceCopy(261840 'typeof' rhs[261727]) rhs[261727] definedConst[261731])
      (261844 'end of statement')
      (261845 return lhs[261836])
    }
  }
  function chpl__autoCopy[261854](arg x[261859] :
  (261857 call chpl__buildArrayRuntimeType nil[32]), arg definedConst[261863] :
  bool[19]) : _unknown[42] "auto copy fn"
  {
    unknown b[261868] "no copy"(261870 call chpl__initCopy x[261859] definedConst[261863])
    (261874 'end of statement')
    (261875 return b[261868])
  }
  function chpl__coerceHelp[261879](arg dstType[261882] :
  _domain[225034](?), arg definedConst[261886] :
  bool[19]) : _unknown[42] "inline"
  {
    const dist[261891] "const" "no auto destroy" "no copy" "ref var"(261892 'get runtime type field' dstType[261882] "dist")
    (261896 'end of statement')
    unknown instanceType[261898] "type variable"(261900 call chpl__instanceTypeFromDomainRuntimeType dstType[261882])
    if(261977 call _cond_test(261975 call chpl__isRectangularDomType dstType[261882]))
    {
      (261904 return(261906 call chpl__convertRuntimeTypeToValue(dist = dist[261891])(rank =(261910 call . instanceType[261898] c"rank"))(idxType =(261915 call . instanceType[261898] c"idxType"))(strides =(261920 call . instanceType[261898] c"strides"))(isNoInit = 0)(definedConst = definedConst[261886])))
    }
    {
      if(261970 call _cond_test(261968 call chpl__isSparseDomType dstType[261882]))
      {
        const parentDom[261930] "const" "no auto destroy" "no copy" "ref var"(261931 'get runtime type field' dstType[261882] "parentDom")
        (261935 'end of statement')
        (261936 return(261938 call chpl__convertRuntimeTypeToValue(dist = dist[261891])(parentDom = parentDom[261930])(isNoInit = 0)(definedConst = definedConst[261886])))
      }
      {
        (261948 return(261950 call chpl__convertRuntimeTypeToValue(dist = dist[261891])(idxType =(261954 call . instanceType[261898] c"idxType"))(parSafe =(261959 call . instanceType[261898] c"parSafe"))(isNoInit = 0)(definedConst = definedConst[261886])))
      }
    }
  }
  function chpl__coerceCopy[261984](arg dstType[261987] :
  _array[255540](?), arg rhs[261991] :
  _array[255540](?), arg definedConst[261995] :
  bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown eltType[262000] "type variable"(262002 call chpl__eltTypeFromArrayRuntimeType dstType[261987])
    const dom[262006] "const" "ref var"(262008 call chpl__domainFromArrayRuntimeType dstType[261987])
    (262011 'end of statement')
    unknown lhs[262013] "no copy" "unsafe"(262018 call(262015 call . dom[262006] c"buildArray") eltType[262000](initElts = 0))
    (262023 'end of statement')
    if(262038 call _cond_test(262028 call !=(262031 call . lhs[262013] c"rank")(262035 call . rhs[261991] c"rank")))
    {
      (262025 call compilerError "rank mismatch in array assignment")
    }
    if(262061 call _cond_test(262056 call !(262059 call isCopyableOrSyncSingle eltType[262000])))
    {
      (262044 call compilerError "Cannot copy-initialize array because element type '"(262048 call : eltType[262000] string[244]) "' cannot be copy-initialized")
    }
    if(262136 call _cond_test(262129 call ==(262132 call . rhs[261991] c"_value") nil[32]))
    {
    }
    {
      if(262124 call _cond_test(262114 call ==(262117 call . lhs[262013] c"_value")(262121 call . rhs[261991] c"_value")))
      {
      }
      {
        if(262110 call _cond_test(262090 call &&(262092 call ==(262098 call(262095 call . lhs[262013] c"sizeAs") int(64)[10]) 0)(262101 call ==(262107 call(262104 call . rhs[261991] c"sizeAs") int(64)[10]) 0)))
        {
        }
        {
          if(262076 call _cond_test 1)
          {
            (262071 call checkArrayShapesUponAssignment lhs[262013] rhs[261991])
          }
          (262082 call chpl__uncheckedArrayTransfer lhs[262013] rhs[261991](kind = initCopy[257615]))
        }
      }
    }
    (262148 call(262145 call .(262142 call . lhs[262013] c"_value") c"dsiElementInitializationComplete"))
    (262149 return lhs[262013])
  }
  function chpl__coerceMove[262153](arg dstType[262156] :
  _array[255540](?), in arg rhs[262160] :
  _array[255540](?), arg definedConst[262164] :
  bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown eltType[262169] "type variable"(262171 call chpl__eltTypeFromArrayRuntimeType dstType[262156])
    const dom[262175] "const" "ref var"(262177 call chpl__domainFromArrayRuntimeType dstType[262156])
    (262180 'end of statement')
    unknown typeMismatch[262182] "param"(262183 call !=(262189 'typeof'(262186 call . rhs[262160] c"_instance"))(262191 call chpl__instanceTypeFromArrayRuntimeType dstType[262156]))
    (262194 'end of statement')
    unknown moveElts[262196] "param"(262197 call ! typeMismatch[262182])
    (262201 'end of statement')
    if(262221 call _cond_test(262205 call && moveElts[262196](262208 call ==(262211 call . dom[262175] c"_instance")(262218 call .(262215 call . rhs[262160] c"_dom") c"_instance"))))
    {
      (262203 return rhs[262160])
    }
    unknown lhs[262226] "no copy" "unsafe"(262231 call(262228 call . dom[262175] c"buildArray") eltType[262169](initElts = 0))
    (262236 'end of statement')
    if(262251 call _cond_test(262241 call !=(262244 call . lhs[262226] c"rank")(262248 call . rhs[262160] c"rank")))
    {
      (262238 call compilerError "rank mismatch in array assignment")
    }
    if(262339 call _cond_test(262332 call ==(262335 call . rhs[262160] c"_value") nil[32]))
    {
    }
    {
      if(262327 call _cond_test(262317 call ==(262320 call . lhs[262226] c"_value")(262324 call . rhs[262160] c"_value")))
      {
      }
      {
        if(262313 call _cond_test(262293 call &&(262295 call ==(262301 call(262298 call . lhs[262226] c"sizeAs") int(64)[10]) 0)(262304 call ==(262310 call(262307 call . rhs[262160] c"sizeAs") int(64)[10]) 0)))
        {
        }
        {
          if(262266 call _cond_test 1)
          {
            (262261 call checkArrayShapesUponAssignment lhs[262226] rhs[262160])
          }
          unknown kind[262272] "param"(262282 IfExpr  moveElts[262196] then
          { scopeless
            move[257613]
          } else
          { scopeless
            initCopy[257615]
          } )
          (262286 'end of statement')
          (262288 call chpl__uncheckedArrayTransfer lhs[262226] rhs[262160](kind = kind[262272]))
        }
      }
    }
    (262345 call _do_destroy_arr(262347 call . rhs[262160] c"_unowned")(262351 call . rhs[262160] c"_instance")(deinitElts =(262354 call ! moveElts[262196])))
    (262365 call(262362 call .(262359 call . lhs[262226] c"_value") c"dsiElementInitializationComplete"))
    (262366 return lhs[262226])
  }
  function chpl__coerceCopy[262370](arg dstType[262373] :
  _array[255540](?), arg rhs[262377] :
  _domain[225034](?), arg definedConst[262381] :
  bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown eltType[262386] "type variable"(262388 call chpl__eltTypeFromArrayRuntimeType dstType[262373])
    const dom[262392] "const" "ref var"(262394 call chpl__domainFromArrayRuntimeType dstType[262373])
    (262397 'end of statement')
    unknown lhs[262399] "no copy"(262404 call(262401 call . dom[262392] c"buildArray") eltType[262386](initElts = 0))
    (262409 'end of statement')
    if(262424 call _cond_test(262414 call !=(262417 call . lhs[262399] c"rank")(262421 call . rhs[262377] c"rank")))
    {
      (262411 call compilerError "rank mismatch in array assignment")
    }
    if(262445 call _cond_test(262433 call &&(262439 call(262436 call . rhs[262377] c"isAssociative"))(262444 call(262441 call . lhs[262399] c"isRectangular"))))
    {
      (262430 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    if(262461 call _cond_test(262456 call !(262459 call isPODType eltType[262386])))
    {
      (262451 call compilerError "cannot assign to array from domain of non-POD indices")
    }
    (262467 call chpl__transferArray lhs[262399] rhs[262377](kind = initCopy[257615]))
    (262482 call(262479 call .(262476 call . lhs[262399] c"_value") c"dsiElementInitializationComplete"))
    (262483 return lhs[262399])
  }
  function chpl__coerceMove[262487](arg dstType[262490] :
  _array[255540](?), in arg rhs[262494] :
  _domain[225034](?), arg definedConst[262498] :
  bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown eltType[262503] "type variable"(262505 call chpl__eltTypeFromArrayRuntimeType dstType[262490])
    const dom[262509] "const" "ref var"(262511 call chpl__domainFromArrayRuntimeType dstType[262490])
    (262514 'end of statement')
    unknown lhs[262516] "no copy"(262521 call(262518 call . dom[262509] c"buildArray") eltType[262503](initElts = 0))
    (262526 'end of statement')
    if(262541 call _cond_test(262531 call !=(262534 call . lhs[262516] c"rank")(262538 call . rhs[262494] c"rank")))
    {
      (262528 call compilerError "rank mismatch in array assignment")
    }
    if(262562 call _cond_test(262550 call &&(262556 call(262553 call . rhs[262494] c"isAssociative"))(262561 call(262558 call . lhs[262516] c"isRectangular"))))
    {
      (262547 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    if(262576 call _cond_test(262571 call !(262574 call isPODType eltType[262503])))
    {
      (262568 call compilerError "cannot assign to array from domain of non-POD indices")
    }
    (262582 call chpl__transferArray lhs[262516] rhs[262494](kind = initCopy[257615]))
    (262597 call(262594 call .(262591 call . lhs[262516] c"_value") c"dsiElementInitializationComplete"))
    (262598 return lhs[262516])
  }
  function chpl__coerceCopy[262602](arg dstType[262605] :
  _array[255540](?), arg rhs[262611] :
  (262609 call range[240](?) ?[227]), arg definedConst[262615] :
  bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown eltType[262620] "type variable"(262622 call chpl__eltTypeFromArrayRuntimeType dstType[262605])
    const dom[262626] "const" "ref var"(262628 call chpl__domainFromArrayRuntimeType dstType[262605])
    (262631 'end of statement')
    unknown lhs[262633] "no copy"(262638 call(262635 call . dom[262626] c"buildArray") eltType[262620](initElts = 0))
    (262643 'end of statement')
    if(262655 call _cond_test(262648 call !=(262651 call . lhs[262633] c"rank") 1))
    {
      (262645 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
    (262661 call chpl__transferArray lhs[262633] rhs[262611](kind = initCopy[257615]))
    (262676 call(262673 call .(262670 call . lhs[262633] c"_value") c"dsiElementInitializationComplete"))
    (262677 return lhs[262633])
  }
  function chpl__coerceMove[262681](arg dstType[262684] :
  _array[255540](?), in arg rhs[262690] :
  (262688 call range[240](?) ?[227]), arg definedConst[262694] :
  bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown eltType[262699] "type variable"(262701 call chpl__eltTypeFromArrayRuntimeType dstType[262684])
    const dom[262705] "const" "ref var"(262707 call chpl__domainFromArrayRuntimeType dstType[262684])
    (262710 'end of statement')
    unknown lhs[262712] "no copy"(262717 call(262714 call . dom[262705] c"buildArray") eltType[262699](initElts = 0))
    (262722 'end of statement')
    if(262734 call _cond_test(262727 call !=(262730 call . lhs[262712] c"rank") 1))
    {
      (262724 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
    (262740 call chpl__transferArray lhs[262712] rhs[262690](kind = initCopy[257615]))
    (262755 call(262752 call .(262749 call . lhs[262712] c"_value") c"dsiElementInitializationComplete"))
    (262756 return lhs[262712])
  }
  function chpl__coerceCopy[262760](arg dstType[262763] :
  _array[255540](?), arg rhs[262767] :
  _tuple[246](?), arg definedConst[262771] :
  bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown eltType[262776] "type variable"(262778 call chpl__eltTypeFromArrayRuntimeType dstType[262763])
    const dom[262782] "const" "ref var"(262784 call chpl__domainFromArrayRuntimeType dstType[262763])
    (262787 'end of statement')
    unknown lhs[262789] "no copy" "unsafe"(262794 call(262791 call . dom[262782] c"buildArray") eltType[262776](initElts = 0))
    (262799 'end of statement')
    if(262813 call _cond_test(262806 call !(262812 call(262809 call . lhs[262789] c"isRectangular"))))
    {
      (262801 call compilerError "Cannot assign from tuple to non-rectangular array")
    }
    (262819 call initArrFromTuple lhs[262789] rhs[262767] initCopy[257615])
    (262833 call(262830 call .(262827 call . lhs[262789] c"_value") c"dsiElementInitializationComplete"))
    (262834 return lhs[262789])
  }
  function chpl__coerceMove[262838](arg dstType[262841] :
  _array[255540](?), in arg rhs[262845] :
  _tuple[246](?), arg definedConst[262849] :
  bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown eltType[262854] "type variable"(262856 call chpl__eltTypeFromArrayRuntimeType dstType[262841])
    const dom[262860] "const" "ref var"(262862 call chpl__domainFromArrayRuntimeType dstType[262841])
    (262865 'end of statement')
    unknown lhs[262867] "no copy" "unsafe"(262872 call(262869 call . dom[262860] c"buildArray") eltType[262854](initElts = 0))
    (262877 'end of statement')
    if(262889 call _cond_test(262882 call !(262888 call(262885 call . lhs[262867] c"isRectangular"))))
    {
      (262879 call compilerError "Cannot assign from tuple to non-rectangular array")
    }
    (262895 call initArrFromTuple lhs[262867] rhs[262845] move[257613])
    (262909 call(262906 call .(262903 call . lhs[262867] c"_value") c"dsiElementInitializationComplete"))
    (262910 return lhs[262867])
  }
  function chpl__coerceCopy[262914](arg dstType[262917] :
  _array[255540](?), arg rhs[262923] :
  (262921 call desyncEltType dstType[262917]), arg definedConst[262927] :
  bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown eltType[262932] "type variable"(262934 call chpl__eltTypeFromArrayRuntimeType dstType[262917])
    const dom[262938] "const" "ref var"(262940 call chpl__domainFromArrayRuntimeType dstType[262917])
    (262943 'end of statement')
    unknown lhs[262945] "no copy" "unsafe"(262950 call(262947 call . dom[262938] c"buildArray") eltType[262932](initElts = 0))
    (262955 'end of statement')
    Forall[262980] {
      induction variables:
        
        unknown e[262956] "index var" "insert auto destroy"
      iterated expressions:
        lhs[262945]
      shadow variables:
        rhs[262961] 'in' intent outer var rhs[262923]
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        unknown copy[262967] "no auto destroy" rhs[262961](262969 call . lhs[262945] c"eltType")
        (262974 'end of statement')
        (262975 '=' e[262956] copy[262967])
      }
    }
    (262990 call(262987 call .(262984 call . lhs[262945] c"_value") c"dsiElementInitializationComplete"))
    (262991 return lhs[262945])
  }
  function chpl__coerceMove[262995](arg dstType[262998] :
  _array[255540](?), in arg rhs[263004] :
  (263002 call desyncEltType dstType[262998]), arg definedConst[263008] :
  bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown eltType[263013] "type variable"(263015 call chpl__eltTypeFromArrayRuntimeType dstType[262998])
    const dom[263019] "const" "ref var"(263021 call chpl__domainFromArrayRuntimeType dstType[262998])
    (263024 'end of statement')
    unknown lhs[263026] "no copy" "unsafe"(263031 call(263028 call . dom[263019] c"buildArray") eltType[263013](initElts = 0))
    (263036 'end of statement')
    Forall[263058] {
      induction variables:
        
        unknown e[263037] "index var" "insert auto destroy"
      iterated expressions:
        lhs[263026]
      shadow variables:
        rhs[263042] 'in' intent outer var rhs[263004]
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        unknown copy[263048] "no auto destroy" rhs[263042] eltType[263013]
        (263052 'end of statement')
        (263053 '=' e[263037] copy[263048])
      }
    }
    (263068 call(263065 call .(263062 call . lhs[263026] c"_value") c"dsiElementInitializationComplete"))
    (263069 return lhs[263026])
  }
  function chpl__coerceCopy[263073](arg dstType[263076] :
  _array[255540](?), arg rhs[263080] :
  _iteratorRecord[165](?), arg definedConst[263084] :
  bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown eltType[263089] "type variable"(263091 call chpl__eltTypeFromArrayRuntimeType dstType[263076])
    const dom[263095] "const" "ref var"(263097 call chpl__domainFromArrayRuntimeType dstType[263076])
    (263100 'end of statement')
    unknown lhs[263102] "no copy" "unsafe"(263107 call(263104 call . dom[263095] c"buildArray") eltType[263089](initElts = 0))
    (263112 'end of statement')
    (263114 call chpl__transferArray lhs[263102] rhs[263080](kind = initCopy[257615]))
    (263129 call(263126 call .(263123 call . lhs[263102] c"_value") c"dsiElementInitializationComplete"))
    (263130 return lhs[263102])
  }
  function chpl__coerceMove[263134](arg dstType[263137] :
  _array[255540](?), arg rhs[263141] :
  _iteratorRecord[165](?), arg definedConst[263145] :
  bool[19]) : _unknown[42] "coerce fn" "find user line"
  {
    unknown eltType[263150] "type variable"(263152 call chpl__eltTypeFromArrayRuntimeType dstType[263137])
    const dom[263156] "const" "ref var"(263158 call chpl__domainFromArrayRuntimeType dstType[263137])
    (263161 'end of statement')
    unknown lhs[263163] "no copy" "unsafe"(263168 call(263165 call . dom[263156] c"buildArray") eltType[263150](initElts = 0))
    (263173 'end of statement')
    (263175 call chpl__transferArray lhs[263163] rhs[263141](kind = move[257613]))
    (263190 call(263187 call .(263184 call . lhs[263163] c"_value") c"dsiElementInitializationComplete"))
    (263191 return lhs[263163])
  }
  function chpl__coerceCopy[263195](arg dstType[263198] :
  _array[255540](?), arg rhs[263201]:_any[141](?), arg definedConst[263204] :
  bool[19]) : _unknown[42] "coerce fn" "last resort" "find user line"
  {
    unknown eltType[263209] "type variable"(263211 call chpl__eltTypeFromArrayRuntimeType dstType[263198])
    const dom[263215] "const" "ref var"(263217 call chpl__domainFromArrayRuntimeType dstType[263198])
    (263220 'end of statement')
    unknown lhs[263222] "no copy" "unsafe"(263227 call(263224 call . dom[263215] c"buildArray") eltType[263209](initElts = 0))
    (263232 'end of statement')
    (263234 call chpl__transferArray lhs[263222] rhs[263201](kind = initCopy[257615]))
    (263249 call(263246 call .(263243 call . lhs[263222] c"_value") c"dsiElementInitializationComplete"))
    (263250 return lhs[263222])
  }
  function chpl__coerceMove[263254](arg dstType[263257] :
  _array[255540](?), in arg rhs[263260]:_any[141](?), arg definedConst[263263] :
  bool[19]) : _unknown[42] "coerce fn" "last resort" "find user line"
  {
    unknown eltType[263268] "type variable"(263270 call chpl__eltTypeFromArrayRuntimeType dstType[263257])
    const dom[263274] "const" "ref var"(263276 call chpl__domainFromArrayRuntimeType dstType[263257])
    (263279 'end of statement')
    unknown lhs[263281] "no copy" "unsafe"(263286 call(263283 call . dom[263274] c"buildArray") eltType[263268](initElts = 0))
    (263291 'end of statement')
    (263293 call chpl__transferArray lhs[263281] rhs[263260](kind = initCopy[257615]))
    (263308 call(263305 call .(263302 call . lhs[263281] c"_value") c"dsiElementInitializationComplete"))
    (263309 return lhs[263281])
  }
  function chpl__unref[263313](arg x[263318] :
  (263316 call chpl__buildArrayRuntimeType nil[32])) : _unknown[42] "inline" "no copy return" "unref fn"
  {
    unknown ret[263329] "no auto destroy" x[263318]
    (263332 'end of statement')
    (263333 return ret[263329])
  }
  where {
    (263322 call chpl__isArrayView(263324 call . x[263318] c"_value"))
  }
  function chpl__unref[263338](arg ir[263341] :
  _iteratorRecord[165](?)) : _unknown[42] "no copy return" "unref fn"
  {
    unknown toArray[263346] "no auto destroy" "no copy"(263348 call chpl__initCopy ir[263341](definedConst = 0))
    (263353 'end of statement')
    (263354 return toArray[263346])
  }
  function chpl__unref[263358](arg x[263363] :
  (263361 call chpl__buildArrayRuntimeType nil[32])) : _unknown[42] "inline" "no copy return"
  {
    unknown ret[263368] "no copy" x[263363]
    (263371 'end of statement')
    (263372 return ret[263368])
  }
  function chpl__initCopy[263376](arg ir[263379] :
  _iteratorRecord[165](?), arg definedConst[263383] :
  bool[19]) : _unknown[42] "init copy fn"
  {
    unknown shape[263391](263392 'new'(263394 call _domain[225034](?)(263396 call . ir[263379] c"_shape_")))
    (263400 'end of statement')
    (263401 call =(263404 call . shape[263391] c"_unowned") 1)
    (263408 return(263410 call chpl__initCopy_shapeHelp shape[263391] ir[263379]))
  }
  where {
    (263387 call chpl_iteratorHasDomainShape ir[263379])
  }
  function chpl__initCopy[263416](arg ir[263419] :
  _iteratorRecord[165](?), arg definedConst[263423] :
  bool[19]) : _unknown[42] "init copy fn"
  {
    unknown shape[263438] "insert auto destroy"(263445 call chpl__buildDomainExpr(263441 call . ir[263419] c"_shape_") 0)
    (263449 'end of statement')
    (263450 return(263452 call chpl__initCopy_shapeHelp shape[263438] ir[263419]))
  }
  where {
    (263426 call &&(263429 call chpl_iteratorHasRangeShape ir[263419])(263431 call !(263434 call chpl_iteratorFromForExpr ir[263419])))
  }
  function chpl__initCopy_shapeHelp[263458](arg shape[263461] :
  _domain[225034](?), arg ir[263465] :
  _iteratorRecord[165](?)) : _unknown[42] "no copy returns owned" "ignore transfer errors"
  {
    unknown result[263470] "no copy" "unsafe"(263475 call(263472 call . shape[263461] c"buildArray")(263477 call iteratorToArrayElementType(263479 'typeof' ir[263465]))(initElts = 0))
    (263483 'end of statement')
    if(263496 call _cond_test(263491 call isArray(263493 call . result[263470] c"eltType")))
    {
      (263485 call compilerError "creating an array of arrays using a for- or forall-expression is not supported, except when using a for-expression over a rang)
    }
    if(263928 call _cond_test(263926 call chpl_iteratorFromForExpr ir[263465]))
    {
      if(263663 call _cond_test(263658 call needsInitWorkaround(263660 call . result[263470] c"eltType")))
      {
        {
          unknown _indexOfInterest[263533] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[263534] "expr temp" "temp"
          (263551 'move' _iterator[263534](263516 call _build_tuple(263546 call _getIterator(263543 call . result[263470] c"_dom"))(263549 call _getIterator ir[263465])))
          Defer
          {
            {
              (263579 call _freeIterator _iterator[263534])
            }
          }
          { scopeless type
            (263556 'move' _indexOfInterest[263533](263553 call iteratorIndex _iterator[263534]))
          }
          ForLoop[263535]
          {
            (263561 call _check_tuple_var_decl _indexOfInterest[263533] 2)
            unknown ri[263504] "index var" "insert auto destroy"
            (263568 'move' ri[263504](263565 call _indexOfInterest[263533] 0))
            unknown src[263506] "index var" "insert auto destroy"
            (263574 'move' src[263506](263571 call _indexOfInterest[263533] 1))
            {
              unknown r[263519] "ref var"(263521 call result[263470] ri[263504])
              (263524 'end of statement')
              unknown copy[263526] "no auto destroy" src[263506]
              (263529 'end of statement')
              (263530 '=' r[263519] copy[263526])
            }
            label _continueLabel[263538]
            _indexOfInterest[263533]
            _iterator[263534]
          }
          label _breakLabel[263539]
        }
      }
      {
        {
          unknown _indexOfInterest[263607] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[263608] "expr temp" "temp"
          (263622 'move' _iterator[263608](263597 call _build_tuple(263617 call _getIterator result[263470])(263620 call _getIterator ir[263465])))
          Defer
          {
            {
              (263650 call _freeIterator _iterator[263608])
            }
          }
          { scopeless type
            (263627 'move' _indexOfInterest[263607](263624 call iteratorIndex _iterator[263608]))
          }
          ForLoop[263609]
          {
            (263632 call _check_tuple_var_decl _indexOfInterest[263607] 2)
            unknown r[263588] "index var" "insert auto destroy"
            (263639 'move' r[263588](263636 call _indexOfInterest[263607] 0))
            unknown src[263590] "index var" "insert auto destroy"
            (263645 'move' src[263590](263642 call _indexOfInterest[263607] 1))
            {
              unknown copy[263600] "no auto destroy" src[263590]
              (263603 'end of statement')
              (263604 '=' r[263588] copy[263600])
            }
            label _continueLabel[263612]
            _indexOfInterest[263607]
            _iterator[263608]
          }
          label _breakLabel[263613]
        }
      }
    }
    {
      if(263921 call _cond_test(263919 call chpl_iteratorFromForeachExpr ir[263465]))
      {
        if(263833 call _cond_test(263828 call needsInitWorkaround(263830 call . result[263470] c"eltType")))
        {
          {
            unknown _indexOfInterest[263701] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[263702] "expr temp" "temp"
            (263719 'move' _iterator[263702](263682 call _build_tuple(263714 call _getIterator(263711 call . result[263470] c"_dom"))(263717 call _getIterator ir[263465])))
            Defer
            {
              {
                (263747 call _freeIterator _iterator[263702])
              }
            }
            { scopeless type
              (263724 'move' _indexOfInterest[263701](263721 call iteratorIndex _iterator[263702]))
            }
            ForLoop[263703] order-independent
            {
              (263729 call _check_tuple_var_decl _indexOfInterest[263701] 2)
              unknown ri[263670] "index var" "insert auto destroy"
              (263736 'move' ri[263670](263733 call _indexOfInterest[263701] 0))
              unknown src[263672] "index var" "insert auto destroy"
              (263742 'move' src[263672](263739 call _indexOfInterest[263701] 1))
              {
                unknown r[263685] "ref var"(263687 call result[263470] ri[263670])
                (263690 'end of statement')
                unknown copy[263692] "no auto destroy" src[263672]
                (263695 'end of statement')
                (263696 '=' r[263685] copy[263692])
              }
              label _continueLabel[263706]
              _indexOfInterest[263701]
              _iterator[263702]
            }
            label _breakLabel[263707]
          }
        }
        {
          {
            unknown _indexOfInterest[263777] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[263778] "expr temp" "temp"
            (263792 'move' _iterator[263778](263765 call _build_tuple(263787 call _getIterator result[263470])(263790 call _getIterator ir[263465])))
            Defer
            {
              {
                (263820 call _freeIterator _iterator[263778])
              }
            }
            { scopeless type
              (263797 'move' _indexOfInterest[263777](263794 call iteratorIndex _iterator[263778]))
            }
            ForLoop[263779] order-independent
            {
              (263802 call _check_tuple_var_decl _indexOfInterest[263777] 2)
              unknown r[263756] "index var" "insert auto destroy"
              (263809 'move' r[263756](263806 call _indexOfInterest[263777] 0))
              unknown src[263758] "index var" "insert auto destroy"
              (263815 'move' src[263758](263812 call _indexOfInterest[263777] 1))
              {
                unknown copy[263768] "no auto destroy" src[263758]
                (263771 'end of statement')
                (263772 '=' r[263756] copy[263768])
              }
              label _continueLabel[263782]
              _indexOfInterest[263777]
              _iterator[263778]
            }
            label _breakLabel[263783]
          }
        }
      }
      {
        if(263914 call _cond_test(263909 call needsInitWorkaround(263911 call . result[263470] c"eltType")))
        {
          Forall[263877] {
            induction variables:
              
              unknown ri[263840] "index var" "insert auto destroy"
              
              unknown src[263842] "index var" "insert auto destroy"
            iterated expressions:
              (263848 call . result[263470] c"_dom")
              ir[263465]
            shadow variables:
              result[263855] 'ref' intent outer var result[263470]
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              unknown r[263861] "ref var"(263863 call result[263855] ri[263840])
              (263866 'end of statement')
              unknown copy[263868] "no auto destroy" src[263842]
              (263871 'end of statement')
              (263872 '=' r[263861] copy[263868])
            }
          }
        }
        {
          Forall[263904] {
            induction variables:
              
              unknown r[263883] "index var" "insert auto destroy"
              
              unknown src[263885] "index var" "insert auto destroy"
            iterated expressions:
              result[263470]
              ir[263465]
            shadow variables:
            other variables
              forall body
            {
              unknown copy[263895] "no auto destroy" src[263885]
              (263898 'end of statement')
              (263899 '=' r[263883] copy[263895])
            }
          }
        }
      }
    }
    (263940 call(263937 call .(263934 call . result[263470] c"_value") c"dsiElementInitializationComplete"))
    (263941 return result[263470])
  }
  function chpl__throwErrorUnchecked[263945](in arg e[263950] :
  (263948 call _owned[238](?) Error[85511])) : _unknown[42] throws "unchecked throws" "no return value for void"
  {
    (263954 'throw' e[263950])
  }
  function chpl__initCopy[263958](arg ir[263961] :
  _iteratorRecord[165](?), arg definedConst[263965] :
  bool[19]) : _unknown[42] "init copy fn"
  {
    unknown shapeful[263970] "param"(263972 call chpl_iteratorHasRangeShape ir[263961])
    (263975 'end of statement')
    unknown r[263977](263987 IfExpr  shapeful[263970] then
    { scopeless
      (263980 call . ir[263961] c"_shape_")
    } else
    { scopeless
      (263985 call chpl_build_bounded_range 1 0)
    } )
    (263991 'end of statement')
    unknown i[263993] 0
    (263996 'end of statement')
    unknown size[263998](264003 call(264000 call . r[263977] c"sizeAs") c_size_t[614])
    (264006 'end of statement')
    unknown elemType[264008] "type variable"(264010 call iteratorToArrayElementType(264012 'typeof' ir[263961]))
    unknown data[264015] nil[32](264017 call _ddata[67573](?) elemType[264008])
    (264021 'end of statement')
    unknown callPostAlloc[264023] bool[19]
    (264026 'end of statement')
    unknown subloc[264028] c_sublocid_none[135197]
    (264031 'end of statement')
    if(264045 call _cond_test(264041 call > size[263998] 0))
    {
      (264033 call = data[264015](264037 call _ddata_allocate_noinit elemType[264008] size[263998] callPostAlloc[264023]))
    }
    Try
    {
      {
        {
          unknown _indexOfInterest[264181] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[264182] "expr temp" "temp"
          (264191 'move' _iterator[264182](264189 call _getIterator ir[263961]))
          Defer
          {
            {
              (264206 call _freeIterator _iterator[264182])
            }
          }
          { scopeless type
            (264196 'move' _indexOfInterest[264181](264193 call iteratorIndex _iterator[264182]))
          }
          ForLoop[264183]
          {
            unknown elt[264050] "index var" "insert auto destroy"
            (264201 'move' elt[264050] _indexOfInterest[264181])
            {
              unknown eltCopy[264055] "no auto destroy" "no copy"(264060 'try-expr'(264057 call chpl__initCopy elt[264050] definedConst[263965]))
              (264062 'end of statement')
              if(264168 call _cond_test(264164 call >= i[263993] size[263998]))
              {
                unknown oldSize[264065] size[263998]
                (264068 'end of statement')
                unknown oldData[264070] data[264015]
                (264073 'end of statement')
                if(264091 call _cond_test(264087 call == size[263998] 0))
                {
                  (264074 call = size[263998] 4)
                }
                {
                  (264079 call = size[263998](264082 call * 2 size[263998]))
                }
                (264097 call = data[264015](264101 call _ddata_allocate_noinit elemType[264008] size[263998] callPostAlloc[264023]))
                {
                  unknown _indexOfInterest[264121] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[264122] "expr temp" "temp"
                  (264131 'move' _iterator[264122](264129 call _getIterator(264138 call chpl_direct_counted_range_iter 0 oldSize[264065])))
                  Defer
                  {
                    {
                      (264153 call _freeIterator _iterator[264122])
                    }
                  }
                  { scopeless type
                    (264143 'move' _indexOfInterest[264121](264140 call iteratorIndex _iterator[264122]))
                  }
                  ForLoop[264123]
                  {
                    unknown i[264105] "index var" "insert auto destroy"
                    (264148 'move' i[264105] _indexOfInterest[264121])
                    {
                      (264114 '='(264116 call data[264015] i[264105])(264119 call oldData[264070] i[264105]))
                    }
                    label _continueLabel[264126]
                    _indexOfInterest[264121]
                    _iterator[264122]
                  }
                  label _breakLabel[264127]
                }
                (264161 call _ddata_free oldData[264070] oldSize[264065])
              }
              (264172 '='(264174 call data[264015] i[263993]) eltCopy[264055])
              (264177 call += i[263993] 1)
            }
            label _continueLabel[264186]
            _indexOfInterest[264181]
            _iterator[264182]
          }
          label _breakLabel[264187]
        }
      }
    }
    Catch e
    {
      unknown tmp[395534] "temp"(395537 'current error')
      unknown e[264277](395544 'new'(395543 call _owned[238](?)(395540 'to non nilable class' tmp[395534])))
      {
        {
          unknown _indexOfInterest[264230] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[264231] "expr temp" "temp"
          (264240 'move' _iterator[264231](264238 call _getIterator(264247 call chpl_direct_range_iter 0(264244 call - i[263993] 1))))
          Defer
          {
            {
              (264262 call _freeIterator _iterator[264231])
            }
          }
          { scopeless type
            (264252 'move' _indexOfInterest[264230](264249 call iteratorIndex _iterator[264231]))
          }
          ForLoop[264232]
          {
            unknown j[264215] "index var" "insert auto destroy"
            (264257 'move' j[264215] _indexOfInterest[264230])
            {
              (264226 call chpl__autoDestroy(264228 call data[264015] j[264215]))
            }
            label _continueLabel[264235]
            _indexOfInterest[264230]
            _iterator[264231]
          }
          label _breakLabel[264236]
        }
        (264270 call _ddata_free data[264015] size[263998])
        (264274 call chpl__throwErrorUnchecked e[264277])
      }
    }
    if(264301 call _cond_test(264289 call && shapeful[263970](264292 call < i[263993](264299 call(264296 call . r[263977] c"sizeAs") uint(64)[86]))))
    {
      (264281 call = r[263977](264284 call # r[263977] i[263993]))
    }
    if(264330 call _cond_test(264327 call ! shapeful[263970]))
    {
      (264306 call = r[263977](264323 IfExpr (264309 call == i[263993] 0) then
      { scopeless
        (264315 call chpl_build_bounded_range 1 0)
      } else
      { scopeless
        (264317 call #(264320 call chpl_build_low_bounded_range capturedIteratorLowBound[248241]) i[263993])
      } ))
    }
    unknown D[264336] "insert auto destroy"(264340 call chpl__buildDomainExpr r[263977] 0)
    (264344 'end of statement')
    if(264444 call _cond_test(264440 call != data[264015] nil[32]))
    {
      if(264352 call _cond_test callPostAlloc[264023])
      {
        (264347 call _ddata_allocate_postalloc data[264015] size[263998])
      }
      unknown A[264358] "no copy"(264365 call(264362 call . D[264336] c"buildArrayWith")(264369 'typeof'(264367 call data[264015] 0)) data[264015](264371 call : size[263998] int(64)[10]))
      (264376 'end of statement')
      (264378 call chpl_decRefCountsForDomainsInArrayEltTypes(264380 call . A[264358] c"_value")(264386 'typeof'(264384 call data[264015] 0)))
      (264387 call =(264393 call .(264390 call . A[264358] c"_value") c"_decEltRefCounts") 0)
      (264397 'auto destroy runtime type' elemType[264008])
      (264399 return A[264358])
    }
    {
      (264402 call = data[264015](264406 call _ddata_allocate_noinit elemType[264008] size[263998] callPostAlloc[264023]))
      if(264416 call _cond_test callPostAlloc[264023])
      {
        (264411 call _ddata_allocate_postalloc data[264015] size[263998])
      }
      unknown A[264422] "no copy"(264427 call(264424 call . D[264336] c"buildArrayWith") elemType[264008] data[264015](264430 call : size[263998] int(64)[10]))
      (264435 'end of statement')
      (264436 'auto destroy runtime type' elemType[264008])
      (264438 return A[264422])
    }
  }
  function chpl_arrayToPtrErrorHelper[264450](const  ref arg arr[264455] :
  (264453 call chpl__buildArrayRuntimeType nil[32])) : _unknown[42] "no return value for void"
  {
    if(264484 call _cond_test(264467 call ||(264469 call !(264475 call(264472 call . arr[264455] c"isRectangular")))(264476 call !(264479 call chpl_domainDistIsLayout(264481 call . arr[264455] c"_dom")))))
    {
      (264460 call compilerError "Only single-locale rectangular arrays can be passed to an external routine argument with array type"(errorDepth = 3))
    }
    if(264533 call _cond_test(264523 call !=(264530 call chpl_localeID_to_locale(264529 '_wide_get_locale'(264526 call . arr[264455] c"_value")))(451130 call here[135591])))
    {
      (264490 call halt(264491 call +(264493 call +(264495 call +(264497 call + "An array can only be passed to an external routine from the locale on which it lives (array is on locale "(264502 call :(264511 '_wide_get_node'(264505 call . arr[264455] c"_value")) string[244])) ", call was made on locale ")(264514 call :(264517 call .(408411 call here[135591]) c"id") string[244])) ")"))
    }
  }
  function chpl_arrayToPtr[264540](ref arg arr[264545] :
  (264543 call chpl__buildArrayRuntimeType nil[32]), param arg castToVoidStar[264550] :
  bool[19] =
  0) : _unknown[42]
  {
    (264556 call chpl_arrayToPtrErrorHelper arr[264545])
    const ptr[264562] "const"(264564 call c_pointer_return(264566 call arr[264545](264571 call .(264568 call . arr[264545] c"_dom") c"low")))
    (264575 'end of statement')
    if(264588 call _cond_test castToVoidStar[264550])
    {
      (264576 return(264577 call : ptr[264562](264581 call c_ptr[46891](?) void[4])))
    }
    {
      (264584 return ptr[264562])
    }
    (396912 'used modules list'(264559 'use' CTypes[51217]))
  }
  function chpl_arrayToPtrConst[264596](const  ref arg arr[264601] :
  (264599 call chpl__buildArrayRuntimeType nil[32]), param arg castToVoidStar[264606] :
  bool[19] =
  0) : _unknown[42]
  {
    (264612 call chpl_arrayToPtrErrorHelper arr[264601])
    const ptr[264618] "const"(264620 call c_pointer_return_const(264622 call arr[264601](264627 call .(264624 call . arr[264601] c"_dom") c"low")))
    (264631 'end of statement')
    if(264644 call _cond_test castToVoidStar[264606])
    {
      (264632 return(264633 call : ptr[264618](264637 call c_ptrConst[46990](?) void[4])))
    }
    {
      (264640 return ptr[264618])
    }
    (396914 'used modules list'(264615 'use' CTypes[51217]))
  } writeSerializable[310070] _array[255540](?)
  {
  } readDeserializable[310078] _array[255540](?)
  {
  }
  (396888 'used modules list'(247440 'use' ChapelBase[77907])(247443 'use' ChapelTuple[106204])(247446 'use' ChapelLocale[137388])(247449 'use' ArrayViewSlice[138924])(247452 'use' ArrayViewRankChange[143254])(247455 'use' ArrayViewReindex[147214])(247459 'import' Reflection[1804])(247461 'use' ChapelDebugPrint[107066])(247464 'use' CTypes[51217])(247467 'use' ChapelPrivatization[147262])(247473 'use' ChplConfig[29952] 'only' compiledForSingleLocale, CHPL_LOCALE_MODEL)(247476 'use' ChapelArrayViewElision[149516])(247479 'use' ChapelDomain[225833]))
}