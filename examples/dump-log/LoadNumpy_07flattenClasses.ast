AST dump for LoadNumpy after pass flattenClasses.
Module use list: ChapelStandard Utilities IO 

{
  type NoRankArray[343697] val super[397898]:RootClass[236] "super class"
  type NoRankArray[343700](?)
  type ArrClass[343729](?) val super[397900]:NoRankArray[343697] "super class" unknown rank[343705] "param" int(64)[10] unknown _domain[343710](343712 call chpl__buildDomainRuntimeType defaultDist[288287] rank[343705] int(64)[10]) unknown data[343719](343724 call chpl__buildArrayRuntimeType(343721 call chpl__ensureDomainExpr _domain[343710]) real(64)[13])
  type ArrClass?[468199](?)
  type ArrClass[344079](?)
  function readData[343731](param arg rank[343734] :
  int(64)[10], arg fr[343737]:_any[141](?), arg shape[343743] :
  (343739 call * rank[343734] int(64)[10]), arg dtype[343747] :
  bytes[232]) : _unknown[42]
  {
    const dom[343755] "const"(343759 call domainFromShape module=[222] Utilities[320397](343763 'expand_tuple' shape[343743]))
    (343765 'end of statement')
    unknown A[343767](343774 call chpl__buildArrayRuntimeType(343769 call chpl__ensureDomainExpr dom[343755])(343772 call real(64)[13] 64))
    (343777 'end of statement')
    const isInt[343779] "const"(343780 call ==(343783 call dtype[343747](343786 call chpl_build_bounded_range 0 0)) b"i")
    (343790 'end of statement')
    const sizeSl[343792] "const"(343794 call dtype[343747](343796 call chpl_build_low_bounded_range 1))
    (343799 'end of statement')
    const size[343801] "const"(343802 call *(343804 call : sizeSl[343792] int(64)[10]) 8)
    (343810 'end of statement')
    if(343826 call _cond_test(343817 call &&(343819 call == size[343801] 16)(343823 call ! isInt[343779])))
    {
      (343813 call halt "Chapel doesn't support real(16) or float16.")
    }
    {
      unknown _indexOfInterest[344040] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[344041] "expr temp" "temp"
      (344050 'move' _iterator[344041](344048 call _getIterator dom[343755]))
      Defer
      {
        {
          (344065 call _freeIterator _iterator[344041])
        }
      }
      { scopeless type
        (344055 'move' _indexOfInterest[344040](344052 call iteratorIndex _iterator[344041]))
      }
      ForLoop[344042]
      {
        unknown i[343830] "index var" "insert auto destroy"
        (344060 'move' i[343830] _indexOfInterest[344040])
        {
          unknown v[343835] real(64)[13]
          (343838 'end of statement')
          {
            unknown tmp[344017] "expr temp" "maybe param" "maybe type" "temp"
            (344019 'move' tmp[344017] isInt[343779])
            if(344024 call _cond_test(344021 call == tmp[344017] 1))
            {
              {
                unknown tmp[343924] "expr temp" "maybe param" "maybe type" "temp"
                (343926 'move' tmp[343924] size[343801])
                if(343931 call _cond_test(343928 call == tmp[343924] 8))
                {
                  (343851 call = v[343835](343854 call :(343860 call(343857 call . fr[343737] c"read")(343862 call int(64)[10] 8)) real(64)[13]))
                }
                {
                  if(343937 call _cond_test(343934 call == tmp[343924] 16))
                  {
                    (343870 call = v[343835](343873 call :(343879 call(343876 call . fr[343737] c"read")(343881 call int(64)[10] 16)) real(64)[13]))
                  }
                  {
                    if(343944 call _cond_test(343941 call == tmp[343924] 32))
                    {
                      (343889 call = v[343835](343892 call :(343898 call(343895 call . fr[343737] c"read")(343900 call int(64)[10] 32)) real(64)[13]))
                    }
                    {
                      if(343951 call _cond_test(343948 call == tmp[343924] 64))
                      {
                        (343908 call = v[343835](343911 call :(343917 call(343914 call . fr[343737] c"read")(343919 call int(64)[10] 64)) real(64)[13]))
                      }
                    }
                  }
                }
              }
            }
            {
              if(344030 call _cond_test(344027 call == tmp[344017] 0))
              {
                {
                  unknown tmp[343998] "expr temp" "maybe param" "maybe type" "temp"
                  (344000 'move' tmp[343998] size[343801])
                  if(344005 call _cond_test(344002 call == tmp[343998] 32))
                  {
                    (343966 call = v[343835](343969 call :(343975 call(343972 call . fr[343737] c"read")(343977 call real(64)[13] 32)) real(64)[13]))
                  }
                  {
                    if(344011 call _cond_test(344008 call == tmp[343998] 64))
                    {
                      (343985 call = v[343835](343992 call(343989 call . fr[343737] c"read")(343994 call real(64)[13] 64)))
                    }
                  }
                }
              }
            }
          }
          (344034 call =(344037 call A[343767] i[343830]) v[343835])
        }
        label _continueLabel[344045]
        _indexOfInterest[344040]
        _iterator[344041]
      }
      label _breakLabel[344046]
    }
    unknown Arr[344073](344077 'new'(344081 call ArrClass[344079](?) rank[343734] dom[343755] A[343767]))(344075 call _owned[238](?) NoRankArray[343697])
    (344086 'end of statement')
    (344087 return Arr[344073])
    (344090 'referenced modules list' Utilities[320397])
  }
  { scopeless type
    (343751 call _owned[238](?) NoRankArray[343697])
  }
  function readShape[344094](arg fr[344096]:_any[141](?)) : _unknown[42]
  {
    (344103 call(344100 call . fr[344096] c"readThrough") b"'shape': ("(stripSeparator = 1))
    unknown sizeBytes[344110](344115 call(344112 call . fr[344096] c"readThrough") b"), }"(stripSeparator = 1))
    (344122 'end of statement')
    const nbs[344124] "const"(344129 call(344126 call . sizeBytes[344110] c"split") b", ")
    (344134 'end of statement')
    const sizes[344136] "const"(344144 for  unknown nb[344137] "index var"  in  nbs[344124] do
    {
      (344140 call : nb[344137] int(64)[10])
    } )
    (344147 'end of statement')
    (344148 return sizes[344136])
  }
  function loadNumpyArray[344152](arg path[344155] :
  string[244]) : _unknown[42]
  {
    unknown deserializer[344163](344164 'new'(344169 call binaryDeserializer[175632] little[164135]))
    (344177 'end of statement')
    unknown fr[344179](344182 call openReader module=[222] IO[208303] path[344155](deserializer = deserializer[344163])(locking = 1))
    (344191 'end of statement')
    (344196 call(344193 call . fr[344179] c"readThrough") b"descr': '")
    const desc[344201] "const"(344206 call(344203 call . fr[344179] c"readThrough") b"'"(stripSeparator = 1))
    (344213 'end of statement')
    const dtype[344215] "const"(344217 call desc[344201](344219 call chpl_build_low_bounded_range 1))
    (344222 'end of statement')
    const shapeArr[344224] "const"(344226 call readShape fr[344179])
    (344229 'end of statement')
    (344234 call(344231 call . fr[344179] c"readThrough") b"\n")
    {
      unknown tmp[344338] "expr temp" "maybe param" "maybe type" "temp"
      (344340 'move' tmp[344338](344239 call . shapeArr[344224] c"size"))
      if(344345 call _cond_test(344342 call == tmp[344338] 1))
      {
        (344247 return(344249 call readData 1 fr[344179](344256 call _build_tuple(344254 call shapeArr[344224] 0)) dtype[344215]))
      }
      {
        if(344351 call _cond_test(344348 call == tmp[344338] 2))
        {
          (344264 return(344266 call readData 2 fr[344179](344276 call _build_tuple(344271 call shapeArr[344224] 0)(344274 call shapeArr[344224] 1)) dtype[344215]))
        }
        {
          if(344358 call _cond_test(344355 call == tmp[344338] 3))
          {
            (344284 return(344286 call readData 3 fr[344179](344299 call _build_tuple(344291 call shapeArr[344224] 0)(344294 call shapeArr[344224] 1)(344297 call shapeArr[344224] 2)) dtype[344215]))
          }
          {
            if(344365 call _cond_test(344362 call == tmp[344338] 4))
            {
              (344307 return(344309 call readData 4 fr[344179](344325 call _build_tuple(344314 call shapeArr[344224] 0)(344317 call shapeArr[344224] 1)(344320 call shapeArr[344224] 2)(344323 call shapeArr[344224] 3)) dtype[344215]))
            }
            {
              (344332 return(344333 'new'(344335 call NoRankArray[343700](?))))
            }
          }
        }
      }
    }
    (344370 'referenced modules list' IO[208303] IO[208303] IO[208303])
  }
  { scopeless type
    (344159 call _owned[238](?) NoRankArray[343697])
  }
  function main[344376]() : _unknown[42] "no return value for void"
  {
    unknown result[344380](344382 call loadNumpyArray "/Users/iainmoncrief/Documents/gputil/notebooks/numpy_x.npy")
    (344387 'end of statement')
    if(344440 call _cond_test(344439 'if var' unknown r1Arr[344437](344430 call : result[344380](344434 call ArrClass?[468199](?) 1))))
    {
      (344390 call writeln(344393 call . r1Arr[344437] c"rank") " "(344399 call . r1Arr[344437] c"data"))
    }
    {
      if(344426 call _cond_test(344425 'if var' unknown r2Arr[344423](344416 call : result[344380](344420 call ArrClass?[468199](?) 2))))
      {
        (344404 call writeln(344407 call . r2Arr[344423] c"rank") " "(344413 call . r2Arr[344423] c"data"))
      }
    }
    (344445 call = result[344380](344449 call loadNumpyArray "/Users/iainmoncrief/Documents/gputil/notebooks/numpy_y.npy"))
    if(344505 call _cond_test(344504 'if var' unknown r1Arr[344502](344495 call : result[344380](344499 call ArrClass?[468199](?) 1))))
    {
      (344455 call writeln(344458 call . r1Arr[344502] c"rank") " "(344464 call . r1Arr[344502] c"data"))
    }
    {
      if(344491 call _cond_test(344490 'if var' unknown r2Arr[344488](344481 call : result[344380](344485 call ArrClass?[468199](?) 2))))
      {
        (344469 call writeln(344472 call . r2Arr[344488] c"rank") " "(344478 call . r2Arr[344488] c"data"))
      }
    }
  }
  (397154 'used modules list'(387080 'use' ChapelStandard[315387])(343691 'import' IO[208303])(343694 'import' Utilities[320397] 'as' util))
}