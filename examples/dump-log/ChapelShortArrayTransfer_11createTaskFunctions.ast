AST dump for ChapelShortArrayTransfer after pass createTaskFunctions.
Module use list: ChapelBase ChplConfig ChapelDebugPrint 

{
  function chpl__init_ChapelShortArrayTransfer[468516]() : void[4] "insert line file info" "module init"
  {
    (650950 'init var' debugShortArrayTransfer[247216] 0)
    (247219 'end of statement')
    (650952 'init var' disableShortArrayTransfer[247221] 0)
    (247224 'end of statement')
    (650954 'init var' shortArrayTransferThreshold[247226] 60)
    (247231 'end of statement')
    (623446 return _void[46])
  }
  unknown debugShortArrayTransfer[247216] "config" "param"
  unknown disableShortArrayTransfer[247221] "config" "param"
  unknown shortArrayTransferThreshold[247226] "config" "param"
  function chpl__staticCheckShortArrayTransfer[247232](arg a[247234]:_any[141](?), arg b[247236]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[623421] "RVV" "param" "temp"
    unknown tmp[499341] "maybe param" "temp"
    unknown tmp[499362] "maybe param" "temp"
    (499373 'move' tmp[499362](247244 call ! disableShortArrayTransfer[247221]))
    unknown call_tmp[891669] "expr temp" "maybe param" "maybe type" "temp"
    (891672 'move' call_tmp[891669](499375 call _cond_invalid tmp[499362]))
    if call_tmp[891669]
    {
      (499378 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[698292] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[698293] "maybe param" "temp"
    unknown call_tmp[891674] "expr temp" "maybe param" "maybe type" "temp"
    (891677 'move' call_tmp[891674](499363 call isTrue tmp[499362]))
    (698298 'move' tmp[698293](698296 call _cond_test call_tmp[891674]))
    if tmp[698293]
    {
      unknown tmp[698300] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[891679] "expr temp" "maybe param" "maybe type" "temp"
      (891682 'move' call_tmp[891679](247248 call isProtoSlice a[247234]))
      (698302 'move' tmp[698300](499366 call isTrue call_tmp[891679]))
      (698307 'move' tmp[698292](698304 '_paramFoldLogical' tmp[698293] tmp[698300]))
    }
    {
      (698312 'move' tmp[698292](698309 '_paramFoldLogical' tmp[698293] 0))
    }
    (499352 'move' tmp[499341] tmp[698292])
    unknown call_tmp[891684] "expr temp" "maybe param" "maybe type" "temp"
    (891687 'move' call_tmp[891684](499354 call _cond_invalid tmp[499341]))
    if call_tmp[891684]
    {
      (499357 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[698319] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[698320] "maybe param" "temp"
    unknown call_tmp[891689] "expr temp" "maybe param" "maybe type" "temp"
    (891692 'move' call_tmp[891689](499342 call isTrue tmp[499341]))
    (698325 'move' tmp[698320](698323 call _cond_test call_tmp[891689]))
    if tmp[698320]
    {
      unknown tmp[698327] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[891694] "expr temp" "maybe param" "maybe type" "temp"
      (891697 'move' call_tmp[891694](247251 call isProtoSlice b[247236]))
      (698329 'move' tmp[698327](499345 call isTrue call_tmp[891694]))
      (698334 'move' tmp[698319](698331 '_paramFoldLogical' tmp[698320] tmp[698327]))
    }
    {
      (698339 'move' tmp[698319](698336 '_paramFoldLogical' tmp[698320] 0))
    }
    (623426 'move' ret[623421](623425 'deref' tmp[698319]))
    (623423 return ret[623421])
  }
  function chpl__dynamicCheckShortArrayTransfer[247255](arg a[247257]:_any[141](?), arg b[247259]:_any[141](?)) : _unknown[42] "inline"
  {
    unknown ret[623430] "RVV" "temp"
    unknown msgHeader[247263] "dead at end of block" "param"
    (650956 'init var' msgHeader[247263] "<ShortArrayTransfer> ")
    (247268 'end of statement')
    unknown tmp[499383] "maybe param" "temp"
    (499394 'move' tmp[499383] 1)
    unknown call_tmp[891699] "expr temp" "maybe param" "maybe type" "temp"
    (891702 'move' call_tmp[891699](499396 call _cond_invalid tmp[499383]))
    if call_tmp[891699]
    {
      (499399 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown localCompilation[247270] "dead at end of block" "param"
    unknown tmp[698346] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[698347] "maybe param" "temp"
    unknown call_tmp[891704] "expr temp" "maybe param" "maybe type" "temp"
    (891707 'move' call_tmp[891704](499384 call isTrue tmp[499383]))
    (698352 'move' tmp[698347](698350 call _cond_test call_tmp[891704]))
    if tmp[698347]
    {
      unknown tmp[698354] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[891709] "expr temp" "maybe param" "maybe type" "temp"
      (891712 'move' call_tmp[891709](247274 call == CHPL_LOCALE_MODEL[29682] "flat"))
      (698356 'move' tmp[698354](499387 call isTrue call_tmp[891709]))
      (698361 'move' tmp[698346](698358 '_paramFoldLogical' tmp[698347] tmp[698354]))
    }
    {
      (698366 'move' tmp[698346](698363 '_paramFoldLogical' tmp[698347] 0))
    }
    (650958 'init var' localCompilation[247270] tmp[698346])
    (247281 'end of statement')
    unknown call_tmp[891716] "expr temp" "maybe param" "maybe type" "temp"
    (891719 'move' call_tmp[891716](247290 call(247287 call (partial) sizeAs _mt[203] a[247257]) uint(64)[86]))
    unknown call_tmp[891721] "maybe param" "maybe type" "temp"
    (891724 'move' call_tmp[891721](247284 call < call_tmp[891716] shortArrayTransferThreshold[247226]))
    const sizeOk[247283] "dead at end of block" "const" "insert auto destroy"
    (650960 'init var' sizeOk[247283] call_tmp[891721])
    (247294 'end of statement')
    unknown call_tmp[891728] "expr temp" "maybe param" "maybe type" "temp"
    (891731 'move' call_tmp[891728](247304 call(247301 call (partial) sizeAs _mt[203] a[247257]) uint(64)[86]))
    (247296 call debug "Size: " call_tmp[891728] " Threshold: " shortArrayTransferThreshold[247226])
    (563135 'end of statement')
    unknown call_tmp[891733] "expr temp" "maybe param" "maybe type" "temp"
    (891736 'move' call_tmp[891733](247323 call _cond_test sizeOk[247283]))
    if call_tmp[891733]
    {
      (247311 call debug "size qualifies")
    }
    {
      (247317 call debug "size doesn't qualify")
    }
    unknown call_tmp[891738] "expr temp" "maybe param" "maybe type" "temp"
    (891741 'move' call_tmp[891738](247405 call _cond_test localCompilation[247270]))
    if call_tmp[891738]
    {
      (623435 'move' ret[623430](623434 'deref' sizeOk[247283]))
      gotoReturn _end_chpl__dynamicCheckShortArrayTransfer[623428] _end_chpl__dynamicCheckShortArrayTransfer[623428]
      (563138 'end of statement' sizeOk[247283])
    }
    {
      function chpl_task_getRequestedSubloc[247333]() : _unknown[42] "extern" "local args" "no fn body"
      {
      }
      { scopeless type
        (247336 call int(64)[10] 32)
      }
      unknown call_tmp[891743] "maybe param" "maybe type" "temp"
      (891746 'move' call_tmp[891743](247344 call chpl__bothLocal a[247257] b[247259]))
      const bothLocal[247342] "dead at end of block" "const" "insert auto destroy"
      (650962 'init var' bothLocal[247342] call_tmp[891743])
      (247348 'end of statement')
      unknown tmp[499404] "maybe param" "temp"
      (499415 'move' tmp[499404](247353 call == CHPL_LOCALE_MODEL[29682] "flat"))
      unknown call_tmp[891748] "expr temp" "maybe param" "maybe type" "temp"
      (891751 'move' call_tmp[891748](499417 call _cond_invalid tmp[499404]))
      if call_tmp[891748]
      {
        (499420 call compilerError "cannot promote short-circuiting || operator")
      }
      const notGpu[247350] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[698373] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[698374] "maybe param" "temp"
      unknown call_tmp[891753] "expr temp" "maybe param" "maybe type" "temp"
      (891756 'move' call_tmp[891753](499405 call isTrue tmp[499404]))
      (698379 'move' tmp[698374](698377 call _cond_test call_tmp[891753]))
      if tmp[698374]
      {
        (698384 'move' tmp[698373](698381 '_paramFoldLogical' tmp[698374] 1))
      }
      {
        unknown tmp[698386] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[891758] "expr temp" "maybe param" "maybe type" "temp"
        (891761 'move' call_tmp[891758](247360 call chpl_task_getRequestedSubloc))
        unknown call_tmp[891763] "expr temp" "maybe param" "maybe type" "temp"
        (891766 'move' call_tmp[891763](247357 call < call_tmp[891758] 0))
        (698388 'move' tmp[698386](499409 call isTrue call_tmp[891763]))
        (698393 'move' tmp[698373](698390 '_paramFoldLogical' tmp[698374] tmp[698386]))
      }
      (650964 'init var' notGpu[247350] tmp[698373])
      (247363 'end of statement')
      unknown call_tmp[891768] "expr temp" "maybe param" "maybe type" "temp"
      (891771 'move' call_tmp[891768](247390 call _cond_test bothLocal[247342]))
      if call_tmp[891768]
      {
        unknown call_tmp[891773] "expr temp" "maybe param" "maybe type" "temp"
        (891776 'move' call_tmp[891773](247377 call _cond_test notGpu[247350]))
        if call_tmp[891773]
        {
          (247365 call debug "locality qualifies")
        }
        {
          (247371 call debug "GPU arrays shouldn't be SAT'ed")
        }
      }
      {
        (247384 call debug "locality does not qualify")
      }
      unknown tmp[499425] "maybe param" "temp"
      unknown tmp[499446] "maybe param" "temp"
      (499457 'move' tmp[499446] sizeOk[247283])
      unknown call_tmp[891778] "expr temp" "maybe param" "maybe type" "temp"
      (891781 'move' call_tmp[891778](499459 call _cond_invalid tmp[499446]))
      if call_tmp[891778]
      {
        (499462 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[698400] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[698401] "maybe param" "temp"
      unknown call_tmp[891783] "expr temp" "maybe param" "maybe type" "temp"
      (891786 'move' call_tmp[891783](499447 call isTrue tmp[499446]))
      (698406 'move' tmp[698401](698404 call _cond_test call_tmp[891783]))
      if tmp[698401]
      {
        unknown tmp[698408] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (698410 'move' tmp[698408](499450 call isTrue bothLocal[247342]))
        (698415 'move' tmp[698400](698412 '_paramFoldLogical' tmp[698401] tmp[698408]))
      }
      {
        (698420 'move' tmp[698400](698417 '_paramFoldLogical' tmp[698401] 0))
      }
      (499436 'move' tmp[499425] tmp[698400])
      unknown call_tmp[891788] "expr temp" "maybe param" "maybe type" "temp"
      (891791 'move' call_tmp[891788](499438 call _cond_invalid tmp[499425]))
      if call_tmp[891788]
      {
        (499441 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[698427] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[698428] "maybe param" "temp"
      unknown call_tmp[891793] "expr temp" "maybe param" "maybe type" "temp"
      (891796 'move' call_tmp[891793](499426 call isTrue tmp[499425]))
      (698433 'move' tmp[698428](698431 call _cond_test call_tmp[891793]))
      if tmp[698428]
      {
        unknown tmp[698435] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (698437 'move' tmp[698435](499429 call isTrue notGpu[247350]))
        (698442 'move' tmp[698427](698439 '_paramFoldLogical' tmp[698428] tmp[698435]))
      }
      {
        (698447 'move' tmp[698427](698444 '_paramFoldLogical' tmp[698428] 0))
      }
      (623440 'move' ret[623430](623439 'deref' tmp[698427]))
      gotoReturn _end_chpl__dynamicCheckShortArrayTransfer[623428] _end_chpl__dynamicCheckShortArrayTransfer[623428]
      (563146 'end of statement' notGpu[247350])
    }
    label _end_chpl__dynamicCheckShortArrayTransfer[623428]
    (623432 return ret[623430])
  }
  function debug[247411](arg s[247414]:_any[141](?) ...) : _unknown[42] "private" "no return value for void"
  {
    unknown call_tmp[891798] "expr temp" "maybe param" "maybe type" "temp"
    (891801 'move' call_tmp[891798](247430 call _cond_test debugShortArrayTransfer[247216]))
    if call_tmp[891798]
    {
      (247425 call chpl_debug_writeln "<ShortArrayTransfer> "(247428 'expand_tuple' s[247414]))
    }
    (623444 return _void[46])
    (396886 'used modules list'(247421 'use' ChapelDebugPrint[107066] 'only' chpl_debug_writeln))
  }
  (396883 'used modules list'(247208 'use' ChapelBase[77907])(247213 'use' ChplConfig[29952] 'only' CHPL_LOCALE_MODEL))
}