AST dump for ChapelHashtable after pass scopeResolve.
Module use list: ChapelBase DSIUtil CTypes Math POSIX ChplConfig MemMove 

{
  type chpl__hash_status[264678] def empty[264672]:chpl__hash_status[264678] 0 def full[264674]:chpl__hash_status[264678] def deleted[264676]:chpl__hash_status[264678]
  {
  }
  function chpl_TableEntry[264725](?).isFull[264700](arg _mt[264704]:_MT[201], arg this[264702]:chpl_TableEntry[264725](?)) : _unknown[42] "inline" "method" "primary method"
  {
    (264707 return(264708 call ==(264713 call . this[264702] c"status") full[264674]))
  }
  type chpl_TableEntry[264725](?) unknown status[264684] empty[264672] chpl__hash_status[264678] unknown key[264693] unknown val[264697]
  function _allocateData[264727](arg size[264730] :
  int(64)[10], arg tableEltType[264733]:_any[141](?)) : _unknown[42] "private"
  {
    if(264746 call _cond_test(264742 call == size[264730] 0))
    {
      (264737 call halt "attempt to allocate hashtable with size 0")
    }
    unknown callPostAlloc[264752] bool[19]
    (264755 'end of statement')
    unknown ret[264757](264759 call _ddata_allocate_noinit tableEltType[264733] size[264730] callPostAlloc[264752])
    (264764 'end of statement')
    unknown initMethod[264766](264768 call init_elts_method size[264730] tableEltType[264733])
    (264772 'end of statement')
    const sizeofElement[264774] "const"(264776 call _ddata_sizeof_element ret[264757])
    (264779 'end of statement')
    function ptrTo[264780](ref arg x[264782]:_any[141](?)) : _unknown[42] "inline"
    {
      (264785 return(264787 call c_pointer_return x[264782]))
    }
    {
      unknown tmp[265006] "expr temp" "maybe param" "maybe type" "temp"
      (265008 'move' tmp[265006] initMethod[264766])
      if(265013 call _cond_test(265010 call == tmp[265006] noInit[66979]))
      {
      }
      {
        if(265019 call _cond_test(265016 call == tmp[265006] serialInit[66981]))
        {
          {
            unknown _indexOfInterest[264833] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[264834] "expr temp" "temp"
            (264843 'move' _iterator[264834](264841 call _getIterator(264811 call _allSlots size[264730])))
            Defer
            {
              {
                (264858 call _freeIterator _iterator[264834])
              }
            }
            { scopeless type
              (264848 'move' _indexOfInterest[264833](264845 call iteratorIndex _iterator[264834]))
            }
            ForLoop[264835]
            {
              unknown slot[264808] "index var" "insert auto destroy"
              (264853 'move' slot[264808] _indexOfInterest[264833])
              {
                (264815 call memset(264817 call ptrTo(264819 call ret[264757] slot[264808]))(264821 call : 0(264825 call uint(64)[86] 8))(264831 call(264828 call . sizeofElement[264774] c"safeCast") c_size_t[614]))
              }
              label _continueLabel[264838]
              _indexOfInterest[264833]
              _iterator[264834]
            }
            label _breakLabel[264839]
          }
        }
        {
          if(265026 call _cond_test(265023 call == tmp[265006] parallelInit[66983]))
          {
            Forall[264900] {
              induction variables:
                
                unknown slot[264873] "index var" "insert auto destroy"
              iterated expressions:
                (264876 call _allSlots size[264730])
              shadow variables:
              other variables
                forall body
              {
                (264880 call memset(264882 call ptrTo(264884 call ret[264757] slot[264873]))(264886 call : 0(264890 call uint(64)[86] 8))(264896 call(264893 call . sizeofElement[264774] c"safeCast") c_size_t[614]))
              }
            }
          }
          {
            if(265033 call _cond_test(265030 call == tmp[265006] gpuInit[66985]))
            {
              if(264989 call _cond_test(264985 call == CHPL_LOCALE_MODEL[29682] "gpu"))
              {
                function chpl_gpu_memset[264915](arg addr[264917]:_any[141](?), arg byte[264919]:_any[141](?), arg numBytes[264921]:_any[141](?)) : void[4] "extern" "local args" "no fn body"
                {
                }
                {
                  unknown _indexOfInterest[264947] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[264948] "expr temp" "temp"
                  (264957 'move' _iterator[264948](264955 call _getIterator(264928 call _allSlots size[264730])))
                  Defer
                  {
                    {
                      (264972 call _freeIterator _iterator[264948])
                    }
                  }
                  { scopeless type
                    (264962 'move' _indexOfInterest[264947](264959 call iteratorIndex _iterator[264948]))
                  }
                  ForLoop[264949] order-independent
                  {
                    unknown slot[264925] "index var" "insert auto destroy"
                    (264967 'move' slot[264925] _indexOfInterest[264947])
                    {
                      (264932 call chpl_gpu_memset(264934 call ptrTo(264936 call ret[264757] slot[264925]))(264938 call : 0(264942 call uint(64)[86] 8)) sizeofElement[264774])
                    }
                    label _continueLabel[264952]
                    _indexOfInterest[264947]
                    _iterator[264948]
                  }
                  label _breakLabel[264953]
                }
              }
              {
                (264981 call halt "ArrayInit.gpuInit should not have been selected")
              }
              (396922 'used modules list'(264912 'use' ChplConfig[29952]))
            }
            {
              (264998 call halt "ArrayInit." initMethod[264766] " should have been implemented")
            }
          }
        }
      }
    }
    if(265043 call _cond_test callPostAlloc[264752])
    {
      (265039 call _ddata_allocate_postalloc ret[264757] size[264730])
    }
    (265047 return ret[264757])
  }
  function _freeData[265051](arg data[265053]:_any[141](?), arg size[265056] :
  int(64)[10]) : _unknown[42] "private" "no return value for void"
  {
    if(265069 call _cond_test(265065 call != data[265053] nil[32]))
    {
      (265062 call _ddata_free data[265053] size[265056])
    }
  }
  function _typeNeedsDeinit[265075](arg t[265077]:_any[141](?)) param : _unknown[42] "private"
  {
    (265080 return(265081 'needs auto destroy' t[265077]))
  }
  function _deinitSlot[265085](ref arg aSlot[265088] :
  chpl_TableEntry[264725](?)) : _unknown[42] "private" "no return value for void"
  {
    if(265106 call _cond_test(265100 call _typeNeedsDeinit(265105 'typeof'(265102 call . aSlot[265088] c"key"))))
    {
      (265094 call chpl__autoDestroy(265096 call . aSlot[265088] c"key"))
    }
    if(265124 call _cond_test(265118 call _typeNeedsDeinit(265123 'typeof'(265120 call . aSlot[265088] c"val"))))
    {
      (265112 call chpl__autoDestroy(265114 call . aSlot[265088] c"val"))
    }
  }
  function _isSlotFull[265130](const  ref arg aSlot[265133] :
  chpl_TableEntry[264725](?)) : _unknown[42] "inline" "private"
  {
    (265138 return(265139 call ==(265142 call . aSlot[265133] c"status") full[264674]))
  }
  { scopeless type
    bool[19]
  }
  function _allSlotsNumChunks[265152](arg size[265155] :
  int(64)[10]) : _unknown[42] "private"
  {
    const numTasks[265160] "const"(265170 IfExpr (265161 call == dataParTasksPerLocale[287582] 0) then
    { scopeless
      (265166 call .(408431 call here[135591]) c"maxTaskPar")
    } else
    { scopeless
      dataParTasksPerLocale[287582]
    } )
    (265174 'end of statement')
    const ignoreRunning[265176] "const" dataParIgnoreRunningTasks[287587]
    (265179 'end of statement')
    const minSizePerTask[265181] "const" dataParMinGranularity[287592]
    (265184 'end of statement')
    if(265203 call _cond_test debugAssocDataPar[280618])
    {
      (265187 call writeln "### numTasks = " numTasks[265160])
      (265193 call writeln "### ignoreRunning = " ignoreRunning[265176])
      (265197 call writeln "### minSizePerTask = " minSizePerTask[265181])
    }
    unknown numChunks[265208](265210 call _computeNumChunks numTasks[265160] ignoreRunning[265176] minSizePerTask[265181] size[265155])
    (265216 'end of statement')
    if(265229 call _cond_test debugAssocDataPar[280618])
    {
      (265219 call writeln "### numChunks=" numChunks[265208] ", size=" size[265155])
    }
    (265233 return numChunks[265208])
  }
  function _allSlots[265237](arg size[265240] :
  int(64)[10]) : _unknown[42] "iterator fn" "no return value for void"
  {
    {
      unknown _indexOfInterest[265255] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[265256] "expr temp" "temp"
      (265265 'move' _iterator[265256](265263 call _getIterator(265272 call chpl_direct_counted_range_iter 0 size[265240])))
      Defer
      {
        {
          (265287 call _freeIterator _iterator[265256])
        }
      }
      { scopeless type
        (265277 'move' _indexOfInterest[265255](265274 call iteratorIndex _iterator[265256]))
      }
      ForLoop[265257]
      {
        unknown slot[265244] "index var" "insert auto destroy"
        (265282 'move' slot[265244] _indexOfInterest[265255])
        {
          (265253 yield slot[265244])
        }
        label _continueLabel[265260]
        _indexOfInterest[265255]
        _iterator[265256]
      }
      label _breakLabel[265261]
    }
  }
  function _allSlots[265296](arg size[265299] :
  int(64)[10], param arg tag[265303] :
  iterKind[52144]) : _unknown[42] "iterator fn" "private" "no return value for void"
  {
    if(265321 call _cond_test debugDefaultAssoc[280613])
    {
      (265316 call writeln "*** In associative domain _allSlots standalone iterator")
    }
    const numChunks[265326] "const"(265328 call _allSlotsNumChunks size[265299])
    (265331 'end of statement')
    {
      unknown tmpIter[390884] "expr temp" "maybe ref" "no copy" "temp"
      (390887 'move' tmpIter[390884](265334 call #(265337 call chpl_build_low_bounded_range 0) numChunks[265326]))
      unknown isBounded[391107] "maybe param" "temp"
      (391113 'move' isBounded[391107](391109 call chpl_supportsBoundedCoforall tmpIter[390884] 0))
      if isBounded[391107]
      {
        const _coforallCount[390976] "const" "end count" "temp"
        (391044 'move' _coforallCount[390976](391041 call _endCountAlloc 1))
        unknown numTasks[390977] "temp"
        (391028 'move' numTasks[390977](391024 call chpl_boundedCoforallSize tmpIter[390884] 0))
        (391019 call _upEndCount _coforallCount[390976] 1 numTasks[390977])
        (391016 call chpl_resetTaskSpawn numTasks[390977])
        unknown _indexOfInterest[390984] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[390985] "expr temp" "temp"
        (390994 'move' _iterator[390985](390992 call _getIterator tmpIter[390884]))
        Defer
        {
          {
            (391009 call _freeIterator _iterator[390985])
          }
        }
        { scopeless type
          (390999 'move' _indexOfInterest[390984](390996 call iteratorIndex _iterator[390985]))
        }
        ForLoop[390986]
        {
          unknown chunk[390891] "coforall index var" "index var" "insert auto destroy"
          (391004 'move' chunk[390891] _indexOfInterest[390984])
          {
            {
              const tmp[390895] "const" "temp"(390897 call _computeBlock size[265299] numChunks[265326] chunk[390891](390902 call - size[265299] 1))
              (390907 call _check_tuple_var_decl tmp[390895] 2)
              const lo[390910] "const"(390912 call tmp[390895] 0)
              const hi[390915] "const"(390917 call tmp[390895] 1)
              (390920 'end of statement')
              if(390922 call _cond_test debugAssocDataPar[280618])
              {
                (390927 call writeln "*** chunk: " chunk[390891] " owns "(390932 call chpl_build_bounded_range lo[390910] hi[390915]))
              }
              {
                unknown _indexOfInterest[390937] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[390939] "expr temp" "temp"
                (390941 'move' _iterator[390939](390944 call _getIterator(390946 call chpl_direct_range_iter lo[390910] hi[390915])))
                Defer
                {
                  {
                    (390951 call _freeIterator _iterator[390939])
                  }
                }
                { scopeless type
                  (390955 'move' _indexOfInterest[390937](390958 call iteratorIndex _iterator[390939]))
                }
                ForLoop[390960]
                {
                  unknown slot[390963] "index var" "insert auto destroy"
                  (390965 'move' slot[390963] _indexOfInterest[390937])
                  {
                    (390969 yield slot[390963])
                  }
                  label _continueLabel[390971]
                  _indexOfInterest[390937]
                  _iterator[390939]
                }
                label _breakLabel[390973]
              }
            }
            (390979 call _downEndCount _coforallCount[390976] nil[32])
            (390978 'coforall loop')
          }
          label _continueLabel[390989]
          _indexOfInterest[390984]
          _iterator[390985]
        }
        label _breakLabel[390990]
        Defer
        {
          {
            (391031 call _endCountFree _coforallCount[390976])
          }
        }
        (391036 call _waitEndCount _coforallCount[390976] 1 numTasks[390977])
      }
      {
        const _coforallCount[391048] "const" "end count" "temp"
        (391104 'move' _coforallCount[391048](391101 call _endCountAlloc 1))
        unknown _indexOfInterest[391056] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[391057] "expr temp" "temp"
        (391066 'move' _iterator[391057](391064 call _getIterator tmpIter[390884]))
        Defer
        {
          {
            (391081 call _freeIterator _iterator[391057])
          }
        }
        { scopeless type
          (391071 'move' _indexOfInterest[391056](391068 call iteratorIndex _iterator[391057]))
        }
        ForLoop[391058]
        {
          unknown chunk[265332] "coforall index var" "index var" "insert auto destroy"
          (391076 'move' chunk[265332] _indexOfInterest[391056])
          (391088 call _upEndCount _coforallCount[391048] 1)
          {
            {
              const tmp[265355] "const" "temp"(265347 call _computeBlock size[265299] numChunks[265326] chunk[265332](265351 call - size[265299] 1))
              (265362 call _check_tuple_var_decl tmp[265355] 2)
              const lo[265342] "const"(265356 call tmp[265355] 0)
              const hi[265344] "const"(265359 call tmp[265355] 1)
              (265367 'end of statement')
              if(265383 call _cond_test debugAssocDataPar[280618])
              {
                (265369 call writeln "*** chunk: " chunk[265332] " owns "(265379 call chpl_build_bounded_range lo[265342] hi[265344]))
              }
              {
                unknown _indexOfInterest[265397] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[265398] "expr temp" "temp"
                (265407 'move' _iterator[265398](265405 call _getIterator(265411 call chpl_direct_range_iter lo[265342] hi[265344])))
                Defer
                {
                  {
                    (265426 call _freeIterator _iterator[265398])
                  }
                }
                { scopeless type
                  (265416 'move' _indexOfInterest[265397](265413 call iteratorIndex _iterator[265398]))
                }
                ForLoop[265399]
                {
                  unknown slot[265388] "index var" "insert auto destroy"
                  (265421 'move' slot[265388] _indexOfInterest[265397])
                  {
                    (265395 yield slot[265388])
                  }
                  label _continueLabel[265402]
                  _indexOfInterest[265397]
                  _iterator[265398]
                }
                label _breakLabel[265403]
              }
            }
            (391051 call _downEndCount _coforallCount[391048] nil[32])
            (391050 'coforall loop')
          }
          label _continueLabel[391061]
          _indexOfInterest[391056]
          _iterator[391057]
        }
        label _breakLabel[391062]
        Defer
        {
          {
            (391092 call _endCountFree _coforallCount[391048])
          }
        }
        (391097 call _waitEndCount _coforallCount[391048] 1)
      }
    }
  }
  where {
    (265306 call == tag[265303] standalone[52142])
  }
  function _allSlots[265437](arg size[265440] :
  int(64)[10], param arg tag[265444] :
  iterKind[52144]) : _unknown[42] "iterator fn" "private" "no return value for void"
  {
    if(265462 call _cond_test debugDefaultAssoc[280613])
    {
      (265456 call writeln "*** In associative domain _allSlots leader iterator:")
    }
    const numChunks[265468] "const"(265470 call _allSlotsNumChunks size[265440])
    (265473 'end of statement')
    {
      unknown tmpIter[391117] "expr temp" "maybe ref" "no copy" "temp"
      (391120 'move' tmpIter[391117](265476 call #(265479 call chpl_build_low_bounded_range 0) numChunks[265468]))
      unknown isBounded[391308] "maybe param" "temp"
      (391314 'move' isBounded[391308](391310 call chpl_supportsBoundedCoforall tmpIter[391117] 0))
      if isBounded[391308]
      {
        const _coforallCount[391177] "const" "end count" "temp"
        (391245 'move' _coforallCount[391177](391242 call _endCountAlloc 1))
        unknown numTasks[391178] "temp"
        (391229 'move' numTasks[391178](391225 call chpl_boundedCoforallSize tmpIter[391117] 0))
        (391220 call _upEndCount _coforallCount[391177] 1 numTasks[391178])
        (391217 call chpl_resetTaskSpawn numTasks[391178])
        unknown _indexOfInterest[391185] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[391186] "expr temp" "temp"
        (391195 'move' _iterator[391186](391193 call _getIterator tmpIter[391117]))
        Defer
        {
          {
            (391210 call _freeIterator _iterator[391186])
          }
        }
        { scopeless type
          (391200 'move' _indexOfInterest[391185](391197 call iteratorIndex _iterator[391186]))
        }
        ForLoop[391187]
        {
          unknown chunk[391124] "coforall index var" "index var" "insert auto destroy"
          (391205 'move' chunk[391124] _indexOfInterest[391185])
          {
            {
              const tmp[391128] "const" "temp"(391130 call _computeBlock size[265440] numChunks[265468] chunk[391124](391135 call - size[265440] 1))
              (391140 call _check_tuple_var_decl tmp[391128] 2)
              const lo[391143] "const"(391145 call tmp[391128] 0)
              const hi[391148] "const"(391150 call tmp[391128] 1)
              (391153 'end of statement')
              if(391155 call _cond_test debugDefaultAssoc[280613])
              {
                (391160 call writeln "*** DI[" chunk[391124] "]: tuple = "(391165 call _build_tuple(391167 call chpl_build_bounded_range lo[391143] hi[391148])))
              }
              (391171 yield(391173 call chpl_build_bounded_range lo[391143] hi[391148]))
            }
            (391180 call _downEndCount _coforallCount[391177] nil[32])
            (391179 'coforall loop')
          }
          label _continueLabel[391190]
          _indexOfInterest[391185]
          _iterator[391186]
        }
        label _breakLabel[391191]
        Defer
        {
          {
            (391232 call _endCountFree _coforallCount[391177])
          }
        }
        (391237 call _waitEndCount _coforallCount[391177] 1 numTasks[391178])
      }
      {
        const _coforallCount[391249] "const" "end count" "temp"
        (391305 'move' _coforallCount[391249](391302 call _endCountAlloc 1))
        unknown _indexOfInterest[391257] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[391258] "expr temp" "temp"
        (391267 'move' _iterator[391258](391265 call _getIterator tmpIter[391117]))
        Defer
        {
          {
            (391282 call _freeIterator _iterator[391258])
          }
        }
        { scopeless type
          (391272 'move' _indexOfInterest[391257](391269 call iteratorIndex _iterator[391258]))
        }
        ForLoop[391259]
        {
          unknown chunk[265474] "coforall index var" "index var" "insert auto destroy"
          (391277 'move' chunk[265474] _indexOfInterest[391257])
          (391289 call _upEndCount _coforallCount[391249] 1)
          {
            {
              const tmp[265497] "const" "temp"(265489 call _computeBlock size[265440] numChunks[265468] chunk[265474](265493 call - size[265440] 1))
              (265504 call _check_tuple_var_decl tmp[265497] 2)
              const lo[265484] "const"(265498 call tmp[265497] 0)
              const hi[265486] "const"(265501 call tmp[265497] 1)
              (265509 'end of statement')
              if(265528 call _cond_test debugDefaultAssoc[280613])
              {
                (265511 call writeln "*** DI[" chunk[265474] "]: tuple = "(265524 call _build_tuple(265522 call chpl_build_bounded_range lo[265484] hi[265486])))
              }
              (265533 yield(265536 call chpl_build_bounded_range lo[265484] hi[265486]))
            }
            (391252 call _downEndCount _coforallCount[391249] nil[32])
            (391251 'coforall loop')
          }
          label _continueLabel[391262]
          _indexOfInterest[391257]
          _iterator[391258]
        }
        label _breakLabel[391263]
        Defer
        {
          {
            (391293 call _endCountFree _coforallCount[391249])
          }
        }
        (391298 call _waitEndCount _coforallCount[391249] 1)
      }
    }
  }
  where {
    (265447 call == tag[265444] leader[52138])
  }
  function _allSlots[265542](arg size[265545] :
  int(64)[10], arg followThis[265548]:_any[141](?), param arg tag[265551] :
  iterKind[52144]) : _unknown[42] "iterator fn" "private" "no return value for void"
  {
    unknown tmp[265568] "temp" followThis[265548]
    (265575 call _check_tuple_var_decl tmp[265568] 2)
    unknown chunk[265563](265569 call tmp[265568] 0)
    unknown followThisDom[265565](265572 call tmp[265568] 1)
    (265580 'end of statement')
    if(265592 call _cond_test debugDefaultAssoc[280613])
    {
      (265582 call writeln "In associative domain _allSlots follower iterator: " "Following " chunk[265563])
    }
    {
      unknown _indexOfInterest[265605] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[265606] "expr temp" "temp"
      (265615 'move' _iterator[265606](265613 call _getIterator chunk[265563]))
      Defer
      {
        {
          (265630 call _freeIterator _iterator[265606])
        }
      }
      { scopeless type
        (265620 'move' _indexOfInterest[265605](265617 call iteratorIndex _iterator[265606]))
      }
      ForLoop[265607] order-independent
      {
        unknown slot[265597] "index var" "insert auto destroy"
        (265625 'move' slot[265597] _indexOfInterest[265605])
        {
          (265601 yield slot[265597])
        }
        label _continueLabel[265610]
        _indexOfInterest[265605]
        _iterator[265606]
      }
      label _breakLabel[265611]
    }
  }
  where {
    (265554 call == tag[265551] follower[52140])
  }
  function chpl__rehashHelpers[265685].startRehash[265641](arg _mt[265649]:_MT[201], arg this[265643]:chpl__rehashHelpers[265685], arg newSize[265646] :
  int(64)[10]) : _unknown[42] "method" "primary method" "no return value for void"
  {
  }
  function chpl__rehashHelpers[265685].moveElementDuringRehash[265654](arg _mt[265666]:_MT[201], arg this[265656]:chpl__rehashHelpers[265685], arg oldSlot[265659] :
  int(64)[10], arg newSlot[265663] :
  int(64)[10]) : _unknown[42] "method" "primary method" "no return value for void"
  {
  }
  function chpl__rehashHelpers[265685].finishRehash[265671](arg _mt[265679]:_MT[201], arg this[265673]:chpl__rehashHelpers[265685], arg oldSize[265676] :
  int(64)[10]) : _unknown[42] "method" "primary method" "no return value for void"
  {
  }
  type chpl__rehashHelpers[265685] val super[397647]:RootClass[236] "super class"
  type borrowed chpl__rehashHelpers?[468163]
  type chpl__rehashHelpers?[468160](?)
  type chpl__rehashHelpers[451244](?)
  function chpl__hashtable[267644](?).init[265742](arg _mt[265767]:_MT[201], arg this[265744]:chpl__hashtable[267644](?), arg keyType[265746]:_any[141](?), arg valType[265748]:_any[141](?), arg resizeThreshold[265751] =
  defaultHashTableResizeThreshold[209951], arg initialCapacity[265755] =
  16, in arg rehashHelpers[265763] :
  (265759 call _owned[238](?) borrowed chpl__rehashHelpers?[468163]) =
  nil[32]) : _unknown[42] "method" "primary method" "no return value for void"
  {
    if(265780 call _cond_test(265778 call isDomainType keyType[265746]))
    {
      (265771 call compilerError "Values of 'domain' type do not support hash functions yet" 2)
    }
    (265785 call =(265790 call . this[265744] c"keyType") keyType[265746])
    (265794 call =(265797 call . this[265744] c"valType") valType[265748])
    (265801 call =(265806 call . this[265744] c"tableNumFullSlots") 0)
    (265810 call =(265815 call . this[265744] c"tableNumDeletedSlots") 0)
    (265819 call =(265824 call . this[265744] c"tableSize") 0)
    (265828 call =(265833 call . this[265744] c"rehashHelpers") rehashHelpers[265763])
    (265837 call =(265842 call . this[265744] c"postponeResize") 0)
    (265846 call =(265851 call . this[265744] c"resizeThreshold") resizeThreshold[265751])
    (265855 call =(265860 call . this[265744] c"startingSize")(265863 call << 2(265867 call log2(265868 call -(265870 call :(265872 call / initialCapacity[265755] resizeThreshold[265751]) int(64)[10]) 1))))
    (265882 call(265879 call . this[265744] c"chpl__initThisType"))
    (265883 call =(265888 call . this[265744] c"table")(265892 call(451261 call . this[265744] c"allocateTable")(265894 call . this[265744] c"tableSize")))
  }
  function chpl__hashtable[267644](?).deinit[265899](arg _mt[265903]:_MT[201], arg this[265901]:chpl__hashtable[267644](?)) : _unknown[42] "destructor" "method" "primary method" "no return value for void"
  {
    if(266030 call _cond_test(266022 call ||(266025 call _typeNeedsDeinit(451322 call . this[265901] c"keyType"))(266028 call _typeNeedsDeinit(451327 call . this[265901] c"valType"))))
    {
      if(266018 call _cond_test(265994 call &&(265996 call ||(265998 call !(266001 call _typeNeedsDeinit(451292 call . this[265901] c"keyType")))(266004 call _deinitElementsIsParallel(451297 call . this[265901] c"keyType")(451302 call . this[265901] c"tableSize")))(266007 call ||(266009 call !(266012 call _typeNeedsDeinit(451307 call . this[265901] c"valType")))(266015 call _deinitElementsIsParallel(451312 call . this[265901] c"valType")(451317 call . this[265901] c"tableSize")))))
      {
        Forall[265934] {
          induction variables:
            
            unknown slot[265908] "index var" "insert auto destroy"
          iterated expressions:
            (265911 call _allSlots(451266 call . this[265901] c"tableSize"))
          shadow variables:
          other variables
            forall body
          {
            unknown aSlot[265915] "ref var"(265917 call(451271 call . this[265901] c"table") slot[265908])
            (265920 'end of statement')
            if(265928 call _cond_test(265926 call _isSlotFull aSlot[265915]))
            {
              (265923 call _deinitSlot aSlot[265915])
            }
          }
        }
      }
      {
        {
          unknown _indexOfInterest[265962] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[265963] "expr temp" "temp"
          (265972 'move' _iterator[265963](265970 call _getIterator(265941 call _allSlots(451279 call . this[265901] c"tableSize"))))
          Defer
          {
            {
              (265987 call _freeIterator _iterator[265963])
            }
          }
          { scopeless type
            (265977 'move' _indexOfInterest[265962](265974 call iteratorIndex _iterator[265963]))
          }
          ForLoop[265964]
          {
            unknown slot[265938] "index var" "insert auto destroy"
            (265982 'move' slot[265938] _indexOfInterest[265962])
            {
              unknown aSlot[265945] "ref var"(265947 call(451284 call . this[265901] c"table") slot[265938])
              (265950 'end of statement')
              if(265958 call _cond_test(265956 call _isSlotFull aSlot[265945]))
              {
                (265953 call _deinitSlot aSlot[265945])
              }
            }
            label _continueLabel[265967]
            _indexOfInterest[265962]
            _iterator[265963]
          }
          label _breakLabel[265968]
        }
      }
    }
    (266035 call _freeData(451332 call . this[265901] c"table")(451337 call . this[265901] c"tableSize"))
  }
  function chpl__hashtable[267644](?).isSlotFull[266040](arg _mt[266048]:_MT[201], arg this[266042]:chpl__hashtable[267644](?), arg slot[266045] :
  int(64)[10]) : _unknown[42] "inline" "method" "primary method"
  {
    (266052 return(266053 call ==(266058 call .(266056 call(451343 call . this[266042] c"table") slot[266045]) c"status") full[264674]))
  }
  { scopeless type
    bool[19]
  }
  function chpl__hashtable[267644](?).allSlots[266068](arg _mt[266072]:_MT[201], arg this[266070]:chpl__hashtable[267644](?)) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[266083] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[266084] "expr temp" "temp"
      (266093 'move' _iterator[266084](266091 call _getIterator(266078 call _allSlots(451349 call . this[266070] c"tableSize"))))
      Defer
      {
        {
          (266108 call _freeIterator _iterator[266084])
        }
      }
      { scopeless type
        (266098 'move' _indexOfInterest[266083](266095 call iteratorIndex _iterator[266084]))
      }
      ForLoop[266085]
      {
        unknown slot[266075] "index var" "insert auto destroy"
        (266103 'move' slot[266075] _indexOfInterest[266083])
        {
          (266081 yield slot[266075])
        }
        label _continueLabel[266088]
        _indexOfInterest[266083]
        _iterator[266084]
      }
      label _breakLabel[266089]
    }
  }
  function chpl__hashtable[267644](?).allSlots[266117](arg _mt[266125]:_MT[201], arg this[266119]:chpl__hashtable[267644](?), param arg tag[266122] :
  iterKind[52144]) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[266145] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[266146] "expr temp" "temp"
      (266155 'move' _iterator[266146](266153 call _getIterator(266138 call _allSlots(451357 call . this[266119] c"tableSize")(tag = tag[266122]))))
      Defer
      {
        {
          (266170 call _freeIterator _iterator[266146])
        }
      }
      { scopeless type
        (266160 'move' _indexOfInterest[266145](266157 call iteratorIndex _iterator[266146]))
      }
      ForLoop[266147]
      {
        unknown slot[266135] "index var" "insert auto destroy"
        (266165 'move' slot[266135] _indexOfInterest[266145])
        {
          (266143 yield slot[266135])
        }
        label _continueLabel[266150]
        _indexOfInterest[266145]
        _iterator[266146]
      }
      label _breakLabel[266151]
    }
  }
  where {
    (266127 call == tag[266122] standalone[52142])
  }
  function chpl__hashtable[267644](?).allSlots[266180](arg _mt[266188]:_MT[201], arg this[266182]:chpl__hashtable[267644](?), param arg tag[266185] :
  iterKind[52144]) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[266208] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[266209] "expr temp" "temp"
      (266218 'move' _iterator[266209](266216 call _getIterator(266201 call _allSlots(451366 call . this[266182] c"tableSize")(tag = tag[266185]))))
      Defer
      {
        {
          (266233 call _freeIterator _iterator[266209])
        }
      }
      { scopeless type
        (266223 'move' _indexOfInterest[266208](266220 call iteratorIndex _iterator[266209]))
      }
      ForLoop[266210]
      {
        unknown followThis[266198] "index var" "insert auto destroy"
        (266228 'move' followThis[266198] _indexOfInterest[266208])
        {
          (266206 yield followThis[266198])
        }
        label _continueLabel[266213]
        _indexOfInterest[266208]
        _iterator[266209]
      }
      label _breakLabel[266214]
    }
  }
  where {
    (266190 call == tag[266185] leader[52138])
  }
  function chpl__hashtable[267644](?).allSlots[266243](arg _mt[266253]:_MT[201], arg this[266245]:chpl__hashtable[267644](?), arg followThis[266247]:_any[141](?), param arg tag[266250] :
  iterKind[52144]) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[266274] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[266275] "expr temp" "temp"
      (266284 'move' _iterator[266275](266282 call _getIterator(266266 call _allSlots(451375 call . this[266245] c"tableSize") followThis[266247](tag = tag[266250]))))
      Defer
      {
        {
          (266299 call _freeIterator _iterator[266275])
        }
      }
      { scopeless type
        (266289 'move' _indexOfInterest[266274](266286 call iteratorIndex _iterator[266275]))
      }
      ForLoop[266276]
      {
        unknown i[266263] "index var" "insert auto destroy"
        (266294 'move' i[266263] _indexOfInterest[266274])
        {
          (266272 yield i[266263])
        }
        label _continueLabel[266279]
        _indexOfInterest[266274]
        _iterator[266275]
      }
      label _breakLabel[266280]
    }
  }
  where {
    (266255 call == tag[266250] follower[52140])
  }
  function chpl__hashtable[267644](?).keysMatch[266309](arg _mt[266322]:_MT[201], arg this[266311]:chpl__hashtable[267644](?), arg key1[266315] :
  unknown t[266313], arg key2[266319] :
  t[266313]) : _unknown[42] "method" "primary method"
  {
    if(266343 call _cond_test(266340 call isArrayType(266342 'typeof' key2[266319])))
    {
      (266326 return(266331 call(266328 call . key1[266315] c"equals") key2[266319]))
    }
    {
      (266334 return(266335 call == key1[266315] key2[266319]))
    }
  }
  function chpl__hashtable[267644](?)._findSlot[266349](arg _mt[266357]:_MT[201], arg this[266351]:chpl__hashtable[267644](?), arg key[266354] :
  (451388 call . this[266351] c"keyType")) : _unknown[42] "method" "primary method"
  {
    unknown firstOpen[266366](266367 call - 1)
    (266371 'end of statement')
    {
      unknown _indexOfInterest[266472] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[266473] "expr temp" "temp"
      (266482 'move' _iterator[266473](266480 call _getIterator(266375 call(451395 call . this[266351] c"_lookForSlots") key[266354])))
      Defer
      {
        {
          (266497 call _freeIterator _iterator[266473])
        }
      }
      { scopeless type
        (266487 'move' _indexOfInterest[266472](266484 call iteratorIndex _iterator[266473]))
      }
      ForLoop[266474]
      {
        unknown slotNum[266372] "index var" "insert auto destroy"
        (266492 'move' slotNum[266372] _indexOfInterest[266472])
        {
          const slotStatus[266379] "const"(266383 call .(266381 call(451401 call . this[266351] c"table") slotNum[266372]) c"status")
          (266387 'end of statement')
          if(266467 call _cond_test(266460 call == slotStatus[266379] empty[264672]))
          {
            if(266400 call _cond_test(266394 call == firstOpen[266366](266397 call - 1)))
            {
              (266389 call = firstOpen[266366] slotNum[266372])
            }
            (266405 return(266409 call _build_tuple 0 firstOpen[266366]))
          }
          {
            if(266456 call _cond_test(266449 call == slotStatus[266379] full[264674]))
            {
              if(266428 call _cond_test(266420 call(451413 call . this[266351] c"keysMatch")(266424 call .(266422 call(451418 call . this[266351] c"table") slotNum[266372]) c"key") key[266354]))
              {
                (266413 return(266417 call _build_tuple 1 slotNum[266372]))
              }
            }
            {
              if(266444 call _cond_test(266438 call == firstOpen[266366](266441 call - 1)))
              {
                (266433 call = firstOpen[266366] slotNum[266372])
              }
            }
          }
        }
        label _continueLabel[266477]
        _indexOfInterest[266472]
        _iterator[266473]
      }
      label _breakLabel[266478]
    }
    (266504 return(266510 call _build_tuple 0(266507 call - 1)))
  }
  { scopeless type
    (266362 call _build_tuple bool[19] int(64)[10])
  }
  function chpl__hashtable[267644](?)._lookForSlots[266515](arg _mt[266527]:_MT[201], arg this[266517]:chpl__hashtable[267644](?), arg key[266520] :
  (451430 call . this[266517] c"keyType"), arg numSlots[266524] =
  (451435 call . this[266517] c"tableSize")) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(266536 call _cond_test(266532 call == numSlots[266524] 0))
    {
      (266530 return _void[46])
    }
    unknown currentSlot[266542](266543 call :(266546 call chpl__defaultHashWrapper key[266520]) uint(64)[86])
    (266550 'end of statement')
    const mask[266552] "const"(266553 call - numSlots[266524] 1)
    (266558 'end of statement')
    {
      unknown _indexOfInterest[266594] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[266595] "expr temp" "temp"
      (266604 'move' _iterator[266595](266602 call _getIterator(266608 call chpl_direct_range_iter 1 numSlots[266524])))
      Defer
      {
        {
          (266623 call _freeIterator _iterator[266595])
        }
      }
      { scopeless type
        (266613 'move' _indexOfInterest[266594](266610 call iteratorIndex _iterator[266595]))
      }
      ForLoop[266596] order-independent
      {
        unknown probe[266559] "index var" "insert auto destroy"
        (266618 'move' probe[266559] _indexOfInterest[266594])
        {
          unknown uprobe[266573](266574 call : probe[266559] uint(64)[86])
          (266579 'end of statement')
          (266580 yield(266581 call :(266583 call & currentSlot[266567] mask[266552]) int(64)[10]))
          (266588 call += currentSlot[266567] uprobe[266573])
        }
        label _continueLabel[266599]
        _indexOfInterest[266594]
        _iterator[266595]
      }
      label _breakLabel[266600]
    }
  }
  function chpl__hashtable[267644](?).findAvailableSlot[266632](arg _mt[266640]:_MT[201], ref arg this[266634]:chpl__hashtable[267644](?), arg key[266637] :
  (451449 call . this[266634] c"keyType")) : _unknown[42] "method" "primary method"
  {
    unknown slotNum[266649](266650 call - 1)
    (266654 'end of statement')
    unknown foundSlot[266656] 0
    (266659 'end of statement')
    if(266684 call _cond_test(266665 call >(266667 call :(266669 call *(266671 call +(266673 call +(451461 call . this[266634] c"tableNumFullSlots")(451466 call . this[266634] c"tableNumDeletedSlots")) 1)(266678 call / 1(451471 call . this[266634] c"resizeThreshold"))) int(64)[10])(451476 call . this[266634] c"tableSize")))
    {
      (266662 call(451456 call . this[266634] c"resize")(grow = 1))
    }
    (266696 call =(266691 call _build_tuple foundSlot[266656] slotNum[266649])(266694 call(451484 call . this[266634] c"_findSlot") key[266637]))
    if(266751 call _cond_test(266747 call >= slotNum[266649] 0))
    {
      (266699 return(266703 call _build_tuple foundSlot[266656] slotNum[266649]))
    }
    {
      (266707 call(451493 call . this[266634] c"rehash")(451498 call . this[266634] c"tableSize"))
      (266717 call =(266712 call _build_tuple foundSlot[266656] slotNum[266649])(266715 call(451504 call . this[266634] c"_findSlot") key[266637]))
      if(266737 call _cond_test(266733 call < slotNum[266649] 0))
      {
        (266721 call halt "couldn't add key -- "(451510 call . this[266634] c"tableNumFullSlots") " / "(451515 call . this[266634] c"tableSize") " taken")
      }
      (266741 return(266745 call _build_tuple foundSlot[266656] slotNum[266649]))
    }
  }
  { scopeless type
    (266645 call _build_tuple bool[19] int(64)[10])
  }
  function chpl__hashtable[267644](?).fillSlot[266758](arg _mt[266777]:_MT[201], ref arg this[266760]:chpl__hashtable[267644](?), ref arg tableEntry[266766] :
  (266763 call chpl_TableEntry[264725](?)(451525 call . this[266760] c"keyType")(451530 call . this[266760] c"valType")), in arg key[266770] :
  (451535 call . this[266760] c"keyType"), in arg val[266774] :
  (451540 call . this[266760] c"valType")) : _unknown[42] "method" "primary method" "no return value for void"
  {
    if(266823 call _cond_test(266813 call ==(266816 call . tableEntry[266766] c"status") full[264674]))
    {
      (266785 call _deinitSlot tableEntry[266766])
    }
    {
      if(266805 call _cond_test(266793 call ==(266796 call . tableEntry[266766] c"status") deleted[264676]))
      {
        (266789 call -=(451546 call . this[266760] c"tableNumDeletedSlots") 1)
      }
      (266809 call +=(451551 call . this[266760] c"tableNumFullSlots") 1)
    }
    (266827 call =(266830 call . tableEntry[266766] c"status") full[264674])
    (266838 call moveInitialize(266840 call . tableEntry[266766] c"key") key[266770])
    (266845 call moveInitialize(266847 call . tableEntry[266766] c"val") val[266774])
    (396924 'used modules list'(266781 'use' MemMove[209934]))
  }
  function chpl__hashtable[267644](?).fillSlot[266853](arg _mt[266869]:_MT[201], ref arg this[266855]:chpl__hashtable[267644](?), arg slotNum[266858] :
  int(64)[10], in arg key[266862] :
  (451558 call . this[266855] c"keyType"), in arg val[266866] :
  (451563 call . this[266855] c"valType")) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown tableEntry[266873] "ref var"(266875 call(451568 call . this[266855] c"table") slotNum[266858])
    (266878 'end of statement')
    (266880 call(451573 call . this[266855] c"fillSlot") tableEntry[266873] key[266862] val[266866])
  }
  function chpl__hashtable[267644](?).findFullSlot[266886](arg _mt[266894]:_MT[201], arg this[266888]:chpl__hashtable[267644](?), arg key[266891] :
  (451581 call . this[266888] c"keyType")) : _unknown[42] "method" "primary method"
  {
    unknown slotNum[266903](266904 call - 1)
    (266908 'end of statement')
    unknown foundSlot[266910] 0
    (266913 'end of statement')
    (266922 call =(266917 call _build_tuple foundSlot[266910] slotNum[266903])(266920 call(451588 call . this[266888] c"_findSlot") key[266891]))
    (266924 return(266928 call _build_tuple foundSlot[266910] slotNum[266903]))
  }
  { scopeless type
    (266899 call _build_tuple bool[19] int(64)[10])
  }
  function chpl__hashtable[267644](?).clearSlot[266933](arg _mt[266952]:_MT[201], ref arg this[266935]:chpl__hashtable[267644](?), ref arg tableEntry[266941] :
  (266938 call chpl_TableEntry[264725](?)(451597 call . this[266935] c"keyType")(451602 call . this[266935] c"valType")), out arg key[266945] :
  (451607 call . this[266935] c"keyType"), out arg val[266949] :
  (451612 call . this[266935] c"valType")) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (266958 call = key[266945](266962 call moveFrom(266964 call . tableEntry[266941] c"key")))
    (266967 call = val[266949](266971 call moveFrom(266973 call . tableEntry[266941] c"val")))
    (266976 call =(266979 call . tableEntry[266941] c"status") deleted[264676])
    (266986 call -=(451619 call . this[266935] c"tableNumFullSlots") 1)
    (266990 call +=(451624 call . this[266935] c"tableNumDeletedSlots") 1)
    (396926 'used modules list'(266956 'use' MemMove[209934]))
  }
  function chpl__hashtable[267644](?).clearSlot[266996](arg _mt[267012]:_MT[201], ref arg this[266998]:chpl__hashtable[267644](?), arg slotNum[267001] :
  int(64)[10], out arg key[267005] :
  (451629 call . this[266998] c"keyType"), out arg val[267009] :
  (451634 call . this[266998] c"valType")) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown tableEntry[267016] "ref var"(267018 call(451639 call . this[266998] c"table") slotNum[267001])
    (267021 'end of statement')
    (267023 call(451644 call . this[266998] c"clearSlot") tableEntry[267016] key[267005] val[267009])
  }
  function chpl__hashtable[267644](?).maybeShrinkAfterRemove[267029](arg _mt[267033]:_MT[201], ref arg this[267031]:chpl__hashtable[267644](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    if(267060 call _cond_test(267041 call &&(267043 call >(451656 call . this[267031] c"tableSize")(451661 call . this[267031] c"startingSize"))(267047 call <(267049 call /(451666 call . this[267031] c"tableNumFullSlots")(267052 call :(451671 call . this[267031] c"tableSize") real(64)[13]))(267056 call /(451676 call . this[267031] c"resizeThreshold") 4))))
    {
      (267038 call(451651 call . this[267031] c"resize")(grow = 0))
    }
  }
  function chpl__hashtable[267644](?)._findPowerOf2[267066](arg _mt[267074]:_MT[201], arg this[267068]:chpl__hashtable[267644](?), arg numKeys[267071] :
  int(64)[10]) : _unknown[42] "method" "primary method"
  {
    unknown n[267078](267079 call :(267081 call - numKeys[267071] 1) uint(64)[86])
    (267087 'end of statement')
    unknown k[267089] 2
    (267092 'end of statement')
    {
      unknown tmp[267115] "temp"
      (267145 'move' tmp[267115](267137 call _cond_test(267139 call >(267141 call >> n[267078] 1) 0)))
      WhileDo[267120]
      {
        {
          (267101 call = n[267078](267104 call >> n[267078] 1))
          (267108 call = k[267089](267111 call << k[267089] 1))
        }
        label _continueLabel[267118]
        (267132 'move' tmp[267115](267124 call _cond_test(267126 call >(267128 call >> n[267078] 1) 0)))
        tmp[267115]
      }
      label _breakLabel[267119]
    }
    (267148 return(267149 call << k[267089] 1))
  }
  function chpl__hashtable[267644](?).allocateData[267155](arg _mt[267165]:_MT[201], arg this[267157]:chpl__hashtable[267644](?), arg size[267160] :
  int(64)[10], arg tableEltType[267163]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    if(267181 call _cond_test(267177 call == size[267160] 0))
    {
      (267169 return nil[32])
    }
    {
      (267172 return(267174 call _allocateData size[267160] tableEltType[267163]))
    }
  }
  function chpl__hashtable[267644](?).allocateTable[267187](arg _mt[267195]:_MT[201], arg this[267189]:chpl__hashtable[267644](?), arg size[267192] :
  int(64)[10]) : _unknown[42] "method" "primary method"
  {
    if(267214 call _cond_test(267210 call == size[267192] 0))
    {
      (267199 return nil[32])
    }
    {
      (267202 return(267204 call _allocateData size[267192](267207 call chpl_TableEntry[264725](?)(451694 call . this[267189] c"keyType")(451699 call . this[267189] c"valType"))))
    }
  }
  function chpl__hashtable[267644](?).rehash[267220](arg _mt[267228]:_MT[201], ref arg this[267222]:chpl__hashtable[267644](?), arg newSize[267225] :
  int(64)[10]) : _unknown[42] "method" "primary method" "no return value for void"
  {
    unknown oldSize[267235](451705 call . this[267222] c"tableSize")
    (267238 'end of statement')
    unknown oldTable[267240](451710 call . this[267222] c"table")
    (267243 'end of statement')
    (267244 call =(451715 call . this[267222] c"tableSize") newSize[267225])
    unknown entries[267249](451721 call . this[267222] c"tableNumFullSlots")
    (267252 'end of statement')
    if(267543 call _cond_test(267539 call > entries[267249] 0))
    {
      if(267264 call _cond_test(267260 call == newSize[267225] 0))
      {
        (267256 call halt "attempt to resize to 0 a table that is not empty")
      }
      (267268 call =(451727 call . this[267222] c"table")(267272 call(451731 call . this[267222] c"allocateTable")(451736 call . this[267222] c"tableSize")))
      if(267289 call _cond_test(267285 call !=(451751 call . this[267222] c"rehashHelpers") nil[32]))
      {
        (267282 call(267279 call .(267274 call postfix!(451741 call . this[267222] c"rehashHelpers")) c"startRehash")(451746 call . this[267222] c"tableSize"))
      }
      (267294 call =(451756 call . this[267222] c"tableNumDeletedSlots") 0)
      {
        unknown _indexOfInterest[267443] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[267444] "expr temp" "temp"
        (267453 'move' _iterator[267444](267451 call _getIterator(267301 call _allSlots oldSize[267235])))
        Defer
        {
          {
            (267468 call _freeIterator _iterator[267444])
          }
        }
        { scopeless type
          (267458 'move' _indexOfInterest[267443](267455 call iteratorIndex _iterator[267444]))
        }
        ForLoop[267445]
        {
          unknown oldslot[267298] "index var" "insert auto destroy"
          (267463 'move' oldslot[267298] _indexOfInterest[267443])
          {
            if(267439 call _cond_test(267427 call ==(267432 call .(267430 call oldTable[267240] oldslot[267298]) c"status") full[264674]))
            {
              unknown oldEntry[267306] "ref var"(267308 call oldTable[267240] oldslot[267298])
              (267311 'end of statement')
              unknown tmp[267323] "temp"(267318 call(451763 call . this[267222] c"_findSlot")(267320 call . oldEntry[267306] c"key"))
              (267330 call _check_tuple_var_decl tmp[267323] 2)
              unknown foundSlot[267313](267324 call tmp[267323] 0)
              unknown newslot[267315](267327 call tmp[267323] 1)
              (267335 'end of statement')
              if(267343 call _cond_test foundSlot[267313])
              {
                (267338 call halt "duplicate element found while resizing for key")
              }
              if(267361 call _cond_test(267357 call < newslot[267315] 0))
              {
                (267349 call halt "couldn't add element during resize - got slot " newslot[267315] " for key")
              }
              unknown dstSlot[267366] "ref var"(267368 call(451771 call . this[267222] c"table") newslot[267315])
              (267371 'end of statement')
              (267372 call =(267375 call . dstSlot[267366] c"status") full[264674])
              (267383 call moveInitialize(267385 call . dstSlot[267366] c"key")(267389 call moveFrom(267391 call . oldEntry[267306] c"key")))
              (267395 call moveInitialize(267397 call . dstSlot[267366] c"val")(267401 call moveFrom(267403 call . oldEntry[267306] c"val")))
              if(267422 call _cond_test(267418 call !=(451784 call . this[267222] c"rehashHelpers") nil[32]))
              {
                (267414 call(267411 call .(267406 call postfix!(451777 call . this[267222] c"rehashHelpers")) c"moveElementDuringRehash") oldslot[267298] newslot[267315])
              }
            }
          }
          label _continueLabel[267448]
          _indexOfInterest[267443]
          _iterator[267444]
        }
        label _breakLabel[267449]
      }
      if(267490 call _cond_test(267486 call !=(451797 call . this[267222] c"rehashHelpers") nil[32]))
      {
        (267483 call(267480 call .(267475 call postfix!(451791 call . this[267222] c"rehashHelpers")) c"finishRehash") oldSize[267235])
      }
      (267496 call _freeData oldTable[267240] oldSize[267235])
    }
    {
      if(267521 call _cond_test(267517 call !=(451820 call . this[267222] c"rehashHelpers") nil[32]))
      {
        (267507 call(267504 call .(267501 call postfix!(451804 call . this[267222] c"rehashHelpers")) c"startRehash")(451809 call . this[267222] c"tableSize"))
        (267515 call(267512 call .(267509 call postfix!(451814 call . this[267222] c"rehashHelpers")) c"finishRehash") oldSize[267235])
      }
      (267526 call _freeData oldTable[267240] oldSize[267235])
      (267529 call =(451827 call . this[267222] c"table")(267533 call(451831 call . this[267222] c"allocateTable")(451836 call . this[267222] c"tableSize")))
      (267535 call =(451841 call . this[267222] c"tableNumDeletedSlots") 0)
    }
    (396928 'used modules list'(267232 'use' MemMove[209934]))
  }
  function chpl__hashtable[267644](?).requestCapacity[267549](arg _mt[267557]:_MT[201], ref arg this[267551]:chpl__hashtable[267644](?), arg numKeys[267554] :
  int(64)[10]) : _unknown[42] "method" "primary method" "no return value for void"
  {
    if(267570 call _cond_test(267566 call <(451858 call . this[267551] c"tableNumFullSlots") numKeys[267554]))
    {
      (267562 call(451846 call . this[267551] c"rehash")(267564 call(451852 call . this[267551] c"_findPowerOf2") numKeys[267554]))
    }
  }
  function chpl__hashtable[267644](?).resize[267576](arg _mt[267584]:_MT[201], ref arg this[267578]:chpl__hashtable[267644](?), arg grow[267581] :
  bool[19]) : _unknown[42] "method" "primary method" "no return value for void"
  {
    if(267590 call _cond_test(451865 call . this[267578] c"postponeResize"))
    {
      (267587 return _void[46])
    }
    unknown newSize[267596](267614 IfExpr (267597 call ==(451870 call . this[267578] c"tableSize") 0) then
    { scopeless
      (451875 call . this[267578] c"startingSize")
    } else
    { scopeless(267611 IfExpr  grow[267581] then
      { scopeless
        (267603 call <<(451881 call . this[267578] c"tableSize") 1)
      } else
      { scopeless
        (267607 call >>(451886 call . this[267578] c"tableSize") 1)
      } )
    } )
    (267618 'end of statement')
    if(267634 call _cond_test(267621 call &&(267623 call == grow[267581] 0)(267627 call >(267629 call * 2(451892 call . this[267578] c"tableNumFullSlots")) newSize[267596])))
    {
      (267620 return _void[46])
    }
    (267639 call(451897 call . this[267578] c"rehash") newSize[267596])
  }
  type chpl__hashtable[267644](?) unknown keyType[265689] "type variable" unknown valType[265692] "type variable" unknown tableNumFullSlots[265695] int(64)[10] unknown tableNumDeletedSlots[265700] int(64)[10] unknown tableSize[265705] int(64)[10] unknown table[265710](265712 call _ddata[67573](?)(265714 call chpl_TableEntry[264725](?) keyType[265689] valType[265692])) unknown rehashHelpers[265720](265722 call _owned[238](?) borrowed chpl__rehashHelpers?[468163]) unknown postponeResize[265728] bool[19] const resizeThreshold[265733] "const" real(64)[13] const startingSize[265738] "const" int(64)[10]
  (396916 'used modules list'(264657 'use' ChapelBase[77907])(264659 'use' DSIUtil[99447])(264666 'use' CTypes[51217])(264668 'use' Math[10521])(264669 'use' POSIX[12822]))
}