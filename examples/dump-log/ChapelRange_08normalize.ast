AST dump for ChapelRange after pass normalize.
Module use list: ChapelBase HaltWrappers AutoMath DSIUtil Reflection ChapelDebugPrint 

{
  function chpl__init_ChapelRange[468420]() : void[4] "insert line file info" "module init"
  {
    (645166 'init var' debugChapelRange[107087] 0)
    (107090 'end of statement')
    (645168 'init var' useOptimizedRangeIterators[107092] 1)
    (107095 'end of statement')
    (645170 'init var' newSliceRule[107097] 1)
    (107100 'end of statement')
    (645172 'init var' newRangeLiteralType[107102] 0)
    (107105 'end of statement')
    unknown call_tmp[785060] "maybe param" "maybe type" "temp"
    (785063 'move' call_tmp[785060](107108 call - 1))
    (645174 'init var' unalignedMark[107107] call_tmp[785060])
    (107112 'end of statement')
    {
    }
    {
    }
    (607001 return _void[46])
  }
  unknown debugChapelRange[107087] "config" "param"
  unknown useOptimizedRangeIterators[107092] "config" "param"
  unknown newSliceRule[107097] "config" "deprecated" "param"
  unknown newRangeLiteralType[107102] "config" "param"
  unknown unalignedMark[107107] "dead at end of block" "param" "private"
  type boundKind[107122] def both[107114]:boundKind[107122] def low[107116]:boundKind[107122] def high[107118]:boundKind[107122] def neither[107120]:boundKind[107122]
  type strideKind[107137] def one[107127]:strideKind[107137] def negOne[107129]:strideKind[107137] def positive[107131]:strideKind[107137] def negative[107133]:strideKind[107137] def any[107135]:strideKind[107137]
  type range[240](?) unknown idxType[107143] "type variable" int(64)[10] unknown bounds[107147] "param" both[107114] boundKind[107122] unknown strides[107156] "param" one[107127] strideKind[107137] unknown _low[107165](107167 call chpl__idxTypeToIntIdxType idxType[107143]) unknown _high[107172](107174 call chpl__idxTypeToIntIdxType idxType[107143]) unknown _stride[107179](107191 IfExpr (107186 call(107183 call (partial) isPosNegOne _mt[203] strides[107156])) then
  { scopeless
    nothing[7]
  } else
  { scopeless
    (107189 call chpl__rangeStrideType idxType[107143])
  } ) unknown _alignment[107197](107207 IfExpr (107202 call(107199 call (partial) isPosNegOne _mt[203] strides[107156])) then
  { scopeless
    nothing[7]
  } else
  { scopeless
    (107205 call chpl__rangeStrideType idxType[107143])
  } )
  function range[240](?).strType[107214](arg _mt[107220]:_MT[201], arg this[107217]:range[240](?) :
  range[240](?)) type : _unknown[42] "method" "no parens" "@unstable"
  {
    unknown ret[602568] "RVV" "temp" "type variable"
    unknown call_tmp[785071] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (785074 'move' call_tmp[785071](425795 call idxType _mt[203] this[107217]))
    unknown call_tmp[785076] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (785079 'move' call_tmp[785076](107225 call chpl__rangeStrideType call_tmp[785071]))
    (602573 'move' ret[602568](602572 'deref' call_tmp[785076]))
    (602570 return ret[602568])
  }
  function range[240](?).chpl__promotionType[107229](arg _mt[107235]:_MT[201], arg this[107232]:range[240](?) :
  range[240](?)) type : _unknown[42] "method"
  {
    unknown ret[602577] "RVV" "temp" "type variable"
    unknown call_tmp[785083] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (785086 'move' call_tmp[785083](425800 call idxType _mt[203] this[107232]))
    (602582 'move' ret[602577](602581 'deref' call_tmp[785083]))
    (602579 return ret[602577])
  }
  function range[240](?).chpl_integralIdxType[107242](arg _mt[107248]:_MT[201], arg this[107245]:range[240](?) :
  range[240](?)) type : _unknown[42] "method" "no parens"
  {
    unknown ret[602586] "RVV" "temp" "type variable"
    unknown call_tmp[785090] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (785093 'move' call_tmp[785090](425805 call idxType _mt[203] this[107245]))
    unknown call_tmp[785095] "expr temp" "maybe param" "used in type" "maybe type" "temp"
    (785098 'move' call_tmp[785095](107253 call chpl__idxTypeToIntIdxType call_tmp[785090]))
    (602591 'move' ret[602586](602590 'deref' call_tmp[785095]))
    (602588 return ret[602586])
  }
  function isFiniteIdxType[107257](arg t[107259]:_any[141](?)) param : _unknown[42] "private"
  {
    unknown ret[602595] "RVV" "param" "temp"
    unknown tmp[483318] "maybe param" "temp"
    (483329 'move' tmp[483318](107266 call isBoolType t[107259]))
    unknown call_tmp[785100] "expr temp" "maybe param" "maybe type" "temp"
    (785103 'move' call_tmp[785100](483331 call _cond_invalid tmp[483318]))
    if call_tmp[785100]
    {
      (483334 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[671280] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[671281] "maybe param" "temp"
    unknown call_tmp[785105] "expr temp" "maybe param" "maybe type" "temp"
    (785108 'move' call_tmp[785105](483319 call isTrue tmp[483318]))
    (671286 'move' tmp[671281](671284 call _cond_test call_tmp[785105]))
    if tmp[671281]
    {
      (671291 'move' tmp[671280](671288 '_paramFoldLogical' tmp[671281] 1))
    }
    {
      unknown tmp[671293] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[785110] "expr temp" "maybe param" "maybe type" "temp"
      (785113 'move' call_tmp[785110](107269 call isEnumType t[107259]))
      (671295 'move' tmp[671293](483323 call isTrue call_tmp[785110]))
      (671300 'move' tmp[671280](671297 '_paramFoldLogical' tmp[671281] tmp[671293]))
    }
    (602600 'move' ret[602595](602599 'deref' tmp[671280]))
    (602597 return ret[602595])
  }
  function finiteIdxTypeLow[107273](arg t[107275]:_any[141](?)) param : _unknown[42] "private"
  {
    unknown ret[602604] "RVV" "param" "temp"
    unknown call_tmp[785115] "expr temp" "maybe param" "maybe type" "temp"
    (785118 'move' call_tmp[785115](107282 call isFiniteIdxType t[107275]))
    unknown call_tmp[785120] "expr temp" "maybe param" "maybe type" "temp"
    (785123 'move' call_tmp[785120](107284 call _cond_test call_tmp[785115]))
    if call_tmp[785120]
    {
      (602609 'move' ret[602604](602608 'deref' 0))
      gotoReturn _end_finiteIdxTypeLow[602602] _end_finiteIdxTypeLow[602602]
    }
    unknown call_tmp[785125] "expr temp" "maybe param" "maybe type" "temp"
    (785128 'move' call_tmp[785125](107298 call : t[107275] string[244]))
    unknown call_tmp[785130] "expr temp" "maybe param" "maybe type" "temp"
    (785133 'move' call_tmp[785130](107293 call + "finiteIdxTypeLow() undefined for type '" call_tmp[785125]))
    unknown call_tmp[785135] "expr temp" "maybe param" "maybe type" "temp"
    (785138 'move' call_tmp[785135](107291 call + call_tmp[785130] "'"))
    (107290 call compilerError call_tmp[785135])
    label _end_finiteIdxTypeLow[602602]
    (602606 return ret[602604])
  }
  function finiteIdxTypeHigh[107305](arg t[107307]:_any[141](?)) param : _unknown[42] "private"
  {
    unknown ret[602615] "RVV" "param" "temp"
    unknown call_tmp[785140] "expr temp" "maybe param" "maybe type" "temp"
    (785143 'move' call_tmp[785140](107314 call isBoolType t[107307]))
    unknown call_tmp[785145] "expr temp" "maybe param" "maybe type" "temp"
    (785148 'move' call_tmp[785145](107316 call _cond_test call_tmp[785140]))
    if call_tmp[785145]
    {
      (602620 'move' ret[602615](602619 'deref' 1))
      gotoReturn _end_finiteIdxTypeHigh[602613] _end_finiteIdxTypeHigh[602613]
    }
    unknown call_tmp[785150] "expr temp" "maybe param" "maybe type" "temp"
    (785153 'move' call_tmp[785150](107331 call isEnumType t[107307]))
    unknown call_tmp[785155] "expr temp" "maybe param" "maybe type" "temp"
    (785158 'move' call_tmp[785155](107333 call _cond_test call_tmp[785150]))
    if call_tmp[785155]
    {
      unknown call_tmp[785162] "expr temp" "maybe param" "maybe type" "temp"
      (785165 'move' call_tmp[785162](107325 call size _mt[203] t[107307]))
      unknown call_tmp[785167] "expr temp" "maybe param" "maybe type" "temp"
      (785170 'move' call_tmp[785167](107322 call - call_tmp[785162] 1))
      (602625 'move' ret[602615](602624 'deref' call_tmp[785167]))
      gotoReturn _end_finiteIdxTypeHigh[602613] _end_finiteIdxTypeHigh[602613]
    }
    unknown call_tmp[785172] "expr temp" "maybe param" "maybe type" "temp"
    (785175 'move' call_tmp[785172](107347 call : t[107307] string[244]))
    unknown call_tmp[785177] "expr temp" "maybe param" "maybe type" "temp"
    (785180 'move' call_tmp[785177](107342 call + "finiteIdxTypeHigh() undefined for type '" call_tmp[785172]))
    unknown call_tmp[785182] "expr temp" "maybe param" "maybe type" "temp"
    (785185 'move' call_tmp[785182](107340 call + call_tmp[785177] "'"))
    (107339 call compilerError call_tmp[785182])
    label _end_finiteIdxTypeHigh[602613]
    (602617 return ret[602615])
  }
  function lowBoundForIter[107354](arg r[107356]:_any[141](?)) : _unknown[42] "inline" "private"
  {
    unknown ret[602631] "RVV" "temp"
    unknown call_tmp[785189] "expr temp" "maybe param" "maybe type" "temp"
    (785192 'move' call_tmp[785189](107383 call(107380 call (partial) hasLowBound _mt[203] r[107356])))
    unknown call_tmp[785194] "expr temp" "maybe param" "maybe type" "temp"
    (785197 'move' call_tmp[785194](107384 call _cond_test call_tmp[785189]))
    if call_tmp[785194]
    {
      unknown call_tmp[785201] "expr temp" "maybe param" "maybe type" "temp"
      (785204 'move' call_tmp[785201](107361 call lowBound _mt[203] r[107356]))
      (602636 'move' ret[602631](602635 'deref' call_tmp[785201]))
      gotoReturn _end_lowBoundForIter[602629] _end_lowBoundForIter[602629]
    }
    {
      unknown call_tmp[785208] "expr temp" "maybe param" "maybe type" "temp"
      (785211 'move' call_tmp[785208](107369 call idxType _mt[203] r[107356]))
      unknown call_tmp[785215] "expr temp" "maybe param" "maybe type" "temp"
      (785218 'move' call_tmp[785215](107375 call idxType _mt[203] r[107356]))
      unknown call_tmp[785220] "expr temp" "maybe param" "maybe type" "temp"
      (785223 'move' call_tmp[785220](107373 call finiteIdxTypeLow call_tmp[785215]))
      unknown call_tmp[785225] "expr temp" "maybe param" "maybe type" "temp"
      (785228 'move' call_tmp[785225](107367 call chpl__intToIdx call_tmp[785208] call_tmp[785220]))
      (602641 'move' ret[602631](602640 'deref' call_tmp[785225]))
      gotoReturn _end_lowBoundForIter[602629] _end_lowBoundForIter[602629]
    }
    label _end_lowBoundForIter[602629]
    (602633 return ret[602631])
  }
  function highBoundForIter[107392](arg r[107394]:_any[141](?)) : _unknown[42] "inline" "private"
  {
    unknown ret[602647] "RVV" "temp"
    unknown call_tmp[785232] "expr temp" "maybe param" "maybe type" "temp"
    (785235 'move' call_tmp[785232](107421 call(107418 call (partial) hasHighBound _mt[203] r[107394])))
    unknown call_tmp[785237] "expr temp" "maybe param" "maybe type" "temp"
    (785240 'move' call_tmp[785237](107422 call _cond_test call_tmp[785232]))
    if call_tmp[785237]
    {
      unknown call_tmp[785244] "expr temp" "maybe param" "maybe type" "temp"
      (785247 'move' call_tmp[785244](107399 call highBound _mt[203] r[107394]))
      (602652 'move' ret[602647](602651 'deref' call_tmp[785244]))
      gotoReturn _end_highBoundForIter[602645] _end_highBoundForIter[602645]
    }
    {
      unknown call_tmp[785251] "expr temp" "maybe param" "maybe type" "temp"
      (785254 'move' call_tmp[785251](107407 call idxType _mt[203] r[107394]))
      unknown call_tmp[785258] "expr temp" "maybe param" "maybe type" "temp"
      (785261 'move' call_tmp[785258](107413 call idxType _mt[203] r[107394]))
      unknown call_tmp[785263] "expr temp" "maybe param" "maybe type" "temp"
      (785266 'move' call_tmp[785263](107411 call finiteIdxTypeHigh call_tmp[785258]))
      unknown call_tmp[785268] "expr temp" "maybe param" "maybe type" "temp"
      (785271 'move' call_tmp[785268](107405 call chpl__intToIdx call_tmp[785251] call_tmp[785263]))
      (602657 'move' ret[602647](602656 'deref' call_tmp[785268]))
      gotoReturn _end_highBoundForIter[602645] _end_highBoundForIter[602645]
    }
    label _end_highBoundForIter[602645]
    (602649 return ret[602647])
  }
  function hasLowBoundForIter[107430](arg r[107432]:_any[141](?)) param : _unknown[42] "private"
  {
    unknown ret[602663] "RVV" "param" "temp"
    unknown tmp[483339] "maybe param" "temp"
    (483350 'move' tmp[483339](107442 call(107439 call (partial) hasLowBound _mt[203] r[107432])))
    unknown call_tmp[785275] "expr temp" "maybe param" "maybe type" "temp"
    (785278 'move' call_tmp[785275](483352 call _cond_invalid tmp[483339]))
    if call_tmp[785275]
    {
      (483355 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[671307] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[671308] "maybe param" "temp"
    unknown call_tmp[785280] "expr temp" "maybe param" "maybe type" "temp"
    (785283 'move' call_tmp[785280](483340 call isTrue tmp[483339]))
    (671313 'move' tmp[671308](671311 call _cond_test call_tmp[785280]))
    if tmp[671308]
    {
      (671318 'move' tmp[671307](671315 '_paramFoldLogical' tmp[671308] 1))
    }
    {
      unknown tmp[671320] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[785287] "expr temp" "maybe param" "maybe type" "temp"
      (785290 'move' call_tmp[785287](107446 call idxType _mt[203] r[107432]))
      unknown call_tmp[785292] "expr temp" "maybe param" "maybe type" "temp"
      (785295 'move' call_tmp[785292](107444 call isFiniteIdxType call_tmp[785287]))
      (671322 'move' tmp[671320](483344 call isTrue call_tmp[785292]))
      (671327 'move' tmp[671307](671324 '_paramFoldLogical' tmp[671308] tmp[671320]))
    }
    (602668 'move' ret[602663](602667 'deref' tmp[671307]))
    (602665 return ret[602663])
  }
  function hasHighBoundForIter[107451](arg r[107453]:_any[141](?)) param : _unknown[42] "private"
  {
    unknown ret[602672] "RVV" "param" "temp"
    unknown tmp[483360] "maybe param" "temp"
    (483371 'move' tmp[483360](107463 call(107460 call (partial) hasHighBound _mt[203] r[107453])))
    unknown call_tmp[785299] "expr temp" "maybe param" "maybe type" "temp"
    (785302 'move' call_tmp[785299](483373 call _cond_invalid tmp[483360]))
    if call_tmp[785299]
    {
      (483376 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[671334] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[671335] "maybe param" "temp"
    unknown call_tmp[785304] "expr temp" "maybe param" "maybe type" "temp"
    (785307 'move' call_tmp[785304](483361 call isTrue tmp[483360]))
    (671340 'move' tmp[671335](671338 call _cond_test call_tmp[785304]))
    if tmp[671335]
    {
      (671345 'move' tmp[671334](671342 '_paramFoldLogical' tmp[671335] 1))
    }
    {
      unknown tmp[671347] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[785311] "expr temp" "maybe param" "maybe type" "temp"
      (785314 'move' call_tmp[785311](107467 call idxType _mt[203] r[107453]))
      unknown call_tmp[785316] "expr temp" "maybe param" "maybe type" "temp"
      (785319 'move' call_tmp[785316](107465 call isFiniteIdxType call_tmp[785311]))
      (671349 'move' tmp[671347](483365 call isTrue call_tmp[785316]))
      (671354 'move' tmp[671334](671351 '_paramFoldLogical' tmp[671335] tmp[671347]))
    }
    (602677 'move' ret[602672](602676 'deref' tmp[671334]))
    (602674 return ret[602672])
  }
  function range[240](?).init[107472](arg _mt[107488]:_MT[201], ref arg this[107475]:range[240](?) :
  range[240](?), arg idxType[107478]:_any[141](?), arg low[107481] :
  idxType[107478], arg high[107485] :
  idxType[107478]) : void[4] "method" "no return value for void"
  {
    unknown idxType[520767] "temp" "type variable"
    (520769 'move' idxType[520767] idxType[107478])
    (520771 'init field' this[107475] c"idxType" idxType[520767])
    unknown call_tmp[785321] "expr temp" "maybe param" "maybe type" "temp"
    (785324 'move' call_tmp[785321](520776 call : both[107114] boundKind[107122]))
    (520778 'init field' this[107475] c"bounds" call_tmp[785321])
    (551615 'end of statement')
    unknown call_tmp[785326] "expr temp" "maybe param" "maybe type" "temp"
    (785329 'move' call_tmp[785326](520783 call : one[107127] strideKind[107137]))
    (520785 'init field' this[107475] c"strides" call_tmp[785326])
    (551616 'end of statement')
    unknown call_tmp[785331] "maybe param" "maybe type" "temp"
    (785334 'move' call_tmp[785331](107517 call chpl__idxToInt low[107481]))
    unknown call_tmp[785336] "expr temp" "maybe param" "maybe type" "temp"
    (785339 'move' call_tmp[785336](520799 '.v' this[107475] c"idxType"))
    unknown call_tmp[785341] "maybe param" "maybe type" "temp"
    (785344 'move' call_tmp[785341](520791 call chpl__idxTypeToIntIdxType call_tmp[785336]))
    unknown _low[520788] "temp"
    (520793 'init var' _low[520788] call_tmp[785331] call_tmp[785341])
    (520795 'init field' this[107475] c"_low" _low[520788])
    (551617 'end of statement')
    unknown call_tmp[785346] "maybe param" "maybe type" "temp"
    (785349 'move' call_tmp[785346](107528 call chpl__idxToInt high[107485]))
    unknown call_tmp[785351] "expr temp" "maybe param" "maybe type" "temp"
    (785354 'move' call_tmp[785351](520813 '.v' this[107475] c"idxType"))
    unknown call_tmp[785356] "maybe param" "maybe type" "temp"
    (785359 'move' call_tmp[785356](520805 call chpl__idxTypeToIntIdxType call_tmp[785351]))
    unknown _high[520802] "temp"
    (520807 'init var' _high[520802] call_tmp[785346] call_tmp[785356])
    (520809 'init field' this[107475] c"_high" _high[520802])
    (551618 'end of statement')
    unknown _stride[520817] "temp"
    unknown tmp[671361] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[671362] "maybe param" "temp"
    unknown call_tmp[785361] "expr temp" "maybe param" "maybe type" "temp"
    (785364 'move' call_tmp[785361](520837 '.v' this[107475] c"strides"))
    unknown call_tmp[785368] "expr temp" "maybe param" "maybe type" "temp"
    (785371 'move' call_tmp[785368](520823 call(520820 call (partial) isPosNegOne _mt[203] call_tmp[785361])))
    (671367 'move' tmp[671362](671365 call _cond_test call_tmp[785368]))
    if tmp[671362]
    {
      (671372 'move' tmp[671361](671369 '_paramFoldLogical' tmp[671362] nothing[7]))
    }
    {
      unknown tmp[671374] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[785373] "expr temp" "maybe param" "maybe type" "temp"
      (785376 'move' call_tmp[785373](520840 '.v' this[107475] c"idxType"))
      (671376 'move' tmp[671374](520828 call chpl__rangeStrideType call_tmp[785373]))
      (671381 'move' tmp[671361](671378 '_paramFoldLogical' tmp[671362] tmp[671374]))
    }
    (520831 'default init var' _stride[520817] tmp[671361])
    (520833 '.=' this[107475] c"_stride" _stride[520817])
    (551619 'end of statement')
    unknown _alignment[520843] "temp"
    unknown tmp[671388] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[671389] "maybe param" "temp"
    unknown call_tmp[785378] "expr temp" "maybe param" "maybe type" "temp"
    (785381 'move' call_tmp[785378](520863 '.v' this[107475] c"strides"))
    unknown call_tmp[785385] "expr temp" "maybe param" "maybe type" "temp"
    (785388 'move' call_tmp[785385](520849 call(520846 call (partial) isPosNegOne _mt[203] call_tmp[785378])))
    (671394 'move' tmp[671389](671392 call _cond_test call_tmp[785385]))
    if tmp[671389]
    {
      (671399 'move' tmp[671388](671396 '_paramFoldLogical' tmp[671389] nothing[7]))
    }
    {
      unknown tmp[671401] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[785390] "expr temp" "maybe param" "maybe type" "temp"
      (785393 'move' call_tmp[785390](520866 '.v' this[107475] c"idxType"))
      (671403 'move' tmp[671401](520854 call chpl__rangeStrideType call_tmp[785390]))
      (671408 'move' tmp[671388](671405 '_paramFoldLogical' tmp[671389] tmp[671401]))
    }
    (520857 'default init var' _alignment[520843] tmp[671388])
    (520859 '.=' this[107475] c"_alignment" _alignment[520843])
    (551620 'end of statement')
    (602679 return _void[46])
  }
  function range[240](?).init[107532](arg _mt[107543]:_MT[201], ref arg this[107535]:range[240](?) :
  range[240](?), arg low[107540]:_any[141](?)) : void[4] "method" "no return value for void"
  {
    unknown idxType[520871] "temp" "type variable"
    (520873 'move' idxType[520871](520869 'typeof' low[107540]))
    (520875 'init field' this[107535] c"idxType" idxType[520871])
    unknown call_tmp[785395] "expr temp" "maybe param" "maybe type" "temp"
    (785398 'move' call_tmp[785395](520880 call : low[107116] boundKind[107122]))
    (520882 'init field' this[107535] c"bounds" call_tmp[785395])
    (551621 'end of statement')
    unknown call_tmp[785400] "expr temp" "maybe param" "maybe type" "temp"
    (785403 'move' call_tmp[785400](520887 call : one[107127] strideKind[107137]))
    (520889 'init field' this[107535] c"strides" call_tmp[785400])
    (551622 'end of statement')
    unknown call_tmp[785405] "maybe param" "maybe type" "temp"
    (785408 'move' call_tmp[785405](107570 call chpl__idxToInt low[107540]))
    unknown call_tmp[785410] "expr temp" "maybe param" "maybe type" "temp"
    (785413 'move' call_tmp[785410](520903 '.v' this[107535] c"idxType"))
    unknown call_tmp[785415] "maybe param" "maybe type" "temp"
    (785418 'move' call_tmp[785415](520895 call chpl__idxTypeToIntIdxType call_tmp[785410]))
    unknown _low[520892] "temp"
    (520897 'init var' _low[520892] call_tmp[785405] call_tmp[785415])
    (520899 'init field' this[107535] c"_low" _low[520892])
    (551623 'end of statement')
    unknown _high[520906] "temp"
    unknown call_tmp[785420] "expr temp" "maybe param" "maybe type" "temp"
    (785423 'move' call_tmp[785420](520917 '.v' this[107535] c"idxType"))
    unknown call_tmp[785425] "expr temp" "maybe param" "maybe type" "temp"
    (785428 'move' call_tmp[785425](520909 call chpl__idxTypeToIntIdxType call_tmp[785420]))
    (520911 'default init var' _high[520906] call_tmp[785425])
    (520913 '.=' this[107535] c"_high" _high[520906])
    (551624 'end of statement')
    unknown _stride[520920] "temp"
    unknown tmp[671415] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[671416] "maybe param" "temp"
    unknown call_tmp[785430] "expr temp" "maybe param" "maybe type" "temp"
    (785433 'move' call_tmp[785430](520940 '.v' this[107535] c"strides"))
    unknown call_tmp[785437] "expr temp" "maybe param" "maybe type" "temp"
    (785440 'move' call_tmp[785437](520926 call(520923 call (partial) isPosNegOne _mt[203] call_tmp[785430])))
    (671421 'move' tmp[671416](671419 call _cond_test call_tmp[785437]))
    if tmp[671416]
    {
      (671426 'move' tmp[671415](671423 '_paramFoldLogical' tmp[671416] nothing[7]))
    }
    {
      unknown tmp[671428] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[785442] "expr temp" "maybe param" "maybe type" "temp"
      (785445 'move' call_tmp[785442](520943 '.v' this[107535] c"idxType"))
      (671430 'move' tmp[671428](520931 call chpl__rangeStrideType call_tmp[785442]))
      (671435 'move' tmp[671415](671432 '_paramFoldLogical' tmp[671416] tmp[671428]))
    }
    (520934 'default init var' _stride[520920] tmp[671415])
    (520936 '.=' this[107535] c"_stride" _stride[520920])
    (551625 'end of statement')
    unknown _alignment[520946] "temp"
    unknown tmp[671442] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[671443] "maybe param" "temp"
    unknown call_tmp[785447] "expr temp" "maybe param" "maybe type" "temp"
    (785450 'move' call_tmp[785447](520966 '.v' this[107535] c"strides"))
    unknown call_tmp[785454] "expr temp" "maybe param" "maybe type" "temp"
    (785457 'move' call_tmp[785454](520952 call(520949 call (partial) isPosNegOne _mt[203] call_tmp[785447])))
    (671448 'move' tmp[671443](671446 call _cond_test call_tmp[785454]))
    if tmp[671443]
    {
      (671453 'move' tmp[671442](671450 '_paramFoldLogical' tmp[671443] nothing[7]))
    }
    {
      unknown tmp[671455] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[785459] "expr temp" "maybe param" "maybe type" "temp"
      (785462 'move' call_tmp[785459](520969 '.v' this[107535] c"idxType"))
      (671457 'move' tmp[671455](520957 call chpl__rangeStrideType call_tmp[785459]))
      (671462 'move' tmp[671442](671459 '_paramFoldLogical' tmp[671443] tmp[671455]))
    }
    (520960 'default init var' _alignment[520946] tmp[671442])
    (520962 '.=' this[107535] c"_alignment" _alignment[520946])
    (551626 'end of statement')
    (520972 'init done')
    (551627 'end of statement')
    unknown call_tmp[785466] "expr temp" "maybe param" "maybe type" "temp"
    (785469 'move' call_tmp[785466](425829 call idxType _mt[203] this[107535]))
    unknown call_tmp[785471] "expr temp" "maybe param" "maybe type" "temp"
    (785474 'move' call_tmp[785471](107588 call isFiniteIdxType call_tmp[785466]))
    unknown call_tmp[785476] "expr temp" "maybe param" "maybe type" "temp"
    (785479 'move' call_tmp[785476](107590 call _cond_test call_tmp[785471]))
    if call_tmp[785476]
    {
      unknown call_tmp[785483] "expr temp" "maybe param" "maybe type" "temp"
      (785486 'move' call_tmp[785483](107581 call _high _mt[203] this[107535]))
      unknown call_tmp[785490] "expr temp" "maybe param" "maybe type" "temp"
      (785493 'move' call_tmp[785490](425824 call idxType _mt[203] this[107535]))
      unknown call_tmp[785495] "expr temp" "maybe param" "maybe type" "temp"
      (785498 'move' call_tmp[785495](107585 call finiteIdxTypeHigh call_tmp[785490]))
      (107578 call = call_tmp[785483] call_tmp[785495])
    }
    (602681 return _void[46])
  }
  function range[240](?).init[107596](arg _mt[107607]:_MT[201], ref arg this[107599]:range[240](?) :
  range[240](?), arg high[107604]:_any[141](?)) : void[4] "method" "no return value for void"
  {
    unknown idxType[520975] "temp" "type variable"
    (520977 'move' idxType[520975](520973 'typeof' high[107604]))
    (520979 'init field' this[107599] c"idxType" idxType[520975])
    unknown call_tmp[785500] "expr temp" "maybe param" "maybe type" "temp"
    (785503 'move' call_tmp[785500](520984 call : high[107118] boundKind[107122]))
    (520986 'init field' this[107599] c"bounds" call_tmp[785500])
    (551629 'end of statement')
    unknown call_tmp[785505] "expr temp" "maybe param" "maybe type" "temp"
    (785508 'move' call_tmp[785505](520991 call : one[107127] strideKind[107137]))
    (520993 'init field' this[107599] c"strides" call_tmp[785505])
    (551630 'end of statement')
    unknown _low[520996] "temp"
    unknown call_tmp[785510] "expr temp" "maybe param" "maybe type" "temp"
    (785513 'move' call_tmp[785510](521007 '.v' this[107599] c"idxType"))
    unknown call_tmp[785515] "expr temp" "maybe param" "maybe type" "temp"
    (785518 'move' call_tmp[785515](520999 call chpl__idxTypeToIntIdxType call_tmp[785510]))
    (521001 'default init var' _low[520996] call_tmp[785515])
    (521003 '.=' this[107599] c"_low" _low[520996])
    (551631 'end of statement')
    unknown call_tmp[785520] "maybe param" "maybe type" "temp"
    (785523 'move' call_tmp[785520](107634 call chpl__idxToInt high[107604]))
    unknown call_tmp[785525] "expr temp" "maybe param" "maybe type" "temp"
    (785528 'move' call_tmp[785525](521021 '.v' this[107599] c"idxType"))
    unknown call_tmp[785530] "maybe param" "maybe type" "temp"
    (785533 'move' call_tmp[785530](521013 call chpl__idxTypeToIntIdxType call_tmp[785525]))
    unknown _high[521010] "temp"
    (521015 'init var' _high[521010] call_tmp[785520] call_tmp[785530])
    (521017 'init field' this[107599] c"_high" _high[521010])
    (551632 'end of statement')
    unknown _stride[521024] "temp"
    unknown tmp[671469] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[671470] "maybe param" "temp"
    unknown call_tmp[785535] "expr temp" "maybe param" "maybe type" "temp"
    (785538 'move' call_tmp[785535](521044 '.v' this[107599] c"strides"))
    unknown call_tmp[785542] "expr temp" "maybe param" "maybe type" "temp"
    (785545 'move' call_tmp[785542](521030 call(521027 call (partial) isPosNegOne _mt[203] call_tmp[785535])))
    (671475 'move' tmp[671470](671473 call _cond_test call_tmp[785542]))
    if tmp[671470]
    {
      (671480 'move' tmp[671469](671477 '_paramFoldLogical' tmp[671470] nothing[7]))
    }
    {
      unknown tmp[671482] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[785547] "expr temp" "maybe param" "maybe type" "temp"
      (785550 'move' call_tmp[785547](521047 '.v' this[107599] c"idxType"))
      (671484 'move' tmp[671482](521035 call chpl__rangeStrideType call_tmp[785547]))
      (671489 'move' tmp[671469](671486 '_paramFoldLogical' tmp[671470] tmp[671482]))
    }
    (521038 'default init var' _stride[521024] tmp[671469])
    (521040 '.=' this[107599] c"_stride" _stride[521024])
    (551633 'end of statement')
    unknown _alignment[521050] "temp"
    unknown tmp[671496] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[671497] "maybe param" "temp"
    unknown call_tmp[785552] "expr temp" "maybe param" "maybe type" "temp"
    (785555 'move' call_tmp[785552](521070 '.v' this[107599] c"strides"))
    unknown call_tmp[785559] "expr temp" "maybe param" "maybe type" "temp"
    (785562 'move' call_tmp[785559](521056 call(521053 call (partial) isPosNegOne _mt[203] call_tmp[785552])))
    (671502 'move' tmp[671497](671500 call _cond_test call_tmp[785559]))
    if tmp[671497]
    {
      (671507 'move' tmp[671496](671504 '_paramFoldLogical' tmp[671497] nothing[7]))
    }
    {
      unknown tmp[671509] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[785564] "expr temp" "maybe param" "maybe type" "temp"
      (785567 'move' call_tmp[785564](521073 '.v' this[107599] c"idxType"))
      (671511 'move' tmp[671509](521061 call chpl__rangeStrideType call_tmp[785564]))
      (671516 'move' tmp[671496](671513 '_paramFoldLogical' tmp[671497] tmp[671509]))
    }
    (521064 'default init var' _alignment[521050] tmp[671496])
    (521066 '.=' this[107599] c"_alignment" _alignment[521050])
    (551634 'end of statement')
    (521076 'init done')
    (551635 'end of statement')
    unknown call_tmp[785571] "expr temp" "maybe param" "maybe type" "temp"
    (785574 'move' call_tmp[785571](425841 call idxType _mt[203] this[107599]))
    unknown call_tmp[785576] "expr temp" "maybe param" "maybe type" "temp"
    (785579 'move' call_tmp[785576](107652 call isFiniteIdxType call_tmp[785571]))
    unknown call_tmp[785581] "expr temp" "maybe param" "maybe type" "temp"
    (785584 'move' call_tmp[785581](107654 call _cond_test call_tmp[785576]))
    if call_tmp[785581]
    {
      unknown call_tmp[785588] "expr temp" "maybe param" "maybe type" "temp"
      (785591 'move' call_tmp[785588](107645 call _low _mt[203] this[107599]))
      unknown call_tmp[785595] "expr temp" "maybe param" "maybe type" "temp"
      (785598 'move' call_tmp[785595](425836 call idxType _mt[203] this[107599]))
      unknown call_tmp[785600] "expr temp" "maybe param" "maybe type" "temp"
      (785603 'move' call_tmp[785600](107649 call finiteIdxTypeLow call_tmp[785595]))
      (107642 call = call_tmp[785588] call_tmp[785600])
    }
    (602683 return _void[46])
  }
  function range[240](?).init[107660](arg _mt[107666]:_MT[201], ref arg this[107663]:range[240](?) :
  range[240](?)) : void[4] "method" "no return value for void"
  {
    unknown idxType[521077] "temp" "type variable"
    (521079 'move' idxType[521077] int(64)[10])
    (521081 'init field' this[107663] c"idxType" idxType[521077])
    unknown call_tmp[785605] "expr temp" "maybe param" "maybe type" "temp"
    (785608 'move' call_tmp[785605](521086 call : neither[107120] boundKind[107122]))
    (521088 'init field' this[107663] c"bounds" call_tmp[785605])
    (551637 'end of statement')
    unknown call_tmp[785610] "expr temp" "maybe param" "maybe type" "temp"
    (785613 'move' call_tmp[785610](521093 call : one[107127] strideKind[107137]))
    (521095 'init field' this[107663] c"strides" call_tmp[785610])
    (551638 'end of statement')
    unknown _low[521098] "temp"
    unknown call_tmp[785615] "expr temp" "maybe param" "maybe type" "temp"
    (785618 'move' call_tmp[785615](521109 '.v' this[107663] c"idxType"))
    unknown call_tmp[785620] "expr temp" "maybe param" "maybe type" "temp"
    (785623 'move' call_tmp[785620](521101 call chpl__idxTypeToIntIdxType call_tmp[785615]))
    (521103 'default init var' _low[521098] call_tmp[785620])
    (521105 '.=' this[107663] c"_low" _low[521098])
    (551639 'end of statement')
    unknown _high[521112] "temp"
    unknown call_tmp[785625] "expr temp" "maybe param" "maybe type" "temp"
    (785628 'move' call_tmp[785625](521123 '.v' this[107663] c"idxType"))
    unknown call_tmp[785630] "expr temp" "maybe param" "maybe type" "temp"
    (785633 'move' call_tmp[785630](521115 call chpl__idxTypeToIntIdxType call_tmp[785625]))
    (521117 'default init var' _high[521112] call_tmp[785630])
    (521119 '.=' this[107663] c"_high" _high[521112])
    (551640 'end of statement')
    unknown _stride[521126] "temp"
    unknown tmp[671523] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[671524] "maybe param" "temp"
    unknown call_tmp[785635] "expr temp" "maybe param" "maybe type" "temp"
    (785638 'move' call_tmp[785635](521146 '.v' this[107663] c"strides"))
    unknown call_tmp[785642] "expr temp" "maybe param" "maybe type" "temp"
    (785645 'move' call_tmp[785642](521132 call(521129 call (partial) isPosNegOne _mt[203] call_tmp[785635])))
    (671529 'move' tmp[671524](671527 call _cond_test call_tmp[785642]))
    if tmp[671524]
    {
      (671534 'move' tmp[671523](671531 '_paramFoldLogical' tmp[671524] nothing[7]))
    }
    {
      unknown tmp[671536] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[785647] "expr temp" "maybe param" "maybe type" "temp"
      (785650 'move' call_tmp[785647](521149 '.v' this[107663] c"idxType"))
      (671538 'move' tmp[671536](521137 call chpl__rangeStrideType call_tmp[785647]))
      (671543 'move' tmp[671523](671540 '_paramFoldLogical' tmp[671524] tmp[671536]))
    }
    (521140 'default init var' _stride[521126] tmp[671523])
    (521142 '.=' this[107663] c"_stride" _stride[521126])
    (551641 'end of statement')
    unknown _alignment[521152] "temp"
    unknown tmp[671550] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[671551] "maybe param" "temp"
    unknown call_tmp[785652] "expr temp" "maybe param" "maybe type" "temp"
    (785655 'move' call_tmp[785652](521172 '.v' this[107663] c"strides"))
    unknown call_tmp[785659] "expr temp" "maybe param" "maybe type" "temp"
    (785662 'move' call_tmp[785659](521158 call(521155 call (partial) isPosNegOne _mt[203] call_tmp[785652])))
    (671556 'move' tmp[671551](671554 call _cond_test call_tmp[785659]))
    if tmp[671551]
    {
      (671561 'move' tmp[671550](671558 '_paramFoldLogical' tmp[671551] nothing[7]))
    }
    {
      unknown tmp[671563] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[785664] "expr temp" "maybe param" "maybe type" "temp"
      (785667 'move' call_tmp[785664](521175 '.v' this[107663] c"idxType"))
      (671565 'move' tmp[671563](521163 call chpl__rangeStrideType call_tmp[785664]))
      (671570 'move' tmp[671550](671567 '_paramFoldLogical' tmp[671551] tmp[671563]))
    }
    (521166 'default init var' _alignment[521152] tmp[671550])
    (521168 '.=' this[107663] c"_alignment" _alignment[521152])
    (551642 'end of statement')
    (521178 'init done')
    (551643 'end of statement')
    unknown call_tmp[785671] "expr temp" "maybe param" "maybe type" "temp"
    (785674 'move' call_tmp[785671](425856 call idxType _mt[203] this[107663]))
    unknown call_tmp[785676] "expr temp" "maybe param" "maybe type" "temp"
    (785679 'move' call_tmp[785676](107711 call isFiniteIdxType call_tmp[785671]))
    unknown call_tmp[785681] "expr temp" "maybe param" "maybe type" "temp"
    (785684 'move' call_tmp[785681](107713 call _cond_test call_tmp[785676]))
    if call_tmp[785681]
    {
      unknown call_tmp[785688] "expr temp" "maybe param" "maybe type" "temp"
      (785691 'move' call_tmp[785688](107695 call _low _mt[203] this[107663]))
      unknown call_tmp[785695] "expr temp" "maybe param" "maybe type" "temp"
      (785698 'move' call_tmp[785695](425846 call idxType _mt[203] this[107663]))
      unknown call_tmp[785700] "expr temp" "maybe param" "maybe type" "temp"
      (785703 'move' call_tmp[785700](107699 call finiteIdxTypeLow call_tmp[785695]))
      (107692 call = call_tmp[785688] call_tmp[785700])
      (551644 'end of statement')
      unknown call_tmp[785707] "expr temp" "maybe param" "maybe type" "temp"
      (785710 'move' call_tmp[785707](107704 call _high _mt[203] this[107663]))
      unknown call_tmp[785714] "expr temp" "maybe param" "maybe type" "temp"
      (785717 'move' call_tmp[785714](425851 call idxType _mt[203] this[107663]))
      unknown call_tmp[785719] "expr temp" "maybe param" "maybe type" "temp"
      (785722 'move' call_tmp[785719](107708 call finiteIdxTypeHigh call_tmp[785714]))
      (107701 call = call_tmp[785707] call_tmp[785719])
    }
    (602685 return _void[46])
  }
  function range[240](?).init[107719](arg _mt[107735]:_MT[201], ref arg this[107722]:range[240](?) :
  range[240](?), arg idxType[107725]:_any[141](?), param arg bounds[107728]:boundKind[107122], param arg strides[107732]:strideKind[107137]) : void[4] "method" "no return value for void"
  {
    unknown tmp[483381] "maybe param" "temp"
    (483392 'move' tmp[483381] 0)
    unknown call_tmp[785724] "expr temp" "maybe param" "maybe type" "temp"
    (785727 'move' call_tmp[785724](483394 call _cond_invalid tmp[483381]))
    if call_tmp[785724]
    {
      (483397 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[671604] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[671605] "maybe param" "temp"
    unknown call_tmp[785729] "expr temp" "maybe param" "maybe type" "temp"
    (785732 'move' call_tmp[785729](483382 call isTrue tmp[483381]))
    (671610 'move' tmp[671605](671608 call _cond_test call_tmp[785729]))
    if tmp[671605]
    {
      unknown tmp[483402] "maybe param" "temp"
      (483413 'move' tmp[483402](107749 call == bounds[107728] low[107116]))
      unknown call_tmp[785734] "expr temp" "maybe param" "maybe type" "temp"
      (785737 'move' call_tmp[785734](483415 call _cond_invalid tmp[483402]))
      if call_tmp[785734]
      {
        (483418 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[671577] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[671578] "maybe param" "temp"
      unknown call_tmp[785739] "expr temp" "maybe param" "maybe type" "temp"
      (785742 'move' call_tmp[785739](483403 call isTrue tmp[483402]))
      (671583 'move' tmp[671578](671581 call _cond_test call_tmp[785739]))
      if tmp[671578]
      {
        (671588 'move' tmp[671577](671585 '_paramFoldLogical' tmp[671578] 1))
      }
      {
        unknown tmp[671590] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[785744] "expr temp" "maybe param" "maybe type" "temp"
        (785747 'move' call_tmp[785744](107756 call == bounds[107728] high[107118]))
        (671592 'move' tmp[671590](483407 call isTrue call_tmp[785744]))
        (671597 'move' tmp[671577](671594 '_paramFoldLogical' tmp[671578] tmp[671590]))
      }
      unknown tmp[671612] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (671614 'move' tmp[671612](483385 call isTrue tmp[671577]))
      (671619 'move' tmp[671604](671616 '_paramFoldLogical' tmp[671605] tmp[671612]))
    }
    {
      (671624 'move' tmp[671604](671621 '_paramFoldLogical' tmp[671605] 0))
    }
    unknown call_tmp[785749] "expr temp" "maybe param" "maybe type" "temp"
    (785752 'move' call_tmp[785749](107763 call _cond_test tmp[671604]))
    if call_tmp[785749]
    {
      (107739 call warning "Default initialization of a range with 'boundKind.low' or 'boundKind.high' is unstable")
    }
    unknown call_tmp[785756] "expr temp" "maybe param" "maybe type" "temp"
    (785759 'move' call_tmp[785756](107777 call chpl__defaultLowBound idxType[107725] bounds[107728]))
    unknown call_tmp[785761] "expr temp" "maybe param" "maybe type" "temp"
    (785764 'move' call_tmp[785761](107782 call chpl__defaultHighBound idxType[107725] bounds[107728]))
    unknown call_tmp[785768] "expr temp" "maybe param" "maybe type" "temp"
    (785771 'move' call_tmp[785768](107794 call(107791 call (partial) defaultStride _mt[203] strides[107732])))
    unknown call_tmp[785773] "expr temp" "maybe param" "maybe type" "temp"
    (785776 'move' call_tmp[785773](107796 call chpl__rangeStrideType idxType[107725]))
    unknown call_tmp[785778] "expr temp" "maybe param" "maybe type" "temp"
    (785781 'move' call_tmp[785778](107786 call : call_tmp[785768] call_tmp[785773]))
    unknown call_tmp[785783] "expr temp" "maybe param" "maybe type" "temp"
    (785786 'move' call_tmp[785783](107803 call chpl__rangeStrideType idxType[107725]))
    unknown call_tmp[785788] "expr temp" "maybe param" "maybe type" "temp"
    (785791 'move' call_tmp[785788](107799 call : 0 call_tmp[785783]))
    (107772 call(107769 call (partial) init _mt[203] this[107722]) idxType[107725] bounds[107728] strides[107732](_low = call_tmp[785756])(_high = call_tmp[785761])(_stride = call_tmp[785778])(alignmentValue = call_tmp[785788]))
    (602687 return _void[46])
  }
  function range[240](?).init[107808](arg _mt[107828]:_MT[201], ref arg this[107811]:range[240](?) :
  range[240](?), arg idxType[107814]:_any[141](?), param arg bounds[107817]:boundKind[107122], param arg strides[107821]:strideKind[107137], param arg internal[107825]:bool[19]) : void[4] "method" "no return value for void"
  {
    unknown call_tmp[785795] "expr temp" "maybe param" "maybe type" "temp"
    (785798 'move' call_tmp[785795](107840 call chpl__defaultLowBound idxType[107814] bounds[107817]))
    unknown call_tmp[785800] "expr temp" "maybe param" "maybe type" "temp"
    (785803 'move' call_tmp[785800](107845 call chpl__defaultHighBound idxType[107814] bounds[107817]))
    unknown call_tmp[785807] "expr temp" "maybe param" "maybe type" "temp"
    (785810 'move' call_tmp[785807](107855 call(107852 call (partial) defaultStride _mt[203] strides[107821])))
    unknown call_tmp[785812] "expr temp" "maybe param" "maybe type" "temp"
    (785815 'move' call_tmp[785812](107857 call chpl__rangeStrideType idxType[107814]))
    unknown call_tmp[785817] "expr temp" "maybe param" "maybe type" "temp"
    (785820 'move' call_tmp[785817](107849 call : call_tmp[785807] call_tmp[785812]))
    unknown call_tmp[785822] "expr temp" "maybe param" "maybe type" "temp"
    (785825 'move' call_tmp[785822](107864 call chpl__rangeStrideType idxType[107814]))
    unknown call_tmp[785827] "expr temp" "maybe param" "maybe type" "temp"
    (785830 'move' call_tmp[785827](107860 call : 0 call_tmp[785822]))
    (107835 call(107832 call (partial) init _mt[203] this[107811]) idxType[107814] bounds[107817] strides[107821](_low = call_tmp[785795])(_high = call_tmp[785800])(_stride = call_tmp[785817])(alignmentValue = call_tmp[785827]))
    (602689 return _void[46])
  }
  function range[240](?).init[107869](arg _mt[107899]:_MT[201], ref arg this[107872]:range[240](?) :
  range[240](?), arg idxType[107875]:_any[141](?), param arg bounds[107878]:boundKind[107122], param arg strides[107882]:strideKind[107137], arg _low[107885]:_any[141](?), arg _high[107887]:_any[141](?), arg _stride[107889]:_any[141](?), arg _alignment[107891]:_any[141](?), arg _aligned[107893]:_any[141](?), param arg normalizeAlignment[107896] :
  1 =
  1) : void[4] "method" "no return value for void"
  {
    unknown almtType[107903] "dead at end of block" "insert auto destroy" "type variable"
    (645179 'move' almtType[107903](645177 call chpl__rangeStrideType idxType[107875]))
    const alignmentValue[107909] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[671685] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[671686] "maybe param" "temp"
    unknown call_tmp[785834] "expr temp" "maybe param" "maybe type" "temp"
    (785837 'move' call_tmp[785834](107914 call(107911 call (partial) isPosNegOne _mt[203] strides[107882])))
    (671691 'move' tmp[671686](671689 call _cond_test call_tmp[785834]))
    if tmp[671686]
    {
      (671696 'move' tmp[671685](671693 '_paramFoldLogical' tmp[671686] none[48]))
    }
    {
      unknown tmp[671658] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[671659] "maybe param" "temp"
      unknown call_tmp[785839] "expr temp" "maybe param" "maybe type" "temp"
      (785842 'move' call_tmp[785839](107916 call ! _aligned[107893]))
      (671664 'move' tmp[671659](671662 call _cond_test call_tmp[785839]))
      if tmp[671659]
      {
        unknown tmp[671666] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (671668 'move' tmp[671666](107919 call : unalignedMark[107107] almtType[107903]))
        (671673 'move' tmp[671658](671670 '_paramFoldLogical' tmp[671659] tmp[671666]))
      }
      {
        unknown tmp[671631] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[671632] "maybe param" "temp"
        (671637 'move' tmp[671632](671635 call _cond_test normalizeAlignment[107896]))
        if tmp[671632]
        {
          unknown tmp[671639] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[785844] "expr temp" "maybe param" "maybe type" "temp"
          (785847 'move' call_tmp[785844](107927 call chpl__mod _alignment[107891] _stride[107889]))
          (671641 'move' tmp[671639](107924 call : call_tmp[785844] almtType[107903]))
          (671646 'move' tmp[671631](671643 '_paramFoldLogical' tmp[671632] tmp[671639]))
        }
        {
          (671651 'move' tmp[671631](671648 '_paramFoldLogical' tmp[671632] _alignment[107891]))
        }
        (671678 'move' tmp[671658](671675 '_paramFoldLogical' tmp[671659] tmp[671631]))
      }
      (671701 'move' tmp[671685](671698 '_paramFoldLogical' tmp[671686] tmp[671658]))
    }
    (645181 'init var' alignmentValue[107909] tmp[671685])
    (107942 'end of statement' almtType[107903])
    (107947 call(107944 call (partial) init _mt[203] this[107872]) idxType[107875] bounds[107878] strides[107882] _low[107885] _high[107887] _stride[107889] alignmentValue[107909])
    (551651 'end of statement' alignmentValue[107909])
    (602691 return _void[46])
  }
  function range[240](?).init[107957](arg _mt[107981]:_MT[201], ref arg this[107960]:range[240](?) :
  range[240](?), arg idxType[107963]:_any[141](?), param arg bounds[107966]:boundKind[107122], param arg strides[107970]:strideKind[107137], arg _low[107973]:_any[141](?), arg _high[107975]:_any[141](?), arg _stride[107977]:_any[141](?), arg alignmentValue[107979]:_any[141](?)) : void[4] "method" "no return value for void"
  {
    unknown idxType[521179] "temp" "type variable"
    (521181 'move' idxType[521179] idxType[107963])
    (521183 'init field' this[107960] c"idxType" idxType[521179])
    unknown call_tmp[785851] "expr temp" "maybe param" "maybe type" "temp"
    (785854 'move' call_tmp[785851](521188 call : bounds[107966] boundKind[107122]))
    (521190 'init field' this[107960] c"bounds" call_tmp[785851])
    (551653 'end of statement')
    unknown call_tmp[785856] "expr temp" "maybe param" "maybe type" "temp"
    (785859 'move' call_tmp[785856](521194 call : strides[107970] strideKind[107137]))
    (521196 'init field' this[107960] c"strides" call_tmp[785856])
    (551654 'end of statement')
    unknown call_tmp[785861] "expr temp" "maybe param" "maybe type" "temp"
    (785864 'move' call_tmp[785861](108015 call chpl__idxTypeToIntIdxType idxType[107963]))
    unknown call_tmp[785866] "maybe param" "maybe type" "temp"
    (785869 'move' call_tmp[785866](108011 call : _low[107973] call_tmp[785861]))
    unknown call_tmp[785871] "expr temp" "maybe param" "maybe type" "temp"
    (785874 'move' call_tmp[785871](521210 '.v' this[107960] c"idxType"))
    unknown call_tmp[785876] "maybe param" "maybe type" "temp"
    (785879 'move' call_tmp[785876](521202 call chpl__idxTypeToIntIdxType call_tmp[785871]))
    unknown _low[521199] "temp"
    (521204 'init var' _low[521199] call_tmp[785866] call_tmp[785876])
    (521206 'init field' this[107960] c"_low" _low[521199])
    (551655 'end of statement')
    unknown call_tmp[785881] "expr temp" "maybe param" "maybe type" "temp"
    (785884 'move' call_tmp[785881](108027 call chpl__idxTypeToIntIdxType idxType[107963]))
    unknown call_tmp[785886] "maybe param" "maybe type" "temp"
    (785889 'move' call_tmp[785886](108023 call : _high[107975] call_tmp[785881]))
    unknown call_tmp[785891] "expr temp" "maybe param" "maybe type" "temp"
    (785894 'move' call_tmp[785891](521224 '.v' this[107960] c"idxType"))
    unknown call_tmp[785896] "maybe param" "maybe type" "temp"
    (785899 'move' call_tmp[785896](521216 call chpl__idxTypeToIntIdxType call_tmp[785891]))
    unknown _high[521213] "temp"
    (521218 'init var' _high[521213] call_tmp[785886] call_tmp[785896])
    (521220 'init field' this[107960] c"_high" _high[521213])
    (551656 'end of statement')
    unknown call_tmp[785903] "expr temp" "maybe param" "maybe type" "temp"
    (785906 'move' call_tmp[785903](108062 call(425919 call (partial) hasParamStrideAltvalAld _mt[203] this[107960])))
    unknown call_tmp[785908] "expr temp" "maybe param" "maybe type" "temp"
    (785911 'move' call_tmp[785908](108059 call ! call_tmp[785903]))
    unknown call_tmp[785913] "expr temp" "maybe param" "maybe type" "temp"
    (785916 'move' call_tmp[785913](108063 call _cond_test call_tmp[785908]))
    if call_tmp[785913]
    {
      unknown _stride[521227] "temp"
      unknown tmp[671708] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[671709] "maybe param" "temp"
      unknown call_tmp[785918] "expr temp" "maybe param" "maybe type" "temp"
      (785921 'move' call_tmp[785918](521247 '.v' this[107960] c"strides"))
      unknown call_tmp[785925] "expr temp" "maybe param" "maybe type" "temp"
      (785928 'move' call_tmp[785925](521233 call(521230 call (partial) isPosNegOne _mt[203] call_tmp[785918])))
      (671714 'move' tmp[671709](671712 call _cond_test call_tmp[785925]))
      if tmp[671709]
      {
        (671719 'move' tmp[671708](671716 '_paramFoldLogical' tmp[671709] nothing[7]))
      }
      {
        unknown tmp[671721] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[785930] "expr temp" "maybe param" "maybe type" "temp"
        (785933 'move' call_tmp[785930](521250 '.v' this[107960] c"idxType"))
        (671723 'move' tmp[671721](521238 call chpl__rangeStrideType call_tmp[785930]))
        (671728 'move' tmp[671708](671725 '_paramFoldLogical' tmp[671709] tmp[671721]))
      }
      (521241 'init var' _stride[521227] _stride[107977] tmp[671708])
      (521243 'init field' this[107960] c"_stride" _stride[521227])
      (551657 'end of statement')
      unknown _alignment[521253] "temp"
      unknown tmp[671735] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[671736] "maybe param" "temp"
      unknown call_tmp[785935] "expr temp" "maybe param" "maybe type" "temp"
      (785938 'move' call_tmp[785935](521273 '.v' this[107960] c"strides"))
      unknown call_tmp[785942] "expr temp" "maybe param" "maybe type" "temp"
      (785945 'move' call_tmp[785942](521259 call(521256 call (partial) isPosNegOne _mt[203] call_tmp[785935])))
      (671741 'move' tmp[671736](671739 call _cond_test call_tmp[785942]))
      if tmp[671736]
      {
        (671746 'move' tmp[671735](671743 '_paramFoldLogical' tmp[671736] nothing[7]))
      }
      {
        unknown tmp[671748] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[785947] "expr temp" "maybe param" "maybe type" "temp"
        (785950 'move' call_tmp[785947](521276 '.v' this[107960] c"idxType"))
        (671750 'move' tmp[671748](521264 call chpl__rangeStrideType call_tmp[785947]))
        (671755 'move' tmp[671735](671752 '_paramFoldLogical' tmp[671736] tmp[671748]))
      }
      (521267 'init var' _alignment[521253] alignmentValue[107979] tmp[671735])
      (521269 'init field' this[107960] c"_alignment" _alignment[521253])
      (551658 'end of statement')
      unknown call_tmp[785952] "expr temp" "maybe param" "maybe type" "temp"
      (785955 'move' call_tmp[785952](108054 call _cond_test 1))
      if call_tmp[785952]
      {
        (108049 call verifyAppropriateStride strides[107970] _stride[107977])
      }
    }
    {
      unknown _stride[521281] "temp"
      unknown tmp[671762] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[671763] "maybe param" "temp"
      unknown call_tmp[785957] "expr temp" "maybe param" "maybe type" "temp"
      (785960 'move' call_tmp[785957](521301 '.v' this[107960] c"strides"))
      unknown call_tmp[785964] "expr temp" "maybe param" "maybe type" "temp"
      (785967 'move' call_tmp[785964](521287 call(521284 call (partial) isPosNegOne _mt[203] call_tmp[785957])))
      (671768 'move' tmp[671763](671766 call _cond_test call_tmp[785964]))
      if tmp[671763]
      {
        (671773 'move' tmp[671762](671770 '_paramFoldLogical' tmp[671763] nothing[7]))
      }
      {
        unknown tmp[671775] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[785969] "expr temp" "maybe param" "maybe type" "temp"
        (785972 'move' call_tmp[785969](521304 '.v' this[107960] c"idxType"))
        (671777 'move' tmp[671775](521292 call chpl__rangeStrideType call_tmp[785969]))
        (671782 'move' tmp[671762](671779 '_paramFoldLogical' tmp[671763] tmp[671775]))
      }
      (521295 'default init var' _stride[521281] tmp[671762])
      (521297 '.=' this[107960] c"_stride" _stride[521281])
      (551660 'end of statement')
      unknown _alignment[521307] "temp"
      unknown tmp[671789] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[671790] "maybe param" "temp"
      unknown call_tmp[785974] "expr temp" "maybe param" "maybe type" "temp"
      (785977 'move' call_tmp[785974](521327 '.v' this[107960] c"strides"))
      unknown call_tmp[785981] "expr temp" "maybe param" "maybe type" "temp"
      (785984 'move' call_tmp[785981](521313 call(521310 call (partial) isPosNegOne _mt[203] call_tmp[785974])))
      (671795 'move' tmp[671790](671793 call _cond_test call_tmp[785981]))
      if tmp[671790]
      {
        (671800 'move' tmp[671789](671797 '_paramFoldLogical' tmp[671790] nothing[7]))
      }
      {
        unknown tmp[671802] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[785986] "expr temp" "maybe param" "maybe type" "temp"
        (785989 'move' call_tmp[785986](521330 '.v' this[107960] c"idxType"))
        (671804 'move' tmp[671802](521318 call chpl__rangeStrideType call_tmp[785986]))
        (671809 'move' tmp[671789](671806 '_paramFoldLogical' tmp[671790] tmp[671802]))
      }
      (521321 'default init var' _alignment[521307] tmp[671789])
      (521323 '.=' this[107960] c"_alignment" _alignment[521307])
      (551661 'end of statement')
    }
    (602693 return _void[46])
  }
  function range[240](?).init=[108069](arg _mt[108086]:_MT[201], ref arg this[108072]:range[240](?) :
  range[240](?), arg other[108083]:range[240](?)) : void[4] "method" "no return value for void"
  {
    unknown idxType[108090] "dead at end of block" "insert auto destroy" "type variable"
    unknown tmp[671816] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[671817] "maybe param" "temp"
    unknown call_tmp[785991] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (785994 'move' call_tmp[785991](645187 'typeof' this[108072]))
    unknown call_tmp[785998] "expr temp" "maybe param" "maybe type" "temp"
    (786001 'move' call_tmp[785998](645186 call idxType _mt[203] call_tmp[785991]))
    unknown call_tmp[786003] "expr temp" "marked generic" "maybe param" "maybe type" "temp"
    (786006 'move' call_tmp[786003](645184 call == call_tmp[785998] ?[227]))
    (671822 'move' tmp[671817](671820 call _cond_test call_tmp[786003]))
    if tmp[671817]
    {
      unknown tmp[671824] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (671826 'move' tmp[671824](645192 'query' other[108083] 1))
      (671831 'move' tmp[671816](671828 '_paramFoldLogical' tmp[671817] tmp[671824]))
    }
    {
      unknown tmp[671833] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[786008] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (786011 'move' call_tmp[786008](645198 'typeof' this[108072]))
      (671835 'move' tmp[671833](645197 call idxType _mt[203] call_tmp[786008]))
      (671840 'move' tmp[671816](671837 '_paramFoldLogical' tmp[671817] tmp[671833]))
    }
    (645202 'move' idxType[108090] tmp[671816])
    unknown bounds[108110] "dead at end of block" "param"
    unknown tmp[671847] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[671848] "maybe param" "temp"
    unknown call_tmp[786015] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (786018 'move' call_tmp[786015](108114 'typeof' this[108072]))
    unknown call_tmp[786022] "expr temp" "maybe param" "maybe type" "temp"
    (786025 'move' call_tmp[786022](108115 call bounds _mt[203] call_tmp[786015]))
    unknown call_tmp[786027] "expr temp" "marked generic" "maybe param" "maybe type" "temp"
    (786030 'move' call_tmp[786027](108111 call == call_tmp[786022] ?[227]))
    (671853 'move' tmp[671848](671851 call _cond_test call_tmp[786027]))
    if tmp[671848]
    {
      unknown tmp[671855] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (671857 'move' tmp[671855](521351 'query' other[108083] 2))
      (671862 'move' tmp[671847](671859 '_paramFoldLogical' tmp[671848] tmp[671855]))
    }
    {
      unknown tmp[671864] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[786032] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (786035 'move' call_tmp[786032](108121 'typeof' this[108072]))
      (671866 'move' tmp[671864](108122 call bounds _mt[203] call_tmp[786032]))
      (671871 'move' tmp[671847](671868 '_paramFoldLogical' tmp[671848] tmp[671864]))
    }
    (645204 'init var' bounds[108110] tmp[671847])
    (108129 'end of statement')
    unknown strides[108131] "dead at end of block" "param"
    unknown tmp[671878] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[671879] "maybe param" "temp"
    unknown call_tmp[786039] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (786042 'move' call_tmp[786039](108135 'typeof' this[108072]))
    unknown call_tmp[786046] "expr temp" "maybe param" "maybe type" "temp"
    (786049 'move' call_tmp[786046](108136 call strides _mt[203] call_tmp[786039]))
    unknown call_tmp[786051] "expr temp" "marked generic" "maybe param" "maybe type" "temp"
    (786054 'move' call_tmp[786051](108132 call == call_tmp[786046] ?[227]))
    (671884 'move' tmp[671879](671882 call _cond_test call_tmp[786051]))
    if tmp[671879]
    {
      unknown tmp[671886] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (671888 'move' tmp[671886](521363 'query' other[108083] 3))
      (671893 'move' tmp[671878](671890 '_paramFoldLogical' tmp[671879] tmp[671886]))
    }
    {
      unknown tmp[671895] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[786056] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (786059 'move' call_tmp[786056](108142 'typeof' this[108072]))
      (671897 'move' tmp[671895](108143 call strides _mt[203] call_tmp[786056]))
      (671902 'move' tmp[671878](671899 '_paramFoldLogical' tmp[671879] tmp[671895]))
    }
    (645206 'init var' strides[108131] tmp[671878])
    (108150 'end of statement')
    unknown call_tmp[786063] "expr temp" "maybe param" "maybe type" "temp"
    (786066 'move' call_tmp[786063](521342 'query' other[108083] 1))
    unknown call_tmp[786068] "expr temp" "maybe param" "maybe type" "temp"
    (786071 'move' call_tmp[786068](108171 call assignmentIsLegal idxType[108090] call_tmp[786063]))
    unknown call_tmp[786073] "expr temp" "maybe param" "maybe type" "temp"
    (786076 'move' call_tmp[786073](108168 call ! call_tmp[786068]))
    unknown call_tmp[786078] "expr temp" "maybe param" "maybe type" "temp"
    (786081 'move' call_tmp[786078](108174 call _cond_test call_tmp[786073]))
    if call_tmp[786078]
    {
      unknown call_tmp[786083] "expr temp" "maybe param" "maybe type" "temp"
      (786086 'move' call_tmp[786083](108156 call : idxType[108090] string[244]))
      unknown call_tmp[786088] "expr temp" "maybe param" "maybe type" "temp"
      (786091 'move' call_tmp[786088](521345 'query' other[108083] 1))
      unknown call_tmp[786093] "expr temp" "maybe param" "maybe type" "temp"
      (786096 'move' call_tmp[786093](108163 call : call_tmp[786088] string[244]))
      (108152 call compilerError "initializing a range with idxType " call_tmp[786083] " from a range with idxType " call_tmp[786093])
      (551662 'end of statement' idxType[108090])
    }
    unknown call_tmp[786098] "expr temp" "maybe param" "maybe type" "temp"
    (786101 'move' call_tmp[786098](521354 'query' other[108083] 2))
    unknown call_tmp[786103] "expr temp" "maybe param" "maybe type" "temp"
    (786106 'move' call_tmp[786103](108196 call != bounds[108110] call_tmp[786098]))
    unknown call_tmp[786108] "expr temp" "maybe param" "maybe type" "temp"
    (786111 'move' call_tmp[786108](108200 call _cond_test call_tmp[786103]))
    if call_tmp[786108]
    {
      unknown call_tmp[786113] "expr temp" "maybe param" "maybe type" "temp"
      (786116 'move' call_tmp[786113](108184 call : bounds[108110] string[244]))
      unknown call_tmp[786118] "expr temp" "maybe param" "maybe type" "temp"
      (786121 'move' call_tmp[786118](521357 'query' other[108083] 2))
      unknown call_tmp[786123] "expr temp" "maybe param" "maybe type" "temp"
      (786126 'move' call_tmp[786123](108191 call : call_tmp[786118] string[244]))
      (108180 call compilerError "initializing a range with boundKind." call_tmp[786113] " from a range with boundKind." call_tmp[786123])
    }
    unknown call_tmp[786128] "expr temp" "maybe param" "maybe type" "temp"
    (786131 'move' call_tmp[786128](521366 'query' other[108083] 3))
    unknown call_tmp[786133] "expr temp" "maybe param" "maybe type" "temp"
    (786136 'move' call_tmp[786133](108225 call chpl_assignStrideIsSafe strides[108131] call_tmp[786128]))
    unknown call_tmp[786138] "expr temp" "maybe param" "maybe type" "temp"
    (786141 'move' call_tmp[786138](108222 call ! call_tmp[786133]))
    unknown call_tmp[786143] "expr temp" "maybe param" "maybe type" "temp"
    (786146 'move' call_tmp[786143](108228 call _cond_test call_tmp[786138]))
    if call_tmp[786143]
    {
      unknown call_tmp[786148] "expr temp" "maybe param" "maybe type" "temp"
      (786151 'move' call_tmp[786148](108210 call : strides[108131] string[244]))
      unknown call_tmp[786153] "expr temp" "maybe param" "maybe type" "temp"
      (786156 'move' call_tmp[786153](521369 'query' other[108083] 3))
      unknown call_tmp[786158] "expr temp" "maybe param" "maybe type" "temp"
      (786161 'move' call_tmp[786158](108217 call : call_tmp[786153] string[244]))
      (108206 call compilerError "initializing a range with strideKind." call_tmp[786148] " from a range with strideKind." call_tmp[786158])
    }
    unknown call_tmp[786163] "maybe param" "maybe type" "temp"
    (786166 'move' call_tmp[786163](108236 call isFiniteIdxType idxType[108090]))
    unknown isEnumBool[108234] "dead at end of block" "param"
    (645208 'init var' isEnumBool[108234] call_tmp[786163])
    (108239 'end of statement')
    unknown bt[108241] "dead at end of block" "insert auto destroy" "type variable"
    (645214 'move' bt[108241](645211 call chpl_integralIdxType _mt[203] other[108083]))
    unknown tmp[483423] "maybe param" "temp"
    (483434 'move' tmp[483423] isEnumBool[108234])
    unknown call_tmp[786170] "expr temp" "maybe param" "maybe type" "temp"
    (786173 'move' call_tmp[786170](483436 call _cond_invalid tmp[483423]))
    if call_tmp[786170]
    {
      (483439 call compilerError "cannot promote short-circuiting && operator")
    }
    const low[108250] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[671909] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[671910] "maybe param" "temp"
    unknown call_tmp[786175] "expr temp" "maybe param" "maybe type" "temp"
    (786178 'move' call_tmp[786175](483424 call isTrue tmp[483423]))
    (671915 'move' tmp[671910](671913 call _cond_test call_tmp[786175]))
    if tmp[671910]
    {
      unknown tmp[671917] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[786182] "expr temp" "maybe param" "maybe type" "temp"
      (786185 'move' call_tmp[786182](108260 call(108257 call (partial) hasLowBound _mt[203] other[108083])))
      unknown call_tmp[786187] "expr temp" "maybe param" "maybe type" "temp"
      (786190 'move' call_tmp[786187](108254 call ! call_tmp[786182]))
      (671919 'move' tmp[671917](483427 call isTrue call_tmp[786187]))
      (671924 'move' tmp[671909](671921 '_paramFoldLogical' tmp[671910] tmp[671917]))
    }
    {
      (671929 'move' tmp[671909](671926 '_paramFoldLogical' tmp[671910] 0))
    }
    unknown tmp[671936] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[671937] "maybe param" "temp"
    (671942 'move' tmp[671937](671940 call _cond_test tmp[671909]))
    if tmp[671937]
    {
      unknown tmp[671944] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[786192] "expr temp" "maybe param" "maybe type" "temp"
      (786195 'move' call_tmp[786192](108264 call finiteIdxTypeLow idxType[108090]))
      (671946 'move' tmp[671944](108261 call : call_tmp[786192] bt[108241]))
      (671951 'move' tmp[671936](671948 '_paramFoldLogical' tmp[671937] tmp[671944]))
    }
    {
      unknown tmp[671953] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (671955 'move' tmp[671953](108268 call _low _mt[203] other[108083]))
      (671960 'move' tmp[671936](671957 '_paramFoldLogical' tmp[671937] tmp[671953]))
    }
    (645216 'init var' low[108250] tmp[671936])
    (108275 'end of statement')
    unknown tmp[483444] "maybe param" "temp"
    (483455 'move' tmp[483444] isEnumBool[108234])
    unknown call_tmp[786199] "expr temp" "maybe param" "maybe type" "temp"
    (786202 'move' call_tmp[786199](483457 call _cond_invalid tmp[483444]))
    if call_tmp[786199]
    {
      (483460 call compilerError "cannot promote short-circuiting && operator")
    }
    const high[108277] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[671967] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[671968] "maybe param" "temp"
    unknown call_tmp[786204] "expr temp" "maybe param" "maybe type" "temp"
    (786207 'move' call_tmp[786204](483445 call isTrue tmp[483444]))
    (671973 'move' tmp[671968](671971 call _cond_test call_tmp[786204]))
    if tmp[671968]
    {
      unknown tmp[671975] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[786211] "expr temp" "maybe param" "maybe type" "temp"
      (786214 'move' call_tmp[786211](108287 call(108284 call (partial) hasHighBound _mt[203] other[108083])))
      unknown call_tmp[786216] "expr temp" "maybe param" "maybe type" "temp"
      (786219 'move' call_tmp[786216](108281 call ! call_tmp[786211]))
      (671977 'move' tmp[671975](483448 call isTrue call_tmp[786216]))
      (671982 'move' tmp[671967](671979 '_paramFoldLogical' tmp[671968] tmp[671975]))
    }
    {
      (671987 'move' tmp[671967](671984 '_paramFoldLogical' tmp[671968] 0))
    }
    unknown tmp[671994] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[671995] "maybe param" "temp"
    (672000 'move' tmp[671995](671998 call _cond_test tmp[671967]))
    if tmp[671995]
    {
      unknown tmp[672002] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[786221] "expr temp" "maybe param" "maybe type" "temp"
      (786224 'move' call_tmp[786221](108291 call finiteIdxTypeHigh idxType[108090]))
      (672004 'move' tmp[672002](108288 call : call_tmp[786221] bt[108241]))
      (672009 'move' tmp[671994](672006 '_paramFoldLogical' tmp[671995] tmp[672002]))
    }
    {
      unknown tmp[672011] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (672013 'move' tmp[672011](108295 call _high _mt[203] other[108083]))
      (672018 'move' tmp[671994](672015 '_paramFoldLogical' tmp[671995] tmp[672011]))
    }
    (645218 'init var' high[108277] tmp[671994])
    (108302 'end of statement')
    unknown call_tmp[786230] "expr temp" "maybe param" "maybe type" "temp"
    (786233 'move' call_tmp[786230](108308 call stride _mt[203] other[108083]))
    unknown call_tmp[786235] "expr temp" "maybe param" "maybe type" "temp"
    (786238 'move' call_tmp[786235](108312 call chpl__rangeStrideType idxType[108090]))
    unknown call_tmp[786240] "maybe param" "maybe type" "temp"
    (786243 'move' call_tmp[786240](108305 call : call_tmp[786230] call_tmp[786235]))
    const str[108304] "dead at end of block" "const" "insert auto destroy"
    (645220 'init var' str[108304] call_tmp[786240])
    (108315 'end of statement')
    unknown alignment[108317] "dead at end of block" "insert auto destroy"
    unknown tmp[672025] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[672026] "maybe param" "temp"
    unknown call_tmp[786247] "expr temp" "maybe param" "maybe type" "temp"
    (786250 'move' call_tmp[786247](108326 call(108323 call (partial) hasParamAlignmentField _mt[203] other[108083])))
    (672031 'move' tmp[672026](672029 call _cond_test call_tmp[786247]))
    if tmp[672026]
    {
      (672036 'move' tmp[672025](672033 '_paramFoldLogical' tmp[672026] 0))
    }
    {
      unknown tmp[672038] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (672040 'move' tmp[672038](108329 call _alignment _mt[203] other[108083]))
      (672045 'move' tmp[672025](672042 '_paramFoldLogical' tmp[672026] tmp[672038]))
    }
    unknown call_tmp[786254] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (786257 'move' call_tmp[786254](108336 'typeof' str[108304]))
    unknown call_tmp[786259] "maybe param" "maybe type" "temp"
    (786262 'move' call_tmp[786259](108318 call : tmp[672025] call_tmp[786254]))
    (645222 'init var' alignment[108317] call_tmp[786259])
    (108338 'end of statement' idxType[108090] bt[108241] str[108304])
    unknown tmp[483465] "maybe param" "temp"
    (483476 'move' tmp[483465] isEnumBool[108234])
    unknown call_tmp[786264] "expr temp" "maybe param" "maybe type" "temp"
    (786267 'move' call_tmp[786264](483478 call _cond_invalid tmp[483465]))
    if call_tmp[786264]
    {
      (483481 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[672052] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[672053] "maybe param" "temp"
    unknown call_tmp[786269] "expr temp" "maybe param" "maybe type" "temp"
    (786272 'move' call_tmp[786269](483466 call isTrue tmp[483465]))
    (672058 'move' tmp[672053](672056 call _cond_test call_tmp[786269]))
    if tmp[672053]
    {
      unknown tmp[672060] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[786276] "expr temp" "maybe param" "maybe type" "temp"
      (786279 'move' call_tmp[786276](108374 call(108371 call (partial) isAligned _mt[203] other[108083])))
      unknown call_tmp[786281] "expr temp" "maybe param" "maybe type" "temp"
      (786284 'move' call_tmp[786281](108366 call ! call_tmp[786276]))
      (672062 'move' tmp[672060](483469 call isTrue call_tmp[786281]))
      (672067 'move' tmp[672052](672064 '_paramFoldLogical' tmp[672053] tmp[672060]))
    }
    {
      (672072 'move' tmp[672052](672069 '_paramFoldLogical' tmp[672053] 0))
    }
    unknown call_tmp[786286] "expr temp" "maybe param" "maybe type" "temp"
    (786289 'move' call_tmp[786286](108375 call _cond_test tmp[672052]))
    if call_tmp[786286]
    {
      unknown call_tmp[786291] "expr temp" "maybe param" "maybe type" "temp"
      (786294 'move' call_tmp[786291](108356 call isPositiveStride strides[108131] str[108304]))
      unknown call_tmp[786296] "expr temp" "maybe param" "maybe type" "temp"
      (786299 'move' call_tmp[786296](108359 call _cond_test call_tmp[786291]))
      if call_tmp[786296]
      {
        unknown call_tmp[786301] "expr temp" "maybe param" "maybe type" "temp"
        (786304 'move' call_tmp[786301](108345 call finiteIdxTypeLow idxType[108090]))
        (108341 call = alignment[108317] call_tmp[786301])
        (551672 'end of statement' alignment[108317] idxType[108090])
        {
        }
      }
      {
        unknown call_tmp[786306] "expr temp" "maybe param" "maybe type" "temp"
        (786309 'move' call_tmp[786306](108353 call finiteIdxTypeHigh idxType[108090]))
        (108349 call = alignment[108317] call_tmp[786306])
        (551675 'end of statement' alignment[108317] idxType[108090])
      }
    }
    (108383 call(108380 call (partial) init _mt[203] this[108072]) idxType[108090] bounds[108110] strides[108131] low[108250] high[108277] str[108304] alignment[108317])
    (551678 'end of statement' idxType[108090] low[108250] high[108277] str[108304] alignment[108317])
    (602695 return _void[46])
  }
  function range[240](?).displayRepresentation[108393](arg _mt[108405]:_MT[201], arg this[108396]:range[240](?) :
  range[240](?), arg msg[108401]:string[244] =
  "") : _unknown[42] "method"
  {
    unknown ret[602708] "RVV" "temp"
    function :[108409](arg arg[108412]:nothing[7], arg t[108416]:string[244]) param : _unknown[42] "operator"
    {
      unknown ret[602699] "RVV" "param" "temp"
      (602704 'move' ret[602699](602703 'deref' "none"))
      (602701 return ret[602699])
    }
    unknown call_tmp[786315] "expr temp" "maybe param" "maybe type" "temp"
    (786318 'move' call_tmp[786315](425971 call _low _mt[203] this[108396]))
    unknown call_tmp[786320] "expr temp" "maybe param" "maybe type" "temp"
    (786323 'move' call_tmp[786320](108430 call : call_tmp[786315] string[244]))
    unknown call_tmp[786327] "expr temp" "maybe param" "maybe type" "temp"
    (786330 'move' call_tmp[786327](425976 call _high _mt[203] this[108396]))
    unknown call_tmp[786332] "expr temp" "maybe param" "maybe type" "temp"
    (786335 'move' call_tmp[786332](108437 call : call_tmp[786327] string[244]))
    unknown call_tmp[786339] "expr temp" "maybe param" "maybe type" "temp"
    (786342 'move' call_tmp[786339](425981 call _stride _mt[203] this[108396]))
    unknown call_tmp[786344] "expr temp" "maybe param" "maybe type" "temp"
    (786347 'move' call_tmp[786344](108442 call : call_tmp[786339] string[244]))
    unknown call_tmp[786351] "expr temp" "maybe param" "maybe type" "temp"
    (786354 'move' call_tmp[786351](425986 call _alignment _mt[203] this[108396]))
    unknown call_tmp[786356] "expr temp" "maybe param" "maybe type" "temp"
    (786359 'move' call_tmp[786356](108449 call : call_tmp[786351] string[244]))
    unknown call_tmp[786363] "expr temp" "maybe param" "maybe type" "temp"
    (786366 'move' call_tmp[786363](425991 call idxType _mt[203] this[108396]))
    unknown call_tmp[786368] "expr temp" "maybe param" "maybe type" "temp"
    (786371 'move' call_tmp[786368](108456 call : call_tmp[786363] string[244]))
    unknown call_tmp[786375] "expr temp" "maybe param" "maybe type" "temp"
    (786378 'move' call_tmp[786375](425996 call bounds _mt[203] this[108396]))
    unknown call_tmp[786380] "expr temp" "maybe param" "maybe type" "temp"
    (786383 'move' call_tmp[786380](108461 call : call_tmp[786375] string[244]))
    unknown call_tmp[786387] "expr temp" "maybe param" "maybe type" "temp"
    (786390 'move' call_tmp[786387](426001 call strides _mt[203] this[108396]))
    unknown call_tmp[786392] "expr temp" "maybe param" "maybe type" "temp"
    (786395 'move' call_tmp[786392](108466 call : call_tmp[786387] string[244]))
    (108425 call chpl_debug_writeln msg[108401] "range(" call_tmp[786320] ".." call_tmp[786332] " by " call_tmp[786344] " align " call_tmp[786356] " : " call_tmp[786368] "," call_tmp[786380] "," call_tmp[786392] ")")
    (602710 return ret[602708])
  }
  { scopeless type
    void[4]
  }
  function computeParamRangeIndexType_Old[108474](param arg low[108476]:_any[141](?), param arg high[108478]:_any[141](?)) type : _unknown[42] "private"
  {
    unknown ret[602714] "RVV" "temp" "type variable"
    unknown tmp[483528] "maybe param" "temp"
    unknown tmp[483549] "maybe param" "temp"
    unknown call_tmp[786397] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (786400 'move' call_tmp[786397](108530 'typeof' low[108476]))
    (483560 'move' tmp[483549](108527 call == call_tmp[786397] int(64)[10]))
    unknown call_tmp[786402] "expr temp" "maybe param" "maybe type" "temp"
    (786405 'move' call_tmp[786402](483562 call _cond_invalid tmp[483549]))
    if call_tmp[786402]
    {
      (483565 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[672079] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[672080] "maybe param" "temp"
    unknown call_tmp[786407] "expr temp" "maybe param" "maybe type" "temp"
    (786410 'move' call_tmp[786407](483550 call isTrue tmp[483549]))
    (672085 'move' tmp[672080](672083 call _cond_test call_tmp[786407]))
    if tmp[672080]
    {
      unknown tmp[672087] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[786412] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (786415 'move' call_tmp[786412](108537 'typeof' high[108478]))
      unknown call_tmp[786417] "expr temp" "maybe param" "maybe type" "temp"
      (786420 'move' call_tmp[786417](108535 call min call_tmp[786412]))
      unknown call_tmp[786422] "expr temp" "maybe param" "maybe type" "temp"
      (786425 'move' call_tmp[786422](108532 call <= call_tmp[786417] low[108476]))
      (672089 'move' tmp[672087](483553 call isTrue call_tmp[786422]))
      (672094 'move' tmp[672079](672091 '_paramFoldLogical' tmp[672080] tmp[672087]))
    }
    {
      (672099 'move' tmp[672079](672096 '_paramFoldLogical' tmp[672080] 0))
    }
    (483539 'move' tmp[483528] tmp[672079])
    unknown call_tmp[786427] "expr temp" "maybe param" "maybe type" "temp"
    (786430 'move' call_tmp[786427](483541 call _cond_invalid tmp[483528]))
    if call_tmp[786427]
    {
      (483544 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[672106] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[672107] "maybe param" "temp"
    unknown call_tmp[786432] "expr temp" "maybe param" "maybe type" "temp"
    (786435 'move' call_tmp[786432](483529 call isTrue tmp[483528]))
    (672112 'move' tmp[672107](672110 call _cond_test call_tmp[786432]))
    if tmp[672107]
    {
      unknown tmp[672114] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[786437] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (786440 'move' call_tmp[786437](108545 'typeof' high[108478]))
      unknown call_tmp[786442] "expr temp" "maybe param" "maybe type" "temp"
      (786445 'move' call_tmp[786442](108543 call max call_tmp[786437]))
      unknown call_tmp[786447] "expr temp" "maybe param" "maybe type" "temp"
      (786450 'move' call_tmp[786447](108539 call <= low[108476] call_tmp[786442]))
      (672116 'move' tmp[672114](483532 call isTrue call_tmp[786447]))
      (672121 'move' tmp[672106](672118 '_paramFoldLogical' tmp[672107] tmp[672114]))
    }
    {
      (672126 'move' tmp[672106](672123 '_paramFoldLogical' tmp[672107] 0))
    }
    unknown call_tmp[786452] "expr temp" "maybe param" "maybe type" "temp"
    (786455 'move' call_tmp[786452](108546 call _cond_test tmp[672106]))
    if call_tmp[786452]
    {
      unknown call_tmp[786457] "expr temp" "maybe param" "used in type" "maybe type" "temp" "type variable"
      (786460 'move' call_tmp[786457](108484 'typeof' high[108478]))
      (602719 'move' ret[602714](602718 'deref' call_tmp[786457]))
      gotoReturn _end_computeParamRangeIndexType_Old[602712] _end_computeParamRangeIndexType_Old[602712]
    }
    {
      unknown tmp[483486] "maybe param" "temp"
      unknown tmp[483507] "maybe param" "temp"
      unknown call_tmp[786462] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (786465 'move' call_tmp[786462](108503 'typeof' high[108478]))
      (483518 'move' tmp[483507](108500 call == call_tmp[786462] int(64)[10]))
      unknown call_tmp[786467] "expr temp" "maybe param" "maybe type" "temp"
      (786470 'move' call_tmp[786467](483520 call _cond_invalid tmp[483507]))
      if call_tmp[786467]
      {
        (483523 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[672133] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[672134] "maybe param" "temp"
      unknown call_tmp[786472] "expr temp" "maybe param" "maybe type" "temp"
      (786475 'move' call_tmp[786472](483508 call isTrue tmp[483507]))
      (672139 'move' tmp[672134](672137 call _cond_test call_tmp[786472]))
      if tmp[672134]
      {
        unknown tmp[672141] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[786477] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (786480 'move' call_tmp[786477](108510 'typeof' low[108476]))
        unknown call_tmp[786482] "expr temp" "maybe param" "maybe type" "temp"
        (786485 'move' call_tmp[786482](108508 call min call_tmp[786477]))
        unknown call_tmp[786487] "expr temp" "maybe param" "maybe type" "temp"
        (786490 'move' call_tmp[786487](108505 call <= call_tmp[786482] high[108478]))
        (672143 'move' tmp[672141](483511 call isTrue call_tmp[786487]))
        (672148 'move' tmp[672133](672145 '_paramFoldLogical' tmp[672134] tmp[672141]))
      }
      {
        (672153 'move' tmp[672133](672150 '_paramFoldLogical' tmp[672134] 0))
      }
      (483497 'move' tmp[483486] tmp[672133])
      unknown call_tmp[786492] "expr temp" "maybe param" "maybe type" "temp"
      (786495 'move' call_tmp[786492](483499 call _cond_invalid tmp[483486]))
      if call_tmp[786492]
      {
        (483502 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[672160] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[672161] "maybe param" "temp"
      unknown call_tmp[786497] "expr temp" "maybe param" "maybe type" "temp"
      (786500 'move' call_tmp[786497](483487 call isTrue tmp[483486]))
      (672166 'move' tmp[672161](672164 call _cond_test call_tmp[786497]))
      if tmp[672161]
      {
        unknown tmp[672168] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[786502] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (786505 'move' call_tmp[786502](108518 'typeof' low[108476]))
        unknown call_tmp[786507] "expr temp" "maybe param" "maybe type" "temp"
        (786510 'move' call_tmp[786507](108516 call max call_tmp[786502]))
        unknown call_tmp[786512] "expr temp" "maybe param" "maybe type" "temp"
        (786515 'move' call_tmp[786512](108512 call <= high[108478] call_tmp[786507]))
        (672170 'move' tmp[672168](483490 call isTrue call_tmp[786512]))
        (672175 'move' tmp[672160](672172 '_paramFoldLogical' tmp[672161] tmp[672168]))
      }
      {
        (672180 'move' tmp[672160](672177 '_paramFoldLogical' tmp[672161] 0))
      }
      unknown call_tmp[786517] "expr temp" "maybe param" "maybe type" "temp"
      (786520 'move' call_tmp[786517](108519 call _cond_test tmp[672160]))
      if call_tmp[786517]
      {
        unknown call_tmp[786522] "expr temp" "maybe param" "used in type" "maybe type" "temp" "type variable"
        (786525 'move' call_tmp[786522](108488 'typeof' low[108476]))
        (602724 'move' ret[602714](602723 'deref' call_tmp[786522]))
        gotoReturn _end_computeParamRangeIndexType_Old[602712] _end_computeParamRangeIndexType_Old[602712]
      }
      {
        { scopeless type
          unknown call_type_tmp[577495] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[786527] "expr temp" "maybe param" "used in type" "maybe type" "temp"
          (786530 'move' call_tmp[786527](108491 call + low[108476] high[108478]))
          (577499 'move' call_type_tmp[577495](108495 'typeof' call_tmp[786527]))
        }
        (602729 'move' ret[602714](602728 'deref' call_type_tmp[577495]))
        gotoReturn _end_computeParamRangeIndexType_Old[602712] _end_computeParamRangeIndexType_Old[602712]
      }
    }
    label _end_computeParamRangeIndexType_Old[602712]
    (602716 return ret[602714])
  }
  function computeParamRangeIndexType[108553](param arg low[108555]:_any[141](?), param arg high[108557]:_any[141](?)) type : _unknown[42] "private"
  {
    unknown ret[602735] "RVV" "temp" "type variable"
    unknown call_tmp[786532] "expr temp" "maybe param" "maybe type" "temp"
    (786535 'move' call_tmp[786532](108568 call _cond_test newRangeLiteralType[107102]))
    if call_tmp[786532]
    {
      { scopeless type
        unknown call_type_tmp[577501] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[786537] "expr temp" "maybe param" "used in type" "maybe type" "temp"
        (786540 'move' call_tmp[786537](108562 call + low[108555] high[108557]))
        (577505 'move' call_type_tmp[577501](108566 'typeof' call_tmp[786537]))
      }
      (602740 'move' ret[602735](602739 'deref' call_type_tmp[577501]))
      gotoReturn _end_computeParamRangeIndexType[602733] _end_computeParamRangeIndexType[602733]
    }
    { scopeless type
      unknown call_type_tmp[577507] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[786542] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (786545 'move' call_tmp[786542](108574 call + low[108555] high[108557]))
      (577511 'move' call_type_tmp[577507](108578 'typeof' call_tmp[786542]))
    }
    unknown newRule[108573] "dead at end of block" "insert auto destroy" "type variable"
    (645225 'move' newRule[108573] call_type_tmp[577507])
    (551694 'end of statement')
    unknown oldRule[108581] "dead at end of block" "insert auto destroy" "type variable"
    (645231 'move' oldRule[108581](645228 call computeParamRangeIndexType_Old low[108555] high[108557]))
    (551695 'end of statement')
    unknown call_tmp[786547] "expr temp" "maybe param" "maybe type" "temp"
    (786550 'move' call_tmp[786547](108590 call == newRule[108573] oldRule[108581]))
    unknown call_tmp[786552] "expr temp" "maybe param" "maybe type" "temp"
    (786555 'move' call_tmp[786552](108594 call _cond_test call_tmp[786547]))
    if call_tmp[786552]
    {
      (602745 'move' ret[602735](602744 'deref' newRule[108573]))
      gotoReturn _end_computeParamRangeIndexType[602733] _end_computeParamRangeIndexType[602733]
      (551696 'end of statement' newRule[108573])
    }
    unknown call_tmp[786557] "expr temp" "maybe param" "maybe type" "temp"
    (786560 'move' call_tmp[786557](108604 call : low[108555] string[244]))
    unknown call_tmp[786562] "expr temp" "maybe param" "maybe type" "temp"
    (786565 'move' call_tmp[786562](108609 call : high[108557] string[244]))
    unknown call_tmp[786567] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (786570 'move' call_tmp[786567](108619 'typeof' low[108555]))
    unknown call_tmp[786572] "expr temp" "maybe param" "maybe type" "temp"
    (786575 'move' call_tmp[786572](108616 call : call_tmp[786567] string[244]))
    unknown call_tmp[786577] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (786580 'move' call_tmp[786577](108627 'typeof' high[108557]))
    unknown call_tmp[786582] "expr temp" "maybe param" "maybe type" "temp"
    (786585 'move' call_tmp[786582](108624 call : call_tmp[786577] string[244]))
    unknown call_tmp[786587] "expr temp" "maybe param" "maybe type" "temp"
    (786590 'move' call_tmp[786587](108632 call : oldRule[108581] string[244]))
    unknown call_tmp[786592] "expr temp" "maybe param" "maybe type" "temp"
    (786595 'move' call_tmp[786592](108639 call : newRule[108573] string[244]))
    (108600 call compilerWarning "the idxType of this range literal " call_tmp[786557] ".." call_tmp[786562] " with the low bound of the type " call_tmp[786572] " and the high bound of the type " call_tmp[786582] " is currently " call_tmp[786587] ". In a future release it will be switched to " call_tmp[786592] ". To switch to this new typing and turn off this warning," " compile with -snewRangeLiteralType.")
    (551698 'end of statement' oldRule[108581] newRule[108573])
    (602750 'move' ret[602735](602749 'deref' oldRule[108581]))
    gotoReturn _end_computeParamRangeIndexType[602733] _end_computeParamRangeIndexType[602733]
    (551701 'end of statement' oldRule[108581])
    label _end_computeParamRangeIndexType[602733]
    (602737 return ret[602735])
  }
  function chpl_isValidRangeIdxType[108653](arg t[108655]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[602756] "RVV" "param" "temp"
    unknown tmp[483570] "maybe param" "temp"
    unknown tmp[483591] "maybe param" "temp"
    (483602 'move' tmp[483591](108664 call isIntegralType t[108655]))
    unknown call_tmp[786597] "expr temp" "maybe param" "maybe type" "temp"
    (786600 'move' call_tmp[786597](483604 call _cond_invalid tmp[483591]))
    if call_tmp[786597]
    {
      (483607 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[672187] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[672188] "maybe param" "temp"
    unknown call_tmp[786602] "expr temp" "maybe param" "maybe type" "temp"
    (786605 'move' call_tmp[786602](483592 call isTrue tmp[483591]))
    (672193 'move' tmp[672188](672191 call _cond_test call_tmp[786602]))
    if tmp[672188]
    {
      (672198 'move' tmp[672187](672195 '_paramFoldLogical' tmp[672188] 1))
    }
    {
      unknown tmp[672200] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[786607] "expr temp" "maybe param" "maybe type" "temp"
      (786610 'move' call_tmp[786607](108667 call isEnumType t[108655]))
      (672202 'move' tmp[672200](483596 call isTrue call_tmp[786607]))
      (672207 'move' tmp[672187](672204 '_paramFoldLogical' tmp[672188] tmp[672200]))
    }
    (483581 'move' tmp[483570] tmp[672187])
    unknown call_tmp[786612] "expr temp" "maybe param" "maybe type" "temp"
    (786615 'move' call_tmp[786612](483583 call _cond_invalid tmp[483570]))
    if call_tmp[786612]
    {
      (483586 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[672214] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[672215] "maybe param" "temp"
    unknown call_tmp[786617] "expr temp" "maybe param" "maybe type" "temp"
    (786620 'move' call_tmp[786617](483571 call isTrue tmp[483570]))
    (672220 'move' tmp[672215](672218 call _cond_test call_tmp[786617]))
    if tmp[672215]
    {
      (672225 'move' tmp[672214](672222 '_paramFoldLogical' tmp[672215] 1))
    }
    {
      unknown tmp[672227] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[786622] "expr temp" "maybe param" "maybe type" "temp"
      (786625 'move' call_tmp[786622](108670 call isBoolType t[108655]))
      (672229 'move' tmp[672227](483575 call isTrue call_tmp[786622]))
      (672234 'move' tmp[672214](672231 '_paramFoldLogical' tmp[672215] tmp[672227]))
    }
    (602761 'move' ret[602756](602760 'deref' tmp[672214]))
    (602758 return ret[602756])
  }
  function chpl_build_bounded_range[108674](param arg low[108677]:integral[159](?), param arg high[108681]:integral[159](?)) : _unknown[42]
  {
    unknown ret[602765] "RVV" "temp"
    unknown idxType[108686] "dead at end of block" "insert auto destroy" "type variable"
    (645237 'move' idxType[108686](645234 call computeParamRangeIndexType low[108677] high[108681]))
    (551706 'end of statement')
    unknown call_tmp[786627] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (786630 'move' call_tmp[786627](1000051 'new' range[240](?) idxType[108686](low = low[108677])(high = high[108681])))
    (602770 'move' ret[602765](602769 'deref' call_tmp[786627]))
    gotoReturn _end_chpl_build_bounded_range[602763] _end_chpl_build_bounded_range[602763]
    (551707 'end of statement' idxType[108686])
    label _end_chpl_build_bounded_range[602763]
    (602767 return ret[602765])
  }
  function chpl_build_bounded_range[108703](arg low[108708] :
  (108706 call int(64)[10] 8), arg high[108714] :
  (108712 call int(64)[10] 8)) : _unknown[42]
  {
    unknown ret[602776] "RVV" "temp"
    unknown call_tmp[786632] "expr temp" "maybe param" "maybe type" "temp"
    (786635 'move' call_tmp[786632](108723 call int(64)[10] 8))
    unknown call_tmp[786637] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (786640 'move' call_tmp[786637](1000052 'new' range[240](?) call_tmp[786632](low = low[108708])(high = high[108714])))
    (602781 'move' ret[602776](602780 'deref' call_tmp[786637]))
    (602778 return ret[602776])
  }
  function chpl_build_bounded_range[108731](arg low[108736] :
  (108734 call int(64)[10] 16), arg high[108742] :
  (108740 call int(64)[10] 16)) : _unknown[42]
  {
    unknown ret[602785] "RVV" "temp"
    unknown call_tmp[786642] "expr temp" "maybe param" "maybe type" "temp"
    (786645 'move' call_tmp[786642](108751 call int(64)[10] 16))
    unknown call_tmp[786647] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (786650 'move' call_tmp[786647](1000053 'new' range[240](?) call_tmp[786642](low = low[108736])(high = high[108742])))
    (602790 'move' ret[602785](602789 'deref' call_tmp[786647]))
    (602787 return ret[602785])
  }
  function chpl_build_bounded_range[108759](arg low[108764] :
  (108762 call int(64)[10] 32), arg high[108770] :
  (108768 call int(64)[10] 32)) : _unknown[42]
  {
    unknown ret[602794] "RVV" "temp"
    unknown call_tmp[786652] "expr temp" "maybe param" "maybe type" "temp"
    (786655 'move' call_tmp[786652](108779 call int(64)[10] 32))
    unknown call_tmp[786657] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (786660 'move' call_tmp[786657](1000054 'new' range[240](?) call_tmp[786652](low = low[108764])(high = high[108770])))
    (602799 'move' ret[602794](602798 'deref' call_tmp[786657]))
    (602796 return ret[602794])
  }
  function chpl_build_bounded_range[108787](arg low[108792] :
  (108790 call int(64)[10] 64), arg high[108798] :
  (108796 call int(64)[10] 64)) : _unknown[42]
  {
    unknown ret[602803] "RVV" "temp"
    unknown call_tmp[786662] "expr temp" "maybe param" "maybe type" "temp"
    (786665 'move' call_tmp[786662](108807 call int(64)[10] 64))
    unknown call_tmp[786667] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (786670 'move' call_tmp[786667](1000055 'new' range[240](?) call_tmp[786662](low = low[108792])(high = high[108798])))
    (602808 'move' ret[602803](602807 'deref' call_tmp[786667]))
    (602805 return ret[602803])
  }
  function chpl_build_bounded_range[108815](arg low[108820] :
  (108818 call uint(64)[86] 8), arg high[108826] :
  (108824 call uint(64)[86] 8)) : _unknown[42]
  {
    unknown ret[602812] "RVV" "temp"
    unknown call_tmp[786672] "expr temp" "maybe param" "maybe type" "temp"
    (786675 'move' call_tmp[786672](108835 call uint(64)[86] 8))
    unknown call_tmp[786677] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (786680 'move' call_tmp[786677](1000056 'new' range[240](?) call_tmp[786672](low = low[108820])(high = high[108826])))
    (602817 'move' ret[602812](602816 'deref' call_tmp[786677]))
    (602814 return ret[602812])
  }
  function chpl_build_bounded_range[108843](arg low[108848] :
  (108846 call uint(64)[86] 16), arg high[108854] :
  (108852 call uint(64)[86] 16)) : _unknown[42]
  {
    unknown ret[602821] "RVV" "temp"
    unknown call_tmp[786682] "expr temp" "maybe param" "maybe type" "temp"
    (786685 'move' call_tmp[786682](108863 call uint(64)[86] 16))
    unknown call_tmp[786687] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (786690 'move' call_tmp[786687](1000057 'new' range[240](?) call_tmp[786682](low = low[108848])(high = high[108854])))
    (602826 'move' ret[602821](602825 'deref' call_tmp[786687]))
    (602823 return ret[602821])
  }
  function chpl_build_bounded_range[108871](arg low[108876] :
  (108874 call uint(64)[86] 32), arg high[108882] :
  (108880 call uint(64)[86] 32)) : _unknown[42]
  {
    unknown ret[602830] "RVV" "temp"
    unknown call_tmp[786692] "expr temp" "maybe param" "maybe type" "temp"
    (786695 'move' call_tmp[786692](108891 call uint(64)[86] 32))
    unknown call_tmp[786697] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (786700 'move' call_tmp[786697](1000058 'new' range[240](?) call_tmp[786692](low = low[108876])(high = high[108882])))
    (602835 'move' ret[602830](602834 'deref' call_tmp[786697]))
    (602832 return ret[602830])
  }
  function chpl_build_bounded_range[108899](arg low[108904] :
  (108902 call uint(64)[86] 64), arg high[108910] :
  (108908 call uint(64)[86] 64)) : _unknown[42]
  {
    unknown ret[602839] "RVV" "temp"
    unknown call_tmp[786702] "expr temp" "maybe param" "maybe type" "temp"
    (786705 'move' call_tmp[786702](108919 call uint(64)[86] 64))
    unknown call_tmp[786707] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (786710 'move' call_tmp[786707](1000059 'new' range[240](?) call_tmp[786702](low = low[108904])(high = high[108910])))
    (602844 'move' ret[602839](602843 'deref' call_tmp[786707]))
    (602841 return ret[602839])
  }
  function chpl_build_bounded_range[108927](arg low[108930]:enum[147](?), arg high[108934]:enum[147](?)) : _unknown[42]
  {
    unknown ret[602848] "RVV" "temp"
    unknown call_tmp[786712] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (786715 'move' call_tmp[786712](108947 'typeof' low[108930]))
    unknown call_tmp[786717] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (786720 'move' call_tmp[786717](108949 'typeof' high[108934]))
    unknown call_tmp[786722] "expr temp" "maybe param" "maybe type" "temp"
    (786725 'move' call_tmp[786722](108944 call != call_tmp[786712] call_tmp[786717]))
    unknown call_tmp[786727] "expr temp" "maybe param" "maybe type" "temp"
    (786730 'move' call_tmp[786727](108950 call _cond_test call_tmp[786722]))
    if call_tmp[786727]
    {
      (108939 call compilerError "ranges of enums must use a single enum type")
    }
    unknown call_tmp[786732] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (786735 'move' call_tmp[786732](108960 'typeof' low[108930]))
    unknown call_tmp[786737] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (786740 'move' call_tmp[786737](1000060 'new' range[240](?) call_tmp[786732](low = low[108930])(high = high[108934])))
    (602853 'move' ret[602848](602852 'deref' call_tmp[786737]))
    (602850 return ret[602848])
  }
  function chpl_build_bounded_range[108967](arg low[108970]:bool[19], arg high[108974]:bool[19]) : _unknown[42]
  {
    unknown ret[602857] "RVV" "temp"
    unknown call_tmp[786742] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (786745 'move' call_tmp[786742](1000061 'new' range[240](?) bool[19](low = low[108970])(high = high[108974])))
    (602862 'move' ret[602857](602861 'deref' call_tmp[786742]))
    (602859 return ret[602857])
  }
  function chpl_build_bounded_range[108989](arg low[108991]:_any[141](?), arg high[108993]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    unknown call_tmp[786747] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (786750 'move' call_tmp[786747](109053 'typeof' low[108991]))
    unknown call_tmp[786752] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (786755 'move' call_tmp[786752](109055 'typeof' high[108993]))
    unknown call_tmp[786757] "expr temp" "maybe param" "maybe type" "temp"
    (786760 'move' call_tmp[786757](109050 call == call_tmp[786747] call_tmp[786752]))
    unknown call_tmp[786762] "expr temp" "maybe param" "maybe type" "temp"
    (786765 'move' call_tmp[786762](109056 call _cond_test call_tmp[786757]))
    if call_tmp[786762]
    {
      unknown call_tmp[786767] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (786770 'move' call_tmp[786767](109020 'typeof' low[108991]))
      unknown call_tmp[786772] "expr temp" "maybe param" "maybe type" "temp"
      (786775 'move' call_tmp[786772](109017 call : call_tmp[786767] string[244]))
      unknown call_tmp[786777] "expr temp" "maybe param" "maybe type" "temp"
      (786780 'move' call_tmp[786777](109012 call + "Ranges defined using bounds of type '" call_tmp[786772]))
      unknown call_tmp[786782] "expr temp" "maybe param" "maybe type" "temp"
      (786785 'move' call_tmp[786782](109010 call + call_tmp[786777] "' are not currently supported"))
      (109009 call compilerError call_tmp[786782])
    }
    {
      unknown call_tmp[786787] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (786790 'move' call_tmp[786787](109040 'typeof' low[108991]))
      unknown call_tmp[786792] "expr temp" "maybe param" "maybe type" "temp"
      (786795 'move' call_tmp[786792](109037 call : call_tmp[786787] string[244]))
      unknown call_tmp[786797] "expr temp" "maybe param" "maybe type" "temp"
      (786800 'move' call_tmp[786797](109034 call + "Ranges defined using bounds of type '" call_tmp[786792]))
      unknown call_tmp[786802] "expr temp" "maybe param" "maybe type" "temp"
      (786805 'move' call_tmp[786802](109032 call + call_tmp[786797] ".."))
      unknown call_tmp[786807] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (786810 'move' call_tmp[786807](109046 'typeof' high[108993]))
      unknown call_tmp[786812] "expr temp" "maybe param" "maybe type" "temp"
      (786815 'move' call_tmp[786812](109043 call : call_tmp[786807] string[244]))
      unknown call_tmp[786817] "expr temp" "maybe param" "maybe type" "temp"
      (786820 'move' call_tmp[786817](109030 call + call_tmp[786802] call_tmp[786812]))
      unknown call_tmp[786822] "expr temp" "maybe param" "maybe type" "temp"
      (786825 'move' call_tmp[786822](109028 call + call_tmp[786817] "' are not currently supported"))
      (109027 call compilerError call_tmp[786822])
    }
    (602864 return _void[46])
  }
  where {
    unknown tmp[483612] "maybe param" "temp"
    unknown call_tmp[786827] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (786830 'move' call_tmp[786827](109002 'typeof' low[108991]))
    (483623 'move' tmp[483612](109000 call chpl_isValidRangeIdxType call_tmp[786827]))
    unknown call_tmp[786832] "expr temp" "maybe param" "maybe type" "temp"
    (786835 'move' call_tmp[786832](483625 call _cond_invalid tmp[483612]))
    if call_tmp[786832]
    {
      (483628 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[672241] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[672242] "maybe param" "temp"
    unknown call_tmp[786837] "expr temp" "maybe param" "maybe type" "temp"
    (786840 'move' call_tmp[786837](483613 call isTrue tmp[483612]))
    (672247 'move' tmp[672242](672245 call _cond_test call_tmp[786837]))
    if tmp[672242]
    {
      unknown tmp[672249] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[786842] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (786845 'move' call_tmp[786842](109006 'typeof' high[108993]))
      unknown call_tmp[786847] "expr temp" "maybe param" "maybe type" "temp"
      (786850 'move' call_tmp[786847](109004 call chpl_isValidRangeIdxType call_tmp[786842]))
      (672251 'move' tmp[672249](483616 call isTrue call_tmp[786847]))
      (672256 'move' tmp[672241](672253 '_paramFoldLogical' tmp[672242] tmp[672249]))
    }
    {
      (672261 'move' tmp[672241](672258 '_paramFoldLogical' tmp[672242] 0))
    }
    (108995 call ! tmp[672241])
  }
  function chpl__nudgeLowBound[109065](arg low[109067]:_any[141](?)) : _unknown[42]
  {
    unknown ret[602868] "RVV" "temp"
    unknown call_tmp[786852] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (786855 'move' call_tmp[786852](109074 'typeof' low[109067]))
    unknown call_tmp[786857] "expr temp" "maybe param" "maybe type" "temp"
    (786860 'move' call_tmp[786857](109078 call chpl__idxToInt low[109067]))
    unknown call_tmp[786862] "expr temp" "maybe param" "maybe type" "temp"
    (786865 'move' call_tmp[786862](109075 call + call_tmp[786857] 1))
    unknown call_tmp[786867] "expr temp" "maybe param" "maybe type" "temp"
    (786870 'move' call_tmp[786867](109072 call chpl__intToIdx call_tmp[786852] call_tmp[786862]))
    (602873 'move' ret[602868](602872 'deref' call_tmp[786867]))
    (602870 return ret[602868])
  }
  function chpl__nudgeLowBound[109083](param arg low[109085]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[602877] "RVV" "param" "temp"
    unknown call_tmp[786872] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (786875 'move' call_tmp[786872](109092 'typeof' low[109085]))
    unknown call_tmp[786877] "expr temp" "maybe param" "maybe type" "temp"
    (786880 'move' call_tmp[786877](109096 call chpl__idxToInt low[109085]))
    unknown call_tmp[786882] "expr temp" "maybe param" "maybe type" "temp"
    (786885 'move' call_tmp[786882](109093 call + call_tmp[786877] 1))
    unknown call_tmp[786887] "expr temp" "maybe param" "maybe type" "temp"
    (786890 'move' call_tmp[786887](109090 call chpl__intToIdx call_tmp[786872] call_tmp[786882]))
    (602882 'move' ret[602877](602881 'deref' call_tmp[786887]))
    (602879 return ret[602877])
  }
  function chpl__nudgeHighBound[109101](arg high[109103]:_any[141](?)) : _unknown[42]
  {
    unknown ret[602886] "RVV" "temp"
    unknown call_tmp[786892] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (786895 'move' call_tmp[786892](109110 'typeof' high[109103]))
    unknown call_tmp[786897] "expr temp" "maybe param" "maybe type" "temp"
    (786900 'move' call_tmp[786897](109114 call chpl__idxToInt high[109103]))
    unknown call_tmp[786902] "expr temp" "maybe param" "maybe type" "temp"
    (786905 'move' call_tmp[786902](109111 call - call_tmp[786897] 1))
    unknown call_tmp[786907] "expr temp" "maybe param" "maybe type" "temp"
    (786910 'move' call_tmp[786907](109108 call chpl__intToIdx call_tmp[786892] call_tmp[786902]))
    (602891 'move' ret[602886](602890 'deref' call_tmp[786907]))
    (602888 return ret[602886])
  }
  function chpl__nudgeHighBound[109119](param arg high[109121]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[602895] "RVV" "param" "temp"
    unknown call_tmp[786912] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (786915 'move' call_tmp[786912](109128 'typeof' high[109121]))
    unknown call_tmp[786917] "expr temp" "maybe param" "maybe type" "temp"
    (786920 'move' call_tmp[786917](109132 call chpl__idxToInt high[109121]))
    unknown call_tmp[786922] "expr temp" "maybe param" "maybe type" "temp"
    (786925 'move' call_tmp[786922](109129 call - call_tmp[786917] 1))
    unknown call_tmp[786927] "expr temp" "maybe param" "maybe type" "temp"
    (786930 'move' call_tmp[786927](109126 call chpl__intToIdx call_tmp[786912] call_tmp[786922]))
    (602900 'move' ret[602895](602899 'deref' call_tmp[786927]))
    (602897 return ret[602895])
  }
  function chpl_build_low_bounded_range[109137](arg low[109140]:integral[159](?)) : _unknown[42]
  {
    unknown ret[602904] "RVV" "temp"
    unknown call_tmp[786932] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (786935 'move' call_tmp[786932](1000062 'new' range[240](?)(low = low[109140])))
    (602909 'move' ret[602904](602908 'deref' call_tmp[786932]))
    (602906 return ret[602904])
  }
  function chpl_build_low_bounded_range[109152](arg low[109155]:enum[147](?)) : _unknown[42]
  {
    unknown ret[602913] "RVV" "temp"
    unknown call_tmp[786937] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (786940 'move' call_tmp[786937](1000063 'new' range[240](?)(low = low[109155])))
    (602918 'move' ret[602913](602917 'deref' call_tmp[786937]))
    (602915 return ret[602913])
  }
  function chpl_build_low_bounded_range[109167](arg low[109170]:bool[19]) : _unknown[42]
  {
    unknown ret[602922] "RVV" "temp"
    unknown call_tmp[786942] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (786945 'move' call_tmp[786942](1000064 'new' range[240](?)(low = low[109170])))
    (602927 'move' ret[602922](602926 'deref' call_tmp[786942]))
    (602924 return ret[602922])
  }
  function chpl_build_low_bounded_range[109182](arg low[109184]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    unknown call_tmp[786947] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (786950 'move' call_tmp[786947](109203 'typeof' low[109184]))
    unknown call_tmp[786952] "expr temp" "maybe param" "maybe type" "temp"
    (786955 'move' call_tmp[786952](109200 call : call_tmp[786947] string[244]))
    unknown call_tmp[786957] "expr temp" "maybe param" "maybe type" "temp"
    (786960 'move' call_tmp[786957](109197 call + "Ranges defined using bounds of type '" call_tmp[786952]))
    unknown call_tmp[786962] "expr temp" "maybe param" "maybe type" "temp"
    (786965 'move' call_tmp[786962](109195 call + call_tmp[786957] "' are not currently supported"))
    (109194 call compilerError call_tmp[786962])
    (602929 return _void[46])
  }
  where {
    unknown call_tmp[786967] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (786970 'move' call_tmp[786967](109191 'typeof' low[109184]))
    unknown call_tmp[786972] "expr temp" "maybe param" "maybe type" "temp"
    (786975 'move' call_tmp[786972](109189 call chpl_isValidRangeIdxType call_tmp[786967]))
    (109186 call ! call_tmp[786972])
  }
  function chpl_build_high_bounded_range[109209](arg high[109212]:integral[159](?)) : _unknown[42]
  {
    unknown ret[602933] "RVV" "temp"
    unknown call_tmp[786977] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (786980 'move' call_tmp[786977](1000065 'new' range[240](?)(high = high[109212])))
    (602938 'move' ret[602933](602937 'deref' call_tmp[786977]))
    (602935 return ret[602933])
  }
  function chpl_build_high_bounded_range[109224](arg high[109227]:enum[147](?)) : _unknown[42]
  {
    unknown ret[602942] "RVV" "temp"
    unknown call_tmp[786982] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (786985 'move' call_tmp[786982](1000066 'new' range[240](?)(high = high[109227])))
    (602947 'move' ret[602942](602946 'deref' call_tmp[786982]))
    (602944 return ret[602942])
  }
  function chpl_build_high_bounded_range[109239](arg high[109242]:bool[19]) : _unknown[42]
  {
    unknown ret[602951] "RVV" "temp"
    unknown call_tmp[786987] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (786990 'move' call_tmp[786987](1000067 'new' range[240](?)(high = high[109242])))
    (602956 'move' ret[602951](602955 'deref' call_tmp[786987]))
    (602953 return ret[602951])
  }
  function chpl_build_high_bounded_range[109254](arg high[109256]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    unknown call_tmp[786992] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (786995 'move' call_tmp[786992](109275 'typeof' high[109256]))
    unknown call_tmp[786997] "expr temp" "maybe param" "maybe type" "temp"
    (787000 'move' call_tmp[786997](109272 call : call_tmp[786992] string[244]))
    unknown call_tmp[787002] "expr temp" "maybe param" "maybe type" "temp"
    (787005 'move' call_tmp[787002](109269 call + "Ranges defined using bounds of type '" call_tmp[786997]))
    unknown call_tmp[787007] "expr temp" "maybe param" "maybe type" "temp"
    (787010 'move' call_tmp[787007](109267 call + call_tmp[787002] "' are not currently supported"))
    (109266 call compilerError call_tmp[787007])
    (602958 return _void[46])
  }
  where {
    unknown call_tmp[787012] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (787015 'move' call_tmp[787012](109263 'typeof' high[109256]))
    unknown call_tmp[787017] "expr temp" "maybe param" "maybe type" "temp"
    (787020 'move' call_tmp[787017](109261 call chpl_isValidRangeIdxType call_tmp[787012]))
    (109258 call ! call_tmp[787017])
  }
  function chpl_build_unbounded_range[109281]() : _unknown[42]
  {
    unknown ret[602962] "RVV" "temp"
    unknown call_tmp[787022] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (787025 'move' call_tmp[787022](1000068 'new' range[240](?)))
    (602967 'move' ret[602962](602966 'deref' call_tmp[787022]))
    (602964 return ret[602962])
  }
  function range[240](?).createWithSingleElement[109290](arg _mt[109300]:_MT[201], arg this[109293]:range[240](?) :
  range[240](?), arg elm[109297] :
  (426124 call idxType _mt[203] this[109293])) : _unknown[42] "method"
  {
    unknown ret[602971] "RVV" "temp"
    unknown call_tmp[787029] "expr temp" "maybe param" "maybe type" "temp"
    (787032 'move' call_tmp[787029](109308 call chpl_build_bounded_range elm[109297] elm[109297]))
    unknown call_tmp[787036] "expr temp" "maybe param" "maybe type" "temp"
    (787039 'move' call_tmp[787036](401280 call strides _mt[203] this[109293]))
    unknown call_tmp[787043] "expr temp" "maybe param" "maybe type" "temp"
    (787046 'move' call_tmp[787043](109314 call(109311 call (partial) defaultStride _mt[203] call_tmp[787036])))
    unknown call_tmp[787048] "expr temp" "maybe param" "maybe type" "temp"
    (787051 'move' call_tmp[787048](109304 call chpl_by call_tmp[787029] call_tmp[787043]))
    (602976 'move' ret[602971](602975 'deref' call_tmp[787048]))
    (602973 return ret[602971])
  }
  function chpl_compute_low_param_loop_bound[109317](param arg low[109320]:integral[159](?), param arg high[109324]:integral[159](?)) param : _unknown[42]
  {
    unknown ret[602980] "RVV" "param" "temp"
    unknown t[109329] "dead at end of block" "insert auto destroy" "type variable"
    (645243 'move' t[109329](645240 call computeParamRangeIndexType low[109320] high[109324]))
    (551736 'end of statement')
    unknown call_tmp[787053] "expr temp" "maybe param" "maybe type" "temp"
    (787056 'move' call_tmp[787053](109336 call : low[109320] t[109329]))
    (602985 'move' ret[602980](602984 'deref' call_tmp[787053]))
    gotoReturn _end_chpl_compute_low_param_loop_bound[602978] _end_chpl_compute_low_param_loop_bound[602978]
    (551737 'end of statement' t[109329])
    label _end_chpl_compute_low_param_loop_bound[602978]
    (602982 return ret[602980])
  }
  function chpl_compute_high_param_loop_bound[109342](param arg low[109345]:integral[159](?), param arg high[109349]:integral[159](?)) param : _unknown[42]
  {
    unknown ret[602991] "RVV" "param" "temp"
    unknown t[109354] "dead at end of block" "insert auto destroy" "type variable"
    (645249 'move' t[109354](645246 call computeParamRangeIndexType low[109345] high[109349]))
    (551739 'end of statement')
    unknown call_tmp[787058] "expr temp" "maybe param" "maybe type" "temp"
    (787061 'move' call_tmp[787058](109361 call : high[109349] t[109354]))
    (602996 'move' ret[602991](602995 'deref' call_tmp[787058]))
    gotoReturn _end_chpl_compute_high_param_loop_bound[602989] _end_chpl_compute_high_param_loop_bound[602989]
    (551740 'end of statement' t[109354])
    label _end_chpl_compute_high_param_loop_bound[602989]
    (602993 return ret[602991])
  }
  function chpl_compute_low_param_loop_bound[109367](param arg low[109370]:enum[147](?), param arg high[109375]:enum[147](?)) param : _unknown[42]
  {
    unknown ret[603002] "RVV" "param" "temp"
    (603007 'move' ret[603002](603006 'deref' low[109370]))
    (603004 return ret[603002])
  }
  function chpl_compute_high_param_loop_bound[109383](param arg low[109386]:enum[147](?), param arg high[109391]:enum[147](?)) param : _unknown[42]
  {
    unknown ret[603011] "RVV" "param" "temp"
    (603016 'move' ret[603011](603015 'deref' high[109391]))
    (603013 return ret[603011])
  }
  function chpl_compute_low_param_loop_bound[109399](param arg low[109402]:bool[19], param arg high[109406]:bool[19]) param : _unknown[42]
  {
    unknown ret[603020] "RVV" "param" "temp"
    (603025 'move' ret[603020](603024 'deref' low[109402]))
    (603022 return ret[603020])
  }
  function chpl_compute_high_param_loop_bound[109414](param arg low[109417]:bool[19], param arg high[109421]:bool[19]) param : _unknown[42]
  {
    unknown ret[603029] "RVV" "param" "temp"
    (603034 'move' ret[603029](603033 'deref' high[109421]))
    (603031 return ret[603029])
  }
  function chpl_compute_low_param_loop_bound[109429](param arg low[109431]:_any[141](?), param arg high[109433]:_any[141](?)) param : _unknown[42] "no return value for void"
  {
    unknown call_tmp[787063] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (787066 'move' call_tmp[787063](109491 'typeof' low[109431]))
    unknown call_tmp[787068] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (787071 'move' call_tmp[787068](109493 'typeof' high[109433]))
    unknown call_tmp[787073] "expr temp" "maybe param" "maybe type" "temp"
    (787076 'move' call_tmp[787073](109488 call == call_tmp[787063] call_tmp[787068]))
    unknown call_tmp[787078] "expr temp" "maybe param" "maybe type" "temp"
    (787081 'move' call_tmp[787078](109494 call _cond_test call_tmp[787073]))
    if call_tmp[787078]
    {
      unknown call_tmp[787083] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (787086 'move' call_tmp[787083](109460 'typeof' low[109431]))
      unknown call_tmp[787088] "expr temp" "maybe param" "maybe type" "temp"
      (787091 'move' call_tmp[787088](109457 call : call_tmp[787083] string[244]))
      unknown call_tmp[787093] "expr temp" "maybe param" "maybe type" "temp"
      (787096 'move' call_tmp[787093](109452 call + "param for-loops defined using bounds of type '" call_tmp[787088]))
      unknown call_tmp[787098] "expr temp" "maybe param" "maybe type" "temp"
      (787101 'move' call_tmp[787098](109450 call + call_tmp[787093] "' are not currently supported"))
      (109449 call compilerError call_tmp[787098])
    }
    {
      unknown call_tmp[787103] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (787106 'move' call_tmp[787103](109478 'typeof' low[109431]))
      unknown call_tmp[787108] "expr temp" "maybe param" "maybe type" "temp"
      (787111 'move' call_tmp[787108](109475 call : call_tmp[787103] string[244]))
      unknown call_tmp[787113] "expr temp" "maybe param" "maybe type" "temp"
      (787116 'move' call_tmp[787113](109472 call + "param for-loops defined using bounds of type '" call_tmp[787108]))
      unknown call_tmp[787118] "expr temp" "maybe param" "maybe type" "temp"
      (787121 'move' call_tmp[787118](109470 call + call_tmp[787113] ".."))
      unknown call_tmp[787123] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (787126 'move' call_tmp[787123](109484 'typeof' high[109433]))
      unknown call_tmp[787128] "expr temp" "maybe param" "maybe type" "temp"
      (787131 'move' call_tmp[787128](109481 call : call_tmp[787123] string[244]))
      unknown call_tmp[787133] "expr temp" "maybe param" "maybe type" "temp"
      (787136 'move' call_tmp[787133](109468 call + call_tmp[787118] call_tmp[787128]))
      unknown call_tmp[787138] "expr temp" "maybe param" "maybe type" "temp"
      (787141 'move' call_tmp[787138](109466 call + call_tmp[787133] "' are not currently supported"))
      (109465 call compilerError call_tmp[787138])
    }
    (603036 return _void[46])
  }
  where {
    unknown tmp[483633] "maybe param" "temp"
    unknown call_tmp[787143] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (787146 'move' call_tmp[787143](109442 'typeof' low[109431]))
    (483644 'move' tmp[483633](109440 call chpl_isValidRangeIdxType call_tmp[787143]))
    unknown call_tmp[787148] "expr temp" "maybe param" "maybe type" "temp"
    (787151 'move' call_tmp[787148](483646 call _cond_invalid tmp[483633]))
    if call_tmp[787148]
    {
      (483649 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[672268] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[672269] "maybe param" "temp"
    unknown call_tmp[787153] "expr temp" "maybe param" "maybe type" "temp"
    (787156 'move' call_tmp[787153](483634 call isTrue tmp[483633]))
    (672274 'move' tmp[672269](672272 call _cond_test call_tmp[787153]))
    if tmp[672269]
    {
      unknown tmp[672276] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[787158] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (787161 'move' call_tmp[787158](109446 'typeof' high[109433]))
      unknown call_tmp[787163] "expr temp" "maybe param" "maybe type" "temp"
      (787166 'move' call_tmp[787163](109444 call chpl_isValidRangeIdxType call_tmp[787158]))
      (672278 'move' tmp[672276](483637 call isTrue call_tmp[787163]))
      (672283 'move' tmp[672268](672280 '_paramFoldLogical' tmp[672269] tmp[672276]))
    }
    {
      (672288 'move' tmp[672268](672285 '_paramFoldLogical' tmp[672269] 0))
    }
    (109435 call ! tmp[672268])
  }
  function chpl_compute_low_param_loop_bound[109503](arg low[109505]:_any[141](?), arg high[109507]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    (109511 call compilerError "param for-loops must be defined over a bounded param range")
    (603038 return _void[46])
  }
  function chpl_compute_count_param_loop[109517](param arg count[109520]:integral[159](?)) param : _unknown[42]
  {
    unknown ret[603042] "RVV" "param" "temp"
    (603047 'move' ret[603042](603046 'deref' count[109520]))
    (603044 return ret[603042])
  }
  function chpl_compute_count_param_loop[109528](arg count[109530]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    (109534 call compilerError "in a param for-loop, the count operator requires a param integral value")
    (603049 return _void[46])
  }
  function chpl_low_bound_count_for_param_loop[109540](param arg high[109543]:integral[159](?), param arg count[109547]:integral[159](?)) param : _unknown[42]
  {
    unknown ret[603053] "RVV" "param" "temp"
    unknown call_tmp[787168] "expr temp" "maybe param" "maybe type" "temp"
    (787171 'move' call_tmp[787168](109580 call > count[109547] 0))
    unknown call_tmp[787173] "expr temp" "maybe param" "maybe type" "temp"
    (787176 'move' call_tmp[787173](109584 call _cond_test call_tmp[787168]))
    if call_tmp[787173]
    {
      (109553 call compilerError "count operators with positive count require the range to have a low bound")
    }
    {
      unknown call_tmp[787178] "expr temp" "maybe param" "maybe type" "temp"
      (787181 'move' call_tmp[787178](109572 call == count[109547] 0))
      unknown call_tmp[787183] "expr temp" "maybe param" "maybe type" "temp"
      (787186 'move' call_tmp[787183](109576 call _cond_test call_tmp[787178]))
      if call_tmp[787183]
      {
        unknown call_tmp[787188] "expr temp" "maybe param" "maybe type" "temp"
        (787191 'move' call_tmp[787188](109559 call + high[109543] 1))
        (603058 'move' ret[603053](603057 'deref' call_tmp[787188]))
        gotoReturn _end_chpl_low_bound_count_for_param_loop[603051] _end_chpl_low_bound_count_for_param_loop[603051]
      }
      {
        unknown call_tmp[787193] "expr temp" "maybe param" "maybe type" "temp"
        (787196 'move' call_tmp[787193](109567 call + high[109543] count[109547]))
        unknown call_tmp[787198] "expr temp" "maybe param" "maybe type" "temp"
        (787201 'move' call_tmp[787198](109565 call + call_tmp[787193] 1))
        (603063 'move' ret[603053](603062 'deref' call_tmp[787198]))
        gotoReturn _end_chpl_low_bound_count_for_param_loop[603051] _end_chpl_low_bound_count_for_param_loop[603051]
      }
    }
    label _end_chpl_low_bound_count_for_param_loop[603051]
    (603055 return ret[603053])
  }
  function chpl_low_bound_count_for_param_loop[109591](arg high[109593]:_any[141](?), arg count[109595]:_any[141](?)) : _unknown[42] "last resort" "no return value for void"
  {
    (109599 call chpl_build_high_bounded_range high[109593])
    (551754 'end of statement')
    unknown call_tmp[787203] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (787206 'move' call_tmp[787203](109609 'typeof' high[109593]))
    unknown call_tmp[787208] "expr temp" "maybe param" "maybe type" "temp"
    (787211 'move' call_tmp[787208](109606 call : call_tmp[787203] string[244]))
    unknown call_tmp[787213] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (787216 'move' call_tmp[787213](109617 'typeof' count[109595]))
    unknown call_tmp[787218] "expr temp" "maybe param" "maybe type" "temp"
    (787221 'move' call_tmp[787218](109614 call : call_tmp[787213] string[244]))
    (109602 call compilerError "can't apply '#' to a range with idxType " call_tmp[787208] " using a count of type " call_tmp[787218])
    (603067 return _void[46])
  }
  function chpl_high_bound_count_for_param_loop[109621](param arg low[109624]:integral[159](?), param arg count[109628]:integral[159](?)) param : _unknown[42]
  {
    unknown ret[603071] "RVV" "param" "temp"
    unknown call_tmp[787223] "expr temp" "maybe param" "maybe type" "temp"
    (787226 'move' call_tmp[787223](109661 call < count[109628] 0))
    unknown call_tmp[787228] "expr temp" "maybe param" "maybe type" "temp"
    (787231 'move' call_tmp[787228](109665 call _cond_test call_tmp[787223]))
    if call_tmp[787228]
    {
      (109634 call compilerError "count operators with negative count require the range to have a high bound")
    }
    {
      unknown call_tmp[787233] "expr temp" "maybe param" "maybe type" "temp"
      (787236 'move' call_tmp[787233](109653 call == count[109628] 0))
      unknown call_tmp[787238] "expr temp" "maybe param" "maybe type" "temp"
      (787241 'move' call_tmp[787238](109657 call _cond_test call_tmp[787233]))
      if call_tmp[787238]
      {
        unknown call_tmp[787243] "expr temp" "maybe param" "maybe type" "temp"
        (787246 'move' call_tmp[787243](109640 call - low[109624] 1))
        (603076 'move' ret[603071](603075 'deref' call_tmp[787243]))
        gotoReturn _end_chpl_high_bound_count_for_param_loop[603069] _end_chpl_high_bound_count_for_param_loop[603069]
      }
      {
        unknown call_tmp[787248] "expr temp" "maybe param" "maybe type" "temp"
        (787251 'move' call_tmp[787248](109648 call + low[109624] count[109628]))
        unknown call_tmp[787253] "expr temp" "maybe param" "maybe type" "temp"
        (787256 'move' call_tmp[787253](109646 call - call_tmp[787248] 1))
        (603081 'move' ret[603071](603080 'deref' call_tmp[787253]))
        gotoReturn _end_chpl_high_bound_count_for_param_loop[603069] _end_chpl_high_bound_count_for_param_loop[603069]
      }
    }
    label _end_chpl_high_bound_count_for_param_loop[603069]
    (603073 return ret[603071])
  }
  function chpl_high_bound_count_for_param_loop[109672](arg low[109674]:_any[141](?), arg count[109676]:_any[141](?)) : _unknown[42] "last resort" "no return value for void"
  {
    (109680 call chpl_build_low_bounded_range low[109674])
    (551759 'end of statement')
    unknown call_tmp[787258] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (787261 'move' call_tmp[787258](109688 'typeof' low[109674]))
    unknown call_tmp[787263] "expr temp" "maybe param" "maybe type" "temp"
    (787266 'move' call_tmp[787263](109685 call : call_tmp[787258] string[244]))
    unknown call_tmp[787268] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (787271 'move' call_tmp[787268](109694 'typeof' count[109676]))
    unknown call_tmp[787273] "expr temp" "maybe param" "maybe type" "temp"
    (787276 'move' call_tmp[787273](109691 call : call_tmp[787268] string[244]))
    (109683 call compilerError "can't apply '#' to a range with idxType " call_tmp[787263] " using a count of type " call_tmp[787273])
    (603085 return _void[46])
  }
  function chpl_bounded_count_for_param_loop_low[109698](param arg low[109701]:integral[159](?), param arg high[109705]:integral[159](?), param arg count[109709]:integral[159](?)) param : _unknown[42]
  {
    unknown ret[603089] "RVV" "param" "temp"
    unknown abs_count[109714] "dead at end of block" "param"
    unknown tmp[672295] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[672296] "maybe param" "temp"
    unknown call_tmp[787278] "expr temp" "maybe param" "maybe type" "temp"
    (787281 'move' call_tmp[787278](109715 call < count[109709] 0))
    (672301 'move' tmp[672296](672299 call _cond_test call_tmp[787278]))
    if tmp[672296]
    {
      unknown tmp[672303] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (672305 'move' tmp[672303](109719 call - count[109709]))
      (672310 'move' tmp[672295](672307 '_paramFoldLogical' tmp[672296] tmp[672303]))
    }
    {
      (672315 'move' tmp[672295](672312 '_paramFoldLogical' tmp[672296] count[109709]))
    }
    (645251 'init var' abs_count[109714] tmp[672295])
    (109727 'end of statement')
    unknown call_tmp[787283] "expr temp" "maybe param" "maybe type" "temp"
    (787286 'move' call_tmp[787283](109732 call - high[109705] low[109701]))
    unknown call_tmp[787288] "maybe param" "maybe type" "temp"
    (787291 'move' call_tmp[787288](109730 call + call_tmp[787283] 1))
    unknown size[109729] "dead at end of block" "param"
    (645253 'init var' size[109729] call_tmp[787288])
    (109738 'end of statement')
    unknown call_tmp[787293] "expr temp" "maybe param" "maybe type" "temp"
    (787296 'move' call_tmp[787293](109791 call < size[109729] abs_count[109714]))
    unknown call_tmp[787298] "expr temp" "maybe param" "maybe type" "temp"
    (787301 'move' call_tmp[787298](109795 call _cond_test call_tmp[787293]))
    if call_tmp[787298]
    {
      unknown call_tmp[787303] "expr temp" "maybe param" "maybe type" "temp"
      (787306 'move' call_tmp[787303](109745 call : abs_count[109714] string[244]))
      unknown call_tmp[787308] "expr temp" "maybe param" "maybe type" "temp"
      (787311 'move' call_tmp[787308](109752 call : size[109729] string[244]))
      (109741 call compilerError "Count of " call_tmp[787303] " is too small for range of size " call_tmp[787308])
    }
    {
      unknown call_tmp[787313] "expr temp" "maybe param" "maybe type" "temp"
      (787316 'move' call_tmp[787313](109782 call == count[109709] 0))
      unknown call_tmp[787318] "expr temp" "maybe param" "maybe type" "temp"
      (787321 'move' call_tmp[787318](109786 call _cond_test call_tmp[787313]))
      if call_tmp[787318]
      {
        unknown call_tmp[787323] "expr temp" "maybe param" "maybe type" "temp"
        (787326 'move' call_tmp[787323](109758 call + high[109705] 1))
        (603094 'move' ret[603089](603093 'deref' call_tmp[787323]))
        gotoReturn _end_chpl_bounded_count_for_param_loop_low[603087] _end_chpl_bounded_count_for_param_loop_low[603087]
      }
      {
        unknown call_tmp[787328] "expr temp" "maybe param" "maybe type" "temp"
        (787331 'move' call_tmp[787328](109774 call < count[109709] 0))
        unknown call_tmp[787333] "expr temp" "maybe param" "maybe type" "temp"
        (787336 'move' call_tmp[787333](109778 call _cond_test call_tmp[787328]))
        if call_tmp[787333]
        {
          unknown call_tmp[787338] "expr temp" "maybe param" "maybe type" "temp"
          (787341 'move' call_tmp[787338](109766 call + high[109705] count[109709]))
          unknown call_tmp[787343] "expr temp" "maybe param" "maybe type" "temp"
          (787346 'move' call_tmp[787343](109764 call + call_tmp[787338] 1))
          (603099 'move' ret[603089](603098 'deref' call_tmp[787343]))
          gotoReturn _end_chpl_bounded_count_for_param_loop_low[603087] _end_chpl_bounded_count_for_param_loop_low[603087]
        }
        {
          (603104 'move' ret[603089](603103 'deref' low[109701]))
          gotoReturn _end_chpl_bounded_count_for_param_loop_low[603087] _end_chpl_bounded_count_for_param_loop_low[603087]
        }
      }
    }
    label _end_chpl_bounded_count_for_param_loop_low[603087]
    (603091 return ret[603089])
  }
  function chpl_bounded_count_for_param_loop_low[109802](arg low[109804]:_any[141](?), arg high[109806]:_any[141](?), arg count[109808]:_any[141](?)) : _unknown[42] "last resort" "no return value for void"
  {
    unknown call_tmp[787348] "maybe param" "maybe type" "temp"
    (787351 'move' call_tmp[787348](109814 call chpl_build_bounded_range low[109804] high[109806]))
    const r[109812] "dead at end of block" "const" "insert auto destroy"
    (645255 'init var' r[109812] call_tmp[787348])
    (109818 'end of statement')
    unknown call_tmp[787355] "expr temp" "maybe param" "maybe type" "temp"
    (787358 'move' call_tmp[787355](109825 call idxType _mt[203] r[109812]))
    unknown call_tmp[787360] "expr temp" "maybe param" "maybe type" "temp"
    (787363 'move' call_tmp[787360](109822 call : call_tmp[787355] string[244]))
    unknown call_tmp[787365] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (787368 'move' call_tmp[787365](109833 'typeof' count[109808]))
    unknown call_tmp[787370] "expr temp" "maybe param" "maybe type" "temp"
    (787373 'move' call_tmp[787370](109830 call : call_tmp[787365] string[244]))
    (109820 call compilerError "can't apply '#' to a range with idxType " call_tmp[787360] " using a count of type " call_tmp[787370])
    (551765 'end of statement' r[109812])
    (603108 return _void[46])
  }
  function chpl_bounded_count_for_param_loop_high[109837](param arg low[109840]:integral[159](?), param arg high[109844]:integral[159](?), param arg count[109848]:integral[159](?)) param : _unknown[42]
  {
    unknown ret[603112] "RVV" "param" "temp"
    unknown call_tmp[787375] "expr temp" "maybe param" "maybe type" "temp"
    (787378 'move' call_tmp[787375](109878 call == count[109848] 0))
    unknown call_tmp[787380] "expr temp" "maybe param" "maybe type" "temp"
    (787383 'move' call_tmp[787380](109882 call _cond_test call_tmp[787375]))
    if call_tmp[787380]
    {
      unknown call_tmp[787385] "expr temp" "maybe param" "maybe type" "temp"
      (787388 'move' call_tmp[787385](109854 call - low[109840] 1))
      (603117 'move' ret[603112](603116 'deref' call_tmp[787385]))
      gotoReturn _end_chpl_bounded_count_for_param_loop_high[603110] _end_chpl_bounded_count_for_param_loop_high[603110]
    }
    {
      unknown call_tmp[787390] "expr temp" "maybe param" "maybe type" "temp"
      (787393 'move' call_tmp[787390](109870 call < count[109848] 0))
      unknown call_tmp[787395] "expr temp" "maybe param" "maybe type" "temp"
      (787398 'move' call_tmp[787395](109874 call _cond_test call_tmp[787390]))
      if call_tmp[787395]
      {
        (603122 'move' ret[603112](603121 'deref' high[109844]))
        gotoReturn _end_chpl_bounded_count_for_param_loop_high[603110] _end_chpl_bounded_count_for_param_loop_high[603110]
      }
      {
        unknown call_tmp[787400] "expr temp" "maybe param" "maybe type" "temp"
        (787403 'move' call_tmp[787400](109865 call + low[109840] count[109848]))
        unknown call_tmp[787405] "expr temp" "maybe param" "maybe type" "temp"
        (787408 'move' call_tmp[787405](109863 call - call_tmp[787400] 1))
        (603127 'move' ret[603112](603126 'deref' call_tmp[787405]))
        gotoReturn _end_chpl_bounded_count_for_param_loop_high[603110] _end_chpl_bounded_count_for_param_loop_high[603110]
      }
    }
    label _end_chpl_bounded_count_for_param_loop_high[603110]
    (603114 return ret[603112])
  }
  function chpl_bounded_count_for_param_loop_high[109889](arg low[109891]:_any[141](?), arg high[109893]:_any[141](?), arg count[109895]:_any[141](?)) : _unknown[42] "last resort" "no return value for void"
  {
    unknown call_tmp[787410] "maybe param" "maybe type" "temp"
    (787413 'move' call_tmp[787410](109901 call chpl_build_bounded_range low[109891] high[109893]))
    const r[109899] "dead at end of block" "const" "insert auto destroy"
    (645257 'init var' r[109899] call_tmp[787410])
    (109905 'end of statement')
    unknown call_tmp[787417] "expr temp" "maybe param" "maybe type" "temp"
    (787420 'move' call_tmp[787417](109912 call idxType _mt[203] r[109899]))
    unknown call_tmp[787422] "expr temp" "maybe param" "maybe type" "temp"
    (787425 'move' call_tmp[787422](109909 call : call_tmp[787417] string[244]))
    unknown call_tmp[787427] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (787430 'move' call_tmp[787427](109920 'typeof' count[109895]))
    unknown call_tmp[787432] "expr temp" "maybe param" "maybe type" "temp"
    (787435 'move' call_tmp[787432](109917 call : call_tmp[787427] string[244]))
    (109907 call compilerError "can't apply '#' to a range with idxType " call_tmp[787422] " using a count of type " call_tmp[787432])
    (551770 'end of statement' r[109899])
    (603131 return _void[46])
  }
  function range[240](?).stride[109924](arg _mt[109930]:_MT[201], arg this[109927]:range[240](?) :
  range[240](?)) : _unknown[42] "inline" "method" "no where doc" "no parens"
  {
    unknown ret[603135] "RVV" "temp"
    unknown call_tmp[787439] "expr temp" "maybe param" "maybe type" "temp"
    (787442 'move' call_tmp[787439](426221 call _stride _mt[203] this[109927]))
    (603140 'move' ret[603135](603139 'deref' call_tmp[787439]))
    (603137 return ret[603135])
  }
  where {
    unknown call_tmp[787446] "expr temp" "maybe param" "maybe type" "temp"
    (787449 'move' call_tmp[787446](109935 call(426216 call (partial) hasParamStride _mt[203] this[109927])))
    (109932 call ! call_tmp[787446])
  }
  function range[240](?).stride[109942](arg _mt[109948]:_MT[201], arg this[109945]:range[240](?) :
  range[240](?)) param : _unknown[42] "method" "no parens"
  {
    unknown ret[603144] "RVV" "param" "temp"
    unknown tmp[672322] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[672323] "maybe param" "temp"
    unknown call_tmp[787453] "expr temp" "maybe param" "maybe type" "temp"
    (787456 'move' call_tmp[787453](426230 call strides _mt[203] this[109945]))
    unknown call_tmp[787458] "expr temp" "maybe param" "maybe type" "temp"
    (787461 'move' call_tmp[787458](109956 call == call_tmp[787453] one[107127]))
    (672328 'move' tmp[672323](672326 call _cond_test call_tmp[787458]))
    if tmp[672323]
    {
      (672333 'move' tmp[672322](672330 '_paramFoldLogical' tmp[672323] 1))
    }
    {
      unknown tmp[672335] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (672337 'move' tmp[672335](109964 call - 1))
      (672342 'move' tmp[672322](672339 '_paramFoldLogical' tmp[672323] tmp[672335]))
    }
    unknown call_tmp[787465] "expr temp" "maybe param" "maybe type" "temp"
    (787468 'move' call_tmp[787465](426234 call strType _mt[203] this[109945]))
    unknown call_tmp[787470] "expr temp" "maybe param" "maybe type" "temp"
    (787473 'move' call_tmp[787470](109954 call : tmp[672322] call_tmp[787465]))
    (603149 'move' ret[603144](603148 'deref' call_tmp[787470]))
    (603146 return ret[603144])
  }
  where {
    (109951 call(426225 call (partial) hasParamStride _mt[203] this[109945]))
  }
  function range[240](?).alignment[109974](arg _mt[109980]:_MT[201], arg this[109977]:range[240](?) :
  range[240](?)) : _unknown[42] "inline" "method" "no where doc" "no parens"
  {
    unknown ret[603153] "RVV" "temp"
    unknown tmp[672349] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[672350] "maybe param" "temp"
    unknown call_tmp[787479] "expr temp" "maybe param" "maybe type" "temp"
    (787482 'move' call_tmp[787479](109991 call(426250 call (partial) hasParamAlignmentField _mt[203] this[109977])))
    (672355 'move' tmp[672350](672353 call _cond_test call_tmp[787479]))
    if tmp[672350]
    {
      (672360 'move' tmp[672349](672357 '_paramFoldLogical' tmp[672350] 0))
    }
    {
      unknown tmp[672362] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (672364 'move' tmp[672362](426255 call _alignment _mt[203] this[109977]))
      (672369 'move' tmp[672349](672366 '_paramFoldLogical' tmp[672350] tmp[672362]))
    }
    unknown call_tmp[787488] "expr temp" "maybe param" "maybe type" "temp"
    (787491 'move' call_tmp[787488](109989 call(426246 call (partial) chpl_intToIdx _mt[203] this[109977]) tmp[672349]))
    (603158 'move' ret[603153](603157 'deref' call_tmp[787488]))
    (603155 return ret[603153])
  }
  where {
    unknown call_tmp[787495] "expr temp" "maybe param" "maybe type" "temp"
    (787498 'move' call_tmp[787495](109985 call(426240 call (partial) hasParamAlignment _mt[203] this[109977])))
    (109982 call ! call_tmp[787495])
  }
  function range[240](?).alignment[110000](arg _mt[110006]:_MT[201], arg this[110003]:range[240](?) :
  range[240](?)) param : _unknown[42] "method" "no parens"
  {
    unknown ret[603162] "RVV" "param" "temp"
    unknown tmp[672376] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[672377] "maybe param" "temp"
    unknown call_tmp[787502] "expr temp" "maybe param" "maybe type" "temp"
    (787505 'move' call_tmp[787502](426264 call idxType _mt[203] this[110003]))
    unknown call_tmp[787507] "expr temp" "maybe param" "maybe type" "temp"
    (787510 'move' call_tmp[787507](110013 call isEnum call_tmp[787502]))
    (672382 'move' tmp[672377](672380 call _cond_test call_tmp[787507]))
    if tmp[672377]
    {
      unknown tmp[672384] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[787514] "expr temp" "maybe param" "maybe type" "temp"
      (787517 'move' call_tmp[787514](426269 call idxType _mt[203] this[110003]))
      (672386 'move' tmp[672384](110016 call chpl__orderToEnum 0 call_tmp[787514]))
      (672391 'move' tmp[672376](672388 '_paramFoldLogical' tmp[672377] tmp[672384]))
    }
    {
      unknown tmp[672393] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[787521] "expr temp" "maybe param" "maybe type" "temp"
      (787524 'move' call_tmp[787521](426274 call idxType _mt[203] this[110003]))
      (672395 'move' tmp[672393](110019 call : 0 call_tmp[787521]))
      (672400 'move' tmp[672376](672397 '_paramFoldLogical' tmp[672377] tmp[672393]))
    }
    (603167 'move' ret[603162](603166 'deref' tmp[672376]))
    (603164 return ret[603162])
  }
  where {
    (110009 call(426259 call (partial) hasParamAlignment _mt[203] this[110003]))
  }
  function range[240](?).isAligned[110029](arg _mt[110035]:_MT[201], arg this[110032]:range[240](?) :
  range[240](?)) : _unknown[42] "inline" "method" "no where doc"
  {
    unknown ret[603171] "RVV" "temp"
    unknown call_tmp[787530] "expr temp" "maybe param" "maybe type" "temp"
    (787533 'move' call_tmp[787530](426285 call _alignment _mt[203] this[110032]))
    unknown call_tmp[787535] "expr temp" "maybe param" "maybe type" "temp"
    (787538 'move' call_tmp[787535](110043 call != call_tmp[787530] unalignedMark[107107]))
    (603176 'move' ret[603171](603175 'deref' call_tmp[787535]))
    (603173 return ret[603171])
  }
  where {
    unknown call_tmp[787542] "expr temp" "maybe param" "maybe type" "temp"
    (787545 'move' call_tmp[787542](110040 call(426280 call (partial) hasParamAligned _mt[203] this[110032])))
    (110037 call ! call_tmp[787542])
  }
  function range[240](?).isAligned[110050](arg _mt[110056]:_MT[201], arg this[110053]:range[240](?) :
  range[240](?)) param : _unknown[42] "method"
  {
    unknown ret[603180] "RVV" "param" "temp"
    (603185 'move' ret[603180](603184 'deref' 1))
    (603182 return ret[603180])
  }
  where {
    (110059 call(426290 call (partial) hasParamAligned _mt[203] this[110053]))
  }
  function range[240](?).hasParamStride[110066](arg _mt[110072]:_MT[201], arg this[110069]:range[240](?) :
  range[240](?)) param : _unknown[42] "method"
  {
    unknown ret[603189] "RVV" "param" "temp"
    unknown call_tmp[787551] "expr temp" "maybe param" "maybe type" "temp"
    (787554 'move' call_tmp[787551](110077 call(426294 call (partial) hasPosNegUnitStride _mt[203] this[110069])))
    (603194 'move' ret[603189](603193 'deref' call_tmp[787551]))
    (603191 return ret[603189])
  }
  function range[240](?).hasParamAlignmentField[110080](arg _mt[110086]:_MT[201], arg this[110083]:range[240](?) :
  range[240](?)) param : _unknown[42] "method"
  {
    unknown ret[603198] "RVV" "param" "temp"
    unknown call_tmp[787558] "expr temp" "maybe param" "maybe type" "temp"
    (787561 'move' call_tmp[787558](110091 call(426298 call (partial) hasPosNegUnitStride _mt[203] this[110083])))
    (603203 'move' ret[603198](603202 'deref' call_tmp[787558]))
    (603200 return ret[603198])
  }
  function range[240](?).hasParamAlignment[110094](arg _mt[110100]:_MT[201], arg this[110097]:range[240](?) :
  range[240](?)) param : _unknown[42] "method"
  {
    unknown ret[603207] "RVV" "param" "temp"
    unknown tmp[483654] "maybe param" "temp"
    (483665 'move' tmp[483654](110107 call(426302 call (partial) hasParamAlignmentField _mt[203] this[110097])))
    unknown call_tmp[787565] "expr temp" "maybe param" "maybe type" "temp"
    (787568 'move' call_tmp[787565](483667 call _cond_invalid tmp[483654]))
    if call_tmp[787565]
    {
      (483670 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[672461] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[672462] "maybe param" "temp"
    unknown call_tmp[787570] "expr temp" "maybe param" "maybe type" "temp"
    (787573 'move' call_tmp[787570](483655 call isTrue tmp[483654]))
    (672467 'move' tmp[672462](672465 call _cond_test call_tmp[787570]))
    if tmp[672462]
    {
      unknown tmp[483675] "maybe param" "temp"
      unknown tmp[483696] "maybe param" "temp"
      unknown call_tmp[787577] "expr temp" "maybe param" "maybe type" "temp"
      (787580 'move' call_tmp[787577](426307 call idxType _mt[203] this[110097]))
      (483707 'move' tmp[483696](110113 call isIntegral call_tmp[787577]))
      unknown call_tmp[787582] "expr temp" "maybe param" "maybe type" "temp"
      (787585 'move' call_tmp[787582](483709 call _cond_invalid tmp[483696]))
      if call_tmp[787582]
      {
        (483712 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[672407] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[672408] "maybe param" "temp"
      unknown call_tmp[787587] "expr temp" "maybe param" "maybe type" "temp"
      (787590 'move' call_tmp[787587](483697 call isTrue tmp[483696]))
      (672413 'move' tmp[672408](672411 call _cond_test call_tmp[787587]))
      if tmp[672408]
      {
        (672418 'move' tmp[672407](672415 '_paramFoldLogical' tmp[672408] 1))
      }
      {
        unknown tmp[672420] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[787594] "expr temp" "maybe param" "maybe type" "temp"
        (787597 'move' call_tmp[787594](426312 call idxType _mt[203] this[110097]))
        unknown call_tmp[787599] "expr temp" "maybe param" "maybe type" "temp"
        (787602 'move' call_tmp[787599](110116 call isEnum call_tmp[787594]))
        (672422 'move' tmp[672420](483701 call isTrue call_tmp[787599]))
        (672427 'move' tmp[672407](672424 '_paramFoldLogical' tmp[672408] tmp[672420]))
      }
      (483686 'move' tmp[483675] tmp[672407])
      unknown call_tmp[787604] "expr temp" "maybe param" "maybe type" "temp"
      (787607 'move' call_tmp[787604](483688 call _cond_invalid tmp[483675]))
      if call_tmp[787604]
      {
        (483691 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[672434] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[672435] "maybe param" "temp"
      unknown call_tmp[787609] "expr temp" "maybe param" "maybe type" "temp"
      (787612 'move' call_tmp[787609](483676 call isTrue tmp[483675]))
      (672440 'move' tmp[672435](672438 call _cond_test call_tmp[787609]))
      if tmp[672435]
      {
        (672445 'move' tmp[672434](672442 '_paramFoldLogical' tmp[672435] 1))
      }
      {
        unknown tmp[672447] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[787616] "expr temp" "maybe param" "maybe type" "temp"
        (787619 'move' call_tmp[787616](426317 call idxType _mt[203] this[110097]))
        unknown call_tmp[787621] "expr temp" "maybe param" "maybe type" "temp"
        (787624 'move' call_tmp[787621](110119 call isBool call_tmp[787616]))
        (672449 'move' tmp[672447](483680 call isTrue call_tmp[787621]))
        (672454 'move' tmp[672434](672451 '_paramFoldLogical' tmp[672435] tmp[672447]))
      }
      unknown tmp[672469] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (672471 'move' tmp[672469](483658 call isTrue tmp[672434]))
      (672476 'move' tmp[672461](672473 '_paramFoldLogical' tmp[672462] tmp[672469]))
    }
    {
      (672481 'move' tmp[672461](672478 '_paramFoldLogical' tmp[672462] 0))
    }
    (603212 'move' ret[603207](603211 'deref' tmp[672461]))
    (603209 return ret[603207])
  }
  function range[240](?).hasParamAligned[110123](arg _mt[110129]:_MT[201], arg this[110126]:range[240](?) :
  range[240](?)) param : _unknown[42] "method"
  {
    unknown ret[603216] "RVV" "param" "temp"
    unknown call_tmp[787628] "expr temp" "maybe param" "maybe type" "temp"
    (787631 'move' call_tmp[787628](110134 call(426321 call (partial) hasPosNegUnitStride _mt[203] this[110126])))
    (603221 'move' ret[603216](603220 'deref' call_tmp[787628]))
    (603218 return ret[603216])
  }
  function range[240](?).hasParamStrideAltvalAld[110137](arg _mt[110143]:_MT[201], arg this[110140]:range[240](?) :
  range[240](?)) param : _unknown[42] "method"
  {
    unknown ret[603225] "RVV" "param" "temp"
    unknown call_tmp[787635] "expr temp" "maybe param" "maybe type" "temp"
    (787638 'move' call_tmp[787635](110148 call(426325 call (partial) hasPosNegUnitStride _mt[203] this[110140])))
    (603230 'move' ret[603225](603229 'deref' call_tmp[787635]))
    (603227 return ret[603225])
  }
  function range[240](?).hasParamStrideAltvalAld[110151](arg _mt[110157]:_MT[201], arg this[110154]:range[240](?) :
  range[240](?)) param : _unknown[42] "method"
  {
    unknown ret[603234] "RVV" "param" "temp"
    unknown r[110161] "dead at end of block" "insert auto destroy"
    (645259 'default init var' r[110161] this[110154])
    (110164 'end of statement')
    unknown call_tmp[787642] "expr temp" "maybe param" "maybe type" "temp"
    (787645 'move' call_tmp[787642](110172 call(110169 call (partial) hasParamStrideAltvalAld _mt[203] r[110161])))
    (603239 'move' ret[603234](603238 'deref' call_tmp[787642]))
    gotoReturn _end_hasParamStrideAltvalAld[603232] _end_hasParamStrideAltvalAld[603232]
    (551784 'end of statement' r[110161])
    label _end_hasParamStrideAltvalAld[603232]
    (603236 return ret[603234])
  }
  function range[240](?).hasLowBound[110175](arg _mt[110181]:_MT[201], arg this[110178]:range[240](?) :
  range[240](?)) param : _unknown[42] "method"
  {
    unknown ret[603245] "RVV" "param" "temp"
    unknown tmp[483717] "maybe param" "temp"
    unknown call_tmp[787649] "expr temp" "maybe param" "maybe type" "temp"
    (787652 'move' call_tmp[787649](426331 call bounds _mt[203] this[110178]))
    (483728 'move' tmp[483717](110187 call == call_tmp[787649] both[107114]))
    unknown call_tmp[787654] "expr temp" "maybe param" "maybe type" "temp"
    (787657 'move' call_tmp[787654](483730 call _cond_invalid tmp[483717]))
    if call_tmp[787654]
    {
      (483733 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[672488] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[672489] "maybe param" "temp"
    unknown call_tmp[787659] "expr temp" "maybe param" "maybe type" "temp"
    (787662 'move' call_tmp[787659](483718 call isTrue tmp[483717]))
    (672494 'move' tmp[672489](672492 call _cond_test call_tmp[787659]))
    if tmp[672489]
    {
      (672499 'move' tmp[672488](672496 '_paramFoldLogical' tmp[672489] 1))
    }
    {
      unknown tmp[672501] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[787666] "expr temp" "maybe param" "maybe type" "temp"
      (787669 'move' call_tmp[787666](426336 call bounds _mt[203] this[110178]))
      unknown call_tmp[787671] "expr temp" "maybe param" "maybe type" "temp"
      (787674 'move' call_tmp[787671](110194 call == call_tmp[787666] low[107116]))
      (672503 'move' tmp[672501](483722 call isTrue call_tmp[787671]))
      (672508 'move' tmp[672488](672505 '_paramFoldLogical' tmp[672489] tmp[672501]))
    }
    (603250 'move' ret[603245](603249 'deref' tmp[672488]))
    (603247 return ret[603245])
  }
  function range[240](?).lowBound[110203](arg _mt[110209]:_MT[201], arg this[110206]:range[240](?) :
  range[240](?)) : _unknown[42] "inline" "method" "no parens"
  {
    unknown ret[603254] "RVV" "temp"
    unknown call_tmp[787678] "expr temp" "maybe param" "maybe type" "temp"
    (787681 'move' call_tmp[787678](110222 call(426345 call (partial) hasLowBound _mt[203] this[110206])))
    unknown call_tmp[787683] "expr temp" "maybe param" "maybe type" "temp"
    (787686 'move' call_tmp[787683](110219 call ! call_tmp[787678]))
    unknown call_tmp[787688] "expr temp" "maybe param" "maybe type" "temp"
    (787691 'move' call_tmp[787688](110223 call _cond_test call_tmp[787683]))
    if call_tmp[787688]
    {
      (110215 call compilerError "can't query the low bound of a range without one")
    }
    unknown call_tmp[787697] "expr temp" "maybe param" "maybe type" "temp"
    (787700 'move' call_tmp[787697](426354 call _low _mt[203] this[110206]))
    unknown call_tmp[787702] "expr temp" "maybe param" "maybe type" "temp"
    (787705 'move' call_tmp[787702](110229 call(426349 call (partial) chpl_intToIdx _mt[203] this[110206]) call_tmp[787697]))
    unknown call_tmp[787709] "expr temp" "maybe param" "maybe type" "temp"
    (787712 'move' call_tmp[787709](603259 call idxType _mt[203] this[110206]))
    (603263 'move' ret[603254](603262 'coerce' call_tmp[787702] call_tmp[787709]))
    (603256 return ret[603254])
  }
  { scopeless type
    (426341 call idxType _mt[203] this[110206])
  }
  function range[240](?).hasUnitStride[110234](arg _mt[110240]:_MT[201], arg this[110237]:range[240](?) :
  range[240](?)) param : _unknown[42] "method"
  {
    unknown ret[603267] "RVV" "param" "temp"
    unknown call_tmp[787718] "expr temp" "maybe param" "maybe type" "temp"
    (787721 'move' call_tmp[787718](401291 call strides _mt[203] this[110237]))
    unknown call_tmp[787725] "expr temp" "maybe param" "maybe type" "temp"
    (787728 'move' call_tmp[787725](110250 call(110247 call (partial) isOne _mt[203] call_tmp[787718])))
    (603272 'move' ret[603267](603271 'deref' call_tmp[787725]))
    (603269 return ret[603267])
  }
  function range[240](?).hasPosNegUnitStride[110253](arg _mt[110259]:_MT[201], arg this[110256]:range[240](?) :
  range[240](?)) param : _unknown[42] "method"
  {
    unknown ret[603276] "RVV" "param" "temp"
    unknown call_tmp[787732] "expr temp" "maybe param" "maybe type" "temp"
    (787735 'move' call_tmp[787732](401296 call strides _mt[203] this[110256]))
    unknown call_tmp[787739] "expr temp" "maybe param" "maybe type" "temp"
    (787742 'move' call_tmp[787739](110267 call(110264 call (partial) isPosNegOne _mt[203] call_tmp[787732])))
    (603281 'move' ret[603276](603280 'deref' call_tmp[787739]))
    (603278 return ret[603276])
  }
  function range[240](?).hasPositiveStride[110270](arg _mt[110276]:_MT[201], arg this[110273]:range[240](?) :
  range[240](?)) param : _unknown[42] "method"
  {
    unknown ret[603285] "RVV" "param" "temp"
    unknown call_tmp[787746] "expr temp" "maybe param" "maybe type" "temp"
    (787749 'move' call_tmp[787746](401306 call strides _mt[203] this[110273]))
    unknown call_tmp[787753] "expr temp" "maybe param" "maybe type" "temp"
    (787756 'move' call_tmp[787753](110291 call(110288 call (partial) isPositive _mt[203] call_tmp[787746])))
    (603290 'move' ret[603285](603289 'deref' call_tmp[787753]))
    (603287 return ret[603285])
  }
  where {
    unknown call_tmp[787760] "expr temp" "maybe param" "maybe type" "temp"
    (787763 'move' call_tmp[787760](401301 call strides _mt[203] this[110273]))
    (110284 call(110281 call (partial) hasSign _mt[203] call_tmp[787760]))
  }
  function range[240](?).hasPositiveStride[110295](arg _mt[110301]:_MT[201], arg this[110298]:range[240](?) :
  range[240](?)) : _unknown[42] "method"
  {
    unknown ret[603294] "RVV" "temp"
    unknown call_tmp[787769] "expr temp" "maybe param" "maybe type" "temp"
    (787772 'move' call_tmp[787769](426359 call _stride _mt[203] this[110298]))
    unknown call_tmp[787774] "expr temp" "maybe param" "maybe type" "temp"
    (787777 'move' call_tmp[787774](110312 call > call_tmp[787769] 0))
    (603299 'move' ret[603294](603298 'deref' call_tmp[787774]))
    (603296 return ret[603294])
  }
  where {
    unknown call_tmp[787781] "expr temp" "maybe param" "maybe type" "temp"
    (787784 'move' call_tmp[787781](401311 call strides _mt[203] this[110298]))
    (110309 call(110306 call (partial) isAny _mt[203] call_tmp[787781]))
  }
  function range[240](?).hasNegativeStride[110319](arg _mt[110325]:_MT[201], arg this[110322]:range[240](?) :
  range[240](?)) param : _unknown[42] "method"
  {
    unknown ret[603303] "RVV" "param" "temp"
    unknown call_tmp[787790] "expr temp" "maybe param" "maybe type" "temp"
    (787793 'move' call_tmp[787790](401321 call strides _mt[203] this[110322]))
    unknown call_tmp[787797] "expr temp" "maybe param" "maybe type" "temp"
    (787800 'move' call_tmp[787797](110340 call(110337 call (partial) isNegative _mt[203] call_tmp[787790])))
    (603308 'move' ret[603303](603307 'deref' call_tmp[787797]))
    (603305 return ret[603303])
  }
  where {
    unknown call_tmp[787804] "expr temp" "maybe param" "maybe type" "temp"
    (787807 'move' call_tmp[787804](401316 call strides _mt[203] this[110322]))
    (110331 call(110328 call (partial) hasSign _mt[203] call_tmp[787804]))
  }
  function range[240](?).hasNegativeStride[110344](arg _mt[110350]:_MT[201], arg this[110347]:range[240](?) :
  range[240](?)) : _unknown[42] "method"
  {
    unknown ret[603312] "RVV" "temp"
    unknown call_tmp[787813] "expr temp" "maybe param" "maybe type" "temp"
    (787816 'move' call_tmp[787813](426364 call _stride _mt[203] this[110347]))
    unknown call_tmp[787818] "expr temp" "maybe param" "maybe type" "temp"
    (787821 'move' call_tmp[787818](110359 call < call_tmp[787813] 0))
    (603317 'move' ret[603312](603316 'deref' call_tmp[787818]))
    (603314 return ret[603312])
  }
  where {
    unknown call_tmp[787825] "expr temp" "maybe param" "maybe type" "temp"
    (787828 'move' call_tmp[787825](401326 call strides _mt[203] this[110347]))
    (110356 call(110353 call (partial) isAny _mt[203] call_tmp[787825]))
  }
  function strideKind[107137].isOne[110366](arg _mt[110372]:_MT[201], param arg this[110369]:strideKind[107137] :
  strideKind[107137]) param : _unknown[42] "method"
  {
    unknown ret[603321] "RVV" "param" "temp"
    unknown call_tmp[787832] "expr temp" "maybe param" "maybe type" "temp"
    (787835 'move' call_tmp[787832](110376 call == this[110369] one[107127]))
    (603326 'move' ret[603321](603325 'deref' call_tmp[787832]))
    (603323 return ret[603321])
  }
  function strideKind[107137].isNegOne[110385](arg _mt[110391]:_MT[201], param arg this[110388]:strideKind[107137] :
  strideKind[107137]) param : _unknown[42] "method"
  {
    unknown ret[603330] "RVV" "param" "temp"
    unknown call_tmp[787837] "expr temp" "maybe param" "maybe type" "temp"
    (787840 'move' call_tmp[787837](110395 call == this[110388] negOne[107129]))
    (603335 'move' ret[603330](603334 'deref' call_tmp[787837]))
    (603332 return ret[603330])
  }
  function strideKind[107137].isPosNegOne[110406](arg _mt[110412]:_MT[201], param arg this[110409]:strideKind[107137] :
  strideKind[107137]) param : _unknown[42] "method"
  {
    unknown ret[603339] "RVV" "param" "temp"
    unknown tmp[483738] "maybe param" "temp"
    (483749 'move' tmp[483738](110418 call == this[110409] one[107127]))
    unknown call_tmp[787842] "expr temp" "maybe param" "maybe type" "temp"
    (787845 'move' call_tmp[787842](483751 call _cond_invalid tmp[483738]))
    if call_tmp[787842]
    {
      (483754 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[672515] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[672516] "maybe param" "temp"
    unknown call_tmp[787847] "expr temp" "maybe param" "maybe type" "temp"
    (787850 'move' call_tmp[787847](483739 call isTrue tmp[483738]))
    (672521 'move' tmp[672516](672519 call _cond_test call_tmp[787847]))
    if tmp[672516]
    {
      (672526 'move' tmp[672515](672523 '_paramFoldLogical' tmp[672516] 1))
    }
    {
      unknown tmp[672528] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[787852] "expr temp" "maybe param" "maybe type" "temp"
      (787855 'move' call_tmp[787852](110425 call == this[110409] negOne[107129]))
      (672530 'move' tmp[672528](483743 call isTrue call_tmp[787852]))
      (672535 'move' tmp[672515](672532 '_paramFoldLogical' tmp[672516] tmp[672528]))
    }
    (603344 'move' ret[603339](603343 'deref' tmp[672515]))
    (603341 return ret[603339])
  }
  function strideKind[107137].isPositive[110434](arg _mt[110440]:_MT[201], param arg this[110437]:strideKind[107137] :
  strideKind[107137]) param : _unknown[42] "method"
  {
    unknown ret[603348] "RVV" "param" "temp"
    unknown tmp[483759] "maybe param" "temp"
    (483770 'move' tmp[483759](110446 call == this[110437] one[107127]))
    unknown call_tmp[787857] "expr temp" "maybe param" "maybe type" "temp"
    (787860 'move' call_tmp[787857](483772 call _cond_invalid tmp[483759]))
    if call_tmp[787857]
    {
      (483775 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[672542] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[672543] "maybe param" "temp"
    unknown call_tmp[787862] "expr temp" "maybe param" "maybe type" "temp"
    (787865 'move' call_tmp[787862](483760 call isTrue tmp[483759]))
    (672548 'move' tmp[672543](672546 call _cond_test call_tmp[787862]))
    if tmp[672543]
    {
      (672553 'move' tmp[672542](672550 '_paramFoldLogical' tmp[672543] 1))
    }
    {
      unknown tmp[672555] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[787867] "expr temp" "maybe param" "maybe type" "temp"
      (787870 'move' call_tmp[787867](110453 call == this[110437] positive[107131]))
      (672557 'move' tmp[672555](483764 call isTrue call_tmp[787867]))
      (672562 'move' tmp[672542](672559 '_paramFoldLogical' tmp[672543] tmp[672555]))
    }
    (603353 'move' ret[603348](603352 'deref' tmp[672542]))
    (603350 return ret[603348])
  }
  function strideKind[107137].isNegative[110464](arg _mt[110470]:_MT[201], param arg this[110467]:strideKind[107137] :
  strideKind[107137]) param : _unknown[42] "method"
  {
    unknown ret[603357] "RVV" "param" "temp"
    unknown tmp[483780] "maybe param" "temp"
    (483791 'move' tmp[483780](110476 call == this[110467] negOne[107129]))
    unknown call_tmp[787872] "expr temp" "maybe param" "maybe type" "temp"
    (787875 'move' call_tmp[787872](483793 call _cond_invalid tmp[483780]))
    if call_tmp[787872]
    {
      (483796 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[672569] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[672570] "maybe param" "temp"
    unknown call_tmp[787877] "expr temp" "maybe param" "maybe type" "temp"
    (787880 'move' call_tmp[787877](483781 call isTrue tmp[483780]))
    (672575 'move' tmp[672570](672573 call _cond_test call_tmp[787877]))
    if tmp[672570]
    {
      (672580 'move' tmp[672569](672577 '_paramFoldLogical' tmp[672570] 1))
    }
    {
      unknown tmp[672582] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[787882] "expr temp" "maybe param" "maybe type" "temp"
      (787885 'move' call_tmp[787882](110483 call == this[110467] negative[107133]))
      (672584 'move' tmp[672582](483785 call isTrue call_tmp[787882]))
      (672589 'move' tmp[672569](672586 '_paramFoldLogical' tmp[672570] tmp[672582]))
    }
    (603362 'move' ret[603357](603361 'deref' tmp[672569]))
    (603359 return ret[603357])
  }
  function strideKind[107137].hasSign[110494](arg _mt[110500]:_MT[201], param arg this[110497]:strideKind[107137] :
  strideKind[107137]) param : _unknown[42] "method"
  {
    unknown ret[603366] "RVV" "param" "temp"
    unknown call_tmp[787887] "expr temp" "maybe param" "maybe type" "temp"
    (787890 'move' call_tmp[787887](110504 call != this[110497] any[107135]))
    (603371 'move' ret[603366](603370 'deref' call_tmp[787887]))
    (603368 return ret[603366])
  }
  function strideKind[107137].isAny[110515](arg _mt[110521]:_MT[201], param arg this[110518]:strideKind[107137] :
  strideKind[107137]) param : _unknown[42] "method"
  {
    unknown ret[603375] "RVV" "param" "temp"
    unknown call_tmp[787892] "expr temp" "maybe param" "maybe type" "temp"
    (787895 'move' call_tmp[787892](110525 call == this[110518] any[107135]))
    (603380 'move' ret[603375](603379 'deref' call_tmp[787892]))
    (603377 return ret[603375])
  }
  function strideKind[107137].defaultStride[110534](arg _mt[110540]:_MT[201], param arg this[110537]:strideKind[107137] :
  strideKind[107137]) param : _unknown[42] "method"
  {
    unknown ret[603384] "RVV" "param" "temp"
    unknown tmp[672596] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[672597] "maybe param" "temp"
    unknown call_tmp[787899] "expr temp" "maybe param" "maybe type" "temp"
    (787902 'move' call_tmp[787899](110545 call(426378 call (partial) isNegative _mt[203] this[110537])))
    (672602 'move' tmp[672597](672600 call _cond_test call_tmp[787899]))
    if tmp[672597]
    {
      unknown tmp[672604] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (672606 'move' tmp[672604](110546 call - 1))
      (672611 'move' tmp[672596](672608 '_paramFoldLogical' tmp[672597] tmp[672604]))
    }
    {
      (672616 'move' tmp[672596](672613 '_paramFoldLogical' tmp[672597] 1))
    }
    (603389 'move' ret[603384](603388 'deref' tmp[672596]))
    (603386 return ret[603384])
  }
  function isPositiveStride[110555](param arg strides[110558]:strideKind[107137], arg stride[110561]:_any[141](?)) : _unknown[42] "inline" "private"
  {
    unknown ret[603393] "RVV" "temp"
    unknown call_tmp[787904] "expr temp" "maybe param" "maybe type" "temp"
    (787907 'move' call_tmp[787904](110570 call > stride[110561] 0))
    (603398 'move' ret[603393](603397 'deref' call_tmp[787904]))
    (603395 return ret[603393])
  }
  where {
    (110567 call(110564 call (partial) isAny _mt[203] strides[110558]))
  }
  function isPositiveStride[110577](param arg strides[110580]:strideKind[107137], param arg stride[110583]:_any[141](?)) param : _unknown[42] "private"
  {
    unknown ret[603402] "RVV" "param" "temp"
    unknown call_tmp[787911] "expr temp" "maybe param" "maybe type" "temp"
    (787914 'move' call_tmp[787911](110592 call > stride[110583] 0))
    (603407 'move' ret[603402](603406 'deref' call_tmp[787911]))
    (603404 return ret[603402])
  }
  where {
    (110589 call(110586 call (partial) isAny _mt[203] strides[110580]))
  }
  function isPositiveStride[110599](param arg strides[110602]:strideKind[107137], arg stride[110605]:_any[141](?)) param : _unknown[42] "private"
  {
    unknown ret[603411] "RVV" "param" "temp"
    unknown call_tmp[787920] "expr temp" "maybe param" "maybe type" "temp"
    (787923 'move' call_tmp[787920](110618 call(110615 call (partial) isPositive _mt[203] strides[110602])))
    (603416 'move' ret[603411](603415 'deref' call_tmp[787920]))
    (603413 return ret[603411])
  }
  where {
    (110611 call(110608 call (partial) hasSign _mt[203] strides[110602]))
  }
  function isNegativeStride[110622](param arg strides[110625]:strideKind[107137], arg stride[110628]:_any[141](?)) : _unknown[42] "inline" "private"
  {
    unknown ret[603420] "RVV" "temp"
    unknown call_tmp[787927] "expr temp" "maybe param" "maybe type" "temp"
    (787930 'move' call_tmp[787927](110637 call < stride[110628] 0))
    (603425 'move' ret[603420](603424 'deref' call_tmp[787927]))
    (603422 return ret[603420])
  }
  where {
    (110634 call(110631 call (partial) isAny _mt[203] strides[110625]))
  }
  function isNegativeStride[110644](param arg strides[110647]:strideKind[107137], param arg stride[110650]:_any[141](?)) param : _unknown[42] "private"
  {
    unknown ret[603429] "RVV" "param" "temp"
    unknown call_tmp[787934] "expr temp" "maybe param" "maybe type" "temp"
    (787937 'move' call_tmp[787934](110659 call < stride[110650] 0))
    (603434 'move' ret[603429](603433 'deref' call_tmp[787934]))
    (603431 return ret[603429])
  }
  where {
    (110656 call(110653 call (partial) isAny _mt[203] strides[110647]))
  }
  function isNegativeStride[110666](param arg strides[110669]:strideKind[107137], arg stride[110672]:_any[141](?)) param : _unknown[42] "private"
  {
    unknown ret[603438] "RVV" "param" "temp"
    unknown call_tmp[787943] "expr temp" "maybe param" "maybe type" "temp"
    (787946 'move' call_tmp[787943](110685 call(110682 call (partial) isNegative _mt[203] strides[110669])))
    (603443 'move' ret[603438](603442 'deref' call_tmp[787943]))
    (603440 return ret[603438])
  }
  where {
    (110678 call(110675 call (partial) hasSign _mt[203] strides[110669]))
  }
  function chpl_strideProduct[110689](param arg s1[110692]:strideKind[107137], param arg s2[110696]:strideKind[107137]) param : _unknown[42]
  {
    unknown ret[603447] "RVV" "param" "temp"
    {
      unknown tmp[110977] "expr temp" "maybe param" "maybe type" "temp"
      (110979 'move' tmp[110977] s1[110692])
      unknown call_tmp[787950] "expr temp" "maybe param" "maybe type" "temp"
      (787953 'move' call_tmp[787950](110981 call == tmp[110977] one[107127]))
      unknown call_tmp[787955] "expr temp" "maybe param" "maybe type" "temp"
      (787958 'move' call_tmp[787955](110984 call _cond_test call_tmp[787950]))
      if call_tmp[787955]
      {
        (603452 'move' ret[603447](603451 'deref' s2[110696]))
        gotoReturn _end_chpl_strideProduct[603445] _end_chpl_strideProduct[603445]
      }
      {
        unknown call_tmp[787960] "expr temp" "maybe param" "maybe type" "temp"
        (787963 'move' call_tmp[787960](110987 call == tmp[110977] positive[107131]))
        unknown call_tmp[787965] "expr temp" "maybe param" "maybe type" "temp"
        (787968 'move' call_tmp[787965](110990 call _cond_test call_tmp[787960]))
        if call_tmp[787965]
        {
          unknown tmp[110759] "expr temp" "maybe param" "maybe type" "temp"
          (110761 'move' tmp[110759] s2[110696])
          unknown call_tmp[787970] "expr temp" "maybe param" "maybe type" "temp"
          (787973 'move' call_tmp[787970](110763 call == tmp[110759] one[107127]))
          unknown call_tmp[787975] "expr temp" "maybe param" "maybe type" "temp"
          (787978 'move' call_tmp[787975](110766 call _cond_test call_tmp[787970]))
          if call_tmp[787975]
          {
            (603457 'move' ret[603447](603456 'deref' positive[107131]))
            gotoReturn _end_chpl_strideProduct[603445] _end_chpl_strideProduct[603445]
          }
          {
            unknown call_tmp[787980] "expr temp" "maybe param" "maybe type" "temp"
            (787983 'move' call_tmp[787980](110769 call == tmp[110759] positive[107131]))
            unknown call_tmp[787985] "expr temp" "maybe param" "maybe type" "temp"
            (787988 'move' call_tmp[787985](110772 call _cond_test call_tmp[787980]))
            if call_tmp[787985]
            {
              (603462 'move' ret[603447](603461 'deref' positive[107131]))
              gotoReturn _end_chpl_strideProduct[603445] _end_chpl_strideProduct[603445]
            }
            {
              unknown call_tmp[787990] "expr temp" "maybe param" "maybe type" "temp"
              (787993 'move' call_tmp[787990](110776 call == tmp[110759] negOne[107129]))
              unknown call_tmp[787995] "expr temp" "maybe param" "maybe type" "temp"
              (787998 'move' call_tmp[787995](110779 call _cond_test call_tmp[787990]))
              if call_tmp[787995]
              {
                (603467 'move' ret[603447](603466 'deref' negative[107133]))
                gotoReturn _end_chpl_strideProduct[603445] _end_chpl_strideProduct[603445]
              }
              {
                unknown call_tmp[788000] "expr temp" "maybe param" "maybe type" "temp"
                (788003 'move' call_tmp[788000](110783 call == tmp[110759] negative[107133]))
                unknown call_tmp[788005] "expr temp" "maybe param" "maybe type" "temp"
                (788008 'move' call_tmp[788005](110786 call _cond_test call_tmp[788000]))
                if call_tmp[788005]
                {
                  (603472 'move' ret[603447](603471 'deref' negative[107133]))
                  gotoReturn _end_chpl_strideProduct[603445] _end_chpl_strideProduct[603445]
                }
                {
                  unknown call_tmp[788010] "expr temp" "maybe param" "maybe type" "temp"
                  (788013 'move' call_tmp[788010](110790 call == tmp[110759] any[107135]))
                  unknown call_tmp[788015] "expr temp" "maybe param" "maybe type" "temp"
                  (788018 'move' call_tmp[788015](110793 call _cond_test call_tmp[788010]))
                  if call_tmp[788015]
                  {
                    (603477 'move' ret[603447](603476 'deref' any[107135]))
                    gotoReturn _end_chpl_strideProduct[603445] _end_chpl_strideProduct[603445]
                  }
                }
              }
            }
          }
        }
        {
          unknown call_tmp[788020] "expr temp" "maybe param" "maybe type" "temp"
          (788023 'move' call_tmp[788020](110994 call == tmp[110977] negOne[107129]))
          unknown call_tmp[788025] "expr temp" "maybe param" "maybe type" "temp"
          (788028 'move' call_tmp[788025](110997 call _cond_test call_tmp[788020]))
          if call_tmp[788025]
          {
            unknown tmp[110844] "expr temp" "maybe param" "maybe type" "temp"
            (110846 'move' tmp[110844] s2[110696])
            unknown call_tmp[788030] "expr temp" "maybe param" "maybe type" "temp"
            (788033 'move' call_tmp[788030](110848 call == tmp[110844] one[107127]))
            unknown call_tmp[788035] "expr temp" "maybe param" "maybe type" "temp"
            (788038 'move' call_tmp[788035](110851 call _cond_test call_tmp[788030]))
            if call_tmp[788035]
            {
              (603482 'move' ret[603447](603481 'deref' negOne[107129]))
              gotoReturn _end_chpl_strideProduct[603445] _end_chpl_strideProduct[603445]
            }
            {
              unknown call_tmp[788040] "expr temp" "maybe param" "maybe type" "temp"
              (788043 'move' call_tmp[788040](110854 call == tmp[110844] positive[107131]))
              unknown call_tmp[788045] "expr temp" "maybe param" "maybe type" "temp"
              (788048 'move' call_tmp[788045](110857 call _cond_test call_tmp[788040]))
              if call_tmp[788045]
              {
                (603487 'move' ret[603447](603486 'deref' negative[107133]))
                gotoReturn _end_chpl_strideProduct[603445] _end_chpl_strideProduct[603445]
              }
              {
                unknown call_tmp[788050] "expr temp" "maybe param" "maybe type" "temp"
                (788053 'move' call_tmp[788050](110861 call == tmp[110844] negOne[107129]))
                unknown call_tmp[788055] "expr temp" "maybe param" "maybe type" "temp"
                (788058 'move' call_tmp[788055](110864 call _cond_test call_tmp[788050]))
                if call_tmp[788055]
                {
                  (603492 'move' ret[603447](603491 'deref' one[107127]))
                  gotoReturn _end_chpl_strideProduct[603445] _end_chpl_strideProduct[603445]
                }
                {
                  unknown call_tmp[788060] "expr temp" "maybe param" "maybe type" "temp"
                  (788063 'move' call_tmp[788060](110868 call == tmp[110844] negative[107133]))
                  unknown call_tmp[788065] "expr temp" "maybe param" "maybe type" "temp"
                  (788068 'move' call_tmp[788065](110871 call _cond_test call_tmp[788060]))
                  if call_tmp[788065]
                  {
                    (603497 'move' ret[603447](603496 'deref' positive[107131]))
                    gotoReturn _end_chpl_strideProduct[603445] _end_chpl_strideProduct[603445]
                  }
                  {
                    unknown call_tmp[788070] "expr temp" "maybe param" "maybe type" "temp"
                    (788073 'move' call_tmp[788070](110875 call == tmp[110844] any[107135]))
                    unknown call_tmp[788075] "expr temp" "maybe param" "maybe type" "temp"
                    (788078 'move' call_tmp[788075](110878 call _cond_test call_tmp[788070]))
                    if call_tmp[788075]
                    {
                      (603502 'move' ret[603447](603501 'deref' any[107135]))
                      gotoReturn _end_chpl_strideProduct[603445] _end_chpl_strideProduct[603445]
                    }
                  }
                }
              }
            }
          }
          {
            unknown call_tmp[788080] "expr temp" "maybe param" "maybe type" "temp"
            (788083 'move' call_tmp[788080](111001 call == tmp[110977] negative[107133]))
            unknown call_tmp[788085] "expr temp" "maybe param" "maybe type" "temp"
            (788088 'move' call_tmp[788085](111004 call _cond_test call_tmp[788080]))
            if call_tmp[788085]
            {
              unknown tmp[110929] "expr temp" "maybe param" "maybe type" "temp"
              (110931 'move' tmp[110929] s2[110696])
              unknown call_tmp[788090] "expr temp" "maybe param" "maybe type" "temp"
              (788093 'move' call_tmp[788090](110933 call == tmp[110929] one[107127]))
              unknown call_tmp[788095] "expr temp" "maybe param" "maybe type" "temp"
              (788098 'move' call_tmp[788095](110936 call _cond_test call_tmp[788090]))
              if call_tmp[788095]
              {
                (603507 'move' ret[603447](603506 'deref' negative[107133]))
                gotoReturn _end_chpl_strideProduct[603445] _end_chpl_strideProduct[603445]
              }
              {
                unknown call_tmp[788100] "expr temp" "maybe param" "maybe type" "temp"
                (788103 'move' call_tmp[788100](110939 call == tmp[110929] positive[107131]))
                unknown call_tmp[788105] "expr temp" "maybe param" "maybe type" "temp"
                (788108 'move' call_tmp[788105](110942 call _cond_test call_tmp[788100]))
                if call_tmp[788105]
                {
                  (603512 'move' ret[603447](603511 'deref' negative[107133]))
                  gotoReturn _end_chpl_strideProduct[603445] _end_chpl_strideProduct[603445]
                }
                {
                  unknown call_tmp[788110] "expr temp" "maybe param" "maybe type" "temp"
                  (788113 'move' call_tmp[788110](110946 call == tmp[110929] negOne[107129]))
                  unknown call_tmp[788115] "expr temp" "maybe param" "maybe type" "temp"
                  (788118 'move' call_tmp[788115](110949 call _cond_test call_tmp[788110]))
                  if call_tmp[788115]
                  {
                    (603517 'move' ret[603447](603516 'deref' positive[107131]))
                    gotoReturn _end_chpl_strideProduct[603445] _end_chpl_strideProduct[603445]
                  }
                  {
                    unknown call_tmp[788120] "expr temp" "maybe param" "maybe type" "temp"
                    (788123 'move' call_tmp[788120](110953 call == tmp[110929] negative[107133]))
                    unknown call_tmp[788125] "expr temp" "maybe param" "maybe type" "temp"
                    (788128 'move' call_tmp[788125](110956 call _cond_test call_tmp[788120]))
                    if call_tmp[788125]
                    {
                      (603522 'move' ret[603447](603521 'deref' positive[107131]))
                      gotoReturn _end_chpl_strideProduct[603445] _end_chpl_strideProduct[603445]
                    }
                    {
                      unknown call_tmp[788130] "expr temp" "maybe param" "maybe type" "temp"
                      (788133 'move' call_tmp[788130](110960 call == tmp[110929] any[107135]))
                      unknown call_tmp[788135] "expr temp" "maybe param" "maybe type" "temp"
                      (788138 'move' call_tmp[788135](110963 call _cond_test call_tmp[788130]))
                      if call_tmp[788135]
                      {
                        (603527 'move' ret[603447](603526 'deref' any[107135]))
                        gotoReturn _end_chpl_strideProduct[603445] _end_chpl_strideProduct[603445]
                      }
                    }
                  }
                }
              }
            }
            {
              unknown call_tmp[788140] "expr temp" "maybe param" "maybe type" "temp"
              (788143 'move' call_tmp[788140](111008 call == tmp[110977] any[107135]))
              unknown call_tmp[788145] "expr temp" "maybe param" "maybe type" "temp"
              (788148 'move' call_tmp[788145](111011 call _cond_test call_tmp[788140]))
              if call_tmp[788145]
              {
                (603532 'move' ret[603447](603531 'deref' any[107135]))
                gotoReturn _end_chpl_strideProduct[603445] _end_chpl_strideProduct[603445]
              }
            }
          }
        }
      }
    }
    label _end_chpl_strideProduct[603445]
    (603449 return ret[603447])
    (396125 'used modules list'(110701 'use' strideKind[107137]))
  }
  function chpl_strideProduct[111017](arg r1[111022]:range[240](?), arg r2[111028]:range[240](?)) param : _unknown[42]
  {
    unknown ret[603538] "RVV" "param" "temp"
    unknown call_tmp[788152] "expr temp" "maybe param" "maybe type" "temp"
    (788155 'move' call_tmp[788152](111036 call strides _mt[203] r1[111022]))
    unknown call_tmp[788159] "expr temp" "maybe param" "maybe type" "temp"
    (788162 'move' call_tmp[788159](111040 call strides _mt[203] r2[111028]))
    unknown call_tmp[788164] "expr temp" "maybe param" "maybe type" "temp"
    (788167 'move' call_tmp[788164](111034 call chpl_strideProduct call_tmp[788152] call_tmp[788159]))
    (603543 'move' ret[603538](603542 'deref' call_tmp[788164]))
    (603540 return ret[603538])
  }
  function chpl_strideProduct[111045](arg r1[111050]:range[240](?), param arg stride2[111054]:integral[159](?)) param : _unknown[42]
  {
    unknown ret[603547] "RVV" "param" "temp"
    unknown s2[111062] "dead at end of block" "param"
    unknown tmp[672669] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[672670] "maybe param" "temp"
    unknown call_tmp[788169] "expr temp" "maybe param" "maybe type" "temp"
    (788172 'move' call_tmp[788169](111063 call == stride2[111054] 1))
    (672675 'move' tmp[672670](672673 call _cond_test call_tmp[788169]))
    if tmp[672670]
    {
      (672680 'move' tmp[672669](672677 '_paramFoldLogical' tmp[672670] one[107127]))
    }
    {
      unknown tmp[672646] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[672647] "maybe param" "temp"
      unknown call_tmp[788174] "expr temp" "maybe param" "maybe type" "temp"
      (788177 'move' call_tmp[788174](111071 call - 1))
      unknown call_tmp[788179] "expr temp" "maybe param" "maybe type" "temp"
      (788182 'move' call_tmp[788179](111068 call == stride2[111054] call_tmp[788174]))
      (672652 'move' tmp[672647](672650 call _cond_test call_tmp[788179]))
      if tmp[672647]
      {
        (672657 'move' tmp[672646](672654 '_paramFoldLogical' tmp[672647] negOne[107129]))
      }
      {
        unknown tmp[672623] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[672624] "maybe param" "temp"
        unknown call_tmp[788184] "expr temp" "maybe param" "maybe type" "temp"
        (788187 'move' call_tmp[788184](111075 call > stride2[111054] 0))
        (672629 'move' tmp[672624](672627 call _cond_test call_tmp[788184]))
        if tmp[672624]
        {
          (672634 'move' tmp[672623](672631 '_paramFoldLogical' tmp[672624] positive[107131]))
        }
        {
          (672639 'move' tmp[672623](672636 '_paramFoldLogical' tmp[672624] negative[107133]))
        }
        (672662 'move' tmp[672646](672659 '_paramFoldLogical' tmp[672647] tmp[672623]))
      }
      (672685 'move' tmp[672669](672682 '_paramFoldLogical' tmp[672670] tmp[672646]))
    }
    (645261 'init var' s2[111062] tmp[672669])
    (111091 'end of statement')
    unknown call_tmp[788191] "expr temp" "maybe param" "maybe type" "temp"
    (788194 'move' call_tmp[788191](111096 call strides _mt[203] r1[111050]))
    unknown call_tmp[788196] "expr temp" "maybe param" "maybe type" "temp"
    (788199 'move' call_tmp[788196](111094 call chpl_strideProduct call_tmp[788191] s2[111062]))
    (603552 'move' ret[603547](603551 'deref' call_tmp[788196]))
    (603549 return ret[603547])
    (396127 'used modules list'(111059 'use' strideKind[107137]))
  }
  function chpl_strideUnion[111102](param arg s1[111105]:strideKind[107137], param arg s2[111109]:strideKind[107137]) param : _unknown[42]
  {
    unknown ret[603556] "RVV" "param" "temp"
    {
      unknown tmp[111467] "expr temp" "maybe param" "maybe type" "temp"
      (111469 'move' tmp[111467] s1[111105])
      unknown call_tmp[788201] "expr temp" "maybe param" "maybe type" "temp"
      (788204 'move' call_tmp[788201](111471 call == tmp[111467] one[107127]))
      unknown call_tmp[788206] "expr temp" "maybe param" "maybe type" "temp"
      (788209 'move' call_tmp[788206](111474 call _cond_test call_tmp[788201]))
      if call_tmp[788206]
      {
        unknown tmp[111164] "expr temp" "maybe param" "maybe type" "temp"
        (111166 'move' tmp[111164] s2[111109])
        unknown call_tmp[788211] "expr temp" "maybe param" "maybe type" "temp"
        (788214 'move' call_tmp[788211](111168 call == tmp[111164] one[107127]))
        unknown call_tmp[788216] "expr temp" "maybe param" "maybe type" "temp"
        (788219 'move' call_tmp[788216](111171 call _cond_test call_tmp[788211]))
        if call_tmp[788216]
        {
          (603561 'move' ret[603556](603560 'deref' one[107127]))
          gotoReturn _end_chpl_strideUnion[603554] _end_chpl_strideUnion[603554]
        }
        {
          unknown call_tmp[788221] "expr temp" "maybe param" "maybe type" "temp"
          (788224 'move' call_tmp[788221](111174 call == tmp[111164] positive[107131]))
          unknown call_tmp[788226] "expr temp" "maybe param" "maybe type" "temp"
          (788229 'move' call_tmp[788226](111177 call _cond_test call_tmp[788221]))
          if call_tmp[788226]
          {
            (603566 'move' ret[603556](603565 'deref' positive[107131]))
            gotoReturn _end_chpl_strideUnion[603554] _end_chpl_strideUnion[603554]
          }
          {
            unknown call_tmp[788231] "expr temp" "maybe param" "maybe type" "temp"
            (788234 'move' call_tmp[788231](111181 call == tmp[111164] negOne[107129]))
            unknown call_tmp[788236] "expr temp" "maybe param" "maybe type" "temp"
            (788239 'move' call_tmp[788236](111184 call _cond_test call_tmp[788231]))
            if call_tmp[788236]
            {
              (603571 'move' ret[603556](603570 'deref' any[107135]))
              gotoReturn _end_chpl_strideUnion[603554] _end_chpl_strideUnion[603554]
            }
            {
              unknown call_tmp[788241] "expr temp" "maybe param" "maybe type" "temp"
              (788244 'move' call_tmp[788241](111188 call == tmp[111164] negative[107133]))
              unknown call_tmp[788246] "expr temp" "maybe param" "maybe type" "temp"
              (788249 'move' call_tmp[788246](111191 call _cond_test call_tmp[788241]))
              if call_tmp[788246]
              {
                (603576 'move' ret[603556](603575 'deref' any[107135]))
                gotoReturn _end_chpl_strideUnion[603554] _end_chpl_strideUnion[603554]
              }
              {
                unknown call_tmp[788251] "expr temp" "maybe param" "maybe type" "temp"
                (788254 'move' call_tmp[788251](111195 call == tmp[111164] any[107135]))
                unknown call_tmp[788256] "expr temp" "maybe param" "maybe type" "temp"
                (788259 'move' call_tmp[788256](111198 call _cond_test call_tmp[788251]))
                if call_tmp[788256]
                {
                  (603581 'move' ret[603556](603580 'deref' any[107135]))
                  gotoReturn _end_chpl_strideUnion[603554] _end_chpl_strideUnion[603554]
                }
              }
            }
          }
        }
      }
      {
        unknown call_tmp[788261] "expr temp" "maybe param" "maybe type" "temp"
        (788264 'move' call_tmp[788261](111477 call == tmp[111467] negOne[107129]))
        unknown call_tmp[788266] "expr temp" "maybe param" "maybe type" "temp"
        (788269 'move' call_tmp[788266](111480 call _cond_test call_tmp[788261]))
        if call_tmp[788266]
        {
          unknown tmp[111249] "expr temp" "maybe param" "maybe type" "temp"
          (111251 'move' tmp[111249] s2[111109])
          unknown call_tmp[788271] "expr temp" "maybe param" "maybe type" "temp"
          (788274 'move' call_tmp[788271](111253 call == tmp[111249] one[107127]))
          unknown call_tmp[788276] "expr temp" "maybe param" "maybe type" "temp"
          (788279 'move' call_tmp[788276](111256 call _cond_test call_tmp[788271]))
          if call_tmp[788276]
          {
            (603586 'move' ret[603556](603585 'deref' any[107135]))
            gotoReturn _end_chpl_strideUnion[603554] _end_chpl_strideUnion[603554]
          }
          {
            unknown call_tmp[788281] "expr temp" "maybe param" "maybe type" "temp"
            (788284 'move' call_tmp[788281](111259 call == tmp[111249] positive[107131]))
            unknown call_tmp[788286] "expr temp" "maybe param" "maybe type" "temp"
            (788289 'move' call_tmp[788286](111262 call _cond_test call_tmp[788281]))
            if call_tmp[788286]
            {
              (603591 'move' ret[603556](603590 'deref' any[107135]))
              gotoReturn _end_chpl_strideUnion[603554] _end_chpl_strideUnion[603554]
            }
            {
              unknown call_tmp[788291] "expr temp" "maybe param" "maybe type" "temp"
              (788294 'move' call_tmp[788291](111266 call == tmp[111249] negOne[107129]))
              unknown call_tmp[788296] "expr temp" "maybe param" "maybe type" "temp"
              (788299 'move' call_tmp[788296](111269 call _cond_test call_tmp[788291]))
              if call_tmp[788296]
              {
                (603596 'move' ret[603556](603595 'deref' negOne[107129]))
                gotoReturn _end_chpl_strideUnion[603554] _end_chpl_strideUnion[603554]
              }
              {
                unknown call_tmp[788301] "expr temp" "maybe param" "maybe type" "temp"
                (788304 'move' call_tmp[788301](111273 call == tmp[111249] negative[107133]))
                unknown call_tmp[788306] "expr temp" "maybe param" "maybe type" "temp"
                (788309 'move' call_tmp[788306](111276 call _cond_test call_tmp[788301]))
                if call_tmp[788306]
                {
                  (603601 'move' ret[603556](603600 'deref' negative[107133]))
                  gotoReturn _end_chpl_strideUnion[603554] _end_chpl_strideUnion[603554]
                }
                {
                  unknown call_tmp[788311] "expr temp" "maybe param" "maybe type" "temp"
                  (788314 'move' call_tmp[788311](111280 call == tmp[111249] any[107135]))
                  unknown call_tmp[788316] "expr temp" "maybe param" "maybe type" "temp"
                  (788319 'move' call_tmp[788316](111283 call _cond_test call_tmp[788311]))
                  if call_tmp[788316]
                  {
                    (603606 'move' ret[603556](603605 'deref' any[107135]))
                    gotoReturn _end_chpl_strideUnion[603554] _end_chpl_strideUnion[603554]
                  }
                }
              }
            }
          }
        }
        {
          unknown call_tmp[788321] "expr temp" "maybe param" "maybe type" "temp"
          (788324 'move' call_tmp[788321](111484 call == tmp[111467] positive[107131]))
          unknown call_tmp[788326] "expr temp" "maybe param" "maybe type" "temp"
          (788329 'move' call_tmp[788326](111487 call _cond_test call_tmp[788321]))
          if call_tmp[788326]
          {
            unknown tmp[111334] "expr temp" "maybe param" "maybe type" "temp"
            (111336 'move' tmp[111334] s2[111109])
            unknown call_tmp[788331] "expr temp" "maybe param" "maybe type" "temp"
            (788334 'move' call_tmp[788331](111338 call == tmp[111334] one[107127]))
            unknown call_tmp[788336] "expr temp" "maybe param" "maybe type" "temp"
            (788339 'move' call_tmp[788336](111341 call _cond_test call_tmp[788331]))
            if call_tmp[788336]
            {
              (603611 'move' ret[603556](603610 'deref' positive[107131]))
              gotoReturn _end_chpl_strideUnion[603554] _end_chpl_strideUnion[603554]
            }
            {
              unknown call_tmp[788341] "expr temp" "maybe param" "maybe type" "temp"
              (788344 'move' call_tmp[788341](111344 call == tmp[111334] positive[107131]))
              unknown call_tmp[788346] "expr temp" "maybe param" "maybe type" "temp"
              (788349 'move' call_tmp[788346](111347 call _cond_test call_tmp[788341]))
              if call_tmp[788346]
              {
                (603616 'move' ret[603556](603615 'deref' positive[107131]))
                gotoReturn _end_chpl_strideUnion[603554] _end_chpl_strideUnion[603554]
              }
              {
                unknown call_tmp[788351] "expr temp" "maybe param" "maybe type" "temp"
                (788354 'move' call_tmp[788351](111351 call == tmp[111334] negOne[107129]))
                unknown call_tmp[788356] "expr temp" "maybe param" "maybe type" "temp"
                (788359 'move' call_tmp[788356](111354 call _cond_test call_tmp[788351]))
                if call_tmp[788356]
                {
                  (603621 'move' ret[603556](603620 'deref' any[107135]))
                  gotoReturn _end_chpl_strideUnion[603554] _end_chpl_strideUnion[603554]
                }
                {
                  unknown call_tmp[788361] "expr temp" "maybe param" "maybe type" "temp"
                  (788364 'move' call_tmp[788361](111358 call == tmp[111334] negative[107133]))
                  unknown call_tmp[788366] "expr temp" "maybe param" "maybe type" "temp"
                  (788369 'move' call_tmp[788366](111361 call _cond_test call_tmp[788361]))
                  if call_tmp[788366]
                  {
                    (603626 'move' ret[603556](603625 'deref' any[107135]))
                    gotoReturn _end_chpl_strideUnion[603554] _end_chpl_strideUnion[603554]
                  }
                  {
                    unknown call_tmp[788371] "expr temp" "maybe param" "maybe type" "temp"
                    (788374 'move' call_tmp[788371](111365 call == tmp[111334] any[107135]))
                    unknown call_tmp[788376] "expr temp" "maybe param" "maybe type" "temp"
                    (788379 'move' call_tmp[788376](111368 call _cond_test call_tmp[788371]))
                    if call_tmp[788376]
                    {
                      (603631 'move' ret[603556](603630 'deref' any[107135]))
                      gotoReturn _end_chpl_strideUnion[603554] _end_chpl_strideUnion[603554]
                    }
                  }
                }
              }
            }
          }
          {
            unknown call_tmp[788381] "expr temp" "maybe param" "maybe type" "temp"
            (788384 'move' call_tmp[788381](111491 call == tmp[111467] negative[107133]))
            unknown call_tmp[788386] "expr temp" "maybe param" "maybe type" "temp"
            (788389 'move' call_tmp[788386](111494 call _cond_test call_tmp[788381]))
            if call_tmp[788386]
            {
              unknown tmp[111419] "expr temp" "maybe param" "maybe type" "temp"
              (111421 'move' tmp[111419] s2[111109])
              unknown call_tmp[788391] "expr temp" "maybe param" "maybe type" "temp"
              (788394 'move' call_tmp[788391](111423 call == tmp[111419] one[107127]))
              unknown call_tmp[788396] "expr temp" "maybe param" "maybe type" "temp"
              (788399 'move' call_tmp[788396](111426 call _cond_test call_tmp[788391]))
              if call_tmp[788396]
              {
                (603636 'move' ret[603556](603635 'deref' any[107135]))
                gotoReturn _end_chpl_strideUnion[603554] _end_chpl_strideUnion[603554]
              }
              {
                unknown call_tmp[788401] "expr temp" "maybe param" "maybe type" "temp"
                (788404 'move' call_tmp[788401](111429 call == tmp[111419] positive[107131]))
                unknown call_tmp[788406] "expr temp" "maybe param" "maybe type" "temp"
                (788409 'move' call_tmp[788406](111432 call _cond_test call_tmp[788401]))
                if call_tmp[788406]
                {
                  (603641 'move' ret[603556](603640 'deref' any[107135]))
                  gotoReturn _end_chpl_strideUnion[603554] _end_chpl_strideUnion[603554]
                }
                {
                  unknown call_tmp[788411] "expr temp" "maybe param" "maybe type" "temp"
                  (788414 'move' call_tmp[788411](111436 call == tmp[111419] negOne[107129]))
                  unknown call_tmp[788416] "expr temp" "maybe param" "maybe type" "temp"
                  (788419 'move' call_tmp[788416](111439 call _cond_test call_tmp[788411]))
                  if call_tmp[788416]
                  {
                    (603646 'move' ret[603556](603645 'deref' negative[107133]))
                    gotoReturn _end_chpl_strideUnion[603554] _end_chpl_strideUnion[603554]
                  }
                  {
                    unknown call_tmp[788421] "expr temp" "maybe param" "maybe type" "temp"
                    (788424 'move' call_tmp[788421](111443 call == tmp[111419] negative[107133]))
                    unknown call_tmp[788426] "expr temp" "maybe param" "maybe type" "temp"
                    (788429 'move' call_tmp[788426](111446 call _cond_test call_tmp[788421]))
                    if call_tmp[788426]
                    {
                      (603651 'move' ret[603556](603650 'deref' negative[107133]))
                      gotoReturn _end_chpl_strideUnion[603554] _end_chpl_strideUnion[603554]
                    }
                    {
                      unknown call_tmp[788431] "expr temp" "maybe param" "maybe type" "temp"
                      (788434 'move' call_tmp[788431](111450 call == tmp[111419] any[107135]))
                      unknown call_tmp[788436] "expr temp" "maybe param" "maybe type" "temp"
                      (788439 'move' call_tmp[788436](111453 call _cond_test call_tmp[788431]))
                      if call_tmp[788436]
                      {
                        (603656 'move' ret[603556](603655 'deref' any[107135]))
                        gotoReturn _end_chpl_strideUnion[603554] _end_chpl_strideUnion[603554]
                      }
                    }
                  }
                }
              }
            }
            {
              unknown call_tmp[788441] "expr temp" "maybe param" "maybe type" "temp"
              (788444 'move' call_tmp[788441](111498 call == tmp[111467] any[107135]))
              unknown call_tmp[788446] "expr temp" "maybe param" "maybe type" "temp"
              (788449 'move' call_tmp[788446](111501 call _cond_test call_tmp[788441]))
              if call_tmp[788446]
              {
                (603661 'move' ret[603556](603660 'deref' any[107135]))
                gotoReturn _end_chpl_strideUnion[603554] _end_chpl_strideUnion[603554]
              }
            }
          }
        }
      }
    }
    label _end_chpl_strideUnion[603554]
    (603558 return ret[603556])
    (396129 'used modules list'(111114 'use' strideKind[107137]))
  }
  function chpl_strideUnion[111507](arg args[111510]:_tuple[246](?)) param : _unknown[42]
  {
    unknown ret[603667] "RVV" "param" "temp"
    unknown call_tmp[788451] "expr temp" "maybe param" "maybe type" "temp"
    (788454 'move' call_tmp[788451](111516 call chpl_strideUnion(111518 'expand_tuple' args[111510])))
    (603672 'move' ret[603667](603671 'deref' call_tmp[788451]))
    (603669 return ret[603667])
  }
  function chpl_strideUnion[111521](arg arg[111523]:_any[141](?), arg args[111526]:_any[141](?) ...) param : _unknown[42]
  {
    unknown ret[603676] "RVV" "param" "temp"
    unknown call_tmp[788456] "expr temp" "maybe param" "maybe type" "temp"
    (788459 'move' call_tmp[788456](111534 call chpl_strideUnion arg[111523]))
    unknown call_tmp[788461] "expr temp" "maybe param" "maybe type" "temp"
    (788464 'move' call_tmp[788461](111537 call chpl_strideUnion(111539 'expand_tuple' args[111526])))
    unknown call_tmp[788466] "expr temp" "maybe param" "maybe type" "temp"
    (788469 'move' call_tmp[788466](111532 call chpl_strideUnion call_tmp[788456] call_tmp[788461]))
    (603681 'move' ret[603676](603680 'deref' call_tmp[788466]))
    (603678 return ret[603676])
  }
  function chpl_strideUnion[111542](arg arg[111544]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[603685] "RVV" "param" "temp"
    unknown call_tmp[788473] "expr temp" "maybe param" "maybe type" "temp"
    (788476 'move' call_tmp[788473](111550 call strides _mt[203] arg[111544]))
    (603691 'move' ret[603685](603690 'coerce' call_tmp[788473] strideKind[107137]))
    (603687 return ret[603685])
  }
  { scopeless type
    strideKind[107137]
  }
  function chpl_strideUnionRC[111556](arg args[111559]:_tuple[246](?)) param : _unknown[42]
  {
    unknown ret[603695] "RVV" "param" "temp"
    unknown call_tmp[788478] "expr temp" "maybe param" "maybe type" "temp"
    (788481 'move' call_tmp[788478](111565 call chpl_strideUnionRC(111567 'expand_tuple' args[111559])))
    (603700 'move' ret[603695](603699 'deref' call_tmp[788478]))
    (603697 return ret[603695])
  }
  function chpl_strideUnionRC[111570](arg arg[111572]:_any[141](?), arg args[111575]:_any[141](?) ...) param : _unknown[42]
  {
    unknown ret[603704] "RVV" "param" "temp"
    unknown call_tmp[788483] "expr temp" "maybe param" "maybe type" "temp"
    (788486 'move' call_tmp[788483](111583 call chpl_strideUnionRC arg[111572]))
    unknown call_tmp[788488] "expr temp" "maybe param" "maybe type" "temp"
    (788491 'move' call_tmp[788488](111586 call chpl_strideUnionRC(111588 'expand_tuple' args[111575])))
    unknown call_tmp[788493] "expr temp" "maybe param" "maybe type" "temp"
    (788496 'move' call_tmp[788493](111581 call chpl_strideUnion call_tmp[788483] call_tmp[788488]))
    (603709 'move' ret[603704](603708 'deref' call_tmp[788493]))
    (603706 return ret[603704])
  }
  function chpl_strideUnionRC[111591](arg arg[111593]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[603713] "RVV" "param" "temp"
    unknown tmp[672692] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[672693] "maybe param" "temp"
    unknown call_tmp[788498] "expr temp" "maybe param" "maybe type" "temp"
    (788501 'move' call_tmp[788498](111598 call isRange arg[111593]))
    (672698 'move' tmp[672693](672696 call _cond_test call_tmp[788498]))
    if tmp[672693]
    {
      unknown tmp[672700] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (672702 'move' tmp[672700](111601 call strides _mt[203] arg[111593]))
      (672707 'move' tmp[672692](672704 '_paramFoldLogical' tmp[672693] tmp[672700]))
    }
    {
      (672712 'move' tmp[672692](672709 '_paramFoldLogical' tmp[672693] one[107127]))
    }
    (603718 'move' ret[603713](603717 'deref' tmp[672692]))
    (603715 return ret[603713])
  }
  function chpl_assignStrideIsSafe[111613](param arg lhs[111616]:strideKind[107137], param arg rhs[111620]:strideKind[107137]) param : _unknown[42]
  {
    unknown ret[603722] "RVV" "param" "temp"
    {
      unknown tmp[111700] "expr temp" "maybe param" "maybe type" "temp"
      (111702 'move' tmp[111700] lhs[111616])
      unknown call_tmp[788505] "expr temp" "maybe param" "maybe type" "temp"
      (788508 'move' call_tmp[788505](111704 call == tmp[111700] one[107127]))
      unknown call_tmp[788510] "expr temp" "maybe param" "maybe type" "temp"
      (788513 'move' call_tmp[788510](111707 call _cond_test call_tmp[788505]))
      if call_tmp[788510]
      {
        unknown call_tmp[788517] "expr temp" "maybe param" "maybe type" "temp"
        (788520 'move' call_tmp[788517](111637 call(111634 call (partial) isOne _mt[203] rhs[111620])))
        (603727 'move' ret[603722](603726 'deref' call_tmp[788517]))
        gotoReturn _end_chpl_assignStrideIsSafe[603720] _end_chpl_assignStrideIsSafe[603720]
      }
      {
        unknown call_tmp[788522] "expr temp" "maybe param" "maybe type" "temp"
        (788525 'move' call_tmp[788522](111710 call == tmp[111700] positive[107131]))
        unknown call_tmp[788527] "expr temp" "maybe param" "maybe type" "temp"
        (788530 'move' call_tmp[788527](111713 call _cond_test call_tmp[788522]))
        if call_tmp[788527]
        {
          unknown call_tmp[788534] "expr temp" "maybe param" "maybe type" "temp"
          (788537 'move' call_tmp[788534](111652 call(111649 call (partial) isPositive _mt[203] rhs[111620])))
          (603732 'move' ret[603722](603731 'deref' call_tmp[788534]))
          gotoReturn _end_chpl_assignStrideIsSafe[603720] _end_chpl_assignStrideIsSafe[603720]
        }
        {
          unknown call_tmp[788539] "expr temp" "maybe param" "maybe type" "temp"
          (788542 'move' call_tmp[788539](111717 call == tmp[111700] negOne[107129]))
          unknown call_tmp[788544] "expr temp" "maybe param" "maybe type" "temp"
          (788547 'move' call_tmp[788544](111720 call _cond_test call_tmp[788539]))
          if call_tmp[788544]
          {
            unknown call_tmp[788551] "expr temp" "maybe param" "maybe type" "temp"
            (788554 'move' call_tmp[788551](111669 call(111666 call (partial) isNegOne _mt[203] rhs[111620])))
            (603737 'move' ret[603722](603736 'deref' call_tmp[788551]))
            gotoReturn _end_chpl_assignStrideIsSafe[603720] _end_chpl_assignStrideIsSafe[603720]
          }
          {
            unknown call_tmp[788556] "expr temp" "maybe param" "maybe type" "temp"
            (788559 'move' call_tmp[788556](111724 call == tmp[111700] negative[107133]))
            unknown call_tmp[788561] "expr temp" "maybe param" "maybe type" "temp"
            (788564 'move' call_tmp[788561](111727 call _cond_test call_tmp[788556]))
            if call_tmp[788561]
            {
              unknown call_tmp[788568] "expr temp" "maybe param" "maybe type" "temp"
              (788571 'move' call_tmp[788568](111684 call(111681 call (partial) isNegative _mt[203] rhs[111620])))
              (603742 'move' ret[603722](603741 'deref' call_tmp[788568]))
              gotoReturn _end_chpl_assignStrideIsSafe[603720] _end_chpl_assignStrideIsSafe[603720]
            }
            {
              unknown call_tmp[788573] "expr temp" "maybe param" "maybe type" "temp"
              (788576 'move' call_tmp[788573](111731 call == tmp[111700] any[107135]))
              unknown call_tmp[788578] "expr temp" "maybe param" "maybe type" "temp"
              (788581 'move' call_tmp[788578](111734 call _cond_test call_tmp[788573]))
              if call_tmp[788578]
              {
                (603747 'move' ret[603722](603746 'deref' 1))
                gotoReturn _end_chpl_assignStrideIsSafe[603720] _end_chpl_assignStrideIsSafe[603720]
              }
            }
          }
        }
      }
    }
    label _end_chpl_assignStrideIsSafe[603720]
    (603724 return ret[603722])
  }
  function chpl_assignStrideIsSafe[111740](arg lhs[111745]:range[240](?), arg rhs[111751]:range[240](?)) param : _unknown[42]
  {
    unknown ret[603753] "RVV" "param" "temp"
    unknown call_tmp[788585] "expr temp" "maybe param" "maybe type" "temp"
    (788588 'move' call_tmp[788585](111759 call strides _mt[203] lhs[111745]))
    unknown call_tmp[788592] "expr temp" "maybe param" "maybe type" "temp"
    (788595 'move' call_tmp[788592](111763 call strides _mt[203] rhs[111751]))
    unknown call_tmp[788597] "expr temp" "maybe param" "maybe type" "temp"
    (788600 'move' call_tmp[788597](111757 call chpl_assignStrideIsSafe call_tmp[788585] call_tmp[788592]))
    (603758 'move' ret[603753](603757 'deref' call_tmp[788597]))
    (603755 return ret[603753])
  }
  function chpl_assignStrideIsSafe[111768](param arg lhs[111771]:strideKind[107137], param arg rhs[111775]:strideKind[107137], arg rhsStride[111778]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[603762] "RVV" "param" "temp"
    (603767 'move' ret[603762](603766 'deref' 1))
    (603764 return ret[603762])
  }
  where {
    unknown tmp[483801] "maybe param" "temp"
    (483812 'move' tmp[483801](111783 call chpl_assignStrideIsSafe lhs[111771] rhs[111775]))
    unknown call_tmp[788602] "expr temp" "maybe param" "maybe type" "temp"
    (788605 'move' call_tmp[788602](483814 call _cond_invalid tmp[483801]))
    if call_tmp[788602]
    {
      (483817 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[672746] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[672747] "maybe param" "temp"
    unknown call_tmp[788607] "expr temp" "maybe param" "maybe type" "temp"
    (788610 'move' call_tmp[788607](483802 call isTrue tmp[483801]))
    (672752 'move' tmp[672747](672750 call _cond_test call_tmp[788607]))
    if tmp[672747]
    {
      (672757 'move' tmp[672746](672754 '_paramFoldLogical' tmp[672747] 1))
    }
    {
      unknown tmp[483822] "maybe param" "temp"
      (483833 'move' tmp[483822](111788 call == lhs[111771] positive[107131]))
      unknown call_tmp[788612] "expr temp" "maybe param" "maybe type" "temp"
      (788615 'move' call_tmp[788612](483835 call _cond_invalid tmp[483822]))
      if call_tmp[788612]
      {
        (483838 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[672719] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[672720] "maybe param" "temp"
      unknown call_tmp[788617] "expr temp" "maybe param" "maybe type" "temp"
      (788620 'move' call_tmp[788617](483823 call isTrue tmp[483822]))
      (672725 'move' tmp[672720](672723 call _cond_test call_tmp[788617]))
      if tmp[672720]
      {
        unknown tmp[672727] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[788622] "expr temp" "maybe param" "maybe type" "temp"
        (788625 'move' call_tmp[788622](111796 call isUint rhsStride[111778]))
        (672729 'move' tmp[672727](483826 call isTrue call_tmp[788622]))
        (672734 'move' tmp[672719](672731 '_paramFoldLogical' tmp[672720] tmp[672727]))
      }
      {
        (672739 'move' tmp[672719](672736 '_paramFoldLogical' tmp[672720] 0))
      }
      unknown tmp[672759] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (672761 'move' tmp[672759](483806 call isTrue tmp[672719]))
      (672766 'move' tmp[672746](672763 '_paramFoldLogical' tmp[672747] tmp[672759]))
    }
    (1001388 call chpl_statementLevelSymbol tmp[672746])
  }
  function chpl_assignStrideIsSafe[111804](param arg lhs[111807]:strideKind[107137], param arg rhs[111811]:strideKind[107137], arg rhsStride[111814]:_any[141](?)) : _unknown[42]
  {
    unknown ret[603771] "RVV" "temp"
    {
      unknown tmp[111892] "expr temp" "maybe param" "maybe type" "temp"
      (111894 'move' tmp[111892] lhs[111807])
      unknown call_tmp[788627] "expr temp" "maybe param" "maybe type" "temp"
      (788630 'move' call_tmp[788627](111896 call == tmp[111892] one[107127]))
      unknown call_tmp[788632] "expr temp" "maybe param" "maybe type" "temp"
      (788635 'move' call_tmp[788632](111899 call _cond_test call_tmp[788627]))
      if call_tmp[788632]
      {
        unknown call_tmp[788637] "expr temp" "maybe param" "maybe type" "temp"
        (788640 'move' call_tmp[788637](111826 call == rhsStride[111814] 1))
        (603776 'move' ret[603771](603775 'deref' call_tmp[788637]))
        gotoReturn _end_chpl_assignStrideIsSafe[603769] _end_chpl_assignStrideIsSafe[603769]
      }
      {
        unknown call_tmp[788642] "expr temp" "maybe param" "maybe type" "temp"
        (788645 'move' call_tmp[788642](111902 call == tmp[111892] positive[107131]))
        unknown call_tmp[788647] "expr temp" "maybe param" "maybe type" "temp"
        (788650 'move' call_tmp[788647](111905 call _cond_test call_tmp[788642]))
        if call_tmp[788647]
        {
          unknown call_tmp[788652] "expr temp" "maybe param" "maybe type" "temp"
          (788655 'move' call_tmp[788652](111840 call > rhsStride[111814] 0))
          (603781 'move' ret[603771](603780 'deref' call_tmp[788652]))
          gotoReturn _end_chpl_assignStrideIsSafe[603769] _end_chpl_assignStrideIsSafe[603769]
        }
        {
          unknown call_tmp[788657] "expr temp" "maybe param" "maybe type" "temp"
          (788660 'move' call_tmp[788657](111909 call == tmp[111892] negOne[107129]))
          unknown call_tmp[788662] "expr temp" "maybe param" "maybe type" "temp"
          (788665 'move' call_tmp[788662](111912 call _cond_test call_tmp[788657]))
          if call_tmp[788662]
          {
            unknown call_tmp[788667] "expr temp" "maybe param" "maybe type" "temp"
            (788670 'move' call_tmp[788667](111857 call - 1))
            unknown call_tmp[788672] "expr temp" "maybe param" "maybe type" "temp"
            (788675 'move' call_tmp[788672](111854 call == rhsStride[111814] call_tmp[788667]))
            (603786 'move' ret[603771](603785 'deref' call_tmp[788672]))
            gotoReturn _end_chpl_assignStrideIsSafe[603769] _end_chpl_assignStrideIsSafe[603769]
          }
          {
            unknown call_tmp[788677] "expr temp" "maybe param" "maybe type" "temp"
            (788680 'move' call_tmp[788677](111916 call == tmp[111892] negative[107133]))
            unknown call_tmp[788682] "expr temp" "maybe param" "maybe type" "temp"
            (788685 'move' call_tmp[788682](111919 call _cond_test call_tmp[788677]))
            if call_tmp[788682]
            {
              unknown call_tmp[788687] "expr temp" "maybe param" "maybe type" "temp"
              (788690 'move' call_tmp[788687](111870 call < rhsStride[111814] 0))
              (603791 'move' ret[603771](603790 'deref' call_tmp[788687]))
              gotoReturn _end_chpl_assignStrideIsSafe[603769] _end_chpl_assignStrideIsSafe[603769]
            }
            {
              unknown call_tmp[788692] "expr temp" "maybe param" "maybe type" "temp"
              (788695 'move' call_tmp[788692](111923 call == tmp[111892] any[107135]))
              unknown call_tmp[788697] "expr temp" "maybe param" "maybe type" "temp"
              (788700 'move' call_tmp[788697](111926 call _cond_test call_tmp[788692]))
              if call_tmp[788697]
              {
                (111884 call compilerError "internal error")
              }
            }
          }
        }
      }
    }
    label _end_chpl_assignStrideIsSafe[603769]
    (603773 return ret[603771])
  }
  function chpl_assignStrideIsUnsafe[111932](param arg lhs[111935]:strideKind[107137], param arg rhs[111939]:strideKind[107137]) param : _unknown[42]
  {
    unknown ret[603797] "RVV" "param" "temp"
    unknown tmp[483843] "maybe param" "temp"
    unknown tmp[483864] "maybe param" "temp"
    (483875 'move' tmp[483864](111952 call(111949 call (partial) isPositive _mt[203] lhs[111935])))
    unknown call_tmp[788704] "expr temp" "maybe param" "maybe type" "temp"
    (788707 'move' call_tmp[788704](483877 call _cond_invalid tmp[483864]))
    if call_tmp[788704]
    {
      (483880 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[672773] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[672774] "maybe param" "temp"
    unknown call_tmp[788709] "expr temp" "maybe param" "maybe type" "temp"
    (788712 'move' call_tmp[788709](483865 call isTrue tmp[483864]))
    (672779 'move' tmp[672774](672777 call _cond_test call_tmp[788709]))
    if tmp[672774]
    {
      unknown tmp[672781] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[788716] "expr temp" "maybe param" "maybe type" "temp"
      (788719 'move' call_tmp[788716](111957 call(111954 call (partial) isNegative _mt[203] rhs[111939])))
      (672783 'move' tmp[672781](483868 call isTrue call_tmp[788716]))
      (672788 'move' tmp[672773](672785 '_paramFoldLogical' tmp[672774] tmp[672781]))
    }
    {
      (672793 'move' tmp[672773](672790 '_paramFoldLogical' tmp[672774] 0))
    }
    (483854 'move' tmp[483843] tmp[672773])
    unknown call_tmp[788721] "expr temp" "maybe param" "maybe type" "temp"
    (788724 'move' call_tmp[788721](483856 call _cond_invalid tmp[483843]))
    if call_tmp[788721]
    {
      (483859 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[672827] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[672828] "maybe param" "temp"
    unknown call_tmp[788726] "expr temp" "maybe param" "maybe type" "temp"
    (788729 'move' call_tmp[788726](483844 call isTrue tmp[483843]))
    (672833 'move' tmp[672828](672831 call _cond_test call_tmp[788726]))
    if tmp[672828]
    {
      (672838 'move' tmp[672827](672835 '_paramFoldLogical' tmp[672828] 1))
    }
    {
      unknown tmp[483885] "maybe param" "temp"
      (483896 'move' tmp[483885](111964 call(111961 call (partial) isNegative _mt[203] lhs[111935])))
      unknown call_tmp[788733] "expr temp" "maybe param" "maybe type" "temp"
      (788736 'move' call_tmp[788733](483898 call _cond_invalid tmp[483885]))
      if call_tmp[788733]
      {
        (483901 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[672800] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[672801] "maybe param" "temp"
      unknown call_tmp[788738] "expr temp" "maybe param" "maybe type" "temp"
      (788741 'move' call_tmp[788738](483886 call isTrue tmp[483885]))
      (672806 'move' tmp[672801](672804 call _cond_test call_tmp[788738]))
      if tmp[672801]
      {
        unknown tmp[672808] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[788745] "expr temp" "maybe param" "maybe type" "temp"
        (788748 'move' call_tmp[788745](111969 call(111966 call (partial) isPositive _mt[203] rhs[111939])))
        (672810 'move' tmp[672808](483889 call isTrue call_tmp[788745]))
        (672815 'move' tmp[672800](672812 '_paramFoldLogical' tmp[672801] tmp[672808]))
      }
      {
        (672820 'move' tmp[672800](672817 '_paramFoldLogical' tmp[672801] 0))
      }
      unknown tmp[672840] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (672842 'move' tmp[672840](483848 call isTrue tmp[672800]))
      (672847 'move' tmp[672827](672844 '_paramFoldLogical' tmp[672828] tmp[672840]))
    }
    (603802 'move' ret[603797](603801 'deref' tmp[672827]))
    (603799 return ret[603797])
  }
  function assignmentIsLegal[111972](arg to[111974]:_any[141](?), arg from[111976]:_any[141](?)) param : _unknown[42] "private"
  {
    unknown ret[603806] "RVV" "param" "temp"
    unknown call_tmp[788750] "expr temp" "maybe param" "maybe type" "temp"
    (788753 'move' call_tmp[788750](111982 call == to[111974] from[111976]))
    unknown call_tmp[788755] "expr temp" "maybe param" "maybe type" "temp"
    (788758 'move' call_tmp[788755](111986 call _cond_test call_tmp[788750]))
    if call_tmp[788755]
    {
      (603811 'move' ret[603806](603810 'deref' 1))
      gotoReturn _end_assignmentIsLegal[603804] _end_assignmentIsLegal[603804]
    }
    unknown toVar[111997] "dead at end of block" "insert auto destroy"
    (645263 'default init var' toVar[111997] to[111974])
    unknown fromVar[111993] "dead at end of block" "insert auto destroy"
    (645265 'default init var' fromVar[111993] from[111976])
    (112000 'end of statement')
    unknown call_tmp[788760] "expr temp" "maybe param" "maybe type" "temp"
    (788763 'move' call_tmp[788760](112003 call canResolve "=" toVar[111997] fromVar[111993]))
    (603816 'move' ret[603806](603815 'deref' call_tmp[788760]))
    gotoReturn _end_assignmentIsLegal[603804] _end_assignmentIsLegal[603804]
    (551875 'end of statement' toVar[111997] fromVar[111993])
    label _end_assignmentIsLegal[603804]
    (603808 return ret[603806])
  }
  function verifyAppropriateStride[112011](param arg strides[112013]:_any[141](?), arg stride[112015]:_any[141](?)) : _unknown[42] "private" "no return value for void"
  {
    unknown call_tmp[788767] "expr temp" "maybe param" "maybe type" "temp"
    (788770 'move' call_tmp[788767](112029 call(112026 call (partial) isPositive _mt[203] strides[112013])))
    unknown call_tmp[788772] "expr temp" "maybe param" "maybe type" "temp"
    (788775 'move' call_tmp[788772](112030 call _cond_test call_tmp[788767]))
    if call_tmp[788772]
    {
      unknown call_tmp[788777] "expr temp" "maybe param" "maybe type" "temp"
      (788780 'move' call_tmp[788777](112020 call > stride[112015] 0))
      (112019 call assert call_tmp[788777])
    }
    unknown call_tmp[788784] "expr temp" "maybe param" "maybe type" "temp"
    (788787 'move' call_tmp[788784](112046 call(112043 call (partial) isNegative _mt[203] strides[112013])))
    unknown call_tmp[788789] "expr temp" "maybe param" "maybe type" "temp"
    (788792 'move' call_tmp[788789](112047 call _cond_test call_tmp[788784]))
    if call_tmp[788789]
    {
      unknown call_tmp[788794] "expr temp" "maybe param" "maybe type" "temp"
      (788797 'move' call_tmp[788794](112037 call < stride[112015] 0))
      (112036 call assert call_tmp[788794])
    }
    (603820 return _void[46])
  }
  function range[240](?).chpl_setFields[112054](arg _mt[112066]:_MT[201], ref arg this[112057]:range[240](?) :
  range[240](?), arg low[112060]:_any[141](?), arg high[112062]:_any[141](?), arg stride[112064]:_any[141](?)) : _unknown[42] "inline" "method" "no return value for void"
  {
    unknown call_tmp[788801] "expr temp" "maybe param" "maybe type" "temp"
    (788804 'move' call_tmp[788801](112072 call _low _mt[203] this[112057]))
    unknown call_tmp[788806] "expr temp" "maybe param" "maybe type" "temp"
    (788809 'move' call_tmp[788806](112078 call chpl__idxToInt low[112060]))
    unknown call_tmp[788813] "expr temp" "maybe param" "maybe type" "temp"
    (788816 'move' call_tmp[788813](112081 call chpl_integralIdxType _mt[203] this[112057]))
    unknown call_tmp[788818] "expr temp" "maybe param" "maybe type" "temp"
    (788821 'move' call_tmp[788818](112075 call : call_tmp[788806] call_tmp[788813]))
    (112069 call = call_tmp[788801] call_tmp[788818])
    (551880 'end of statement')
    unknown call_tmp[788825] "expr temp" "maybe param" "maybe type" "temp"
    (788828 'move' call_tmp[788825](112087 call _high _mt[203] this[112057]))
    unknown call_tmp[788830] "expr temp" "maybe param" "maybe type" "temp"
    (788833 'move' call_tmp[788830](112093 call chpl__idxToInt high[112062]))
    unknown call_tmp[788837] "expr temp" "maybe param" "maybe type" "temp"
    (788840 'move' call_tmp[788837](112096 call chpl_integralIdxType _mt[203] this[112057]))
    unknown call_tmp[788842] "expr temp" "maybe param" "maybe type" "temp"
    (788845 'move' call_tmp[788842](112090 call : call_tmp[788830] call_tmp[788837]))
    (112084 call = call_tmp[788825] call_tmp[788842])
    (551881 'end of statement')
    unknown call_tmp[788849] "expr temp" "maybe param" "maybe type" "temp"
    (788852 'move' call_tmp[788849](112182 call(112179 call (partial) hasParamStrideAltvalAld _mt[203] this[112057])))
    unknown call_tmp[788854] "expr temp" "maybe param" "maybe type" "temp"
    (788857 'move' call_tmp[788854](112183 call _cond_test call_tmp[788849]))
    if call_tmp[788854]
    {
      unknown call_tmp[788859] "expr temp" "maybe param" "maybe type" "temp"
      (788862 'move' call_tmp[788859](112109 call _cond_test 1))
      if call_tmp[788859]
      {
        unknown call_tmp[788866] "expr temp" "maybe param" "maybe type" "temp"
        (788869 'move' call_tmp[788866](112103 call strides _mt[203] this[112057]))
        (112101 call verifyAppropriateStride call_tmp[788866] stride[112064])
      }
    }
    {
      unknown call_tmp[788873] "expr temp" "maybe param" "maybe type" "temp"
      (788876 'move' call_tmp[788873](112118 call _stride _mt[203] this[112057]))
      unknown call_tmp[788880] "expr temp" "maybe param" "maybe type" "temp"
      (788883 'move' call_tmp[788880](112127 call strType _mt[203] this[112057]))
      unknown call_tmp[788885] "expr temp" "maybe param" "maybe type" "temp"
      (788888 'move' call_tmp[788885](112121 call : stride[112064] call_tmp[788880]))
      (112115 call = call_tmp[788873] call_tmp[788885])
      (551883 'end of statement')
      const first[112131] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[672854] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[672855] "maybe param" "temp"
      unknown call_tmp[788892] "expr temp" "maybe param" "maybe type" "temp"
      (788895 'move' call_tmp[788892](112138 call(112135 call (partial) hasPositiveStride _mt[203] this[112057])))
      (672860 'move' tmp[672855](672858 call _cond_test call_tmp[788892]))
      if tmp[672855]
      {
        (672865 'move' tmp[672854](672862 '_paramFoldLogical' tmp[672855] low[112060]))
      }
      {
        (672870 'move' tmp[672854](672867 '_paramFoldLogical' tmp[672855] high[112062]))
      }
      (645267 'init var' first[112131] tmp[672854])
      (112145 'end of statement')
      unknown call_tmp[788899] "expr temp" "maybe param" "maybe type" "temp"
      (788902 'move' call_tmp[788899](112149 call _alignment _mt[203] this[112057]))
      unknown call_tmp[788904] "expr temp" "maybe param" "maybe type" "temp"
      (788907 'move' call_tmp[788904](112157 call chpl__idxToInt first[112131]))
      unknown call_tmp[788909] "expr temp" "maybe param" "maybe type" "temp"
      (788912 'move' call_tmp[788909](112155 call chpl__mod call_tmp[788904] stride[112064]))
      unknown call_tmp[788916] "expr temp" "maybe param" "maybe type" "temp"
      (788919 'move' call_tmp[788916](112161 call strType _mt[203] this[112057]))
      unknown call_tmp[788921] "expr temp" "maybe param" "maybe type" "temp"
      (788924 'move' call_tmp[788921](112152 call : call_tmp[788909] call_tmp[788916]))
      (112146 call = call_tmp[788899] call_tmp[788921])
      (551884 'end of statement' first[112131])
      unknown call_tmp[788926] "expr temp" "maybe param" "maybe type" "temp"
      (788929 'move' call_tmp[788926](112173 call _cond_test 1))
      if call_tmp[788926]
      {
        unknown call_tmp[788933] "expr temp" "maybe param" "maybe type" "temp"
        (788936 'move' call_tmp[788933](112170 call(112167 call (partial) isAligned _mt[203] this[112057])))
        (112165 call assert call_tmp[788933])
      }
    }
    (603822 return _void[46])
  }
  function range[240](?).chpl_setFields[112189](arg _mt[112199]:_MT[201], ref arg this[112192]:range[240](?) :
  range[240](?), arg low[112195]:_any[141](?), arg high[112197]:_any[141](?)) : _unknown[42] "inline" "method" "no return value for void"
  {
    unknown call_tmp[788940] "expr temp" "maybe param" "maybe type" "temp"
    (788943 'move' call_tmp[788940](112210 call(112207 call (partial) hasParamStride _mt[203] this[112192])))
    (112203 call compilerAssert call_tmp[788940])
    (551887 'end of statement')
    unknown call_tmp[788947] "expr temp" "maybe param" "maybe type" "temp"
    (788950 'move' call_tmp[788947](112214 call _low _mt[203] this[112192]))
    unknown call_tmp[788952] "expr temp" "maybe param" "maybe type" "temp"
    (788955 'move' call_tmp[788952](112220 call chpl__idxToInt low[112195]))
    unknown call_tmp[788959] "expr temp" "maybe param" "maybe type" "temp"
    (788962 'move' call_tmp[788959](112223 call chpl_integralIdxType _mt[203] this[112192]))
    unknown call_tmp[788964] "expr temp" "maybe param" "maybe type" "temp"
    (788967 'move' call_tmp[788964](112217 call : call_tmp[788952] call_tmp[788959]))
    (112211 call = call_tmp[788947] call_tmp[788964])
    (551888 'end of statement')
    unknown call_tmp[788971] "expr temp" "maybe param" "maybe type" "temp"
    (788974 'move' call_tmp[788971](112229 call _high _mt[203] this[112192]))
    unknown call_tmp[788976] "expr temp" "maybe param" "maybe type" "temp"
    (788979 'move' call_tmp[788976](112235 call chpl__idxToInt high[112197]))
    unknown call_tmp[788983] "expr temp" "maybe param" "maybe type" "temp"
    (788986 'move' call_tmp[788983](112238 call chpl_integralIdxType _mt[203] this[112192]))
    unknown call_tmp[788988] "expr temp" "maybe param" "maybe type" "temp"
    (788991 'move' call_tmp[788988](112232 call : call_tmp[788976] call_tmp[788983]))
    (112226 call = call_tmp[788971] call_tmp[788988])
    (603824 return _void[46])
  }
  function range[240](?).low[112243](arg _mt[112249]:_MT[201], arg this[112246]:range[240](?) :
  range[240](?)) : _unknown[42] "inline" "method" "no parens"
  {
    unknown ret[603828] "RVV" "temp"
    unknown call_tmp[788995] "expr temp" "maybe param" "maybe type" "temp"
    (788998 'move' call_tmp[788995](112260 call(426555 call (partial) hasLowBound _mt[203] this[112246])))
    unknown call_tmp[789000] "expr temp" "maybe param" "maybe type" "temp"
    (789003 'move' call_tmp[789000](112257 call ! call_tmp[788995]))
    unknown call_tmp[789005] "expr temp" "maybe param" "maybe type" "temp"
    (789008 'move' call_tmp[789005](112261 call _cond_test call_tmp[789000]))
    if call_tmp[789005]
    {
      (112255 call compilerError "can't query the low bound of a range without one")
    }
    unknown call_tmp[789014] "expr temp" "maybe param" "maybe type" "temp"
    (789017 'move' call_tmp[789014](112271 call alignedLowAsInt _mt[203] this[112246]))
    unknown call_tmp[789019] "expr temp" "maybe param" "maybe type" "temp"
    (789022 'move' call_tmp[789019](112267 call(426559 call (partial) chpl_intToIdx _mt[203] this[112246]) call_tmp[789014]))
    unknown call_tmp[789026] "expr temp" "maybe param" "maybe type" "temp"
    (789029 'move' call_tmp[789026](603833 call idxType _mt[203] this[112246]))
    (603837 'move' ret[603828](603836 'coerce' call_tmp[789019] call_tmp[789026]))
    (603830 return ret[603828])
  }
  { scopeless type
    (426551 call idxType _mt[203] this[112246])
  }
  function range[240](?).alignedLowAsInt[112277](arg _mt[112283]:_MT[201], arg this[112280]:range[240](?) :
  range[240](?)) : _unknown[42] "inline" "method" "no parens"
  {
    unknown ret[603841] "RVV" "temp"
    unknown call_tmp[789035] "expr temp" "maybe param" "maybe type" "temp"
    (789038 'move' call_tmp[789035](112295 call(426563 call (partial) isAligned _mt[203] this[112280])))
    unknown call_tmp[789040] "expr temp" "maybe param" "maybe type" "temp"
    (789043 'move' call_tmp[789040](112292 call ! call_tmp[789035]))
    unknown call_tmp[789045] "expr temp" "maybe param" "maybe type" "temp"
    (789048 'move' call_tmp[789045](112296 call _cond_test call_tmp[789040]))
    if call_tmp[789045]
    {
      (112287 call halt "Can't query the aligned bounds of an ambiguously aligned range")
    }
    unknown call_tmp[789052] "expr temp" "maybe param" "maybe type" "temp"
    (789055 'move' call_tmp[789052](112317 call(112314 call (partial) hasPosNegUnitStride _mt[203] this[112280])))
    unknown call_tmp[789057] "expr temp" "maybe param" "maybe type" "temp"
    (789060 'move' call_tmp[789057](112318 call _cond_test call_tmp[789052]))
    if call_tmp[789057]
    {
      unknown call_tmp[789064] "expr temp" "maybe param" "maybe type" "temp"
      (789067 'move' call_tmp[789064](426568 call _low _mt[203] this[112280]))
      (603846 'move' ret[603841](603845 'deref' call_tmp[789064]))
      gotoReturn _end_alignedLowAsInt[603839] _end_alignedLowAsInt[603839]
    }
    {
      unknown call_tmp[789071] "expr temp" "maybe param" "maybe type" "temp"
      (789074 'move' call_tmp[789071](426573 call _low _mt[203] this[112280]))
      unknown call_tmp[789078] "expr temp" "maybe param" "maybe type" "temp"
      (789081 'move' call_tmp[789078](426578 call _alignment _mt[203] this[112280]))
      unknown call_tmp[789085] "expr temp" "maybe param" "maybe type" "temp"
      (789088 'move' call_tmp[789085](426582 call stride _mt[203] this[112280]))
      unknown call_tmp[789090] "expr temp" "maybe param" "maybe type" "temp"
      (789093 'move' call_tmp[789090](112306 call helpAlignLow call_tmp[789071] call_tmp[789078] call_tmp[789085]))
      (603851 'move' ret[603841](603850 'deref' call_tmp[789090]))
      gotoReturn _end_alignedLowAsInt[603839] _end_alignedLowAsInt[603839]
    }
    label _end_alignedLowAsInt[603839]
    (603843 return ret[603841])
  }
  function range[240](?).chpl_alignedLowAsIntForIter[112326](arg _mt[112332]:_MT[201], arg this[112329]:range[240](?) :
  range[240](?)) : _unknown[42] "inline" "method" "no parens"
  {
    unknown ret[603857] "RVV" "temp"
    unknown tmp[483906] "maybe param" "temp"
    unknown tmp[483927] "maybe param" "temp"
    unknown call_tmp[789097] "expr temp" "maybe param" "maybe type" "temp"
    (789100 'move' call_tmp[789097](112356 call(426600 call (partial) hasUnitStride _mt[203] this[112329])))
    (483938 'move' tmp[483927](112353 call ! call_tmp[789097]))
    unknown call_tmp[789102] "expr temp" "maybe param" "maybe type" "temp"
    (789105 'move' call_tmp[789102](483940 call _cond_invalid tmp[483927]))
    if call_tmp[789102]
    {
      (483943 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[672877] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[672878] "maybe param" "temp"
    unknown call_tmp[789107] "expr temp" "maybe param" "maybe type" "temp"
    (789110 'move' call_tmp[789107](483928 call isTrue tmp[483927]))
    (672883 'move' tmp[672878](672881 call _cond_test call_tmp[789107]))
    if tmp[672878]
    {
      unknown tmp[672885] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[789114] "expr temp" "maybe param" "maybe type" "temp"
      (789117 'move' call_tmp[789114](112360 call(426604 call (partial) hasLowBound _mt[203] this[112329])))
      unknown call_tmp[789119] "expr temp" "maybe param" "maybe type" "temp"
      (789122 'move' call_tmp[789119](112357 call ! call_tmp[789114]))
      (672887 'move' tmp[672885](483931 call isTrue call_tmp[789119]))
      (672892 'move' tmp[672877](672889 '_paramFoldLogical' tmp[672878] tmp[672885]))
    }
    {
      (672897 'move' tmp[672877](672894 '_paramFoldLogical' tmp[672878] 0))
    }
    (483917 'move' tmp[483906] tmp[672877])
    unknown call_tmp[789124] "expr temp" "maybe param" "maybe type" "temp"
    (789127 'move' call_tmp[789124](483919 call _cond_invalid tmp[483906]))
    if call_tmp[789124]
    {
      (483922 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[672904] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[672905] "maybe param" "temp"
    unknown call_tmp[789129] "expr temp" "maybe param" "maybe type" "temp"
    (789132 'move' call_tmp[789129](483907 call isTrue tmp[483906]))
    (672910 'move' tmp[672905](672908 call _cond_test call_tmp[789129]))
    if tmp[672905]
    {
      unknown tmp[672912] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[789136] "expr temp" "maybe param" "maybe type" "temp"
      (789139 'move' call_tmp[789136](426609 call idxType _mt[203] this[112329]))
      unknown call_tmp[789141] "expr temp" "maybe param" "maybe type" "temp"
      (789144 'move' call_tmp[789141](112362 call isFiniteIdxType call_tmp[789136]))
      (672914 'move' tmp[672912](483910 call isTrue call_tmp[789141]))
      (672919 'move' tmp[672904](672916 '_paramFoldLogical' tmp[672905] tmp[672912]))
    }
    {
      (672924 'move' tmp[672904](672921 '_paramFoldLogical' tmp[672905] 0))
    }
    unknown call_tmp[789146] "expr temp" "maybe param" "maybe type" "temp"
    (789149 'move' call_tmp[789146](112364 call _cond_test tmp[672904]))
    if call_tmp[789146]
    {
      unknown call_tmp[789151] "expr temp" "maybe param" "maybe type" "temp"
      (789154 'move' call_tmp[789151](112342 call lowBoundForIter this[112329]))
      unknown call_tmp[789156] "expr temp" "maybe param" "maybe type" "temp"
      (789159 'move' call_tmp[789156](112340 call chpl__idxToInt call_tmp[789151]))
      unknown call_tmp[789163] "expr temp" "maybe param" "maybe type" "temp"
      (789166 'move' call_tmp[789163](426588 call _alignment _mt[203] this[112329]))
      unknown call_tmp[789170] "expr temp" "maybe param" "maybe type" "temp"
      (789173 'move' call_tmp[789170](426592 call stride _mt[203] this[112329]))
      unknown call_tmp[789175] "expr temp" "maybe param" "maybe type" "temp"
      (789178 'move' call_tmp[789175](112338 call helpAlignLow call_tmp[789156] call_tmp[789163] call_tmp[789170]))
      (603862 'move' ret[603857](603861 'deref' call_tmp[789175]))
      gotoReturn _end_chpl_alignedLowAsIntForIter[603855] _end_chpl_alignedLowAsIntForIter[603855]
    }
    {
      unknown call_tmp[789182] "expr temp" "maybe param" "maybe type" "temp"
      (789185 'move' call_tmp[789182](426596 call alignedLowAsInt _mt[203] this[112329]))
      (603867 'move' ret[603857](603866 'deref' call_tmp[789182]))
      gotoReturn _end_chpl_alignedLowAsIntForIter[603855] _end_chpl_alignedLowAsIntForIter[603855]
    }
    label _end_chpl_alignedLowAsIntForIter[603855]
    (603859 return ret[603857])
  }
  function helpAlignLow[112370](arg l[112372]:_any[141](?), arg a[112374]:_any[141](?), arg s[112376]:_any[141](?)) : _unknown[42] "inline" "private"
  {
    unknown ret[603873] "RVV" "temp"
    unknown call_tmp[789187] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (789190 'move' call_tmp[789187](112389 'typeof' l[112372]))
    unknown call_tmp[789192] "expr temp" "maybe param" "maybe type" "temp"
    (789195 'move' call_tmp[789192](112385 call : a[112374] call_tmp[789187]))
    unknown call_tmp[789197] "expr temp" "maybe param" "maybe type" "temp"
    (789200 'move' call_tmp[789197](112384 call chpl__diffMod call_tmp[789192] l[112372] s[112376]))
    unknown call_tmp[789202] "expr temp" "maybe param" "maybe type" "temp"
    (789205 'move' call_tmp[789202](112380 call + l[112372] call_tmp[789197]))
    (603878 'move' ret[603873](603877 'deref' call_tmp[789202]))
    (603875 return ret[603873])
  }
  function range[240](?).hasHighBound[112394](arg _mt[112400]:_MT[201], arg this[112397]:range[240](?) :
  range[240](?)) param : _unknown[42] "method"
  {
    unknown ret[603882] "RVV" "param" "temp"
    unknown tmp[483948] "maybe param" "temp"
    unknown call_tmp[789209] "expr temp" "maybe param" "maybe type" "temp"
    (789212 'move' call_tmp[789209](426619 call bounds _mt[203] this[112397]))
    (483959 'move' tmp[483948](112406 call == call_tmp[789209] both[107114]))
    unknown call_tmp[789214] "expr temp" "maybe param" "maybe type" "temp"
    (789217 'move' call_tmp[789214](483961 call _cond_invalid tmp[483948]))
    if call_tmp[789214]
    {
      (483964 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[672931] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[672932] "maybe param" "temp"
    unknown call_tmp[789219] "expr temp" "maybe param" "maybe type" "temp"
    (789222 'move' call_tmp[789219](483949 call isTrue tmp[483948]))
    (672937 'move' tmp[672932](672935 call _cond_test call_tmp[789219]))
    if tmp[672932]
    {
      (672942 'move' tmp[672931](672939 '_paramFoldLogical' tmp[672932] 1))
    }
    {
      unknown tmp[672944] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[789226] "expr temp" "maybe param" "maybe type" "temp"
      (789229 'move' call_tmp[789226](426624 call bounds _mt[203] this[112397]))
      unknown call_tmp[789231] "expr temp" "maybe param" "maybe type" "temp"
      (789234 'move' call_tmp[789231](112413 call == call_tmp[789226] high[107118]))
      (672946 'move' tmp[672944](483953 call isTrue call_tmp[789231]))
      (672951 'move' tmp[672931](672948 '_paramFoldLogical' tmp[672932] tmp[672944]))
    }
    (603887 'move' ret[603882](603886 'deref' tmp[672931]))
    (603884 return ret[603882])
  }
  function range[240](?).highBound[112422](arg _mt[112428]:_MT[201], arg this[112425]:range[240](?) :
  range[240](?)) : _unknown[42] "inline" "method" "no parens"
  {
    unknown ret[603891] "RVV" "temp"
    unknown call_tmp[789238] "expr temp" "maybe param" "maybe type" "temp"
    (789241 'move' call_tmp[789238](112441 call(426633 call (partial) hasHighBound _mt[203] this[112425])))
    unknown call_tmp[789243] "expr temp" "maybe param" "maybe type" "temp"
    (789246 'move' call_tmp[789243](112438 call ! call_tmp[789238]))
    unknown call_tmp[789248] "expr temp" "maybe param" "maybe type" "temp"
    (789251 'move' call_tmp[789248](112442 call _cond_test call_tmp[789243]))
    if call_tmp[789248]
    {
      (112434 call compilerError "can't query the high bound of a range without one")
    }
    unknown call_tmp[789255] "expr temp" "maybe param" "maybe type" "temp"
    (789258 'move' call_tmp[789255](426657 call idxType _mt[203] this[112425]))
    unknown call_tmp[789260] "expr temp" "maybe param" "maybe type" "temp"
    (789263 'move' call_tmp[789260](112466 call chpl__singleValIdxType call_tmp[789255]))
    unknown call_tmp[789265] "expr temp" "maybe param" "maybe type" "temp"
    (789268 'move' call_tmp[789265](112468 call _cond_test call_tmp[789260]))
    if call_tmp[789265]
    {
      unknown call_tmp[789272] "expr temp" "maybe param" "maybe type" "temp"
      (789275 'move' call_tmp[789272](426647 call _low _mt[203] this[112425]))
      unknown call_tmp[789279] "expr temp" "maybe param" "maybe type" "temp"
      (789282 'move' call_tmp[789279](426652 call _high _mt[203] this[112425]))
      unknown call_tmp[789284] "expr temp" "maybe param" "maybe type" "temp"
      (789287 'move' call_tmp[789284](112457 call > call_tmp[789272] call_tmp[789279]))
      unknown call_tmp[789289] "expr temp" "maybe param" "maybe type" "temp"
      (789292 'move' call_tmp[789289](112461 call _cond_test call_tmp[789284]))
      if call_tmp[789289]
      {
        (112449 call warning "This range is empty and has a single-value idxType, so its high bound isn't trustworthy")
        (551903 'end of statement')
        unknown call_tmp[789298] "expr temp" "maybe param" "maybe type" "temp"
        (789301 'move' call_tmp[789298](426642 call _low _mt[203] this[112425]))
        unknown call_tmp[789303] "expr temp" "maybe param" "maybe type" "temp"
        (789306 'move' call_tmp[789303](112455 call(426637 call (partial) chpl_intToIdx _mt[203] this[112425]) call_tmp[789298]))
        unknown call_tmp[789310] "expr temp" "maybe param" "maybe type" "temp"
        (789313 'move' call_tmp[789310](603896 call idxType _mt[203] this[112425]))
        (603900 'move' ret[603891](603899 'coerce' call_tmp[789303] call_tmp[789310]))
        gotoReturn _end_highBound[603889] _end_highBound[603889]
      }
    }
    unknown call_tmp[789319] "expr temp" "maybe param" "maybe type" "temp"
    (789322 'move' call_tmp[789319](426666 call _high _mt[203] this[112425]))
    unknown call_tmp[789324] "expr temp" "maybe param" "maybe type" "temp"
    (789327 'move' call_tmp[789324](112474 call(426661 call (partial) chpl_intToIdx _mt[203] this[112425]) call_tmp[789319]))
    unknown call_tmp[789331] "expr temp" "maybe param" "maybe type" "temp"
    (789334 'move' call_tmp[789331](603905 call idxType _mt[203] this[112425]))
    (603909 'move' ret[603891](603908 'coerce' call_tmp[789324] call_tmp[789331]))
    label _end_highBound[603889]
    (603893 return ret[603891])
  }
  { scopeless type
    (426629 call idxType _mt[203] this[112425])
  }
  function range[240](?).high[112479](arg _mt[112485]:_MT[201], arg this[112482]:range[240](?) :
  range[240](?)) : _unknown[42] "inline" "method" "no parens"
  {
    unknown ret[603913] "RVV" "temp"
    unknown call_tmp[789340] "expr temp" "maybe param" "maybe type" "temp"
    (789343 'move' call_tmp[789340](112496 call(426675 call (partial) hasHighBound _mt[203] this[112482])))
    unknown call_tmp[789345] "expr temp" "maybe param" "maybe type" "temp"
    (789348 'move' call_tmp[789345](112493 call ! call_tmp[789340]))
    unknown call_tmp[789350] "expr temp" "maybe param" "maybe type" "temp"
    (789353 'move' call_tmp[789350](112497 call _cond_test call_tmp[789345]))
    if call_tmp[789350]
    {
      (112491 call compilerError "can't query the high bound of a range without one")
    }
    unknown call_tmp[789357] "expr temp" "maybe param" "maybe type" "temp"
    (789360 'move' call_tmp[789357](426690 call idxType _mt[203] this[112482]))
    unknown call_tmp[789362] "expr temp" "maybe param" "maybe type" "temp"
    (789365 'move' call_tmp[789362](112520 call chpl__singleValIdxType call_tmp[789357]))
    unknown call_tmp[789367] "expr temp" "maybe param" "maybe type" "temp"
    (789370 'move' call_tmp[789367](112522 call _cond_test call_tmp[789362]))
    if call_tmp[789367]
    {
      unknown call_tmp[789374] "expr temp" "maybe param" "maybe type" "temp"
      (789377 'move' call_tmp[789374](426680 call _low _mt[203] this[112482]))
      unknown call_tmp[789381] "expr temp" "maybe param" "maybe type" "temp"
      (789384 'move' call_tmp[789381](426685 call _high _mt[203] this[112482]))
      unknown call_tmp[789386] "expr temp" "maybe param" "maybe type" "temp"
      (789389 'move' call_tmp[789386](112511 call > call_tmp[789374] call_tmp[789381]))
      unknown call_tmp[789391] "expr temp" "maybe param" "maybe type" "temp"
      (789394 'move' call_tmp[789391](112515 call _cond_test call_tmp[789386]))
      if call_tmp[789391]
      {
        (112504 call warning "This range is empty and has a single-value idxType, so its high bound isn't trustworthy")
        (551907 'end of statement')
        unknown call_tmp[789398] "expr temp" "maybe param" "maybe type" "temp"
        (789401 'move' call_tmp[789398](112508 call low _mt[203] this[112482]))
        unknown call_tmp[789405] "expr temp" "maybe param" "maybe type" "temp"
        (789408 'move' call_tmp[789405](603918 call idxType _mt[203] this[112482]))
        (603922 'move' ret[603913](603921 'coerce' call_tmp[789398] call_tmp[789405]))
        gotoReturn _end_high[603911] _end_high[603911]
      }
    }
    unknown call_tmp[789412] "expr temp" "maybe param" "maybe type" "temp"
    (789415 'move' call_tmp[789412](426708 call idxType _mt[203] this[112482]))
    unknown call_tmp[789417] "expr temp" "maybe param" "maybe type" "temp"
    (789420 'move' call_tmp[789417](112544 call chpl__singleValIdxType call_tmp[789412]))
    unknown call_tmp[789422] "expr temp" "maybe param" "maybe type" "temp"
    (789425 'move' call_tmp[789422](112546 call _cond_test call_tmp[789417]))
    if call_tmp[789422]
    {
      unknown call_tmp[789429] "expr temp" "maybe param" "maybe type" "temp"
      (789432 'move' call_tmp[789429](426703 call size _mt[203] this[112482]))
      unknown call_tmp[789434] "expr temp" "maybe param" "maybe type" "temp"
      (789437 'move' call_tmp[789434](112535 call == call_tmp[789429] 0))
      unknown call_tmp[789439] "expr temp" "maybe param" "maybe type" "temp"
      (789442 'move' call_tmp[789439](112539 call _cond_test call_tmp[789434]))
      if call_tmp[789439]
      {
        (112529 call warning "This range is empty and has a single-value idxType, so its high bound isn't trustworthy")
        (551909 'end of statement')
        unknown call_tmp[789448] "expr temp" "maybe param" "maybe type" "temp"
        (789451 'move' call_tmp[789448](426699 call _low _mt[203] this[112482]))
        unknown call_tmp[789453] "expr temp" "maybe param" "maybe type" "temp"
        (789456 'move' call_tmp[789453](112533 call(426694 call (partial) chpl_intToIdx _mt[203] this[112482]) call_tmp[789448]))
        unknown call_tmp[789460] "expr temp" "maybe param" "maybe type" "temp"
        (789463 'move' call_tmp[789460](603927 call idxType _mt[203] this[112482]))
        (603931 'move' ret[603913](603930 'coerce' call_tmp[789453] call_tmp[789460]))
        gotoReturn _end_high[603911] _end_high[603911]
      }
    }
    unknown call_tmp[789469] "expr temp" "maybe param" "maybe type" "temp"
    (789472 'move' call_tmp[789469](112556 call alignedHighAsInt _mt[203] this[112482]))
    unknown call_tmp[789474] "expr temp" "maybe param" "maybe type" "temp"
    (789477 'move' call_tmp[789474](112552 call(426712 call (partial) chpl_intToIdx _mt[203] this[112482]) call_tmp[789469]))
    unknown call_tmp[789481] "expr temp" "maybe param" "maybe type" "temp"
    (789484 'move' call_tmp[789481](603936 call idxType _mt[203] this[112482]))
    (603940 'move' ret[603913](603939 'coerce' call_tmp[789474] call_tmp[789481]))
    label _end_high[603911]
    (603915 return ret[603913])
  }
  { scopeless type
    (426671 call idxType _mt[203] this[112482])
  }
  function range[240](?).alignedHighAsInt[112562](arg _mt[112568]:_MT[201], arg this[112565]:range[240](?) :
  range[240](?)) : _unknown[42] "inline" "method" "no parens"
  {
    unknown ret[603944] "RVV" "temp"
    unknown call_tmp[789490] "expr temp" "maybe param" "maybe type" "temp"
    (789493 'move' call_tmp[789490](112578 call(426716 call (partial) isAligned _mt[203] this[112565])))
    unknown call_tmp[789495] "expr temp" "maybe param" "maybe type" "temp"
    (789498 'move' call_tmp[789495](112575 call ! call_tmp[789490]))
    unknown call_tmp[789500] "expr temp" "maybe param" "maybe type" "temp"
    (789503 'move' call_tmp[789500](112579 call _cond_test call_tmp[789495]))
    if call_tmp[789500]
    {
      (112572 call halt "Can't query the aligned bounds of an ambiguously aligned range")
    }
    unknown call_tmp[789507] "expr temp" "maybe param" "maybe type" "temp"
    (789510 'move' call_tmp[789507](112598 call(112595 call (partial) hasPosNegUnitStride _mt[203] this[112565])))
    unknown call_tmp[789512] "expr temp" "maybe param" "maybe type" "temp"
    (789515 'move' call_tmp[789512](112599 call _cond_test call_tmp[789507]))
    if call_tmp[789512]
    {
      unknown call_tmp[789519] "expr temp" "maybe param" "maybe type" "temp"
      (789522 'move' call_tmp[789519](426721 call _high _mt[203] this[112565]))
      (603949 'move' ret[603944](603948 'deref' call_tmp[789519]))
      gotoReturn _end_alignedHighAsInt[603942] _end_alignedHighAsInt[603942]
    }
    {
      unknown call_tmp[789526] "expr temp" "maybe param" "maybe type" "temp"
      (789529 'move' call_tmp[789526](426726 call _high _mt[203] this[112565]))
      unknown call_tmp[789533] "expr temp" "maybe param" "maybe type" "temp"
      (789536 'move' call_tmp[789533](426731 call _alignment _mt[203] this[112565]))
      unknown call_tmp[789540] "expr temp" "maybe param" "maybe type" "temp"
      (789543 'move' call_tmp[789540](426735 call stride _mt[203] this[112565]))
      unknown call_tmp[789545] "expr temp" "maybe param" "maybe type" "temp"
      (789548 'move' call_tmp[789545](112589 call helpAlignHigh call_tmp[789526] call_tmp[789533] call_tmp[789540]))
      (603954 'move' ret[603944](603953 'deref' call_tmp[789545]))
      gotoReturn _end_alignedHighAsInt[603942] _end_alignedHighAsInt[603942]
    }
    label _end_alignedHighAsInt[603942]
    (603946 return ret[603944])
  }
  function range[240](?).chpl_alignedHighAsIntForIter[112607](arg _mt[112613]:_MT[201], arg this[112610]:range[240](?) :
  range[240](?)) : _unknown[42] "inline" "method" "no parens"
  {
    unknown ret[603960] "RVV" "temp"
    unknown tmp[483969] "maybe param" "temp"
    unknown tmp[483990] "maybe param" "temp"
    unknown call_tmp[789552] "expr temp" "maybe param" "maybe type" "temp"
    (789555 'move' call_tmp[789552](112637 call(426753 call (partial) hasUnitStride _mt[203] this[112610])))
    (484001 'move' tmp[483990](112634 call ! call_tmp[789552]))
    unknown call_tmp[789557] "expr temp" "maybe param" "maybe type" "temp"
    (789560 'move' call_tmp[789557](484003 call _cond_invalid tmp[483990]))
    if call_tmp[789557]
    {
      (484006 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[672958] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[672959] "maybe param" "temp"
    unknown call_tmp[789562] "expr temp" "maybe param" "maybe type" "temp"
    (789565 'move' call_tmp[789562](483991 call isTrue tmp[483990]))
    (672964 'move' tmp[672959](672962 call _cond_test call_tmp[789562]))
    if tmp[672959]
    {
      unknown tmp[672966] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[789569] "expr temp" "maybe param" "maybe type" "temp"
      (789572 'move' call_tmp[789569](112641 call(426757 call (partial) hasHighBound _mt[203] this[112610])))
      unknown call_tmp[789574] "expr temp" "maybe param" "maybe type" "temp"
      (789577 'move' call_tmp[789574](112638 call ! call_tmp[789569]))
      (672968 'move' tmp[672966](483994 call isTrue call_tmp[789574]))
      (672973 'move' tmp[672958](672970 '_paramFoldLogical' tmp[672959] tmp[672966]))
    }
    {
      (672978 'move' tmp[672958](672975 '_paramFoldLogical' tmp[672959] 0))
    }
    (483980 'move' tmp[483969] tmp[672958])
    unknown call_tmp[789579] "expr temp" "maybe param" "maybe type" "temp"
    (789582 'move' call_tmp[789579](483982 call _cond_invalid tmp[483969]))
    if call_tmp[789579]
    {
      (483985 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[672985] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[672986] "maybe param" "temp"
    unknown call_tmp[789584] "expr temp" "maybe param" "maybe type" "temp"
    (789587 'move' call_tmp[789584](483970 call isTrue tmp[483969]))
    (672991 'move' tmp[672986](672989 call _cond_test call_tmp[789584]))
    if tmp[672986]
    {
      unknown tmp[672993] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[789591] "expr temp" "maybe param" "maybe type" "temp"
      (789594 'move' call_tmp[789591](426762 call idxType _mt[203] this[112610]))
      unknown call_tmp[789596] "expr temp" "maybe param" "maybe type" "temp"
      (789599 'move' call_tmp[789596](112643 call isFiniteIdxType call_tmp[789591]))
      (672995 'move' tmp[672993](483973 call isTrue call_tmp[789596]))
      (673000 'move' tmp[672985](672997 '_paramFoldLogical' tmp[672986] tmp[672993]))
    }
    {
      (673005 'move' tmp[672985](673002 '_paramFoldLogical' tmp[672986] 0))
    }
    unknown call_tmp[789601] "expr temp" "maybe param" "maybe type" "temp"
    (789604 'move' call_tmp[789601](112645 call _cond_test tmp[672985]))
    if call_tmp[789601]
    {
      unknown call_tmp[789606] "expr temp" "maybe param" "maybe type" "temp"
      (789609 'move' call_tmp[789606](112623 call highBoundForIter this[112610]))
      unknown call_tmp[789611] "expr temp" "maybe param" "maybe type" "temp"
      (789614 'move' call_tmp[789611](112621 call chpl__idxToInt call_tmp[789606]))
      unknown call_tmp[789618] "expr temp" "maybe param" "maybe type" "temp"
      (789621 'move' call_tmp[789618](426741 call _alignment _mt[203] this[112610]))
      unknown call_tmp[789625] "expr temp" "maybe param" "maybe type" "temp"
      (789628 'move' call_tmp[789625](426745 call stride _mt[203] this[112610]))
      unknown call_tmp[789630] "expr temp" "maybe param" "maybe type" "temp"
      (789633 'move' call_tmp[789630](112619 call helpAlignHigh call_tmp[789611] call_tmp[789618] call_tmp[789625]))
      (603965 'move' ret[603960](603964 'deref' call_tmp[789630]))
      gotoReturn _end_chpl_alignedHighAsIntForIter[603958] _end_chpl_alignedHighAsIntForIter[603958]
    }
    {
      unknown call_tmp[789637] "expr temp" "maybe param" "maybe type" "temp"
      (789640 'move' call_tmp[789637](426749 call alignedHighAsInt _mt[203] this[112610]))
      (603970 'move' ret[603960](603969 'deref' call_tmp[789637]))
      gotoReturn _end_chpl_alignedHighAsIntForIter[603958] _end_chpl_alignedHighAsIntForIter[603958]
    }
    label _end_chpl_alignedHighAsIntForIter[603958]
    (603962 return ret[603960])
  }
  function helpAlignHigh[112651](arg h[112653]:_any[141](?), arg a[112655]:_any[141](?), arg s[112657]:_any[141](?)) : _unknown[42] "inline" "private"
  {
    unknown ret[603976] "RVV" "temp"
    unknown call_tmp[789642] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (789645 'move' call_tmp[789642](112671 'typeof' h[112653]))
    unknown call_tmp[789647] "expr temp" "maybe param" "maybe type" "temp"
    (789650 'move' call_tmp[789647](112667 call : a[112655] call_tmp[789642]))
    unknown call_tmp[789652] "expr temp" "maybe param" "maybe type" "temp"
    (789655 'move' call_tmp[789652](112665 call chpl__diffMod h[112653] call_tmp[789647] s[112657]))
    unknown call_tmp[789657] "expr temp" "maybe param" "maybe type" "temp"
    (789660 'move' call_tmp[789657](112661 call - h[112653] call_tmp[789652]))
    (603981 'move' ret[603976](603980 'deref' call_tmp[789657]))
    (603978 return ret[603976])
  }
  function range[240](?).chpl_isNaturallyAligned[112675](arg _mt[112681]:_MT[201], arg this[112678]:range[240](?) :
  range[240](?)) : _unknown[42] "method" "no where doc"
  {
    unknown ret[603985] "RVV" "temp"
    unknown call_tmp[789664] "expr temp" "maybe param" "maybe type" "temp"
    (789667 'move' call_tmp[789664](426827 call bounds _mt[203] this[112678]))
    unknown call_tmp[789669] "expr temp" "maybe param" "maybe type" "temp"
    (789672 'move' call_tmp[789669](112781 call == call_tmp[789664] both[107114]))
    unknown call_tmp[789674] "expr temp" "maybe param" "maybe type" "temp"
    (789677 'move' call_tmp[789674](112788 call _cond_test call_tmp[789669]))
    if call_tmp[789674]
    {
      unknown call_tmp[789681] "expr temp" "maybe param" "maybe type" "temp"
      (789684 'move' call_tmp[789681](112708 call(426785 call (partial) hasPositiveStride _mt[203] this[112678])))
      unknown call_tmp[789686] "expr temp" "maybe param" "maybe type" "temp"
      (789689 'move' call_tmp[789686](112709 call _cond_test call_tmp[789681]))
      if call_tmp[789686]
      {
        unknown call_tmp[789693] "expr temp" "maybe param" "maybe type" "temp"
        (789696 'move' call_tmp[789693](112702 call alignedLowAsInt _mt[203] this[112678]))
        unknown call_tmp[789700] "expr temp" "maybe param" "maybe type" "temp"
        (789703 'move' call_tmp[789700](426781 call _low _mt[203] this[112678]))
        unknown call_tmp[789705] "expr temp" "maybe param" "maybe type" "temp"
        (789708 'move' call_tmp[789705](112699 call == call_tmp[789693] call_tmp[789700]))
        (603990 'move' ret[603985](603989 'deref' call_tmp[789705]))
        gotoReturn _end_chpl_isNaturallyAligned[603983] _end_chpl_isNaturallyAligned[603983]
      }
      unknown call_tmp[789712] "expr temp" "maybe param" "maybe type" "temp"
      (789715 'move' call_tmp[789712](112724 call(426794 call (partial) hasNegativeStride _mt[203] this[112678])))
      unknown call_tmp[789717] "expr temp" "maybe param" "maybe type" "temp"
      (789720 'move' call_tmp[789717](112725 call _cond_test call_tmp[789712]))
      if call_tmp[789717]
      {
        unknown call_tmp[789724] "expr temp" "maybe param" "maybe type" "temp"
        (789727 'move' call_tmp[789724](112718 call alignedHighAsInt _mt[203] this[112678]))
        unknown call_tmp[789731] "expr temp" "maybe param" "maybe type" "temp"
        (789734 'move' call_tmp[789731](426790 call _high _mt[203] this[112678]))
        unknown call_tmp[789736] "expr temp" "maybe param" "maybe type" "temp"
        (789739 'move' call_tmp[789736](112715 call == call_tmp[789724] call_tmp[789731]))
        (603995 'move' ret[603985](603994 'deref' call_tmp[789736]))
        gotoReturn _end_chpl_isNaturallyAligned[603983] _end_chpl_isNaturallyAligned[603983]
      }
      (604000 'move' ret[603985](603999 'deref' 0))
      gotoReturn _end_chpl_isNaturallyAligned[603983] _end_chpl_isNaturallyAligned[603983]
    }
    {
      unknown call_tmp[789743] "expr temp" "maybe param" "maybe type" "temp"
      (789746 'move' call_tmp[789743](426822 call bounds _mt[203] this[112678]))
      unknown call_tmp[789748] "expr temp" "maybe param" "maybe type" "temp"
      (789751 'move' call_tmp[789748](112769 call == call_tmp[789743] low[107116]))
      unknown call_tmp[789753] "expr temp" "maybe param" "maybe type" "temp"
      (789756 'move' call_tmp[789753](112776 call _cond_test call_tmp[789748]))
      if call_tmp[789753]
      {
        unknown tmp[484032] "maybe param" "temp"
        (484043 'move' tmp[484032](112737 call(426798 call (partial) hasPositiveStride _mt[203] this[112678])))
        unknown call_tmp[789760] "expr temp" "maybe param" "maybe type" "temp"
        (789763 'move' call_tmp[789760](484045 call _cond_invalid tmp[484032]))
        if call_tmp[789760]
        {
          (484048 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[673012] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[673013] "maybe param" "temp"
        unknown call_tmp[789765] "expr temp" "maybe param" "maybe type" "temp"
        (789768 'move' call_tmp[789765](484033 call isTrue tmp[484032]))
        (673018 'move' tmp[673013](673016 call _cond_test call_tmp[789765]))
        if tmp[673013]
        {
          unknown tmp[673020] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[789772] "expr temp" "maybe param" "maybe type" "temp"
          (789775 'move' call_tmp[789772](112741 call alignedLowAsInt _mt[203] this[112678]))
          unknown call_tmp[789779] "expr temp" "maybe param" "maybe type" "temp"
          (789782 'move' call_tmp[789779](426803 call _low _mt[203] this[112678]))
          unknown call_tmp[789784] "expr temp" "maybe param" "maybe type" "temp"
          (789787 'move' call_tmp[789784](112738 call == call_tmp[789772] call_tmp[789779]))
          (673022 'move' tmp[673020](484036 call isTrue call_tmp[789784]))
          (673027 'move' tmp[673012](673024 '_paramFoldLogical' tmp[673013] tmp[673020]))
        }
        {
          (673032 'move' tmp[673012](673029 '_paramFoldLogical' tmp[673013] 0))
        }
        (604005 'move' ret[603985](604004 'deref' tmp[673012]))
        gotoReturn _end_chpl_isNaturallyAligned[603983] _end_chpl_isNaturallyAligned[603983]
      }
      {
        unknown call_tmp[789791] "expr temp" "maybe param" "maybe type" "temp"
        (789794 'move' call_tmp[789791](426817 call bounds _mt[203] this[112678]))
        unknown call_tmp[789796] "expr temp" "maybe param" "maybe type" "temp"
        (789799 'move' call_tmp[789796](112758 call == call_tmp[789791] high[107118]))
        unknown call_tmp[789801] "expr temp" "maybe param" "maybe type" "temp"
        (789804 'move' call_tmp[789801](112765 call _cond_test call_tmp[789796]))
        if call_tmp[789801]
        {
          unknown tmp[484053] "maybe param" "temp"
          (484064 'move' tmp[484053](112750 call(426807 call (partial) hasNegativeStride _mt[203] this[112678])))
          unknown call_tmp[789808] "expr temp" "maybe param" "maybe type" "temp"
          (789811 'move' call_tmp[789808](484066 call _cond_invalid tmp[484053]))
          if call_tmp[789808]
          {
            (484069 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[673039] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[673040] "maybe param" "temp"
          unknown call_tmp[789813] "expr temp" "maybe param" "maybe type" "temp"
          (789816 'move' call_tmp[789813](484054 call isTrue tmp[484053]))
          (673045 'move' tmp[673040](673043 call _cond_test call_tmp[789813]))
          if tmp[673040]
          {
            unknown tmp[673047] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[789820] "expr temp" "maybe param" "maybe type" "temp"
            (789823 'move' call_tmp[789820](112754 call alignedHighAsInt _mt[203] this[112678]))
            unknown call_tmp[789827] "expr temp" "maybe param" "maybe type" "temp"
            (789830 'move' call_tmp[789827](426812 call _high _mt[203] this[112678]))
            unknown call_tmp[789832] "expr temp" "maybe param" "maybe type" "temp"
            (789835 'move' call_tmp[789832](112751 call == call_tmp[789820] call_tmp[789827]))
            (673049 'move' tmp[673047](484057 call isTrue call_tmp[789832]))
            (673054 'move' tmp[673039](673051 '_paramFoldLogical' tmp[673040] tmp[673047]))
          }
          {
            (673059 'move' tmp[673039](673056 '_paramFoldLogical' tmp[673040] 0))
          }
          (604010 'move' ret[603985](604009 'deref' tmp[673039]))
          gotoReturn _end_chpl_isNaturallyAligned[603983] _end_chpl_isNaturallyAligned[603983]
        }
      }
    }
    label _end_chpl_isNaturallyAligned[603983]
    (603987 return ret[603985])
  }
  where {
    unknown tmp[484011] "maybe param" "temp"
    unknown call_tmp[789839] "expr temp" "maybe param" "maybe type" "temp"
    (789842 'move' call_tmp[789839](112688 call(426771 call (partial) hasPosNegUnitStride _mt[203] this[112678])))
    (484022 'move' tmp[484011](112685 call ! call_tmp[789839]))
    unknown call_tmp[789844] "expr temp" "maybe param" "maybe type" "temp"
    (789847 'move' call_tmp[789844](484024 call _cond_invalid tmp[484011]))
    if call_tmp[789844]
    {
      (484027 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[673066] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[673067] "maybe param" "temp"
    unknown call_tmp[789849] "expr temp" "maybe param" "maybe type" "temp"
    (789852 'move' call_tmp[789849](484012 call isTrue tmp[484011]))
    (673072 'move' tmp[673067](673070 call _cond_test call_tmp[789849]))
    if tmp[673067]
    {
      unknown tmp[673074] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[789856] "expr temp" "maybe param" "maybe type" "temp"
      (789859 'move' call_tmp[789856](426776 call bounds _mt[203] this[112678]))
      unknown call_tmp[789861] "expr temp" "maybe param" "maybe type" "temp"
      (789864 'move' call_tmp[789861](112689 call != call_tmp[789856] neither[107120]))
      (673076 'move' tmp[673074](484015 call isTrue call_tmp[789861]))
      (673081 'move' tmp[673066](673078 '_paramFoldLogical' tmp[673067] tmp[673074]))
    }
    {
      (673086 'move' tmp[673066](673083 '_paramFoldLogical' tmp[673067] 0))
    }
    (1001390 call chpl_statementLevelSymbol tmp[673066])
  }
  function range[240](?).chpl_isNaturallyAligned[112796](arg _mt[112802]:_MT[201], arg this[112799]:range[240](?) :
  range[240](?)) param : _unknown[42] "method"
  {
    unknown ret[604016] "RVV" "param" "temp"
    unknown call_tmp[789868] "expr temp" "maybe param" "maybe type" "temp"
    (789871 'move' call_tmp[789868](112818 call(426840 call (partial) hasPosNegUnitStride _mt[203] this[112799])))
    (604021 'move' ret[604016](604020 'deref' call_tmp[789868]))
    (604018 return ret[604016])
  }
  where {
    unknown tmp[484074] "maybe param" "temp"
    (484085 'move' tmp[484074](112807 call(426831 call (partial) hasPosNegUnitStride _mt[203] this[112799])))
    unknown call_tmp[789875] "expr temp" "maybe param" "maybe type" "temp"
    (789878 'move' call_tmp[789875](484087 call _cond_invalid tmp[484074]))
    if call_tmp[789875]
    {
      (484090 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[673093] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[673094] "maybe param" "temp"
    unknown call_tmp[789880] "expr temp" "maybe param" "maybe type" "temp"
    (789883 'move' call_tmp[789880](484075 call isTrue tmp[484074]))
    (673099 'move' tmp[673094](673097 call _cond_test call_tmp[789880]))
    if tmp[673094]
    {
      (673104 'move' tmp[673093](673101 '_paramFoldLogical' tmp[673094] 1))
    }
    {
      unknown tmp[673106] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[789887] "expr temp" "maybe param" "maybe type" "temp"
      (789890 'move' call_tmp[789887](426836 call bounds _mt[203] this[112799]))
      unknown call_tmp[789892] "expr temp" "maybe param" "maybe type" "temp"
      (789895 'move' call_tmp[789892](112808 call == call_tmp[789887] neither[107120]))
      (673108 'move' tmp[673106](484079 call isTrue call_tmp[789892]))
      (673113 'move' tmp[673093](673110 '_paramFoldLogical' tmp[673094] tmp[673106]))
    }
    (1001392 call chpl_statementLevelSymbol tmp[673093])
  }
  function hasAmbiguousAlignmentForIter[112822](arg r[112824]:_any[141](?)) param : _unknown[42] "inline" "private"
  {
    unknown ret[604025] "RVV" "param" "temp"
    (604030 'move' ret[604025](604029 'deref' 0))
    (604027 return ret[604025])
  }
  where {
    unknown tmp[484095] "maybe param" "temp"
    (484106 'move' tmp[484095](112832 call(112829 call (partial) hasPosNegUnitStride _mt[203] r[112824])))
    unknown call_tmp[789899] "expr temp" "maybe param" "maybe type" "temp"
    (789902 'move' call_tmp[789899](484108 call _cond_invalid tmp[484095]))
    if call_tmp[789899]
    {
      (484111 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[673120] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[673121] "maybe param" "temp"
    unknown call_tmp[789904] "expr temp" "maybe param" "maybe type" "temp"
    (789907 'move' call_tmp[789904](484096 call isTrue tmp[484095]))
    (673126 'move' tmp[673121](673124 call _cond_test call_tmp[789904]))
    if tmp[673121]
    {
      (673131 'move' tmp[673120](673128 '_paramFoldLogical' tmp[673121] 1))
    }
    {
      unknown tmp[673133] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[789911] "expr temp" "maybe param" "maybe type" "temp"
      (789914 'move' call_tmp[789911](112836 call idxType _mt[203] r[112824]))
      unknown call_tmp[789916] "expr temp" "maybe param" "maybe type" "temp"
      (789919 'move' call_tmp[789916](112834 call isFiniteIdxType call_tmp[789911]))
      (673135 'move' tmp[673133](484100 call isTrue call_tmp[789916]))
      (673140 'move' tmp[673120](673137 '_paramFoldLogical' tmp[673121] tmp[673133]))
    }
    (1001394 call chpl_statementLevelSymbol tmp[673120])
  }
  function hasAmbiguousAlignmentForIter[112845](arg r[112847]:_any[141](?)) : _unknown[42] "inline" "private"
  {
    unknown ret[604034] "RVV" "temp"
    unknown call_tmp[789923] "expr temp" "maybe param" "maybe type" "temp"
    (789926 'move' call_tmp[789923](112857 call(112854 call (partial) isAligned _mt[203] r[112847])))
    unknown call_tmp[789928] "expr temp" "maybe param" "maybe type" "temp"
    (789931 'move' call_tmp[789928](112851 call ! call_tmp[789923]))
    (604039 'move' ret[604034](604038 'deref' call_tmp[789928]))
    (604036 return ret[604034])
  }
  function range[240](?).isEmpty[112860](arg _mt[112866]:_MT[201], arg this[112863]:range[240](?) :
  range[240](?)) : _unknown[42] "inline" "method"
  {
    unknown ret[604043] "RVV" "temp"
    unknown call_tmp[789933] "expr temp" "maybe param" "maybe type" "temp"
    (789936 'move' call_tmp[789933](112871 call isEmptyHelp this[112863]))
    (604048 'move' ret[604043](604047 'deref' call_tmp[789933]))
    (604045 return ret[604043])
  }
  function range[240](?).isEmpty[112875](arg _mt[112881]:_MT[201], arg this[112878]:range[240](?) :
  range[240](?)) : _unknown[42] "inline" "method" "@unstable"
  {
    unknown ret[604052] "RVV" "temp"
    unknown call_tmp[789938] "expr temp" "maybe param" "maybe type" "temp"
    (789941 'move' call_tmp[789938](112901 call isEmptyHelp this[112878]))
    (604057 'move' ret[604052](604056 'deref' call_tmp[789938]))
    (604054 return ret[604052])
  }
  where {
    unknown tmp[484116] "maybe param" "temp"
    unknown call_tmp[789945] "expr temp" "maybe param" "maybe type" "temp"
    (789948 'move' call_tmp[789945](426846 call idxType _mt[203] this[112878]))
    (484127 'move' tmp[484116](112886 call isFiniteIdxType call_tmp[789945]))
    unknown call_tmp[789950] "expr temp" "maybe param" "maybe type" "temp"
    (789953 'move' call_tmp[789950](484129 call _cond_invalid tmp[484116]))
    if call_tmp[789950]
    {
      (484132 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[673147] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[673148] "maybe param" "temp"
    unknown call_tmp[789955] "expr temp" "maybe param" "maybe type" "temp"
    (789958 'move' call_tmp[789955](484117 call isTrue tmp[484116]))
    (673153 'move' tmp[673148](673151 call _cond_test call_tmp[789955]))
    if tmp[673148]
    {
      unknown tmp[673155] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[789962] "expr temp" "maybe param" "maybe type" "temp"
      (789965 'move' call_tmp[789962](112891 call bounds _mt[203] this[112878]))
      unknown call_tmp[789967] "expr temp" "maybe param" "maybe type" "temp"
      (789970 'move' call_tmp[789967](112888 call != call_tmp[789962] both[107114]))
      (673157 'move' tmp[673155](484120 call isTrue call_tmp[789967]))
      (673162 'move' tmp[673147](673159 '_paramFoldLogical' tmp[673148] tmp[673155]))
    }
    {
      (673167 'move' tmp[673147](673164 '_paramFoldLogical' tmp[673148] 0))
    }
    (1001396 call chpl_statementLevelSymbol tmp[673147])
  }
  function isEmptyHelp[112906](arg r[112908]:_any[141](?)) : _unknown[42] "inline" "private"
  {
    unknown ret[604061] "RVV" "temp"
    unknown call_tmp[789974] "expr temp" "maybe param" "maybe type" "temp"
    (789977 'move' call_tmp[789974](112933 call idxType _mt[203] r[112908]))
    unknown call_tmp[789979] "expr temp" "maybe param" "maybe type" "temp"
    (789982 'move' call_tmp[789979](112931 call chpl__singleValIdxType call_tmp[789974]))
    unknown call_tmp[789984] "expr temp" "maybe param" "maybe type" "temp"
    (789987 'move' call_tmp[789984](112936 call _cond_test call_tmp[789979]))
    if call_tmp[789984]
    {
      unknown call_tmp[789991] "expr temp" "maybe param" "maybe type" "temp"
      (789994 'move' call_tmp[789991](112918 call _low _mt[203] r[112908]))
      unknown call_tmp[789998] "expr temp" "maybe param" "maybe type" "temp"
      (790001 'move' call_tmp[789998](112922 call _high _mt[203] r[112908]))
      unknown call_tmp[790003] "expr temp" "maybe param" "maybe type" "temp"
      (790006 'move' call_tmp[790003](112915 call > call_tmp[789991] call_tmp[789998]))
      unknown call_tmp[790008] "expr temp" "maybe param" "maybe type" "temp"
      (790011 'move' call_tmp[790008](112925 call _cond_test call_tmp[790003]))
      if call_tmp[790008]
      {
        (604066 'move' ret[604061](604065 'deref' 1))
        gotoReturn _end_isEmptyHelp[604059] _end_isEmptyHelp[604059]
      }
    }
    unknown tmp[484179] "maybe param" "temp"
    (484190 'move' tmp[484179] 1)
    unknown call_tmp[790013] "expr temp" "maybe param" "maybe type" "temp"
    (790016 'move' call_tmp[790013](484192 call _cond_invalid tmp[484179]))
    if call_tmp[790013]
    {
      (484195 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[673174] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[673175] "maybe param" "temp"
    unknown call_tmp[790018] "expr temp" "maybe param" "maybe type" "temp"
    (790021 'move' call_tmp[790018](484180 call isTrue tmp[484179]))
    (673180 'move' tmp[673175](673178 call _cond_test call_tmp[790018]))
    if tmp[673175]
    {
      unknown tmp[673182] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[790025] "expr temp" "maybe param" "maybe type" "temp"
      (790028 'move' call_tmp[790025](112990 call(112987 call (partial) isAligned _mt[203] r[112908])))
      unknown call_tmp[790030] "expr temp" "maybe param" "maybe type" "temp"
      (790033 'move' call_tmp[790030](112984 call ! call_tmp[790025]))
      (673184 'move' tmp[673182](484183 call isTrue call_tmp[790030]))
      (673189 'move' tmp[673174](673186 '_paramFoldLogical' tmp[673175] tmp[673182]))
    }
    {
      (673194 'move' tmp[673174](673191 '_paramFoldLogical' tmp[673175] 0))
    }
    unknown call_tmp[790035] "expr temp" "maybe param" "maybe type" "temp"
    (790038 'move' call_tmp[790035](112991 call _cond_test tmp[673174]))
    if call_tmp[790035]
    {
      (112944 call boundsCheckHalt module=[222] HaltWrappers[518] "isEmpty() is invoked on an ambiguously-aligned range")
      (401418 'referenced modules list' HaltWrappers[518])
    }
    {
      unknown tmp[484137] "maybe param" "temp"
      unknown tmp[484158] "maybe param" "temp"
      unknown call_tmp[790042] "expr temp" "maybe param" "maybe type" "temp"
      (790045 'move' call_tmp[790042](112957 call bounds _mt[203] r[112908]))
      (484169 'move' tmp[484158](112954 call == call_tmp[790042] both[107114]))
      unknown call_tmp[790047] "expr temp" "maybe param" "maybe type" "temp"
      (790050 'move' call_tmp[790047](484171 call _cond_invalid tmp[484158]))
      if call_tmp[790047]
      {
        (484174 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[673201] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[673202] "maybe param" "temp"
      unknown call_tmp[790052] "expr temp" "maybe param" "maybe type" "temp"
      (790055 'move' call_tmp[790052](484159 call isTrue tmp[484158]))
      (673207 'move' tmp[673202](673205 call _cond_test call_tmp[790052]))
      if tmp[673202]
      {
        (673212 'move' tmp[673201](673209 '_paramFoldLogical' tmp[673202] 1))
      }
      {
        unknown tmp[673214] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[790059] "expr temp" "maybe param" "maybe type" "temp"
        (790062 'move' call_tmp[790059](112967 call idxType _mt[203] r[112908]))
        unknown call_tmp[790064] "expr temp" "maybe param" "maybe type" "temp"
        (790067 'move' call_tmp[790064](112965 call isFiniteIdxType call_tmp[790059]))
        (673216 'move' tmp[673214](484163 call isTrue call_tmp[790064]))
        (673221 'move' tmp[673201](673218 '_paramFoldLogical' tmp[673202] tmp[673214]))
      }
      (484148 'move' tmp[484137] tmp[673201])
      unknown call_tmp[790069] "expr temp" "maybe param" "maybe type" "temp"
      (790072 'move' call_tmp[790069](484150 call _cond_invalid tmp[484137]))
      if call_tmp[790069]
      {
        (484153 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[673228] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[673229] "maybe param" "temp"
      unknown call_tmp[790074] "expr temp" "maybe param" "maybe type" "temp"
      (790077 'move' call_tmp[790074](484138 call isTrue tmp[484137]))
      (673234 'move' tmp[673229](673232 call _cond_test call_tmp[790074]))
      if tmp[673229]
      {
        unknown tmp[673236] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[790081] "expr temp" "maybe param" "maybe type" "temp"
        (790084 'move' call_tmp[790081](112973 call alignedLowAsInt _mt[203] r[112908]))
        unknown call_tmp[790088] "expr temp" "maybe param" "maybe type" "temp"
        (790091 'move' call_tmp[790088](112977 call alignedHighAsInt _mt[203] r[112908]))
        unknown call_tmp[790093] "expr temp" "maybe param" "maybe type" "temp"
        (790096 'move' call_tmp[790093](112970 call > call_tmp[790081] call_tmp[790088]))
        (673238 'move' tmp[673236](484141 call isTrue call_tmp[790093]))
        (673243 'move' tmp[673228](673240 '_paramFoldLogical' tmp[673229] tmp[673236]))
      }
      {
        (673248 'move' tmp[673228](673245 '_paramFoldLogical' tmp[673229] 0))
      }
      (604071 'move' ret[604061](604070 'deref' tmp[673228]))
      gotoReturn _end_isEmptyHelp[604059] _end_isEmptyHelp[604059]
    }
    label _end_isEmptyHelp[604059]
    (604063 return ret[604061])
  }
  function range[240](?).size[112999](arg _mt[113005]:_MT[201], arg this[113002]:range[240](?) :
  range[240](?)) : _unknown[42] "method" "no parens"
  {
    unknown ret[604077] "RVV" "temp"
    unknown call_tmp[790100] "expr temp" "maybe param" "maybe type" "temp"
    (790103 'move' call_tmp[790100](113014 call(113011 call (partial) sizeAs _mt[203] this[113002]) int(64)[10]))
    (604083 'move' ret[604077](604082 'coerce' call_tmp[790100] int(64)[10]))
    (604079 return ret[604077])
  }
  { scopeless type
    int(64)[10]
  }
  function range[240](?).sizeAs[113019](arg _mt[113029]:_MT[201], arg this[113022]:range[240](?) :
  range[240](?), arg t[113026]:integral[159](?)) : _unknown[42] "method"
  {
    unknown ret[604087] "RVV" "temp"
    unknown call_tmp[790107] "expr temp" "maybe param" "maybe type" "temp"
    (790110 'move' call_tmp[790107](113042 call bounds _mt[203] this[113022]))
    unknown call_tmp[790112] "expr temp" "maybe param" "maybe type" "temp"
    (790115 'move' call_tmp[790112](113039 call != call_tmp[790107] both[107114]))
    unknown call_tmp[790117] "expr temp" "maybe param" "maybe type" "temp"
    (790120 'move' call_tmp[790117](113049 call _cond_test call_tmp[790112]))
    if call_tmp[790117]
    {
      (113034 call compilerError "'size' is not defined on unbounded ranges")
    }
    unknown call_tmp[790124] "expr temp" "maybe param" "maybe type" "temp"
    (790127 'move' call_tmp[790124](426865 call idxType _mt[203] this[113022]))
    unknown call_tmp[790129] "expr temp" "maybe param" "maybe type" "temp"
    (790132 'move' call_tmp[790129](113068 call chpl__singleValIdxType call_tmp[790124]))
    unknown call_tmp[790134] "expr temp" "maybe param" "maybe type" "temp"
    (790137 'move' call_tmp[790134](113070 call _cond_test call_tmp[790129]))
    if call_tmp[790134]
    {
      unknown call_tmp[790141] "expr temp" "maybe param" "maybe type" "temp"
      (790144 'move' call_tmp[790141](426855 call _low _mt[203] this[113022]))
      unknown call_tmp[790148] "expr temp" "maybe param" "maybe type" "temp"
      (790151 'move' call_tmp[790148](426860 call _high _mt[203] this[113022]))
      unknown call_tmp[790153] "expr temp" "maybe param" "maybe type" "temp"
      (790156 'move' call_tmp[790153](113058 call > call_tmp[790141] call_tmp[790148]))
      unknown call_tmp[790158] "expr temp" "maybe param" "maybe type" "temp"
      (790161 'move' call_tmp[790158](113062 call _cond_test call_tmp[790153]))
      if call_tmp[790158]
      {
        (604093 'move' ret[604087](604092 'coerce' 0 t[113026]))
        gotoReturn _end_sizeAs[604085] _end_sizeAs[604085]
      }
    }
    unknown call_tmp[790165] "expr temp" "maybe param" "maybe type" "temp"
    (790168 'move' call_tmp[790165](113076 call(426871 call (partial) sizeAsHelp _mt[203] this[113022]) t[113026]))
    (604099 'move' ret[604087](604098 'coerce' call_tmp[790165] t[113026]))
    label _end_sizeAs[604085]
    (604089 return ret[604087])
  }
  { scopeless type
    t[113026]
  }
  function range[240](?).sizeAsHelp[113081](arg _mt[113105]:_MT[201], arg this[113084]:range[240](?) :
  range[240](?), arg t[113088]:integral[159](?), arg al[113095] :
  (1001919 call alignedLowAsInt _mt[203] this[113084]) =
  (113092 call alignedLowAsInt _mt[203] this[113084]), arg ah[113102] :
  (1001924 call alignedHighAsInt _mt[203] this[113084]) =
  (113099 call alignedHighAsInt _mt[203] this[113084])) : _unknown[42] "method"
  {
    unknown ret[604103] "RVV" "temp"
    unknown call_tmp[790176] "maybe param" "maybe type" "temp"
    (790179 'move' call_tmp[790176](113120 call alignedHighAsInt _mt[203] this[113084]))
    const ah[113118] "dead at end of block" "const" "insert auto destroy"
    (645269 'init var' ah[113118] call_tmp[790176])
    unknown call_tmp[790183] "maybe param" "maybe type" "temp"
    (790186 'move' call_tmp[790183](113113 call alignedLowAsInt _mt[203] this[113084]))
    const al[113111] "dead at end of block" "const" "insert auto destroy"
    (645271 'init var' al[113111] call_tmp[790183])
    (113124 'end of statement')
    unknown call_tmp[790188] "expr temp" "maybe param" "maybe type" "temp"
    (790191 'move' call_tmp[790188](113128 call > al[113111] ah[113118]))
    unknown call_tmp[790193] "expr temp" "maybe param" "maybe type" "temp"
    (790196 'move' call_tmp[790193](113132 call _cond_test call_tmp[790188]))
    if call_tmp[790193]
    {
      (604109 'move' ret[604103](604108 'coerce' 0 t[113088]))
      gotoReturn _end_sizeAsHelp[604101] _end_sizeAsHelp[604101]
    }
    unknown call_tmp[790200] "expr temp" "maybe param" "maybe type" "temp"
    (790203 'move' call_tmp[790200](113144 call stride _mt[203] this[113084]))
    unknown call_tmp[790205] "expr temp" "maybe param" "maybe type" "temp"
    (790208 'move' call_tmp[790205](113142 call abs call_tmp[790200]))
    unknown call_tmp[790210] "maybe param" "maybe type" "temp"
    (790213 'move' call_tmp[790210](113139 call : call_tmp[790205] uint(64)[86]))
    const s[113138] "dead at end of block" "const" "insert auto destroy"
    (645273 'init var' s[113138] call_tmp[790210])
    (113149 'end of statement')
    unknown call_tmp[790215] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (790218 'move' call_tmp[790215](113155 'typeof' al[113111]))
    unknown call_tmp[790220] "maybe param" "maybe type" "temp"
    (790223 'move' call_tmp[790220](113153 call numBits call_tmp[790215]))
    unknown width[113151] "dead at end of block" "param"
    (645275 'init var' width[113151] call_tmp[790220])
    (113157 'end of statement')
    unknown call_tmp[790225] "expr temp" "maybe param" "maybe type" "temp"
    (790228 'move' call_tmp[790225](113172 call uint(64)[86] width[113151]))
    unknown call_tmp[790230] "expr temp" "maybe param" "maybe type" "temp"
    (790233 'move' call_tmp[790230](113168 call : ah[113118] call_tmp[790225]))
    unknown call_tmp[790235] "expr temp" "maybe param" "maybe type" "temp"
    (790238 'move' call_tmp[790235](113178 call uint(64)[86] width[113151]))
    unknown call_tmp[790240] "expr temp" "maybe param" "maybe type" "temp"
    (790243 'move' call_tmp[790240](113174 call : al[113111] call_tmp[790235]))
    unknown call_tmp[790245] "expr temp" "maybe param" "maybe type" "temp"
    (790248 'move' call_tmp[790245](113166 call - call_tmp[790230] call_tmp[790240]))
    unknown call_tmp[790250] "expr temp" "maybe param" "maybe type" "temp"
    (790253 'move' call_tmp[790250](113164 call : call_tmp[790245] uint(64)[86]))
    unknown call_tmp[790255] "expr temp" "maybe param" "maybe type" "temp"
    (790258 'move' call_tmp[790255](113162 call / call_tmp[790250] s[113138]))
    unknown call_tmp[790260] "maybe param" "maybe type" "temp"
    (790263 'move' call_tmp[790260](113160 call + call_tmp[790255] 1))
    const lenAsUint[113159] "dead at end of block" "const" "insert auto destroy"
    (645277 'init var' lenAsUint[113159] call_tmp[790260])
    (113184 'end of statement' al[113111] ah[113118] s[113138])
    unknown tmp[484200] "maybe param" "temp"
    (484211 'move' tmp[484200] 1)
    unknown call_tmp[790265] "expr temp" "maybe param" "maybe type" "temp"
    (790268 'move' call_tmp[790265](484213 call _cond_invalid tmp[484200]))
    if call_tmp[790265]
    {
      (484216 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[673282] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[673283] "maybe param" "temp"
    unknown call_tmp[790270] "expr temp" "maybe param" "maybe type" "temp"
    (790273 'move' call_tmp[790270](484201 call isTrue tmp[484200]))
    (673288 'move' tmp[673283](673286 call _cond_test call_tmp[790270]))
    if tmp[673283]
    {
      unknown tmp[484221] "maybe param" "temp"
      (484232 'move' tmp[484221](113219 call == lenAsUint[113159] 0))
      unknown call_tmp[790275] "expr temp" "maybe param" "maybe type" "temp"
      (790278 'move' call_tmp[790275](484234 call _cond_invalid tmp[484221]))
      if call_tmp[790275]
      {
        (484237 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[673255] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[673256] "maybe param" "temp"
      unknown call_tmp[790280] "expr temp" "maybe param" "maybe type" "temp"
      (790283 'move' call_tmp[790280](484222 call isTrue tmp[484221]))
      (673261 'move' tmp[673256](673259 call _cond_test call_tmp[790280]))
      if tmp[673256]
      {
        (673266 'move' tmp[673255](673263 '_paramFoldLogical' tmp[673256] 1))
      }
      {
        unknown tmp[673268] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[790285] "expr temp" "maybe param" "maybe type" "temp"
        (790288 'move' call_tmp[790285](113227 call max t[113088]))
        unknown call_tmp[790290] "expr temp" "maybe param" "maybe type" "temp"
        (790293 'move' call_tmp[790290](113223 call > lenAsUint[113159] call_tmp[790285]))
        (673270 'move' tmp[673268](484226 call isTrue call_tmp[790290]))
        (673275 'move' tmp[673255](673272 '_paramFoldLogical' tmp[673256] tmp[673268]))
      }
      unknown tmp[673290] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (673292 'move' tmp[673290](484204 call isTrue tmp[673255]))
      (673297 'move' tmp[673282](673294 '_paramFoldLogical' tmp[673283] tmp[673290]))
    }
    {
      (673302 'move' tmp[673282](673299 '_paramFoldLogical' tmp[673283] 0))
    }
    unknown call_tmp[790295] "expr temp" "maybe param" "maybe type" "temp"
    (790298 'move' call_tmp[790295](113229 call _cond_test tmp[673282]))
    if call_tmp[790295]
    {
      unknown call_tmp[790300] "expr temp" "maybe param" "maybe type" "temp"
      (790303 'move' call_tmp[790300](113202 call : t[113088] string[244]))
      unknown call_tmp[790305] "expr temp" "maybe param" "maybe type" "temp"
      (790308 'move' call_tmp[790305](113197 call + "range.size exceeds max(" call_tmp[790300]))
      unknown call_tmp[790310] "expr temp" "maybe param" "maybe type" "temp"
      (790313 'move' call_tmp[790310](113195 call + call_tmp[790305] ") for: '"))
      unknown call_tmp[790315] "expr temp" "maybe param" "maybe type" "temp"
      (790318 'move' call_tmp[790315](113209 call : this[113084] string[244]))
      unknown call_tmp[790320] "expr temp" "maybe param" "maybe type" "temp"
      (790323 'move' call_tmp[790320](113193 call + call_tmp[790310] call_tmp[790315]))
      unknown call_tmp[790325] "expr temp" "maybe param" "maybe type" "temp"
      (790328 'move' call_tmp[790325](113191 call + call_tmp[790320] "'"))
      (113190 call boundsCheckHalt module=[222] HaltWrappers[518] call_tmp[790325])
      (401438 'referenced modules list' HaltWrappers[518])
    }
    unknown call_tmp[790330] "expr temp" "maybe param" "maybe type" "temp"
    (790333 'move' call_tmp[790330](113234 call : lenAsUint[113159] t[113088]))
    (604115 'move' ret[604103](604114 'coerce' call_tmp[790330] t[113088]))
    gotoReturn _end_sizeAsHelp[604101] _end_sizeAsHelp[604101]
    (551948 'end of statement' lenAsUint[113159])
    label _end_sizeAsHelp[604101]
    (604105 return ret[604103])
  }
  { scopeless type
    t[113088]
  }
  function range[240](?).chpl_sizeAsForIter[113241](arg _mt[113251]:_MT[201], arg this[113244]:range[240](?) :
  range[240](?), arg t[113248]:integral[159](?)) : _unknown[42] "method"
  {
    unknown ret[604121] "RVV" "temp"
    unknown call_tmp[790337] "expr temp" "maybe param" "maybe type" "temp"
    (790340 'move' call_tmp[790337](426907 call idxType _mt[203] this[113244]))
    unknown call_tmp[790342] "expr temp" "maybe param" "maybe type" "temp"
    (790345 'move' call_tmp[790342](113269 call chpl__singleValIdxType call_tmp[790337]))
    unknown call_tmp[790347] "expr temp" "maybe param" "maybe type" "temp"
    (790350 'move' call_tmp[790347](113271 call _cond_test call_tmp[790342]))
    if call_tmp[790347]
    {
      unknown call_tmp[790354] "expr temp" "maybe param" "maybe type" "temp"
      (790357 'move' call_tmp[790354](426897 call _low _mt[203] this[113244]))
      unknown call_tmp[790361] "expr temp" "maybe param" "maybe type" "temp"
      (790364 'move' call_tmp[790361](426902 call _high _mt[203] this[113244]))
      unknown call_tmp[790366] "expr temp" "maybe param" "maybe type" "temp"
      (790369 'move' call_tmp[790366](113259 call > call_tmp[790354] call_tmp[790361]))
      unknown call_tmp[790371] "expr temp" "maybe param" "maybe type" "temp"
      (790374 'move' call_tmp[790371](113263 call _cond_test call_tmp[790366]))
      if call_tmp[790371]
      {
        (604127 'move' ret[604121](604126 'coerce' 0 t[113248]))
        gotoReturn _end_chpl_sizeAsForIter[604119] _end_chpl_sizeAsForIter[604119]
      }
    }
    unknown tmp[484242] "maybe param" "temp"
    unknown call_tmp[790378] "expr temp" "maybe param" "maybe type" "temp"
    (790381 'move' call_tmp[790378](113302 call bounds _mt[203] this[113244]))
    (484253 'move' tmp[484242](113299 call != call_tmp[790378] both[107114]))
    unknown call_tmp[790383] "expr temp" "maybe param" "maybe type" "temp"
    (790386 'move' call_tmp[790383](484255 call _cond_invalid tmp[484242]))
    if call_tmp[790383]
    {
      (484258 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[673309] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[673310] "maybe param" "temp"
    unknown call_tmp[790388] "expr temp" "maybe param" "maybe type" "temp"
    (790391 'move' call_tmp[790388](484243 call isTrue tmp[484242]))
    (673315 'move' tmp[673310](673313 call _cond_test call_tmp[790388]))
    if tmp[673310]
    {
      unknown tmp[673317] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[790395] "expr temp" "maybe param" "maybe type" "temp"
      (790398 'move' call_tmp[790395](426922 call idxType _mt[203] this[113244]))
      unknown call_tmp[790400] "expr temp" "maybe param" "maybe type" "temp"
      (790403 'move' call_tmp[790400](113310 call isFiniteIdxType call_tmp[790395]))
      (673319 'move' tmp[673317](484246 call isTrue call_tmp[790400]))
      (673324 'move' tmp[673309](673321 '_paramFoldLogical' tmp[673310] tmp[673317]))
    }
    {
      (673329 'move' tmp[673309](673326 '_paramFoldLogical' tmp[673310] 0))
    }
    unknown call_tmp[790405] "expr temp" "maybe param" "maybe type" "temp"
    (790408 'move' call_tmp[790405](113312 call _cond_test tmp[673309]))
    if call_tmp[790405]
    {
      unknown call_tmp[790414] "expr temp" "maybe param" "maybe type" "temp"
      (790417 'move' call_tmp[790414](113283 call chpl_alignedLowAsIntForIter _mt[203] this[113244]))
      unknown call_tmp[790421] "expr temp" "maybe param" "maybe type" "temp"
      (790424 'move' call_tmp[790421](113289 call chpl_alignedHighAsIntForIter _mt[203] this[113244]))
      unknown call_tmp[790426] "expr temp" "maybe param" "maybe type" "temp"
      (790429 'move' call_tmp[790426](113278 call(426911 call (partial) sizeAsHelp _mt[203] this[113244]) t[113248] call_tmp[790414] call_tmp[790421]))
      (604133 'move' ret[604121](604132 'coerce' call_tmp[790426] t[113248]))
      gotoReturn _end_chpl_sizeAsForIter[604119] _end_chpl_sizeAsForIter[604119]
    }
    {
      unknown call_tmp[790433] "expr temp" "maybe param" "maybe type" "temp"
      (790436 'move' call_tmp[790433](113295 call(426916 call (partial) sizeAs _mt[203] this[113244]) t[113248]))
      (604139 'move' ret[604121](604138 'coerce' call_tmp[790433] t[113248]))
      gotoReturn _end_chpl_sizeAsForIter[604119] _end_chpl_sizeAsForIter[604119]
    }
    label _end_chpl_sizeAsForIter[604119]
    (604123 return ret[604121])
  }
  { scopeless type
    t[113248]
  }
  function hasFirstLastAreParam[113319](arg r[113321]:_any[141](?)) param : _unknown[42] "private"
  {
    unknown ret[604145] "RVV" "param" "temp"
    {
      unknown tmp[113396] "expr temp" "maybe param" "maybe type" "temp"
      (113398 'move' tmp[113396](113325 call bounds _mt[203] r[113321]))
      unknown call_tmp[790440] "expr temp" "maybe param" "maybe type" "temp"
      (790443 'move' call_tmp[790440](113400 call == tmp[113396] both[107114]))
      unknown call_tmp[790445] "expr temp" "maybe param" "maybe type" "temp"
      (790448 'move' call_tmp[790445](113403 call _cond_test call_tmp[790440]))
      if call_tmp[790445]
      {
        (604150 'move' ret[604145](604149 'deref' 0))
        gotoReturn _end_hasFirstLastAreParam[604143] _end_hasFirstLastAreParam[604143]
      }
      {
        unknown call_tmp[790450] "expr temp" "maybe param" "maybe type" "temp"
        (790453 'move' call_tmp[790450](113406 call == tmp[113396] low[107116]))
        unknown call_tmp[790455] "expr temp" "maybe param" "maybe type" "temp"
        (790458 'move' call_tmp[790455](113409 call _cond_test call_tmp[790450]))
        if call_tmp[790455]
        {
          unknown call_tmp[790462] "expr temp" "maybe param" "maybe type" "temp"
          (790465 'move' call_tmp[790462](113351 call(113348 call (partial) hasPosNegUnitStride _mt[203] r[113321])))
          (604155 'move' ret[604145](604154 'deref' call_tmp[790462]))
          gotoReturn _end_hasFirstLastAreParam[604143] _end_hasFirstLastAreParam[604143]
        }
        {
          unknown call_tmp[790467] "expr temp" "maybe param" "maybe type" "temp"
          (790470 'move' call_tmp[790467](113413 call == tmp[113396] high[107118]))
          unknown call_tmp[790472] "expr temp" "maybe param" "maybe type" "temp"
          (790475 'move' call_tmp[790472](113416 call _cond_test call_tmp[790467]))
          if call_tmp[790472]
          {
            unknown call_tmp[790479] "expr temp" "maybe param" "maybe type" "temp"
            (790482 'move' call_tmp[790479](113366 call(113363 call (partial) hasPosNegUnitStride _mt[203] r[113321])))
            (604160 'move' ret[604145](604159 'deref' call_tmp[790479]))
            gotoReturn _end_hasFirstLastAreParam[604143] _end_hasFirstLastAreParam[604143]
          }
          {
            unknown call_tmp[790484] "expr temp" "maybe param" "maybe type" "temp"
            (790487 'move' call_tmp[790484](113420 call == tmp[113396] neither[107120]))
            unknown call_tmp[790489] "expr temp" "maybe param" "maybe type" "temp"
            (790492 'move' call_tmp[790489](113423 call _cond_test call_tmp[790484]))
            if call_tmp[790489]
            {
              unknown tmp[673336] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[673337] "maybe param" "temp"
              unknown call_tmp[790496] "expr temp" "maybe param" "maybe type" "temp"
              (790499 'move' call_tmp[790496](113380 call idxType _mt[203] r[113321]))
              unknown call_tmp[790501] "expr temp" "maybe param" "maybe type" "temp"
              (790504 'move' call_tmp[790501](113378 call isFiniteIdxType call_tmp[790496]))
              (673342 'move' tmp[673337](673340 call _cond_test call_tmp[790501]))
              if tmp[673337]
              {
                unknown tmp[673344] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                (673346 'move' tmp[673344](113387 call(113384 call (partial) hasPosNegUnitStride _mt[203] r[113321])))
                (673351 'move' tmp[673336](673348 '_paramFoldLogical' tmp[673337] tmp[673344]))
              }
              {
                (673356 'move' tmp[673336](673353 '_paramFoldLogical' tmp[673337] 1))
              }
              (604165 'move' ret[604145](604164 'deref' tmp[673336]))
              gotoReturn _end_hasFirstLastAreParam[604143] _end_hasFirstLastAreParam[604143]
            }
          }
        }
      }
    }
    label _end_hasFirstLastAreParam[604143]
    (604147 return ret[604145])
  }
  function range[240](?).hasFirst[113429](arg _mt[113435]:_MT[201], arg this[113432]:range[240](?) :
  range[240](?)) : _unknown[42] "inline" "method"
  {
    unknown ret[604171] "RVV" "temp"
    (113439 call warnUnstableFirst this[113432](fromHasFirst = 1))
    (551958 'end of statement')
    unknown call_tmp[790510] "expr temp" "maybe param" "maybe type" "temp"
    (790513 'move' call_tmp[790510](113445 call(426927 call (partial) hasFirstForIter _mt[203] this[113432])))
    (604176 'move' ret[604171](604175 'deref' call_tmp[790510]))
    (604173 return ret[604171])
  }
  function range[240](?).hasFirstForIter[113448](arg _mt[113454]:_MT[201], arg this[113451]:range[240](?) :
  range[240](?)) : _unknown[42] "inline" "method"
  {
    unknown ret[604180] "RVV" "temp"
    unknown tmp[484263] "maybe param" "temp"
    unknown call_tmp[790517] "expr temp" "maybe param" "maybe type" "temp"
    (790520 'move' call_tmp[790517](113463 call(426931 call (partial) isAligned _mt[203] this[113451])))
    (484274 'move' tmp[484263](113460 call ! call_tmp[790517]))
    unknown call_tmp[790522] "expr temp" "maybe param" "maybe type" "temp"
    (790525 'move' call_tmp[790522](484276 call _cond_invalid tmp[484263]))
    if call_tmp[790522]
    {
      (484279 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[673363] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[673364] "maybe param" "temp"
    unknown call_tmp[790527] "expr temp" "maybe param" "maybe type" "temp"
    (790530 'move' call_tmp[790527](484264 call isTrue tmp[484263]))
    (673369 'move' tmp[673364](673367 call _cond_test call_tmp[790527]))
    if tmp[673364]
    {
      (673374 'move' tmp[673363](673371 '_paramFoldLogical' tmp[673364] 1))
    }
    {
      unknown tmp[673376] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[790534] "expr temp" "maybe param" "maybe type" "temp"
      (790537 'move' call_tmp[790534](113465 call(426935 call (partial) isEmpty _mt[203] this[113451])))
      (673378 'move' tmp[673376](484268 call isTrue call_tmp[790534]))
      (673383 'move' tmp[673363](673380 '_paramFoldLogical' tmp[673364] tmp[673376]))
    }
    unknown tmp[673444] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[673445] "maybe param" "temp"
    (673450 'move' tmp[673445](673448 call _cond_test tmp[673363]))
    if tmp[673445]
    {
      (673455 'move' tmp[673444](673452 '_paramFoldLogical' tmp[673445] 0))
    }
    {
      unknown tmp[673421] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[673422] "maybe param" "temp"
      unknown call_tmp[790541] "expr temp" "maybe param" "maybe type" "temp"
      (790544 'move' call_tmp[790541](426940 call idxType _mt[203] this[113451]))
      unknown call_tmp[790546] "expr temp" "maybe param" "maybe type" "temp"
      (790549 'move' call_tmp[790546](113468 call isFiniteIdxType call_tmp[790541]))
      (673427 'move' tmp[673422](673425 call _cond_test call_tmp[790546]))
      if tmp[673422]
      {
        (673432 'move' tmp[673421](673429 '_paramFoldLogical' tmp[673422] 1))
      }
      {
        unknown tmp[673390] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[673391] "maybe param" "temp"
        unknown call_tmp[790553] "expr temp" "maybe param" "maybe type" "temp"
        (790556 'move' call_tmp[790553](113472 call(426944 call (partial) hasPositiveStride _mt[203] this[113451])))
        (673396 'move' tmp[673391](673394 call _cond_test call_tmp[790553]))
        if tmp[673391]
        {
          unknown tmp[673398] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (673400 'move' tmp[673398](113474 call(426948 call (partial) hasLowBound _mt[203] this[113451])))
          (673405 'move' tmp[673390](673402 '_paramFoldLogical' tmp[673391] tmp[673398]))
        }
        {
          unknown tmp[673407] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (673409 'move' tmp[673407](113476 call(426952 call (partial) hasHighBound _mt[203] this[113451])))
          (673414 'move' tmp[673390](673411 '_paramFoldLogical' tmp[673391] tmp[673407]))
        }
        (673437 'move' tmp[673421](673434 '_paramFoldLogical' tmp[673422] tmp[673390]))
      }
      (673460 'move' tmp[673444](673457 '_paramFoldLogical' tmp[673445] tmp[673421]))
    }
    (604185 'move' ret[604180](604184 'deref' tmp[673444]))
    (604182 return ret[604180])
  }
  function range[240](?).hasFirst[113488](arg _mt[113494]:_MT[201], arg this[113491]:range[240](?) :
  range[240](?)) param : _unknown[42] "method"
  {
    unknown ret[604189] "RVV" "param" "temp"
    (113501 call warnUnstableFirst this[113491](fromHasFirst = 1))
    (551962 'end of statement')
    unknown call_tmp[790564] "expr temp" "maybe param" "maybe type" "temp"
    (790567 'move' call_tmp[790564](113507 call(426958 call (partial) hasFirstForIter _mt[203] this[113491])))
    (604194 'move' ret[604189](604193 'deref' call_tmp[790564]))
    (604191 return ret[604189])
  }
  where {
    (113497 call hasFirstLastAreParam this[113491])
  }
  function range[240](?).hasFirstForIter[113511](arg _mt[113517]:_MT[201], arg this[113514]:range[240](?) :
  range[240](?)) param : _unknown[42] "method"
  {
    unknown ret[604198] "RVV" "param" "temp"
    unknown call_tmp[790571] "expr temp" "maybe param" "maybe type" "temp"
    (790574 'move' call_tmp[790571](426964 call idxType _mt[203] this[113514]))
    unknown call_tmp[790576] "expr temp" "maybe param" "maybe type" "temp"
    (790579 'move' call_tmp[790576](113527 call isFiniteIdxType call_tmp[790571]))
    unknown call_tmp[790581] "expr temp" "maybe param" "maybe type" "temp"
    (790584 'move' call_tmp[790581](113529 call _cond_test call_tmp[790576]))
    if call_tmp[790581]
    {
      (604203 'move' ret[604198](604202 'deref' 1))
      gotoReturn _end_hasFirstForIter[604196] _end_hasFirstForIter[604196]
    }
    {
      unknown tmp[113578] "expr temp" "maybe param" "maybe type" "temp"
      (113580 'move' tmp[113578](426969 call bounds _mt[203] this[113514]))
      unknown call_tmp[790588] "expr temp" "maybe param" "maybe type" "temp"
      (790591 'move' call_tmp[790588](113582 call == tmp[113578] low[107116]))
      unknown call_tmp[790593] "expr temp" "maybe param" "maybe type" "temp"
      (790596 'move' call_tmp[790593](113585 call _cond_test call_tmp[790588]))
      if call_tmp[790593]
      {
        unknown call_tmp[790600] "expr temp" "maybe param" "maybe type" "temp"
        (790603 'move' call_tmp[790600](401459 call strides _mt[203] this[113514]))
        unknown call_tmp[790607] "expr temp" "maybe param" "maybe type" "temp"
        (790610 'move' call_tmp[790607](113547 call(113544 call (partial) isPositive _mt[203] call_tmp[790600])))
        (604208 'move' ret[604198](604207 'deref' call_tmp[790607]))
        gotoReturn _end_hasFirstForIter[604196] _end_hasFirstForIter[604196]
      }
      {
        unknown call_tmp[790612] "expr temp" "maybe param" "maybe type" "temp"
        (790615 'move' call_tmp[790612](113588 call == tmp[113578] high[107118]))
        unknown call_tmp[790617] "expr temp" "maybe param" "maybe type" "temp"
        (790620 'move' call_tmp[790617](113591 call _cond_test call_tmp[790612]))
        if call_tmp[790617]
        {
          unknown call_tmp[790624] "expr temp" "maybe param" "maybe type" "temp"
          (790627 'move' call_tmp[790624](401465 call strides _mt[203] this[113514]))
          unknown call_tmp[790631] "expr temp" "maybe param" "maybe type" "temp"
          (790634 'move' call_tmp[790631](113562 call(113559 call (partial) isNegative _mt[203] call_tmp[790624])))
          (604213 'move' ret[604198](604212 'deref' call_tmp[790631]))
          gotoReturn _end_hasFirstForIter[604196] _end_hasFirstForIter[604196]
        }
        {
          unknown call_tmp[790636] "expr temp" "maybe param" "maybe type" "temp"
          (790639 'move' call_tmp[790636](113595 call == tmp[113578] neither[107120]))
          unknown call_tmp[790641] "expr temp" "maybe param" "maybe type" "temp"
          (790644 'move' call_tmp[790641](113598 call _cond_test call_tmp[790636]))
          if call_tmp[790641]
          {
            (604218 'move' ret[604198](604217 'deref' 0))
            gotoReturn _end_hasFirstForIter[604196] _end_hasFirstForIter[604196]
          }
        }
      }
    }
    label _end_hasFirstForIter[604196]
    (604200 return ret[604198])
  }
  where {
    (113520 call hasFirstLastAreParam this[113514])
  }
  function range[240](?).first[113605](arg _mt[113611]:_MT[201], arg this[113608]:range[240](?) :
  range[240](?)) : _unknown[42] "inline" "method" "no parens"
  {
    unknown ret[604224] "RVV" "temp"
    (113615 call warnUnstableFirst this[113608](fromHasFirst = 0))
    (551968 'end of statement')
    unknown call_tmp[790650] "expr temp" "maybe param" "maybe type" "temp"
    (790653 'move' call_tmp[790650](113625 call firstAsInt _mt[203] this[113608]))
    unknown call_tmp[790655] "expr temp" "maybe param" "maybe type" "temp"
    (790658 'move' call_tmp[790655](113621 call(426974 call (partial) chpl_intToIdx _mt[203] this[113608]) call_tmp[790650]))
    (604229 'move' ret[604224](604228 'deref' call_tmp[790655]))
    (604226 return ret[604224])
  }
  function warnUnstableFirst[113630](arg r[113632]:_any[141](?), param arg fromHasFirst[113634]:_any[141](?)) : _unknown[42] "inline" "private" "no return value for void"
  {
    unknown tmp[484284] "maybe param" "temp"
    (484295 'move' tmp[484284](113641 call ! 0))
    unknown call_tmp[790660] "expr temp" "maybe param" "maybe type" "temp"
    (790663 'move' call_tmp[790660](484297 call _cond_invalid tmp[484284]))
    if call_tmp[790660]
    {
      (484300 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[673467] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[673468] "maybe param" "temp"
    unknown call_tmp[790665] "expr temp" "maybe param" "maybe type" "temp"
    (790668 'move' call_tmp[790665](484285 call isTrue tmp[484284]))
    (673473 'move' tmp[673468](673471 call _cond_test call_tmp[790665]))
    if tmp[673468]
    {
      (673478 'move' tmp[673467](673475 '_paramFoldLogical' tmp[673468] 1))
    }
    {
      unknown tmp[673480] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[790672] "expr temp" "maybe param" "maybe type" "temp"
      (790675 'move' call_tmp[790672](113649 call idxType _mt[203] r[113632]))
      unknown call_tmp[790677] "expr temp" "maybe param" "maybe type" "temp"
      (790680 'move' call_tmp[790677](113647 call isFiniteIdxType call_tmp[790672]))
      unknown call_tmp[790682] "expr temp" "maybe param" "maybe type" "temp"
      (790685 'move' call_tmp[790682](113644 call ! call_tmp[790677]))
      (673482 'move' tmp[673480](484289 call isTrue call_tmp[790682]))
      (673487 'move' tmp[673467](673484 '_paramFoldLogical' tmp[673468] tmp[673480]))
    }
    unknown call_tmp[790687] "expr temp" "maybe param" "maybe type" "temp"
    (790690 'move' call_tmp[790687](113652 call _cond_test tmp[673467]))
    if call_tmp[790687]
    {
      gotoReturn _end_warnUnstableFirst[604231] _end_warnUnstableFirst[604231]
    }
    unknown call_tmp[790694] "expr temp" "maybe param" "maybe type" "temp"
    (790697 'move' call_tmp[790694](113722 call(113719 call (partial) hasLowBound _mt[203] r[113632])))
    unknown call_tmp[790699] "expr temp" "maybe param" "maybe type" "temp"
    (790702 'move' call_tmp[790699](113716 call ! call_tmp[790694]))
    unknown call_tmp[790704] "expr temp" "maybe param" "maybe type" "temp"
    (790707 'move' call_tmp[790704](113723 call _cond_test call_tmp[790699]))
    if call_tmp[790704]
    {
      unknown call_tmp[790711] "expr temp" "maybe param" "maybe type" "temp"
      (790714 'move' call_tmp[790711](113704 call strides _mt[203] r[113632]))
      unknown call_tmp[790718] "expr temp" "maybe param" "maybe type" "temp"
      (790721 'move' call_tmp[790718](113710 call(113707 call (partial) isPositive _mt[203] call_tmp[790711])))
      unknown call_tmp[790723] "expr temp" "maybe param" "maybe type" "temp"
      (790726 'move' call_tmp[790723](113711 call _cond_test call_tmp[790718]))
      if call_tmp[790723]
      {
        unknown call_tmp[790728] "expr temp" "maybe param" "maybe type" "temp"
        (790731 'move' call_tmp[790728](113672 call _cond_test fromHasFirst[113634]))
        if call_tmp[790728]
        {
          (113660 call compilerWarning "range.hasFirst() is unstable for a range over an enum or bool if it has a positive stride and no low bound")
        }
        {
          (113666 call compilerWarning "range.first is unstable for a range over an enum or bool if it has a positive stride and no low bound")
        }
      }
      {
        unknown call_tmp[790735] "expr temp" "maybe param" "maybe type" "temp"
        (790738 'move' call_tmp[790735](113698 call(113695 call (partial) hasPositiveStride _mt[203] r[113632])))
        unknown call_tmp[790740] "expr temp" "maybe param" "maybe type" "temp"
        (790743 'move' call_tmp[790740](113699 call _cond_test call_tmp[790735]))
        if call_tmp[790740]
        {
          unknown call_tmp[790745] "expr temp" "maybe param" "maybe type" "temp"
          (790748 'move' call_tmp[790745](113688 call _cond_test fromHasFirst[113634]))
          if call_tmp[790745]
          {
            (113680 call warning "range.hasFirst() is unstable for a range over an enum or bool if it has a positive stride and no low bound")
          }
          {
            (113684 call warning "range.first is unstable for a range over an enum or bool if it has a positive stride and no low bound")
          }
        }
      }
    }
    unknown call_tmp[790752] "expr temp" "maybe param" "maybe type" "temp"
    (790755 'move' call_tmp[790752](113792 call(113789 call (partial) hasHighBound _mt[203] r[113632])))
    unknown call_tmp[790757] "expr temp" "maybe param" "maybe type" "temp"
    (790760 'move' call_tmp[790757](113786 call ! call_tmp[790752]))
    unknown call_tmp[790762] "expr temp" "maybe param" "maybe type" "temp"
    (790765 'move' call_tmp[790762](113793 call _cond_test call_tmp[790757]))
    if call_tmp[790762]
    {
      unknown call_tmp[790769] "expr temp" "maybe param" "maybe type" "temp"
      (790772 'move' call_tmp[790769](113774 call strides _mt[203] r[113632]))
      unknown call_tmp[790776] "expr temp" "maybe param" "maybe type" "temp"
      (790779 'move' call_tmp[790776](113780 call(113777 call (partial) isNegative _mt[203] call_tmp[790769])))
      unknown call_tmp[790781] "expr temp" "maybe param" "maybe type" "temp"
      (790784 'move' call_tmp[790781](113781 call _cond_test call_tmp[790776]))
      if call_tmp[790781]
      {
        unknown call_tmp[790786] "expr temp" "maybe param" "maybe type" "temp"
        (790789 'move' call_tmp[790786](113742 call _cond_test fromHasFirst[113634]))
        if call_tmp[790786]
        {
          (113730 call compilerWarning "range.hasFirst() is unstable for a range over an enum or bool if it has a negative stride and no high bound")
        }
        {
          (113736 call compilerWarning "range.first is unstable for a range over an enum or bool if it has a negative stride and no high bound")
        }
      }
      {
        unknown call_tmp[790793] "expr temp" "maybe param" "maybe type" "temp"
        (790796 'move' call_tmp[790793](113768 call(113765 call (partial) hasNegativeStride _mt[203] r[113632])))
        unknown call_tmp[790798] "expr temp" "maybe param" "maybe type" "temp"
        (790801 'move' call_tmp[790798](113769 call _cond_test call_tmp[790793]))
        if call_tmp[790798]
        {
          unknown call_tmp[790803] "expr temp" "maybe param" "maybe type" "temp"
          (790806 'move' call_tmp[790803](113758 call _cond_test fromHasFirst[113634]))
          if call_tmp[790803]
          {
            (113750 call warning "range.hasFirst() is unstable for a range over an enum or bool if it has a negative stride and no high bound")
          }
          {
            (113754 call warning "range.first is unstable for a range over an enum or bool if it has a negative stride and no high bound")
          }
        }
      }
    }
    label _end_warnUnstableFirst[604231]
    (604233 return _void[46])
  }
  function range[240](?).firstAsInt[113799](arg _mt[113805]:_MT[201], arg this[113802]:range[240](?) :
  range[240](?)) : _unknown[42] "inline" "method" "no parens"
  {
    unknown ret[604239] "RVV" "temp"
    unknown tmp[673494] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[673495] "maybe param" "temp"
    unknown call_tmp[790810] "expr temp" "maybe param" "maybe type" "temp"
    (790813 'move' call_tmp[790810](113810 call(426983 call (partial) hasPositiveStride _mt[203] this[113802])))
    (673500 'move' tmp[673495](673498 call _cond_test call_tmp[790810]))
    if tmp[673495]
    {
      unknown tmp[673502] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (673504 'move' tmp[673502](113812 call alignedLowAsInt _mt[203] this[113802]))
      (673509 'move' tmp[673494](673506 '_paramFoldLogical' tmp[673495] tmp[673502]))
    }
    {
      unknown tmp[673511] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (673513 'move' tmp[673511](113816 call alignedHighAsInt _mt[203] this[113802]))
      (673518 'move' tmp[673494](673515 '_paramFoldLogical' tmp[673495] tmp[673511]))
    }
    (604244 'move' ret[604239](604243 'deref' tmp[673494]))
    (604241 return ret[604239])
  }
  function range[240](?).chpl_firstAsIntForIter[113824](arg _mt[113830]:_MT[201], arg this[113827]:range[240](?) :
  range[240](?)) : _unknown[42] "inline" "method" "no parens"
  {
    unknown ret[604248] "RVV" "temp"
    unknown call_tmp[790821] "expr temp" "maybe param" "maybe type" "temp"
    (790824 'move' call_tmp[790821](113933 call bounds _mt[203] this[113827]))
    unknown call_tmp[790826] "expr temp" "maybe param" "maybe type" "temp"
    (790829 'move' call_tmp[790826](113930 call == call_tmp[790821] both[107114]))
    unknown call_tmp[790831] "expr temp" "maybe param" "maybe type" "temp"
    (790834 'move' call_tmp[790831](113940 call _cond_test call_tmp[790826]))
    if call_tmp[790831]
    {
      unknown call_tmp[790838] "expr temp" "maybe param" "maybe type" "temp"
      (790841 'move' call_tmp[790838](113836 call firstAsInt _mt[203] this[113827]))
      (604253 'move' ret[604248](604252 'deref' call_tmp[790838]))
      gotoReturn _end_chpl_firstAsIntForIter[604246] _end_chpl_firstAsIntForIter[604246]
    }
    {
      unknown call_tmp[790845] "expr temp" "maybe param" "maybe type" "temp"
      (790848 'move' call_tmp[790845](401487 call strides _mt[203] this[113827]))
      unknown call_tmp[790852] "expr temp" "maybe param" "maybe type" "temp"
      (790855 'move' call_tmp[790852](113924 call(113921 call (partial) isOne _mt[203] call_tmp[790845])))
      unknown call_tmp[790857] "expr temp" "maybe param" "maybe type" "temp"
      (790860 'move' call_tmp[790857](113925 call _cond_test call_tmp[790852]))
      if call_tmp[790857]
      {
        unknown call_tmp[790862] "expr temp" "maybe param" "maybe type" "temp"
        (790865 'move' call_tmp[790862](113845 call lowBoundForIter this[113827]))
        unknown call_tmp[790867] "expr temp" "maybe param" "maybe type" "temp"
        (790870 'move' call_tmp[790867](113843 call chpl__idxToInt call_tmp[790862]))
        (604258 'move' ret[604248](604257 'deref' call_tmp[790867]))
        gotoReturn _end_chpl_firstAsIntForIter[604246] _end_chpl_firstAsIntForIter[604246]
      }
      {
        unknown call_tmp[790874] "expr temp" "maybe param" "maybe type" "temp"
        (790877 'move' call_tmp[790874](401482 call strides _mt[203] this[113827]))
        unknown call_tmp[790881] "expr temp" "maybe param" "maybe type" "temp"
        (790884 'move' call_tmp[790881](113915 call(113912 call (partial) isNegOne _mt[203] call_tmp[790874])))
        unknown call_tmp[790886] "expr temp" "maybe param" "maybe type" "temp"
        (790889 'move' call_tmp[790886](113916 call _cond_test call_tmp[790881]))
        if call_tmp[790886]
        {
          unknown call_tmp[790891] "expr temp" "maybe param" "maybe type" "temp"
          (790894 'move' call_tmp[790891](113852 call highBoundForIter this[113827]))
          unknown call_tmp[790896] "expr temp" "maybe param" "maybe type" "temp"
          (790899 'move' call_tmp[790896](113850 call chpl__idxToInt call_tmp[790891]))
          (604263 'move' ret[604248](604262 'deref' call_tmp[790896]))
          gotoReturn _end_chpl_firstAsIntForIter[604246] _end_chpl_firstAsIntForIter[604246]
        }
        {
          unknown call_tmp[790903] "expr temp" "maybe param" "maybe type" "temp"
          (790906 'move' call_tmp[790903](113906 call(427021 call (partial) hasPositiveStride _mt[203] this[113827])))
          unknown call_tmp[790908] "expr temp" "maybe param" "maybe type" "temp"
          (790911 'move' call_tmp[790908](113907 call _cond_test call_tmp[790903]))
          if call_tmp[790908]
          {
            unknown call_tmp[790915] "expr temp" "maybe param" "maybe type" "temp"
            (790918 'move' call_tmp[790915](113875 call(427001 call (partial) hasLowBound _mt[203] this[113827])))
            unknown call_tmp[790920] "expr temp" "maybe param" "maybe type" "temp"
            (790923 'move' call_tmp[790920](113876 call _cond_test call_tmp[790915]))
            if call_tmp[790920]
            {
              unknown call_tmp[790925] "expr temp" "maybe param" "maybe type" "temp"
              (790928 'move' call_tmp[790925](113863 call lowBoundForIter this[113827]))
              unknown call_tmp[790930] "expr temp" "maybe param" "maybe type" "temp"
              (790933 'move' call_tmp[790930](113861 call chpl__idxToInt call_tmp[790925]))
              unknown call_tmp[790937] "expr temp" "maybe param" "maybe type" "temp"
              (790940 'move' call_tmp[790937](426991 call _alignment _mt[203] this[113827]))
              unknown call_tmp[790944] "expr temp" "maybe param" "maybe type" "temp"
              (790947 'move' call_tmp[790944](426996 call _stride _mt[203] this[113827]))
              unknown call_tmp[790949] "expr temp" "maybe param" "maybe type" "temp"
              (790952 'move' call_tmp[790949](113859 call helpAlignLow call_tmp[790930] call_tmp[790937] call_tmp[790944]))
              (604268 'move' ret[604248](604267 'deref' call_tmp[790949]))
              gotoReturn _end_chpl_firstAsIntForIter[604246] _end_chpl_firstAsIntForIter[604246]
            }
            {
              unknown call_tmp[790954] "expr temp" "maybe param" "maybe type" "temp"
              (790957 'move' call_tmp[790954](113872 call lowBoundForIter this[113827]))
              unknown call_tmp[790959] "expr temp" "maybe param" "maybe type" "temp"
              (790962 'move' call_tmp[790959](113870 call chpl__idxToInt call_tmp[790954]))
              (604273 'move' ret[604248](604272 'deref' call_tmp[790959]))
              gotoReturn _end_chpl_firstAsIntForIter[604246] _end_chpl_firstAsIntForIter[604246]
            }
          }
          {
            unknown call_tmp[790966] "expr temp" "maybe param" "maybe type" "temp"
            (790969 'move' call_tmp[790966](113900 call(427017 call (partial) hasHighBound _mt[203] this[113827])))
            unknown call_tmp[790971] "expr temp" "maybe param" "maybe type" "temp"
            (790974 'move' call_tmp[790971](113901 call _cond_test call_tmp[790966]))
            if call_tmp[790971]
            {
              unknown call_tmp[790976] "expr temp" "maybe param" "maybe type" "temp"
              (790979 'move' call_tmp[790976](113888 call highBoundForIter this[113827]))
              unknown call_tmp[790981] "expr temp" "maybe param" "maybe type" "temp"
              (790984 'move' call_tmp[790981](113886 call chpl__idxToInt call_tmp[790976]))
              unknown call_tmp[790988] "expr temp" "maybe param" "maybe type" "temp"
              (790991 'move' call_tmp[790988](427007 call _alignment _mt[203] this[113827]))
              unknown call_tmp[790995] "expr temp" "maybe param" "maybe type" "temp"
              (790998 'move' call_tmp[790995](427012 call _stride _mt[203] this[113827]))
              unknown call_tmp[791000] "expr temp" "maybe param" "maybe type" "temp"
              (791003 'move' call_tmp[791000](113884 call helpAlignHigh call_tmp[790981] call_tmp[790988] call_tmp[790995]))
              (604278 'move' ret[604248](604277 'deref' call_tmp[791000]))
              gotoReturn _end_chpl_firstAsIntForIter[604246] _end_chpl_firstAsIntForIter[604246]
            }
            {
              unknown call_tmp[791005] "expr temp" "maybe param" "maybe type" "temp"
              (791008 'move' call_tmp[791005](113897 call highBoundForIter this[113827]))
              unknown call_tmp[791010] "expr temp" "maybe param" "maybe type" "temp"
              (791013 'move' call_tmp[791010](113895 call chpl__idxToInt call_tmp[791005]))
              (604283 'move' ret[604248](604282 'deref' call_tmp[791010]))
              gotoReturn _end_chpl_firstAsIntForIter[604246] _end_chpl_firstAsIntForIter[604246]
            }
          }
        }
      }
    }
    label _end_chpl_firstAsIntForIter[604246]
    (604250 return ret[604248])
  }
  function range[240](?).hasLast[113946](arg _mt[113952]:_MT[201], arg this[113949]:range[240](?) :
  range[240](?)) : _unknown[42] "inline" "method"
  {
    unknown ret[604289] "RVV" "temp"
    (113956 call warnUnstableLast this[113949](fromHasLast = 1))
    (551988 'end of statement')
    unknown call_tmp[791017] "expr temp" "maybe param" "maybe type" "temp"
    (791020 'move' call_tmp[791017](113962 call(427026 call (partial) hasLastForIter _mt[203] this[113949])))
    (604294 'move' ret[604289](604293 'deref' call_tmp[791017]))
    (604291 return ret[604289])
  }
  function range[240](?).hasLastForIter[113965](arg _mt[113971]:_MT[201], arg this[113968]:range[240](?) :
  range[240](?)) : _unknown[42] "inline" "method"
  {
    unknown ret[604298] "RVV" "temp"
    unknown tmp[484305] "maybe param" "temp"
    unknown call_tmp[791024] "expr temp" "maybe param" "maybe type" "temp"
    (791027 'move' call_tmp[791024](113980 call(427030 call (partial) isAligned _mt[203] this[113968])))
    (484316 'move' tmp[484305](113977 call ! call_tmp[791024]))
    unknown call_tmp[791029] "expr temp" "maybe param" "maybe type" "temp"
    (791032 'move' call_tmp[791029](484318 call _cond_invalid tmp[484305]))
    if call_tmp[791029]
    {
      (484321 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[673525] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[673526] "maybe param" "temp"
    unknown call_tmp[791034] "expr temp" "maybe param" "maybe type" "temp"
    (791037 'move' call_tmp[791034](484306 call isTrue tmp[484305]))
    (673531 'move' tmp[673526](673529 call _cond_test call_tmp[791034]))
    if tmp[673526]
    {
      (673536 'move' tmp[673525](673533 '_paramFoldLogical' tmp[673526] 1))
    }
    {
      unknown tmp[673538] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[791041] "expr temp" "maybe param" "maybe type" "temp"
      (791044 'move' call_tmp[791041](113982 call(427034 call (partial) isEmpty _mt[203] this[113968])))
      (673540 'move' tmp[673538](484310 call isTrue call_tmp[791041]))
      (673545 'move' tmp[673525](673542 '_paramFoldLogical' tmp[673526] tmp[673538]))
    }
    unknown tmp[673606] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[673607] "maybe param" "temp"
    (673612 'move' tmp[673607](673610 call _cond_test tmp[673525]))
    if tmp[673607]
    {
      (673617 'move' tmp[673606](673614 '_paramFoldLogical' tmp[673607] 0))
    }
    {
      unknown tmp[673583] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[673584] "maybe param" "temp"
      unknown call_tmp[791048] "expr temp" "maybe param" "maybe type" "temp"
      (791051 'move' call_tmp[791048](427039 call idxType _mt[203] this[113968]))
      unknown call_tmp[791053] "expr temp" "maybe param" "maybe type" "temp"
      (791056 'move' call_tmp[791053](113985 call isFiniteIdxType call_tmp[791048]))
      (673589 'move' tmp[673584](673587 call _cond_test call_tmp[791053]))
      if tmp[673584]
      {
        (673594 'move' tmp[673583](673591 '_paramFoldLogical' tmp[673584] 1))
      }
      {
        unknown tmp[673552] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[673553] "maybe param" "temp"
        unknown call_tmp[791060] "expr temp" "maybe param" "maybe type" "temp"
        (791063 'move' call_tmp[791060](113989 call(427043 call (partial) hasPositiveStride _mt[203] this[113968])))
        (673558 'move' tmp[673553](673556 call _cond_test call_tmp[791060]))
        if tmp[673553]
        {
          unknown tmp[673560] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (673562 'move' tmp[673560](113991 call(427047 call (partial) hasHighBound _mt[203] this[113968])))
          (673567 'move' tmp[673552](673564 '_paramFoldLogical' tmp[673553] tmp[673560]))
        }
        {
          unknown tmp[673569] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (673571 'move' tmp[673569](113993 call(427051 call (partial) hasLowBound _mt[203] this[113968])))
          (673576 'move' tmp[673552](673573 '_paramFoldLogical' tmp[673553] tmp[673569]))
        }
        (673599 'move' tmp[673583](673596 '_paramFoldLogical' tmp[673584] tmp[673552]))
      }
      (673622 'move' tmp[673606](673619 '_paramFoldLogical' tmp[673607] tmp[673583]))
    }
    (604303 'move' ret[604298](604302 'deref' tmp[673606]))
    (604300 return ret[604298])
  }
  function range[240](?).hasLast[114005](arg _mt[114011]:_MT[201], arg this[114008]:range[240](?) :
  range[240](?)) param : _unknown[42] "method"
  {
    unknown ret[604307] "RVV" "param" "temp"
    (114018 call warnUnstableLast this[114008](fromHasLast = 1))
    (551992 'end of statement')
    unknown call_tmp[791071] "expr temp" "maybe param" "maybe type" "temp"
    (791074 'move' call_tmp[791071](114024 call(427057 call (partial) hasLastForIter _mt[203] this[114008])))
    (604312 'move' ret[604307](604311 'deref' call_tmp[791071]))
    (604309 return ret[604307])
  }
  where {
    (114014 call hasFirstLastAreParam this[114008])
  }
  function range[240](?).hasLastForIter[114028](arg _mt[114034]:_MT[201], arg this[114031]:range[240](?) :
  range[240](?)) param : _unknown[42] "method"
  {
    unknown ret[604316] "RVV" "param" "temp"
    unknown call_tmp[791078] "expr temp" "maybe param" "maybe type" "temp"
    (791081 'move' call_tmp[791078](427063 call idxType _mt[203] this[114031]))
    unknown call_tmp[791083] "expr temp" "maybe param" "maybe type" "temp"
    (791086 'move' call_tmp[791083](114044 call isFiniteIdxType call_tmp[791078]))
    unknown call_tmp[791088] "expr temp" "maybe param" "maybe type" "temp"
    (791091 'move' call_tmp[791088](114046 call _cond_test call_tmp[791083]))
    if call_tmp[791088]
    {
      (604321 'move' ret[604316](604320 'deref' 1))
      gotoReturn _end_hasLastForIter[604314] _end_hasLastForIter[604314]
    }
    {
      unknown tmp[114095] "expr temp" "maybe param" "maybe type" "temp"
      (114097 'move' tmp[114095](427068 call bounds _mt[203] this[114031]))
      unknown call_tmp[791095] "expr temp" "maybe param" "maybe type" "temp"
      (791098 'move' call_tmp[791095](114099 call == tmp[114095] low[107116]))
      unknown call_tmp[791100] "expr temp" "maybe param" "maybe type" "temp"
      (791103 'move' call_tmp[791100](114102 call _cond_test call_tmp[791095]))
      if call_tmp[791100]
      {
        unknown call_tmp[791107] "expr temp" "maybe param" "maybe type" "temp"
        (791110 'move' call_tmp[791107](401495 call strides _mt[203] this[114031]))
        unknown call_tmp[791114] "expr temp" "maybe param" "maybe type" "temp"
        (791117 'move' call_tmp[791114](114064 call(114061 call (partial) isNegative _mt[203] call_tmp[791107])))
        (604326 'move' ret[604316](604325 'deref' call_tmp[791114]))
        gotoReturn _end_hasLastForIter[604314] _end_hasLastForIter[604314]
      }
      {
        unknown call_tmp[791119] "expr temp" "maybe param" "maybe type" "temp"
        (791122 'move' call_tmp[791119](114105 call == tmp[114095] high[107118]))
        unknown call_tmp[791124] "expr temp" "maybe param" "maybe type" "temp"
        (791127 'move' call_tmp[791124](114108 call _cond_test call_tmp[791119]))
        if call_tmp[791124]
        {
          unknown call_tmp[791131] "expr temp" "maybe param" "maybe type" "temp"
          (791134 'move' call_tmp[791131](401501 call strides _mt[203] this[114031]))
          unknown call_tmp[791138] "expr temp" "maybe param" "maybe type" "temp"
          (791141 'move' call_tmp[791138](114079 call(114076 call (partial) isPositive _mt[203] call_tmp[791131])))
          (604331 'move' ret[604316](604330 'deref' call_tmp[791138]))
          gotoReturn _end_hasLastForIter[604314] _end_hasLastForIter[604314]
        }
        {
          unknown call_tmp[791143] "expr temp" "maybe param" "maybe type" "temp"
          (791146 'move' call_tmp[791143](114112 call == tmp[114095] neither[107120]))
          unknown call_tmp[791148] "expr temp" "maybe param" "maybe type" "temp"
          (791151 'move' call_tmp[791148](114115 call _cond_test call_tmp[791143]))
          if call_tmp[791148]
          {
            (604336 'move' ret[604316](604335 'deref' 0))
            gotoReturn _end_hasLastForIter[604314] _end_hasLastForIter[604314]
          }
        }
      }
    }
    label _end_hasLastForIter[604314]
    (604318 return ret[604316])
  }
  where {
    (114037 call hasFirstLastAreParam this[114031])
  }
  function range[240](?).last[114122](arg _mt[114128]:_MT[201], arg this[114125]:range[240](?) :
  range[240](?)) : _unknown[42] "inline" "method" "no parens"
  {
    unknown ret[604342] "RVV" "temp"
    (114132 call warnUnstableLast this[114125](fromHasLast = 0))
    (551998 'end of statement')
    unknown call_tmp[791157] "expr temp" "maybe param" "maybe type" "temp"
    (791160 'move' call_tmp[791157](114142 call lastAsInt _mt[203] this[114125]))
    unknown call_tmp[791162] "expr temp" "maybe param" "maybe type" "temp"
    (791165 'move' call_tmp[791162](114138 call(427073 call (partial) chpl_intToIdx _mt[203] this[114125]) call_tmp[791157]))
    (604347 'move' ret[604342](604346 'deref' call_tmp[791162]))
    (604344 return ret[604342])
  }
  function warnUnstableLast[114147](arg r[114149]:_any[141](?), param arg fromHasLast[114151]:_any[141](?)) : _unknown[42] "inline" "private" "no return value for void"
  {
    unknown tmp[484326] "maybe param" "temp"
    (484337 'move' tmp[484326](114158 call ! 0))
    unknown call_tmp[791167] "expr temp" "maybe param" "maybe type" "temp"
    (791170 'move' call_tmp[791167](484339 call _cond_invalid tmp[484326]))
    if call_tmp[791167]
    {
      (484342 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[673629] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[673630] "maybe param" "temp"
    unknown call_tmp[791172] "expr temp" "maybe param" "maybe type" "temp"
    (791175 'move' call_tmp[791172](484327 call isTrue tmp[484326]))
    (673635 'move' tmp[673630](673633 call _cond_test call_tmp[791172]))
    if tmp[673630]
    {
      (673640 'move' tmp[673629](673637 '_paramFoldLogical' tmp[673630] 1))
    }
    {
      unknown tmp[673642] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[791179] "expr temp" "maybe param" "maybe type" "temp"
      (791182 'move' call_tmp[791179](114166 call idxType _mt[203] r[114149]))
      unknown call_tmp[791184] "expr temp" "maybe param" "maybe type" "temp"
      (791187 'move' call_tmp[791184](114164 call isFiniteIdxType call_tmp[791179]))
      unknown call_tmp[791189] "expr temp" "maybe param" "maybe type" "temp"
      (791192 'move' call_tmp[791189](114161 call ! call_tmp[791184]))
      (673644 'move' tmp[673642](484331 call isTrue call_tmp[791189]))
      (673649 'move' tmp[673629](673646 '_paramFoldLogical' tmp[673630] tmp[673642]))
    }
    unknown call_tmp[791194] "expr temp" "maybe param" "maybe type" "temp"
    (791197 'move' call_tmp[791194](114169 call _cond_test tmp[673629]))
    if call_tmp[791194]
    {
      gotoReturn _end_warnUnstableLast[604349] _end_warnUnstableLast[604349]
    }
    unknown call_tmp[791201] "expr temp" "maybe param" "maybe type" "temp"
    (791204 'move' call_tmp[791201](114239 call(114236 call (partial) hasLowBound _mt[203] r[114149])))
    unknown call_tmp[791206] "expr temp" "maybe param" "maybe type" "temp"
    (791209 'move' call_tmp[791206](114233 call ! call_tmp[791201]))
    unknown call_tmp[791211] "expr temp" "maybe param" "maybe type" "temp"
    (791214 'move' call_tmp[791211](114240 call _cond_test call_tmp[791206]))
    if call_tmp[791211]
    {
      unknown call_tmp[791218] "expr temp" "maybe param" "maybe type" "temp"
      (791221 'move' call_tmp[791218](114220 call strides _mt[203] r[114149]))
      unknown call_tmp[791225] "expr temp" "maybe param" "maybe type" "temp"
      (791228 'move' call_tmp[791225](114226 call(114223 call (partial) isNegative _mt[203] call_tmp[791218])))
      unknown call_tmp[791230] "expr temp" "maybe param" "maybe type" "temp"
      (791233 'move' call_tmp[791230](114227 call _cond_test call_tmp[791225]))
      if call_tmp[791230]
      {
        unknown call_tmp[791235] "expr temp" "maybe param" "maybe type" "temp"
        (791238 'move' call_tmp[791235](114188 call _cond_test fromHasLast[114151]))
        if call_tmp[791235]
        {
          (114176 call compilerWarning "range.hasLast() is unstable for a range over an enum or bool if it has a negative stride and no low bound")
        }
        {
          (114182 call compilerWarning "range.last is unstable for a range over an enum or bool if it has a negative stride and no low bound")
        }
      }
      {
        unknown call_tmp[791242] "expr temp" "maybe param" "maybe type" "temp"
        (791245 'move' call_tmp[791242](114213 call(114210 call (partial) hasNegativeStride _mt[203] r[114149])))
        unknown call_tmp[791247] "expr temp" "maybe param" "maybe type" "temp"
        (791250 'move' call_tmp[791247](114214 call _cond_test call_tmp[791242]))
        if call_tmp[791247]
        {
          unknown call_tmp[791252] "expr temp" "maybe param" "maybe type" "temp"
          (791255 'move' call_tmp[791252](114203 call _cond_test fromHasLast[114151]))
          if call_tmp[791252]
          {
            (114195 call warning "range.hasLast() is unstable for a range over an enum or bool if it has a negative stride and no low bound")
          }
          {
            (114199 call warning "range.last is unstable for a range over an enum or bool if it has a negative stride and no low bound")
          }
        }
      }
    }
    unknown call_tmp[791259] "expr temp" "maybe param" "maybe type" "temp"
    (791262 'move' call_tmp[791259](114309 call(114306 call (partial) hasHighBound _mt[203] r[114149])))
    unknown call_tmp[791264] "expr temp" "maybe param" "maybe type" "temp"
    (791267 'move' call_tmp[791264](114303 call ! call_tmp[791259]))
    unknown call_tmp[791269] "expr temp" "maybe param" "maybe type" "temp"
    (791272 'move' call_tmp[791269](114310 call _cond_test call_tmp[791264]))
    if call_tmp[791269]
    {
      unknown call_tmp[791276] "expr temp" "maybe param" "maybe type" "temp"
      (791279 'move' call_tmp[791276](114290 call strides _mt[203] r[114149]))
      unknown call_tmp[791283] "expr temp" "maybe param" "maybe type" "temp"
      (791286 'move' call_tmp[791283](114296 call(114293 call (partial) isPositive _mt[203] call_tmp[791276])))
      unknown call_tmp[791288] "expr temp" "maybe param" "maybe type" "temp"
      (791291 'move' call_tmp[791288](114297 call _cond_test call_tmp[791283]))
      if call_tmp[791288]
      {
        unknown call_tmp[791293] "expr temp" "maybe param" "maybe type" "temp"
        (791296 'move' call_tmp[791293](114258 call _cond_test fromHasLast[114151]))
        if call_tmp[791293]
        {
          (114246 call compilerWarning "range.hasLast() is unstable for a range over an enum or bool if it has a positive stride and no high bound")
        }
        {
          (114252 call compilerWarning "range.last is unstable for a range over an enum or bool if it has a positive stride and no high bound")
        }
      }
      {
        unknown call_tmp[791300] "expr temp" "maybe param" "maybe type" "temp"
        (791303 'move' call_tmp[791300](114283 call(114280 call (partial) hasPositiveStride _mt[203] r[114149])))
        unknown call_tmp[791305] "expr temp" "maybe param" "maybe type" "temp"
        (791308 'move' call_tmp[791305](114284 call _cond_test call_tmp[791300]))
        if call_tmp[791305]
        {
          unknown call_tmp[791310] "expr temp" "maybe param" "maybe type" "temp"
          (791313 'move' call_tmp[791310](114273 call _cond_test fromHasLast[114151]))
          if call_tmp[791310]
          {
            (114265 call warning "range.hasLast() is unstable for a range over an enum or bool if it has a positive stride and no high bound")
          }
          {
            (114269 call warning "range.last is unstable for a range over an enum or bool if it has a positive stride and no high bound")
          }
        }
      }
    }
    label _end_warnUnstableLast[604349]
    (604351 return _void[46])
  }
  function range[240](?).lastAsInt[114316](arg _mt[114322]:_MT[201], arg this[114319]:range[240](?) :
  range[240](?)) : _unknown[42] "inline" "method" "no parens"
  {
    unknown ret[604357] "RVV" "temp"
    unknown tmp[673656] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[673657] "maybe param" "temp"
    unknown call_tmp[791317] "expr temp" "maybe param" "maybe type" "temp"
    (791320 'move' call_tmp[791317](114327 call(427082 call (partial) hasPositiveStride _mt[203] this[114319])))
    (673662 'move' tmp[673657](673660 call _cond_test call_tmp[791317]))
    if tmp[673657]
    {
      unknown tmp[673664] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (673666 'move' tmp[673664](114329 call alignedHighAsInt _mt[203] this[114319]))
      (673671 'move' tmp[673656](673668 '_paramFoldLogical' tmp[673657] tmp[673664]))
    }
    {
      unknown tmp[673673] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (673675 'move' tmp[673673](114333 call alignedLowAsInt _mt[203] this[114319]))
      (673680 'move' tmp[673656](673677 '_paramFoldLogical' tmp[673657] tmp[673673]))
    }
    (604362 'move' ret[604357](604361 'deref' tmp[673656]))
    (604359 return ret[604357])
  }
  function range[240](?).chpl_lastAsIntForIter[114341](arg _mt[114347]:_MT[201], arg this[114344]:range[240](?) :
  range[240](?)) : _unknown[42] "inline" "method" "no parens"
  {
    unknown ret[604366] "RVV" "temp"
    unknown call_tmp[791328] "expr temp" "maybe param" "maybe type" "temp"
    (791331 'move' call_tmp[791328](427115 call bounds _mt[203] this[114344]))
    unknown call_tmp[791333] "expr temp" "maybe param" "maybe type" "temp"
    (791336 'move' call_tmp[791333](114419 call == call_tmp[791328] both[107114]))
    unknown call_tmp[791338] "expr temp" "maybe param" "maybe type" "temp"
    (791341 'move' call_tmp[791338](114426 call _cond_test call_tmp[791333]))
    if call_tmp[791338]
    {
      unknown call_tmp[791345] "expr temp" "maybe param" "maybe type" "temp"
      (791348 'move' call_tmp[791345](114353 call lastAsInt _mt[203] this[114344]))
      (604371 'move' ret[604366](604370 'deref' call_tmp[791345]))
      gotoReturn _end_chpl_lastAsIntForIter[604364] _end_chpl_lastAsIntForIter[604364]
    }
    {
      unknown call_tmp[791352] "expr temp" "maybe param" "maybe type" "temp"
      (791355 'move' call_tmp[791352](401523 call strides _mt[203] this[114344]))
      unknown call_tmp[791359] "expr temp" "maybe param" "maybe type" "temp"
      (791362 'move' call_tmp[791359](114413 call(114410 call (partial) isOne _mt[203] call_tmp[791352])))
      unknown call_tmp[791364] "expr temp" "maybe param" "maybe type" "temp"
      (791367 'move' call_tmp[791364](114414 call _cond_test call_tmp[791359]))
      if call_tmp[791364]
      {
        unknown call_tmp[791369] "expr temp" "maybe param" "maybe type" "temp"
        (791372 'move' call_tmp[791369](114362 call highBoundForIter this[114344]))
        unknown call_tmp[791374] "expr temp" "maybe param" "maybe type" "temp"
        (791377 'move' call_tmp[791374](114360 call chpl__idxToInt call_tmp[791369]))
        (604376 'move' ret[604366](604375 'deref' call_tmp[791374]))
        gotoReturn _end_chpl_lastAsIntForIter[604364] _end_chpl_lastAsIntForIter[604364]
      }
      {
        unknown call_tmp[791381] "expr temp" "maybe param" "maybe type" "temp"
        (791384 'move' call_tmp[791381](401518 call strides _mt[203] this[114344]))
        unknown call_tmp[791388] "expr temp" "maybe param" "maybe type" "temp"
        (791391 'move' call_tmp[791388](114403 call(114400 call (partial) isNegOne _mt[203] call_tmp[791381])))
        unknown call_tmp[791393] "expr temp" "maybe param" "maybe type" "temp"
        (791396 'move' call_tmp[791393](114404 call _cond_test call_tmp[791388]))
        if call_tmp[791393]
        {
          unknown call_tmp[791398] "expr temp" "maybe param" "maybe type" "temp"
          (791401 'move' call_tmp[791398](114369 call lowBoundForIter this[114344]))
          unknown call_tmp[791403] "expr temp" "maybe param" "maybe type" "temp"
          (791406 'move' call_tmp[791403](114367 call chpl__idxToInt call_tmp[791398]))
          (604381 'move' ret[604366](604380 'deref' call_tmp[791403]))
          gotoReturn _end_chpl_lastAsIntForIter[604364] _end_chpl_lastAsIntForIter[604364]
        }
        {
          unknown call_tmp[791410] "expr temp" "maybe param" "maybe type" "temp"
          (791413 'move' call_tmp[791410](114394 call(427110 call (partial) hasPositiveStride _mt[203] this[114344])))
          unknown call_tmp[791415] "expr temp" "maybe param" "maybe type" "temp"
          (791418 'move' call_tmp[791415](114395 call _cond_test call_tmp[791410]))
          if call_tmp[791415]
          {
            unknown call_tmp[791420] "expr temp" "maybe param" "maybe type" "temp"
            (791423 'move' call_tmp[791420](114378 call highBoundForIter this[114344]))
            unknown call_tmp[791425] "expr temp" "maybe param" "maybe type" "temp"
            (791428 'move' call_tmp[791425](114376 call chpl__idxToInt call_tmp[791420]))
            unknown call_tmp[791432] "expr temp" "maybe param" "maybe type" "temp"
            (791435 'move' call_tmp[791432](427090 call _alignment _mt[203] this[114344]))
            unknown call_tmp[791439] "expr temp" "maybe param" "maybe type" "temp"
            (791442 'move' call_tmp[791439](427095 call _stride _mt[203] this[114344]))
            unknown call_tmp[791444] "expr temp" "maybe param" "maybe type" "temp"
            (791447 'move' call_tmp[791444](114374 call helpAlignHigh call_tmp[791425] call_tmp[791432] call_tmp[791439]))
            (604386 'move' ret[604366](604385 'deref' call_tmp[791444]))
            gotoReturn _end_chpl_lastAsIntForIter[604364] _end_chpl_lastAsIntForIter[604364]
          }
          {
            unknown call_tmp[791449] "expr temp" "maybe param" "maybe type" "temp"
            (791452 'move' call_tmp[791449](114389 call lowBoundForIter this[114344]))
            unknown call_tmp[791454] "expr temp" "maybe param" "maybe type" "temp"
            (791457 'move' call_tmp[791454](114387 call chpl__idxToInt call_tmp[791449]))
            unknown call_tmp[791461] "expr temp" "maybe param" "maybe type" "temp"
            (791464 'move' call_tmp[791461](427101 call _alignment _mt[203] this[114344]))
            unknown call_tmp[791468] "expr temp" "maybe param" "maybe type" "temp"
            (791471 'move' call_tmp[791468](427106 call _stride _mt[203] this[114344]))
            unknown call_tmp[791473] "expr temp" "maybe param" "maybe type" "temp"
            (791476 'move' call_tmp[791473](114385 call helpAlignLow call_tmp[791454] call_tmp[791461] call_tmp[791468]))
            (604391 'move' ret[604366](604390 'deref' call_tmp[791473]))
            gotoReturn _end_chpl_lastAsIntForIter[604364] _end_chpl_lastAsIntForIter[604364]
          }
        }
      }
    }
    label _end_chpl_lastAsIntForIter[604364]
    (604368 return ret[604366])
  }
  function chpl_idxTypeSizeChange[114432](arg t[114434]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[604397] "RVV" "param" "temp"
    unknown tmp[484347] "maybe param" "temp"
    (484358 'move' tmp[484347](114441 call isIntegralType t[114434]))
    unknown call_tmp[791478] "expr temp" "maybe param" "maybe type" "temp"
    (791481 'move' call_tmp[791478](484360 call _cond_invalid tmp[484347]))
    if call_tmp[791478]
    {
      (484363 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[673687] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[673688] "maybe param" "temp"
    unknown call_tmp[791483] "expr temp" "maybe param" "maybe type" "temp"
    (791486 'move' call_tmp[791483](484348 call isTrue tmp[484347]))
    (673693 'move' tmp[673688](673691 call _cond_test call_tmp[791483]))
    if tmp[673688]
    {
      unknown tmp[673695] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[791488] "expr temp" "maybe param" "maybe type" "temp"
      (791491 'move' call_tmp[791488](114443 call != t[114434] int(64)[10]))
      (673697 'move' tmp[673695](484351 call isTrue call_tmp[791488]))
      (673702 'move' tmp[673687](673699 '_paramFoldLogical' tmp[673688] tmp[673695]))
    }
    {
      (673707 'move' tmp[673687](673704 '_paramFoldLogical' tmp[673688] 0))
    }
    (604402 'move' ret[604397](604401 'deref' tmp[673687]))
    (604399 return ret[604397])
  }
  function range[240](?).contains[114449](arg _mt[114459]:_MT[201], arg this[114452]:range[240](?) :
  range[240](?), arg ind[114456] :
  (427122 call idxType _mt[203] this[114452])) : _unknown[42] "inline" "method"
  {
    unknown ret[604406] "RVV" "temp"
    unknown call_tmp[791497] "expr temp" "maybe param" "maybe type" "temp"
    (791500 'move' call_tmp[791497](427137 call idxType _mt[203] this[114452]))
    unknown call_tmp[791502] "expr temp" "maybe param" "maybe type" "temp"
    (791505 'move' call_tmp[791502](114476 call chpl__singleValIdxType call_tmp[791497]))
    unknown call_tmp[791507] "expr temp" "maybe param" "maybe type" "temp"
    (791510 'move' call_tmp[791507](114478 call _cond_test call_tmp[791502]))
    if call_tmp[791507]
    {
      unknown call_tmp[791514] "expr temp" "maybe param" "maybe type" "temp"
      (791517 'move' call_tmp[791514](427127 call _low _mt[203] this[114452]))
      unknown call_tmp[791521] "expr temp" "maybe param" "maybe type" "temp"
      (791524 'move' call_tmp[791521](427132 call _high _mt[203] this[114452]))
      unknown call_tmp[791526] "expr temp" "maybe param" "maybe type" "temp"
      (791529 'move' call_tmp[791526](114466 call > call_tmp[791514] call_tmp[791521]))
      unknown call_tmp[791531] "expr temp" "maybe param" "maybe type" "temp"
      (791534 'move' call_tmp[791531](114470 call _cond_test call_tmp[791526]))
      if call_tmp[791531]
      {
        (604411 'move' ret[604406](604410 'deref' 0))
        gotoReturn _end_contains[604404] _end_contains[604404]
      }
    }
    unknown call_tmp[791538] "expr temp" "maybe param" "maybe type" "temp"
    (791541 'move' call_tmp[791538](114491 call(114488 call (partial) isAligned _mt[203] this[114452])))
    unknown call_tmp[791543] "expr temp" "maybe param" "maybe type" "temp"
    (791546 'move' call_tmp[791543](114485 call ! call_tmp[791538]))
    unknown call_tmp[791548] "expr temp" "maybe param" "maybe type" "temp"
    (791551 'move' call_tmp[791548](114492 call _cond_test call_tmp[791543]))
    if call_tmp[791548]
    {
      (604416 'move' ret[604406](604415 'deref' 0))
      gotoReturn _end_contains[604404] _end_contains[604404]
    }
    unknown call_tmp[791553] "maybe param" "maybe type" "temp"
    (791556 'move' call_tmp[791553](114500 call chpl__idxToInt ind[114456]))
    const i[114498] "dead at end of block" "const" "insert auto destroy"
    (645279 'init var' i[114498] call_tmp[791553])
    (114503 'end of statement')
    unknown call_tmp[791560] "expr temp" "maybe param" "maybe type" "temp"
    (791563 'move' call_tmp[791560](114518 call(427148 call (partial) hasHighBound _mt[203] this[114452])))
    unknown call_tmp[791565] "expr temp" "maybe param" "maybe type" "temp"
    (791568 'move' call_tmp[791565](114519 call _cond_test call_tmp[791560]))
    if call_tmp[791565]
    {
      unknown call_tmp[791572] "expr temp" "maybe param" "maybe type" "temp"
      (791575 'move' call_tmp[791572](427144 call _high _mt[203] this[114452]))
      unknown call_tmp[791577] "expr temp" "maybe param" "maybe type" "temp"
      (791580 'move' call_tmp[791577](114508 call > i[114498] call_tmp[791572]))
      unknown call_tmp[791582] "expr temp" "maybe param" "maybe type" "temp"
      (791585 'move' call_tmp[791582](114512 call _cond_test call_tmp[791577]))
      if call_tmp[791582]
      {
        (604421 'move' ret[604406](604420 'deref' 0))
        gotoReturn _end_contains[604404] _end_contains[604404]
      }
    }
    unknown call_tmp[791589] "expr temp" "maybe param" "maybe type" "temp"
    (791592 'move' call_tmp[791589](114537 call(427158 call (partial) hasLowBound _mt[203] this[114452])))
    unknown call_tmp[791594] "expr temp" "maybe param" "maybe type" "temp"
    (791597 'move' call_tmp[791594](114538 call _cond_test call_tmp[791589]))
    if call_tmp[791594]
    {
      unknown call_tmp[791601] "expr temp" "maybe param" "maybe type" "temp"
      (791604 'move' call_tmp[791601](427154 call _low _mt[203] this[114452]))
      unknown call_tmp[791606] "expr temp" "maybe param" "maybe type" "temp"
      (791609 'move' call_tmp[791606](114527 call < i[114498] call_tmp[791601]))
      unknown call_tmp[791611] "expr temp" "maybe param" "maybe type" "temp"
      (791614 'move' call_tmp[791611](114531 call _cond_test call_tmp[791606]))
      if call_tmp[791611]
      {
        (604426 'move' ret[604406](604425 'deref' 0))
        gotoReturn _end_contains[604404] _end_contains[604404]
      }
    }
    unknown call_tmp[791618] "expr temp" "maybe param" "maybe type" "temp"
    (791621 'move' call_tmp[791618](114561 call(427173 call (partial) hasPosNegUnitStride _mt[203] this[114452])))
    unknown call_tmp[791623] "expr temp" "maybe param" "maybe type" "temp"
    (791626 'move' call_tmp[791623](114558 call ! call_tmp[791618]))
    unknown call_tmp[791628] "expr temp" "maybe param" "maybe type" "temp"
    (791631 'move' call_tmp[791628](114562 call _cond_test call_tmp[791623]))
    if call_tmp[791628]
    {
      unknown call_tmp[791635] "expr temp" "maybe param" "maybe type" "temp"
      (791638 'move' call_tmp[791635](427164 call _stride _mt[203] this[114452]))
      unknown call_tmp[791640] "expr temp" "maybe param" "maybe type" "temp"
      (791643 'move' call_tmp[791640](114549 call chpl__mod i[114498] call_tmp[791635]))
      unknown call_tmp[791647] "expr temp" "maybe param" "maybe type" "temp"
      (791650 'move' call_tmp[791647](427169 call _alignment _mt[203] this[114452]))
      unknown call_tmp[791652] "expr temp" "maybe param" "maybe type" "temp"
      (791655 'move' call_tmp[791652](114546 call != call_tmp[791640] call_tmp[791647]))
      unknown call_tmp[791657] "expr temp" "maybe param" "maybe type" "temp"
      (791660 'move' call_tmp[791657](114553 call _cond_test call_tmp[791652]))
      if call_tmp[791657]
      {
        (604431 'move' ret[604406](604430 'deref' 0))
        gotoReturn _end_contains[604404] _end_contains[604404]
      }
    }
    (604436 'move' ret[604406](604435 'deref' 1))
    label _end_contains[604404]
    (604408 return ret[604406])
  }
  function range[240](?).contains[114570](arg _mt[114582]:_MT[201], arg this[114573]:range[240](?) :
  range[240](?), arg other[114579]:range[240](?)) : _unknown[42] "inline" "method"
  {
    unknown ret[604449] "RVV" "temp"
    unknown call_tmp[791664] "expr temp" "maybe param" "maybe type" "temp"
    (791667 'move' call_tmp[791664](427189 call idxType _mt[203] this[114573]))
    unknown call_tmp[791669] "expr temp" "maybe param" "maybe type" "temp"
    (791672 'move' call_tmp[791669](114605 call chpl__singleValIdxType call_tmp[791664]))
    unknown call_tmp[791674] "expr temp" "maybe param" "maybe type" "temp"
    (791677 'move' call_tmp[791674](114607 call _cond_test call_tmp[791669]))
    if call_tmp[791674]
    {
      unknown call_tmp[791681] "expr temp" "maybe param" "maybe type" "temp"
      (791684 'move' call_tmp[791681](427179 call _low _mt[203] this[114573]))
      unknown call_tmp[791688] "expr temp" "maybe param" "maybe type" "temp"
      (791691 'move' call_tmp[791688](427184 call _high _mt[203] this[114573]))
      unknown call_tmp[791693] "expr temp" "maybe param" "maybe type" "temp"
      (791696 'move' call_tmp[791693](114595 call > call_tmp[791681] call_tmp[791688]))
      unknown call_tmp[791698] "expr temp" "maybe param" "maybe type" "temp"
      (791701 'move' call_tmp[791698](114599 call _cond_test call_tmp[791693]))
      if call_tmp[791698]
      {
        unknown call_tmp[791705] "expr temp" "maybe param" "maybe type" "temp"
        (791708 'move' call_tmp[791705](114590 call size _mt[203] other[114579]))
        unknown call_tmp[791710] "expr temp" "maybe param" "maybe type" "temp"
        (791713 'move' call_tmp[791710](114587 call == call_tmp[791705] 0))
        (604454 'move' ret[604449](604453 'deref' call_tmp[791710]))
        gotoReturn _end_contains[604447] _end_contains[604447]
      }
    }
    unknown tmp[484368] "maybe param" "temp"
    unknown call_tmp[791717] "expr temp" "maybe param" "maybe type" "temp"
    (791720 'move' call_tmp[791717](114622 call(114619 call (partial) isAligned _mt[203] this[114573])))
    (484379 'move' tmp[484368](114616 call ! call_tmp[791717]))
    unknown call_tmp[791722] "expr temp" "maybe param" "maybe type" "temp"
    (791725 'move' call_tmp[791722](484381 call _cond_invalid tmp[484368]))
    if call_tmp[791722]
    {
      (484384 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[673714] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[673715] "maybe param" "temp"
    unknown call_tmp[791727] "expr temp" "maybe param" "maybe type" "temp"
    (791730 'move' call_tmp[791727](484369 call isTrue tmp[484368]))
    (673720 'move' tmp[673715](673718 call _cond_test call_tmp[791727]))
    if tmp[673715]
    {
      (673725 'move' tmp[673714](673722 '_paramFoldLogical' tmp[673715] 1))
    }
    {
      unknown tmp[673727] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[791734] "expr temp" "maybe param" "maybe type" "temp"
      (791737 'move' call_tmp[791734](114629 call(114626 call (partial) isAligned _mt[203] other[114579])))
      unknown call_tmp[791739] "expr temp" "maybe param" "maybe type" "temp"
      (791742 'move' call_tmp[791739](114623 call ! call_tmp[791734]))
      (673729 'move' tmp[673727](484373 call isTrue call_tmp[791739]))
      (673734 'move' tmp[673714](673731 '_paramFoldLogical' tmp[673715] tmp[673727]))
    }
    unknown call_tmp[791744] "expr temp" "maybe param" "maybe type" "temp"
    (791747 'move' call_tmp[791744](114630 call _cond_test tmp[673714]))
    if call_tmp[791744]
    {
      (604459 'move' ret[604449](604458 'deref' 0))
      gotoReturn _end_contains[604447] _end_contains[604447]
    }
    unknown tmp[484410] "maybe param" "temp"
    unknown call_tmp[791751] "expr temp" "maybe param" "maybe type" "temp"
    (791754 'move' call_tmp[791751](114663 call bounds _mt[203] this[114573]))
    (484421 'move' tmp[484410](114660 call == call_tmp[791751] both[107114]))
    unknown call_tmp[791756] "expr temp" "maybe param" "maybe type" "temp"
    (791759 'move' call_tmp[791756](484423 call _cond_invalid tmp[484410]))
    if call_tmp[791756]
    {
      (484426 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[673741] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[673742] "maybe param" "temp"
    unknown call_tmp[791761] "expr temp" "maybe param" "maybe type" "temp"
    (791764 'move' call_tmp[791761](484411 call isTrue tmp[484410]))
    (673747 'move' tmp[673742](673745 call _cond_test call_tmp[791761]))
    if tmp[673742]
    {
      unknown tmp[673749] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[791768] "expr temp" "maybe param" "maybe type" "temp"
      (791771 'move' call_tmp[791768](114676 call(114673 call (partial) sizeAs _mt[203] this[114573]) uint(64)[86]))
      unknown call_tmp[791773] "expr temp" "maybe param" "maybe type" "temp"
      (791776 'move' call_tmp[791773](114670 call == call_tmp[791768] 0))
      (673751 'move' tmp[673749](484414 call isTrue call_tmp[791773]))
      (673756 'move' tmp[673741](673753 '_paramFoldLogical' tmp[673742] tmp[673749]))
    }
    {
      (673761 'move' tmp[673741](673758 '_paramFoldLogical' tmp[673742] 0))
    }
    unknown call_tmp[791778] "expr temp" "maybe param" "maybe type" "temp"
    (791781 'move' call_tmp[791778](114679 call _cond_test tmp[673741]))
    if call_tmp[791778]
    {
      unknown tmp[484389] "maybe param" "temp"
      unknown call_tmp[791785] "expr temp" "maybe param" "maybe type" "temp"
      (791788 'move' call_tmp[791785](114641 call bounds _mt[203] other[114579]))
      (484400 'move' tmp[484389](114638 call == call_tmp[791785] both[107114]))
      unknown call_tmp[791790] "expr temp" "maybe param" "maybe type" "temp"
      (791793 'move' call_tmp[791790](484402 call _cond_invalid tmp[484389]))
      if call_tmp[791790]
      {
        (484405 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[673768] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[673769] "maybe param" "temp"
      unknown call_tmp[791795] "expr temp" "maybe param" "maybe type" "temp"
      (791798 'move' call_tmp[791795](484390 call isTrue tmp[484389]))
      (673774 'move' tmp[673769](673772 call _cond_test call_tmp[791795]))
      if tmp[673769]
      {
        unknown tmp[673776] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[791802] "expr temp" "maybe param" "maybe type" "temp"
        (791805 'move' call_tmp[791802](114654 call(114651 call (partial) sizeAs _mt[203] other[114579]) uint(64)[86]))
        unknown call_tmp[791807] "expr temp" "maybe param" "maybe type" "temp"
        (791810 'move' call_tmp[791807](114648 call == call_tmp[791802] 0))
        (673778 'move' tmp[673776](484393 call isTrue call_tmp[791807]))
        (673783 'move' tmp[673768](673780 '_paramFoldLogical' tmp[673769] tmp[673776]))
      }
      {
        (673788 'move' tmp[673768](673785 '_paramFoldLogical' tmp[673769] 0))
      }
      (604464 'move' ret[604449](604463 'deref' tmp[673768]))
      gotoReturn _end_contains[604447] _end_contains[604447]
    }
    unknown call_tmp[791812] "maybe param" "maybe type" "temp"
    (791815 'move' call_tmp[791812](114687 call this[114573] other[114579]))
    unknown slice[114685] "dead at end of block" "insert auto destroy"
    (645281 'init var' slice[114685] call_tmp[791812])
    (114690 'end of statement')
    function adjustedSlice[114691]() : _unknown[42] "no parens"
    {
      unknown ret[604440] "RVV" "temp"
      unknown tmp[673795] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[673796] "maybe param" "temp"
      unknown call_tmp[791819] "expr temp" "maybe param" "maybe type" "temp"
      (791822 'move' call_tmp[791819](114699 call(114696 call (partial) hasPositiveStride _mt[203] this[114573])))
      (673801 'move' tmp[673796](673799 call _cond_test call_tmp[791819]))
      if tmp[673796]
      {
        (673806 'move' tmp[673795](673803 '_paramFoldLogical' tmp[673796] slice[114685]))
      }
      {
        unknown tmp[673808] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[791824] "expr temp" "maybe param" "maybe type" "temp"
        (791827 'move' call_tmp[791824](114704 call - 1))
        (673810 'move' tmp[673808](114701 call chpl_by slice[114685] call_tmp[791824]))
        (673815 'move' tmp[673795](673812 '_paramFoldLogical' tmp[673796] tmp[673808]))
      }
      (604445 'move' ret[604440](604444 'deref' tmp[673795]))
      (604442 return ret[604440])
    }
    unknown call_tmp[791829] "expr temp" "maybe param" "maybe type" "temp"
    (791832 'move' call_tmp[791829](427197 call adjustedSlice[114691]))
    unknown call_tmp[791834] "expr temp" "maybe param" "maybe type" "temp"
    (791837 'move' call_tmp[791834](114713 call == other[114579] call_tmp[791829]))
    (604469 'move' ret[604449](604468 'deref' call_tmp[791834]))
    label _end_contains[604447]
    (604451 return ret[604449])
  }
  function ==[114719](arg r1[114724]:range[240](?), arg r2[114730]:range[240](?)) param : _unknown[42] "operator"
  {
    unknown ret[604473] "RVV" "param" "temp"
    (604478 'move' ret[604473](604477 'deref' 0))
    (604475 return ret[604473])
  }
  where {
    unknown tmp[484431] "maybe param" "temp"
    unknown call_tmp[791841] "expr temp" "maybe param" "maybe type" "temp"
    (791844 'move' call_tmp[791841](114738 call bounds _mt[203] r1[114724]))
    unknown call_tmp[791848] "expr temp" "maybe param" "maybe type" "temp"
    (791851 'move' call_tmp[791848](114742 call bounds _mt[203] r2[114730]))
    (484442 'move' tmp[484431](114735 call != call_tmp[791841] call_tmp[791848]))
    unknown call_tmp[791853] "expr temp" "maybe param" "maybe type" "temp"
    (791856 'move' call_tmp[791853](484444 call _cond_invalid tmp[484431]))
    if call_tmp[791853]
    {
      (484447 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[673849] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[673850] "maybe param" "temp"
    unknown call_tmp[791858] "expr temp" "maybe param" "maybe type" "temp"
    (791861 'move' call_tmp[791858](484432 call isTrue tmp[484431]))
    (673855 'move' tmp[673850](673853 call _cond_test call_tmp[791858]))
    if tmp[673850]
    {
      unknown tmp[484452] "maybe param" "temp"
      unknown call_tmp[791865] "expr temp" "maybe param" "maybe type" "temp"
      (791868 'move' call_tmp[791865](114752 call idxType _mt[203] r1[114724]))
      unknown call_tmp[791870] "expr temp" "maybe param" "maybe type" "temp"
      (791873 'move' call_tmp[791870](114750 call isFiniteIdxType call_tmp[791865]))
      (484463 'move' tmp[484452](114747 call ! call_tmp[791870]))
      unknown call_tmp[791875] "expr temp" "maybe param" "maybe type" "temp"
      (791878 'move' call_tmp[791875](484465 call _cond_invalid tmp[484452]))
      if call_tmp[791875]
      {
        (484468 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[673822] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[673823] "maybe param" "temp"
      unknown call_tmp[791880] "expr temp" "maybe param" "maybe type" "temp"
      (791883 'move' call_tmp[791880](484453 call isTrue tmp[484452]))
      (673828 'move' tmp[673823](673826 call _cond_test call_tmp[791880]))
      if tmp[673823]
      {
        (673833 'move' tmp[673822](673830 '_paramFoldLogical' tmp[673823] 1))
      }
      {
        unknown tmp[673835] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[791887] "expr temp" "maybe param" "maybe type" "temp"
        (791890 'move' call_tmp[791887](114760 call idxType _mt[203] r2[114730]))
        unknown call_tmp[791892] "expr temp" "maybe param" "maybe type" "temp"
        (791895 'move' call_tmp[791892](114758 call isFiniteIdxType call_tmp[791887]))
        unknown call_tmp[791897] "expr temp" "maybe param" "maybe type" "temp"
        (791900 'move' call_tmp[791897](114755 call ! call_tmp[791892]))
        (673837 'move' tmp[673835](484457 call isTrue call_tmp[791897]))
        (673842 'move' tmp[673822](673839 '_paramFoldLogical' tmp[673823] tmp[673835]))
      }
      unknown tmp[673857] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (673859 'move' tmp[673857](484435 call isTrue tmp[673822]))
      (673864 'move' tmp[673849](673861 '_paramFoldLogical' tmp[673850] tmp[673857]))
    }
    {
      (673869 'move' tmp[673849](673866 '_paramFoldLogical' tmp[673850] 0))
    }
    (1001398 call chpl_statementLevelSymbol tmp[673849])
  }
  function ==[114769](arg r1[114774]:range[240](?), arg r2[114780]:range[240](?)) : _unknown[42] "operator" "@unstable"
  {
    unknown ret[604482] "RVV" "temp"
    const boundedr1[114812] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[673876] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[673877] "maybe param" "temp"
    unknown call_tmp[791904] "expr temp" "maybe param" "maybe type" "temp"
    (791907 'move' call_tmp[791904](114816 call bounds _mt[203] r1[114774]))
    unknown call_tmp[791909] "expr temp" "maybe param" "maybe type" "temp"
    (791912 'move' call_tmp[791909](114813 call == call_tmp[791904] both[107114]))
    (673882 'move' tmp[673877](673880 call _cond_test call_tmp[791909]))
    if tmp[673877]
    {
      (673887 'move' tmp[673876](673884 '_paramFoldLogical' tmp[673877] r1[114774]))
    }
    {
      unknown tmp[673889] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[791916] "expr temp" "maybe param" "maybe type" "temp"
      (791919 'move' call_tmp[791916](114828 call idxType _mt[203] r1[114774]))
      unknown call_tmp[791923] "expr temp" "maybe param" "maybe type" "temp"
      (791926 'move' call_tmp[791923](114836 call strides _mt[203] r1[114774]))
      unknown call_tmp[791930] "expr temp" "maybe param" "maybe type" "temp"
      (791933 'move' call_tmp[791930](114840 call _low _mt[203] r1[114774]))
      unknown call_tmp[791937] "expr temp" "maybe param" "maybe type" "temp"
      (791940 'move' call_tmp[791937](114844 call _high _mt[203] r1[114774]))
      unknown call_tmp[791944] "expr temp" "maybe param" "maybe type" "temp"
      (791947 'move' call_tmp[791944](114848 call _stride _mt[203] r1[114774]))
      unknown call_tmp[791951] "expr temp" "maybe param" "maybe type" "temp"
      (791954 'move' call_tmp[791951](114852 call _alignment _mt[203] r1[114774]))
      (673891 'move' tmp[673889](1000069 'new' range[240](?) call_tmp[791916] both[107114] call_tmp[791923] call_tmp[791930] call_tmp[791937] call_tmp[791944] call_tmp[791951]))
      (673896 'move' tmp[673876](673893 '_paramFoldLogical' tmp[673877] tmp[673889]))
    }
    (645283 'init var' boundedr1[114812] tmp[673876])
    (114859 'end of statement')
    const boundedr2[114861] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[673903] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[673904] "maybe param" "temp"
    unknown call_tmp[791958] "expr temp" "maybe param" "maybe type" "temp"
    (791961 'move' call_tmp[791958](114865 call bounds _mt[203] r2[114780]))
    unknown call_tmp[791963] "expr temp" "maybe param" "maybe type" "temp"
    (791966 'move' call_tmp[791963](114862 call == call_tmp[791958] both[107114]))
    (673909 'move' tmp[673904](673907 call _cond_test call_tmp[791963]))
    if tmp[673904]
    {
      (673914 'move' tmp[673903](673911 '_paramFoldLogical' tmp[673904] r2[114780]))
    }
    {
      unknown tmp[673916] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[791970] "expr temp" "maybe param" "maybe type" "temp"
      (791973 'move' call_tmp[791970](114877 call idxType _mt[203] r2[114780]))
      unknown call_tmp[791977] "expr temp" "maybe param" "maybe type" "temp"
      (791980 'move' call_tmp[791977](114885 call strides _mt[203] r2[114780]))
      unknown call_tmp[791984] "expr temp" "maybe param" "maybe type" "temp"
      (791987 'move' call_tmp[791984](114889 call _low _mt[203] r2[114780]))
      unknown call_tmp[791991] "expr temp" "maybe param" "maybe type" "temp"
      (791994 'move' call_tmp[791991](114893 call _high _mt[203] r2[114780]))
      unknown call_tmp[791998] "expr temp" "maybe param" "maybe type" "temp"
      (792001 'move' call_tmp[791998](114897 call _stride _mt[203] r2[114780]))
      unknown call_tmp[792005] "expr temp" "maybe param" "maybe type" "temp"
      (792008 'move' call_tmp[792005](114901 call _alignment _mt[203] r2[114780]))
      (673918 'move' tmp[673916](1000070 'new' range[240](?) call_tmp[791970] both[107114] call_tmp[791977] call_tmp[791984] call_tmp[791991] call_tmp[791998] call_tmp[792005]))
      (673923 'move' tmp[673903](673920 '_paramFoldLogical' tmp[673904] tmp[673916]))
    }
    (645285 'init var' boundedr2[114861] tmp[673903])
    (114908 'end of statement')
    unknown call_tmp[792010] "expr temp" "maybe param" "maybe type" "temp"
    (792013 'move' call_tmp[792010](114910 call == boundedr1[114812] boundedr2[114861]))
    (604488 'move' ret[604482](604487 'coerce' call_tmp[792010] bool[19]))
    gotoReturn _end_==[604480] _end_==[604480]
    (552033 'end of statement' boundedr1[114812] boundedr2[114861])
    label _end_==[604480]
    (604484 return ret[604482])
  }
  where {
    unknown tmp[484473] "maybe param" "temp"
    unknown tmp[484494] "maybe param" "temp"
    unknown call_tmp[792017] "expr temp" "maybe param" "maybe type" "temp"
    (792020 'move' call_tmp[792017](114791 call bounds _mt[203] r1[114774]))
    unknown call_tmp[792024] "expr temp" "maybe param" "maybe type" "temp"
    (792027 'move' call_tmp[792024](114795 call bounds _mt[203] r2[114780]))
    (484505 'move' tmp[484494](114788 call != call_tmp[792017] call_tmp[792024]))
    unknown call_tmp[792029] "expr temp" "maybe param" "maybe type" "temp"
    (792032 'move' call_tmp[792029](484507 call _cond_invalid tmp[484494]))
    if call_tmp[792029]
    {
      (484510 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[673930] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[673931] "maybe param" "temp"
    unknown call_tmp[792034] "expr temp" "maybe param" "maybe type" "temp"
    (792037 'move' call_tmp[792034](484495 call isTrue tmp[484494]))
    (673936 'move' tmp[673931](673934 call _cond_test call_tmp[792034]))
    if tmp[673931]
    {
      unknown tmp[673938] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[792041] "expr temp" "maybe param" "maybe type" "temp"
      (792044 'move' call_tmp[792041](114801 call idxType _mt[203] r1[114774]))
      unknown call_tmp[792046] "expr temp" "maybe param" "maybe type" "temp"
      (792049 'move' call_tmp[792046](114799 call isFiniteIdxType call_tmp[792041]))
      (673940 'move' tmp[673938](484498 call isTrue call_tmp[792046]))
      (673945 'move' tmp[673930](673942 '_paramFoldLogical' tmp[673931] tmp[673938]))
    }
    {
      (673950 'move' tmp[673930](673947 '_paramFoldLogical' tmp[673931] 0))
    }
    (484484 'move' tmp[484473] tmp[673930])
    unknown call_tmp[792051] "expr temp" "maybe param" "maybe type" "temp"
    (792054 'move' call_tmp[792051](484486 call _cond_invalid tmp[484473]))
    if call_tmp[792051]
    {
      (484489 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[673957] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[673958] "maybe param" "temp"
    unknown call_tmp[792056] "expr temp" "maybe param" "maybe type" "temp"
    (792059 'move' call_tmp[792056](484474 call isTrue tmp[484473]))
    (673963 'move' tmp[673958](673961 call _cond_test call_tmp[792056]))
    if tmp[673958]
    {
      unknown tmp[673965] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[792063] "expr temp" "maybe param" "maybe type" "temp"
      (792066 'move' call_tmp[792063](114807 call idxType _mt[203] r2[114780]))
      unknown call_tmp[792068] "expr temp" "maybe param" "maybe type" "temp"
      (792071 'move' call_tmp[792068](114805 call isFiniteIdxType call_tmp[792063]))
      (673967 'move' tmp[673965](484477 call isTrue call_tmp[792068]))
      (673972 'move' tmp[673957](673969 '_paramFoldLogical' tmp[673958] tmp[673965]))
    }
    {
      (673977 'move' tmp[673957](673974 '_paramFoldLogical' tmp[673958] 0))
    }
    (1001400 call chpl_statementLevelSymbol tmp[673957])
  }
  { scopeless type
    bool[19]
  }
  function ==[114918](arg r1[114923]:range[240](?), arg r2[114929]:range[240](?)) : _unknown[42] "operator"
  {
    unknown ret[604494] "RVV" "temp"
    unknown call_tmp[792075] "expr temp" "maybe param" "maybe type" "temp"
    (792078 'move' call_tmp[792075](114953 call(114950 call (partial) isAligned _mt[203] r1[114923])))
    unknown call_tmp[792082] "expr temp" "maybe param" "maybe type" "temp"
    (792085 'move' call_tmp[792082](114958 call(114955 call (partial) isAligned _mt[203] r2[114929])))
    unknown call_tmp[792087] "expr temp" "maybe param" "maybe type" "temp"
    (792090 'move' call_tmp[792087](114947 call != call_tmp[792075] call_tmp[792082]))
    unknown call_tmp[792092] "expr temp" "maybe param" "maybe type" "temp"
    (792095 'move' call_tmp[792092](114959 call _cond_test call_tmp[792087]))
    if call_tmp[792092]
    {
      (604500 'move' ret[604494](604499 'coerce' 0 bool[19]))
      gotoReturn _end_==[604492] _end_==[604492]
    }
    unknown call_tmp[792099] "expr temp" "maybe param" "maybe type" "temp"
    (792102 'move' call_tmp[792099](114976 call(114973 call (partial) isAligned _mt[203] r1[114923])))
    unknown call_tmp[792104] "expr temp" "maybe param" "maybe type" "temp"
    (792107 'move' call_tmp[792104](114970 call ! call_tmp[792099]))
    unknown call_tmp[792109] "expr temp" "maybe param" "maybe type" "temp"
    (792112 'move' call_tmp[792109](114977 call _cond_test call_tmp[792104]))
    if call_tmp[792109]
    {
      unknown call_tmp[792114] "expr temp" "maybe param" "maybe type" "temp"
      (792117 'move' call_tmp[792114](114966 call chpl_ident r1[114923] r2[114929]))
      (604506 'move' ret[604494](604505 'coerce' call_tmp[792114] bool[19]))
      gotoReturn _end_==[604492] _end_==[604492]
    }
    unknown call_tmp[792121] "expr temp" "maybe param" "maybe type" "temp"
    (792124 'move' call_tmp[792121](115157 call bounds _mt[203] r1[114923]))
    unknown call_tmp[792126] "expr temp" "maybe param" "maybe type" "temp"
    (792129 'move' call_tmp[792126](115154 call == call_tmp[792121] both[107114]))
    unknown call_tmp[792131] "expr temp" "maybe param" "maybe type" "temp"
    (792134 'move' call_tmp[792131](115164 call _cond_test call_tmp[792126]))
    if call_tmp[792131]
    {
      unknown call_tmp[792138] "maybe param" "maybe type" "temp"
      (792141 'move' call_tmp[792138](114999 call(114996 call (partial) sizeAs _mt[203] r1[114923]) uint(64)[86]))
      const len[114994] "dead at end of block" "const" "insert auto destroy"
      (645287 'init var' len[114994] call_tmp[792138])
      unknown call_tmp[792145] "maybe param" "maybe type" "temp"
      (792148 'move' call_tmp[792145](114990 call(114987 call (partial) sizeAs _mt[203] r2[114929]) uint(64)[86]))
      const l2[114985] "dead at end of block" "const" "insert auto destroy"
      (645289 'init var' l2[114985] call_tmp[792145])
      (115002 'end of statement')
      unknown call_tmp[792150] "expr temp" "maybe param" "maybe type" "temp"
      (792153 'move' call_tmp[792150](115006 call != len[114994] l2[114985]))
      unknown call_tmp[792155] "expr temp" "maybe param" "maybe type" "temp"
      (792158 'move' call_tmp[792155](115010 call _cond_test call_tmp[792150]))
      if call_tmp[792155]
      {
        (604512 'move' ret[604494](604511 'coerce' 0 bool[19]))
        gotoReturn _end_==[604492] _end_==[604492]
      }
      unknown call_tmp[792160] "expr temp" "maybe param" "maybe type" "temp"
      (792163 'move' call_tmp[792160](115018 call == len[114994] 0))
      unknown call_tmp[792165] "expr temp" "maybe param" "maybe type" "temp"
      (792168 'move' call_tmp[792165](115022 call _cond_test call_tmp[792160]))
      if call_tmp[792165]
      {
        (604518 'move' ret[604494](604517 'coerce' 1 bool[19]))
        gotoReturn _end_==[604492] _end_==[604492]
      }
      unknown call_tmp[792172] "expr temp" "maybe param" "maybe type" "temp"
      (792175 'move' call_tmp[792172](115033 call first _mt[203] r1[114923]))
      unknown call_tmp[792179] "expr temp" "maybe param" "maybe type" "temp"
      (792182 'move' call_tmp[792179](115037 call first _mt[203] r2[114929]))
      unknown call_tmp[792184] "expr temp" "maybe param" "maybe type" "temp"
      (792187 'move' call_tmp[792184](115030 call != call_tmp[792172] call_tmp[792179]))
      unknown call_tmp[792189] "expr temp" "maybe param" "maybe type" "temp"
      (792192 'move' call_tmp[792189](115040 call _cond_test call_tmp[792184]))
      if call_tmp[792189]
      {
        (604524 'move' ret[604494](604523 'coerce' 0 bool[19]))
        gotoReturn _end_==[604492] _end_==[604492]
      }
      unknown call_tmp[792194] "expr temp" "maybe param" "maybe type" "temp"
      (792197 'move' call_tmp[792194](115048 call == len[114994] 1))
      unknown call_tmp[792199] "expr temp" "maybe param" "maybe type" "temp"
      (792202 'move' call_tmp[792199](115052 call _cond_test call_tmp[792194]))
      if call_tmp[792199]
      {
        (604530 'move' ret[604494](604529 'coerce' 1 bool[19]))
        gotoReturn _end_==[604492] _end_==[604492]
      }
      unknown call_tmp[792206] "expr temp" "maybe param" "maybe type" "temp"
      (792209 'move' call_tmp[792206](115063 call stride _mt[203] r1[114923]))
      unknown call_tmp[792213] "expr temp" "maybe param" "maybe type" "temp"
      (792216 'move' call_tmp[792213](115067 call stride _mt[203] r2[114929]))
      unknown call_tmp[792218] "expr temp" "maybe param" "maybe type" "temp"
      (792221 'move' call_tmp[792218](115060 call != call_tmp[792206] call_tmp[792213]))
      unknown call_tmp[792223] "expr temp" "maybe param" "maybe type" "temp"
      (792226 'move' call_tmp[792223](115070 call _cond_test call_tmp[792218]))
      if call_tmp[792223]
      {
        (604536 'move' ret[604494](604535 'coerce' 0 bool[19]))
        gotoReturn _end_==[604492] _end_==[604492]
      }
      (604542 'move' ret[604494](604541 'coerce' 1 bool[19]))
      gotoReturn _end_==[604492] _end_==[604492]
    }
    {
      unknown call_tmp[792230] "expr temp" "maybe param" "maybe type" "temp"
      (792233 'move' call_tmp[792230](115084 call stride _mt[203] r1[114923]))
      unknown call_tmp[792237] "expr temp" "maybe param" "maybe type" "temp"
      (792240 'move' call_tmp[792237](115088 call stride _mt[203] r2[114929]))
      unknown call_tmp[792242] "expr temp" "maybe param" "maybe type" "temp"
      (792245 'move' call_tmp[792242](115081 call != call_tmp[792230] call_tmp[792237]))
      unknown call_tmp[792247] "expr temp" "maybe param" "maybe type" "temp"
      (792250 'move' call_tmp[792247](115091 call _cond_test call_tmp[792242]))
      if call_tmp[792247]
      {
        (604548 'move' ret[604494](604547 'coerce' 0 bool[19]))
        gotoReturn _end_==[604492] _end_==[604492]
      }
      unknown call_tmp[792254] "expr temp" "maybe param" "maybe type" "temp"
      (792257 'move' call_tmp[792254](115118 call(115115 call (partial) hasLowBound _mt[203] r1[114923])))
      unknown call_tmp[792259] "expr temp" "maybe param" "maybe type" "temp"
      (792262 'move' call_tmp[792259](115119 call _cond_test call_tmp[792254]))
      if call_tmp[792259]
      {
        unknown call_tmp[792266] "expr temp" "maybe param" "maybe type" "temp"
        (792269 'move' call_tmp[792266](115102 call low _mt[203] r1[114923]))
        unknown call_tmp[792273] "expr temp" "maybe param" "maybe type" "temp"
        (792276 'move' call_tmp[792273](115106 call low _mt[203] r2[114929]))
        unknown call_tmp[792278] "expr temp" "maybe param" "maybe type" "temp"
        (792281 'move' call_tmp[792278](115099 call != call_tmp[792266] call_tmp[792273]))
        unknown call_tmp[792283] "expr temp" "maybe param" "maybe type" "temp"
        (792286 'move' call_tmp[792283](115109 call _cond_test call_tmp[792278]))
        if call_tmp[792283]
        {
          (604554 'move' ret[604494](604553 'coerce' 0 bool[19]))
          gotoReturn _end_==[604492] _end_==[604492]
        }
      }
      unknown call_tmp[792290] "expr temp" "maybe param" "maybe type" "temp"
      (792293 'move' call_tmp[792290](115146 call(115143 call (partial) hasHighBound _mt[203] r1[114923])))
      unknown call_tmp[792295] "expr temp" "maybe param" "maybe type" "temp"
      (792298 'move' call_tmp[792295](115147 call _cond_test call_tmp[792290]))
      if call_tmp[792295]
      {
        unknown call_tmp[792302] "expr temp" "maybe param" "maybe type" "temp"
        (792305 'move' call_tmp[792302](115130 call high _mt[203] r1[114923]))
        unknown call_tmp[792309] "expr temp" "maybe param" "maybe type" "temp"
        (792312 'move' call_tmp[792309](115134 call high _mt[203] r2[114929]))
        unknown call_tmp[792314] "expr temp" "maybe param" "maybe type" "temp"
        (792317 'move' call_tmp[792314](115127 call != call_tmp[792302] call_tmp[792309]))
        unknown call_tmp[792319] "expr temp" "maybe param" "maybe type" "temp"
        (792322 'move' call_tmp[792319](115137 call _cond_test call_tmp[792314]))
        if call_tmp[792319]
        {
          (604560 'move' ret[604494](604559 'coerce' 0 bool[19]))
          gotoReturn _end_==[604492] _end_==[604492]
        }
      }
      (604566 'move' ret[604494](604565 'coerce' 1 bool[19]))
      gotoReturn _end_==[604492] _end_==[604492]
    }
    label _end_==[604492]
    (604496 return ret[604494])
  }
  where {
    unknown call_tmp[792326] "expr temp" "maybe param" "maybe type" "temp"
    (792329 'move' call_tmp[792326](114936 call bounds _mt[203] r1[114923]))
    unknown call_tmp[792333] "expr temp" "maybe param" "maybe type" "temp"
    (792336 'move' call_tmp[792333](114940 call bounds _mt[203] r2[114929]))
    (114933 call == call_tmp[792326] call_tmp[792333])
  }
  { scopeless type
    bool[19]
  }
  function !=[115172](arg r1[115177]:range[240](?), arg r2[115183]:range[240](?)) : _unknown[42] "operator"
  {
    unknown ret[604572] "RVV" "temp"
    unknown call_tmp[792338] "expr temp" "maybe param" "maybe type" "temp"
    (792341 'move' call_tmp[792338](115190 call == r1[115177] r2[115183]))
    unknown call_tmp[792343] "expr temp" "maybe param" "maybe type" "temp"
    (792346 'move' call_tmp[792343](115188 call ! call_tmp[792338]))
    (604577 'move' ret[604572](604576 'deref' call_tmp[792343]))
    (604574 return ret[604572])
  }
  function !=[115196](arg r1[115201]:range[240](?), arg r2[115207]:range[240](?)) : _unknown[42] "operator" "@unstable"
  {
    unknown ret[604581] "RVV" "temp"
    unknown call_tmp[792348] "expr temp" "maybe param" "maybe type" "temp"
    (792351 'move' call_tmp[792348](115241 call == r1[115201] r2[115207]))
    unknown call_tmp[792353] "expr temp" "maybe param" "maybe type" "temp"
    (792356 'move' call_tmp[792353](115239 call ! call_tmp[792348]))
    (604587 'move' ret[604581](604586 'coerce' call_tmp[792353] bool[19]))
    (604583 return ret[604581])
  }
  where {
    unknown tmp[484515] "maybe param" "temp"
    unknown tmp[484536] "maybe param" "temp"
    unknown call_tmp[792360] "expr temp" "maybe param" "maybe type" "temp"
    (792363 'move' call_tmp[792360](115218 call bounds _mt[203] r1[115201]))
    unknown call_tmp[792367] "expr temp" "maybe param" "maybe type" "temp"
    (792370 'move' call_tmp[792367](115222 call bounds _mt[203] r2[115207]))
    (484547 'move' tmp[484536](115215 call != call_tmp[792360] call_tmp[792367]))
    unknown call_tmp[792372] "expr temp" "maybe param" "maybe type" "temp"
    (792375 'move' call_tmp[792372](484549 call _cond_invalid tmp[484536]))
    if call_tmp[792372]
    {
      (484552 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[673984] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[673985] "maybe param" "temp"
    unknown call_tmp[792377] "expr temp" "maybe param" "maybe type" "temp"
    (792380 'move' call_tmp[792377](484537 call isTrue tmp[484536]))
    (673990 'move' tmp[673985](673988 call _cond_test call_tmp[792377]))
    if tmp[673985]
    {
      unknown tmp[673992] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[792384] "expr temp" "maybe param" "maybe type" "temp"
      (792387 'move' call_tmp[792384](115228 call idxType _mt[203] r1[115201]))
      unknown call_tmp[792389] "expr temp" "maybe param" "maybe type" "temp"
      (792392 'move' call_tmp[792389](115226 call isFiniteIdxType call_tmp[792384]))
      (673994 'move' tmp[673992](484540 call isTrue call_tmp[792389]))
      (673999 'move' tmp[673984](673996 '_paramFoldLogical' tmp[673985] tmp[673992]))
    }
    {
      (674004 'move' tmp[673984](674001 '_paramFoldLogical' tmp[673985] 0))
    }
    (484526 'move' tmp[484515] tmp[673984])
    unknown call_tmp[792394] "expr temp" "maybe param" "maybe type" "temp"
    (792397 'move' call_tmp[792394](484528 call _cond_invalid tmp[484515]))
    if call_tmp[792394]
    {
      (484531 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[674011] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[674012] "maybe param" "temp"
    unknown call_tmp[792399] "expr temp" "maybe param" "maybe type" "temp"
    (792402 'move' call_tmp[792399](484516 call isTrue tmp[484515]))
    (674017 'move' tmp[674012](674015 call _cond_test call_tmp[792399]))
    if tmp[674012]
    {
      unknown tmp[674019] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[792406] "expr temp" "maybe param" "maybe type" "temp"
      (792409 'move' call_tmp[792406](115234 call idxType _mt[203] r2[115207]))
      unknown call_tmp[792411] "expr temp" "maybe param" "maybe type" "temp"
      (792414 'move' call_tmp[792411](115232 call isFiniteIdxType call_tmp[792406]))
      (674021 'move' tmp[674019](484519 call isTrue call_tmp[792411]))
      (674026 'move' tmp[674011](674023 '_paramFoldLogical' tmp[674012] tmp[674019]))
    }
    {
      (674031 'move' tmp[674011](674028 '_paramFoldLogical' tmp[674012] 0))
    }
    (1001402 call chpl_statementLevelSymbol tmp[674011])
  }
  { scopeless type
    bool[19]
  }
  function !=[115249](arg r1[115254]:range[240](?), arg r2[115260]:range[240](?)) param : _unknown[42] "operator"
  {
    unknown ret[604591] "RVV" "param" "temp"
    (604596 'move' ret[604591](604595 'deref' 1))
    (604593 return ret[604591])
  }
  where {
    unknown tmp[484557] "maybe param" "temp"
    unknown call_tmp[792418] "expr temp" "maybe param" "maybe type" "temp"
    (792421 'move' call_tmp[792418](115268 call bounds _mt[203] r1[115254]))
    unknown call_tmp[792425] "expr temp" "maybe param" "maybe type" "temp"
    (792428 'move' call_tmp[792425](115272 call bounds _mt[203] r2[115260]))
    (484568 'move' tmp[484557](115265 call != call_tmp[792418] call_tmp[792425]))
    unknown call_tmp[792430] "expr temp" "maybe param" "maybe type" "temp"
    (792433 'move' call_tmp[792430](484570 call _cond_invalid tmp[484557]))
    if call_tmp[792430]
    {
      (484573 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[674065] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[674066] "maybe param" "temp"
    unknown call_tmp[792435] "expr temp" "maybe param" "maybe type" "temp"
    (792438 'move' call_tmp[792435](484558 call isTrue tmp[484557]))
    (674071 'move' tmp[674066](674069 call _cond_test call_tmp[792435]))
    if tmp[674066]
    {
      unknown tmp[484578] "maybe param" "temp"
      unknown call_tmp[792442] "expr temp" "maybe param" "maybe type" "temp"
      (792445 'move' call_tmp[792442](115282 call idxType _mt[203] r1[115254]))
      unknown call_tmp[792447] "expr temp" "maybe param" "maybe type" "temp"
      (792450 'move' call_tmp[792447](115280 call isFiniteIdxType call_tmp[792442]))
      (484589 'move' tmp[484578](115277 call ! call_tmp[792447]))
      unknown call_tmp[792452] "expr temp" "maybe param" "maybe type" "temp"
      (792455 'move' call_tmp[792452](484591 call _cond_invalid tmp[484578]))
      if call_tmp[792452]
      {
        (484594 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[674038] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[674039] "maybe param" "temp"
      unknown call_tmp[792457] "expr temp" "maybe param" "maybe type" "temp"
      (792460 'move' call_tmp[792457](484579 call isTrue tmp[484578]))
      (674044 'move' tmp[674039](674042 call _cond_test call_tmp[792457]))
      if tmp[674039]
      {
        (674049 'move' tmp[674038](674046 '_paramFoldLogical' tmp[674039] 1))
      }
      {
        unknown tmp[674051] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[792464] "expr temp" "maybe param" "maybe type" "temp"
        (792467 'move' call_tmp[792464](115290 call idxType _mt[203] r2[115260]))
        unknown call_tmp[792469] "expr temp" "maybe param" "maybe type" "temp"
        (792472 'move' call_tmp[792469](115288 call isFiniteIdxType call_tmp[792464]))
        unknown call_tmp[792474] "expr temp" "maybe param" "maybe type" "temp"
        (792477 'move' call_tmp[792474](115285 call ! call_tmp[792469]))
        (674053 'move' tmp[674051](484583 call isTrue call_tmp[792474]))
        (674058 'move' tmp[674038](674055 '_paramFoldLogical' tmp[674039] tmp[674051]))
      }
      unknown tmp[674073] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (674075 'move' tmp[674073](484561 call isTrue tmp[674038]))
      (674080 'move' tmp[674065](674077 '_paramFoldLogical' tmp[674066] tmp[674073]))
    }
    {
      (674085 'move' tmp[674065](674082 '_paramFoldLogical' tmp[674066] 0))
    }
    (1001404 call chpl_statementLevelSymbol tmp[674065])
  }
  function <[115299](arg r1[115304]:range[240](?), arg r2[115310]:range[240](?)) : _unknown[42] "operator" "no return value for void"
  {
    (115337 call compilerError "Unbounded ranges don't support comparisons other than '==' and '!='")
    (604598 return _void[46])
  }
  where {
    unknown tmp[484599] "maybe param" "temp"
    unknown call_tmp[792481] "expr temp" "maybe param" "maybe type" "temp"
    (792484 'move' call_tmp[792481](115318 call bounds _mt[203] r1[115304]))
    (484610 'move' tmp[484599](115315 call != call_tmp[792481] both[107114]))
    unknown call_tmp[792486] "expr temp" "maybe param" "maybe type" "temp"
    (792489 'move' call_tmp[792486](484612 call _cond_invalid tmp[484599]))
    if call_tmp[792486]
    {
      (484615 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[674092] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[674093] "maybe param" "temp"
    unknown call_tmp[792491] "expr temp" "maybe param" "maybe type" "temp"
    (792494 'move' call_tmp[792491](484600 call isTrue tmp[484599]))
    (674098 'move' tmp[674093](674096 call _cond_test call_tmp[792491]))
    if tmp[674093]
    {
      (674103 'move' tmp[674092](674100 '_paramFoldLogical' tmp[674093] 1))
    }
    {
      unknown tmp[674105] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[792498] "expr temp" "maybe param" "maybe type" "temp"
      (792501 'move' call_tmp[792498](115328 call bounds _mt[203] r2[115310]))
      unknown call_tmp[792503] "expr temp" "maybe param" "maybe type" "temp"
      (792506 'move' call_tmp[792503](115325 call != call_tmp[792498] both[107114]))
      (674107 'move' tmp[674105](484604 call isTrue call_tmp[792503]))
      (674112 'move' tmp[674092](674109 '_paramFoldLogical' tmp[674093] tmp[674105]))
    }
    (1001406 call chpl_statementLevelSymbol tmp[674092])
  }
  function >[115344](arg r1[115349]:range[240](?), arg r2[115355]:range[240](?)) : _unknown[42] "operator" "no return value for void"
  {
    (115382 call compilerError "Unbounded ranges don't support comparisons other than '==' and '!='")
    (604600 return _void[46])
  }
  where {
    unknown tmp[484620] "maybe param" "temp"
    unknown call_tmp[792510] "expr temp" "maybe param" "maybe type" "temp"
    (792513 'move' call_tmp[792510](115363 call bounds _mt[203] r1[115349]))
    (484631 'move' tmp[484620](115360 call != call_tmp[792510] both[107114]))
    unknown call_tmp[792515] "expr temp" "maybe param" "maybe type" "temp"
    (792518 'move' call_tmp[792515](484633 call _cond_invalid tmp[484620]))
    if call_tmp[792515]
    {
      (484636 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[674119] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[674120] "maybe param" "temp"
    unknown call_tmp[792520] "expr temp" "maybe param" "maybe type" "temp"
    (792523 'move' call_tmp[792520](484621 call isTrue tmp[484620]))
    (674125 'move' tmp[674120](674123 call _cond_test call_tmp[792520]))
    if tmp[674120]
    {
      (674130 'move' tmp[674119](674127 '_paramFoldLogical' tmp[674120] 1))
    }
    {
      unknown tmp[674132] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[792527] "expr temp" "maybe param" "maybe type" "temp"
      (792530 'move' call_tmp[792527](115373 call bounds _mt[203] r2[115355]))
      unknown call_tmp[792532] "expr temp" "maybe param" "maybe type" "temp"
      (792535 'move' call_tmp[792532](115370 call != call_tmp[792527] both[107114]))
      (674134 'move' tmp[674132](484625 call isTrue call_tmp[792532]))
      (674139 'move' tmp[674119](674136 '_paramFoldLogical' tmp[674120] tmp[674132]))
    }
    (1001408 call chpl_statementLevelSymbol tmp[674119])
  }
  function <=[115387](arg r1[115392]:range[240](?), arg r2[115398]:range[240](?)) : _unknown[42] "operator" "no return value for void"
  {
    (115425 call compilerError "Unbounded ranges don't support comparisons other than '==' and '!='")
    (604602 return _void[46])
  }
  where {
    unknown tmp[484641] "maybe param" "temp"
    unknown call_tmp[792539] "expr temp" "maybe param" "maybe type" "temp"
    (792542 'move' call_tmp[792539](115406 call bounds _mt[203] r1[115392]))
    (484652 'move' tmp[484641](115403 call != call_tmp[792539] both[107114]))
    unknown call_tmp[792544] "expr temp" "maybe param" "maybe type" "temp"
    (792547 'move' call_tmp[792544](484654 call _cond_invalid tmp[484641]))
    if call_tmp[792544]
    {
      (484657 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[674146] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[674147] "maybe param" "temp"
    unknown call_tmp[792549] "expr temp" "maybe param" "maybe type" "temp"
    (792552 'move' call_tmp[792549](484642 call isTrue tmp[484641]))
    (674152 'move' tmp[674147](674150 call _cond_test call_tmp[792549]))
    if tmp[674147]
    {
      (674157 'move' tmp[674146](674154 '_paramFoldLogical' tmp[674147] 1))
    }
    {
      unknown tmp[674159] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[792556] "expr temp" "maybe param" "maybe type" "temp"
      (792559 'move' call_tmp[792556](115416 call bounds _mt[203] r2[115398]))
      unknown call_tmp[792561] "expr temp" "maybe param" "maybe type" "temp"
      (792564 'move' call_tmp[792561](115413 call != call_tmp[792556] both[107114]))
      (674161 'move' tmp[674159](484646 call isTrue call_tmp[792561]))
      (674166 'move' tmp[674146](674163 '_paramFoldLogical' tmp[674147] tmp[674159]))
    }
    (1001410 call chpl_statementLevelSymbol tmp[674146])
  }
  function >=[115430](arg r1[115435]:range[240](?), arg r2[115441]:range[240](?)) : _unknown[42] "operator" "no return value for void"
  {
    (115468 call compilerError "Unbounded ranges don't support comparisons other than '==' and '!='")
    (604604 return _void[46])
  }
  where {
    unknown tmp[484662] "maybe param" "temp"
    unknown call_tmp[792568] "expr temp" "maybe param" "maybe type" "temp"
    (792571 'move' call_tmp[792568](115449 call bounds _mt[203] r1[115435]))
    (484673 'move' tmp[484662](115446 call != call_tmp[792568] both[107114]))
    unknown call_tmp[792573] "expr temp" "maybe param" "maybe type" "temp"
    (792576 'move' call_tmp[792573](484675 call _cond_invalid tmp[484662]))
    if call_tmp[792573]
    {
      (484678 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[674173] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[674174] "maybe param" "temp"
    unknown call_tmp[792578] "expr temp" "maybe param" "maybe type" "temp"
    (792581 'move' call_tmp[792578](484663 call isTrue tmp[484662]))
    (674179 'move' tmp[674174](674177 call _cond_test call_tmp[792578]))
    if tmp[674174]
    {
      (674184 'move' tmp[674173](674181 '_paramFoldLogical' tmp[674174] 1))
    }
    {
      unknown tmp[674186] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[792585] "expr temp" "maybe param" "maybe type" "temp"
      (792588 'move' call_tmp[792585](115459 call bounds _mt[203] r2[115441]))
      unknown call_tmp[792590] "expr temp" "maybe param" "maybe type" "temp"
      (792593 'move' call_tmp[792590](115456 call != call_tmp[792585] both[107114]))
      (674188 'move' tmp[674186](484667 call isTrue call_tmp[792590]))
      (674193 'move' tmp[674173](674190 '_paramFoldLogical' tmp[674174] tmp[674186]))
    }
    (1001412 call chpl_statementLevelSymbol tmp[674173])
  }
  function chpl_ident[115473](arg r1[115478]:range[240](?), arg r2[115484]:range[240](?)) : _unknown[42]
  {
    unknown ret[604608] "RVV" "temp"
    unknown call_tmp[792597] "expr temp" "maybe param" "maybe type" "temp"
    (792600 'move' call_tmp[792597](115528 call _low _mt[203] r1[115478]))
    unknown call_tmp[792604] "expr temp" "maybe param" "maybe type" "temp"
    (792607 'move' call_tmp[792604](115532 call _low _mt[203] r2[115484]))
    unknown call_tmp[792609] "expr temp" "maybe param" "maybe type" "temp"
    (792612 'move' call_tmp[792609](115525 call != call_tmp[792597] call_tmp[792604]))
    unknown call_tmp[792614] "expr temp" "maybe param" "maybe type" "temp"
    (792617 'move' call_tmp[792614](115535 call _cond_test call_tmp[792609]))
    if call_tmp[792614]
    {
      (604613 'move' ret[604608](604612 'deref' 0))
      gotoReturn _end_chpl_ident[604606] _end_chpl_ident[604606]
    }
    unknown call_tmp[792621] "expr temp" "maybe param" "maybe type" "temp"
    (792624 'move' call_tmp[792621](115546 call _high _mt[203] r1[115478]))
    unknown call_tmp[792628] "expr temp" "maybe param" "maybe type" "temp"
    (792631 'move' call_tmp[792628](115550 call _high _mt[203] r2[115484]))
    unknown call_tmp[792633] "expr temp" "maybe param" "maybe type" "temp"
    (792636 'move' call_tmp[792633](115543 call != call_tmp[792621] call_tmp[792628]))
    unknown call_tmp[792638] "expr temp" "maybe param" "maybe type" "temp"
    (792641 'move' call_tmp[792638](115553 call _cond_test call_tmp[792633]))
    if call_tmp[792638]
    {
      (604618 'move' ret[604608](604617 'deref' 0))
      gotoReturn _end_chpl_ident[604606] _end_chpl_ident[604606]
    }
    unknown call_tmp[792645] "expr temp" "maybe param" "maybe type" "temp"
    (792648 'move' call_tmp[792645](115564 call _stride _mt[203] r1[115478]))
    unknown call_tmp[792652] "expr temp" "maybe param" "maybe type" "temp"
    (792655 'move' call_tmp[792652](115568 call _stride _mt[203] r2[115484]))
    unknown call_tmp[792657] "expr temp" "maybe param" "maybe type" "temp"
    (792660 'move' call_tmp[792657](115561 call != call_tmp[792645] call_tmp[792652]))
    unknown call_tmp[792662] "expr temp" "maybe param" "maybe type" "temp"
    (792665 'move' call_tmp[792662](115571 call _cond_test call_tmp[792657]))
    if call_tmp[792662]
    {
      (604623 'move' ret[604608](604622 'deref' 0))
      gotoReturn _end_chpl_ident[604606] _end_chpl_ident[604606]
    }
    unknown call_tmp[792669] "expr temp" "maybe param" "maybe type" "temp"
    (792672 'move' call_tmp[792669](115582 call _alignment _mt[203] r1[115478]))
    unknown call_tmp[792676] "expr temp" "maybe param" "maybe type" "temp"
    (792679 'move' call_tmp[792676](115586 call _alignment _mt[203] r2[115484]))
    unknown call_tmp[792681] "expr temp" "maybe param" "maybe type" "temp"
    (792684 'move' call_tmp[792681](115579 call != call_tmp[792669] call_tmp[792676]))
    unknown call_tmp[792686] "expr temp" "maybe param" "maybe type" "temp"
    (792689 'move' call_tmp[792686](115589 call _cond_test call_tmp[792681]))
    if call_tmp[792686]
    {
      (604628 'move' ret[604608](604627 'deref' 0))
      gotoReturn _end_chpl_ident[604606] _end_chpl_ident[604606]
    }
    (604633 'move' ret[604608](604632 'deref' 1))
    label _end_chpl_ident[604606]
    (604610 return ret[604608])
  }
  where {
    unknown tmp[484683] "maybe param" "temp"
    unknown tmp[484704] "maybe param" "temp"
    unknown call_tmp[792693] "expr temp" "maybe param" "maybe type" "temp"
    (792696 'move' call_tmp[792693](115494 call idxType _mt[203] r1[115478]))
    unknown call_tmp[792700] "expr temp" "maybe param" "maybe type" "temp"
    (792703 'move' call_tmp[792700](115498 call idxType _mt[203] r2[115484]))
    (484715 'move' tmp[484704](115491 call == call_tmp[792693] call_tmp[792700]))
    unknown call_tmp[792705] "expr temp" "maybe param" "maybe type" "temp"
    (792708 'move' call_tmp[792705](484717 call _cond_invalid tmp[484704]))
    if call_tmp[792705]
    {
      (484720 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[674200] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[674201] "maybe param" "temp"
    unknown call_tmp[792710] "expr temp" "maybe param" "maybe type" "temp"
    (792713 'move' call_tmp[792710](484705 call isTrue tmp[484704]))
    (674206 'move' tmp[674201](674204 call _cond_test call_tmp[792710]))
    if tmp[674201]
    {
      unknown tmp[674208] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[792717] "expr temp" "maybe param" "maybe type" "temp"
      (792720 'move' call_tmp[792717](115504 call bounds _mt[203] r1[115478]))
      unknown call_tmp[792724] "expr temp" "maybe param" "maybe type" "temp"
      (792727 'move' call_tmp[792724](115508 call bounds _mt[203] r2[115484]))
      unknown call_tmp[792729] "expr temp" "maybe param" "maybe type" "temp"
      (792732 'move' call_tmp[792729](115501 call == call_tmp[792717] call_tmp[792724]))
      (674210 'move' tmp[674208](484708 call isTrue call_tmp[792729]))
      (674215 'move' tmp[674200](674212 '_paramFoldLogical' tmp[674201] tmp[674208]))
    }
    {
      (674220 'move' tmp[674200](674217 '_paramFoldLogical' tmp[674201] 0))
    }
    (484694 'move' tmp[484683] tmp[674200])
    unknown call_tmp[792734] "expr temp" "maybe param" "maybe type" "temp"
    (792737 'move' call_tmp[792734](484696 call _cond_invalid tmp[484683]))
    if call_tmp[792734]
    {
      (484699 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[674227] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[674228] "maybe param" "temp"
    unknown call_tmp[792739] "expr temp" "maybe param" "maybe type" "temp"
    (792742 'move' call_tmp[792739](484684 call isTrue tmp[484683]))
    (674233 'move' tmp[674228](674231 call _cond_test call_tmp[792739]))
    if tmp[674228]
    {
      unknown tmp[674235] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[792746] "expr temp" "maybe param" "maybe type" "temp"
      (792749 'move' call_tmp[792746](115514 call strides _mt[203] r1[115478]))
      unknown call_tmp[792753] "expr temp" "maybe param" "maybe type" "temp"
      (792756 'move' call_tmp[792753](115518 call strides _mt[203] r2[115484]))
      unknown call_tmp[792758] "expr temp" "maybe param" "maybe type" "temp"
      (792761 'move' call_tmp[792758](115511 call == call_tmp[792746] call_tmp[792753]))
      (674237 'move' tmp[674235](484687 call isTrue call_tmp[792758]))
      (674242 'move' tmp[674227](674239 '_paramFoldLogical' tmp[674228] tmp[674235]))
    }
    {
      (674247 'move' tmp[674227](674244 '_paramFoldLogical' tmp[674228] 0))
    }
    (1001414 call chpl_statementLevelSymbol tmp[674227])
  }
  function chpl_ident[115599](arg r1[115604]:range[240](?), arg r2[115610]:range[240](?)) param : _unknown[42]
  {
    unknown ret[604637] "RVV" "param" "temp"
    (604642 'move' ret[604637](604641 'deref' 0))
    (604639 return ret[604637])
  }
  function range[240](?).boundingBox[115618](arg _mt[115624]:_MT[201], arg this[115621]:range[240](?) :
  range[240](?)) : _unknown[42] "method"
  {
    unknown ret[604646] "RVV" "temp"
    unknown call_tmp[792765] "expr temp" "maybe param" "maybe type" "temp"
    (792768 'move' call_tmp[792765](115632 call bounds _mt[203] this[115621]))
    unknown call_tmp[792770] "expr temp" "maybe param" "maybe type" "temp"
    (792773 'move' call_tmp[792770](115629 call == call_tmp[792765] both[107114]))
    (115628 call compilerAssert call_tmp[792770])
    (552061 'end of statement')
    unknown call_tmp[792777] "expr temp" "maybe param" "maybe type" "temp"
    (792780 'move' call_tmp[792777](115643 call strides _mt[203] this[115621]))
    unknown call_tmp[792784] "expr temp" "maybe param" "maybe type" "temp"
    (792787 'move' call_tmp[792784](115649 call(115646 call (partial) isOne _mt[203] call_tmp[792777])))
    unknown call_tmp[792789] "expr temp" "maybe param" "maybe type" "temp"
    (792792 'move' call_tmp[792789](115650 call _cond_test call_tmp[792784]))
    if call_tmp[792789]
    {
      (604651 'move' ret[604646](604650 'deref' this[115621]))
      gotoReturn _end_boundingBox[604644] _end_boundingBox[604644]
    }
    unknown call_tmp[792796] "expr temp" "maybe param" "maybe type" "temp"
    (792799 'move' call_tmp[792796](115660 call idxType _mt[203] this[115621]))
    unknown call_tmp[792803] "expr temp" "maybe param" "maybe type" "temp"
    (792806 'move' call_tmp[792803](115664 call bounds _mt[203] this[115621]))
    unknown call_tmp[792810] "expr temp" "maybe param" "maybe type" "temp"
    (792813 'move' call_tmp[792810](115672 call alignedLowAsInt _mt[203] this[115621]))
    unknown call_tmp[792817] "expr temp" "maybe param" "maybe type" "temp"
    (792820 'move' call_tmp[792817](115676 call alignedHighAsInt _mt[203] this[115621]))
    unknown call_tmp[792822] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (792825 'move' call_tmp[792822](1000071 'new' range[240](?) call_tmp[792796] call_tmp[792803] one[107127] call_tmp[792810] call_tmp[792817] none[48] none[48]))
    (604656 'move' ret[604646](604655 'deref' call_tmp[792822]))
    label _end_boundingBox[604644]
    (604648 return ret[604646])
  }
  function range[240](?).tryCast[115683](arg _mt[115695]:_MT[201], arg this[115686]:range[240](?) :
  range[240](?), arg t[115692]:range[240](?)) : _unknown[42] "method" "no where doc"
  {
    unknown ret[604660] "RVV" "temp"
    const r[115703] "dead at end of block" "const" "insert auto destroy"
    (645291 'init var' r[115703] this[115686])
    (115706 'end of statement')
    (115708 call checkBounds t[115692] r[115703])
    (552064 'end of statement' r[115703])
    (115712 call checkEnumBoolIdx t[115692] r[115703])
    (552066 'end of statement' r[115703])
    unknown tmp[484725] "maybe param" "temp"
    unknown call_tmp[792829] "expr temp" "maybe param" "maybe type" "temp"
    (792832 'move' call_tmp[792829](115724 call idxType _mt[203] t[115692]))
    (484736 'move' tmp[484725](115721 call == call_tmp[792829] int(64)[10]))
    unknown call_tmp[792834] "expr temp" "maybe param" "maybe type" "temp"
    (792837 'move' call_tmp[792834](484738 call _cond_invalid tmp[484725]))
    if call_tmp[792834]
    {
      (484741 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown useR[115716] "dead at end of block" "param"
    unknown tmp[674254] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[674255] "maybe param" "temp"
    unknown call_tmp[792839] "expr temp" "maybe param" "maybe type" "temp"
    (792842 'move' call_tmp[792839](484726 call isTrue tmp[484725]))
    (674260 'move' tmp[674255](674258 call _cond_test call_tmp[792839]))
    if tmp[674255]
    {
      unknown tmp[674262] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[792846] "expr temp" "maybe param" "maybe type" "temp"
      (792849 'move' call_tmp[792846](115731 call idxType _mt[203] r[115703]))
      unknown call_tmp[792851] "expr temp" "maybe param" "maybe type" "temp"
      (792854 'move' call_tmp[792851](115729 call isBCPindex call_tmp[792846]))
      (674264 'move' tmp[674262](484729 call isTrue call_tmp[792851]))
      (674269 'move' tmp[674254](674266 '_paramFoldLogical' tmp[674255] tmp[674262]))
    }
    {
      (674274 'move' tmp[674254](674271 '_paramFoldLogical' tmp[674255] 0))
    }
    unknown call_tmp[792856] "maybe param" "maybe type" "temp"
    (792859 'move' call_tmp[792856](115717 call ! tmp[674254]))
    (645293 'init var' useR[115716] call_tmp[792856])
    (115735 'end of statement')
    unknown result[115737] "dead at end of block" "insert auto destroy"
    unknown tmp[674281] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[674282] "maybe param" "temp"
    (674287 'move' tmp[674282](674285 call _cond_test useR[115716]))
    if tmp[674282]
    {
      (674292 'move' tmp[674281](674289 '_paramFoldLogical' tmp[674282] r[115703]))
    }
    {
      unknown tmp[674294] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[792863] "expr temp" "maybe param" "maybe type" "temp"
      (792866 'move' call_tmp[792863](115746 call bounds _mt[203] r[115703]))
      unknown call_tmp[792870] "expr temp" "maybe param" "maybe type" "temp"
      (792873 'move' call_tmp[792870](115750 call strides _mt[203] r[115703]))
      unknown call_tmp[792877] "expr temp" "maybe param" "maybe type" "temp"
      (792880 'move' call_tmp[792877](115754 call _low _mt[203] r[115703]))
      unknown call_tmp[792884] "expr temp" "maybe param" "maybe type" "temp"
      (792887 'move' call_tmp[792884](115758 call _high _mt[203] r[115703]))
      unknown call_tmp[792891] "expr temp" "maybe param" "maybe type" "temp"
      (792894 'move' call_tmp[792891](115762 call _stride _mt[203] r[115703]))
      unknown call_tmp[792898] "expr temp" "maybe param" "maybe type" "temp"
      (792901 'move' call_tmp[792898](115766 call _alignment _mt[203] r[115703]))
      (674296 'move' tmp[674294](1000072 'new' range[240](?) int(64)[10] call_tmp[792863] call_tmp[792870] call_tmp[792877] call_tmp[792884] call_tmp[792891] call_tmp[792898]))
      (674301 'move' tmp[674281](674298 '_paramFoldLogical' tmp[674282] tmp[674294]))
    }
    (645295 'init var' result[115737] tmp[674281] t[115692])
    (115773 'end of statement' r[115703])
    (604665 'move' ret[604660](604664 'deref' result[115737]))
    gotoReturn _end_tryCast[604658] _end_tryCast[604658]
    (552070 'end of statement' result[115737])
    label _end_tryCast[604658]
    (604662 return ret[604660])
  }
  where {
    (115698 call chpl_tryCastIsSafe this[115686] t[115692])
  }
  function range[240](?).tryCast[115779](arg _mt[115791]:_MT[201], arg this[115782]:range[240](?) :
  range[240](?), arg t[115788]:range[240](?)) : _unknown[42] throws "method"
  {
    unknown ret[604671] "RVV" "temp"
    const r[115801] "dead at end of block" "const" "insert auto destroy"
    (645297 'init var' r[115801] this[115782])
    (115804 'end of statement')
    (115806 call checkBounds t[115788] r[115801])
    (552072 'end of statement' r[115801])
    (115810 call checkEnumBoolIdx t[115788] r[115801])
    (552074 'end of statement' r[115801])
    unknown tmp[115814] "dead at end of block" "insert auto destroy"
    (645299 'default init var' tmp[115814] t[115788])
    (115817 'end of statement')
    unknown srcType[115834] "dead at end of block" "insert auto destroy" "type variable"
    (645305 'move' srcType[115834](645302 call idxType _mt[203] r[115801]))
    unknown dstType[115827] "dead at end of block" "insert auto destroy" "type variable"
    (645311 'move' dstType[115827](645308 call idxType _mt[203] t[115788]))
    unknown dstIntType[115820] "dead at end of block" "insert auto destroy" "type variable"
    (645317 'move' dstIntType[115820](645314 call chpl_integralIdxType _mt[203] tmp[115814]))
    (115840 'end of statement')
    unknown tmp[674308] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[674309] "maybe param" "temp"
    unknown call_tmp[792911] "expr temp" "maybe param" "maybe type" "temp"
    (792914 'move' call_tmp[792911](115853 call(115850 call (partial) hasLowBound _mt[203] r[115801])))
    unknown call_tmp[792916] "expr temp" "maybe param" "maybe type" "temp"
    (792919 'move' call_tmp[792916](115847 call ! call_tmp[792911]))
    (674314 'move' tmp[674309](674312 call _cond_test call_tmp[792916]))
    if tmp[674309]
    {
      unknown tmp[674316] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[792923] "expr temp" "maybe param" "maybe type" "temp"
      (792926 'move' call_tmp[792923](115857 call _low _mt[203] r[115801]))
      (674318 'move' tmp[674316](115854 call : call_tmp[792923] dstIntType[115820]))
      (674323 'move' tmp[674308](674320 '_paramFoldLogical' tmp[674309] tmp[674316]))
    }
    {
      unknown tmp[674325] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[792930] "expr temp" "maybe param" "maybe type" "temp"
      (792933 'move' call_tmp[792930](115867 call lowBound _mt[203] r[115801]))
      unknown call_tmp[792935] "expr temp" "maybe param" "maybe type" "temp"
      (792938 'move' call_tmp[792935](115864 call chpl_throwingCast dstType[115827] call_tmp[792930]))
      (674327 'move' tmp[674325](115862 call chpl__idxToInt call_tmp[792935]))
      (674332 'move' tmp[674308](674329 '_paramFoldLogical' tmp[674309] tmp[674325]))
    }
    unknown call_tmp[792942] "expr temp" "maybe param" "maybe type" "temp"
    (792945 'move' call_tmp[792942](115844 call _low _mt[203] tmp[115814]))
    (115841 call = call_tmp[792942] tmp[674308])
    (552078 'end of statement' tmp[115814] r[115801] dstIntType[115820] dstType[115827] r[115801])
    unknown tmp[674339] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[674340] "maybe param" "temp"
    unknown call_tmp[792949] "expr temp" "maybe param" "maybe type" "temp"
    (792952 'move' call_tmp[792949](115885 call(115882 call (partial) hasHighBound _mt[203] r[115801])))
    unknown call_tmp[792954] "expr temp" "maybe param" "maybe type" "temp"
    (792957 'move' call_tmp[792954](115879 call ! call_tmp[792949]))
    (674345 'move' tmp[674340](674343 call _cond_test call_tmp[792954]))
    if tmp[674340]
    {
      unknown tmp[674347] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[792961] "expr temp" "maybe param" "maybe type" "temp"
      (792964 'move' call_tmp[792961](115889 call _high _mt[203] r[115801]))
      (674349 'move' tmp[674347](115886 call : call_tmp[792961] dstIntType[115820]))
      (674354 'move' tmp[674339](674351 '_paramFoldLogical' tmp[674340] tmp[674347]))
    }
    {
      unknown tmp[674356] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[792968] "expr temp" "maybe param" "maybe type" "temp"
      (792971 'move' call_tmp[792968](115899 call highBound _mt[203] r[115801]))
      unknown call_tmp[792973] "expr temp" "maybe param" "maybe type" "temp"
      (792976 'move' call_tmp[792973](115896 call chpl_throwingCast dstType[115827] call_tmp[792968]))
      (674358 'move' tmp[674356](115894 call chpl__idxToInt call_tmp[792973]))
      (674363 'move' tmp[674339](674360 '_paramFoldLogical' tmp[674340] tmp[674356]))
    }
    unknown call_tmp[792980] "expr temp" "maybe param" "maybe type" "temp"
    (792983 'move' call_tmp[792980](115876 call _high _mt[203] tmp[115814]))
    (115873 call = call_tmp[792980] tmp[674339])
    (552084 'end of statement' tmp[115814] r[115801] dstIntType[115820] dstType[115827] r[115801])
    unknown call_tmp[792987] "maybe param" "maybe type" "temp"
    (792990 'move' call_tmp[792987](115913 call(115910 call (partial) chpl_checkStrides _mt[203] r[115801]) t[115788]))
    unknown error[115906] "dead at end of block" "insert auto destroy"
    (645319 'init var' error[115906] call_tmp[792987])
    (115916 'end of statement' r[115801] tmp[115814])
    unknown call_tmp[792992] "expr temp" "maybe param" "maybe type" "temp"
    (792995 'move' call_tmp[792992](115920 call != error[115906] nil[32]))
    unknown call_tmp[792997] "expr temp" "maybe param" "maybe type" "temp"
    (793000 'move' call_tmp[792997](115924 call _cond_test call_tmp[792992]))
    if call_tmp[792997]
    {
      unknown call_tmp[793002] "expr temp" "maybe param" "maybe type" "temp"
      (793005 'move' call_tmp[793002](542249 call chpl_fix_thrown_error error[115906]))
      (115917 'throw' call_tmp[793002])
      (552090 'end of statement' error[115906])
    }
    unknown call_tmp[793009] "expr temp" "maybe param" "maybe type" "temp"
    (793012 'move' call_tmp[793009](115978 call(115975 call (partial) hasParamStrideAltvalAld _mt[203] tmp[115814])))
    unknown call_tmp[793014] "expr temp" "maybe param" "maybe type" "temp"
    (793017 'move' call_tmp[793014](115972 call ! call_tmp[793009]))
    unknown call_tmp[793019] "expr temp" "maybe param" "maybe type" "temp"
    (793022 'move' call_tmp[793019](115979 call _cond_test call_tmp[793014]))
    if call_tmp[793019]
    {
      unknown call_tmp[793026] "expr temp" "maybe param" "maybe type" "temp"
      (793029 'move' call_tmp[793026](115933 call _stride _mt[203] tmp[115814]))
      unknown call_tmp[793033] "expr temp" "maybe param" "maybe type" "temp"
      (793036 'move' call_tmp[793033](115939 call strType _mt[203] tmp[115814]))
      unknown call_tmp[793040] "expr temp" "maybe param" "maybe type" "temp"
      (793043 'move' call_tmp[793040](115943 call stride _mt[203] r[115801]))
      unknown call_tmp[793045] "expr temp" "maybe param" "maybe type" "temp"
      (793048 'move' call_tmp[793045](115937 call chpl_throwingCast call_tmp[793033] call_tmp[793040]))
      (115930 call = call_tmp[793026] call_tmp[793045])
      (552092 'end of statement' tmp[115814] r[115801])
      unknown tmp[674370] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[674371] "maybe param" "temp"
      unknown call_tmp[793052] "expr temp" "maybe param" "maybe type" "temp"
      (793055 'move' call_tmp[793052](115955 call _alignment _mt[203] r[115801]))
      unknown call_tmp[793057] "expr temp" "maybe param" "maybe type" "temp"
      (793060 'move' call_tmp[793057](115953 call isNothingValue call_tmp[793052]))
      (674376 'move' tmp[674371](674374 call _cond_test call_tmp[793057]))
      if tmp[674371]
      {
        (674381 'move' tmp[674370](674378 '_paramFoldLogical' tmp[674371] 0))
      }
      {
        unknown tmp[674383] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[793064] "expr temp" "maybe param" "maybe type" "temp"
        (793067 'move' call_tmp[793064](115962 call _alignment _mt[203] r[115801]))
        unknown call_tmp[793071] "expr temp" "maybe param" "maybe type" "temp"
        (793074 'move' call_tmp[793071](115966 call strType _mt[203] tmp[115814]))
        (674385 'move' tmp[674383](115959 call : call_tmp[793064] call_tmp[793071]))
        (674390 'move' tmp[674370](674387 '_paramFoldLogical' tmp[674371] tmp[674383]))
      }
      unknown call_tmp[793078] "expr temp" "maybe param" "maybe type" "temp"
      (793081 'move' call_tmp[793078](115949 call _alignment _mt[203] tmp[115814]))
      (115946 call = call_tmp[793078] tmp[674370])
      (552095 'end of statement' tmp[115814] r[115801])
    }
    (604676 'move' ret[604671](604675 'deref' tmp[115814]))
    gotoReturn _end_tryCast[604669] _end_tryCast[604669]
    (552098 'end of statement' tmp[115814])
    label _end_tryCast[604669]
    (604673 return ret[604671])
  }
  where {
    unknown call_tmp[793083] "expr temp" "maybe param" "maybe type" "temp"
    (793086 'move' call_tmp[793083](115796 call chpl_tryCastIsSafe this[115782] t[115788]))
    (115793 call ! call_tmp[793083])
  }
  function :[115988](arg r[115993]:range[240](?), arg t[115999]:range[240](?)) : _unknown[42] "operator"
  {
    unknown ret[604682] "RVV" "temp"
    (116008 call checkBounds t[115999] r[115993])
    (552100 'end of statement')
    (116012 call checkEnumIdx t[115999] r[115993])
    (552101 'end of statement')
    unknown call_tmp[793090] "expr temp" "maybe param" "maybe type" "temp"
    (793093 'move' call_tmp[793090](116021 call idxType _mt[203] t[115999]))
    unknown call_tmp[793097] "expr temp" "maybe param" "maybe type" "temp"
    (793100 'move' call_tmp[793097](116025 call bounds _mt[203] t[115999]))
    unknown call_tmp[793104] "expr temp" "maybe param" "maybe type" "temp"
    (793107 'move' call_tmp[793104](116029 call strides _mt[203] t[115999]))
    unknown call_tmp[793109] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (793112 'move' call_tmp[793109](1000073 'new' range[240](?) call_tmp[793090] call_tmp[793097] call_tmp[793104] 1))
    unknown tmp[116016] "dead at end of block" "insert auto destroy"
    (645321 'init var' tmp[116016] call_tmp[793109])
    (116034 'end of statement')
    unknown srcType[116051] "dead at end of block" "insert auto destroy" "type variable"
    (645327 'move' srcType[116051](645324 call idxType _mt[203] r[115993]))
    unknown dstType[116044] "dead at end of block" "insert auto destroy" "type variable"
    (645333 'move' dstType[116044](645330 call idxType _mt[203] t[115999]))
    unknown dstIntType[116037] "dead at end of block" "insert auto destroy" "type variable"
    (645339 'move' dstIntType[116037](645336 call chpl_integralIdxType _mt[203] tmp[116016]))
    (116057 'end of statement' tmp[116016])
    unknown tmp[674397] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[674398] "maybe param" "temp"
    unknown call_tmp[793122] "expr temp" "maybe param" "maybe type" "temp"
    (793125 'move' call_tmp[793122](116070 call(116067 call (partial) hasLowBound _mt[203] r[115993])))
    (674403 'move' tmp[674398](674401 call _cond_test call_tmp[793122]))
    if tmp[674398]
    {
      unknown tmp[674405] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[793129] "expr temp" "maybe param" "maybe type" "temp"
      (793132 'move' call_tmp[793129](116076 call lowBound _mt[203] r[115993]))
      unknown call_tmp[793134] "expr temp" "maybe param" "maybe type" "temp"
      (793137 'move' call_tmp[793134](116073 call : call_tmp[793129] dstType[116044]))
      (674407 'move' tmp[674405](116072 call chpl__idxToInt call_tmp[793134]))
      (674412 'move' tmp[674397](674409 '_paramFoldLogical' tmp[674398] tmp[674405]))
    }
    {
      unknown tmp[674414] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (674416 'move' tmp[674414](116081 call _low _mt[203] r[115993]))
      (674421 'move' tmp[674397](674418 '_paramFoldLogical' tmp[674398] tmp[674414]))
    }
    unknown call_tmp[793143] "expr temp" "maybe param" "maybe type" "temp"
    (793146 'move' call_tmp[793143](116061 call _low _mt[203] tmp[116016]))
    unknown call_tmp[793150] "expr temp" "maybe param" "maybe type" "temp"
    (793153 'move' call_tmp[793150](116088 call chpl_integralIdxType _mt[203] tmp[116016]))
    unknown call_tmp[793155] "expr temp" "maybe param" "maybe type" "temp"
    (793158 'move' call_tmp[793155](116064 call : tmp[674397] call_tmp[793150]))
    (116058 call = call_tmp[793143] call_tmp[793155])
    (552103 'end of statement' tmp[116016] dstType[116044])
    unknown tmp[674428] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[674429] "maybe param" "temp"
    unknown call_tmp[793162] "expr temp" "maybe param" "maybe type" "temp"
    (793165 'move' call_tmp[793162](116103 call(116100 call (partial) hasHighBound _mt[203] r[115993])))
    (674434 'move' tmp[674429](674432 call _cond_test call_tmp[793162]))
    if tmp[674429]
    {
      unknown tmp[674436] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[793169] "expr temp" "maybe param" "maybe type" "temp"
      (793172 'move' call_tmp[793169](116109 call highBound _mt[203] r[115993]))
      unknown call_tmp[793174] "expr temp" "maybe param" "maybe type" "temp"
      (793177 'move' call_tmp[793174](116106 call : call_tmp[793169] dstType[116044]))
      (674438 'move' tmp[674436](116105 call chpl__idxToInt call_tmp[793174]))
      (674443 'move' tmp[674428](674440 '_paramFoldLogical' tmp[674429] tmp[674436]))
    }
    {
      unknown tmp[674445] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (674447 'move' tmp[674445](116114 call _high _mt[203] r[115993]))
      (674452 'move' tmp[674428](674449 '_paramFoldLogical' tmp[674429] tmp[674445]))
    }
    unknown call_tmp[793183] "expr temp" "maybe param" "maybe type" "temp"
    (793186 'move' call_tmp[793183](116094 call _high _mt[203] tmp[116016]))
    unknown call_tmp[793190] "expr temp" "maybe param" "maybe type" "temp"
    (793193 'move' call_tmp[793190](116121 call chpl_integralIdxType _mt[203] tmp[116016]))
    unknown call_tmp[793195] "expr temp" "maybe param" "maybe type" "temp"
    (793198 'move' call_tmp[793195](116097 call : tmp[674428] call_tmp[793190]))
    (116091 call = call_tmp[793183] call_tmp[793195])
    (552106 'end of statement' tmp[116016] dstType[116044])
    unknown call_tmp[793200] "expr temp" "maybe param" "maybe type" "temp"
    (793203 'move' call_tmp[793200](116150 call _cond_test 1))
    if call_tmp[793200]
    {
      unknown call_tmp[793207] "expr temp" "maybe param" "maybe type" "temp"
      (793210 'move' call_tmp[793207](116139 call(116136 call (partial) chpl_checkStrides _mt[203] r[115993]) t[115999]))
      unknown ifvar_borrow[793212] "temp"
      (793214 'move' ifvar_borrow[793212](793217 call chpl_checkBorrowIfVar call_tmp[793207] 0))
      unknown call_tmp[793224] "expr temp" "maybe param" "maybe type" "temp"
      (793227 'move' call_tmp[793224](116144 call _cond_test ifvar_borrow[793212]))
      if call_tmp[793224]
      {
        const error[116141] "const"
        (793220 'move' error[116141](793222 'to non nilable class' ifvar_borrow[793212]))
        unknown call_tmp[793231] "expr temp" "maybe param" "maybe type" "temp"
        (793234 'move' call_tmp[793231](116133 call(116130 call (partial) message _mt[203] error[116141])))
        (116128 call boundsCheckHalt module=[222] HaltWrappers[518] call_tmp[793231])
        (552109 'end of statement' error[116141])
        (401676 'referenced modules list' HaltWrappers[518])
      }
    }
    unknown call_tmp[793238] "expr temp" "maybe param" "maybe type" "temp"
    (793241 'move' call_tmp[793238](116206 call(116203 call (partial) hasParamStrideAltvalAld _mt[203] tmp[116016])))
    unknown call_tmp[793243] "expr temp" "maybe param" "maybe type" "temp"
    (793246 'move' call_tmp[793243](116200 call ! call_tmp[793238]))
    unknown call_tmp[793248] "expr temp" "maybe param" "maybe type" "temp"
    (793251 'move' call_tmp[793248](116207 call _cond_test call_tmp[793243]))
    if call_tmp[793248]
    {
      unknown call_tmp[793255] "expr temp" "maybe param" "maybe type" "temp"
      (793258 'move' call_tmp[793255](116159 call _stride _mt[203] tmp[116016]))
      unknown call_tmp[793262] "expr temp" "maybe param" "maybe type" "temp"
      (793265 'move' call_tmp[793262](116163 call stride _mt[203] r[115993]))
      unknown call_tmp[793271] "expr temp" "maybe param" "maybe type" "temp"
      (793274 'move' call_tmp[793271](116171 call strType _mt[203] tmp[116016]))
      unknown call_tmp[793276] "expr temp" "maybe param" "maybe type" "temp"
      (793279 'move' call_tmp[793276](116169 call(116166 call (partial) safeCast _mt[203] call_tmp[793262]) call_tmp[793271]))
      (116156 call = call_tmp[793255] call_tmp[793276])
      (552111 'end of statement' tmp[116016])
      unknown tmp[674459] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[674460] "maybe param" "temp"
      unknown call_tmp[793283] "expr temp" "maybe param" "maybe type" "temp"
      (793286 'move' call_tmp[793283](116183 call _alignment _mt[203] r[115993]))
      unknown call_tmp[793288] "expr temp" "maybe param" "maybe type" "temp"
      (793291 'move' call_tmp[793288](116181 call isNothingValue call_tmp[793283]))
      (674465 'move' tmp[674460](674463 call _cond_test call_tmp[793288]))
      if tmp[674460]
      {
        (674470 'move' tmp[674459](674467 '_paramFoldLogical' tmp[674460] 0))
      }
      {
        unknown tmp[674472] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[793295] "expr temp" "maybe param" "maybe type" "temp"
        (793298 'move' call_tmp[793295](116190 call _alignment _mt[203] r[115993]))
        unknown call_tmp[793302] "expr temp" "maybe param" "maybe type" "temp"
        (793305 'move' call_tmp[793302](116194 call strType _mt[203] tmp[116016]))
        (674474 'move' tmp[674472](116187 call : call_tmp[793295] call_tmp[793302]))
        (674479 'move' tmp[674459](674476 '_paramFoldLogical' tmp[674460] tmp[674472]))
      }
      unknown call_tmp[793309] "expr temp" "maybe param" "maybe type" "temp"
      (793312 'move' call_tmp[793309](116177 call _alignment _mt[203] tmp[116016]))
      (116174 call = call_tmp[793309] tmp[674459])
      (552113 'end of statement' tmp[116016])
    }
    (604687 'move' ret[604682](604686 'deref' tmp[116016]))
    gotoReturn _end_:[604680] _end_:[604680]
    (552115 'end of statement' tmp[116016])
    label _end_:[604680]
    (604684 return ret[604682])
  }
  where {
    (116003 call chpl_castIsSafe r[115993] t[115999])
  }
  function :[116216](arg r[116221]:range[240](?), arg t[116227]:range[240](?)) : _unknown[42] throws "operator"
  {
    unknown ret[604693] "RVV" "temp"
    (116238 call checkBounds t[116227] r[116221])
    (552117 'end of statement')
    (116242 call checkEnumIdx t[116227] r[116221])
    (552118 'end of statement')
    unknown call_tmp[793316] "expr temp" "maybe param" "maybe type" "temp"
    (793319 'move' call_tmp[793316](116251 call idxType _mt[203] t[116227]))
    unknown call_tmp[793323] "expr temp" "maybe param" "maybe type" "temp"
    (793326 'move' call_tmp[793323](116255 call bounds _mt[203] t[116227]))
    unknown call_tmp[793330] "expr temp" "maybe param" "maybe type" "temp"
    (793333 'move' call_tmp[793330](116259 call strides _mt[203] t[116227]))
    unknown call_tmp[793335] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (793338 'move' call_tmp[793335](1000074 'new' range[240](?) call_tmp[793316] call_tmp[793323] call_tmp[793330] 1))
    unknown tmp[116246] "dead at end of block" "insert auto destroy"
    (645341 'init var' tmp[116246] call_tmp[793335])
    (116264 'end of statement')
    unknown srcType[116281] "dead at end of block" "insert auto destroy" "type variable"
    (645347 'move' srcType[116281](645344 call idxType _mt[203] r[116221]))
    unknown dstType[116274] "dead at end of block" "insert auto destroy" "type variable"
    (645353 'move' dstType[116274](645350 call idxType _mt[203] t[116227]))
    unknown dstIntType[116267] "dead at end of block" "insert auto destroy" "type variable"
    (645359 'move' dstIntType[116267](645356 call chpl_integralIdxType _mt[203] tmp[116246]))
    (116287 'end of statement' tmp[116246])
    unknown tmp[674486] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[674487] "maybe param" "temp"
    unknown call_tmp[793348] "expr temp" "maybe param" "maybe type" "temp"
    (793351 'move' call_tmp[793348](116300 call(116297 call (partial) hasLowBound _mt[203] r[116221])))
    (674492 'move' tmp[674487](674490 call _cond_test call_tmp[793348]))
    if tmp[674487]
    {
      unknown tmp[674494] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[793355] "expr temp" "maybe param" "maybe type" "temp"
      (793358 'move' call_tmp[793355](116306 call lowBound _mt[203] r[116221]))
      unknown call_tmp[793360] "expr temp" "maybe param" "maybe type" "temp"
      (793363 'move' call_tmp[793360](116303 call : call_tmp[793355] dstType[116274]))
      (674496 'move' tmp[674494](116302 call chpl__idxToInt call_tmp[793360]))
      (674501 'move' tmp[674486](674498 '_paramFoldLogical' tmp[674487] tmp[674494]))
    }
    {
      unknown tmp[674503] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (674505 'move' tmp[674503](116311 call _low _mt[203] r[116221]))
      (674510 'move' tmp[674486](674507 '_paramFoldLogical' tmp[674487] tmp[674503]))
    }
    unknown call_tmp[793369] "expr temp" "maybe param" "maybe type" "temp"
    (793372 'move' call_tmp[793369](116291 call _low _mt[203] tmp[116246]))
    unknown call_tmp[793376] "expr temp" "maybe param" "maybe type" "temp"
    (793379 'move' call_tmp[793376](116318 call chpl_integralIdxType _mt[203] tmp[116246]))
    unknown call_tmp[793381] "expr temp" "maybe param" "maybe type" "temp"
    (793384 'move' call_tmp[793381](116294 call : tmp[674486] call_tmp[793376]))
    (116288 call = call_tmp[793369] call_tmp[793381])
    (552120 'end of statement' tmp[116246] dstType[116274])
    unknown tmp[674517] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[674518] "maybe param" "temp"
    unknown call_tmp[793388] "expr temp" "maybe param" "maybe type" "temp"
    (793391 'move' call_tmp[793388](116333 call(116330 call (partial) hasHighBound _mt[203] r[116221])))
    (674523 'move' tmp[674518](674521 call _cond_test call_tmp[793388]))
    if tmp[674518]
    {
      unknown tmp[674525] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[793395] "expr temp" "maybe param" "maybe type" "temp"
      (793398 'move' call_tmp[793395](116339 call highBound _mt[203] r[116221]))
      unknown call_tmp[793400] "expr temp" "maybe param" "maybe type" "temp"
      (793403 'move' call_tmp[793400](116336 call : call_tmp[793395] dstType[116274]))
      (674527 'move' tmp[674525](116335 call chpl__idxToInt call_tmp[793400]))
      (674532 'move' tmp[674517](674529 '_paramFoldLogical' tmp[674518] tmp[674525]))
    }
    {
      unknown tmp[674534] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (674536 'move' tmp[674534](116344 call _high _mt[203] r[116221]))
      (674541 'move' tmp[674517](674538 '_paramFoldLogical' tmp[674518] tmp[674534]))
    }
    unknown call_tmp[793409] "expr temp" "maybe param" "maybe type" "temp"
    (793412 'move' call_tmp[793409](116324 call _high _mt[203] tmp[116246]))
    unknown call_tmp[793416] "expr temp" "maybe param" "maybe type" "temp"
    (793419 'move' call_tmp[793416](116351 call chpl_integralIdxType _mt[203] tmp[116246]))
    unknown call_tmp[793421] "expr temp" "maybe param" "maybe type" "temp"
    (793424 'move' call_tmp[793421](116327 call : tmp[674517] call_tmp[793416]))
    (116321 call = call_tmp[793409] call_tmp[793421])
    (552123 'end of statement' tmp[116246] dstType[116274])
    unknown call_tmp[793426] "expr temp" "maybe param" "maybe type" "temp"
    (793429 'move' call_tmp[793426](116380 call _cond_test 1))
    if call_tmp[793426]
    {
      unknown call_tmp[793433] "expr temp" "maybe param" "maybe type" "temp"
      (793436 'move' call_tmp[793433](116369 call(116366 call (partial) chpl_checkStrides _mt[203] r[116221]) t[116227]))
      unknown ifvar_borrow[793438] "temp"
      (793440 'move' ifvar_borrow[793438](793443 call chpl_checkBorrowIfVar call_tmp[793433] 0))
      unknown call_tmp[793450] "expr temp" "maybe param" "maybe type" "temp"
      (793453 'move' call_tmp[793450](116374 call _cond_test ifvar_borrow[793438]))
      if call_tmp[793450]
      {
        const error[116371] "const"
        (793446 'move' error[116371](793448 'to non nilable class' ifvar_borrow[793438]))
        unknown call_tmp[793457] "expr temp" "maybe param" "maybe type" "temp"
        (793460 'move' call_tmp[793457](116363 call(116360 call (partial) message _mt[203] error[116371])))
        (116358 call boundsCheckHalt module=[222] HaltWrappers[518] call_tmp[793457])
        (552126 'end of statement' error[116371])
        (401708 'referenced modules list' HaltWrappers[518])
      }
    }
    unknown call_tmp[793464] "expr temp" "maybe param" "maybe type" "temp"
    (793467 'move' call_tmp[793464](116436 call(116433 call (partial) hasParamStrideAltvalAld _mt[203] tmp[116246])))
    unknown call_tmp[793469] "expr temp" "maybe param" "maybe type" "temp"
    (793472 'move' call_tmp[793469](116430 call ! call_tmp[793464]))
    unknown call_tmp[793474] "expr temp" "maybe param" "maybe type" "temp"
    (793477 'move' call_tmp[793474](116437 call _cond_test call_tmp[793469]))
    if call_tmp[793474]
    {
      unknown call_tmp[793481] "expr temp" "maybe param" "maybe type" "temp"
      (793484 'move' call_tmp[793481](116389 call _stride _mt[203] tmp[116246]))
      unknown call_tmp[793488] "expr temp" "maybe param" "maybe type" "temp"
      (793491 'move' call_tmp[793488](116393 call stride _mt[203] r[116221]))
      unknown call_tmp[793497] "expr temp" "maybe param" "maybe type" "temp"
      (793500 'move' call_tmp[793497](116401 call strType _mt[203] tmp[116246]))
      unknown call_tmp[793502] "expr temp" "maybe param" "maybe type" "temp"
      (793505 'move' call_tmp[793502](116399 call(116396 call (partial) safeCast _mt[203] call_tmp[793488]) call_tmp[793497]))
      (116386 call = call_tmp[793481] call_tmp[793502])
      (552128 'end of statement' tmp[116246])
      unknown tmp[674548] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[674549] "maybe param" "temp"
      unknown call_tmp[793509] "expr temp" "maybe param" "maybe type" "temp"
      (793512 'move' call_tmp[793509](116413 call _alignment _mt[203] r[116221]))
      unknown call_tmp[793514] "expr temp" "maybe param" "maybe type" "temp"
      (793517 'move' call_tmp[793514](116411 call isNothingValue call_tmp[793509]))
      (674554 'move' tmp[674549](674552 call _cond_test call_tmp[793514]))
      if tmp[674549]
      {
        (674559 'move' tmp[674548](674556 '_paramFoldLogical' tmp[674549] 0))
      }
      {
        unknown tmp[674561] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[793521] "expr temp" "maybe param" "maybe type" "temp"
        (793524 'move' call_tmp[793521](116420 call _alignment _mt[203] r[116221]))
        unknown call_tmp[793528] "expr temp" "maybe param" "maybe type" "temp"
        (793531 'move' call_tmp[793528](116424 call strType _mt[203] tmp[116246]))
        (674563 'move' tmp[674561](116417 call : call_tmp[793521] call_tmp[793528]))
        (674568 'move' tmp[674548](674565 '_paramFoldLogical' tmp[674549] tmp[674561]))
      }
      unknown call_tmp[793535] "expr temp" "maybe param" "maybe type" "temp"
      (793538 'move' call_tmp[793535](116407 call _alignment _mt[203] tmp[116246]))
      (116404 call = call_tmp[793535] tmp[674548])
      (552130 'end of statement' tmp[116246])
    }
    (604698 'move' ret[604693](604697 'deref' tmp[116246]))
    gotoReturn _end_:[604691] _end_:[604691]
    (552132 'end of statement' tmp[116246])
    label _end_:[604691]
    (604695 return ret[604693])
  }
  where {
    unknown call_tmp[793540] "expr temp" "maybe param" "maybe type" "temp"
    (793543 'move' call_tmp[793540](116233 call chpl_castIsSafe r[116221] t[116227]))
    (116230 call ! call_tmp[793540])
  }
  function chpl_throwingCast[116446](arg toType[116448]:_any[141](?), arg from[116450]:_any[141](?)) : _unknown[42] throws "inline"
  {
    unknown ret[604704] "RVV" "temp"
    unknown fromType[116454] "dead at end of block" "insert auto destroy" "type variable"
    (645363 'move' fromType[116454](645361 'typeof' from[116450]))
    (552134 'end of statement')
    unknown tmp[484746] "maybe param" "temp"
    (484757 'move' tmp[484746](116486 call isIntegral fromType[116454]))
    unknown call_tmp[793545] "expr temp" "maybe param" "maybe type" "temp"
    (793548 'move' call_tmp[793545](484759 call _cond_invalid tmp[484746]))
    if call_tmp[793545]
    {
      (484762 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[674575] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[674576] "maybe param" "temp"
    unknown call_tmp[793550] "expr temp" "maybe param" "maybe type" "temp"
    (793553 'move' call_tmp[793550](484747 call isTrue tmp[484746]))
    (674581 'move' tmp[674576](674579 call _cond_test call_tmp[793550]))
    if tmp[674576]
    {
      unknown tmp[674583] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[793555] "expr temp" "maybe param" "maybe type" "temp"
      (793558 'move' call_tmp[793555](116489 call isIntegral toType[116448]))
      (674585 'move' tmp[674583](484750 call isTrue call_tmp[793555]))
      (674590 'move' tmp[674575](674587 '_paramFoldLogical' tmp[674576] tmp[674583]))
    }
    {
      (674595 'move' tmp[674575](674592 '_paramFoldLogical' tmp[674576] 0))
    }
    unknown call_tmp[793560] "expr temp" "maybe param" "maybe type" "temp"
    (793563 'move' call_tmp[793560](116491 call _cond_test tmp[674575]))
    if call_tmp[793560]
    {
      unknown call_tmp[793567] "maybe param" "maybe type" "temp"
      (793570 'move' call_tmp[793567](116467 call(116464 call (partial) chpl_checkValue _mt[203] from[116450]) toType[116448]))
      unknown error[116460] "dead at end of block" "insert auto destroy"
      (645365 'init var' error[116460] call_tmp[793567])
      (116470 'end of statement')
      unknown call_tmp[793572] "expr temp" "maybe param" "maybe type" "temp"
      (793575 'move' call_tmp[793572](116474 call != error[116460] nil[32]))
      unknown call_tmp[793577] "expr temp" "maybe param" "maybe type" "temp"
      (793580 'move' call_tmp[793577](116478 call _cond_test call_tmp[793572]))
      if call_tmp[793577]
      {
        unknown call_tmp[793582] "expr temp" "maybe param" "maybe type" "temp"
        (793585 'move' call_tmp[793582](542251 call chpl_fix_thrown_error error[116460]))
        (116471 'throw' call_tmp[793582])
        (552136 'end of statement' error[116460])
      }
    }
    unknown tmp[484767] "maybe param" "temp"
    unknown tmp[484788] "maybe param" "temp"
    (484799 'move' tmp[484788](116514 call isEnum fromType[116454]))
    unknown call_tmp[793587] "expr temp" "maybe param" "maybe type" "temp"
    (793590 'move' call_tmp[793587](484801 call _cond_invalid tmp[484788]))
    if call_tmp[793587]
    {
      (484804 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[674602] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[674603] "maybe param" "temp"
    unknown call_tmp[793592] "expr temp" "maybe param" "maybe type" "temp"
    (793595 'move' call_tmp[793592](484789 call isTrue tmp[484788]))
    (674608 'move' tmp[674603](674606 call _cond_test call_tmp[793592]))
    if tmp[674603]
    {
      unknown tmp[674610] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[793597] "expr temp" "maybe param" "maybe type" "temp"
      (793600 'move' call_tmp[793597](116517 call isIntegral toType[116448]))
      (674612 'move' tmp[674610](484792 call isTrue call_tmp[793597]))
      (674617 'move' tmp[674602](674614 '_paramFoldLogical' tmp[674603] tmp[674610]))
    }
    {
      (674622 'move' tmp[674602](674619 '_paramFoldLogical' tmp[674603] 0))
    }
    (484778 'move' tmp[484767] tmp[674602])
    unknown call_tmp[793602] "expr temp" "maybe param" "maybe type" "temp"
    (793605 'move' call_tmp[793602](484780 call _cond_invalid tmp[484767]))
    if call_tmp[793602]
    {
      (484783 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[674629] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[674630] "maybe param" "temp"
    unknown call_tmp[793607] "expr temp" "maybe param" "maybe type" "temp"
    (793610 'move' call_tmp[793607](484768 call isTrue tmp[484767]))
    (674635 'move' tmp[674630](674633 call _cond_test call_tmp[793607]))
    if tmp[674630]
    {
      unknown tmp[674637] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[793612] "expr temp" "maybe param" "maybe type" "temp"
      (793615 'move' call_tmp[793612](116519 call != toType[116448] int(64)[10]))
      (674639 'move' tmp[674637](484771 call isTrue call_tmp[793612]))
      (674644 'move' tmp[674629](674641 '_paramFoldLogical' tmp[674630] tmp[674637]))
    }
    {
      (674649 'move' tmp[674629](674646 '_paramFoldLogical' tmp[674630] 0))
    }
    unknown call_tmp[793617] "expr temp" "maybe param" "maybe type" "temp"
    (793620 'move' call_tmp[793617](116523 call _cond_test tmp[674629]))
    if call_tmp[793617]
    {
      unknown call_tmp[793622] "maybe param" "maybe type" "temp"
      (793625 'move' call_tmp[793622](116498 call : from[116450] int(64)[10]))
      const e2i[116497] "dead at end of block" "const" "insert auto destroy"
      (645367 'init var' e2i[116497] call_tmp[793622])
      (116503 'end of statement')
      unknown call_tmp[793627] "expr temp" "maybe param" "maybe type" "temp"
      (793630 'move' call_tmp[793627](116506 call chpl_throwingCast toType[116448] e2i[116497]))
      (604709 'move' ret[604704](604708 'deref' call_tmp[793627]))
      gotoReturn _end_chpl_throwingCast[604702] _end_chpl_throwingCast[604702]
      (552140 'end of statement' e2i[116497])
    }
    unknown call_tmp[793632] "expr temp" "maybe param" "maybe type" "temp"
    (793635 'move' call_tmp[793632](116528 call : from[116450] toType[116448]))
    (604714 'move' ret[604704](604713 'deref' call_tmp[793632]))
    label _end_chpl_throwingCast[604702]
    (604706 return ret[604704])
  }
  function chpl_throwingCast[116534](arg toType[116536]:_any[141](?), arg from[116538]:_any[141](?)) : _unknown[42] "inline"
  {
    unknown ret[604718] "RVV" "temp"
    unknown call_tmp[793637] "expr temp" "maybe param" "maybe type" "temp"
    (793640 'move' call_tmp[793637](116547 call : from[116538] toType[116536]))
    (604723 'move' ret[604718](604722 'deref' call_tmp[793637]))
    (604720 return ret[604718])
  }
  where {
    unknown call_tmp[793642] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (793645 'move' call_tmp[793642](116544 'typeof' from[116538]))
    (116541 call chpl_idxCastIsSafe toType[116536] call_tmp[793642])
  }
  function checkBounds[116554](arg toType[116556]:_any[141](?), arg from[116558]:_any[141](?)) : _unknown[42] "private" "no return value for void"
  {
    unknown call_tmp[793649] "expr temp" "maybe param" "maybe type" "temp"
    (793652 'move' call_tmp[793649](116587 call bounds _mt[203] toType[116556]))
    unknown call_tmp[793656] "expr temp" "maybe param" "maybe type" "temp"
    (793659 'move' call_tmp[793656](116591 call bounds _mt[203] from[116558]))
    unknown call_tmp[793661] "expr temp" "maybe param" "maybe type" "temp"
    (793664 'move' call_tmp[793661](116584 call != call_tmp[793649] call_tmp[793656]))
    unknown call_tmp[793666] "expr temp" "maybe param" "maybe type" "temp"
    (793669 'move' call_tmp[793666](116594 call _cond_test call_tmp[793661]))
    if call_tmp[793666]
    {
      unknown call_tmp[793673] "expr temp" "maybe param" "maybe type" "temp"
      (793676 'move' call_tmp[793673](116569 call bounds _mt[203] from[116558]))
      unknown call_tmp[793678] "expr temp" "maybe param" "maybe type" "temp"
      (793681 'move' call_tmp[793678](116566 call : call_tmp[793673] string[244]))
      unknown call_tmp[793685] "expr temp" "maybe param" "maybe type" "temp"
      (793688 'move' call_tmp[793685](116579 call bounds _mt[203] toType[116556]))
      unknown call_tmp[793690] "expr temp" "maybe param" "maybe type" "temp"
      (793693 'move' call_tmp[793690](116576 call : call_tmp[793685] string[244]))
      (116562 call compilerError "cannot cast range from boundKind." call_tmp[793678] " to boundKind." call_tmp[793690])
    }
    (604725 return _void[46])
  }
  function checkEnumBoolIdx[116601](arg toType[116603]:_any[141](?), arg from[116605]:_any[141](?)) : _unknown[42] "private" "no return value for void"
  {
    (116609 call checkEnumIdx toType[116603] from[116605])
    (552145 'end of statement')
    unknown tmp[484809] "maybe param" "temp"
    unknown call_tmp[793697] "expr temp" "maybe param" "maybe type" "temp"
    (793700 'move' call_tmp[793697](116623 call idxType _mt[203] toType[116603]))
    (484820 'move' tmp[484809](116620 call == call_tmp[793697] bool[19]))
    unknown call_tmp[793702] "expr temp" "maybe param" "maybe type" "temp"
    (793705 'move' call_tmp[793702](484822 call _cond_invalid tmp[484809]))
    if call_tmp[793702]
    {
      (484825 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[674656] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[674657] "maybe param" "temp"
    unknown call_tmp[793707] "expr temp" "maybe param" "maybe type" "temp"
    (793710 'move' call_tmp[793707](484810 call isTrue tmp[484809]))
    (674662 'move' tmp[674657](674660 call _cond_test call_tmp[793707]))
    if tmp[674657]
    {
      unknown tmp[674664] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[793714] "expr temp" "maybe param" "maybe type" "temp"
      (793717 'move' call_tmp[793714](116630 call idxType _mt[203] from[116605]))
      unknown call_tmp[793719] "expr temp" "maybe param" "maybe type" "temp"
      (793722 'move' call_tmp[793719](116627 call != call_tmp[793714] bool[19]))
      (674666 'move' tmp[674664](484813 call isTrue call_tmp[793719]))
      (674671 'move' tmp[674656](674668 '_paramFoldLogical' tmp[674657] tmp[674664]))
    }
    {
      (674676 'move' tmp[674656](674673 '_paramFoldLogical' tmp[674657] 0))
    }
    unknown call_tmp[793724] "expr temp" "maybe param" "maybe type" "temp"
    (793727 'move' call_tmp[793724](116634 call _cond_test tmp[674656]))
    if call_tmp[793724]
    {
      (116613 call compilerError "'tryCast' to a range type with idxType=bool is not currently supported")
    }
    (604727 return _void[46])
  }
  function checkEnumIdx[116641](arg toType[116643]:_any[141](?), arg from[116645]:_any[141](?)) : _unknown[42] "private" "no return value for void"
  {
    unknown srcType[116657] "dead at end of block" "insert auto destroy" "type variable"
    (645373 'move' srcType[116657](645370 call idxType _mt[203] from[116645]))
    unknown dstType[116650] "dead at end of block" "insert auto destroy" "type variable"
    (645379 'move' dstType[116650](645376 call idxType _mt[203] toType[116643]))
    (116663 'end of statement')
    unknown tmp[484830] "maybe param" "temp"
    (484841 'move' tmp[484830] 0)
    unknown call_tmp[793733] "expr temp" "maybe param" "maybe type" "temp"
    (793736 'move' call_tmp[793733](484843 call _cond_invalid tmp[484830]))
    if call_tmp[793733]
    {
      (484846 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[674737] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[674738] "maybe param" "temp"
    unknown call_tmp[793738] "expr temp" "maybe param" "maybe type" "temp"
    (793741 'move' call_tmp[793738](484831 call isTrue tmp[484830]))
    (674743 'move' tmp[674738](674741 call _cond_test call_tmp[793738]))
    if tmp[674738]
    {
      unknown tmp[484851] "maybe param" "temp"
      unknown tmp[484872] "maybe param" "temp"
      (484883 'move' tmp[484872](116678 call isEnumType srcType[116657]))
      unknown call_tmp[793743] "expr temp" "maybe param" "maybe type" "temp"
      (793746 'move' call_tmp[793743](484885 call _cond_invalid tmp[484872]))
      if call_tmp[793743]
      {
        (484888 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[674683] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[674684] "maybe param" "temp"
      unknown call_tmp[793748] "expr temp" "maybe param" "maybe type" "temp"
      (793751 'move' call_tmp[793748](484873 call isTrue tmp[484872]))
      (674689 'move' tmp[674684](674687 call _cond_test call_tmp[793748]))
      if tmp[674684]
      {
        (674694 'move' tmp[674683](674691 '_paramFoldLogical' tmp[674684] 1))
      }
      {
        unknown tmp[674696] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[793753] "expr temp" "maybe param" "maybe type" "temp"
        (793756 'move' call_tmp[793753](116681 call isEnumType dstType[116650]))
        (674698 'move' tmp[674696](484877 call isTrue call_tmp[793753]))
        (674703 'move' tmp[674683](674700 '_paramFoldLogical' tmp[674684] tmp[674696]))
      }
      (484862 'move' tmp[484851] tmp[674683])
      unknown call_tmp[793758] "expr temp" "maybe param" "maybe type" "temp"
      (793761 'move' call_tmp[793758](484864 call _cond_invalid tmp[484851]))
      if call_tmp[793758]
      {
        (484867 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[674710] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[674711] "maybe param" "temp"
      unknown call_tmp[793763] "expr temp" "maybe param" "maybe type" "temp"
      (793766 'move' call_tmp[793763](484852 call isTrue tmp[484851]))
      (674716 'move' tmp[674711](674714 call _cond_test call_tmp[793763]))
      if tmp[674711]
      {
        unknown tmp[674718] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[793768] "expr temp" "maybe param" "maybe type" "temp"
        (793771 'move' call_tmp[793768](116683 call != srcType[116657] dstType[116650]))
        (674720 'move' tmp[674718](484855 call isTrue call_tmp[793768]))
        (674725 'move' tmp[674710](674722 '_paramFoldLogical' tmp[674711] tmp[674718]))
      }
      {
        (674730 'move' tmp[674710](674727 '_paramFoldLogical' tmp[674711] 0))
      }
      unknown tmp[674745] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (674747 'move' tmp[674745](484834 call isTrue tmp[674710]))
      (674752 'move' tmp[674737](674749 '_paramFoldLogical' tmp[674738] tmp[674745]))
    }
    {
      (674757 'move' tmp[674737](674754 '_paramFoldLogical' tmp[674738] 0))
    }
    unknown call_tmp[793773] "expr temp" "maybe param" "maybe type" "temp"
    (793776 'move' call_tmp[793773](116687 call _cond_test tmp[674737]))
    if call_tmp[793773]
    {
      (116665 call compilerWarning "Casts between ranges involving 'enum' indices are currently unstable (see issue #22406); consider performing the conversion ma)
    }
    (604729 return _void[46])
  }
  function range[240](?).chpl_checkStrides[116694](arg _mt[116702]:_MT[201], arg this[116697]:range[240](?) :
  range[240](?), arg toType[116700]:_any[141](?)) : _unknown[42] "method"
  {
    unknown ret[604733] "RVV" "temp"
    unknown call_tmp[793780] "expr temp" "maybe param" "maybe type" "temp"
    (793783 'move' call_tmp[793780](116735 call strides _mt[203] toType[116700]))
    unknown call_tmp[793787] "expr temp" "maybe param" "maybe type" "temp"
    (793790 'move' call_tmp[793787](116739 call strides _mt[203] this[116697]))
    unknown call_tmp[793792] "expr temp" "maybe param" "maybe type" "temp"
    (793795 'move' call_tmp[793792](116733 call chpl_assignStrideIsUnsafe call_tmp[793780] call_tmp[793787]))
    unknown call_tmp[793797] "expr temp" "maybe param" "maybe type" "temp"
    (793800 'move' call_tmp[793797](116742 call _cond_test call_tmp[793792]))
    if call_tmp[793797]
    {
      unknown call_tmp[793804] "expr temp" "maybe param" "maybe type" "temp"
      (793807 'move' call_tmp[793804](116717 call strides _mt[203] this[116697]))
      unknown call_tmp[793809] "expr temp" "maybe param" "maybe type" "temp"
      (793812 'move' call_tmp[793809](116714 call : call_tmp[793804] string[244]))
      unknown call_tmp[793816] "expr temp" "maybe param" "maybe type" "temp"
      (793819 'move' call_tmp[793816](116727 call strides _mt[203] toType[116700]))
      unknown call_tmp[793821] "expr temp" "maybe param" "maybe type" "temp"
      (793824 'move' call_tmp[793821](116724 call : call_tmp[793816] string[244]))
      (116710 call compilerError "cannot cast range from strideKind." call_tmp[793809] " to strideKind." call_tmp[793821])
    }
    unknown needThrow[116748] "dead at end of block" "insert auto destroy"
    (645381 'init var' needThrow[116748] 0)
    (116751 'end of statement')
    {
      unknown tmp[116844] "expr temp" "maybe param" "maybe type" "temp"
      (116846 'move' tmp[116844](116753 call strides _mt[203] toType[116700]))
      unknown call_tmp[793828] "expr temp" "maybe param" "maybe type" "temp"
      (793831 'move' call_tmp[793828](116848 call == tmp[116844] one[107127]))
      unknown call_tmp[793833] "expr temp" "maybe param" "maybe type" "temp"
      (793836 'move' call_tmp[793833](116851 call _cond_test call_tmp[793828]))
      if call_tmp[793833]
      {
        unknown call_tmp[793840] "expr temp" "maybe param" "maybe type" "temp"
        (793843 'move' call_tmp[793840](116769 call stride _mt[203] this[116697]))
        unknown call_tmp[793845] "expr temp" "maybe param" "maybe type" "temp"
        (793848 'move' call_tmp[793845](116766 call != call_tmp[793840] 1))
        (116763 call = needThrow[116748] call_tmp[793845])
        (552151 'end of statement' needThrow[116748])
      }
      {
        unknown call_tmp[793850] "expr temp" "maybe param" "maybe type" "temp"
        (793853 'move' call_tmp[793850](116854 call == tmp[116844] negOne[107129]))
        unknown call_tmp[793855] "expr temp" "maybe param" "maybe type" "temp"
        (793858 'move' call_tmp[793855](116857 call _cond_test call_tmp[793850]))
        if call_tmp[793855]
        {
          unknown call_tmp[793862] "expr temp" "maybe param" "maybe type" "temp"
          (793865 'move' call_tmp[793862](116788 call stride _mt[203] this[116697]))
          unknown call_tmp[793867] "expr temp" "maybe param" "maybe type" "temp"
          (793870 'move' call_tmp[793867](116791 call - 1))
          unknown call_tmp[793872] "expr temp" "maybe param" "maybe type" "temp"
          (793875 'move' call_tmp[793872](116785 call != call_tmp[793862] call_tmp[793867]))
          (116782 call = needThrow[116748] call_tmp[793872])
          (552153 'end of statement' needThrow[116748])
        }
        {
          unknown call_tmp[793877] "expr temp" "maybe param" "maybe type" "temp"
          (793880 'move' call_tmp[793877](116861 call == tmp[116844] positive[107131]))
          unknown call_tmp[793882] "expr temp" "maybe param" "maybe type" "temp"
          (793885 'move' call_tmp[793882](116864 call _cond_test call_tmp[793877]))
          if call_tmp[793882]
          {
            unknown call_tmp[793889] "expr temp" "maybe param" "maybe type" "temp"
            (793892 'move' call_tmp[793889](116809 call stride _mt[203] this[116697]))
            unknown call_tmp[793894] "expr temp" "maybe param" "maybe type" "temp"
            (793897 'move' call_tmp[793894](116806 call < call_tmp[793889] 0))
            (116803 call = needThrow[116748] call_tmp[793894])
            (552155 'end of statement' needThrow[116748])
          }
          {
            unknown call_tmp[793899] "expr temp" "maybe param" "maybe type" "temp"
            (793902 'move' call_tmp[793899](116868 call == tmp[116844] negative[107133]))
            unknown call_tmp[793904] "expr temp" "maybe param" "maybe type" "temp"
            (793907 'move' call_tmp[793904](116871 call _cond_test call_tmp[793899]))
            if call_tmp[793904]
            {
              unknown call_tmp[793911] "expr temp" "maybe param" "maybe type" "temp"
              (793914 'move' call_tmp[793911](116828 call stride _mt[203] this[116697]))
              unknown call_tmp[793916] "expr temp" "maybe param" "maybe type" "temp"
              (793919 'move' call_tmp[793916](116825 call > call_tmp[793911] 0))
              (116822 call = needThrow[116748] call_tmp[793916])
              (552157 'end of statement' needThrow[116748])
            }
            {
              unknown call_tmp[793921] "expr temp" "maybe param" "maybe type" "temp"
              (793924 'move' call_tmp[793921](116875 call == tmp[116844] any[107135]))
              unknown call_tmp[793926] "expr temp" "maybe param" "maybe type" "temp"
              (793929 'move' call_tmp[793926](116878 call _cond_test call_tmp[793921]))
              if call_tmp[793926]
              {
              }
            }
          }
        }
      }
    }
    unknown call_tmp[793931] "expr temp" "maybe param" "maybe type" "temp"
    (793934 'move' call_tmp[793931](116915 call _cond_test needThrow[116748]))
    if call_tmp[793931]
    {
      unknown call_tmp[793938] "expr temp" "maybe param" "maybe type" "temp"
      (793941 'move' call_tmp[793938](116898 call stride _mt[203] this[116697]))
      unknown call_tmp[793943] "expr temp" "maybe param" "maybe type" "temp"
      (793946 'move' call_tmp[793943](116895 call : call_tmp[793938] string[244]))
      unknown call_tmp[793948] "expr temp" "maybe param" "maybe type" "temp"
      (793951 'move' call_tmp[793948](116890 call + "bad cast from stride " call_tmp[793943]))
      unknown call_tmp[793953] "expr temp" "maybe param" "maybe type" "temp"
      (793956 'move' call_tmp[793953](116888 call + call_tmp[793948] " to strideKind."))
      unknown call_tmp[793960] "expr temp" "maybe param" "maybe type" "temp"
      (793963 'move' call_tmp[793960](116906 call strides _mt[203] toType[116700]))
      unknown call_tmp[793965] "expr temp" "maybe param" "maybe type" "temp"
      (793968 'move' call_tmp[793965](116903 call : call_tmp[793960] string[244]))
      unknown call_tmp[793970] "expr temp" "maybe param" "maybe type" "temp"
      (793973 'move' call_tmp[793970](116886 call + call_tmp[793953] call_tmp[793965]))
      unknown call_tmp[793975] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (793978 'move' call_tmp[793975](1000075 'new' IllegalArgumentError[414940](?) call_tmp[793970]))
      unknown call_tmp[793980] "expr temp" "maybe param" "maybe type" "temp"
      (793983 'move' call_tmp[793980](604738 call _owned[238](?) borrowed IllegalArgumentError?[468067]))
      (604741 'move' ret[604733](604740 'coerce' call_tmp[793975] call_tmp[793980]))
      gotoReturn _end_chpl_checkStrides[604731] _end_chpl_checkStrides[604731]
    }
    {
      unknown call_tmp[793985] "expr temp" "maybe param" "maybe type" "temp"
      (793988 'move' call_tmp[793985](604746 call _owned[238](?) borrowed IllegalArgumentError?[468067]))
      (604749 'move' ret[604733](604748 'coerce' nil[32] call_tmp[793985]))
      gotoReturn _end_chpl_checkStrides[604731] _end_chpl_checkStrides[604731]
    }
    label _end_chpl_checkStrides[604731]
    (604735 return ret[604733])
  }
  { scopeless type
    (116705 call _owned[238](?) borrowed IllegalArgumentError?[468067])
  }
  function chpl_tryCastIsSafe[116924](arg r[116929]:range[240](?), arg t[116935]:range[240](?)) param : _unknown[42]
  {
    unknown ret[604755] "RVV" "param" "temp"
    unknown tmp[484893] "maybe param" "temp"
    unknown call_tmp[793992] "expr temp" "maybe param" "maybe type" "temp"
    (793995 'move' call_tmp[793992](116945 call strides _mt[203] t[116935]))
    unknown call_tmp[793999] "expr temp" "maybe param" "maybe type" "temp"
    (794002 'move' call_tmp[793999](116949 call strides _mt[203] r[116929]))
    (484904 'move' tmp[484893](116943 call chpl_assignStrideIsSafe call_tmp[793992] call_tmp[793999]))
    unknown call_tmp[794004] "expr temp" "maybe param" "maybe type" "temp"
    (794007 'move' call_tmp[794004](484906 call _cond_invalid tmp[484893]))
    if call_tmp[794004]
    {
      (484909 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[674764] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[674765] "maybe param" "temp"
    unknown call_tmp[794009] "expr temp" "maybe param" "maybe type" "temp"
    (794012 'move' call_tmp[794009](484894 call isTrue tmp[484893]))
    (674770 'move' tmp[674765](674768 call _cond_test call_tmp[794009]))
    if tmp[674765]
    {
      unknown tmp[674772] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[794016] "expr temp" "maybe param" "maybe type" "temp"
      (794019 'move' call_tmp[794016](116955 call idxType _mt[203] t[116935]))
      unknown call_tmp[794023] "expr temp" "maybe param" "maybe type" "temp"
      (794026 'move' call_tmp[794023](116960 call idxType _mt[203] r[116929]))
      unknown call_tmp[794028] "expr temp" "maybe param" "maybe type" "temp"
      (794031 'move' call_tmp[794028](116953 call chpl_idxCastIsSafe(to = call_tmp[794016])(from = call_tmp[794023])))
      (674774 'move' tmp[674772](484897 call isTrue call_tmp[794028]))
      (674779 'move' tmp[674764](674776 '_paramFoldLogical' tmp[674765] tmp[674772]))
    }
    {
      (674784 'move' tmp[674764](674781 '_paramFoldLogical' tmp[674765] 0))
    }
    (604760 'move' ret[604755](604759 'deref' tmp[674764]))
    (604757 return ret[604755])
  }
  function chpl_castIsSafe[116966](arg r[116971]:range[240](?), arg t[116977]:range[240](?)) param : _unknown[42]
  {
    unknown ret[604764] "RVV" "param" "temp"
    unknown call_tmp[794035] "expr temp" "maybe param" "maybe type" "temp"
    (794038 'move' call_tmp[794035](116987 call idxType _mt[203] t[116977]))
    unknown call_tmp[794042] "expr temp" "maybe param" "maybe type" "temp"
    (794045 'move' call_tmp[794042](116992 call idxType _mt[203] r[116971]))
    unknown call_tmp[794047] "expr temp" "maybe param" "maybe type" "temp"
    (794050 'move' call_tmp[794047](116985 call chpl_idxCastThrows(to = call_tmp[794035])(from = call_tmp[794042])))
    unknown call_tmp[794052] "expr temp" "maybe param" "maybe type" "temp"
    (794055 'move' call_tmp[794052](116982 call ! call_tmp[794047]))
    (604769 'move' ret[604764](604768 'deref' call_tmp[794052]))
    (604766 return ret[604764])
  }
  function chpl_idxCastIsSafe[116998](arg to[117000]:_any[141](?), arg from[117002]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[604773] "RVV" "param" "temp"
    unknown tmp[484914] "maybe param" "temp"
    unknown tmp[484935] "maybe param" "temp"
    unknown tmp[484956] "maybe param" "temp"
    (484967 'move' tmp[484956](117015 call isUint to[117000]))
    unknown call_tmp[794057] "expr temp" "maybe param" "maybe type" "temp"
    (794060 'move' call_tmp[794057](484969 call _cond_invalid tmp[484956]))
    if call_tmp[794057]
    {
      (484972 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[674791] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[674792] "maybe param" "temp"
    unknown call_tmp[794062] "expr temp" "maybe param" "maybe type" "temp"
    (794065 'move' call_tmp[794062](484957 call isTrue tmp[484956]))
    (674797 'move' tmp[674792](674795 call _cond_test call_tmp[794062]))
    if tmp[674792]
    {
      unknown tmp[674799] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[794067] "expr temp" "maybe param" "maybe type" "temp"
      (794070 'move' call_tmp[794067](117018 call isInt from[117002]))
      (674801 'move' tmp[674799](484960 call isTrue call_tmp[794067]))
      (674806 'move' tmp[674791](674803 '_paramFoldLogical' tmp[674792] tmp[674799]))
    }
    {
      (674811 'move' tmp[674791](674808 '_paramFoldLogical' tmp[674792] 0))
    }
    (484946 'move' tmp[484935](117010 call ! tmp[674791]))
    unknown call_tmp[794072] "expr temp" "maybe param" "maybe type" "temp"
    (794075 'move' call_tmp[794072](484948 call _cond_invalid tmp[484935]))
    if call_tmp[794072]
    {
      (484951 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[674818] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[674819] "maybe param" "temp"
    unknown call_tmp[794077] "expr temp" "maybe param" "maybe type" "temp"
    (794080 'move' call_tmp[794077](484936 call isTrue tmp[484935]))
    (674824 'move' tmp[674819](674822 call _cond_test call_tmp[794077]))
    if tmp[674819]
    {
      unknown tmp[674826] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[794082] "expr temp" "maybe param" "maybe type" "temp"
      (794085 'move' call_tmp[794082](117021 call assignmentIsLegal to[117000] from[117002]))
      (674828 'move' tmp[674826](484939 call isTrue call_tmp[794082]))
      (674833 'move' tmp[674818](674830 '_paramFoldLogical' tmp[674819] tmp[674826]))
    }
    {
      (674838 'move' tmp[674818](674835 '_paramFoldLogical' tmp[674819] 0))
    }
    (484925 'move' tmp[484914] tmp[674818])
    unknown call_tmp[794087] "expr temp" "maybe param" "maybe type" "temp"
    (794090 'move' call_tmp[794087](484927 call _cond_invalid tmp[484914]))
    if call_tmp[794087]
    {
      (484930 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[674872] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[674873] "maybe param" "temp"
    unknown call_tmp[794092] "expr temp" "maybe param" "maybe type" "temp"
    (794095 'move' call_tmp[794092](484915 call isTrue tmp[484914]))
    (674878 'move' tmp[674873](674876 call _cond_test call_tmp[794092]))
    if tmp[674873]
    {
      (674883 'move' tmp[674872](674880 '_paramFoldLogical' tmp[674873] 1))
    }
    {
      unknown tmp[484977] "maybe param" "temp"
      (484988 'move' tmp[484977](117026 call == to[117000] int(64)[10]))
      unknown call_tmp[794097] "expr temp" "maybe param" "maybe type" "temp"
      (794100 'move' call_tmp[794097](484990 call _cond_invalid tmp[484977]))
      if call_tmp[794097]
      {
        (484993 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[674845] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[674846] "maybe param" "temp"
      unknown call_tmp[794102] "expr temp" "maybe param" "maybe type" "temp"
      (794105 'move' call_tmp[794102](484978 call isTrue tmp[484977]))
      (674851 'move' tmp[674846](674849 call _cond_test call_tmp[794102]))
      if tmp[674846]
      {
        unknown tmp[674853] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[794107] "expr temp" "maybe param" "maybe type" "temp"
        (794110 'move' call_tmp[794107](117031 call isBCPindex from[117002]))
        (674855 'move' tmp[674853](484981 call isTrue call_tmp[794107]))
        (674860 'move' tmp[674845](674857 '_paramFoldLogical' tmp[674846] tmp[674853]))
      }
      {
        (674865 'move' tmp[674845](674862 '_paramFoldLogical' tmp[674846] 0))
      }
      unknown tmp[674885] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (674887 'move' tmp[674885](484919 call isTrue tmp[674845]))
      (674892 'move' tmp[674872](674889 '_paramFoldLogical' tmp[674873] tmp[674885]))
    }
    (604778 'move' ret[604773](604777 'deref' tmp[674872]))
    (604775 return ret[604773])
  }
  function chpl_idxCastThrows[117035](arg to[117037]:_any[141](?), arg from[117039]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[604782] "RVV" "param" "temp"
    unknown tmp[484998] "maybe param" "temp"
    (485009 'move' tmp[484998](117045 call != to[117037] from[117039]))
    unknown call_tmp[794112] "expr temp" "maybe param" "maybe type" "temp"
    (794115 'move' call_tmp[794112](485011 call _cond_invalid tmp[484998]))
    if call_tmp[794112]
    {
      (485014 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[674926] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[674927] "maybe param" "temp"
    unknown call_tmp[794117] "expr temp" "maybe param" "maybe type" "temp"
    (794120 'move' call_tmp[794117](484999 call isTrue tmp[484998]))
    (674932 'move' tmp[674927](674930 call _cond_test call_tmp[794117]))
    if tmp[674927]
    {
      unknown tmp[485019] "maybe param" "temp"
      (485030 'move' tmp[485019](117052 call isEnumType to[117037]))
      unknown call_tmp[794122] "expr temp" "maybe param" "maybe type" "temp"
      (794125 'move' call_tmp[794122](485032 call _cond_invalid tmp[485019]))
      if call_tmp[794122]
      {
        (485035 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[674899] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[674900] "maybe param" "temp"
      unknown call_tmp[794127] "expr temp" "maybe param" "maybe type" "temp"
      (794130 'move' call_tmp[794127](485020 call isTrue tmp[485019]))
      (674905 'move' tmp[674900](674903 call _cond_test call_tmp[794127]))
      if tmp[674900]
      {
        (674910 'move' tmp[674899](674907 '_paramFoldLogical' tmp[674900] 1))
      }
      {
        unknown tmp[674912] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[794132] "expr temp" "maybe param" "maybe type" "temp"
        (794135 'move' call_tmp[794132](117055 call isEnumType from[117039]))
        (674914 'move' tmp[674912](485024 call isTrue call_tmp[794132]))
        (674919 'move' tmp[674899](674916 '_paramFoldLogical' tmp[674900] tmp[674912]))
      }
      unknown tmp[674934] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (674936 'move' tmp[674934](485002 call isTrue tmp[674899]))
      (674941 'move' tmp[674926](674938 '_paramFoldLogical' tmp[674927] tmp[674934]))
    }
    {
      (674946 'move' tmp[674926](674943 '_paramFoldLogical' tmp[674927] 0))
    }
    (604787 'move' ret[604782](604786 'deref' tmp[674926]))
    (604784 return ret[604782])
  }
  function isBCPindex[117059](arg t[117061]:_any[141](?)) param : _unknown[42] "private"
  {
    unknown ret[604791] "RVV" "param" "temp"
    unknown tmp[485040] "maybe param" "temp"
    (485051 'move' tmp[485040](117067 call == t[117061] byteIndex[18611]))
    unknown call_tmp[794137] "expr temp" "maybe param" "maybe type" "temp"
    (794140 'move' call_tmp[794137](485053 call _cond_invalid tmp[485040]))
    if call_tmp[794137]
    {
      (485056 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[674953] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[674954] "maybe param" "temp"
    unknown call_tmp[794142] "expr temp" "maybe param" "maybe type" "temp"
    (794145 'move' call_tmp[794142](485041 call isTrue tmp[485040]))
    (674959 'move' tmp[674954](674957 call _cond_test call_tmp[794142]))
    if tmp[674954]
    {
      (674964 'move' tmp[674953](674961 '_paramFoldLogical' tmp[674954] 1))
    }
    {
      unknown tmp[674966] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[794147] "expr temp" "maybe param" "maybe type" "temp"
      (794150 'move' call_tmp[794147](117071 call == t[117061] codepointIndex[18730]))
      (674968 'move' tmp[674966](485045 call isTrue call_tmp[794147]))
      (674973 'move' tmp[674953](674970 '_paramFoldLogical' tmp[674954] tmp[674966]))
    }
    (604796 'move' ret[604791](604795 'deref' tmp[674953]))
    (604793 return ret[604791])
  }
  function range[240](?).chpl_boundsCheck[117077](arg _mt[117094]:_MT[201], arg this[117080]:range[240](?) :
  range[240](?), arg other[117091]:range[240](?)) : _unknown[42] "inline" "method"
  {
    unknown ret[604800] "RVV" "temp"
    unknown call_tmp[794154] "expr temp" "maybe param" "maybe type" "temp"
    (794157 'move' call_tmp[794154](427371 call idxType _mt[203] this[117080]))
    unknown call_tmp[794159] "expr temp" "maybe param" "maybe type" "temp"
    (794162 'move' call_tmp[794159](117118 call chpl__singleValIdxType call_tmp[794154]))
    unknown call_tmp[794164] "expr temp" "maybe param" "maybe type" "temp"
    (794167 'move' call_tmp[794164](117120 call _cond_test call_tmp[794159]))
    if call_tmp[794164]
    {
      unknown call_tmp[794171] "expr temp" "maybe param" "maybe type" "temp"
      (794174 'move' call_tmp[794171](427361 call _low _mt[203] this[117080]))
      unknown call_tmp[794178] "expr temp" "maybe param" "maybe type" "temp"
      (794181 'move' call_tmp[794178](427366 call _high _mt[203] this[117080]))
      unknown call_tmp[794183] "expr temp" "maybe param" "maybe type" "temp"
      (794186 'move' call_tmp[794183](117108 call > call_tmp[794171] call_tmp[794178]))
      unknown call_tmp[794188] "expr temp" "maybe param" "maybe type" "temp"
      (794191 'move' call_tmp[794188](117112 call _cond_test call_tmp[794183]))
      if call_tmp[794188]
      {
        (604805 'move' ret[604800](604804 'deref' 0))
        gotoReturn _end_chpl_boundsCheck[604798] _end_chpl_boundsCheck[604798]
      }
    }
    unknown call_tmp[794195] "expr temp" "maybe param" "maybe type" "temp"
    (794198 'move' call_tmp[794195](117133 call(117130 call (partial) isAligned _mt[203] this[117080])))
    unknown call_tmp[794200] "expr temp" "maybe param" "maybe type" "temp"
    (794203 'move' call_tmp[794200](117127 call ! call_tmp[794195]))
    unknown call_tmp[794205] "expr temp" "maybe param" "maybe type" "temp"
    (794208 'move' call_tmp[794205](117134 call _cond_test call_tmp[794200]))
    if call_tmp[794205]
    {
      (604810 'move' ret[604800](604809 'deref' 0))
      gotoReturn _end_chpl_boundsCheck[604798] _end_chpl_boundsCheck[604798]
    }
    (604815 'move' ret[604800](604814 'deref' 1))
    label _end_chpl_boundsCheck[604798]
    (604802 return ret[604800])
  }
  where {
    unknown call_tmp[794210] "expr temp" "maybe param" "maybe type" "temp"
    (794213 'move' call_tmp[794210](521662 'query' other[117091] 2))
    (117096 call == call_tmp[794210] neither[107120])
  }
  function range[240](?).chpl_boundsCheck[117144](arg _mt[117161]:_MT[201], arg this[117147]:range[240](?) :
  range[240](?), arg other[117158]:range[240](?)) : _unknown[42] "inline" "method"
  {
    unknown ret[604819] "RVV" "temp"
    unknown call_tmp[794217] "expr temp" "maybe param" "maybe type" "temp"
    (794220 'move' call_tmp[794217](117173 call(117170 call (partial) isAligned _mt[203] this[117147])))
    unknown call_tmp[794222] "expr temp" "maybe param" "maybe type" "temp"
    (794225 'move' call_tmp[794222](117167 call ! call_tmp[794217]))
    unknown call_tmp[794227] "expr temp" "maybe param" "maybe type" "temp"
    (794230 'move' call_tmp[794227](117174 call _cond_test call_tmp[794222]))
    if call_tmp[794227]
    {
      (604824 'move' ret[604819](604823 'deref' 0))
      gotoReturn _end_chpl_boundsCheck[604817] _end_chpl_boundsCheck[604817]
    }
    unknown boundedOther[117180] "dead at end of block" "insert auto destroy"
    unknown tmp[675197] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[675198] "maybe param" "temp"
    unknown call_tmp[794234] "expr temp" "maybe param" "maybe type" "temp"
    (794237 'move' call_tmp[794234](117185 call(117182 call (partial) isAligned _mt[203] other[117158])))
    (675203 'move' tmp[675198](675201 call _cond_test call_tmp[794234]))
    if tmp[675198]
    {
      unknown tmp[674980] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[674981] "maybe param" "temp"
      unknown call_tmp[794241] "expr temp" "maybe param" "maybe type" "temp"
      (794244 'move' call_tmp[794241](117202 call(117199 call (partial) hasLowBound _mt[203] other[117158])))
      (674986 'move' tmp[674981](674984 call _cond_test call_tmp[794241]))
      if tmp[674981]
      {
        unknown tmp[674988] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (674990 'move' tmp[674988](117204 call _low _mt[203] other[117158]))
        (674995 'move' tmp[674980](674992 '_paramFoldLogical' tmp[674981] tmp[674988]))
      }
      {
        unknown tmp[674997] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (674999 'move' tmp[674997](427383 call _low _mt[203] this[117147]))
        (675004 'move' tmp[674980](675001 '_paramFoldLogical' tmp[674981] tmp[674997]))
      }
      unknown tmp[675011] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[675012] "maybe param" "temp"
      unknown call_tmp[794252] "expr temp" "maybe param" "maybe type" "temp"
      (794255 'move' call_tmp[794252](117215 call(117212 call (partial) hasHighBound _mt[203] other[117158])))
      (675017 'move' tmp[675012](675015 call _cond_test call_tmp[794252]))
      if tmp[675012]
      {
        unknown tmp[675019] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (675021 'move' tmp[675019](117217 call _high _mt[203] other[117158]))
        (675026 'move' tmp[675011](675023 '_paramFoldLogical' tmp[675012] tmp[675019]))
      }
      {
        unknown tmp[675028] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (675030 'move' tmp[675028](427388 call _high _mt[203] this[117147]))
        (675035 'move' tmp[675011](675032 '_paramFoldLogical' tmp[675012] tmp[675028]))
      }
      unknown tmp[675205] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[794263] "expr temp" "maybe param" "maybe type" "temp"
      (794266 'move' call_tmp[794263](427378 call idxType _mt[203] this[117147]))
      unknown call_tmp[794270] "expr temp" "maybe param" "maybe type" "temp"
      (794273 'move' call_tmp[794270](117195 call strides _mt[203] other[117158]))
      unknown call_tmp[794277] "expr temp" "maybe param" "maybe type" "temp"
      (794280 'move' call_tmp[794277](117225 call _stride _mt[203] other[117158]))
      unknown call_tmp[794284] "expr temp" "maybe param" "maybe type" "temp"
      (794287 'move' call_tmp[794284](117229 call _alignment _mt[203] other[117158]))
      (675207 'move' tmp[675205](1000076 'new' range[240](?) call_tmp[794263] both[107114] call_tmp[794270] tmp[674980] tmp[675011] call_tmp[794277] call_tmp[794284]))
      (675212 'move' tmp[675197](675209 '_paramFoldLogical' tmp[675198] tmp[675205]))
    }
    {
      unknown tmp[675166] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[675167] "maybe param" "temp"
      unknown call_tmp[794291] "expr temp" "maybe param" "maybe type" "temp"
      (794294 'move' call_tmp[794291](117236 call(117233 call (partial) hasPosNegUnitStride _mt[203] this[117147])))
      (675172 'move' tmp[675167](675170 call _cond_test call_tmp[794291]))
      if tmp[675167]
      {
        unknown tmp[675042] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[675043] "maybe param" "temp"
        unknown call_tmp[794298] "expr temp" "maybe param" "maybe type" "temp"
        (794301 'move' call_tmp[794298](117253 call(117250 call (partial) hasLowBound _mt[203] other[117158])))
        (675048 'move' tmp[675043](675046 call _cond_test call_tmp[794298]))
        if tmp[675043]
        {
          unknown tmp[675050] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (675052 'move' tmp[675050](117255 call _low _mt[203] other[117158]))
          (675057 'move' tmp[675042](675054 '_paramFoldLogical' tmp[675043] tmp[675050]))
        }
        {
          unknown tmp[675059] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (675061 'move' tmp[675059](427399 call _low _mt[203] this[117147]))
          (675066 'move' tmp[675042](675063 '_paramFoldLogical' tmp[675043] tmp[675059]))
        }
        unknown tmp[675073] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[675074] "maybe param" "temp"
        unknown call_tmp[794309] "expr temp" "maybe param" "maybe type" "temp"
        (794312 'move' call_tmp[794309](117266 call(117263 call (partial) hasHighBound _mt[203] other[117158])))
        (675079 'move' tmp[675074](675077 call _cond_test call_tmp[794309]))
        if tmp[675074]
        {
          unknown tmp[675081] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (675083 'move' tmp[675081](117268 call _high _mt[203] other[117158]))
          (675088 'move' tmp[675073](675085 '_paramFoldLogical' tmp[675074] tmp[675081]))
        }
        {
          unknown tmp[675090] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (675092 'move' tmp[675090](427404 call _high _mt[203] this[117147]))
          (675097 'move' tmp[675073](675094 '_paramFoldLogical' tmp[675074] tmp[675090]))
        }
        unknown tmp[675174] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[794320] "expr temp" "maybe param" "maybe type" "temp"
        (794323 'move' call_tmp[794320](427394 call idxType _mt[203] this[117147]))
        unknown call_tmp[794327] "expr temp" "maybe param" "maybe type" "temp"
        (794330 'move' call_tmp[794327](117246 call strides _mt[203] other[117158]))
        unknown call_tmp[794334] "expr temp" "maybe param" "maybe type" "temp"
        (794337 'move' call_tmp[794334](117276 call _stride _mt[203] other[117158]))
        unknown call_tmp[794341] "expr temp" "maybe param" "maybe type" "temp"
        (794344 'move' call_tmp[794341](427409 call idxType _mt[203] this[117147]))
        unknown call_tmp[794346] "expr temp" "maybe param" "maybe type" "temp"
        (794349 'move' call_tmp[794346](117283 call chpl__rangeStrideType call_tmp[794341]))
        unknown call_tmp[794351] "expr temp" "maybe param" "maybe type" "temp"
        (794354 'move' call_tmp[794351](117279 call : 0 call_tmp[794346]))
        (675176 'move' tmp[675174](1000077 'new' range[240](?) call_tmp[794320] both[107114] call_tmp[794327] tmp[675042] tmp[675073] call_tmp[794334] call_tmp[794351]))
        (675181 'move' tmp[675166](675178 '_paramFoldLogical' tmp[675167] tmp[675174]))
      }
      {
        unknown tmp[675104] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[675105] "maybe param" "temp"
        unknown call_tmp[794358] "expr temp" "maybe param" "maybe type" "temp"
        (794361 'move' call_tmp[794358](117301 call(117298 call (partial) hasLowBound _mt[203] other[117158])))
        (675110 'move' tmp[675105](675108 call _cond_test call_tmp[794358]))
        if tmp[675105]
        {
          unknown tmp[675112] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (675114 'move' tmp[675112](117303 call _low _mt[203] other[117158]))
          (675119 'move' tmp[675104](675116 '_paramFoldLogical' tmp[675105] tmp[675112]))
        }
        {
          unknown tmp[675121] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (675123 'move' tmp[675121](427420 call _low _mt[203] this[117147]))
          (675128 'move' tmp[675104](675125 '_paramFoldLogical' tmp[675105] tmp[675121]))
        }
        unknown tmp[675135] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[675136] "maybe param" "temp"
        unknown call_tmp[794369] "expr temp" "maybe param" "maybe type" "temp"
        (794372 'move' call_tmp[794369](117314 call(117311 call (partial) hasHighBound _mt[203] other[117158])))
        (675141 'move' tmp[675136](675139 call _cond_test call_tmp[794369]))
        if tmp[675136]
        {
          unknown tmp[675143] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (675145 'move' tmp[675143](117316 call _high _mt[203] other[117158]))
          (675150 'move' tmp[675135](675147 '_paramFoldLogical' tmp[675136] tmp[675143]))
        }
        {
          unknown tmp[675152] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (675154 'move' tmp[675152](427425 call _high _mt[203] this[117147]))
          (675159 'move' tmp[675135](675156 '_paramFoldLogical' tmp[675136] tmp[675152]))
        }
        unknown tmp[675183] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[794380] "expr temp" "maybe param" "maybe type" "temp"
        (794383 'move' call_tmp[794380](427415 call idxType _mt[203] this[117147]))
        unknown call_tmp[794387] "expr temp" "maybe param" "maybe type" "temp"
        (794390 'move' call_tmp[794387](117294 call strides _mt[203] other[117158]))
        unknown call_tmp[794394] "expr temp" "maybe param" "maybe type" "temp"
        (794397 'move' call_tmp[794394](117324 call _stride _mt[203] other[117158]))
        unknown call_tmp[794401] "expr temp" "maybe param" "maybe type" "temp"
        (794404 'move' call_tmp[794401](117328 call _alignment _mt[203] this[117147]))
        (675185 'move' tmp[675183](1000078 'new' range[240](?) call_tmp[794380] both[107114] call_tmp[794387] tmp[675104] tmp[675135] call_tmp[794394] call_tmp[794401] 1))
        (675190 'move' tmp[675166](675187 '_paramFoldLogical' tmp[675167] tmp[675183]))
      }
      (675217 'move' tmp[675197](675214 '_paramFoldLogical' tmp[675198] tmp[675166]))
    }
    (645383 'init var' boundedOther[117180] tmp[675197])
    (117339 'end of statement')
    unknown tmp[485061] "maybe param" "temp"
    unknown call_tmp[794408] "expr temp" "maybe param" "maybe type" "temp"
    (794411 'move' call_tmp[794408](117349 call(117346 call (partial) sizeAs _mt[203] boundedOther[117180]) uint(64)[86]))
    (485072 'move' tmp[485061](117343 call == call_tmp[794408] 0))
    unknown call_tmp[794413] "expr temp" "maybe param" "maybe type" "temp"
    (794416 'move' call_tmp[794413](485074 call _cond_invalid tmp[485061]))
    if call_tmp[794413]
    {
      (485077 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[675224] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[675225] "maybe param" "temp"
    unknown call_tmp[794418] "expr temp" "maybe param" "maybe type" "temp"
    (794421 'move' call_tmp[794418](485062 call isTrue tmp[485061]))
    (675230 'move' tmp[675225](675228 call _cond_test call_tmp[794418]))
    if tmp[675225]
    {
      (675235 'move' tmp[675224](675232 '_paramFoldLogical' tmp[675225] 1))
    }
    {
      unknown tmp[675237] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[794425] "expr temp" "maybe param" "maybe type" "temp"
      (794428 'move' call_tmp[794425](117353 call(427429 call (partial) contains _mt[203] this[117147]) boundedOther[117180]))
      (675239 'move' tmp[675237](485066 call isTrue call_tmp[794425]))
      (675244 'move' tmp[675224](675241 '_paramFoldLogical' tmp[675225] tmp[675237]))
    }
    (604829 'move' ret[604819](604828 'deref' tmp[675224]))
    gotoReturn _end_chpl_boundsCheck[604817] _end_chpl_boundsCheck[604817]
    (552177 'end of statement' boundedOther[117180])
    label _end_chpl_boundsCheck[604817]
    (604821 return ret[604819])
  }
  function range[240](?).chpl_boundsCheck[117357](arg _mt[117367]:_MT[201], arg this[117360]:range[240](?) :
  range[240](?), arg other[117364] :
  (427435 call idxType _mt[203] this[117360])) : _unknown[42] "inline" "method"
  {
    unknown ret[604835] "RVV" "temp"
    unknown call_tmp[794434] "expr temp" "maybe param" "maybe type" "temp"
    (794437 'move' call_tmp[794434](117372 call(427439 call (partial) contains _mt[203] this[117360]) other[117364]))
    (604840 'move' ret[604835](604839 'deref' call_tmp[794434]))
    (604837 return ret[604835])
  }
  function range[240](?).alignLow[117376](arg _mt[117382]:_MT[201], ref arg this[117379]:range[240](?) :
  range[240](?)) : _unknown[42] "method"
  {
    unknown ret[604844] "RVV" "temp"
    unknown tmp[485082] "maybe param" "temp"
    (485093 'move' tmp[485082] 1)
    unknown call_tmp[794439] "expr temp" "maybe param" "maybe type" "temp"
    (794442 'move' call_tmp[794439](485095 call _cond_invalid tmp[485082]))
    if call_tmp[794439]
    {
      (485098 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[675251] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[675252] "maybe param" "temp"
    unknown call_tmp[794444] "expr temp" "maybe param" "maybe type" "temp"
    (794447 'move' call_tmp[794444](485083 call isTrue tmp[485082]))
    (675257 'move' tmp[675252](675255 call _cond_test call_tmp[794444]))
    if tmp[675252]
    {
      unknown tmp[675259] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[794451] "expr temp" "maybe param" "maybe type" "temp"
      (794454 'move' call_tmp[794451](117403 call(117400 call (partial) isAligned _mt[203] this[117379])))
      unknown call_tmp[794456] "expr temp" "maybe param" "maybe type" "temp"
      (794459 'move' call_tmp[794456](117397 call ! call_tmp[794451]))
      (675261 'move' tmp[675259](485086 call isTrue call_tmp[794456]))
      (675266 'move' tmp[675251](675263 '_paramFoldLogical' tmp[675252] tmp[675259]))
    }
    {
      (675271 'move' tmp[675251](675268 '_paramFoldLogical' tmp[675252] 0))
    }
    unknown call_tmp[794461] "expr temp" "maybe param" "maybe type" "temp"
    (794464 'move' call_tmp[794461](117404 call _cond_test tmp[675251]))
    if call_tmp[794461]
    {
      (117389 call boundsCheckHalt module=[222] HaltWrappers[518] "alignLow -- Cannot be applied to a range with ambiguous alignment.")
      (401784 'referenced modules list' HaltWrappers[518])
    }
    unknown call_tmp[794468] "expr temp" "maybe param" "maybe type" "temp"
    (794471 'move' call_tmp[794468](117420 call(427450 call (partial) hasPosNegUnitStride _mt[203] this[117379])))
    unknown call_tmp[794473] "expr temp" "maybe param" "maybe type" "temp"
    (794476 'move' call_tmp[794473](117417 call ! call_tmp[794468]))
    unknown call_tmp[794478] "expr temp" "maybe param" "maybe type" "temp"
    (794481 'move' call_tmp[794478](117421 call _cond_test call_tmp[794473]))
    if call_tmp[794478]
    {
      unknown call_tmp[794485] "expr temp" "maybe param" "maybe type" "temp"
      (794488 'move' call_tmp[794485](427446 call _low _mt[203] this[117379]))
      unknown call_tmp[794492] "expr temp" "maybe param" "maybe type" "temp"
      (794495 'move' call_tmp[794492](117413 call alignedLowAsInt _mt[203] this[117379]))
      (117409 call = call_tmp[794485] call_tmp[794492])
    }
    (604849 'move' ret[604844](604848 'deref' this[117379]))
    (604846 return ret[604844])
  }
  function range[240](?).alignHigh[117430](arg _mt[117436]:_MT[201], ref arg this[117433]:range[240](?) :
  range[240](?)) : _unknown[42] "method"
  {
    unknown ret[604853] "RVV" "temp"
    unknown tmp[485103] "maybe param" "temp"
    (485114 'move' tmp[485103] 1)
    unknown call_tmp[794497] "expr temp" "maybe param" "maybe type" "temp"
    (794500 'move' call_tmp[794497](485116 call _cond_invalid tmp[485103]))
    if call_tmp[794497]
    {
      (485119 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[675278] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[675279] "maybe param" "temp"
    unknown call_tmp[794502] "expr temp" "maybe param" "maybe type" "temp"
    (794505 'move' call_tmp[794502](485104 call isTrue tmp[485103]))
    (675284 'move' tmp[675279](675282 call _cond_test call_tmp[794502]))
    if tmp[675279]
    {
      unknown tmp[675286] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[794509] "expr temp" "maybe param" "maybe type" "temp"
      (794512 'move' call_tmp[794509](117457 call(117454 call (partial) isAligned _mt[203] this[117433])))
      unknown call_tmp[794514] "expr temp" "maybe param" "maybe type" "temp"
      (794517 'move' call_tmp[794514](117451 call ! call_tmp[794509]))
      (675288 'move' tmp[675286](485107 call isTrue call_tmp[794514]))
      (675293 'move' tmp[675278](675290 '_paramFoldLogical' tmp[675279] tmp[675286]))
    }
    {
      (675298 'move' tmp[675278](675295 '_paramFoldLogical' tmp[675279] 0))
    }
    unknown call_tmp[794519] "expr temp" "maybe param" "maybe type" "temp"
    (794522 'move' call_tmp[794519](117458 call _cond_test tmp[675278]))
    if call_tmp[794519]
    {
      (117443 call boundsCheckHalt module=[222] HaltWrappers[518] "alignHigh -- Cannot be applied to a range with ambiguous alignment.")
      (401792 'referenced modules list' HaltWrappers[518])
    }
    unknown call_tmp[794526] "expr temp" "maybe param" "maybe type" "temp"
    (794529 'move' call_tmp[794526](117474 call(427461 call (partial) hasPosNegUnitStride _mt[203] this[117433])))
    unknown call_tmp[794531] "expr temp" "maybe param" "maybe type" "temp"
    (794534 'move' call_tmp[794531](117471 call ! call_tmp[794526]))
    unknown call_tmp[794536] "expr temp" "maybe param" "maybe type" "temp"
    (794539 'move' call_tmp[794536](117475 call _cond_test call_tmp[794531]))
    if call_tmp[794536]
    {
      unknown call_tmp[794543] "expr temp" "maybe param" "maybe type" "temp"
      (794546 'move' call_tmp[794543](427457 call _high _mt[203] this[117433]))
      unknown call_tmp[794550] "expr temp" "maybe param" "maybe type" "temp"
      (794553 'move' call_tmp[794550](117467 call alignedHighAsInt _mt[203] this[117433]))
      (117463 call = call_tmp[794543] call_tmp[794550])
    }
    (604858 'move' ret[604853](604857 'deref' this[117433]))
    (604855 return ret[604853])
  }
  function range[240](?).indexOrder[117484](arg _mt[117494]:_MT[201], arg this[117487]:range[240](?) :
  range[240](?), arg ind[117491] :
  (427467 call idxType _mt[203] this[117487])) : _unknown[42] "method" "@unstable"
  {
    unknown ret[604862] "RVV" "temp"
    unknown tmp[485124] "maybe param" "temp"
    (485135 'move' tmp[485124] 1)
    unknown call_tmp[794557] "expr temp" "maybe param" "maybe type" "temp"
    (794560 'move' call_tmp[794557](485137 call _cond_invalid tmp[485124]))
    if call_tmp[794557]
    {
      (485140 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[675305] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[675306] "maybe param" "temp"
    unknown call_tmp[794562] "expr temp" "maybe param" "maybe type" "temp"
    (794565 'move' call_tmp[794562](485125 call isTrue tmp[485124]))
    (675311 'move' tmp[675306](675309 call _cond_test call_tmp[794562]))
    if tmp[675306]
    {
      unknown tmp[675313] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[794569] "expr temp" "maybe param" "maybe type" "temp"
      (794572 'move' call_tmp[794569](117515 call(117512 call (partial) isAligned _mt[203] this[117487])))
      unknown call_tmp[794574] "expr temp" "maybe param" "maybe type" "temp"
      (794577 'move' call_tmp[794574](117509 call ! call_tmp[794569]))
      (675315 'move' tmp[675313](485128 call isTrue call_tmp[794574]))
      (675320 'move' tmp[675305](675317 '_paramFoldLogical' tmp[675306] tmp[675313]))
    }
    {
      (675325 'move' tmp[675305](675322 '_paramFoldLogical' tmp[675306] 0))
    }
    unknown call_tmp[794579] "expr temp" "maybe param" "maybe type" "temp"
    (794582 'move' call_tmp[794579](117516 call _cond_test tmp[675305]))
    if call_tmp[794579]
    {
      (117501 call boundsCheckHalt module=[222] HaltWrappers[518] "indexOrder -- Undefined on a range with ambiguous alignment.")
      (401800 'referenced modules list' HaltWrappers[518])
    }
    unknown call_tmp[794586] "expr temp" "maybe param" "maybe type" "temp"
    (794589 'move' call_tmp[794586](117532 call(427476 call (partial) contains _mt[203] this[117487]) ind[117491]))
    unknown call_tmp[794591] "expr temp" "maybe param" "maybe type" "temp"
    (794594 'move' call_tmp[794591](117529 call ! call_tmp[794586]))
    unknown call_tmp[794596] "expr temp" "maybe param" "maybe type" "temp"
    (794599 'move' call_tmp[794596](117534 call _cond_test call_tmp[794591]))
    if call_tmp[794596]
    {
      unknown call_tmp[794601] "expr temp" "maybe param" "maybe type" "temp"
      (794604 'move' call_tmp[794601](117524 call - 1))
      unknown call_tmp[794608] "expr temp" "maybe param" "maybe type" "temp"
      (794611 'move' call_tmp[794608](427472 call chpl_integralIdxType _mt[203] this[117487]))
      unknown call_tmp[794613] "expr temp" "maybe param" "maybe type" "temp"
      (794616 'move' call_tmp[794613](117522 call : call_tmp[794601] call_tmp[794608]))
      (604867 'move' ret[604862](604866 'deref' call_tmp[794613]))
      gotoReturn _end_indexOrder[604860] _end_indexOrder[604860]
    }
    unknown call_tmp[794620] "expr temp" "maybe param" "maybe type" "temp"
    (794623 'move' call_tmp[794620](401817 call strides _mt[203] this[117487]))
    unknown call_tmp[794627] "expr temp" "maybe param" "maybe type" "temp"
    (794630 'move' call_tmp[794627](117626 call(117623 call (partial) isOne _mt[203] call_tmp[794620])))
    unknown call_tmp[794632] "expr temp" "maybe param" "maybe type" "temp"
    (794635 'move' call_tmp[794632](117627 call _cond_test call_tmp[794627]))
    if call_tmp[794632]
    {
      unknown call_tmp[794639] "expr temp" "maybe param" "maybe type" "temp"
      (794642 'move' call_tmp[794639](117552 call(117549 call (partial) hasLowBound _mt[203] this[117487])))
      unknown call_tmp[794644] "expr temp" "maybe param" "maybe type" "temp"
      (794647 'move' call_tmp[794644](117553 call _cond_test call_tmp[794639]))
      if call_tmp[794644]
      {
        unknown call_tmp[794649] "expr temp" "maybe param" "maybe type" "temp"
        (794652 'move' call_tmp[794649](117544 call chpl__idxToInt ind[117491]))
        unknown call_tmp[794656] "expr temp" "maybe param" "maybe type" "temp"
        (794659 'move' call_tmp[794656](427483 call _low _mt[203] this[117487]))
        unknown call_tmp[794661] "expr temp" "maybe param" "maybe type" "temp"
        (794664 'move' call_tmp[794661](117541 call - call_tmp[794649] call_tmp[794656]))
        (604872 'move' ret[604862](604871 'deref' call_tmp[794661]))
        gotoReturn _end_indexOrder[604860] _end_indexOrder[604860]
      }
    }
    {
      unknown call_tmp[794668] "expr temp" "maybe param" "maybe type" "temp"
      (794671 'move' call_tmp[794668](401812 call strides _mt[203] this[117487]))
      unknown call_tmp[794675] "expr temp" "maybe param" "maybe type" "temp"
      (794678 'move' call_tmp[794675](117617 call(117614 call (partial) isNegOne _mt[203] call_tmp[794668])))
      unknown call_tmp[794680] "expr temp" "maybe param" "maybe type" "temp"
      (794683 'move' call_tmp[794680](117618 call _cond_test call_tmp[794675]))
      if call_tmp[794680]
      {
        unknown call_tmp[794687] "expr temp" "maybe param" "maybe type" "temp"
        (794690 'move' call_tmp[794687](117571 call(117568 call (partial) hasHighBound _mt[203] this[117487])))
        unknown call_tmp[794692] "expr temp" "maybe param" "maybe type" "temp"
        (794695 'move' call_tmp[794692](117572 call _cond_test call_tmp[794687]))
        if call_tmp[794692]
        {
          unknown call_tmp[794699] "expr temp" "maybe param" "maybe type" "temp"
          (794702 'move' call_tmp[794699](427488 call _high _mt[203] this[117487]))
          unknown call_tmp[794704] "expr temp" "maybe param" "maybe type" "temp"
          (794707 'move' call_tmp[794704](117564 call chpl__idxToInt ind[117491]))
          unknown call_tmp[794709] "expr temp" "maybe param" "maybe type" "temp"
          (794712 'move' call_tmp[794709](117560 call - call_tmp[794699] call_tmp[794704]))
          (604877 'move' ret[604862](604876 'deref' call_tmp[794709]))
          gotoReturn _end_indexOrder[604860] _end_indexOrder[604860]
        }
      }
      {
        unknown call_tmp[794716] "expr temp" "maybe param" "maybe type" "temp"
        (794719 'move' call_tmp[794716](117607 call(117604 call (partial) hasFirst _mt[203] this[117487])))
        unknown call_tmp[794721] "expr temp" "maybe param" "maybe type" "temp"
        (794724 'move' call_tmp[794721](117608 call _cond_test call_tmp[794716]))
        if call_tmp[794721]
        {
          unknown call_tmp[794726] "expr temp" "maybe param" "maybe type" "temp"
          (794729 'move' call_tmp[794726](117588 call chpl__idxToInt ind[117491]))
          unknown call_tmp[794733] "expr temp" "maybe param" "maybe type" "temp"
          (794736 'move' call_tmp[794733](427494 call strType _mt[203] this[117487]))
          unknown call_tmp[794738] "expr temp" "maybe param" "maybe type" "temp"
          (794741 'move' call_tmp[794738](117585 call : call_tmp[794726] call_tmp[794733]))
          unknown call_tmp[794745] "expr temp" "maybe param" "maybe type" "temp"
          (794748 'move' call_tmp[794745](117596 call first _mt[203] this[117487]))
          unknown call_tmp[794750] "expr temp" "maybe param" "maybe type" "temp"
          (794753 'move' call_tmp[794750](117594 call chpl__idxToInt call_tmp[794745]))
          unknown call_tmp[794757] "expr temp" "maybe param" "maybe type" "temp"
          (794760 'move' call_tmp[794757](427498 call strType _mt[203] this[117487]))
          unknown call_tmp[794762] "expr temp" "maybe param" "maybe type" "temp"
          (794765 'move' call_tmp[794762](117591 call : call_tmp[794750] call_tmp[794757]))
          unknown call_tmp[794767] "expr temp" "maybe param" "maybe type" "temp"
          (794770 'move' call_tmp[794767](117583 call - call_tmp[794738] call_tmp[794762]))
          unknown call_tmp[794774] "expr temp" "maybe param" "maybe type" "temp"
          (794777 'move' call_tmp[794774](427503 call _stride _mt[203] this[117487]))
          unknown call_tmp[794779] "expr temp" "maybe param" "maybe type" "temp"
          (794782 'move' call_tmp[794779](117581 call / call_tmp[794767] call_tmp[794774]))
          unknown call_tmp[794786] "expr temp" "maybe param" "maybe type" "temp"
          (794789 'move' call_tmp[794786](427507 call chpl_integralIdxType _mt[203] this[117487]))
          unknown call_tmp[794791] "expr temp" "maybe param" "maybe type" "temp"
          (794794 'move' call_tmp[794791](117579 call : call_tmp[794779] call_tmp[794786]))
          (604882 'move' ret[604862](604881 'deref' call_tmp[794791]))
          gotoReturn _end_indexOrder[604860] _end_indexOrder[604860]
        }
      }
    }
    unknown call_tmp[794796] "expr temp" "maybe param" "maybe type" "temp"
    (794799 'move' call_tmp[794796](117635 call - 1))
    unknown call_tmp[794803] "expr temp" "maybe param" "maybe type" "temp"
    (794806 'move' call_tmp[794803](427511 call chpl_integralIdxType _mt[203] this[117487]))
    unknown call_tmp[794808] "expr temp" "maybe param" "maybe type" "temp"
    (794811 'move' call_tmp[794808](117633 call : call_tmp[794796] call_tmp[794803]))
    (604887 'move' ret[604862](604886 'deref' call_tmp[794808]))
    label _end_indexOrder[604860]
    (604864 return ret[604862])
  }
  function range[240](?).orderToIndex[117641](arg _mt[117651]:_MT[201], arg this[117644]:range[240](?) :
  range[240](?), arg ord[117648]:integral[159](?)) : _unknown[42] "method" "@unstable"
  {
    unknown ret[604891] "RVV" "temp"
    unknown call_tmp[794813] "expr temp" "maybe param" "maybe type" "temp"
    (794816 'move' call_tmp[794813](117774 call _cond_test 1))
    if call_tmp[794813]
    {
      unknown call_tmp[794820] "expr temp" "maybe param" "maybe type" "temp"
      (794823 'move' call_tmp[794820](117668 call(427521 call (partial) hasFirst _mt[203] this[117644])))
      unknown call_tmp[794825] "expr temp" "maybe param" "maybe type" "temp"
      (794828 'move' call_tmp[794825](117665 call ! call_tmp[794820]))
      unknown call_tmp[794830] "expr temp" "maybe param" "maybe type" "temp"
      (794833 'move' call_tmp[794830](117669 call _cond_test call_tmp[794825]))
      if call_tmp[794830]
      {
        (117660 call boundsCheckHalt module=[222] HaltWrappers[518] "invoking orderToIndex on a range that has no first index")
        (401821 'referenced modules list' HaltWrappers[518])
      }
      unknown call_tmp[794837] "expr temp" "maybe param" "maybe type" "temp"
      (794840 'move' call_tmp[794837](117686 call(427525 call (partial) isAligned _mt[203] this[117644])))
      unknown call_tmp[794842] "expr temp" "maybe param" "maybe type" "temp"
      (794845 'move' call_tmp[794842](117683 call ! call_tmp[794837]))
      unknown call_tmp[794847] "expr temp" "maybe param" "maybe type" "temp"
      (794850 'move' call_tmp[794847](117687 call _cond_test call_tmp[794842]))
      if call_tmp[794847]
      {
        (117678 call boundsCheckHalt module=[222] HaltWrappers[518] "invoking orderToIndex on a range that is ambiguously aligned")
        (401827 'referenced modules list' HaltWrappers[518])
      }
      unknown call_tmp[794852] "expr temp" "maybe param" "maybe type" "temp"
      (794855 'move' call_tmp[794852](117707 call < ord[117648] 0))
      unknown call_tmp[794857] "expr temp" "maybe param" "maybe type" "temp"
      (794860 'move' call_tmp[794857](117711 call _cond_test call_tmp[794852]))
      if call_tmp[794857]
      {
        unknown call_tmp[794862] "expr temp" "maybe param" "maybe type" "temp"
        (794865 'move' call_tmp[794862](117702 call : ord[117648] string[244]))
        unknown call_tmp[794867] "expr temp" "maybe param" "maybe type" "temp"
        (794870 'move' call_tmp[794867](117697 call + "invoking orderToIndex on a negative integer: " call_tmp[794862]))
        (117696 call boundsCheckHalt module=[222] HaltWrappers[518] call_tmp[794867])
        (401833 'referenced modules list' HaltWrappers[518])
      }
      unknown tmp[485145] "maybe param" "temp"
      unknown call_tmp[794874] "expr temp" "maybe param" "maybe type" "temp"
      (794877 'move' call_tmp[794874](117752 call bounds _mt[203] this[117644]))
      (485156 'move' tmp[485145](117749 call == call_tmp[794874] both[107114]))
      unknown call_tmp[794879] "expr temp" "maybe param" "maybe type" "temp"
      (794882 'move' call_tmp[794879](485158 call _cond_invalid tmp[485145]))
      if call_tmp[794879]
      {
        (485161 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[675332] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[675333] "maybe param" "temp"
      unknown call_tmp[794884] "expr temp" "maybe param" "maybe type" "temp"
      (794887 'move' call_tmp[794884](485146 call isTrue tmp[485145]))
      (675338 'move' tmp[675333](675336 call _cond_test call_tmp[794884]))
      if tmp[675333]
      {
        unknown tmp[675340] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[794891] "expr temp" "maybe param" "maybe type" "temp"
        (794894 'move' call_tmp[794891](117766 call(117763 call (partial) sizeAs _mt[203] this[117644]) uint(64)[86]))
        unknown call_tmp[794896] "expr temp" "maybe param" "maybe type" "temp"
        (794899 'move' call_tmp[794896](117759 call >= ord[117648] call_tmp[794891]))
        (675342 'move' tmp[675340](485149 call isTrue call_tmp[794896]))
        (675347 'move' tmp[675332](675344 '_paramFoldLogical' tmp[675333] tmp[675340]))
      }
      {
        (675352 'move' tmp[675332](675349 '_paramFoldLogical' tmp[675333] 0))
      }
      unknown call_tmp[794901] "expr temp" "maybe param" "maybe type" "temp"
      (794904 'move' call_tmp[794901](117768 call _cond_test tmp[675332]))
      if call_tmp[794901]
      {
        unknown call_tmp[794906] "expr temp" "maybe param" "maybe type" "temp"
        (794909 'move' call_tmp[794906](117730 call : ord[117648] string[244]))
        unknown call_tmp[794911] "expr temp" "maybe param" "maybe type" "temp"
        (794914 'move' call_tmp[794911](117725 call + "invoking orderToIndex on an integer " call_tmp[794906]))
        unknown call_tmp[794916] "expr temp" "maybe param" "maybe type" "temp"
        (794919 'move' call_tmp[794916](117723 call + call_tmp[794911] " that is larger than the range's number of indices "))
        unknown call_tmp[794923] "expr temp" "maybe param" "maybe type" "temp"
        (794926 'move' call_tmp[794923](117743 call(117740 call (partial) sizeAs _mt[203] this[117644]) uint(64)[86]))
        unknown call_tmp[794928] "expr temp" "maybe param" "maybe type" "temp"
        (794931 'move' call_tmp[794928](117737 call : call_tmp[794923] string[244]))
        unknown call_tmp[794933] "expr temp" "maybe param" "maybe type" "temp"
        (794936 'move' call_tmp[794933](117721 call + call_tmp[794916] call_tmp[794928]))
        (117720 call boundsCheckHalt module=[222] HaltWrappers[518] call_tmp[794933])
        (401839 'referenced modules list' HaltWrappers[518])
      }
    }
    unknown call_tmp[794942] "expr temp" "maybe param" "maybe type" "temp"
    (794945 'move' call_tmp[794942](117784 call firstAsInt _mt[203] this[117644]))
    unknown call_tmp[794949] "expr temp" "maybe param" "maybe type" "temp"
    (794952 'move' call_tmp[794949](117788 call stride _mt[203] this[117644]))
    unknown call_tmp[794954] "expr temp" "maybe param" "maybe type" "temp"
    (794957 'move' call_tmp[794954](117782 call chpl__addRangeStrides call_tmp[794942] call_tmp[794949] ord[117648]))
    unknown call_tmp[794959] "expr temp" "maybe param" "maybe type" "temp"
    (794962 'move' call_tmp[794959](117780 call(427534 call (partial) chpl_intToIdx _mt[203] this[117644]) call_tmp[794954]))
    unknown call_tmp[794966] "expr temp" "maybe param" "maybe type" "temp"
    (794969 'move' call_tmp[794966](604896 call idxType _mt[203] this[117644]))
    (604900 'move' ret[604891](604899 'coerce' call_tmp[794959] call_tmp[794966]))
    (604893 return ret[604891])
  }
  { scopeless type
    (427517 call idxType _mt[203] this[117644])
  }
  function range[240](?).translate[117795](arg _mt[117805]:_MT[201], arg this[117798]:range[240](?) :
  range[240](?), arg offset[117802]:integral[159](?)) : _unknown[42] "inline" "method" "@unstable"
  {
    unknown ret[604904] "RVV" "temp"
    unknown call_tmp[794973] "expr temp" "maybe param" "maybe type" "temp"
    (794976 'move' call_tmp[794973](117809 call + this[117798] offset[117802]))
    (604909 'move' ret[604904](604908 'deref' call_tmp[794973]))
    (604906 return ret[604904])
  }
  function range[240](?).translate[117815](arg _mt[117823]:_MT[201], arg this[117818]:range[240](?) :
  range[240](?), arg i[117821]:_any[141](?)) : _unknown[42] "inline" "last resort" "method" "no return value for void"
  {
    (117827 call compilerError "offsets must be of integral type")
    (604911 return _void[46])
  }
  function range[240](?).translate[117833](arg _mt[117843]:_MT[201], arg this[117836]:range[240](?) :
  range[240](?), arg offset[117840]:integral[159](?)) : _unknown[42] "inline" "method" "no return value for void"
  {
    (117850 call compilerError "can't apply '.translate()' to a range whose 'idxType' only has one value")
    (604913 return _void[46])
  }
  where {
    unknown call_tmp[794980] "expr temp" "maybe param" "maybe type" "temp"
    (794983 'move' call_tmp[794980](427544 call idxType _mt[203] this[117836]))
    (117846 call chpl__singleValIdxType call_tmp[794980])
  }
  function range[240](?).expand[117857](arg _mt[117867]:_MT[201], arg this[117860]:range[240](?) :
  range[240](?), arg offset[117864]:integral[159](?)) : _unknown[42] "method" "no return value for void"
  {
    (117878 call compilerError "expand() is not supported on unbounded ranges")
    (604915 return _void[46])
  }
  where {
    unknown call_tmp[794987] "expr temp" "maybe param" "maybe type" "temp"
    (794990 'move' call_tmp[794987](427550 call bounds _mt[203] this[117860]))
    (117869 call != call_tmp[794987] both[107114])
  }
  function range[240](?).expand[117885](arg _mt[117895]:_MT[201], arg this[117888]:range[240](?) :
  range[240](?), arg offset[117892]:integral[159](?)) : _unknown[42] "method" "@unstable"
  {
    unknown ret[604919] "RVV" "temp"
    unknown call_tmp[794996] "expr temp" "maybe param" "maybe type" "temp"
    (794999 'move' call_tmp[794996](427555 call chpl_integralIdxType _mt[203] this[117888]))
    unknown call_tmp[795001] "expr temp" "maybe param" "maybe type" "temp"
    (795004 'move' call_tmp[795001](117906 call chpl__signedType call_tmp[794996]))
    unknown call_tmp[795006] "maybe param" "maybe type" "temp"
    (795009 'move' call_tmp[795006](117904 call(117901 call (partial) safeCast _mt[203] offset[117892]) call_tmp[795001]))
    const i[117899] "dead at end of block" "const" "insert auto destroy"
    (645385 'init var' i[117899] call_tmp[795006])
    (117909 'end of statement')
    unknown call_tmp[795013] "expr temp" "maybe param" "maybe type" "temp"
    (795016 'move' call_tmp[795013](427561 call idxType _mt[203] this[117888]))
    unknown call_tmp[795020] "expr temp" "maybe param" "maybe type" "temp"
    (795023 'move' call_tmp[795020](427566 call bounds _mt[203] this[117888]))
    unknown call_tmp[795027] "expr temp" "maybe param" "maybe type" "temp"
    (795030 'move' call_tmp[795027](427571 call strides _mt[203] this[117888]))
    unknown call_tmp[795034] "expr temp" "maybe param" "maybe type" "temp"
    (795037 'move' call_tmp[795034](427576 call _low _mt[203] this[117888]))
    unknown call_tmp[795039] "expr temp" "maybe param" "maybe type" "temp"
    (795042 'move' call_tmp[795039](117917 call - call_tmp[795034] i[117899]))
    unknown call_tmp[795046] "expr temp" "maybe param" "maybe type" "temp"
    (795049 'move' call_tmp[795046](427582 call _high _mt[203] this[117888]))
    unknown call_tmp[795051] "expr temp" "maybe param" "maybe type" "temp"
    (795054 'move' call_tmp[795051](117921 call + call_tmp[795046] i[117899]))
    unknown call_tmp[795058] "expr temp" "maybe param" "maybe type" "temp"
    (795061 'move' call_tmp[795058](427588 call _stride _mt[203] this[117888]))
    unknown call_tmp[795065] "expr temp" "maybe param" "maybe type" "temp"
    (795068 'move' call_tmp[795065](427593 call _alignment _mt[203] this[117888]))
    unknown call_tmp[795070] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (795073 'move' call_tmp[795070](1000079 'new' range[240](?) call_tmp[795013] call_tmp[795020] call_tmp[795027] call_tmp[795039] call_tmp[795051] call_tmp[795058] call_tmp[795065]))
    (604924 'move' ret[604919](604923 'deref' call_tmp[795070]))
    gotoReturn _end_expand[604917] _end_expand[604917]
    (552205 'end of statement' i[117899])
    label _end_expand[604917]
    (604921 return ret[604919])
  }
  function range[240](?).expand[117929](arg _mt[117939]:_MT[201], arg this[117932]:range[240](?) :
  range[240](?), arg offset[117936]:integral[159](?)) : _unknown[42] "method" "no return value for void"
  {
    (117946 call compilerError "can't apply '.expand()' to a range whose 'idxType' only has one value")
    (604928 return _void[46])
  }
  where {
    unknown call_tmp[795077] "expr temp" "maybe param" "maybe type" "temp"
    (795080 'move' call_tmp[795077](427599 call idxType _mt[203] this[117932]))
    (117942 call chpl__singleValIdxType call_tmp[795077])
  }
  function range[240](?).interior[117953](arg _mt[117963]:_MT[201], arg this[117956]:range[240](?) :
  range[240](?), arg offset[117960]:integral[159](?)) : _unknown[42] "last resort" "method" "no return value for void"
  {
    (117974 call compilerError "interior is not supported on unbounded ranges")
    (604930 return _void[46])
  }
  where {
    unknown call_tmp[795084] "expr temp" "maybe param" "maybe type" "temp"
    (795087 'move' call_tmp[795084](427605 call bounds _mt[203] this[117956]))
    (117965 call != call_tmp[795084] both[107114])
  }
  function range[240](?).interior[117981](arg _mt[117991]:_MT[201], arg this[117984]:range[240](?) :
  range[240](?), arg offset[117988]:integral[159](?)) : _unknown[42] "method" "@unstable"
  {
    unknown ret[604934] "RVV" "temp"
    unknown call_tmp[795089] "expr temp" "maybe param" "maybe type" "temp"
    (795092 'move' call_tmp[795089](118045 call _cond_test 1))
    if call_tmp[795089]
    {
      unknown call_tmp[795094] "expr temp" "maybe param" "maybe type" "temp"
      (795097 'move' call_tmp[795094](118030 call abs offset[117988]))
      unknown call_tmp[795099] "expr temp" "maybe param" "maybe type" "temp"
      (795102 'move' call_tmp[795099](118027 call : call_tmp[795094] uint(64)[86]))
      unknown call_tmp[795106] "expr temp" "maybe param" "maybe type" "temp"
      (795109 'move' call_tmp[795106](118037 call(118034 call (partial) sizeAs _mt[203] this[117984]) uint(64)[86]))
      unknown call_tmp[795111] "expr temp" "maybe param" "maybe type" "temp"
      (795114 'move' call_tmp[795111](118025 call > call_tmp[795099] call_tmp[795106]))
      unknown call_tmp[795116] "expr temp" "maybe param" "maybe type" "temp"
      (795119 'move' call_tmp[795116](118039 call _cond_test call_tmp[795111]))
      if call_tmp[795116]
      {
        unknown call_tmp[795121] "expr temp" "maybe param" "maybe type" "temp"
        (795124 'move' call_tmp[795121](118008 call : offset[117988] string[244]))
        unknown call_tmp[795126] "expr temp" "maybe param" "maybe type" "temp"
        (795129 'move' call_tmp[795126](118003 call + "can't compute the interior " call_tmp[795121]))
        unknown call_tmp[795131] "expr temp" "maybe param" "maybe type" "temp"
        (795134 'move' call_tmp[795131](118001 call + call_tmp[795126] " elements of a range with size "))
        unknown call_tmp[795138] "expr temp" "maybe param" "maybe type" "temp"
        (795141 'move' call_tmp[795138](118021 call(118018 call (partial) sizeAs _mt[203] this[117984]) uint(64)[86]))
        unknown call_tmp[795143] "expr temp" "maybe param" "maybe type" "temp"
        (795146 'move' call_tmp[795143](118015 call : call_tmp[795138] string[244]))
        unknown call_tmp[795148] "expr temp" "maybe param" "maybe type" "temp"
        (795151 'move' call_tmp[795148](117999 call + call_tmp[795131] call_tmp[795143]))
        (117998 call boundsCheckHalt module=[222] HaltWrappers[518] call_tmp[795148])
        (401854 'referenced modules list' HaltWrappers[518])
      }
    }
    unknown call_tmp[795153] "expr temp" "maybe param" "maybe type" "temp"
    (795156 'move' call_tmp[795153](118053 call abs offset[117988]))
    unknown call_tmp[795162] "expr temp" "maybe param" "maybe type" "temp"
    (795165 'move' call_tmp[795162](427614 call chpl_integralIdxType _mt[203] this[117984]))
    unknown call_tmp[795167] "maybe param" "maybe type" "temp"
    (795170 'move' call_tmp[795167](118058 call(118055 call (partial) safeCast _mt[203] call_tmp[795153]) call_tmp[795162]))
    const i[118051] "dead at end of block" "const" "insert auto destroy"
    (645387 'init var' i[118051] call_tmp[795167])
    (118061 'end of statement')
    unknown call_tmp[795172] "expr temp" "maybe param" "maybe type" "temp"
    (795175 'move' call_tmp[795172](118080 call < offset[117988] 0))
    unknown call_tmp[795177] "expr temp" "maybe param" "maybe type" "temp"
    (795180 'move' call_tmp[795177](118084 call _cond_test call_tmp[795172]))
    if call_tmp[795177]
    {
      unknown call_tmp[795184] "expr temp" "maybe param" "maybe type" "temp"
      (795187 'move' call_tmp[795184](427620 call idxType _mt[203] this[117984]))
      unknown call_tmp[795191] "expr temp" "maybe param" "maybe type" "temp"
      (795194 'move' call_tmp[795191](427625 call bounds _mt[203] this[117984]))
      unknown call_tmp[795198] "expr temp" "maybe param" "maybe type" "temp"
      (795201 'move' call_tmp[795198](427630 call strides _mt[203] this[117984]))
      unknown call_tmp[795205] "expr temp" "maybe param" "maybe type" "temp"
      (795208 'move' call_tmp[795205](427635 call _low _mt[203] this[117984]))
      unknown call_tmp[795212] "expr temp" "maybe param" "maybe type" "temp"
      (795215 'move' call_tmp[795212](427640 call _low _mt[203] this[117984]))
      unknown call_tmp[795217] "expr temp" "maybe param" "maybe type" "temp"
      (795220 'move' call_tmp[795217](118072 call - call_tmp[795212] 1))
      unknown call_tmp[795222] "expr temp" "maybe param" "maybe type" "temp"
      (795225 'move' call_tmp[795222](118070 call + call_tmp[795217] i[118051]))
      unknown call_tmp[795229] "expr temp" "maybe param" "maybe type" "temp"
      (795232 'move' call_tmp[795229](427646 call _stride _mt[203] this[117984]))
      unknown call_tmp[795236] "expr temp" "maybe param" "maybe type" "temp"
      (795239 'move' call_tmp[795236](427651 call _alignment _mt[203] this[117984]))
      unknown call_tmp[795241] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (795244 'move' call_tmp[795241](1000080 'new' range[240](?) call_tmp[795184] call_tmp[795191] call_tmp[795198] call_tmp[795205] call_tmp[795222] call_tmp[795229] call_tmp[795236]))
      (604939 'move' ret[604934](604938 'deref' call_tmp[795241]))
      gotoReturn _end_interior[604932] _end_interior[604932]
      (552210 'end of statement' i[118051])
    }
    unknown call_tmp[795246] "expr temp" "maybe param" "maybe type" "temp"
    (795249 'move' call_tmp[795246](118107 call > offset[117988] 0))
    unknown call_tmp[795251] "expr temp" "maybe param" "maybe type" "temp"
    (795254 'move' call_tmp[795251](118111 call _cond_test call_tmp[795246]))
    if call_tmp[795251]
    {
      unknown call_tmp[795258] "expr temp" "maybe param" "maybe type" "temp"
      (795261 'move' call_tmp[795258](427658 call idxType _mt[203] this[117984]))
      unknown call_tmp[795265] "expr temp" "maybe param" "maybe type" "temp"
      (795268 'move' call_tmp[795265](427663 call bounds _mt[203] this[117984]))
      unknown call_tmp[795272] "expr temp" "maybe param" "maybe type" "temp"
      (795275 'move' call_tmp[795272](427668 call strides _mt[203] this[117984]))
      unknown call_tmp[795279] "expr temp" "maybe param" "maybe type" "temp"
      (795282 'move' call_tmp[795279](427673 call _high _mt[203] this[117984]))
      unknown call_tmp[795284] "expr temp" "maybe param" "maybe type" "temp"
      (795287 'move' call_tmp[795284](118098 call + call_tmp[795279] 1))
      unknown call_tmp[795289] "expr temp" "maybe param" "maybe type" "temp"
      (795292 'move' call_tmp[795289](118096 call - call_tmp[795284] i[118051]))
      unknown call_tmp[795296] "expr temp" "maybe param" "maybe type" "temp"
      (795299 'move' call_tmp[795296](427679 call _high _mt[203] this[117984]))
      unknown call_tmp[795303] "expr temp" "maybe param" "maybe type" "temp"
      (795306 'move' call_tmp[795303](427684 call _stride _mt[203] this[117984]))
      unknown call_tmp[795310] "expr temp" "maybe param" "maybe type" "temp"
      (795313 'move' call_tmp[795310](427689 call _alignment _mt[203] this[117984]))
      unknown call_tmp[795315] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (795318 'move' call_tmp[795315](1000081 'new' range[240](?) call_tmp[795258] call_tmp[795265] call_tmp[795272] call_tmp[795289] call_tmp[795296] call_tmp[795303] call_tmp[795310]))
      (604944 'move' ret[604934](604943 'deref' call_tmp[795315]))
      gotoReturn _end_interior[604932] _end_interior[604932]
      (552212 'end of statement' i[118051])
    }
    unknown call_tmp[795322] "expr temp" "maybe param" "maybe type" "temp"
    (795325 'move' call_tmp[795322](427696 call idxType _mt[203] this[117984]))
    unknown call_tmp[795329] "expr temp" "maybe param" "maybe type" "temp"
    (795332 'move' call_tmp[795329](427701 call bounds _mt[203] this[117984]))
    unknown call_tmp[795336] "expr temp" "maybe param" "maybe type" "temp"
    (795339 'move' call_tmp[795336](427706 call strides _mt[203] this[117984]))
    unknown call_tmp[795343] "expr temp" "maybe param" "maybe type" "temp"
    (795346 'move' call_tmp[795343](427711 call _low _mt[203] this[117984]))
    unknown call_tmp[795350] "expr temp" "maybe param" "maybe type" "temp"
    (795353 'move' call_tmp[795350](427716 call _high _mt[203] this[117984]))
    unknown call_tmp[795357] "expr temp" "maybe param" "maybe type" "temp"
    (795360 'move' call_tmp[795357](427721 call _stride _mt[203] this[117984]))
    unknown call_tmp[795364] "expr temp" "maybe param" "maybe type" "temp"
    (795367 'move' call_tmp[795364](427726 call _alignment _mt[203] this[117984]))
    unknown call_tmp[795369] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (795372 'move' call_tmp[795369](1000082 'new' range[240](?) call_tmp[795322] call_tmp[795329] call_tmp[795336] call_tmp[795343] call_tmp[795350] call_tmp[795357] call_tmp[795364]))
    (604949 'move' ret[604934](604948 'deref' call_tmp[795369]))
    label _end_interior[604932]
    (604936 return ret[604934])
  }
  function range[240](?).exterior[118129](arg _mt[118139]:_MT[201], arg this[118132]:range[240](?) :
  range[240](?), arg offset[118136]:integral[159](?)) : _unknown[42] "last resort" "method" "no return value for void"
  {
    (118150 call compilerError "exterior is not supported on unbounded ranges")
    (604951 return _void[46])
  }
  where {
    unknown call_tmp[795376] "expr temp" "maybe param" "maybe type" "temp"
    (795379 'move' call_tmp[795376](427732 call bounds _mt[203] this[118132]))
    (118141 call != call_tmp[795376] both[107114])
  }
  function range[240](?).exterior[118157](arg _mt[118167]:_MT[201], arg this[118160]:range[240](?) :
  range[240](?), arg offset[118164]:integral[159](?)) : _unknown[42] "method" "@unstable"
  {
    unknown ret[604955] "RVV" "temp"
    unknown call_tmp[795381] "expr temp" "maybe param" "maybe type" "temp"
    (795384 'move' call_tmp[795381](118173 call abs offset[118164]))
    unknown call_tmp[795390] "expr temp" "maybe param" "maybe type" "temp"
    (795393 'move' call_tmp[795390](427738 call chpl_integralIdxType _mt[203] this[118160]))
    unknown call_tmp[795395] "maybe param" "maybe type" "temp"
    (795398 'move' call_tmp[795395](118178 call(118175 call (partial) safeCast _mt[203] call_tmp[795381]) call_tmp[795390]))
    const i[118171] "dead at end of block" "const" "insert auto destroy"
    (645389 'init var' i[118171] call_tmp[795395])
    (118181 'end of statement')
    unknown call_tmp[795400] "expr temp" "maybe param" "maybe type" "temp"
    (795403 'move' call_tmp[795400](118200 call < offset[118164] 0))
    unknown call_tmp[795405] "expr temp" "maybe param" "maybe type" "temp"
    (795408 'move' call_tmp[795405](118204 call _cond_test call_tmp[795400]))
    if call_tmp[795405]
    {
      unknown call_tmp[795412] "expr temp" "maybe param" "maybe type" "temp"
      (795415 'move' call_tmp[795412](427744 call idxType _mt[203] this[118160]))
      unknown call_tmp[795419] "expr temp" "maybe param" "maybe type" "temp"
      (795422 'move' call_tmp[795419](427749 call bounds _mt[203] this[118160]))
      unknown call_tmp[795426] "expr temp" "maybe param" "maybe type" "temp"
      (795429 'move' call_tmp[795426](427754 call strides _mt[203] this[118160]))
      unknown call_tmp[795433] "expr temp" "maybe param" "maybe type" "temp"
      (795436 'move' call_tmp[795433](427759 call _low _mt[203] this[118160]))
      unknown call_tmp[795438] "expr temp" "maybe param" "maybe type" "temp"
      (795441 'move' call_tmp[795438](118189 call - call_tmp[795433] i[118171]))
      unknown call_tmp[795445] "expr temp" "maybe param" "maybe type" "temp"
      (795448 'move' call_tmp[795445](427765 call _low _mt[203] this[118160]))
      unknown call_tmp[795450] "expr temp" "maybe param" "maybe type" "temp"
      (795453 'move' call_tmp[795450](118193 call - call_tmp[795445] 1))
      unknown call_tmp[795457] "expr temp" "maybe param" "maybe type" "temp"
      (795460 'move' call_tmp[795457](427770 call _stride _mt[203] this[118160]))
      unknown call_tmp[795464] "expr temp" "maybe param" "maybe type" "temp"
      (795467 'move' call_tmp[795464](427775 call _alignment _mt[203] this[118160]))
      unknown call_tmp[795469] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (795472 'move' call_tmp[795469](1000083 'new' range[240](?) call_tmp[795412] call_tmp[795419] call_tmp[795426] call_tmp[795438] call_tmp[795450] call_tmp[795457] call_tmp[795464]))
      (604960 'move' ret[604955](604959 'deref' call_tmp[795469]))
      gotoReturn _end_exterior[604953] _end_exterior[604953]
      (552216 'end of statement' i[118171])
    }
    unknown call_tmp[795474] "expr temp" "maybe param" "maybe type" "temp"
    (795477 'move' call_tmp[795474](118227 call > offset[118164] 0))
    unknown call_tmp[795479] "expr temp" "maybe param" "maybe type" "temp"
    (795482 'move' call_tmp[795479](118231 call _cond_test call_tmp[795474]))
    if call_tmp[795479]
    {
      unknown call_tmp[795486] "expr temp" "maybe param" "maybe type" "temp"
      (795489 'move' call_tmp[795486](427782 call idxType _mt[203] this[118160]))
      unknown call_tmp[795493] "expr temp" "maybe param" "maybe type" "temp"
      (795496 'move' call_tmp[795493](427787 call bounds _mt[203] this[118160]))
      unknown call_tmp[795500] "expr temp" "maybe param" "maybe type" "temp"
      (795503 'move' call_tmp[795500](427792 call strides _mt[203] this[118160]))
      unknown call_tmp[795507] "expr temp" "maybe param" "maybe type" "temp"
      (795510 'move' call_tmp[795507](427797 call _high _mt[203] this[118160]))
      unknown call_tmp[795512] "expr temp" "maybe param" "maybe type" "temp"
      (795515 'move' call_tmp[795512](118216 call + call_tmp[795507] 1))
      unknown call_tmp[795519] "expr temp" "maybe param" "maybe type" "temp"
      (795522 'move' call_tmp[795519](427802 call _high _mt[203] this[118160]))
      unknown call_tmp[795524] "expr temp" "maybe param" "maybe type" "temp"
      (795527 'move' call_tmp[795524](118220 call + call_tmp[795519] i[118171]))
      unknown call_tmp[795531] "expr temp" "maybe param" "maybe type" "temp"
      (795534 'move' call_tmp[795531](427808 call _stride _mt[203] this[118160]))
      unknown call_tmp[795538] "expr temp" "maybe param" "maybe type" "temp"
      (795541 'move' call_tmp[795538](427813 call _alignment _mt[203] this[118160]))
      unknown call_tmp[795543] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (795546 'move' call_tmp[795543](1000084 'new' range[240](?) call_tmp[795486] call_tmp[795493] call_tmp[795500] call_tmp[795512] call_tmp[795524] call_tmp[795531] call_tmp[795538]))
      (604965 'move' ret[604955](604964 'deref' call_tmp[795543]))
      gotoReturn _end_exterior[604953] _end_exterior[604953]
      (552218 'end of statement' i[118171])
    }
    unknown call_tmp[795550] "expr temp" "maybe param" "maybe type" "temp"
    (795553 'move' call_tmp[795550](427820 call idxType _mt[203] this[118160]))
    unknown call_tmp[795557] "expr temp" "maybe param" "maybe type" "temp"
    (795560 'move' call_tmp[795557](427825 call bounds _mt[203] this[118160]))
    unknown call_tmp[795564] "expr temp" "maybe param" "maybe type" "temp"
    (795567 'move' call_tmp[795564](427830 call strides _mt[203] this[118160]))
    unknown call_tmp[795571] "expr temp" "maybe param" "maybe type" "temp"
    (795574 'move' call_tmp[795571](427835 call _low _mt[203] this[118160]))
    unknown call_tmp[795578] "expr temp" "maybe param" "maybe type" "temp"
    (795581 'move' call_tmp[795578](427840 call _high _mt[203] this[118160]))
    unknown call_tmp[795585] "expr temp" "maybe param" "maybe type" "temp"
    (795588 'move' call_tmp[795585](427845 call _stride _mt[203] this[118160]))
    unknown call_tmp[795592] "expr temp" "maybe param" "maybe type" "temp"
    (795595 'move' call_tmp[795592](427850 call _alignment _mt[203] this[118160]))
    unknown call_tmp[795597] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (795600 'move' call_tmp[795597](1000085 'new' range[240](?) call_tmp[795550] call_tmp[795557] call_tmp[795564] call_tmp[795571] call_tmp[795578] call_tmp[795585] call_tmp[795592]))
    (604970 'move' ret[604955](604969 'deref' call_tmp[795597]))
    label _end_exterior[604953]
    (604957 return ret[604955])
  }
  function range[240](?).exterior[118249](arg _mt[118259]:_MT[201], arg this[118252]:range[240](?) :
  range[240](?), arg offset[118256]:integral[159](?)) : _unknown[42] "method" "no return value for void"
  {
    (118266 call compilerError "can't apply '.exterior()' to a range whose 'idxType' only has one value")
    (604972 return _void[46])
  }
  where {
    unknown call_tmp[795604] "expr temp" "maybe param" "maybe type" "temp"
    (795607 'move' call_tmp[795604](427856 call idxType _mt[203] this[118252]))
    (118262 call chpl__singleValIdxType call_tmp[795604])
  }
  function =[118273](ref arg r1[118278]:range[240](?), arg r2[118284]:range[240](?)) : _unknown[42] "assignop" "inline" "operator" "no return value for void"
  {
    unknown call_tmp[795611] "expr temp" "maybe param" "maybe type" "temp"
    (795614 'move' call_tmp[795611](118317 call idxType _mt[203] r1[118278]))
    unknown call_tmp[795618] "expr temp" "maybe param" "maybe type" "temp"
    (795621 'move' call_tmp[795618](118321 call idxType _mt[203] r2[118284]))
    unknown call_tmp[795623] "expr temp" "maybe param" "maybe type" "temp"
    (795626 'move' call_tmp[795623](118315 call assignmentIsLegal call_tmp[795611] call_tmp[795618]))
    unknown call_tmp[795628] "expr temp" "maybe param" "maybe type" "temp"
    (795631 'move' call_tmp[795628](118312 call ! call_tmp[795623]))
    unknown call_tmp[795633] "expr temp" "maybe param" "maybe type" "temp"
    (795636 'move' call_tmp[795633](118324 call _cond_test call_tmp[795628]))
    if call_tmp[795633]
    {
      unknown call_tmp[795640] "expr temp" "maybe param" "maybe type" "temp"
      (795643 'move' call_tmp[795640](118296 call idxType _mt[203] r1[118278]))
      unknown call_tmp[795645] "expr temp" "maybe param" "maybe type" "temp"
      (795648 'move' call_tmp[795645](118293 call : call_tmp[795640] string[244]))
      unknown call_tmp[795652] "expr temp" "maybe param" "maybe type" "temp"
      (795655 'move' call_tmp[795652](118304 call idxType _mt[203] r2[118284]))
      unknown call_tmp[795657] "expr temp" "maybe param" "maybe type" "temp"
      (795660 'move' call_tmp[795657](118301 call : call_tmp[795652] string[244]))
      (118289 call compilerError "assigning to a range with idxType " call_tmp[795645] " from a range with idxType " call_tmp[795657] " without an explicit cast")
    }
    unknown call_tmp[795664] "expr temp" "maybe param" "maybe type" "temp"
    (795667 'move' call_tmp[795664](118354 call bounds _mt[203] r1[118278]))
    unknown call_tmp[795671] "expr temp" "maybe param" "maybe type" "temp"
    (795674 'move' call_tmp[795671](118358 call bounds _mt[203] r2[118284]))
    unknown call_tmp[795676] "expr temp" "maybe param" "maybe type" "temp"
    (795679 'move' call_tmp[795676](118351 call != call_tmp[795664] call_tmp[795671]))
    unknown call_tmp[795681] "expr temp" "maybe param" "maybe type" "temp"
    (795684 'move' call_tmp[795681](118361 call _cond_test call_tmp[795676]))
    if call_tmp[795681]
    {
      unknown call_tmp[795688] "expr temp" "maybe param" "maybe type" "temp"
      (795691 'move' call_tmp[795688](118337 call bounds _mt[203] r1[118278]))
      unknown call_tmp[795693] "expr temp" "maybe param" "maybe type" "temp"
      (795696 'move' call_tmp[795693](118334 call : call_tmp[795688] string[244]))
      unknown call_tmp[795700] "expr temp" "maybe param" "maybe type" "temp"
      (795703 'move' call_tmp[795700](118345 call bounds _mt[203] r2[118284]))
      unknown call_tmp[795705] "expr temp" "maybe param" "maybe type" "temp"
      (795708 'move' call_tmp[795705](118342 call : call_tmp[795700] string[244]))
      (118330 call compilerError "assigning to a range with boundKind." call_tmp[795693] " from a range with boundKind." call_tmp[795705] " without an explicit cast")
    }
    unknown call_tmp[795710] "expr temp" "maybe param" "maybe type" "temp"
    (795713 'move' call_tmp[795710](118391 call chpl_assignStrideIsSafe r1[118278] r2[118284]))
    unknown call_tmp[795715] "expr temp" "maybe param" "maybe type" "temp"
    (795718 'move' call_tmp[795715](118388 call ! call_tmp[795710]))
    unknown call_tmp[795720] "expr temp" "maybe param" "maybe type" "temp"
    (795723 'move' call_tmp[795720](118394 call _cond_test call_tmp[795715]))
    if call_tmp[795720]
    {
      unknown call_tmp[795727] "expr temp" "maybe param" "maybe type" "temp"
      (795730 'move' call_tmp[795727](118374 call strides _mt[203] r1[118278]))
      unknown call_tmp[795732] "expr temp" "maybe param" "maybe type" "temp"
      (795735 'move' call_tmp[795732](118371 call : call_tmp[795727] string[244]))
      unknown call_tmp[795739] "expr temp" "maybe param" "maybe type" "temp"
      (795742 'move' call_tmp[795739](118382 call strides _mt[203] r2[118284]))
      unknown call_tmp[795744] "expr temp" "maybe param" "maybe type" "temp"
      (795747 'move' call_tmp[795744](118379 call : call_tmp[795739] string[244]))
      (118367 call compilerError "assigning to a range with strideKind." call_tmp[795732] " from a range with strideKind." call_tmp[795744] " without an explicit cast")
    }
    unknown call_tmp[795751] "expr temp" "maybe param" "maybe type" "temp"
    (795754 'move' call_tmp[795751](118402 call _low _mt[203] r1[118278]))
    unknown call_tmp[795758] "expr temp" "maybe param" "maybe type" "temp"
    (795761 'move' call_tmp[795758](118408 call _low _mt[203] r2[118284]))
    unknown call_tmp[795765] "expr temp" "maybe param" "maybe type" "temp"
    (795768 'move' call_tmp[795765](118412 call chpl_integralIdxType _mt[203] r1[118278]))
    unknown call_tmp[795770] "expr temp" "maybe param" "maybe type" "temp"
    (795773 'move' call_tmp[795770](118405 call : call_tmp[795758] call_tmp[795765]))
    (118399 call = call_tmp[795751] call_tmp[795770])
    (552225 'end of statement')
    unknown call_tmp[795777] "expr temp" "maybe param" "maybe type" "temp"
    (795780 'move' call_tmp[795777](118418 call _high _mt[203] r1[118278]))
    unknown call_tmp[795784] "expr temp" "maybe param" "maybe type" "temp"
    (795787 'move' call_tmp[795784](118424 call _high _mt[203] r2[118284]))
    unknown call_tmp[795791] "expr temp" "maybe param" "maybe type" "temp"
    (795794 'move' call_tmp[795791](118428 call chpl_integralIdxType _mt[203] r1[118278]))
    unknown call_tmp[795796] "expr temp" "maybe param" "maybe type" "temp"
    (795799 'move' call_tmp[795796](118421 call : call_tmp[795784] call_tmp[795791]))
    (118415 call = call_tmp[795777] call_tmp[795796])
    (552226 'end of statement')
    unknown call_tmp[795803] "expr temp" "maybe param" "maybe type" "temp"
    (795806 'move' call_tmp[795803](118468 call(118465 call (partial) hasParamStrideAltvalAld _mt[203] r1[118278])))
    unknown call_tmp[795808] "expr temp" "maybe param" "maybe type" "temp"
    (795811 'move' call_tmp[795808](118462 call ! call_tmp[795803]))
    unknown call_tmp[795813] "expr temp" "maybe param" "maybe type" "temp"
    (795816 'move' call_tmp[795813](118469 call _cond_test call_tmp[795808]))
    if call_tmp[795813]
    {
      unknown call_tmp[795820] "expr temp" "maybe param" "maybe type" "temp"
      (795823 'move' call_tmp[795820](118435 call _stride _mt[203] r1[118278]))
      unknown call_tmp[795827] "expr temp" "maybe param" "maybe type" "temp"
      (795830 'move' call_tmp[795827](118439 call stride _mt[203] r2[118284]))
      (118432 call = call_tmp[795820] call_tmp[795827])
      (552227 'end of statement')
      unknown tmp[675359] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[675360] "maybe param" "temp"
      unknown call_tmp[795834] "expr temp" "maybe param" "maybe type" "temp"
      (795837 'move' call_tmp[795834](118451 call _alignment _mt[203] r2[118284]))
      unknown call_tmp[795839] "expr temp" "maybe param" "maybe type" "temp"
      (795842 'move' call_tmp[795839](118449 call isNothingValue call_tmp[795834]))
      (675365 'move' tmp[675360](675363 call _cond_test call_tmp[795839]))
      if tmp[675360]
      {
        (675370 'move' tmp[675359](675367 '_paramFoldLogical' tmp[675360] 0))
      }
      {
        unknown tmp[675372] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (675374 'move' tmp[675372](118456 call _alignment _mt[203] r2[118284]))
        (675379 'move' tmp[675359](675376 '_paramFoldLogical' tmp[675360] tmp[675372]))
      }
      unknown call_tmp[795848] "expr temp" "maybe param" "maybe type" "temp"
      (795851 'move' call_tmp[795848](118445 call _alignment _mt[203] r1[118278]))
      (118442 call = call_tmp[795848] tmp[675359])
    }
    (604974 return _void[46])
  }
  function +[118475](arg r1[118480]:range[240](?), arg r2[118486]:range[240](?)) : _unknown[42] "operator" "no return value for void"
  {
    (118491 call compilerError "range addition is currently not supported")
    (604976 return _void[46])
  }
  function -[118497](arg r1[118502]:range[240](?), arg r2[118508]:range[240](?)) : _unknown[42] "operator" "no return value for void"
  {
    (118513 call compilerError "range subtraction is currently not supported")
    (604978 return _void[46])
  }
  function +[118519](arg r[118529]:range[240](?), arg i[118533]:integral[159](?)) : _unknown[42] "inline" "operator" "@unstable"
  {
    unknown ret[604982] "RVV" "temp"
    unknown call_tmp[795853] "expr temp" "maybe param" "maybe type" "temp"
    (795856 'move' call_tmp[795853](521730 'query' r[118529] 1))
    unknown call_tmp[795858] "expr temp" "maybe param" "maybe type" "temp"
    (795861 'move' call_tmp[795858](521736 'query' r[118529] 2))
    unknown call_tmp[795863] "expr temp" "maybe param" "maybe type" "temp"
    (795866 'move' call_tmp[795863](521742 'query' r[118529] 3))
    unknown call_tmp[795870] "expr temp" "maybe param" "maybe type" "temp"
    (795873 'move' call_tmp[795870](118547 call _low _mt[203] r[118529]))
    unknown call_tmp[795875] "expr temp" "maybe param" "maybe type" "temp"
    (795878 'move' call_tmp[795875](118544 call + call_tmp[795870] i[118533]))
    unknown call_tmp[795882] "expr temp" "maybe param" "maybe type" "temp"
    (795885 'move' call_tmp[795882](118554 call _high _mt[203] r[118529]))
    unknown call_tmp[795887] "expr temp" "maybe param" "maybe type" "temp"
    (795890 'move' call_tmp[795887](118551 call + call_tmp[795882] i[118533]))
    unknown call_tmp[795894] "expr temp" "maybe param" "maybe type" "temp"
    (795897 'move' call_tmp[795894](118559 call _stride _mt[203] r[118529]))
    unknown call_tmp[795901] "expr temp" "maybe param" "maybe type" "temp"
    (795904 'move' call_tmp[795901](118569 call alignment _mt[203] r[118529]))
    unknown call_tmp[795906] "expr temp" "maybe param" "maybe type" "temp"
    (795909 'move' call_tmp[795906](118565 call chpl__idxToInt call_tmp[795901]))
    unknown call_tmp[795911] "expr temp" "maybe param" "maybe type" "temp"
    (795914 'move' call_tmp[795911](118562 call + call_tmp[795906] i[118533]))
    unknown call_tmp[795918] "expr temp" "maybe param" "maybe type" "temp"
    (795921 'move' call_tmp[795918](118577 call(118574 call (partial) isAligned _mt[203] r[118529])))
    unknown call_tmp[795923] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (795926 'move' call_tmp[795923](1000086 'new' range[240](?) call_tmp[795853] call_tmp[795858] call_tmp[795863] call_tmp[795875] call_tmp[795887] call_tmp[795894] call_tmp[795911] call_tmp[795918]))
    (604987 'move' ret[604982](604986 'deref' call_tmp[795923]))
    (604984 return ret[604982])
  }
  function +=[118580](ref arg r[118590]:range[240](?), arg offset[118594]:integral[159](?)) : _unknown[42] "assignop" "inline" "operator" "@unstable" "no return value for void"
  {
    unknown call_tmp[795928] "expr temp" "maybe param" "maybe type" "temp"
    (795931 'move' call_tmp[795928](118601 call + r[118590] offset[118594]))
    (118598 call = r[118590] call_tmp[795928])
    (604989 return _void[46])
  }
  function +[118607](arg i[118610]:integral[159](?), arg r[118621]:range[240](?)) : _unknown[42] "inline" "operator" "@unstable"
  {
    unknown ret[604993] "RVV" "temp"
    unknown call_tmp[795933] "expr temp" "maybe param" "maybe type" "temp"
    (795936 'move' call_tmp[795933](118626 call + r[118621] i[118610]))
    (604998 'move' ret[604993](604997 'deref' call_tmp[795933]))
    (604995 return ret[604993])
  }
  function -[118632](arg r[118642]:range[240](?), arg i[118646]:integral[159](?)) : _unknown[42] "inline" "operator" "@unstable"
  {
    unknown ret[605002] "RVV" "temp"
    unknown call_tmp[795938] "expr temp" "maybe param" "maybe type" "temp"
    (795941 'move' call_tmp[795938](521778 'query' r[118642] 1))
    unknown call_tmp[795943] "expr temp" "maybe param" "maybe type" "temp"
    (795946 'move' call_tmp[795943](521784 'query' r[118642] 2))
    unknown call_tmp[795948] "expr temp" "maybe param" "maybe type" "temp"
    (795951 'move' call_tmp[795948](521790 'query' r[118642] 3))
    unknown call_tmp[795955] "expr temp" "maybe param" "maybe type" "temp"
    (795958 'move' call_tmp[795955](118660 call _low _mt[203] r[118642]))
    unknown call_tmp[795960] "expr temp" "maybe param" "maybe type" "temp"
    (795963 'move' call_tmp[795960](118657 call - call_tmp[795955] i[118646]))
    unknown call_tmp[795967] "expr temp" "maybe param" "maybe type" "temp"
    (795970 'move' call_tmp[795967](118667 call _high _mt[203] r[118642]))
    unknown call_tmp[795972] "expr temp" "maybe param" "maybe type" "temp"
    (795975 'move' call_tmp[795972](118664 call - call_tmp[795967] i[118646]))
    unknown call_tmp[795979] "expr temp" "maybe param" "maybe type" "temp"
    (795982 'move' call_tmp[795979](118672 call _stride _mt[203] r[118642]))
    unknown call_tmp[795986] "expr temp" "maybe param" "maybe type" "temp"
    (795989 'move' call_tmp[795986](118680 call alignment _mt[203] r[118642]))
    unknown call_tmp[795991] "expr temp" "maybe param" "maybe type" "temp"
    (795994 'move' call_tmp[795991](118678 call chpl__idxToInt call_tmp[795986]))
    unknown call_tmp[795996] "expr temp" "maybe param" "maybe type" "temp"
    (795999 'move' call_tmp[795996](118675 call - call_tmp[795991] i[118646]))
    unknown call_tmp[796003] "expr temp" "maybe param" "maybe type" "temp"
    (796006 'move' call_tmp[796003](118688 call(118685 call (partial) isAligned _mt[203] r[118642])))
    unknown call_tmp[796008] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (796011 'move' call_tmp[796008](1000087 'new' range[240](?) call_tmp[795938] call_tmp[795943] call_tmp[795948] call_tmp[795960] call_tmp[795972] call_tmp[795979] call_tmp[795996] call_tmp[796003]))
    (605007 'move' ret[605002](605006 'deref' call_tmp[796008]))
    (605004 return ret[605002])
  }
  function -=[118691](ref arg r[118701]:range[240](?), arg offset[118705]:integral[159](?)) : _unknown[42] "assignop" "inline" "operator" "@unstable" "no return value for void"
  {
    unknown call_tmp[796013] "expr temp" "maybe param" "maybe type" "temp"
    (796016 'move' call_tmp[796013](118712 call - r[118701] offset[118705]))
    (118709 call = r[118701] call_tmp[796013])
    (605009 return _void[46])
  }
  function chpl_check_step_integral[118718](arg step[118720]:_any[141](?)) : _unknown[42] "inline" "no return value for void"
  {
    unknown call_tmp[796018] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (796021 'move' call_tmp[796018](118739 'typeof' step[118720]))
    unknown call_tmp[796023] "expr temp" "maybe param" "maybe type" "temp"
    (796026 'move' call_tmp[796023](118737 call isIntegral call_tmp[796018]))
    unknown call_tmp[796028] "expr temp" "maybe param" "maybe type" "temp"
    (796031 'move' call_tmp[796028](118734 call ! call_tmp[796023]))
    unknown call_tmp[796033] "expr temp" "maybe param" "maybe type" "temp"
    (796036 'move' call_tmp[796033](118740 call _cond_test call_tmp[796028]))
    if call_tmp[796033]
    {
      unknown call_tmp[796038] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (796041 'move' call_tmp[796038](118731 'typeof' step[118720]))
      unknown call_tmp[796043] "expr temp" "maybe param" "maybe type" "temp"
      (796046 'move' call_tmp[796043](118728 call : call_tmp[796038] string[244]))
      (118724 call compilerError "can't apply 'by' using step of a non-integral type " call_tmp[796043])
    }
    (605011 return _void[46])
  }
  function chpl_need_to_check_step[118747](arg step[118749]:_any[141](?), arg strType[118751]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[605015] "RVV" "param" "temp"
    unknown call_tmp[796048] "expr temp" "maybe param" "maybe type" "temp"
    (796051 'move' call_tmp[796048](118757 call isInt strType[118751]))
    (118755 call compilerAssert call_tmp[796048])
    (552237 'end of statement')
    unknown tmp[485166] "maybe param" "temp"
    unknown call_tmp[796053] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (796056 'move' call_tmp[796053](118765 'typeof' step[118749]))
    (485177 'move' tmp[485166](118762 call != call_tmp[796053] strType[118751]))
    unknown call_tmp[796058] "expr temp" "maybe param" "maybe type" "temp"
    (796061 'move' call_tmp[796058](485179 call _cond_invalid tmp[485166]))
    if call_tmp[796058]
    {
      (485182 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[675386] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[675387] "maybe param" "temp"
    unknown call_tmp[796063] "expr temp" "maybe param" "maybe type" "temp"
    (796066 'move' call_tmp[796063](485167 call isTrue tmp[485166]))
    (675392 'move' tmp[675387](675390 call _cond_test call_tmp[796063]))
    if tmp[675387]
    {
      unknown tmp[675394] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[796068] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (796071 'move' call_tmp[796068](118772 'typeof' step[118749]))
      unknown call_tmp[796073] "expr temp" "maybe param" "maybe type" "temp"
      (796076 'move' call_tmp[796073](118770 call numBits call_tmp[796068]))
      unknown call_tmp[796078] "expr temp" "maybe param" "maybe type" "temp"
      (796081 'move' call_tmp[796078](118774 call numBits strType[118751]))
      unknown call_tmp[796083] "expr temp" "maybe param" "maybe type" "temp"
      (796086 'move' call_tmp[796083](118767 call >= call_tmp[796073] call_tmp[796078]))
      (675396 'move' tmp[675394](485170 call isTrue call_tmp[796083]))
      (675401 'move' tmp[675386](675398 '_paramFoldLogical' tmp[675387] tmp[675394]))
    }
    {
      (675406 'move' tmp[675386](675403 '_paramFoldLogical' tmp[675387] 0))
    }
    (605020 'move' ret[605015](605019 'deref' tmp[675386]))
    (605017 return ret[605015])
  }
  function chpl_range_check_stride[118778](arg step[118780]:_any[141](?), arg idxType[118782]:_any[141](?)) : _unknown[42] "inline" "no return value for void"
  {
    (118786 call chpl_check_step_integral step[118780])
    (552240 'end of statement')
    unknown strType[118789] "dead at end of block" "insert auto destroy" "type variable"
    (645394 'move' strType[118789](645392 call chpl__rangeStrideType idxType[118782]))
    (552241 'end of statement')
    unknown call_tmp[796088] "expr temp" "maybe param" "maybe type" "temp"
    (796091 'move' call_tmp[796088](118850 call _cond_test 1))
    if call_tmp[796088]
    {
      unknown call_tmp[796093] "expr temp" "maybe param" "maybe type" "temp"
      (796096 'move' call_tmp[796093](118804 call == step[118780] 0))
      unknown call_tmp[796098] "expr temp" "maybe param" "maybe type" "temp"
      (796101 'move' call_tmp[796098](118808 call _cond_test call_tmp[796093]))
      if call_tmp[796098]
      {
        (118799 call boundsCheckHalt module=[222] HaltWrappers[518] "the step argument of the 'by' operator is zero")
        (401895 'referenced modules list' HaltWrappers[518])
      }
      unknown tmp[485187] "maybe param" "temp"
      (485198 'move' tmp[485187](118831 call chpl_need_to_check_step step[118780] strType[118789]))
      unknown call_tmp[796103] "expr temp" "maybe param" "maybe type" "temp"
      (796106 'move' call_tmp[796103](485200 call _cond_invalid tmp[485187]))
      if call_tmp[796103]
      {
        (485203 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[675413] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[675414] "maybe param" "temp"
      unknown call_tmp[796108] "expr temp" "maybe param" "maybe type" "temp"
      (796111 'move' call_tmp[796108](485188 call isTrue tmp[485187]))
      (675419 'move' tmp[675414](675417 call _cond_test call_tmp[796108]))
      if tmp[675414]
      {
        unknown tmp[675421] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[796113] "expr temp" "maybe param" "maybe type" "temp"
        (796116 'move' call_tmp[796113](118840 call max strType[118789]))
        unknown call_tmp[796118] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (796121 'move' call_tmp[796118](118843 'typeof' step[118780]))
        unknown call_tmp[796123] "expr temp" "maybe param" "maybe type" "temp"
        (796126 'move' call_tmp[796123](118837 call : call_tmp[796113] call_tmp[796118]))
        unknown call_tmp[796128] "expr temp" "maybe param" "maybe type" "temp"
        (796131 'move' call_tmp[796128](118834 call > step[118780] call_tmp[796123]))
        (675423 'move' tmp[675421](485191 call isTrue call_tmp[796128]))
        (675428 'move' tmp[675413](675425 '_paramFoldLogical' tmp[675414] tmp[675421]))
      }
      {
        (675433 'move' tmp[675413](675430 '_paramFoldLogical' tmp[675414] 0))
      }
      unknown call_tmp[796133] "expr temp" "maybe param" "maybe type" "temp"
      (796136 'move' call_tmp[796133](118844 call _cond_test tmp[675413]))
      if call_tmp[796133]
      {
        unknown call_tmp[796138] "expr temp" "maybe param" "maybe type" "temp"
        (796141 'move' call_tmp[796138](118823 call : strType[118789] string[244]))
        unknown call_tmp[796143] "expr temp" "maybe param" "maybe type" "temp"
        (796146 'move' call_tmp[796143](118818 call + "the step argument of the 'by' operator is too large and cannot be represented within the range's stride type " call_tmp[796138]))
        (118817 call boundsCheckHalt module=[222] HaltWrappers[518] call_tmp[796143])
        (552244 'end of statement' strType[118789])
        (401901 'referenced modules list' HaltWrappers[518])
      }
    }
    (605022 return _void[46])
  }
  function chpl_range_check_stride[118856](param arg step[118858]:_any[141](?), arg idxType[118860]:_any[141](?)) : _unknown[42] "inline" "no return value for void"
  {
    (118864 call chpl_check_step_integral step[118858])
    (552246 'end of statement')
    unknown strType[118867] "dead at end of block" "insert auto destroy" "type variable"
    (645399 'move' strType[118867](645397 call chpl__rangeStrideType idxType[118860]))
    (552247 'end of statement')
    unknown call_tmp[796148] "expr temp" "maybe param" "maybe type" "temp"
    (796151 'move' call_tmp[796148](118876 call == step[118858] 0))
    unknown call_tmp[796153] "expr temp" "maybe param" "maybe type" "temp"
    (796156 'move' call_tmp[796153](118880 call _cond_test call_tmp[796148]))
    if call_tmp[796153]
    {
      (118873 call compilerError "the step argument of the 'by' operator is zero")
    }
    unknown tmp[485208] "maybe param" "temp"
    (485219 'move' tmp[485208](118898 call chpl_need_to_check_step step[118858] strType[118867]))
    unknown call_tmp[796158] "expr temp" "maybe param" "maybe type" "temp"
    (796161 'move' call_tmp[796158](485221 call _cond_invalid tmp[485208]))
    if call_tmp[796158]
    {
      (485224 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[675440] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[675441] "maybe param" "temp"
    unknown call_tmp[796163] "expr temp" "maybe param" "maybe type" "temp"
    (796166 'move' call_tmp[796163](485209 call isTrue tmp[485208]))
    (675446 'move' tmp[675441](675444 call _cond_test call_tmp[796163]))
    if tmp[675441]
    {
      unknown tmp[675448] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[796168] "expr temp" "maybe param" "maybe type" "temp"
      (796171 'move' call_tmp[796168](118907 call max strType[118867]))
      unknown call_tmp[796173] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (796176 'move' call_tmp[796173](118910 'typeof' step[118858]))
      unknown call_tmp[796178] "expr temp" "maybe param" "maybe type" "temp"
      (796181 'move' call_tmp[796178](118904 call : call_tmp[796168] call_tmp[796173]))
      unknown call_tmp[796183] "expr temp" "maybe param" "maybe type" "temp"
      (796186 'move' call_tmp[796183](118901 call > step[118858] call_tmp[796178]))
      (675450 'move' tmp[675448](485212 call isTrue call_tmp[796183]))
      (675455 'move' tmp[675440](675452 '_paramFoldLogical' tmp[675441] tmp[675448]))
    }
    {
      (675460 'move' tmp[675440](675457 '_paramFoldLogical' tmp[675441] 0))
    }
    unknown call_tmp[796188] "expr temp" "maybe param" "maybe type" "temp"
    (796191 'move' call_tmp[796188](118911 call _cond_test tmp[675440]))
    if call_tmp[796188]
    {
      unknown call_tmp[796193] "expr temp" "maybe param" "maybe type" "temp"
      (796196 'move' call_tmp[796193](118890 call : strType[118867] string[244]))
      unknown call_tmp[796198] "expr temp" "maybe param" "maybe type" "temp"
      (796201 'move' call_tmp[796198](118887 call + "the step argument of the 'by' operator is too large and cannot be represented within the range's stride type " call_tmp[796193]))
      (118886 call compilerError call_tmp[796198])
      (552250 'end of statement' strType[118867])
    }
    (605024 return _void[46])
  }
  function chpl_by_help[118918](arg r[118928]:range[240](?), arg step[118931]:_any[141](?), param arg newStrides[118933]:_any[141](?)) : _unknown[42]
  {
    unknown ret[605055] "RVV" "temp"
    unknown call_tmp[796205] "maybe param" "maybe type" "temp"
    (796208 'move' call_tmp[796205](118963 call _low _mt[203] r[118928]))
    const lw[118961] "dead at end of block" "const" "insert auto destroy"
    (645401 'init var' lw[118961] call_tmp[796205])
    unknown call_tmp[796212] "maybe param" "maybe type" "temp"
    (796215 'move' call_tmp[796212](118956 call _high _mt[203] r[118928]))
    const hh[118954] "dead at end of block" "const" "insert auto destroy"
    (645403 'init var' hh[118954] call_tmp[796212])
    unknown call_tmp[796219] "expr temp" "maybe param" "maybe type" "temp"
    (796222 'move' call_tmp[796219](118942 call stride _mt[203] r[118928]))
    unknown call_tmp[796226] "expr temp" "maybe param" "maybe type" "temp"
    (796229 'move' call_tmp[796226](118949 call strType _mt[203] r[118928]))
    unknown call_tmp[796231] "expr temp" "maybe param" "maybe type" "temp"
    (796234 'move' call_tmp[796231](118945 call : step[118931] call_tmp[796226]))
    unknown call_tmp[796236] "maybe param" "maybe type" "temp"
    (796239 'move' call_tmp[796236](118939 call * call_tmp[796219] call_tmp[796231]))
    const st[118938] "dead at end of block" "const" "insert auto destroy"
    (645405 'init var' st[118938] call_tmp[796236])
    (118967 'end of statement')
    unknown call_tmp[796243] "expr temp" "maybe param" "maybe type" "temp"
    (796246 'move' call_tmp[796243](118976 call(118973 call (partial) isPosNegOne _mt[203] newStrides[118933])))
    unknown call_tmp[796248] "expr temp" "maybe param" "maybe type" "temp"
    (796251 'move' call_tmp[796248](118970 call ! call_tmp[796243]))
    (118969 call compilerAssert call_tmp[796248])
    (552252 'end of statement')
    unknown call_tmp[796255] "expr temp" "maybe param" "maybe type" "temp"
    (796258 'move' call_tmp[796255](119004 call(119001 call (partial) isAligned _mt[203] r[118928])))
    unknown call_tmp[796260] "expr temp" "maybe param" "maybe type" "temp"
    (796263 'move' call_tmp[796260](118998 call ! call_tmp[796255]))
    unknown call_tmp[796265] "expr temp" "maybe param" "maybe type" "temp"
    (796268 'move' call_tmp[796265](119005 call _cond_test call_tmp[796260]))
    if call_tmp[796265]
    {
      unknown tmp[485229] "maybe param" "temp"
      (485240 'move' tmp[485229](118980 call == st[118938] 1))
      unknown call_tmp[796270] "expr temp" "maybe param" "maybe type" "temp"
      (796273 'move' call_tmp[796270](485242 call _cond_invalid tmp[485229]))
      if call_tmp[796270]
      {
        (485245 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[675467] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[675468] "maybe param" "temp"
      unknown call_tmp[796275] "expr temp" "maybe param" "maybe type" "temp"
      (796278 'move' call_tmp[796275](485230 call isTrue tmp[485229]))
      (675473 'move' tmp[675468](675471 call _cond_test call_tmp[796275]))
      if tmp[675468]
      {
        (675478 'move' tmp[675467](675475 '_paramFoldLogical' tmp[675468] 1))
      }
      {
        unknown tmp[675480] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[796280] "expr temp" "maybe param" "maybe type" "temp"
        (796283 'move' call_tmp[796280](118987 call - 1))
        unknown call_tmp[796285] "expr temp" "maybe param" "maybe type" "temp"
        (796288 'move' call_tmp[796285](118984 call == st[118938] call_tmp[796280]))
        (675482 'move' tmp[675480](485234 call isTrue call_tmp[796285]))
        (675487 'move' tmp[675467](675484 '_paramFoldLogical' tmp[675468] tmp[675480]))
      }
      unknown tmp[675494] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[675495] "maybe param" "temp"
      (675500 'move' tmp[675495](675498 call _cond_test tmp[675467]))
      if tmp[675495]
      {
        unknown tmp[675502] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (675504 'move' tmp[675502](118991 call newZeroAlmtRange))
        (675509 'move' tmp[675494](675506 '_paramFoldLogical' tmp[675495] tmp[675502]))
      }
      {
        unknown tmp[675511] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (675513 'move' tmp[675511](118993 call newUnalignedRange))
        (675518 'move' tmp[675494](675515 '_paramFoldLogical' tmp[675495] tmp[675511]))
      }
      (605060 'move' ret[605055](605059 'deref' tmp[675494]))
      gotoReturn _end_chpl_by_help[605053] _end_chpl_by_help[605053]
      (552254 'end of statement' st[118938])
    }
    unknown call_tmp[796290] "expr temp" "maybe param" "maybe type" "temp"
    (796293 'move' call_tmp[796290](119081 call isPositiveStride newStrides[118933] st[118938]))
    unknown call_tmp[796295] "expr temp" "maybe param" "maybe type" "temp"
    (796298 'move' call_tmp[796295](119084 call _cond_test call_tmp[796290]))
    if call_tmp[796295]
    {
      unknown tmp[675556] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[675557] "maybe param" "temp"
      unknown call_tmp[796300] "expr temp" "maybe param" "maybe type" "temp"
      (796303 'move' call_tmp[796300](119012 call hasLowBoundForIter r[118928]))
      (675562 'move' tmp[675557](675560 call _cond_test call_tmp[796300]))
      if tmp[675557]
      {
        unknown tmp[675564] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[796305] "expr temp" "maybe param" "maybe type" "temp"
        (796308 'move' call_tmp[796305](521813 'query' r[118928] 1))
        unknown call_tmp[796310] "expr temp" "maybe param" "maybe type" "temp"
        (796313 'move' call_tmp[796310](521831 'query' r[118928] 2))
        unknown call_tmp[796317] "expr temp" "maybe param" "maybe type" "temp"
        (796320 'move' call_tmp[796317](119024 call chpl_alignedLowAsIntForIter _mt[203] r[118928]))
        (675566 'move' tmp[675564](1000088 'new' range[240](?) call_tmp[796305] call_tmp[796310] newStrides[118933] lw[118961] hh[118954] st[118938] call_tmp[796317] 1 1))
        (675571 'move' tmp[675556](675568 '_paramFoldLogical' tmp[675557] tmp[675564]))
      }
      {
        unknown tmp[675525] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[675526] "maybe param" "temp"
        unknown call_tmp[796322] "expr temp" "maybe param" "maybe type" "temp"
        (796325 'move' call_tmp[796322](119029 call == st[118938] 1))
        (675531 'move' tmp[675526](675529 call _cond_test call_tmp[796322]))
        if tmp[675526]
        {
          unknown tmp[675533] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (675535 'move' tmp[675533](119034 call newZeroAlmtRange))
          (675540 'move' tmp[675525](675537 '_paramFoldLogical' tmp[675526] tmp[675533]))
        }
        {
          unknown tmp[675542] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (675544 'move' tmp[675542](119036 call newUnalignedRange))
          (675549 'move' tmp[675525](675546 '_paramFoldLogical' tmp[675526] tmp[675542]))
        }
        (675576 'move' tmp[675556](675573 '_paramFoldLogical' tmp[675557] tmp[675525]))
      }
      (605065 'move' ret[605055](605064 'deref' tmp[675556]))
      gotoReturn _end_chpl_by_help[605053] _end_chpl_by_help[605053]
      (552256 'end of statement' lw[118961] hh[118954] st[118938])
    }
    {
      unknown tmp[675614] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[675615] "maybe param" "temp"
      unknown call_tmp[796327] "expr temp" "maybe param" "maybe type" "temp"
      (796330 'move' call_tmp[796327](119046 call hasHighBoundForIter r[118928]))
      (675620 'move' tmp[675615](675618 call _cond_test call_tmp[796327]))
      if tmp[675615]
      {
        unknown tmp[675622] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[796332] "expr temp" "maybe param" "maybe type" "temp"
        (796335 'move' call_tmp[796332](521816 'query' r[118928] 1))
        unknown call_tmp[796337] "expr temp" "maybe param" "maybe type" "temp"
        (796340 'move' call_tmp[796337](521834 'query' r[118928] 2))
        unknown call_tmp[796344] "expr temp" "maybe param" "maybe type" "temp"
        (796347 'move' call_tmp[796344](119058 call chpl_alignedHighAsIntForIter _mt[203] r[118928]))
        (675624 'move' tmp[675622](1000089 'new' range[240](?) call_tmp[796332] call_tmp[796337] newStrides[118933] lw[118961] hh[118954] st[118938] call_tmp[796344] 1 1))
        (675629 'move' tmp[675614](675626 '_paramFoldLogical' tmp[675615] tmp[675622]))
      }
      {
        unknown tmp[675583] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[675584] "maybe param" "temp"
        unknown call_tmp[796349] "expr temp" "maybe param" "maybe type" "temp"
        (796352 'move' call_tmp[796349](119066 call - 1))
        unknown call_tmp[796354] "expr temp" "maybe param" "maybe type" "temp"
        (796357 'move' call_tmp[796354](119063 call == st[118938] call_tmp[796349]))
        (675589 'move' tmp[675584](675587 call _cond_test call_tmp[796354]))
        if tmp[675584]
        {
          unknown tmp[675591] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (675593 'move' tmp[675591](119070 call newZeroAlmtRange))
          (675598 'move' tmp[675583](675595 '_paramFoldLogical' tmp[675584] tmp[675591]))
        }
        {
          unknown tmp[675600] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (675602 'move' tmp[675600](119072 call newUnalignedRange))
          (675607 'move' tmp[675583](675604 '_paramFoldLogical' tmp[675584] tmp[675600]))
        }
        (675634 'move' tmp[675614](675631 '_paramFoldLogical' tmp[675615] tmp[675583]))
      }
      (605070 'move' ret[605055](605069 'deref' tmp[675614]))
      gotoReturn _end_chpl_by_help[605053] _end_chpl_by_help[605053]
      (552260 'end of statement' lw[118961] hh[118954] st[118938])
    }
    function newAlignedRange[119090](arg alignment[119092]:_any[141](?)) : _unknown[42]
    {
      unknown ret[605028] "RVV" "temp"
      unknown call_tmp[796359] "expr temp" "maybe param" "maybe type" "temp"
      (796362 'move' call_tmp[796359](521819 'query' r[118928] 1))
      unknown call_tmp[796364] "expr temp" "maybe param" "maybe type" "temp"
      (796367 'move' call_tmp[796364](521837 'query' r[118928] 2))
      unknown call_tmp[796369] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (796372 'move' call_tmp[796369](1000090 'new' range[240](?) call_tmp[796359] call_tmp[796364] newStrides[118933] lw[118961] hh[118954] st[118938] alignment[119092] 1 1))
      (605033 'move' ret[605028](605032 'deref' call_tmp[796369]))
      (605030 return ret[605028])
    }
    function newZeroAlmtRange[119110]() : _unknown[42]
    {
      unknown ret[605037] "RVV" "temp"
      unknown call_tmp[796374] "expr temp" "maybe param" "maybe type" "temp"
      (796377 'move' call_tmp[796374](521822 'query' r[118928] 1))
      unknown call_tmp[796379] "expr temp" "maybe param" "maybe type" "temp"
      (796382 'move' call_tmp[796379](521840 'query' r[118928] 2))
      unknown call_tmp[796386] "expr temp" "maybe param" "maybe type" "temp"
      (796389 'move' call_tmp[796386](119127 call strType _mt[203] r[118928]))
      unknown call_tmp[796391] "expr temp" "maybe param" "maybe type" "temp"
      (796394 'move' call_tmp[796391](119123 call : 0 call_tmp[796386]))
      unknown call_tmp[796396] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (796399 'move' call_tmp[796396](1000091 'new' range[240](?) call_tmp[796374] call_tmp[796379] newStrides[118933] lw[118961] hh[118954] st[118938] call_tmp[796391]))
      (605042 'move' ret[605037](605041 'deref' call_tmp[796396]))
      (605039 return ret[605037])
    }
    function newUnalignedRange[119132]() : _unknown[42] "inline"
    {
      unknown ret[605046] "RVV" "temp"
      unknown call_tmp[796401] "expr temp" "maybe param" "maybe type" "temp"
      (796404 'move' call_tmp[796401](521825 'query' r[118928] 1))
      unknown call_tmp[796406] "expr temp" "maybe param" "maybe type" "temp"
      (796409 'move' call_tmp[796406](521843 'query' r[118928] 2))
      unknown call_tmp[796413] "expr temp" "maybe param" "maybe type" "temp"
      (796416 'move' call_tmp[796413](119149 call strType _mt[203] r[118928]))
      unknown call_tmp[796418] "expr temp" "maybe param" "maybe type" "temp"
      (796421 'move' call_tmp[796418](119145 call : unalignedMark[107107] call_tmp[796413]))
      unknown call_tmp[796423] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (796426 'move' call_tmp[796423](1000092 'new' range[240](?) call_tmp[796401] call_tmp[796406] newStrides[118933] lw[118961] hh[118954] st[118938] call_tmp[796418]))
      (605051 'move' ret[605046](605050 'deref' call_tmp[796423]))
      (605048 return ret[605046])
    }
    label _end_chpl_by_help[605053]
    (605057 return ret[605055])
  }
  function chpl_by[119156](arg r[119161]:range[240](?), arg step[119164]:_any[141](?)) : _unknown[42] "inline" "operator"
  {
    unknown ret[605076] "RVV" "temp"
    unknown call_tmp[796430] "expr temp" "maybe param" "maybe type" "temp"
    (796433 'move' call_tmp[796430](119171 call idxType _mt[203] r[119161]))
    (119168 call chpl_range_check_stride step[119164] call_tmp[796430])
    (552267 'end of statement')
    unknown newStrides[119175] "dead at end of block" "param"
    unknown tmp[675641] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[675642] "maybe param" "temp"
    unknown call_tmp[796435] "expr temp" "maybe param" "maybe type" "temp"
    (796438 'move' call_tmp[796435](119179 call isUint step[119164]))
    unknown call_tmp[796440] "expr temp" "maybe param" "maybe type" "temp"
    (796443 'move' call_tmp[796440](119176 call ! call_tmp[796435]))
    (675647 'move' tmp[675642](675645 call _cond_test call_tmp[796440]))
    if tmp[675642]
    {
      (675652 'move' tmp[675641](675649 '_paramFoldLogical' tmp[675642] any[107135]))
    }
    {
      unknown tmp[675654] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[796447] "expr temp" "maybe param" "maybe type" "temp"
      (796450 'move' call_tmp[796447](119188 call strides _mt[203] r[119161]))
      (675656 'move' tmp[675654](119186 call chpl_strideProduct call_tmp[796447] positive[107131]))
      (675661 'move' tmp[675641](675658 '_paramFoldLogical' tmp[675642] tmp[675654]))
    }
    (645407 'init var' newStrides[119175] tmp[675641])
    (119199 'end of statement')
    unknown call_tmp[796452] "expr temp" "maybe param" "maybe type" "temp"
    (796455 'move' call_tmp[796452](119202 call chpl_by_help r[119161] step[119164] newStrides[119175]))
    (605081 'move' ret[605076](605080 'deref' call_tmp[796452]))
    (605078 return ret[605076])
  }
  function chpl_by[119208](arg r[119213]:range[240](?), param arg step[119216]:_any[141](?)) : _unknown[42] "inline" "operator"
  {
    unknown ret[605085] "RVV" "temp"
    unknown call_tmp[796459] "expr temp" "maybe param" "maybe type" "temp"
    (796462 'move' call_tmp[796459](119223 call idxType _mt[203] r[119213]))
    (119220 call chpl_range_check_stride step[119216] call_tmp[796459])
    (552269 'end of statement')
    unknown call_tmp[796464] "expr temp" "maybe param" "maybe type" "temp"
    (796467 'move' call_tmp[796464](119229 call == step[119216] 1))
    unknown call_tmp[796469] "expr temp" "maybe param" "maybe type" "temp"
    (796472 'move' call_tmp[796469](119233 call _cond_test call_tmp[796464]))
    if call_tmp[796469]
    {
      (605090 'move' ret[605085](605089 'deref' r[119213]))
      gotoReturn _end_chpl_by[605083] _end_chpl_by[605083]
    }
    unknown call_tmp[796474] "expr temp" "maybe param" "maybe type" "temp"
    (796477 'move' call_tmp[796474](119309 call - 1))
    unknown call_tmp[796479] "expr temp" "maybe param" "maybe type" "temp"
    (796482 'move' call_tmp[796479](119306 call == step[119216] call_tmp[796474]))
    unknown call_tmp[796484] "expr temp" "maybe param" "maybe type" "temp"
    (796487 'move' call_tmp[796484](119312 call _cond_test call_tmp[796479]))
    if call_tmp[796484]
    {
      unknown tmp[675668] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[675669] "maybe param" "temp"
      unknown call_tmp[796491] "expr temp" "maybe param" "maybe type" "temp"
      (796494 'move' call_tmp[796491](119243 call(119240 call (partial) hasParamStrideAltvalAld _mt[203] r[119213])))
      (675674 'move' tmp[675669](675672 call _cond_test call_tmp[796491]))
      if tmp[675669]
      {
        unknown tmp[675676] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[796498] "expr temp" "maybe param" "maybe type" "temp"
        (796501 'move' call_tmp[796498](119248 call idxType _mt[203] r[119213]))
        unknown call_tmp[796505] "expr temp" "maybe param" "maybe type" "temp"
        (796508 'move' call_tmp[796505](119252 call bounds _mt[203] r[119213]))
        unknown call_tmp[796510] "expr temp" "maybe param" "maybe type" "temp"
        (796513 'move' call_tmp[796510](119256 call chpl_strideProduct r[119213] step[119216]))
        unknown call_tmp[796517] "expr temp" "maybe param" "maybe type" "temp"
        (796520 'move' call_tmp[796517](119260 call _low _mt[203] r[119213]))
        unknown call_tmp[796524] "expr temp" "maybe param" "maybe type" "temp"
        (796527 'move' call_tmp[796524](119264 call _high _mt[203] r[119213]))
        (675678 'move' tmp[675676](1000093 'new' range[240](?) call_tmp[796498] call_tmp[796505] call_tmp[796510] call_tmp[796517] call_tmp[796524] none[48] none[48]))
        (675683 'move' tmp[675668](675680 '_paramFoldLogical' tmp[675669] tmp[675676]))
      }
      {
        unknown tmp[675685] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[796531] "expr temp" "maybe param" "maybe type" "temp"
        (796534 'move' call_tmp[796531](119273 call idxType _mt[203] r[119213]))
        unknown call_tmp[796538] "expr temp" "maybe param" "maybe type" "temp"
        (796541 'move' call_tmp[796538](119277 call bounds _mt[203] r[119213]))
        unknown call_tmp[796543] "expr temp" "maybe param" "maybe type" "temp"
        (796546 'move' call_tmp[796543](119281 call chpl_strideProduct r[119213] step[119216]))
        unknown call_tmp[796550] "expr temp" "maybe param" "maybe type" "temp"
        (796553 'move' call_tmp[796550](119285 call _low _mt[203] r[119213]))
        unknown call_tmp[796557] "expr temp" "maybe param" "maybe type" "temp"
        (796560 'move' call_tmp[796557](119289 call _high _mt[203] r[119213]))
        unknown call_tmp[796564] "expr temp" "maybe param" "maybe type" "temp"
        (796567 'move' call_tmp[796564](119295 call _stride _mt[203] r[119213]))
        unknown call_tmp[796569] "expr temp" "maybe param" "maybe type" "temp"
        (796572 'move' call_tmp[796569](119292 call - call_tmp[796564]))
        unknown call_tmp[796576] "expr temp" "maybe param" "maybe type" "temp"
        (796579 'move' call_tmp[796576](119299 call _alignment _mt[203] r[119213]))
        (675687 'move' tmp[675685](1000094 'new' range[240](?) call_tmp[796531] call_tmp[796538] call_tmp[796543] call_tmp[796550] call_tmp[796557] call_tmp[796569] call_tmp[796576]))
        (675692 'move' tmp[675668](675689 '_paramFoldLogical' tmp[675669] tmp[675685]))
      }
      (605095 'move' ret[605085](605094 'deref' tmp[675668]))
      gotoReturn _end_chpl_by[605083] _end_chpl_by[605083]
    }
    unknown call_tmp[796581] "expr temp" "maybe param" "maybe type" "temp"
    (796584 'move' call_tmp[796581](119323 call chpl_strideProduct r[119213] step[119216]))
    unknown call_tmp[796586] "expr temp" "maybe param" "maybe type" "temp"
    (796589 'move' call_tmp[796586](119319 call chpl_by_help r[119213] step[119216] call_tmp[796581]))
    (605100 'move' ret[605085](605099 'deref' call_tmp[796586]))
    label _end_chpl_by[605083]
    (605087 return ret[605085])
  }
  function chpl_by[119328](arg r[119330]:_any[141](?), arg step[119332]:_any[141](?)) : _unknown[42] "inline" "last resort" "operator" "no return value for void"
  {
    unknown call_tmp[796591] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (796594 'move' call_tmp[796591](119343 'typeof' r[119330]))
    unknown call_tmp[796596] "expr temp" "maybe param" "maybe type" "temp"
    (796599 'move' call_tmp[796596](119340 call : call_tmp[796591] string[244]))
    (119336 call compilerError "cannot apply 'by' to '" call_tmp[796596] "'")
    (605102 return _void[46])
  }
  function chpl_align[119348](arg r[119358]:range[240](?), arg algn[119362] :
  (521870 'query' r[119358] 1)) : _unknown[42] "inline" "operator"
  {
    unknown ret[605106] "RVV" "temp"
    unknown call_tmp[796603] "expr temp" "maybe param" "maybe type" "temp"
    (796606 'move' call_tmp[796603](119371 call idxType _mt[203] r[119358]))
    unknown call_tmp[796610] "expr temp" "maybe param" "maybe type" "temp"
    (796613 'move' call_tmp[796610](119375 call bounds _mt[203] r[119358]))
    unknown call_tmp[796617] "expr temp" "maybe param" "maybe type" "temp"
    (796620 'move' call_tmp[796617](119379 call strides _mt[203] r[119358]))
    unknown call_tmp[796624] "expr temp" "maybe param" "maybe type" "temp"
    (796627 'move' call_tmp[796624](119383 call _low _mt[203] r[119358]))
    unknown call_tmp[796631] "expr temp" "maybe param" "maybe type" "temp"
    (796634 'move' call_tmp[796631](119387 call _high _mt[203] r[119358]))
    unknown call_tmp[796638] "expr temp" "maybe param" "maybe type" "temp"
    (796641 'move' call_tmp[796638](119391 call _stride _mt[203] r[119358]))
    unknown call_tmp[796643] "expr temp" "maybe param" "maybe type" "temp"
    (796646 'move' call_tmp[796643](119395 call chpl__idxToInt algn[119362]))
    unknown call_tmp[796648] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (796651 'move' call_tmp[796648](1000095 'new' range[240](?) call_tmp[796603] call_tmp[796610] call_tmp[796617] call_tmp[796624] call_tmp[796631] call_tmp[796638] call_tmp[796643] 1))
    (605111 'move' ret[605106](605110 'deref' call_tmp[796648]))
    (605108 return ret[605106])
  }
  function chpl_align[119400](arg r[119410]:range[240](?), arg algn[119413]:_any[141](?)) : _unknown[42] "inline" "last resort" "operator" "no return value for void"
  {
    unknown call_tmp[796653] "expr temp" "maybe param" "maybe type" "temp"
    (796656 'move' call_tmp[796653](521886 'query' r[119410] 1))
    unknown call_tmp[796658] "expr temp" "maybe param" "maybe type" "temp"
    (796661 'move' call_tmp[796658](119421 call : call_tmp[796653] string[244]))
    unknown call_tmp[796663] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (796666 'move' call_tmp[796663](119431 'typeof' algn[119413]))
    unknown call_tmp[796668] "expr temp" "maybe param" "maybe type" "temp"
    (796671 'move' call_tmp[796668](119428 call : call_tmp[796663] string[244]))
    (119417 call compilerError "can't align a range with idxType " call_tmp[796658] " using a value of type " call_tmp[796668])
    (605113 return _void[46])
  }
  function chpl_align[119435](arg r[119437]:_any[141](?), arg algn[119439]:_any[141](?)) : _unknown[42] "inline" "last resort" "operator" "no return value for void"
  {
    unknown call_tmp[796673] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (796676 'move' call_tmp[796673](119450 'typeof' r[119437]))
    unknown call_tmp[796678] "expr temp" "maybe param" "maybe type" "temp"
    (796681 'move' call_tmp[796678](119447 call : call_tmp[796673] string[244]))
    (119443 call compilerError "cannot apply 'align' to '" call_tmp[796678] "'")
    (605115 return _void[46])
  }
  function range[240](?).offset[119455](arg _mt[119465]:_MT[201], arg this[119458]:range[240](?) :
  range[240](?), in arg offset[119462]:integral[159](?)) : _unknown[42] "method" "@unstable"
  {
    unknown ret[605119] "RVV" "temp"
    unknown call_tmp[796685] "expr temp" "maybe param" "maybe type" "temp"
    (796688 'move' call_tmp[796685](428007 call idxType _mt[203] this[119458]))
    unknown call_tmp[796690] "expr temp" "maybe param" "maybe type" "temp"
    (796693 'move' call_tmp[796690](119475 call chpl__singleValIdxType call_tmp[796685]))
    unknown call_tmp[796695] "expr temp" "maybe param" "maybe type" "temp"
    (796698 'move' call_tmp[796695](119477 call _cond_test call_tmp[796690]))
    if call_tmp[796695]
    {
      (119470 call compilerError "can't apply '.offset()' to a range whose 'idxType' only has one value")
    }
    unknown call_tmp[796704] "expr temp" "maybe param" "maybe type" "temp"
    (796707 'move' call_tmp[796704](428011 call chpl_integralIdxType _mt[203] this[119458]))
    unknown call_tmp[796709] "maybe param" "maybe type" "temp"
    (796712 'move' call_tmp[796709](119487 call(119484 call (partial) safeCast _mt[203] offset[119462]) call_tmp[796704]))
    unknown offs[119482] "dead at end of block" "insert auto destroy"
    (645409 'init var' offs[119482] call_tmp[796709])
    (119490 'end of statement')
    unknown call_tmp[796716] "expr temp" "maybe param" "maybe type" "temp"
    (796719 'move' call_tmp[796716](119522 call(428016 call (partial) hasUnitStride _mt[203] this[119458])))
    unknown call_tmp[796721] "expr temp" "maybe param" "maybe type" "temp"
    (796724 'move' call_tmp[796721](119523 call _cond_test call_tmp[796716]))
    if call_tmp[796721]
    {
      unknown call_tmp[796728] "expr temp" "maybe param" "maybe type" "temp"
      (796731 'move' call_tmp[796728](119510 call(119507 call (partial) hasLowBound _mt[203] this[119458])))
      unknown call_tmp[796733] "expr temp" "maybe param" "maybe type" "temp"
      (796736 'move' call_tmp[796733](119504 call ! call_tmp[796728]))
      unknown call_tmp[796738] "expr temp" "maybe param" "maybe type" "temp"
      (796741 'move' call_tmp[796738](119511 call _cond_test call_tmp[796733]))
      if call_tmp[796738]
      {
        (119493 call compilerError "can't invoke 'offset' on an unstrided range with no low bound")
      }
      {
        (119499 call compilerWarning "invoking 'offset' on an unstrided range has no effect.")
      }
      (119517 call = offs[119482] 0)
      (552280 'end of statement' offs[119482])
    }
    unknown tmp[485250] "maybe param" "temp"
    (485261 'move' tmp[485250] 1)
    unknown call_tmp[796743] "expr temp" "maybe param" "maybe type" "temp"
    (796746 'move' call_tmp[796743](485263 call _cond_invalid tmp[485250]))
    if call_tmp[796743]
    {
      (485266 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[675699] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[675700] "maybe param" "temp"
    unknown call_tmp[796748] "expr temp" "maybe param" "maybe type" "temp"
    (796751 'move' call_tmp[796748](485251 call isTrue tmp[485250]))
    (675705 'move' tmp[675700](675703 call _cond_test call_tmp[796748]))
    if tmp[675700]
    {
      unknown tmp[675707] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[796755] "expr temp" "maybe param" "maybe type" "temp"
      (796758 'move' call_tmp[796755](119542 call(428021 call (partial) hasFirst _mt[203] this[119458])))
      unknown call_tmp[796760] "expr temp" "maybe param" "maybe type" "temp"
      (796763 'move' call_tmp[796760](119539 call ! call_tmp[796755]))
      (675709 'move' tmp[675707](485254 call isTrue call_tmp[796760]))
      (675714 'move' tmp[675699](675711 '_paramFoldLogical' tmp[675700] tmp[675707]))
    }
    {
      (675719 'move' tmp[675699](675716 '_paramFoldLogical' tmp[675700] 0))
    }
    unknown call_tmp[796765] "expr temp" "maybe param" "maybe type" "temp"
    (796768 'move' call_tmp[796765](119543 call _cond_test tmp[675699]))
    if call_tmp[796765]
    {
      (119531 call boundsCheckHalt module=[222] HaltWrappers[518] "invoking 'offset' on a range without a first index")
      (401941 'referenced modules list' HaltWrappers[518])
    }
    unknown call_tmp[796772] "expr temp" "maybe param" "maybe type" "temp"
    (796775 'move' call_tmp[796772](428027 call idxType _mt[203] this[119458]))
    unknown call_tmp[796779] "expr temp" "maybe param" "maybe type" "temp"
    (796782 'move' call_tmp[796779](428032 call bounds _mt[203] this[119458]))
    unknown call_tmp[796786] "expr temp" "maybe param" "maybe type" "temp"
    (796789 'move' call_tmp[796786](428037 call strides _mt[203] this[119458]))
    unknown call_tmp[796793] "expr temp" "maybe param" "maybe type" "temp"
    (796796 'move' call_tmp[796793](428042 call _low _mt[203] this[119458]))
    unknown call_tmp[796800] "expr temp" "maybe param" "maybe type" "temp"
    (796803 'move' call_tmp[796800](428047 call _high _mt[203] this[119458]))
    unknown call_tmp[796807] "expr temp" "maybe param" "maybe type" "temp"
    (796810 'move' call_tmp[796807](428051 call stride _mt[203] this[119458]))
    unknown call_tmp[796814] "expr temp" "maybe param" "maybe type" "temp"
    (796817 'move' call_tmp[796814](119561 call firstAsInt _mt[203] this[119458]))
    unknown call_tmp[796819] "expr temp" "maybe param" "maybe type" "temp"
    (796822 'move' call_tmp[796819](119558 call + call_tmp[796814] offs[119482]))
    unknown call_tmp[796824] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (796827 'move' call_tmp[796824](1000096 'new' range[240](?) call_tmp[796772] call_tmp[796779] call_tmp[796786] call_tmp[796793] call_tmp[796800] call_tmp[796807] call_tmp[796819] 1))
    (605124 'move' ret[605119](605123 'deref' call_tmp[796824]))
    gotoReturn _end_offset[605117] _end_offset[605117]
    (552284 'end of statement' offs[119482])
    label _end_offset[605117]
    (605121 return ret[605119])
  }
  function range[240](?).this[119568](arg _mt[119580]:_MT[201], const arg this[119571]:range[240](?) :
  range[240](?), arg other[119577]:range[240](?)) : _unknown[42] "method"
  {
    unknown ret[605248] "RVV" "temp"
    unknown call_tmp[796831] "expr temp" "maybe param" "maybe type" "temp"
    (796834 'move' call_tmp[796831](119600 call(119597 call (partial) isAligned _mt[203] this[119571])))
    unknown call_tmp[796836] "expr temp" "maybe param" "maybe type" "temp"
    (796839 'move' call_tmp[796836](119594 call ! call_tmp[796831]))
    unknown call_tmp[796841] "expr temp" "maybe param" "maybe type" "temp"
    (796844 'move' call_tmp[796841](119601 call _cond_test call_tmp[796836]))
    if call_tmp[796841]
    {
      (119589 call unimplementedFeatureHalt module=[222] HaltWrappers[518] "slicing of an unaligned range")
      (401948 'referenced modules list' HaltWrappers[518])
    }
    unknown call_tmp[796846] "maybe param" "maybe type" "temp"
    (796849 'move' call_tmp[796846](119609 call computeBoundedType this[119571] other[119577]))
    unknown newBoundKind[119607] "dead at end of block" "param"
    (645411 'init var' newBoundKind[119607] call_tmp[796846])
    (119613 'end of statement')
    function computeBoundedType[119614](arg r1[119616]:_any[141](?), arg r2[119618]:_any[141](?)) param : _unknown[42]
    {
      unknown ret[605130] "RVV" "param" "temp"
      unknown tmp[485271] "maybe param" "temp"
      (485282 'move' tmp[485271](119629 call(119626 call (partial) hasLowBound _mt[203] r1[119616])))
      unknown call_tmp[796853] "expr temp" "maybe param" "maybe type" "temp"
      (796856 'move' call_tmp[796853](485284 call _cond_invalid tmp[485271]))
      if call_tmp[796853]
      {
        (485287 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown low[119622] "dead at end of block" "param"
      unknown tmp[675726] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[675727] "maybe param" "temp"
      unknown call_tmp[796858] "expr temp" "maybe param" "maybe type" "temp"
      (796861 'move' call_tmp[796858](485272 call isTrue tmp[485271]))
      (675732 'move' tmp[675727](675730 call _cond_test call_tmp[796858]))
      if tmp[675727]
      {
        (675737 'move' tmp[675726](675734 '_paramFoldLogical' tmp[675727] 1))
      }
      {
        unknown tmp[675739] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[796865] "expr temp" "maybe param" "maybe type" "temp"
        (796868 'move' call_tmp[796865](119634 call(119631 call (partial) hasLowBound _mt[203] r2[119618])))
        (675741 'move' tmp[675739](485276 call isTrue call_tmp[796865]))
        (675746 'move' tmp[675726](675743 '_paramFoldLogical' tmp[675727] tmp[675739]))
      }
      (645413 'init var' low[119622] tmp[675726])
      (119636 'end of statement')
      unknown tmp[485292] "maybe param" "temp"
      (485303 'move' tmp[485292](119645 call(119642 call (partial) hasHighBound _mt[203] r1[119616])))
      unknown call_tmp[796872] "expr temp" "maybe param" "maybe type" "temp"
      (796875 'move' call_tmp[796872](485305 call _cond_invalid tmp[485292]))
      if call_tmp[796872]
      {
        (485308 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown high[119638] "dead at end of block" "param"
      unknown tmp[675753] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[675754] "maybe param" "temp"
      unknown call_tmp[796877] "expr temp" "maybe param" "maybe type" "temp"
      (796880 'move' call_tmp[796877](485293 call isTrue tmp[485292]))
      (675759 'move' tmp[675754](675757 call _cond_test call_tmp[796877]))
      if tmp[675754]
      {
        (675764 'move' tmp[675753](675761 '_paramFoldLogical' tmp[675754] 1))
      }
      {
        unknown tmp[675766] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[796884] "expr temp" "maybe param" "maybe type" "temp"
        (796887 'move' call_tmp[796884](119650 call(119647 call (partial) hasHighBound _mt[203] r2[119618])))
        (675768 'move' tmp[675766](485297 call isTrue call_tmp[796884]))
        (675773 'move' tmp[675753](675770 '_paramFoldLogical' tmp[675754] tmp[675766]))
      }
      (645415 'init var' high[119638] tmp[675753])
      (119652 'end of statement')
      unknown tmp[485313] "maybe param" "temp"
      (485324 'move' tmp[485313] low[119622])
      unknown call_tmp[796889] "expr temp" "maybe param" "maybe type" "temp"
      (796892 'move' call_tmp[796889](485326 call _cond_invalid tmp[485313]))
      if call_tmp[796889]
      {
        (485329 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[675780] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[675781] "maybe param" "temp"
      unknown call_tmp[796894] "expr temp" "maybe param" "maybe type" "temp"
      (796897 'move' call_tmp[796894](485314 call isTrue tmp[485313]))
      (675786 'move' tmp[675781](675784 call _cond_test call_tmp[796894]))
      if tmp[675781]
      {
        unknown tmp[675788] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (675790 'move' tmp[675788](485317 call isTrue high[119638]))
        (675795 'move' tmp[675780](675792 '_paramFoldLogical' tmp[675781] tmp[675788]))
      }
      {
        (675800 'move' tmp[675780](675797 '_paramFoldLogical' tmp[675781] 0))
      }
      unknown call_tmp[796899] "expr temp" "maybe param" "maybe type" "temp"
      (796902 'move' call_tmp[796899](119695 call _cond_test tmp[675780]))
      if call_tmp[796899]
      {
        (605135 'move' ret[605130](605134 'deref' both[107114]))
        gotoReturn _end_computeBoundedType[605128] _end_computeBoundedType[605128]
      }
      {
        unknown call_tmp[796904] "expr temp" "maybe param" "maybe type" "temp"
        (796907 'move' call_tmp[796904](119685 call _cond_test low[119622]))
        if call_tmp[796904]
        {
          (605140 'move' ret[605130](605139 'deref' low[107116]))
          gotoReturn _end_computeBoundedType[605128] _end_computeBoundedType[605128]
        }
        {
          unknown call_tmp[796909] "expr temp" "maybe param" "maybe type" "temp"
          (796912 'move' call_tmp[796909](119678 call _cond_test high[119638]))
          if call_tmp[796909]
          {
            (605145 'move' ret[605130](605144 'deref' high[107118]))
            gotoReturn _end_computeBoundedType[605128] _end_computeBoundedType[605128]
          }
          {
            (605150 'move' ret[605130](605149 'deref' neither[107120]))
            gotoReturn _end_computeBoundedType[605128] _end_computeBoundedType[605128]
          }
        }
      }
      label _end_computeBoundedType[605128]
      (605132 return ret[605130])
    }
    unknown tmp[485334] "maybe param" "temp"
    unknown tmp[485355] "maybe param" "temp"
    (485366 'move' tmp[485355](119729 call != newBoundKind[119607] both[107114]))
    unknown call_tmp[796914] "expr temp" "maybe param" "maybe type" "temp"
    (796917 'move' call_tmp[796914](485368 call _cond_invalid tmp[485355]))
    if call_tmp[796914]
    {
      (485371 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[675807] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[675808] "maybe param" "temp"
    unknown call_tmp[796919] "expr temp" "maybe param" "maybe type" "temp"
    (796922 'move' call_tmp[796919](485356 call isTrue tmp[485355]))
    (675813 'move' tmp[675808](675811 call _cond_test call_tmp[796919]))
    if tmp[675808]
    {
      unknown tmp[675815] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[796926] "expr temp" "maybe param" "maybe type" "temp"
      (796929 'move' call_tmp[796926](119739 call strides _mt[203] this[119571]))
      unknown call_tmp[796933] "expr temp" "maybe param" "maybe type" "temp"
      (796936 'move' call_tmp[796933](119745 call(119742 call (partial) isPosNegOne _mt[203] call_tmp[796926])))
      unknown call_tmp[796938] "expr temp" "maybe param" "maybe type" "temp"
      (796941 'move' call_tmp[796938](119736 call ! call_tmp[796933]))
      (675817 'move' tmp[675815](485359 call isTrue call_tmp[796938]))
      (675822 'move' tmp[675807](675819 '_paramFoldLogical' tmp[675808] tmp[675815]))
    }
    {
      (675827 'move' tmp[675807](675824 '_paramFoldLogical' tmp[675808] 0))
    }
    (485345 'move' tmp[485334] tmp[675807])
    unknown call_tmp[796943] "expr temp" "maybe param" "maybe type" "temp"
    (796946 'move' call_tmp[796943](485347 call _cond_invalid tmp[485334]))
    if call_tmp[796943]
    {
      (485350 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[675834] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[675835] "maybe param" "temp"
    unknown call_tmp[796948] "expr temp" "maybe param" "maybe type" "temp"
    (796951 'move' call_tmp[796948](485335 call isTrue tmp[485334]))
    (675840 'move' tmp[675835](675838 call _cond_test call_tmp[796948]))
    if tmp[675835]
    {
      unknown tmp[675842] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[796955] "expr temp" "maybe param" "maybe type" "temp"
      (796958 'move' call_tmp[796955](119749 call strides _mt[203] other[119577]))
      unknown call_tmp[796962] "expr temp" "maybe param" "maybe type" "temp"
      (796965 'move' call_tmp[796962](119755 call(119752 call (partial) isPosNegOne _mt[203] call_tmp[796955])))
      unknown call_tmp[796967] "expr temp" "maybe param" "maybe type" "temp"
      (796970 'move' call_tmp[796967](119746 call ! call_tmp[796962]))
      (675844 'move' tmp[675842](485338 call isTrue call_tmp[796967]))
      (675849 'move' tmp[675834](675846 '_paramFoldLogical' tmp[675835] tmp[675842]))
    }
    {
      (675854 'move' tmp[675834](675851 '_paramFoldLogical' tmp[675835] 0))
    }
    unknown call_tmp[796972] "expr temp" "maybe param" "maybe type" "temp"
    (796975 'move' call_tmp[796972](119756 call _cond_test tmp[675834]))
    if call_tmp[796972]
    {
      unknown call_tmp[796977] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (796980 'move' call_tmp[796977](119711 'typeof' this[119571]))
      unknown call_tmp[796982] "expr temp" "maybe param" "maybe type" "temp"
      (796985 'move' call_tmp[796982](119708 call : call_tmp[796977] string[244]))
      unknown call_tmp[796987] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (796990 'move' call_tmp[796987](119719 'typeof' other[119577]))
      unknown call_tmp[796992] "expr temp" "maybe param" "maybe type" "temp"
      (796995 'move' call_tmp[796992](119716 call : call_tmp[796987] string[244]))
      (119704 call compilerWarning "slicing a " call_tmp[796982] " with a " call_tmp[796992] " might produce an empty range and result in a halt")
    }
    unknown lo1[119762] "dead at end of block" "insert auto destroy"
    unknown tmp[675861] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[675862] "maybe param" "temp"
    unknown call_tmp[796999] "expr temp" "maybe param" "maybe type" "temp"
    (797002 'move' call_tmp[796999](119764 call(428066 call (partial) hasLowBound _mt[203] this[119571])))
    (675867 'move' tmp[675862](675865 call _cond_test call_tmp[796999]))
    if tmp[675862]
    {
      unknown tmp[675869] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (675871 'move' tmp[675869](119766 call _low _mt[203] this[119571]))
      (675876 'move' tmp[675861](675873 '_paramFoldLogical' tmp[675862] tmp[675869]))
    }
    {
      unknown tmp[675878] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (675880 'move' tmp[675878](119770 call _low _mt[203] other[119577]))
      (675885 'move' tmp[675861](675882 '_paramFoldLogical' tmp[675862] tmp[675878]))
    }
    (645417 'init var' lo1[119762] tmp[675861])
    (119777 'end of statement')
    unknown hi1[119779] "dead at end of block" "insert auto destroy"
    unknown tmp[675892] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[675893] "maybe param" "temp"
    unknown call_tmp[797010] "expr temp" "maybe param" "maybe type" "temp"
    (797013 'move' call_tmp[797010](119781 call(428070 call (partial) hasHighBound _mt[203] this[119571])))
    (675898 'move' tmp[675893](675896 call _cond_test call_tmp[797010]))
    if tmp[675893]
    {
      unknown tmp[675900] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (675902 'move' tmp[675900](119783 call _high _mt[203] this[119571]))
      (675907 'move' tmp[675892](675904 '_paramFoldLogical' tmp[675893] tmp[675900]))
    }
    {
      unknown tmp[675909] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (675911 'move' tmp[675909](119787 call _high _mt[203] other[119577]))
      (675916 'move' tmp[675892](675913 '_paramFoldLogical' tmp[675893] tmp[675909]))
    }
    (645419 'init var' hi1[119779] tmp[675892])
    (119794 'end of statement')
    unknown call_tmp[797021] "expr temp" "maybe param" "maybe type" "temp"
    (797024 'move' call_tmp[797021](119800 call stride _mt[203] this[119571]))
    unknown call_tmp[797026] "maybe param" "maybe type" "temp"
    (797029 'move' call_tmp[797026](119798 call abs call_tmp[797021]))
    unknown st1[119796] "dead at end of block" "insert auto destroy"
    (645421 'init var' st1[119796] call_tmp[797026])
    (119804 'end of statement')
    unknown lo2[119806] "dead at end of block" "insert auto destroy"
    unknown tmp[675923] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[675924] "maybe param" "temp"
    unknown call_tmp[797033] "expr temp" "maybe param" "maybe type" "temp"
    (797036 'move' call_tmp[797033](119811 call(119808 call (partial) hasLowBound _mt[203] other[119577])))
    (675929 'move' tmp[675924](675927 call _cond_test call_tmp[797033]))
    if tmp[675924]
    {
      unknown tmp[675931] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (675933 'move' tmp[675931](119813 call _low _mt[203] other[119577]))
      (675938 'move' tmp[675923](675935 '_paramFoldLogical' tmp[675924] tmp[675931]))
    }
    {
      unknown tmp[675940] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (675942 'move' tmp[675940](119817 call _low _mt[203] this[119571]))
      (675947 'move' tmp[675923](675944 '_paramFoldLogical' tmp[675924] tmp[675940]))
    }
    (645423 'init var' lo2[119806] tmp[675923])
    (119824 'end of statement')
    unknown hi2[119826] "dead at end of block" "insert auto destroy"
    unknown tmp[675954] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[675955] "maybe param" "temp"
    unknown call_tmp[797044] "expr temp" "maybe param" "maybe type" "temp"
    (797047 'move' call_tmp[797044](119831 call(119828 call (partial) hasHighBound _mt[203] other[119577])))
    (675960 'move' tmp[675955](675958 call _cond_test call_tmp[797044]))
    if tmp[675955]
    {
      unknown tmp[675962] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (675964 'move' tmp[675962](119833 call _high _mt[203] other[119577]))
      (675969 'move' tmp[675954](675966 '_paramFoldLogical' tmp[675955] tmp[675962]))
    }
    {
      unknown tmp[675971] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (675973 'move' tmp[675971](119837 call _high _mt[203] this[119571]))
      (675978 'move' tmp[675954](675975 '_paramFoldLogical' tmp[675955] tmp[675971]))
    }
    (645425 'init var' hi2[119826] tmp[675954])
    (119844 'end of statement')
    unknown call_tmp[797055] "expr temp" "maybe param" "maybe type" "temp"
    (797058 'move' call_tmp[797055](119850 call stride _mt[203] other[119577]))
    unknown call_tmp[797060] "maybe param" "maybe type" "temp"
    (797063 'move' call_tmp[797060](119848 call abs call_tmp[797055]))
    unknown st2[119846] "dead at end of block" "insert auto destroy"
    (645427 'init var' st2[119846] call_tmp[797060])
    (119854 'end of statement')
    unknown call_tmp[797067] "expr temp" "maybe param" "maybe type" "temp"
    (797070 'move' call_tmp[797067](428076 call chpl_integralIdxType _mt[203] this[119571]))
    unknown call_tmp[797072] "expr temp" "maybe param" "maybe type" "temp"
    (797075 'move' call_tmp[797072](119871 call isUintType call_tmp[797067]))
    unknown call_tmp[797077] "expr temp" "maybe param" "maybe type" "temp"
    (797080 'move' call_tmp[797077](119873 call _cond_test call_tmp[797072]))
    if call_tmp[797077]
    {
      unknown call_tmp[797082] "expr temp" "maybe param" "maybe type" "temp"
      (797085 'move' call_tmp[797082](119861 call < lo1[119762] 0))
      unknown call_tmp[797087] "expr temp" "maybe param" "maybe type" "temp"
      (797090 'move' call_tmp[797087](119865 call _cond_test call_tmp[797082]))
      if call_tmp[797087]
      {
        (119856 call = lo1[119762] 0)
        (552297 'end of statement' lo1[119762])
      }
    }
    unknown emptyIntersection[119878] "dead at end of block" "insert auto destroy" "split inited"
    unknown type_tmp[645429] "maybe param" "maybe type" "temp"
    (645435 'move' type_tmp[645429] bool[19])
    (645431 'init var split decl' emptyIntersection[119878] type_tmp[645429])
    (119881 'end of statement')
    function myMin[119882](arg x[119885]:int(64)[10], arg y[119889]:uint(64)[86]) : _unknown[42]
    {
      unknown ret[605156] "RVV" "temp"
      unknown call_tmp[797092] "expr temp" "maybe param" "maybe type" "temp"
      (797095 'move' call_tmp[797092](119900 call max int(64)[10]))
      unknown call_tmp[797097] "expr temp" "maybe param" "maybe type" "temp"
      (797100 'move' call_tmp[797097](119896 call > y[119889] call_tmp[797092]))
      unknown call_tmp[797102] "expr temp" "maybe param" "maybe type" "temp"
      (797105 'move' call_tmp[797102](119902 call _cond_test call_tmp[797097]))
      if call_tmp[797102]
      {
        (605161 'move' ret[605156](605160 'deref' x[119885]))
        gotoReturn _end_myMin[605154] _end_myMin[605154]
      }
      unknown call_tmp[797107] "expr temp" "maybe param" "maybe type" "temp"
      (797110 'move' call_tmp[797107](119910 call : y[119889] int(64)[10]))
      unknown call_tmp[797112] "expr temp" "maybe param" "maybe type" "temp"
      (797115 'move' call_tmp[797112](119908 call min x[119885] call_tmp[797107]))
      (605166 'move' ret[605156](605165 'deref' call_tmp[797112]))
      label _end_myMin[605154]
      (605158 return ret[605156])
    }
    function myMin[119916](arg x[119919]:uint(64)[86], arg y[119923]:int(64)[10]) : _unknown[42]
    {
      unknown ret[605170] "RVV" "temp"
      unknown call_tmp[797117] "expr temp" "maybe param" "maybe type" "temp"
      (797120 'move' call_tmp[797117](119934 call < y[119923] 0))
      unknown call_tmp[797122] "expr temp" "maybe param" "maybe type" "temp"
      (797125 'move' call_tmp[797122](119938 call _cond_test call_tmp[797117]))
      if call_tmp[797122]
      {
        (119928 call = emptyIntersection[119878] 1)
        (552301 'end of statement')
        (605175 'move' ret[605170](605174 'deref' x[119919]))
        gotoReturn _end_myMin[605168] _end_myMin[605168]
      }
      unknown call_tmp[797127] "expr temp" "maybe param" "maybe type" "temp"
      (797130 'move' call_tmp[797127](119946 call : y[119923] uint(64)[86]))
      unknown call_tmp[797132] "expr temp" "maybe param" "maybe type" "temp"
      (797135 'move' call_tmp[797132](119944 call min x[119919] call_tmp[797127]))
      (605180 'move' ret[605170](605179 'deref' call_tmp[797132]))
      label _end_myMin[605168]
      (605172 return ret[605170])
    }
    function myMin[119952](arg x[119955]:int(64)[10], arg y[119959]:int(64)[10]) : _unknown[42]
    {
      unknown ret[605184] "RVV" "temp"
      unknown call_tmp[797137] "expr temp" "maybe param" "maybe type" "temp"
      (797140 'move' call_tmp[797137](119965 call min x[119955] y[119959]))
      (605189 'move' ret[605184](605188 'deref' call_tmp[797137]))
      (605186 return ret[605184])
    }
    function myMin[119970](arg x[119973]:uint(64)[86], arg y[119977]:uint(64)[86]) : _unknown[42]
    {
      unknown ret[605193] "RVV" "temp"
      unknown call_tmp[797142] "expr temp" "maybe param" "maybe type" "temp"
      (797145 'move' call_tmp[797142](119983 call min x[119973] y[119977]))
      (605198 'move' ret[605193](605197 'deref' call_tmp[797142]))
      (605195 return ret[605193])
    }
    function myMax[119988](arg x[119991]:int(64)[10], arg y[119995]:uint(64)[86]) : _unknown[42]
    {
      unknown ret[605202] "RVV" "temp"
      unknown call_tmp[797147] "expr temp" "maybe param" "maybe type" "temp"
      (797150 'move' call_tmp[797147](120010 call max int(64)[10]))
      unknown call_tmp[797152] "expr temp" "maybe param" "maybe type" "temp"
      (797155 'move' call_tmp[797152](120006 call > y[119995] call_tmp[797147]))
      unknown call_tmp[797157] "expr temp" "maybe param" "maybe type" "temp"
      (797160 'move' call_tmp[797157](120012 call _cond_test call_tmp[797152]))
      if call_tmp[797157]
      {
        (120000 call = emptyIntersection[119878] 1)
        (552306 'end of statement')
        (605207 'move' ret[605202](605206 'deref' x[119991]))
        gotoReturn _end_myMax[605200] _end_myMax[605200]
      }
      unknown call_tmp[797162] "expr temp" "maybe param" "maybe type" "temp"
      (797165 'move' call_tmp[797162](120020 call : y[119995] int(64)[10]))
      unknown call_tmp[797167] "expr temp" "maybe param" "maybe type" "temp"
      (797170 'move' call_tmp[797167](120018 call max x[119991] call_tmp[797162]))
      (605212 'move' ret[605202](605211 'deref' call_tmp[797167]))
      label _end_myMax[605200]
      (605204 return ret[605202])
    }
    function myMax[120026](arg x[120029]:uint(64)[86], arg y[120033]:int(64)[10]) : _unknown[42]
    {
      unknown ret[605216] "RVV" "temp"
      unknown call_tmp[797172] "expr temp" "maybe param" "maybe type" "temp"
      (797175 'move' call_tmp[797172](120040 call < y[120033] 0))
      unknown call_tmp[797177] "expr temp" "maybe param" "maybe type" "temp"
      (797180 'move' call_tmp[797177](120044 call _cond_test call_tmp[797172]))
      if call_tmp[797177]
      {
        (605221 'move' ret[605216](605220 'deref' x[120029]))
        gotoReturn _end_myMax[605214] _end_myMax[605214]
      }
      unknown call_tmp[797182] "expr temp" "maybe param" "maybe type" "temp"
      (797185 'move' call_tmp[797182](120052 call : y[120033] uint(64)[86]))
      unknown call_tmp[797187] "expr temp" "maybe param" "maybe type" "temp"
      (797190 'move' call_tmp[797187](120050 call max x[120029] call_tmp[797182]))
      (605226 'move' ret[605216](605225 'deref' call_tmp[797187]))
      label _end_myMax[605214]
      (605218 return ret[605216])
    }
    function myMax[120058](arg x[120061]:int(64)[10], arg y[120065]:int(64)[10]) : _unknown[42]
    {
      unknown ret[605230] "RVV" "temp"
      unknown call_tmp[797192] "expr temp" "maybe param" "maybe type" "temp"
      (797195 'move' call_tmp[797192](120071 call max x[120061] y[120065]))
      (605235 'move' ret[605230](605234 'deref' call_tmp[797192]))
      (605232 return ret[605230])
    }
    function myMax[120076](arg x[120079]:uint(64)[86], arg y[120083]:uint(64)[86]) : _unknown[42]
    {
      unknown ret[605239] "RVV" "temp"
      unknown call_tmp[797197] "expr temp" "maybe param" "maybe type" "temp"
      (797200 'move' call_tmp[797197](120089 call max x[120079] y[120083]))
      (605244 'move' ret[605239](605243 'deref' call_tmp[797197]))
      (605241 return ret[605239])
    }
    (645437 'init var split init' emptyIntersection[119878] 0 type_tmp[645429])
    (552313 'end of statement' emptyIntersection[119878])
    unknown call_tmp[797202] "expr temp" "maybe param" "maybe type" "temp"
    (797205 'move' call_tmp[797202](120103 call myMax lo1[119762] lo2[119806]))
    unknown call_tmp[797209] "expr temp" "maybe param" "maybe type" "temp"
    (797212 'move' call_tmp[797209](428110 call chpl_integralIdxType _mt[203] this[119571]))
    unknown call_tmp[797214] "maybe param" "maybe type" "temp"
    (797217 'move' call_tmp[797214](120100 call : call_tmp[797202] call_tmp[797209]))
    unknown newlo[120099] "dead at end of block" "insert auto destroy"
    (645440 'init var' newlo[120099] call_tmp[797214])
    (120108 'end of statement')
    unknown call_tmp[797219] "expr temp" "maybe param" "maybe type" "temp"
    (797222 'move' call_tmp[797219](120114 call myMin hi1[119779] hi2[119826]))
    unknown call_tmp[797226] "expr temp" "maybe param" "maybe type" "temp"
    (797229 'move' call_tmp[797226](428116 call chpl_integralIdxType _mt[203] this[119571]))
    unknown call_tmp[797231] "maybe param" "maybe type" "temp"
    (797234 'move' call_tmp[797231](120111 call : call_tmp[797219] call_tmp[797226]))
    unknown newhi[120110] "dead at end of block" "insert auto destroy"
    (645442 'init var' newhi[120110] call_tmp[797231])
    (120119 'end of statement')
    unknown call_tmp[797236] "expr temp" "maybe param" "maybe type" "temp"
    (797239 'move' call_tmp[797236](120136 call _cond_test emptyIntersection[119878]))
    if call_tmp[797236]
    {
      unknown call_tmp[797243] "expr temp" "maybe param" "maybe type" "temp"
      (797246 'move' call_tmp[797243](428122 call idxType _mt[203] this[119571]))
      unknown call_tmp[797248] "expr temp" "maybe param" "maybe type" "temp"
      (797251 'move' call_tmp[797248](120125 call chpl__defaultLowBound call_tmp[797243] newBoundKind[119607]))
      (120121 call = newlo[120099] call_tmp[797248])
      (552319 'end of statement' newlo[120099])
      unknown call_tmp[797255] "expr temp" "maybe param" "maybe type" "temp"
      (797258 'move' call_tmp[797255](428129 call idxType _mt[203] this[119571]))
      unknown call_tmp[797260] "expr temp" "maybe param" "maybe type" "temp"
      (797263 'move' call_tmp[797260](120132 call chpl__defaultHighBound call_tmp[797255] newBoundKind[119607]))
      (120128 call = newhi[120110] call_tmp[797260])
      (552321 'end of statement' newhi[120110])
    }
    unknown call_tmp[797265] "maybe param" "maybe type" "temp"
    (797268 'move' call_tmp[797265](120143 call chpl_strideProduct this[119571] other[119577]))
    unknown newStrideKind[120141] "dead at end of block" "param"
    (645444 'init var' newStrideKind[120141] call_tmp[797265])
    (120147 'end of statement')
    unknown newStride[120154] "dead at end of block" "insert auto destroy"
    (645446 'init var' newStride[120154] st1[119796])
    unknown newAbsStride[120150] "dead at end of block" "insert auto destroy"
    (645448 'init var' newAbsStride[120150] st1[119796])
    (120157 'end of statement')
    unknown type_tmp[120165] "dead at end of block" "insert auto destroy" "temp" "type variable"
    (645454 'move' type_tmp[120165](645451 call strType _mt[203] this[119571]))
    unknown gcd[120164] "dead at end of block" "insert auto destroy"
    (645456 'default init var' gcd[120164] type_tmp[120165])
    unknown x[120160] "dead at end of block" "insert auto destroy"
    (645458 'default init var' x[120160] type_tmp[120165])
    (120170 'end of statement')
    unknown call_tmp[797274] "expr temp" "maybe param" "maybe type" "temp"
    (797277 'move' call_tmp[797274](120280 call(120277 call (partial) isPosNegOne _mt[203] newStrideKind[120141])))
    unknown call_tmp[797279] "expr temp" "maybe param" "maybe type" "temp"
    (797282 'move' call_tmp[797279](120274 call ! call_tmp[797274]))
    unknown call_tmp[797284] "expr temp" "maybe param" "maybe type" "temp"
    (797287 'move' call_tmp[797284](120281 call _cond_test call_tmp[797279]))
    if call_tmp[797284]
    {
      unknown call_tmp[797289] "expr temp" "maybe param" "maybe type" "temp"
      (797292 'move' call_tmp[797289](120203 call == st1[119796] st2[119846]))
      unknown call_tmp[797294] "expr temp" "maybe param" "maybe type" "temp"
      (797297 'move' call_tmp[797294](120207 call _cond_test call_tmp[797289]))
      if call_tmp[797294]
      {
        (120173 call = gcd[120164] st1[119796])
        (552324 'end of statement' gcd[120164] st1[119796])
      }
      {
        unknown tmp[577513] "expr temp" "maybe param" "maybe type" "temp"
        unknown tmp[577538] "maybe param" "temp"
        (577541 'move' tmp[577538](577539 'addr of' gcd[120164]))
        unknown tmp[577549] "maybe param" "temp"
        (577552 'move' tmp[577549](577550 'addr of' x[120160]))
        (577514 'move' tmp[577513](120184 call chpl__extendedEuclid st1[119796] st2[119846]))
        { scopeless
          unknown call_tmp[797301] "expr temp" "maybe param" "maybe type" "temp"
          (797304 'move' call_tmp[797301](577520 call size _mt[203] tmp[577513]))
          unknown call_tmp[797306] "expr temp" "maybe param" "maybe type" "temp"
          (797309 'move' call_tmp[797306](577523 call != 2 call_tmp[797301]))
          unknown call_tmp[797311] "expr temp" "maybe param" "maybe type" "temp"
          (797314 'move' call_tmp[797311](577530 call _cond_test call_tmp[797306]))
          if call_tmp[797311]
          {
            (577526 call compilerError "tuple size must match the number of grouped variables" 0)
          }
        }
        unknown call_tmp[797316] "expr temp" "maybe param" "maybe type" "temp"
        (797319 'move' call_tmp[797316](577536 call tmp[577513] 0))
        (577543 call = tmp[577538] call_tmp[797316])
        unknown call_tmp[797321] "expr temp" "maybe param" "maybe type" "temp"
        (797324 'move' call_tmp[797321](577547 call tmp[577513] 1))
        (577554 call = tmp[577549] call_tmp[797321])
        (552327 'end of statement' gcd[120164] x[120160] st1[119796] st2[119846])
        unknown call_tmp[797326] "expr temp" "maybe param" "maybe type" "temp"
        (797329 'move' call_tmp[797326](120194 call / st1[119796] gcd[120164]))
        unknown call_tmp[797331] "expr temp" "maybe param" "maybe type" "temp"
        (797334 'move' call_tmp[797331](120192 call * call_tmp[797326] st2[119846]))
        (120189 call = newStride[120154] call_tmp[797331])
        (552332 'end of statement' newStride[120154] st1[119796] gcd[120164] st2[119846])
        (120199 call = newAbsStride[120150] newStride[120154])
        (552337 'end of statement' newAbsStride[120150] newStride[120154])
      }
      unknown tmp[485376] "maybe param" "temp"
      unknown tmp[485397] "maybe param" "temp"
      (485408 'move' tmp[485397](120226 call(120223 call (partial) hasPositiveStride _mt[203] this[119571])))
      unknown call_tmp[797338] "expr temp" "maybe param" "maybe type" "temp"
      (797341 'move' call_tmp[797338](485410 call _cond_invalid tmp[485397]))
      if call_tmp[797338]
      {
        (485413 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[675985] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[675986] "maybe param" "temp"
      unknown call_tmp[797343] "expr temp" "maybe param" "maybe type" "temp"
      (797346 'move' call_tmp[797343](485398 call isTrue tmp[485397]))
      (675991 'move' tmp[675986](675989 call _cond_test call_tmp[797343]))
      if tmp[675986]
      {
        unknown tmp[675993] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[797350] "expr temp" "maybe param" "maybe type" "temp"
        (797353 'move' call_tmp[797350](120231 call(120228 call (partial) hasNegativeStride _mt[203] other[119577])))
        (675995 'move' tmp[675993](485401 call isTrue call_tmp[797350]))
        (676000 'move' tmp[675985](675997 '_paramFoldLogical' tmp[675986] tmp[675993]))
      }
      {
        (676005 'move' tmp[675985](676002 '_paramFoldLogical' tmp[675986] 0))
      }
      (485387 'move' tmp[485376] tmp[675985])
      unknown call_tmp[797355] "expr temp" "maybe param" "maybe type" "temp"
      (797358 'move' call_tmp[797355](485389 call _cond_invalid tmp[485376]))
      if call_tmp[797355]
      {
        (485392 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[676039] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[676040] "maybe param" "temp"
      unknown call_tmp[797360] "expr temp" "maybe param" "maybe type" "temp"
      (797363 'move' call_tmp[797360](485377 call isTrue tmp[485376]))
      (676045 'move' tmp[676040](676043 call _cond_test call_tmp[797360]))
      if tmp[676040]
      {
        (676050 'move' tmp[676039](676047 '_paramFoldLogical' tmp[676040] 1))
      }
      {
        unknown tmp[485418] "maybe param" "temp"
        (485429 'move' tmp[485418](120238 call(120235 call (partial) hasNegativeStride _mt[203] this[119571])))
        unknown call_tmp[797367] "expr temp" "maybe param" "maybe type" "temp"
        (797370 'move' call_tmp[797367](485431 call _cond_invalid tmp[485418]))
        if call_tmp[797367]
        {
          (485434 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[676012] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[676013] "maybe param" "temp"
        unknown call_tmp[797372] "expr temp" "maybe param" "maybe type" "temp"
        (797375 'move' call_tmp[797372](485419 call isTrue tmp[485418]))
        (676018 'move' tmp[676013](676016 call _cond_test call_tmp[797372]))
        if tmp[676013]
        {
          unknown tmp[676020] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[797379] "expr temp" "maybe param" "maybe type" "temp"
          (797382 'move' call_tmp[797379](120243 call(120240 call (partial) hasPositiveStride _mt[203] other[119577])))
          (676022 'move' tmp[676020](485422 call isTrue call_tmp[797379]))
          (676027 'move' tmp[676012](676024 '_paramFoldLogical' tmp[676013] tmp[676020]))
        }
        {
          (676032 'move' tmp[676012](676029 '_paramFoldLogical' tmp[676013] 0))
        }
        unknown tmp[676052] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (676054 'move' tmp[676052](485381 call isTrue tmp[676012]))
        (676059 'move' tmp[676039](676056 '_paramFoldLogical' tmp[676040] tmp[676052]))
      }
      unknown call_tmp[797384] "expr temp" "maybe param" "maybe type" "temp"
      (797387 'move' call_tmp[797384](120244 call _cond_test tmp[676039]))
      if call_tmp[797384]
      {
        unknown call_tmp[797389] "expr temp" "maybe param" "maybe type" "temp"
        (797392 'move' call_tmp[797389](120214 call - newStride[120154]))
        (120211 call = newStride[120154] call_tmp[797389])
        (552342 'end of statement' newStride[120154])
      }
    }
    {
      unknown call_tmp[797396] "expr temp" "maybe param" "maybe type" "temp"
      (797399 'move' call_tmp[797396](120256 call(120253 call (partial) hasPosNegUnitStride _mt[203] this[119571])))
      (120251 call compilerAssert call_tmp[797396])
      (552344 'end of statement')
      unknown call_tmp[797403] "expr temp" "maybe param" "maybe type" "temp"
      (797406 'move' call_tmp[797403](120268 call(120265 call (partial) isNegOne _mt[203] newStrideKind[120141])))
      unknown call_tmp[797408] "expr temp" "maybe param" "maybe type" "temp"
      (797411 'move' call_tmp[797408](120269 call _cond_test call_tmp[797403]))
      if call_tmp[797408]
      {
        unknown call_tmp[797413] "expr temp" "maybe param" "maybe type" "temp"
        (797416 'move' call_tmp[797413](120260 call - 1))
        (120257 call = newStride[120154] call_tmp[797413])
        (552345 'end of statement' newStride[120154])
      }
    }
    unknown call_tmp[797420] "expr temp" "maybe param" "maybe type" "temp"
    (797423 'move' call_tmp[797420](428162 call idxType _mt[203] this[119571]))
    unknown call_tmp[797427] "expr temp" "maybe param" "maybe type" "temp"
    (797430 'move' call_tmp[797427](428171 call strType _mt[203] this[119571]))
    unknown call_tmp[797432] "expr temp" "maybe param" "maybe type" "temp"
    (797435 'move' call_tmp[797432](120296 call : 0 call_tmp[797427]))
    unknown call_tmp[797437] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (797440 'move' call_tmp[797437](1000097 'new' range[240](?) call_tmp[797420] newBoundKind[119607] newStrideKind[120141] newlo[120099] newhi[120110] newStride[120154] call_tmp[797432]))
    unknown result[120286] "dead at end of block" "insert auto destroy"
    (645460 'init var' result[120286] call_tmp[797437])
    (120301 'end of statement' lo1[119762] lo2[119806] hi1[119779] hi2[119826] st1[119796] newlo[120099] newhi[120110] newStride[120154])
    unknown tmp[485523] "maybe param" "temp"
    unknown call_tmp[797444] "expr temp" "maybe param" "maybe type" "temp"
    (797447 'move' call_tmp[797444](120727 call(120724 call (partial) isPosNegOne _mt[203] newStrideKind[120141])))
    (485534 'move' tmp[485523](120721 call ! call_tmp[797444]))
    unknown call_tmp[797449] "expr temp" "maybe param" "maybe type" "temp"
    (797452 'move' call_tmp[797449](485536 call _cond_invalid tmp[485523]))
    if call_tmp[797449]
    {
      (485539 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[676066] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[676067] "maybe param" "temp"
    unknown call_tmp[797454] "expr temp" "maybe param" "maybe type" "temp"
    (797457 'move' call_tmp[797454](485524 call isTrue tmp[485523]))
    (676072 'move' tmp[676067](676070 call _cond_test call_tmp[797454]))
    if tmp[676067]
    {
      unknown tmp[676074] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[797459] "expr temp" "maybe param" "maybe type" "temp"
      (797462 'move' call_tmp[797459](120728 call > newAbsStride[120150] 1))
      (676076 'move' tmp[676074](485527 call isTrue call_tmp[797459]))
      (676081 'move' tmp[676066](676078 '_paramFoldLogical' tmp[676067] tmp[676074]))
    }
    {
      (676086 'move' tmp[676066](676083 '_paramFoldLogical' tmp[676067] 0))
    }
    unknown call_tmp[797464] "expr temp" "maybe param" "maybe type" "temp"
    (797467 'move' call_tmp[797464](120732 call _cond_test tmp[676066]))
    if call_tmp[797464]
    {
      unknown call_tmp[797471] "expr temp" "maybe param" "maybe type" "temp"
      (797474 'move' call_tmp[797471](120310 call alignment _mt[203] this[119571]))
      unknown call_tmp[797476] "expr temp" "maybe param" "maybe type" "temp"
      (797479 'move' call_tmp[797476](120308 call chpl__idxToInt call_tmp[797471]))
      unknown call_tmp[797481] "maybe param" "maybe type" "temp"
      (797484 'move' call_tmp[797481](120305 call : call_tmp[797476] int(64)[10]))
      unknown al1[120304] "dead at end of block" "insert auto destroy"
      (645462 'init var' al1[120304] call_tmp[797481])
      (120315 'end of statement')
      unknown call_tmp[797488] "expr temp" "maybe param" "maybe type" "temp"
      (797491 'move' call_tmp[797488](120323 call alignment _mt[203] other[119577]))
      unknown call_tmp[797493] "expr temp" "maybe param" "maybe type" "temp"
      (797496 'move' call_tmp[797493](120321 call chpl__idxToInt call_tmp[797488]))
      unknown call_tmp[797498] "maybe param" "maybe type" "temp"
      (797501 'move' call_tmp[797498](120318 call : call_tmp[797493] int(64)[10]))
      unknown al2[120317] "dead at end of block" "insert auto destroy"
      (645464 'init var' al2[120317] call_tmp[797498])
      (120328 'end of statement')
      unknown newAlignmentIsInAl2[120330] "dead at end of block" "insert auto destroy"
      (645466 'init var' newAlignmentIsInAl2[120330] 0)
      (120333 'end of statement')
      unknown call_tmp[797505] "expr temp" "maybe param" "maybe type" "temp"
      (797508 'move' call_tmp[797505](120486 call(120483 call (partial) isAligned _mt[203] other[119577])))
      unknown call_tmp[797510] "expr temp" "maybe param" "maybe type" "temp"
      (797513 'move' call_tmp[797510](120480 call ! call_tmp[797505]))
      unknown call_tmp[797515] "expr temp" "maybe param" "maybe type" "temp"
      (797518 'move' call_tmp[797515](120487 call _cond_test call_tmp[797510]))
      if call_tmp[797515]
      {
        (120335 call = al2[120317] al1[120304])
        (552351 'end of statement' al2[120317] al1[120304])
        unknown call_tmp[797520] "expr temp" "maybe param" "maybe type" "temp"
        (797523 'move' call_tmp[797520](120344 call < al2[120317] 0))
        unknown call_tmp[797525] "expr temp" "maybe param" "maybe type" "temp"
        (797528 'move' call_tmp[797525](120348 call _cond_test call_tmp[797520]))
        if call_tmp[797525]
        {
          (120339 call += al2[120317] st1[119796])
          (552354 'end of statement' al2[120317] st1[119796])
        }
        unknown call_tmp[797530] "expr temp" "maybe param" "maybe type" "temp"
        (797533 'move' call_tmp[797530](120472 call > st2[119846] gcd[120164]))
        unknown call_tmp[797535] "expr temp" "maybe param" "maybe type" "temp"
        (797538 'move' call_tmp[797535](120476 call _cond_test call_tmp[797530]))
        if call_tmp[797535]
        {
          unknown tmp[485460] "maybe param" "temp"
          (485471 'move' tmp[485460](120436 call(120433 call (partial) hasLowBound _mt[203] result[120286])))
          unknown call_tmp[797542] "expr temp" "maybe param" "maybe type" "temp"
          (797545 'move' call_tmp[797542](485473 call _cond_invalid tmp[485460]))
          if call_tmp[797542]
          {
            (485476 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[676093] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[676094] "maybe param" "temp"
          unknown call_tmp[797547] "expr temp" "maybe param" "maybe type" "temp"
          (797550 'move' call_tmp[797547](485461 call isTrue tmp[485460]))
          (676099 'move' tmp[676094](676097 call _cond_test call_tmp[797547]))
          if tmp[676094]
          {
            unknown tmp[676101] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[797554] "expr temp" "maybe param" "maybe type" "temp"
            (797557 'move' call_tmp[797554](120441 call(120438 call (partial) hasPositiveStride _mt[203] result[120286])))
            (676103 'move' tmp[676101](485464 call isTrue call_tmp[797554]))
            (676108 'move' tmp[676093](676105 '_paramFoldLogical' tmp[676094] tmp[676101]))
          }
          {
            (676113 'move' tmp[676093](676110 '_paramFoldLogical' tmp[676094] 0))
          }
          unknown call_tmp[797559] "expr temp" "maybe param" "maybe type" "temp"
          (797562 'move' call_tmp[797559](120442 call _cond_test tmp[676093]))
          if call_tmp[797559]
          {
            unknown call_tmp[797564] "expr temp" "maybe param" "maybe type" "temp"
            (797567 'move' call_tmp[797564](120374 call - newlo[120099] al1[120304]))
            unknown call_tmp[797569] "expr temp" "maybe param" "maybe type" "temp"
            (797572 'move' call_tmp[797569](120372 call % call_tmp[797564] st1[119796]))
            unknown call_tmp[797574] "expr temp" "maybe param" "maybe type" "temp"
            (797577 'move' call_tmp[797574](120370 call == call_tmp[797569] 0))
            unknown call_tmp[797579] "expr temp" "maybe param" "maybe type" "temp"
            (797582 'move' call_tmp[797579](120380 call _cond_test call_tmp[797574]))
            if call_tmp[797579]
            {
              unknown call_tmp[797584] "expr temp" "maybe param" "maybe type" "temp"
              (797587 'move' call_tmp[797584](120361 call % newlo[120099] newAbsStride[120150]))
              unknown call_tmp[797589] "expr temp" "maybe param" "maybe type" "temp"
              (797592 'move' call_tmp[797589](120359 call : call_tmp[797584] int(64)[10]))
              (120356 call = al2[120317] call_tmp[797589])
              (552358 'end of statement' al2[120317] newlo[120099] newAbsStride[120150])
              (120366 call = newAlignmentIsInAl2[120330] 1)
              (552362 'end of statement' newAlignmentIsInAl2[120330])
            }
          }
          {
            unknown tmp[485439] "maybe param" "temp"
            (485450 'move' tmp[485439](120420 call(120417 call (partial) hasHighBound _mt[203] result[120286])))
            unknown call_tmp[797596] "expr temp" "maybe param" "maybe type" "temp"
            (797599 'move' call_tmp[797596](485452 call _cond_invalid tmp[485439]))
            if call_tmp[797596]
            {
              (485455 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[676120] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[676121] "maybe param" "temp"
            unknown call_tmp[797601] "expr temp" "maybe param" "maybe type" "temp"
            (797604 'move' call_tmp[797601](485440 call isTrue tmp[485439]))
            (676126 'move' tmp[676121](676124 call _cond_test call_tmp[797601]))
            if tmp[676121]
            {
              unknown tmp[676128] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[797608] "expr temp" "maybe param" "maybe type" "temp"
              (797611 'move' call_tmp[797608](120425 call(120422 call (partial) hasNegativeStride _mt[203] result[120286])))
              (676130 'move' tmp[676128](485443 call isTrue call_tmp[797608]))
              (676135 'move' tmp[676120](676132 '_paramFoldLogical' tmp[676121] tmp[676128]))
            }
            {
              (676140 'move' tmp[676120](676137 '_paramFoldLogical' tmp[676121] 0))
            }
            unknown call_tmp[797613] "expr temp" "maybe param" "maybe type" "temp"
            (797616 'move' call_tmp[797613](120426 call _cond_test tmp[676120]))
            if call_tmp[797613]
            {
              unknown call_tmp[797618] "expr temp" "maybe param" "maybe type" "temp"
              (797621 'move' call_tmp[797618](120404 call - newhi[120110] al1[120304]))
              unknown call_tmp[797623] "expr temp" "maybe param" "maybe type" "temp"
              (797626 'move' call_tmp[797623](120402 call % call_tmp[797618] st1[119796]))
              unknown call_tmp[797628] "expr temp" "maybe param" "maybe type" "temp"
              (797631 'move' call_tmp[797628](120400 call == call_tmp[797623] 0))
              unknown call_tmp[797633] "expr temp" "maybe param" "maybe type" "temp"
              (797636 'move' call_tmp[797633](120410 call _cond_test call_tmp[797628]))
              if call_tmp[797633]
              {
                unknown call_tmp[797638] "expr temp" "maybe param" "maybe type" "temp"
                (797641 'move' call_tmp[797638](120391 call % newhi[120110] newAbsStride[120150]))
                unknown call_tmp[797643] "expr temp" "maybe param" "maybe type" "temp"
                (797646 'move' call_tmp[797643](120389 call : call_tmp[797638] int(64)[10]))
                (120386 call = al2[120317] call_tmp[797643])
                (552365 'end of statement' al2[120317] newhi[120110] newAbsStride[120150])
                (120396 call = newAlignmentIsInAl2[120330] 1)
                (552369 'end of statement' newAlignmentIsInAl2[120330])
              }
            }
          }
          unknown tmp[485481] "maybe param" "temp"
          (485492 'move' tmp[485481] 0)
          unknown call_tmp[797648] "expr temp" "maybe param" "maybe type" "temp"
          (797651 'move' call_tmp[797648](485494 call _cond_invalid tmp[485481]))
          if call_tmp[797648]
          {
            (485497 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[676147] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[676148] "maybe param" "temp"
          unknown call_tmp[797653] "expr temp" "maybe param" "maybe type" "temp"
          (797656 'move' call_tmp[797653](485482 call isTrue tmp[485481]))
          (676153 'move' tmp[676148](676151 call _cond_test call_tmp[797653]))
          if tmp[676148]
          {
            unknown tmp[676155] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[797658] "expr temp" "maybe param" "maybe type" "temp"
            (797661 'move' call_tmp[797658](120464 call ! newAlignmentIsInAl2[120330]))
            (676157 'move' tmp[676155](485485 call isTrue call_tmp[797658]))
            (676162 'move' tmp[676147](676159 '_paramFoldLogical' tmp[676148] tmp[676155]))
          }
          {
            (676167 'move' tmp[676147](676164 '_paramFoldLogical' tmp[676148] 0))
          }
          unknown call_tmp[797663] "expr temp" "maybe param" "maybe type" "temp"
          (797666 'move' call_tmp[797663](120467 call _cond_test tmp[676147]))
          if call_tmp[797663]
          {
            (120448 call warning "slicing '" this[119571] "' with the unaligned range '" other[119577] "' is unstable w.r.t. the choice of alignment")
          }
        }
      }
      const g[120492] "dead at end of block" "const" "insert auto destroy"
      (645468 'init var' g[120492] gcd[120164])
      (120495 'end of statement' gcd[120164])
      unknown call_tmp[797668] "expr temp" "maybe param" "maybe type" "temp"
      (797671 'move' call_tmp[797668](120714 call _cond_test newAlignmentIsInAl2[120330]))
      if call_tmp[797668]
      {
        unknown call_tmp[797673] "expr temp" "maybe param" "maybe type" "temp"
        (797676 'move' call_tmp[797673](120502 call < al2[120317] 0))
        unknown call_tmp[797678] "expr temp" "maybe param" "maybe type" "temp"
        (797681 'move' call_tmp[797678](120506 call _cond_test call_tmp[797673]))
        if call_tmp[797678]
        {
          (120497 call += al2[120317] newAbsStride[120150])
          (552374 'end of statement' al2[120317] newAbsStride[120150])
        }
        unknown call_tmp[797685] "expr temp" "maybe param" "maybe type" "temp"
        (797688 'move' call_tmp[797685](120514 call _alignment _mt[203] result[120286]))
        unknown call_tmp[797692] "expr temp" "maybe param" "maybe type" "temp"
        (797695 'move' call_tmp[797692](428205 call strType _mt[203] this[119571]))
        unknown call_tmp[797697] "expr temp" "maybe param" "maybe type" "temp"
        (797700 'move' call_tmp[797697](120517 call : al2[120317] call_tmp[797692]))
        (120511 call = call_tmp[797685] call_tmp[797697])
        (552377 'end of statement' result[120286] al2[120317])
      }
      {
        unknown call_tmp[797702] "expr temp" "maybe param" "maybe type" "temp"
        (797705 'move' call_tmp[797702](120703 call - al2[120317] al1[120304]))
        unknown call_tmp[797707] "expr temp" "maybe param" "maybe type" "temp"
        (797710 'move' call_tmp[797707](120701 call % call_tmp[797702] g[120492]))
        unknown call_tmp[797712] "expr temp" "maybe param" "maybe type" "temp"
        (797715 'move' call_tmp[797712](120699 call != call_tmp[797707] 0))
        unknown call_tmp[797717] "expr temp" "maybe param" "maybe type" "temp"
        (797720 'move' call_tmp[797717](120709 call _cond_test call_tmp[797712]))
        if call_tmp[797717]
        {
          unknown tmp[485502] "maybe param" "temp"
          (485513 'move' tmp[485502] 1)
          unknown call_tmp[797722] "expr temp" "maybe param" "maybe type" "temp"
          (797725 'move' call_tmp[797722](485515 call _cond_invalid tmp[485502]))
          if call_tmp[797722]
          {
            (485518 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[676174] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[676175] "maybe param" "temp"
          unknown call_tmp[797727] "expr temp" "maybe param" "maybe type" "temp"
          (797730 'move' call_tmp[797727](485503 call isTrue tmp[485502]))
          (676180 'move' tmp[676175](676178 call _cond_test call_tmp[797727]))
          if tmp[676175]
          {
            unknown tmp[676182] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[797734] "expr temp" "maybe param" "maybe type" "temp"
            (797737 'move' call_tmp[797734](120537 call bounds _mt[203] result[120286]))
            unknown call_tmp[797739] "expr temp" "maybe param" "maybe type" "temp"
            (797742 'move' call_tmp[797739](120534 call != call_tmp[797734] both[107114]))
            (676184 'move' tmp[676182](485506 call isTrue call_tmp[797739]))
            (676189 'move' tmp[676174](676186 '_paramFoldLogical' tmp[676175] tmp[676182]))
          }
          {
            (676194 'move' tmp[676174](676191 '_paramFoldLogical' tmp[676175] 0))
          }
          unknown call_tmp[797744] "expr temp" "maybe param" "maybe type" "temp"
          (797747 'move' call_tmp[797744](120544 call _cond_test tmp[676174]))
          if call_tmp[797744]
          {
            (120526 call boundsCheckHalt module=[222] HaltWrappers[518] "could not represent range slice - it needs to be empty, but the slice type is not bounded")
            (401993 'referenced modules list' HaltWrappers[518])
          }
          unknown call_tmp[797751] "expr temp" "maybe param" "maybe type" "temp"
          (797754 'move' call_tmp[797751](120552 call _low _mt[203] result[120286]))
          unknown call_tmp[797758] "expr temp" "maybe param" "maybe type" "temp"
          (797761 'move' call_tmp[797758](428211 call idxType _mt[203] this[119571]))
          unknown call_tmp[797763] "expr temp" "maybe param" "maybe type" "temp"
          (797766 'move' call_tmp[797763](120556 call chpl__defaultLowBound call_tmp[797758] newBoundKind[119607]))
          (120549 call = call_tmp[797751] call_tmp[797763])
          (552382 'end of statement' result[120286])
          unknown call_tmp[797770] "expr temp" "maybe param" "maybe type" "temp"
          (797773 'move' call_tmp[797770](120562 call _high _mt[203] result[120286]))
          unknown call_tmp[797777] "expr temp" "maybe param" "maybe type" "temp"
          (797780 'move' call_tmp[797777](428217 call idxType _mt[203] this[119571]))
          unknown call_tmp[797782] "expr temp" "maybe param" "maybe type" "temp"
          (797785 'move' call_tmp[797782](120566 call chpl__defaultHighBound call_tmp[797777] newBoundKind[119607]))
          (120559 call = call_tmp[797770] call_tmp[797782])
          (552384 'end of statement' result[120286])
          unknown tmp[676201] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[676202] "maybe param" "temp"
          unknown call_tmp[797789] "expr temp" "maybe param" "maybe type" "temp"
          (797792 'move' call_tmp[797789](120581 call(120578 call (partial) hasPositiveStride _mt[203] this[119571])))
          (676207 'move' tmp[676202](676205 call _cond_test call_tmp[797789]))
          if tmp[676202]
          {
            unknown tmp[676209] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (676211 'move' tmp[676209](120583 call _low _mt[203] result[120286]))
            (676216 'move' tmp[676201](676213 '_paramFoldLogical' tmp[676202] tmp[676209]))
          }
          {
            unknown tmp[676218] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (676220 'move' tmp[676218](120587 call _high _mt[203] result[120286]))
            (676225 'move' tmp[676201](676222 '_paramFoldLogical' tmp[676202] tmp[676218]))
          }
          unknown call_tmp[797800] "expr temp" "maybe param" "maybe type" "temp"
          (797803 'move' call_tmp[797800](120572 call _alignment _mt[203] result[120286]))
          unknown call_tmp[797807] "expr temp" "maybe param" "maybe type" "temp"
          (797810 'move' call_tmp[797807](428222 call strType _mt[203] this[119571]))
          unknown call_tmp[797812] "expr temp" "maybe param" "maybe type" "temp"
          (797815 'move' call_tmp[797812](120575 call : tmp[676201] call_tmp[797807]))
          (120569 call = call_tmp[797800] call_tmp[797812])
          (552386 'end of statement' result[120286])
        }
        {
          unknown call_tmp[797817] "expr temp" "maybe param" "maybe type" "temp"
          (797820 'move' call_tmp[797817](120599 call - al2[120317] al1[120304]))
          unknown call_tmp[797822] "maybe param" "maybe type" "temp"
          (797825 'move' call_tmp[797822](120597 call * call_tmp[797817] x[120160]))
          unknown offset[120596] "dead at end of block" "insert auto destroy"
          (645470 'init var' offset[120596] call_tmp[797822])
          (120605 'end of statement' al2[120317] al1[120304] x[120160])
          unknown call_tmp[797829] "expr temp" "maybe param" "maybe type" "temp"
          (797832 'move' call_tmp[797829](120609 call _alignment _mt[203] result[120286]))
          unknown call_tmp[797836] "expr temp" "maybe param" "maybe type" "temp"
          (797839 'move' call_tmp[797836](428230 call strType _mt[203] this[119571]))
          unknown call_tmp[797841] "expr temp" "maybe param" "maybe type" "temp"
          (797844 'move' call_tmp[797841](120614 call : al1[120304] call_tmp[797836]))
          unknown call_tmp[797848] "expr temp" "maybe param" "maybe type" "temp"
          (797851 'move' call_tmp[797848](428235 call strType _mt[203] this[119571]))
          unknown call_tmp[797853] "expr temp" "maybe param" "maybe type" "temp"
          (797856 'move' call_tmp[797853](120622 call : offset[120596] call_tmp[797848]))
          unknown call_tmp[797858] "expr temp" "maybe param" "maybe type" "temp"
          (797861 'move' call_tmp[797858](120620 call * call_tmp[797853] st1[119796]))
          unknown call_tmp[797863] "expr temp" "maybe param" "maybe type" "temp"
          (797866 'move' call_tmp[797863](120618 call / call_tmp[797858] g[120492]))
          unknown call_tmp[797868] "expr temp" "maybe param" "maybe type" "temp"
          (797871 'move' call_tmp[797868](120612 call + call_tmp[797841] call_tmp[797863]))
          (120606 call = call_tmp[797829] call_tmp[797868])
          (552391 'end of statement' result[120286] al1[120304] offset[120596] st1[119796] g[120492])
          unknown call_tmp[797875] "expr temp" "maybe param" "maybe type" "temp"
          (797878 'move' call_tmp[797875](120690 call _alignment _mt[203] result[120286]))
          unknown call_tmp[797880] "expr temp" "maybe param" "maybe type" "temp"
          (797883 'move' call_tmp[797880](120687 call < call_tmp[797875] 0))
          unknown call_tmp[797885] "expr temp" "maybe param" "maybe type" "temp"
          (797888 'move' call_tmp[797885](120694 call _cond_test call_tmp[797880]))
          if call_tmp[797885]
          {
            unknown call_tmp[797892] "expr temp" "maybe param" "maybe type" "temp"
            (797895 'move' call_tmp[797892](120632 call _alignment _mt[203] result[120286]))
            (120629 call += call_tmp[797892] newAbsStride[120150])
            (552397 'end of statement' result[120286] newAbsStride[120150])
            unknown call_tmp[797897] "expr temp" "maybe param" "maybe type" "temp"
            (797900 'move' call_tmp[797897](120647 call _cond_test 1))
            if call_tmp[797897]
            {
              unknown call_tmp[797904] "expr temp" "maybe param" "maybe type" "temp"
              (797907 'move' call_tmp[797904](120641 call _alignment _mt[203] result[120286]))
              unknown call_tmp[797909] "expr temp" "maybe param" "maybe type" "temp"
              (797912 'move' call_tmp[797909](120638 call >= call_tmp[797904] 0))
              (120637 call assert call_tmp[797909])
              (552400 'end of statement' result[120286])
            }
          }
          {
            unknown call_tmp[797916] "expr temp" "maybe param" "maybe type" "temp"
            (797919 'move' call_tmp[797916](120679 call _alignment _mt[203] result[120286]))
            unknown call_tmp[797921] "expr temp" "maybe param" "maybe type" "temp"
            (797924 'move' call_tmp[797921](120676 call >= call_tmp[797916] newAbsStride[120150]))
            unknown call_tmp[797926] "expr temp" "maybe param" "maybe type" "temp"
            (797929 'move' call_tmp[797926](120683 call _cond_test call_tmp[797921]))
            if call_tmp[797926]
            {
              unknown call_tmp[797933] "expr temp" "maybe param" "maybe type" "temp"
              (797936 'move' call_tmp[797933](120656 call _alignment _mt[203] result[120286]))
              (120653 call -= call_tmp[797933] newAbsStride[120150])
              (552402 'end of statement' result[120286] newAbsStride[120150])
              unknown call_tmp[797938] "expr temp" "maybe param" "maybe type" "temp"
              (797941 'move' call_tmp[797938](120671 call _cond_test 1))
              if call_tmp[797938]
              {
                unknown call_tmp[797945] "expr temp" "maybe param" "maybe type" "temp"
                (797948 'move' call_tmp[797945](120665 call _alignment _mt[203] result[120286]))
                unknown call_tmp[797950] "expr temp" "maybe param" "maybe type" "temp"
                (797953 'move' call_tmp[797950](120662 call < call_tmp[797945] newAbsStride[120150]))
                (120661 call assert call_tmp[797950])
                (552405 'end of statement' result[120286] newAbsStride[120150])
              }
            }
          }
        }
      }
    }
    (605253 'move' ret[605248](605252 'deref' result[120286]))
    gotoReturn _end_this[605246] _end_this[605246]
    (552408 'end of statement' result[120286])
    label _end_this[605246]
    (605250 return ret[605248])
  }
  function chpl_count_help[120740](arg r[120745]:range[240](?), arg i[120748]:_any[141](?)) : _unknown[42] "last resort" "no return value for void"
  {
    (120762 call compilerError "count operator is not defined for unbounded ranges")
    (605257 return _void[46])
  }
  where {
    unknown call_tmp[797957] "expr temp" "maybe param" "maybe type" "temp"
    (797960 'move' call_tmp[797957](120753 call bounds _mt[203] r[120745]))
    (120750 call == call_tmp[797957] neither[107120])
  }
  function chpl_count_help[120769](arg r[120771]:_any[141](?), arg count[120774]:integral[159](?)) : _unknown[42]
  {
    unknown ret[605313] "RVV" "temp"
    unknown tmp[485544] "maybe param" "temp"
    (485555 'move' tmp[485544] 1)
    unknown call_tmp[797962] "expr temp" "maybe param" "maybe type" "temp"
    (797965 'move' call_tmp[797962](485557 call _cond_invalid tmp[485544]))
    if call_tmp[797962]
    {
      (485560 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[676232] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[676233] "maybe param" "temp"
    unknown call_tmp[797967] "expr temp" "maybe param" "maybe type" "temp"
    (797970 'move' call_tmp[797967](485545 call isTrue tmp[485544]))
    (676238 'move' tmp[676233](676236 call _cond_test call_tmp[797967]))
    if tmp[676233]
    {
      unknown tmp[676240] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[797974] "expr temp" "maybe param" "maybe type" "temp"
      (797977 'move' call_tmp[797974](120793 call(120790 call (partial) isAligned _mt[203] r[120771])))
      unknown call_tmp[797979] "expr temp" "maybe param" "maybe type" "temp"
      (797982 'move' call_tmp[797979](120787 call ! call_tmp[797974]))
      (676242 'move' tmp[676240](485548 call isTrue call_tmp[797979]))
      (676247 'move' tmp[676232](676244 '_paramFoldLogical' tmp[676233] tmp[676240]))
    }
    {
      (676252 'move' tmp[676232](676249 '_paramFoldLogical' tmp[676233] 0))
    }
    unknown call_tmp[797984] "expr temp" "maybe param" "maybe type" "temp"
    (797987 'move' call_tmp[797984](120794 call _cond_test tmp[676232]))
    if call_tmp[797984]
    {
      (120779 call boundsCheckHalt "count -- Cannot count off elements from a range which is ambiguously aligned.")
    }
    unknown resultType[120800] "dead at end of block" "insert auto destroy" "type variable"
    (645476 'move' resultType[120800](645473 call chpl_integralIdxType _mt[203] r[120771]))
    unknown strType[120807] "dead at end of block" "insert auto destroy" "type variable"
    (645481 'move' strType[120807](645479 call chpl__rangeStrideType resultType[120800]))
    function absSameType[120812](arg r[120814]:_any[141](?), arg resultType[120816]:_any[141](?)) : _unknown[42]
    {
      unknown ret[605261] "RVV" "temp"
      unknown call_tmp[797993] "expr temp" "maybe param" "maybe type" "temp"
      (797996 'move' call_tmp[797993](120843 call(120840 call (partial) hasNegativeStride _mt[203] r[120814])))
      unknown call_tmp[797998] "expr temp" "maybe param" "maybe type" "temp"
      (798001 'move' call_tmp[797998](120844 call _cond_test call_tmp[797993]))
      if call_tmp[797998]
      {
        unknown call_tmp[798005] "expr temp" "maybe param" "maybe type" "temp"
        (798008 'move' call_tmp[798005](120826 call stride _mt[203] r[120814]))
        unknown call_tmp[798010] "expr temp" "maybe param" "maybe type" "temp"
        (798013 'move' call_tmp[798010](120823 call - call_tmp[798005]))
        unknown call_tmp[798015] "expr temp" "maybe param" "maybe type" "temp"
        (798018 'move' call_tmp[798015](120821 call : call_tmp[798010] resultType[120816]))
        (605266 'move' ret[605261](605265 'deref' call_tmp[798015]))
        gotoReturn _end_absSameType[605259] _end_absSameType[605259]
      }
      {
        unknown call_tmp[798022] "expr temp" "maybe param" "maybe type" "temp"
        (798025 'move' call_tmp[798022](120835 call stride _mt[203] r[120814]))
        unknown call_tmp[798027] "expr temp" "maybe param" "maybe type" "temp"
        (798030 'move' call_tmp[798027](120832 call : call_tmp[798022] resultType[120816]))
        (605271 'move' ret[605261](605270 'deref' call_tmp[798027]))
        gotoReturn _end_absSameType[605259] _end_absSameType[605259]
      }
      label _end_absSameType[605259]
      (605263 return ret[605261])
    }
    unknown call_tmp[798032] "expr temp" "maybe param" "maybe type" "temp"
    (798035 'move' call_tmp[798032](121014 call == count[120774] 0))
    unknown call_tmp[798037] "expr temp" "maybe param" "maybe type" "temp"
    (798040 'move' call_tmp[798037](121018 call _cond_test call_tmp[798032]))
    if call_tmp[798037]
    {
      unknown call_tmp[798044] "expr temp" "maybe param" "maybe type" "temp"
      (798047 'move' call_tmp[798044](121008 call(121005 call (partial) hasLowBound _mt[203] r[120771])))
      unknown call_tmp[798049] "expr temp" "maybe param" "maybe type" "temp"
      (798052 'move' call_tmp[798049](121009 call _cond_test call_tmp[798044]))
      if call_tmp[798049]
      {
        unknown call_tmp[798056] "expr temp" "maybe param" "maybe type" "temp"
        (798059 'move' call_tmp[798056](120857 call idxType _mt[203] r[120771]))
        unknown call_tmp[798063] "expr temp" "maybe param" "maybe type" "temp"
        (798066 'move' call_tmp[798063](120867 call strides _mt[203] r[120771]))
        unknown call_tmp[798070] "expr temp" "maybe param" "maybe type" "temp"
        (798073 'move' call_tmp[798070](120872 call _low _mt[203] r[120771]))
        unknown call_tmp[798077] "expr temp" "maybe param" "maybe type" "temp"
        (798080 'move' call_tmp[798077](120879 call _low _mt[203] r[120771]))
        unknown call_tmp[798082] "expr temp" "maybe param" "maybe type" "temp"
        (798085 'move' call_tmp[798082](120883 call absSameType r[120771] resultType[120800]))
        unknown call_tmp[798087] "expr temp" "maybe param" "maybe type" "temp"
        (798090 'move' call_tmp[798087](120876 call - call_tmp[798077] call_tmp[798082]))
        unknown call_tmp[798094] "expr temp" "maybe param" "maybe type" "temp"
        (798097 'move' call_tmp[798094](120888 call stride _mt[203] r[120771]))
        unknown call_tmp[798101] "expr temp" "maybe param" "maybe type" "temp"
        (798104 'move' call_tmp[798101](120893 call _alignment _mt[203] r[120771]))
        unknown call_tmp[798106] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (798109 'move' call_tmp[798106](1000098 'new' range[240](?)(idxType = call_tmp[798056])(bounds = both[107114])(strides = call_tmp[798063])(_low = call_tmp[798070])(_high = call_tmp[798087])(_stride = call_tmp[798094])(alignmentValue = call_tmp[798101])))
        (605318 'move' ret[605313](605317 'deref' call_tmp[798106]))
        gotoReturn _end_chpl_count_help[605311] _end_chpl_count_help[605311]
        (552416 'end of statement' resultType[120800])
      }
      {
        unknown call_tmp[798113] "expr temp" "maybe param" "maybe type" "temp"
        (798116 'move' call_tmp[798113](120999 call(120996 call (partial) hasHighBound _mt[203] r[120771])))
        unknown call_tmp[798118] "expr temp" "maybe param" "maybe type" "temp"
        (798121 'move' call_tmp[798118](121000 call _cond_test call_tmp[798113]))
        if call_tmp[798118]
        {
          unknown call_tmp[798125] "expr temp" "maybe param" "maybe type" "temp"
          (798128 'move' call_tmp[798125](120903 call idxType _mt[203] r[120771]))
          unknown call_tmp[798132] "expr temp" "maybe param" "maybe type" "temp"
          (798135 'move' call_tmp[798132](120913 call strides _mt[203] r[120771]))
          unknown call_tmp[798139] "expr temp" "maybe param" "maybe type" "temp"
          (798142 'move' call_tmp[798139](120920 call _high _mt[203] r[120771]))
          unknown call_tmp[798144] "expr temp" "maybe param" "maybe type" "temp"
          (798147 'move' call_tmp[798144](120924 call absSameType r[120771] resultType[120800]))
          unknown call_tmp[798149] "expr temp" "maybe param" "maybe type" "temp"
          (798152 'move' call_tmp[798149](120917 call + call_tmp[798139] call_tmp[798144]))
          unknown call_tmp[798156] "expr temp" "maybe param" "maybe type" "temp"
          (798159 'move' call_tmp[798156](120929 call _high _mt[203] r[120771]))
          unknown call_tmp[798163] "expr temp" "maybe param" "maybe type" "temp"
          (798166 'move' call_tmp[798163](120934 call stride _mt[203] r[120771]))
          unknown call_tmp[798170] "expr temp" "maybe param" "maybe type" "temp"
          (798173 'move' call_tmp[798170](120939 call _alignment _mt[203] r[120771]))
          unknown call_tmp[798175] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
          (798178 'move' call_tmp[798175](1000099 'new' range[240](?)(idxType = call_tmp[798125])(bounds = both[107114])(strides = call_tmp[798132])(_low = call_tmp[798149])(_high = call_tmp[798156])(_stride = call_tmp[798163])(alignmentValue = call_tmp[798170])))
          (605323 'move' ret[605313](605322 'deref' call_tmp[798175]))
          gotoReturn _end_chpl_count_help[605311] _end_chpl_count_help[605311]
          (552418 'end of statement' resultType[120800])
        }
        {
          unknown call_tmp[798182] "expr temp" "maybe param" "maybe type" "temp"
          (798185 'move' call_tmp[798182](120949 call idxType _mt[203] r[120771]))
          unknown call_tmp[798189] "expr temp" "maybe param" "maybe type" "temp"
          (798192 'move' call_tmp[798189](120959 call strides _mt[203] r[120771]))
          unknown call_tmp[798196] "expr temp" "maybe param" "maybe type" "temp"
          (798199 'move' call_tmp[798196](120966 call idxType _mt[203] r[120771]))
          unknown call_tmp[798201] "expr temp" "maybe param" "maybe type" "temp"
          (798204 'move' call_tmp[798201](120964 call chpl__defaultLowBound call_tmp[798196] both[107114]))
          unknown call_tmp[798208] "expr temp" "maybe param" "maybe type" "temp"
          (798211 'move' call_tmp[798208](120977 call idxType _mt[203] r[120771]))
          unknown call_tmp[798213] "expr temp" "maybe param" "maybe type" "temp"
          (798216 'move' call_tmp[798213](120975 call chpl__defaultHighBound call_tmp[798208] both[107114]))
          unknown call_tmp[798220] "expr temp" "maybe param" "maybe type" "temp"
          (798223 'move' call_tmp[798220](120986 call stride _mt[203] r[120771]))
          unknown call_tmp[798227] "expr temp" "maybe param" "maybe type" "temp"
          (798230 'move' call_tmp[798227](120991 call _alignment _mt[203] r[120771]))
          unknown call_tmp[798232] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
          (798235 'move' call_tmp[798232](1000100 'new' range[240](?)(idxType = call_tmp[798182])(bounds = both[107114])(strides = call_tmp[798189])(_low = call_tmp[798201])(_high = call_tmp[798213])(_stride = call_tmp[798220])(alignmentValue = call_tmp[798227])))
          (605328 'move' ret[605313](605327 'deref' call_tmp[798232]))
          gotoReturn _end_chpl_count_help[605311] _end_chpl_count_help[605311]
        }
      }
    }
    unknown call_tmp[798237] "expr temp" "maybe param" "maybe type" "temp"
    (798240 'move' call_tmp[798237](121144 call _cond_test 1))
    if call_tmp[798237]
    {
      unknown tmp[485565] "maybe param" "temp"
      (485576 'move' tmp[485565](121031 call > count[120774] 0))
      unknown call_tmp[798242] "expr temp" "maybe param" "maybe type" "temp"
      (798245 'move' call_tmp[798242](485578 call _cond_invalid tmp[485565]))
      if call_tmp[798242]
      {
        (485581 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[676259] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[676260] "maybe param" "temp"
      unknown call_tmp[798247] "expr temp" "maybe param" "maybe type" "temp"
      (798250 'move' call_tmp[798247](485566 call isTrue tmp[485565]))
      (676265 'move' tmp[676260](676263 call _cond_test call_tmp[798247]))
      if tmp[676260]
      {
        unknown tmp[676267] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[798254] "expr temp" "maybe param" "maybe type" "temp"
        (798257 'move' call_tmp[798254](121043 call(121040 call (partial) hasFirstForIter _mt[203] r[120771])))
        unknown call_tmp[798259] "expr temp" "maybe param" "maybe type" "temp"
        (798262 'move' call_tmp[798259](121035 call ! call_tmp[798254]))
        (676269 'move' tmp[676267](485569 call isTrue call_tmp[798259]))
        (676274 'move' tmp[676259](676271 '_paramFoldLogical' tmp[676260] tmp[676267]))
      }
      {
        (676279 'move' tmp[676259](676276 '_paramFoldLogical' tmp[676260] 0))
      }
      unknown call_tmp[798264] "expr temp" "maybe param" "maybe type" "temp"
      (798267 'move' call_tmp[798264](121044 call _cond_test tmp[676259]))
      if call_tmp[798264]
      {
        (121024 call boundsCheckHalt "With a positive count, the range must have a first index.")
      }
      unknown tmp[485586] "maybe param" "temp"
      (485597 'move' tmp[485586](121057 call < count[120774] 0))
      unknown call_tmp[798269] "expr temp" "maybe param" "maybe type" "temp"
      (798272 'move' call_tmp[798269](485599 call _cond_invalid tmp[485586]))
      if call_tmp[798269]
      {
        (485602 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[676286] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[676287] "maybe param" "temp"
      unknown call_tmp[798274] "expr temp" "maybe param" "maybe type" "temp"
      (798277 'move' call_tmp[798274](485587 call isTrue tmp[485586]))
      (676292 'move' tmp[676287](676290 call _cond_test call_tmp[798274]))
      if tmp[676287]
      {
        unknown tmp[676294] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[798281] "expr temp" "maybe param" "maybe type" "temp"
        (798284 'move' call_tmp[798281](121069 call(121066 call (partial) hasLastForIter _mt[203] r[120771])))
        unknown call_tmp[798286] "expr temp" "maybe param" "maybe type" "temp"
        (798289 'move' call_tmp[798286](121061 call ! call_tmp[798281]))
        (676296 'move' tmp[676294](485590 call isTrue call_tmp[798286]))
        (676301 'move' tmp[676286](676298 '_paramFoldLogical' tmp[676287] tmp[676294]))
      }
      {
        (676306 'move' tmp[676286](676303 '_paramFoldLogical' tmp[676287] 0))
      }
      unknown call_tmp[798291] "expr temp" "maybe param" "maybe type" "temp"
      (798294 'move' call_tmp[798291](121070 call _cond_test tmp[676286]))
      if call_tmp[798291]
      {
        (121050 call boundsCheckHalt "With a negative count, the range must have a last index.")
      }
      unknown tmp[485607] "maybe param" "temp"
      unknown call_tmp[798298] "expr temp" "maybe param" "maybe type" "temp"
      (798301 'move' call_tmp[798298](121111 call bounds _mt[203] r[120771]))
      (485618 'move' tmp[485607](121108 call == call_tmp[798298] both[107114]))
      unknown call_tmp[798303] "expr temp" "maybe param" "maybe type" "temp"
      (798306 'move' call_tmp[798303](485620 call _cond_invalid tmp[485607]))
      if call_tmp[798303]
      {
        (485623 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[676313] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[676314] "maybe param" "temp"
      unknown call_tmp[798308] "expr temp" "maybe param" "maybe type" "temp"
      (798311 'move' call_tmp[798308](485608 call isTrue tmp[485607]))
      (676319 'move' tmp[676314](676317 call _cond_test call_tmp[798308]))
      if tmp[676314]
      {
        unknown tmp[676321] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[798313] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (798316 'move' call_tmp[798313](121130 'typeof' count[120774]))
        unknown call_tmp[798318] "expr temp" "maybe param" "maybe type" "temp"
        (798321 'move' call_tmp[798318](121128 call chpl__maxIntTypeSameSign call_tmp[798313]))
        unknown call_tmp[798323] "expr temp" "maybe param" "maybe type" "temp"
        (798326 'move' call_tmp[798323](121124 call : count[120774] call_tmp[798318]))
        unknown call_tmp[798328] "expr temp" "maybe param" "maybe type" "temp"
        (798331 'move' call_tmp[798328](121123 call abs call_tmp[798323]))
        unknown call_tmp[798333] "expr temp" "maybe param" "maybe type" "temp"
        (798336 'move' call_tmp[798333](121120 call : call_tmp[798328] uint(64)[86]))
        unknown call_tmp[798340] "expr temp" "maybe param" "maybe type" "temp"
        (798343 'move' call_tmp[798340](121136 call(121133 call (partial) sizeAs _mt[203] r[120771]) uint(64)[86]))
        unknown call_tmp[798345] "expr temp" "maybe param" "maybe type" "temp"
        (798348 'move' call_tmp[798345](121118 call > call_tmp[798333] call_tmp[798340]))
        (676323 'move' tmp[676321](485611 call isTrue call_tmp[798345]))
        (676328 'move' tmp[676313](676325 '_paramFoldLogical' tmp[676314] tmp[676321]))
      }
      {
        (676333 'move' tmp[676313](676330 '_paramFoldLogical' tmp[676314] 0))
      }
      unknown call_tmp[798350] "expr temp" "maybe param" "maybe type" "temp"
      (798353 'move' call_tmp[798350](121138 call _cond_test tmp[676313]))
      if call_tmp[798350]
      {
        unknown call_tmp[798357] "expr temp" "maybe param" "maybe type" "temp"
        (798360 'move' call_tmp[798357](121091 call size _mt[203] r[120771]))
        unknown call_tmp[798362] "expr temp" "maybe param" "maybe type" "temp"
        (798365 'move' call_tmp[798362](121088 call : call_tmp[798357] string[244]))
        unknown call_tmp[798367] "expr temp" "maybe param" "maybe type" "temp"
        (798370 'move' call_tmp[798367](121083 call + "range of size " call_tmp[798362]))
        unknown call_tmp[798372] "expr temp" "maybe param" "maybe type" "temp"
        (798375 'move' call_tmp[798372](121081 call + call_tmp[798367] " is too small for counting "))
        unknown call_tmp[798377] "expr temp" "maybe param" "maybe type" "temp"
        (798380 'move' call_tmp[798377](121101 call abs count[120774]))
        unknown call_tmp[798382] "expr temp" "maybe param" "maybe type" "temp"
        (798385 'move' call_tmp[798382](121098 call : call_tmp[798377] string[244]))
        unknown call_tmp[798387] "expr temp" "maybe param" "maybe type" "temp"
        (798390 'move' call_tmp[798387](121079 call + call_tmp[798372] call_tmp[798382]))
        unknown call_tmp[798392] "expr temp" "maybe param" "maybe type" "temp"
        (798395 'move' call_tmp[798392](121077 call + call_tmp[798387] " elements"))
        (121076 call boundsCheckHalt call_tmp[798392])
      }
    }
    function chpl__computeTypeForCountMath[121148](arg t1[121150]:_any[141](?), arg t2[121152]:_any[141](?)) type : _unknown[42]
    {
      unknown ret[605277] "RVV" "temp" "type variable"
      unknown t1i[121156] "dead at end of block" "insert auto destroy" "type variable"
      (645486 'move' t1i[121156](645484 call chpl__idxTypeToIntIdxType t1[121150]))
      (552427 'end of statement')
      unknown t2i[121162] "dead at end of block" "insert auto destroy" "type variable"
      (645491 'move' t2i[121162](645489 call chpl__idxTypeToIntIdxType t2[121152]))
      (552428 'end of statement')
      unknown call_tmp[798397] "expr temp" "maybe param" "maybe type" "temp"
      (798400 'move' call_tmp[798397](121281 call == t1i[121156] t2i[121162]))
      unknown call_tmp[798402] "expr temp" "maybe param" "maybe type" "temp"
      (798405 'move' call_tmp[798402](121285 call _cond_test call_tmp[798397]))
      if call_tmp[798402]
      {
        (605282 'move' ret[605277](605281 'deref' t1i[121156]))
        gotoReturn _end_chpl__computeTypeForCountMath[605275] _end_chpl__computeTypeForCountMath[605275]
        (552429 'end of statement' t1i[121156])
      }
      {
        unknown tmp[485670] "maybe param" "temp"
        (485681 'move' tmp[485670](121271 call isInt t1i[121156]))
        unknown call_tmp[798407] "expr temp" "maybe param" "maybe type" "temp"
        (798410 'move' call_tmp[798407](485683 call _cond_invalid tmp[485670]))
        if call_tmp[798407]
        {
          (485686 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[676340] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[676341] "maybe param" "temp"
        unknown call_tmp[798412] "expr temp" "maybe param" "maybe type" "temp"
        (798415 'move' call_tmp[798412](485671 call isTrue tmp[485670]))
        (676346 'move' tmp[676341](676344 call _cond_test call_tmp[798412]))
        if tmp[676341]
        {
          unknown tmp[676348] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[798417] "expr temp" "maybe param" "maybe type" "temp"
          (798420 'move' call_tmp[798417](121274 call isInt t2i[121162]))
          (676350 'move' tmp[676348](485674 call isTrue call_tmp[798417]))
          (676355 'move' tmp[676340](676352 '_paramFoldLogical' tmp[676341] tmp[676348]))
        }
        {
          (676360 'move' tmp[676340](676357 '_paramFoldLogical' tmp[676341] 0))
        }
        unknown call_tmp[798422] "expr temp" "maybe param" "maybe type" "temp"
        (798425 'move' call_tmp[798422](121276 call _cond_test tmp[676340]))
        if call_tmp[798422]
        {
          unknown call_tmp[798427] "expr temp" "maybe param" "used in type" "maybe type" "temp"
          (798430 'move' call_tmp[798427](121177 call numBits t1i[121156]))
          unknown call_tmp[798432] "expr temp" "maybe param" "used in type" "maybe type" "temp"
          (798435 'move' call_tmp[798432](121180 call numBits t2i[121162]))
          unknown call_tmp[798437] "expr temp" "maybe param" "used in type" "maybe type" "temp"
          (798440 'move' call_tmp[798437](121175 call max call_tmp[798427] call_tmp[798432]))
          unknown call_tmp[798442] "expr temp" "maybe param" "used in type" "maybe type" "temp"
          (798445 'move' call_tmp[798442](121173 call int(64)[10] call_tmp[798437]))
          (605287 'move' ret[605277](605286 'deref' call_tmp[798442]))
          gotoReturn _end_chpl__computeTypeForCountMath[605275] _end_chpl__computeTypeForCountMath[605275]
          (552432 'end of statement' t1i[121156] t2i[121162])
        }
        {
          unknown tmp[485649] "maybe param" "temp"
          (485660 'move' tmp[485649](121258 call isUint t1i[121156]))
          unknown call_tmp[798447] "expr temp" "maybe param" "maybe type" "temp"
          (798450 'move' call_tmp[798447](485662 call _cond_invalid tmp[485649]))
          if call_tmp[798447]
          {
            (485665 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[676367] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[676368] "maybe param" "temp"
          unknown call_tmp[798452] "expr temp" "maybe param" "maybe type" "temp"
          (798455 'move' call_tmp[798452](485650 call isTrue tmp[485649]))
          (676373 'move' tmp[676368](676371 call _cond_test call_tmp[798452]))
          if tmp[676368]
          {
            unknown tmp[676375] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[798457] "expr temp" "maybe param" "maybe type" "temp"
            (798460 'move' call_tmp[798457](121261 call isUint t2i[121162]))
            (676377 'move' tmp[676375](485653 call isTrue call_tmp[798457]))
            (676382 'move' tmp[676367](676379 '_paramFoldLogical' tmp[676368] tmp[676375]))
          }
          {
            (676387 'move' tmp[676367](676384 '_paramFoldLogical' tmp[676368] 0))
          }
          unknown call_tmp[798462] "expr temp" "maybe param" "maybe type" "temp"
          (798465 'move' call_tmp[798462](121263 call _cond_test tmp[676367]))
          if call_tmp[798462]
          {
            unknown call_tmp[798467] "expr temp" "maybe param" "used in type" "maybe type" "temp"
            (798470 'move' call_tmp[798467](121189 call numBits t1i[121156]))
            unknown call_tmp[798472] "expr temp" "maybe param" "used in type" "maybe type" "temp"
            (798475 'move' call_tmp[798472](121192 call numBits t2i[121162]))
            unknown call_tmp[798477] "expr temp" "maybe param" "used in type" "maybe type" "temp"
            (798480 'move' call_tmp[798477](121187 call max call_tmp[798467] call_tmp[798472]))
            unknown call_tmp[798482] "expr temp" "maybe param" "used in type" "maybe type" "temp"
            (798485 'move' call_tmp[798482](121185 call uint(64)[86] call_tmp[798477]))
            (605292 'move' ret[605277](605291 'deref' call_tmp[798482]))
            gotoReturn _end_chpl__computeTypeForCountMath[605275] _end_chpl__computeTypeForCountMath[605275]
            (552436 'end of statement' t1i[121156] t2i[121162])
          }
          {
            unknown tmp[485628] "maybe param" "temp"
            unknown call_tmp[798487] "expr temp" "maybe param" "maybe type" "temp"
            (798490 'move' call_tmp[798487](121241 call numBits t1i[121156]))
            (485639 'move' tmp[485628](121238 call == call_tmp[798487] 64))
            unknown call_tmp[798492] "expr temp" "maybe param" "maybe type" "temp"
            (798495 'move' call_tmp[798492](485641 call _cond_invalid tmp[485628]))
            if call_tmp[798492]
            {
              (485644 call compilerError "cannot promote short-circuiting || operator")
            }
            unknown tmp[676394] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[676395] "maybe param" "temp"
            unknown call_tmp[798497] "expr temp" "maybe param" "maybe type" "temp"
            (798500 'move' call_tmp[798497](485629 call isTrue tmp[485628]))
            (676400 'move' tmp[676395](676398 call _cond_test call_tmp[798497]))
            if tmp[676395]
            {
              (676405 'move' tmp[676394](676402 '_paramFoldLogical' tmp[676395] 1))
            }
            {
              unknown tmp[676407] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[798502] "expr temp" "maybe param" "maybe type" "temp"
              (798505 'move' call_tmp[798502](121247 call numBits t2i[121162]))
              unknown call_tmp[798507] "expr temp" "maybe param" "maybe type" "temp"
              (798510 'move' call_tmp[798507](121244 call == call_tmp[798502] 64))
              (676409 'move' tmp[676407](485633 call isTrue call_tmp[798507]))
              (676414 'move' tmp[676394](676411 '_paramFoldLogical' tmp[676395] tmp[676407]))
            }
            unknown call_tmp[798512] "expr temp" "maybe param" "maybe type" "temp"
            (798515 'move' call_tmp[798512](121250 call _cond_test tmp[676394]))
            if call_tmp[798512]
            {
              unknown call_tmp[798517] "expr temp" "maybe param" "used in type" "maybe type" "temp"
              (798520 'move' call_tmp[798517](121197 call int(64)[10] 64))
              (605297 'move' ret[605277](605296 'deref' call_tmp[798517]))
              gotoReturn _end_chpl__computeTypeForCountMath[605275] _end_chpl__computeTypeForCountMath[605275]
            }
            {
              unknown call_tmp[798522] "expr temp" "maybe param" "maybe type" "temp"
              (798525 'move' call_tmp[798522](121230 call isInt t1i[121156]))
              unknown call_tmp[798527] "expr temp" "maybe param" "maybe type" "temp"
              (798530 'move' call_tmp[798527](121232 call _cond_test call_tmp[798522]))
              if call_tmp[798527]
              {
                unknown call_tmp[798532] "expr temp" "maybe param" "used in type" "maybe type" "temp"
                (798535 'move' call_tmp[798532](121206 call numBits t1i[121156]))
                unknown call_tmp[798537] "expr temp" "maybe param" "used in type" "maybe type" "temp"
                (798540 'move' call_tmp[798537](121212 call numBits t2i[121162]))
                unknown call_tmp[798542] "expr temp" "maybe param" "used in type" "maybe type" "temp"
                (798545 'move' call_tmp[798542](121208 call * 2 call_tmp[798537]))
                unknown call_tmp[798547] "expr temp" "maybe param" "used in type" "maybe type" "temp"
                (798550 'move' call_tmp[798547](121204 call max call_tmp[798532] call_tmp[798542]))
                unknown call_tmp[798552] "expr temp" "maybe param" "used in type" "maybe type" "temp"
                (798555 'move' call_tmp[798552](121202 call int(64)[10] call_tmp[798547]))
                (605302 'move' ret[605277](605301 'deref' call_tmp[798552]))
                gotoReturn _end_chpl__computeTypeForCountMath[605275] _end_chpl__computeTypeForCountMath[605275]
                (552441 'end of statement' t1i[121156] t2i[121162])
              }
              {
                unknown call_tmp[798557] "expr temp" "maybe param" "used in type" "maybe type" "temp"
                (798560 'move' call_tmp[798557](121224 call numBits t1i[121156]))
                unknown call_tmp[798562] "expr temp" "maybe param" "used in type" "maybe type" "temp"
                (798565 'move' call_tmp[798562](121220 call * 2 call_tmp[798557]))
                unknown call_tmp[798567] "expr temp" "maybe param" "used in type" "maybe type" "temp"
                (798570 'move' call_tmp[798567](121227 call numBits t2i[121162]))
                unknown call_tmp[798572] "expr temp" "maybe param" "used in type" "maybe type" "temp"
                (798575 'move' call_tmp[798572](121219 call max call_tmp[798562] call_tmp[798567]))
                unknown call_tmp[798577] "expr temp" "maybe param" "used in type" "maybe type" "temp"
                (798580 'move' call_tmp[798577](121217 call int(64)[10] call_tmp[798572]))
                (605307 'move' ret[605277](605306 'deref' call_tmp[798577]))
                gotoReturn _end_chpl__computeTypeForCountMath[605275] _end_chpl__computeTypeForCountMath[605275]
                (552444 'end of statement' t1i[121156] t2i[121162])
              }
            }
          }
        }
      }
      label _end_chpl__computeTypeForCountMath[605275]
      (605279 return ret[605277])
    }
    unknown computeType[121293] "dead at end of block" "insert auto destroy" "type variable"
    unknown call_tmp[798582] "expr temp" "maybe param" "used in type" "maybe type" "temp" "type variable"
    (798585 'move' call_tmp[798582](645496 'typeof' count[120774]))
    (645498 'move' computeType[121293](645494 call chpl__computeTypeForCountMath resultType[120800] call_tmp[798582]))
    unknown signedComputeType[121301] "dead at end of block" "insert auto destroy" "type variable"
    (645503 'move' signedComputeType[121301](645501 call chpl__signedType computeType[121293]))
    unknown call_tmp[798587] "expr temp" "maybe param" "maybe type" "temp"
    (798590 'move' call_tmp[798587](121310 call : count[120774] signedComputeType[121301]))
    unknown call_tmp[798594] "expr temp" "maybe param" "maybe type" "temp"
    (798597 'move' call_tmp[798594](121317 call stride _mt[203] r[120771]))
    unknown call_tmp[798599] "expr temp" "maybe param" "maybe type" "temp"
    (798602 'move' call_tmp[798599](121314 call : call_tmp[798594] signedComputeType[121301]))
    unknown call_tmp[798604] "maybe param" "maybe type" "temp"
    (798607 'move' call_tmp[798604](121308 call * call_tmp[798587] call_tmp[798599]))
    unknown diff[121307] "dead at end of block" "insert auto destroy"
    (645505 'init var' diff[121307] call_tmp[798604])
    (121322 'end of statement')
    unknown lo[121324] "dead at end of block" "insert auto destroy"
    unknown tmp[676421] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[676422] "maybe param" "temp"
    unknown call_tmp[798609] "expr temp" "maybe param" "maybe type" "temp"
    (798612 'move' call_tmp[798609](121326 call > diff[121307] 0))
    (676427 'move' tmp[676422](676425 call _cond_test call_tmp[798609]))
    if tmp[676422]
    {
      unknown tmp[676429] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (676431 'move' tmp[676429](121331 call _low _mt[203] r[120771]))
      (676436 'move' tmp[676421](676433 '_paramFoldLogical' tmp[676422] tmp[676429]))
    }
    {
      unknown tmp[676438] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[798618] "expr temp" "maybe param" "maybe type" "temp"
      (798621 'move' call_tmp[798618](121339 call _high _mt[203] r[120771]))
      unknown call_tmp[798623] "expr temp" "maybe param" "maybe type" "temp"
      (798626 'move' call_tmp[798623](121336 call : call_tmp[798618] computeType[121293]))
      unknown call_tmp[798628] "expr temp" "maybe param" "maybe type" "temp"
      (798631 'move' call_tmp[798628](121345 call + diff[121307] 1))
      unknown call_tmp[798633] "expr temp" "maybe param" "maybe type" "temp"
      (798636 'move' call_tmp[798633](121343 call : call_tmp[798628] computeType[121293]))
      (676440 'move' tmp[676438](121335 call chpl__add call_tmp[798623] call_tmp[798633] resultType[120800]))
      (676445 'move' tmp[676421](676442 '_paramFoldLogical' tmp[676422] tmp[676438]))
    }
    (645507 'init var' lo[121324] tmp[676421] resultType[120800])
    (121355 'end of statement')
    unknown hi[121357] "dead at end of block" "insert auto destroy"
    unknown tmp[676452] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[676453] "maybe param" "temp"
    unknown call_tmp[798638] "expr temp" "maybe param" "maybe type" "temp"
    (798641 'move' call_tmp[798638](121359 call < diff[121307] 0))
    (676458 'move' tmp[676453](676456 call _cond_test call_tmp[798638]))
    if tmp[676453]
    {
      unknown tmp[676460] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (676462 'move' tmp[676460](121364 call _high _mt[203] r[120771]))
      (676467 'move' tmp[676452](676464 '_paramFoldLogical' tmp[676453] tmp[676460]))
    }
    {
      unknown tmp[676469] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[798647] "expr temp" "maybe param" "maybe type" "temp"
      (798650 'move' call_tmp[798647](121372 call _low _mt[203] r[120771]))
      unknown call_tmp[798652] "expr temp" "maybe param" "maybe type" "temp"
      (798655 'move' call_tmp[798652](121369 call : call_tmp[798647] computeType[121293]))
      unknown call_tmp[798657] "expr temp" "maybe param" "maybe type" "temp"
      (798660 'move' call_tmp[798657](121378 call : diff[121307] computeType[121293]))
      unknown call_tmp[798662] "expr temp" "maybe param" "maybe type" "temp"
      (798665 'move' call_tmp[798662](121376 call - call_tmp[798657] 1))
      (676471 'move' tmp[676469](121368 call chpl__add call_tmp[798652] call_tmp[798662] resultType[120800]))
      (676476 'move' tmp[676452](676473 '_paramFoldLogical' tmp[676453] tmp[676469]))
    }
    (645509 'init var' hi[121357] tmp[676452] resultType[120800])
    (121388 'end of statement' resultType[120800] computeType[121293] signedComputeType[121301] diff[121307] computeType[121293] diff[121307] computeType[121293] diff[121307] computeType[121293] diff[121307] computeType[121293])
    unknown call_tmp[798669] "expr temp" "maybe param" "maybe type" "temp"
    (798672 'move' call_tmp[798669](121450 call(121447 call (partial) hasPosNegUnitStride _mt[203] r[120771])))
    unknown call_tmp[798674] "expr temp" "maybe param" "maybe type" "temp"
    (798677 'move' call_tmp[798674](121444 call ! call_tmp[798669]))
    unknown call_tmp[798679] "expr temp" "maybe param" "maybe type" "temp"
    (798682 'move' call_tmp[798679](121451 call _cond_test call_tmp[798674]))
    if call_tmp[798679]
    {
      unknown tmp[485691] "maybe param" "temp"
      (485702 'move' tmp[485691](121404 call(121401 call (partial) hasLowBound _mt[203] r[120771])))
      unknown call_tmp[798686] "expr temp" "maybe param" "maybe type" "temp"
      (798689 'move' call_tmp[798686](485704 call _cond_invalid tmp[485691]))
      if call_tmp[798686]
      {
        (485707 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[676483] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[676484] "maybe param" "temp"
      unknown call_tmp[798691] "expr temp" "maybe param" "maybe type" "temp"
      (798694 'move' call_tmp[798691](485692 call isTrue tmp[485691]))
      (676489 'move' tmp[676484](676487 call _cond_test call_tmp[798691]))
      if tmp[676484]
      {
        unknown tmp[676491] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[798698] "expr temp" "maybe param" "maybe type" "temp"
        (798701 'move' call_tmp[798698](121409 call _low _mt[203] r[120771]))
        unknown call_tmp[798703] "expr temp" "maybe param" "maybe type" "temp"
        (798706 'move' call_tmp[798703](121405 call < lo[121324] call_tmp[798698]))
        (676493 'move' tmp[676491](485695 call isTrue call_tmp[798703]))
        (676498 'move' tmp[676483](676495 '_paramFoldLogical' tmp[676484] tmp[676491]))
      }
      {
        (676503 'move' tmp[676483](676500 '_paramFoldLogical' tmp[676484] 0))
      }
      unknown call_tmp[798708] "expr temp" "maybe param" "maybe type" "temp"
      (798711 'move' call_tmp[798708](121412 call _cond_test tmp[676483]))
      if call_tmp[798708]
      {
        unknown call_tmp[798715] "expr temp" "maybe param" "maybe type" "temp"
        (798718 'move' call_tmp[798715](121394 call _low _mt[203] r[120771]))
        (121390 call = lo[121324] call_tmp[798715])
        (552458 'end of statement' lo[121324])
      }
      unknown tmp[485712] "maybe param" "temp"
      (485723 'move' tmp[485712](121431 call(121428 call (partial) hasHighBound _mt[203] r[120771])))
      unknown call_tmp[798722] "expr temp" "maybe param" "maybe type" "temp"
      (798725 'move' call_tmp[798722](485725 call _cond_invalid tmp[485712]))
      if call_tmp[798722]
      {
        (485728 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[676510] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[676511] "maybe param" "temp"
      unknown call_tmp[798727] "expr temp" "maybe param" "maybe type" "temp"
      (798730 'move' call_tmp[798727](485713 call isTrue tmp[485712]))
      (676516 'move' tmp[676511](676514 call _cond_test call_tmp[798727]))
      if tmp[676511]
      {
        unknown tmp[676518] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[798734] "expr temp" "maybe param" "maybe type" "temp"
        (798737 'move' call_tmp[798734](121436 call _high _mt[203] r[120771]))
        unknown call_tmp[798739] "expr temp" "maybe param" "maybe type" "temp"
        (798742 'move' call_tmp[798739](121432 call > hi[121357] call_tmp[798734]))
        (676520 'move' tmp[676518](485716 call isTrue call_tmp[798739]))
        (676525 'move' tmp[676510](676522 '_paramFoldLogical' tmp[676511] tmp[676518]))
      }
      {
        (676530 'move' tmp[676510](676527 '_paramFoldLogical' tmp[676511] 0))
      }
      unknown call_tmp[798744] "expr temp" "maybe param" "maybe type" "temp"
      (798747 'move' call_tmp[798744](121439 call _cond_test tmp[676510]))
      if call_tmp[798744]
      {
        unknown call_tmp[798751] "expr temp" "maybe param" "maybe type" "temp"
        (798754 'move' call_tmp[798751](121421 call _high _mt[203] r[120771]))
        (121417 call = hi[121357] call_tmp[798751])
        (552461 'end of statement' hi[121357])
      }
    }
    unknown call_tmp[798758] "expr temp" "maybe param" "maybe type" "temp"
    (798761 'move' call_tmp[798758](121460 call idxType _mt[203] r[120771]))
    unknown call_tmp[798765] "expr temp" "maybe param" "maybe type" "temp"
    (798768 'move' call_tmp[798765](121470 call strides _mt[203] r[120771]))
    unknown call_tmp[798772] "expr temp" "maybe param" "maybe type" "temp"
    (798775 'move' call_tmp[798772](121479 call _stride _mt[203] r[120771]))
    unknown call_tmp[798779] "expr temp" "maybe param" "maybe type" "temp"
    (798782 'move' call_tmp[798779](121483 call _alignment _mt[203] r[120771]))
    unknown call_tmp[798784] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (798787 'move' call_tmp[798784](1000101 'new' range[240](?)(idxType = call_tmp[798758])(bounds = both[107114])(strides = call_tmp[798765])(_low = lo[121324])(_high = hi[121357]) call_tmp[798772] call_tmp[798779]))
    (605333 'move' ret[605313](605332 'deref' call_tmp[798784]))
    gotoReturn _end_chpl_count_help[605311] _end_chpl_count_help[605311]
    (552463 'end of statement' lo[121324] hi[121357])
    label _end_chpl_count_help[605311]
    (605315 return ret[605313])
  }
  function #[121488](arg r[121493]:range[240](?), arg count[121497]:bool[19]) : _unknown[42] "operator"
  {
    unknown ret[605339] "RVV" "temp"
    unknown call_tmp[798789] "expr temp" "maybe param" "maybe type" "temp"
    (798792 'move' call_tmp[798789](121505 call : count[121497] int(64)[10]))
    unknown call_tmp[798794] "expr temp" "maybe param" "maybe type" "temp"
    (798797 'move' call_tmp[798794](121503 call chpl_count_help r[121493] call_tmp[798789]))
    (605344 'move' ret[605339](605343 'deref' call_tmp[798794]))
    (605341 return ret[605339])
  }
  function #[121511](arg r[121516]:range[240](?), arg count[121520]:integral[159](?)) : _unknown[42] "operator"
  {
    unknown ret[605348] "RVV" "temp"
    unknown call_tmp[798799] "expr temp" "maybe param" "maybe type" "temp"
    (798802 'move' call_tmp[798799](121526 call chpl_count_help r[121516] count[121520]))
    (605353 'move' ret[605348](605352 'deref' call_tmp[798799]))
    (605350 return ret[605348])
  }
  function #[121531](arg r[121537]:range[240](?), arg count[121540]:_any[141](?)) : _unknown[42] "last resort" "operator" "no return value for void"
  {
    unknown call_tmp[798804] "expr temp" "maybe param" "maybe type" "temp"
    (798807 'move' call_tmp[798804](521930 'query' r[121537] 1))
    unknown call_tmp[798809] "expr temp" "maybe param" "maybe type" "temp"
    (798812 'move' call_tmp[798809](121546 call : call_tmp[798804] string[244]))
    unknown call_tmp[798814] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (798817 'move' call_tmp[798814](121554 'typeof' count[121540]))
    unknown call_tmp[798819] "expr temp" "maybe param" "maybe type" "temp"
    (798822 'move' call_tmp[798819](121551 call : call_tmp[798814] string[244]))
    (121544 call compilerError "can't apply '#' to a range with idxType " call_tmp[798809] " using a count of type " call_tmp[798819])
    (605355 return _void[46])
  }
  function #[121558](arg r[121560]:_any[141](?), arg count[121562]:_any[141](?)) : _unknown[42] "last resort" "operator" "no return value for void"
  {
    unknown call_tmp[798824] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (798827 'move' call_tmp[798824](121573 'typeof' r[121560]))
    unknown call_tmp[798829] "expr temp" "maybe param" "maybe type" "temp"
    (798832 'move' call_tmp[798829](121570 call : call_tmp[798824] string[244]))
    (121566 call compilerError "cannot apply '#' to '" call_tmp[798829] "'")
    (605357 return _void[46])
  }
  function chpl_checkIfRangeIterWillOverflow[121578](arg idxType[121580]:_any[141](?), arg low[121582]:_any[141](?), arg high[121584]:_any[141](?), arg stride[121586]:_any[141](?), arg first[121589] :
  low[121582] =
  low[121582], arg last[121593] :
  high[121584] =
  high[121584], arg shouldHalt[121597] :
  1 =
  1) : _unknown[42]
  {
    unknown ret[605361] "RVV" "temp"
    unknown call_tmp[798834] "expr temp" "maybe param" "maybe type" "temp"
    (798837 'move' call_tmp[798834](121604 call > low[121582] high[121584]))
    unknown call_tmp[798839] "expr temp" "maybe param" "maybe type" "temp"
    (798842 'move' call_tmp[798839](121608 call _cond_test call_tmp[798834]))
    if call_tmp[798839]
    {
      (605366 'move' ret[605361](605365 'deref' 0))
      gotoReturn _end_chpl_checkIfRangeIterWillOverflow[605359] _end_chpl_checkIfRangeIterWillOverflow[605359]
    }
    unknown willOverFlow[121613] "dead at end of block" "insert auto destroy"
    (645511 'init var' willOverFlow[121613] 0)
    (121616 'end of statement')
    unknown call_tmp[798844] "expr temp" "maybe param" "maybe type" "temp"
    (798847 'move' call_tmp[798844](121760 call isIntType idxType[121580]))
    unknown call_tmp[798849] "expr temp" "maybe param" "maybe type" "temp"
    (798852 'move' call_tmp[798849](121762 call _cond_test call_tmp[798844]))
    if call_tmp[798849]
    {
      unknown tmp[485754] "maybe param" "temp"
      (485765 'move' tmp[485754](121672 call > last[121593] 0))
      unknown call_tmp[798854] "expr temp" "maybe param" "maybe type" "temp"
      (798857 'move' call_tmp[798854](485767 call _cond_invalid tmp[485754]))
      if call_tmp[798854]
      {
        (485770 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[676537] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[676538] "maybe param" "temp"
      unknown call_tmp[798859] "expr temp" "maybe param" "maybe type" "temp"
      (798862 'move' call_tmp[798859](485755 call isTrue tmp[485754]))
      (676543 'move' tmp[676538](676541 call _cond_test call_tmp[798859]))
      if tmp[676538]
      {
        unknown tmp[676545] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[798864] "expr temp" "maybe param" "maybe type" "temp"
        (798867 'move' call_tmp[798864](121676 call > stride[121586] 0))
        (676547 'move' tmp[676545](485758 call isTrue call_tmp[798864]))
        (676552 'move' tmp[676537](676549 '_paramFoldLogical' tmp[676538] tmp[676545]))
      }
      {
        (676557 'move' tmp[676537](676554 '_paramFoldLogical' tmp[676538] 0))
      }
      unknown call_tmp[798869] "expr temp" "maybe param" "maybe type" "temp"
      (798872 'move' call_tmp[798869](121680 call _cond_test tmp[676537]))
      if call_tmp[798869]
      {
        unknown call_tmp[798874] "expr temp" "maybe param" "maybe type" "temp"
        (798877 'move' call_tmp[798874](121630 call max idxType[121580]))
        unknown call_tmp[798879] "expr temp" "maybe param" "maybe type" "temp"
        (798882 'move' call_tmp[798879](121627 call - call_tmp[798874] last[121593]))
        unknown call_tmp[798884] "expr temp" "maybe param" "maybe type" "temp"
        (798887 'move' call_tmp[798884](121624 call > stride[121586] call_tmp[798879]))
        unknown call_tmp[798889] "expr temp" "maybe param" "maybe type" "temp"
        (798892 'move' call_tmp[798889](121633 call _cond_test call_tmp[798884]))
        if call_tmp[798889]
        {
          (121620 call = willOverFlow[121613] 1)
          (552472 'end of statement' willOverFlow[121613])
        }
      }
      {
        unknown tmp[485733] "maybe param" "temp"
        (485744 'move' tmp[485733](121658 call < last[121593] 0))
        unknown call_tmp[798894] "expr temp" "maybe param" "maybe type" "temp"
        (798897 'move' call_tmp[798894](485746 call _cond_invalid tmp[485733]))
        if call_tmp[798894]
        {
          (485749 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[676564] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[676565] "maybe param" "temp"
        unknown call_tmp[798899] "expr temp" "maybe param" "maybe type" "temp"
        (798902 'move' call_tmp[798899](485734 call isTrue tmp[485733]))
        (676570 'move' tmp[676565](676568 call _cond_test call_tmp[798899]))
        if tmp[676565]
        {
          unknown tmp[676572] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[798904] "expr temp" "maybe param" "maybe type" "temp"
          (798907 'move' call_tmp[798904](121662 call < stride[121586] 0))
          (676574 'move' tmp[676572](485737 call isTrue call_tmp[798904]))
          (676579 'move' tmp[676564](676576 '_paramFoldLogical' tmp[676565] tmp[676572]))
        }
        {
          (676584 'move' tmp[676564](676581 '_paramFoldLogical' tmp[676565] 0))
        }
        unknown call_tmp[798909] "expr temp" "maybe param" "maybe type" "temp"
        (798912 'move' call_tmp[798909](121666 call _cond_test tmp[676564]))
        if call_tmp[798909]
        {
          unknown call_tmp[798914] "expr temp" "maybe param" "maybe type" "temp"
          (798917 'move' call_tmp[798914](121649 call min idxType[121580]))
          unknown call_tmp[798919] "expr temp" "maybe param" "maybe type" "temp"
          (798922 'move' call_tmp[798919](121646 call - call_tmp[798914] last[121593]))
          unknown call_tmp[798924] "expr temp" "maybe param" "maybe type" "temp"
          (798927 'move' call_tmp[798924](121643 call < stride[121586] call_tmp[798919]))
          unknown call_tmp[798929] "expr temp" "maybe param" "maybe type" "temp"
          (798932 'move' call_tmp[798929](121652 call _cond_test call_tmp[798924]))
          if call_tmp[798929]
          {
            (121639 call = willOverFlow[121613] 1)
            (552475 'end of statement' willOverFlow[121613])
          }
        }
      }
    }
    {
      unknown call_tmp[798934] "expr temp" "maybe param" "maybe type" "temp"
      (798937 'move' call_tmp[798934](121753 call isUintType idxType[121580]))
      unknown call_tmp[798939] "expr temp" "maybe param" "maybe type" "temp"
      (798942 'move' call_tmp[798939](121755 call _cond_test call_tmp[798934]))
      if call_tmp[798939]
      {
        unknown call_tmp[798944] "expr temp" "maybe param" "maybe type" "temp"
        (798947 'move' call_tmp[798944](121734 call > stride[121586] 0))
        unknown call_tmp[798949] "expr temp" "maybe param" "maybe type" "temp"
        (798952 'move' call_tmp[798949](121738 call _cond_test call_tmp[798944]))
        if call_tmp[798949]
        {
          unknown call_tmp[798954] "expr temp" "maybe param" "maybe type" "temp"
          (798957 'move' call_tmp[798954](121697 call : stride[121586] idxType[121580]))
          unknown call_tmp[798959] "expr temp" "maybe param" "maybe type" "temp"
          (798962 'move' call_tmp[798959](121694 call + last[121593] call_tmp[798954]))
          unknown call_tmp[798964] "expr temp" "maybe param" "maybe type" "temp"
          (798967 'move' call_tmp[798964](121692 call < call_tmp[798959] last[121593]))
          unknown call_tmp[798969] "expr temp" "maybe param" "maybe type" "temp"
          (798972 'move' call_tmp[798969](121702 call _cond_test call_tmp[798964]))
          if call_tmp[798969]
          {
            (121688 call = willOverFlow[121613] 1)
            (552477 'end of statement' willOverFlow[121613])
          }
        }
        {
          unknown call_tmp[798974] "expr temp" "maybe param" "maybe type" "temp"
          (798977 'move' call_tmp[798974](121726 call < stride[121586] 0))
          unknown call_tmp[798979] "expr temp" "maybe param" "maybe type" "temp"
          (798982 'move' call_tmp[798979](121730 call _cond_test call_tmp[798974]))
          if call_tmp[798979]
          {
            unknown call_tmp[798984] "expr temp" "maybe param" "maybe type" "temp"
            (798987 'move' call_tmp[798984](121717 call : stride[121586] idxType[121580]))
            unknown call_tmp[798989] "expr temp" "maybe param" "maybe type" "temp"
            (798992 'move' call_tmp[798989](121714 call + last[121593] call_tmp[798984]))
            unknown call_tmp[798994] "expr temp" "maybe param" "maybe type" "temp"
            (798997 'move' call_tmp[798994](121712 call > call_tmp[798989] last[121593]))
            unknown call_tmp[798999] "expr temp" "maybe param" "maybe type" "temp"
            (799002 'move' call_tmp[798999](121722 call _cond_test call_tmp[798994]))
            if call_tmp[798999]
            {
              (121708 call = willOverFlow[121613] 1)
              (552479 'end of statement' willOverFlow[121613])
            }
          }
        }
      }
      {
        (121745 call compilerError "Iterator overflow checking is only supported " "for integral types")
      }
    }
    unknown tmp[485775] "maybe param" "temp"
    (485786 'move' tmp[485775] willOverFlow[121613])
    unknown call_tmp[799004] "expr temp" "maybe param" "maybe type" "temp"
    (799007 'move' call_tmp[799004](485788 call _cond_invalid tmp[485775]))
    if call_tmp[799004]
    {
      (485791 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[676591] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[676592] "maybe param" "temp"
    unknown call_tmp[799009] "expr temp" "maybe param" "maybe type" "temp"
    (799012 'move' call_tmp[799009](485776 call isTrue tmp[485775]))
    (676597 'move' tmp[676592](676595 call _cond_test call_tmp[799009]))
    if tmp[676592]
    {
      unknown tmp[676599] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (676601 'move' tmp[676599](485779 call isTrue shouldHalt[121597]))
      (676606 'move' tmp[676591](676603 '_paramFoldLogical' tmp[676592] tmp[676599]))
    }
    {
      (676611 'move' tmp[676591](676608 '_paramFoldLogical' tmp[676592] 0))
    }
    unknown call_tmp[799014] "expr temp" "maybe param" "maybe type" "temp"
    (799017 'move' call_tmp[799014](121780 call _cond_test tmp[676591]))
    if call_tmp[799014]
    {
      (121772 call boundsCheckHalt module=[222] HaltWrappers[518] "Iteration over a bounded range may be incorrect due to overflow.")
      (402070 'referenced modules list' HaltWrappers[518])
    }
    (605371 'move' ret[605361](605370 'deref' willOverFlow[121613]))
    gotoReturn _end_chpl_checkIfRangeIterWillOverflow[605359] _end_chpl_checkIfRangeIterWillOverflow[605359]
    (552484 'end of statement' willOverFlow[121613])
    label _end_chpl_checkIfRangeIterWillOverflow[605359]
    (605363 return ret[605361])
  }
  function range[240](?).checkIfIterWillOverflow[121788](arg _mt[121798]:_MT[201], arg this[121791]:range[240](?) :
  range[240](?), arg shouldHalt[121795] :
  1 =
  1) : _unknown[42] "method"
  {
    unknown ret[605377] "RVV" "temp"
    unknown call_tmp[799021] "expr temp" "maybe param" "maybe type" "temp"
    (799024 'move' call_tmp[799021](428364 call idxType _mt[203] this[121791]))
    unknown call_tmp[799026] "expr temp" "maybe param" "maybe type" "temp"
    (799029 'move' call_tmp[799026](121805 call isFiniteIdxType call_tmp[799021]))
    unknown call_tmp[799031] "expr temp" "maybe param" "maybe type" "temp"
    (799034 'move' call_tmp[799031](121807 call _cond_test call_tmp[799026]))
    if call_tmp[799031]
    {
      (605382 'move' ret[605377](605381 'deref' 0))
      gotoReturn _end_checkIfIterWillOverflow[605375] _end_checkIfIterWillOverflow[605375]
    }
    unknown call_tmp[799038] "expr temp" "maybe param" "maybe type" "temp"
    (799041 'move' call_tmp[799038](121816 call chpl_integralIdxType _mt[203] this[121791]))
    unknown call_tmp[799045] "expr temp" "maybe param" "maybe type" "temp"
    (799048 'move' call_tmp[799045](121820 call _low _mt[203] this[121791]))
    unknown call_tmp[799052] "expr temp" "maybe param" "maybe type" "temp"
    (799055 'move' call_tmp[799052](121824 call _high _mt[203] this[121791]))
    unknown call_tmp[799059] "expr temp" "maybe param" "maybe type" "temp"
    (799062 'move' call_tmp[799059](121828 call stride _mt[203] this[121791]))
    unknown call_tmp[799066] "expr temp" "maybe param" "maybe type" "temp"
    (799069 'move' call_tmp[799066](121834 call chpl_firstAsIntForIter _mt[203] this[121791]))
    unknown call_tmp[799073] "expr temp" "maybe param" "maybe type" "temp"
    (799076 'move' call_tmp[799073](121840 call chpl_lastAsIntForIter _mt[203] this[121791]))
    unknown call_tmp[799078] "expr temp" "maybe param" "maybe type" "temp"
    (799081 'move' call_tmp[799078](121814 call chpl_checkIfRangeIterWillOverflow call_tmp[799038] call_tmp[799045] call_tmp[799052] call_tmp[799059] call_tmp[799066] call_tmp[799073] shouldHalt[121795]))
    (605387 'move' ret[605377](605386 'deref' call_tmp[799078]))
    label _end_checkIfIterWillOverflow[605375]
    (605379 return ret[605377])
  }
  function chpl_direct_range_iter[121846](param arg low[121849]:integral[159](?), param arg high[121853]:integral[159](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605391] "RVV" "temp"
    unknown idxType[121858] "dead at end of block" "insert auto destroy" "type variable"
    (645517 'move' idxType[121858](645514 call computeParamRangeIndexType low[121849] high[121853]))
    (552488 'end of statement')
    {
      unknown _indexOfInterest[121883] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121884] "expr temp" "temp"
      unknown call_tmp[799083] "expr temp" "maybe param" "maybe type" "temp"
      (799086 'move' call_tmp[799083](121868 call : low[121849] idxType[121858]))
      unknown call_tmp[799088] "expr temp" "maybe param" "maybe type" "temp"
      (799091 'move' call_tmp[799088](121872 call : high[121853] idxType[121858]))
      unknown call_tmp[799093] "expr temp" "maybe param" "maybe type" "temp"
      (799096 'move' call_tmp[799093](121876 call : 1 idxType[121858]))
      unknown call_tmp[799098] "expr temp" "maybe param" "maybe type" "temp"
      (799101 'move' call_tmp[799098](121867 call chpl_direct_param_stride_range_iter call_tmp[799083] call_tmp[799088] call_tmp[799093]))
      (121893 'move' _iterator[121884](121891 call _getIterator call_tmp[799098]))
      Defer
      {
        {
          (121908 call _freeIterator _iterator[121884])
        }
      }
      { scopeless type
        (121898 'move' _indexOfInterest[121883](121895 call iteratorIndex _iterator[121884]))
      }
      ForLoop[121885]
      {
        unknown i[121864] "index var" "insert auto destroy"
        (552490 'end of statement')
        (121903 'move' i[121864] _indexOfInterest[121883])
        (552491 'end of statement' i[121864])
        unknown yret[605395] "YVV" "temp"
        (605398 'move' yret[605395](605397 'deref' i[121864]))
        (121880 yield yret[605395])
        (552493 'end of statement' i[121864])
        label _continueLabel[121888]
        _indexOfInterest[121883]
        _iterator[121884]
      }
      label _breakLabel[121889]
    }
    (605393 return ret[605391])
  }
  function chpl_direct_range_iter[121917](arg low[121922] :
  (121920 call int(64)[10] 8), arg high[121928] :
  (121926 call int(64)[10] 8)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605403] "RVV" "temp"
    {
      unknown _indexOfInterest[121947] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121948] "expr temp" "temp"
      unknown call_tmp[799103] "expr temp" "maybe param" "maybe type" "temp"
      (799106 'move' call_tmp[799103](121942 call int(64)[10] 8))
      unknown call_tmp[799108] "expr temp" "maybe param" "maybe type" "temp"
      (799111 'move' call_tmp[799108](121938 call : 1 call_tmp[799103]))
      unknown call_tmp[799113] "expr temp" "maybe param" "maybe type" "temp"
      (799116 'move' call_tmp[799113](121935 call chpl_direct_param_stride_range_iter low[121922] high[121928] call_tmp[799108]))
      (121957 'move' _iterator[121948](121955 call _getIterator call_tmp[799113]))
      Defer
      {
        {
          (121972 call _freeIterator _iterator[121948])
        }
      }
      { scopeless type
        (121962 'move' _indexOfInterest[121947](121959 call iteratorIndex _iterator[121948]))
      }
      ForLoop[121949]
      {
        unknown i[121932] "index var" "insert auto destroy"
        (552496 'end of statement')
        (121967 'move' i[121932] _indexOfInterest[121947])
        (552497 'end of statement' i[121932])
        unknown yret[605407] "YVV" "temp"
        (605410 'move' yret[605407](605409 'deref' i[121932]))
        (121944 yield yret[605407])
        (552499 'end of statement' i[121932])
        label _continueLabel[121952]
        _indexOfInterest[121947]
        _iterator[121948]
      }
      label _breakLabel[121953]
    }
    (605405 return ret[605403])
  }
  function chpl_direct_range_iter[121981](arg low[121986] :
  (121984 call int(64)[10] 16), arg high[121992] :
  (121990 call int(64)[10] 16)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605415] "RVV" "temp"
    {
      unknown _indexOfInterest[122011] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122012] "expr temp" "temp"
      unknown call_tmp[799118] "expr temp" "maybe param" "maybe type" "temp"
      (799121 'move' call_tmp[799118](122006 call int(64)[10] 16))
      unknown call_tmp[799123] "expr temp" "maybe param" "maybe type" "temp"
      (799126 'move' call_tmp[799123](122002 call : 1 call_tmp[799118]))
      unknown call_tmp[799128] "expr temp" "maybe param" "maybe type" "temp"
      (799131 'move' call_tmp[799128](121999 call chpl_direct_param_stride_range_iter low[121986] high[121992] call_tmp[799123]))
      (122021 'move' _iterator[122012](122019 call _getIterator call_tmp[799128]))
      Defer
      {
        {
          (122036 call _freeIterator _iterator[122012])
        }
      }
      { scopeless type
        (122026 'move' _indexOfInterest[122011](122023 call iteratorIndex _iterator[122012]))
      }
      ForLoop[122013]
      {
        unknown i[121996] "index var" "insert auto destroy"
        (552502 'end of statement')
        (122031 'move' i[121996] _indexOfInterest[122011])
        (552503 'end of statement' i[121996])
        unknown yret[605419] "YVV" "temp"
        (605422 'move' yret[605419](605421 'deref' i[121996]))
        (122008 yield yret[605419])
        (552505 'end of statement' i[121996])
        label _continueLabel[122016]
        _indexOfInterest[122011]
        _iterator[122012]
      }
      label _breakLabel[122017]
    }
    (605417 return ret[605415])
  }
  function chpl_direct_range_iter[122045](arg low[122050] :
  (122048 call int(64)[10] 32), arg high[122056] :
  (122054 call int(64)[10] 32)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605427] "RVV" "temp"
    {
      unknown _indexOfInterest[122075] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122076] "expr temp" "temp"
      unknown call_tmp[799133] "expr temp" "maybe param" "maybe type" "temp"
      (799136 'move' call_tmp[799133](122070 call int(64)[10] 32))
      unknown call_tmp[799138] "expr temp" "maybe param" "maybe type" "temp"
      (799141 'move' call_tmp[799138](122066 call : 1 call_tmp[799133]))
      unknown call_tmp[799143] "expr temp" "maybe param" "maybe type" "temp"
      (799146 'move' call_tmp[799143](122063 call chpl_direct_param_stride_range_iter low[122050] high[122056] call_tmp[799138]))
      (122085 'move' _iterator[122076](122083 call _getIterator call_tmp[799143]))
      Defer
      {
        {
          (122100 call _freeIterator _iterator[122076])
        }
      }
      { scopeless type
        (122090 'move' _indexOfInterest[122075](122087 call iteratorIndex _iterator[122076]))
      }
      ForLoop[122077]
      {
        unknown i[122060] "index var" "insert auto destroy"
        (552508 'end of statement')
        (122095 'move' i[122060] _indexOfInterest[122075])
        (552509 'end of statement' i[122060])
        unknown yret[605431] "YVV" "temp"
        (605434 'move' yret[605431](605433 'deref' i[122060]))
        (122072 yield yret[605431])
        (552511 'end of statement' i[122060])
        label _continueLabel[122080]
        _indexOfInterest[122075]
        _iterator[122076]
      }
      label _breakLabel[122081]
    }
    (605429 return ret[605427])
  }
  function chpl_direct_range_iter[122109](arg low[122114] :
  (122112 call int(64)[10] 64), arg high[122120] :
  (122118 call int(64)[10] 64)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605439] "RVV" "temp"
    {
      unknown _indexOfInterest[122139] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122140] "expr temp" "temp"
      unknown call_tmp[799148] "expr temp" "maybe param" "maybe type" "temp"
      (799151 'move' call_tmp[799148](122134 call int(64)[10] 64))
      unknown call_tmp[799153] "expr temp" "maybe param" "maybe type" "temp"
      (799156 'move' call_tmp[799153](122130 call : 1 call_tmp[799148]))
      unknown call_tmp[799158] "expr temp" "maybe param" "maybe type" "temp"
      (799161 'move' call_tmp[799158](122127 call chpl_direct_param_stride_range_iter low[122114] high[122120] call_tmp[799153]))
      (122149 'move' _iterator[122140](122147 call _getIterator call_tmp[799158]))
      Defer
      {
        {
          (122164 call _freeIterator _iterator[122140])
        }
      }
      { scopeless type
        (122154 'move' _indexOfInterest[122139](122151 call iteratorIndex _iterator[122140]))
      }
      ForLoop[122141]
      {
        unknown i[122124] "index var" "insert auto destroy"
        (552514 'end of statement')
        (122159 'move' i[122124] _indexOfInterest[122139])
        (552515 'end of statement' i[122124])
        unknown yret[605443] "YVV" "temp"
        (605446 'move' yret[605443](605445 'deref' i[122124]))
        (122136 yield yret[605443])
        (552517 'end of statement' i[122124])
        label _continueLabel[122144]
        _indexOfInterest[122139]
        _iterator[122140]
      }
      label _breakLabel[122145]
    }
    (605441 return ret[605439])
  }
  function chpl_direct_range_iter[122173](arg low[122178] :
  (122176 call uint(64)[86] 8), arg high[122184] :
  (122182 call uint(64)[86] 8)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605451] "RVV" "temp"
    {
      unknown _indexOfInterest[122203] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122204] "expr temp" "temp"
      unknown call_tmp[799163] "expr temp" "maybe param" "maybe type" "temp"
      (799166 'move' call_tmp[799163](122198 call uint(64)[86] 8))
      unknown call_tmp[799168] "expr temp" "maybe param" "maybe type" "temp"
      (799171 'move' call_tmp[799168](122194 call : 1 call_tmp[799163]))
      unknown call_tmp[799173] "expr temp" "maybe param" "maybe type" "temp"
      (799176 'move' call_tmp[799173](122191 call chpl_direct_param_stride_range_iter low[122178] high[122184] call_tmp[799168]))
      (122213 'move' _iterator[122204](122211 call _getIterator call_tmp[799173]))
      Defer
      {
        {
          (122228 call _freeIterator _iterator[122204])
        }
      }
      { scopeless type
        (122218 'move' _indexOfInterest[122203](122215 call iteratorIndex _iterator[122204]))
      }
      ForLoop[122205]
      {
        unknown i[122188] "index var" "insert auto destroy"
        (552520 'end of statement')
        (122223 'move' i[122188] _indexOfInterest[122203])
        (552521 'end of statement' i[122188])
        unknown yret[605455] "YVV" "temp"
        (605458 'move' yret[605455](605457 'deref' i[122188]))
        (122200 yield yret[605455])
        (552523 'end of statement' i[122188])
        label _continueLabel[122208]
        _indexOfInterest[122203]
        _iterator[122204]
      }
      label _breakLabel[122209]
    }
    (605453 return ret[605451])
  }
  function chpl_direct_range_iter[122237](arg low[122242] :
  (122240 call uint(64)[86] 16), arg high[122248] :
  (122246 call uint(64)[86] 16)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605463] "RVV" "temp"
    {
      unknown _indexOfInterest[122267] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122268] "expr temp" "temp"
      unknown call_tmp[799178] "expr temp" "maybe param" "maybe type" "temp"
      (799181 'move' call_tmp[799178](122262 call uint(64)[86] 16))
      unknown call_tmp[799183] "expr temp" "maybe param" "maybe type" "temp"
      (799186 'move' call_tmp[799183](122258 call : 1 call_tmp[799178]))
      unknown call_tmp[799188] "expr temp" "maybe param" "maybe type" "temp"
      (799191 'move' call_tmp[799188](122255 call chpl_direct_param_stride_range_iter low[122242] high[122248] call_tmp[799183]))
      (122277 'move' _iterator[122268](122275 call _getIterator call_tmp[799188]))
      Defer
      {
        {
          (122292 call _freeIterator _iterator[122268])
        }
      }
      { scopeless type
        (122282 'move' _indexOfInterest[122267](122279 call iteratorIndex _iterator[122268]))
      }
      ForLoop[122269]
      {
        unknown i[122252] "index var" "insert auto destroy"
        (552526 'end of statement')
        (122287 'move' i[122252] _indexOfInterest[122267])
        (552527 'end of statement' i[122252])
        unknown yret[605467] "YVV" "temp"
        (605470 'move' yret[605467](605469 'deref' i[122252]))
        (122264 yield yret[605467])
        (552529 'end of statement' i[122252])
        label _continueLabel[122272]
        _indexOfInterest[122267]
        _iterator[122268]
      }
      label _breakLabel[122273]
    }
    (605465 return ret[605463])
  }
  function chpl_direct_range_iter[122301](arg low[122306] :
  (122304 call uint(64)[86] 32), arg high[122312] :
  (122310 call uint(64)[86] 32)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605475] "RVV" "temp"
    {
      unknown _indexOfInterest[122331] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122332] "expr temp" "temp"
      unknown call_tmp[799193] "expr temp" "maybe param" "maybe type" "temp"
      (799196 'move' call_tmp[799193](122326 call uint(64)[86] 32))
      unknown call_tmp[799198] "expr temp" "maybe param" "maybe type" "temp"
      (799201 'move' call_tmp[799198](122322 call : 1 call_tmp[799193]))
      unknown call_tmp[799203] "expr temp" "maybe param" "maybe type" "temp"
      (799206 'move' call_tmp[799203](122319 call chpl_direct_param_stride_range_iter low[122306] high[122312] call_tmp[799198]))
      (122341 'move' _iterator[122332](122339 call _getIterator call_tmp[799203]))
      Defer
      {
        {
          (122356 call _freeIterator _iterator[122332])
        }
      }
      { scopeless type
        (122346 'move' _indexOfInterest[122331](122343 call iteratorIndex _iterator[122332]))
      }
      ForLoop[122333]
      {
        unknown i[122316] "index var" "insert auto destroy"
        (552532 'end of statement')
        (122351 'move' i[122316] _indexOfInterest[122331])
        (552533 'end of statement' i[122316])
        unknown yret[605479] "YVV" "temp"
        (605482 'move' yret[605479](605481 'deref' i[122316]))
        (122328 yield yret[605479])
        (552535 'end of statement' i[122316])
        label _continueLabel[122336]
        _indexOfInterest[122331]
        _iterator[122332]
      }
      label _breakLabel[122337]
    }
    (605477 return ret[605475])
  }
  function chpl_direct_range_iter[122365](arg low[122370] :
  (122368 call uint(64)[86] 64), arg high[122376] :
  (122374 call uint(64)[86] 64)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605487] "RVV" "temp"
    {
      unknown _indexOfInterest[122395] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122396] "expr temp" "temp"
      unknown call_tmp[799208] "expr temp" "maybe param" "maybe type" "temp"
      (799211 'move' call_tmp[799208](122390 call uint(64)[86] 64))
      unknown call_tmp[799213] "expr temp" "maybe param" "maybe type" "temp"
      (799216 'move' call_tmp[799213](122386 call : 1 call_tmp[799208]))
      unknown call_tmp[799218] "expr temp" "maybe param" "maybe type" "temp"
      (799221 'move' call_tmp[799218](122383 call chpl_direct_param_stride_range_iter low[122370] high[122376] call_tmp[799213]))
      (122405 'move' _iterator[122396](122403 call _getIterator call_tmp[799218]))
      Defer
      {
        {
          (122420 call _freeIterator _iterator[122396])
        }
      }
      { scopeless type
        (122410 'move' _indexOfInterest[122395](122407 call iteratorIndex _iterator[122396]))
      }
      ForLoop[122397]
      {
        unknown i[122380] "index var" "insert auto destroy"
        (552538 'end of statement')
        (122415 'move' i[122380] _indexOfInterest[122395])
        (552539 'end of statement' i[122380])
        unknown yret[605491] "YVV" "temp"
        (605494 'move' yret[605491](605493 'deref' i[122380]))
        (122392 yield yret[605491])
        (552541 'end of statement' i[122380])
        label _continueLabel[122400]
        _indexOfInterest[122395]
        _iterator[122396]
      }
      label _breakLabel[122401]
    }
    (605489 return ret[605487])
  }
  function chpl_direct_range_iter[122429](arg low[122432]:enum[147](?), arg high[122436]:enum[147](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605499] "RVV" "temp"
    unknown call_tmp[799223] "maybe param" "maybe type" "temp"
    (799226 'move' call_tmp[799223](122444 call chpl_build_bounded_range low[122432] high[122436]))
    const r[122441] "dead at end of block" "const" "insert auto destroy"
    (645519 'init var' r[122441] call_tmp[799223])
    (122447 'end of statement')
    {
      unknown _indexOfInterest[122454] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122455] "expr temp" "temp"
      (122464 'move' _iterator[122455](122462 call _getIterator r[122441]))
      Defer
      {
        {
          (122479 call _freeIterator _iterator[122455])
        }
      }
      { scopeless type
        (122469 'move' _indexOfInterest[122454](122466 call iteratorIndex _iterator[122455]))
      }
      ForLoop[122456]
      {
        unknown i[122448] "index var" "insert auto destroy"
        (552544 'end of statement')
        (122474 'move' i[122448] _indexOfInterest[122454])
        (552545 'end of statement' i[122448])
        unknown yret[605503] "YVV" "temp"
        (605506 'move' yret[605503](605505 'deref' i[122448]))
        (122451 yield yret[605503])
        (552547 'end of statement' i[122448])
        label _continueLabel[122459]
        _indexOfInterest[122454]
        _iterator[122455]
      }
      label _breakLabel[122460]
    }
    (605501 return ret[605499])
  }
  function chpl_direct_range_iter[122488](arg low[122491]:bool[19], arg high[122495]:bool[19]) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605511] "RVV" "temp"
    unknown call_tmp[799228] "maybe param" "maybe type" "temp"
    (799231 'move' call_tmp[799228](122503 call chpl_build_bounded_range low[122491] high[122495]))
    const r[122500] "dead at end of block" "const" "insert auto destroy"
    (645521 'init var' r[122500] call_tmp[799228])
    (122506 'end of statement')
    {
      unknown _indexOfInterest[122513] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122514] "expr temp" "temp"
      (122523 'move' _iterator[122514](122521 call _getIterator r[122500]))
      Defer
      {
        {
          (122538 call _freeIterator _iterator[122514])
        }
      }
      { scopeless type
        (122528 'move' _indexOfInterest[122513](122525 call iteratorIndex _iterator[122514]))
      }
      ForLoop[122515]
      {
        unknown i[122507] "index var" "insert auto destroy"
        (552550 'end of statement')
        (122533 'move' i[122507] _indexOfInterest[122513])
        (552551 'end of statement' i[122507])
        unknown yret[605515] "YVV" "temp"
        (605518 'move' yret[605515](605517 'deref' i[122507]))
        (122510 yield yret[605515])
        (552553 'end of statement' i[122507])
        label _continueLabel[122518]
        _indexOfInterest[122513]
        _iterator[122514]
      }
      label _breakLabel[122519]
    }
    (605513 return ret[605511])
  }
  function chpl_direct_range_iter[122547](arg low[122549]:_any[141](?), arg high[122551]:_any[141](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605523] "RVV" "temp"
    (122567 call chpl_build_bounded_range low[122549] high[122551])
    (552555 'end of statement')
    unknown call_tmp[799233] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799236 'move' call_tmp[799233](122584 'typeof' low[122549]))
    unknown call_tmp[799238] "expr temp" "maybe param" "maybe type" "temp"
    (799241 'move' call_tmp[799238](122581 call : call_tmp[799233] string[244]))
    unknown call_tmp[799243] "expr temp" "maybe param" "maybe type" "temp"
    (799246 'move' call_tmp[799243](122578 call + "Ranges defined using bounds of type '" call_tmp[799238]))
    unknown call_tmp[799248] "expr temp" "maybe param" "maybe type" "temp"
    (799251 'move' call_tmp[799248](122576 call + call_tmp[799243] ".."))
    unknown call_tmp[799253] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799256 'move' call_tmp[799253](122590 'typeof' high[122551]))
    unknown call_tmp[799258] "expr temp" "maybe param" "maybe type" "temp"
    (799261 'move' call_tmp[799258](122587 call : call_tmp[799253] string[244]))
    unknown call_tmp[799263] "expr temp" "maybe param" "maybe type" "temp"
    (799266 'move' call_tmp[799263](122574 call + call_tmp[799248] call_tmp[799258]))
    unknown call_tmp[799268] "expr temp" "maybe param" "maybe type" "temp"
    (799271 'move' call_tmp[799268](122572 call + call_tmp[799263] "' are not currently supported"))
    (122571 call compilerError call_tmp[799268])
    (605525 return ret[605523])
  }
  where {
    unknown tmp[485796] "maybe param" "temp"
    unknown call_tmp[799273] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799276 'move' call_tmp[799273](122560 'typeof' low[122549]))
    (485807 'move' tmp[485796](122558 call chpl_isValidRangeIdxType call_tmp[799273]))
    unknown call_tmp[799278] "expr temp" "maybe param" "maybe type" "temp"
    (799281 'move' call_tmp[799278](485809 call _cond_invalid tmp[485796]))
    if call_tmp[799278]
    {
      (485812 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[676618] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[676619] "maybe param" "temp"
    unknown call_tmp[799283] "expr temp" "maybe param" "maybe type" "temp"
    (799286 'move' call_tmp[799283](485797 call isTrue tmp[485796]))
    (676624 'move' tmp[676619](676622 call _cond_test call_tmp[799283]))
    if tmp[676619]
    {
      unknown tmp[676626] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[799288] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (799291 'move' call_tmp[799288](122564 'typeof' high[122551]))
      unknown call_tmp[799293] "expr temp" "maybe param" "maybe type" "temp"
      (799296 'move' call_tmp[799293](122562 call chpl_isValidRangeIdxType call_tmp[799288]))
      (676628 'move' tmp[676626](485800 call isTrue call_tmp[799293]))
      (676633 'move' tmp[676618](676630 '_paramFoldLogical' tmp[676619] tmp[676626]))
    }
    {
      (676638 'move' tmp[676618](676635 '_paramFoldLogical' tmp[676619] 0))
    }
    (122553 call ! tmp[676618])
  }
  function chpl_direct_strided_range_iter[122596](param arg low[122599]:integral[159](?), param arg high[122603]:integral[159](?), arg stride[122607]:integral[159](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605529] "RVV" "temp"
    unknown idxType[122612] "dead at end of block" "insert auto destroy" "type variable"
    (645527 'move' idxType[122612](645524 call computeParamRangeIndexType low[122599] high[122603]))
    unknown call_tmp[799298] "expr temp" "maybe param" "maybe type" "temp"
    (799301 'move' call_tmp[799298](122622 call : low[122599] idxType[122612]))
    unknown call_tmp[799303] "expr temp" "maybe param" "maybe type" "temp"
    (799306 'move' call_tmp[799303](122626 call : high[122603] idxType[122612]))
    unknown call_tmp[799308] "expr temp" "maybe param" "maybe type" "temp"
    (799311 'move' call_tmp[799308](122630 call chpl_build_bounded_range call_tmp[799298] call_tmp[799303]))
    unknown call_tmp[799313] "maybe param" "maybe type" "temp"
    (799316 'move' call_tmp[799313](122620 call chpl_by call_tmp[799308] stride[122607]))
    const r[122619] "dead at end of block" "const" "insert auto destroy"
    (645529 'init var' r[122619] call_tmp[799313])
    (122634 'end of statement' idxType[122612])
    {
      unknown _indexOfInterest[122641] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122642] "expr temp" "temp"
      (122651 'move' _iterator[122642](122649 call _getIterator r[122619]))
      Defer
      {
        {
          (122666 call _freeIterator _iterator[122642])
        }
      }
      { scopeless type
        (122656 'move' _indexOfInterest[122641](122653 call iteratorIndex _iterator[122642]))
      }
      ForLoop[122643]
      {
        unknown i[122635] "index var" "insert auto destroy"
        (552559 'end of statement')
        (122661 'move' i[122635] _indexOfInterest[122641])
        (552560 'end of statement' i[122635])
        unknown yret[605533] "YVV" "temp"
        (605536 'move' yret[605533](605535 'deref' i[122635]))
        (122638 yield yret[605533])
        (552562 'end of statement' i[122635])
        label _continueLabel[122646]
        _indexOfInterest[122641]
        _iterator[122642]
      }
      label _breakLabel[122647]
    }
    (605531 return ret[605529])
  }
  function chpl_direct_strided_range_iter[122675](arg low[122680] :
  (122678 call int(64)[10] 8), arg high[122686] :
  (122684 call int(64)[10] 8), arg stride[122690]:integral[159](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605541] "RVV" "temp"
    unknown call_tmp[799318] "expr temp" "maybe param" "maybe type" "temp"
    (799321 'move' call_tmp[799318](122700 call chpl_build_bounded_range low[122680] high[122686]))
    unknown call_tmp[799323] "maybe param" "maybe type" "temp"
    (799326 'move' call_tmp[799323](122696 call chpl_by call_tmp[799318] stride[122690]))
    const r[122695] "dead at end of block" "const" "insert auto destroy"
    (645531 'init var' r[122695] call_tmp[799323])
    (122704 'end of statement')
    {
      unknown _indexOfInterest[122711] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122712] "expr temp" "temp"
      (122721 'move' _iterator[122712](122719 call _getIterator r[122695]))
      Defer
      {
        {
          (122736 call _freeIterator _iterator[122712])
        }
      }
      { scopeless type
        (122726 'move' _indexOfInterest[122711](122723 call iteratorIndex _iterator[122712]))
      }
      ForLoop[122713]
      {
        unknown i[122705] "index var" "insert auto destroy"
        (552565 'end of statement')
        (122731 'move' i[122705] _indexOfInterest[122711])
        (552566 'end of statement' i[122705])
        unknown yret[605545] "YVV" "temp"
        (605548 'move' yret[605545](605547 'deref' i[122705]))
        (122708 yield yret[605545])
        (552568 'end of statement' i[122705])
        label _continueLabel[122716]
        _indexOfInterest[122711]
        _iterator[122712]
      }
      label _breakLabel[122717]
    }
    (605543 return ret[605541])
  }
  function chpl_direct_strided_range_iter[122745](arg low[122750] :
  (122748 call int(64)[10] 16), arg high[122756] :
  (122754 call int(64)[10] 16), arg stride[122760]:integral[159](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605553] "RVV" "temp"
    unknown call_tmp[799328] "expr temp" "maybe param" "maybe type" "temp"
    (799331 'move' call_tmp[799328](122770 call chpl_build_bounded_range low[122750] high[122756]))
    unknown call_tmp[799333] "maybe param" "maybe type" "temp"
    (799336 'move' call_tmp[799333](122766 call chpl_by call_tmp[799328] stride[122760]))
    const r[122765] "dead at end of block" "const" "insert auto destroy"
    (645533 'init var' r[122765] call_tmp[799333])
    (122774 'end of statement')
    {
      unknown _indexOfInterest[122781] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122782] "expr temp" "temp"
      (122791 'move' _iterator[122782](122789 call _getIterator r[122765]))
      Defer
      {
        {
          (122806 call _freeIterator _iterator[122782])
        }
      }
      { scopeless type
        (122796 'move' _indexOfInterest[122781](122793 call iteratorIndex _iterator[122782]))
      }
      ForLoop[122783]
      {
        unknown i[122775] "index var" "insert auto destroy"
        (552571 'end of statement')
        (122801 'move' i[122775] _indexOfInterest[122781])
        (552572 'end of statement' i[122775])
        unknown yret[605557] "YVV" "temp"
        (605560 'move' yret[605557](605559 'deref' i[122775]))
        (122778 yield yret[605557])
        (552574 'end of statement' i[122775])
        label _continueLabel[122786]
        _indexOfInterest[122781]
        _iterator[122782]
      }
      label _breakLabel[122787]
    }
    (605555 return ret[605553])
  }
  function chpl_direct_strided_range_iter[122815](arg low[122820] :
  (122818 call int(64)[10] 32), arg high[122826] :
  (122824 call int(64)[10] 32), arg stride[122830]:integral[159](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605565] "RVV" "temp"
    unknown call_tmp[799338] "expr temp" "maybe param" "maybe type" "temp"
    (799341 'move' call_tmp[799338](122840 call chpl_build_bounded_range low[122820] high[122826]))
    unknown call_tmp[799343] "maybe param" "maybe type" "temp"
    (799346 'move' call_tmp[799343](122836 call chpl_by call_tmp[799338] stride[122830]))
    const r[122835] "dead at end of block" "const" "insert auto destroy"
    (645535 'init var' r[122835] call_tmp[799343])
    (122844 'end of statement')
    {
      unknown _indexOfInterest[122851] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122852] "expr temp" "temp"
      (122861 'move' _iterator[122852](122859 call _getIterator r[122835]))
      Defer
      {
        {
          (122876 call _freeIterator _iterator[122852])
        }
      }
      { scopeless type
        (122866 'move' _indexOfInterest[122851](122863 call iteratorIndex _iterator[122852]))
      }
      ForLoop[122853]
      {
        unknown i[122845] "index var" "insert auto destroy"
        (552577 'end of statement')
        (122871 'move' i[122845] _indexOfInterest[122851])
        (552578 'end of statement' i[122845])
        unknown yret[605569] "YVV" "temp"
        (605572 'move' yret[605569](605571 'deref' i[122845]))
        (122848 yield yret[605569])
        (552580 'end of statement' i[122845])
        label _continueLabel[122856]
        _indexOfInterest[122851]
        _iterator[122852]
      }
      label _breakLabel[122857]
    }
    (605567 return ret[605565])
  }
  function chpl_direct_strided_range_iter[122885](arg low[122890] :
  (122888 call int(64)[10] 64), arg high[122896] :
  (122894 call int(64)[10] 64), arg stride[122900]:integral[159](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605577] "RVV" "temp"
    unknown call_tmp[799348] "expr temp" "maybe param" "maybe type" "temp"
    (799351 'move' call_tmp[799348](122910 call chpl_build_bounded_range low[122890] high[122896]))
    unknown call_tmp[799353] "maybe param" "maybe type" "temp"
    (799356 'move' call_tmp[799353](122906 call chpl_by call_tmp[799348] stride[122900]))
    const r[122905] "dead at end of block" "const" "insert auto destroy"
    (645537 'init var' r[122905] call_tmp[799353])
    (122914 'end of statement')
    {
      unknown _indexOfInterest[122921] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122922] "expr temp" "temp"
      (122931 'move' _iterator[122922](122929 call _getIterator r[122905]))
      Defer
      {
        {
          (122946 call _freeIterator _iterator[122922])
        }
      }
      { scopeless type
        (122936 'move' _indexOfInterest[122921](122933 call iteratorIndex _iterator[122922]))
      }
      ForLoop[122923]
      {
        unknown i[122915] "index var" "insert auto destroy"
        (552583 'end of statement')
        (122941 'move' i[122915] _indexOfInterest[122921])
        (552584 'end of statement' i[122915])
        unknown yret[605581] "YVV" "temp"
        (605584 'move' yret[605581](605583 'deref' i[122915]))
        (122918 yield yret[605581])
        (552586 'end of statement' i[122915])
        label _continueLabel[122926]
        _indexOfInterest[122921]
        _iterator[122922]
      }
      label _breakLabel[122927]
    }
    (605579 return ret[605577])
  }
  function chpl_direct_strided_range_iter[122955](arg low[122960] :
  (122958 call uint(64)[86] 8), arg high[122966] :
  (122964 call uint(64)[86] 8), arg stride[122970]:integral[159](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605589] "RVV" "temp"
    unknown call_tmp[799358] "expr temp" "maybe param" "maybe type" "temp"
    (799361 'move' call_tmp[799358](122980 call chpl_build_bounded_range low[122960] high[122966]))
    unknown call_tmp[799363] "maybe param" "maybe type" "temp"
    (799366 'move' call_tmp[799363](122976 call chpl_by call_tmp[799358] stride[122970]))
    const r[122975] "dead at end of block" "const" "insert auto destroy"
    (645539 'init var' r[122975] call_tmp[799363])
    (122984 'end of statement')
    {
      unknown _indexOfInterest[122991] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122992] "expr temp" "temp"
      (123001 'move' _iterator[122992](122999 call _getIterator r[122975]))
      Defer
      {
        {
          (123016 call _freeIterator _iterator[122992])
        }
      }
      { scopeless type
        (123006 'move' _indexOfInterest[122991](123003 call iteratorIndex _iterator[122992]))
      }
      ForLoop[122993]
      {
        unknown i[122985] "index var" "insert auto destroy"
        (552589 'end of statement')
        (123011 'move' i[122985] _indexOfInterest[122991])
        (552590 'end of statement' i[122985])
        unknown yret[605593] "YVV" "temp"
        (605596 'move' yret[605593](605595 'deref' i[122985]))
        (122988 yield yret[605593])
        (552592 'end of statement' i[122985])
        label _continueLabel[122996]
        _indexOfInterest[122991]
        _iterator[122992]
      }
      label _breakLabel[122997]
    }
    (605591 return ret[605589])
  }
  function chpl_direct_strided_range_iter[123025](arg low[123030] :
  (123028 call uint(64)[86] 16), arg high[123036] :
  (123034 call uint(64)[86] 16), arg stride[123040]:integral[159](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605601] "RVV" "temp"
    unknown call_tmp[799368] "expr temp" "maybe param" "maybe type" "temp"
    (799371 'move' call_tmp[799368](123050 call chpl_build_bounded_range low[123030] high[123036]))
    unknown call_tmp[799373] "maybe param" "maybe type" "temp"
    (799376 'move' call_tmp[799373](123046 call chpl_by call_tmp[799368] stride[123040]))
    const r[123045] "dead at end of block" "const" "insert auto destroy"
    (645541 'init var' r[123045] call_tmp[799373])
    (123054 'end of statement')
    {
      unknown _indexOfInterest[123061] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123062] "expr temp" "temp"
      (123071 'move' _iterator[123062](123069 call _getIterator r[123045]))
      Defer
      {
        {
          (123086 call _freeIterator _iterator[123062])
        }
      }
      { scopeless type
        (123076 'move' _indexOfInterest[123061](123073 call iteratorIndex _iterator[123062]))
      }
      ForLoop[123063]
      {
        unknown i[123055] "index var" "insert auto destroy"
        (552595 'end of statement')
        (123081 'move' i[123055] _indexOfInterest[123061])
        (552596 'end of statement' i[123055])
        unknown yret[605605] "YVV" "temp"
        (605608 'move' yret[605605](605607 'deref' i[123055]))
        (123058 yield yret[605605])
        (552598 'end of statement' i[123055])
        label _continueLabel[123066]
        _indexOfInterest[123061]
        _iterator[123062]
      }
      label _breakLabel[123067]
    }
    (605603 return ret[605601])
  }
  function chpl_direct_strided_range_iter[123095](arg low[123100] :
  (123098 call uint(64)[86] 32), arg high[123106] :
  (123104 call uint(64)[86] 32), arg stride[123110]:integral[159](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605613] "RVV" "temp"
    unknown call_tmp[799378] "expr temp" "maybe param" "maybe type" "temp"
    (799381 'move' call_tmp[799378](123120 call chpl_build_bounded_range low[123100] high[123106]))
    unknown call_tmp[799383] "maybe param" "maybe type" "temp"
    (799386 'move' call_tmp[799383](123116 call chpl_by call_tmp[799378] stride[123110]))
    const r[123115] "dead at end of block" "const" "insert auto destroy"
    (645543 'init var' r[123115] call_tmp[799383])
    (123124 'end of statement')
    {
      unknown _indexOfInterest[123131] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123132] "expr temp" "temp"
      (123141 'move' _iterator[123132](123139 call _getIterator r[123115]))
      Defer
      {
        {
          (123156 call _freeIterator _iterator[123132])
        }
      }
      { scopeless type
        (123146 'move' _indexOfInterest[123131](123143 call iteratorIndex _iterator[123132]))
      }
      ForLoop[123133]
      {
        unknown i[123125] "index var" "insert auto destroy"
        (552601 'end of statement')
        (123151 'move' i[123125] _indexOfInterest[123131])
        (552602 'end of statement' i[123125])
        unknown yret[605617] "YVV" "temp"
        (605620 'move' yret[605617](605619 'deref' i[123125]))
        (123128 yield yret[605617])
        (552604 'end of statement' i[123125])
        label _continueLabel[123136]
        _indexOfInterest[123131]
        _iterator[123132]
      }
      label _breakLabel[123137]
    }
    (605615 return ret[605613])
  }
  function chpl_direct_strided_range_iter[123165](arg low[123170] :
  (123168 call uint(64)[86] 64), arg high[123176] :
  (123174 call uint(64)[86] 64), arg stride[123180]:integral[159](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605625] "RVV" "temp"
    unknown call_tmp[799388] "expr temp" "maybe param" "maybe type" "temp"
    (799391 'move' call_tmp[799388](123190 call chpl_build_bounded_range low[123170] high[123176]))
    unknown call_tmp[799393] "maybe param" "maybe type" "temp"
    (799396 'move' call_tmp[799393](123186 call chpl_by call_tmp[799388] stride[123180]))
    const r[123185] "dead at end of block" "const" "insert auto destroy"
    (645545 'init var' r[123185] call_tmp[799393])
    (123194 'end of statement')
    {
      unknown _indexOfInterest[123201] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123202] "expr temp" "temp"
      (123211 'move' _iterator[123202](123209 call _getIterator r[123185]))
      Defer
      {
        {
          (123226 call _freeIterator _iterator[123202])
        }
      }
      { scopeless type
        (123216 'move' _indexOfInterest[123201](123213 call iteratorIndex _iterator[123202]))
      }
      ForLoop[123203]
      {
        unknown i[123195] "index var" "insert auto destroy"
        (552607 'end of statement')
        (123221 'move' i[123195] _indexOfInterest[123201])
        (552608 'end of statement' i[123195])
        unknown yret[605629] "YVV" "temp"
        (605632 'move' yret[605629](605631 'deref' i[123195]))
        (123198 yield yret[605629])
        (552610 'end of statement' i[123195])
        label _continueLabel[123206]
        _indexOfInterest[123201]
        _iterator[123202]
      }
      label _breakLabel[123207]
    }
    (605627 return ret[605625])
  }
  function chpl_direct_strided_range_iter[123235](arg low[123238]:enum[147](?), arg high[123242]:enum[147](?), arg stride[123246]:integral[159](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605637] "RVV" "temp"
    unknown call_tmp[799398] "expr temp" "maybe param" "maybe type" "temp"
    (799401 'move' call_tmp[799398](123256 call chpl_build_bounded_range low[123238] high[123242]))
    unknown call_tmp[799403] "maybe param" "maybe type" "temp"
    (799406 'move' call_tmp[799403](123252 call chpl_by call_tmp[799398] stride[123246]))
    const r[123251] "dead at end of block" "const" "insert auto destroy"
    (645547 'init var' r[123251] call_tmp[799403])
    (123260 'end of statement')
    {
      unknown _indexOfInterest[123267] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123268] "expr temp" "temp"
      (123277 'move' _iterator[123268](123275 call _getIterator r[123251]))
      Defer
      {
        {
          (123292 call _freeIterator _iterator[123268])
        }
      }
      { scopeless type
        (123282 'move' _indexOfInterest[123267](123279 call iteratorIndex _iterator[123268]))
      }
      ForLoop[123269]
      {
        unknown i[123261] "index var" "insert auto destroy"
        (552613 'end of statement')
        (123287 'move' i[123261] _indexOfInterest[123267])
        (552614 'end of statement' i[123261])
        unknown yret[605641] "YVV" "temp"
        (605644 'move' yret[605641](605643 'deref' i[123261]))
        (123264 yield yret[605641])
        (552616 'end of statement' i[123261])
        label _continueLabel[123272]
        _indexOfInterest[123267]
        _iterator[123268]
      }
      label _breakLabel[123273]
    }
    (605639 return ret[605637])
  }
  function chpl_direct_strided_range_iter[123301](arg low[123304]:bool[19], arg high[123308]:bool[19], arg stride[123312]:integral[159](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605649] "RVV" "temp"
    unknown call_tmp[799408] "expr temp" "maybe param" "maybe type" "temp"
    (799411 'move' call_tmp[799408](123322 call chpl_build_bounded_range low[123304] high[123308]))
    unknown call_tmp[799413] "maybe param" "maybe type" "temp"
    (799416 'move' call_tmp[799413](123318 call chpl_by call_tmp[799408] stride[123312]))
    const r[123317] "dead at end of block" "const" "insert auto destroy"
    (645549 'init var' r[123317] call_tmp[799413])
    (123326 'end of statement')
    {
      unknown _indexOfInterest[123333] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123334] "expr temp" "temp"
      (123343 'move' _iterator[123334](123341 call _getIterator r[123317]))
      Defer
      {
        {
          (123358 call _freeIterator _iterator[123334])
        }
      }
      { scopeless type
        (123348 'move' _indexOfInterest[123333](123345 call iteratorIndex _iterator[123334]))
      }
      ForLoop[123335]
      {
        unknown i[123327] "index var" "insert auto destroy"
        (552619 'end of statement')
        (123353 'move' i[123327] _indexOfInterest[123333])
        (552620 'end of statement' i[123327])
        unknown yret[605653] "YVV" "temp"
        (605656 'move' yret[605653](605655 'deref' i[123327]))
        (123330 yield yret[605653])
        (552622 'end of statement' i[123327])
        label _continueLabel[123338]
        _indexOfInterest[123333]
        _iterator[123334]
      }
      label _breakLabel[123339]
    }
    (605651 return ret[605649])
  }
  function chpl_direct_strided_range_iter[123367](param arg low[123370]:integral[159](?), param arg high[123374]:integral[159](?), param arg stride[123378]:integral[159](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605661] "RVV" "temp"
    {
      unknown _indexOfInterest[123392] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123393] "expr temp" "temp"
      unknown call_tmp[799418] "expr temp" "maybe param" "maybe type" "temp"
      (799421 'move' call_tmp[799418](123385 call chpl_direct_param_stride_range_iter low[123370] high[123374] stride[123378]))
      (123402 'move' _iterator[123393](123400 call _getIterator call_tmp[799418]))
      Defer
      {
        {
          (123417 call _freeIterator _iterator[123393])
        }
      }
      { scopeless type
        (123407 'move' _indexOfInterest[123392](123404 call iteratorIndex _iterator[123393]))
      }
      ForLoop[123394]
      {
        unknown i[123382] "index var" "insert auto destroy"
        (552625 'end of statement')
        (123412 'move' i[123382] _indexOfInterest[123392])
        (552626 'end of statement' i[123382])
        unknown yret[605665] "YVV" "temp"
        (605668 'move' yret[605665](605667 'deref' i[123382]))
        (123389 yield yret[605665])
        (552628 'end of statement' i[123382])
        label _continueLabel[123397]
        _indexOfInterest[123392]
        _iterator[123393]
      }
      label _breakLabel[123398]
    }
    (605663 return ret[605661])
  }
  function chpl_direct_strided_range_iter[123426](arg low[123431] :
  (123429 call int(64)[10] 8), arg high[123437] :
  (123435 call int(64)[10] 8), param arg stride[123441]:integral[159](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605673] "RVV" "temp"
    {
      unknown _indexOfInterest[123455] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123456] "expr temp" "temp"
      unknown call_tmp[799423] "expr temp" "maybe param" "maybe type" "temp"
      (799426 'move' call_tmp[799423](123448 call chpl_direct_param_stride_range_iter low[123431] high[123437] stride[123441]))
      (123465 'move' _iterator[123456](123463 call _getIterator call_tmp[799423]))
      Defer
      {
        {
          (123480 call _freeIterator _iterator[123456])
        }
      }
      { scopeless type
        (123470 'move' _indexOfInterest[123455](123467 call iteratorIndex _iterator[123456]))
      }
      ForLoop[123457]
      {
        unknown i[123445] "index var" "insert auto destroy"
        (552631 'end of statement')
        (123475 'move' i[123445] _indexOfInterest[123455])
        (552632 'end of statement' i[123445])
        unknown yret[605677] "YVV" "temp"
        (605680 'move' yret[605677](605679 'deref' i[123445]))
        (123452 yield yret[605677])
        (552634 'end of statement' i[123445])
        label _continueLabel[123460]
        _indexOfInterest[123455]
        _iterator[123456]
      }
      label _breakLabel[123461]
    }
    (605675 return ret[605673])
  }
  function chpl_direct_strided_range_iter[123489](arg low[123494] :
  (123492 call int(64)[10] 16), arg high[123500] :
  (123498 call int(64)[10] 16), param arg stride[123504]:integral[159](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605685] "RVV" "temp"
    {
      unknown _indexOfInterest[123518] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123519] "expr temp" "temp"
      unknown call_tmp[799428] "expr temp" "maybe param" "maybe type" "temp"
      (799431 'move' call_tmp[799428](123511 call chpl_direct_param_stride_range_iter low[123494] high[123500] stride[123504]))
      (123528 'move' _iterator[123519](123526 call _getIterator call_tmp[799428]))
      Defer
      {
        {
          (123543 call _freeIterator _iterator[123519])
        }
      }
      { scopeless type
        (123533 'move' _indexOfInterest[123518](123530 call iteratorIndex _iterator[123519]))
      }
      ForLoop[123520]
      {
        unknown i[123508] "index var" "insert auto destroy"
        (552637 'end of statement')
        (123538 'move' i[123508] _indexOfInterest[123518])
        (552638 'end of statement' i[123508])
        unknown yret[605689] "YVV" "temp"
        (605692 'move' yret[605689](605691 'deref' i[123508]))
        (123515 yield yret[605689])
        (552640 'end of statement' i[123508])
        label _continueLabel[123523]
        _indexOfInterest[123518]
        _iterator[123519]
      }
      label _breakLabel[123524]
    }
    (605687 return ret[605685])
  }
  function chpl_direct_strided_range_iter[123552](arg low[123557] :
  (123555 call int(64)[10] 32), arg high[123563] :
  (123561 call int(64)[10] 32), param arg stride[123567]:integral[159](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605697] "RVV" "temp"
    {
      unknown _indexOfInterest[123581] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123582] "expr temp" "temp"
      unknown call_tmp[799433] "expr temp" "maybe param" "maybe type" "temp"
      (799436 'move' call_tmp[799433](123574 call chpl_direct_param_stride_range_iter low[123557] high[123563] stride[123567]))
      (123591 'move' _iterator[123582](123589 call _getIterator call_tmp[799433]))
      Defer
      {
        {
          (123606 call _freeIterator _iterator[123582])
        }
      }
      { scopeless type
        (123596 'move' _indexOfInterest[123581](123593 call iteratorIndex _iterator[123582]))
      }
      ForLoop[123583]
      {
        unknown i[123571] "index var" "insert auto destroy"
        (552643 'end of statement')
        (123601 'move' i[123571] _indexOfInterest[123581])
        (552644 'end of statement' i[123571])
        unknown yret[605701] "YVV" "temp"
        (605704 'move' yret[605701](605703 'deref' i[123571]))
        (123578 yield yret[605701])
        (552646 'end of statement' i[123571])
        label _continueLabel[123586]
        _indexOfInterest[123581]
        _iterator[123582]
      }
      label _breakLabel[123587]
    }
    (605699 return ret[605697])
  }
  function chpl_direct_strided_range_iter[123615](arg low[123620] :
  (123618 call int(64)[10] 64), arg high[123626] :
  (123624 call int(64)[10] 64), param arg stride[123630]:integral[159](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605709] "RVV" "temp"
    {
      unknown _indexOfInterest[123644] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123645] "expr temp" "temp"
      unknown call_tmp[799438] "expr temp" "maybe param" "maybe type" "temp"
      (799441 'move' call_tmp[799438](123637 call chpl_direct_param_stride_range_iter low[123620] high[123626] stride[123630]))
      (123654 'move' _iterator[123645](123652 call _getIterator call_tmp[799438]))
      Defer
      {
        {
          (123669 call _freeIterator _iterator[123645])
        }
      }
      { scopeless type
        (123659 'move' _indexOfInterest[123644](123656 call iteratorIndex _iterator[123645]))
      }
      ForLoop[123646]
      {
        unknown i[123634] "index var" "insert auto destroy"
        (552649 'end of statement')
        (123664 'move' i[123634] _indexOfInterest[123644])
        (552650 'end of statement' i[123634])
        unknown yret[605713] "YVV" "temp"
        (605716 'move' yret[605713](605715 'deref' i[123634]))
        (123641 yield yret[605713])
        (552652 'end of statement' i[123634])
        label _continueLabel[123649]
        _indexOfInterest[123644]
        _iterator[123645]
      }
      label _breakLabel[123650]
    }
    (605711 return ret[605709])
  }
  function chpl_direct_strided_range_iter[123678](arg low[123683] :
  (123681 call uint(64)[86] 8), arg high[123689] :
  (123687 call uint(64)[86] 8), param arg stride[123693]:integral[159](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605721] "RVV" "temp"
    {
      unknown _indexOfInterest[123707] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123708] "expr temp" "temp"
      unknown call_tmp[799443] "expr temp" "maybe param" "maybe type" "temp"
      (799446 'move' call_tmp[799443](123700 call chpl_direct_param_stride_range_iter low[123683] high[123689] stride[123693]))
      (123717 'move' _iterator[123708](123715 call _getIterator call_tmp[799443]))
      Defer
      {
        {
          (123732 call _freeIterator _iterator[123708])
        }
      }
      { scopeless type
        (123722 'move' _indexOfInterest[123707](123719 call iteratorIndex _iterator[123708]))
      }
      ForLoop[123709]
      {
        unknown i[123697] "index var" "insert auto destroy"
        (552655 'end of statement')
        (123727 'move' i[123697] _indexOfInterest[123707])
        (552656 'end of statement' i[123697])
        unknown yret[605725] "YVV" "temp"
        (605728 'move' yret[605725](605727 'deref' i[123697]))
        (123704 yield yret[605725])
        (552658 'end of statement' i[123697])
        label _continueLabel[123712]
        _indexOfInterest[123707]
        _iterator[123708]
      }
      label _breakLabel[123713]
    }
    (605723 return ret[605721])
  }
  function chpl_direct_strided_range_iter[123741](arg low[123746] :
  (123744 call uint(64)[86] 16), arg high[123752] :
  (123750 call uint(64)[86] 16), param arg stride[123756]:integral[159](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605733] "RVV" "temp"
    {
      unknown _indexOfInterest[123770] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123771] "expr temp" "temp"
      unknown call_tmp[799448] "expr temp" "maybe param" "maybe type" "temp"
      (799451 'move' call_tmp[799448](123763 call chpl_direct_param_stride_range_iter low[123746] high[123752] stride[123756]))
      (123780 'move' _iterator[123771](123778 call _getIterator call_tmp[799448]))
      Defer
      {
        {
          (123795 call _freeIterator _iterator[123771])
        }
      }
      { scopeless type
        (123785 'move' _indexOfInterest[123770](123782 call iteratorIndex _iterator[123771]))
      }
      ForLoop[123772]
      {
        unknown i[123760] "index var" "insert auto destroy"
        (552661 'end of statement')
        (123790 'move' i[123760] _indexOfInterest[123770])
        (552662 'end of statement' i[123760])
        unknown yret[605737] "YVV" "temp"
        (605740 'move' yret[605737](605739 'deref' i[123760]))
        (123767 yield yret[605737])
        (552664 'end of statement' i[123760])
        label _continueLabel[123775]
        _indexOfInterest[123770]
        _iterator[123771]
      }
      label _breakLabel[123776]
    }
    (605735 return ret[605733])
  }
  function chpl_direct_strided_range_iter[123804](arg low[123809] :
  (123807 call uint(64)[86] 32), arg high[123815] :
  (123813 call uint(64)[86] 32), param arg stride[123819]:integral[159](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605745] "RVV" "temp"
    {
      unknown _indexOfInterest[123833] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123834] "expr temp" "temp"
      unknown call_tmp[799453] "expr temp" "maybe param" "maybe type" "temp"
      (799456 'move' call_tmp[799453](123826 call chpl_direct_param_stride_range_iter low[123809] high[123815] stride[123819]))
      (123843 'move' _iterator[123834](123841 call _getIterator call_tmp[799453]))
      Defer
      {
        {
          (123858 call _freeIterator _iterator[123834])
        }
      }
      { scopeless type
        (123848 'move' _indexOfInterest[123833](123845 call iteratorIndex _iterator[123834]))
      }
      ForLoop[123835]
      {
        unknown i[123823] "index var" "insert auto destroy"
        (552667 'end of statement')
        (123853 'move' i[123823] _indexOfInterest[123833])
        (552668 'end of statement' i[123823])
        unknown yret[605749] "YVV" "temp"
        (605752 'move' yret[605749](605751 'deref' i[123823]))
        (123830 yield yret[605749])
        (552670 'end of statement' i[123823])
        label _continueLabel[123838]
        _indexOfInterest[123833]
        _iterator[123834]
      }
      label _breakLabel[123839]
    }
    (605747 return ret[605745])
  }
  function chpl_direct_strided_range_iter[123867](arg low[123872] :
  (123870 call uint(64)[86] 64), arg high[123878] :
  (123876 call uint(64)[86] 64), param arg stride[123882]:integral[159](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605757] "RVV" "temp"
    {
      unknown _indexOfInterest[123896] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123897] "expr temp" "temp"
      unknown call_tmp[799458] "expr temp" "maybe param" "maybe type" "temp"
      (799461 'move' call_tmp[799458](123889 call chpl_direct_param_stride_range_iter low[123872] high[123878] stride[123882]))
      (123906 'move' _iterator[123897](123904 call _getIterator call_tmp[799458]))
      Defer
      {
        {
          (123921 call _freeIterator _iterator[123897])
        }
      }
      { scopeless type
        (123911 'move' _indexOfInterest[123896](123908 call iteratorIndex _iterator[123897]))
      }
      ForLoop[123898]
      {
        unknown i[123886] "index var" "insert auto destroy"
        (552673 'end of statement')
        (123916 'move' i[123886] _indexOfInterest[123896])
        (552674 'end of statement' i[123886])
        unknown yret[605761] "YVV" "temp"
        (605764 'move' yret[605761](605763 'deref' i[123886]))
        (123893 yield yret[605761])
        (552676 'end of statement' i[123886])
        label _continueLabel[123901]
        _indexOfInterest[123896]
        _iterator[123897]
      }
      label _breakLabel[123902]
    }
    (605759 return ret[605757])
  }
  function chpl_direct_strided_range_iter[123930](arg low[123933]:enum[147](?), arg high[123937]:enum[147](?), param arg stride[123941]:integral[159](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605769] "RVV" "temp"
    unknown call_tmp[799463] "expr temp" "maybe param" "maybe type" "temp"
    (799466 'move' call_tmp[799463](124042 call == stride[123941] 1))
    unknown call_tmp[799468] "expr temp" "maybe param" "maybe type" "temp"
    (799471 'move' call_tmp[799468](124046 call _cond_test call_tmp[799463]))
    if call_tmp[799468]
    {
      unknown call_tmp[799473] "maybe param" "maybe type" "temp"
      (799476 'move' call_tmp[799473](123950 call chpl_build_bounded_range low[123933] high[123937]))
      const r[123947] "dead at end of block" "const" "insert auto destroy"
      (645551 'init var' r[123947] call_tmp[799473])
      (123953 'end of statement')
      {
        unknown _indexOfInterest[123960] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[123961] "expr temp" "temp"
        (123970 'move' _iterator[123961](123968 call _getIterator r[123947]))
        Defer
        {
          {
            (123985 call _freeIterator _iterator[123961])
          }
        }
        { scopeless type
          (123975 'move' _indexOfInterest[123960](123972 call iteratorIndex _iterator[123961]))
        }
        ForLoop[123962]
        {
          unknown i[123954] "index var" "insert auto destroy"
          (552679 'end of statement')
          (123980 'move' i[123954] _indexOfInterest[123960])
          (552680 'end of statement' i[123954])
          unknown yret[605773] "YVV" "temp"
          (605776 'move' yret[605773](605775 'deref' i[123954]))
          (123957 yield yret[605773])
          (552682 'end of statement' i[123954])
          label _continueLabel[123965]
          _indexOfInterest[123960]
          _iterator[123961]
        }
        label _breakLabel[123966]
      }
    }
    {
      unknown call_tmp[799478] "expr temp" "maybe param" "maybe type" "temp"
      (799481 'move' call_tmp[799478](123999 call chpl_build_bounded_range low[123933] high[123937]))
      unknown call_tmp[799483] "maybe param" "maybe type" "temp"
      (799486 'move' call_tmp[799483](123995 call chpl_by call_tmp[799478] stride[123941]))
      const r[123994] "dead at end of block" "const" "insert auto destroy"
      (645553 'init var' r[123994] call_tmp[799483])
      (124003 'end of statement')
      {
        unknown _indexOfInterest[124010] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[124011] "expr temp" "temp"
        (124020 'move' _iterator[124011](124018 call _getIterator r[123994]))
        Defer
        {
          {
            (124035 call _freeIterator _iterator[124011])
          }
        }
        { scopeless type
          (124025 'move' _indexOfInterest[124010](124022 call iteratorIndex _iterator[124011]))
        }
        ForLoop[124012]
        {
          unknown i[124004] "index var" "insert auto destroy"
          (552685 'end of statement')
          (124030 'move' i[124004] _indexOfInterest[124010])
          (552686 'end of statement' i[124004])
          unknown yret[605779] "YVV" "temp"
          (605782 'move' yret[605779](605781 'deref' i[124004]))
          (124007 yield yret[605779])
          (552688 'end of statement' i[124004])
          label _continueLabel[124015]
          _indexOfInterest[124010]
          _iterator[124011]
        }
        label _breakLabel[124016]
      }
    }
    (605771 return ret[605769])
  }
  function chpl_direct_strided_range_iter[124052](arg low[124055]:bool[19], arg high[124059]:bool[19], param arg stride[124063]:integral[159](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605787] "RVV" "temp"
    unknown call_tmp[799488] "expr temp" "maybe param" "maybe type" "temp"
    (799491 'move' call_tmp[799488](124164 call == stride[124063] 1))
    unknown call_tmp[799493] "expr temp" "maybe param" "maybe type" "temp"
    (799496 'move' call_tmp[799493](124168 call _cond_test call_tmp[799488]))
    if call_tmp[799493]
    {
      unknown call_tmp[799498] "maybe param" "maybe type" "temp"
      (799501 'move' call_tmp[799498](124072 call chpl_build_bounded_range low[124055] high[124059]))
      const r[124069] "dead at end of block" "const" "insert auto destroy"
      (645555 'init var' r[124069] call_tmp[799498])
      (124075 'end of statement')
      {
        unknown _indexOfInterest[124082] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[124083] "expr temp" "temp"
        (124092 'move' _iterator[124083](124090 call _getIterator r[124069]))
        Defer
        {
          {
            (124107 call _freeIterator _iterator[124083])
          }
        }
        { scopeless type
          (124097 'move' _indexOfInterest[124082](124094 call iteratorIndex _iterator[124083]))
        }
        ForLoop[124084]
        {
          unknown i[124076] "index var" "insert auto destroy"
          (552691 'end of statement')
          (124102 'move' i[124076] _indexOfInterest[124082])
          (552692 'end of statement' i[124076])
          unknown yret[605791] "YVV" "temp"
          (605794 'move' yret[605791](605793 'deref' i[124076]))
          (124079 yield yret[605791])
          (552694 'end of statement' i[124076])
          label _continueLabel[124087]
          _indexOfInterest[124082]
          _iterator[124083]
        }
        label _breakLabel[124088]
      }
    }
    {
      unknown call_tmp[799503] "expr temp" "maybe param" "maybe type" "temp"
      (799506 'move' call_tmp[799503](124121 call chpl_build_bounded_range low[124055] high[124059]))
      unknown call_tmp[799508] "maybe param" "maybe type" "temp"
      (799511 'move' call_tmp[799508](124117 call chpl_by call_tmp[799503] stride[124063]))
      const r[124116] "dead at end of block" "const" "insert auto destroy"
      (645557 'init var' r[124116] call_tmp[799508])
      (124125 'end of statement')
      {
        unknown _indexOfInterest[124132] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[124133] "expr temp" "temp"
        (124142 'move' _iterator[124133](124140 call _getIterator r[124116]))
        Defer
        {
          {
            (124157 call _freeIterator _iterator[124133])
          }
        }
        { scopeless type
          (124147 'move' _indexOfInterest[124132](124144 call iteratorIndex _iterator[124133]))
        }
        ForLoop[124134]
        {
          unknown i[124126] "index var" "insert auto destroy"
          (552697 'end of statement')
          (124152 'move' i[124126] _indexOfInterest[124132])
          (552698 'end of statement' i[124126])
          unknown yret[605797] "YVV" "temp"
          (605800 'move' yret[605797](605799 'deref' i[124126]))
          (124129 yield yret[605797])
          (552700 'end of statement' i[124126])
          label _continueLabel[124137]
          _indexOfInterest[124132]
          _iterator[124133]
        }
        label _breakLabel[124138]
      }
    }
    (605789 return ret[605787])
  }
  function chpl_direct_strided_range_iter[522123](arg low[522129] :
  (522127 call int(64)[10] 8), arg high[522135] :
  (522133 call int(64)[10] 8), arg stride[522142] :
  (522139 call uint(64)[86] 64)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605805] "RVV" "temp"
    {
      unknown _indexOfInterest[522146] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[522148] "expr temp" "temp"
      unknown call_tmp[799513] "expr temp" "maybe param" "maybe type" "temp"
      (799516 'move' call_tmp[799513](522155 call chpl_direct_pos_stride_range_iter low[522129] high[522135] stride[522142]))
      (522150 'move' _iterator[522148](522153 call _getIterator call_tmp[799513]))
      Defer
      {
        {
          (522161 call _freeIterator _iterator[522148])
        }
      }
      { scopeless type
        (522165 'move' _indexOfInterest[522146](522168 call iteratorIndex _iterator[522148]))
      }
      ForLoop[522170]
      {
        unknown i[522173] "index var" "insert auto destroy"
        (552703 'end of statement')
        (522175 'move' i[522173] _indexOfInterest[522146])
        (552704 'end of statement' i[522173])
        unknown yret[605809] "YVV" "temp"
        (605812 'move' yret[605809](605811 'deref' i[522173]))
        (522178 yield yret[605809])
        (552706 'end of statement' i[522173])
        label _continueLabel[522180]
        _indexOfInterest[522146]
        _iterator[522148]
      }
      label _breakLabel[522182]
    }
    (605807 return ret[605805])
  }
  function chpl_direct_strided_range_iter[522060](arg low[522066] :
  (522064 call int(64)[10] 8), arg high[522072] :
  (522070 call int(64)[10] 8), arg stride[522079] :
  (522076 call uint(64)[86] 32)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605817] "RVV" "temp"
    {
      unknown _indexOfInterest[522083] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[522085] "expr temp" "temp"
      unknown call_tmp[799518] "expr temp" "maybe param" "maybe type" "temp"
      (799521 'move' call_tmp[799518](522092 call chpl_direct_pos_stride_range_iter low[522066] high[522072] stride[522079]))
      (522087 'move' _iterator[522085](522090 call _getIterator call_tmp[799518]))
      Defer
      {
        {
          (522098 call _freeIterator _iterator[522085])
        }
      }
      { scopeless type
        (522102 'move' _indexOfInterest[522083](522105 call iteratorIndex _iterator[522085]))
      }
      ForLoop[522107]
      {
        unknown i[522110] "index var" "insert auto destroy"
        (552709 'end of statement')
        (522112 'move' i[522110] _indexOfInterest[522083])
        (552710 'end of statement' i[522110])
        unknown yret[605821] "YVV" "temp"
        (605824 'move' yret[605821](605823 'deref' i[522110]))
        (522115 yield yret[605821])
        (552712 'end of statement' i[522110])
        label _continueLabel[522117]
        _indexOfInterest[522083]
        _iterator[522085]
      }
      label _breakLabel[522119]
    }
    (605819 return ret[605817])
  }
  function chpl_direct_strided_range_iter[521997](arg low[522003] :
  (522001 call int(64)[10] 8), arg high[522009] :
  (522007 call int(64)[10] 8), arg stride[522016] :
  (522013 call uint(64)[86] 16)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605829] "RVV" "temp"
    {
      unknown _indexOfInterest[522020] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[522022] "expr temp" "temp"
      unknown call_tmp[799523] "expr temp" "maybe param" "maybe type" "temp"
      (799526 'move' call_tmp[799523](522029 call chpl_direct_pos_stride_range_iter low[522003] high[522009] stride[522016]))
      (522024 'move' _iterator[522022](522027 call _getIterator call_tmp[799523]))
      Defer
      {
        {
          (522035 call _freeIterator _iterator[522022])
        }
      }
      { scopeless type
        (522039 'move' _indexOfInterest[522020](522042 call iteratorIndex _iterator[522022]))
      }
      ForLoop[522044]
      {
        unknown i[522047] "index var" "insert auto destroy"
        (552715 'end of statement')
        (522049 'move' i[522047] _indexOfInterest[522020])
        (552716 'end of statement' i[522047])
        unknown yret[605833] "YVV" "temp"
        (605836 'move' yret[605833](605835 'deref' i[522047]))
        (522052 yield yret[605833])
        (552718 'end of statement' i[522047])
        label _continueLabel[522054]
        _indexOfInterest[522020]
        _iterator[522022]
      }
      label _breakLabel[522056]
    }
    (605831 return ret[605829])
  }
  function chpl_direct_strided_range_iter[521934](arg low[521940] :
  (521938 call int(64)[10] 8), arg high[521946] :
  (521944 call int(64)[10] 8), arg stride[521953] :
  (521950 call uint(64)[86] 8)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605841] "RVV" "temp"
    {
      unknown _indexOfInterest[521957] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[521959] "expr temp" "temp"
      unknown call_tmp[799528] "expr temp" "maybe param" "maybe type" "temp"
      (799531 'move' call_tmp[799528](521966 call chpl_direct_pos_stride_range_iter low[521940] high[521946] stride[521953]))
      (521961 'move' _iterator[521959](521964 call _getIterator call_tmp[799528]))
      Defer
      {
        {
          (521972 call _freeIterator _iterator[521959])
        }
      }
      { scopeless type
        (521976 'move' _indexOfInterest[521957](521979 call iteratorIndex _iterator[521959]))
      }
      ForLoop[521981]
      {
        unknown i[521984] "index var" "insert auto destroy"
        (552721 'end of statement')
        (521986 'move' i[521984] _indexOfInterest[521957])
        (552722 'end of statement' i[521984])
        unknown yret[605845] "YVV" "temp"
        (605848 'move' yret[605845](605847 'deref' i[521984]))
        (521989 yield yret[605845])
        (552724 'end of statement' i[521984])
        label _continueLabel[521991]
        _indexOfInterest[521957]
        _iterator[521959]
      }
      label _breakLabel[521993]
    }
    (605843 return ret[605841])
  }
  function chpl_direct_strided_range_iter[522375](arg low[522381] :
  (522379 call int(64)[10] 16), arg high[522387] :
  (522385 call int(64)[10] 16), arg stride[522394] :
  (522391 call uint(64)[86] 64)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605853] "RVV" "temp"
    {
      unknown _indexOfInterest[522398] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[522400] "expr temp" "temp"
      unknown call_tmp[799533] "expr temp" "maybe param" "maybe type" "temp"
      (799536 'move' call_tmp[799533](522407 call chpl_direct_pos_stride_range_iter low[522381] high[522387] stride[522394]))
      (522402 'move' _iterator[522400](522405 call _getIterator call_tmp[799533]))
      Defer
      {
        {
          (522413 call _freeIterator _iterator[522400])
        }
      }
      { scopeless type
        (522417 'move' _indexOfInterest[522398](522420 call iteratorIndex _iterator[522400]))
      }
      ForLoop[522422]
      {
        unknown i[522425] "index var" "insert auto destroy"
        (552727 'end of statement')
        (522427 'move' i[522425] _indexOfInterest[522398])
        (552728 'end of statement' i[522425])
        unknown yret[605857] "YVV" "temp"
        (605860 'move' yret[605857](605859 'deref' i[522425]))
        (522430 yield yret[605857])
        (552730 'end of statement' i[522425])
        label _continueLabel[522432]
        _indexOfInterest[522398]
        _iterator[522400]
      }
      label _breakLabel[522434]
    }
    (605855 return ret[605853])
  }
  function chpl_direct_strided_range_iter[522312](arg low[522318] :
  (522316 call int(64)[10] 16), arg high[522324] :
  (522322 call int(64)[10] 16), arg stride[522331] :
  (522328 call uint(64)[86] 32)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605865] "RVV" "temp"
    {
      unknown _indexOfInterest[522335] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[522337] "expr temp" "temp"
      unknown call_tmp[799538] "expr temp" "maybe param" "maybe type" "temp"
      (799541 'move' call_tmp[799538](522344 call chpl_direct_pos_stride_range_iter low[522318] high[522324] stride[522331]))
      (522339 'move' _iterator[522337](522342 call _getIterator call_tmp[799538]))
      Defer
      {
        {
          (522350 call _freeIterator _iterator[522337])
        }
      }
      { scopeless type
        (522354 'move' _indexOfInterest[522335](522357 call iteratorIndex _iterator[522337]))
      }
      ForLoop[522359]
      {
        unknown i[522362] "index var" "insert auto destroy"
        (552733 'end of statement')
        (522364 'move' i[522362] _indexOfInterest[522335])
        (552734 'end of statement' i[522362])
        unknown yret[605869] "YVV" "temp"
        (605872 'move' yret[605869](605871 'deref' i[522362]))
        (522367 yield yret[605869])
        (552736 'end of statement' i[522362])
        label _continueLabel[522369]
        _indexOfInterest[522335]
        _iterator[522337]
      }
      label _breakLabel[522371]
    }
    (605867 return ret[605865])
  }
  function chpl_direct_strided_range_iter[522249](arg low[522255] :
  (522253 call int(64)[10] 16), arg high[522261] :
  (522259 call int(64)[10] 16), arg stride[522268] :
  (522265 call uint(64)[86] 16)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605877] "RVV" "temp"
    {
      unknown _indexOfInterest[522272] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[522274] "expr temp" "temp"
      unknown call_tmp[799543] "expr temp" "maybe param" "maybe type" "temp"
      (799546 'move' call_tmp[799543](522281 call chpl_direct_pos_stride_range_iter low[522255] high[522261] stride[522268]))
      (522276 'move' _iterator[522274](522279 call _getIterator call_tmp[799543]))
      Defer
      {
        {
          (522287 call _freeIterator _iterator[522274])
        }
      }
      { scopeless type
        (522291 'move' _indexOfInterest[522272](522294 call iteratorIndex _iterator[522274]))
      }
      ForLoop[522296]
      {
        unknown i[522299] "index var" "insert auto destroy"
        (552739 'end of statement')
        (522301 'move' i[522299] _indexOfInterest[522272])
        (552740 'end of statement' i[522299])
        unknown yret[605881] "YVV" "temp"
        (605884 'move' yret[605881](605883 'deref' i[522299]))
        (522304 yield yret[605881])
        (552742 'end of statement' i[522299])
        label _continueLabel[522306]
        _indexOfInterest[522272]
        _iterator[522274]
      }
      label _breakLabel[522308]
    }
    (605879 return ret[605877])
  }
  function chpl_direct_strided_range_iter[522186](arg low[522192] :
  (522190 call int(64)[10] 16), arg high[522198] :
  (522196 call int(64)[10] 16), arg stride[522205] :
  (522202 call uint(64)[86] 8)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605889] "RVV" "temp"
    {
      unknown _indexOfInterest[522209] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[522211] "expr temp" "temp"
      unknown call_tmp[799548] "expr temp" "maybe param" "maybe type" "temp"
      (799551 'move' call_tmp[799548](522218 call chpl_direct_pos_stride_range_iter low[522192] high[522198] stride[522205]))
      (522213 'move' _iterator[522211](522216 call _getIterator call_tmp[799548]))
      Defer
      {
        {
          (522224 call _freeIterator _iterator[522211])
        }
      }
      { scopeless type
        (522228 'move' _indexOfInterest[522209](522231 call iteratorIndex _iterator[522211]))
      }
      ForLoop[522233]
      {
        unknown i[522236] "index var" "insert auto destroy"
        (552745 'end of statement')
        (522238 'move' i[522236] _indexOfInterest[522209])
        (552746 'end of statement' i[522236])
        unknown yret[605893] "YVV" "temp"
        (605896 'move' yret[605893](605895 'deref' i[522236]))
        (522241 yield yret[605893])
        (552748 'end of statement' i[522236])
        label _continueLabel[522243]
        _indexOfInterest[522209]
        _iterator[522211]
      }
      label _breakLabel[522245]
    }
    (605891 return ret[605889])
  }
  function chpl_direct_strided_range_iter[522627](arg low[522633] :
  (522631 call int(64)[10] 32), arg high[522639] :
  (522637 call int(64)[10] 32), arg stride[522646] :
  (522643 call uint(64)[86] 64)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605901] "RVV" "temp"
    {
      unknown _indexOfInterest[522650] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[522652] "expr temp" "temp"
      unknown call_tmp[799553] "expr temp" "maybe param" "maybe type" "temp"
      (799556 'move' call_tmp[799553](522659 call chpl_direct_pos_stride_range_iter low[522633] high[522639] stride[522646]))
      (522654 'move' _iterator[522652](522657 call _getIterator call_tmp[799553]))
      Defer
      {
        {
          (522665 call _freeIterator _iterator[522652])
        }
      }
      { scopeless type
        (522669 'move' _indexOfInterest[522650](522672 call iteratorIndex _iterator[522652]))
      }
      ForLoop[522674]
      {
        unknown i[522677] "index var" "insert auto destroy"
        (552751 'end of statement')
        (522679 'move' i[522677] _indexOfInterest[522650])
        (552752 'end of statement' i[522677])
        unknown yret[605905] "YVV" "temp"
        (605908 'move' yret[605905](605907 'deref' i[522677]))
        (522682 yield yret[605905])
        (552754 'end of statement' i[522677])
        label _continueLabel[522684]
        _indexOfInterest[522650]
        _iterator[522652]
      }
      label _breakLabel[522686]
    }
    (605903 return ret[605901])
  }
  function chpl_direct_strided_range_iter[522564](arg low[522570] :
  (522568 call int(64)[10] 32), arg high[522576] :
  (522574 call int(64)[10] 32), arg stride[522583] :
  (522580 call uint(64)[86] 32)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605913] "RVV" "temp"
    {
      unknown _indexOfInterest[522587] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[522589] "expr temp" "temp"
      unknown call_tmp[799558] "expr temp" "maybe param" "maybe type" "temp"
      (799561 'move' call_tmp[799558](522596 call chpl_direct_pos_stride_range_iter low[522570] high[522576] stride[522583]))
      (522591 'move' _iterator[522589](522594 call _getIterator call_tmp[799558]))
      Defer
      {
        {
          (522602 call _freeIterator _iterator[522589])
        }
      }
      { scopeless type
        (522606 'move' _indexOfInterest[522587](522609 call iteratorIndex _iterator[522589]))
      }
      ForLoop[522611]
      {
        unknown i[522614] "index var" "insert auto destroy"
        (552757 'end of statement')
        (522616 'move' i[522614] _indexOfInterest[522587])
        (552758 'end of statement' i[522614])
        unknown yret[605917] "YVV" "temp"
        (605920 'move' yret[605917](605919 'deref' i[522614]))
        (522619 yield yret[605917])
        (552760 'end of statement' i[522614])
        label _continueLabel[522621]
        _indexOfInterest[522587]
        _iterator[522589]
      }
      label _breakLabel[522623]
    }
    (605915 return ret[605913])
  }
  function chpl_direct_strided_range_iter[522501](arg low[522507] :
  (522505 call int(64)[10] 32), arg high[522513] :
  (522511 call int(64)[10] 32), arg stride[522520] :
  (522517 call uint(64)[86] 16)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605925] "RVV" "temp"
    {
      unknown _indexOfInterest[522524] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[522526] "expr temp" "temp"
      unknown call_tmp[799563] "expr temp" "maybe param" "maybe type" "temp"
      (799566 'move' call_tmp[799563](522533 call chpl_direct_pos_stride_range_iter low[522507] high[522513] stride[522520]))
      (522528 'move' _iterator[522526](522531 call _getIterator call_tmp[799563]))
      Defer
      {
        {
          (522539 call _freeIterator _iterator[522526])
        }
      }
      { scopeless type
        (522543 'move' _indexOfInterest[522524](522546 call iteratorIndex _iterator[522526]))
      }
      ForLoop[522548]
      {
        unknown i[522551] "index var" "insert auto destroy"
        (552763 'end of statement')
        (522553 'move' i[522551] _indexOfInterest[522524])
        (552764 'end of statement' i[522551])
        unknown yret[605929] "YVV" "temp"
        (605932 'move' yret[605929](605931 'deref' i[522551]))
        (522556 yield yret[605929])
        (552766 'end of statement' i[522551])
        label _continueLabel[522558]
        _indexOfInterest[522524]
        _iterator[522526]
      }
      label _breakLabel[522560]
    }
    (605927 return ret[605925])
  }
  function chpl_direct_strided_range_iter[522438](arg low[522444] :
  (522442 call int(64)[10] 32), arg high[522450] :
  (522448 call int(64)[10] 32), arg stride[522457] :
  (522454 call uint(64)[86] 8)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605937] "RVV" "temp"
    {
      unknown _indexOfInterest[522461] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[522463] "expr temp" "temp"
      unknown call_tmp[799568] "expr temp" "maybe param" "maybe type" "temp"
      (799571 'move' call_tmp[799568](522470 call chpl_direct_pos_stride_range_iter low[522444] high[522450] stride[522457]))
      (522465 'move' _iterator[522463](522468 call _getIterator call_tmp[799568]))
      Defer
      {
        {
          (522476 call _freeIterator _iterator[522463])
        }
      }
      { scopeless type
        (522480 'move' _indexOfInterest[522461](522483 call iteratorIndex _iterator[522463]))
      }
      ForLoop[522485]
      {
        unknown i[522488] "index var" "insert auto destroy"
        (552769 'end of statement')
        (522490 'move' i[522488] _indexOfInterest[522461])
        (552770 'end of statement' i[522488])
        unknown yret[605941] "YVV" "temp"
        (605944 'move' yret[605941](605943 'deref' i[522488]))
        (522493 yield yret[605941])
        (552772 'end of statement' i[522488])
        label _continueLabel[522495]
        _indexOfInterest[522461]
        _iterator[522463]
      }
      label _breakLabel[522497]
    }
    (605939 return ret[605937])
  }
  function chpl_direct_strided_range_iter[522879](arg low[522885] :
  (522883 call int(64)[10] 64), arg high[522891] :
  (522889 call int(64)[10] 64), arg stride[522898] :
  (522895 call uint(64)[86] 64)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605949] "RVV" "temp"
    {
      unknown _indexOfInterest[522902] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[522904] "expr temp" "temp"
      unknown call_tmp[799573] "expr temp" "maybe param" "maybe type" "temp"
      (799576 'move' call_tmp[799573](522911 call chpl_direct_pos_stride_range_iter low[522885] high[522891] stride[522898]))
      (522906 'move' _iterator[522904](522909 call _getIterator call_tmp[799573]))
      Defer
      {
        {
          (522917 call _freeIterator _iterator[522904])
        }
      }
      { scopeless type
        (522921 'move' _indexOfInterest[522902](522924 call iteratorIndex _iterator[522904]))
      }
      ForLoop[522926]
      {
        unknown i[522929] "index var" "insert auto destroy"
        (552775 'end of statement')
        (522931 'move' i[522929] _indexOfInterest[522902])
        (552776 'end of statement' i[522929])
        unknown yret[605953] "YVV" "temp"
        (605956 'move' yret[605953](605955 'deref' i[522929]))
        (522934 yield yret[605953])
        (552778 'end of statement' i[522929])
        label _continueLabel[522936]
        _indexOfInterest[522902]
        _iterator[522904]
      }
      label _breakLabel[522938]
    }
    (605951 return ret[605949])
  }
  function chpl_direct_strided_range_iter[522816](arg low[522822] :
  (522820 call int(64)[10] 64), arg high[522828] :
  (522826 call int(64)[10] 64), arg stride[522835] :
  (522832 call uint(64)[86] 32)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605961] "RVV" "temp"
    {
      unknown _indexOfInterest[522839] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[522841] "expr temp" "temp"
      unknown call_tmp[799578] "expr temp" "maybe param" "maybe type" "temp"
      (799581 'move' call_tmp[799578](522848 call chpl_direct_pos_stride_range_iter low[522822] high[522828] stride[522835]))
      (522843 'move' _iterator[522841](522846 call _getIterator call_tmp[799578]))
      Defer
      {
        {
          (522854 call _freeIterator _iterator[522841])
        }
      }
      { scopeless type
        (522858 'move' _indexOfInterest[522839](522861 call iteratorIndex _iterator[522841]))
      }
      ForLoop[522863]
      {
        unknown i[522866] "index var" "insert auto destroy"
        (552781 'end of statement')
        (522868 'move' i[522866] _indexOfInterest[522839])
        (552782 'end of statement' i[522866])
        unknown yret[605965] "YVV" "temp"
        (605968 'move' yret[605965](605967 'deref' i[522866]))
        (522871 yield yret[605965])
        (552784 'end of statement' i[522866])
        label _continueLabel[522873]
        _indexOfInterest[522839]
        _iterator[522841]
      }
      label _breakLabel[522875]
    }
    (605963 return ret[605961])
  }
  function chpl_direct_strided_range_iter[522753](arg low[522759] :
  (522757 call int(64)[10] 64), arg high[522765] :
  (522763 call int(64)[10] 64), arg stride[522772] :
  (522769 call uint(64)[86] 16)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605973] "RVV" "temp"
    {
      unknown _indexOfInterest[522776] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[522778] "expr temp" "temp"
      unknown call_tmp[799583] "expr temp" "maybe param" "maybe type" "temp"
      (799586 'move' call_tmp[799583](522785 call chpl_direct_pos_stride_range_iter low[522759] high[522765] stride[522772]))
      (522780 'move' _iterator[522778](522783 call _getIterator call_tmp[799583]))
      Defer
      {
        {
          (522791 call _freeIterator _iterator[522778])
        }
      }
      { scopeless type
        (522795 'move' _indexOfInterest[522776](522798 call iteratorIndex _iterator[522778]))
      }
      ForLoop[522800]
      {
        unknown i[522803] "index var" "insert auto destroy"
        (552787 'end of statement')
        (522805 'move' i[522803] _indexOfInterest[522776])
        (552788 'end of statement' i[522803])
        unknown yret[605977] "YVV" "temp"
        (605980 'move' yret[605977](605979 'deref' i[522803]))
        (522808 yield yret[605977])
        (552790 'end of statement' i[522803])
        label _continueLabel[522810]
        _indexOfInterest[522776]
        _iterator[522778]
      }
      label _breakLabel[522812]
    }
    (605975 return ret[605973])
  }
  function chpl_direct_strided_range_iter[522690](arg low[522696] :
  (522694 call int(64)[10] 64), arg high[522702] :
  (522700 call int(64)[10] 64), arg stride[522709] :
  (522706 call uint(64)[86] 8)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605985] "RVV" "temp"
    {
      unknown _indexOfInterest[522713] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[522715] "expr temp" "temp"
      unknown call_tmp[799588] "expr temp" "maybe param" "maybe type" "temp"
      (799591 'move' call_tmp[799588](522722 call chpl_direct_pos_stride_range_iter low[522696] high[522702] stride[522709]))
      (522717 'move' _iterator[522715](522720 call _getIterator call_tmp[799588]))
      Defer
      {
        {
          (522728 call _freeIterator _iterator[522715])
        }
      }
      { scopeless type
        (522732 'move' _indexOfInterest[522713](522735 call iteratorIndex _iterator[522715]))
      }
      ForLoop[522737]
      {
        unknown i[522740] "index var" "insert auto destroy"
        (552793 'end of statement')
        (522742 'move' i[522740] _indexOfInterest[522713])
        (552794 'end of statement' i[522740])
        unknown yret[605989] "YVV" "temp"
        (605992 'move' yret[605989](605991 'deref' i[522740]))
        (522745 yield yret[605989])
        (552796 'end of statement' i[522740])
        label _continueLabel[522747]
        _indexOfInterest[522713]
        _iterator[522715]
      }
      label _breakLabel[522749]
    }
    (605987 return ret[605985])
  }
  function chpl_direct_strided_range_iter[523131](arg low[523137] :
  (523135 call uint(64)[86] 8), arg high[523143] :
  (523141 call uint(64)[86] 8), arg stride[523150] :
  (523147 call uint(64)[86] 64)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[605997] "RVV" "temp"
    {
      unknown _indexOfInterest[523154] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[523156] "expr temp" "temp"
      unknown call_tmp[799593] "expr temp" "maybe param" "maybe type" "temp"
      (799596 'move' call_tmp[799593](523163 call chpl_direct_pos_stride_range_iter low[523137] high[523143] stride[523150]))
      (523158 'move' _iterator[523156](523161 call _getIterator call_tmp[799593]))
      Defer
      {
        {
          (523169 call _freeIterator _iterator[523156])
        }
      }
      { scopeless type
        (523173 'move' _indexOfInterest[523154](523176 call iteratorIndex _iterator[523156]))
      }
      ForLoop[523178]
      {
        unknown i[523181] "index var" "insert auto destroy"
        (552799 'end of statement')
        (523183 'move' i[523181] _indexOfInterest[523154])
        (552800 'end of statement' i[523181])
        unknown yret[606001] "YVV" "temp"
        (606004 'move' yret[606001](606003 'deref' i[523181]))
        (523186 yield yret[606001])
        (552802 'end of statement' i[523181])
        label _continueLabel[523188]
        _indexOfInterest[523154]
        _iterator[523156]
      }
      label _breakLabel[523190]
    }
    (605999 return ret[605997])
  }
  function chpl_direct_strided_range_iter[523068](arg low[523074] :
  (523072 call uint(64)[86] 8), arg high[523080] :
  (523078 call uint(64)[86] 8), arg stride[523087] :
  (523084 call uint(64)[86] 32)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606009] "RVV" "temp"
    {
      unknown _indexOfInterest[523091] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[523093] "expr temp" "temp"
      unknown call_tmp[799598] "expr temp" "maybe param" "maybe type" "temp"
      (799601 'move' call_tmp[799598](523100 call chpl_direct_pos_stride_range_iter low[523074] high[523080] stride[523087]))
      (523095 'move' _iterator[523093](523098 call _getIterator call_tmp[799598]))
      Defer
      {
        {
          (523106 call _freeIterator _iterator[523093])
        }
      }
      { scopeless type
        (523110 'move' _indexOfInterest[523091](523113 call iteratorIndex _iterator[523093]))
      }
      ForLoop[523115]
      {
        unknown i[523118] "index var" "insert auto destroy"
        (552805 'end of statement')
        (523120 'move' i[523118] _indexOfInterest[523091])
        (552806 'end of statement' i[523118])
        unknown yret[606013] "YVV" "temp"
        (606016 'move' yret[606013](606015 'deref' i[523118]))
        (523123 yield yret[606013])
        (552808 'end of statement' i[523118])
        label _continueLabel[523125]
        _indexOfInterest[523091]
        _iterator[523093]
      }
      label _breakLabel[523127]
    }
    (606011 return ret[606009])
  }
  function chpl_direct_strided_range_iter[523005](arg low[523011] :
  (523009 call uint(64)[86] 8), arg high[523017] :
  (523015 call uint(64)[86] 8), arg stride[523024] :
  (523021 call uint(64)[86] 16)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606021] "RVV" "temp"
    {
      unknown _indexOfInterest[523028] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[523030] "expr temp" "temp"
      unknown call_tmp[799603] "expr temp" "maybe param" "maybe type" "temp"
      (799606 'move' call_tmp[799603](523037 call chpl_direct_pos_stride_range_iter low[523011] high[523017] stride[523024]))
      (523032 'move' _iterator[523030](523035 call _getIterator call_tmp[799603]))
      Defer
      {
        {
          (523043 call _freeIterator _iterator[523030])
        }
      }
      { scopeless type
        (523047 'move' _indexOfInterest[523028](523050 call iteratorIndex _iterator[523030]))
      }
      ForLoop[523052]
      {
        unknown i[523055] "index var" "insert auto destroy"
        (552811 'end of statement')
        (523057 'move' i[523055] _indexOfInterest[523028])
        (552812 'end of statement' i[523055])
        unknown yret[606025] "YVV" "temp"
        (606028 'move' yret[606025](606027 'deref' i[523055]))
        (523060 yield yret[606025])
        (552814 'end of statement' i[523055])
        label _continueLabel[523062]
        _indexOfInterest[523028]
        _iterator[523030]
      }
      label _breakLabel[523064]
    }
    (606023 return ret[606021])
  }
  function chpl_direct_strided_range_iter[522942](arg low[522948] :
  (522946 call uint(64)[86] 8), arg high[522954] :
  (522952 call uint(64)[86] 8), arg stride[522961] :
  (522958 call uint(64)[86] 8)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606033] "RVV" "temp"
    {
      unknown _indexOfInterest[522965] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[522967] "expr temp" "temp"
      unknown call_tmp[799608] "expr temp" "maybe param" "maybe type" "temp"
      (799611 'move' call_tmp[799608](522974 call chpl_direct_pos_stride_range_iter low[522948] high[522954] stride[522961]))
      (522969 'move' _iterator[522967](522972 call _getIterator call_tmp[799608]))
      Defer
      {
        {
          (522980 call _freeIterator _iterator[522967])
        }
      }
      { scopeless type
        (522984 'move' _indexOfInterest[522965](522987 call iteratorIndex _iterator[522967]))
      }
      ForLoop[522989]
      {
        unknown i[522992] "index var" "insert auto destroy"
        (552817 'end of statement')
        (522994 'move' i[522992] _indexOfInterest[522965])
        (552818 'end of statement' i[522992])
        unknown yret[606037] "YVV" "temp"
        (606040 'move' yret[606037](606039 'deref' i[522992]))
        (522997 yield yret[606037])
        (552820 'end of statement' i[522992])
        label _continueLabel[522999]
        _indexOfInterest[522965]
        _iterator[522967]
      }
      label _breakLabel[523001]
    }
    (606035 return ret[606033])
  }
  function chpl_direct_strided_range_iter[523383](arg low[523389] :
  (523387 call uint(64)[86] 16), arg high[523395] :
  (523393 call uint(64)[86] 16), arg stride[523402] :
  (523399 call uint(64)[86] 64)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606045] "RVV" "temp"
    {
      unknown _indexOfInterest[523406] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[523408] "expr temp" "temp"
      unknown call_tmp[799613] "expr temp" "maybe param" "maybe type" "temp"
      (799616 'move' call_tmp[799613](523415 call chpl_direct_pos_stride_range_iter low[523389] high[523395] stride[523402]))
      (523410 'move' _iterator[523408](523413 call _getIterator call_tmp[799613]))
      Defer
      {
        {
          (523421 call _freeIterator _iterator[523408])
        }
      }
      { scopeless type
        (523425 'move' _indexOfInterest[523406](523428 call iteratorIndex _iterator[523408]))
      }
      ForLoop[523430]
      {
        unknown i[523433] "index var" "insert auto destroy"
        (552823 'end of statement')
        (523435 'move' i[523433] _indexOfInterest[523406])
        (552824 'end of statement' i[523433])
        unknown yret[606049] "YVV" "temp"
        (606052 'move' yret[606049](606051 'deref' i[523433]))
        (523438 yield yret[606049])
        (552826 'end of statement' i[523433])
        label _continueLabel[523440]
        _indexOfInterest[523406]
        _iterator[523408]
      }
      label _breakLabel[523442]
    }
    (606047 return ret[606045])
  }
  function chpl_direct_strided_range_iter[523320](arg low[523326] :
  (523324 call uint(64)[86] 16), arg high[523332] :
  (523330 call uint(64)[86] 16), arg stride[523339] :
  (523336 call uint(64)[86] 32)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606057] "RVV" "temp"
    {
      unknown _indexOfInterest[523343] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[523345] "expr temp" "temp"
      unknown call_tmp[799618] "expr temp" "maybe param" "maybe type" "temp"
      (799621 'move' call_tmp[799618](523352 call chpl_direct_pos_stride_range_iter low[523326] high[523332] stride[523339]))
      (523347 'move' _iterator[523345](523350 call _getIterator call_tmp[799618]))
      Defer
      {
        {
          (523358 call _freeIterator _iterator[523345])
        }
      }
      { scopeless type
        (523362 'move' _indexOfInterest[523343](523365 call iteratorIndex _iterator[523345]))
      }
      ForLoop[523367]
      {
        unknown i[523370] "index var" "insert auto destroy"
        (552829 'end of statement')
        (523372 'move' i[523370] _indexOfInterest[523343])
        (552830 'end of statement' i[523370])
        unknown yret[606061] "YVV" "temp"
        (606064 'move' yret[606061](606063 'deref' i[523370]))
        (523375 yield yret[606061])
        (552832 'end of statement' i[523370])
        label _continueLabel[523377]
        _indexOfInterest[523343]
        _iterator[523345]
      }
      label _breakLabel[523379]
    }
    (606059 return ret[606057])
  }
  function chpl_direct_strided_range_iter[523257](arg low[523263] :
  (523261 call uint(64)[86] 16), arg high[523269] :
  (523267 call uint(64)[86] 16), arg stride[523276] :
  (523273 call uint(64)[86] 16)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606069] "RVV" "temp"
    {
      unknown _indexOfInterest[523280] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[523282] "expr temp" "temp"
      unknown call_tmp[799623] "expr temp" "maybe param" "maybe type" "temp"
      (799626 'move' call_tmp[799623](523289 call chpl_direct_pos_stride_range_iter low[523263] high[523269] stride[523276]))
      (523284 'move' _iterator[523282](523287 call _getIterator call_tmp[799623]))
      Defer
      {
        {
          (523295 call _freeIterator _iterator[523282])
        }
      }
      { scopeless type
        (523299 'move' _indexOfInterest[523280](523302 call iteratorIndex _iterator[523282]))
      }
      ForLoop[523304]
      {
        unknown i[523307] "index var" "insert auto destroy"
        (552835 'end of statement')
        (523309 'move' i[523307] _indexOfInterest[523280])
        (552836 'end of statement' i[523307])
        unknown yret[606073] "YVV" "temp"
        (606076 'move' yret[606073](606075 'deref' i[523307]))
        (523312 yield yret[606073])
        (552838 'end of statement' i[523307])
        label _continueLabel[523314]
        _indexOfInterest[523280]
        _iterator[523282]
      }
      label _breakLabel[523316]
    }
    (606071 return ret[606069])
  }
  function chpl_direct_strided_range_iter[523194](arg low[523200] :
  (523198 call uint(64)[86] 16), arg high[523206] :
  (523204 call uint(64)[86] 16), arg stride[523213] :
  (523210 call uint(64)[86] 8)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606081] "RVV" "temp"
    {
      unknown _indexOfInterest[523217] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[523219] "expr temp" "temp"
      unknown call_tmp[799628] "expr temp" "maybe param" "maybe type" "temp"
      (799631 'move' call_tmp[799628](523226 call chpl_direct_pos_stride_range_iter low[523200] high[523206] stride[523213]))
      (523221 'move' _iterator[523219](523224 call _getIterator call_tmp[799628]))
      Defer
      {
        {
          (523232 call _freeIterator _iterator[523219])
        }
      }
      { scopeless type
        (523236 'move' _indexOfInterest[523217](523239 call iteratorIndex _iterator[523219]))
      }
      ForLoop[523241]
      {
        unknown i[523244] "index var" "insert auto destroy"
        (552841 'end of statement')
        (523246 'move' i[523244] _indexOfInterest[523217])
        (552842 'end of statement' i[523244])
        unknown yret[606085] "YVV" "temp"
        (606088 'move' yret[606085](606087 'deref' i[523244]))
        (523249 yield yret[606085])
        (552844 'end of statement' i[523244])
        label _continueLabel[523251]
        _indexOfInterest[523217]
        _iterator[523219]
      }
      label _breakLabel[523253]
    }
    (606083 return ret[606081])
  }
  function chpl_direct_strided_range_iter[523635](arg low[523641] :
  (523639 call uint(64)[86] 32), arg high[523647] :
  (523645 call uint(64)[86] 32), arg stride[523654] :
  (523651 call uint(64)[86] 64)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606093] "RVV" "temp"
    {
      unknown _indexOfInterest[523658] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[523660] "expr temp" "temp"
      unknown call_tmp[799633] "expr temp" "maybe param" "maybe type" "temp"
      (799636 'move' call_tmp[799633](523667 call chpl_direct_pos_stride_range_iter low[523641] high[523647] stride[523654]))
      (523662 'move' _iterator[523660](523665 call _getIterator call_tmp[799633]))
      Defer
      {
        {
          (523673 call _freeIterator _iterator[523660])
        }
      }
      { scopeless type
        (523677 'move' _indexOfInterest[523658](523680 call iteratorIndex _iterator[523660]))
      }
      ForLoop[523682]
      {
        unknown i[523685] "index var" "insert auto destroy"
        (552847 'end of statement')
        (523687 'move' i[523685] _indexOfInterest[523658])
        (552848 'end of statement' i[523685])
        unknown yret[606097] "YVV" "temp"
        (606100 'move' yret[606097](606099 'deref' i[523685]))
        (523690 yield yret[606097])
        (552850 'end of statement' i[523685])
        label _continueLabel[523692]
        _indexOfInterest[523658]
        _iterator[523660]
      }
      label _breakLabel[523694]
    }
    (606095 return ret[606093])
  }
  function chpl_direct_strided_range_iter[523572](arg low[523578] :
  (523576 call uint(64)[86] 32), arg high[523584] :
  (523582 call uint(64)[86] 32), arg stride[523591] :
  (523588 call uint(64)[86] 32)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606105] "RVV" "temp"
    {
      unknown _indexOfInterest[523595] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[523597] "expr temp" "temp"
      unknown call_tmp[799638] "expr temp" "maybe param" "maybe type" "temp"
      (799641 'move' call_tmp[799638](523604 call chpl_direct_pos_stride_range_iter low[523578] high[523584] stride[523591]))
      (523599 'move' _iterator[523597](523602 call _getIterator call_tmp[799638]))
      Defer
      {
        {
          (523610 call _freeIterator _iterator[523597])
        }
      }
      { scopeless type
        (523614 'move' _indexOfInterest[523595](523617 call iteratorIndex _iterator[523597]))
      }
      ForLoop[523619]
      {
        unknown i[523622] "index var" "insert auto destroy"
        (552853 'end of statement')
        (523624 'move' i[523622] _indexOfInterest[523595])
        (552854 'end of statement' i[523622])
        unknown yret[606109] "YVV" "temp"
        (606112 'move' yret[606109](606111 'deref' i[523622]))
        (523627 yield yret[606109])
        (552856 'end of statement' i[523622])
        label _continueLabel[523629]
        _indexOfInterest[523595]
        _iterator[523597]
      }
      label _breakLabel[523631]
    }
    (606107 return ret[606105])
  }
  function chpl_direct_strided_range_iter[523509](arg low[523515] :
  (523513 call uint(64)[86] 32), arg high[523521] :
  (523519 call uint(64)[86] 32), arg stride[523528] :
  (523525 call uint(64)[86] 16)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606117] "RVV" "temp"
    {
      unknown _indexOfInterest[523532] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[523534] "expr temp" "temp"
      unknown call_tmp[799643] "expr temp" "maybe param" "maybe type" "temp"
      (799646 'move' call_tmp[799643](523541 call chpl_direct_pos_stride_range_iter low[523515] high[523521] stride[523528]))
      (523536 'move' _iterator[523534](523539 call _getIterator call_tmp[799643]))
      Defer
      {
        {
          (523547 call _freeIterator _iterator[523534])
        }
      }
      { scopeless type
        (523551 'move' _indexOfInterest[523532](523554 call iteratorIndex _iterator[523534]))
      }
      ForLoop[523556]
      {
        unknown i[523559] "index var" "insert auto destroy"
        (552859 'end of statement')
        (523561 'move' i[523559] _indexOfInterest[523532])
        (552860 'end of statement' i[523559])
        unknown yret[606121] "YVV" "temp"
        (606124 'move' yret[606121](606123 'deref' i[523559]))
        (523564 yield yret[606121])
        (552862 'end of statement' i[523559])
        label _continueLabel[523566]
        _indexOfInterest[523532]
        _iterator[523534]
      }
      label _breakLabel[523568]
    }
    (606119 return ret[606117])
  }
  function chpl_direct_strided_range_iter[523446](arg low[523452] :
  (523450 call uint(64)[86] 32), arg high[523458] :
  (523456 call uint(64)[86] 32), arg stride[523465] :
  (523462 call uint(64)[86] 8)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606129] "RVV" "temp"
    {
      unknown _indexOfInterest[523469] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[523471] "expr temp" "temp"
      unknown call_tmp[799648] "expr temp" "maybe param" "maybe type" "temp"
      (799651 'move' call_tmp[799648](523478 call chpl_direct_pos_stride_range_iter low[523452] high[523458] stride[523465]))
      (523473 'move' _iterator[523471](523476 call _getIterator call_tmp[799648]))
      Defer
      {
        {
          (523484 call _freeIterator _iterator[523471])
        }
      }
      { scopeless type
        (523488 'move' _indexOfInterest[523469](523491 call iteratorIndex _iterator[523471]))
      }
      ForLoop[523493]
      {
        unknown i[523496] "index var" "insert auto destroy"
        (552865 'end of statement')
        (523498 'move' i[523496] _indexOfInterest[523469])
        (552866 'end of statement' i[523496])
        unknown yret[606133] "YVV" "temp"
        (606136 'move' yret[606133](606135 'deref' i[523496]))
        (523501 yield yret[606133])
        (552868 'end of statement' i[523496])
        label _continueLabel[523503]
        _indexOfInterest[523469]
        _iterator[523471]
      }
      label _breakLabel[523505]
    }
    (606131 return ret[606129])
  }
  function chpl_direct_strided_range_iter[523887](arg low[523893] :
  (523891 call uint(64)[86] 64), arg high[523899] :
  (523897 call uint(64)[86] 64), arg stride[523906] :
  (523903 call uint(64)[86] 64)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606141] "RVV" "temp"
    {
      unknown _indexOfInterest[523910] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[523912] "expr temp" "temp"
      unknown call_tmp[799653] "expr temp" "maybe param" "maybe type" "temp"
      (799656 'move' call_tmp[799653](523919 call chpl_direct_pos_stride_range_iter low[523893] high[523899] stride[523906]))
      (523914 'move' _iterator[523912](523917 call _getIterator call_tmp[799653]))
      Defer
      {
        {
          (523925 call _freeIterator _iterator[523912])
        }
      }
      { scopeless type
        (523929 'move' _indexOfInterest[523910](523932 call iteratorIndex _iterator[523912]))
      }
      ForLoop[523934]
      {
        unknown i[523937] "index var" "insert auto destroy"
        (552871 'end of statement')
        (523939 'move' i[523937] _indexOfInterest[523910])
        (552872 'end of statement' i[523937])
        unknown yret[606145] "YVV" "temp"
        (606148 'move' yret[606145](606147 'deref' i[523937]))
        (523942 yield yret[606145])
        (552874 'end of statement' i[523937])
        label _continueLabel[523944]
        _indexOfInterest[523910]
        _iterator[523912]
      }
      label _breakLabel[523946]
    }
    (606143 return ret[606141])
  }
  function chpl_direct_strided_range_iter[523824](arg low[523830] :
  (523828 call uint(64)[86] 64), arg high[523836] :
  (523834 call uint(64)[86] 64), arg stride[523843] :
  (523840 call uint(64)[86] 32)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606153] "RVV" "temp"
    {
      unknown _indexOfInterest[523847] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[523849] "expr temp" "temp"
      unknown call_tmp[799658] "expr temp" "maybe param" "maybe type" "temp"
      (799661 'move' call_tmp[799658](523856 call chpl_direct_pos_stride_range_iter low[523830] high[523836] stride[523843]))
      (523851 'move' _iterator[523849](523854 call _getIterator call_tmp[799658]))
      Defer
      {
        {
          (523862 call _freeIterator _iterator[523849])
        }
      }
      { scopeless type
        (523866 'move' _indexOfInterest[523847](523869 call iteratorIndex _iterator[523849]))
      }
      ForLoop[523871]
      {
        unknown i[523874] "index var" "insert auto destroy"
        (552877 'end of statement')
        (523876 'move' i[523874] _indexOfInterest[523847])
        (552878 'end of statement' i[523874])
        unknown yret[606157] "YVV" "temp"
        (606160 'move' yret[606157](606159 'deref' i[523874]))
        (523879 yield yret[606157])
        (552880 'end of statement' i[523874])
        label _continueLabel[523881]
        _indexOfInterest[523847]
        _iterator[523849]
      }
      label _breakLabel[523883]
    }
    (606155 return ret[606153])
  }
  function chpl_direct_strided_range_iter[523761](arg low[523767] :
  (523765 call uint(64)[86] 64), arg high[523773] :
  (523771 call uint(64)[86] 64), arg stride[523780] :
  (523777 call uint(64)[86] 16)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606165] "RVV" "temp"
    {
      unknown _indexOfInterest[523784] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[523786] "expr temp" "temp"
      unknown call_tmp[799663] "expr temp" "maybe param" "maybe type" "temp"
      (799666 'move' call_tmp[799663](523793 call chpl_direct_pos_stride_range_iter low[523767] high[523773] stride[523780]))
      (523788 'move' _iterator[523786](523791 call _getIterator call_tmp[799663]))
      Defer
      {
        {
          (523799 call _freeIterator _iterator[523786])
        }
      }
      { scopeless type
        (523803 'move' _indexOfInterest[523784](523806 call iteratorIndex _iterator[523786]))
      }
      ForLoop[523808]
      {
        unknown i[523811] "index var" "insert auto destroy"
        (552883 'end of statement')
        (523813 'move' i[523811] _indexOfInterest[523784])
        (552884 'end of statement' i[523811])
        unknown yret[606169] "YVV" "temp"
        (606172 'move' yret[606169](606171 'deref' i[523811]))
        (523816 yield yret[606169])
        (552886 'end of statement' i[523811])
        label _continueLabel[523818]
        _indexOfInterest[523784]
        _iterator[523786]
      }
      label _breakLabel[523820]
    }
    (606167 return ret[606165])
  }
  function chpl_direct_strided_range_iter[523698](arg low[523704] :
  (523702 call uint(64)[86] 64), arg high[523710] :
  (523708 call uint(64)[86] 64), arg stride[523717] :
  (523714 call uint(64)[86] 8)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606177] "RVV" "temp"
    {
      unknown _indexOfInterest[523721] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[523723] "expr temp" "temp"
      unknown call_tmp[799668] "expr temp" "maybe param" "maybe type" "temp"
      (799671 'move' call_tmp[799668](523730 call chpl_direct_pos_stride_range_iter low[523704] high[523710] stride[523717]))
      (523725 'move' _iterator[523723](523728 call _getIterator call_tmp[799668]))
      Defer
      {
        {
          (523736 call _freeIterator _iterator[523723])
        }
      }
      { scopeless type
        (523740 'move' _indexOfInterest[523721](523743 call iteratorIndex _iterator[523723]))
      }
      ForLoop[523745]
      {
        unknown i[523748] "index var" "insert auto destroy"
        (552889 'end of statement')
        (523750 'move' i[523748] _indexOfInterest[523721])
        (552890 'end of statement' i[523748])
        unknown yret[606181] "YVV" "temp"
        (606184 'move' yret[606181](606183 'deref' i[523748]))
        (523753 yield yret[606181])
        (552892 'end of statement' i[523748])
        label _continueLabel[523755]
        _indexOfInterest[523721]
        _iterator[523723]
      }
      label _breakLabel[523757]
    }
    (606179 return ret[606177])
  }
  function chpl_direct_strided_range_iter[124702](arg low[124707] :
  (124705 call int(64)[10] 8), arg high[124713] :
  (124711 call int(64)[10] 8), arg stride[124716]:_any[141](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606189] "RVV" "temp"
    unknown call_tmp[799673] "expr temp" "maybe param" "maybe type" "temp"
    (799676 'move' call_tmp[799673](124727 call int(64)[10] 8))
    unknown call_tmp[799678] "expr temp" "maybe param" "maybe type" "temp"
    (799681 'move' call_tmp[799678](124724 call : call_tmp[799673] string[244]))
    unknown call_tmp[799683] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799686 'move' call_tmp[799683](124736 'typeof' stride[124716]))
    unknown call_tmp[799688] "expr temp" "maybe param" "maybe type" "temp"
    (799691 'move' call_tmp[799688](124733 call : call_tmp[799683] string[244]))
    (124720 call compilerError "can't apply 'by' to a range with idxType " call_tmp[799678] " using a step of type " call_tmp[799688])
    (606191 return ret[606189])
  }
  function chpl_direct_strided_range_iter[124740](arg low[124745] :
  (124743 call int(64)[10] 16), arg high[124751] :
  (124749 call int(64)[10] 16), arg stride[124754]:_any[141](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606195] "RVV" "temp"
    unknown call_tmp[799693] "expr temp" "maybe param" "maybe type" "temp"
    (799696 'move' call_tmp[799693](124763 call int(64)[10] 16))
    unknown call_tmp[799698] "expr temp" "maybe param" "maybe type" "temp"
    (799701 'move' call_tmp[799698](124760 call : call_tmp[799693] string[244]))
    unknown call_tmp[799703] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799706 'move' call_tmp[799703](124770 'typeof' stride[124754]))
    unknown call_tmp[799708] "expr temp" "maybe param" "maybe type" "temp"
    (799711 'move' call_tmp[799708](124767 call : call_tmp[799703] string[244]))
    (124758 call compilerError "can't apply 'by' to a range with idxType " call_tmp[799698] " using a step of type " call_tmp[799708])
    (606197 return ret[606195])
  }
  function chpl_direct_strided_range_iter[124774](arg low[124779] :
  (124777 call int(64)[10] 32), arg high[124785] :
  (124783 call int(64)[10] 32), arg stride[124788]:_any[141](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606201] "RVV" "temp"
    unknown call_tmp[799713] "expr temp" "maybe param" "maybe type" "temp"
    (799716 'move' call_tmp[799713](124797 call int(64)[10] 32))
    unknown call_tmp[799718] "expr temp" "maybe param" "maybe type" "temp"
    (799721 'move' call_tmp[799718](124794 call : call_tmp[799713] string[244]))
    unknown call_tmp[799723] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799726 'move' call_tmp[799723](124804 'typeof' stride[124788]))
    unknown call_tmp[799728] "expr temp" "maybe param" "maybe type" "temp"
    (799731 'move' call_tmp[799728](124801 call : call_tmp[799723] string[244]))
    (124792 call compilerError "can't apply 'by' to a range with idxType " call_tmp[799718] " using a step of type " call_tmp[799728])
    (606203 return ret[606201])
  }
  function chpl_direct_strided_range_iter[124808](arg low[124813] :
  (124811 call int(64)[10] 64), arg high[124819] :
  (124817 call int(64)[10] 64), arg stride[124822]:_any[141](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606207] "RVV" "temp"
    unknown call_tmp[799733] "expr temp" "maybe param" "maybe type" "temp"
    (799736 'move' call_tmp[799733](124831 call int(64)[10] 64))
    unknown call_tmp[799738] "expr temp" "maybe param" "maybe type" "temp"
    (799741 'move' call_tmp[799738](124828 call : call_tmp[799733] string[244]))
    unknown call_tmp[799743] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799746 'move' call_tmp[799743](124838 'typeof' stride[124822]))
    unknown call_tmp[799748] "expr temp" "maybe param" "maybe type" "temp"
    (799751 'move' call_tmp[799748](124835 call : call_tmp[799743] string[244]))
    (124826 call compilerError "can't apply 'by' to a range with idxType " call_tmp[799738] " using a step of type " call_tmp[799748])
    (606209 return ret[606207])
  }
  function chpl_direct_strided_range_iter[124842](arg low[124847] :
  (124845 call uint(64)[86] 8), arg high[124853] :
  (124851 call uint(64)[86] 8), arg stride[124856]:_any[141](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606213] "RVV" "temp"
    unknown call_tmp[799753] "expr temp" "maybe param" "maybe type" "temp"
    (799756 'move' call_tmp[799753](124865 call uint(64)[86] 8))
    unknown call_tmp[799758] "expr temp" "maybe param" "maybe type" "temp"
    (799761 'move' call_tmp[799758](124862 call : call_tmp[799753] string[244]))
    unknown call_tmp[799763] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799766 'move' call_tmp[799763](124872 'typeof' stride[124856]))
    unknown call_tmp[799768] "expr temp" "maybe param" "maybe type" "temp"
    (799771 'move' call_tmp[799768](124869 call : call_tmp[799763] string[244]))
    (124860 call compilerError "can't apply 'by' to a range with idxType " call_tmp[799758] " using a step of type " call_tmp[799768])
    (606215 return ret[606213])
  }
  function chpl_direct_strided_range_iter[124876](arg low[124881] :
  (124879 call uint(64)[86] 16), arg high[124887] :
  (124885 call uint(64)[86] 16), arg stride[124890]:_any[141](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606219] "RVV" "temp"
    unknown call_tmp[799773] "expr temp" "maybe param" "maybe type" "temp"
    (799776 'move' call_tmp[799773](124899 call uint(64)[86] 16))
    unknown call_tmp[799778] "expr temp" "maybe param" "maybe type" "temp"
    (799781 'move' call_tmp[799778](124896 call : call_tmp[799773] string[244]))
    unknown call_tmp[799783] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799786 'move' call_tmp[799783](124906 'typeof' stride[124890]))
    unknown call_tmp[799788] "expr temp" "maybe param" "maybe type" "temp"
    (799791 'move' call_tmp[799788](124903 call : call_tmp[799783] string[244]))
    (124894 call compilerError "can't apply 'by' to a range with idxType " call_tmp[799778] " using a step of type " call_tmp[799788])
    (606221 return ret[606219])
  }
  function chpl_direct_strided_range_iter[124910](arg low[124915] :
  (124913 call uint(64)[86] 32), arg high[124921] :
  (124919 call uint(64)[86] 32), arg stride[124924]:_any[141](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606225] "RVV" "temp"
    unknown call_tmp[799793] "expr temp" "maybe param" "maybe type" "temp"
    (799796 'move' call_tmp[799793](124933 call uint(64)[86] 32))
    unknown call_tmp[799798] "expr temp" "maybe param" "maybe type" "temp"
    (799801 'move' call_tmp[799798](124930 call : call_tmp[799793] string[244]))
    unknown call_tmp[799803] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799806 'move' call_tmp[799803](124940 'typeof' stride[124924]))
    unknown call_tmp[799808] "expr temp" "maybe param" "maybe type" "temp"
    (799811 'move' call_tmp[799808](124937 call : call_tmp[799803] string[244]))
    (124928 call compilerError "can't apply 'by' to a range with idxType " call_tmp[799798] " using a step of type " call_tmp[799808])
    (606227 return ret[606225])
  }
  function chpl_direct_strided_range_iter[124944](arg low[124949] :
  (124947 call uint(64)[86] 64), arg high[124955] :
  (124953 call uint(64)[86] 64), arg stride[124958]:_any[141](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606231] "RVV" "temp"
    unknown call_tmp[799813] "expr temp" "maybe param" "maybe type" "temp"
    (799816 'move' call_tmp[799813](124967 call uint(64)[86] 64))
    unknown call_tmp[799818] "expr temp" "maybe param" "maybe type" "temp"
    (799821 'move' call_tmp[799818](124964 call : call_tmp[799813] string[244]))
    unknown call_tmp[799823] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799826 'move' call_tmp[799823](124974 'typeof' stride[124958]))
    unknown call_tmp[799828] "expr temp" "maybe param" "maybe type" "temp"
    (799831 'move' call_tmp[799828](124971 call : call_tmp[799823] string[244]))
    (124962 call compilerError "can't apply 'by' to a range with idxType " call_tmp[799818] " using a step of type " call_tmp[799828])
    (606233 return ret[606231])
  }
  function chpl_direct_strided_range_iter[124978](arg low[124980]:_any[141](?), arg high[124982]:_any[141](?), arg stride[124984]:_any[141](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606237] "RVV" "temp"
    (125000 call chpl_build_bounded_range low[124980] high[124982] stride[124984])
    (552902 'end of statement')
    unknown call_tmp[799833] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799836 'move' call_tmp[799833](125067 'typeof' low[124980]))
    unknown call_tmp[799838] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799841 'move' call_tmp[799838](125069 'typeof' high[124982]))
    unknown call_tmp[799843] "expr temp" "maybe param" "maybe type" "temp"
    (799846 'move' call_tmp[799843](125064 call == call_tmp[799833] call_tmp[799838]))
    unknown call_tmp[799848] "expr temp" "maybe param" "maybe type" "temp"
    (799851 'move' call_tmp[799848](125070 call _cond_test call_tmp[799843]))
    if call_tmp[799848]
    {
      unknown call_tmp[799853] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (799856 'move' call_tmp[799853](125018 'typeof' low[124980]))
      unknown call_tmp[799858] "expr temp" "maybe param" "maybe type" "temp"
      (799861 'move' call_tmp[799858](125015 call : call_tmp[799853] string[244]))
      unknown call_tmp[799863] "expr temp" "maybe param" "maybe type" "temp"
      (799866 'move' call_tmp[799863](125012 call + "Ranges defined using bounds of type '" call_tmp[799858]))
      unknown call_tmp[799868] "expr temp" "maybe param" "maybe type" "temp"
      (799871 'move' call_tmp[799868](125010 call + call_tmp[799863] "' and strides of type '"))
      unknown call_tmp[799873] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (799876 'move' call_tmp[799873](125026 'typeof' stride[124984]))
      unknown call_tmp[799878] "expr temp" "maybe param" "maybe type" "temp"
      (799881 'move' call_tmp[799878](125023 call : call_tmp[799873] string[244]))
      unknown call_tmp[799883] "expr temp" "maybe param" "maybe type" "temp"
      (799886 'move' call_tmp[799883](125008 call + call_tmp[799868] call_tmp[799878]))
      unknown call_tmp[799888] "expr temp" "maybe param" "maybe type" "temp"
      (799891 'move' call_tmp[799888](125006 call + call_tmp[799883] "' are not currently supported"))
      (125005 call compilerError call_tmp[799888])
    }
    {
      unknown call_tmp[799893] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (799896 'move' call_tmp[799893](125048 'typeof' low[124980]))
      unknown call_tmp[799898] "expr temp" "maybe param" "maybe type" "temp"
      (799901 'move' call_tmp[799898](125045 call : call_tmp[799893] string[244]))
      unknown call_tmp[799903] "expr temp" "maybe param" "maybe type" "temp"
      (799906 'move' call_tmp[799903](125042 call + "Ranges defined using bounds of type '" call_tmp[799898]))
      unknown call_tmp[799908] "expr temp" "maybe param" "maybe type" "temp"
      (799911 'move' call_tmp[799908](125040 call + call_tmp[799903] ".."))
      unknown call_tmp[799913] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (799916 'move' call_tmp[799913](125054 'typeof' high[124982]))
      unknown call_tmp[799918] "expr temp" "maybe param" "maybe type" "temp"
      (799921 'move' call_tmp[799918](125051 call : call_tmp[799913] string[244]))
      unknown call_tmp[799923] "expr temp" "maybe param" "maybe type" "temp"
      (799926 'move' call_tmp[799923](125038 call + call_tmp[799908] call_tmp[799918]))
      unknown call_tmp[799928] "expr temp" "maybe param" "maybe type" "temp"
      (799931 'move' call_tmp[799928](125036 call + call_tmp[799923] "' and strides of type '"))
      unknown call_tmp[799933] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (799936 'move' call_tmp[799933](125060 'typeof' stride[124984]))
      unknown call_tmp[799938] "expr temp" "maybe param" "maybe type" "temp"
      (799941 'move' call_tmp[799938](125057 call : call_tmp[799933] string[244]))
      unknown call_tmp[799943] "expr temp" "maybe param" "maybe type" "temp"
      (799946 'move' call_tmp[799943](125034 call + call_tmp[799928] call_tmp[799938]))
      unknown call_tmp[799948] "expr temp" "maybe param" "maybe type" "temp"
      (799951 'move' call_tmp[799948](125032 call + call_tmp[799943] "' are not currently supported"))
      (125031 call compilerError call_tmp[799948])
    }
    (606239 return ret[606237])
  }
  where {
    unknown tmp[485817] "maybe param" "temp"
    unknown call_tmp[799953] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799956 'move' call_tmp[799953](124993 'typeof' low[124980]))
    (485828 'move' tmp[485817](124991 call chpl_isValidRangeIdxType call_tmp[799953]))
    unknown call_tmp[799958] "expr temp" "maybe param" "maybe type" "temp"
    (799961 'move' call_tmp[799958](485830 call _cond_invalid tmp[485817]))
    if call_tmp[799958]
    {
      (485833 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[676645] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[676646] "maybe param" "temp"
    unknown call_tmp[799963] "expr temp" "maybe param" "maybe type" "temp"
    (799966 'move' call_tmp[799963](485818 call isTrue tmp[485817]))
    (676651 'move' tmp[676646](676649 call _cond_test call_tmp[799963]))
    if tmp[676646]
    {
      unknown tmp[676653] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[799968] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (799971 'move' call_tmp[799968](124997 'typeof' high[124982]))
      unknown call_tmp[799973] "expr temp" "maybe param" "maybe type" "temp"
      (799976 'move' call_tmp[799973](124995 call chpl_isValidRangeIdxType call_tmp[799968]))
      (676655 'move' tmp[676653](485821 call isTrue call_tmp[799973]))
      (676660 'move' tmp[676645](676657 '_paramFoldLogical' tmp[676646] tmp[676653]))
    }
    {
      (676665 'move' tmp[676645](676662 '_paramFoldLogical' tmp[676646] 0))
    }
    (124986 call ! tmp[676645])
  }
  function chpl_direct_counted_range_iter[524253](arg low[524260] :
  (524257 call int(64)[10] 64), arg count[524262]:_any[141](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606243] "RVV" "temp"
    unknown tmp[524265] "maybe param" "temp"
    unknown call_tmp[799978] "expr temp" "maybe param" "maybe type" "temp"
    (799981 'move' call_tmp[799978](524272 call isIntegral count[524262]))
    (524267 'move' tmp[524265](524270 call ! call_tmp[799978]))
    unknown call_tmp[799983] "expr temp" "maybe param" "maybe type" "temp"
    (799986 'move' call_tmp[799983](524275 call _cond_invalid tmp[524265]))
    if call_tmp[799983]
    {
      (524279 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[676672] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[676673] "maybe param" "temp"
    unknown call_tmp[799988] "expr temp" "maybe param" "maybe type" "temp"
    (799991 'move' call_tmp[799988](524285 call isTrue tmp[524265]))
    (676678 'move' tmp[676673](676676 call _cond_test call_tmp[799988]))
    if tmp[676673]
    {
      unknown tmp[676680] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[799993] "expr temp" "maybe param" "maybe type" "temp"
      (799996 'move' call_tmp[799993](524293 call isBool count[524262]))
      unknown call_tmp[799998] "expr temp" "maybe param" "maybe type" "temp"
      (800001 'move' call_tmp[799998](524291 call ! call_tmp[799993]))
      (676682 'move' tmp[676680](524289 call isTrue call_tmp[799998]))
      (676687 'move' tmp[676672](676684 '_paramFoldLogical' tmp[676673] tmp[676680]))
    }
    {
      (676692 'move' tmp[676672](676689 '_paramFoldLogical' tmp[676673] 0))
    }
    unknown call_tmp[800003] "expr temp" "maybe param" "maybe type" "temp"
    (800006 'move' call_tmp[800003](524283 call _cond_test tmp[676672]))
    if call_tmp[800003]
    {
      unknown call_tmp[800008] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (800011 'move' call_tmp[800008](524304 'typeof' low[524260]))
      unknown call_tmp[800013] "expr temp" "maybe param" "maybe type" "temp"
      (800016 'move' call_tmp[800013](524303 call : call_tmp[800008] string[244]))
      unknown call_tmp[800018] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (800021 'move' call_tmp[800018](524310 'typeof' count[524262]))
      unknown call_tmp[800023] "expr temp" "maybe param" "maybe type" "temp"
      (800026 'move' call_tmp[800023](524309 call : call_tmp[800018] string[244]))
      (524300 call compilerError "can't apply '#' to a range with idxType " call_tmp[800013] " using a count of type " call_tmp[800023])
    }
    {
      unknown _indexOfInterest[524315] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[524317] "expr temp" "temp"
      unknown call_tmp[800028] "expr temp" "maybe param" "maybe type" "temp"
      (800031 'move' call_tmp[800028](524324 call chpl_direct_counted_range_iter_helper low[524260] count[524262]))
      (524319 'move' _iterator[524317](524322 call _getIterator call_tmp[800028]))
      Defer
      {
        {
          (524329 call _freeIterator _iterator[524317])
        }
      }
      { scopeless type
        (524333 'move' _indexOfInterest[524315](524336 call iteratorIndex _iterator[524317]))
      }
      ForLoop[524338]
      {
        unknown i[524341] "index var" "insert auto destroy"
        (552908 'end of statement')
        (524343 'move' i[524341] _indexOfInterest[524315])
        (552909 'end of statement' i[524341])
        unknown yret[606247] "YVV" "temp"
        (606250 'move' yret[606247](606249 'deref' i[524341]))
        (524346 yield yret[606247])
        (552911 'end of statement' i[524341])
        label _continueLabel[524348]
        _indexOfInterest[524315]
        _iterator[524317]
      }
      label _breakLabel[524350]
    }
    (606245 return ret[606243])
  }
  function chpl_direct_counted_range_iter[524152](arg low[524159] :
  (524156 call int(64)[10] 32), arg count[524161]:_any[141](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606255] "RVV" "temp"
    unknown tmp[524164] "maybe param" "temp"
    unknown call_tmp[800033] "expr temp" "maybe param" "maybe type" "temp"
    (800036 'move' call_tmp[800033](524171 call isIntegral count[524161]))
    (524166 'move' tmp[524164](524169 call ! call_tmp[800033]))
    unknown call_tmp[800038] "expr temp" "maybe param" "maybe type" "temp"
    (800041 'move' call_tmp[800038](524174 call _cond_invalid tmp[524164]))
    if call_tmp[800038]
    {
      (524178 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[676699] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[676700] "maybe param" "temp"
    unknown call_tmp[800043] "expr temp" "maybe param" "maybe type" "temp"
    (800046 'move' call_tmp[800043](524184 call isTrue tmp[524164]))
    (676705 'move' tmp[676700](676703 call _cond_test call_tmp[800043]))
    if tmp[676700]
    {
      unknown tmp[676707] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[800048] "expr temp" "maybe param" "maybe type" "temp"
      (800051 'move' call_tmp[800048](524192 call isBool count[524161]))
      unknown call_tmp[800053] "expr temp" "maybe param" "maybe type" "temp"
      (800056 'move' call_tmp[800053](524190 call ! call_tmp[800048]))
      (676709 'move' tmp[676707](524188 call isTrue call_tmp[800053]))
      (676714 'move' tmp[676699](676711 '_paramFoldLogical' tmp[676700] tmp[676707]))
    }
    {
      (676719 'move' tmp[676699](676716 '_paramFoldLogical' tmp[676700] 0))
    }
    unknown call_tmp[800058] "expr temp" "maybe param" "maybe type" "temp"
    (800061 'move' call_tmp[800058](524182 call _cond_test tmp[676699]))
    if call_tmp[800058]
    {
      unknown call_tmp[800063] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (800066 'move' call_tmp[800063](524203 'typeof' low[524159]))
      unknown call_tmp[800068] "expr temp" "maybe param" "maybe type" "temp"
      (800071 'move' call_tmp[800068](524202 call : call_tmp[800063] string[244]))
      unknown call_tmp[800073] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (800076 'move' call_tmp[800073](524209 'typeof' count[524161]))
      unknown call_tmp[800078] "expr temp" "maybe param" "maybe type" "temp"
      (800081 'move' call_tmp[800078](524208 call : call_tmp[800073] string[244]))
      (524199 call compilerError "can't apply '#' to a range with idxType " call_tmp[800068] " using a count of type " call_tmp[800078])
    }
    {
      unknown _indexOfInterest[524214] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[524216] "expr temp" "temp"
      unknown call_tmp[800083] "expr temp" "maybe param" "maybe type" "temp"
      (800086 'move' call_tmp[800083](524223 call chpl_direct_counted_range_iter_helper low[524159] count[524161]))
      (524218 'move' _iterator[524216](524221 call _getIterator call_tmp[800083]))
      Defer
      {
        {
          (524228 call _freeIterator _iterator[524216])
        }
      }
      { scopeless type
        (524232 'move' _indexOfInterest[524214](524235 call iteratorIndex _iterator[524216]))
      }
      ForLoop[524237]
      {
        unknown i[524240] "index var" "insert auto destroy"
        (552916 'end of statement')
        (524242 'move' i[524240] _indexOfInterest[524214])
        (552917 'end of statement' i[524240])
        unknown yret[606259] "YVV" "temp"
        (606262 'move' yret[606259](606261 'deref' i[524240]))
        (524245 yield yret[606259])
        (552919 'end of statement' i[524240])
        label _continueLabel[524247]
        _indexOfInterest[524214]
        _iterator[524216]
      }
      label _breakLabel[524249]
    }
    (606257 return ret[606255])
  }
  function chpl_direct_counted_range_iter[524051](arg low[524058] :
  (524055 call int(64)[10] 16), arg count[524060]:_any[141](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606267] "RVV" "temp"
    unknown tmp[524063] "maybe param" "temp"
    unknown call_tmp[800088] "expr temp" "maybe param" "maybe type" "temp"
    (800091 'move' call_tmp[800088](524070 call isIntegral count[524060]))
    (524065 'move' tmp[524063](524068 call ! call_tmp[800088]))
    unknown call_tmp[800093] "expr temp" "maybe param" "maybe type" "temp"
    (800096 'move' call_tmp[800093](524073 call _cond_invalid tmp[524063]))
    if call_tmp[800093]
    {
      (524077 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[676726] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[676727] "maybe param" "temp"
    unknown call_tmp[800098] "expr temp" "maybe param" "maybe type" "temp"
    (800101 'move' call_tmp[800098](524083 call isTrue tmp[524063]))
    (676732 'move' tmp[676727](676730 call _cond_test call_tmp[800098]))
    if tmp[676727]
    {
      unknown tmp[676734] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[800103] "expr temp" "maybe param" "maybe type" "temp"
      (800106 'move' call_tmp[800103](524091 call isBool count[524060]))
      unknown call_tmp[800108] "expr temp" "maybe param" "maybe type" "temp"
      (800111 'move' call_tmp[800108](524089 call ! call_tmp[800103]))
      (676736 'move' tmp[676734](524087 call isTrue call_tmp[800108]))
      (676741 'move' tmp[676726](676738 '_paramFoldLogical' tmp[676727] tmp[676734]))
    }
    {
      (676746 'move' tmp[676726](676743 '_paramFoldLogical' tmp[676727] 0))
    }
    unknown call_tmp[800113] "expr temp" "maybe param" "maybe type" "temp"
    (800116 'move' call_tmp[800113](524081 call _cond_test tmp[676726]))
    if call_tmp[800113]
    {
      unknown call_tmp[800118] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (800121 'move' call_tmp[800118](524102 'typeof' low[524058]))
      unknown call_tmp[800123] "expr temp" "maybe param" "maybe type" "temp"
      (800126 'move' call_tmp[800123](524101 call : call_tmp[800118] string[244]))
      unknown call_tmp[800128] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (800131 'move' call_tmp[800128](524108 'typeof' count[524060]))
      unknown call_tmp[800133] "expr temp" "maybe param" "maybe type" "temp"
      (800136 'move' call_tmp[800133](524107 call : call_tmp[800128] string[244]))
      (524098 call compilerError "can't apply '#' to a range with idxType " call_tmp[800123] " using a count of type " call_tmp[800133])
    }
    {
      unknown _indexOfInterest[524113] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[524115] "expr temp" "temp"
      unknown call_tmp[800138] "expr temp" "maybe param" "maybe type" "temp"
      (800141 'move' call_tmp[800138](524122 call chpl_direct_counted_range_iter_helper low[524058] count[524060]))
      (524117 'move' _iterator[524115](524120 call _getIterator call_tmp[800138]))
      Defer
      {
        {
          (524127 call _freeIterator _iterator[524115])
        }
      }
      { scopeless type
        (524131 'move' _indexOfInterest[524113](524134 call iteratorIndex _iterator[524115]))
      }
      ForLoop[524136]
      {
        unknown i[524139] "index var" "insert auto destroy"
        (552924 'end of statement')
        (524141 'move' i[524139] _indexOfInterest[524113])
        (552925 'end of statement' i[524139])
        unknown yret[606271] "YVV" "temp"
        (606274 'move' yret[606271](606273 'deref' i[524139]))
        (524144 yield yret[606271])
        (552927 'end of statement' i[524139])
        label _continueLabel[524146]
        _indexOfInterest[524113]
        _iterator[524115]
      }
      label _breakLabel[524148]
    }
    (606269 return ret[606267])
  }
  function chpl_direct_counted_range_iter[523950](arg low[523957] :
  (523954 call int(64)[10] 8), arg count[523959]:_any[141](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606279] "RVV" "temp"
    unknown tmp[523962] "maybe param" "temp"
    unknown call_tmp[800143] "expr temp" "maybe param" "maybe type" "temp"
    (800146 'move' call_tmp[800143](523969 call isIntegral count[523959]))
    (523964 'move' tmp[523962](523967 call ! call_tmp[800143]))
    unknown call_tmp[800148] "expr temp" "maybe param" "maybe type" "temp"
    (800151 'move' call_tmp[800148](523972 call _cond_invalid tmp[523962]))
    if call_tmp[800148]
    {
      (523976 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[676753] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[676754] "maybe param" "temp"
    unknown call_tmp[800153] "expr temp" "maybe param" "maybe type" "temp"
    (800156 'move' call_tmp[800153](523982 call isTrue tmp[523962]))
    (676759 'move' tmp[676754](676757 call _cond_test call_tmp[800153]))
    if tmp[676754]
    {
      unknown tmp[676761] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[800158] "expr temp" "maybe param" "maybe type" "temp"
      (800161 'move' call_tmp[800158](523990 call isBool count[523959]))
      unknown call_tmp[800163] "expr temp" "maybe param" "maybe type" "temp"
      (800166 'move' call_tmp[800163](523988 call ! call_tmp[800158]))
      (676763 'move' tmp[676761](523986 call isTrue call_tmp[800163]))
      (676768 'move' tmp[676753](676765 '_paramFoldLogical' tmp[676754] tmp[676761]))
    }
    {
      (676773 'move' tmp[676753](676770 '_paramFoldLogical' tmp[676754] 0))
    }
    unknown call_tmp[800168] "expr temp" "maybe param" "maybe type" "temp"
    (800171 'move' call_tmp[800168](523980 call _cond_test tmp[676753]))
    if call_tmp[800168]
    {
      unknown call_tmp[800173] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (800176 'move' call_tmp[800173](524001 'typeof' low[523957]))
      unknown call_tmp[800178] "expr temp" "maybe param" "maybe type" "temp"
      (800181 'move' call_tmp[800178](524000 call : call_tmp[800173] string[244]))
      unknown call_tmp[800183] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (800186 'move' call_tmp[800183](524007 'typeof' count[523959]))
      unknown call_tmp[800188] "expr temp" "maybe param" "maybe type" "temp"
      (800191 'move' call_tmp[800188](524006 call : call_tmp[800183] string[244]))
      (523997 call compilerError "can't apply '#' to a range with idxType " call_tmp[800178] " using a count of type " call_tmp[800188])
    }
    {
      unknown _indexOfInterest[524012] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[524014] "expr temp" "temp"
      unknown call_tmp[800193] "expr temp" "maybe param" "maybe type" "temp"
      (800196 'move' call_tmp[800193](524021 call chpl_direct_counted_range_iter_helper low[523957] count[523959]))
      (524016 'move' _iterator[524014](524019 call _getIterator call_tmp[800193]))
      Defer
      {
        {
          (524026 call _freeIterator _iterator[524014])
        }
      }
      { scopeless type
        (524030 'move' _indexOfInterest[524012](524033 call iteratorIndex _iterator[524014]))
      }
      ForLoop[524035]
      {
        unknown i[524038] "index var" "insert auto destroy"
        (552932 'end of statement')
        (524040 'move' i[524038] _indexOfInterest[524012])
        (552933 'end of statement' i[524038])
        unknown yret[606283] "YVV" "temp"
        (606286 'move' yret[606283](606285 'deref' i[524038]))
        (524043 yield yret[606283])
        (552935 'end of statement' i[524038])
        label _continueLabel[524045]
        _indexOfInterest[524012]
        _iterator[524014]
      }
      label _breakLabel[524047]
    }
    (606281 return ret[606279])
  }
  function chpl_direct_counted_range_iter[524657](arg low[524664] :
  (524661 call uint(64)[86] 64), arg count[524666]:_any[141](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606291] "RVV" "temp"
    unknown tmp[524669] "maybe param" "temp"
    unknown call_tmp[800198] "expr temp" "maybe param" "maybe type" "temp"
    (800201 'move' call_tmp[800198](524676 call isIntegral count[524666]))
    (524671 'move' tmp[524669](524674 call ! call_tmp[800198]))
    unknown call_tmp[800203] "expr temp" "maybe param" "maybe type" "temp"
    (800206 'move' call_tmp[800203](524679 call _cond_invalid tmp[524669]))
    if call_tmp[800203]
    {
      (524683 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[676780] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[676781] "maybe param" "temp"
    unknown call_tmp[800208] "expr temp" "maybe param" "maybe type" "temp"
    (800211 'move' call_tmp[800208](524689 call isTrue tmp[524669]))
    (676786 'move' tmp[676781](676784 call _cond_test call_tmp[800208]))
    if tmp[676781]
    {
      unknown tmp[676788] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[800213] "expr temp" "maybe param" "maybe type" "temp"
      (800216 'move' call_tmp[800213](524697 call isBool count[524666]))
      unknown call_tmp[800218] "expr temp" "maybe param" "maybe type" "temp"
      (800221 'move' call_tmp[800218](524695 call ! call_tmp[800213]))
      (676790 'move' tmp[676788](524693 call isTrue call_tmp[800218]))
      (676795 'move' tmp[676780](676792 '_paramFoldLogical' tmp[676781] tmp[676788]))
    }
    {
      (676800 'move' tmp[676780](676797 '_paramFoldLogical' tmp[676781] 0))
    }
    unknown call_tmp[800223] "expr temp" "maybe param" "maybe type" "temp"
    (800226 'move' call_tmp[800223](524687 call _cond_test tmp[676780]))
    if call_tmp[800223]
    {
      unknown call_tmp[800228] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (800231 'move' call_tmp[800228](524708 'typeof' low[524664]))
      unknown call_tmp[800233] "expr temp" "maybe param" "maybe type" "temp"
      (800236 'move' call_tmp[800233](524707 call : call_tmp[800228] string[244]))
      unknown call_tmp[800238] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (800241 'move' call_tmp[800238](524714 'typeof' count[524666]))
      unknown call_tmp[800243] "expr temp" "maybe param" "maybe type" "temp"
      (800246 'move' call_tmp[800243](524713 call : call_tmp[800238] string[244]))
      (524704 call compilerError "can't apply '#' to a range with idxType " call_tmp[800233] " using a count of type " call_tmp[800243])
    }
    {
      unknown _indexOfInterest[524719] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[524721] "expr temp" "temp"
      unknown call_tmp[800248] "expr temp" "maybe param" "maybe type" "temp"
      (800251 'move' call_tmp[800248](524728 call chpl_direct_counted_range_iter_helper low[524664] count[524666]))
      (524723 'move' _iterator[524721](524726 call _getIterator call_tmp[800248]))
      Defer
      {
        {
          (524733 call _freeIterator _iterator[524721])
        }
      }
      { scopeless type
        (524737 'move' _indexOfInterest[524719](524740 call iteratorIndex _iterator[524721]))
      }
      ForLoop[524742]
      {
        unknown i[524745] "index var" "insert auto destroy"
        (552940 'end of statement')
        (524747 'move' i[524745] _indexOfInterest[524719])
        (552941 'end of statement' i[524745])
        unknown yret[606295] "YVV" "temp"
        (606298 'move' yret[606295](606297 'deref' i[524745]))
        (524750 yield yret[606295])
        (552943 'end of statement' i[524745])
        label _continueLabel[524752]
        _indexOfInterest[524719]
        _iterator[524721]
      }
      label _breakLabel[524754]
    }
    (606293 return ret[606291])
  }
  function chpl_direct_counted_range_iter[524556](arg low[524563] :
  (524560 call uint(64)[86] 32), arg count[524565]:_any[141](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606303] "RVV" "temp"
    unknown tmp[524568] "maybe param" "temp"
    unknown call_tmp[800253] "expr temp" "maybe param" "maybe type" "temp"
    (800256 'move' call_tmp[800253](524575 call isIntegral count[524565]))
    (524570 'move' tmp[524568](524573 call ! call_tmp[800253]))
    unknown call_tmp[800258] "expr temp" "maybe param" "maybe type" "temp"
    (800261 'move' call_tmp[800258](524578 call _cond_invalid tmp[524568]))
    if call_tmp[800258]
    {
      (524582 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[676807] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[676808] "maybe param" "temp"
    unknown call_tmp[800263] "expr temp" "maybe param" "maybe type" "temp"
    (800266 'move' call_tmp[800263](524588 call isTrue tmp[524568]))
    (676813 'move' tmp[676808](676811 call _cond_test call_tmp[800263]))
    if tmp[676808]
    {
      unknown tmp[676815] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[800268] "expr temp" "maybe param" "maybe type" "temp"
      (800271 'move' call_tmp[800268](524596 call isBool count[524565]))
      unknown call_tmp[800273] "expr temp" "maybe param" "maybe type" "temp"
      (800276 'move' call_tmp[800273](524594 call ! call_tmp[800268]))
      (676817 'move' tmp[676815](524592 call isTrue call_tmp[800273]))
      (676822 'move' tmp[676807](676819 '_paramFoldLogical' tmp[676808] tmp[676815]))
    }
    {
      (676827 'move' tmp[676807](676824 '_paramFoldLogical' tmp[676808] 0))
    }
    unknown call_tmp[800278] "expr temp" "maybe param" "maybe type" "temp"
    (800281 'move' call_tmp[800278](524586 call _cond_test tmp[676807]))
    if call_tmp[800278]
    {
      unknown call_tmp[800283] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (800286 'move' call_tmp[800283](524607 'typeof' low[524563]))
      unknown call_tmp[800288] "expr temp" "maybe param" "maybe type" "temp"
      (800291 'move' call_tmp[800288](524606 call : call_tmp[800283] string[244]))
      unknown call_tmp[800293] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (800296 'move' call_tmp[800293](524613 'typeof' count[524565]))
      unknown call_tmp[800298] "expr temp" "maybe param" "maybe type" "temp"
      (800301 'move' call_tmp[800298](524612 call : call_tmp[800293] string[244]))
      (524603 call compilerError "can't apply '#' to a range with idxType " call_tmp[800288] " using a count of type " call_tmp[800298])
    }
    {
      unknown _indexOfInterest[524618] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[524620] "expr temp" "temp"
      unknown call_tmp[800303] "expr temp" "maybe param" "maybe type" "temp"
      (800306 'move' call_tmp[800303](524627 call chpl_direct_counted_range_iter_helper low[524563] count[524565]))
      (524622 'move' _iterator[524620](524625 call _getIterator call_tmp[800303]))
      Defer
      {
        {
          (524632 call _freeIterator _iterator[524620])
        }
      }
      { scopeless type
        (524636 'move' _indexOfInterest[524618](524639 call iteratorIndex _iterator[524620]))
      }
      ForLoop[524641]
      {
        unknown i[524644] "index var" "insert auto destroy"
        (552948 'end of statement')
        (524646 'move' i[524644] _indexOfInterest[524618])
        (552949 'end of statement' i[524644])
        unknown yret[606307] "YVV" "temp"
        (606310 'move' yret[606307](606309 'deref' i[524644]))
        (524649 yield yret[606307])
        (552951 'end of statement' i[524644])
        label _continueLabel[524651]
        _indexOfInterest[524618]
        _iterator[524620]
      }
      label _breakLabel[524653]
    }
    (606305 return ret[606303])
  }
  function chpl_direct_counted_range_iter[524455](arg low[524462] :
  (524459 call uint(64)[86] 16), arg count[524464]:_any[141](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606315] "RVV" "temp"
    unknown tmp[524467] "maybe param" "temp"
    unknown call_tmp[800308] "expr temp" "maybe param" "maybe type" "temp"
    (800311 'move' call_tmp[800308](524474 call isIntegral count[524464]))
    (524469 'move' tmp[524467](524472 call ! call_tmp[800308]))
    unknown call_tmp[800313] "expr temp" "maybe param" "maybe type" "temp"
    (800316 'move' call_tmp[800313](524477 call _cond_invalid tmp[524467]))
    if call_tmp[800313]
    {
      (524481 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[676834] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[676835] "maybe param" "temp"
    unknown call_tmp[800318] "expr temp" "maybe param" "maybe type" "temp"
    (800321 'move' call_tmp[800318](524487 call isTrue tmp[524467]))
    (676840 'move' tmp[676835](676838 call _cond_test call_tmp[800318]))
    if tmp[676835]
    {
      unknown tmp[676842] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[800323] "expr temp" "maybe param" "maybe type" "temp"
      (800326 'move' call_tmp[800323](524495 call isBool count[524464]))
      unknown call_tmp[800328] "expr temp" "maybe param" "maybe type" "temp"
      (800331 'move' call_tmp[800328](524493 call ! call_tmp[800323]))
      (676844 'move' tmp[676842](524491 call isTrue call_tmp[800328]))
      (676849 'move' tmp[676834](676846 '_paramFoldLogical' tmp[676835] tmp[676842]))
    }
    {
      (676854 'move' tmp[676834](676851 '_paramFoldLogical' tmp[676835] 0))
    }
    unknown call_tmp[800333] "expr temp" "maybe param" "maybe type" "temp"
    (800336 'move' call_tmp[800333](524485 call _cond_test tmp[676834]))
    if call_tmp[800333]
    {
      unknown call_tmp[800338] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (800341 'move' call_tmp[800338](524506 'typeof' low[524462]))
      unknown call_tmp[800343] "expr temp" "maybe param" "maybe type" "temp"
      (800346 'move' call_tmp[800343](524505 call : call_tmp[800338] string[244]))
      unknown call_tmp[800348] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (800351 'move' call_tmp[800348](524512 'typeof' count[524464]))
      unknown call_tmp[800353] "expr temp" "maybe param" "maybe type" "temp"
      (800356 'move' call_tmp[800353](524511 call : call_tmp[800348] string[244]))
      (524502 call compilerError "can't apply '#' to a range with idxType " call_tmp[800343] " using a count of type " call_tmp[800353])
    }
    {
      unknown _indexOfInterest[524517] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[524519] "expr temp" "temp"
      unknown call_tmp[800358] "expr temp" "maybe param" "maybe type" "temp"
      (800361 'move' call_tmp[800358](524526 call chpl_direct_counted_range_iter_helper low[524462] count[524464]))
      (524521 'move' _iterator[524519](524524 call _getIterator call_tmp[800358]))
      Defer
      {
        {
          (524531 call _freeIterator _iterator[524519])
        }
      }
      { scopeless type
        (524535 'move' _indexOfInterest[524517](524538 call iteratorIndex _iterator[524519]))
      }
      ForLoop[524540]
      {
        unknown i[524543] "index var" "insert auto destroy"
        (552956 'end of statement')
        (524545 'move' i[524543] _indexOfInterest[524517])
        (552957 'end of statement' i[524543])
        unknown yret[606319] "YVV" "temp"
        (606322 'move' yret[606319](606321 'deref' i[524543]))
        (524548 yield yret[606319])
        (552959 'end of statement' i[524543])
        label _continueLabel[524550]
        _indexOfInterest[524517]
        _iterator[524519]
      }
      label _breakLabel[524552]
    }
    (606317 return ret[606315])
  }
  function chpl_direct_counted_range_iter[524354](arg low[524361] :
  (524358 call uint(64)[86] 8), arg count[524363]:_any[141](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606327] "RVV" "temp"
    unknown tmp[524366] "maybe param" "temp"
    unknown call_tmp[800363] "expr temp" "maybe param" "maybe type" "temp"
    (800366 'move' call_tmp[800363](524373 call isIntegral count[524363]))
    (524368 'move' tmp[524366](524371 call ! call_tmp[800363]))
    unknown call_tmp[800368] "expr temp" "maybe param" "maybe type" "temp"
    (800371 'move' call_tmp[800368](524376 call _cond_invalid tmp[524366]))
    if call_tmp[800368]
    {
      (524380 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[676861] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[676862] "maybe param" "temp"
    unknown call_tmp[800373] "expr temp" "maybe param" "maybe type" "temp"
    (800376 'move' call_tmp[800373](524386 call isTrue tmp[524366]))
    (676867 'move' tmp[676862](676865 call _cond_test call_tmp[800373]))
    if tmp[676862]
    {
      unknown tmp[676869] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[800378] "expr temp" "maybe param" "maybe type" "temp"
      (800381 'move' call_tmp[800378](524394 call isBool count[524363]))
      unknown call_tmp[800383] "expr temp" "maybe param" "maybe type" "temp"
      (800386 'move' call_tmp[800383](524392 call ! call_tmp[800378]))
      (676871 'move' tmp[676869](524390 call isTrue call_tmp[800383]))
      (676876 'move' tmp[676861](676873 '_paramFoldLogical' tmp[676862] tmp[676869]))
    }
    {
      (676881 'move' tmp[676861](676878 '_paramFoldLogical' tmp[676862] 0))
    }
    unknown call_tmp[800388] "expr temp" "maybe param" "maybe type" "temp"
    (800391 'move' call_tmp[800388](524384 call _cond_test tmp[676861]))
    if call_tmp[800388]
    {
      unknown call_tmp[800393] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (800396 'move' call_tmp[800393](524405 'typeof' low[524361]))
      unknown call_tmp[800398] "expr temp" "maybe param" "maybe type" "temp"
      (800401 'move' call_tmp[800398](524404 call : call_tmp[800393] string[244]))
      unknown call_tmp[800403] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (800406 'move' call_tmp[800403](524411 'typeof' count[524363]))
      unknown call_tmp[800408] "expr temp" "maybe param" "maybe type" "temp"
      (800411 'move' call_tmp[800408](524410 call : call_tmp[800403] string[244]))
      (524401 call compilerError "can't apply '#' to a range with idxType " call_tmp[800398] " using a count of type " call_tmp[800408])
    }
    {
      unknown _indexOfInterest[524416] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[524418] "expr temp" "temp"
      unknown call_tmp[800413] "expr temp" "maybe param" "maybe type" "temp"
      (800416 'move' call_tmp[800413](524425 call chpl_direct_counted_range_iter_helper low[524361] count[524363]))
      (524420 'move' _iterator[524418](524423 call _getIterator call_tmp[800413]))
      Defer
      {
        {
          (524430 call _freeIterator _iterator[524418])
        }
      }
      { scopeless type
        (524434 'move' _indexOfInterest[524416](524437 call iteratorIndex _iterator[524418]))
      }
      ForLoop[524439]
      {
        unknown i[524442] "index var" "insert auto destroy"
        (552964 'end of statement')
        (524444 'move' i[524442] _indexOfInterest[524416])
        (552965 'end of statement' i[524442])
        unknown yret[606331] "YVV" "temp"
        (606334 'move' yret[606331](606333 'deref' i[524442]))
        (524447 yield yret[606331])
        (552967 'end of statement' i[524442])
        label _continueLabel[524449]
        _indexOfInterest[524416]
        _iterator[524418]
      }
      label _breakLabel[524451]
    }
    (606329 return ret[606327])
  }
  function chpl_direct_counted_range_iter[125251](arg low[125254]:enum[147](?), arg count[125258]:integral[159](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606339] "RVV" "temp"
    unknown call_tmp[800418] "maybe param" "maybe type" "temp"
    (800421 'move' call_tmp[800418](125265 call chpl_build_low_bounded_range low[125254]))
    const r[125263] "dead at end of block" "const" "insert auto destroy"
    (645559 'init var' r[125263] call_tmp[800418])
    (125268 'end of statement')
    {
      unknown _indexOfInterest[125278] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125279] "expr temp" "temp"
      unknown call_tmp[800423] "expr temp" "maybe param" "maybe type" "temp"
      (800426 'move' call_tmp[800423](125271 call # r[125263] count[125258]))
      (125288 'move' _iterator[125279](125286 call _getIterator call_tmp[800423]))
      Defer
      {
        {
          (125305 call _freeIterator _iterator[125279])
        }
      }
      { scopeless type
        (125295 'move' _indexOfInterest[125278](125292 call iteratorIndex _iterator[125279]))
      }
      ForLoop[125280]
      {
        unknown i[125269] "index var" "insert auto destroy"
        (552970 'end of statement')
        (125300 'move' i[125269] _indexOfInterest[125278])
        (552971 'end of statement' i[125269])
        unknown yret[606343] "YVV" "temp"
        (606346 'move' yret[606343](606345 'deref' i[125269]))
        (125275 yield yret[606343])
        (552973 'end of statement' i[125269])
        label _continueLabel[125283]
        _indexOfInterest[125278]
        _iterator[125279]
      }
      label _breakLabel[125284]
    }
    (606341 return ret[606339])
  }
  function chpl_direct_counted_range_iter[125314](arg low[125317]:bool[19], arg count[125321]:integral[159](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606351] "RVV" "temp"
    unknown call_tmp[800428] "maybe param" "maybe type" "temp"
    (800431 'move' call_tmp[800428](125328 call chpl_build_low_bounded_range low[125317]))
    const r[125326] "dead at end of block" "const" "insert auto destroy"
    (645561 'init var' r[125326] call_tmp[800428])
    (125331 'end of statement')
    {
      unknown _indexOfInterest[125341] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125342] "expr temp" "temp"
      unknown call_tmp[800433] "expr temp" "maybe param" "maybe type" "temp"
      (800436 'move' call_tmp[800433](125334 call # r[125326] count[125321]))
      (125351 'move' _iterator[125342](125349 call _getIterator call_tmp[800433]))
      Defer
      {
        {
          (125368 call _freeIterator _iterator[125342])
        }
      }
      { scopeless type
        (125358 'move' _indexOfInterest[125341](125355 call iteratorIndex _iterator[125342]))
      }
      ForLoop[125343]
      {
        unknown i[125332] "index var" "insert auto destroy"
        (552976 'end of statement')
        (125363 'move' i[125332] _indexOfInterest[125341])
        (552977 'end of statement' i[125332])
        unknown yret[606355] "YVV" "temp"
        (606358 'move' yret[606355](606357 'deref' i[125332]))
        (125338 yield yret[606355])
        (552979 'end of statement' i[125332])
        label _continueLabel[125346]
        _indexOfInterest[125341]
        _iterator[125342]
      }
      label _breakLabel[125347]
    }
    (606353 return ret[606351])
  }
  function chpl_direct_counted_range_iter[125377](arg low[125379]:_any[141](?), arg count[125381]:_any[141](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606363] "RVV" "temp"
    (125397 call chpl_build_low_bounded_range low[125379])
    (552981 'end of statement')
    unknown call_tmp[800438] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (800441 'move' call_tmp[800438](125405 'typeof' low[125379]))
    unknown call_tmp[800443] "expr temp" "maybe param" "maybe type" "temp"
    (800446 'move' call_tmp[800443](125402 call : call_tmp[800438] string[244]))
    unknown call_tmp[800448] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (800451 'move' call_tmp[800448](125411 'typeof' count[125381]))
    unknown call_tmp[800453] "expr temp" "maybe param" "maybe type" "temp"
    (800456 'move' call_tmp[800453](125408 call : call_tmp[800448] string[244]))
    (125400 call compilerError "can't apply '#' to a range with idxType " call_tmp[800443] " using a count of type " call_tmp[800453])
    (606365 return ret[606363])
  }
  where {
    unknown tmp[485880] "maybe param" "temp"
    unknown call_tmp[800458] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (800461 'move' call_tmp[800458](125390 'typeof' low[125379]))
    (485891 'move' tmp[485880](125388 call chpl_isValidRangeIdxType call_tmp[800458]))
    unknown call_tmp[800463] "expr temp" "maybe param" "maybe type" "temp"
    (800466 'move' call_tmp[800463](485893 call _cond_invalid tmp[485880]))
    if call_tmp[800463]
    {
      (485896 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[676888] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[676889] "maybe param" "temp"
    unknown call_tmp[800468] "expr temp" "maybe param" "maybe type" "temp"
    (800471 'move' call_tmp[800468](485881 call isTrue tmp[485880]))
    (676894 'move' tmp[676889](676892 call _cond_test call_tmp[800468]))
    if tmp[676889]
    {
      unknown tmp[676896] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[800473] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (800476 'move' call_tmp[800473](125394 'typeof' count[125381]))
      unknown call_tmp[800478] "expr temp" "maybe param" "maybe type" "temp"
      (800481 'move' call_tmp[800478](125392 call chpl_isValidRangeIdxType call_tmp[800473]))
      (676898 'move' tmp[676896](485884 call isTrue call_tmp[800478]))
      (676903 'move' tmp[676888](676900 '_paramFoldLogical' tmp[676889] tmp[676896]))
    }
    {
      (676908 'move' tmp[676888](676905 '_paramFoldLogical' tmp[676889] 0))
    }
    (125383 call ! tmp[676888])
  }
  function chpl_direct_counted_range_iter_helper[125416](arg low[125418]:_any[141](?), arg count[125420]:_any[141](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606369] "RVV" "temp"
    unknown tmp[485901] "maybe param" "temp"
    unknown tmp[485922] "maybe param" "temp"
    (485933 'move' tmp[485922] 1)
    unknown call_tmp[800483] "expr temp" "maybe param" "maybe type" "temp"
    (800486 'move' call_tmp[800483](485935 call _cond_invalid tmp[485922]))
    if call_tmp[800483]
    {
      (485938 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[676915] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[676916] "maybe param" "temp"
    unknown call_tmp[800488] "expr temp" "maybe param" "maybe type" "temp"
    (800491 'move' call_tmp[800488](485923 call isTrue tmp[485922]))
    (676921 'move' tmp[676916](676919 call _cond_test call_tmp[800488]))
    if tmp[676916]
    {
      unknown tmp[676923] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[800493] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (800496 'move' call_tmp[800493](125438 'typeof' count[125420]))
      unknown call_tmp[800498] "expr temp" "maybe param" "maybe type" "temp"
      (800501 'move' call_tmp[800498](125436 call isIntType call_tmp[800493]))
      (676925 'move' tmp[676923](485926 call isTrue call_tmp[800498]))
      (676930 'move' tmp[676915](676927 '_paramFoldLogical' tmp[676916] tmp[676923]))
    }
    {
      (676935 'move' tmp[676915](676932 '_paramFoldLogical' tmp[676916] 0))
    }
    (485912 'move' tmp[485901] tmp[676915])
    unknown call_tmp[800503] "expr temp" "maybe param" "maybe type" "temp"
    (800506 'move' call_tmp[800503](485914 call _cond_invalid tmp[485901]))
    if call_tmp[800503]
    {
      (485917 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[676942] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[676943] "maybe param" "temp"
    unknown call_tmp[800508] "expr temp" "maybe param" "maybe type" "temp"
    (800511 'move' call_tmp[800508](485902 call isTrue tmp[485901]))
    (676948 'move' tmp[676943](676946 call _cond_test call_tmp[800508]))
    if tmp[676943]
    {
      unknown tmp[676950] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[800513] "expr temp" "maybe param" "maybe type" "temp"
      (800516 'move' call_tmp[800513](125439 call < count[125420] 0))
      (676952 'move' tmp[676950](485905 call isTrue call_tmp[800513]))
      (676957 'move' tmp[676942](676954 '_paramFoldLogical' tmp[676943] tmp[676950]))
    }
    {
      (676962 'move' tmp[676942](676959 '_paramFoldLogical' tmp[676943] 0))
    }
    unknown call_tmp[800518] "expr temp" "maybe param" "maybe type" "temp"
    (800521 'move' call_tmp[800518](125443 call _cond_test tmp[676942]))
    if call_tmp[800518]
    {
      (125427 call boundsCheckHalt module=[222] HaltWrappers[518] "With a negative count, the range must have a last index.")
      (402082 'referenced modules list' HaltWrappers[518])
    }
    const start[125449] "dead at end of block" "const" "insert auto destroy"
    (645563 'init var' start[125449] low[125418])
    (125452 'end of statement')
    const end[125454] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[676969] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[676970] "maybe param" "temp"
    unknown call_tmp[800523] "expr temp" "maybe param" "maybe type" "temp"
    (800526 'move' call_tmp[800523](125455 call == count[125420] 0))
    (676975 'move' tmp[676970](676973 call _cond_test call_tmp[800523]))
    if tmp[676970]
    {
      unknown tmp[676977] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[800528] "expr temp" "maybe param" "maybe type" "temp"
      (800531 'move' call_tmp[800528](125463 call : low[125418] uint(64)[86]))
      unknown call_tmp[800533] "expr temp" "maybe param" "maybe type" "temp"
      (800536 'move' call_tmp[800533](125461 call - call_tmp[800528] 1))
      unknown call_tmp[800538] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (800541 'move' call_tmp[800538](125469 'typeof' low[125418]))
      (676979 'move' tmp[676977](125459 call : call_tmp[800533] call_tmp[800538]))
      (676984 'move' tmp[676969](676981 '_paramFoldLogical' tmp[676970] tmp[676977]))
    }
    {
      unknown tmp[676986] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[800543] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (800546 'move' call_tmp[800543](125481 'typeof' low[125418]))
      unknown call_tmp[800548] "expr temp" "maybe param" "maybe type" "temp"
      (800551 'move' call_tmp[800548](125477 call : count[125420] call_tmp[800543]))
      unknown call_tmp[800553] "expr temp" "maybe param" "maybe type" "temp"
      (800556 'move' call_tmp[800553](125475 call - call_tmp[800548] 1))
      unknown call_tmp[800558] "expr temp" "maybe param" "maybe type" "temp"
      (800561 'move' call_tmp[800558](125472 call + low[125418] call_tmp[800553]))
      unknown call_tmp[800563] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (800566 'move' call_tmp[800563](125484 'typeof' low[125418]))
      (676988 'move' tmp[676986](125470 call : call_tmp[800558] call_tmp[800563]))
      (676993 'move' tmp[676969](676990 '_paramFoldLogical' tmp[676970] tmp[676986]))
    }
    (645565 'init var' end[125454] tmp[676969])
    (125489 'end of statement')
    {
      unknown _indexOfInterest[125500] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125501] "expr temp" "temp"
      unknown call_tmp[800568] "expr temp" "maybe param" "maybe type" "temp"
      (800571 'move' call_tmp[800568](125493 call chpl_direct_param_stride_range_iter start[125449] end[125454] 1))
      (125510 'move' _iterator[125501](125508 call _getIterator call_tmp[800568]))
      Defer
      {
        {
          (125525 call _freeIterator _iterator[125501])
        }
      }
      { scopeless type
        (125515 'move' _indexOfInterest[125500](125512 call iteratorIndex _iterator[125501]))
      }
      ForLoop[125502]
      {
        unknown i[125490] "index var" "insert auto destroy"
        (552987 'end of statement')
        (125520 'move' i[125490] _indexOfInterest[125500])
        (552988 'end of statement' i[125490])
        unknown yret[606373] "YVV" "temp"
        (606376 'move' yret[606373](606375 'deref' i[125490]))
        (125497 yield yret[606373])
        (552990 'end of statement' i[125490])
        label _continueLabel[125505]
        _indexOfInterest[125500]
        _iterator[125501]
      }
      label _breakLabel[125506]
    }
    (606371 return ret[606369])
  }
  function chpl_direct_pos_stride_range_iter[125534](arg low[125538]:_any[141](?), arg high[125541]:_any[141](?), arg stride[125543]:_any[141](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606381] "RVV" "temp"
    unknown call_tmp[800573] "expr temp" "maybe param" "maybe type" "temp"
    (800576 'move' call_tmp[800573](125658 call _cond_test useOptimizedRangeIterators[107092]))
    if call_tmp[800573]
    {
      unknown call_tmp[800578] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (800581 'move' call_tmp[800578](524758 'typeof' low[125538]))
      (125548 call chpl_range_check_stride stride[125543] call_tmp[800578])
      (552992 'end of statement')
      unknown call_tmp[800583] "expr temp" "maybe param" "maybe type" "temp"
      (800586 'move' call_tmp[800583](125559 call _cond_test 1))
      if call_tmp[800583]
      {
        unknown call_tmp[800588] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (800591 'move' call_tmp[800588](524760 'typeof' low[125538]))
        (125552 call chpl_checkIfRangeIterWillOverflow call_tmp[800588] low[125538] high[125541] stride[125543])
      }
      unknown i[125565] "dead at end of block" "insert auto destroy"
      unknown call_tmp[800593] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (800596 'move' call_tmp[800593](524762 'typeof' low[125538]))
      (645567 'default init var' i[125565] call_tmp[800593])
      (125568 'end of statement')
      CForLoop[125586]
      {
        {
          unknown yret[606385] "YVV" "temp"
          (606388 'move' yret[606385](606387 'deref' i[125565]))
          (125583 yield yret[606385])
          (552994 'end of statement' i[125565])
        }
        label _continueLabel[125602]
        {
          (125587 '=' i[125565] low[125538])
          (552996 'end of statement' i[125565])
        }
        {
          (125590 '<=' i[125565] high[125541])
          (552998 'end of statement' i[125565])
        }
        {
          unknown call_tmp[800598] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (800601 'move' call_tmp[800598](524764 'typeof' low[125538]))
          unknown call_tmp[800603] "expr temp" "maybe param" "maybe type" "temp"
          (800606 'move' call_tmp[800603](125596 call : stride[125543] call_tmp[800598]))
          (125593 '+=' i[125565] call_tmp[800603])
          (553000 'end of statement' i[125565])
        }
      }
      label _breakLabel[125603]
    }
    {
      {
        unknown _indexOfInterest[125625] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[125626] "expr temp" "temp"
        unknown call_tmp[800608] "expr temp" "maybe param" "maybe type" "temp"
        (800611 'move' call_tmp[800608](125613 call chpl_build_bounded_range low[125538] high[125541]))
        unknown call_tmp[800613] "expr temp" "maybe param" "maybe type" "temp"
        (800616 'move' call_tmp[800613](125609 call chpl_by call_tmp[800608] stride[125543]))
        unknown call_tmp[800620] "expr temp" "maybe param" "maybe type" "temp"
        (800623 'move' call_tmp[800620](125621 call(125618 call (partial) generalIterator _mt[203] call_tmp[800613])))
        (125635 'move' _iterator[125626](125633 call _getIterator call_tmp[800620]))
        Defer
        {
          {
            (125650 call _freeIterator _iterator[125626])
          }
        }
        { scopeless type
          (125640 'move' _indexOfInterest[125625](125637 call iteratorIndex _iterator[125626]))
        }
        ForLoop[125627]
        {
          unknown i[125607] "index var" "insert auto destroy"
          (553003 'end of statement')
          (125645 'move' i[125607] _indexOfInterest[125625])
          (553004 'end of statement' i[125607])
          unknown yret[606391] "YVV" "temp"
          (606394 'move' yret[606391](606393 'deref' i[125607]))
          (125622 yield yret[606391])
          (553006 'end of statement' i[125607])
          label _continueLabel[125630]
          _indexOfInterest[125625]
          _iterator[125626]
        }
        label _breakLabel[125631]
      }
    }
    (606383 return ret[606381])
  }
  function chpl_direct_param_stride_range_iter[125664](arg low[125668]:_any[141](?), arg high[125671]:_any[141](?), param arg stride[125673]:_any[141](?)) : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown ret[606399] "RVV" "temp"
    unknown call_tmp[800625] "expr temp" "maybe param" "maybe type" "temp"
    (800628 'move' call_tmp[800625](125857 call _cond_test useOptimizedRangeIterators[107092]))
    if call_tmp[800625]
    {
      unknown call_tmp[800630] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (800633 'move' call_tmp[800630](524766 'typeof' low[125668]))
      (125678 call chpl_range_check_stride stride[125673] call_tmp[800630])
      (553008 'end of statement')
      unknown i[125682] "dead at end of block" "insert auto destroy"
      unknown call_tmp[800635] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (800638 'move' call_tmp[800635](524768 'typeof' low[125668]))
      (645569 'default init var' i[125682] call_tmp[800635])
      (125685 'end of statement')
      unknown call_tmp[800640] "expr temp" "maybe param" "maybe type" "temp"
      (800643 'move' call_tmp[800640](125798 call > stride[125673] 0))
      unknown call_tmp[800645] "expr temp" "maybe param" "maybe type" "temp"
      (800648 'move' call_tmp[800645](125802 call _cond_test call_tmp[800640]))
      if call_tmp[800645]
      {
        unknown call_tmp[800650] "expr temp" "maybe param" "maybe type" "temp"
        (800653 'move' call_tmp[800650](125695 call _cond_test 1))
        if call_tmp[800650]
        {
          unknown call_tmp[800655] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (800658 'move' call_tmp[800655](524770 'typeof' low[125668]))
          (125688 call chpl_checkIfRangeIterWillOverflow call_tmp[800655] low[125668] high[125671] stride[125673])
        }
        CForLoop[125717]
        {
          {
            unknown yret[606403] "YVV" "temp"
            (606406 'move' yret[606403](606405 'deref' i[125682]))
            (125714 yield yret[606403])
            (553010 'end of statement' i[125682])
          }
          label _continueLabel[125733]
          {
            (125718 '=' i[125682] low[125668])
            (553012 'end of statement' i[125682])
          }
          {
            (125721 '<=' i[125682] high[125671])
            (553014 'end of statement' i[125682])
          }
          {
            unknown call_tmp[800660] "expr temp" "maybe param" "maybe type" "temp" "type variable"
            (800663 'move' call_tmp[800660](524772 'typeof' low[125668]))
            unknown call_tmp[800665] "expr temp" "maybe param" "maybe type" "temp"
            (800668 'move' call_tmp[800665](125727 call : stride[125673] call_tmp[800660]))
            (125724 '+=' i[125682] call_tmp[800665])
            (553016 'end of statement' i[125682])
          }
        }
        label _breakLabel[125734]
      }
      {
        unknown call_tmp[800670] "expr temp" "maybe param" "maybe type" "temp"
        (800673 'move' call_tmp[800670](125790 call < stride[125673] 0))
        unknown call_tmp[800675] "expr temp" "maybe param" "maybe type" "temp"
        (800678 'move' call_tmp[800675](125794 call _cond_test call_tmp[800670]))
        if call_tmp[800675]
        {
          unknown call_tmp[800680] "expr temp" "maybe param" "maybe type" "temp"
          (800683 'move' call_tmp[800680](125748 call _cond_test 1))
          if call_tmp[800680]
          {
            unknown call_tmp[800685] "expr temp" "maybe param" "maybe type" "temp" "type variable"
            (800688 'move' call_tmp[800685](524774 'typeof' low[125668]))
            (125739 call chpl_checkIfRangeIterWillOverflow call_tmp[800685] low[125668] high[125671] stride[125673] high[125671] low[125668])
          }
          CForLoop[125770]
          {
            {
              unknown yret[606409] "YVV" "temp"
              (606412 'move' yret[606409](606411 'deref' i[125682]))
              (125767 yield yret[606409])
              (553019 'end of statement' i[125682])
            }
            label _continueLabel[125786]
            {
              (125771 '=' i[125682] high[125671])
              (553021 'end of statement' i[125682])
            }
            {
              (125774 '>=' i[125682] low[125668])
              (553023 'end of statement' i[125682])
            }
            {
              unknown call_tmp[800690] "expr temp" "maybe param" "maybe type" "temp" "type variable"
              (800693 'move' call_tmp[800690](524776 'typeof' low[125668]))
              unknown call_tmp[800695] "expr temp" "maybe param" "maybe type" "temp"
              (800698 'move' call_tmp[800695](125780 call : stride[125673] call_tmp[800690]))
              (125777 '+=' i[125682] call_tmp[800695])
              (553025 'end of statement' i[125682])
            }
          }
          label _breakLabel[125787]
        }
      }
    }
    {
      {
        unknown _indexOfInterest[125824] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[125825] "expr temp" "temp"
        unknown call_tmp[800700] "expr temp" "maybe param" "maybe type" "temp"
        (800703 'move' call_tmp[800700](125814 call chpl_build_bounded_range low[125668] high[125671]))
        unknown call_tmp[800705] "expr temp" "maybe param" "maybe type" "temp"
        (800708 'move' call_tmp[800705](125810 call chpl_by call_tmp[800700] stride[125673]))
        unknown call_tmp[800712] "expr temp" "maybe param" "maybe type" "temp"
        (800715 'move' call_tmp[800712](125820 call(125817 call (partial) generalIterator _mt[203] call_tmp[800705])))
        (125834 'move' _iterator[125825](125832 call _getIterator call_tmp[800712]))
        Defer
        {
          {
            (125849 call _freeIterator _iterator[125825])
          }
        }
        { scopeless type
          (125839 'move' _indexOfInterest[125824](125836 call iteratorIndex _iterator[125825]))
        }
        ForLoop[125826]
        {
          unknown i[125808] "index var" "insert auto destroy"
          (553028 'end of statement')
          (125844 'move' i[125808] _indexOfInterest[125824])
          (553029 'end of statement' i[125808])
          unknown yret[606415] "YVV" "temp"
          (606418 'move' yret[606415](606417 'deref' i[125808]))
          (125821 yield yret[606415])
          (553031 'end of statement' i[125808])
          label _continueLabel[125829]
          _indexOfInterest[125824]
          _iterator[125825]
        }
        label _breakLabel[125830]
      }
    }
    (606401 return ret[606399])
  }
  function range[240](?).these[125863](arg _mt[125869]:_MT[201], arg this[125866]:range[240](?) :
  range[240](?)) : _unknown[42] "iterator fn" "method" "order independent yielding loops" "no return value for void"
  {
    unknown ret[606423] "RVV" "temp"
    (125886 call compilerError "iteration over a range with no bounds")
    (606425 return ret[606423])
  }
  where {
    unknown tmp[485943] "maybe param" "temp"
    unknown call_tmp[800717] "expr temp" "maybe param" "maybe type" "temp"
    (800720 'move' call_tmp[800717](125877 call hasLowBoundForIter this[125866]))
    (485954 'move' tmp[485943](125874 call ! call_tmp[800717]))
    unknown call_tmp[800722] "expr temp" "maybe param" "maybe type" "temp"
    (800725 'move' call_tmp[800722](485956 call _cond_invalid tmp[485943]))
    if call_tmp[800722]
    {
      (485959 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[677000] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[677001] "maybe param" "temp"
    unknown call_tmp[800727] "expr temp" "maybe param" "maybe type" "temp"
    (800730 'move' call_tmp[800727](485944 call isTrue tmp[485943]))
    (677006 'move' tmp[677001](677004 call _cond_test call_tmp[800727]))
    if tmp[677001]
    {
      unknown tmp[677008] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[800732] "expr temp" "maybe param" "maybe type" "temp"
      (800735 'move' call_tmp[800732](125882 call hasHighBoundForIter this[125866]))
      unknown call_tmp[800737] "expr temp" "maybe param" "maybe type" "temp"
      (800740 'move' call_tmp[800737](125879 call ! call_tmp[800732]))
      (677010 'move' tmp[677008](485947 call isTrue call_tmp[800737]))
      (677015 'move' tmp[677000](677012 '_paramFoldLogical' tmp[677001] tmp[677008]))
    }
    {
      (677020 'move' tmp[677000](677017 '_paramFoldLogical' tmp[677001] 0))
    }
    (1001416 call chpl_statementLevelSymbol tmp[677000])
  }
  { scopeless type
    nothing[7]
  }
  function boundsCheckUnboundedRange[125894](arg r[125899]:range[240](?)) : _unknown[42] "inline" "private" "no return value for void"
  {
    unknown call_tmp[800742] "expr temp" "maybe param" "maybe type" "temp"
    (800745 'move' call_tmp[800742](125943 call _cond_test 1))
    if call_tmp[800742]
    {
      unknown call_tmp[800749] "expr temp" "maybe param" "maybe type" "temp"
      (800752 'move' call_tmp[800749](125919 call(125916 call (partial) hasFirstForIter _mt[203] r[125899])))
      unknown call_tmp[800754] "expr temp" "maybe param" "maybe type" "temp"
      (800757 'move' call_tmp[800754](125913 call ! call_tmp[800749]))
      unknown call_tmp[800759] "expr temp" "maybe param" "maybe type" "temp"
      (800762 'move' call_tmp[800759](125920 call _cond_test call_tmp[800754]))
      if call_tmp[800759]
      {
        (125908 call boundsCheckHalt module=[222] HaltWrappers[518] "iteration over range that has no first index")
        (402088 'referenced modules list' HaltWrappers[518])
      }
      unknown call_tmp[800764] "expr temp" "maybe param" "maybe type" "temp"
      (800767 'move' call_tmp[800764](125935 call hasAmbiguousAlignmentForIter r[125899]))
      unknown call_tmp[800769] "expr temp" "maybe param" "maybe type" "temp"
      (800772 'move' call_tmp[800769](125937 call _cond_test call_tmp[800764]))
      if call_tmp[800769]
      {
        (125929 call boundsCheckHalt module=[222] HaltWrappers[518] "these -- Attempt to iterate over a range with ambiguous alignment.")
        (402095 'referenced modules list' HaltWrappers[518])
      }
    }
    (606427 return _void[46])
  }
  function range[240](?).these[125949](arg _mt[125955]:_MT[201], arg this[125952]:range[240](?) :
  range[240](?)) : _unknown[42] "iterator fn" "method" "order independent yielding loops" "no return value for void"
  {
    unknown ret[606431] "RVV" "temp"
    (125969 call boundsCheckUnboundedRange this[125952])
    (553036 'end of statement')
    unknown call_tmp[800776] "expr temp" "maybe param" "maybe type" "temp"
    (800779 'move' call_tmp[800776](402102 call strides _mt[203] this[125952]))
    unknown call_tmp[800783] "expr temp" "maybe param" "maybe type" "temp"
    (800786 'move' call_tmp[800783](125981 call(125978 call (partial) isNegative _mt[203] call_tmp[800776])))
    unknown call_tmp[800788] "expr temp" "maybe param" "maybe type" "temp"
    (800791 'move' call_tmp[800788](125982 call _cond_test call_tmp[800783]))
    if call_tmp[800788]
    {
      (125972 call compilerError "iteration over a range with no first index")
    }
    unknown i[125988] "dead at end of block" "insert auto destroy"
    unknown call_tmp[800795] "expr temp" "maybe param" "maybe type" "temp"
    (800798 'move' call_tmp[800795](428735 call chpl_integralIdxType _mt[203] this[125952]))
    (645571 'default init var' i[125988] call_tmp[800795])
    (125991 'end of statement')
    unknown call_tmp[800802] "expr temp" "maybe param" "maybe type" "temp"
    (800805 'move' call_tmp[800802](125997 call first _mt[203] this[125952]))
    unknown call_tmp[800807] "maybe param" "maybe type" "temp"
    (800810 'move' call_tmp[800807](125995 call chpl__idxToInt call_tmp[800802]))
    const start[125993] "dead at end of block" "const" "insert auto destroy"
    (645573 'init var' start[125993] call_tmp[800807])
    (126001 'end of statement')
    unknown call_tmp[800814] "expr temp" "maybe param" "maybe type" "temp"
    (800817 'move' call_tmp[800814](428739 call chpl_integralIdxType _mt[203] this[125952]))
    unknown call_tmp[800819] "expr temp" "maybe param" "maybe type" "temp"
    (800822 'move' call_tmp[800819](126007 call max call_tmp[800814]))
    unknown call_tmp[800826] "expr temp" "maybe param" "maybe type" "temp"
    (800829 'move' call_tmp[800826](428743 call stride _mt[203] this[125952]))
    unknown call_tmp[800833] "expr temp" "maybe param" "maybe type" "temp"
    (800836 'move' call_tmp[800833](428747 call chpl_integralIdxType _mt[203] this[125952]))
    unknown call_tmp[800838] "expr temp" "maybe param" "maybe type" "temp"
    (800841 'move' call_tmp[800838](126009 call : call_tmp[800826] call_tmp[800833]))
    unknown call_tmp[800843] "maybe param" "maybe type" "temp"
    (800846 'move' call_tmp[800843](126004 call - call_tmp[800819] call_tmp[800838]))
    const end[126003] "dead at end of block" "const" "insert auto destroy"
    (645575 'init var' end[126003] call_tmp[800843])
    (126014 'end of statement')
    CForLoop[126034]
    {
      {
        unknown yret[606435] "YVV" "temp"
        unknown call_tmp[800850] "expr temp" "maybe param" "maybe type" "temp"
        (800853 'move' call_tmp[800850](126031 call(428751 call (partial) chpl_intToIdx _mt[203] this[125952]) i[125988]))
        (606438 'move' yret[606435](606437 'deref' call_tmp[800850]))
        (126029 yield yret[606435])
        (553038 'end of statement' i[125988])
      }
      label _continueLabel[126050]
      {
        (126035 '=' i[125988] start[125993])
        (553040 'end of statement' i[125988] start[125993])
      }
      {
        (126038 '<=' i[125988] end[126003])
        (553043 'end of statement' i[125988] end[126003])
      }
      {
        unknown call_tmp[800857] "expr temp" "maybe param" "maybe type" "temp"
        (800860 'move' call_tmp[800857](428761 call stride _mt[203] this[125952]))
        unknown call_tmp[800864] "expr temp" "maybe param" "maybe type" "temp"
        (800867 'move' call_tmp[800864](428765 call chpl_integralIdxType _mt[203] this[125952]))
        unknown call_tmp[800869] "expr temp" "maybe param" "maybe type" "temp"
        (800872 'move' call_tmp[800869](126044 call : call_tmp[800857] call_tmp[800864]))
        (126041 '+=' i[125988] call_tmp[800869])
        (553046 'end of statement' i[125988])
      }
    }
    label _breakLabel[126051]
    unknown call_tmp[800874] "expr temp" "maybe param" "maybe type" "temp"
    (800877 'move' call_tmp[800874](126069 call > i[125988] end[126003]))
    unknown call_tmp[800879] "expr temp" "maybe param" "maybe type" "temp"
    (800882 'move' call_tmp[800879](126073 call _cond_test call_tmp[800874]))
    if call_tmp[800879]
    {
      unknown call_tmp[800886] "expr temp" "maybe param" "maybe type" "temp"
      (800889 'move' call_tmp[800886](428770 call idxType _mt[203] this[125952]))
      unknown call_tmp[800891] "expr temp" "maybe param" "maybe type" "temp"
      (800894 'move' call_tmp[800891](126062 call isIntegralType call_tmp[800886]))
      unknown call_tmp[800896] "expr temp" "maybe param" "maybe type" "temp"
      (800899 'move' call_tmp[800896](126064 call _cond_test call_tmp[800891]))
      if call_tmp[800896]
      {
        (126056 call halt "Loop over unbounded range surpassed representable values")
      }
    }
    (606433 return ret[606431])
  }
  where {
    unknown tmp[485964] "maybe param" "temp"
    (485975 'move' tmp[485964](125960 call hasLowBoundForIter this[125952]))
    unknown call_tmp[800901] "expr temp" "maybe param" "maybe type" "temp"
    (800904 'move' call_tmp[800901](485977 call _cond_invalid tmp[485964]))
    if call_tmp[800901]
    {
      (485980 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[677027] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[677028] "maybe param" "temp"
    unknown call_tmp[800906] "expr temp" "maybe param" "maybe type" "temp"
    (800909 'move' call_tmp[800906](485965 call isTrue tmp[485964]))
    (677033 'move' tmp[677028](677031 call _cond_test call_tmp[800906]))
    if tmp[677028]
    {
      unknown tmp[677035] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[800911] "expr temp" "maybe param" "maybe type" "temp"
      (800914 'move' call_tmp[800911](125965 call hasHighBoundForIter this[125952]))
      unknown call_tmp[800916] "expr temp" "maybe param" "maybe type" "temp"
      (800919 'move' call_tmp[800916](125962 call ! call_tmp[800911]))
      (677037 'move' tmp[677035](485968 call isTrue call_tmp[800916]))
      (677042 'move' tmp[677027](677039 '_paramFoldLogical' tmp[677028] tmp[677035]))
    }
    {
      (677047 'move' tmp[677027](677044 '_paramFoldLogical' tmp[677028] 0))
    }
    (1001418 call chpl_statementLevelSymbol tmp[677027])
  }
  function range[240](?).these[126080](arg _mt[126086]:_MT[201], arg this[126083]:range[240](?) :
  range[240](?)) : _unknown[42] "iterator fn" "method" "order independent yielding loops" "no return value for void"
  {
    unknown ret[606443] "RVV" "temp"
    (126100 call boundsCheckUnboundedRange this[126083])
    (553049 'end of statement')
    unknown call_tmp[800923] "expr temp" "maybe param" "maybe type" "temp"
    (800926 'move' call_tmp[800923](402108 call strides _mt[203] this[126083]))
    unknown call_tmp[800930] "expr temp" "maybe param" "maybe type" "temp"
    (800933 'move' call_tmp[800930](126110 call(126107 call (partial) isPositive _mt[203] call_tmp[800923])))
    unknown call_tmp[800935] "expr temp" "maybe param" "maybe type" "temp"
    (800938 'move' call_tmp[800935](126111 call _cond_test call_tmp[800930]))
    if call_tmp[800935]
    {
      (126103 call compilerError "iteration over a range with no first index")
    }
    unknown i[126117] "dead at end of block" "insert auto destroy"
    unknown call_tmp[800942] "expr temp" "maybe param" "maybe type" "temp"
    (800945 'move' call_tmp[800942](428779 call chpl_integralIdxType _mt[203] this[126083]))
    (645577 'default init var' i[126117] call_tmp[800942])
    (126120 'end of statement')
    unknown call_tmp[800949] "expr temp" "maybe param" "maybe type" "temp"
    (800952 'move' call_tmp[800949](126126 call first _mt[203] this[126083]))
    unknown call_tmp[800954] "maybe param" "maybe type" "temp"
    (800957 'move' call_tmp[800954](126124 call chpl__idxToInt call_tmp[800949]))
    const start[126122] "dead at end of block" "const" "insert auto destroy"
    (645579 'init var' start[126122] call_tmp[800954])
    (126130 'end of statement')
    unknown call_tmp[800961] "expr temp" "maybe param" "maybe type" "temp"
    (800964 'move' call_tmp[800961](428783 call chpl_integralIdxType _mt[203] this[126083]))
    unknown call_tmp[800966] "expr temp" "maybe param" "maybe type" "temp"
    (800969 'move' call_tmp[800966](126136 call min call_tmp[800961]))
    unknown call_tmp[800973] "expr temp" "maybe param" "maybe type" "temp"
    (800976 'move' call_tmp[800973](428787 call stride _mt[203] this[126083]))
    unknown call_tmp[800980] "expr temp" "maybe param" "maybe type" "temp"
    (800983 'move' call_tmp[800980](428791 call chpl_integralIdxType _mt[203] this[126083]))
    unknown call_tmp[800985] "expr temp" "maybe param" "maybe type" "temp"
    (800988 'move' call_tmp[800985](126138 call : call_tmp[800973] call_tmp[800980]))
    unknown call_tmp[800990] "maybe param" "maybe type" "temp"
    (800993 'move' call_tmp[800990](126133 call - call_tmp[800966] call_tmp[800985]))
    const end[126132] "dead at end of block" "const" "insert auto destroy"
    (645581 'init var' end[126132] call_tmp[800990])
    (126143 'end of statement')
    CForLoop[126163]
    {
      {
        unknown yret[606447] "YVV" "temp"
        unknown call_tmp[800997] "expr temp" "maybe param" "maybe type" "temp"
        (801000 'move' call_tmp[800997](126160 call(428795 call (partial) chpl_intToIdx _mt[203] this[126083]) i[126117]))
        (606450 'move' yret[606447](606449 'deref' call_tmp[800997]))
        (126158 yield yret[606447])
        (553051 'end of statement' i[126117])
      }
      label _continueLabel[126179]
      {
        (126164 '=' i[126117] start[126122])
        (553053 'end of statement' i[126117] start[126122])
      }
      {
        (126167 '>=' i[126117] end[126132])
        (553056 'end of statement' i[126117] end[126132])
      }
      {
        unknown call_tmp[801004] "expr temp" "maybe param" "maybe type" "temp"
        (801007 'move' call_tmp[801004](428805 call stride _mt[203] this[126083]))
        unknown call_tmp[801011] "expr temp" "maybe param" "maybe type" "temp"
        (801014 'move' call_tmp[801011](428809 call chpl_integralIdxType _mt[203] this[126083]))
        unknown call_tmp[801016] "expr temp" "maybe param" "maybe type" "temp"
        (801019 'move' call_tmp[801016](126173 call : call_tmp[801004] call_tmp[801011]))
        (126170 '+=' i[126117] call_tmp[801016])
        (553059 'end of statement' i[126117])
      }
    }
    label _breakLabel[126180]
    unknown call_tmp[801021] "expr temp" "maybe param" "maybe type" "temp"
    (801024 'move' call_tmp[801021](126196 call < i[126117] end[126132]))
    unknown call_tmp[801026] "expr temp" "maybe param" "maybe type" "temp"
    (801029 'move' call_tmp[801026](126200 call _cond_test call_tmp[801021]))
    if call_tmp[801026]
    {
      unknown call_tmp[801033] "expr temp" "maybe param" "maybe type" "temp"
      (801036 'move' call_tmp[801033](428814 call idxType _mt[203] this[126083]))
      unknown call_tmp[801038] "expr temp" "maybe param" "maybe type" "temp"
      (801041 'move' call_tmp[801038](126189 call isIntegralType call_tmp[801033]))
      unknown call_tmp[801043] "expr temp" "maybe param" "maybe type" "temp"
      (801046 'move' call_tmp[801043](126191 call _cond_test call_tmp[801038]))
      if call_tmp[801043]
      {
        (126185 call halt "Loop over unbounded range surpassed representable values")
      }
    }
    (606445 return ret[606443])
  }
  where {
    unknown tmp[485985] "maybe param" "temp"
    unknown call_tmp[801048] "expr temp" "maybe param" "maybe type" "temp"
    (801051 'move' call_tmp[801048](126093 call hasLowBoundForIter this[126083]))
    (485996 'move' tmp[485985](126090 call ! call_tmp[801048]))
    unknown call_tmp[801053] "expr temp" "maybe param" "maybe type" "temp"
    (801056 'move' call_tmp[801053](485998 call _cond_invalid tmp[485985]))
    if call_tmp[801053]
    {
      (486001 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[677054] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[677055] "maybe param" "temp"
    unknown call_tmp[801058] "expr temp" "maybe param" "maybe type" "temp"
    (801061 'move' call_tmp[801058](485986 call isTrue tmp[485985]))
    (677060 'move' tmp[677055](677058 call _cond_test call_tmp[801058]))
    if tmp[677055]
    {
      unknown tmp[677062] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[801063] "expr temp" "maybe param" "maybe type" "temp"
      (801066 'move' call_tmp[801063](126096 call hasHighBoundForIter this[126083]))
      (677064 'move' tmp[677062](485989 call isTrue call_tmp[801063]))
      (677069 'move' tmp[677054](677066 '_paramFoldLogical' tmp[677055] tmp[677062]))
    }
    {
      (677074 'move' tmp[677054](677071 '_paramFoldLogical' tmp[677055] 0))
    }
    (1001420 call chpl_statementLevelSymbol tmp[677054])
  }
  function range[240](?).these[126207](arg _mt[126213]:_MT[201], arg this[126210]:range[240](?) :
  range[240](?)) : _unknown[42] "iterator fn" "method" "order independent yielding loops" "no return value for void"
  {
    unknown ret[606455] "RVV" "temp"
    unknown call_tmp[801070] "expr temp" "maybe param" "maybe type" "temp"
    (801073 'move' call_tmp[801070](428837 call idxType _mt[203] this[126210]))
    unknown call_tmp[801075] "expr temp" "maybe param" "maybe type" "temp"
    (801078 'move' call_tmp[801075](126243 call chpl__singleValIdxType call_tmp[801070]))
    unknown call_tmp[801080] "expr temp" "maybe param" "maybe type" "temp"
    (801083 'move' call_tmp[801080](126245 call _cond_test call_tmp[801075]))
    if call_tmp[801080]
    {
      unknown call_tmp[801087] "expr temp" "maybe param" "maybe type" "temp"
      (801090 'move' call_tmp[801087](428827 call _low _mt[203] this[126210]))
      unknown call_tmp[801094] "expr temp" "maybe param" "maybe type" "temp"
      (801097 'move' call_tmp[801094](428832 call _high _mt[203] this[126210]))
      unknown call_tmp[801099] "expr temp" "maybe param" "maybe type" "temp"
      (801102 'move' call_tmp[801099](126233 call > call_tmp[801087] call_tmp[801094]))
      unknown call_tmp[801104] "expr temp" "maybe param" "maybe type" "temp"
      (801107 'move' call_tmp[801104](126237 call _cond_test call_tmp[801099]))
      if call_tmp[801104]
      {
        gotoReturn _end_these[606453] _end_these[606453]
      }
    }
    unknown call_tmp[801109] "expr temp" "maybe param" "maybe type" "temp"
    (801112 'move' call_tmp[801109](126394 call _cond_test useOptimizedRangeIterators[107092]))
    if call_tmp[801109]
    {
      unknown call_tmp[801114] "expr temp" "maybe param" "maybe type" "temp"
      (801117 'move' call_tmp[801114](126269 call _cond_test 1))
      if call_tmp[801114]
      {
        (126252 call(428843 call (partial) checkIfIterWillOverflow _mt[203] this[126210]))
        (553063 'end of statement')
        unknown call_tmp[801121] "expr temp" "maybe param" "maybe type" "temp"
        (801124 'move' call_tmp[801121](126261 call hasAmbiguousAlignmentForIter this[126210]))
        unknown call_tmp[801126] "expr temp" "maybe param" "maybe type" "temp"
        (801129 'move' call_tmp[801126](126263 call _cond_test call_tmp[801121]))
        if call_tmp[801126]
        {
          (126257 call boundsCheckHalt module=[222] HaltWrappers[518] "these -- Attempt to iterate over a range with ambiguous alignment.")
          (402113 'referenced modules list' HaltWrappers[518])
        }
      }
      unknown i[126274] "dead at end of block" "insert auto destroy"
      unknown call_tmp[801133] "expr temp" "maybe param" "maybe type" "temp"
      (801136 'move' call_tmp[801133](428849 call chpl_integralIdxType _mt[203] this[126210]))
      (645583 'default init var' i[126274] call_tmp[801133])
      (126277 'end of statement')
      unknown call_tmp[801140] "maybe param" "maybe type" "temp"
      (801143 'move' call_tmp[801140](428853 call chpl_firstAsIntForIter _mt[203] this[126210]))
      const start[126279] "dead at end of block" "const" "insert auto destroy"
      (645585 'init var' start[126279] call_tmp[801140])
      (126282 'end of statement')
      const end[126284] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[677081] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[677082] "maybe param" "temp"
      unknown call_tmp[801147] "expr temp" "maybe param" "maybe type" "temp"
      (801150 'move' call_tmp[801147](126289 call _low _mt[203] this[126210]))
      unknown call_tmp[801154] "expr temp" "maybe param" "maybe type" "temp"
      (801157 'move' call_tmp[801154](126293 call _high _mt[203] this[126210]))
      unknown call_tmp[801159] "expr temp" "maybe param" "maybe type" "temp"
      (801162 'move' call_tmp[801159](126286 call > call_tmp[801147] call_tmp[801154]))
      (677087 'move' tmp[677082](677085 call _cond_test call_tmp[801159]))
      if tmp[677082]
      {
        (677092 'move' tmp[677081](677089 '_paramFoldLogical' tmp[677082] start[126279]))
      }
      {
        unknown tmp[677094] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[801166] "expr temp" "maybe param" "maybe type" "temp"
        (801169 'move' call_tmp[801166](428862 call chpl_lastAsIntForIter _mt[203] this[126210]))
        unknown call_tmp[801173] "expr temp" "maybe param" "maybe type" "temp"
        (801176 'move' call_tmp[801173](428866 call stride _mt[203] this[126210]))
        unknown call_tmp[801180] "expr temp" "maybe param" "maybe type" "temp"
        (801183 'move' call_tmp[801180](428870 call chpl_integralIdxType _mt[203] this[126210]))
        unknown call_tmp[801185] "expr temp" "maybe param" "maybe type" "temp"
        (801188 'move' call_tmp[801185](126300 call : call_tmp[801173] call_tmp[801180]))
        (677096 'move' tmp[677094](126297 call + call_tmp[801166] call_tmp[801185]))
        (677101 'move' tmp[677081](677098 '_paramFoldLogical' tmp[677082] tmp[677094]))
      }
      unknown call_tmp[801192] "maybe param" "maybe type" "temp"
      (801195 'move' call_tmp[801192](428857 call chpl_integralIdxType _mt[203] this[126210]))
      (645587 'init var' end[126284] tmp[677081] call_tmp[801192])
      (126308 'end of statement' start[126279])
      CForLoop[126328]
      {
        {
          unknown yret[606461] "YVV" "temp"
          unknown call_tmp[801199] "expr temp" "maybe param" "maybe type" "temp"
          (801202 'move' call_tmp[801199](126325 call(428874 call (partial) chpl_intToIdx _mt[203] this[126210]) i[126274]))
          (606464 'move' yret[606461](606463 'deref' call_tmp[801199]))
          (126323 yield yret[606461])
          (553066 'end of statement' i[126274])
        }
        label _continueLabel[126344]
        {
          (126329 '=' i[126274] start[126279])
          (553068 'end of statement' i[126274] start[126279])
        }
        {
          (126332 '!=' i[126274] end[126284])
          (553071 'end of statement' i[126274] end[126284])
        }
        {
          unknown call_tmp[801206] "expr temp" "maybe param" "maybe type" "temp"
          (801209 'move' call_tmp[801206](428884 call stride _mt[203] this[126210]))
          unknown call_tmp[801213] "expr temp" "maybe param" "maybe type" "temp"
          (801216 'move' call_tmp[801213](428888 call chpl_integralIdxType _mt[203] this[126210]))
          unknown call_tmp[801218] "expr temp" "maybe param" "maybe type" "temp"
          (801221 'move' call_tmp[801218](126338 call : call_tmp[801206] call_tmp[801213]))
          (126335 '+=' i[126274] call_tmp[801218])
          (553074 'end of statement' i[126274])
        }
      }
      label _breakLabel[126345]
    }
    {
      {
        unknown _indexOfInterest[126361] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[126362] "expr temp" "temp"
        unknown call_tmp[801225] "expr temp" "maybe param" "maybe type" "temp"
        (801228 'move' call_tmp[801225](126355 call(126352 call (partial) generalIterator _mt[203] this[126210])))
        (126371 'move' _iterator[126362](126369 call _getIterator call_tmp[801225]))
        Defer
        {
          {
            (126386 call _freeIterator _iterator[126362])
          }
        }
        { scopeless type
          (126376 'move' _indexOfInterest[126361](126373 call iteratorIndex _iterator[126362]))
        }
        ForLoop[126363] order-independent
        {
          unknown i[126349] "index var" "insert auto destroy"
          (553077 'end of statement')
          (126381 'move' i[126349] _indexOfInterest[126361])
          (553078 'end of statement' i[126349])
          unknown yret[606467] "YVV" "temp"
          (606470 'move' yret[606467](606469 'deref' i[126349]))
          (126356 yield yret[606467])
          (553080 'end of statement' i[126349])
          label _continueLabel[126366]
          _indexOfInterest[126361]
          _iterator[126362]
        }
        label _breakLabel[126367]
      }
    }
    label _end_these[606453]
    (606457 return ret[606455])
  }
  where {
    unknown tmp[486006] "maybe param" "temp"
    unknown tmp[486027] "maybe param" "temp"
    (486038 'move' tmp[486027](126220 call hasLowBoundForIter this[126210]))
    unknown call_tmp[801230] "expr temp" "maybe param" "maybe type" "temp"
    (801233 'move' call_tmp[801230](486040 call _cond_invalid tmp[486027]))
    if call_tmp[801230]
    {
      (486043 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[677108] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[677109] "maybe param" "temp"
    unknown call_tmp[801235] "expr temp" "maybe param" "maybe type" "temp"
    (801238 'move' call_tmp[801235](486028 call isTrue tmp[486027]))
    (677114 'move' tmp[677109](677112 call _cond_test call_tmp[801235]))
    if tmp[677109]
    {
      unknown tmp[677116] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[801240] "expr temp" "maybe param" "maybe type" "temp"
      (801243 'move' call_tmp[801240](126223 call hasHighBoundForIter this[126210]))
      (677118 'move' tmp[677116](486031 call isTrue call_tmp[801240]))
      (677123 'move' tmp[677108](677120 '_paramFoldLogical' tmp[677109] tmp[677116]))
    }
    {
      (677128 'move' tmp[677108](677125 '_paramFoldLogical' tmp[677109] 0))
    }
    (486017 'move' tmp[486006] tmp[677108])
    unknown call_tmp[801245] "expr temp" "maybe param" "maybe type" "temp"
    (801248 'move' call_tmp[801245](486019 call _cond_invalid tmp[486006]))
    if call_tmp[801245]
    {
      (486022 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[677135] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[677136] "maybe param" "temp"
    unknown call_tmp[801250] "expr temp" "maybe param" "maybe type" "temp"
    (801253 'move' call_tmp[801250](486007 call isTrue tmp[486006]))
    (677141 'move' tmp[677136](677139 call _cond_test call_tmp[801250]))
    if tmp[677136]
    {
      unknown tmp[677143] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[801257] "expr temp" "maybe param" "maybe type" "temp"
      (801260 'move' call_tmp[801257](126228 call(428822 call (partial) hasPosNegUnitStride _mt[203] this[126210])))
      unknown call_tmp[801262] "expr temp" "maybe param" "maybe type" "temp"
      (801265 'move' call_tmp[801262](126225 call ! call_tmp[801257]))
      (677145 'move' tmp[677143](486010 call isTrue call_tmp[801262]))
      (677150 'move' tmp[677135](677147 '_paramFoldLogical' tmp[677136] tmp[677143]))
    }
    {
      (677155 'move' tmp[677135](677152 '_paramFoldLogical' tmp[677136] 0))
    }
    (1001422 call chpl_statementLevelSymbol tmp[677135])
  }
  function range[240](?).these[126401](arg _mt[126407]:_MT[201], arg this[126404]:range[240](?) :
  range[240](?)) : _unknown[42] "iterator fn" "method" "order independent yielding loops" "no return value for void"
  {
    unknown ret[606475] "RVV" "temp"
    unknown call_tmp[801269] "expr temp" "maybe param" "maybe type" "temp"
    (801272 'move' call_tmp[801269](428911 call idxType _mt[203] this[126404]))
    unknown call_tmp[801274] "expr temp" "maybe param" "maybe type" "temp"
    (801277 'move' call_tmp[801274](126435 call chpl__singleValIdxType call_tmp[801269]))
    unknown call_tmp[801279] "expr temp" "maybe param" "maybe type" "temp"
    (801282 'move' call_tmp[801279](126437 call _cond_test call_tmp[801274]))
    if call_tmp[801279]
    {
      unknown call_tmp[801286] "expr temp" "maybe param" "maybe type" "temp"
      (801289 'move' call_tmp[801286](428901 call _low _mt[203] this[126404]))
      unknown call_tmp[801293] "expr temp" "maybe param" "maybe type" "temp"
      (801296 'move' call_tmp[801293](428906 call _high _mt[203] this[126404]))
      unknown call_tmp[801298] "expr temp" "maybe param" "maybe type" "temp"
      (801301 'move' call_tmp[801298](126425 call > call_tmp[801286] call_tmp[801293]))
      unknown call_tmp[801303] "expr temp" "maybe param" "maybe type" "temp"
      (801306 'move' call_tmp[801303](126429 call _cond_test call_tmp[801298]))
      if call_tmp[801303]
      {
        gotoReturn _end_these[606473] _end_these[606473]
      }
    }
    unknown call_tmp[801308] "expr temp" "maybe param" "maybe type" "temp"
    (801311 'move' call_tmp[801308](126608 call _cond_test useOptimizedRangeIterators[107092]))
    if call_tmp[801308]
    {
      unknown call_tmp[801313] "expr temp" "maybe param" "maybe type" "temp"
      (801316 'move' call_tmp[801313](126446 call _cond_test 1))
      if call_tmp[801313]
      {
        (126443 call(428915 call (partial) checkIfIterWillOverflow _mt[203] this[126404]))
      }
      unknown i[126452] "dead at end of block" "insert auto destroy"
      unknown call_tmp[801322] "expr temp" "maybe param" "maybe type" "temp"
      (801325 'move' call_tmp[801322](428920 call chpl_integralIdxType _mt[203] this[126404]))
      (645589 'default init var' i[126452] call_tmp[801322])
      (126455 'end of statement')
      unknown call_tmp[801327] "expr temp" "maybe param" "maybe type" "temp"
      (801330 'move' call_tmp[801327](126461 call lowBoundForIter this[126404]))
      unknown call_tmp[801332] "maybe param" "maybe type" "temp"
      (801335 'move' call_tmp[801332](126459 call chpl__idxToInt call_tmp[801327]))
      const start[126457] "dead at end of block" "const" "insert auto destroy"
      (645591 'init var' start[126457] call_tmp[801332])
      (126464 'end of statement')
      unknown call_tmp[801337] "expr temp" "maybe param" "maybe type" "temp"
      (801340 'move' call_tmp[801337](126470 call highBoundForIter this[126404]))
      unknown call_tmp[801342] "maybe param" "maybe type" "temp"
      (801345 'move' call_tmp[801342](126468 call chpl__idxToInt call_tmp[801337]))
      const end[126466] "dead at end of block" "const" "insert auto destroy"
      (645593 'init var' end[126466] call_tmp[801342])
      (126473 'end of statement')
      unknown call_tmp[801349] "expr temp" "maybe param" "maybe type" "temp"
      (801352 'move' call_tmp[801349](428954 call stride _mt[203] this[126404]))
      unknown call_tmp[801354] "expr temp" "maybe param" "maybe type" "temp"
      (801357 'move' call_tmp[801354](126552 call == call_tmp[801349] 1))
      unknown call_tmp[801359] "expr temp" "maybe param" "maybe type" "temp"
      (801362 'move' call_tmp[801359](126556 call _cond_test call_tmp[801354]))
      if call_tmp[801359]
      {
        CForLoop[126493]
        {
          {
            unknown yret[606481] "YVV" "temp"
            unknown call_tmp[801366] "expr temp" "maybe param" "maybe type" "temp"
            (801369 'move' call_tmp[801366](126490 call(428926 call (partial) chpl_intToIdx _mt[203] this[126404]) i[126452]))
            (606484 'move' yret[606481](606483 'deref' call_tmp[801366]))
            (126488 yield yret[606481])
            (553084 'end of statement' i[126452])
          }
          label _continueLabel[126509]
          {
            (126494 '=' i[126452] start[126457])
            (553086 'end of statement' i[126452] start[126457])
          }
          {
            (126497 '<=' i[126452] end[126466])
            (553089 'end of statement' i[126452] end[126466])
          }
          {
            unknown call_tmp[801373] "expr temp" "maybe param" "maybe type" "temp"
            (801376 'move' call_tmp[801373](428936 call chpl_integralIdxType _mt[203] this[126404]))
            unknown call_tmp[801378] "expr temp" "maybe param" "maybe type" "temp"
            (801381 'move' call_tmp[801378](126503 call : 1 call_tmp[801373]))
            (126500 '+=' i[126452] call_tmp[801378])
            (553092 'end of statement' i[126452])
          }
        }
        label _breakLabel[126510]
      }
      {
        CForLoop[126532]
        {
          {
            unknown yret[606487] "YVV" "temp"
            unknown call_tmp[801385] "expr temp" "maybe param" "maybe type" "temp"
            (801388 'move' call_tmp[801385](126529 call(428940 call (partial) chpl_intToIdx _mt[203] this[126404]) i[126452]))
            (606490 'move' yret[606487](606489 'deref' call_tmp[801385]))
            (126527 yield yret[606487])
            (553094 'end of statement' i[126452])
          }
          label _continueLabel[126548]
          {
            (126533 '=' i[126452] end[126466])
            (553096 'end of statement' i[126452] end[126466])
          }
          {
            (126536 '>=' i[126452] start[126457])
            (553099 'end of statement' i[126452] start[126457])
          }
          {
            unknown call_tmp[801392] "expr temp" "maybe param" "maybe type" "temp"
            (801395 'move' call_tmp[801392](428950 call chpl_integralIdxType _mt[203] this[126404]))
            unknown call_tmp[801397] "expr temp" "maybe param" "maybe type" "temp"
            (801400 'move' call_tmp[801397](126542 call : 1 call_tmp[801392]))
            (126539 '-=' i[126452] call_tmp[801397])
            (553102 'end of statement' i[126452])
          }
        }
        label _breakLabel[126549]
      }
    }
    {
      {
        unknown _indexOfInterest[126575] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[126576] "expr temp" "temp"
        unknown call_tmp[801404] "expr temp" "maybe param" "maybe type" "temp"
        (801407 'move' call_tmp[801404](126569 call(126566 call (partial) generalIterator _mt[203] this[126404])))
        (126585 'move' _iterator[126576](126583 call _getIterator call_tmp[801404]))
        Defer
        {
          {
            (126600 call _freeIterator _iterator[126576])
          }
        }
        { scopeless type
          (126590 'move' _indexOfInterest[126575](126587 call iteratorIndex _iterator[126576]))
        }
        ForLoop[126577] order-independent
        {
          unknown i[126563] "index var" "insert auto destroy"
          (553105 'end of statement')
          (126595 'move' i[126563] _indexOfInterest[126575])
          (553106 'end of statement' i[126563])
          unknown yret[606493] "YVV" "temp"
          (606496 'move' yret[606493](606495 'deref' i[126563]))
          (126570 yield yret[606493])
          (553108 'end of statement' i[126563])
          label _continueLabel[126580]
          _indexOfInterest[126575]
          _iterator[126576]
        }
        label _breakLabel[126581]
      }
    }
    label _end_these[606473]
    (606477 return ret[606475])
  }
  where {
    unknown tmp[486048] "maybe param" "temp"
    unknown tmp[486069] "maybe param" "temp"
    (486080 'move' tmp[486069](126414 call hasLowBoundForIter this[126404]))
    unknown call_tmp[801409] "expr temp" "maybe param" "maybe type" "temp"
    (801412 'move' call_tmp[801409](486082 call _cond_invalid tmp[486069]))
    if call_tmp[801409]
    {
      (486085 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[677162] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[677163] "maybe param" "temp"
    unknown call_tmp[801414] "expr temp" "maybe param" "maybe type" "temp"
    (801417 'move' call_tmp[801414](486070 call isTrue tmp[486069]))
    (677168 'move' tmp[677163](677166 call _cond_test call_tmp[801414]))
    if tmp[677163]
    {
      unknown tmp[677170] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[801419] "expr temp" "maybe param" "maybe type" "temp"
      (801422 'move' call_tmp[801419](126417 call hasHighBoundForIter this[126404]))
      (677172 'move' tmp[677170](486073 call isTrue call_tmp[801419]))
      (677177 'move' tmp[677162](677174 '_paramFoldLogical' tmp[677163] tmp[677170]))
    }
    {
      (677182 'move' tmp[677162](677179 '_paramFoldLogical' tmp[677163] 0))
    }
    (486059 'move' tmp[486048] tmp[677162])
    unknown call_tmp[801424] "expr temp" "maybe param" "maybe type" "temp"
    (801427 'move' call_tmp[801424](486061 call _cond_invalid tmp[486048]))
    if call_tmp[801424]
    {
      (486064 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[677189] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[677190] "maybe param" "temp"
    unknown call_tmp[801429] "expr temp" "maybe param" "maybe type" "temp"
    (801432 'move' call_tmp[801429](486049 call isTrue tmp[486048]))
    (677195 'move' tmp[677190](677193 call _cond_test call_tmp[801429]))
    if tmp[677190]
    {
      unknown tmp[677197] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[801436] "expr temp" "maybe param" "maybe type" "temp"
      (801439 'move' call_tmp[801436](126420 call(428896 call (partial) hasPosNegUnitStride _mt[203] this[126404])))
      (677199 'move' tmp[677197](486052 call isTrue call_tmp[801436]))
      (677204 'move' tmp[677189](677201 '_paramFoldLogical' tmp[677190] tmp[677197]))
    }
    {
      (677209 'move' tmp[677189](677206 '_paramFoldLogical' tmp[677190] 0))
    }
    (1001424 call chpl_statementLevelSymbol tmp[677189])
  }
  function range[240](?).generalIterator[126615](arg _mt[126621]:_MT[201], arg this[126618]:range[240](?) :
  range[240](?)) : _unknown[42] "iterator fn" "method" "order independent yielding loops" "no return value for void"
  {
    unknown ret[606501] "RVV" "temp"
    unknown tmp[486090] "maybe param" "temp"
    (486101 'move' tmp[486090] 1)
    unknown call_tmp[801441] "expr temp" "maybe param" "maybe type" "temp"
    (801444 'move' call_tmp[801441](486103 call _cond_invalid tmp[486090]))
    if call_tmp[801441]
    {
      (486106 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[677216] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[677217] "maybe param" "temp"
    unknown call_tmp[801446] "expr temp" "maybe param" "maybe type" "temp"
    (801449 'move' call_tmp[801446](486091 call isTrue tmp[486090]))
    (677222 'move' tmp[677217](677220 call _cond_test call_tmp[801446]))
    if tmp[677217]
    {
      unknown tmp[677224] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[801451] "expr temp" "maybe param" "maybe type" "temp"
      (801454 'move' call_tmp[801451](126635 call hasAmbiguousAlignmentForIter this[126618]))
      (677226 'move' tmp[677224](486094 call isTrue call_tmp[801451]))
      (677231 'move' tmp[677216](677228 '_paramFoldLogical' tmp[677217] tmp[677224]))
    }
    {
      (677236 'move' tmp[677216](677233 '_paramFoldLogical' tmp[677217] 0))
    }
    unknown call_tmp[801456] "expr temp" "maybe param" "maybe type" "temp"
    (801459 'move' call_tmp[801456](126637 call _cond_test tmp[677216]))
    if call_tmp[801456]
    {
      (126628 call boundsCheckHalt module=[222] HaltWrappers[518] "these -- Attempt to iterate over a range with ambiguous alignment.")
      (402123 'referenced modules list' HaltWrappers[518])
    }
    unknown i[126643] "dead at end of block" "insert auto destroy"
    unknown call_tmp[801463] "expr temp" "maybe param" "maybe type" "temp"
    (801466 'move' call_tmp[801463](428962 call chpl_integralIdxType _mt[203] this[126618]))
    (645595 'default init var' i[126643] call_tmp[801463])
    (126646 'end of statement')
    unknown call_tmp[801470] "maybe param" "maybe type" "temp"
    (801473 'move' call_tmp[801470](126650 call first _mt[203] this[126618]))
    const start[126648] "dead at end of block" "const" "insert auto destroy"
    (645597 'init var' start[126648] call_tmp[801470])
    (126654 'end of statement')
    const end[126656] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[677243] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[677244] "maybe param" "temp"
    unknown call_tmp[801477] "expr temp" "maybe param" "maybe type" "temp"
    (801480 'move' call_tmp[801477](126660 call _low _mt[203] this[126618]))
    unknown call_tmp[801484] "expr temp" "maybe param" "maybe type" "temp"
    (801487 'move' call_tmp[801484](126664 call _high _mt[203] this[126618]))
    unknown call_tmp[801489] "expr temp" "maybe param" "maybe type" "temp"
    (801492 'move' call_tmp[801489](126657 call > call_tmp[801477] call_tmp[801484]))
    (677249 'move' tmp[677244](677247 call _cond_test call_tmp[801489]))
    if tmp[677244]
    {
      (677254 'move' tmp[677243](677251 '_paramFoldLogical' tmp[677244] start[126648]))
    }
    {
      unknown tmp[677256] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (677258 'move' tmp[677256](126669 call last _mt[203] this[126618]))
      (677263 'move' tmp[677243](677260 '_paramFoldLogical' tmp[677244] tmp[677256]))
    }
    (645599 'init var' end[126656] tmp[677243])
    (126676 'end of statement' start[126648])
    CForLoop[126710]
    {
      {
        unknown yret[606505] "YVV" "temp"
        (606508 'move' yret[606505](606507 'deref' i[126643]))
        (126695 yield yret[606505])
        (553113 'end of statement' i[126643])
        unknown call_tmp[801496] "expr temp" "maybe param" "maybe type" "temp"
        (801499 'move' call_tmp[801496](126700 call == i[126643] end[126656]))
        unknown call_tmp[801501] "expr temp" "maybe param" "maybe type" "temp"
        (801504 'move' call_tmp[801501](126704 call _cond_test call_tmp[801496]))
        if call_tmp[801501]
        {
          break _breakLabel[126731] _breakLabel[126731]
        }
      }
      label _continueLabel[126730]
      {
        (126711 '=' i[126643] start[126648])
        (553115 'end of statement' i[126643] start[126648])
      }
      {
        unknown call_tmp[801506] "expr temp" "maybe param" "maybe type" "temp"
        (801509 'move' call_tmp[801506](126716 call highBoundForIter this[126618]))
        unknown call_tmp[801511] "expr temp" "maybe param" "maybe type" "temp"
        (801514 'move' call_tmp[801511](126719 call lowBoundForIter this[126618]))
        (126714 '>=' call_tmp[801506] call_tmp[801511])
      }
      {
        unknown call_tmp[801518] "expr temp" "maybe param" "maybe type" "temp"
        (801521 'move' call_tmp[801518](428975 call stride _mt[203] this[126618]))
        unknown call_tmp[801525] "expr temp" "maybe param" "maybe type" "temp"
        (801528 'move' call_tmp[801525](428979 call chpl_integralIdxType _mt[203] this[126618]))
        unknown call_tmp[801530] "expr temp" "maybe param" "maybe type" "temp"
        (801533 'move' call_tmp[801530](126724 call : call_tmp[801518] call_tmp[801525]))
        (126721 '+=' i[126643] call_tmp[801530])
        (553119 'end of statement' i[126643])
      }
    }
    label _breakLabel[126731]
    (606503 return ret[606501])
  }
  function range[240](?).these[126736](arg _mt[126746]:_MT[201], arg this[126739]:range[240](?) :
  range[240](?), param arg tag[126743]:iterKind[52144]) : _unknown[42] "iterator fn" "method" "no return value for void"
  {
    unknown ret[606513] "RVV" "temp"
    unknown tmp[486132] "maybe param" "temp"
    (486143 'move' tmp[486132](126774 call hasLowBoundForIter this[126739]))
    unknown call_tmp[801535] "expr temp" "maybe param" "maybe type" "temp"
    (801538 'move' call_tmp[801535](486145 call _cond_invalid tmp[486132]))
    if call_tmp[801535]
    {
      (486148 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[677270] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[677271] "maybe param" "temp"
    unknown call_tmp[801540] "expr temp" "maybe param" "maybe type" "temp"
    (801543 'move' call_tmp[801540](486133 call isTrue tmp[486132]))
    (677276 'move' tmp[677271](677274 call _cond_test call_tmp[801540]))
    if tmp[677271]
    {
      unknown tmp[677278] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[801545] "expr temp" "maybe param" "maybe type" "temp"
      (801548 'move' call_tmp[801545](126777 call hasHighBoundForIter this[126739]))
      (677280 'move' tmp[677278](486136 call isTrue call_tmp[801545]))
      (677285 'move' tmp[677270](677282 '_paramFoldLogical' tmp[677271] tmp[677278]))
    }
    {
      (677290 'move' tmp[677270](677287 '_paramFoldLogical' tmp[677271] 0))
    }
    unknown call_tmp[801550] "expr temp" "maybe param" "maybe type" "temp"
    (801553 'move' call_tmp[801550](126769 call ! tmp[677270]))
    unknown call_tmp[801555] "expr temp" "maybe param" "maybe type" "temp"
    (801558 'move' call_tmp[801555](126779 call _cond_test call_tmp[801550]))
    if call_tmp[801555]
    {
      (126765 call compilerError "parallel iteration is not currently supported over ranges without bounds")
    }
    unknown tmp[486153] "maybe param" "temp"
    (486164 'move' tmp[486153] 1)
    unknown call_tmp[801560] "expr temp" "maybe param" "maybe type" "temp"
    (801563 'move' call_tmp[801560](486166 call _cond_invalid tmp[486153]))
    if call_tmp[801560]
    {
      (486169 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[677297] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[677298] "maybe param" "temp"
    unknown call_tmp[801565] "expr temp" "maybe param" "maybe type" "temp"
    (801568 'move' call_tmp[801565](486154 call isTrue tmp[486153]))
    (677303 'move' tmp[677298](677301 call _cond_test call_tmp[801565]))
    if tmp[677298]
    {
      unknown tmp[677305] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[801570] "expr temp" "maybe param" "maybe type" "temp"
      (801573 'move' call_tmp[801570](126794 call hasAmbiguousAlignmentForIter this[126739]))
      (677307 'move' tmp[677305](486157 call isTrue call_tmp[801570]))
      (677312 'move' tmp[677297](677309 '_paramFoldLogical' tmp[677298] tmp[677305]))
    }
    {
      (677317 'move' tmp[677297](677314 '_paramFoldLogical' tmp[677298] 0))
    }
    unknown call_tmp[801575] "expr temp" "maybe param" "maybe type" "temp"
    (801578 'move' call_tmp[801575](126796 call _cond_test tmp[677297]))
    if call_tmp[801575]
    {
      (126788 call boundsCheckHalt module=[222] HaltWrappers[518] "these -- Attempt to iterate over a range with ambiguous alignment.")
      (402134 'referenced modules list' HaltWrappers[518])
    }
    unknown call_tmp[801580] "expr temp" "maybe param" "maybe type" "temp"
    (801583 'move' call_tmp[801580](126807 call _cond_test debugChapelRange[107087]))
    if call_tmp[801580]
    {
      (126802 call chpl_debug_writeln "*** In range standalone iterator:")
    }
    unknown call_tmp[801589] "expr temp" "maybe param" "maybe type" "temp"
    (801592 'move' call_tmp[801589](428991 call chpl_integralIdxType _mt[203] this[126739]))
    unknown call_tmp[801594] "maybe param" "maybe type" "temp"
    (801597 'move' call_tmp[801594](126817 call(126814 call (partial) sizeAs _mt[203] this[126739]) call_tmp[801589]))
    const len[126812] "dead at end of block" "const" "insert auto destroy"
    (645601 'init var' len[126812] call_tmp[801594])
    (126820 'end of statement')
    const numChunks[126822] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[677324] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[677325] "maybe param" "temp"
    unknown call_tmp[801599] "expr temp" "maybe param" "maybe type" "temp"
    (801602 'move' call_tmp[801599](126823 'task_get_serial'))
    (677330 'move' tmp[677325](677328 call _cond_test call_tmp[801599]))
    if tmp[677325]
    {
      (677335 'move' tmp[677324](677332 '_paramFoldLogical' tmp[677325] 1))
    }
    {
      unknown tmp[677337] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (677339 'move' tmp[677337](126826 call _computeNumChunks len[126812]))
      (677344 'move' tmp[677324](677341 '_paramFoldLogical' tmp[677325] tmp[677337]))
    }
    (645603 'init var' numChunks[126822] tmp[677324])
    (126832 'end of statement' len[126812])
    unknown call_tmp[801604] "expr temp" "maybe param" "maybe type" "temp"
    (801607 'move' call_tmp[801604](126845 call _cond_test debugChapelRange[107087]))
    if call_tmp[801604]
    {
      (126835 call chpl_debug_writeln "*** RI: length=" len[126812] " numChunks=" numChunks[126822])
      (553127 'end of statement' len[126812] numChunks[126822])
    }
    {
      unknown tmpIter[387312] "expr temp" "maybe ref" "no copy" "temp"
      unknown call_tmp[801609] "expr temp" "maybe param" "maybe type" "temp"
      (801612 'move' call_tmp[801609](126854 call chpl_build_low_bounded_range 0))
      (387315 'move' tmpIter[387312](126851 call # call_tmp[801609] numChunks[126822]))
      unknown isBounded[387659] "maybe param" "temp"
      (387665 'move' isBounded[387659](387661 call chpl_supportsBoundedCoforall tmpIter[387312] 0))
      if isBounded[387659]
      {
        const _coforallCount[387528] "const" "end count" "temp"
        (387596 'move' _coforallCount[387528](387593 call _endCountAlloc 1))
        unknown numTasks[387529] "temp"
        (387580 'move' numTasks[387529](387576 call chpl_boundedCoforallSize tmpIter[387312] 0))
        (387571 call _upEndCount _coforallCount[387528] 1 numTasks[387529])
        (553130 'end of statement')
        (387568 call chpl_resetTaskSpawn numTasks[387529])
        (553131 'end of statement')
        unknown _indexOfInterest[387536] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[387537] "expr temp" "temp"
        (387546 'move' _iterator[387537](387544 call _getIterator tmpIter[387312]))
        Defer
        {
          {
            (387561 call _freeIterator _iterator[387537])
          }
        }
        { scopeless type
          (387551 'move' _indexOfInterest[387536](387548 call iteratorIndex _iterator[387537]))
        }
        ForLoop[387538]
        {
          unknown chunk[387319] "coforall index var" "index var" "insert auto destroy"
          (553133 'end of statement')
          (387556 'move' chunk[387319] _indexOfInterest[387536])
          (553134 'end of statement' chunk[387319])
          {
            {
              unknown call_tmp[801616] "expr temp" "maybe param" "maybe type" "temp"
              (801619 'move' call_tmp[801616](387327 call(466458 call (partial) hasUnitStride _mt[203] this[126739])))
              unknown call_tmp[801621] "expr temp" "maybe param" "maybe type" "temp"
              (801624 'move' call_tmp[801621](387325 call ! call_tmp[801616]))
              unknown call_tmp[801626] "expr temp" "maybe param" "maybe type" "temp"
              (801629 'move' call_tmp[801626](387323 call _cond_test call_tmp[801621]))
              if call_tmp[801626]
              {
                unknown call_tmp[801631] "expr temp" "maybe param" "maybe type" "temp"
                (801634 'move' call_tmp[801631](387337 call - len[126812] 1))
                unknown call_tmp[801636] "maybe param" "maybe type" "temp"
                (801639 'move' call_tmp[801636](387332 call _computeBlock len[126812] numChunks[126822] chunk[387319] call_tmp[801631]))
                const tmp[387330] "dead at end of block" "const" "insert auto destroy" "temp"
                (645605 'init var' tmp[387330] call_tmp[801636])
                (387342 call _check_tuple_var_decl tmp[387330] 2)
                (553136 'end of statement')
                unknown call_tmp[801641] "maybe param" "maybe type" "temp"
                (801644 'move' call_tmp[801641](387347 call tmp[387330] 0))
                const lo[387345] "dead at end of block" "const" "insert auto destroy"
                (645607 'init var' lo[387345] call_tmp[801641])
                unknown call_tmp[801646] "maybe param" "maybe type" "temp"
                (801649 'move' call_tmp[801646](387352 call tmp[387330] 1))
                const hi[387350] "dead at end of block" "const" "insert auto destroy"
                (645609 'init var' hi[387350] call_tmp[801646])
                (387355 'end of statement')
                unknown call_tmp[801651] "expr temp" "maybe param" "maybe type" "temp"
                (801654 'move' call_tmp[801651](387362 call - lo[387345] 1))
                unknown call_tmp[801656] "maybe param" "maybe type" "temp"
                (801659 'move' call_tmp[801656](387359 call - hi[387350] call_tmp[801651]))
                const mylen[387357] "dead at end of block" "const" "insert auto destroy"
                (645611 'init var' mylen[387357] call_tmp[801656])
                (387366 'end of statement')
                unknown call_tmp[801663] "maybe param" "maybe type" "temp"
                (801666 'move' call_tmp[801663](387370 call(466468 call (partial) orderToIndex _mt[203] this[126739]) lo[387345]))
                unknown low[387368] "dead at end of block" "insert auto destroy"
                (645613 'init var' low[387368] call_tmp[801663])
                (387373 'end of statement')
                unknown call_tmp[801670] "expr temp" "maybe param" "maybe type" "temp"
                (801673 'move' call_tmp[801670](387383 call chpl__idxToInt low[387368]))
                unknown call_tmp[801677] "expr temp" "maybe param" "maybe type" "temp"
                (801680 'move' call_tmp[801677](466478 call strType _mt[203] this[126739]))
                unknown call_tmp[801682] "expr temp" "maybe param" "maybe type" "temp"
                (801685 'move' call_tmp[801682](387381 call : call_tmp[801670] call_tmp[801677]))
                unknown call_tmp[801689] "expr temp" "maybe param" "maybe type" "temp"
                (801692 'move' call_tmp[801689](466482 call stride _mt[203] this[126739]))
                unknown call_tmp[801694] "expr temp" "maybe param" "maybe type" "temp"
                (801697 'move' call_tmp[801694](387392 call - mylen[387357] 1))
                unknown call_tmp[801701] "expr temp" "maybe param" "maybe type" "temp"
                (801704 'move' call_tmp[801701](466487 call strType _mt[203] this[126739]))
                unknown call_tmp[801706] "expr temp" "maybe param" "maybe type" "temp"
                (801709 'move' call_tmp[801706](387390 call : call_tmp[801694] call_tmp[801701]))
                unknown call_tmp[801711] "expr temp" "maybe param" "maybe type" "temp"
                (801714 'move' call_tmp[801711](387387 call * call_tmp[801689] call_tmp[801706]))
                unknown call_tmp[801716] "expr temp" "maybe param" "maybe type" "temp"
                (801719 'move' call_tmp[801716](387379 call + call_tmp[801682] call_tmp[801711]))
                unknown call_tmp[801721] "maybe param" "maybe type" "temp"
                (801724 'move' call_tmp[801721](387377 call(466473 call (partial) chpl_intToIdx _mt[203] this[126739]) call_tmp[801716]))
                unknown high[387375] "dead at end of block" "insert auto destroy"
                (645615 'init var' high[387375] call_tmp[801721])
                (387397 'end of statement' hi[387350] lo[387345] low[387368] mylen[387357])
                unknown call_tmp[801728] "expr temp" "maybe param" "maybe type" "temp"
                (801731 'move' call_tmp[801728](387401 call(466491 call (partial) hasNegativeStride _mt[203] this[126739])))
                unknown call_tmp[801733] "expr temp" "maybe param" "maybe type" "temp"
                (801736 'move' call_tmp[801733](387399 call _cond_test call_tmp[801728]))
                if call_tmp[801733]
                {
                  (387405 call <=> low[387368] high[387375])
                  (553141 'end of statement' low[387368] high[387375])
                }
                {
                  unknown _indexOfInterest[387410] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[387412] "expr temp" "temp"
                  unknown call_tmp[801740] "expr temp" "maybe param" "maybe type" "temp"
                  (801743 'move' call_tmp[801740](466499 call stride _mt[203] this[126739]))
                  unknown call_tmp[801745] "expr temp" "maybe param" "maybe type" "temp"
                  (801748 'move' call_tmp[801745](387419 call chpl_direct_strided_range_iter low[387368] high[387375] call_tmp[801740]))
                  (387414 'move' _iterator[387412](387417 call _getIterator call_tmp[801745]))
                  Defer
                  {
                    {
                      (387425 call _freeIterator _iterator[387412])
                    }
                  }
                  { scopeless type
                    (387429 'move' _indexOfInterest[387410](387432 call iteratorIndex _iterator[387412]))
                  }
                  ForLoop[387434] order-independent
                  {
                    unknown i[387437] "index var" "insert auto destroy"
                    (553145 'end of statement')
                    (387439 'move' i[387437] _indexOfInterest[387410])
                    (553146 'end of statement' i[387437])
                    {
                      unknown yret[606517] "YVV" "temp"
                      (606520 'move' yret[606517](606519 'deref' i[387437]))
                      (387443 yield yret[606517])
                      (553148 'end of statement' i[387437])
                    }
                    label _continueLabel[387445]
                    _indexOfInterest[387410]
                    _iterator[387412]
                  }
                  label _breakLabel[387447]
                }
              }
              {
                unknown call_tmp[801752] "expr temp" "maybe param" "maybe type" "temp"
                (801755 'move' call_tmp[801752](387458 call _high _mt[203] this[126739]))
                unknown call_tmp[801759] "expr temp" "maybe param" "maybe type" "temp"
                (801762 'move' call_tmp[801759](387462 call _low _mt[203] this[126739]))
                unknown call_tmp[801766] "expr temp" "maybe param" "maybe type" "temp"
                (801769 'move' call_tmp[801766](387466 call _low _mt[203] this[126739]))
                unknown call_tmp[801771] "maybe param" "maybe type" "temp"
                (801774 'move' call_tmp[801771](387453 call _computeBlock len[126812] numChunks[126822] chunk[387319] call_tmp[801752] call_tmp[801759] call_tmp[801766]))
                const tmp[387451] "dead at end of block" "const" "insert auto destroy" "temp"
                (645617 'init var' tmp[387451] call_tmp[801771])
                (387471 call _check_tuple_var_decl tmp[387451] 2)
                (553150 'end of statement')
                unknown call_tmp[801776] "maybe param" "maybe type" "temp"
                (801779 'move' call_tmp[801776](387476 call tmp[387451] 0))
                const lo[387474] "dead at end of block" "const" "insert auto destroy"
                (645619 'init var' lo[387474] call_tmp[801776])
                unknown call_tmp[801781] "maybe param" "maybe type" "temp"
                (801784 'move' call_tmp[801781](387481 call tmp[387451] 1))
                const hi[387479] "dead at end of block" "const" "insert auto destroy"
                (645621 'init var' hi[387479] call_tmp[801781])
                (387484 'end of statement')
                {
                  unknown _indexOfInterest[387486] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[387488] "expr temp" "temp"
                  unknown call_tmp[801786] "expr temp" "maybe param" "maybe type" "temp"
                  (801789 'move' call_tmp[801786](387495 call chpl_direct_range_iter lo[387474] hi[387479]))
                  (387490 'move' _iterator[387488](387493 call _getIterator call_tmp[801786]))
                  Defer
                  {
                    {
                      (387500 call _freeIterator _iterator[387488])
                    }
                  }
                  { scopeless type
                    (387504 'move' _indexOfInterest[387486](387507 call iteratorIndex _iterator[387488]))
                  }
                  ForLoop[387509] order-independent
                  {
                    unknown i[387512] "index var" "insert auto destroy"
                    (553152 'end of statement')
                    (387514 'move' i[387512] _indexOfInterest[387486])
                    (553153 'end of statement' i[387512])
                    {
                      unknown yret[606523] "YVV" "temp"
                      unknown call_tmp[801793] "expr temp" "maybe param" "maybe type" "temp"
                      (801796 'move' call_tmp[801793](387520 call(466509 call (partial) chpl_intToIdx _mt[203] this[126739]) i[387512]))
                      (606526 'move' yret[606523](606525 'deref' call_tmp[801793]))
                      (387518 yield yret[606523])
                      (553155 'end of statement' i[387512])
                    }
                    label _continueLabel[387522]
                    _indexOfInterest[387486]
                    _iterator[387488]
                  }
                  label _breakLabel[387524]
                }
              }
            }
            (387531 call _downEndCount _coforallCount[387528] nil[32])
            (387530 'coforall loop')
          }
          label _continueLabel[387541]
          _indexOfInterest[387536]
          _iterator[387537]
        }
        label _breakLabel[387542]
        Defer
        {
          {
            (387583 call _endCountFree _coforallCount[387528])
          }
        }
        (387588 call _waitEndCount _coforallCount[387528] 1 numTasks[387529])
      }
      {
        const _coforallCount[387600] "const" "end count" "temp"
        (387656 'move' _coforallCount[387600](387653 call _endCountAlloc 1))
        unknown _indexOfInterest[387608] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[387609] "expr temp" "temp"
        (387618 'move' _iterator[387609](387616 call _getIterator tmpIter[387312]))
        Defer
        {
          {
            (387633 call _freeIterator _iterator[387609])
          }
        }
        { scopeless type
          (387623 'move' _indexOfInterest[387608](387620 call iteratorIndex _iterator[387609]))
        }
        ForLoop[387610]
        {
          unknown chunk[126849] "coforall index var" "index var" "insert auto destroy"
          (553161 'end of statement')
          (387628 'move' chunk[126849] _indexOfInterest[387608])
          (553162 'end of statement' chunk[126849])
          (387640 call _upEndCount _coforallCount[387600] 1)
          (553164 'end of statement')
          {
            {
              unknown call_tmp[801800] "expr temp" "maybe param" "maybe type" "temp"
              (801803 'move' call_tmp[801800](127083 call(429052 call (partial) hasUnitStride _mt[203] this[126739])))
              unknown call_tmp[801805] "expr temp" "maybe param" "maybe type" "temp"
              (801808 'move' call_tmp[801805](127080 call ! call_tmp[801800]))
              unknown call_tmp[801810] "expr temp" "maybe param" "maybe type" "temp"
              (801813 'move' call_tmp[801810](127084 call _cond_test call_tmp[801805]))
              if call_tmp[801810]
              {
                unknown call_tmp[801815] "expr temp" "maybe param" "maybe type" "temp"
                (801818 'move' call_tmp[801815](126869 call - len[126812] 1))
                unknown call_tmp[801820] "maybe param" "maybe type" "temp"
                (801823 'move' call_tmp[801820](126865 call _computeBlock len[126812] numChunks[126822] chunk[126849] call_tmp[801815]))
                const tmp[126873] "dead at end of block" "const" "insert auto destroy" "temp"
                (645623 'init var' tmp[126873] call_tmp[801820])
                (126880 call _check_tuple_var_decl tmp[126873] 2)
                (553165 'end of statement')
                unknown call_tmp[801825] "maybe param" "maybe type" "temp"
                (801828 'move' call_tmp[801825](126874 call tmp[126873] 0))
                const lo[126860] "dead at end of block" "const" "insert auto destroy"
                (645625 'init var' lo[126860] call_tmp[801825])
                unknown call_tmp[801830] "maybe param" "maybe type" "temp"
                (801833 'move' call_tmp[801830](126877 call tmp[126873] 1))
                const hi[126862] "dead at end of block" "const" "insert auto destroy"
                (645627 'init var' hi[126862] call_tmp[801830])
                (126885 'end of statement')
                unknown call_tmp[801835] "expr temp" "maybe param" "maybe type" "temp"
                (801838 'move' call_tmp[801835](126891 call - lo[126860] 1))
                unknown call_tmp[801840] "maybe param" "maybe type" "temp"
                (801843 'move' call_tmp[801840](126888 call - hi[126862] call_tmp[801835]))
                const mylen[126887] "dead at end of block" "const" "insert auto destroy"
                (645629 'init var' mylen[126887] call_tmp[801840])
                (126896 'end of statement')
                unknown call_tmp[801847] "maybe param" "maybe type" "temp"
                (801850 'move' call_tmp[801847](126900 call(429006 call (partial) orderToIndex _mt[203] this[126739]) lo[126860]))
                unknown low[126898] "dead at end of block" "insert auto destroy"
                (645631 'init var' low[126898] call_tmp[801847])
                (126903 'end of statement')
                unknown call_tmp[801854] "expr temp" "maybe param" "maybe type" "temp"
                (801857 'move' call_tmp[801854](126913 call chpl__idxToInt low[126898]))
                unknown call_tmp[801861] "expr temp" "maybe param" "maybe type" "temp"
                (801864 'move' call_tmp[801861](429016 call strType _mt[203] this[126739]))
                unknown call_tmp[801866] "expr temp" "maybe param" "maybe type" "temp"
                (801869 'move' call_tmp[801866](126910 call : call_tmp[801854] call_tmp[801861]))
                unknown call_tmp[801873] "expr temp" "maybe param" "maybe type" "temp"
                (801876 'move' call_tmp[801873](429020 call stride _mt[203] this[126739]))
                unknown call_tmp[801878] "expr temp" "maybe param" "maybe type" "temp"
                (801881 'move' call_tmp[801878](126921 call - mylen[126887] 1))
                unknown call_tmp[801885] "expr temp" "maybe param" "maybe type" "temp"
                (801888 'move' call_tmp[801885](429025 call strType _mt[203] this[126739]))
                unknown call_tmp[801890] "expr temp" "maybe param" "maybe type" "temp"
                (801893 'move' call_tmp[801890](126919 call : call_tmp[801878] call_tmp[801885]))
                unknown call_tmp[801895] "expr temp" "maybe param" "maybe type" "temp"
                (801898 'move' call_tmp[801895](126916 call * call_tmp[801873] call_tmp[801890]))
                unknown call_tmp[801900] "expr temp" "maybe param" "maybe type" "temp"
                (801903 'move' call_tmp[801900](126908 call + call_tmp[801866] call_tmp[801895]))
                unknown call_tmp[801905] "maybe param" "maybe type" "temp"
                (801908 'move' call_tmp[801905](126907 call(429011 call (partial) chpl_intToIdx _mt[203] this[126739]) call_tmp[801900]))
                unknown high[126905] "dead at end of block" "insert auto destroy"
                (645633 'init var' high[126905] call_tmp[801905])
                (126927 'end of statement' hi[126862] lo[126860] low[126898] mylen[126887])
                unknown call_tmp[801912] "expr temp" "maybe param" "maybe type" "temp"
                (801915 'move' call_tmp[801912](126934 call(429031 call (partial) hasNegativeStride _mt[203] this[126739])))
                unknown call_tmp[801917] "expr temp" "maybe param" "maybe type" "temp"
                (801920 'move' call_tmp[801917](126935 call _cond_test call_tmp[801912]))
                if call_tmp[801917]
                {
                  (126928 call <=> low[126898] high[126905])
                  (553170 'end of statement' low[126898] high[126905])
                }
                {
                  unknown _indexOfInterest[126954] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[126955] "expr temp" "temp"
                  unknown call_tmp[801924] "expr temp" "maybe param" "maybe type" "temp"
                  (801927 'move' call_tmp[801924](429036 call stride _mt[203] this[126739]))
                  unknown call_tmp[801929] "expr temp" "maybe param" "maybe type" "temp"
                  (801932 'move' call_tmp[801929](126973 call chpl_direct_strided_range_iter low[126898] high[126905] call_tmp[801924]))
                  (126964 'move' _iterator[126955](126962 call _getIterator call_tmp[801929]))
                  Defer
                  {
                    {
                      (126988 call _freeIterator _iterator[126955])
                    }
                  }
                  { scopeless type
                    (126978 'move' _indexOfInterest[126954](126975 call iteratorIndex _iterator[126955]))
                  }
                  ForLoop[126956] order-independent
                  {
                    unknown i[126940] "index var" "insert auto destroy"
                    (553174 'end of statement')
                    (126983 'move' i[126940] _indexOfInterest[126954])
                    (553175 'end of statement' i[126940])
                    {
                      unknown yret[606529] "YVV" "temp"
                      (606532 'move' yret[606529](606531 'deref' i[126940]))
                      (126950 yield yret[606529])
                      (553177 'end of statement' i[126940])
                    }
                    label _continueLabel[126959]
                    _indexOfInterest[126954]
                    _iterator[126955]
                  }
                  label _breakLabel[126960]
                }
              }
              {
                unknown call_tmp[801936] "expr temp" "maybe param" "maybe type" "temp"
                (801939 'move' call_tmp[801936](127007 call _high _mt[203] this[126739]))
                unknown call_tmp[801943] "expr temp" "maybe param" "maybe type" "temp"
                (801946 'move' call_tmp[801943](127011 call _low _mt[203] this[126739]))
                unknown call_tmp[801950] "expr temp" "maybe param" "maybe type" "temp"
                (801953 'move' call_tmp[801950](127015 call _low _mt[203] this[126739]))
                unknown call_tmp[801955] "maybe param" "maybe type" "temp"
                (801958 'move' call_tmp[801955](127002 call _computeBlock len[126812] numChunks[126822] chunk[126849] call_tmp[801936] call_tmp[801943] call_tmp[801950]))
                const tmp[127018] "dead at end of block" "const" "insert auto destroy" "temp"
                (645635 'init var' tmp[127018] call_tmp[801955])
                (127025 call _check_tuple_var_decl tmp[127018] 2)
                (553179 'end of statement')
                unknown call_tmp[801960] "maybe param" "maybe type" "temp"
                (801963 'move' call_tmp[801960](127019 call tmp[127018] 0))
                const lo[126997] "dead at end of block" "const" "insert auto destroy"
                (645637 'init var' lo[126997] call_tmp[801960])
                unknown call_tmp[801965] "maybe param" "maybe type" "temp"
                (801968 'move' call_tmp[801965](127022 call tmp[127018] 1))
                const hi[126999] "dead at end of block" "const" "insert auto destroy"
                (645639 'init var' hi[126999] call_tmp[801965])
                (127030 'end of statement')
                {
                  unknown _indexOfInterest[127044] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[127045] "expr temp" "temp"
                  unknown call_tmp[801970] "expr temp" "maybe param" "maybe type" "temp"
                  (801973 'move' call_tmp[801970](127058 call chpl_direct_range_iter lo[126997] hi[126999]))
                  (127054 'move' _iterator[127045](127052 call _getIterator call_tmp[801970]))
                  Defer
                  {
                    {
                      (127073 call _freeIterator _iterator[127045])
                    }
                  }
                  { scopeless type
                    (127063 'move' _indexOfInterest[127044](127060 call iteratorIndex _iterator[127045]))
                  }
                  ForLoop[127046] order-independent
                  {
                    unknown i[127031] "index var" "insert auto destroy"
                    (553181 'end of statement')
                    (127068 'move' i[127031] _indexOfInterest[127044])
                    (553182 'end of statement' i[127031])
                    {
                      unknown yret[606535] "YVV" "temp"
                      unknown call_tmp[801977] "expr temp" "maybe param" "maybe type" "temp"
                      (801980 'move' call_tmp[801977](127040 call(429045 call (partial) chpl_intToIdx _mt[203] this[126739]) i[127031]))
                      (606538 'move' yret[606535](606537 'deref' call_tmp[801977]))
                      (127038 yield yret[606535])
                      (553184 'end of statement' i[127031])
                    }
                    label _continueLabel[127049]
                    _indexOfInterest[127044]
                    _iterator[127045]
                  }
                  label _breakLabel[127050]
                }
              }
            }
            (387603 call _downEndCount _coforallCount[387600] nil[32])
            (387602 'coforall loop')
          }
          label _continueLabel[387613]
          _indexOfInterest[387608]
          _iterator[387609]
        }
        label _breakLabel[387614]
        Defer
        {
          {
            (387644 call _endCountFree _coforallCount[387600])
          }
        }
        (387649 call _waitEndCount _coforallCount[387600] 1)
      }
    }
    (606515 return ret[606513])
  }
  where {
    unknown tmp[486111] "maybe param" "temp"
    (486122 'move' tmp[486111](126750 call == tag[126743] standalone[52142]))
    unknown call_tmp[801982] "expr temp" "maybe param" "maybe type" "temp"
    (801985 'move' call_tmp[801982](486124 call _cond_invalid tmp[486111]))
    if call_tmp[801982]
    {
      (486127 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[677351] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[677352] "maybe param" "temp"
    unknown call_tmp[801987] "expr temp" "maybe param" "maybe type" "temp"
    (801990 'move' call_tmp[801987](486112 call isTrue tmp[486111]))
    (677357 'move' tmp[677352](677355 call _cond_test call_tmp[801987]))
    if tmp[677352]
    {
      unknown tmp[677359] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[801992] "expr temp" "maybe param" "maybe type" "temp"
      (801995 'move' call_tmp[801992](126759 call ! localeModelPartitionsIterationOnSublocales[306872]))
      (677361 'move' tmp[677359](486115 call isTrue call_tmp[801992]))
      (677366 'move' tmp[677351](677363 '_paramFoldLogical' tmp[677352] tmp[677359]))
    }
    {
      (677371 'move' tmp[677351](677368 '_paramFoldLogical' tmp[677352] 0))
    }
    (1001426 call chpl_statementLevelSymbol tmp[677351])
  }
  function range[240](?).these[127092](arg _mt[127102]:_MT[201], arg this[127095]:range[240](?) :
  range[240](?), param arg tag[127099]:iterKind[52144]) : _unknown[42] "iterator fn" "method" "no return value for void"
  {
    unknown ret[606543] "RVV" "temp"
    unknown tmp[486174] "maybe param" "temp"
    (486185 'move' tmp[486174](127121 call hasLowBoundForIter this[127095]))
    unknown call_tmp[801997] "expr temp" "maybe param" "maybe type" "temp"
    (802000 'move' call_tmp[801997](486187 call _cond_invalid tmp[486174]))
    if call_tmp[801997]
    {
      (486190 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[677378] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[677379] "maybe param" "temp"
    unknown call_tmp[802002] "expr temp" "maybe param" "maybe type" "temp"
    (802005 'move' call_tmp[802002](486175 call isTrue tmp[486174]))
    (677384 'move' tmp[677379](677382 call _cond_test call_tmp[802002]))
    if tmp[677379]
    {
      unknown tmp[677386] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[802007] "expr temp" "maybe param" "maybe type" "temp"
      (802010 'move' call_tmp[802007](127124 call hasHighBoundForIter this[127095]))
      (677388 'move' tmp[677386](486178 call isTrue call_tmp[802007]))
      (677393 'move' tmp[677378](677390 '_paramFoldLogical' tmp[677379] tmp[677386]))
    }
    {
      (677398 'move' tmp[677378](677395 '_paramFoldLogical' tmp[677379] 0))
    }
    unknown call_tmp[802012] "expr temp" "maybe param" "maybe type" "temp"
    (802015 'move' call_tmp[802012](127116 call ! tmp[677378]))
    unknown call_tmp[802017] "expr temp" "maybe param" "maybe type" "temp"
    (802020 'move' call_tmp[802017](127126 call _cond_test call_tmp[802012]))
    if call_tmp[802017]
    {
      (127113 call compilerError "parallel iteration is not currently supported over ranges without bounds")
    }
    unknown tmp[486195] "maybe param" "temp"
    (486206 'move' tmp[486195] 1)
    unknown call_tmp[802022] "expr temp" "maybe param" "maybe type" "temp"
    (802025 'move' call_tmp[802022](486208 call _cond_invalid tmp[486195]))
    if call_tmp[802022]
    {
      (486211 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[677405] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[677406] "maybe param" "temp"
    unknown call_tmp[802027] "expr temp" "maybe param" "maybe type" "temp"
    (802030 'move' call_tmp[802027](486196 call isTrue tmp[486195]))
    (677411 'move' tmp[677406](677409 call _cond_test call_tmp[802027]))
    if tmp[677406]
    {
      unknown tmp[677413] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[802032] "expr temp" "maybe param" "maybe type" "temp"
      (802035 'move' call_tmp[802032](127142 call hasAmbiguousAlignmentForIter this[127095]))
      (677415 'move' tmp[677413](486199 call isTrue call_tmp[802032]))
      (677420 'move' tmp[677405](677417 '_paramFoldLogical' tmp[677406] tmp[677413]))
    }
    {
      (677425 'move' tmp[677405](677422 '_paramFoldLogical' tmp[677406] 0))
    }
    unknown call_tmp[802037] "expr temp" "maybe param" "maybe type" "temp"
    (802040 'move' call_tmp[802037](127144 call _cond_test tmp[677405]))
    if call_tmp[802037]
    {
      (127135 call boundsCheckHalt module=[222] HaltWrappers[518] "these -- Attempt to iterate over a range with ambiguous alignment.")
      (402145 'referenced modules list' HaltWrappers[518])
    }
    unknown call_tmp[802042] "expr temp" "maybe param" "maybe type" "temp"
    (802045 'move' call_tmp[802042](127156 call _cond_test debugChapelRange[107087]))
    if call_tmp[802042]
    {
      (127150 call chpl_debug_writeln "*** In range leader:")
    }
    unknown call_tmp[802047] "expr temp" "maybe param" "maybe type" "temp"
    (802050 'move' call_tmp[802047](402150 call here[135591]))
    unknown call_tmp[802054] "maybe param" "maybe type" "temp"
    (802057 'move' call_tmp[802054](127169 call(127166 call (partial) _getChildCount _mt[203] call_tmp[802047])))
    const numSublocs[127162] "dead at end of block" "const" "insert auto destroy"
    (645641 'init var' numSublocs[127162] call_tmp[802054])
    (127171 'end of statement')
    unknown tmp[486216] "maybe param" "temp"
    (486227 'move' tmp[486216] localeModelPartitionsIterationOnSublocales[306872])
    unknown call_tmp[802059] "expr temp" "maybe param" "maybe type" "temp"
    (802062 'move' call_tmp[802059](486229 call _cond_invalid tmp[486216]))
    if call_tmp[802059]
    {
      (486232 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[677432] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[677433] "maybe param" "temp"
    unknown call_tmp[802064] "expr temp" "maybe param" "maybe type" "temp"
    (802067 'move' call_tmp[802064](486217 call isTrue tmp[486216]))
    (677438 'move' tmp[677433](677436 call _cond_test call_tmp[802064]))
    if tmp[677433]
    {
      unknown tmp[677440] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[802069] "expr temp" "maybe param" "maybe type" "temp"
      (802072 'move' call_tmp[802069](127638 call != numSublocs[127162] 0))
      (677442 'move' tmp[677440](486220 call isTrue call_tmp[802069]))
      (677447 'move' tmp[677432](677444 '_paramFoldLogical' tmp[677433] tmp[677440]))
    }
    {
      (677452 'move' tmp[677432](677449 '_paramFoldLogical' tmp[677433] 0))
    }
    unknown call_tmp[802074] "expr temp" "maybe param" "maybe type" "temp"
    (802077 'move' call_tmp[802074](127642 call _cond_test tmp[677432]))
    if call_tmp[802074]
    {
      unknown call_tmp[802083] "expr temp" "maybe param" "maybe type" "temp"
      (802086 'move' call_tmp[802083](429063 call chpl_integralIdxType _mt[203] this[127095]))
      unknown call_tmp[802088] "maybe param" "maybe type" "temp"
      (802091 'move' call_tmp[802088](127179 call(127176 call (partial) sizeAs _mt[203] this[127095]) call_tmp[802083]))
      const len[127174] "dead at end of block" "const" "insert auto destroy"
      (645643 'init var' len[127174] call_tmp[802088])
      (127182 'end of statement')
      const tasksPerLocale[127184] "dead at end of block" "const" "insert auto destroy"
      (645645 'init var' tasksPerLocale[127184] dataParTasksPerLocale[287582])
      (127187 'end of statement')
      const ignoreRunning[127189] "dead at end of block" "const" "insert auto destroy"
      (645647 'init var' ignoreRunning[127189] dataParIgnoreRunningTasks[287587])
      (127192 'end of statement')
      const minIndicesPerTask[127194] "dead at end of block" "const" "insert auto destroy"
      (645649 'init var' minIndicesPerTask[127194] dataParMinGranularity[287592])
      (127197 'end of statement')
      unknown dptpl[127199] "dead at end of block" "insert auto destroy"
      unknown tmp[677459] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[677460] "maybe param" "temp"
      unknown call_tmp[802093] "expr temp" "maybe param" "maybe type" "temp"
      (802096 'move' call_tmp[802093](127200 call == tasksPerLocale[127184] 0))
      (677465 'move' tmp[677460](677463 call _cond_test call_tmp[802093]))
      if tmp[677460]
      {
        unknown tmp[677467] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[802098] "expr temp" "maybe param" "maybe type" "temp"
        (802101 'move' call_tmp[802098](402153 call here[135591]))
        (677469 'move' tmp[677467](127205 call maxTaskPar _mt[203] call_tmp[802098]))
        (677474 'move' tmp[677459](677471 '_paramFoldLogical' tmp[677460] tmp[677467]))
      }
      {
        (677479 'move' tmp[677459](677476 '_paramFoldLogical' tmp[677460] tasksPerLocale[127184]))
      }
      (645651 'init var' dptpl[127199] tmp[677459])
      (127213 'end of statement')
      unknown call_tmp[802105] "expr temp" "maybe param" "maybe type" "temp"
      (802108 'move' call_tmp[802105](127245 call ! ignoreRunning[127189]))
      unknown call_tmp[802110] "expr temp" "maybe param" "maybe type" "temp"
      (802113 'move' call_tmp[802110](127248 call _cond_test call_tmp[802105]))
      if call_tmp[802110]
      {
        unknown call_tmp[802115] "expr temp" "maybe param" "maybe type" "temp"
        (802118 'move' call_tmp[802115](402155 call here[135591]))
        unknown call_tmp[802122] "expr temp" "maybe param" "maybe type" "temp"
        (802125 'move' call_tmp[802122](127223 call(127220 call (partial) runningTasks _mt[203] call_tmp[802115])))
        unknown call_tmp[802127] "maybe param" "maybe type" "temp"
        (802130 'move' call_tmp[802127](127217 call - call_tmp[802122] 1))
        const otherTasks[127216] "dead at end of block" "const" "insert auto destroy"
        (645653 'init var' otherTasks[127216] call_tmp[802127])
        (127226 'end of statement')
        unknown tmp[677486] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[677487] "maybe param" "temp"
        unknown call_tmp[802132] "expr temp" "maybe param" "maybe type" "temp"
        (802135 'move' call_tmp[802132](127230 call < otherTasks[127216] dptpl[127199]))
        (677492 'move' tmp[677487](677490 call _cond_test call_tmp[802132]))
        if tmp[677487]
        {
          unknown tmp[677494] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[802137] "expr temp" "maybe param" "maybe type" "temp"
          (802140 'move' call_tmp[802137](127236 call - dptpl[127199] otherTasks[127216]))
          (677496 'move' tmp[677494](127234 call : call_tmp[802137] int(64)[10]))
          (677501 'move' tmp[677486](677498 '_paramFoldLogical' tmp[677487] tmp[677494]))
        }
        {
          (677506 'move' tmp[677486](677503 '_paramFoldLogical' tmp[677487] 1))
        }
        (127227 call = dptpl[127199] tmp[677486])
        (553196 'end of statement' dptpl[127199] otherTasks[127216])
      }
      unknown call_tmp[802142] "maybe param" "maybe type" "temp"
      (802145 'move' call_tmp[802142](127255 call min numSublocs[127162] dptpl[127199]))
      const numSublocTasks[127253] "dead at end of block" "const" "insert auto destroy"
      (645655 'init var' numSublocTasks[127253] call_tmp[802142])
      (127259 'end of statement')
      const numChunks[127261] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[677513] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[677514] "maybe param" "temp"
      unknown call_tmp[802147] "expr temp" "maybe param" "maybe type" "temp"
      (802150 'move' call_tmp[802147](127262 'task_get_serial'))
      (677519 'move' tmp[677514](677517 call _cond_test call_tmp[802147]))
      if tmp[677514]
      {
        (677524 'move' tmp[677513](677521 '_paramFoldLogical' tmp[677514] 1))
      }
      {
        unknown tmp[677526] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (677528 'move' tmp[677526](127265 call _computeNumChunks numSublocTasks[127253](ignoreRunning = 1) minIndicesPerTask[127194] len[127174]))
        (677533 'move' tmp[677513](677530 '_paramFoldLogical' tmp[677514] tmp[677526]))
      }
      (645657 'init var' numChunks[127261] tmp[677513])
      (127275 'end of statement' tasksPerLocale[127184] numSublocs[127162] dptpl[127199] numSublocTasks[127253] minIndicesPerTask[127194] len[127174])
      unknown call_tmp[802152] "expr temp" "maybe param" "maybe type" "temp"
      (802155 'move' call_tmp[802152](127304 call _cond_test debugDataParNuma[287677]))
      if call_tmp[802152]
      {
        (127278 call chpl_debug_writeln "### numSublocs = " numSublocs[127162] "\n" "### numTasksPerSubloc = " numSublocTasks[127253] "\n" "### ignoreRunning = " ignoreRunning[127189] "\n" "### minIndicesPerTask = " minIndicesPerTask[127194] "\n" "### numChunks = " numChunks[127261])
        (553204 'end of statement' numSublocs[127162] numSublocTasks[127253] ignoreRunning[127189] minIndicesPerTask[127194] numChunks[127261])
      }
      {
        unknown tmpIter[387873] "expr temp" "maybe ref" "no copy" "temp"
        unknown call_tmp[802157] "expr temp" "maybe param" "maybe type" "temp"
        (802160 'move' call_tmp[802157](127313 call chpl_build_low_bounded_range 0))
        (387876 'move' tmpIter[387873](127310 call # call_tmp[802157] numChunks[127261]))
        unknown isBounded[388394] "maybe param" "temp"
        (388400 'move' isBounded[388394](388396 call chpl_supportsBoundedCoforall tmpIter[387873] 0))
        if isBounded[388394]
        {
          const _coforallCount[388263] "const" "end count" "temp"
          (388331 'move' _coforallCount[388263](388328 call _endCountAlloc 1))
          unknown numTasks[388264] "temp"
          (388315 'move' numTasks[388264](388311 call chpl_boundedCoforallSize tmpIter[387873] 0))
          (388306 call _upEndCount _coforallCount[388263] 1 numTasks[388264])
          (553210 'end of statement')
          (388303 call chpl_resetTaskSpawn numTasks[388264])
          (553211 'end of statement')
          unknown _indexOfInterest[388271] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[388272] "expr temp" "temp"
          (388281 'move' _iterator[388272](388279 call _getIterator tmpIter[387873]))
          Defer
          {
            {
              (388296 call _freeIterator _iterator[388272])
            }
          }
          { scopeless type
            (388286 'move' _indexOfInterest[388271](388283 call iteratorIndex _iterator[388272]))
          }
          ForLoop[388273]
          {
            unknown chunk[387880] "coforall index var" "index var" "insert auto destroy"
            (553213 'end of statement')
            (388291 'move' chunk[387880] _indexOfInterest[388271])
            (553214 'end of statement' chunk[387880])
            {
              {
                const tmp[387887] "const" "temp"
                unknown call_tmp[802162] "expr temp" "maybe param" "maybe type" "temp"
                (802165 'move' call_tmp[802162](412856 call here[135591]))
                unknown call_tmp[802169] "expr temp" "maybe param" "maybe type" "temp"
                (802172 'move' call_tmp[802169](387897 call(387894 call (partial) _getChild _mt[203] call_tmp[802162]) chunk[387880]))
                unknown call_tmp[802174] "expr temp" "maybe param" "maybe type" "temp"
                (802177 'move' call_tmp[802174](387892 '_wide_get_locale' call_tmp[802169]))
                (387889 'move' tmp[387887](387891 'deref' call_tmp[802174]))
                {
                  unknown call_tmp[802179] "expr temp" "maybe param" "maybe type" "temp"
                  (802182 'move' call_tmp[802179](387901 call _cond_test debugDataParNuma[287677]))
                  if call_tmp[802179]
                  {
                    unknown call_tmp[802184] "expr temp" "maybe param" "maybe type" "temp"
                    (802187 'move' call_tmp[802184](387910 call chpl_getSubloc))
                    unknown call_tmp[802189] "expr temp" "maybe param" "maybe type" "temp"
                    (802192 'move' call_tmp[802189](387907 call != chunk[387880] call_tmp[802184]))
                    unknown call_tmp[802194] "expr temp" "maybe param" "maybe type" "temp"
                    (802197 'move' call_tmp[802194](387905 call _cond_test call_tmp[802189]))
                    if call_tmp[802194]
                    {
                      unknown call_tmp[802199] "expr temp" "maybe param" "maybe type" "temp"
                      (802202 'move' call_tmp[802199](387919 call chpl_getSubloc))
                      (387914 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk[387880] ", on " call_tmp[802199] ") ***")
                      (553216 'end of statement' chunk[387880])
                    }
                  }
                  unknown call_tmp[802204] "expr temp" "maybe param" "maybe type" "temp"
                  (802207 'move' call_tmp[802204](387931 call - len[127174] 1))
                  unknown call_tmp[802209] "maybe param" "maybe type" "temp"
                  (802212 'move' call_tmp[802209](387926 call _computeBlock len[127174] numChunks[127261] chunk[387880] call_tmp[802204]))
                  const tmp[387924] "dead at end of block" "const" "insert auto destroy" "temp"
                  (645659 'init var' tmp[387924] call_tmp[802209])
                  (387936 call _check_tuple_var_decl tmp[387924] 2)
                  (553218 'end of statement')
                  unknown call_tmp[802214] "maybe param" "maybe type" "temp"
                  (802217 'move' call_tmp[802214](387941 call tmp[387924] 0))
                  const lo[387939] "dead at end of block" "const" "insert auto destroy"
                  (645661 'init var' lo[387939] call_tmp[802214])
                  unknown call_tmp[802219] "maybe param" "maybe type" "temp"
                  (802222 'move' call_tmp[802219](387946 call tmp[387924] 1))
                  const hi[387944] "dead at end of block" "const" "insert auto destroy"
                  (645663 'init var' hi[387944] call_tmp[802219])
                  (387949 'end of statement')
                  unknown call_tmp[802224] "maybe param" "maybe type" "temp"
                  (802227 'move' call_tmp[802224](387953 call chpl_build_bounded_range lo[387939] hi[387944]))
                  const locRange[387951] "dead at end of block" "const" "insert auto destroy"
                  (645665 'init var' locRange[387951] call_tmp[802224])
                  (387957 'end of statement')
                  unknown call_tmp[802233] "expr temp" "maybe param" "maybe type" "temp"
                  (802236 'move' call_tmp[802233](466538 call chpl_integralIdxType _mt[203] this[127095]))
                  unknown call_tmp[802238] "maybe param" "maybe type" "temp"
                  (802241 'move' call_tmp[802238](387964 call(387961 call (partial) sizeAs _mt[203] locRange[387951]) call_tmp[802233]))
                  const locLen[387959] "dead at end of block" "const" "insert auto destroy"
                  (645667 'init var' locLen[387959] call_tmp[802238])
                  (387967 'end of statement')
                  const numSublocTasks[387969] "dead at end of block" "const" "insert auto destroy"
                  unknown tmp[677540] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                  unknown tmp[677541] "maybe param" "temp"
                  unknown call_tmp[802243] "expr temp" "maybe param" "maybe type" "temp"
                  (802246 'move' call_tmp[802243](387974 call % dptpl[127199] numChunks[127261]))
                  unknown call_tmp[802248] "expr temp" "maybe param" "maybe type" "temp"
                  (802251 'move' call_tmp[802248](387971 call < chunk[387880] call_tmp[802243]))
                  (677546 'move' tmp[677541](677544 call _cond_test call_tmp[802248]))
                  if tmp[677541]
                  {
                    unknown tmp[677548] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                    unknown call_tmp[802253] "expr temp" "maybe param" "maybe type" "temp"
                    (802256 'move' call_tmp[802253](387981 call / dptpl[127199] numChunks[127261]))
                    (677550 'move' tmp[677548](387979 call + call_tmp[802253] 1))
                    (677555 'move' tmp[677540](677552 '_paramFoldLogical' tmp[677541] tmp[677548]))
                  }
                  {
                    unknown tmp[677557] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                    (677559 'move' tmp[677557](387987 call / dptpl[127199] numChunks[127261]))
                    (677564 'move' tmp[677540](677561 '_paramFoldLogical' tmp[677541] tmp[677557]))
                  }
                  (645669 'init var' numSublocTasks[387969] tmp[677540])
                  (387992 'end of statement')
                  unknown call_tmp[802258] "maybe param" "maybe type" "temp"
                  (802261 'move' call_tmp[802258](387996 call _computeNumChunks numSublocTasks[387969](ignoreRunning = 1) minIndicesPerTask[127194] locLen[387959]))
                  const numTasks[387994] "dead at end of block" "const" "insert auto destroy"
                  (645671 'init var' numTasks[387994] call_tmp[802258])
                  (388003 'end of statement' lo[387939] hi[387944] locRange[387951] chunk[387880] dptpl[127199] numChunks[127261] dptpl[127199] numChunks[127261] dptpl[127199] numChunks[127261] numSublocTasks[387969] minIndicesPerTask[127194] locLen[387959])
                  {
                    unknown tmpIter[388005] "expr temp" "maybe ref" "no copy" "temp"
                    unknown call_tmp[802263] "expr temp" "maybe param" "maybe type" "temp"
                    (802266 'move' call_tmp[802263](388012 call chpl_build_low_bounded_range 0))
                    (388007 'move' tmpIter[388005](388010 call # call_tmp[802263] numTasks[387994]))
                    unknown isBounded[388015] "maybe param" "temp"
                    (388017 'move' isBounded[388015](388020 call chpl_supportsBoundedCoforall tmpIter[388005] 0))
                    if isBounded[388015]
                    {
                      const _coforallCount[388025] "const" "end count" "temp"
                      (388027 'move' _coforallCount[388025](388030 call _endCountAlloc 1))
                      unknown numTasks[388032] "temp"
                      (388034 'move' numTasks[388032](388037 call chpl_boundedCoforallSize tmpIter[388005] 0))
                      (388041 call _upEndCount _coforallCount[388025] 1 numTasks[388032])
                      (553232 'end of statement')
                      (388046 call chpl_resetTaskSpawn numTasks[388032])
                      (553233 'end of statement')
                      unknown _indexOfInterest[388048] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[388050] "expr temp" "temp"
                      (388052 'move' _iterator[388050](388055 call _getIterator tmpIter[388005]))
                      Defer
                      {
                        {
                          (388059 call _freeIterator _iterator[388050])
                        }
                      }
                      { scopeless type
                        (388063 'move' _indexOfInterest[388048](388066 call iteratorIndex _iterator[388050]))
                      }
                      ForLoop[388068]
                      {
                        unknown core[388071] "coforall index var" "index var" "insert auto destroy"
                        (553235 'end of statement')
                        (388073 'move' core[388071] _indexOfInterest[388048])
                        (553236 'end of statement' core[388071])
                        {
                          {
                            unknown call_tmp[802268] "maybe param" "maybe type" "temp"
                            (802271 'move' call_tmp[802268](388082 call _computeBlock locLen[387959] numTasks[387994] core[388071] hi[387944] lo[387939] lo[387939]))
                            const tmp[388080] "dead at end of block" "const" "insert auto destroy" "temp"
                            (645673 'init var' tmp[388080] call_tmp[802268])
                            (388091 call _check_tuple_var_decl tmp[388080] 2)
                            (553238 'end of statement')
                            unknown call_tmp[802273] "maybe param" "maybe type" "temp"
                            (802276 'move' call_tmp[802273](388096 call tmp[388080] 0))
                            const low[388094] "dead at end of block" "const" "insert auto destroy"
                            (645675 'init var' low[388094] call_tmp[802273])
                            unknown call_tmp[802278] "maybe param" "maybe type" "temp"
                            (802281 'move' call_tmp[802278](388101 call tmp[388080] 1))
                            const high[388099] "dead at end of block" "const" "insert auto destroy"
                            (645677 'init var' high[388099] call_tmp[802278])
                            (388104 'end of statement')
                            unknown call_tmp[802283] "expr temp" "maybe param" "maybe type" "temp"
                            (802286 'move' call_tmp[802283](388106 call _cond_test debugDataParNuma[287677]))
                            if call_tmp[802283]
                            {
                              unknown call_tmp[802288] "expr temp" "maybe param" "maybe type" "temp"
                              (802291 'move' call_tmp[802288](388120 call chpl_build_bounded_range low[388094] high[388099]))
                              (388110 call chpl_debug_writeln "### chunk = " chunk[387880] "  core = " core[388071] "  " "locRange = " locRange[387951] "  coreRange = " call_tmp[802288])
                              (553239 'end of statement' chunk[387880] core[388071] locRange[387951] low[388094] high[388099])
                            }
                            unknown yret[606547] "YVV" "temp"
                            unknown call_tmp[802293] "expr temp" "maybe param" "maybe type" "temp"
                            (802296 'move' call_tmp[802293](388128 call chpl_build_bounded_range low[388094] high[388099]))
                            unknown call_tmp[802298] "expr temp" "maybe param" "maybe type" "temp"
                            (802301 'move' call_tmp[802298](388126 call _build_tuple call_tmp[802293]))
                            (606550 'move' yret[606547](606549 'deref' call_tmp[802298]))
                            (388124 yield yret[606547])
                            (553245 'end of statement' low[388094] high[388099])
                          }
                          (388132 call _downEndCount _coforallCount[388025] nil[32])
                          (388077 'coforall loop')
                        }
                        label _continueLabel[388135]
                        _indexOfInterest[388048]
                        _iterator[388050]
                      }
                      label _breakLabel[388137]
                      Defer
                      {
                        {
                          (388141 call _endCountFree _coforallCount[388025])
                        }
                      }
                      (388145 call _waitEndCount _coforallCount[388025] 1 numTasks[388032])
                    }
                    {
                      const _coforallCount[388150] "const" "end count" "temp"
                      (388152 'move' _coforallCount[388150](388155 call _endCountAlloc 1))
                      unknown _indexOfInterest[388157] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[388159] "expr temp" "temp"
                      (388161 'move' _iterator[388159](388164 call _getIterator tmpIter[388005]))
                      Defer
                      {
                        {
                          (388168 call _freeIterator _iterator[388159])
                        }
                      }
                      { scopeless type
                        (388172 'move' _indexOfInterest[388157](388175 call iteratorIndex _iterator[388159]))
                      }
                      ForLoop[388177]
                      {
                        unknown core[388180] "coforall index var" "index var" "insert auto destroy"
                        (553252 'end of statement')
                        (388182 'move' core[388180] _indexOfInterest[388157])
                        (553253 'end of statement' core[388180])
                        (388186 call _upEndCount _coforallCount[388150] 1)
                        (553255 'end of statement')
                        {
                          {
                            unknown call_tmp[802303] "maybe param" "maybe type" "temp"
                            (802306 'move' call_tmp[802303](388195 call _computeBlock locLen[387959] numTasks[387994] core[388180] hi[387944] lo[387939] lo[387939]))
                            const tmp[388193] "dead at end of block" "const" "insert auto destroy" "temp"
                            (645679 'init var' tmp[388193] call_tmp[802303])
                            (388204 call _check_tuple_var_decl tmp[388193] 2)
                            (553256 'end of statement')
                            unknown call_tmp[802308] "maybe param" "maybe type" "temp"
                            (802311 'move' call_tmp[802308](388209 call tmp[388193] 0))
                            const low[388207] "dead at end of block" "const" "insert auto destroy"
                            (645681 'init var' low[388207] call_tmp[802308])
                            unknown call_tmp[802313] "maybe param" "maybe type" "temp"
                            (802316 'move' call_tmp[802313](388214 call tmp[388193] 1))
                            const high[388212] "dead at end of block" "const" "insert auto destroy"
                            (645683 'init var' high[388212] call_tmp[802313])
                            (388217 'end of statement')
                            unknown call_tmp[802318] "expr temp" "maybe param" "maybe type" "temp"
                            (802321 'move' call_tmp[802318](388219 call _cond_test debugDataParNuma[287677]))
                            if call_tmp[802318]
                            {
                              unknown call_tmp[802323] "expr temp" "maybe param" "maybe type" "temp"
                              (802326 'move' call_tmp[802323](388233 call chpl_build_bounded_range low[388207] high[388212]))
                              (388223 call chpl_debug_writeln "### chunk = " chunk[387880] "  core = " core[388180] "  " "locRange = " locRange[387951] "  coreRange = " call_tmp[802323])
                              (553257 'end of statement' chunk[387880] core[388180] locRange[387951] low[388207] high[388212])
                            }
                            unknown yret[606553] "YVV" "temp"
                            unknown call_tmp[802328] "expr temp" "maybe param" "maybe type" "temp"
                            (802331 'move' call_tmp[802328](388241 call chpl_build_bounded_range low[388207] high[388212]))
                            unknown call_tmp[802333] "expr temp" "maybe param" "maybe type" "temp"
                            (802336 'move' call_tmp[802333](388239 call _build_tuple call_tmp[802328]))
                            (606556 'move' yret[606553](606555 'deref' call_tmp[802333]))
                            (388237 yield yret[606553])
                            (553263 'end of statement' low[388207] high[388212])
                          }
                          (388245 call _downEndCount _coforallCount[388150] nil[32])
                          (388190 'coforall loop')
                        }
                        label _continueLabel[388248]
                        _indexOfInterest[388157]
                        _iterator[388159]
                      }
                      label _breakLabel[388250]
                      Defer
                      {
                        {
                          (388254 call _endCountFree _coforallCount[388150])
                        }
                      }
                      (388258 call _waitEndCount _coforallCount[388150] 1)
                    }
                  }
                }
                (387884 'elided on block' 0 tmp[387887])
              }
              (388266 call _downEndCount _coforallCount[388263] nil[32])
              (388265 'coforall loop')
            }
            label _continueLabel[388276]
            _indexOfInterest[388271]
            _iterator[388272]
          }
          label _breakLabel[388277]
          Defer
          {
            {
              (388318 call _endCountFree _coforallCount[388263])
            }
          }
          (388323 call _waitEndCount _coforallCount[388263] 1 numTasks[388264])
        }
        {
          const _coforallCount[388335] "const" "end count" "temp"
          (388391 'move' _coforallCount[388335](388388 call _endCountAlloc 1))
          unknown _indexOfInterest[388343] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[388344] "expr temp" "temp"
          (388353 'move' _iterator[388344](388351 call _getIterator tmpIter[387873]))
          Defer
          {
            {
              (388368 call _freeIterator _iterator[388344])
            }
          }
          { scopeless type
            (388358 'move' _indexOfInterest[388343](388355 call iteratorIndex _iterator[388344]))
          }
          ForLoop[388345]
          {
            unknown chunk[127308] "coforall index var" "index var" "insert auto destroy"
            (553273 'end of statement')
            (388363 'move' chunk[127308] _indexOfInterest[388343])
            (553274 'end of statement' chunk[127308])
            (388375 call _upEndCount _coforallCount[388335] 1)
            (553276 'end of statement')
            {
              {
                const tmp[127515] "const" "temp"
                unknown call_tmp[802338] "expr temp" "maybe param" "maybe type" "temp"
                (802341 'move' call_tmp[802338](402157 call here[135591]))
                unknown call_tmp[802345] "expr temp" "maybe param" "maybe type" "temp"
                (802348 'move' call_tmp[802345](127323 call(127320 call (partial) _getChild _mt[203] call_tmp[802338]) chunk[127308]))
                unknown call_tmp[802350] "expr temp" "maybe param" "maybe type" "temp"
                (802353 'move' call_tmp[802350](127512 '_wide_get_locale' call_tmp[802345]))
                (127516 'move' tmp[127515](127513 'deref' call_tmp[802350]))
                {
                  unknown call_tmp[802355] "expr temp" "maybe param" "maybe type" "temp"
                  (802358 'move' call_tmp[802355](127353 call _cond_test debugDataParNuma[287677]))
                  if call_tmp[802355]
                  {
                    unknown call_tmp[802360] "expr temp" "maybe param" "maybe type" "temp"
                    (802363 'move' call_tmp[802360](127346 call chpl_getSubloc))
                    unknown call_tmp[802365] "expr temp" "maybe param" "maybe type" "temp"
                    (802368 'move' call_tmp[802365](127342 call != chunk[127308] call_tmp[802360]))
                    unknown call_tmp[802370] "expr temp" "maybe param" "maybe type" "temp"
                    (802373 'move' call_tmp[802370](127347 call _cond_test call_tmp[802365]))
                    if call_tmp[802370]
                    {
                      unknown call_tmp[802375] "expr temp" "maybe param" "maybe type" "temp"
                      (802378 'move' call_tmp[802375](127337 call chpl_getSubloc))
                      (127328 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk[127308] ", on " call_tmp[802375] ") ***")
                      (553277 'end of statement' chunk[127308])
                    }
                  }
                  unknown call_tmp[802380] "expr temp" "maybe param" "maybe type" "temp"
                  (802383 'move' call_tmp[802380](127367 call - len[127174] 1))
                  unknown call_tmp[802385] "maybe param" "maybe type" "temp"
                  (802388 'move' call_tmp[802385](127363 call _computeBlock len[127174] numChunks[127261] chunk[127308] call_tmp[802380]))
                  const tmp[127371] "dead at end of block" "const" "insert auto destroy" "temp"
                  (645685 'init var' tmp[127371] call_tmp[802385])
                  (127378 call _check_tuple_var_decl tmp[127371] 2)
                  (553279 'end of statement')
                  unknown call_tmp[802390] "maybe param" "maybe type" "temp"
                  (802393 'move' call_tmp[802390](127372 call tmp[127371] 0))
                  const lo[127358] "dead at end of block" "const" "insert auto destroy"
                  (645687 'init var' lo[127358] call_tmp[802390])
                  unknown call_tmp[802395] "maybe param" "maybe type" "temp"
                  (802398 'move' call_tmp[802395](127375 call tmp[127371] 1))
                  const hi[127360] "dead at end of block" "const" "insert auto destroy"
                  (645689 'init var' hi[127360] call_tmp[802395])
                  (127383 'end of statement')
                  unknown call_tmp[802400] "maybe param" "maybe type" "temp"
                  (802403 'move' call_tmp[802400](127388 call chpl_build_bounded_range lo[127358] hi[127360]))
                  const locRange[127385] "dead at end of block" "const" "insert auto destroy"
                  (645691 'init var' locRange[127385] call_tmp[802400])
                  (127391 'end of statement')
                  unknown call_tmp[802409] "expr temp" "maybe param" "maybe type" "temp"
                  (802412 'move' call_tmp[802409](429100 call chpl_integralIdxType _mt[203] this[127095]))
                  unknown call_tmp[802414] "maybe param" "maybe type" "temp"
                  (802417 'move' call_tmp[802414](127398 call(127395 call (partial) sizeAs _mt[203] locRange[127385]) call_tmp[802409]))
                  const locLen[127393] "dead at end of block" "const" "insert auto destroy"
                  (645693 'init var' locLen[127393] call_tmp[802414])
                  (127401 'end of statement')
                  const numSublocTasks[127403] "dead at end of block" "const" "insert auto destroy"
                  unknown tmp[677571] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                  unknown tmp[677572] "maybe param" "temp"
                  unknown call_tmp[802419] "expr temp" "maybe param" "maybe type" "temp"
                  (802422 'move' call_tmp[802419](127407 call % dptpl[127199] numChunks[127261]))
                  unknown call_tmp[802424] "expr temp" "maybe param" "maybe type" "temp"
                  (802427 'move' call_tmp[802424](127404 call < chunk[127308] call_tmp[802419]))
                  (677577 'move' tmp[677572](677575 call _cond_test call_tmp[802424]))
                  if tmp[677572]
                  {
                    unknown tmp[677579] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                    unknown call_tmp[802429] "expr temp" "maybe param" "maybe type" "temp"
                    (802432 'move' call_tmp[802429](127413 call / dptpl[127199] numChunks[127261]))
                    (677581 'move' tmp[677579](127411 call + call_tmp[802429] 1))
                    (677586 'move' tmp[677571](677583 '_paramFoldLogical' tmp[677572] tmp[677579]))
                  }
                  {
                    unknown tmp[677588] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                    (677590 'move' tmp[677588](127418 call / dptpl[127199] numChunks[127261]))
                    (677595 'move' tmp[677571](677592 '_paramFoldLogical' tmp[677572] tmp[677588]))
                  }
                  (645695 'init var' numSublocTasks[127403] tmp[677571])
                  (127426 'end of statement')
                  unknown call_tmp[802434] "maybe param" "maybe type" "temp"
                  (802437 'move' call_tmp[802434](127430 call _computeNumChunks numSublocTasks[127403](ignoreRunning = 1) minIndicesPerTask[127194] locLen[127393]))
                  const numTasks[127428] "dead at end of block" "const" "insert auto destroy"
                  (645697 'init var' numTasks[127428] call_tmp[802434])
                  (127437 'end of statement' lo[127358] hi[127360] locRange[127385] chunk[127308] dptpl[127199] numChunks[127261] dptpl[127199] numChunks[127261] dptpl[127199] numChunks[127261] numSublocTasks[127403] minIndicesPerTask[127194] locLen[127393])
                  {
                    unknown tmpIter[387669] "expr temp" "maybe ref" "no copy" "temp"
                    unknown call_tmp[802439] "expr temp" "maybe param" "maybe type" "temp"
                    (802442 'move' call_tmp[802439](127443 call chpl_build_low_bounded_range 0))
                    (387672 'move' tmpIter[387669](127440 call # call_tmp[802439] numTasks[127428]))
                    unknown isBounded[387863] "maybe param" "temp"
                    (387869 'move' isBounded[387863](387865 call chpl_supportsBoundedCoforall tmpIter[387669] 0))
                    if isBounded[387863]
                    {
                      const _coforallCount[387732] "const" "end count" "temp"
                      (387800 'move' _coforallCount[387732](387797 call _endCountAlloc 1))
                      unknown numTasks[387733] "temp"
                      (387784 'move' numTasks[387733](387780 call chpl_boundedCoforallSize tmpIter[387669] 0))
                      (387775 call _upEndCount _coforallCount[387732] 1 numTasks[387733])
                      (553293 'end of statement')
                      (387772 call chpl_resetTaskSpawn numTasks[387733])
                      (553294 'end of statement')
                      unknown _indexOfInterest[387740] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[387741] "expr temp" "temp"
                      (387750 'move' _iterator[387741](387748 call _getIterator tmpIter[387669]))
                      Defer
                      {
                        {
                          (387765 call _freeIterator _iterator[387741])
                        }
                      }
                      { scopeless type
                        (387755 'move' _indexOfInterest[387740](387752 call iteratorIndex _iterator[387741]))
                      }
                      ForLoop[387742]
                      {
                        unknown core[387676] "coforall index var" "index var" "insert auto destroy"
                        (553296 'end of statement')
                        (387760 'move' core[387676] _indexOfInterest[387740])
                        (553297 'end of statement' core[387676])
                        {
                          {
                            unknown call_tmp[802444] "maybe param" "maybe type" "temp"
                            (802447 'move' call_tmp[802444](387682 call _computeBlock locLen[127393] numTasks[127428] core[387676] hi[127360] lo[127358] lo[127358]))
                            const tmp[387680] "dead at end of block" "const" "insert auto destroy" "temp"
                            (645699 'init var' tmp[387680] call_tmp[802444])
                            (387691 call _check_tuple_var_decl tmp[387680] 2)
                            (553299 'end of statement')
                            unknown call_tmp[802449] "maybe param" "maybe type" "temp"
                            (802452 'move' call_tmp[802449](387696 call tmp[387680] 0))
                            const low[387694] "dead at end of block" "const" "insert auto destroy"
                            (645701 'init var' low[387694] call_tmp[802449])
                            unknown call_tmp[802454] "maybe param" "maybe type" "temp"
                            (802457 'move' call_tmp[802454](387701 call tmp[387680] 1))
                            const high[387699] "dead at end of block" "const" "insert auto destroy"
                            (645703 'init var' high[387699] call_tmp[802454])
                            (387704 'end of statement')
                            unknown call_tmp[802459] "expr temp" "maybe param" "maybe type" "temp"
                            (802462 'move' call_tmp[802459](387706 call _cond_test debugDataParNuma[287677]))
                            if call_tmp[802459]
                            {
                              unknown call_tmp[802464] "expr temp" "maybe param" "maybe type" "temp"
                              (802467 'move' call_tmp[802464](387720 call chpl_build_bounded_range low[387694] high[387699]))
                              (387710 call chpl_debug_writeln "### chunk = " chunk[127308] "  core = " core[387676] "  " "locRange = " locRange[127385] "  coreRange = " call_tmp[802464])
                              (553300 'end of statement' chunk[127308] core[387676] locRange[127385] low[387694] high[387699])
                            }
                            unknown yret[606559] "YVV" "temp"
                            unknown call_tmp[802469] "expr temp" "maybe param" "maybe type" "temp"
                            (802472 'move' call_tmp[802469](387728 call chpl_build_bounded_range low[387694] high[387699]))
                            unknown call_tmp[802474] "expr temp" "maybe param" "maybe type" "temp"
                            (802477 'move' call_tmp[802474](387726 call _build_tuple call_tmp[802469]))
                            (606562 'move' yret[606559](606561 'deref' call_tmp[802474]))
                            (387724 yield yret[606559])
                            (553306 'end of statement' low[387694] high[387699])
                          }
                          (387735 call _downEndCount _coforallCount[387732] nil[32])
                          (387734 'coforall loop')
                        }
                        label _continueLabel[387745]
                        _indexOfInterest[387740]
                        _iterator[387741]
                      }
                      label _breakLabel[387746]
                      Defer
                      {
                        {
                          (387787 call _endCountFree _coforallCount[387732])
                        }
                      }
                      (387792 call _waitEndCount _coforallCount[387732] 1 numTasks[387733])
                    }
                    {
                      const _coforallCount[387804] "const" "end count" "temp"
                      (387860 'move' _coforallCount[387804](387857 call _endCountAlloc 1))
                      unknown _indexOfInterest[387812] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[387813] "expr temp" "temp"
                      (387822 'move' _iterator[387813](387820 call _getIterator tmpIter[387669]))
                      Defer
                      {
                        {
                          (387837 call _freeIterator _iterator[387813])
                        }
                      }
                      { scopeless type
                        (387827 'move' _indexOfInterest[387812](387824 call iteratorIndex _iterator[387813]))
                      }
                      ForLoop[387814]
                      {
                        unknown core[127438] "coforall index var" "index var" "insert auto destroy"
                        (553313 'end of statement')
                        (387832 'move' core[127438] _indexOfInterest[387812])
                        (553314 'end of statement' core[127438])
                        (387844 call _upEndCount _coforallCount[387804] 1)
                        (553316 'end of statement')
                        {
                          {
                            unknown call_tmp[802479] "maybe param" "maybe type" "temp"
                            (802482 'move' call_tmp[802479](127453 call _computeBlock locLen[127393] numTasks[127428] core[127438] hi[127360] lo[127358] lo[127358]))
                            const tmp[127460] "dead at end of block" "const" "insert auto destroy" "temp"
                            (645705 'init var' tmp[127460] call_tmp[802479])
                            (127467 call _check_tuple_var_decl tmp[127460] 2)
                            (553317 'end of statement')
                            unknown call_tmp[802484] "maybe param" "maybe type" "temp"
                            (802487 'move' call_tmp[802484](127461 call tmp[127460] 0))
                            const low[127448] "dead at end of block" "const" "insert auto destroy"
                            (645707 'init var' low[127448] call_tmp[802484])
                            unknown call_tmp[802489] "maybe param" "maybe type" "temp"
                            (802492 'move' call_tmp[802489](127464 call tmp[127460] 1))
                            const high[127450] "dead at end of block" "const" "insert auto destroy"
                            (645709 'init var' high[127450] call_tmp[802489])
                            (127472 'end of statement')
                            unknown call_tmp[802494] "expr temp" "maybe param" "maybe type" "temp"
                            (802497 'move' call_tmp[802494](127499 call _cond_test debugDataParNuma[287677]))
                            if call_tmp[802494]
                            {
                              unknown call_tmp[802499] "expr temp" "maybe param" "maybe type" "temp"
                              (802502 'move' call_tmp[802499](127496 call chpl_build_bounded_range low[127448] high[127450]))
                              (127475 call chpl_debug_writeln "### chunk = " chunk[127308] "  core = " core[127438] "  " "locRange = " locRange[127385] "  coreRange = " call_tmp[802499])
                              (553318 'end of statement' chunk[127308] core[127438] locRange[127385] low[127448] high[127450])
                            }
                            unknown yret[606565] "YVV" "temp"
                            unknown call_tmp[802504] "expr temp" "maybe param" "maybe type" "temp"
                            (802507 'move' call_tmp[802504](127507 call chpl_build_bounded_range low[127448] high[127450]))
                            unknown call_tmp[802509] "expr temp" "maybe param" "maybe type" "temp"
                            (802512 'move' call_tmp[802509](127509 call _build_tuple call_tmp[802504]))
                            (606568 'move' yret[606565](606567 'deref' call_tmp[802509]))
                            (127503 yield yret[606565])
                            (553324 'end of statement' low[127448] high[127450])
                          }
                          (387807 call _downEndCount _coforallCount[387804] nil[32])
                          (387806 'coforall loop')
                        }
                        label _continueLabel[387817]
                        _indexOfInterest[387812]
                        _iterator[387813]
                      }
                      label _breakLabel[387818]
                      Defer
                      {
                        {
                          (387848 call _endCountFree _coforallCount[387804])
                        }
                      }
                      (387853 call _waitEndCount _coforallCount[387804] 1)
                    }
                  }
                }
                (127519 'elided on block' 0 tmp[127515])
              }
              (388338 call _downEndCount _coforallCount[388335] nil[32])
              (388337 'coforall loop')
            }
            label _continueLabel[388348]
            _indexOfInterest[388343]
            _iterator[388344]
          }
          label _breakLabel[388349]
          Defer
          {
            {
              (388379 call _endCountFree _coforallCount[388335])
            }
          }
          (388384 call _waitEndCount _coforallCount[388335] 1)
        }
      }
    }
    {
      unknown call_tmp[802518] "expr temp" "maybe param" "maybe type" "temp"
      (802521 'move' call_tmp[802518](429129 call chpl_integralIdxType _mt[203] this[127095]))
      unknown call_tmp[802523] "maybe param" "maybe type" "temp"
      (802526 'move' call_tmp[802523](127534 call(127531 call (partial) chpl_sizeAsForIter _mt[203] this[127095]) call_tmp[802518]))
      unknown v[127527] "dead at end of block" "insert auto destroy"
      (645711 'init var' v[127527] call_tmp[802523])
      (127537 'end of statement')
      const numChunks[127539] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[677602] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[677603] "maybe param" "temp"
      unknown call_tmp[802528] "expr temp" "maybe param" "maybe type" "temp"
      (802531 'move' call_tmp[802528](127540 'task_get_serial'))
      (677608 'move' tmp[677603](677606 call _cond_test call_tmp[802528]))
      if tmp[677603]
      {
        (677613 'move' tmp[677602](677610 '_paramFoldLogical' tmp[677603] 1))
      }
      {
        unknown tmp[677615] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (677617 'move' tmp[677615](127543 call _computeNumChunks v[127527]))
        (677622 'move' tmp[677602](677619 '_paramFoldLogical' tmp[677603] tmp[677615]))
      }
      (645713 'init var' numChunks[127539] tmp[677602])
      (127549 'end of statement' v[127527])
      unknown call_tmp[802533] "expr temp" "maybe param" "maybe type" "temp"
      (802536 'move' call_tmp[802533](127567 call _cond_test debugChapelRange[107087]))
      if call_tmp[802533]
      {
        (127552 call chpl_debug_writeln "*** RI: length=" v[127527] " numChunks=" numChunks[127539])
        (553334 'end of statement' v[127527] numChunks[127539])
        (127558 call chpl_debug_writeln "*** RI: Using " numChunks[127539] " chunk(s)")
        (553337 'end of statement' numChunks[127539])
      }
      {
        unknown tmpIter[388404] "expr temp" "maybe ref" "no copy" "temp"
        unknown call_tmp[802538] "expr temp" "maybe param" "maybe type" "temp"
        (802541 'move' call_tmp[802538](127576 call chpl_build_low_bounded_range 0))
        (388407 'move' tmpIter[388404](127573 call # call_tmp[802538] numChunks[127539]))
        unknown isBounded[388595] "maybe param" "temp"
        (388601 'move' isBounded[388595](388597 call chpl_supportsBoundedCoforall tmpIter[388404] 0))
        if isBounded[388595]
        {
          const _coforallCount[388464] "const" "end count" "temp"
          (388532 'move' _coforallCount[388464](388529 call _endCountAlloc 1))
          unknown numTasks[388465] "temp"
          (388516 'move' numTasks[388465](388512 call chpl_boundedCoforallSize tmpIter[388404] 0))
          (388507 call _upEndCount _coforallCount[388464] 1 numTasks[388465])
          (553339 'end of statement')
          (388504 call chpl_resetTaskSpawn numTasks[388465])
          (553340 'end of statement')
          unknown _indexOfInterest[388472] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[388473] "expr temp" "temp"
          (388482 'move' _iterator[388473](388480 call _getIterator tmpIter[388404]))
          Defer
          {
            {
              (388497 call _freeIterator _iterator[388473])
            }
          }
          { scopeless type
            (388487 'move' _indexOfInterest[388472](388484 call iteratorIndex _iterator[388473]))
          }
          ForLoop[388474]
          {
            unknown chunk[388411] "coforall index var" "index var" "insert auto destroy"
            (553342 'end of statement')
            (388492 'move' chunk[388411] _indexOfInterest[388472])
            (553343 'end of statement' chunk[388411])
            {
              {
                unknown call_tmp[802543] "expr temp" "maybe param" "maybe type" "temp"
                (802546 'move' call_tmp[802543](388422 call - v[127527] 1))
                unknown call_tmp[802548] "maybe param" "maybe type" "temp"
                (802551 'move' call_tmp[802548](388417 call _computeBlock v[127527] numChunks[127539] chunk[388411] call_tmp[802543]))
                const tmp[388415] "dead at end of block" "const" "insert auto destroy" "temp"
                (645715 'init var' tmp[388415] call_tmp[802548])
                (388427 call _check_tuple_var_decl tmp[388415] 2)
                (553345 'end of statement')
                unknown call_tmp[802553] "maybe param" "maybe type" "temp"
                (802556 'move' call_tmp[802553](388432 call tmp[388415] 0))
                const lo[388430] "dead at end of block" "const" "insert auto destroy"
                (645717 'init var' lo[388430] call_tmp[802553])
                unknown call_tmp[802558] "maybe param" "maybe type" "temp"
                (802561 'move' call_tmp[802558](388437 call tmp[388415] 1))
                const hi[388435] "dead at end of block" "const" "insert auto destroy"
                (645719 'init var' hi[388435] call_tmp[802558])
                (388440 'end of statement')
                unknown call_tmp[802563] "expr temp" "maybe param" "maybe type" "temp"
                (802566 'move' call_tmp[802563](388442 call _cond_test debugChapelRange[107087]))
                if call_tmp[802563]
                {
                  unknown call_tmp[802568] "expr temp" "maybe param" "maybe type" "temp"
                  (802571 'move' call_tmp[802568](388452 call chpl_build_bounded_range lo[388430] hi[388435]))
                  unknown call_tmp[802573] "expr temp" "maybe param" "maybe type" "temp"
                  (802576 'move' call_tmp[802573](388450 call _build_tuple call_tmp[802568]))
                  (388447 call chpl_debug_writeln "*** RI: tuple = " call_tmp[802573])
                  (553346 'end of statement' lo[388430] hi[388435])
                }
                unknown yret[606571] "YVV" "temp"
                unknown call_tmp[802578] "expr temp" "maybe param" "maybe type" "temp"
                (802581 'move' call_tmp[802578](388460 call chpl_build_bounded_range lo[388430] hi[388435]))
                unknown call_tmp[802583] "expr temp" "maybe param" "maybe type" "temp"
                (802586 'move' call_tmp[802583](388458 call _build_tuple call_tmp[802578]))
                (606574 'move' yret[606571](606573 'deref' call_tmp[802583]))
                (388456 yield yret[606571])
                (553349 'end of statement' lo[388430] hi[388435])
              }
              (388467 call _downEndCount _coforallCount[388464] nil[32])
              (388466 'coforall loop')
            }
            label _continueLabel[388477]
            _indexOfInterest[388472]
            _iterator[388473]
          }
          label _breakLabel[388478]
          Defer
          {
            {
              (388519 call _endCountFree _coforallCount[388464])
            }
          }
          (388524 call _waitEndCount _coforallCount[388464] 1 numTasks[388465])
        }
        {
          const _coforallCount[388536] "const" "end count" "temp"
          (388592 'move' _coforallCount[388536](388589 call _endCountAlloc 1))
          unknown _indexOfInterest[388544] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[388545] "expr temp" "temp"
          (388554 'move' _iterator[388545](388552 call _getIterator tmpIter[388404]))
          Defer
          {
            {
              (388569 call _freeIterator _iterator[388545])
            }
          }
          { scopeless type
            (388559 'move' _indexOfInterest[388544](388556 call iteratorIndex _iterator[388545]))
          }
          ForLoop[388546]
          {
            unknown chunk[127571] "coforall index var" "index var" "insert auto destroy"
            (553356 'end of statement')
            (388564 'move' chunk[127571] _indexOfInterest[388544])
            (553357 'end of statement' chunk[127571])
            (388576 call _upEndCount _coforallCount[388536] 1)
            (553359 'end of statement')
            {
              {
                unknown call_tmp[802588] "expr temp" "maybe param" "maybe type" "temp"
                (802591 'move' call_tmp[802588](127590 call - v[127527] 1))
                unknown call_tmp[802593] "maybe param" "maybe type" "temp"
                (802596 'move' call_tmp[802593](127586 call _computeBlock v[127527] numChunks[127539] chunk[127571] call_tmp[802588]))
                const tmp[127594] "dead at end of block" "const" "insert auto destroy" "temp"
                (645721 'init var' tmp[127594] call_tmp[802593])
                (127601 call _check_tuple_var_decl tmp[127594] 2)
                (553360 'end of statement')
                unknown call_tmp[802598] "maybe param" "maybe type" "temp"
                (802601 'move' call_tmp[802598](127595 call tmp[127594] 0))
                const lo[127581] "dead at end of block" "const" "insert auto destroy"
                (645723 'init var' lo[127581] call_tmp[802598])
                unknown call_tmp[802603] "maybe param" "maybe type" "temp"
                (802606 'move' call_tmp[802603](127598 call tmp[127594] 1))
                const hi[127583] "dead at end of block" "const" "insert auto destroy"
                (645725 'init var' hi[127583] call_tmp[802603])
                (127606 'end of statement')
                unknown call_tmp[802608] "expr temp" "maybe param" "maybe type" "temp"
                (802611 'move' call_tmp[802608](127621 call _cond_test debugChapelRange[107087]))
                if call_tmp[802608]
                {
                  unknown call_tmp[802613] "expr temp" "maybe param" "maybe type" "temp"
                  (802616 'move' call_tmp[802613](127615 call chpl_build_bounded_range lo[127581] hi[127583]))
                  unknown call_tmp[802618] "expr temp" "maybe param" "maybe type" "temp"
                  (802621 'move' call_tmp[802618](127617 call _build_tuple call_tmp[802613]))
                  (127608 call chpl_debug_writeln "*** RI: tuple = " call_tmp[802618])
                  (553361 'end of statement' lo[127581] hi[127583])
                }
                unknown yret[606577] "YVV" "temp"
                unknown call_tmp[802623] "expr temp" "maybe param" "maybe type" "temp"
                (802626 'move' call_tmp[802623](127630 call chpl_build_bounded_range lo[127581] hi[127583]))
                unknown call_tmp[802628] "expr temp" "maybe param" "maybe type" "temp"
                (802631 'move' call_tmp[802628](127632 call _build_tuple call_tmp[802623]))
                (606580 'move' yret[606577](606579 'deref' call_tmp[802628]))
                (127626 yield yret[606577])
                (553364 'end of statement' lo[127581] hi[127583])
              }
              (388539 call _downEndCount _coforallCount[388536] nil[32])
              (388538 'coforall loop')
            }
            label _continueLabel[388549]
            _indexOfInterest[388544]
            _iterator[388545]
          }
          label _breakLabel[388550]
          Defer
          {
            {
              (388580 call _endCountFree _coforallCount[388536])
            }
          }
          (388585 call _waitEndCount _coforallCount[388536] 1)
        }
      }
    }
    (606545 return ret[606543])
  }
  where {
    (127104 call == tag[127099] leader[52138])
  }
  function range[240](?).these[127649](arg _mt[127661]:_MT[201], arg this[127652]:range[240](?) :
  range[240](?), param arg tag[127656]:iterKind[52144], arg followThis[127659]:_any[141](?)) : _unknown[42] "iterator fn" "method" "no return value for void"
  {
    unknown ret[606585] "RVV" "temp"
    unknown tmp[486237] "maybe param" "temp"
    (486248 'move' tmp[486237] 1)
    unknown call_tmp[802633] "expr temp" "maybe param" "maybe type" "temp"
    (802636 'move' call_tmp[802633](486250 call _cond_invalid tmp[486237]))
    if call_tmp[802633]
    {
      (486253 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[677629] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[677630] "maybe param" "temp"
    unknown call_tmp[802638] "expr temp" "maybe param" "maybe type" "temp"
    (802641 'move' call_tmp[802638](486238 call isTrue tmp[486237]))
    (677635 'move' tmp[677630](677633 call _cond_test call_tmp[802638]))
    if tmp[677630]
    {
      unknown tmp[677637] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[802643] "expr temp" "maybe param" "maybe type" "temp"
      (802646 'move' call_tmp[802643](127682 call hasAmbiguousAlignmentForIter this[127652]))
      (677639 'move' tmp[677637](486241 call isTrue call_tmp[802643]))
      (677644 'move' tmp[677629](677641 '_paramFoldLogical' tmp[677630] tmp[677637]))
    }
    {
      (677649 'move' tmp[677629](677646 '_paramFoldLogical' tmp[677630] 0))
    }
    unknown call_tmp[802648] "expr temp" "maybe param" "maybe type" "temp"
    (802651 'move' call_tmp[802648](127684 call _cond_test tmp[677629]))
    if call_tmp[802648]
    {
      (127675 call boundsCheckHalt module=[222] HaltWrappers[518] "these -- Attempt to iterate over a range with ambiguous alignment.")
      (402163 'referenced modules list' HaltWrappers[518])
    }
    unknown call_tmp[802655] "expr temp" "maybe param" "maybe type" "temp"
    (802658 'move' call_tmp[802655](429155 call bounds _mt[203] this[127652]))
    unknown call_tmp[802660] "expr temp" "maybe param" "maybe type" "temp"
    (802663 'move' call_tmp[802660](127693 call == call_tmp[802655] neither[107120]))
    unknown call_tmp[802665] "expr temp" "maybe param" "maybe type" "temp"
    (802668 'move' call_tmp[802665](127700 call _cond_test call_tmp[802660]))
    if call_tmp[802665]
    {
      (127690 call compilerError "iteration over a range with no bounds")
    }
    unknown tmp[486258] "maybe param" "temp"
    unknown call_tmp[802672] "expr temp" "maybe param" "maybe type" "temp"
    (802675 'move' call_tmp[802672](402171 call strides _mt[203] this[127652]))
    (486269 'move' tmp[486258](127715 call(127712 call (partial) isPositive _mt[203] call_tmp[802672])))
    unknown call_tmp[802679] "expr temp" "maybe param" "maybe type" "temp"
    (802682 'move' call_tmp[802679](486271 call _cond_invalid tmp[486258]))
    if call_tmp[802679]
    {
      (486274 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[677656] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[677657] "maybe param" "temp"
    unknown call_tmp[802684] "expr temp" "maybe param" "maybe type" "temp"
    (802687 'move' call_tmp[802684](486259 call isTrue tmp[486258]))
    (677662 'move' tmp[677657](677660 call _cond_test call_tmp[802684]))
    if tmp[677657]
    {
      unknown tmp[677664] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[802691] "expr temp" "maybe param" "maybe type" "temp"
      (802694 'move' call_tmp[802691](429160 call bounds _mt[203] this[127652]))
      unknown call_tmp[802696] "expr temp" "maybe param" "maybe type" "temp"
      (802699 'move' call_tmp[802696](127716 call == call_tmp[802691] high[107118]))
      (677666 'move' tmp[677664](486262 call isTrue call_tmp[802696]))
      (677671 'move' tmp[677656](677668 '_paramFoldLogical' tmp[677657] tmp[677664]))
    }
    {
      (677676 'move' tmp[677656](677673 '_paramFoldLogical' tmp[677657] 0))
    }
    unknown call_tmp[802701] "expr temp" "maybe param" "maybe type" "temp"
    (802704 'move' call_tmp[802701](127723 call _cond_test tmp[677656]))
    if call_tmp[802701]
    {
      (127706 call compilerError "iteration over a range with no first index")
    }
    unknown tmp[486279] "maybe param" "temp"
    unknown call_tmp[802708] "expr temp" "maybe param" "maybe type" "temp"
    (802711 'move' call_tmp[802708](402177 call strides _mt[203] this[127652]))
    (486290 'move' tmp[486279](127738 call(127735 call (partial) isNegative _mt[203] call_tmp[802708])))
    unknown call_tmp[802715] "expr temp" "maybe param" "maybe type" "temp"
    (802718 'move' call_tmp[802715](486292 call _cond_invalid tmp[486279]))
    if call_tmp[802715]
    {
      (486295 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[677683] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[677684] "maybe param" "temp"
    unknown call_tmp[802720] "expr temp" "maybe param" "maybe type" "temp"
    (802723 'move' call_tmp[802720](486280 call isTrue tmp[486279]))
    (677689 'move' tmp[677684](677687 call _cond_test call_tmp[802720]))
    if tmp[677684]
    {
      unknown tmp[677691] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[802727] "expr temp" "maybe param" "maybe type" "temp"
      (802730 'move' call_tmp[802727](429165 call bounds _mt[203] this[127652]))
      unknown call_tmp[802732] "expr temp" "maybe param" "maybe type" "temp"
      (802735 'move' call_tmp[802732](127739 call == call_tmp[802727] low[107116]))
      (677693 'move' tmp[677691](486283 call isTrue call_tmp[802732]))
      (677698 'move' tmp[677683](677695 '_paramFoldLogical' tmp[677684] tmp[677691]))
    }
    {
      (677703 'move' tmp[677683](677700 '_paramFoldLogical' tmp[677684] 0))
    }
    unknown call_tmp[802737] "expr temp" "maybe param" "maybe type" "temp"
    (802740 'move' call_tmp[802737](127746 call _cond_test tmp[677683]))
    if call_tmp[802737]
    {
      (127729 call compilerError "iteration over a range with no first index")
    }
    unknown call_tmp[802744] "expr temp" "maybe param" "maybe type" "temp"
    (802747 'move' call_tmp[802744](127774 call size _mt[203] followThis[127659]))
    unknown call_tmp[802749] "expr temp" "maybe param" "maybe type" "temp"
    (802752 'move' call_tmp[802749](127771 call != call_tmp[802744] 1))
    unknown call_tmp[802754] "expr temp" "maybe param" "maybe type" "temp"
    (802757 'move' call_tmp[802754](127778 call _cond_test call_tmp[802749]))
    if call_tmp[802754]
    {
      unknown call_tmp[802761] "expr temp" "maybe param" "maybe type" "temp"
      (802764 'move' call_tmp[802761](127763 call size _mt[203] followThis[127659]))
      unknown call_tmp[802766] "expr temp" "maybe param" "maybe type" "temp"
      (802769 'move' call_tmp[802766](127760 call : call_tmp[802761] string[244]))
      unknown call_tmp[802771] "expr temp" "maybe param" "maybe type" "temp"
      (802774 'move' call_tmp[802771](127755 call + "rank mismatch in zippered iteration (can't zip a " call_tmp[802766]))
      unknown call_tmp[802776] "expr temp" "maybe param" "maybe type" "temp"
      (802779 'move' call_tmp[802776](127753 call + call_tmp[802771] "D expression with a range, which is 1D)"))
      (127752 call compilerError call_tmp[802776])
    }
    unknown call_tmp[802781] "expr temp" "maybe param" "maybe type" "temp"
    (802784 'move' call_tmp[802781](127791 call _cond_test debugChapelRange[107087]))
    if call_tmp[802781]
    {
      (127784 call chpl_debug_writeln "In range follower code: Following " followThis[127659])
    }
    unknown call_tmp[802786] "maybe param" "maybe type" "temp"
    (802789 'move' call_tmp[802786](127799 call followThis[127659] 0))
    unknown myFollowThis[127797] "dead at end of block" "insert auto destroy"
    (645727 'init var' myFollowThis[127797] call_tmp[802786])
    (127802 'end of statement')
    unknown call_tmp[802791] "expr temp" "maybe param" "maybe type" "temp"
    (802794 'move' call_tmp[802791](127811 call _cond_test debugChapelRange[107087]))
    if call_tmp[802791]
    {
      (127804 call chpl_debug_writeln "Range = " myFollowThis[127797])
      (553379 'end of statement' myFollowThis[127797])
    }
    unknown tmp[486300] "maybe param" "temp"
    (486311 'move' tmp[486300] 1)
    unknown call_tmp[802796] "expr temp" "maybe param" "maybe type" "temp"
    (802799 'move' call_tmp[802796](486313 call _cond_invalid tmp[486300]))
    if call_tmp[802796]
    {
      (486316 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[677710] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[677711] "maybe param" "temp"
    unknown call_tmp[802801] "expr temp" "maybe param" "maybe type" "temp"
    (802804 'move' call_tmp[802801](486301 call isTrue tmp[486300]))
    (677716 'move' tmp[677711](677714 call _cond_test call_tmp[802801]))
    if tmp[677711]
    {
      unknown tmp[677718] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[802808] "expr temp" "maybe param" "maybe type" "temp"
      (802811 'move' call_tmp[802808](127864 call(127861 call (partial) hasFirstForIter _mt[203] this[127652])))
      unknown call_tmp[802813] "expr temp" "maybe param" "maybe type" "temp"
      (802816 'move' call_tmp[802813](127858 call ! call_tmp[802808]))
      (677720 'move' tmp[677718](486304 call isTrue call_tmp[802813]))
      (677725 'move' tmp[677710](677722 '_paramFoldLogical' tmp[677711] tmp[677718]))
    }
    {
      (677730 'move' tmp[677710](677727 '_paramFoldLogical' tmp[677711] 0))
    }
    unknown call_tmp[802818] "expr temp" "maybe param" "maybe type" "temp"
    (802821 'move' call_tmp[802818](127865 call _cond_test tmp[677710]))
    if call_tmp[802818]
    {
      unknown call_tmp[802825] "expr temp" "maybe param" "maybe type" "temp"
      (802828 'move' call_tmp[802825](127850 call(127847 call (partial) isEmpty _mt[203] this[127652])))
      unknown call_tmp[802830] "expr temp" "maybe param" "maybe type" "temp"
      (802833 'move' call_tmp[802830](127851 call _cond_test call_tmp[802825]))
      if call_tmp[802830]
      {
        unknown call_tmp[802837] "expr temp" "maybe param" "maybe type" "temp"
        (802840 'move' call_tmp[802837](127833 call(127830 call (partial) isEmpty _mt[203] myFollowThis[127797])))
        unknown call_tmp[802842] "expr temp" "maybe param" "maybe type" "temp"
        (802845 'move' call_tmp[802842](127827 call ! call_tmp[802837]))
        unknown call_tmp[802847] "expr temp" "maybe param" "maybe type" "temp"
        (802850 'move' call_tmp[802847](127834 call _cond_test call_tmp[802842]))
        if call_tmp[802847]
        {
          (127822 call boundsCheckHalt module=[222] HaltWrappers[518] "size mismatch in zippered iteration")
          (402184 'referenced modules list' HaltWrappers[518])
        }
      }
      {
        (127844 call boundsCheckHalt module=[222] HaltWrappers[518] "iteration over a range with no first index")
        (402191 'referenced modules list' HaltWrappers[518])
      }
    }
    unknown tmp[486342] "maybe param" "temp"
    (486353 'move' tmp[486342] 1)
    unknown call_tmp[802852] "expr temp" "maybe param" "maybe type" "temp"
    (802855 'move' call_tmp[802852](486355 call _cond_invalid tmp[486342]))
    if call_tmp[802852]
    {
      (486358 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[677737] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[677738] "maybe param" "temp"
    unknown call_tmp[802857] "expr temp" "maybe param" "maybe type" "temp"
    (802860 'move' call_tmp[802857](486343 call isTrue tmp[486342]))
    (677743 'move' tmp[677738](677741 call _cond_test call_tmp[802857]))
    if tmp[677738]
    {
      unknown tmp[677745] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[802864] "expr temp" "maybe param" "maybe type" "temp"
      (802867 'move' call_tmp[802864](127907 call(127904 call (partial) hasFirstForIter _mt[203] myFollowThis[127797])))
      unknown call_tmp[802869] "expr temp" "maybe param" "maybe type" "temp"
      (802872 'move' call_tmp[802869](127901 call ! call_tmp[802864]))
      (677747 'move' tmp[677745](486346 call isTrue call_tmp[802869]))
      (677752 'move' tmp[677737](677749 '_paramFoldLogical' tmp[677738] tmp[677745]))
    }
    {
      (677757 'move' tmp[677737](677754 '_paramFoldLogical' tmp[677738] 0))
    }
    unknown call_tmp[802874] "expr temp" "maybe param" "maybe type" "temp"
    (802877 'move' call_tmp[802874](127908 call _cond_test tmp[677737]))
    if call_tmp[802874]
    {
      unknown tmp[486321] "maybe param" "temp"
      (486332 'move' tmp[486321](127887 call(127884 call (partial) isAligned _mt[203] myFollowThis[127797])))
      unknown call_tmp[802881] "expr temp" "maybe param" "maybe type" "temp"
      (802884 'move' call_tmp[802881](486334 call _cond_invalid tmp[486321]))
      if call_tmp[802881]
      {
        (486337 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[677764] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[677765] "maybe param" "temp"
      unknown call_tmp[802886] "expr temp" "maybe param" "maybe type" "temp"
      (802889 'move' call_tmp[802886](486322 call isTrue tmp[486321]))
      (677770 'move' tmp[677765](677768 call _cond_test call_tmp[802886]))
      if tmp[677765]
      {
        unknown tmp[677772] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[802893] "expr temp" "maybe param" "maybe type" "temp"
        (802896 'move' call_tmp[802893](127892 call(127889 call (partial) isEmpty _mt[203] myFollowThis[127797])))
        (677774 'move' tmp[677772](486325 call isTrue call_tmp[802893]))
        (677779 'move' tmp[677764](677776 '_paramFoldLogical' tmp[677765] tmp[677772]))
      }
      {
        (677784 'move' tmp[677764](677781 '_paramFoldLogical' tmp[677765] 0))
      }
      unknown call_tmp[802898] "expr temp" "maybe param" "maybe type" "temp"
      (802901 'move' call_tmp[802898](127879 call ! tmp[677764]))
      unknown call_tmp[802903] "expr temp" "maybe param" "maybe type" "temp"
      (802906 'move' call_tmp[802903](127893 call _cond_test call_tmp[802898]))
      if call_tmp[802903]
      {
        (127874 call boundsCheckHalt module=[222] HaltWrappers[518] "zippered iteration over a range with no first index")
        (402199 'referenced modules list' HaltWrappers[518])
      }
    }
    unknown call_tmp[802908] "maybe param" "maybe type" "temp"
    (802911 'move' call_tmp[802908](127915 call chpl_strideProduct this[127652] myFollowThis[127797]))
    unknown newStrides[127913] "dead at end of block" "param"
    (645729 'init var' newStrides[127913] call_tmp[802908])
    (127919 'end of statement' myFollowThis[127797])
    unknown tmp[486426] "maybe param" "temp"
    unknown tmp[486447] "maybe param" "temp"
    unknown call_tmp[802915] "expr temp" "maybe param" "maybe type" "temp"
    (802918 'move' call_tmp[802915](128388 call bounds _mt[203] myFollowThis[127797]))
    (486458 'move' tmp[486447](128385 call == call_tmp[802915] both[107114]))
    unknown call_tmp[802920] "expr temp" "maybe param" "maybe type" "temp"
    (802923 'move' call_tmp[802920](486460 call _cond_invalid tmp[486447]))
    if call_tmp[802920]
    {
      (486463 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[677791] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[677792] "maybe param" "temp"
    unknown call_tmp[802925] "expr temp" "maybe param" "maybe type" "temp"
    (802928 'move' call_tmp[802925](486448 call isTrue tmp[486447]))
    (677797 'move' tmp[677792](677795 call _cond_test call_tmp[802925]))
    if tmp[677792]
    {
      unknown tmp[677799] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[802932] "expr temp" "maybe param" "maybe type" "temp"
      (802935 'move' call_tmp[802932](128399 call(128396 call (partial) hasPosNegUnitStride _mt[203] myFollowThis[127797])))
      (677801 'move' tmp[677799](486451 call isTrue call_tmp[802932]))
      (677806 'move' tmp[677791](677803 '_paramFoldLogical' tmp[677792] tmp[677799]))
    }
    {
      (677811 'move' tmp[677791](677808 '_paramFoldLogical' tmp[677792] 0))
    }
    (486437 'move' tmp[486426] tmp[677791])
    unknown call_tmp[802937] "expr temp" "maybe param" "maybe type" "temp"
    (802940 'move' call_tmp[802937](486439 call _cond_invalid tmp[486426]))
    if call_tmp[802937]
    {
      (486442 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[677818] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[677819] "maybe param" "temp"
    unknown call_tmp[802942] "expr temp" "maybe param" "maybe type" "temp"
    (802945 'move' call_tmp[802942](486427 call isTrue tmp[486426]))
    (677824 'move' tmp[677819](677822 call _cond_test call_tmp[802942]))
    if tmp[677819]
    {
      (677829 'move' tmp[677818](677826 '_paramFoldLogical' tmp[677819] 1))
    }
    {
      unknown tmp[677831] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[802949] "expr temp" "maybe param" "maybe type" "temp"
      (802952 'move' call_tmp[802949](128404 call(128401 call (partial) hasLastForIter _mt[203] myFollowThis[127797])))
      (677833 'move' tmp[677831](486431 call isTrue call_tmp[802949]))
      (677838 'move' tmp[677818](677835 '_paramFoldLogical' tmp[677819] tmp[677831]))
    }
    unknown call_tmp[802954] "expr temp" "maybe param" "maybe type" "temp"
    (802957 'move' call_tmp[802954](128405 call _cond_test tmp[677818]))
    if call_tmp[802954]
    {
      unknown call_tmp[802963] "expr temp" "maybe param" "maybe type" "temp"
      (802966 'move' call_tmp[802963](127929 call chpl_integralIdxType _mt[203] myFollowThis[127797]))
      unknown call_tmp[802968] "maybe param" "maybe type" "temp"
      (802971 'move' call_tmp[802968](127927 call(127924 call (partial) sizeAs _mt[203] myFollowThis[127797]) call_tmp[802963]))
      const flwlen[127922] "dead at end of block" "const" "insert auto destroy"
      (645731 'init var' flwlen[127922] call_tmp[802968])
      (127933 'end of statement')
      unknown call_tmp[802973] "expr temp" "maybe param" "maybe type" "temp"
      (802976 'move' call_tmp[802973](128020 call _cond_test 1))
      if call_tmp[802973]
      {
        unknown call_tmp[802980] "expr temp" "maybe param" "maybe type" "temp"
        (802983 'move' call_tmp[802980](127969 call(127966 call (partial) hasLastForIter _mt[203] this[127652])))
        unknown call_tmp[802985] "expr temp" "maybe param" "maybe type" "temp"
        (802988 'move' call_tmp[802985](127970 call _cond_test call_tmp[802980]))
        if call_tmp[802985]
        {
          unknown tmp[486363] "maybe param" "temp"
          unknown call_tmp[802992] "expr temp" "maybe param" "maybe type" "temp"
          (802995 'move' call_tmp[802992](127948 call bounds _mt[203] this[127652]))
          (486374 'move' tmp[486363](127945 call != call_tmp[802992] both[107114]))
          unknown call_tmp[802997] "expr temp" "maybe param" "maybe type" "temp"
          (803000 'move' call_tmp[802997](486376 call _cond_invalid tmp[486363]))
          if call_tmp[802997]
          {
            (486379 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[677845] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[677846] "maybe param" "temp"
          unknown call_tmp[803002] "expr temp" "maybe param" "maybe type" "temp"
          (803005 'move' call_tmp[803002](486364 call isTrue tmp[486363]))
          (677851 'move' tmp[677846](677849 call _cond_test call_tmp[803002]))
          if tmp[677846]
          {
            unknown tmp[677853] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[803009] "expr temp" "maybe param" "maybe type" "temp"
            (803012 'move' call_tmp[803009](429179 call idxType _mt[203] this[127652]))
            unknown call_tmp[803014] "expr temp" "maybe param" "maybe type" "temp"
            (803017 'move' call_tmp[803014](127958 call isFiniteIdxType call_tmp[803009]))
            unknown call_tmp[803019] "expr temp" "maybe param" "maybe type" "temp"
            (803022 'move' call_tmp[803019](127955 call ! call_tmp[803014]))
            (677855 'move' tmp[677853](486367 call isTrue call_tmp[803019]))
            (677860 'move' tmp[677845](677857 '_paramFoldLogical' tmp[677846] tmp[677853]))
          }
          {
            (677865 'move' tmp[677845](677862 '_paramFoldLogical' tmp[677846] 0))
          }
          unknown call_tmp[803024] "expr temp" "maybe param" "maybe type" "temp"
          (803027 'move' call_tmp[803024](127960 call _cond_test tmp[677845]))
          if call_tmp[803024]
          {
            (127937 call assert 0 "hasFirstForIter && hasLastForIter do not imply a range is bounded")
          }
        }
        unknown call_tmp[803029] "expr temp" "maybe param" "maybe type" "temp"
        (803032 'move' call_tmp[803029](128010 call != flwlen[127922] 0))
        unknown call_tmp[803034] "expr temp" "maybe param" "maybe type" "temp"
        (803037 'move' call_tmp[803034](128014 call _cond_test call_tmp[803029]))
        if call_tmp[803034]
        {
          unknown tmp[486384] "maybe param" "temp"
          unknown call_tmp[803041] "expr temp" "maybe param" "maybe type" "temp"
          (803044 'move' call_tmp[803041](127986 call bounds _mt[203] this[127652]))
          (486395 'move' tmp[486384](127983 call == call_tmp[803041] both[107114]))
          unknown call_tmp[803046] "expr temp" "maybe param" "maybe type" "temp"
          (803049 'move' call_tmp[803046](486397 call _cond_invalid tmp[486384]))
          if call_tmp[803046]
          {
            (486400 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[677872] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[677873] "maybe param" "temp"
          unknown call_tmp[803051] "expr temp" "maybe param" "maybe type" "temp"
          (803054 'move' call_tmp[803051](486385 call isTrue tmp[486384]))
          (677878 'move' tmp[677873](677876 call _cond_test call_tmp[803051]))
          if tmp[677873]
          {
            unknown tmp[677880] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[803058] "expr temp" "maybe param" "maybe type" "temp"
            (803061 'move' call_tmp[803058](127996 call highBound _mt[203] myFollowThis[127797]))
            unknown call_tmp[803065] "expr temp" "maybe param" "maybe type" "temp"
            (803068 'move' call_tmp[803065](128003 call(128000 call (partial) sizeAs _mt[203] this[127652]) uint(64)[86]))
            unknown call_tmp[803070] "expr temp" "maybe param" "maybe type" "temp"
            (803073 'move' call_tmp[803070](127993 call >= call_tmp[803058] call_tmp[803065]))
            (677882 'move' tmp[677880](486388 call isTrue call_tmp[803070]))
            (677887 'move' tmp[677872](677884 '_paramFoldLogical' tmp[677873] tmp[677880]))
          }
          {
            (677892 'move' tmp[677872](677889 '_paramFoldLogical' tmp[677873] 0))
          }
          unknown call_tmp[803075] "expr temp" "maybe param" "maybe type" "temp"
          (803078 'move' call_tmp[803075](128005 call _cond_test tmp[677872]))
          if call_tmp[803075]
          {
            (127978 call boundsCheckHalt module=[222] HaltWrappers[518] "size mismatch in zippered iteration")
            (402213 'referenced modules list' HaltWrappers[518])
          }
        }
      }
      unknown r[128025] "dead at end of block" "insert auto destroy"
      unknown call_tmp[803082] "expr temp" "maybe param" "maybe type" "temp"
      (803085 'move' call_tmp[803082](429187 call idxType _mt[203] this[127652]))
      unknown call_tmp[803087] "expr temp" "maybe param" "maybe type" "temp"
      (803090 'move' call_tmp[803087](128027 call range[240](?) call_tmp[803082](strides = newStrides[127913])))
      (645733 'default init var' r[128025] call_tmp[803087])
      (128032 'end of statement' myFollowThis[127797])
      unknown call_tmp[803092] "expr temp" "maybe param" "maybe type" "temp"
      (803095 'move' call_tmp[803092](128102 call != flwlen[127922] 0))
      unknown call_tmp[803097] "expr temp" "maybe param" "maybe type" "temp"
      (803100 'move' call_tmp[803097](128106 call _cond_test call_tmp[803092]))
      if call_tmp[803097]
      {
        unknown call_tmp[803106] "expr temp" "maybe param" "maybe type" "temp"
        (803109 'move' call_tmp[803106](128042 call first _mt[203] myFollowThis[127797]))
        unknown call_tmp[803111] "maybe param" "maybe type" "temp"
        (803114 'move' call_tmp[803111](128040 call(128037 call (partial) orderToIndex _mt[203] this[127652]) call_tmp[803106]))
        unknown low[128035] "dead at end of block" "insert auto destroy"
        (645735 'init var' low[128035] call_tmp[803111])
        (128046 'end of statement')
        unknown call_tmp[803120] "expr temp" "maybe param" "maybe type" "temp"
        (803123 'move' call_tmp[803120](128055 call last _mt[203] myFollowThis[127797]))
        unknown call_tmp[803125] "maybe param" "maybe type" "temp"
        (803128 'move' call_tmp[803125](128053 call(128050 call (partial) orderToIndex _mt[203] this[127652]) call_tmp[803120]))
        unknown high[128048] "dead at end of block" "insert auto destroy"
        (645737 'init var' high[128048] call_tmp[803125])
        (128059 'end of statement' myFollowThis[127797])
        unknown call_tmp[803132] "expr temp" "maybe param" "maybe type" "temp"
        (803135 'move' call_tmp[803132](128071 call stride _mt[203] this[127652]))
        unknown call_tmp[803139] "expr temp" "maybe param" "maybe type" "temp"
        (803142 'move' call_tmp[803139](128075 call stride _mt[203] myFollowThis[127797]))
        unknown call_tmp[803144] "expr temp" "maybe param" "maybe type" "temp"
        (803147 'move' call_tmp[803144](128068 call * call_tmp[803132] call_tmp[803139]))
        unknown call_tmp[803149] "expr temp" "maybe param" "maybe type" "temp"
        (803152 'move' call_tmp[803149](128066 call isNegativeStride newStrides[127913] call_tmp[803144]))
        unknown call_tmp[803154] "expr temp" "maybe param" "maybe type" "temp"
        (803157 'move' call_tmp[803154](128078 call _cond_test call_tmp[803149]))
        if call_tmp[803154]
        {
          (128060 call <=> low[128035] high[128048])
          (553396 'end of statement' low[128035] high[128048])
        }
        unknown call_tmp[803163] "expr temp" "maybe param" "maybe type" "temp"
        (803166 'move' call_tmp[803163](128095 call stride _mt[203] this[127652]))
        unknown call_tmp[803170] "expr temp" "maybe param" "maybe type" "temp"
        (803173 'move' call_tmp[803170](128099 call stride _mt[203] myFollowThis[127797]))
        unknown call_tmp[803175] "expr temp" "maybe param" "maybe type" "temp"
        (803178 'move' call_tmp[803175](128092 call * call_tmp[803163] call_tmp[803170]))
        (128089 call(128086 call (partial) chpl_setFields _mt[203] r[128025]) low[128035] high[128048] call_tmp[803175])
        (553399 'end of statement' r[128025] low[128035] high[128048] myFollowThis[127797])
      }
      unknown call_tmp[803180] "expr temp" "maybe param" "maybe type" "temp"
      (803183 'move' call_tmp[803180](128118 call _cond_test debugChapelRange[107087]))
      if call_tmp[803180]
      {
        (128111 call chpl_debug_writeln "Expanded range = " r[128025])
        (553404 'end of statement' r[128025])
      }
      {
        unknown _indexOfInterest[128129] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[128130] "expr temp" "temp"
        (128139 'move' _iterator[128130](128137 call _getIterator r[128025]))
        Defer
        {
          {
            (128154 call _freeIterator _iterator[128130])
          }
        }
        { scopeless type
          (128144 'move' _indexOfInterest[128129](128141 call iteratorIndex _iterator[128130]))
        }
        ForLoop[128131]
        {
          unknown i[128123] "index var" "insert auto destroy"
          (553407 'end of statement')
          (128149 'move' i[128123] _indexOfInterest[128129])
          (553408 'end of statement' i[128123])
          unknown yret[606589] "YVV" "temp"
          (606592 'move' yret[606589](606591 'deref' i[128123]))
          (128126 yield yret[606589])
          (553410 'end of statement' i[128123])
          label _continueLabel[128134]
          _indexOfInterest[128129]
          _iterator[128130]
        }
        label _breakLabel[128135]
      }
    }
    {
      unknown tmp[486405] "maybe param" "temp"
      (486416 'move' tmp[486405] 1)
      unknown call_tmp[803185] "expr temp" "maybe param" "maybe type" "temp"
      (803188 'move' call_tmp[803185](486418 call _cond_invalid tmp[486405]))
      if call_tmp[803185]
      {
        (486421 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[677899] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[677900] "maybe param" "temp"
      unknown call_tmp[803190] "expr temp" "maybe param" "maybe type" "temp"
      (803193 'move' call_tmp[803190](486406 call isTrue tmp[486405]))
      (677905 'move' tmp[677900](677903 call _cond_test call_tmp[803190]))
      if tmp[677900]
      {
        unknown tmp[677907] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[803197] "expr temp" "maybe param" "maybe type" "temp"
        (803200 'move' call_tmp[803197](128180 call(128177 call (partial) hasLastForIter _mt[203] this[127652])))
        (677909 'move' tmp[677907](486409 call isTrue call_tmp[803197]))
        (677914 'move' tmp[677899](677911 '_paramFoldLogical' tmp[677900] tmp[677907]))
      }
      {
        (677919 'move' tmp[677899](677916 '_paramFoldLogical' tmp[677900] 0))
      }
      unknown call_tmp[803202] "expr temp" "maybe param" "maybe type" "temp"
      (803205 'move' call_tmp[803202](128181 call _cond_test tmp[677899]))
      if call_tmp[803202]
      {
        (128168 call zipLengthHalt module=[222] HaltWrappers[518] "zippered iteration where a bounded range follows an unbounded iterator")
        (402232 'referenced modules list' HaltWrappers[518])
      }
      unknown call_tmp[803211] "expr temp" "maybe param" "maybe type" "temp"
      (803214 'move' call_tmp[803211](128194 call first _mt[203] myFollowThis[127797]))
      unknown call_tmp[803216] "maybe param" "maybe type" "temp"
      (803219 'move' call_tmp[803216](128192 call(128189 call (partial) orderToIndex _mt[203] this[127652]) call_tmp[803211]))
      const first[128187] "dead at end of block" "const" "insert auto destroy"
      (645739 'init var' first[128187] call_tmp[803216])
      (128198 'end of statement')
      unknown call_tmp[803223] "expr temp" "maybe param" "maybe type" "temp"
      (803226 'move' call_tmp[803223](128204 call stride _mt[203] this[127652]))
      unknown call_tmp[803230] "expr temp" "maybe param" "maybe type" "temp"
      (803233 'move' call_tmp[803230](128208 call stride _mt[203] myFollowThis[127797]))
      unknown call_tmp[803235] "maybe param" "maybe type" "temp"
      (803238 'move' call_tmp[803235](128201 call * call_tmp[803223] call_tmp[803230]))
      const stride[128200] "dead at end of block" "const" "insert auto destroy"
      (645741 'init var' stride[128200] call_tmp[803235])
      (128212 'end of statement' myFollowThis[127797])
      unknown call_tmp[803240] "expr temp" "maybe param" "maybe type" "temp"
      (803243 'move' call_tmp[803240](128374 call isPositiveStride newStrides[127913] stride[128200]))
      unknown call_tmp[803245] "expr temp" "maybe param" "maybe type" "temp"
      (803248 'move' call_tmp[803245](128377 call _cond_test call_tmp[803240]))
      if call_tmp[803245]
      {
        const r[128215] "dead at end of block" "const" "insert auto destroy"
        unknown tmp[677926] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[677927] "maybe param" "temp"
        unknown call_tmp[803252] "expr temp" "maybe param" "maybe type" "temp"
        (803255 'move' call_tmp[803252](128225 call(128222 call (partial) isOne _mt[203] newStrides[127913])))
        (677932 'move' tmp[677927](677930 call _cond_test call_tmp[803252]))
        if tmp[677927]
        {
          (677937 'move' tmp[677926](677934 '_paramFoldLogical' tmp[677927] 1))
        }
        {
          unknown tmp[677939] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (677941 'move' tmp[677939](128227 call : stride[128200] uint(64)[86]))
          (677946 'move' tmp[677926](677943 '_paramFoldLogical' tmp[677927] tmp[677939]))
        }
        unknown call_tmp[803257] "expr temp" "maybe param" "maybe type" "temp"
        (803260 'move' call_tmp[803257](128219 call chpl_build_low_bounded_range first[128187]))
        unknown call_tmp[803262] "maybe param" "maybe type" "temp"
        (803265 'move' call_tmp[803262](128216 call chpl_by call_tmp[803257] tmp[677926]))
        (645743 'init var' r[128215] call_tmp[803262])
        (128235 'end of statement' first[128187] stride[128200])
        unknown call_tmp[803267] "expr temp" "maybe param" "maybe type" "temp"
        (803270 'move' call_tmp[803267](128242 call _cond_test debugChapelRange[107087]))
        if call_tmp[803267]
        {
          (128237 call chpl_debug_writeln "Expanded range = " r[128215])
          (553417 'end of statement' r[128215])
        }
        {
          unknown _indexOfInterest[128253] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[128254] "expr temp" "temp"
          (128263 'move' _iterator[128254](128261 call _getIterator r[128215]))
          Defer
          {
            {
              (128278 call _freeIterator _iterator[128254])
            }
          }
          { scopeless type
            (128268 'move' _indexOfInterest[128253](128265 call iteratorIndex _iterator[128254]))
          }
          ForLoop[128255]
          {
            unknown i[128247] "index var" "insert auto destroy"
            (553420 'end of statement')
            (128273 'move' i[128247] _indexOfInterest[128253])
            (553421 'end of statement' i[128247])
            unknown yret[606595] "YVV" "temp"
            (606598 'move' yret[606595](606597 'deref' i[128247]))
            (128250 yield yret[606595])
            (553423 'end of statement' i[128247])
            label _continueLabel[128258]
            _indexOfInterest[128253]
            _iterator[128254]
          }
          label _breakLabel[128259]
        }
      }
      {
        unknown r[128287] "dead at end of block" "insert auto destroy"
        unknown tmp[677953] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[677954] "maybe param" "temp"
        unknown call_tmp[803274] "expr temp" "maybe param" "maybe type" "temp"
        (803277 'move' call_tmp[803274](128299 call(128296 call (partial) isNegOne _mt[203] newStrides[127913])))
        (677959 'move' tmp[677954](677957 call _cond_test call_tmp[803274]))
        if tmp[677954]
        {
          (677964 'move' tmp[677953](677961 '_paramFoldLogical' tmp[677954] negOne[107129]))
        }
        {
          (677969 'move' tmp[677953](677966 '_paramFoldLogical' tmp[677954] negative[107133]))
        }
        unknown call_tmp[803281] "expr temp" "maybe param" "maybe type" "temp"
        (803284 'move' call_tmp[803281](429211 call idxType _mt[203] this[127652]))
        unknown call_tmp[803286] "expr temp" "maybe param" "maybe type" "temp"
        (803289 'move' call_tmp[803286](128289 call range[240](?) call_tmp[803281] high[107118] tmp[677953]))
        (645745 'default init var' r[128287] call_tmp[803286])
        (128312 'end of statement')
        unknown call_tmp[803295] "expr temp" "maybe param" "maybe type" "temp"
        (803298 'move' call_tmp[803295](429216 call idxType _mt[203] this[127652]))
        unknown call_tmp[803300] "expr temp" "maybe param" "maybe type" "temp"
        (803303 'move' call_tmp[803300](128318 call : 0 call_tmp[803295]))
        (128317 call(128314 call (partial) chpl_setFields _mt[203] r[128287]) call_tmp[803300] first[128187] stride[128200])
        (553425 'end of statement' r[128287] first[128187] stride[128200])
        unknown call_tmp[803305] "expr temp" "maybe param" "maybe type" "temp"
        (803308 'move' call_tmp[803305](128330 call _cond_test debugChapelRange[107087]))
        if call_tmp[803305]
        {
          (128325 call chpl_debug_writeln "Expanded range = " r[128287])
          (553429 'end of statement' r[128287])
        }
        {
          unknown _indexOfInterest[128341] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[128342] "expr temp" "temp"
          (128351 'move' _iterator[128342](128349 call _getIterator r[128287]))
          Defer
          {
            {
              (128366 call _freeIterator _iterator[128342])
            }
          }
          { scopeless type
            (128356 'move' _indexOfInterest[128341](128353 call iteratorIndex _iterator[128342]))
          }
          ForLoop[128343]
          {
            unknown i[128335] "index var" "insert auto destroy"
            (553432 'end of statement')
            (128361 'move' i[128335] _indexOfInterest[128341])
            (553433 'end of statement' i[128335])
            unknown yret[606601] "YVV" "temp"
            (606604 'move' yret[606601](606603 'deref' i[128335]))
            (128338 yield yret[606601])
            (553435 'end of statement' i[128335])
            label _continueLabel[128346]
            _indexOfInterest[128341]
            _iterator[128342]
          }
          label _breakLabel[128347]
        }
      }
    }
    (606587 return ret[606585])
  }
  where {
    (127663 call == tag[127656] follower[52140])
  }
  function :[128412](arg x[128417]:range[240](?), arg t[128421]:string[244]) : _unknown[42] "operator"
  {
    unknown ret[606609] "RVV" "temp"
    unknown ret[128426] "dead at end of block" "insert auto destroy"
    (645747 'default init var' ret[128426] string[244])
    (128429 'end of statement')
    unknown call_tmp[803312] "expr temp" "maybe param" "maybe type" "temp"
    (803315 'move' call_tmp[803312](128445 call(128442 call (partial) hasLowBound _mt[203] x[128417])))
    unknown call_tmp[803317] "expr temp" "maybe param" "maybe type" "temp"
    (803320 'move' call_tmp[803317](128446 call _cond_test call_tmp[803312]))
    if call_tmp[803317]
    {
      unknown call_tmp[803324] "expr temp" "maybe param" "maybe type" "temp"
      (803327 'move' call_tmp[803324](128436 call lowBound _mt[203] x[128417]))
      unknown call_tmp[803329] "expr temp" "maybe param" "maybe type" "temp"
      (803332 'move' call_tmp[803329](128433 call : call_tmp[803324] string[244]))
      (128430 call += ret[128426] call_tmp[803329])
      (553437 'end of statement' ret[128426])
    }
    (128451 call += ret[128426] "..")
    (553439 'end of statement' ret[128426])
    unknown call_tmp[803336] "expr temp" "maybe param" "maybe type" "temp"
    (803339 'move' call_tmp[803336](128509 call(128506 call (partial) hasHighBound _mt[203] x[128417])))
    unknown call_tmp[803341] "expr temp" "maybe param" "maybe type" "temp"
    (803344 'move' call_tmp[803341](128510 call _cond_test call_tmp[803336]))
    if call_tmp[803341]
    {
      unknown tmp[486468] "maybe param" "temp"
      unknown call_tmp[803348] "expr temp" "maybe param" "maybe type" "temp"
      (803351 'move' call_tmp[803348](128488 call idxType _mt[203] x[128417]))
      (486479 'move' tmp[486468](128486 call chpl__singleValIdxType call_tmp[803348]))
      unknown call_tmp[803353] "expr temp" "maybe param" "maybe type" "temp"
      (803356 'move' call_tmp[803353](486481 call _cond_invalid tmp[486468]))
      if call_tmp[803353]
      {
        (486484 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[677976] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[677977] "maybe param" "temp"
      unknown call_tmp[803358] "expr temp" "maybe param" "maybe type" "temp"
      (803361 'move' call_tmp[803358](486469 call isTrue tmp[486468]))
      (677982 'move' tmp[677977](677980 call _cond_test call_tmp[803358]))
      if tmp[677977]
      {
        unknown tmp[677984] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[803365] "expr temp" "maybe param" "maybe type" "temp"
        (803368 'move' call_tmp[803365](128494 call _high _mt[203] x[128417]))
        unknown call_tmp[803372] "expr temp" "maybe param" "maybe type" "temp"
        (803375 'move' call_tmp[803372](128498 call _low _mt[203] x[128417]))
        unknown call_tmp[803377] "expr temp" "maybe param" "maybe type" "temp"
        (803380 'move' call_tmp[803377](128491 call != call_tmp[803365] call_tmp[803372]))
        (677986 'move' tmp[677984](486472 call isTrue call_tmp[803377]))
        (677991 'move' tmp[677976](677988 '_paramFoldLogical' tmp[677977] tmp[677984]))
      }
      {
        (677996 'move' tmp[677976](677993 '_paramFoldLogical' tmp[677977] 0))
      }
      unknown call_tmp[803382] "expr temp" "maybe param" "maybe type" "temp"
      (803385 'move' call_tmp[803382](128501 call _cond_test tmp[677976]))
      if call_tmp[803382]
      {
        unknown call_tmp[803389] "expr temp" "maybe param" "maybe type" "temp"
        (803392 'move' call_tmp[803389](128468 call lowBound _mt[203] x[128417]))
        unknown call_tmp[803394] "expr temp" "maybe param" "maybe type" "temp"
        (803397 'move' call_tmp[803394](128465 call : call_tmp[803389] string[244]))
        unknown call_tmp[803399] "expr temp" "maybe param" "maybe type" "temp"
        (803402 'move' call_tmp[803399](128460 call + "<" call_tmp[803394]))
        (128457 call += ret[128426] call_tmp[803399])
        (553442 'end of statement' ret[128426])
      }
      {
        unknown call_tmp[803406] "expr temp" "maybe param" "maybe type" "temp"
        (803409 'move' call_tmp[803406](128479 call highBound _mt[203] x[128417]))
        unknown call_tmp[803411] "expr temp" "maybe param" "maybe type" "temp"
        (803414 'move' call_tmp[803411](128476 call : call_tmp[803406] string[244]))
        (128473 call += ret[128426] call_tmp[803411])
        (553444 'end of statement' ret[128426])
      }
    }
    unknown call_tmp[803418] "expr temp" "maybe param" "maybe type" "temp"
    (803421 'move' call_tmp[803418](128577 call stride _mt[203] x[128417]))
    unknown call_tmp[803423] "expr temp" "maybe param" "maybe type" "temp"
    (803426 'move' call_tmp[803423](128574 call != call_tmp[803418] 1))
    unknown call_tmp[803428] "expr temp" "maybe param" "maybe type" "temp"
    (803431 'move' call_tmp[803428](128581 call _cond_test call_tmp[803423]))
    if call_tmp[803428]
    {
      unknown call_tmp[803435] "expr temp" "maybe param" "maybe type" "temp"
      (803438 'move' call_tmp[803435](128524 call stride _mt[203] x[128417]))
      unknown call_tmp[803440] "expr temp" "maybe param" "maybe type" "temp"
      (803443 'move' call_tmp[803440](128521 call : call_tmp[803435] string[244]))
      unknown call_tmp[803445] "expr temp" "maybe param" "maybe type" "temp"
      (803448 'move' call_tmp[803445](128518 call + " by " call_tmp[803440]))
      (128515 call += ret[128426] call_tmp[803445])
      (553446 'end of statement' ret[128426])
      unknown tmp[486489] "maybe param" "temp"
      unknown tmp[486510] "maybe param" "temp"
      unknown call_tmp[803452] "expr temp" "maybe param" "maybe type" "temp"
      (803455 'move' call_tmp[803452](128549 call stride _mt[203] x[128417]))
      unknown call_tmp[803457] "expr temp" "maybe param" "maybe type" "temp"
      (803460 'move' call_tmp[803457](128552 call - 1))
      (486521 'move' tmp[486510](128546 call != call_tmp[803452] call_tmp[803457]))
      unknown call_tmp[803462] "expr temp" "maybe param" "maybe type" "temp"
      (803465 'move' call_tmp[803462](486523 call _cond_invalid tmp[486510]))
      if call_tmp[803462]
      {
        (486526 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[678003] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[678004] "maybe param" "temp"
      unknown call_tmp[803467] "expr temp" "maybe param" "maybe type" "temp"
      (803470 'move' call_tmp[803467](486511 call isTrue tmp[486510]))
      (678009 'move' tmp[678004](678007 call _cond_test call_tmp[803467]))
      if tmp[678004]
      {
        unknown tmp[678011] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[803474] "expr temp" "maybe param" "maybe type" "temp"
        (803477 'move' call_tmp[803474](128559 call(128556 call (partial) isAligned _mt[203] x[128417])))
        (678013 'move' tmp[678011](486514 call isTrue call_tmp[803474]))
        (678018 'move' tmp[678003](678015 '_paramFoldLogical' tmp[678004] tmp[678011]))
      }
      {
        (678023 'move' tmp[678003](678020 '_paramFoldLogical' tmp[678004] 0))
      }
      (486500 'move' tmp[486489] tmp[678003])
      unknown call_tmp[803479] "expr temp" "maybe param" "maybe type" "temp"
      (803482 'move' call_tmp[803479](486502 call _cond_invalid tmp[486489]))
      if call_tmp[803479]
      {
        (486505 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[678030] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[678031] "maybe param" "temp"
      unknown call_tmp[803484] "expr temp" "maybe param" "maybe type" "temp"
      (803487 'move' call_tmp[803484](486490 call isTrue tmp[486489]))
      (678036 'move' tmp[678031](678034 call _cond_test call_tmp[803484]))
      if tmp[678031]
      {
        unknown tmp[678038] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[803491] "expr temp" "maybe param" "maybe type" "temp"
        (803494 'move' call_tmp[803491](128568 call(128565 call (partial) chpl_isNaturallyAligned _mt[203] x[128417])))
        unknown call_tmp[803496] "expr temp" "maybe param" "maybe type" "temp"
        (803499 'move' call_tmp[803496](128560 call ! call_tmp[803491]))
        (678040 'move' tmp[678038](486493 call isTrue call_tmp[803496]))
        (678045 'move' tmp[678030](678042 '_paramFoldLogical' tmp[678031] tmp[678038]))
      }
      {
        (678050 'move' tmp[678030](678047 '_paramFoldLogical' tmp[678031] 0))
      }
      unknown call_tmp[803501] "expr temp" "maybe param" "maybe type" "temp"
      (803504 'move' call_tmp[803501](128569 call _cond_test tmp[678030]))
      if call_tmp[803501]
      {
        unknown call_tmp[803508] "expr temp" "maybe param" "maybe type" "temp"
        (803511 'move' call_tmp[803508](128537 call alignment _mt[203] x[128417]))
        unknown call_tmp[803513] "expr temp" "maybe param" "maybe type" "temp"
        (803516 'move' call_tmp[803513](128534 call : call_tmp[803508] string[244]))
        unknown call_tmp[803518] "expr temp" "maybe param" "maybe type" "temp"
        (803521 'move' call_tmp[803518](128531 call + " align " call_tmp[803513]))
        (128528 call += ret[128426] call_tmp[803518])
        (553450 'end of statement' ret[128426])
      }
    }
    (606614 'move' ret[606609](606613 'deref' ret[128426]))
    gotoReturn _end_:[606607] _end_:[606607]
    (553452 'end of statement' ret[128426])
    label _end_:[606607]
    (606611 return ret[606609])
  }
  function range[240](?).chpl__unTranslate[128589](arg _mt[128597]:_MT[201], arg this[128592]:range[240](?) :
  range[240](?), arg i[128595]:_any[141](?)) : _unknown[42] "inline" "method"
  {
    unknown ret[606620] "RVV" "temp"
    unknown call_tmp[803523] "expr temp" "maybe param" "maybe type" "temp"
    (803526 'move' call_tmp[803523](128601 call - this[128592] i[128595]))
    (606625 'move' ret[606620](606624 'deref' call_tmp[803523]))
    (606622 return ret[606620])
  }
  function chpl__mod[128607](arg dividend[128610]:integral[159](?), arg modulus[128614]:integral[159](?)) : _unknown[42]
  {
    unknown ret[606629] "RVV" "temp"
    unknown t[128629] "dead at end of block" "insert auto destroy" "type variable"
    (645751 'move' t[128629](645749 'typeof' modulus[128614]))
    unknown m[128634] "dead at end of block" "insert auto destroy"
    (645753 'init var' m[128634] modulus[128614])
    (128637 'end of statement')
    unknown tmp[486531] "maybe param" "temp"
    unknown tmp[486552] "maybe param" "temp"
    (486563 'move' tmp[486552](128650 call isIntType t[128629]))
    unknown call_tmp[803528] "expr temp" "maybe param" "maybe type" "temp"
    (803531 'move' call_tmp[803528](486565 call _cond_invalid tmp[486552]))
    if call_tmp[803528]
    {
      (486568 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[678057] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[678058] "maybe param" "temp"
    unknown call_tmp[803533] "expr temp" "maybe param" "maybe type" "temp"
    (803536 'move' call_tmp[803533](486553 call isTrue tmp[486552]))
    (678063 'move' tmp[678058](678061 call _cond_test call_tmp[803533]))
    if tmp[678058]
    {
      unknown tmp[678065] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[803538] "expr temp" "maybe param" "maybe type" "temp"
      (803541 'move' call_tmp[803538](128652 call < m[128634] 0))
      (678067 'move' tmp[678065](486556 call isTrue call_tmp[803538]))
      (678072 'move' tmp[678057](678069 '_paramFoldLogical' tmp[678058] tmp[678065]))
    }
    {
      (678077 'move' tmp[678057](678074 '_paramFoldLogical' tmp[678058] 0))
    }
    (486542 'move' tmp[486531] tmp[678057])
    unknown call_tmp[803543] "expr temp" "maybe param" "maybe type" "temp"
    (803546 'move' call_tmp[803543](486544 call _cond_invalid tmp[486531]))
    if call_tmp[803543]
    {
      (486547 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[678084] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[678085] "maybe param" "temp"
    unknown call_tmp[803548] "expr temp" "maybe param" "maybe type" "temp"
    (803551 'move' call_tmp[803548](486532 call isTrue tmp[486531]))
    (678090 'move' tmp[678085](678088 call _cond_test call_tmp[803548]))
    if tmp[678085]
    {
      unknown tmp[678092] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[803553] "expr temp" "maybe param" "maybe type" "temp"
      (803556 'move' call_tmp[803553](128660 call min t[128629]))
      unknown call_tmp[803558] "expr temp" "maybe param" "maybe type" "temp"
      (803561 'move' call_tmp[803558](128656 call != m[128634] call_tmp[803553]))
      (678094 'move' tmp[678092](486535 call isTrue call_tmp[803558]))
      (678099 'move' tmp[678084](678096 '_paramFoldLogical' tmp[678085] tmp[678092]))
    }
    {
      (678104 'move' tmp[678084](678101 '_paramFoldLogical' tmp[678085] 0))
    }
    unknown call_tmp[803563] "expr temp" "maybe param" "maybe type" "temp"
    (803566 'move' call_tmp[803563](128662 call _cond_test tmp[678084]))
    if call_tmp[803563]
    {
      unknown call_tmp[803568] "expr temp" "maybe param" "maybe type" "temp"
      (803571 'move' call_tmp[803568](128641 call - m[128634]))
      (128638 call = m[128634] call_tmp[803568])
      (553457 'end of statement' m[128634])
    }
    unknown call_tmp[803573] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (803576 'move' call_tmp[803573](128676 'typeof' dividend[128610]))
    unknown call_tmp[803578] "expr temp" "maybe param" "maybe type" "temp"
    (803581 'move' call_tmp[803578](128672 call : m[128634] call_tmp[803573]))
    unknown call_tmp[803583] "maybe param" "maybe type" "temp"
    (803586 'move' call_tmp[803583](128669 call % dividend[128610] call_tmp[803578]))
    unknown tmp[128668] "dead at end of block" "insert auto destroy"
    (645755 'init var' tmp[128668] call_tmp[803583])
    (128678 'end of statement' m[128634])
    unknown call_tmp[803588] "expr temp" "maybe param" "maybe type" "temp"
    (803591 'move' call_tmp[803588](128698 call isInt dividend[128610]))
    unknown call_tmp[803593] "expr temp" "maybe param" "maybe type" "temp"
    (803596 'move' call_tmp[803593](128700 call _cond_test call_tmp[803588]))
    if call_tmp[803593]
    {
      unknown call_tmp[803598] "expr temp" "maybe param" "maybe type" "temp"
      (803601 'move' call_tmp[803598](128688 call < tmp[128668] 0))
      unknown call_tmp[803603] "expr temp" "maybe param" "maybe type" "temp"
      (803606 'move' call_tmp[803603](128692 call _cond_test call_tmp[803598]))
      if call_tmp[803603]
      {
        unknown call_tmp[803608] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (803611 'move' call_tmp[803608](128686 'typeof' dividend[128610]))
        unknown call_tmp[803613] "expr temp" "maybe param" "maybe type" "temp"
        (803616 'move' call_tmp[803613](128682 call : m[128634] call_tmp[803608]))
        (128679 call += tmp[128668] call_tmp[803613])
        (553460 'end of statement' tmp[128668] m[128634])
      }
    }
    (606634 'move' ret[606629](606633 'deref' tmp[128668]))
    gotoReturn _end_chpl__mod[606627] _end_chpl__mod[606627]
    (553463 'end of statement' tmp[128668])
    label _end_chpl__mod[606627]
    (606631 return ret[606629])
  }
  where {
    unknown call_tmp[803618] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (803621 'move' call_tmp[803618](128622 'typeof' dividend[128610]))
    unknown call_tmp[803623] "expr temp" "maybe param" "maybe type" "temp"
    (803626 'move' call_tmp[803623](128620 call numBits call_tmp[803618]))
    unknown call_tmp[803628] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (803631 'move' call_tmp[803628](128626 'typeof' modulus[128614]))
    unknown call_tmp[803633] "expr temp" "maybe param" "maybe type" "temp"
    (803636 'move' call_tmp[803633](128624 call numBits call_tmp[803628]))
    (128617 call >= call_tmp[803623] call_tmp[803633])
  }
  function chpl__mod[128710](arg dividend[128713]:integral[159](?), arg modulus[128717]:integral[159](?)) : _unknown[42]
  {
    unknown ret[606640] "RVV" "temp"
    unknown t[128737] "dead at end of block" "insert auto destroy" "type variable"
    (645759 'move' t[128737](645757 'typeof' modulus[128717]))
    unknown m[128742] "dead at end of block" "insert auto destroy"
    (645761 'init var' m[128742] modulus[128717])
    (128745 'end of statement')
    unknown tmp[486594] "maybe param" "temp"
    unknown tmp[486615] "maybe param" "temp"
    (486626 'move' tmp[486615](128758 call isIntType t[128737]))
    unknown call_tmp[803638] "expr temp" "maybe param" "maybe type" "temp"
    (803641 'move' call_tmp[803638](486628 call _cond_invalid tmp[486615]))
    if call_tmp[803638]
    {
      (486631 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[678111] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[678112] "maybe param" "temp"
    unknown call_tmp[803643] "expr temp" "maybe param" "maybe type" "temp"
    (803646 'move' call_tmp[803643](486616 call isTrue tmp[486615]))
    (678117 'move' tmp[678112](678115 call _cond_test call_tmp[803643]))
    if tmp[678112]
    {
      unknown tmp[678119] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[803648] "expr temp" "maybe param" "maybe type" "temp"
      (803651 'move' call_tmp[803648](128760 call < m[128742] 0))
      (678121 'move' tmp[678119](486619 call isTrue call_tmp[803648]))
      (678126 'move' tmp[678111](678123 '_paramFoldLogical' tmp[678112] tmp[678119]))
    }
    {
      (678131 'move' tmp[678111](678128 '_paramFoldLogical' tmp[678112] 0))
    }
    (486605 'move' tmp[486594] tmp[678111])
    unknown call_tmp[803653] "expr temp" "maybe param" "maybe type" "temp"
    (803656 'move' call_tmp[803653](486607 call _cond_invalid tmp[486594]))
    if call_tmp[803653]
    {
      (486610 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[678138] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[678139] "maybe param" "temp"
    unknown call_tmp[803658] "expr temp" "maybe param" "maybe type" "temp"
    (803661 'move' call_tmp[803658](486595 call isTrue tmp[486594]))
    (678144 'move' tmp[678139](678142 call _cond_test call_tmp[803658]))
    if tmp[678139]
    {
      unknown tmp[678146] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[803663] "expr temp" "maybe param" "maybe type" "temp"
      (803666 'move' call_tmp[803663](128768 call min t[128737]))
      unknown call_tmp[803668] "expr temp" "maybe param" "maybe type" "temp"
      (803671 'move' call_tmp[803668](128764 call != m[128742] call_tmp[803663]))
      (678148 'move' tmp[678146](486598 call isTrue call_tmp[803668]))
      (678153 'move' tmp[678138](678150 '_paramFoldLogical' tmp[678139] tmp[678146]))
    }
    {
      (678158 'move' tmp[678138](678155 '_paramFoldLogical' tmp[678139] 0))
    }
    unknown call_tmp[803673] "expr temp" "maybe param" "maybe type" "temp"
    (803676 'move' call_tmp[803673](128770 call _cond_test tmp[678138]))
    if call_tmp[803673]
    {
      unknown call_tmp[803678] "expr temp" "maybe param" "maybe type" "temp"
      (803681 'move' call_tmp[803678](128749 call - m[128742]))
      (128746 call = m[128742] call_tmp[803678])
      (553467 'end of statement' m[128742])
    }
    unknown call_tmp[803683] "expr temp" "maybe param" "maybe type" "temp"
    (803686 'move' call_tmp[803683](128779 call : dividend[128713] t[128737]))
    unknown call_tmp[803688] "maybe param" "maybe type" "temp"
    (803691 'move' call_tmp[803688](128777 call % call_tmp[803683] m[128742]))
    unknown tmp[128776] "dead at end of block" "insert auto destroy"
    (645763 'init var' tmp[128776] call_tmp[803688])
    (128785 'end of statement' t[128737] m[128742])
    unknown call_tmp[803693] "expr temp" "maybe param" "maybe type" "temp"
    (803696 'move' call_tmp[803693](128801 call isInt dividend[128713]))
    unknown call_tmp[803698] "expr temp" "maybe param" "maybe type" "temp"
    (803701 'move' call_tmp[803698](128803 call _cond_test call_tmp[803693]))
    if call_tmp[803698]
    {
      unknown call_tmp[803703] "expr temp" "maybe param" "maybe type" "temp"
      (803706 'move' call_tmp[803703](128791 call < tmp[128776] 0))
      unknown call_tmp[803708] "expr temp" "maybe param" "maybe type" "temp"
      (803711 'move' call_tmp[803708](128795 call _cond_test call_tmp[803703]))
      if call_tmp[803708]
      {
        (128786 call += tmp[128776] m[128742])
        (553471 'end of statement' tmp[128776] m[128742])
      }
    }
    unknown call_tmp[803713] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (803716 'move' call_tmp[803713](128813 'typeof' dividend[128713]))
    unknown call_tmp[803718] "expr temp" "maybe param" "maybe type" "temp"
    (803721 'move' call_tmp[803718](128809 call : tmp[128776] call_tmp[803713]))
    (606645 'move' ret[606640](606644 'deref' call_tmp[803718]))
    gotoReturn _end_chpl__mod[606638] _end_chpl__mod[606638]
    (553474 'end of statement' tmp[128776])
    label _end_chpl__mod[606638]
    (606642 return ret[606640])
  }
  where {
    unknown tmp[486573] "maybe param" "temp"
    unknown call_tmp[803723] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (803726 'move' call_tmp[803723](128727 'typeof' dividend[128713]))
    unknown call_tmp[803728] "expr temp" "maybe param" "maybe type" "temp"
    (803731 'move' call_tmp[803728](128725 call numBits call_tmp[803723]))
    unknown call_tmp[803733] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (803736 'move' call_tmp[803733](128731 'typeof' modulus[128717]))
    unknown call_tmp[803738] "expr temp" "maybe param" "maybe type" "temp"
    (803741 'move' call_tmp[803738](128729 call numBits call_tmp[803733]))
    (486584 'move' tmp[486573](128722 call < call_tmp[803728] call_tmp[803738]))
    unknown call_tmp[803743] "expr temp" "maybe param" "maybe type" "temp"
    (803746 'move' call_tmp[803743](486586 call _cond_invalid tmp[486573]))
    if call_tmp[803743]
    {
      (486589 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[678165] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[678166] "maybe param" "temp"
    unknown call_tmp[803748] "expr temp" "maybe param" "maybe type" "temp"
    (803751 'move' call_tmp[803748](486574 call isTrue tmp[486573]))
    (678171 'move' tmp[678166](678169 call _cond_test call_tmp[803748]))
    if tmp[678166]
    {
      unknown tmp[678173] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[803753] "expr temp" "maybe param" "maybe type" "temp"
      (803756 'move' call_tmp[803753](128733 call isInt modulus[128717]))
      (678175 'move' tmp[678173](486577 call isTrue call_tmp[803753]))
      (678180 'move' tmp[678165](678177 '_paramFoldLogical' tmp[678166] tmp[678173]))
    }
    {
      (678185 'move' tmp[678165](678182 '_paramFoldLogical' tmp[678166] 0))
    }
    (1001428 call chpl_statementLevelSymbol tmp[678165])
  }
  function chpl__diffMod[128817](arg minuend[128820]:integral[159](?), arg subtrahend[128824]:integral[159](?), arg modulus[128828]:integral[159](?)) : _unknown[42]
  {
    unknown ret[606651] "RVV" "temp"
    unknown call_tmp[803758] "maybe param" "maybe type" "temp"
    (803761 'move' call_tmp[803758](128843 call abs modulus[128828]))
    const m[128841] "dead at end of block" "const" "insert auto destroy"
    (645765 'init var' m[128841] call_tmp[803758])
    (128846 'end of statement')
    unknown call_tmp[803763] "maybe param" "maybe type" "temp"
    (803766 'move' call_tmp[803763](128850 call chpl__mod minuend[128820] m[128841]))
    unknown minMod[128848] "dead at end of block" "insert auto destroy"
    (645767 'init var' minMod[128848] call_tmp[803763])
    (128854 'end of statement')
    unknown call_tmp[803768] "maybe param" "maybe type" "temp"
    (803771 'move' call_tmp[803768](128858 call chpl__mod subtrahend[128824] m[128841]))
    unknown subMod[128856] "dead at end of block" "insert auto destroy"
    (645769 'init var' subMod[128856] call_tmp[803768])
    (128862 'end of statement' m[128841])
    unknown tmp[678192] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[678193] "maybe param" "temp"
    unknown call_tmp[803773] "expr temp" "maybe param" "maybe type" "temp"
    (803776 'move' call_tmp[803773](128864 call < minMod[128848] subMod[128856]))
    (678198 'move' tmp[678193](678196 call _cond_test call_tmp[803773]))
    if tmp[678193]
    {
      unknown tmp[678200] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[803778] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (803781 'move' call_tmp[803778](128874 'typeof' minuend[128820]))
      unknown call_tmp[803783] "expr temp" "maybe param" "maybe type" "temp"
      (803786 'move' call_tmp[803783](128870 call : m[128841] call_tmp[803778]))
      unknown call_tmp[803788] "expr temp" "maybe param" "maybe type" "temp"
      (803791 'move' call_tmp[803788](128875 call - subMod[128856] minMod[128848]))
      (678202 'move' tmp[678200](128868 call - call_tmp[803783] call_tmp[803788]))
      (678207 'move' tmp[678192](678204 '_paramFoldLogical' tmp[678193] tmp[678200]))
    }
    {
      unknown tmp[678209] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (678211 'move' tmp[678209](128879 call - minMod[128848] subMod[128856]))
      (678216 'move' tmp[678192](678213 '_paramFoldLogical' tmp[678193] tmp[678209]))
    }
    unknown call_tmp[803793] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (803796 'move' call_tmp[803793](606655 'typeof' minuend[128820]))
    (606658 'move' ret[606651](606657 'coerce' tmp[678192] call_tmp[803793]))
    gotoReturn _end_chpl__diffMod[606649] _end_chpl__diffMod[606649]
    (553477 'end of statement' minMod[128848] subMod[128856] m[128841] subMod[128856])
    label _end_chpl__diffMod[606649]
    (606653 return ret[606651])
  }
  where {
    unknown call_tmp[803798] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (803801 'move' call_tmp[803798](128836 'typeof' minuend[128820]))
    unknown call_tmp[803803] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (803806 'move' call_tmp[803803](128838 'typeof' subtrahend[128824]))
    (128833 call == call_tmp[803798] call_tmp[803803])
  }
  { scopeless type
    (128832 'typeof' minuend[128820])
  }
  function chpl__diffMod[128890](arg minuend[128893]:integral[159](?), arg subtrahend[128897]:integral[159](?), arg modulus[128901]:integral[159](?)) : _unknown[42] "no return value for void"
  {
    (128906 call compilerError "chpl__diffMod -- Operand types must match.")
    (606662 return _void[46])
  }
  function chpl__add[128912](arg a[128916]:_any[141](?), arg b[128920] :
  (524792 'typeof' a[128916]), arg resultType[128923]:_any[141](?)) : _unknown[42]
  {
    unknown ret[606666] "RVV" "temp"
    unknown call_tmp[803808] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (803811 'move' call_tmp[803808](524794 'typeof' a[128916]))
    unknown call_tmp[803813] "expr temp" "maybe param" "maybe type" "temp"
    (803816 'move' call_tmp[803813](128935 call isIntegralType call_tmp[803808]))
    unknown call_tmp[803818] "expr temp" "maybe param" "maybe type" "temp"
    (803821 'move' call_tmp[803818](128932 call ! call_tmp[803813]))
    unknown call_tmp[803823] "expr temp" "maybe param" "maybe type" "temp"
    (803826 'move' call_tmp[803823](128937 call _cond_test call_tmp[803818]))
    if call_tmp[803823]
    {
      (128927 call compilerError "Values must be of integral type.")
    }
    unknown tmp[486636] "maybe param" "temp"
    unknown tmp[486657] "maybe param" "temp"
    (486668 'move' tmp[486657](128951 call > a[128916] 0))
    unknown call_tmp[803828] "expr temp" "maybe param" "maybe type" "temp"
    (803831 'move' call_tmp[803828](486670 call _cond_invalid tmp[486657]))
    if call_tmp[803828]
    {
      (486673 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[678223] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[678224] "maybe param" "temp"
    unknown call_tmp[803833] "expr temp" "maybe param" "maybe type" "temp"
    (803836 'move' call_tmp[803833](486658 call isTrue tmp[486657]))
    (678229 'move' tmp[678224](678227 call _cond_test call_tmp[803833]))
    if tmp[678224]
    {
      unknown tmp[678231] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[803838] "expr temp" "maybe param" "maybe type" "temp"
      (803841 'move' call_tmp[803838](128955 call > b[128920] 0))
      (678233 'move' tmp[678231](486661 call isTrue call_tmp[803838]))
      (678238 'move' tmp[678223](678235 '_paramFoldLogical' tmp[678224] tmp[678231]))
    }
    {
      (678243 'move' tmp[678223](678240 '_paramFoldLogical' tmp[678224] 0))
    }
    (486647 'move' tmp[486636] tmp[678223])
    unknown call_tmp[803843] "expr temp" "maybe param" "maybe type" "temp"
    (803846 'move' call_tmp[803843](486649 call _cond_invalid tmp[486636]))
    if call_tmp[803843]
    {
      (486652 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[678250] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[678251] "maybe param" "temp"
    unknown call_tmp[803848] "expr temp" "maybe param" "maybe type" "temp"
    (803851 'move' call_tmp[803848](486637 call isTrue tmp[486636]))
    (678256 'move' tmp[678251](678254 call _cond_test call_tmp[803848]))
    if tmp[678251]
    {
      unknown tmp[678258] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[803853] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (803856 'move' call_tmp[803853](524796 'typeof' a[128916]))
      unknown call_tmp[803858] "expr temp" "maybe param" "maybe type" "temp"
      (803861 'move' call_tmp[803858](128965 call max call_tmp[803853]))
      unknown call_tmp[803863] "expr temp" "maybe param" "maybe type" "temp"
      (803866 'move' call_tmp[803863](128962 call - call_tmp[803858] a[128916]))
      unknown call_tmp[803868] "expr temp" "maybe param" "maybe type" "temp"
      (803871 'move' call_tmp[803868](128959 call > b[128920] call_tmp[803863]))
      (678260 'move' tmp[678258](486640 call isTrue call_tmp[803868]))
      (678265 'move' tmp[678250](678262 '_paramFoldLogical' tmp[678251] tmp[678258]))
    }
    {
      (678270 'move' tmp[678250](678267 '_paramFoldLogical' tmp[678251] 0))
    }
    unknown call_tmp[803873] "expr temp" "maybe param" "maybe type" "temp"
    (803876 'move' call_tmp[803873](128968 call _cond_test tmp[678250]))
    if call_tmp[803873]
    {
      unknown call_tmp[803878] "expr temp" "maybe param" "maybe type" "temp"
      (803881 'move' call_tmp[803878](128944 call max resultType[128923]))
      (606671 'move' ret[606666](606670 'deref' call_tmp[803878]))
      gotoReturn _end_chpl__add[606664] _end_chpl__add[606664]
    }
    unknown tmp[486678] "maybe param" "temp"
    unknown tmp[486699] "maybe param" "temp"
    (486710 'move' tmp[486699](128982 call < a[128916] 0))
    unknown call_tmp[803883] "expr temp" "maybe param" "maybe type" "temp"
    (803886 'move' call_tmp[803883](486712 call _cond_invalid tmp[486699]))
    if call_tmp[803883]
    {
      (486715 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[678277] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[678278] "maybe param" "temp"
    unknown call_tmp[803888] "expr temp" "maybe param" "maybe type" "temp"
    (803891 'move' call_tmp[803888](486700 call isTrue tmp[486699]))
    (678283 'move' tmp[678278](678281 call _cond_test call_tmp[803888]))
    if tmp[678278]
    {
      unknown tmp[678285] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[803893] "expr temp" "maybe param" "maybe type" "temp"
      (803896 'move' call_tmp[803893](128986 call < b[128920] 0))
      (678287 'move' tmp[678285](486703 call isTrue call_tmp[803893]))
      (678292 'move' tmp[678277](678289 '_paramFoldLogical' tmp[678278] tmp[678285]))
    }
    {
      (678297 'move' tmp[678277](678294 '_paramFoldLogical' tmp[678278] 0))
    }
    (486689 'move' tmp[486678] tmp[678277])
    unknown call_tmp[803898] "expr temp" "maybe param" "maybe type" "temp"
    (803901 'move' call_tmp[803898](486691 call _cond_invalid tmp[486678]))
    if call_tmp[803898]
    {
      (486694 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[678304] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[678305] "maybe param" "temp"
    unknown call_tmp[803903] "expr temp" "maybe param" "maybe type" "temp"
    (803906 'move' call_tmp[803903](486679 call isTrue tmp[486678]))
    (678310 'move' tmp[678305](678308 call _cond_test call_tmp[803903]))
    if tmp[678305]
    {
      unknown tmp[678312] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[803908] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (803911 'move' call_tmp[803908](524798 'typeof' a[128916]))
      unknown call_tmp[803913] "expr temp" "maybe param" "maybe type" "temp"
      (803916 'move' call_tmp[803913](128996 call min call_tmp[803908]))
      unknown call_tmp[803918] "expr temp" "maybe param" "maybe type" "temp"
      (803921 'move' call_tmp[803918](128993 call - call_tmp[803913] a[128916]))
      unknown call_tmp[803923] "expr temp" "maybe param" "maybe type" "temp"
      (803926 'move' call_tmp[803923](128990 call < b[128920] call_tmp[803918]))
      (678314 'move' tmp[678312](486682 call isTrue call_tmp[803923]))
      (678319 'move' tmp[678304](678316 '_paramFoldLogical' tmp[678305] tmp[678312]))
    }
    {
      (678324 'move' tmp[678304](678321 '_paramFoldLogical' tmp[678305] 0))
    }
    unknown call_tmp[803928] "expr temp" "maybe param" "maybe type" "temp"
    (803931 'move' call_tmp[803928](128999 call _cond_test tmp[678304]))
    if call_tmp[803928]
    {
      unknown call_tmp[803933] "expr temp" "maybe param" "maybe type" "temp"
      (803936 'move' call_tmp[803933](128975 call min resultType[128923]))
      (606676 'move' ret[606666](606675 'deref' call_tmp[803933]))
      gotoReturn _end_chpl__add[606664] _end_chpl__add[606664]
    }
    unknown call_tmp[803938] "expr temp" "maybe param" "maybe type" "temp"
    (803941 'move' call_tmp[803938](129075 call isUintType resultType[128923]))
    unknown call_tmp[803943] "expr temp" "maybe param" "maybe type" "temp"
    (803946 'move' call_tmp[803943](129077 call _cond_test call_tmp[803938]))
    if call_tmp[803943]
    {
      unknown tmp[486720] "maybe param" "temp"
      unknown tmp[486741] "maybe param" "temp"
      unknown tmp[486762] "maybe param" "temp"
      (486773 'move' tmp[486762](129017 call < a[128916] 0))
      unknown call_tmp[803948] "expr temp" "maybe param" "maybe type" "temp"
      (803951 'move' call_tmp[803948](486775 call _cond_invalid tmp[486762]))
      if call_tmp[803948]
      {
        (486778 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[678331] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[678332] "maybe param" "temp"
      unknown call_tmp[803953] "expr temp" "maybe param" "maybe type" "temp"
      (803956 'move' call_tmp[803953](486763 call isTrue tmp[486762]))
      (678337 'move' tmp[678332](678335 call _cond_test call_tmp[803953]))
      if tmp[678332]
      {
        unknown tmp[678339] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[803958] "expr temp" "maybe param" "maybe type" "temp"
        (803961 'move' call_tmp[803958](129021 call > b[128920] 0))
        (678341 'move' tmp[678339](486766 call isTrue call_tmp[803958]))
        (678346 'move' tmp[678331](678343 '_paramFoldLogical' tmp[678332] tmp[678339]))
      }
      {
        (678351 'move' tmp[678331](678348 '_paramFoldLogical' tmp[678332] 0))
      }
      (486752 'move' tmp[486741] tmp[678331])
      unknown call_tmp[803963] "expr temp" "maybe param" "maybe type" "temp"
      (803966 'move' call_tmp[803963](486754 call _cond_invalid tmp[486741]))
      if call_tmp[803963]
      {
        (486757 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[678385] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[678386] "maybe param" "temp"
      unknown call_tmp[803968] "expr temp" "maybe param" "maybe type" "temp"
      (803971 'move' call_tmp[803968](486742 call isTrue tmp[486741]))
      (678391 'move' tmp[678386](678389 call _cond_test call_tmp[803968]))
      if tmp[678386]
      {
        unknown tmp[486783] "maybe param" "temp"
        unknown call_tmp[803973] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (803976 'move' call_tmp[803973](524800 'typeof' a[128916]))
        unknown call_tmp[803978] "expr temp" "maybe param" "maybe type" "temp"
        (803981 'move' call_tmp[803978](129031 call min call_tmp[803973]))
        (486794 'move' tmp[486783](129027 call == a[128916] call_tmp[803978]))
        unknown call_tmp[803983] "expr temp" "maybe param" "maybe type" "temp"
        (803986 'move' call_tmp[803983](486796 call _cond_invalid tmp[486783]))
        if call_tmp[803983]
        {
          (486799 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[678358] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[678359] "maybe param" "temp"
        unknown call_tmp[803988] "expr temp" "maybe param" "maybe type" "temp"
        (803991 'move' call_tmp[803988](486784 call isTrue tmp[486783]))
        (678364 'move' tmp[678359](678362 call _cond_test call_tmp[803988]))
        if tmp[678359]
        {
          (678369 'move' tmp[678358](678366 '_paramFoldLogical' tmp[678359] 1))
        }
        {
          unknown tmp[678371] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[803993] "expr temp" "maybe param" "maybe type" "temp"
          (803996 'move' call_tmp[803993](129036 call abs a[128916]))
          unknown call_tmp[803998] "expr temp" "maybe param" "maybe type" "temp"
          (804001 'move' call_tmp[803998](129039 call abs b[128920]))
          unknown call_tmp[804003] "expr temp" "maybe param" "maybe type" "temp"
          (804006 'move' call_tmp[804003](129033 call > call_tmp[803993] call_tmp[803998]))
          (678373 'move' tmp[678371](486788 call isTrue call_tmp[804003]))
          (678378 'move' tmp[678358](678375 '_paramFoldLogical' tmp[678359] tmp[678371]))
        }
        unknown tmp[678393] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (678395 'move' tmp[678393](486745 call isTrue tmp[678358]))
        (678400 'move' tmp[678385](678397 '_paramFoldLogical' tmp[678386] tmp[678393]))
      }
      {
        (678405 'move' tmp[678385](678402 '_paramFoldLogical' tmp[678386] 0))
      }
      (486731 'move' tmp[486720] tmp[678385])
      unknown call_tmp[804008] "expr temp" "maybe param" "maybe type" "temp"
      (804011 'move' call_tmp[804008](486733 call _cond_invalid tmp[486720]))
      if call_tmp[804008]
      {
        (486736 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[678493] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[678494] "maybe param" "temp"
      unknown call_tmp[804013] "expr temp" "maybe param" "maybe type" "temp"
      (804016 'move' call_tmp[804013](486721 call isTrue tmp[486720]))
      (678499 'move' tmp[678494](678497 call _cond_test call_tmp[804013]))
      if tmp[678494]
      {
        (678504 'move' tmp[678493](678501 '_paramFoldLogical' tmp[678494] 1))
      }
      {
        unknown tmp[486804] "maybe param" "temp"
        unknown tmp[486825] "maybe param" "temp"
        (486836 'move' tmp[486825](129045 call > a[128916] 0))
        unknown call_tmp[804018] "expr temp" "maybe param" "maybe type" "temp"
        (804021 'move' call_tmp[804018](486838 call _cond_invalid tmp[486825]))
        if call_tmp[804018]
        {
          (486841 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[678412] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[678413] "maybe param" "temp"
        unknown call_tmp[804023] "expr temp" "maybe param" "maybe type" "temp"
        (804026 'move' call_tmp[804023](486826 call isTrue tmp[486825]))
        (678418 'move' tmp[678413](678416 call _cond_test call_tmp[804023]))
        if tmp[678413]
        {
          unknown tmp[678420] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[804028] "expr temp" "maybe param" "maybe type" "temp"
          (804031 'move' call_tmp[804028](129049 call < b[128920] 0))
          (678422 'move' tmp[678420](486829 call isTrue call_tmp[804028]))
          (678427 'move' tmp[678412](678424 '_paramFoldLogical' tmp[678413] tmp[678420]))
        }
        {
          (678432 'move' tmp[678412](678429 '_paramFoldLogical' tmp[678413] 0))
        }
        (486815 'move' tmp[486804] tmp[678412])
        unknown call_tmp[804033] "expr temp" "maybe param" "maybe type" "temp"
        (804036 'move' call_tmp[804033](486817 call _cond_invalid tmp[486804]))
        if call_tmp[804033]
        {
          (486820 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[678466] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[678467] "maybe param" "temp"
        unknown call_tmp[804038] "expr temp" "maybe param" "maybe type" "temp"
        (804041 'move' call_tmp[804038](486805 call isTrue tmp[486804]))
        (678472 'move' tmp[678467](678470 call _cond_test call_tmp[804038]))
        if tmp[678467]
        {
          unknown tmp[486846] "maybe param" "temp"
          unknown call_tmp[804043] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (804046 'move' call_tmp[804043](524802 'typeof' a[128916]))
          unknown call_tmp[804048] "expr temp" "maybe param" "maybe type" "temp"
          (804051 'move' call_tmp[804048](129059 call min call_tmp[804043]))
          (486857 'move' tmp[486846](129055 call == b[128920] call_tmp[804048]))
          unknown call_tmp[804053] "expr temp" "maybe param" "maybe type" "temp"
          (804056 'move' call_tmp[804053](486859 call _cond_invalid tmp[486846]))
          if call_tmp[804053]
          {
            (486862 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[678439] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[678440] "maybe param" "temp"
          unknown call_tmp[804058] "expr temp" "maybe param" "maybe type" "temp"
          (804061 'move' call_tmp[804058](486847 call isTrue tmp[486846]))
          (678445 'move' tmp[678440](678443 call _cond_test call_tmp[804058]))
          if tmp[678440]
          {
            (678450 'move' tmp[678439](678447 '_paramFoldLogical' tmp[678440] 1))
          }
          {
            unknown tmp[678452] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[804063] "expr temp" "maybe param" "maybe type" "temp"
            (804066 'move' call_tmp[804063](129064 call abs b[128920]))
            unknown call_tmp[804068] "expr temp" "maybe param" "maybe type" "temp"
            (804071 'move' call_tmp[804068](129067 call abs a[128916]))
            unknown call_tmp[804073] "expr temp" "maybe param" "maybe type" "temp"
            (804076 'move' call_tmp[804073](129061 call > call_tmp[804063] call_tmp[804068]))
            (678454 'move' tmp[678452](486851 call isTrue call_tmp[804073]))
            (678459 'move' tmp[678439](678456 '_paramFoldLogical' tmp[678440] tmp[678452]))
          }
          unknown tmp[678474] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (678476 'move' tmp[678474](486808 call isTrue tmp[678439]))
          (678481 'move' tmp[678466](678478 '_paramFoldLogical' tmp[678467] tmp[678474]))
        }
        {
          (678486 'move' tmp[678466](678483 '_paramFoldLogical' tmp[678467] 0))
        }
        unknown tmp[678506] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (678508 'move' tmp[678506](486725 call isTrue tmp[678466]))
        (678513 'move' tmp[678493](678510 '_paramFoldLogical' tmp[678494] tmp[678506]))
      }
      unknown call_tmp[804078] "expr temp" "maybe param" "maybe type" "temp"
      (804081 'move' call_tmp[804078](129069 call _cond_test tmp[678493]))
      if call_tmp[804078]
      {
        unknown call_tmp[804083] "expr temp" "maybe param" "maybe type" "temp"
        (804086 'move' call_tmp[804083](129006 call : 0 resultType[128923]))
        (606681 'move' ret[606666](606680 'deref' call_tmp[804083]))
        gotoReturn _end_chpl__add[606664] _end_chpl__add[606664]
      }
    }
    unknown call_tmp[804088] "expr temp" "maybe param" "maybe type" "temp"
    (804091 'move' call_tmp[804088](129084 call + a[128916] b[128920]))
    unknown call_tmp[804093] "expr temp" "maybe param" "maybe type" "temp"
    (804096 'move' call_tmp[804093](129082 call : call_tmp[804088] resultType[128923]))
    (606686 'move' ret[606666](606685 'deref' call_tmp[804093]))
    label _end_chpl__add[606664]
    (606668 return ret[606666])
  }
  function chpl__addRangeStrides[129091](arg start[129093]:_any[141](?), arg stride[129095]:_any[141](?), arg count[129097]:_any[141](?)) : _unknown[42]
  {
    unknown ret[606717] "RVV" "temp"
    function convert[129102](arg a[129104]:_any[141](?), arg b[129106]:_any[141](?)) param : _unknown[42]
    {
      unknown ret[606690] "RVV" "param" "temp"
      unknown tmp[486867] "maybe param" "temp"
      unknown tmp[486888] "maybe param" "temp"
      unknown call_tmp[804098] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (804101 'move' call_tmp[804098](129117 'typeof' a[129104]))
      (486899 'move' tmp[486888](129115 call isIntType call_tmp[804098]))
      unknown call_tmp[804103] "expr temp" "maybe param" "maybe type" "temp"
      (804106 'move' call_tmp[804103](486901 call _cond_invalid tmp[486888]))
      if call_tmp[804103]
      {
        (486904 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[678520] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[678521] "maybe param" "temp"
      unknown call_tmp[804108] "expr temp" "maybe param" "maybe type" "temp"
      (804111 'move' call_tmp[804108](486889 call isTrue tmp[486888]))
      (678526 'move' tmp[678521](678524 call _cond_test call_tmp[804108]))
      if tmp[678521]
      {
        unknown tmp[678528] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[804113] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (804116 'move' call_tmp[804113](129121 'typeof' b[129106]))
        unknown call_tmp[804118] "expr temp" "maybe param" "maybe type" "temp"
        (804121 'move' call_tmp[804118](129119 call isUintType call_tmp[804113]))
        (678530 'move' tmp[678528](486892 call isTrue call_tmp[804118]))
        (678535 'move' tmp[678520](678532 '_paramFoldLogical' tmp[678521] tmp[678528]))
      }
      {
        (678540 'move' tmp[678520](678537 '_paramFoldLogical' tmp[678521] 0))
      }
      (486878 'move' tmp[486867] tmp[678520])
      unknown call_tmp[804123] "expr temp" "maybe param" "maybe type" "temp"
      (804126 'move' call_tmp[804123](486880 call _cond_invalid tmp[486867]))
      if call_tmp[804123]
      {
        (486883 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[678574] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[678575] "maybe param" "temp"
      unknown call_tmp[804128] "expr temp" "maybe param" "maybe type" "temp"
      (804131 'move' call_tmp[804128](486868 call isTrue tmp[486867]))
      (678580 'move' tmp[678575](678578 call _cond_test call_tmp[804128]))
      if tmp[678575]
      {
        (678585 'move' tmp[678574](678582 '_paramFoldLogical' tmp[678575] 1))
      }
      {
        unknown tmp[486909] "maybe param" "temp"
        unknown call_tmp[804133] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (804136 'move' call_tmp[804133](129127 'typeof' a[129104]))
        (486920 'move' tmp[486909](129125 call isUintType call_tmp[804133]))
        unknown call_tmp[804138] "expr temp" "maybe param" "maybe type" "temp"
        (804141 'move' call_tmp[804138](486922 call _cond_invalid tmp[486909]))
        if call_tmp[804138]
        {
          (486925 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[678547] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[678548] "maybe param" "temp"
        unknown call_tmp[804143] "expr temp" "maybe param" "maybe type" "temp"
        (804146 'move' call_tmp[804143](486910 call isTrue tmp[486909]))
        (678553 'move' tmp[678548](678551 call _cond_test call_tmp[804143]))
        if tmp[678548]
        {
          unknown tmp[678555] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[804148] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (804151 'move' call_tmp[804148](129131 'typeof' b[129106]))
          unknown call_tmp[804153] "expr temp" "maybe param" "maybe type" "temp"
          (804156 'move' call_tmp[804153](129129 call isIntType call_tmp[804148]))
          (678557 'move' tmp[678555](486913 call isTrue call_tmp[804153]))
          (678562 'move' tmp[678547](678559 '_paramFoldLogical' tmp[678548] tmp[678555]))
        }
        {
          (678567 'move' tmp[678547](678564 '_paramFoldLogical' tmp[678548] 0))
        }
        unknown tmp[678587] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (678589 'move' tmp[678587](486872 call isTrue tmp[678547]))
        (678594 'move' tmp[678574](678591 '_paramFoldLogical' tmp[678575] tmp[678587]))
      }
      (606695 'move' ret[606690](606694 'deref' tmp[678574]))
      (606692 return ret[606690])
    }
    function mul[129134](arg a[129136]:_any[141](?), arg b[129138]:_any[141](?)) : _unknown[42]
    {
      unknown ret[606699] "RVV" "temp"
      unknown tmp[678601] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[678602] "maybe param" "temp"
      unknown call_tmp[804158] "expr temp" "maybe param" "maybe type" "temp"
      (804161 'move' call_tmp[804158](129143 call convert a[129136] b[129138]))
      (678607 'move' tmp[678602](678605 call _cond_test call_tmp[804158]))
      if tmp[678602]
      {
        unknown tmp[678609] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[804163] "expr temp" "maybe param" "maybe type" "temp"
        (804166 'move' call_tmp[804163](129152 call int(64)[10] 64))
        unknown call_tmp[804168] "expr temp" "maybe param" "maybe type" "temp"
        (804171 'move' call_tmp[804168](129148 call : a[129136] call_tmp[804163]))
        unknown call_tmp[804173] "expr temp" "maybe param" "maybe type" "temp"
        (804176 'move' call_tmp[804173](129158 call int(64)[10] 64))
        unknown call_tmp[804178] "expr temp" "maybe param" "maybe type" "temp"
        (804181 'move' call_tmp[804178](129154 call : b[129138] call_tmp[804173]))
        (678611 'move' tmp[678609](129146 call * call_tmp[804168] call_tmp[804178]))
        (678616 'move' tmp[678601](678613 '_paramFoldLogical' tmp[678602] tmp[678609]))
      }
      {
        unknown tmp[678618] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (678620 'move' tmp[678618](129160 call * a[129136] b[129138]))
        (678625 'move' tmp[678601](678622 '_paramFoldLogical' tmp[678602] tmp[678618]))
      }
      (606704 'move' ret[606699](606703 'deref' tmp[678601]))
      (606701 return ret[606699])
    }
    function add[129169](arg a[129171]:_any[141](?), arg b[129173]:_any[141](?)) : _unknown[42]
    {
      unknown ret[606708] "RVV" "temp"
      unknown tmp[678632] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[678633] "maybe param" "temp"
      unknown call_tmp[804183] "expr temp" "maybe param" "maybe type" "temp"
      (804186 'move' call_tmp[804183](129178 call convert a[129171] b[129173]))
      (678638 'move' tmp[678633](678636 call _cond_test call_tmp[804183]))
      if tmp[678633]
      {
        unknown tmp[678640] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[804188] "expr temp" "maybe param" "maybe type" "temp"
        (804191 'move' call_tmp[804188](129187 call int(64)[10] 64))
        unknown call_tmp[804193] "expr temp" "maybe param" "maybe type" "temp"
        (804196 'move' call_tmp[804193](129183 call : a[129171] call_tmp[804188]))
        unknown call_tmp[804198] "expr temp" "maybe param" "maybe type" "temp"
        (804201 'move' call_tmp[804198](129193 call int(64)[10] 64))
        unknown call_tmp[804203] "expr temp" "maybe param" "maybe type" "temp"
        (804206 'move' call_tmp[804203](129189 call : b[129173] call_tmp[804198]))
        (678642 'move' tmp[678640](129181 call + call_tmp[804193] call_tmp[804203]))
        (678647 'move' tmp[678632](678644 '_paramFoldLogical' tmp[678633] tmp[678640]))
      }
      {
        unknown tmp[678649] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (678651 'move' tmp[678649](129195 call + a[129171] b[129173]))
        (678656 'move' tmp[678632](678653 '_paramFoldLogical' tmp[678633] tmp[678649]))
      }
      (606713 'move' ret[606708](606712 'deref' tmp[678632]))
      (606710 return ret[606708])
    }
    unknown call_tmp[804208] "expr temp" "maybe param" "maybe type" "temp"
    (804211 'move' call_tmp[804208](129211 call mul stride[129095] count[129097]))
    unknown call_tmp[804213] "expr temp" "maybe param" "maybe type" "temp"
    (804216 'move' call_tmp[804213](129208 call add start[129093] call_tmp[804208]))
    unknown call_tmp[804218] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (804221 'move' call_tmp[804218](129215 'typeof' start[129093]))
    unknown call_tmp[804223] "expr temp" "maybe param" "maybe type" "temp"
    (804226 'move' call_tmp[804223](129205 call : call_tmp[804213] call_tmp[804218]))
    unknown call_tmp[804228] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (804231 'move' call_tmp[804228](606721 'typeof' start[129093]))
    (606724 'move' ret[606717](606723 'coerce' call_tmp[804223] call_tmp[804228]))
    (606719 return ret[606717])
  }
  { scopeless type
    (129100 'typeof' start[129093])
  }
  function chpl__extendedEuclidHelper[129219](arg u[129221]:_any[141](?), arg v[129223]:_any[141](?)) : _unknown[42]
  {
    unknown ret[606728] "RVV" "temp"
    unknown call_tmp[804233] "maybe param" "maybe type" "temp" "type variable"
    (804236 'move' call_tmp[804233](129229 'typeof' u[129221]))
    unknown zero[129227] "dead at end of block" "insert auto destroy"
    (645771 'init var' zero[129227] 0 call_tmp[804233])
    (129232 'end of statement')
    unknown call_tmp[804238] "maybe param" "maybe type" "temp" "type variable"
    (804241 'move' call_tmp[804238](129236 'typeof' u[129221]))
    unknown one[129234] "dead at end of block" "insert auto destroy"
    (645773 'init var' one[129234] 1 call_tmp[804238])
    (129239 'end of statement')
    unknown call_tmp[804243] "maybe param" "maybe type" "temp"
    (804246 'move' call_tmp[804243](129246 call _build_tuple one[129234] zero[129227] u[129221]))
    unknown U[129241] "dead at end of block" "insert auto destroy"
    (645775 'init var' U[129241] call_tmp[804243])
    (129249 'end of statement')
    unknown call_tmp[804248] "maybe param" "maybe type" "temp"
    (804251 'move' call_tmp[804248](129256 call _build_tuple zero[129227] one[129234] v[129223]))
    unknown V[129251] "dead at end of block" "insert auto destroy"
    (645777 'init var' V[129251] call_tmp[804248])
    (129259 'end of statement' one[129234] zero[129227])
    {
      unknown tmp[129303] "temp"
      unknown call_tmp[804253] "expr temp" "maybe param" "maybe type" "temp"
      (804256 'move' call_tmp[804253](129328 call V[129251] 2))
      unknown call_tmp[804258] "expr temp" "maybe param" "maybe type" "temp"
      (804261 'move' call_tmp[804258](129326 call != call_tmp[804253] 0))
      (129331 'move' tmp[129303](129324 call _cond_test call_tmp[804258]))
      WhileDo[129308]
      {
        {
          unknown oldU[129268] "dead at end of block" "insert auto destroy"
          (645779 'init var' oldU[129268] U[129241])
          (129271 'end of statement')
          unknown call_tmp[804263] "expr temp" "maybe param" "maybe type" "temp"
          (804266 'move' call_tmp[804263](129277 call U[129241] 2))
          unknown call_tmp[804268] "expr temp" "maybe param" "maybe type" "temp"
          (804271 'move' call_tmp[804268](129280 call V[129251] 2))
          unknown call_tmp[804273] "maybe param" "maybe type" "temp"
          (804276 'move' call_tmp[804273](129274 call / call_tmp[804263] call_tmp[804268]))
          unknown q[129273] "dead at end of block" "insert auto destroy"
          (645781 'init var' q[129273] call_tmp[804273])
          (129283 'end of statement' U[129241] V[129251])
          (129284 call = U[129241] V[129251])
          (553505 'end of statement' U[129241] V[129251])
          unknown call_tmp[804278] "expr temp" "maybe param" "maybe type" "temp"
          (804281 'move' call_tmp[804278](129301 call _build_tuple q[129273] q[129273] q[129273]))
          unknown call_tmp[804283] "expr temp" "maybe param" "maybe type" "temp"
          (804286 'move' call_tmp[804283](129294 call * V[129251] call_tmp[804278]))
          unknown call_tmp[804288] "expr temp" "maybe param" "maybe type" "temp"
          (804291 'move' call_tmp[804288](129291 call - oldU[129268] call_tmp[804283]))
          (129288 call = V[129251] call_tmp[804288])
          (553508 'end of statement' V[129251] oldU[129268] q[129273])
        }
        label _continueLabel[129306]
        unknown call_tmp[804293] "expr temp" "maybe param" "maybe type" "temp"
        (804296 'move' call_tmp[804293](129316 call V[129251] 2))
        unknown call_tmp[804298] "expr temp" "maybe param" "maybe type" "temp"
        (804301 'move' call_tmp[804298](129314 call != call_tmp[804293] 0))
        (129319 'move' tmp[129303](129312 call _cond_test call_tmp[804298]))
        tmp[129303]
      }
      label _breakLabel[129307]
    }
    unknown call_tmp[804303] "expr temp" "maybe param" "maybe type" "temp"
    (804306 'move' call_tmp[804303](129337 call U[129241] 2))
    unknown call_tmp[804308] "expr temp" "maybe param" "maybe type" "temp"
    (804311 'move' call_tmp[804308](129340 call U[129241] 0))
    unknown call_tmp[804313] "expr temp" "maybe param" "maybe type" "temp"
    (804316 'move' call_tmp[804313](129342 call _build_tuple call_tmp[804303] call_tmp[804308]))
    (606733 'move' ret[606728](606732 'deref' call_tmp[804313]))
    gotoReturn _end_chpl__extendedEuclidHelper[606726] _end_chpl__extendedEuclidHelper[606726]
    (553512 'end of statement' U[129241])
    label _end_chpl__extendedEuclidHelper[606726]
    (606730 return ret[606728])
  }
  function chpl__extendedEuclid[129346](arg u[129351] :
  (129349 call int(64)[10] 32), arg v[129357] :
  (129355 call int(64)[10] 32)) : _unknown[42] "inline"
  {
    unknown ret[606739] "RVV" "temp"
    unknown call_tmp[804318] "expr temp" "maybe param" "maybe type" "temp"
    (804321 'move' call_tmp[804318](129363 call chpl__extendedEuclidHelper u[129351] v[129357]))
    (606744 'move' ret[606739](606743 'deref' call_tmp[804318]))
    (606741 return ret[606739])
  }
  function chpl__extendedEuclid[129368](arg u[129373] :
  (129371 call int(64)[10] 64), arg v[129379] :
  (129377 call int(64)[10] 64)) : _unknown[42] "inline"
  {
    unknown ret[606748] "RVV" "temp"
    unknown call_tmp[804323] "expr temp" "maybe param" "maybe type" "temp"
    (804326 'move' call_tmp[804323](129385 call chpl__extendedEuclidHelper u[129373] v[129379]))
    (606753 'move' ret[606748](606752 'deref' call_tmp[804323]))
    (606750 return ret[606748])
  }
  function chpl__rangeIdxTypeError[129390](arg idxType[129392]:_any[141](?)) : _unknown[42] "private" "no return value for void"
  {
    unknown call_tmp[804328] "expr temp" "maybe param" "maybe type" "temp"
    (804331 'move' call_tmp[804328](129400 call : idxType[129392] string[244]))
    (129396 call compilerError "ranges don't support '" call_tmp[804328] "' as their idxType")
    (606755 return _void[46])
  }
  function chpl__rangeStrideType[129409](arg idxType[129411]:_any[141](?)) type : _unknown[42] "private"
  {
    unknown ret[606759] "RVV" "temp" "type variable"
    unknown call_tmp[804333] "expr temp" "maybe param" "maybe type" "temp"
    (804336 'move' call_tmp[804333](129434 call isIntegralType idxType[129411]))
    unknown call_tmp[804338] "expr temp" "maybe param" "maybe type" "temp"
    (804341 'move' call_tmp[804338](129436 call _cond_test call_tmp[804333]))
    if call_tmp[804338]
    {
      unknown call_tmp[804343] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (804346 'move' call_tmp[804343](129417 call chpl__signedType idxType[129411]))
      (606764 'move' ret[606759](606763 'deref' call_tmp[804343]))
      gotoReturn _end_chpl__rangeStrideType[606757] _end_chpl__rangeStrideType[606757]
    }
    {
      unknown call_tmp[804348] "expr temp" "maybe param" "maybe type" "temp"
      (804351 'move' call_tmp[804348](129427 call isFiniteIdxType idxType[129411]))
      unknown call_tmp[804353] "expr temp" "maybe param" "maybe type" "temp"
      (804356 'move' call_tmp[804353](129429 call _cond_test call_tmp[804348]))
      if call_tmp[804353]
      {
        (606769 'move' ret[606759](606768 'deref' int(64)[10]))
        gotoReturn _end_chpl__rangeStrideType[606757] _end_chpl__rangeStrideType[606757]
      }
      {
        (129424 call chpl__rangeIdxTypeError idxType[129411])
      }
    }
    label _end_chpl__rangeStrideType[606757]
    (606761 return ret[606759])
  }
  function chpl__rangeUnsignedType[129443](arg idxType[129445]:_any[141](?)) type : _unknown[42] "private"
  {
    unknown ret[606775] "RVV" "temp" "type variable"
    unknown call_tmp[804358] "expr temp" "maybe param" "maybe type" "temp"
    (804361 'move' call_tmp[804358](129468 call isIntegralType idxType[129445]))
    unknown call_tmp[804363] "expr temp" "maybe param" "maybe type" "temp"
    (804366 'move' call_tmp[804363](129470 call _cond_test call_tmp[804358]))
    if call_tmp[804363]
    {
      unknown call_tmp[804368] "expr temp" "maybe param" "used in type" "maybe type" "temp"
      (804371 'move' call_tmp[804368](129451 call chpl__unsignedType idxType[129445]))
      (606780 'move' ret[606775](606779 'deref' call_tmp[804368]))
      gotoReturn _end_chpl__rangeUnsignedType[606773] _end_chpl__rangeUnsignedType[606773]
    }
    {
      unknown call_tmp[804373] "expr temp" "maybe param" "maybe type" "temp"
      (804376 'move' call_tmp[804373](129461 call isFiniteIdxType idxType[129445]))
      unknown call_tmp[804378] "expr temp" "maybe param" "maybe type" "temp"
      (804381 'move' call_tmp[804378](129463 call _cond_test call_tmp[804373]))
      if call_tmp[804378]
      {
        (606785 'move' ret[606775](606784 'deref' uint(64)[86]))
        gotoReturn _end_chpl__rangeUnsignedType[606773] _end_chpl__rangeUnsignedType[606773]
      }
      {
        (129458 call chpl__rangeIdxTypeError idxType[129445])
      }
    }
    label _end_chpl__rangeUnsignedType[606773]
    (606777 return ret[606775])
  }
  function chpl__idxTypeToIntIdxType[129477](arg idxType[129479]:_any[141](?)) type : _unknown[42]
  {
    unknown ret[606791] "RVV" "temp" "type variable"
    unknown call_tmp[804383] "expr temp" "maybe param" "maybe type" "temp"
    (804386 'move' call_tmp[804383](129489 call isIntegralType idxType[129479]))
    unknown call_tmp[804388] "expr temp" "maybe param" "maybe type" "temp"
    (804391 'move' call_tmp[804388](129491 call _cond_test call_tmp[804383]))
    if call_tmp[804388]
    {
      (606796 'move' ret[606791](606795 'deref' idxType[129479]))
      gotoReturn _end_chpl__idxTypeToIntIdxType[606789] _end_chpl__idxTypeToIntIdxType[606789]
    }
    {
      (606801 'move' ret[606791](606800 'deref' int(64)[10]))
      gotoReturn _end_chpl__idxTypeToIntIdxType[606789] _end_chpl__idxTypeToIntIdxType[606789]
    }
    label _end_chpl__idxTypeToIntIdxType[606789]
    (606793 return ret[606791])
  }
  function range[240](?).chpl_intToIdx[129497](arg _mt[129505]:_MT[201], arg this[129500]:range[240](?) :
  range[240](?), arg i[129503]:_any[141](?)) : _unknown[42] "inline" "method"
  {
    unknown ret[606807] "RVV" "temp"
    unknown call_tmp[804395] "expr temp" "maybe param" "maybe type" "temp"
    (804398 'move' call_tmp[804395](129512 call idxType _mt[203] this[129500]))
    unknown call_tmp[804400] "expr temp" "maybe param" "maybe type" "temp"
    (804403 'move' call_tmp[804400](129510 call chpl__intToIdx call_tmp[804395] i[129503]))
    (606812 'move' ret[606807](606811 'deref' call_tmp[804400]))
    (606809 return ret[606807])
  }
  function chpl__intToIdx[129518](arg idxType[129521]:integral[159](?), arg i[129525]:integral[159](?)) : _unknown[42] "inline"
  {
    unknown ret[606816] "RVV" "temp"
    unknown call_tmp[804405] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (804408 'move' call_tmp[804405](129541 'typeof' i[129525]))
    unknown call_tmp[804410] "expr temp" "maybe param" "maybe type" "temp"
    (804413 'move' call_tmp[804410](129538 call == call_tmp[804405] idxType[129521]))
    unknown call_tmp[804415] "expr temp" "maybe param" "maybe type" "temp"
    (804418 'move' call_tmp[804415](129543 call _cond_test call_tmp[804410]))
    if call_tmp[804415]
    {
      (606821 'move' ret[606816](606820 'deref' i[129525]))
      gotoReturn _end_chpl__intToIdx[606814] _end_chpl__intToIdx[606814]
    }
    {
      unknown call_tmp[804420] "expr temp" "maybe param" "maybe type" "temp"
      (804423 'move' call_tmp[804420](129533 call : i[129525] idxType[129521]))
      (606826 'move' ret[606816](606825 'deref' call_tmp[804420]))
      gotoReturn _end_chpl__intToIdx[606814] _end_chpl__intToIdx[606814]
    }
    label _end_chpl__intToIdx[606814]
    (606818 return ret[606816])
  }
  function chpl__intToIdx[129551](arg idxType[129554]:integral[159](?), param arg i[129558]:integral[159](?)) param : _unknown[42] "inline"
  {
    unknown ret[606832] "RVV" "param" "temp"
    unknown call_tmp[804425] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (804428 'move' call_tmp[804425](129574 'typeof' i[129558]))
    unknown call_tmp[804430] "expr temp" "maybe param" "maybe type" "temp"
    (804433 'move' call_tmp[804430](129571 call == call_tmp[804425] idxType[129554]))
    unknown call_tmp[804435] "expr temp" "maybe param" "maybe type" "temp"
    (804438 'move' call_tmp[804435](129576 call _cond_test call_tmp[804430]))
    if call_tmp[804435]
    {
      (606837 'move' ret[606832](606836 'deref' i[129558]))
      gotoReturn _end_chpl__intToIdx[606830] _end_chpl__intToIdx[606830]
    }
    {
      unknown call_tmp[804440] "expr temp" "maybe param" "maybe type" "temp"
      (804443 'move' call_tmp[804440](129566 call : i[129558] idxType[129554]))
      (606842 'move' ret[606832](606841 'deref' call_tmp[804440]))
      gotoReturn _end_chpl__intToIdx[606830] _end_chpl__intToIdx[606830]
    }
    label _end_chpl__intToIdx[606830]
    (606834 return ret[606832])
  }
  function chpl__intToIdx[129584](arg idxType[129587]:enum[147](?), arg i[129591]:integral[159](?)) : _unknown[42] "inline"
  {
    unknown ret[606848] "RVV" "temp"
    unknown call_tmp[804445] "expr temp" "maybe param" "maybe type" "temp"
    (804448 'move' call_tmp[804445](129597 call chpl__orderToEnum i[129591] idxType[129587]))
    (606853 'move' ret[606848](606852 'deref' call_tmp[804445]))
    (606850 return ret[606848])
  }
  function chpl__intToIdx[129602](arg idxType[129605]:enum[147](?), param arg i[129609]:integral[159](?)) param : _unknown[42] "inline"
  {
    unknown ret[606857] "RVV" "param" "temp"
    unknown call_tmp[804450] "expr temp" "maybe param" "maybe type" "temp"
    (804453 'move' call_tmp[804450](129615 call chpl__orderToEnum i[129609] idxType[129605]))
    (606862 'move' ret[606857](606861 'deref' call_tmp[804450]))
    (606859 return ret[606857])
  }
  function chpl__intToIdx[129620](arg idxType[129622]:_any[141](?), arg i[129625]:integral[159](?)) : _unknown[42] "inline"
  {
    unknown ret[606866] "RVV" "temp"
    unknown call_tmp[804455] "expr temp" "maybe param" "maybe type" "temp"
    (804458 'move' call_tmp[804455](129633 call : i[129625] bool[19]))
    (606871 'move' ret[606866](606870 'deref' call_tmp[804455]))
    (606868 return ret[606866])
  }
  where {
    (129629 call isBoolType idxType[129622])
  }
  function chpl__intToIdx[129640](arg idxType[129642]:_any[141](?), param arg i[129645]:integral[159](?)) param : _unknown[42] "inline"
  {
    unknown ret[606875] "RVV" "param" "temp"
    unknown call_tmp[804460] "expr temp" "maybe param" "maybe type" "temp"
    (804463 'move' call_tmp[804460](129653 call : i[129645] bool[19]))
    (606880 'move' ret[606875](606879 'deref' call_tmp[804460]))
    (606877 return ret[606875])
  }
  where {
    (129649 call isBoolType idxType[129642])
  }
  function chpl__intToIdx[129660](arg idxType[129662]:_any[141](?), arg i[129665]:nothing[7]) : _unknown[42] "inline"
  {
    unknown ret[606884] "RVV" "temp"
    (606889 'move' ret[606884](606888 'deref' none[48]))
    (606886 return ret[606884])
  }
  function chpl__idxToInt[129673](arg i[129676]:integral[159](?)) : _unknown[42] "inline"
  {
    unknown ret[606893] "RVV" "temp"
    (606898 'move' ret[606893](606897 'deref' i[129676]))
    (606895 return ret[606893])
  }
  function chpl__idxToInt[129684](param arg i[129687]:integral[159](?)) param : _unknown[42] "inline"
  {
    unknown ret[606902] "RVV" "param" "temp"
    (606907 'move' ret[606902](606906 'deref' i[129687]))
    (606904 return ret[606902])
  }
  function chpl__idxToInt[129695](arg i[129698]:enum[147](?)) : _unknown[42] "inline"
  {
    unknown ret[606911] "RVV" "temp"
    unknown call_tmp[804465] "expr temp" "maybe param" "maybe type" "temp"
    (804468 'move' call_tmp[804465](129704 call chpl__enumToOrder i[129698]))
    (606916 'move' ret[606911](606915 'deref' call_tmp[804465]))
    (606913 return ret[606911])
  }
  function chpl__idxToInt[129708](param arg i[129711]:enum[147](?)) param : _unknown[42] "inline"
  {
    unknown ret[606920] "RVV" "param" "temp"
    unknown call_tmp[804470] "expr temp" "maybe param" "maybe type" "temp"
    (804473 'move' call_tmp[804470](129717 call chpl__enumToOrder i[129711]))
    (606925 'move' ret[606920](606924 'deref' call_tmp[804470]))
    (606922 return ret[606920])
  }
  function chpl__idxToInt[129721](arg i[129724]:bool[19]) : _unknown[42] "inline"
  {
    unknown ret[606929] "RVV" "temp"
    unknown call_tmp[804475] "expr temp" "maybe param" "maybe type" "temp"
    (804478 'move' call_tmp[804475](129729 call : i[129724] int(64)[10]))
    (606934 'move' ret[606929](606933 'deref' call_tmp[804475]))
    (606931 return ret[606929])
  }
  function chpl__idxToInt[129735](param arg i[129738]:bool[19]) param : _unknown[42] "inline"
  {
    unknown ret[606938] "RVV" "param" "temp"
    unknown call_tmp[804480] "expr temp" "maybe param" "maybe type" "temp"
    (804483 'move' call_tmp[804480](129743 call : i[129738] int(64)[10]))
    (606943 'move' ret[606938](606942 'deref' call_tmp[804480]))
    (606940 return ret[606938])
  }
  function chpl__singleValIdxType[129749](arg t[129751]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[606947] "RVV" "param" "temp"
    unknown tmp[486930] "maybe param" "temp"
    (486941 'move' tmp[486930](129758 call isEnumType t[129751]))
    unknown call_tmp[804485] "expr temp" "maybe param" "maybe type" "temp"
    (804488 'move' call_tmp[804485](486943 call _cond_invalid tmp[486930]))
    if call_tmp[804485]
    {
      (486946 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[678663] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[678664] "maybe param" "temp"
    unknown call_tmp[804490] "expr temp" "maybe param" "maybe type" "temp"
    (804493 'move' call_tmp[804490](486931 call isTrue tmp[486930]))
    (678669 'move' tmp[678664](678667 call _cond_test call_tmp[804490]))
    if tmp[678664]
    {
      unknown tmp[678671] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[804497] "expr temp" "maybe param" "maybe type" "temp"
      (804500 'move' call_tmp[804497](129763 call size _mt[203] t[129751]))
      unknown call_tmp[804502] "expr temp" "maybe param" "maybe type" "temp"
      (804505 'move' call_tmp[804502](129760 call == call_tmp[804497] 1))
      (678673 'move' tmp[678671](486934 call isTrue call_tmp[804502]))
      (678678 'move' tmp[678663](678675 '_paramFoldLogical' tmp[678664] tmp[678671]))
    }
    {
      (678683 'move' tmp[678663](678680 '_paramFoldLogical' tmp[678664] 0))
    }
    (606952 'move' ret[606947](606951 'deref' tmp[678663]))
    (606949 return ret[606947])
  }
  function chpl__defaultLowBound[129769](arg t[129771]:_any[141](?), param arg bounds[129774]:boundKind[107122]) param : _unknown[42] "private"
  {
    unknown ret[606956] "RVV" "param" "temp"
    unknown call_tmp[804507] "expr temp" "maybe param" "maybe type" "temp"
    (804510 'move' call_tmp[804507](129823 call chpl__singleValIdxType t[129771]))
    unknown call_tmp[804512] "expr temp" "maybe param" "maybe type" "temp"
    (804515 'move' call_tmp[804512](129825 call _cond_test call_tmp[804507]))
    if call_tmp[804512]
    {
      unknown call_tmp[804517] "expr temp" "maybe param" "maybe type" "temp"
      (804520 'move' call_tmp[804517](129784 call chpl__idxTypeToIntIdxType t[129771]))
      unknown call_tmp[804522] "expr temp" "maybe param" "maybe type" "temp"
      (804525 'move' call_tmp[804522](129780 call : 0 call_tmp[804517]))
      (606961 'move' ret[606956](606960 'deref' call_tmp[804522]))
      gotoReturn _end_chpl__defaultLowBound[606954] _end_chpl__defaultLowBound[606954]
    }
    {
      unknown tmp[486951] "maybe param" "temp"
      (486962 'move' tmp[486951](129804 call == bounds[129774] high[107118]))
      unknown call_tmp[804527] "expr temp" "maybe param" "maybe type" "temp"
      (804530 'move' call_tmp[804527](486964 call _cond_invalid tmp[486951]))
      if call_tmp[804527]
      {
        (486967 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[678690] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[678691] "maybe param" "temp"
      unknown call_tmp[804532] "expr temp" "maybe param" "maybe type" "temp"
      (804535 'move' call_tmp[804532](486952 call isTrue tmp[486951]))
      (678696 'move' tmp[678691](678694 call _cond_test call_tmp[804532]))
      if tmp[678691]
      {
        (678701 'move' tmp[678690](678698 '_paramFoldLogical' tmp[678691] 1))
      }
      {
        unknown tmp[678703] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[804537] "expr temp" "maybe param" "maybe type" "temp"
        (804540 'move' call_tmp[804537](129811 call == bounds[129774] neither[107120]))
        (678705 'move' tmp[678703](486956 call isTrue call_tmp[804537]))
        (678710 'move' tmp[678690](678707 '_paramFoldLogical' tmp[678691] tmp[678703]))
      }
      unknown call_tmp[804542] "expr temp" "maybe param" "maybe type" "temp"
      (804545 'move' call_tmp[804542](129818 call _cond_test tmp[678690]))
      if call_tmp[804542]
      {
        unknown call_tmp[804547] "expr temp" "maybe param" "maybe type" "temp"
        (804550 'move' call_tmp[804547](129792 call chpl__idxTypeToIntIdxType t[129771]))
        unknown call_tmp[804552] "expr temp" "maybe param" "maybe type" "temp"
        (804555 'move' call_tmp[804552](129788 call : 0 call_tmp[804547]))
        (606966 'move' ret[606956](606965 'deref' call_tmp[804552]))
        gotoReturn _end_chpl__defaultLowBound[606954] _end_chpl__defaultLowBound[606954]
      }
      {
        unknown call_tmp[804557] "expr temp" "maybe param" "maybe type" "temp"
        (804560 'move' call_tmp[804557](129800 call chpl__idxTypeToIntIdxType t[129771]))
        unknown call_tmp[804562] "expr temp" "maybe param" "maybe type" "temp"
        (804565 'move' call_tmp[804562](129796 call : 1 call_tmp[804557]))
        (606971 'move' ret[606956](606970 'deref' call_tmp[804562]))
        gotoReturn _end_chpl__defaultLowBound[606954] _end_chpl__defaultLowBound[606954]
      }
    }
    label _end_chpl__defaultLowBound[606954]
    (606958 return ret[606956])
  }
  function chpl__defaultHighBound[129832](arg t[129834]:_any[141](?), param arg bounds[129837]:boundKind[107122]) param : _unknown[42] "private"
  {
    unknown ret[606977] "RVV" "param" "temp"
    unknown call_tmp[804567] "expr temp" "maybe param" "maybe type" "temp"
    (804570 'move' call_tmp[804567](129906 call chpl__singleValIdxType t[129834]))
    unknown call_tmp[804572] "expr temp" "maybe param" "maybe type" "temp"
    (804575 'move' call_tmp[804572](129908 call _cond_test call_tmp[804567]))
    if call_tmp[804572]
    {
      unknown call_tmp[804577] "expr temp" "maybe param" "maybe type" "temp"
      (804580 'move' call_tmp[804577](129849 call chpl__idxTypeToIntIdxType t[129834]))
      unknown call_tmp[804582] "expr temp" "maybe param" "maybe type" "temp"
      (804585 'move' call_tmp[804582](129845 call : 1 call_tmp[804577]))
      unknown call_tmp[804587] "expr temp" "maybe param" "maybe type" "temp"
      (804590 'move' call_tmp[804587](129843 call - call_tmp[804582]))
      (606982 'move' ret[606977](606981 'deref' call_tmp[804587]))
      gotoReturn _end_chpl__defaultHighBound[606975] _end_chpl__defaultHighBound[606975]
    }
    {
      unknown tmp[486972] "maybe param" "temp"
      (486983 'move' tmp[486972](129887 call == bounds[129837] low[107116]))
      unknown call_tmp[804592] "expr temp" "maybe param" "maybe type" "temp"
      (804595 'move' call_tmp[804592](486985 call _cond_invalid tmp[486972]))
      if call_tmp[804592]
      {
        (486988 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[678717] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[678718] "maybe param" "temp"
      unknown call_tmp[804597] "expr temp" "maybe param" "maybe type" "temp"
      (804600 'move' call_tmp[804597](486973 call isTrue tmp[486972]))
      (678723 'move' tmp[678718](678721 call _cond_test call_tmp[804597]))
      if tmp[678718]
      {
        (678728 'move' tmp[678717](678725 '_paramFoldLogical' tmp[678718] 1))
      }
      {
        unknown tmp[678730] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[804602] "expr temp" "maybe param" "maybe type" "temp"
        (804605 'move' call_tmp[804602](129894 call == bounds[129837] neither[107120]))
        (678732 'move' tmp[678730](486977 call isTrue call_tmp[804602]))
        (678737 'move' tmp[678717](678734 '_paramFoldLogical' tmp[678718] tmp[678730]))
      }
      unknown call_tmp[804607] "expr temp" "maybe param" "maybe type" "temp"
      (804610 'move' call_tmp[804607](129901 call _cond_test tmp[678717]))
      if call_tmp[804607]
      {
        unknown call_tmp[804612] "expr temp" "maybe param" "maybe type" "temp"
        (804615 'move' call_tmp[804612](129871 call isFiniteIdxType t[129834]))
        unknown call_tmp[804617] "expr temp" "maybe param" "maybe type" "temp"
        (804620 'move' call_tmp[804617](129873 call _cond_test call_tmp[804612]))
        if call_tmp[804617]
        {
          unknown call_tmp[804622] "expr temp" "maybe param" "maybe type" "temp"
          (804625 'move' call_tmp[804622](129857 call finiteIdxTypeHigh t[129834]))
          unknown call_tmp[804627] "expr temp" "maybe param" "maybe type" "temp"
          (804630 'move' call_tmp[804627](129860 call chpl__idxTypeToIntIdxType t[129834]))
          unknown call_tmp[804632] "expr temp" "maybe param" "maybe type" "temp"
          (804635 'move' call_tmp[804632](129854 call : call_tmp[804622] call_tmp[804627]))
          (606987 'move' ret[606977](606986 'deref' call_tmp[804632]))
          gotoReturn _end_chpl__defaultHighBound[606975] _end_chpl__defaultHighBound[606975]
        }
        {
          unknown call_tmp[804637] "expr temp" "maybe param" "maybe type" "temp"
          (804640 'move' call_tmp[804637](129868 call chpl__idxTypeToIntIdxType t[129834]))
          unknown call_tmp[804642] "expr temp" "maybe param" "maybe type" "temp"
          (804645 'move' call_tmp[804642](129864 call : 0 call_tmp[804637]))
          (606992 'move' ret[606977](606991 'deref' call_tmp[804642]))
          gotoReturn _end_chpl__defaultHighBound[606975] _end_chpl__defaultHighBound[606975]
        }
      }
      {
        unknown call_tmp[804647] "expr temp" "maybe param" "maybe type" "temp"
        (804650 'move' call_tmp[804647](129883 call chpl__idxTypeToIntIdxType t[129834]))
        unknown call_tmp[804652] "expr temp" "maybe param" "maybe type" "temp"
        (804655 'move' call_tmp[804652](129879 call : 0 call_tmp[804647]))
        (606997 'move' ret[606977](606996 'deref' call_tmp[804652]))
        gotoReturn _end_chpl__defaultHighBound[606975] _end_chpl__defaultHighBound[606975]
      }
    }
    label _end_chpl__defaultHighBound[606975]
    (606979 return ret[606977])
  }
  (396118 'used modules list'(107071 'use' ChapelBase[77907])(107073 'use' HaltWrappers[518])(107077 'use' AutoMath[4943])(107079 'use' DSIUtil[99447])(107080 'use' Reflection[1804])(107084 'use' ChapelDebugPrint[107066] 'only' chpl_debug_writeln))
}