AST dump for ChapelLocks after pass buildDefaultFunctions.
Module use list: Atomics ChapelBase MemConsistency currentTask 

{
  function chpl__init_ChapelLocks[468384]() : void[4] "insert line file info" "module init"
  {
    (599582 return _void[46])
  }
  function chpl_LocalSpinlock[85418].init[85249](arg _mt[85253]:_MT[201], ref arg this[85251]:chpl_LocalSpinlock[85418]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown l[519339] "temp"
    unknown call_tmp[770520] "expr temp" "maybe param" "maybe type" "temp"
    (770523 'move' call_tmp[770520](519342 call chpl__processorAtomicType bool[19]))
    (519344 'default init var' l[519339] call_tmp[770520])
    (519346 '.=' this[85251] c"l" l[519339])
    (550297 'end of statement')
    (599574 return _void[46])
  }
  function chpl_LocalSpinlock[85418].init=[85258](arg _mt[85266]:_MT[201], ref arg this[85260]:chpl_LocalSpinlock[85418], arg other[85263]:chpl_LocalSpinlock[85418]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown l[519350] "temp"
    unknown call_tmp[770525] "expr temp" "maybe param" "maybe type" "temp"
    (770528 'move' call_tmp[770525](519353 call chpl__processorAtomicType bool[19]))
    (519355 'default init var' l[519350] call_tmp[770525])
    (519357 '.=' this[85260] c"l" l[519350])
    (550298 'end of statement')
    (519361 'init done')
    (550299 'end of statement')
    unknown call_tmp[770532] "expr temp" "maybe param" "maybe type" "temp"
    (770535 'move' call_tmp[770532](85277 call l _mt[203] this[85260]))
    unknown call_tmp[770541] "expr temp" "maybe param" "maybe type" "temp"
    (770544 'move' call_tmp[770541](85287 call l _mt[203] other[85263]))
    unknown call_tmp[770548] "expr temp" "maybe param" "maybe type" "temp"
    (770551 'move' call_tmp[770548](85293 call(85290 call (partial) read _mt[203] call_tmp[770541])))
    (85285 call(85282 call (partial) init_helper _mt[203] call_tmp[770532]) call_tmp[770548])
    (599576 return _void[46])
  }
  function chpl_LocalSpinlock[85418].lock[85296](arg _mt[85300]:_MT[201], ref arg this[85298]:chpl_LocalSpinlock[85418]) : _unknown[42] "inline" "method" "primary method" "no return value for void"
  {
    {
      const tmp[85387] "const" "temp"
      unknown call_tmp[770553] "expr temp" "maybe param" "maybe type" "temp"
      (770556 'move' call_tmp[770553](85384 '_wide_get_locale' this[85298]))
      (85388 'move' tmp[85387](85385 'deref' call_tmp[770553]))
      {
        unknown tmp[85333] "temp"
        unknown tmp[481890] "maybe param" "temp"
        unknown call_tmp[770560] "expr temp" "maybe param" "maybe type" "temp"
        (770563 'move' call_tmp[770560](400403 call l _mt[203] this[85298]))
        (481901 'move' tmp[481890](85371 call(85368 call (partial) read _mt[203] call_tmp[770560])))
        unknown call_tmp[770567] "expr temp" "maybe param" "maybe type" "temp"
        (770570 'move' call_tmp[770567](481903 call _cond_invalid tmp[481890]))
        if call_tmp[770567]
        {
          (481906 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[669158] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[669159] "maybe param" "temp"
        unknown call_tmp[770572] "expr temp" "maybe param" "maybe type" "temp"
        (770575 'move' call_tmp[770572](481891 call isTrue tmp[481890]))
        (669164 'move' tmp[669159](669162 call _cond_test call_tmp[770572]))
        if tmp[669159]
        {
          (669169 'move' tmp[669158](669166 '_paramFoldLogical' tmp[669159] 1))
        }
        {
          unknown tmp[669171] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[770579] "expr temp" "maybe param" "maybe type" "temp"
          (770582 'move' call_tmp[770579](400408 call l _mt[203] this[85298]))
          unknown call_tmp[770586] "expr temp" "maybe param" "maybe type" "temp"
          (770589 'move' call_tmp[770586](85376 call(85373 call (partial) testAndSet _mt[203] call_tmp[770579]) acquire[81222]))
          (669173 'move' tmp[669171](481895 call isTrue call_tmp[770586]))
          (669178 'move' tmp[669158](669175 '_paramFoldLogical' tmp[669159] tmp[669171]))
        }
        (85381 'move' tmp[85333](85364 call _cond_test tmp[669158]))
        WhileDo[85338]
        {
          (85331 call yieldExecution)
          (550302 'end of statement')
          label _continueLabel[85336]
          unknown tmp[481869] "maybe param" "temp"
          unknown call_tmp[770593] "expr temp" "maybe param" "maybe type" "temp"
          (770596 'move' call_tmp[770593](400392 call l _mt[203] this[85298]))
          (481880 'move' tmp[481869](85349 call(85346 call (partial) read _mt[203] call_tmp[770593])))
          unknown call_tmp[770600] "expr temp" "maybe param" "maybe type" "temp"
          (770603 'move' call_tmp[770600](481882 call _cond_invalid tmp[481869]))
          if call_tmp[770600]
          {
            (481885 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[669185] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[669186] "maybe param" "temp"
          unknown call_tmp[770605] "expr temp" "maybe param" "maybe type" "temp"
          (770608 'move' call_tmp[770605](481870 call isTrue tmp[481869]))
          (669191 'move' tmp[669186](669189 call _cond_test call_tmp[770605]))
          if tmp[669186]
          {
            (669196 'move' tmp[669185](669193 '_paramFoldLogical' tmp[669186] 1))
          }
          {
            unknown tmp[669198] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[770612] "expr temp" "maybe param" "maybe type" "temp"
            (770615 'move' call_tmp[770612](400397 call l _mt[203] this[85298]))
            unknown call_tmp[770619] "expr temp" "maybe param" "maybe type" "temp"
            (770622 'move' call_tmp[770619](85354 call(85351 call (partial) testAndSet _mt[203] call_tmp[770612]) acquire[81222]))
            (669200 'move' tmp[669198](481874 call isTrue call_tmp[770619]))
            (669205 'move' tmp[669185](669202 '_paramFoldLogical' tmp[669186] tmp[669198]))
          }
          (85359 'move' tmp[85333](85342 call _cond_test tmp[669185]))
          tmp[85333]
        }
        label _breakLabel[85337]
      }
      (85391 'elided on block' 0 tmp[85387])
    }
    (599578 return _void[46])
    (396081 'used modules list'(85309 'use' currentTask[68749]))
  }
  function chpl_LocalSpinlock[85418].unlock[85397](arg _mt[85401]:_MT[201], ref arg this[85399]:chpl_LocalSpinlock[85418]) : _unknown[42] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[770626] "expr temp" "maybe param" "maybe type" "temp"
    (770629 'move' call_tmp[770626](400414 call l _mt[203] this[85399]))
    (85410 call(85407 call (partial) clear _mt[203] call_tmp[770626]) release[81220])
    (599580 return _void[46])
  }
  function chpl_LocalSpinlock[85418].l[1060078](arg _mt[1060080]:_MT[201], ref arg this[1060082]:chpl_LocalSpinlock[85418]) ref : _unknown[42] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[1060092] "RVV" "temp"
    unknown call_tmp[1060099] "expr temp" "maybe param" "maybe type" "temp"
    (1060102 'move' call_tmp[1060099](1060086 '.' this[1060082] c"l"))
    (1060097 'move' ret[1060092](1060096 'addr of' call_tmp[1060099]))
    (1060094 return ret[1060092])
  }
  function chpl_LocalSpinlock[85418].deinit[1060104](arg _mt[1060106]:_MT[201], arg this[1060108]:chpl_LocalSpinlock[85418]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (1060116 return _void[46])
  }
  function chpl_LocalSpinlock[85418].serialize[1060118](arg _mt[1060122]:_MT[201], arg this[1060120]:chpl_LocalSpinlock[85418], arg writer[1060121]:_any[141](?), ref arg serializer[1060126]:_any[141](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (1060129 call serializeDefaultImpl writer[1060121] serializer[1060126] this[1060120])
    (1060135 return _void[46])
  }
  function chpl_LocalSpinlock[85418].deserialize[1060137](arg _mt[1060141]:_MT[201], ref arg this[1060139]:chpl_LocalSpinlock[85418], arg reader[1060140]:_any[141](?), ref arg deserializer[1060146]:_any[141](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    unknown _deser_temp[1060148] "temp"
    (1060150 'move' _deser_temp[1060148] this[1060139])
    (1060153 call deserializeDefaultImpl reader[1060140] deserializer[1060146] _deser_temp[1060148])
    (1060159 return _void[46])
  }
  function chpl_LocalSpinlock[85418].=[1060161](arg _mt[1060163]:_MT[201], arg this[1060165]:chpl_LocalSpinlock[85418], ref arg _arg1[1060167]:chpl_LocalSpinlock[85418], const?  ref arg _arg2[1060168]:chpl_LocalSpinlock[85418]) : void[4] "assignop" "compiler generated" "last resort" "method" "operator"
  {
    unknown call_tmp[1060194] "expr temp" "maybe param" "maybe type" "temp"
    (1060197 'move' call_tmp[1060194](1060178 call l _mt[203] _arg1[1060167]))
    unknown call_tmp[1060201] "expr temp" "maybe param" "maybe type" "temp"
    (1060204 'move' call_tmp[1060201](1060182 call l _mt[203] _arg2[1060168]))
    (1060186 call = call_tmp[1060194] call_tmp[1060201])
    (1060190 return _void[46])
  }
  where {
    unknown call_tmp[1060206] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1060209 'move' call_tmp[1060206](1060171 'typeof' _arg1[1060167]))
    unknown call_tmp[1060211] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1060214 'move' call_tmp[1060211](1060173 'typeof' _arg2[1060168]))
    (1060175 call == call_tmp[1060206] call_tmp[1060211])
  }
  function chpl_LocalSpinlock[85418].hash[1060216](arg _mt[1060219]:_MT[201], arg this[1060218]:chpl_LocalSpinlock[85418]) : _unknown[42] "compiler generated" "last resort" "method"
  {
    unknown ret[1060233] "RVV" "temp"
    unknown call_tmp[1060240] "expr temp" "maybe param" "maybe type" "temp"
    (1060243 'move' call_tmp[1060240](1060222 call l _mt[203] this[1060218]))
    unknown call_tmp[1060245] "expr temp" "maybe param" "maybe type" "temp"
    (1060248 'move' call_tmp[1060245](1060226 call chpl__defaultHashWrapperInner call_tmp[1060240]))
    (1060238 'move' ret[1060233](1060237 'deref' call_tmp[1060245]))
    (1060235 return ret[1060233])
  }
  function chpl_fields_are_comparable[1060266](arg _arg1[1060268]:chpl_LocalSpinlock[85418], arg _arg2[1060269]:chpl_LocalSpinlock[85418]) param : bool[19] "compiler generated" "last resort" "param"
  {
    val ret[1060287]:bool[19] "RVV" "param" "temp"
    unknown call_tmp[1060294] "expr temp" "maybe param" "maybe type" "temp"
    (1060297 'move' call_tmp[1060294](1060272 call l _mt[203] _arg1[1060268]))
    unknown call_tmp[1060299] "expr temp" "maybe param" "maybe type" "temp"
    (1060302 'move' call_tmp[1060299](1060276 call l _mt[203] _arg2[1060269]))
    unknown call_tmp[1060304] "expr temp" "maybe param" "maybe type" "temp"
    (1060307 'move' call_tmp[1060304](1060280 'call resolves' c"==" call_tmp[1060294] call_tmp[1060299]))
    (1060292 'move' ret[1060287](1060291 'deref' call_tmp[1060304]))
    (1060289 return ret[1060287])
  }
  function chpl_LocalSpinlock[85418].==[1060250](arg _mt[1060252]:_MT[201], arg this[1060254]:chpl_LocalSpinlock[85418], arg _arg1[1060256]:chpl_LocalSpinlock[85418], arg _arg2[1060257]:chpl_LocalSpinlock[85418]) : bool[19] "compiler generated" "last resort" "method" "operator"
  {
    val ret[1060336]:bool[19] "RVV" "temp"
    unknown call_tmp[1060348] "expr temp" "maybe param" "maybe type" "temp"
    (1060351 'move' call_tmp[1060348](1060315 call l _mt[203] _arg1[1060256]))
    unknown call_tmp[1060353] "expr temp" "maybe param" "maybe type" "temp"
    (1060356 'move' call_tmp[1060353](1060319 call l _mt[203] _arg2[1060257]))
    unknown call_tmp[1060358] "expr temp" "maybe param" "maybe type" "temp"
    (1060361 'move' call_tmp[1060358](1060323 call chpl_field_neq call_tmp[1060348] call_tmp[1060353]))
    if call_tmp[1060358]
    {
      (1060341 'move' ret[1060336](1060340 'deref' 0))
      gotoReturn _end_==[1060334] _end_==[1060334]
    }
    (1060346 'move' ret[1060336](1060345 'deref' 1))
    label _end_==[1060334]
    (1060338 return ret[1060336])
  }
  where {
    unknown call_tmp[1060363] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1060366 'move' call_tmp[1060363](1060260 'typeof' _arg1[1060256]))
    unknown call_tmp[1060368] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1060371 'move' call_tmp[1060368](1060262 'typeof' _arg2[1060257]))
    unknown call_tmp[1060373] "expr temp" "maybe param" "maybe type" "temp"
    (1060376 'move' call_tmp[1060373](1060264 call == call_tmp[1060363] call_tmp[1060368]))
    unknown call_tmp[1060378] "expr temp" "maybe param" "maybe type" "temp"
    (1060381 'move' call_tmp[1060378](1060309 call chpl_fields_are_comparable[1060266] _arg1[1060256] _arg2[1060257]))
    (1060313 '&' call_tmp[1060373] call_tmp[1060378])
  }
  function chpl_fields_are_comparable[1060399](arg _arg1[1060401]:chpl_LocalSpinlock[85418], arg _arg2[1060402]:chpl_LocalSpinlock[85418]) param : bool[19] "compiler generated" "last resort" "param"
  {
    val ret[1060420]:bool[19] "RVV" "param" "temp"
    unknown call_tmp[1060427] "expr temp" "maybe param" "maybe type" "temp"
    (1060430 'move' call_tmp[1060427](1060405 call l _mt[203] _arg1[1060401]))
    unknown call_tmp[1060432] "expr temp" "maybe param" "maybe type" "temp"
    (1060435 'move' call_tmp[1060432](1060409 call l _mt[203] _arg2[1060402]))
    unknown call_tmp[1060437] "expr temp" "maybe param" "maybe type" "temp"
    (1060440 'move' call_tmp[1060437](1060413 'call resolves' c"!=" call_tmp[1060427] call_tmp[1060432]))
    (1060425 'move' ret[1060420](1060424 'deref' call_tmp[1060437]))
    (1060422 return ret[1060420])
  }
  function chpl_LocalSpinlock[85418].!=[1060383](arg _mt[1060385]:_MT[201], arg this[1060387]:chpl_LocalSpinlock[85418], arg _arg1[1060389]:chpl_LocalSpinlock[85418], arg _arg2[1060390]:chpl_LocalSpinlock[85418]) : bool[19] "compiler generated" "last resort" "method" "operator"
  {
    val ret[1060469]:bool[19] "RVV" "temp"
    unknown call_tmp[1060481] "expr temp" "maybe param" "maybe type" "temp"
    (1060484 'move' call_tmp[1060481](1060448 call l _mt[203] _arg1[1060389]))
    unknown call_tmp[1060486] "expr temp" "maybe param" "maybe type" "temp"
    (1060489 'move' call_tmp[1060486](1060452 call l _mt[203] _arg2[1060390]))
    unknown call_tmp[1060491] "expr temp" "maybe param" "maybe type" "temp"
    (1060494 'move' call_tmp[1060491](1060456 call chpl_field_neq call_tmp[1060481] call_tmp[1060486]))
    if call_tmp[1060491]
    {
      (1060474 'move' ret[1060469](1060473 'deref' 1))
      gotoReturn _end_!=[1060467] _end_!=[1060467]
    }
    (1060479 'move' ret[1060469](1060478 'deref' 0))
    label _end_!=[1060467]
    (1060471 return ret[1060469])
  }
  where {
    unknown call_tmp[1060496] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1060499 'move' call_tmp[1060496](1060393 'typeof' _arg1[1060389]))
    unknown call_tmp[1060501] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1060504 'move' call_tmp[1060501](1060395 'typeof' _arg2[1060390]))
    unknown call_tmp[1060506] "expr temp" "maybe param" "maybe type" "temp"
    (1060509 'move' call_tmp[1060506](1060397 call == call_tmp[1060496] call_tmp[1060501]))
    unknown call_tmp[1060511] "expr temp" "maybe param" "maybe type" "temp"
    (1060514 'move' call_tmp[1060511](1060442 call chpl_fields_are_comparable[1060399] _arg1[1060389] _arg2[1060390]))
    (1060446 '&' call_tmp[1060506] call_tmp[1060511])
  }
  function chpl_fields_are_comparable[1060532](arg _arg1[1060534]:chpl_LocalSpinlock[85418], arg _arg2[1060535]:chpl_LocalSpinlock[85418]) param : bool[19] "compiler generated" "last resort" "param"
  {
    val ret[1060553]:bool[19] "RVV" "param" "temp"
    unknown call_tmp[1060560] "expr temp" "maybe param" "maybe type" "temp"
    (1060563 'move' call_tmp[1060560](1060538 call l _mt[203] _arg1[1060534]))
    unknown call_tmp[1060565] "expr temp" "maybe param" "maybe type" "temp"
    (1060568 'move' call_tmp[1060565](1060542 call l _mt[203] _arg2[1060535]))
    unknown call_tmp[1060570] "expr temp" "maybe param" "maybe type" "temp"
    (1060573 'move' call_tmp[1060570](1060546 'call resolves' c"<" call_tmp[1060560] call_tmp[1060565]))
    (1060558 'move' ret[1060553](1060557 'deref' call_tmp[1060570]))
    (1060555 return ret[1060553])
  }
  function chpl_LocalSpinlock[85418].<[1060516](arg _mt[1060518]:_MT[201], arg this[1060520]:chpl_LocalSpinlock[85418], arg _arg1[1060522]:chpl_LocalSpinlock[85418], arg _arg2[1060523]:chpl_LocalSpinlock[85418]) : bool[19] "compiler generated" "last resort" "method" "operator"
  {
    val ret[1060617]:bool[19] "RVV" "temp"
    unknown call_tmp[1060634] "expr temp" "maybe param" "maybe type" "temp"
    (1060637 'move' call_tmp[1060634](1060581 call l _mt[203] _arg1[1060522]))
    unknown call_tmp[1060639] "expr temp" "maybe param" "maybe type" "temp"
    (1060642 'move' call_tmp[1060639](1060585 call l _mt[203] _arg2[1060523]))
    unknown call_tmp[1060644] "expr temp" "maybe param" "maybe type" "temp"
    (1060647 'move' call_tmp[1060644](1060589 call chpl_field_lt call_tmp[1060634] call_tmp[1060639]))
    if call_tmp[1060644]
    {
      (1060622 'move' ret[1060617](1060621 'deref' 1))
      gotoReturn _end_<[1060615] _end_<[1060615]
    }
    unknown call_tmp[1060649] "expr temp" "maybe param" "maybe type" "temp"
    (1060652 'move' call_tmp[1060649](1060595 call l _mt[203] _arg1[1060522]))
    unknown call_tmp[1060654] "expr temp" "maybe param" "maybe type" "temp"
    (1060657 'move' call_tmp[1060654](1060599 call l _mt[203] _arg2[1060523]))
    unknown call_tmp[1060659] "expr temp" "maybe param" "maybe type" "temp"
    (1060662 'move' call_tmp[1060659](1060603 call chpl_field_gt call_tmp[1060649] call_tmp[1060654]))
    if call_tmp[1060659]
    {
      (1060627 'move' ret[1060617](1060626 'deref' 0))
      gotoReturn _end_<[1060615] _end_<[1060615]
    }
    (1060632 'move' ret[1060617](1060631 'deref' 0))
    label _end_<[1060615]
    (1060619 return ret[1060617])
  }
  where {
    unknown call_tmp[1060664] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1060667 'move' call_tmp[1060664](1060526 'typeof' _arg1[1060522]))
    unknown call_tmp[1060669] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1060672 'move' call_tmp[1060669](1060528 'typeof' _arg2[1060523]))
    unknown call_tmp[1060674] "expr temp" "maybe param" "maybe type" "temp"
    (1060677 'move' call_tmp[1060674](1060530 call == call_tmp[1060664] call_tmp[1060669]))
    unknown call_tmp[1060679] "expr temp" "maybe param" "maybe type" "temp"
    (1060682 'move' call_tmp[1060679](1060575 call chpl_fields_are_comparable[1060532] _arg1[1060522] _arg2[1060523]))
    (1060579 '&' call_tmp[1060674] call_tmp[1060679])
  }
  function chpl_fields_are_comparable[1060700](arg _arg1[1060702]:chpl_LocalSpinlock[85418], arg _arg2[1060703]:chpl_LocalSpinlock[85418]) param : bool[19] "compiler generated" "last resort" "param"
  {
    val ret[1060721]:bool[19] "RVV" "param" "temp"
    unknown call_tmp[1060728] "expr temp" "maybe param" "maybe type" "temp"
    (1060731 'move' call_tmp[1060728](1060706 call l _mt[203] _arg1[1060702]))
    unknown call_tmp[1060733] "expr temp" "maybe param" "maybe type" "temp"
    (1060736 'move' call_tmp[1060733](1060710 call l _mt[203] _arg2[1060703]))
    unknown call_tmp[1060738] "expr temp" "maybe param" "maybe type" "temp"
    (1060741 'move' call_tmp[1060738](1060714 'call resolves' c"<=" call_tmp[1060728] call_tmp[1060733]))
    (1060726 'move' ret[1060721](1060725 'deref' call_tmp[1060738]))
    (1060723 return ret[1060721])
  }
  function chpl_LocalSpinlock[85418].<=[1060684](arg _mt[1060686]:_MT[201], arg this[1060688]:chpl_LocalSpinlock[85418], arg _arg1[1060690]:chpl_LocalSpinlock[85418], arg _arg2[1060691]:chpl_LocalSpinlock[85418]) : bool[19] "compiler generated" "last resort" "method" "operator"
  {
    val ret[1060785]:bool[19] "RVV" "temp"
    unknown call_tmp[1060802] "expr temp" "maybe param" "maybe type" "temp"
    (1060805 'move' call_tmp[1060802](1060749 call l _mt[203] _arg1[1060690]))
    unknown call_tmp[1060807] "expr temp" "maybe param" "maybe type" "temp"
    (1060810 'move' call_tmp[1060807](1060753 call l _mt[203] _arg2[1060691]))
    unknown call_tmp[1060812] "expr temp" "maybe param" "maybe type" "temp"
    (1060815 'move' call_tmp[1060812](1060757 call chpl_field_lt call_tmp[1060802] call_tmp[1060807]))
    if call_tmp[1060812]
    {
      (1060790 'move' ret[1060785](1060789 'deref' 1))
      gotoReturn _end_<=[1060783] _end_<=[1060783]
    }
    unknown call_tmp[1060817] "expr temp" "maybe param" "maybe type" "temp"
    (1060820 'move' call_tmp[1060817](1060763 call l _mt[203] _arg1[1060690]))
    unknown call_tmp[1060822] "expr temp" "maybe param" "maybe type" "temp"
    (1060825 'move' call_tmp[1060822](1060767 call l _mt[203] _arg2[1060691]))
    unknown call_tmp[1060827] "expr temp" "maybe param" "maybe type" "temp"
    (1060830 'move' call_tmp[1060827](1060771 call chpl_field_gt call_tmp[1060817] call_tmp[1060822]))
    if call_tmp[1060827]
    {
      (1060795 'move' ret[1060785](1060794 'deref' 0))
      gotoReturn _end_<=[1060783] _end_<=[1060783]
    }
    (1060800 'move' ret[1060785](1060799 'deref' 1))
    label _end_<=[1060783]
    (1060787 return ret[1060785])
  }
  where {
    unknown call_tmp[1060832] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1060835 'move' call_tmp[1060832](1060694 'typeof' _arg1[1060690]))
    unknown call_tmp[1060837] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1060840 'move' call_tmp[1060837](1060696 'typeof' _arg2[1060691]))
    unknown call_tmp[1060842] "expr temp" "maybe param" "maybe type" "temp"
    (1060845 'move' call_tmp[1060842](1060698 call == call_tmp[1060832] call_tmp[1060837]))
    unknown call_tmp[1060847] "expr temp" "maybe param" "maybe type" "temp"
    (1060850 'move' call_tmp[1060847](1060743 call chpl_fields_are_comparable[1060700] _arg1[1060690] _arg2[1060691]))
    (1060747 '&' call_tmp[1060842] call_tmp[1060847])
  }
  function chpl_fields_are_comparable[1060868](arg _arg1[1060870]:chpl_LocalSpinlock[85418], arg _arg2[1060871]:chpl_LocalSpinlock[85418]) param : bool[19] "compiler generated" "last resort" "param"
  {
    val ret[1060889]:bool[19] "RVV" "param" "temp"
    unknown call_tmp[1060896] "expr temp" "maybe param" "maybe type" "temp"
    (1060899 'move' call_tmp[1060896](1060874 call l _mt[203] _arg1[1060870]))
    unknown call_tmp[1060901] "expr temp" "maybe param" "maybe type" "temp"
    (1060904 'move' call_tmp[1060901](1060878 call l _mt[203] _arg2[1060871]))
    unknown call_tmp[1060906] "expr temp" "maybe param" "maybe type" "temp"
    (1060909 'move' call_tmp[1060906](1060882 'call resolves' c">" call_tmp[1060896] call_tmp[1060901]))
    (1060894 'move' ret[1060889](1060893 'deref' call_tmp[1060906]))
    (1060891 return ret[1060889])
  }
  function chpl_LocalSpinlock[85418].>[1060852](arg _mt[1060854]:_MT[201], arg this[1060856]:chpl_LocalSpinlock[85418], arg _arg1[1060858]:chpl_LocalSpinlock[85418], arg _arg2[1060859]:chpl_LocalSpinlock[85418]) : bool[19] "compiler generated" "last resort" "method" "operator"
  {
    val ret[1060953]:bool[19] "RVV" "temp"
    unknown call_tmp[1060970] "expr temp" "maybe param" "maybe type" "temp"
    (1060973 'move' call_tmp[1060970](1060917 call l _mt[203] _arg1[1060858]))
    unknown call_tmp[1060975] "expr temp" "maybe param" "maybe type" "temp"
    (1060978 'move' call_tmp[1060975](1060921 call l _mt[203] _arg2[1060859]))
    unknown call_tmp[1060980] "expr temp" "maybe param" "maybe type" "temp"
    (1060983 'move' call_tmp[1060980](1060925 call chpl_field_gt call_tmp[1060970] call_tmp[1060975]))
    if call_tmp[1060980]
    {
      (1060958 'move' ret[1060953](1060957 'deref' 1))
      gotoReturn _end_>[1060951] _end_>[1060951]
    }
    unknown call_tmp[1060985] "expr temp" "maybe param" "maybe type" "temp"
    (1060988 'move' call_tmp[1060985](1060931 call l _mt[203] _arg1[1060858]))
    unknown call_tmp[1060990] "expr temp" "maybe param" "maybe type" "temp"
    (1060993 'move' call_tmp[1060990](1060935 call l _mt[203] _arg2[1060859]))
    unknown call_tmp[1060995] "expr temp" "maybe param" "maybe type" "temp"
    (1060998 'move' call_tmp[1060995](1060939 call chpl_field_lt call_tmp[1060985] call_tmp[1060990]))
    if call_tmp[1060995]
    {
      (1060963 'move' ret[1060953](1060962 'deref' 0))
      gotoReturn _end_>[1060951] _end_>[1060951]
    }
    (1060968 'move' ret[1060953](1060967 'deref' 0))
    label _end_>[1060951]
    (1060955 return ret[1060953])
  }
  where {
    unknown call_tmp[1061000] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1061003 'move' call_tmp[1061000](1060862 'typeof' _arg1[1060858]))
    unknown call_tmp[1061005] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1061008 'move' call_tmp[1061005](1060864 'typeof' _arg2[1060859]))
    unknown call_tmp[1061010] "expr temp" "maybe param" "maybe type" "temp"
    (1061013 'move' call_tmp[1061010](1060866 call == call_tmp[1061000] call_tmp[1061005]))
    unknown call_tmp[1061015] "expr temp" "maybe param" "maybe type" "temp"
    (1061018 'move' call_tmp[1061015](1060911 call chpl_fields_are_comparable[1060868] _arg1[1060858] _arg2[1060859]))
    (1060915 '&' call_tmp[1061010] call_tmp[1061015])
  }
  function chpl_fields_are_comparable[1061036](arg _arg1[1061038]:chpl_LocalSpinlock[85418], arg _arg2[1061039]:chpl_LocalSpinlock[85418]) param : bool[19] "compiler generated" "last resort" "param"
  {
    val ret[1061057]:bool[19] "RVV" "param" "temp"
    unknown call_tmp[1061064] "expr temp" "maybe param" "maybe type" "temp"
    (1061067 'move' call_tmp[1061064](1061042 call l _mt[203] _arg1[1061038]))
    unknown call_tmp[1061069] "expr temp" "maybe param" "maybe type" "temp"
    (1061072 'move' call_tmp[1061069](1061046 call l _mt[203] _arg2[1061039]))
    unknown call_tmp[1061074] "expr temp" "maybe param" "maybe type" "temp"
    (1061077 'move' call_tmp[1061074](1061050 'call resolves' c">=" call_tmp[1061064] call_tmp[1061069]))
    (1061062 'move' ret[1061057](1061061 'deref' call_tmp[1061074]))
    (1061059 return ret[1061057])
  }
  function chpl_LocalSpinlock[85418].>=[1061020](arg _mt[1061022]:_MT[201], arg this[1061024]:chpl_LocalSpinlock[85418], arg _arg1[1061026]:chpl_LocalSpinlock[85418], arg _arg2[1061027]:chpl_LocalSpinlock[85418]) : bool[19] "compiler generated" "last resort" "method" "operator"
  {
    val ret[1061121]:bool[19] "RVV" "temp"
    unknown call_tmp[1061138] "expr temp" "maybe param" "maybe type" "temp"
    (1061141 'move' call_tmp[1061138](1061085 call l _mt[203] _arg1[1061026]))
    unknown call_tmp[1061143] "expr temp" "maybe param" "maybe type" "temp"
    (1061146 'move' call_tmp[1061143](1061089 call l _mt[203] _arg2[1061027]))
    unknown call_tmp[1061148] "expr temp" "maybe param" "maybe type" "temp"
    (1061151 'move' call_tmp[1061148](1061093 call chpl_field_gt call_tmp[1061138] call_tmp[1061143]))
    if call_tmp[1061148]
    {
      (1061126 'move' ret[1061121](1061125 'deref' 1))
      gotoReturn _end_>=[1061119] _end_>=[1061119]
    }
    unknown call_tmp[1061153] "expr temp" "maybe param" "maybe type" "temp"
    (1061156 'move' call_tmp[1061153](1061099 call l _mt[203] _arg1[1061026]))
    unknown call_tmp[1061158] "expr temp" "maybe param" "maybe type" "temp"
    (1061161 'move' call_tmp[1061158](1061103 call l _mt[203] _arg2[1061027]))
    unknown call_tmp[1061163] "expr temp" "maybe param" "maybe type" "temp"
    (1061166 'move' call_tmp[1061163](1061107 call chpl_field_lt call_tmp[1061153] call_tmp[1061158]))
    if call_tmp[1061163]
    {
      (1061131 'move' ret[1061121](1061130 'deref' 0))
      gotoReturn _end_>=[1061119] _end_>=[1061119]
    }
    (1061136 'move' ret[1061121](1061135 'deref' 1))
    label _end_>=[1061119]
    (1061123 return ret[1061121])
  }
  where {
    unknown call_tmp[1061168] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1061171 'move' call_tmp[1061168](1061030 'typeof' _arg1[1061026]))
    unknown call_tmp[1061173] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (1061176 'move' call_tmp[1061173](1061032 'typeof' _arg2[1061027]))
    unknown call_tmp[1061178] "expr temp" "maybe param" "maybe type" "temp"
    (1061181 'move' call_tmp[1061178](1061034 call == call_tmp[1061168] call_tmp[1061173]))
    unknown call_tmp[1061183] "expr temp" "maybe param" "maybe type" "temp"
    (1061186 'move' call_tmp[1061183](1061079 call chpl_fields_are_comparable[1061036] _arg1[1061026] _arg2[1061027]))
    (1061083 '&' call_tmp[1061178] call_tmp[1061183])
  }
  type chpl_LocalSpinlock[85418] unknown l[85243](85245 call chpl__processorAtomicType bool[19])
  (396077 'used modules list'(85235 'use' Atomics[85230])(85237 'use' ChapelBase[77907])(85239 'use' MemConsistency[81470]))
}