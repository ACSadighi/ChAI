AST dump for CTypes after pass cleanup.
Module use list: 

{
  (387008 'use' ChapelStandard)
  (46752 'use' HaltWrappers)
  (46755 'use' ChapelSysCTypes)
  unknown c_float[46758] "extern" "type variable"(46760 call real[13] 32)
  unknown c_double[46764] "extern" "type variable"(46766 call real[13] 64)
  unknown cFileTypeHasPointer[46770] "config" "deprecated" "param" 0
  (46773 'end of statement')
  type c_FILE[46778]
  unknown c_void_ptr[46781] "deprecated" "last resort" "type variable"(46783 call c_ptr void[4])
  function c_ptr[46891](?).this[46791](arg _mt[46799]:_MT[201], arg this[46793]:c_ptr[46891](?), arg i[46796] :
  integral) ref : _unknown[42] "inline" "method" "primary method"
  {
    if(46822 call _cond_test(46813 call ==(46818 call . this c"eltType") void[4]))
    {
      (46804 call compilerError(46805 call + "Cannot dereference a void pointer; cast to a " "non-opaque pointee type first."))
    }
    (46826 return(46827 'array_get' this i))
  }
  function c_ptr[46891](?).deref[46832](arg _mt[46836]:_MT[201], arg this[46834]:c_ptr[46891](?)) ref : _unknown[42] "inline" "method" "primary method"
  {
    if(46853 call _cond_test(46846 call ==(46849 call . this c"eltType") void[4]))
    {
      (46841 call compilerError(46842 call + "Cannot dereference a void pointer; cast to a " "non-opaque pointee type first."))
    }
    (46857 return(46858 'array_get' this 0))
  }
  function c_ptr[46891](?).serialize[46863](arg _mt[46871]:_MT[201], arg this[46865]:c_ptr[46891](?), arg writer[46867]:_any[141](?), ref arg serializer[46869]:_any[141](?)) : _unknown[42] throws "inline" "method" "primary method" "no return value for void"
  {
    (46885 call(46882 call .(46874 call : this(46878 call c_ptr void[4])) c"serialize") writer serializer)
  }
  type c_ptr[46891](?) unknown eltType[46789] "type variable" writeSerializable
  function c_ptrConst[46990](?).this[46898](arg _mt[46906]:_MT[201], arg this[46900]:c_ptrConst[46990](?), arg i[46903] :
  integral) const ref : _unknown[42] "inline" "method" "primary method"
  {
    if(46923 call _cond_test(46916 call ==(46919 call . this c"eltType") void[4]))
    {
      (46911 call compilerError(46912 call + "Cannot dereference a void pointer; cast to a " "non-opaque pointee type first."))
    }
    (46927 return(46928 'array_get' this i))
  }
  function c_ptrConst[46990](?).deref[46933](arg _mt[46937]:_MT[201], arg this[46935]:c_ptrConst[46990](?)) const ref : _unknown[42] "inline" "method" "primary method"
  {
    if(46954 call _cond_test(46947 call ==(46950 call . this c"eltType") void[4]))
    {
      (46942 call compilerError(46943 call + "Cannot dereference a void pointer; cast to a " "non-opaque pointee type first."))
    }
    (46958 return(46959 'array_get' this 0))
  }
  function c_ptrConst[46990](?).serialize[46964](arg _mt[46972]:_MT[201], arg this[46966]:c_ptrConst[46990](?), arg writer[46968]:_any[141](?), ref arg serializer[46970]:_any[141](?)) : _unknown[42] throws "inline" "method" "primary method" "no return value for void"
  {
    (46984 call(46981 call .(46975 call : this(46979 call c_ptr void[4])) c"serialize") writer serializer)
  }
  type c_ptrConst[46990](?) unknown eltType[46896] "type variable" writeSerializable
  function c_array[47643](?).init[47001](arg _mt[47009]:_MT[201], arg this[47003]:c_array[47643](?), arg eltType[47005]:_any[141](?), param arg size[47007]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    if(47022 call _cond_test(47018 call == eltType void[4]))
    {
      (47013 call compilerError "c_array element type cannot be 'void'")
    }
    if(47037 call _cond_test(47033 call == eltType nothing))
    {
      (47028 call compilerError "c_array element type cannot be 'nothing'")
    }
    (47042 call =(47045 call . this c"eltType") eltType)
    (47049 call =(47052 call . this c"size") size)
    (47060 call(47057 call . this c"chpl__initThisType"))
    unknown i[47062] 0
    (47065 'end of statement')
    {
      unknown tmp[47090] "temp"
      (47114 'move' tmp[47090](47109 call _cond_test(47111 call < i size)))
      WhileDo[47095]
      {
        {
          unknown default[47072] "no auto destroy" eltType
          (47075 'end of statement')
          unknown eltRef[47077] "ref var"(47078 'array_get' this i)
          (47082 'end of statement')
          (47083 '=' eltRef default)
          (47086 call += i 1)
        }
        label _continueLabel[47093]
        (47104 'move' tmp[47090](47099 call _cond_test(47101 call < i size)))
        tmp[47090]
      }
      label _breakLabel[47094]
    }
  }
  function c_array[47643](?).deinit[47119](arg _mt[47123]:_MT[201], arg this[47121]:c_array[47643](?)) : _unknown[42] "destructor" "method" "primary method" "no return value for void"
  {
    unknown i[47127] 0
    (47130 'end of statement')
    {
      unknown tmp[47145] "temp"
      (47169 'move' tmp[47145](47164 call _cond_test(47166 call < i size)))
      WhileDo[47150]
      {
        {
          (47137 call chpl__autoDestroy(47138 'array_get' this i))
          (47141 call += i 1)
        }
        label _continueLabel[47148]
        (47159 'move' tmp[47145](47154 call _cond_test(47156 call < i size)))
        tmp[47145]
      }
      label _breakLabel[47149]
    }
  }
  function c_array[47643](?).this[47174](arg _mt[47182]:_MT[201], ref arg this[47176]:c_array[47643](?), arg i[47179] :
  integral) ref : _unknown[42] "inline" "method" "primary method"
  {
    if(47234 call _cond_test boundsChecking)
    {
      if(47228 call _cond_test(47218 call ||(47220 call < i 0)(47224 call >= i size)))
      {
        (47190 call(47187 call . HaltWrappers c"boundsCheckHalt")(47191 call +(47193 call +(47195 call +(47197 call + "c array index out of bounds "(47202 call : i string[244])) "(indices are 0..")(47209 call :(47211 call - size 1) string[244])) ")"))
      }
    }
    (47239 return(47240 'array_get' this i))
  }
  { scopeless type
    eltType
  }
  function c_array[47643](?).this[47246](arg _mt[47254]:_MT[201], const  ref arg this[47248]:c_array[47643](?), arg i[47251] :
  integral) const ref : _unknown[42] "inline" "method" "primary method"
  {
    if(47302 call _cond_test boundsChecking)
    {
      if(47296 call _cond_test(47286 call ||(47288 call < i 0)(47292 call >= i size)))
      {
        (47262 call(47259 call . HaltWrappers c"boundsCheckHalt")(47263 call +(47265 call +(47267 call +(47269 call + "c array index out of bounds "(47272 call : i string[244])) "(indices are 0..")(47277 call :(47279 call - size 1) string[244])) ")"))
      }
    }
    (47307 return(47308 'array_get' this i))
  }
  { scopeless type
    eltType
  }
  function c_array[47643](?).this[47314](arg _mt[47322]:_MT[201], ref arg this[47316]:c_array[47643](?), param arg i[47319] :
  integral) ref : _unknown[42] "inline" "method" "primary method"
  {
    if(47361 call _cond_test(47351 call ||(47353 call < i 0)(47357 call >= i size)))
    {
      (47327 call compilerError(47328 call +(47330 call +(47332 call +(47334 call + "c array index out of bounds "(47337 call : i string[244])) "(indices are 0..")(47342 call :(47344 call - size 1) string[244])) ")"))
    }
    (47366 return(47367 'array_get' this i))
  }
  { scopeless type
    eltType
  }
  function c_array[47643](?).this[47373](arg _mt[47381]:_MT[201], const  ref arg this[47375]:c_array[47643](?), param arg i[47378] :
  integral) const ref : _unknown[42] "inline" "method" "primary method"
  {
    if(47420 call _cond_test(47410 call ||(47412 call < i 0)(47416 call >= i size)))
    {
      (47386 call compilerError(47387 call +(47389 call +(47391 call +(47393 call + "c array index out of bounds "(47396 call : i string[244])) "(indices are 0..")(47401 call :(47403 call - size 1) string[244])) ")"))
    }
    (47425 return(47426 'array_get' this i))
  }
  { scopeless type
    eltType
  }
  function c_array[47643](?).serialize[47432](arg _mt[47440]:_MT[201], const arg this[47434]:c_array[47643](?), arg writer[47436]:_any[141](?), ref arg serializer[47438]:_any[141](?)) : _unknown[42] throws "method" "primary method" "no return value for void"
  {
    (47449 call(47446 call . writer c"writeLiteral") "[")
    unknown first[47454] 1
    (47457 'end of statement')
    {
      unknown _indexOfInterest[47494] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[47495] "expr temp" "temp"
      (47504 'move' _iterator[47495](47502 call _getIterator(47511 call chpl_direct_counted_range_iter 0 size)))
      Defer
      {
        {
          (47526 call _freeIterator _iterator[47495])
        }
      }
      { scopeless type
        (47516 'move' _indexOfInterest[47494](47513 call iteratorIndex _iterator[47495]))
      }
      ForLoop[47496]
      {
        unknown i[47458] "index var" "insert auto destroy"
        (47521 'move' i[47458] _indexOfInterest[47494])
        {
          (47471 call(47468 call . writer c"write")(47473 call this i))
          if(47489 call _cond_test(47482 call != i(47485 call - size 1)))
          {
            (47479 call(47476 call . writer c"writeLiteral") ", ")
          }
        }
        label _continueLabel[47499]
        _indexOfInterest[47494]
        _iterator[47495]
      }
      label _breakLabel[47500]
    }
    (47537 call(47534 call . writer c"writeLiteral") "]")
  }
  function c_array[47643](?).init=[47543](arg _mt[47551]:_MT[201], arg this[47545]:c_array[47643](?), arg other[47548] :
  c_array) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (47554 call =(47557 call . this c"eltType")(47561 call . other c"eltType"))
    (47564 call =(47567 call . this c"size")(47571 call . other c"size"))
    (47578 call(47575 call . this c"chpl__initThisType"))
    {
      unknown _indexOfInterest[47601] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[47602] "expr temp" "temp"
      (47611 'move' _iterator[47602](47609 call _getIterator(47618 call chpl_direct_counted_range_iter 0 size)))
      Defer
      {
        {
          (47633 call _freeIterator _iterator[47602])
        }
      }
      { scopeless type
        (47623 'move' _indexOfInterest[47601](47620 call iteratorIndex _iterator[47602]))
      }
      ForLoop[47603]
      {
        unknown i[47579] "index var" "insert auto destroy"
        (47628 'move' i[47579] _indexOfInterest[47601])
        {
          unknown value[47589] "no auto destroy"(47592 call other i) eltType
          (47595 'end of statement')
          (47596 '='(47598 call this i) value)
        }
        label _continueLabel[47606]
        _indexOfInterest[47601]
        _iterator[47602]
      }
      label _breakLabel[47607]
    }
  }
  type c_array[47643](?) unknown eltType[46995] "type variable" unknown size[46998] "param" writeSerializable
  function _unknown[42].=[47645](arg _mt[47659]:_MT[201], arg this[47648] :
  c_array, ref arg lhs[47652] :
  c_array, arg rhs[47656] :
  c_array) : _unknown[42] "assignop" "method" "operator" "no return value for void"
  {
    if(47678 call _cond_test(47668 call !=(47671 call . lhs c"eltType")(47675 call . rhs c"eltType")))
    {
      (47663 call compilerError "element type mismatch in c_array assignment")
    }
    if(47699 call _cond_test(47689 call !=(47692 call . lhs c"size")(47696 call . rhs c"size")))
    {
      (47684 call compilerError "size mismatch in c_array assignment")
    }
    {
      unknown _indexOfInterest[47724] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[47725] "expr temp" "temp"
      (47734 'move' _iterator[47725](47732 call _getIterator(47744 call chpl_direct_counted_range_iter 0(47740 call . lhs c"size"))))
      Defer
      {
        {
          (47759 call _freeIterator _iterator[47725])
        }
      }
      { scopeless type
        (47749 'move' _indexOfInterest[47724](47746 call iteratorIndex _iterator[47725]))
      }
      ForLoop[47726]
      {
        unknown i[47704] "index var" "insert auto destroy"
        (47754 'move' i[47704] _indexOfInterest[47724])
        {
          (47716 call =(47719 call lhs i)(47722 call rhs i))
        }
        label _continueLabel[47729]
        _indexOfInterest[47724]
        _iterator[47725]
      }
      label _breakLabel[47730]
    }
  }
  function =[47768](ref arg lhs[47771] :
  c_ptr, ref arg rhs[47775] :
  c_array) : _unknown[42] "assignop" "operator" "no return value for void"
  {
    if(47802 call _cond_test(47783 call &&(47785 call !=(47788 call . lhs c"eltType")(47792 call . rhs c"eltType"))(47795 call !=(47798 call . lhs c"eltType") void[4])))
    {
      (47780 call compilerError "element type mismatch in c_array assignment")
    }
    (47807 call = lhs(47811 call c_ptrTo(47813 call rhs 0)))
  }
  unknown writable_c_ptr_void[47818] "type variable"(47820 call c_ptr void[4])
  function _unknown[42].serialize[47823](arg _mt[47833]:_MT[201], arg this[47826] :
  writable_c_ptr_void, arg writer[47829]:_any[141](?), ref arg serializer[47831]:_any[141](?)) : _unknown[42] throws "inline" "method" "no return value for void"
  {
    (47842 call(47839 call . writer c"writef") "0x%xu"(47846 call : this c_uintptr))
  }
  function _unknown[42].=[47852](arg _mt[47866]:_MT[201], arg this[47855] :
  c_ptr, ref arg lhs[47859] :
  c_ptr, arg rhs[47863] :
  c_ptr) : _unknown[42] "assignop" "inline" "method" "operator" "no return value for void"
  {
    if(47903 call _cond_test(47875 call &&(47877 call &&(47879 call !=(47882 call . lhs c"eltType")(47886 call . rhs c"eltType"))(47889 call !=(47892 call . lhs c"eltType") void[4]))(47896 call !=(47899 call . rhs c"eltType") void[4])))
    {
      (47870 call compilerError "element type mismatch in c_ptr assignment")
    }
    (47908 '=' lhs rhs)
  }
  function _unknown[42].=[47913](arg _mt[47931]:_MT[201], arg this[47916] :
  c_ptr, ref arg lhs[47922] :
  (47920 call c_ptr void[4]), arg rhs[47928] :
  (47926 call c_ptr void[4])) : _unknown[42] "assignop" "inline" "last resort" "method" "operator" "no return value for void"
  {
    (47934 '=' lhs rhs)
  }
  function _unknown[42].=[47939](arg _mt[47953]:_MT[201], arg this[47942] :
  c_ptrConst, ref arg lhs[47946] :
  c_ptrConst, arg rhs[47950] :
  c_ptrConst) : _unknown[42] "assignop" "inline" "method" "operator" "no return value for void"
  {
    if(47990 call _cond_test(47962 call &&(47964 call &&(47966 call !=(47969 call . lhs c"eltType")(47973 call . rhs c"eltType"))(47976 call !=(47979 call . lhs c"eltType") void[4]))(47983 call !=(47986 call . rhs c"eltType") void[4])))
    {
      (47957 call compilerError "element type mismatch in c_ptrConst assignment")
    }
    (47995 '=' lhs rhs)
  }
  function _unknown[42].=[48000](arg _mt[48014]:_MT[201], arg this[48003] :
  c_ptr, ref arg lhs[48007] :
  c_ptr, arg rhs[48011] :
  _nilType) : _unknown[42] "assignop" "inline" "method" "operator" "no return value for void"
  {
    (48017 '=' lhs nil[32])
  }
  function _unknown[42].=[48022](arg _mt[48036]:_MT[201], arg this[48025] :
  c_ptrConst, ref arg lhs[48029] :
  c_ptrConst, arg rhs[48033] :
  _nilType) : _unknown[42] "assignop" "inline" "method" "operator" "no return value for void"
  {
    (48039 '=' lhs nil[32])
  }
  function :[48044](arg x[48047] :
  c_fn_ptr, arg t[48053] :
  (48051 call c_ptr void[4])) : _unknown[42] "inline" "operator"
  {
    (48057 return(48058 'cast'(48060 call c_ptr void[4]) x))
  }
  function ==[48065](arg a[48068] :
  c_fn_ptr, arg b[48072] :
  _nilType) : _unknown[42] "inline" "operator"
  {
    (48076 return(48077 call ==(48079 call : a(48083 call c_ptr void[4])) b))
  }
  function ==[48088](arg a[48091] :
  _nilType, arg b[48095] :
  c_fn_ptr) : _unknown[42] "inline" "operator"
  {
    (48099 return(48100 call == b a))
  }
  function !=[48106](arg a[48109] :
  c_fn_ptr, arg b[48113] :
  _nilType) : _unknown[42] "inline" "operator"
  {
    (48117 return(48118 call !(48120 call == a b)))
  }
  function !=[48126](arg a[48129] :
  _nilType, arg b[48133] :
  c_fn_ptr) : _unknown[42] "inline" "operator"
  {
    (48137 return(48138 call != b a))
  }
  function pointeeCastStrictAliasingAllowed[48144](arg from[48146]:_any[141](?), arg to[48148]:_any[141](?)) param : _unknown[42] "inline"
  {
    if(48221 call _cond_test(48213 call ||(48216 call isAnyCPtr from)(48219 call isAnyCPtr to)))
    {
      if(48208 call _cond_test(48200 call &&(48203 call isAnyCPtr from)(48206 call isAnyCPtr to)))
      {
        (48154 return(48156 call pointeeCastStrictAliasingAllowed(48158 call . from c"eltType")(48162 call . to c"eltType")))
      }
      {
        if(48195 call _cond_test(48191 call == from chpl_c_string))
        {
          (48166 return(48168 call pointeeCastStrictAliasingAllowed c_char(48171 call . to c"eltType")))
        }
        {
          if(48187 call _cond_test(48183 call == to chpl_c_string))
          {
            (48175 return(48177 call pointeeCastStrictAliasingAllowed(48179 call . from c"eltType") c_char))
          }
        }
      }
    }
    if(48238 call _cond_test(48228 call ||(48230 call == from void[4])(48234 call == to void[4])))
    {
      (48226 return 1)
    }
    if(48249 call _cond_test(48245 call == from to))
    {
      (48243 return 1)
    }
    if(48270 call _cond_test(48256 call ||(48258 call == to(48262 call int[10] 8))(48264 call == to(48268 call uint[86] 8))))
    {
      (48254 return 1)
    }
    if(48305 call _cond_test(48277 call &&(48279 call ||(48281 call &&(48284 call isIntegralType from)(48287 call isIntegralType to))(48289 call &&(48292 call isRealType from)(48295 call isRealType to)))(48297 call ==(48300 call numBytes from)(48303 call numBytes to))))
    {
      (48275 return 1)
    }
    (48309 return 0)
  }
  { scopeless type
    bool
  }
  function _unknown[42].:[48314](arg _mt[48328]:_MT[201], arg this[48317] :
  c_ptr, arg x[48321] :
  c_ptr, arg t[48325] :
  c_ptr) : _unknown[42] "inline" "method" "operator"
  {
    if(48377 call _cond_test(48365 call !(48368 call pointeeCastStrictAliasingAllowed(48370 call . x c"eltType")(48374 call . t c"eltType"))))
    {
      (48333 call compilerWarning(48334 call +(48336 call +(48338 call +(48340 call +(48342 call + "This cast from '"(48347 call :(48350 'typeof' x) string[244])) "' to '")(48355 call : t string[244])) "' casts a c_ptr to a pointer of non-equivalent, non-char ") "element type, which can cause undefined behavior."))
    }
    (48381 return(48382 'cast' t x))
  }
  function _unknown[42].:[48387](arg _mt[48401]:_MT[201], arg this[48390] :
  c_ptrConst, arg x[48394] :
  c_ptrConst, arg t[48398] :
  c_ptrConst) : _unknown[42] "inline" "method" "operator"
  {
    if(48439 call _cond_test(48432 call !(48435 call pointeeCastStrictAliasingAllowed(48437 'typeof' x) t)))
    {
      (48406 call compilerWarning(48407 call +(48409 call +(48411 call +(48413 call +(48415 call + "This cast from '"(48418 call :(48421 'typeof' x) string[244])) "' to '")(48424 call : t string[244])) "' casts a c_ptrConst to a pointer of non-equivalent, non-char ") "element type, which can cause undefined behavior."))
    }
    (48443 return(48444 'cast' t x))
  }
  function _unknown[42].:[48449](arg _mt[48463]:_MT[201], arg this[48452] :
  c_ptrConst, arg x[48456] :
  c_ptrConst, arg t[48460] :
  c_ptr) : _unknown[42] "inline" "method" "operator"
  {
    if(48499 call _cond_test(48492 call !(48495 call pointeeCastStrictAliasingAllowed(48497 'typeof' x) t)))
    {
      (48468 call compilerWarning(48469 call +(48471 call +(48473 call +(48475 call +(48477 call + "This cast from '"(48480 call :(48483 'typeof' x) string[244])) "' to '")(48486 call : t string[244])) "' casts a c_ptrConst to a pointer of non-equivalent, non-char ") "element type, which can cause undefined behavior."))
    }
    (48503 return(48504 'cast' t x))
  }
  function _unknown[42].:[48509](arg _mt[48523]:_MT[201], arg this[48512] :
  c_ptr, arg x[48516] :
  c_ptr, arg t[48520] :
  c_ptrConst) : _unknown[42] "inline" "method" "operator"
  {
    if(48559 call _cond_test(48552 call !(48555 call pointeeCastStrictAliasingAllowed(48557 'typeof' x) t)))
    {
      (48528 call compilerWarning(48529 call +(48531 call +(48533 call +(48535 call +(48537 call + "This cast from '"(48540 call :(48543 'typeof' x) string[244])) "' to '")(48546 call : t string[244])) "' casts a c_ptr to a pointer of non-equivalent, non-char ") "element type, which can cause undefined behavior."))
    }
    (48563 return(48564 'cast' t x))
  }
  function :[48569](ref arg x[48572] :
  c_array, arg t[48576] :
  c_ptr) : _unknown[42] "inline" "operator"
  {
    if(48625 call _cond_test(48618 call ==(48621 call . t c"eltType") void[4]))
    {
      (48580 return(48581 'cast' t(48584 call c_ptrTo(48586 call x 0))))
    }
    {
      if(48612 call _cond_test(48602 call ==(48605 call . x c"eltType")(48609 call . t c"eltType")))
      {
        (48589 return(48591 call c_ptrTo(48593 call x 0)))
      }
      {
        (48597 call compilerError "cast of c_array to c_ptr with a different element type")
      }
    }
  }
  function :[48633](const  ref arg x[48636] :
  c_array, arg t[48640] :
  c_ptrConst) : _unknown[42] "inline" "operator"
  {
    if(48687 call _cond_test(48680 call ==(48683 call . t c"eltType") void[4]))
    {
      (48644 return(48645 'cast' t(48648 call c_ptrToConst(48650 call x 0))))
    }
    {
      if(48674 call _cond_test(48664 call ==(48667 call . x c"eltType")(48671 call . t c"eltType")))
      {
        (48653 return(48655 call c_ptrToConst(48657 call x 0)))
      }
      {
        (48661 call compilerError "cast of c_array to c_ptr with a different element type")
      }
    }
  }
  function :[48695](arg x[48698] :
  c_ptr, arg t[48704] :
  (48702 call c_ptr void[4])) : _unknown[42] "inline" "operator"
  {
    (48708 return(48709 'cast' t x))
  }
  function :[48714](arg x[48717] :
  c_ptr, arg t[48723] :
  (48721 call c_ptrConst void[4])) : _unknown[42] "inline" "operator"
  {
    (48727 return(48728 'cast' t x))
  }
  function :[48733](arg x[48736] :
  c_ptrConst, arg t[48742] :
  (48740 call c_ptr void[4])) : _unknown[42] "inline" "operator"
  {
    (48746 return(48747 'cast' t x))
  }
  function :[48752](arg x[48755] :
  c_ptrConst, arg t[48761] :
  (48759 call c_ptrConst void[4])) : _unknown[42] "inline" "operator"
  {
    (48765 return(48766 'cast' t x))
  }
  function :[48771](arg x[48776] :
  (48774 call c_ptr void[4]), arg t[48780] :
  c_ptr) : _unknown[42] "inline" "operator"
  {
    (48784 return(48785 'cast' t x))
  }
  function :[48790](arg x[48795] :
  (48793 call c_ptr void[4]), arg t[48799] :
  c_ptrConst) : _unknown[42] "inline" "operator"
  {
    (48803 return(48804 'cast' t x))
  }
  function :[48809](arg x[48814] :
  (48812 call c_ptrConst void[4]), arg t[48818] :
  c_ptrConst) : _unknown[42] "inline" "operator"
  {
    (48822 return(48823 'cast' t x))
  }
  function _unknown[42].:[48828](arg _mt[48842]:_MT[201], arg this[48831] :
  c_ptr, arg x[48835] :
  c_ptr, arg t[48839] :
  string[244]) : _unknown[42] "inline" "method" "operator"
  {
    Try!
    {
      {
        (48846 return(48851 call(48848 call . string[244] c"createAdoptingBuffer")(48852 call :(48854 'ref to string' x)(48857 call c_ptrConst c_char))))
      }
    }
  }
  function _unknown[42].:[48864](arg _mt[48878]:_MT[201], arg this[48867] :
  c_ptrConst, arg x[48871] :
  c_ptrConst, arg t[48875] :
  string[244]) : _unknown[42] "inline" "method" "operator"
  {
    Try!
    {
      {
        (48882 return(48887 call(48884 call . string[244] c"createAdoptingBuffer")(48888 call :(48890 'ref to string' x)(48893 call c_ptrConst c_char))))
      }
    }
  }
  function :[48900](arg x[48905] :
  (48903 call c_ptr void[4]), arg t[48909] :
  class) : _unknown[42] "inline" "last resort" "operator"
  {
    if(48963 call _cond_test(48955 call ||(48958 call isUnmanagedClass t)(48961 call isBorrowedClass t)))
    {
      (48915 call compilerError(48916 call +(48918 call +(48920 call +(48922 call + "invalid cast from c_ptr(void) to "(48927 call : t string[244])) " - cast to ")(48934 call :(48937 call _to_nilable t) string[244])) " instead"))
    }
    {
      (48945 call compilerError(48946 call + "invalid cast from c_ptr(void) to managed type "(48951 call : t string[244])))
    }
    (48967 return(48968 'cast' t x))
  }
  function :[48973](arg x[48978] :
  (48976 call c_ptr void[4]), arg t[48984] :
  (48981 'to unmanaged class from unknown'(48983 'to nilable class from type' class))) : _unknown[42] "inline" "operator"
  {
    (48988 return(48989 'cast' t x))
  }
  function :[48994](arg x[48999] :
  (48997 call c_ptr void[4]), arg t[49005] :
  (49002 'to borrowed class from unknown'(49004 'to nilable class from type' class))) : _unknown[42] "inline" "operator"
  {
    (49009 return(49010 'cast' t x))
  }
  function :[49015](arg x[49018] :
  borrowed, arg t[49024] :
  (49022 call c_ptr void[4])) : _unknown[42] "deprecated" "inline" "operator"
  {
    (49028 return(49029 'cast' t x))
  }
  function :[49034](arg x[49037] :
  unmanaged[183](?), arg t[49043] :
  (49041 call c_ptr void[4])) : _unknown[42] "deprecated" "inline" "operator"
  {
    (49047 return(49048 'cast' t x))
  }
  function :[49053](arg x[49056] :
  c_ptr, arg t[49060] :
  _ddata) : _unknown[42] "inline" "operator"
  {
    (49083 return(49084 'cast' t x))
  }
  where {
    (49063 call ||(49065 call ==(49068 call . t c"eltType")(49072 call . x c"eltType"))(49075 call ==(49078 call . x c"eltType") void[4]))
  }
  function :[49090](arg x[49095] :
  (49093 call c_ptr void[4]), arg t[49099] :
  _ddata) : _unknown[42] "inline" "operator"
  {
    (49103 return(49104 'cast' t x))
  }
  function :[49109](arg x[49112] :
  _ddata, arg t[49118] :
  (49116 call c_ptr void[4])) : _unknown[42] "inline" "operator"
  {
    (49122 return(49123 'cast' t x))
  }
  function :[49128](arg x[49133] :
  (49131 call c_ptr void[4]), arg t[49137] :
  c_intptr) : _unknown[42] "inline" "operator"
  {
    (49141 return(49142 'cast' t x))
  }
  function :[49147](arg x[49152] :
  (49150 call c_ptr void[4]), arg t[49156] :
  c_uintptr) : _unknown[42] "inline" "operator"
  {
    (49160 return(49161 'cast' t x))
  }
  function :[49166](arg x[49171] :
  (49169 call c_ptr void[4]), arg t[49175] :
  int[10]) : _unknown[42] "inline" "operator"
  {
    (49183 return(49184 'cast' t x))
  }
  where {
    (49178 call != c_intptr int[10])
  }
  function :[49190](arg x[49195] :
  (49193 call c_ptr void[4]), arg t[49199] :
  uint[86]) : _unknown[42] "inline" "operator"
  {
    (49207 return(49208 'cast' t x))
  }
  where {
    (49202 call != c_uintptr uint[86])
  }
  function :[49214](arg x[49217] :
  c_intptr, arg t[49223] :
  (49221 call c_ptr void[4])) : _unknown[42] "inline" "operator"
  {
    (49227 return(49228 'cast' t x))
  }
  function :[49233](arg x[49236] :
  c_uintptr, arg t[49242] :
  (49240 call c_ptr void[4])) : _unknown[42] "inline" "operator"
  {
    (49246 return(49247 'cast' t x))
  }
  function :[49252](arg x[49255] :
  int[10], arg t[49261] :
  (49259 call c_ptr void[4])) : _unknown[42] "inline" "operator"
  {
    (49269 return(49270 'cast' t x))
  }
  where {
    (49264 call != c_intptr int[10])
  }
  function :[49276](arg x[49279] :
  uint[86], arg t[49285] :
  (49283 call c_ptr void[4])) : _unknown[42] "inline" "operator"
  {
    (49293 return(49294 'cast' t x))
  }
  where {
    (49288 call != c_uintptr uint[86])
  }
  function _unknown[42].==[49300](arg _mt[49314]:_MT[201], arg this[49303] :
  c_ptr, arg a[49307] :
  c_ptr, arg b[49311] :
  c_ptr) : _unknown[42] "inline" "method" "operator"
  {
    (49345 return(49346 'ptr_eq' a b))
  }
  where {
    (49316 call ||(49318 call ||(49320 call ==(49323 call . a c"eltType")(49327 call . b c"eltType"))(49330 call ==(49333 call . a c"eltType") void[4]))(49337 call ==(49340 call . b c"eltType") void[4]))
  }
  function ==[49352](arg a[49357] :
  (49355 call c_ptr void[4]), arg b[49363] :
  (49361 call c_ptr void[4])) : _unknown[42] "inline" "last resort" "operator"
  {
    (49367 return(49368 'ptr_eq' a b))
  }
  function !=[49373](arg a[49378] :
  (49376 call c_ptr void[4]), arg b[49384] :
  (49382 call c_ptr void[4])) : _unknown[42] "inline" "last resort" "operator"
  {
    (49388 return(49389 'ptr_neq' a b))
  }
  function ==[49394](arg a[49397] :
  c_ptr, arg b[49401] :
  _nilType) : _unknown[42] "inline" "operator"
  {
    (49405 return(49406 'ptr_eq' a b))
  }
  function ==[49411](arg a[49414] :
  _nilType, arg b[49418] :
  c_ptr) : _unknown[42] "inline" "operator"
  {
    (49422 return(49423 'ptr_eq' a b))
  }
  function _unknown[42].==[49428](arg _mt[49442]:_MT[201], arg this[49431] :
  c_ptrConst, arg a[49435] :
  c_ptrConst, arg b[49439] :
  c_ptrConst) : _unknown[42] "inline" "method" "operator"
  {
    (49473 return(49474 'ptr_eq' a b))
  }
  where {
    (49444 call ||(49446 call ||(49448 call ==(49451 call . a c"eltType")(49455 call . b c"eltType"))(49458 call ==(49461 call . a c"eltType") void[4]))(49465 call ==(49468 call . b c"eltType") void[4]))
  }
  function ==[49480](arg a[49483] :
  c_ptrConst, arg b[49487] :
  _nilType) : _unknown[42] "inline" "operator"
  {
    (49491 return(49492 'ptr_eq' a b))
  }
  function ==[49497](arg a[49500] :
  _nilType, arg b[49504] :
  c_ptrConst) : _unknown[42] "inline" "operator"
  {
    (49508 return(49509 'ptr_eq' a b))
  }
  function _unknown[42].!=[49514](arg _mt[49528]:_MT[201], arg this[49517] :
  c_ptr, arg a[49521] :
  c_ptr, arg b[49525] :
  c_ptr) : _unknown[42] "inline" "method" "operator"
  {
    (49559 return(49560 'ptr_neq' a b))
  }
  where {
    (49530 call ||(49532 call ||(49534 call ==(49537 call . a c"eltType")(49541 call . b c"eltType"))(49544 call ==(49547 call . a c"eltType") void[4]))(49551 call ==(49554 call . b c"eltType") void[4]))
  }
  function !=[49566](arg a[49569] :
  c_ptr, arg b[49573] :
  _nilType) : _unknown[42] "inline" "operator"
  {
    (49577 return(49578 'ptr_neq' a b))
  }
  function !=[49583](arg a[49586] :
  _nilType, arg b[49590] :
  c_ptr) : _unknown[42] "inline" "operator"
  {
    (49594 return(49595 'ptr_neq' a b))
  }
  function _unknown[42].!=[49600](arg _mt[49614]:_MT[201], arg this[49603] :
  c_ptrConst, arg a[49607] :
  c_ptrConst, arg b[49611] :
  c_ptrConst) : _unknown[42] "inline" "method" "operator"
  {
    (49645 return(49646 'ptr_neq' a b))
  }
  where {
    (49616 call ||(49618 call ||(49620 call ==(49623 call . a c"eltType")(49627 call . b c"eltType"))(49630 call ==(49633 call . a c"eltType") void[4]))(49637 call ==(49640 call . b c"eltType") void[4]))
  }
  function _unknown[42].!=[49652](arg _mt[49666]:_MT[201], arg this[49655] :
  c_ptrConst, arg a[49659] :
  c_ptrConst, arg b[49663] :
  _nilType) : _unknown[42] "inline" "method" "operator"
  {
    (49669 return(49670 'ptr_neq' a b))
  }
  function !=[49675](arg a[49678] :
  _nilType, arg b[49682] :
  c_ptrConst) : _unknown[42] "inline" "operator"
  {
    (49686 return(49687 'ptr_neq' a b))
  }
  function _unknown[42].![49692](arg _mt[49702]:_MT[201], arg this[49695] :
  c_ptr, arg x[49699] :
  c_ptr) : _unknown[42] "inline" "method" "operator"
  {
    (49705 return(49706 call == x nil[32]))
  }
  function _unknown[42].+[49712](arg _mt[49726]:_MT[201], arg this[49715] :
  c_ptr, arg a[49719] :
  c_ptr, arg b[49723] :
  integral) : _unknown[42] "inline" "method" "operator"
  {
    (49729 return(49730 '+' a b))
  }
  function _unknown[42].-[49735](arg _mt[49749]:_MT[201], arg this[49738] :
  c_ptr, arg a[49742] :
  c_ptr, arg b[49746] :
  integral) : _unknown[42] "inline" "method" "operator"
  {
    (49752 return(49753 '-' a b))
  }
  function _unknown[42].![49758](arg _mt[49768]:_MT[201], arg this[49761] :
  c_ptrConst, arg x[49765] :
  c_ptrConst) : _unknown[42] "inline" "method" "operator"
  {
    (49771 return(49772 call == x nil[32]))
  }
  function _unknown[42].+[49778](arg _mt[49792]:_MT[201], arg this[49781] :
  c_ptrConst, arg a[49785] :
  c_ptrConst, arg b[49789] :
  integral) : _unknown[42] "inline" "method" "operator"
  {
    (49795 return(49796 '+' a b))
  }
  function _unknown[42].-[49801](arg _mt[49815]:_MT[201], arg this[49804] :
  c_ptrConst, arg a[49808] :
  c_ptrConst, arg b[49812] :
  integral) : _unknown[42] "inline" "method" "operator"
  {
    (49818 return(49819 '-' a b))
  }
  function _unknown[42].-[49824](arg _mt[49843]:_MT[201], arg this[49827] :
  c_ptr, arg a[49834] :
  (49831 call c_ptr unknown t[49832]), arg b[49840] :
  (49838 call c_ptr t)) : _unknown[42] "inline" "method" "operator"
  {
    (49847 return(49849 call c_pointer_diff a b(49852 call :(49855 call c_sizeof(49857 call . a c"eltType")) c_ptrdiff)))
  }
  { scopeless type
    c_ptrdiff
  }
  function _unknown[42].-[49864](arg _mt[49883]:_MT[201], arg this[49867] :
  c_ptrConst, arg a[49874] :
  (49871 call c_ptrConst unknown t[49872]), arg b[49880] :
  (49878 call c_ptrConst t)) : _unknown[42] "inline" "method" "operator"
  {
    (49887 return(49889 call c_pointer_diff a b(49892 call :(49895 call c_sizeof(49897 call . a c"eltType")) c_ptrdiff)))
  }
  { scopeless type
    c_ptrdiff
  }
  function c_pointer_return[49904](ref arg x[49908] :
  unknown t[49906]) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
  {
  }
  { scopeless type
    (49912 call c_ptr t)
  }
  function c_pointer_return_const[49917](const  ref arg x[49921] :
  unknown t[49919]) : _unknown[42] "extern" "codegen for CPU and GPU" "local args" "no fn body" "fn synchronization free"
  {
  }
  { scopeless type
    (49925 call c_ptrConst t)
  }
  function c_pointer_diff[49930](arg a[49935] :
  (49933 call c_ptr void[4]), arg b[49941] :
  (49939 call c_ptr void[4]), arg eltSize[49945] :
  c_ptrdiff) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
  {
  }
  { scopeless type
    c_ptrdiff
  }
  unknown cPtrToLogicalValue[49953] "config" "deprecated" "param" 1
  (49956 'end of statement')
  function c_ptrTo[49957](ref arg x[49961] :
  unknown t[49959]) : _unknown[42] "inline"
  {
    if(49974 call _cond_test(49972 call isDomainType t))
    {
      (49966 call compilerError "c_ptrTo domain type not supported")
    }
    (49979 return(49981 call c_addrOf x))
  }
  function c_ptrTo[49985](arg x[49988] :
  c_fn_ptr) : _unknown[42] "inline"
  {
    (49992 return x)
  }
  function c_ptrTo[49996](ref arg arr[50001] :
  (49999 call chpl__buildArrayRuntimeType nil[32])) : _unknown[42] "inline"
  {
    if(50022 call _cond_test(50017 call !(50020 call chpl__isDROrDRView arr)))
    {
      (50012 call compilerError "Only single-locale rectangular arrays support c_ptrTo() at present")
    }
    if(50107 call _cond_test boundsChecking)
    {
      if(50083 call _cond_test(50073 call !=(50080 call chpl_localeID_to_locale(50079 '_wide_get_locale'(50076 call . arr c"_value"))) here))
      {
        (50029 call halt(50030 call +(50032 call +(50034 call +(50036 call +(50038 call + "c_ptrTo() can only be applied to an array from the locale on " "which it lives (array is on locale ")(50046 call :(50057 '_wide_get_node'(50051 call . arr c"_value")) string[244])) ", call was made on locale ")(50062 call :(50067 call . here c"id") string[244])) ")"))
      }
      if(50101 call _cond_test(50094 call ==(50097 call . arr c"size") 0))
      {
        (50089 call halt "Can't create a C pointer for an array with 0 elements.")
      }
    }
    (50111 return(50113 call c_pointer_return(50115 call arr(50120 call .(50117 call . arr c"_dom") c"low"))))
  }
  { scopeless type
    (50005 call c_ptr(50007 call . arr c"eltType"))
  }
  function c_ptrTo[50126](ref arg s[50129] :
  string[244]) : _unknown[42] "inline"
  {
    if(50156 call _cond_test boundsChecking)
    {
      if(50150 call _cond_test(50143 call ==(50146 call . s c"buffLen") 0))
      {
        (50138 call halt "Can't create a C pointer for an empty string.")
      }
    }
    (50160 return(50162 call c_pointer_return(50167 call(50164 call . s c"buff") 0)))
  }
  { scopeless type
    (50133 call c_ptr c_uchar)
  }
  function c_ptrTo[50172](ref arg b[50175] :
  bytes[232]) : _unknown[42] "inline"
  {
    if(50202 call _cond_test boundsChecking)
    {
      if(50196 call _cond_test(50189 call ==(50192 call . b c"buffLen") 0))
      {
        (50184 call halt "Can't create a C pointer for an empty bytes.")
      }
    }
    (50206 return(50208 call c_pointer_return(50213 call(50210 call . b c"buff") 0)))
  }
  { scopeless type
    (50179 call c_ptr c_uchar)
  }
  function c_ptrTo[50218](arg c[50221] :
  class) : _unknown[42] "inline"
  {
    (50228 return(50229 'cast'(50231 call c_ptr void[4])(50239 call(50236 call . c c"borrow"))))
  }
  { scopeless type
    (50225 call c_ptr void[4])
  }
  function c_ptrTo[50243](arg c[50247] :
  (50246 'to nilable class from type' class)) : _unknown[42] "inline"
  {
    (50254 return(50255 'cast'(50257 call c_ptr void[4])(50263 call(50260 call . c c"borrow"))))
  }
  { scopeless type
    (50251 call c_ptr void[4])
  }
  function c_ptrToConst[50267](const  ref arg x[50271] :
  unknown t[50269]) : _unknown[42] "inline"
  {
    if(50287 call _cond_test(50285 call isDomainType t))
    {
      (50279 call compilerError "c_ptrToConst domain type not supported")
    }
    (50292 return(50294 call c_addrOfConst x))
  }
  { scopeless type
    (50275 call c_ptrConst t)
  }
  function c_ptrToConst[50299](const arg arr[50304] :
  (50302 call chpl__buildArrayRuntimeType nil[32])) : _unknown[42] "inline"
  {
    if(50325 call _cond_test(50320 call !(50323 call chpl__isDROrDRView arr)))
    {
      (50315 call compilerError "Only single-locale rectangular arrays support c_ptrToConst() at present")
    }
    if(50400 call _cond_test boundsChecking)
    {
      if(50378 call _cond_test(50368 call !=(50375 call chpl_localeID_to_locale(50374 '_wide_get_locale'(50371 call . arr c"_value"))) here))
      {
        (50332 call halt(50333 call +(50335 call +(50337 call +(50339 call +(50341 call + "c_ptrToConst() can only be applied to an array from the locale on " "which it lives (array is on locale ")(50347 call :(50356 '_wide_get_node'(50350 call . arr c"_value")) string[244])) ", call was made on locale ")(50359 call :(50362 call . here c"id") string[244])) ")"))
      }
      if(50394 call _cond_test(50387 call ==(50390 call . arr c"size") 0))
      {
        (50384 call halt "Can't create a C pointer for an array with 0 elements.")
      }
    }
    (50404 return(50406 call c_pointer_return_const(50408 call arr(50413 call .(50410 call . arr c"_dom") c"low"))))
  }
  { scopeless type
    (50308 call c_ptrConst(50310 call . arr c"eltType"))
  }
  function c_ptrToConst[50419](const  ref arg s[50422] :
  string[244]) : _unknown[42] "inline"
  {
    if(50447 call _cond_test boundsChecking)
    {
      if(50441 call _cond_test(50434 call ==(50437 call . s c"buffLen") 0))
      {
        (50431 call halt "Can't create a C pointer for an empty string.")
      }
    }
    (50451 return(50453 call c_pointer_return_const(50458 call(50455 call . s c"buff") 0)))
  }
  { scopeless type
    (50426 call c_ptrConst c_uchar)
  }
  function c_ptrToConst[50463](const  ref arg b[50466] :
  bytes[232]) : _unknown[42] "inline"
  {
    if(50491 call _cond_test boundsChecking)
    {
      if(50485 call _cond_test(50478 call ==(50481 call . b c"buffLen") 0))
      {
        (50475 call halt "Can't create a C pointer for an empty bytes.")
      }
    }
    (50495 return(50497 call c_pointer_return_const(50502 call(50499 call . b c"buff") 0)))
  }
  { scopeless type
    (50470 call c_ptrConst c_uchar)
  }
  function c_ptrToConst[50507](const arg c[50510] :
  class) : _unknown[42] "inline"
  {
    (50517 return(50518 'cast'(50520 call c_ptrConst void[4])(50526 call(50523 call . c c"borrow"))))
  }
  { scopeless type
    (50514 call c_ptrConst void[4])
  }
  function c_ptrToConst[50530](const arg c[50534] :
  (50533 'to nilable class from type' class)) : _unknown[42] "inline"
  {
    (50541 return(50542 'cast'(50544 call c_ptrConst void[4])(50550 call(50547 call . c c"borrow"))))
  }
  { scopeless type
    (50538 call c_ptrConst void[4])
  }
  function c_addrOf[50554](ref arg arr[50559] :
  (50557 call chpl__buildArrayRuntimeType nil[32])) : _unknown[42] "inline"
  {
    if(50613 call _cond_test(50600 call && boundsChecking(50603 call !=(50610 call chpl_localeID_to_locale(50609 '_wide_get_locale'(50606 call . arr c"_value"))) here)))
    {
      (50564 call halt(50565 call +(50567 call +(50569 call +(50571 call +(50573 call + "c_addrOf() can only be applied to an array from the locale on " "which it lives (array is on locale ")(50579 call :(50588 '_wide_get_node'(50582 call . arr c"_value")) string[244])) ", call was made on locale ")(50591 call :(50594 call . here c"id") string[244])) ")"))
    }
    (50618 return(50620 call c_pointer_return arr))
  }
  function c_addrOfConst[50624](const arg arr[50629] :
  (50627 call chpl__buildArrayRuntimeType nil[32])) : _unknown[42] "inline"
  {
    if(50683 call _cond_test(50670 call && boundsChecking(50673 call !=(50680 call chpl_localeID_to_locale(50679 '_wide_get_locale'(50676 call . arr c"_value"))) here)))
    {
      (50634 call halt(50635 call +(50637 call +(50639 call +(50641 call +(50643 call + "c_addrOfConst() can only be applied to an array from the locale on " "which it lives (array is on locale ")(50649 call :(50658 '_wide_get_node'(50652 call . arr c"_value")) string[244])) ", call was made on locale ")(50661 call :(50664 call . here c"id") string[244])) ")"))
    }
    (50688 return(50690 call c_pointer_return_const arr))
  }
  function c_addrOf[50694](ref arg x[50698] :
  unknown t[50696]) : _unknown[42] "inline"
  {
    if(50714 call _cond_test(50712 call isDomainType t))
    {
      (50706 call compilerError "c_addrOf domain type not supported")
    }
    (50719 return(50721 call c_pointer_return x))
  }
  { scopeless type
    (50702 call c_ptr t)
  }
  function c_addrOfConst[50726](const  ref arg x[50730] :
  unknown t[50728]) : _unknown[42] "inline"
  {
    if(50746 call _cond_test(50744 call isDomainType t))
    {
      (50738 call compilerError "c_addrOfConst domain type not supported")
    }
    (50751 return(50753 call c_pointer_return_const x))
  }
  { scopeless type
    (50734 call c_ptrConst t)
  }
  function c_addrOf[50758](arg x[50761] :
  c_fn_ptr) : _unknown[42] "inline"
  {
    (50765 return x)
  }
  function offset_ARRAY_ELEMENTS[50769]() : _unknown[42] "no parens" "private"
  {
    const CHPL_RT_MD_ARRAY_ELEMENTS[50773] "const" "extern" chpl_mem_descInt_t
    (50776 'end of statement')
    function chpl_memhook_md_num[50777]() : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      chpl_mem_descInt_t
    }
    (50783 return(50784 call - CHPL_RT_MD_ARRAY_ELEMENTS(50788 call chpl_memhook_md_num)))
  }
  function c_sizeof[50791](arg t[50793]:_any[141](?)) : _unknown[42] "inline"
  {
    function sizeof[50797](arg t[50799]:_any[141](?)) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_size_t
    }
    (50805 return(50807 call sizeof t))
  }
  { scopeless type
    c_size_t
  }
  function c_offsetof[50812](arg t[50814]:_any[141](?), param arg fieldname[50817] :
  string[244]) : _unknown[42]
  {
    (50826 'use' Reflection)
    unknown x[50829] "no auto destroy" "no init" t
    (50832 'end of statement')
    (50833 return(50834 call -(50836 call :(50839 call c_addrOf(50841 call getFieldRef x fieldname)) c_size_t)(50845 call :(50848 call c_addrOf x) c_size_t)))
  }
  where {
    (50822 call isRecordType t)
  }
  { scopeless type
    c_size_t
  }
  function c_offsetof[50855](arg t[50857]:_any[141](?), param arg fieldname[50860] :
  string[244]) : _unknown[42] "no return value for void"
  {
    (50870 call compilerError "Cannot call c_offsetof on type that is not a record")
  }
  where {
    (50863 call !(50866 call isRecordType t))
  }
  function allocate[50877](arg eltType[50879]:_any[141](?), arg size[50882] :
  c_size_t, arg clear[50887] :
  bool =
  0, arg alignment[50893] :
  c_size_t =
  0) : _unknown[42] "inline" "@unstable"
  {
    const alloc_size[50902] "const"(50903 call * size(50907 call c_sizeof eltType))
    (50910 'end of statement')
    const aligned[50912] "const"(50914 call != alignment 0) bool
    (50919 'end of statement')
    unknown ptr[50921] nil[32](50923 call c_ptr void[4])
    (50927 'end of statement')
    if(51066 call _cond_test(51063 call ! aligned))
    {
      if(50947 call _cond_test clear)
      {
        (50930 call = ptr(50934 call chpl_here_calloc alloc_size 1 offset_ARRAY_ELEMENTS))
      }
      {
        (50939 call = ptr(50943 call chpl_here_alloc alloc_size offset_ARRAY_ELEMENTS))
      }
    }
    {
      if(51034 call _cond_test boundsChecking)
      {
        (50954 'use' Math)
        unknown one[50957] 1 c_size_t
        (50961 'end of statement')
        unknown p[50963](50965 call log2 alignment)
        (50968 'end of statement')
        if(50981 call _cond_test(50974 call <(50976 call << one p) alignment))
        {
          (50969 call += p 1)
        }
        (50987 call assert(50988 call <= alignment(50991 call << one p)))
        if(51009 call _cond_test(51002 call != alignment(51005 call << one p)))
        {
          (50996 call halt "allocate called with non-power-of-2 alignment " alignment)
        }
        if(51028 call _cond_test(51020 call < alignment(51024 call c_sizeof(51026 call c_ptr void[4]))))
        {
          (51015 call halt "allocate called with alignment smaller than pointer size")
        }
      }
      (51038 call = ptr(51042 call chpl_here_aligned_alloc alignment alloc_size offset_ARRAY_ELEMENTS))
      if(51059 call _cond_test clear)
      {
        (51051 'use'(51048 call . OS c"POSIX"))
        (51054 call memset ptr 0 alloc_size)
      }
    }
    (51070 return(51071 call : ptr(51075 call c_ptr eltType)))
  }
  { scopeless type
    (50898 call c_ptr eltType)
  }
  function deallocate[51080](arg data[51085] :
  (51083 call c_ptr void[4])) : _unknown[42] "inline" "@unstable" "no return value for void"
  {
    (51090 call chpl_here_free data)
  }
  function isAnyCPtr[51094](arg t[51097] :
  c_ptr) param : _unknown[42]
  {
    (51101 return 1)
  }
  function isAnyCPtr[51105](arg t[51108] :
  c_ptrConst) param : _unknown[42]
  {
    (51112 return 1)
  }
  function isAnyCPtr[51116](arg t[51118]:_any[141](?)) param : _unknown[42]
  {
    (51121 return 0)
  }
  function strLen[51125](arg x[51131] :
  (51128 call c_ptr unknown t[51129])) : _unknown[42] "inline" "@unstable"
  {
    (51136 return(51142 call(51139 call .(51137 'string_length_bytes' x) c"safeCast") int[10]))
  }
  { scopeless type
    int[10]
  }
  function strLen[51147](arg x[51153] :
  (51150 call c_ptrConst unknown t[51151])) : _unknown[42] "inline" "@unstable"
  {
    (51158 return(51164 call(51161 call .(51159 'string_length_bytes' x) c"safeCast") int[10]))
  }
  { scopeless type
    int[10]
  }
  function _unknown[42].c_str[51169](arg _mt[51175]:_MT[201], arg this[51172] :
  string[244]) : _unknown[42] "inline" "method" "@unstable"
  {
    (51184 'use' BytesStringCommon 'only' getCStr)
    (51186 return(51188 call getCStr this))
  }
  { scopeless type
    (51178 call c_ptrConst c_char)
  }
  function _unknown[42].c_str[51193](arg _mt[51199]:_MT[201], arg this[51196] :
  bytes[232]) : _unknown[42] "inline" "method" "@unstable"
  {
    (51208 'use' BytesStringCommon 'only' getCStr)
    (51210 return(51212 call getCStr this))
  }
  { scopeless type
    (51202 call c_ptrConst c_char)
  }
}