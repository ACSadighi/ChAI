AST dump for MemMove after pass normalize.
Module use list: ChapelStandard HaltWrappers IO 

{
  function chpl__init_MemMove[468477]() : void[4] "insert line file info" "module init"
  {
    (619172 return _void[46])
  }
  function _move[208306](ref arg dst[208308]:_any[141](?), const  ref arg src[208310]:_any[141](?)) : _unknown[42] "inline" "private" "unsafe" "no return value for void"
  {
    (208313 '=' dst[208308] src[208310])
    (619057 return _void[46])
  }
  function needsDeinit[208318](arg t[208320]:_any[141](?)) param : _unknown[42] "deprecated"
  {
    unknown ret[619061] "RVV" "param" "temp"
    unknown call_tmp[861964] "expr temp" "maybe param" "maybe type" "temp"
    (861967 'move' call_tmp[861964](208324 'needs auto destroy' t[208320]))
    (619066 'move' ret[619061](619065 'deref' call_tmp[861964]))
    (619063 return ret[619061])
  }
  function needsDestroy[208328](arg t[208330]:_any[141](?)) param : _unknown[42]
  {
    unknown ret[619070] "RVV" "param" "temp"
    unknown call_tmp[861969] "expr temp" "maybe param" "maybe type" "temp"
    (861972 'move' call_tmp[861969](208335 'needs auto destroy' t[208330]))
    (619076 'move' ret[619070](619075 'coerce' call_tmp[861969] bool[19]))
    (619072 return ret[619070])
  }
  { scopeless type
    bool[19]
  }
  function explicitDeinit[208340](ref arg arg[208344]:_any[141](?)) : _unknown[42] "deprecated" "no return value for void"
  {
    unknown call_tmp[861974] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (861977 'move' call_tmp[861974](528365 'typeof' arg[208344]))
    unknown call_tmp[861979] "expr temp" "maybe param" "maybe type" "temp"
    (861982 'move' call_tmp[861979](208353 call needsDeinit call_tmp[861974]))
    unknown call_tmp[861984] "expr temp" "maybe param" "maybe type" "temp"
    (861987 'move' call_tmp[861984](208355 call _cond_test call_tmp[861979]))
    if call_tmp[861984]
    {
      (208349 call chpl__autoDestroy arg[208344])
    }
    (619078 return _void[46])
  }
  function destroy[208362](ref arg obj[208366]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    unknown call_tmp[861989] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (861992 'move' call_tmp[861989](528367 'typeof' obj[208366]))
    unknown call_tmp[861994] "expr temp" "maybe param" "maybe type" "temp"
    (861997 'move' call_tmp[861994](208375 call needsDestroy call_tmp[861989]))
    unknown call_tmp[861999] "expr temp" "maybe param" "maybe type" "temp"
    (862002 'move' call_tmp[861999](208377 call _cond_test call_tmp[861994]))
    if call_tmp[861999]
    {
      (208371 call chpl__autoDestroy obj[208366])
    }
    (619080 return _void[46])
  }
  function moveInitialize[208384](ref arg lhs[208386]:_any[141](?), in arg rhs[208388]:_any[141](?)) : _unknown[42] "deprecated" "last resort" "no return value for void"
  {
    unknown call_tmp[862004] "expr temp" "maybe param" "maybe type" "temp"
    (862007 'move' call_tmp[862004](208435 'static typeof' lhs[208386]))
    unknown call_tmp[862009] "expr temp" "maybe param" "maybe type" "temp"
    (862012 'move' call_tmp[862009](208437 'static typeof' rhs[208388]))
    unknown call_tmp[862014] "expr temp" "maybe param" "maybe type" "temp"
    (862017 'move' call_tmp[862014](208433 call != call_tmp[862004] call_tmp[862009]))
    unknown call_tmp[862019] "expr temp" "maybe param" "maybe type" "temp"
    (862022 'move' call_tmp[862019](208439 call _cond_test call_tmp[862014]))
    if call_tmp[862019]
    {
      unknown call_tmp[862024] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (862027 'move' call_tmp[862024](208408 'typeof' lhs[208386]))
      unknown call_tmp[862029] "expr temp" "maybe param" "maybe type" "temp"
      (862032 'move' call_tmp[862029](208405 call : call_tmp[862024] string[244]))
      unknown call_tmp[862034] "expr temp" "maybe param" "maybe type" "temp"
      (862037 'move' call_tmp[862034](208400 call + "type mismatch move-initializing an expression of type '" call_tmp[862029]))
      unknown call_tmp[862039] "expr temp" "maybe param" "maybe type" "temp"
      (862042 'move' call_tmp[862039](208398 call + call_tmp[862034] "' from one of type '"))
      unknown call_tmp[862044] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (862047 'move' call_tmp[862044](208416 'typeof' rhs[208388]))
      unknown call_tmp[862049] "expr temp" "maybe param" "maybe type" "temp"
      (862052 'move' call_tmp[862049](208413 call : call_tmp[862044] string[244]))
      unknown call_tmp[862054] "expr temp" "maybe param" "maybe type" "temp"
      (862057 'move' call_tmp[862054](208396 call + call_tmp[862039] call_tmp[862049]))
      unknown call_tmp[862059] "expr temp" "maybe param" "maybe type" "temp"
      (862062 'move' call_tmp[862059](208394 call + call_tmp[862054] "'"))
      (208393 call compilerError call_tmp[862059])
    }
    {
      unknown call_tmp[862064] "expr temp" "maybe param" "maybe type" "temp"
      (862067 'move' call_tmp[862064](208426 'static typeof' lhs[208386]))
      unknown call_tmp[862069] "expr temp" "maybe param" "maybe type" "temp"
      (862072 'move' call_tmp[862069](208424 call != call_tmp[862064] nothing[7]))
      unknown call_tmp[862074] "expr temp" "maybe param" "maybe type" "temp"
      (862077 'move' call_tmp[862074](208429 call _cond_test call_tmp[862069]))
      if call_tmp[862074]
      {
        (208421 call _move lhs[208386] rhs[208388])
      }
    }
    (619082 return _void[46])
  }
  function moveInitialize[208446](ref arg dst[208448]:_any[141](?), in arg src[208450]:_any[141](?)) : _unknown[42] "no return value for void"
  {
    unknown call_tmp[862079] "expr temp" "maybe param" "maybe type" "temp"
    (862082 'move' call_tmp[862079](208493 'static typeof' dst[208448]))
    unknown call_tmp[862084] "expr temp" "maybe param" "maybe type" "temp"
    (862087 'move' call_tmp[862084](208495 'static typeof' src[208450]))
    unknown call_tmp[862089] "expr temp" "maybe param" "maybe type" "temp"
    (862092 'move' call_tmp[862089](208491 call != call_tmp[862079] call_tmp[862084]))
    unknown call_tmp[862094] "expr temp" "maybe param" "maybe type" "temp"
    (862097 'move' call_tmp[862094](208497 call _cond_test call_tmp[862089]))
    if call_tmp[862094]
    {
      unknown call_tmp[862099] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (862102 'move' call_tmp[862099](208468 'typeof' dst[208448]))
      unknown call_tmp[862104] "expr temp" "maybe param" "maybe type" "temp"
      (862107 'move' call_tmp[862104](208465 call : call_tmp[862099] string[244]))
      unknown call_tmp[862109] "expr temp" "maybe param" "maybe type" "temp"
      (862112 'move' call_tmp[862109](208462 call + "type mismatch move-initializing an expression of type '" call_tmp[862104]))
      unknown call_tmp[862114] "expr temp" "maybe param" "maybe type" "temp"
      (862117 'move' call_tmp[862114](208460 call + call_tmp[862109] "' from one of type '"))
      unknown call_tmp[862119] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (862122 'move' call_tmp[862119](208474 'typeof' src[208450]))
      unknown call_tmp[862124] "expr temp" "maybe param" "maybe type" "temp"
      (862127 'move' call_tmp[862124](208471 call : call_tmp[862119] string[244]))
      unknown call_tmp[862129] "expr temp" "maybe param" "maybe type" "temp"
      (862132 'move' call_tmp[862129](208458 call + call_tmp[862114] call_tmp[862124]))
      unknown call_tmp[862134] "expr temp" "maybe param" "maybe type" "temp"
      (862137 'move' call_tmp[862134](208456 call + call_tmp[862129] "'"))
      (208455 call compilerError call_tmp[862134])
    }
    {
      unknown call_tmp[862139] "expr temp" "maybe param" "maybe type" "temp"
      (862142 'move' call_tmp[862139](208484 'static typeof' dst[208448]))
      unknown call_tmp[862144] "expr temp" "maybe param" "maybe type" "temp"
      (862147 'move' call_tmp[862144](208482 call != call_tmp[862139] nothing[7]))
      unknown call_tmp[862149] "expr temp" "maybe param" "maybe type" "temp"
      (862152 'move' call_tmp[862149](208487 call _cond_test call_tmp[862144]))
      if call_tmp[862149]
      {
        (208479 call _move dst[208448] src[208450])
      }
    }
    (619084 return _void[46])
  }
  function moveToValue[208504](const  ref arg arg[208508]:_any[141](?)) : _unknown[42] "deprecated"
  {
    unknown ret[619088] "RVV" "temp"
    unknown call_tmp[862154] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (862157 'move' call_tmp[862154](528369 'typeof' arg[208508]))
    unknown call_tmp[862159] "expr temp" "maybe param" "maybe type" "temp"
    (862162 'move' call_tmp[862159](208527 call == call_tmp[862154] nothing[7]))
    unknown call_tmp[862164] "expr temp" "maybe param" "maybe type" "temp"
    (862167 'move' call_tmp[862164](208531 call _cond_test call_tmp[862159]))
    if call_tmp[862164]
    {
      (619093 'move' ret[619088](619092 'deref' none[48]))
      gotoReturn _end_moveToValue[619086] _end_moveToValue[619086]
    }
    {
      unknown result[208517] "dead at end of block" "no auto destroy" "no copy" "no init"
      unknown call_tmp[862169] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (862172 'move' call_tmp[862169](528371 'typeof' arg[208508]))
      (649190 'default init var' result[208517] call_tmp[862169])
      (208520 'end of statement')
      (208522 call _move result[208517] arg[208508])
      (559630 'end of statement' result[208517])
      (619098 'move' ret[619088](619097 'deref' result[208517]))
      gotoReturn _end_moveToValue[619086] _end_moveToValue[619086]
      (559632 'end of statement' result[208517])
    }
    label _end_moveToValue[619086]
    (619090 return ret[619088])
  }
  function moveFrom[208537](const  ref arg src[208541]:_any[141](?)) : _unknown[42]
  {
    unknown ret[619104] "RVV" "temp"
    unknown call_tmp[862174] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (862177 'move' call_tmp[862174](528373 'typeof' src[208541]))
    unknown call_tmp[862179] "expr temp" "maybe param" "maybe type" "temp"
    (862182 'move' call_tmp[862179](208560 call == call_tmp[862174] nothing[7]))
    unknown call_tmp[862184] "expr temp" "maybe param" "maybe type" "temp"
    (862187 'move' call_tmp[862184](208564 call _cond_test call_tmp[862179]))
    if call_tmp[862184]
    {
      (619109 'move' ret[619104](619108 'deref' none[48]))
      gotoReturn _end_moveFrom[619102] _end_moveFrom[619102]
    }
    {
      unknown result[208550] "dead at end of block" "no auto destroy" "no copy" "no init"
      unknown call_tmp[862189] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (862192 'move' call_tmp[862189](528375 'typeof' src[208541]))
      (649192 'default init var' result[208550] call_tmp[862189])
      (208553 'end of statement')
      (208555 call _move result[208550] src[208541])
      (559635 'end of statement' result[208550])
      (619114 'move' ret[619104](619113 'deref' result[208550]))
      gotoReturn _end_moveFrom[619102] _end_moveFrom[619102]
      (559637 'end of statement' result[208550])
    }
    label _end_moveFrom[619102]
    (619106 return ret[619104])
  }
  function moveSwap[208570](ref arg lhs[208574]:_any[141](?), ref arg rhs[208578] :
  (528377 'typeof' lhs[208574])) : _unknown[42] "deprecated" "last resort" "no return value for void"
  {
    (208583 call moveSwap(x = lhs[208574])(y = rhs[208578]))
    (619118 return _void[46])
  }
  function moveSwap[208590](ref arg x[208594]:_any[141](?), ref arg y[208598] :
  (528379 'typeof' x[208594])) : _unknown[42] "no return value for void"
  {
    unknown call_tmp[862194] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (862197 'move' call_tmp[862194](528381 'typeof' x[208594]))
    unknown call_tmp[862199] "expr temp" "maybe param" "maybe type" "temp"
    (862202 'move' call_tmp[862199](208620 call != call_tmp[862194] nothing[7]))
    unknown call_tmp[862204] "expr temp" "maybe param" "maybe type" "temp"
    (862207 'move' call_tmp[862204](208624 call _cond_test call_tmp[862199]))
    if call_tmp[862204]
    {
      unknown temp[208604] "dead at end of block" "no auto destroy" "no copy" "no init"
      unknown call_tmp[862209] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (862212 'move' call_tmp[862209](528383 'typeof' x[208594]))
      (649194 'default init var' temp[208604] call_tmp[862209])
      (208607 'end of statement')
      (208609 call _move temp[208604] x[208594])
      (559640 'end of statement' temp[208604])
      (208613 call _move x[208594] y[208598])
      (559642 'end of statement')
      (208617 call _move y[208598] temp[208604])
      (559643 'end of statement' temp[208604])
    }
    (619120 return _void[46])
  }
  function _haltBadIndex[208630](arg a[208632]:_any[141](?), arg idx[208634]:_any[141](?), arg indexName[208637]:string[244]) : _unknown[42] "inline" "private" "no return value for void"
  {
    unknown call_tmp[862216] "expr temp" "maybe param" "maybe type" "temp"
    (862219 'move' call_tmp[862216](208664 call _dom _mt[203] a[208632]))
    unknown call_tmp[862223] "expr temp" "maybe param" "maybe type" "temp"
    (862226 'move' call_tmp[862223](208670 call(208667 call (partial) contains _mt[203] call_tmp[862216]) idx[208634]))
    unknown call_tmp[862228] "expr temp" "maybe param" "maybe type" "temp"
    (862231 'move' call_tmp[862228](208661 call ! call_tmp[862223]))
    unknown call_tmp[862233] "expr temp" "maybe param" "maybe type" "temp"
    (862236 'move' call_tmp[862233](208672 call _cond_test call_tmp[862228]))
    if call_tmp[862233]
    {
      unknown call_tmp[862238] "expr temp" "maybe param" "maybe type" "temp"
      (862241 'move' call_tmp[862238](208651 call + "Cannot move-initialize array because its domain " "does not contain: "))
      unknown call_tmp[862243] "expr temp" "maybe param" "maybe type" "temp"
      (862246 'move' call_tmp[862243](208649 call + call_tmp[862238] indexName[208637]))
      (208648 call boundsCheckHalt call_tmp[862243])
    }
    (619122 return _void[46])
    (396790 'used modules list'(208646 'import' HaltWrappers[518].{boundsCheckHalt}))
  }
  function _haltBadElementRange[208679](arg a[208681]:_any[141](?), arg idx[208683]:_any[141](?), arg numElements[208686]:int(64)[10]) : _unknown[42] "inline" "private" "no return value for void"
  {
    unknown call_tmp[862250] "expr temp" "maybe param" "maybe type" "temp"
    (862253 'move' call_tmp[862250](208711 call size _mt[203] a[208681]))
    unknown call_tmp[862255] "expr temp" "maybe param" "maybe type" "temp"
    (862258 'move' call_tmp[862255](208707 call > numElements[208686] call_tmp[862250]))
    unknown call_tmp[862260] "expr temp" "maybe param" "maybe type" "temp"
    (862263 'move' call_tmp[862260](208714 call _cond_test call_tmp[862255]))
    if call_tmp[862260]
    {
      unknown call_tmp[862265] "expr temp" "maybe param" "maybe type" "temp"
      (862268 'move' call_tmp[862265](208698 call + "Cannot move-initialize array because number of " "elements to copy exceeds array size"))
      (208697 call boundsCheckHalt call_tmp[862265])
    }
    unknown call_tmp[862270] "expr temp" "maybe param" "maybe type" "temp"
    (862273 'move' call_tmp[862270](208728 call <= numElements[208686] 0))
    unknown call_tmp[862275] "expr temp" "maybe param" "maybe type" "temp"
    (862278 'move' call_tmp[862275](208732 call _cond_test call_tmp[862270]))
    if call_tmp[862275]
    {
      unknown call_tmp[862280] "expr temp" "maybe param" "maybe type" "temp"
      (862283 'move' call_tmp[862280](208721 call + "Cannot move-initialize array because number of " "elements to copy is <= 0"))
      (208720 call boundsCheckHalt call_tmp[862280])
    }
    unknown call_tmp[862287] "expr temp" "maybe param" "maybe type" "temp"
    (862290 'move' call_tmp[862287](208740 call _dom _mt[203] a[208681]))
    unknown call_tmp[862294] "maybe param" "maybe type" "temp"
    (862297 'move' call_tmp[862294](208746 call(208743 call (partial) indexOrder _mt[203] call_tmp[862287]) idx[208683]))
    const order[208738] "dead at end of block" "const" "insert auto destroy"
    (649196 'init var' order[208738] call_tmp[862294])
    (208749 'end of statement')
    unknown call_tmp[862299] "maybe param" "maybe type" "temp"
    (862302 'move' call_tmp[862299](208752 call + order[208738] numElements[208686]))
    const hi[208751] "dead at end of block" "const" "insert auto destroy"
    (649198 'init var' hi[208751] call_tmp[862299])
    (208757 'end of statement' order[208738])
    unknown call_tmp[862306] "expr temp" "maybe param" "maybe type" "temp"
    (862309 'move' call_tmp[862306](208773 call size _mt[203] a[208681]))
    unknown call_tmp[862311] "expr temp" "maybe param" "maybe type" "temp"
    (862314 'move' call_tmp[862311](208769 call > hi[208751] call_tmp[862306]))
    unknown call_tmp[862316] "expr temp" "maybe param" "maybe type" "temp"
    (862319 'move' call_tmp[862316](208776 call _cond_test call_tmp[862311]))
    if call_tmp[862316]
    {
      unknown call_tmp[862321] "expr temp" "maybe param" "maybe type" "temp"
      (862324 'move' call_tmp[862321](208760 call + "Cannot move-initialize array because one or " "more indices fall outside its domain"))
      (208759 call boundsCheckHalt call_tmp[862321])
    }
    (619124 return _void[46])
    (396792 'used modules list'(208695 'import' HaltWrappers[518].{boundsCheckHalt}))
  }
  function _haltRangeOverlap[208783](arg dstIndex[208785]:_any[141](?), arg srcIndex[208787]:_any[141](?), arg numElements[208789]:_any[141](?)) : _unknown[42] "inline" "private" "no return value for void"
  {
    unknown call_tmp[862326] "expr temp" "maybe param" "maybe type" "temp"
    (862329 'move' call_tmp[862326](208803 call chpl_build_low_bounded_range dstIndex[208785]))
    unknown call_tmp[862331] "maybe param" "maybe type" "temp"
    (862334 'move' call_tmp[862331](208800 call # call_tmp[862326] numElements[208789]))
    const dstRange[208799] "dead at end of block" "const" "insert auto destroy"
    (649200 'init var' dstRange[208799] call_tmp[862331])
    (208807 'end of statement')
    unknown call_tmp[862336] "expr temp" "maybe param" "maybe type" "temp"
    (862339 'move' call_tmp[862336](208813 call chpl_build_low_bounded_range srcIndex[208787]))
    unknown call_tmp[862341] "maybe param" "maybe type" "temp"
    (862344 'move' call_tmp[862341](208810 call # call_tmp[862336] numElements[208789]))
    const srcRange[208809] "dead at end of block" "const" "insert auto destroy"
    (649202 'init var' srcRange[208809] call_tmp[862341])
    (208817 'end of statement')
    unknown call_tmp[862346] "expr temp" "maybe param" "maybe type" "temp"
    (862349 'move' call_tmp[862346](208832 call dstRange[208799] srcRange[208809]))
    unknown call_tmp[862353] "expr temp" "maybe param" "maybe type" "temp"
    (862356 'move' call_tmp[862353](208834 call size _mt[203] call_tmp[862346]))
    unknown call_tmp[862358] "expr temp" "maybe param" "maybe type" "temp"
    (862361 'move' call_tmp[862358](208829 call != call_tmp[862353] 0))
    unknown call_tmp[862363] "expr temp" "maybe param" "maybe type" "temp"
    (862366 'move' call_tmp[862363](208838 call _cond_test call_tmp[862358]))
    if call_tmp[862363]
    {
      unknown call_tmp[862368] "expr temp" "maybe param" "maybe type" "temp"
      (862371 'move' call_tmp[862368](208820 call + "Cannot move-initialize array because source and " "destination ranges intersect"))
      (208819 call boundsCheckHalt call_tmp[862368])
    }
    (619126 return _void[46])
    (396794 'used modules list'(208797 'import' HaltWrappers[518].{boundsCheckHalt}))
  }
  function _errorNot1DRectangularArray[208845](arg a[208847]:_any[141](?)) : _unknown[42] "inline" "private" "no return value for void"
  {
    unknown tmp[495015] "maybe param" "temp"
    unknown call_tmp[862375] "expr temp" "maybe param" "maybe type" "temp"
    (862378 'move' call_tmp[862375](208870 call(208867 call (partial) isDefaultRectangular _mt[203] a[208847])))
    (495026 'move' tmp[495015](208862 call ! call_tmp[862375]))
    unknown call_tmp[862380] "expr temp" "maybe param" "maybe type" "temp"
    (862383 'move' call_tmp[862380](495028 call _cond_invalid tmp[495015]))
    if call_tmp[862380]
    {
      (495031 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[690609] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[690610] "maybe param" "temp"
    unknown call_tmp[862385] "expr temp" "maybe param" "maybe type" "temp"
    (862388 'move' call_tmp[862385](495016 call isTrue tmp[495015]))
    (690615 'move' tmp[690610](690613 call _cond_test call_tmp[862385]))
    if tmp[690610]
    {
      (690620 'move' tmp[690609](690617 '_paramFoldLogical' tmp[690610] 1))
    }
    {
      unknown tmp[690622] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[862392] "expr temp" "maybe param" "maybe type" "temp"
      (862395 'move' call_tmp[862392](208874 call rank _mt[203] a[208847]))
      unknown call_tmp[862397] "expr temp" "maybe param" "maybe type" "temp"
      (862400 'move' call_tmp[862397](208871 call > call_tmp[862392] 1))
      (690624 'move' tmp[690622](495020 call isTrue call_tmp[862397]))
      (690629 'move' tmp[690609](690626 '_paramFoldLogical' tmp[690610] tmp[690622]))
    }
    unknown call_tmp[862402] "expr temp" "maybe param" "maybe type" "temp"
    (862405 'move' call_tmp[862402](208878 call _cond_test tmp[690609]))
    if call_tmp[862402]
    {
      (208851 call compilerError "Can only move-initialize one-dimensional " "rectangular arrays" 2)
    }
    (619128 return _void[46])
  }
  function _testArrayAlias[208885](const arg dst[208887]:_any[141](?), const arg dstRegion[208889]:_any[141](?), const arg src[208891]:_any[141](?), const arg srcRegion[208893]:_any[141](?)) : _unknown[42] throws "private" "no return value for void"
  {
    unknown call_tmp[862407] "maybe param" "maybe type" "temp"
    (862410 'move' call_tmp[862407](208899 call chpl__getActualArray dst[208887]))
    const actualDst[208897] "dead at end of block" "const" "insert auto destroy"
    (649204 'init var' actualDst[208897] call_tmp[862407])
    (208902 'end of statement')
    unknown call_tmp[862412] "maybe param" "maybe type" "temp"
    (862415 'move' call_tmp[862412](208906 call chpl__getActualArray src[208891]))
    const actualSrc[208904] "dead at end of block" "const" "insert auto destroy"
    (649206 'init var' actualSrc[208904] call_tmp[862412])
    (208909 'end of statement')
    unknown call_tmp[862417] "expr temp" "maybe param" "maybe type" "temp"
    (862420 'move' call_tmp[862417](208981 call == actualDst[208897] actualSrc[208904]))
    unknown call_tmp[862422] "expr temp" "maybe param" "maybe type" "temp"
    (862425 'move' call_tmp[862422](208985 call _cond_test call_tmp[862417]))
    if call_tmp[862422]
    {
      unknown overlap[208912] "dead at end of block" "insert auto destroy"
      (649208 'init var' overlap[208912] 0)
      (208915 'end of statement')
      unknown call_tmp[862427] "expr temp" "maybe param" "maybe type" "temp"
      (862430 'move' call_tmp[862427](208949 call isRange dstRegion[208889]))
      unknown call_tmp[862432] "expr temp" "maybe param" "maybe type" "temp"
      (862435 'move' call_tmp[862432](208951 call _cond_test call_tmp[862427]))
      if call_tmp[862432]
      {
        unknown call_tmp[862437] "expr temp" "maybe param" "maybe type" "temp"
        (862440 'move' call_tmp[862437](208924 call chpl__buildDomainExpr dstRegion[208889] 1))
        unknown call_tmp[862442] "expr temp" "maybe param" "maybe type" "temp"
        (862445 'move' call_tmp[862442](208926 call call_tmp[862437] srcRegion[208893]))
        unknown call_tmp[862449] "expr temp" "maybe param" "maybe type" "temp"
        (862452 'move' call_tmp[862449](208931 call(208928 call (partial) isEmpty _mt[203] call_tmp[862442])))
        unknown call_tmp[862454] "expr temp" "maybe param" "maybe type" "temp"
        (862457 'move' call_tmp[862454](208919 call == call_tmp[862449] 0))
        (208916 call = overlap[208912] call_tmp[862454])
        (559653 'end of statement' overlap[208912])
      }
      {
        unknown call_tmp[862459] "expr temp" "maybe param" "maybe type" "temp"
        (862462 'move' call_tmp[862459](208940 call dstRegion[208889] srcRegion[208893]))
        unknown call_tmp[862466] "expr temp" "maybe param" "maybe type" "temp"
        (862469 'move' call_tmp[862466](208945 call(208942 call (partial) isEmpty _mt[203] call_tmp[862459])))
        unknown call_tmp[862471] "expr temp" "maybe param" "maybe type" "temp"
        (862474 'move' call_tmp[862471](208937 call == call_tmp[862466] 0))
        (208934 call = overlap[208912] call_tmp[862471])
        (559655 'end of statement' overlap[208912])
      }
      unknown call_tmp[862476] "expr temp" "maybe param" "maybe type" "temp"
      (862479 'move' call_tmp[862476](208977 call _cond_test overlap[208912]))
      if call_tmp[862476]
      {
        unknown call_tmp[862483] "expr temp" "maybe param" "maybe type" "temp"
        (862486 'move' call_tmp[862483](208973 call(208970 call (partial) format _mt[203] "Arguments to 'moveArrayElements' alias the same data. Regions are '%\?' and '%\?'") dstRegion[208889] srcRegion[208893]))
        unknown call_tmp[862488] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (862491 'move' call_tmp[862488](1000336 'new' IllegalArgumentError[414940](?) call_tmp[862483]))
        unknown call_tmp[862493] "expr temp" "maybe param" "maybe type" "temp"
        (862496 'move' call_tmp[862493](542441 call chpl_fix_thrown_error call_tmp[862488]))
        (208961 'throw' call_tmp[862493])
        (396796 'used modules list'(208959 'use' IO[208303]))
      }
    }
    (619130 return _void[46])
  }
  function _checkArgs[208991](const arg dst[208993]:_any[141](?), const arg dstRegion[208995]:_any[141](?), const arg src[208997]:_any[141](?), const arg srcRegion[208999]:_any[141](?)) : _unknown[42] throws "private"
  {
    function _checkIsRectangular[209002](arg arg[209004]:_any[141](?), param arg name[209007]:string[244]) : _unknown[42] "no return value for void"
    {
      unknown call_tmp[862500] "expr temp" "maybe param" "maybe type" "temp"
      (862503 'move' call_tmp[862500](209032 call(209029 call (partial) isRectangular _mt[203] arg[209004])))
      unknown call_tmp[862505] "expr temp" "maybe param" "maybe type" "temp"
      (862508 'move' call_tmp[862505](209026 call ! call_tmp[862500]))
      unknown call_tmp[862510] "expr temp" "maybe param" "maybe type" "temp"
      (862513 'move' call_tmp[862510](209033 call _cond_test call_tmp[862505]))
      if call_tmp[862510]
      {
        unknown call_tmp[862515] "expr temp" "maybe param" "maybe type" "temp"
        (862518 'move' call_tmp[862515](209015 call + "The '" name[209007]))
        unknown call_tmp[862520] "expr temp" "maybe param" "maybe type" "temp"
        (862523 'move' call_tmp[862520](209013 call + call_tmp[862515] "' for 'moveArrayElements' must be rectangular"))
        (209012 call compilerError call_tmp[862520] 3)
      }
      (619132 return _void[46])
    }
    function _isDomOrRange[209040](arg arg[209042]:_any[141](?)) param : _unknown[42]
    {
      unknown ret[619136] "RVV" "param" "temp"
      unknown tmp[495036] "maybe param" "temp"
      (495047 'move' tmp[495036](209050 call isDomain arg[209042]))
      unknown call_tmp[862525] "expr temp" "maybe param" "maybe type" "temp"
      (862528 'move' call_tmp[862525](495049 call _cond_invalid tmp[495036]))
      if call_tmp[862525]
      {
        (495052 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[690636] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[690637] "maybe param" "temp"
      unknown call_tmp[862530] "expr temp" "maybe param" "maybe type" "temp"
      (862533 'move' call_tmp[862530](495037 call isTrue tmp[495036]))
      (690642 'move' tmp[690637](690640 call _cond_test call_tmp[862530]))
      if tmp[690637]
      {
        (690647 'move' tmp[690636](690644 '_paramFoldLogical' tmp[690637] 1))
      }
      {
        unknown tmp[690649] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[862535] "expr temp" "maybe param" "maybe type" "temp"
        (862538 'move' call_tmp[862535](209053 call isRange arg[209042]))
        (690651 'move' tmp[690649](495041 call isTrue call_tmp[862535]))
        (690656 'move' tmp[690636](690653 '_paramFoldLogical' tmp[690637] tmp[690649]))
      }
      (619142 'move' ret[619136](619141 'coerce' tmp[690636] bool[19]))
      (619138 return ret[619136])
    }
    { scopeless type
      bool[19]
    }
    (209059 call _checkIsRectangular dst[208993] "dst")
    (559661 'end of statement')
    (209065 call _checkIsRectangular src[208997] "src")
    (559662 'end of statement')
    unknown tmp[495057] "maybe param" "temp"
    unknown call_tmp[862540] "expr temp" "maybe param" "maybe type" "temp"
    (862543 'move' call_tmp[862540](209082 call _isDomOrRange dstRegion[208995]))
    (495068 'move' tmp[495057](209079 call ! call_tmp[862540]))
    unknown call_tmp[862545] "expr temp" "maybe param" "maybe type" "temp"
    (862548 'move' call_tmp[862545](495070 call _cond_invalid tmp[495057]))
    if call_tmp[862545]
    {
      (495073 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[690663] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[690664] "maybe param" "temp"
    unknown call_tmp[862550] "expr temp" "maybe param" "maybe type" "temp"
    (862553 'move' call_tmp[862550](495058 call isTrue tmp[495057]))
    (690669 'move' tmp[690664](690667 call _cond_test call_tmp[862550]))
    if tmp[690664]
    {
      (690674 'move' tmp[690663](690671 '_paramFoldLogical' tmp[690664] 1))
    }
    {
      unknown tmp[690676] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[862555] "expr temp" "maybe param" "maybe type" "temp"
      (862558 'move' call_tmp[862555](209087 call _isDomOrRange srcRegion[208999]))
      unknown call_tmp[862560] "expr temp" "maybe param" "maybe type" "temp"
      (862563 'move' call_tmp[862560](209084 call ! call_tmp[862555]))
      (690678 'move' tmp[690676](495062 call isTrue call_tmp[862560]))
      (690683 'move' tmp[690663](690680 '_paramFoldLogical' tmp[690664] tmp[690676]))
    }
    unknown call_tmp[862565] "expr temp" "maybe param" "maybe type" "temp"
    (862568 'move' call_tmp[862565](209089 call _cond_test tmp[690663]))
    if call_tmp[862565]
    {
      (209072 call compilerError "Region arguments to 'moveArrayElements' must be ranges or rectangular domains" 2)
    }
    unknown call_tmp[862570] "expr temp" "maybe param" "maybe type" "temp"
    (862573 'move' call_tmp[862570](209101 call isDomain dstRegion[208995]))
    unknown call_tmp[862575] "expr temp" "maybe param" "maybe type" "temp"
    (862578 'move' call_tmp[862575](209103 call _cond_test call_tmp[862570]))
    if call_tmp[862575]
    {
      (209094 call _checkIsRectangular dstRegion[208995] "dstRegion")
    }
    unknown call_tmp[862580] "expr temp" "maybe param" "maybe type" "temp"
    (862583 'move' call_tmp[862580](209116 call isDomain srcRegion[208999]))
    unknown call_tmp[862585] "expr temp" "maybe param" "maybe type" "temp"
    (862588 'move' call_tmp[862585](209118 call _cond_test call_tmp[862580]))
    if call_tmp[862585]
    {
      (209109 call _checkIsRectangular srcRegion[208999] "srcRegion")
    }
    unknown tmp[495078] "maybe param" "temp"
    unknown tmp[495099] "maybe param" "temp"
    (495110 'move' tmp[495099](209135 call isRange dstRegion[208995]))
    unknown call_tmp[862590] "expr temp" "maybe param" "maybe type" "temp"
    (862593 'move' call_tmp[862590](495112 call _cond_invalid tmp[495099]))
    if call_tmp[862590]
    {
      (495115 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[690690] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[690691] "maybe param" "temp"
    unknown call_tmp[862595] "expr temp" "maybe param" "maybe type" "temp"
    (862598 'move' call_tmp[862595](495100 call isTrue tmp[495099]))
    (690696 'move' tmp[690691](690694 call _cond_test call_tmp[862595]))
    if tmp[690691]
    {
      unknown tmp[690698] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[862602] "expr temp" "maybe param" "maybe type" "temp"
      (862605 'move' call_tmp[862602](209140 call rank _mt[203] dst[208993]))
      unknown call_tmp[862607] "expr temp" "maybe param" "maybe type" "temp"
      (862610 'move' call_tmp[862607](209137 call > call_tmp[862602] 1))
      (690700 'move' tmp[690698](495103 call isTrue call_tmp[862607]))
      (690705 'move' tmp[690690](690702 '_paramFoldLogical' tmp[690691] tmp[690698]))
    }
    {
      (690710 'move' tmp[690690](690707 '_paramFoldLogical' tmp[690691] 0))
    }
    (495089 'move' tmp[495078] tmp[690690])
    unknown call_tmp[862612] "expr temp" "maybe param" "maybe type" "temp"
    (862615 'move' call_tmp[862612](495091 call _cond_invalid tmp[495078]))
    if call_tmp[862612]
    {
      (495094 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[690744] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[690745] "maybe param" "temp"
    unknown call_tmp[862617] "expr temp" "maybe param" "maybe type" "temp"
    (862620 'move' call_tmp[862617](495079 call isTrue tmp[495078]))
    (690750 'move' tmp[690745](690748 call _cond_test call_tmp[862617]))
    if tmp[690745]
    {
      (690755 'move' tmp[690744](690752 '_paramFoldLogical' tmp[690745] 1))
    }
    {
      unknown tmp[495120] "maybe param" "temp"
      (495131 'move' tmp[495120](209147 call isRange srcRegion[208999]))
      unknown call_tmp[862622] "expr temp" "maybe param" "maybe type" "temp"
      (862625 'move' call_tmp[862622](495133 call _cond_invalid tmp[495120]))
      if call_tmp[862622]
      {
        (495136 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[690717] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[690718] "maybe param" "temp"
      unknown call_tmp[862627] "expr temp" "maybe param" "maybe type" "temp"
      (862630 'move' call_tmp[862627](495121 call isTrue tmp[495120]))
      (690723 'move' tmp[690718](690721 call _cond_test call_tmp[862627]))
      if tmp[690718]
      {
        unknown tmp[690725] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[862634] "expr temp" "maybe param" "maybe type" "temp"
        (862637 'move' call_tmp[862634](209152 call rank _mt[203] src[208997]))
        unknown call_tmp[862639] "expr temp" "maybe param" "maybe type" "temp"
        (862642 'move' call_tmp[862639](209149 call > call_tmp[862634] 1))
        (690727 'move' tmp[690725](495124 call isTrue call_tmp[862639]))
        (690732 'move' tmp[690717](690729 '_paramFoldLogical' tmp[690718] tmp[690725]))
      }
      {
        (690737 'move' tmp[690717](690734 '_paramFoldLogical' tmp[690718] 0))
      }
      unknown tmp[690757] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (690759 'move' tmp[690757](495083 call isTrue tmp[690717]))
      (690764 'move' tmp[690744](690761 '_paramFoldLogical' tmp[690745] tmp[690757]))
    }
    unknown call_tmp[862644] "expr temp" "maybe param" "maybe type" "temp"
    (862647 'move' call_tmp[862644](209156 call _cond_test tmp[690744]))
    if call_tmp[862644]
    {
      (209124 call compilerError "'moveArrayElements' does not accept range regions for arrays with more than 1 dimension" 2)
    }
    unknown tmp[495141] "maybe param" "temp"
    unknown tmp[495162] "maybe param" "temp"
    (495173 'move' tmp[495162](209173 call isRange dstRegion[208995]))
    unknown call_tmp[862649] "expr temp" "maybe param" "maybe type" "temp"
    (862652 'move' call_tmp[862649](495175 call _cond_invalid tmp[495162]))
    if call_tmp[862649]
    {
      (495178 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[690771] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[690772] "maybe param" "temp"
    unknown call_tmp[862654] "expr temp" "maybe param" "maybe type" "temp"
    (862657 'move' call_tmp[862654](495163 call isTrue tmp[495162]))
    (690777 'move' tmp[690772](690775 call _cond_test call_tmp[862654]))
    if tmp[690772]
    {
      unknown tmp[690779] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[862661] "expr temp" "maybe param" "maybe type" "temp"
      (862664 'move' call_tmp[862661](209178 call bounds _mt[203] dstRegion[208995]))
      unknown call_tmp[862666] "expr temp" "maybe param" "maybe type" "temp"
      (862669 'move' call_tmp[862666](209175 call != call_tmp[862661] both[107114]))
      (690781 'move' tmp[690779](495166 call isTrue call_tmp[862666]))
      (690786 'move' tmp[690771](690783 '_paramFoldLogical' tmp[690772] tmp[690779]))
    }
    {
      (690791 'move' tmp[690771](690788 '_paramFoldLogical' tmp[690772] 0))
    }
    (495152 'move' tmp[495141] tmp[690771])
    unknown call_tmp[862671] "expr temp" "maybe param" "maybe type" "temp"
    (862674 'move' call_tmp[862671](495154 call _cond_invalid tmp[495141]))
    if call_tmp[862671]
    {
      (495157 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[690825] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[690826] "maybe param" "temp"
    unknown call_tmp[862676] "expr temp" "maybe param" "maybe type" "temp"
    (862679 'move' call_tmp[862676](495142 call isTrue tmp[495141]))
    (690831 'move' tmp[690826](690829 call _cond_test call_tmp[862676]))
    if tmp[690826]
    {
      (690836 'move' tmp[690825](690833 '_paramFoldLogical' tmp[690826] 1))
    }
    {
      unknown tmp[495183] "maybe param" "temp"
      (495194 'move' tmp[495183](209188 call isRange srcRegion[208999]))
      unknown call_tmp[862681] "expr temp" "maybe param" "maybe type" "temp"
      (862684 'move' call_tmp[862681](495196 call _cond_invalid tmp[495183]))
      if call_tmp[862681]
      {
        (495199 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[690798] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[690799] "maybe param" "temp"
      unknown call_tmp[862686] "expr temp" "maybe param" "maybe type" "temp"
      (862689 'move' call_tmp[862686](495184 call isTrue tmp[495183]))
      (690804 'move' tmp[690799](690802 call _cond_test call_tmp[862686]))
      if tmp[690799]
      {
        unknown tmp[690806] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[862693] "expr temp" "maybe param" "maybe type" "temp"
        (862696 'move' call_tmp[862693](209193 call bounds _mt[203] srcRegion[208999]))
        unknown call_tmp[862698] "expr temp" "maybe param" "maybe type" "temp"
        (862701 'move' call_tmp[862698](209190 call != call_tmp[862693] both[107114]))
        (690808 'move' tmp[690806](495187 call isTrue call_tmp[862698]))
        (690813 'move' tmp[690798](690810 '_paramFoldLogical' tmp[690799] tmp[690806]))
      }
      {
        (690818 'move' tmp[690798](690815 '_paramFoldLogical' tmp[690799] 0))
      }
      unknown tmp[690838] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (690840 'move' tmp[690838](495146 call isTrue tmp[690798]))
      (690845 'move' tmp[690825](690842 '_paramFoldLogical' tmp[690826] tmp[690838]))
    }
    unknown call_tmp[862703] "expr temp" "maybe param" "maybe type" "temp"
    (862706 'move' call_tmp[862703](209200 call _cond_test tmp[690825]))
    if call_tmp[862703]
    {
      (209162 call compilerError "'moveArrayElements' does not accept unbounded ranges" 2)
    }
    function _idxHelper[209205](arg A[209207]:_any[141](?), arg B[209209]:_any[141](?), param arg Aname[209212]:string[244], param arg Bname[209216]:string[244]) : _unknown[42] "no return value for void"
    {
      unknown call_tmp[862710] "expr temp" "maybe param" "maybe type" "temp"
      (862713 'move' call_tmp[862710](209286 call idxType _mt[203] A[209207]))
      unknown call_tmp[862717] "expr temp" "maybe param" "maybe type" "temp"
      (862720 'move' call_tmp[862717](209290 call idxType _mt[203] B[209209]))
      unknown call_tmp[862722] "expr temp" "maybe param" "maybe type" "temp"
      (862725 'move' call_tmp[862722](209283 call != call_tmp[862710] call_tmp[862717]))
      unknown call_tmp[862727] "expr temp" "maybe param" "maybe type" "temp"
      (862730 'move' call_tmp[862727](209293 call _cond_test call_tmp[862722]))
      if call_tmp[862727]
      {
        unknown call_tmp[862732] "expr temp" "maybe param" "maybe type" "temp"
        (862735 'move' call_tmp[862732](209229 call + "'" Aname[209212]))
        unknown call_tmp[862737] "expr temp" "maybe param" "maybe type" "temp"
        (862740 'move' call_tmp[862737](209227 call + call_tmp[862732] "' and '"))
        unknown call_tmp[862742] "expr temp" "maybe param" "maybe type" "temp"
        (862745 'move' call_tmp[862742](209225 call + call_tmp[862737] Bname[209216]))
        unknown call_tmp[862747] "maybe param" "maybe type" "temp"
        (862750 'move' call_tmp[862747](209223 call + call_tmp[862742] "'"))
        unknown args[209222] "dead at end of block" "param"
        (649210 'init var' args[209222] call_tmp[862747])
        (209239 'end of statement')
        unknown call_tmp[862754] "expr temp" "maybe param" "maybe type" "temp"
        (862757 'move' call_tmp[862754](209254 call idxType _mt[203] A[209207]))
        unknown call_tmp[862759] "expr temp" "maybe param" "maybe type" "temp"
        (862762 'move' call_tmp[862759](209251 call : call_tmp[862754] string[244]))
        unknown call_tmp[862764] "expr temp" "maybe param" "maybe type" "temp"
        (862767 'move' call_tmp[862764](209248 call + "'" call_tmp[862759]))
        unknown call_tmp[862769] "expr temp" "maybe param" "maybe type" "temp"
        (862772 'move' call_tmp[862769](209246 call + call_tmp[862764] "' vs. '"))
        unknown call_tmp[862776] "expr temp" "maybe param" "maybe type" "temp"
        (862779 'move' call_tmp[862776](209264 call idxType _mt[203] B[209209]))
        unknown call_tmp[862781] "expr temp" "maybe param" "maybe type" "temp"
        (862784 'move' call_tmp[862781](209261 call : call_tmp[862776] string[244]))
        unknown call_tmp[862786] "expr temp" "maybe param" "maybe type" "temp"
        (862789 'move' call_tmp[862786](209244 call + call_tmp[862769] call_tmp[862781]))
        unknown call_tmp[862791] "maybe param" "maybe type" "temp"
        (862794 'move' call_tmp[862791](209242 call + call_tmp[862786] "'"))
        unknown types[209241] "dead at end of block" "param"
        (649212 'init var' types[209241] call_tmp[862791])
        (209270 'end of statement')
        unknown call_tmp[862796] "expr temp" "maybe param" "maybe type" "temp"
        (862799 'move' call_tmp[862796](209275 call + args[209222] " for 'moveArrayElements' must have the same index type: "))
        unknown call_tmp[862801] "expr temp" "maybe param" "maybe type" "temp"
        (862804 'move' call_tmp[862801](209273 call + call_tmp[862796] types[209241]))
        (209272 call compilerError call_tmp[862801] 3)
      }
      (619144 return _void[46])
    }
    (209300 call _idxHelper dst[208993] dstRegion[208995] "dst" "dstRegion")
    (559674 'end of statement')
    (209306 call _idxHelper src[208997] srcRegion[208999] "src" "srcRegion")
    (559675 'end of statement')
    unknown call_tmp[862808] "expr temp" "maybe param" "maybe type" "temp"
    (862811 'move' call_tmp[862808](209345 call size _mt[203] dstRegion[208995]))
    unknown call_tmp[862815] "expr temp" "maybe param" "maybe type" "temp"
    (862818 'move' call_tmp[862815](209349 call size _mt[203] srcRegion[208999]))
    unknown call_tmp[862820] "expr temp" "maybe param" "maybe type" "temp"
    (862823 'move' call_tmp[862820](209342 call != call_tmp[862808] call_tmp[862815]))
    unknown call_tmp[862825] "expr temp" "maybe param" "maybe type" "temp"
    (862828 'move' call_tmp[862825](209352 call _cond_test call_tmp[862820]))
    if call_tmp[862825]
    {
      unknown call_tmp[862832] "expr temp" "maybe param" "maybe type" "temp"
      (862835 'move' call_tmp[862832](209328 call size _mt[203] dstRegion[208995]))
      unknown call_tmp[862837] "expr temp" "maybe param" "maybe type" "temp"
      (862840 'move' call_tmp[862837](209325 call : call_tmp[862832] string[244]))
      unknown call_tmp[862842] "expr temp" "maybe param" "maybe type" "temp"
      (862845 'move' call_tmp[862842](209320 call + "Destination and source specify a different number of elements to move: " call_tmp[862837]))
      unknown call_tmp[862847] "expr temp" "maybe param" "maybe type" "temp"
      (862850 'move' call_tmp[862847](209318 call + call_tmp[862842] " vs. "))
      unknown call_tmp[862854] "expr temp" "maybe param" "maybe type" "temp"
      (862857 'move' call_tmp[862854](209338 call size _mt[203] srcRegion[208999]))
      unknown call_tmp[862859] "expr temp" "maybe param" "maybe type" "temp"
      (862862 'move' call_tmp[862859](209335 call : call_tmp[862854] string[244]))
      unknown call_tmp[862864] "expr temp" "maybe param" "maybe type" "temp"
      (862867 'move' call_tmp[862864](209316 call + call_tmp[862847] call_tmp[862859]))
      unknown call_tmp[862869] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (862872 'move' call_tmp[862869](1000337 'new' IllegalArgumentError[414940](?) call_tmp[862864]))
      unknown call_tmp[862874] "expr temp" "maybe param" "maybe type" "temp"
      (862877 'move' call_tmp[862874](542443 call chpl_fix_thrown_error call_tmp[862869]))
      (209312 'throw' call_tmp[862874])
    }
    const dstGood[209357] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[690852] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[690853] "maybe param" "temp"
    unknown call_tmp[862879] "expr temp" "maybe param" "maybe type" "temp"
    (862882 'move' call_tmp[862879](209367 call isRange dstRegion[208995]))
    (690858 'move' tmp[690853](690856 call _cond_test call_tmp[862879]))
    if tmp[690853]
    {
      unknown tmp[690860] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (690862 'move' tmp[690860](209372 call chpl__buildDomainExpr dstRegion[208995] 1))
      (690867 'move' tmp[690852](690864 '_paramFoldLogical' tmp[690853] tmp[690860]))
    }
    {
      (690872 'move' tmp[690852](690869 '_paramFoldLogical' tmp[690853] dstRegion[208995]))
    }
    unknown call_tmp[862886] "expr temp" "maybe param" "maybe type" "temp"
    (862889 'move' call_tmp[862886](209359 call _dom _mt[203] dst[208993]))
    unknown call_tmp[862893] "maybe param" "maybe type" "temp"
    (862896 'move' call_tmp[862893](209365 call(209362 call (partial) contains _mt[203] call_tmp[862886]) tmp[690852]))
    (649214 'init var' dstGood[209357] call_tmp[862893])
    (209379 'end of statement')
    const srcGood[209381] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[690879] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[690880] "maybe param" "temp"
    unknown call_tmp[862898] "expr temp" "maybe param" "maybe type" "temp"
    (862901 'move' call_tmp[862898](209391 call isRange srcRegion[208999]))
    (690885 'move' tmp[690880](690883 call _cond_test call_tmp[862898]))
    if tmp[690880]
    {
      unknown tmp[690887] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (690889 'move' tmp[690887](209396 call chpl__buildDomainExpr srcRegion[208999] 1))
      (690894 'move' tmp[690879](690891 '_paramFoldLogical' tmp[690880] tmp[690887]))
    }
    {
      (690899 'move' tmp[690879](690896 '_paramFoldLogical' tmp[690880] srcRegion[208999]))
    }
    unknown call_tmp[862905] "expr temp" "maybe param" "maybe type" "temp"
    (862908 'move' call_tmp[862905](209383 call _dom _mt[203] src[208997]))
    unknown call_tmp[862912] "maybe param" "maybe type" "temp"
    (862915 'move' call_tmp[862912](209389 call(209386 call (partial) contains _mt[203] call_tmp[862905]) tmp[690879]))
    (649216 'init var' srcGood[209381] call_tmp[862912])
    (209403 'end of statement')
    unknown call_tmp[862917] "expr temp" "maybe param" "maybe type" "temp"
    (862920 'move' call_tmp[862917](209412 call ! dstGood[209357]))
    unknown call_tmp[862922] "expr temp" "maybe param" "maybe type" "temp"
    (862925 'move' call_tmp[862922](209415 call _cond_test call_tmp[862917]))
    if call_tmp[862922]
    {
      unknown call_tmp[862927] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (862930 'move' call_tmp[862927](1000338 'new' IllegalArgumentError[414940](?) "illegal argument 'dstRegion': region contains invalid indices"))
      unknown call_tmp[862932] "expr temp" "maybe param" "maybe type" "temp"
      (862935 'move' call_tmp[862932](542445 call chpl_fix_thrown_error call_tmp[862927]))
      (209404 'throw' call_tmp[862932])
    }
    unknown call_tmp[862937] "expr temp" "maybe param" "maybe type" "temp"
    (862940 'move' call_tmp[862937](209428 call ! srcGood[209381]))
    unknown call_tmp[862942] "expr temp" "maybe param" "maybe type" "temp"
    (862945 'move' call_tmp[862942](209431 call _cond_test call_tmp[862937]))
    if call_tmp[862942]
    {
      unknown call_tmp[862947] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (862950 'move' call_tmp[862947](1000339 'new' IllegalArgumentError[414940](?) "illegal argument 'srcRegion': region contains invalid indices"))
      unknown call_tmp[862952] "expr temp" "maybe param" "maybe type" "temp"
      (862955 'move' call_tmp[862952](542447 call chpl_fix_thrown_error call_tmp[862947]))
      (209420 'throw' call_tmp[862952])
    }
    (209437 call _testArrayAlias dst[208993] dstRegion[208995] src[208997] srcRegion[208999])
    (619146 return _void[46])
  }
  function moveArrayElements[209444](ref arg dst[209451]:_array[255540](?), const arg dstRegion[209454]:_any[141](?), const  ref arg src[209460]:_array[255540](?), const arg srcRegion[209463]:_any[141](?)) : _unknown[42] throws "compiler added where" "@unstable" "no return value for void"
  {
    unknown ret[619150] "RVV" "temp"
    (209468 call _checkArgs dst[209451] dstRegion[209454] src[209460] srcRegion[209463])
    (559680 'end of statement')
    unknown call_tmp[862957] "maybe param" "maybe type" "temp"
    (862960 'move' call_tmp[862957](469286 call chpl__staticAutoLocalCheck dst[209451] dstRegion[209454]))
    unknown chpl__staticAutoLocalCheckSym[469285] "dead at end of block" "param" "temp"
    (649218 'init var' chpl__staticAutoLocalCheckSym[469285] call_tmp[862957])
    unknown call_tmp[862962] "maybe param" "maybe type" "temp"
    (862965 'move' call_tmp[862962](469306 call chpl__staticAutoLocalCheck src[209460] srcRegion[209463]))
    unknown chpl__staticAutoLocalCheckSym[469305] "dead at end of block" "param" "temp"
    (649220 'init var' chpl__staticAutoLocalCheckSym[469305] call_tmp[862962])
    unknown tmp[507678] "maybe param" "temp"
    (507689 'move' tmp[507678] chpl__staticAutoLocalCheckSym[469305])
    unknown call_tmp[862967] "expr temp" "maybe param" "maybe type" "temp"
    (862970 'move' call_tmp[862967](507691 call _cond_invalid tmp[507678]))
    if call_tmp[862967]
    {
      (507694 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[690906] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[690907] "maybe param" "temp"
    unknown call_tmp[862972] "expr temp" "maybe param" "maybe type" "temp"
    (862975 'move' call_tmp[862972](507679 call isTrue tmp[507678]))
    (690912 'move' tmp[690907](690910 call _cond_test call_tmp[862972]))
    if tmp[690907]
    {
      (690917 'move' tmp[690906](690914 '_paramFoldLogical' tmp[690907] 1))
    }
    {
      unknown tmp[690919] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (690921 'move' tmp[690919](507683 call isTrue chpl__staticAutoLocalCheckSym[469285]))
      (690926 'move' tmp[690906](690923 '_paramFoldLogical' tmp[690907] tmp[690919]))
    }
    if tmp[690906]
    {
      unknown tmp[507699] "maybe param" "temp"
      unknown tmp[507720] "maybe param" "temp"
      (507731 'move' tmp[507720] chpl__staticAutoLocalCheckSym[469285])
      unknown call_tmp[862977] "expr temp" "maybe param" "maybe type" "temp"
      (862980 'move' call_tmp[862977](507733 call _cond_invalid tmp[507720]))
      if call_tmp[862977]
      {
        (507736 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[690933] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[690934] "maybe param" "temp"
      unknown call_tmp[862982] "expr temp" "maybe param" "maybe type" "temp"
      (862985 'move' call_tmp[862982](507721 call isTrue tmp[507720]))
      (690939 'move' tmp[690934](690937 call _cond_test call_tmp[862982]))
      if tmp[690934]
      {
        (690944 'move' tmp[690933](690941 '_paramFoldLogical' tmp[690934] 1))
      }
      {
        unknown tmp[690946] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (690948 'move' tmp[690946](507725 call isTrue chpl__staticAutoLocalCheckSym[469305]))
        (690953 'move' tmp[690933](690950 '_paramFoldLogical' tmp[690934] tmp[690946]))
      }
      (507710 'move' tmp[507699] tmp[690933])
      unknown call_tmp[862987] "expr temp" "maybe param" "maybe type" "temp"
      (862990 'move' call_tmp[862987](507712 call _cond_invalid tmp[507699]))
      if call_tmp[862987]
      {
        (507715 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[691041] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[691042] "maybe param" "temp"
      unknown call_tmp[862992] "expr temp" "maybe param" "maybe type" "temp"
      (862995 'move' call_tmp[862992](507700 call isTrue tmp[507699]))
      (691047 'move' tmp[691042](691045 call _cond_test call_tmp[862992]))
      if tmp[691042]
      {
        unknown tmp[507741] "maybe param" "temp"
        unknown tmp[507762] "maybe param" "temp"
        (507773 'move' tmp[507762](469319 'u!' chpl__staticAutoLocalCheckSym[469305]))
        unknown call_tmp[862997] "expr temp" "maybe param" "maybe type" "temp"
        (863000 'move' call_tmp[862997](507775 call _cond_invalid tmp[507762]))
        if call_tmp[862997]
        {
          (507778 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[690960] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[690961] "maybe param" "temp"
        unknown call_tmp[863002] "expr temp" "maybe param" "maybe type" "temp"
        (863005 'move' call_tmp[863002](507763 call isTrue tmp[507762]))
        (690966 'move' tmp[690961](690964 call _cond_test call_tmp[863002]))
        if tmp[690961]
        {
          (690971 'move' tmp[690960](690968 '_paramFoldLogical' tmp[690961] 1))
        }
        {
          unknown tmp[690973] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[863007] "expr temp" "maybe param" "maybe type" "temp"
          (863010 'move' call_tmp[863007](469314 call chpl__dynamicAutoLocalCheck src[209460] srcRegion[209463]))
          (690975 'move' tmp[690973](507767 call isTrue call_tmp[863007]))
          (690980 'move' tmp[690960](690977 '_paramFoldLogical' tmp[690961] tmp[690973]))
        }
        (507752 'move' tmp[507741] tmp[690960])
        unknown call_tmp[863012] "expr temp" "maybe param" "maybe type" "temp"
        (863015 'move' call_tmp[863012](507754 call _cond_invalid tmp[507741]))
        if call_tmp[863012]
        {
          (507757 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[691014] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[691015] "maybe param" "temp"
        unknown call_tmp[863017] "expr temp" "maybe param" "maybe type" "temp"
        (863020 'move' call_tmp[863017](507742 call isTrue tmp[507741]))
        (691020 'move' tmp[691015](691018 call _cond_test call_tmp[863017]))
        if tmp[691015]
        {
          unknown tmp[507783] "maybe param" "temp"
          (507794 'move' tmp[507783](469297 'u!' chpl__staticAutoLocalCheckSym[469285]))
          unknown call_tmp[863022] "expr temp" "maybe param" "maybe type" "temp"
          (863025 'move' call_tmp[863022](507796 call _cond_invalid tmp[507783]))
          if call_tmp[863022]
          {
            (507799 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[690987] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[690988] "maybe param" "temp"
          unknown call_tmp[863027] "expr temp" "maybe param" "maybe type" "temp"
          (863030 'move' call_tmp[863027](507784 call isTrue tmp[507783]))
          (690993 'move' tmp[690988](690991 call _cond_test call_tmp[863027]))
          if tmp[690988]
          {
            (690998 'move' tmp[690987](690995 '_paramFoldLogical' tmp[690988] 1))
          }
          {
            unknown tmp[691000] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[863032] "expr temp" "maybe param" "maybe type" "temp"
            (863035 'move' call_tmp[863032](469292 call chpl__dynamicAutoLocalCheck dst[209451] dstRegion[209454]))
            (691002 'move' tmp[691000](507788 call isTrue call_tmp[863032]))
            (691007 'move' tmp[690987](691004 '_paramFoldLogical' tmp[690988] tmp[691000]))
          }
          unknown tmp[691022] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (691024 'move' tmp[691022](507745 call isTrue tmp[690987]))
          (691029 'move' tmp[691014](691026 '_paramFoldLogical' tmp[691015] tmp[691022]))
        }
        {
          (691034 'move' tmp[691014](691031 '_paramFoldLogical' tmp[691015] 0))
        }
        unknown tmp[691049] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (691051 'move' tmp[691049](507703 call isTrue tmp[691014]))
        (691056 'move' tmp[691041](691053 '_paramFoldLogical' tmp[691042] tmp[691049]))
      }
      {
        (691061 'move' tmp[691041](691058 '_paramFoldLogical' tmp[691042] 0))
      }
      if tmp[691041]
      {
        Forall[209503] {
          induction variables:
            
            unknown di[209474] "index var" "insert auto destroy"
            
            unknown si[209476] "index var" "insert auto destroy"
          iterated expressions:
            dstRegion[209454]
            srcRegion[209463]
          shadow variables:
            dst[209486] 'ref' intent outer var dst[209451]
              init block
              {
              }
              deinit block
              {
              }
          other variables
            forall body
          {
            unknown call_tmp[863037] "expr temp" "maybe param" "maybe type" "temp"
            (863040 'move' call_tmp[863037](469301 'may be local access' dst[209451] di[209474] chpl__staticAutoLocalCheckSym[469285] 0))
            unknown call_tmp[863042] "expr temp" "maybe param" "maybe type" "temp"
            (863045 'move' call_tmp[863042](469325 'may be local access' src[209460] si[209476] chpl__staticAutoLocalCheckSym[469305] 0))
            unknown call_tmp[863047] "expr temp" "maybe param" "maybe type" "temp"
            (863050 'move' call_tmp[863047](209497 call moveFrom call_tmp[863042]))
            (209492 call moveInitialize call_tmp[863037] call_tmp[863047])
            (559684 'end of statement' di[209474] si[209476])
          }
        }
      }
      {
        Forall[469271] {
          induction variables:
            
            unknown di[469272] "index var" "insert auto destroy"
            
            unknown si[469274] "index var" "insert auto destroy"
          iterated expressions:
            dstRegion[209454]
            srcRegion[209463]
          shadow variables:
            dst[469279] 'ref' intent outer var dst[209451]
              init block
              {
              }
              deinit block
              {
              }
          other variables
            forall body
          {
            unknown call_tmp[863052] "expr temp" "maybe param" "maybe type" "temp"
            (863055 'move' call_tmp[863052](469264 call dst[469279] di[469272]))
            unknown call_tmp[863057] "expr temp" "maybe param" "maybe type" "temp"
            (863060 'move' call_tmp[863057](469269 call src[209460] si[469274]))
            unknown call_tmp[863062] "expr temp" "maybe param" "maybe type" "temp"
            (863065 'move' call_tmp[863062](469267 call moveFrom call_tmp[863057]))
            (469262 call moveInitialize call_tmp[863052] call_tmp[863062])
            (559687 'end of statement' dst[469279] di[469272] si[469274])
          }
        }
      }
    }
    {
      Forall[469246] {
        induction variables:
          
          unknown di[469247] "index var" "insert auto destroy"
          
          unknown si[469249] "index var" "insert auto destroy"
        iterated expressions:
          dstRegion[209454]
          srcRegion[209463]
        shadow variables:
          dst[469254] 'ref' intent outer var dst[209451]
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          unknown call_tmp[863067] "expr temp" "maybe param" "maybe type" "temp"
          (863070 'move' call_tmp[863067](469239 call dst[469254] di[469247]))
          unknown call_tmp[863072] "expr temp" "maybe param" "maybe type" "temp"
          (863075 'move' call_tmp[863072](469244 call src[209460] si[469249]))
          unknown call_tmp[863077] "expr temp" "maybe param" "maybe type" "temp"
          (863080 'move' call_tmp[863077](469242 call moveFrom call_tmp[863072]))
          (469237 call moveInitialize call_tmp[863067] call_tmp[863077])
          (559691 'end of statement' dst[469254] di[469247] si[469249])
        }
      }
    }
    (619152 return ret[619150])
  }
  where {
    unknown call_tmp[863084] "expr temp" "maybe param" "maybe type" "temp"
    (863087 'move' call_tmp[863084](528387 call eltType _mt[203] dst[209451]))
    unknown call_tmp[863091] "expr temp" "maybe param" "maybe type" "temp"
    (863094 'move' call_tmp[863091](528397 call eltType _mt[203] src[209460]))
    unknown call_tmp[863096] "expr temp" "maybe param" "maybe type" "temp"
    (863099 'move' call_tmp[863096](528401 'is_instantiation_allow_values' call_tmp[863084] call_tmp[863091]))
    (528395 call & 1 call_tmp[863096])
  }
  { scopeless type
    void[4]
  }
  function moveArrayElements[209510](ref arg dst[209517]:_array[255540](?), const  ref arg src[209524]:_array[255540](?)) : _unknown[42] throws "compiler added where" "@unstable" "no return value for void"
  {
    unknown ret[619156] "RVV" "temp"
    unknown call_tmp[863103] "expr temp" "maybe param" "maybe type" "temp"
    (863106 'move' call_tmp[863103](209533 call _dom _mt[203] dst[209517]))
    unknown call_tmp[863110] "expr temp" "maybe param" "maybe type" "temp"
    (863113 'move' call_tmp[863110](209538 call _dom _mt[203] src[209524]))
    (209530 call _checkArgs dst[209517] call_tmp[863103] src[209524] call_tmp[863110])
    (559695 'end of statement')
    unknown call_tmp[863117] "expr temp" "maybe param" "maybe type" "temp"
    (863120 'move' call_tmp[863117](209545 call _dom _mt[203] dst[209517]))
    unknown call_tmp[863124] "expr temp" "maybe param" "maybe type" "temp"
    (863127 'move' call_tmp[863124](209550 call _dom _mt[203] src[209524]))
    (209542 call moveArrayElements dst[209517] call_tmp[863117] src[209524] call_tmp[863124])
    (619158 return ret[619156])
  }
  where {
    unknown call_tmp[863131] "expr temp" "maybe param" "maybe type" "temp"
    (863134 'move' call_tmp[863131](528404 call eltType _mt[203] dst[209517]))
    unknown call_tmp[863138] "expr temp" "maybe param" "maybe type" "temp"
    (863141 'move' call_tmp[863138](528414 call eltType _mt[203] src[209524]))
    unknown call_tmp[863143] "expr temp" "maybe param" "maybe type" "temp"
    (863146 'move' call_tmp[863143](528418 'is_instantiation_allow_values' call_tmp[863131] call_tmp[863138]))
    (528412 call & 1 call_tmp[863143])
  }
  { scopeless type
    void[4]
  }
  function moveInitializeArrayElements[209556](ref arg a[209562]:_array[255540](?), arg dstStartIndex[209569] :
  (209566 call idxType _mt[203] a[209562]), arg srcStartIndex[209576] :
  (209573 call idxType _mt[203] a[209562]), arg numElements[209580]:int(64)[10]) : _unknown[42] "deprecated" "no return value for void"
  {
    (209585 call _errorNot1DRectangularArray a[209562])
    (559697 'end of statement')
    unknown call_tmp[863152] "expr temp" "maybe param" "maybe type" "temp"
    (863155 'move' call_tmp[863152](209613 call _cond_test 1))
    if call_tmp[863152]
    {
      (209589 call _haltBadElementRange a[209562] dstStartIndex[209569] numElements[209580])
      (559698 'end of statement')
      (209594 call _haltBadIndex a[209562] dstStartIndex[209569] "dstStartIndex")
      (559699 'end of statement')
      (209601 call _haltBadIndex a[209562] srcStartIndex[209576] "srcStartIndex")
      (559700 'end of statement')
      (209608 call _haltRangeOverlap dstStartIndex[209569] srcStartIndex[209576] numElements[209580])
    }
    unknown call_tmp[863157] "expr temp" "maybe param" "maybe type" "temp"
    (863160 'move' call_tmp[863157](209619 call == dstStartIndex[209569] srcStartIndex[209576]))
    unknown call_tmp[863162] "expr temp" "maybe param" "maybe type" "temp"
    (863165 'move' call_tmp[863162](209623 call _cond_test call_tmp[863157]))
    if call_tmp[863162]
    {
      gotoReturn _end_moveInitializeArrayElements[619160] _end_moveInitializeArrayElements[619160]
    }
    unknown call_tmp[863169] "maybe param" "maybe type" "temp"
    (863172 'move' call_tmp[863169](209631 call _dom _mt[203] a[209562]))
    const d[209629] "dead at end of block" "const" "insert auto destroy"
    (649222 'init var' d[209629] call_tmp[863169])
    (209635 'end of statement')
    unknown call_tmp[863176] "maybe param" "maybe type" "temp"
    (863179 'move' call_tmp[863176](209642 call(209639 call (partial) indexOrder _mt[203] d[209629]) dstStartIndex[209569]))
    const dstLo[209637] "dead at end of block" "const" "insert auto destroy"
    (649224 'init var' dstLo[209637] call_tmp[863176])
    (209645 'end of statement')
    unknown call_tmp[863183] "maybe param" "maybe type" "temp"
    (863186 'move' call_tmp[863183](209652 call(209649 call (partial) indexOrder _mt[203] d[209629]) srcStartIndex[209576]))
    const srcLo[209647] "dead at end of block" "const" "insert auto destroy"
    (649226 'init var' srcLo[209647] call_tmp[863183])
    (209655 'end of statement' d[209629])
    unknown call_tmp[469341] "expr temp" "maybe param" "maybe type" "temp"
    unknown call_tmp[863188] "expr temp" "maybe param" "maybe type" "temp"
    (863191 'move' call_tmp[863188](209660 call chpl__nudgeHighBound numElements[209580]))
    (469344 'move' call_tmp[469341](209662 call chpl_build_bounded_range 0 call_tmp[863188]))
    Forall[209717] {
      induction variables:
        
        unknown i[209656] "index var" "insert auto destroy"
      iterated expressions:
        call_tmp[469341]
      shadow variables:
        a[209666] 'ref' intent outer var a[209562]
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        unknown call_tmp[863195] "expr temp" "maybe param" "maybe type" "temp"
        (863198 'move' call_tmp[863195](209678 call + dstLo[209637] i[209656]))
        unknown call_tmp[863200] "maybe param" "maybe type" "temp"
        (863203 'move' call_tmp[863200](209677 call(209674 call (partial) orderToIndex _mt[203] d[209629]) call_tmp[863195]))
        const dstIdx[209672] "dead at end of block" "const" "insert auto destroy"
        (649228 'init var' dstIdx[209672] call_tmp[863200])
        (209683 'end of statement')
        unknown call_tmp[863207] "expr temp" "maybe param" "maybe type" "temp"
        (863210 'move' call_tmp[863207](209691 call + srcLo[209647] i[209656]))
        unknown call_tmp[863212] "maybe param" "maybe type" "temp"
        (863215 'move' call_tmp[863212](209690 call(209687 call (partial) orderToIndex _mt[203] d[209629]) call_tmp[863207]))
        const srcIdx[209685] "dead at end of block" "const" "insert auto destroy"
        (649230 'init var' srcIdx[209685] call_tmp[863212])
        (209696 'end of statement')
        unknown dst[209698] "dead at end of block" "ref var"
        (649235 'init ref decl' dst[209698])
        unknown call_tmp[863217] "expr temp" "maybe param" "maybe type" "temp"
        (863220 'move' call_tmp[863217](209700 call a[209666] dstIdx[209672]))
        (649233 'move' dst[209698](649232 'addr of' call_tmp[863217]))
        (209703 'end of statement')
        const src[209705] "dead at end of block" "const" "ref var"
        (649240 'init ref decl' src[209705])
        unknown call_tmp[863222] "expr temp" "maybe param" "maybe type" "temp"
        (863225 'move' call_tmp[863222](209707 call a[209666] srcIdx[209685]))
        (649238 'move' src[209705](649237 'addr of' call_tmp[863222]))
        (209710 'end of statement' d[209629] dstLo[209637] i[209656] srcLo[209647] i[209656] a[209666] dstIdx[209672] a[209666] srcIdx[209685])
        (209712 call _move dst[209698] src[209705])
        (559713 'end of statement' dst[209698] src[209705])
      }
    }
    label _end_moveInitializeArrayElements[619160]
    (619162 return _void[46])
  }
  function moveInitializeArrayElements[209722](ref arg dstA[209729]:_array[255540](?), arg dstStartIndex[209736] :
  (209733 call idxType _mt[203] dstA[209729]), arg srcA[209743]:_array[255540](?), arg srcStartIndex[209750] :
  (209747 call idxType _mt[203] srcA[209743]), arg numElements[209754]:int(64)[10]) : _unknown[42] "compiler added where" "deprecated" "no return value for void"
  {
    (209759 call _errorNot1DRectangularArray dstA[209729])
    (559716 'end of statement')
    (209762 call _errorNot1DRectangularArray srcA[209743])
    (559717 'end of statement')
    unknown call_tmp[863231] "expr temp" "maybe param" "maybe type" "temp"
    (863234 'move' call_tmp[863231](209786 call _cond_test 1))
    if call_tmp[863231]
    {
      (209766 call _haltBadElementRange dstA[209729] dstStartIndex[209736] numElements[209754])
      (559718 'end of statement')
      (209771 call _haltBadElementRange srcA[209743] srcStartIndex[209750] numElements[209754])
      (559719 'end of statement')
      (209776 call _haltBadIndex dstA[209729] dstStartIndex[209736] "dstStartIndex")
      (559720 'end of statement')
      (209781 call _haltBadIndex srcA[209743] srcStartIndex[209750] "srcStartIndex")
    }
    unknown call_tmp[863238] "expr temp" "maybe param" "maybe type" "temp"
    (863241 'move' call_tmp[863238](209795 call _instance _mt[203] dstA[209729]))
    unknown call_tmp[863245] "expr temp" "maybe param" "maybe type" "temp"
    (863248 'move' call_tmp[863245](209799 call _instance _mt[203] srcA[209743]))
    unknown call_tmp[863250] "maybe param" "maybe type" "temp"
    (863253 'move' call_tmp[863250](209792 call == call_tmp[863238] call_tmp[863245]))
    const isSameArray[209791] "dead at end of block" "const" "insert auto destroy"
    (649242 'init var' isSameArray[209791] call_tmp[863250])
    (209803 'end of statement')
    unknown tmp[495204] "maybe param" "temp"
    (495215 'move' tmp[495204] 1)
    unknown call_tmp[863255] "expr temp" "maybe param" "maybe type" "temp"
    (863258 'move' call_tmp[863255](495217 call _cond_invalid tmp[495204]))
    if call_tmp[863255]
    {
      (495220 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[691068] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691069] "maybe param" "temp"
    unknown call_tmp[863260] "expr temp" "maybe param" "maybe type" "temp"
    (863263 'move' call_tmp[863260](495205 call isTrue tmp[495204]))
    (691074 'move' tmp[691069](691072 call _cond_test call_tmp[863260]))
    if tmp[691069]
    {
      unknown tmp[691076] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (691078 'move' tmp[691076](495208 call isTrue isSameArray[209791]))
      (691083 'move' tmp[691068](691080 '_paramFoldLogical' tmp[691069] tmp[691076]))
    }
    {
      (691088 'move' tmp[691068](691085 '_paramFoldLogical' tmp[691069] 0))
    }
    unknown call_tmp[863265] "expr temp" "maybe param" "maybe type" "temp"
    (863268 'move' call_tmp[863265](209814 call _cond_test tmp[691068]))
    if call_tmp[863265]
    {
      (209806 call _haltRangeOverlap dstStartIndex[209736] srcStartIndex[209750] numElements[209754])
    }
    unknown tmp[495225] "maybe param" "temp"
    (495236 'move' tmp[495225] isSameArray[209791])
    unknown call_tmp[863270] "expr temp" "maybe param" "maybe type" "temp"
    (863273 'move' call_tmp[863270](495238 call _cond_invalid tmp[495225]))
    if call_tmp[863270]
    {
      (495241 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[691095] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[691096] "maybe param" "temp"
    unknown call_tmp[863275] "expr temp" "maybe param" "maybe type" "temp"
    (863278 'move' call_tmp[863275](495226 call isTrue tmp[495225]))
    (691101 'move' tmp[691096](691099 call _cond_test call_tmp[863275]))
    if tmp[691096]
    {
      unknown tmp[691103] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[863280] "expr temp" "maybe param" "maybe type" "temp"
      (863283 'move' call_tmp[863280](209823 call == dstStartIndex[209736] srcStartIndex[209750]))
      (691105 'move' tmp[691103](495229 call isTrue call_tmp[863280]))
      (691110 'move' tmp[691095](691107 '_paramFoldLogical' tmp[691096] tmp[691103]))
    }
    {
      (691115 'move' tmp[691095](691112 '_paramFoldLogical' tmp[691096] 0))
    }
    unknown call_tmp[863285] "expr temp" "maybe param" "maybe type" "temp"
    (863288 'move' call_tmp[863285](209827 call _cond_test tmp[691095]))
    if call_tmp[863285]
    {
      gotoReturn _end_moveInitializeArrayElements[619166] _end_moveInitializeArrayElements[619166]
    }
    unknown call_tmp[863292] "maybe param" "maybe type" "temp"
    (863295 'move' call_tmp[863292](209835 call _dom _mt[203] dstA[209729]))
    const dstD[209833] "dead at end of block" "const" "insert auto destroy"
    (649244 'init var' dstD[209833] call_tmp[863292])
    (209839 'end of statement')
    unknown call_tmp[863299] "maybe param" "maybe type" "temp"
    (863302 'move' call_tmp[863299](209843 call _dom _mt[203] srcA[209743]))
    const srcD[209841] "dead at end of block" "const" "insert auto destroy"
    (649246 'init var' srcD[209841] call_tmp[863299])
    (209847 'end of statement')
    unknown call_tmp[863306] "maybe param" "maybe type" "temp"
    (863309 'move' call_tmp[863306](209854 call(209851 call (partial) indexOrder _mt[203] dstD[209833]) dstStartIndex[209736]))
    unknown dstLo[209849] "dead at end of block" "insert auto destroy"
    (649248 'init var' dstLo[209849] call_tmp[863306])
    (209857 'end of statement')
    unknown call_tmp[863313] "maybe param" "maybe type" "temp"
    (863316 'move' call_tmp[863313](209864 call(209861 call (partial) indexOrder _mt[203] dstD[209833]) srcStartIndex[209750]))
    unknown srcLo[209859] "dead at end of block" "insert auto destroy"
    (649250 'init var' srcLo[209859] call_tmp[863313])
    (209867 'end of statement' dstD[209833])
    unknown call_tmp[469346] "expr temp" "maybe param" "maybe type" "temp"
    unknown call_tmp[863318] "expr temp" "maybe param" "maybe type" "temp"
    (863321 'move' call_tmp[863318](209872 call chpl__nudgeHighBound numElements[209754]))
    (469349 'move' call_tmp[469346](209874 call chpl_build_bounded_range 0 call_tmp[863318]))
    Forall[209929] {
      induction variables:
        
        unknown i[209868] "index var" "insert auto destroy"
      iterated expressions:
        call_tmp[469346]
      shadow variables:
        dstA[209878] 'ref' intent outer var dstA[209729]
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        unknown call_tmp[863325] "expr temp" "maybe param" "maybe type" "temp"
        (863328 'move' call_tmp[863325](209890 call + dstLo[209849] i[209868]))
        unknown call_tmp[863330] "maybe param" "maybe type" "temp"
        (863333 'move' call_tmp[863330](209889 call(209886 call (partial) orderToIndex _mt[203] dstD[209833]) call_tmp[863325]))
        const dstIdx[209884] "dead at end of block" "const" "insert auto destroy"
        (649252 'init var' dstIdx[209884] call_tmp[863330])
        (209895 'end of statement')
        unknown call_tmp[863337] "expr temp" "maybe param" "maybe type" "temp"
        (863340 'move' call_tmp[863337](209903 call + srcLo[209859] i[209868]))
        unknown call_tmp[863342] "maybe param" "maybe type" "temp"
        (863345 'move' call_tmp[863342](209902 call(209899 call (partial) orderToIndex _mt[203] srcD[209841]) call_tmp[863337]))
        const srcIdx[209897] "dead at end of block" "const" "insert auto destroy"
        (649254 'init var' srcIdx[209897] call_tmp[863342])
        (209908 'end of statement')
        unknown dst[209910] "dead at end of block" "ref var"
        (649259 'init ref decl' dst[209910])
        unknown call_tmp[863347] "expr temp" "maybe param" "maybe type" "temp"
        (863350 'move' call_tmp[863347](209912 call dstA[209878] dstIdx[209884]))
        (649257 'move' dst[209910](649256 'addr of' call_tmp[863347]))
        (209915 'end of statement')
        const src[209917] "dead at end of block" "const" "ref var"
        (649264 'init ref decl' src[209917])
        unknown call_tmp[863352] "expr temp" "maybe param" "maybe type" "temp"
        (863355 'move' call_tmp[863352](209919 call srcA[209743] srcIdx[209897]))
        (649262 'move' src[209917](649261 'addr of' call_tmp[863352]))
        (209922 'end of statement' dstD[209833] dstLo[209849] i[209868] srcD[209841] srcLo[209859] i[209868] dstA[209878] dstIdx[209884] srcIdx[209897])
        (209924 call _move dst[209910] src[209917])
        (559736 'end of statement' dst[209910] src[209917])
      }
    }
    label _end_moveInitializeArrayElements[619166]
    (619168 return _void[46])
  }
  where {
    unknown call_tmp[863359] "expr temp" "maybe param" "maybe type" "temp"
    (863362 'move' call_tmp[863359](528423 call eltType _mt[203] dstA[209729]))
    unknown call_tmp[863366] "expr temp" "maybe param" "maybe type" "temp"
    (863369 'move' call_tmp[863366](528433 call eltType _mt[203] srcA[209743]))
    unknown call_tmp[863371] "expr temp" "maybe param" "maybe type" "temp"
    (863374 'move' call_tmp[863371](528437 'is_instantiation_allow_values' call_tmp[863359] call_tmp[863366]))
    (528431 call & 1 call_tmp[863371])
  }
  (396788 'used modules list'(387030 'use' ChapelStandard[315387]))
}