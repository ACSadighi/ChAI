AST dump for Autograd after pass readExternC.
Module use list: Utilities 

{
  (387074 'use' ChapelStandard)
  (333441 'use' NDArray)
  (333444 'use' Remote)
  (333448 'import' Utilities 'as' util)
  (333456 'import'(333453 call . Math c"exp"))
  function checkRank[333457](arg te[333466] :
  (333460 call _shared(333463 call TensorEssence[333748](?) unknown eltType[333464])), param arg rank[333470] :
  int[10]) : _unknown[42] "inline"
  {
    if(333495 call _cond_test(333494 'if var' unknown x[333492](333481 call : te[333466](333485 call _shared(333491 'to nilable class from type'(333488 call BaseTensorResource[334219](?) eltType[333464] rank[333470]))))))
    {
      { scopeless
        (333475 return 1)
      }
    }
    {
      { scopeless
        (333478 return 0)
      }
    }
  }
  { scopeless type
    bool[19]
  }
  function getRank[333504](arg te[333513] :
  (333507 call _shared(333510 call TensorEssence[333748](?) unknown eltType[333511]))) : _unknown[42]
  {
    {
      unknown i[333518] "index var" 0
      unknown tmp[333536] "maybe param" "temp"
      (333548 'move' tmp[333536](333546 call chpl_compute_low_param_loop_bound 1 6))
      unknown tmp[333537] "maybe param" "temp"
      (333555 'move' tmp[333537](333553 call chpl_compute_high_param_loop_bound 1 6))
      unknown tmp[333538] "maybe param" "temp"
      (333558 'move' tmp[333538] 1)
      ParamForLoop[333560]
      { i[333518] tmp[333536] tmp[333537] tmp[333538]
        { scopeless
          if(333531 call _cond_test(333528 call checkRank te[333513] i[333518]))
          {
            { scopeless
              (333524 return i[333518])
            }
          }
        }
      }
      label _unused_continueLabel[333540]
      label _breakLabel[333539]
    }
    (333570 call halt "Unable to find rank for this staticTensor. Rank may be too high.")
  }
  { scopeless type
    int[10]
  }
  function forceRank[333577](arg te[333586] :
  (333580 call _shared(333583 call TensorEssence[333748](?) unknown eltType[333584])), param arg rank[333590] :
  int[10]) : _unknown[42]
  {
    (333601 return(333602 call : te[333586](333606 call _shared(333609 call BaseTensorResource[334219](?) eltType[333584] rank[333590]))))
  }
  { scopeless type
    (333594 call _shared(333597 call BaseTensorResource[334219](?) eltType[333584] rank[333590]))
  }
  type TensorEssence[333745](?) unknown eltType[333619] "type variable" real[13] function TensorEssence[333745](?).runtimeRank[333622](arg _mt[333626]:_MT[201], arg this[333624]:TensorEssence[333745](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (333631 call halt "Not implemented.")
    (333635 return(333636 call - 1))
  }
  { scopeless type
    int[10]
  } function TensorEssence[333745](?).children[333642](arg _mt[333646]:_MT[201], arg this[333644]:TensorEssence[333745](?)) : _unknown[42] "iterator fn" "method" "primary method"
  {
  }
  { scopeless type
    (333648 'to borrowed class from unknown'(333651 call TensorEssence[333748](?)(333652 call . this[333644] c"eltType")))
  } function TensorEssence[333745](?).treeHeight[333660](arg _mt[333664]:_MT[201], arg this[333662]:TensorEssence[333745](?)) : _unknown[42] "method" "primary method"
  {
    (333675 'import'(333672 call . Math c"max"))
    { scopeless
      unknown mx[333677] 0
      (333680 'end of statement')
    }
    {
      unknown _indexOfInterest[333704] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[333705] "expr temp" "temp"
      (333714 'move' _iterator[333705](333712 call _getIterator(333689 call(333685 call . this[333662] c"children"))))
      Defer
      {
        {
          (333729 call _freeIterator _iterator[333705])
        }
      }
      { scopeless type
        (333719 'move' _indexOfInterest[333704](333716 call iteratorIndex _iterator[333705]))
      }
      ForLoop[333706]
      {
        unknown c[333681] "index var" "insert auto destroy"
        (333724 'move' c[333681] _indexOfInterest[333704])
        { scopeless
          (333690 call = mx[333677](333694 call max mx[333677](333702 call(333699 call . c[333681] c"treeHeight"))))
        }
        label _continueLabel[333709]
        _indexOfInterest[333704]
        _iterator[333705]
      }
      label _breakLabel[333710]
    }
    (333736 return(333737 call + mx[333677] 1))
  }
  { scopeless type
    int[10]
  } serializable[310094]
  type TensorEssence[333748](?)
  type ForgetfulTensor[333758](?) unknown rank[333753] "param" int[10] TensorEssence[333748](?)
  type BaseTensorResource[334216](?) unknown rank[333766] "param" int[10] unknown dataResource[333771](333773 call _shared(333775 call Remote(333777 call ndarray[328686](?) rank[333766] eltType))) unknown gradResource[333783](333785 call _shared(333792 'to nilable class from type'(333787 call Remote(333789 call ndarray[328686](?) rank[333766] eltType)))) function BaseTensorResource[334216](?).init[333795](arg _mt[333805]:_MT[201], arg this[333797]:BaseTensorResource[334216](?), arg eltType[333799]:_any[141](?), param arg rank[333802] :
  int[10]) : _unknown[42] "method" "primary method"
  {
    (333815 call(333812 call .(333809 call . this[333797] c"super") c"init") eltType[333799])
    (333817 call =(333820 call . this[333797] c"rank") rank[333802])
    (333824 call =(333829 call . this[333797] c"dataResource")(333832 'new'(_chpl_manager = _shared[242](?))(333836 call Remote[315927](?)(333838 call ndarray[328686](?) rank[333802] eltType[333799]))))
  } function BaseTensorResource[334216](?).init[333843](arg _mt[333874]:_MT[201], arg this[333845]:BaseTensorResource[334216](?), in arg dataResource[333857] :
  (333848 call _shared(333850 call Remote(333852 call ndarray[328686](?) unknown rank[333853] unknown eltType[333855]))), in arg gradResource[333870] :
  (333861 call _shared(333868 'to nilable class from type'(333863 call Remote(333865 call ndarray[328686](?) rank[333853] eltType[333855])))) =
  nil[32]) : _unknown[42] "method" "primary method"
  {
    (333884 call(333881 call .(333878 call . this[333845] c"super") c"init") eltType[333855])
    (333886 call =(333889 call . this[333845] c"rank") rank[333853])
    (333893 call =(333896 call . this[333845] c"dataResource") dataResource[333857])
    (333900 call =(333905 call . this[333845] c"gradResource") gradResource[333870])
  } function BaseTensorResource[334216](?).init[333911](arg _mt[333933]:_MT[201], arg this[333913]:BaseTensorResource[334216](?), arg data[333921] :
  (333916 call ndarray[328686](?) unknown rank[333917] unknown eltType[333919]), arg device[333929] :
  locale[234] =
  (333926 call . Remote[315927](?) c"defaultDevice")) : _unknown[42] "method" "primary method"
  {
    { scopeless
      { scopeless
        unknown chpl_wrapper_dataResource[333949](333950 call chpl__buildRemoteWrapper device[333929](333941 call _shared(333943 call Remote(333945 call ndarray[328686](?) rank[333917] eltType[333919])))(333952 'create thunk' data[333921]))
        unknown dataResource[333938] "remote variable" "ref var"(333958 call(333955 call . chpl_wrapper_dataResource[333949] c"get"))
      }
      (333960 'end of statement')
    }
    (333965 call(333962 call . this[333913] c"init") dataResource[333938] nil[32])
  } function BaseTensorResource[334216](?).to[333970](arg _mt[333978]:_MT[201], arg this[333972]:BaseTensorResource[334216](?), arg dest[333975] :
  locale[234]) : _unknown[42] "method" "primary method"
  {
    (333990 call(333987 call .(333981 call . this[333972] c"dataResource") c"to") dest[333975])
    if(334008 call _cond_test(334004 call . this[333972] c"gradResource"))
    {
      { scopeless
        (334001 call(333998 call .(333992 call postfix!(333994 call . this[333972] c"gradResource")) c"to") dest[333975])
      }
    }
  } function BaseTensorResource[334216](?).device[334015](arg _mt[334019]:_MT[201], arg this[334017]:BaseTensorResource[334216](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (334023 return(334028 call .(334024 call . this[334017] c"dataResource") c"device"))
  }
  { scopeless type
    locale[234]
  } function BaseTensorResource[334216](?).array[334034](arg _mt[334038]:_MT[201], arg this[334036]:BaseTensorResource[334216](?)) ref : _unknown[42] "method" "primary method" "no parens"
  {
    (334051 return(334056 call .(334052 call . this[334036] c"dataResource") c"ptr"))
  }
  { scopeless type
    (334041 call ndarray[328686](?)(334042 call . this[334036] c"rank")(334046 call . this[334036] c"eltType"))
  } function BaseTensorResource[334216](?).grad[334062](arg _mt[334066]:_MT[201], arg this[334064]:BaseTensorResource[334216](?)) ref : _unknown[42] "method" "primary method" "no parens"
  {
    (334079 return(334086 call .(334080 call postfix!(334082 call . this[334064] c"gradResource")) c"ptr"))
  }
  { scopeless type
    (334069 call ndarray[328686](?)(334070 call . this[334064] c"rank")(334074 call . this[334064] c"eltType"))
  } function BaseTensorResource[334216](?).forward[334092](arg _mt[334096]:_MT[201], arg this[334094]:BaseTensorResource[334216](?)) : _unknown[42] "method" "primary method"
  {
    (334100 call halt "Forward function not defined for BaseTensorResource.")
  } function BaseTensorResource[334216](?).backward[334106](arg _mt[334129]:_MT[201], arg this[334108]:BaseTensorResource[334216](?), arg grad[334122] :
  (334111 call remote(334113 call ndarray[328686](?)(334114 call . this[334108] c"rank")(334118 call . this[334108] c"eltType"))), param arg alreadyPopulated[334126] =
  0) : _unknown[42] "method" "primary method"
  {
    (334133 call halt "Backward function not defined for BaseTensorResource.")
  } function BaseTensorResource[334216](?).backward[334139](arg _mt[334143]:_MT[201], arg this[334141]:BaseTensorResource[334216](?)) : _unknown[42] "method" "primary method"
  {
    (334154 call halt "Backward function not defined for BaseTensorResource.")
  }
  where {
    (334145 call ==(334147 call . this[334141] c"rank") 1)
  } function BaseTensorResource[334216](?).detach[334159](arg _mt[334175]:_MT[201], arg this[334161]:BaseTensorResource[334216](?), arg copy[334165] :
  bool[19] =
  1, arg keepGrad[334171] :
  bool[19] =
  0) : _unknown[42] "method" "primary method"
  {
    (334194 call halt "Not implemented.")
  }
  { scopeless type
    (334178 call _owned(334181 call TensorResource[334760](?)(334182 call . this[334161] c"eltType")(334186 call . this[334161] c"rank") baseValue[334793]))
  } function BaseTensorResource[334216](?).runtimeRank[334199](arg _mt[334203]:_MT[201], arg this[334201]:BaseTensorResource[334216](?)) : _unknown[42] "method" "primary method" "no parens" "method overrides"
  {
    (334207 return(334208 call . this[334201] c"rank"))
  }
  { scopeless type
    int[10]
  } TensorEssence[333748](?) serializable[310094]
  type BaseTensorResource[334219](?)
  type TensorResource[334757](?) unknown operationType[334226] "type variable" unknown operationCtx[334229] operationType[334226] function TensorResource[334757](?).init[334233](arg _mt[334248]:_MT[201], arg this[334235]:TensorResource[334757](?), arg eltType[334237]:_any[141](?), param arg rank[334240] :
  int[10], arg operationCtx[334245] :
  unknown operationType[334243]) : _unknown[42] "method" "primary method"
  {
    (334258 call(334255 call .(334252 call . this[334235] c"super") c"init") eltType[334237] rank[334240])
    (334261 call =(334266 call . this[334235] c"operationType") operationType[334243])
    (334270 call =(334275 call . this[334235] c"operationCtx") operationCtx[334245])
  } function TensorResource[334757](?).init[334281](arg _mt[334317]:_MT[201], arg this[334283]:TensorResource[334757](?), in arg dataResource[334295] :
  (334286 call _shared(334288 call Remote(334290 call ndarray[328686](?) unknown rank[334291] unknown eltType[334293]))), in arg gradResource[334308] :
  (334299 call _shared(334306 'to nilable class from type'(334301 call Remote(334303 call ndarray[328686](?) rank[334291] eltType[334293])))) =
  nil[32], arg operationCtx[334314] :
  unknown operationType[334312]) : _unknown[42] "method" "primary method"
  {
    (334327 call(334324 call .(334321 call . this[334283] c"super") c"init") dataResource[334295] gradResource[334308])
    (334330 call =(334333 call . this[334283] c"operationType") operationType[334312])
    (334337 call =(334340 call . this[334283] c"operationCtx") operationCtx[334314])
  } function TensorResource[334757](?).init[334346](arg _mt[334363]:_MT[201], arg this[334348]:TensorResource[334757](?), in arg dataResource[334360] :
  (334351 call _shared(334353 call Remote(334355 call ndarray[328686](?) unknown rank[334356] unknown eltType[334358])))) : _unknown[42] "method" "primary method"
  {
    (334370 call(334367 call . this[334348] c"init") dataResource[334360] nil[32](334373 'new'(334376 call baseValue[334793])))
  } function TensorResource[334757](?).init[334379](arg _mt[334398]:_MT[201], arg this[334381]:TensorResource[334757](?), arg bt[334390] :
  (334383 'to borrowed class from unknown'(334385 call BaseTensorResource[334219](?) unknown eltType[334386] unknown rank[334388])), arg operationCtx[334395] :
  unknown operationType[334393]) : _unknown[42] "method" "primary method"
  {
    (334405 call(334402 call . this[334381] c"init")(334410 call(334407 call . _shared c"adopt")(334418 call(334415 call .(334412 call . bt[334390] c"dataResource") c"copy")))(334423 call(334420 call . _shared c"adopt")(334433 call(334430 call .(334424 call postfix!(334427 call . bt[334390] c"gradResource")) c"copy")))(334434 'new'(334437 call baseValue[334793])))
  } function TensorResource[334757](?).detach[334440](arg _mt[334456]:_MT[201], arg this[334442]:TensorResource[334757](?), arg copy[334446] :
  bool[19] =
  1, arg keepGrad[334452] :
  bool[19] =
  0) : _unknown[42] "method" "primary method" "method overrides"
  {
    { scopeless
      unknown dr[334475](334490 call . this[334442] c"dataResource")(334477 call _shared(334479 call Remote(334481 call ndarray[328686](?)(334482 call . this[334442] c"rank")(334486 call . this[334442] c"eltType"))))
      (334495 'end of statement')
    }
    { scopeless
      unknown gr[334497](334519 IfExpr  keepGrad[334452] then
      { scopeless
        (334514 call . this[334442] c"gradResource")
      } else
      { scopeless
        nil[32]
      } )(334499 call _shared(334512 'to nilable class from type'(334501 call Remote(334503 call ndarray[328686](?)(334504 call . this[334442] c"rank")(334508 call . this[334442] c"eltType")))))
      (334523 'end of statement')
    }
    if(334564 call _cond_test copy[334446])
    {
      (334525 call = dr[334475](334532 call(334529 call . _shared c"adopt")(334537 call(334534 call . dr[334475] c"copy"))))
      if(334558 call _cond_test(334554 call != gr[334497] nil[32]))
      {
        { scopeless
          (334538 call = gr[334497](334545 call(334542 call . _shared c"adopt")(334552 call(334549 call .(334546 call postfix! gr[334497]) c"copy"))))
        }
      }
    }
    (334568 return(334569 'new'(334572 call TensorResource[334760](?) dr[334475] gr[334497](334575 'new'(334578 call baseValue[334793])))))
  }
  { scopeless type
    (334459 call _owned(334462 call TensorResource[334760](?)(334463 call . this[334442] c"eltType")(334467 call . this[334442] c"rank") baseValue[334793]))
  } function TensorResource[334757](?).forward[334582](arg _mt[334586]:_MT[201], arg this[334584]:TensorResource[334757](?)) : _unknown[42] "method" "primary method" "method overrides"
  {
    if(334599 call _cond_test(334591 call ==(334593 call . this[334584] c"operationType") baseValue[334793]))
    {
      { scopeless
        (334589 return)
      }
    }
    {
      const tmp[334640] "const" "temp"
      (334641 'move' tmp[334640](334638 'deref'(334637 '_wide_get_locale'(334604 call . this[334584] c"device"))))
      {
        { scopeless
          const ctx[334610] "const"(334611 call . this[334584] c"operationCtx")
          (334616 'end of statement')
        }
        { scopeless
          unknown arrayAddr[334618] "ref var"(334621 call . this[334584] c"array")
          (334626 'end of statement')
        }
        (334627 call = arrayAddr[334618](334636 call(334633 call . ctx[334610] c"forward")))
      }
      (334644 'elided on block' 0 tmp[334640])
    }
  } function TensorResource[334757](?).children[334650](arg _mt[334654]:_MT[201], arg this[334652]:TensorResource[334757](?)) : _unknown[42] "iterator fn" "method" "primary method" "method overrides"
  {
    { scopeless
      const childs[334665] "const"(334670 call .(334666 call . this[334652] c"operationCtx") c"children")
      (334674 'end of statement')
    }
    {
      unknown i[334675] "index var" 0
      unknown tmp[334715] "maybe param" "temp"
      (334727 'move' tmp[334715](334725 call chpl_compute_low_param_loop_bound 0(334682 call chpl__nudgeHighBound(334679 call . childs[334665] c"size"))))
      unknown tmp[334716] "maybe param" "temp"
      (334739 'move' tmp[334716](334737 call chpl_compute_high_param_loop_bound 0(334732 call chpl__nudgeHighBound(334734 call . childs[334665] c"size"))))
      unknown tmp[334717] "maybe param" "temp"
      (334742 'move' tmp[334717] 1)
      ParamForLoop[334744]
      { i[334675] tmp[334715] tmp[334716] tmp[334717]
        {
          if(334710 call _cond_test(334697 call isSubtype(334701 'typeof'(334699 call childs[334665] i[334675]))(334703 call _shared(334705 call TensorEssence[333748](?)(334706 call . this[334652] c"eltType")))))
          {
            { scopeless
              (334687 yield(334694 call(334691 call .(334689 call childs[334665] i[334675]) c"borrow")))
            }
          }
        }
      }
      label _unused_continueLabel[334719]
      label _breakLabel[334718]
    }
  }
  { scopeless type
    (334656 'to borrowed class from unknown'(334658 call TensorEssence[333748](?)(334659 call . this[334652] c"eltType")))
  } BaseTensorResource[334219](?) serializable[310094]
  type TensorResource[334760](?)
  type baseValue[334793] function baseValue[334793].forward[334764](arg _mt[334768]:_MT[201], arg this[334766]:baseValue[334793]) : _unknown[42] "method" "primary method"
  {
    (334772 call halt "Unimplemented baseValue forward.")
  } function baseValue[334793].children[334778](arg _mt[334782]:_MT[201], arg this[334780]:baseValue[334793]) : _unknown[42] "method" "primary method" "no parens"
  {
    (334785 return(334788 call _build_tuple 0))
  } serializable[310094]
  type reluOp[334878] unknown input[334799](334801 call _shared(334803 call BaseTensorResource[334219](?) ?[227])) function reluOp[334878].children[334807](arg _mt[334811]:_MT[201], arg this[334809]:reluOp[334878]) : _unknown[42] "method" "primary method" "no parens"
  {
    (334814 return(334822 call _build_tuple(334818 call . this[334809] c"input")))
  } function reluOp[334878].forward[334826](arg _mt[334830]:_MT[201], arg this[334828]:reluOp[334878]) : _unknown[42] "method" "primary method"
  {
    (334833 return(334846 call(334843 call .(334838 call .(334834 call . this[334828] c"input") c"array") c"relu")))
  } function reluOp[334878]._relu[334849](arg _mt[334855]:_MT[201], arg this[334851]:reluOp[334878], arg x[334853]:_any[141](?)) : _unknown[42] "inline" "method" "primary method"
  {
    (334858 return(334859 call *(334861 call :(334863 call < 0.0 x[334853])(334871 call .(334867 call . this[334851] c"input") c"eltType")) x[334853]))
  } serializable[310094]
  type expOp[334996] unknown input[334884](334886 call _shared(334888 call BaseTensorResource[334219](?) ?[227])) function expOp[334996].children[334892](arg _mt[334896]:_MT[201], arg this[334894]:expOp[334996]) : _unknown[42] "method" "primary method" "no parens"
  {
    (334899 return(334905 call _build_tuple(334901 call . this[334894] c"input")))
  } function expOp[334996].forward[334909](arg _mt[334913]:_MT[201], arg this[334911]:expOp[334996]) : _unknown[42] "method" "primary method"
  {
    { scopeless
      unknown output[334917](334918 'new'(334920 call ndarray[328686](?)(334928 call .(334925 call .(334921 call . this[334911] c"input") c"array") c"_dom")(334938 call .(334935 call .(334931 call . this[334911] c"input") c"array") c"eltType")))
      (334942 'end of statement')
    }
    { scopeless
      unknown inDat[334944] "ref var"(334952 call .(334949 call .(334945 call . this[334911] c"input") c"array") c"data")
      (334956 'end of statement')
    }
    { scopeless
      unknown outDat[334958] "ref var"(334960 call . output[334917] c"data")
      (334964 'end of statement')
    }
    Forall[334988] {
      induction variables:
        
        unknown i[334965] "index var" "insert auto destroy"
      iterated expressions:
        (334974 call(334971 call .(334968 call . outDat[334958] c"_dom") c"every"))
      shadow variables:
      other variables
        forall body
      {
        (334976 call =(334979 call outDat[334958] i[334965])(334982 call exp(334984 call inDat[334944] i[334965])))
      }
    }
    (334991 return output[334917])
  } serializable[310094]
  type addOp[335144](?) unknown rank[335002] "param" int[10] unknown eltType[335007] "type variable" unknown lhs[335010](335012 call _shared(335014 call BaseTensorResource[334219](?) eltType[335007] rank[335002])) unknown rhs[335020](335022 call _shared(335024 call BaseTensorResource[334219](?) eltType[335007] rank[335002])) function addOp[335144](?).children[335029](arg _mt[335033]:_MT[201], arg this[335031]:addOp[335144](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (335036 return(335050 call _build_tuple(335040 call . this[335031] c"lhs")(335046 call . this[335031] c"rhs")))
  } function addOp[335144](?).forward[335054](arg _mt[335058]:_MT[201], arg this[335056]:addOp[335144](?)) : _unknown[42] "method" "primary method"
  {
    (335071 return(335072 call +(335078 call .(335074 call . this[335056] c"lhs") c"array")(335085 call .(335081 call . this[335056] c"rhs") c"array")))
  }
  { scopeless type
    (335061 call ndarray[328686](?)(335062 call . this[335056] c"rank")(335066 call . this[335056] c"eltType"))
  } function addOp[335144](?).backward[335091](arg _mt[335108]:_MT[201], arg this[335093]:addOp[335144](?), arg grad[335105] :
  (335096 call ndarray[328686](?)(335097 call . this[335093] c"rank")(335101 call . this[335093] c"eltType"))) : _unknown[42] "method" "primary method"
  {
    (335134 return(335138 call _build_tuple grad[335105] grad[335105]))
  }
  { scopeless type
    (335131 call _build_tuple(335112 call ndarray[328686](?)(335113 call . this[335093] c"rank")(335117 call . this[335093] c"eltType"))(335122 call ndarray[328686](?)(335123 call . this[335093] c"rank")(335127 call . this[335093] c"eltType")))
  } serializable[310094]
  type subOp[335215] unknown lhs[335150](335152 call _shared(335154 call BaseTensorResource[334219](?) ?[227])) unknown rhs[335159](335161 call _shared(335163 call BaseTensorResource[334219](?) ?[227])) function subOp[335215].children[335167](arg _mt[335171]:_MT[201], arg this[335169]:subOp[335215]) : _unknown[42] "method" "primary method" "no parens"
  {
    (335174 return(335184 call _build_tuple(335176 call . this[335169] c"lhs")(335180 call . this[335169] c"rhs")))
  } function subOp[335215].forward[335188](arg _mt[335192]:_MT[201], arg this[335190]:subOp[335215]) : _unknown[42] "method" "primary method"
  {
    (335195 return(335196 call -(335202 call .(335198 call . this[335190] c"lhs") c"array")(335209 call .(335205 call . this[335190] c"rhs") c"array")))
  } serializable[310094]
  type divOp[335286] unknown lhs[335221](335223 call _shared(335225 call BaseTensorResource[334219](?) ?[227])) unknown rhs[335230](335232 call _shared(335234 call BaseTensorResource[334219](?) ?[227])) function divOp[335286].children[335238](arg _mt[335242]:_MT[201], arg this[335240]:divOp[335286]) : _unknown[42] "method" "primary method" "no parens"
  {
    (335245 return(335255 call _build_tuple(335247 call . this[335240] c"lhs")(335251 call . this[335240] c"rhs")))
  } function divOp[335286].forward[335259](arg _mt[335263]:_MT[201], arg this[335261]:divOp[335286]) : _unknown[42] "method" "primary method"
  {
    (335266 return(335267 call /(335273 call .(335269 call . this[335261] c"lhs") c"array")(335280 call .(335276 call . this[335261] c"rhs") c"array")))
  } serializable[310094]
  type multOp[335552](?) unknown rank[335292] "param" int[10] unknown eltType[335297] "type variable" unknown lhs[335300](335302 call _shared(335304 call BaseTensorResource[334219](?) eltType[335297] rank[335292])) unknown rhs[335310](335312 call _shared(335314 call BaseTensorResource[334219](?) eltType[335297] rank[335292])) function multOp[335552](?).children[335319](arg _mt[335323]:_MT[201], arg this[335321]:multOp[335552](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (335326 return(335336 call _build_tuple(335328 call . this[335321] c"lhs")(335332 call . this[335321] c"rhs")))
  } function multOp[335552](?).forward[335340](arg _mt[335344]:_MT[201], arg this[335342]:multOp[335552](?)) : _unknown[42] "method" "primary method"
  {
    (335347 return(335348 call *(335354 call .(335350 call . this[335342] c"lhs") c"array")(335361 call .(335357 call . this[335342] c"rhs") c"array")))
  } function multOp[335552](?).backward[335366](arg _mt[335383]:_MT[201], arg this[335368]:multOp[335552](?), arg grad[335380] :
  (335371 call ndarray[328686](?)(335372 call . this[335368] c"rank")(335376 call . this[335368] c"eltType"))) : _unknown[42] "method" "primary method"
  {
    { scopeless
      unknown G[335410] "ref var"(335412 call . grad[335380] c"data")
      (335416 'end of statement')
    }
    { scopeless
      unknown A[335418] "ref var"(335423 call .(335419 call . this[335368] c"lhs") c"data")
      (335427 'end of statement')
    }
    { scopeless
      unknown B[335429] "ref var"(335434 call .(335430 call . this[335368] c"rhs") c"data")
      (335438 'end of statement')
    }
    { scopeless
      const gDom[335440] "const"(335442 call . grad[335380] c"_dom")
      (335446 'end of statement')
    }
    { scopeless
      unknown AG[335448](335450 call ndarray[328686](?)(335451 call . this[335368] c"rank")(335455 call . this[335368] c"eltType"))
      (335460 'end of statement')
    }
    (335465 call(335462 call . AG[335448] c"reshapeDomain") gDom[335440])
    { scopeless
      unknown BG[335468](335470 call ndarray[328686](?)(335471 call . this[335368] c"rank")(335475 call . this[335368] c"eltType"))
      (335480 'end of statement')
    }
    (335485 call(335482 call . BG[335468] c"reshapeDomain") gDom[335440])
    { scopeless
      unknown AGR[335488] "ref var"(335490 call . AG[335448] c"data")
      (335494 'end of statement')
    }
    { scopeless
      unknown BGR[335496] "ref var"(335498 call . BG[335468] c"data")
      (335502 'end of statement')
    }
    Forall[335539] {
      induction variables:
        
        unknown i[335503] "index var" "insert auto destroy"
      iterated expressions:
        (335509 call(335506 call . gDom[335440] c"every"))
      shadow variables:
      other variables
        forall body
      {
        (335511 call =(335514 call AGR[335488] i[335503])(335516 call *(335519 call B[335429] i[335503])(335522 call G[335410] i[335503])))
        (335524 call =(335527 call BGR[335496] i[335503])(335529 call *(335532 call A[335418] i[335503])(335535 call G[335410] i[335503])))
      }
    }
    (335542 return(335546 call _build_tuple AG[335448] BG[335468]))
  }
  { scopeless type
    (335406 call _build_tuple(335387 call ndarray[328686](?)(335388 call . this[335368] c"rank")(335392 call . this[335368] c"eltType"))(335397 call ndarray[328686](?)(335398 call . this[335368] c"rank")(335402 call . this[335368] c"eltType")))
  } serializable[310094]
  type reshapeOp[335716](?) unknown oldRank[335558] "param" int[10] unknown newRank[335563] "param" int[10] unknown eltType[335568] "type variable" unknown shape[335571](335572 call * newRank[335563] int[10]) unknown input[335579](335581 call _shared(335583 call BaseTensorResource[334219](?) eltType[335568] oldRank[335558])) function reshapeOp[335716](?).children[335588](arg _mt[335592]:_MT[201], arg this[335590]:reshapeOp[335716](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (335595 return(335601 call _build_tuple(335597 call . this[335590] c"input")))
  } function reshapeOp[335716](?).forward[335605](arg _mt[335609]:_MT[201], arg this[335607]:reshapeOp[335716](?)) : _unknown[42] "method" "primary method"
  {
    (335624 return(335635 call(335632 call .(335629 call .(335625 call . this[335607] c"input") c"array") c"reshape")(335640 'expand_tuple'(335636 call . this[335607] c"shape"))))
  }
  { scopeless type
    (335612 call ndarray[328686](?)(335615 call . this[335607] c"newRank")(335619 call . this[335607] c"eltType"))
  } function reshapeOp[335716](?).backward[335644](arg _mt[335661]:_MT[201], arg this[335646]:reshapeOp[335716](?), arg grad[335658] :
  (335649 call ndarray[328686](?)(335650 call . this[335646] c"newRank")(335654 call . this[335646] c"eltType"))) : _unknown[42] "method" "primary method"
  {
    { scopeless
      const inputDom[335680] "const"(335688 call .(335685 call .(335681 call . this[335646] c"input") c"array") c"_dom")
      (335692 'end of statement')
    }
    { scopeless
      const g[335694] "const"(335699 call(335696 call . grad[335658] c"reshape")(335704 'expand_tuple'(335701 call . inputDom[335680] c"shape")))
      (335706 'end of statement')
    }
    (335707 return(335710 call _build_tuple g[335694]))
  }
  { scopeless type
    (335676 call _build_tuple(335665 call ndarray[328686](?)(335668 call . this[335646] c"oldRank")(335672 call . this[335646] c"eltType")))
  } serializable[310094]
  type permuteOp[335856](?) unknown rank[335722] "param" int[10] unknown eltType[335727] "type variable" real[13] unknown permutation[335731] unknown input[335735](335737 call _shared(335739 call BaseTensorResource[334219](?) eltType[335727] rank[335722])) function permuteOp[335856](?).children[335744](arg _mt[335748]:_MT[201], arg this[335746]:permuteOp[335856](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (335751 return(335757 call _build_tuple(335753 call . this[335746] c"input")))
  } function permuteOp[335856](?).forward[335761](arg _mt[335765]:_MT[201], arg this[335763]:permuteOp[335856](?)) : _unknown[42] "method" "primary method"
  {
    (335768 return(335781 call(335778 call .(335773 call .(335769 call . this[335763] c"input") c"array") c"permute")(335788 'expand_tuple'(335784 call . this[335763] c"permutation"))))
  } function permuteOp[335856](?).backward[335791](arg _mt[335808]:_MT[201], arg this[335793]:permuteOp[335856](?), arg grad[335805] :
  (335796 call ndarray[328686](?)(335797 call . this[335793] c"rank")(335801 call . this[335793] c"eltType"))) : _unknown[42] "method" "primary method"
  {
    { scopeless
      const inversePermutation[335825] "const"(335829 call argsort module=[222] Utilities[320397](335836 'expand_tuple'(335832 call . this[335793] c"permutation")))
      (335838 'end of statement')
    }
    (335839 return(335848 call _build_tuple(335845 call(335842 call . grad[335805] c"permute")(335847 'expand_tuple' inversePermutation[335825]))))
    (335851 'referenced modules list' Utilities[320397])
  }
  { scopeless type
    (335821 call _build_tuple(335812 call ndarray[328686](?)(335813 call . this[335793] c"rank")(335817 call . this[335793] c"eltType")))
  } serializable[310094]
  type expandOp[336080](?) unknown rank[335862] "param" int[10] unknown eltType[335867] "type variable" real[13] unknown expandedShape[335871](335872 call * rank[335862] int[10]) unknown input[335879](335881 call _shared(335883 call BaseTensorResource[334219](?) eltType[335867] rank[335862])) function expandOp[336080](?).children[335888](arg _mt[335892]:_MT[201], arg this[335890]:expandOp[336080](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (335895 return(335901 call _build_tuple(335897 call . this[335890] c"input")))
  } function expandOp[336080](?).forward[335905](arg _mt[335909]:_MT[201], arg this[335907]:expandOp[336080](?)) : _unknown[42] "method" "primary method"
  {
    (335912 return(335923 call(335920 call .(335917 call .(335913 call . this[335907] c"input") c"array") c"expand")(335930 'expand_tuple'(335926 call . this[335907] c"expandedShape"))))
  } function expandOp[336080](?).backward[335933](arg _mt[335950]:_MT[201], arg this[335935]:expandOp[336080](?), arg grad[335947] :
  (335938 call ndarray[328686](?)(335939 call . this[335935] c"rank")(335943 call . this[335935] c"eltType"))) : _unknown[42] "method" "primary method"
  {
    { scopeless
      const inputShape[335967] "const"(335975 call .(335972 call .(335968 call . this[335935] c"input") c"array") c"shape")
      (335979 'end of statement')
    }
    { scopeless
      unknown offset[335981] 0
      (335984 'end of statement')
    }
    { scopeless
      unknown g[335986] grad[335947]
      (335989 'end of statement')
    }
    {
      unknown i[335990] "index var" 0
      unknown tmp[336033] "maybe param" "temp"
      (336045 'move' tmp[336033](336043 call chpl_compute_low_param_loop_bound 0(335997 call chpl__nudgeHighBound(335993 call . this[335935] c"rank"))))
      unknown tmp[336034] "maybe param" "temp"
      (336057 'move' tmp[336034](336055 call chpl_compute_high_param_loop_bound 0(336050 call chpl__nudgeHighBound(336052 call . this[335935] c"rank"))))
      unknown tmp[336035] "maybe param" "temp"
      (336060 'move' tmp[336035] 1)
      ParamForLoop[336062]
      { i[335990] tmp[336033] tmp[336034] tmp[336035]
        {
          if(336029 call _cond_test(336018 call !=(336024 call(336020 call . this[335935] c"expandedShape") i[335990])(336027 call inputShape[335967] i[335990])))
          {
            (336003 call = g[335986](336012 call(336009 call . g[335986] c"sum") i[335990]))
            (336014 call += offset[335981] 1)
          }
        }
      }
      label _unused_continueLabel[336037]
      label _breakLabel[336036]
    }
    (336071 return(336074 call _build_tuple g[335986]))
  }
  { scopeless type
    (335963 call _build_tuple(335954 call ndarray[328686](?)(335955 call . this[335935] c"rank")(335959 call . this[335935] c"eltType")))
  } serializable[310094]
  type padOp[336359](?) unknown rank[336086] "param" int[10] unknown eltType[336091] "type variable" real[13] unknown arg[336095](336096 call * rank[336086](336099 call * 2 int[10])) unknown value[336106] eltType[336091] unknown input[336111](336113 call _shared(336115 call BaseTensorResource[334219](?) eltType[336091] rank[336086])) function padOp[336359](?).children[336120](arg _mt[336124]:_MT[201], arg this[336122]:padOp[336359](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (336127 return(336133 call _build_tuple(336129 call . this[336122] c"input")))
  } function padOp[336359](?).forward[336137](arg _mt[336141]:_MT[201], arg this[336139]:padOp[336359](?)) : _unknown[42] "method" "primary method"
  {
    (336154 return(336167 call(336164 call .(336159 call .(336155 call . this[336139] c"input") c"array") c"pad")(336174 'expand_tuple'(336170 call . this[336139] c"arg"))(336175 call . this[336139] c"value")))
  }
  { scopeless type
    (336144 call ndarray[328686](?)(336145 call . this[336139] c"rank")(336149 call . this[336139] c"eltType"))
  } function padOp[336359](?).backward[336182](arg _mt[336199]:_MT[201], arg this[336184]:padOp[336359](?), arg grad[336196] :
  (336187 call ndarray[328686](?)(336188 call . this[336184] c"rank")(336192 call . this[336184] c"eltType"))) : _unknown[42] "method" "primary method"
  {
    { scopeless
      const shape[336216] "const"(336224 call .(336221 call .(336217 call . this[336184] c"input") c"array") c"shape")
      (336228 'end of statement')
    }
    { scopeless
      unknown narg[336230](336231 call *(336233 call . this[336184] c"rank")(336237 call * 2 int[10]))
      (336242 'end of statement')
    }
    {
      unknown i[336243] "index var" 0
      unknown tmp[336299] "maybe param" "temp"
      (336311 'move' tmp[336299](336309 call chpl_compute_low_param_loop_bound 0(336250 call chpl__nudgeHighBound(336246 call . this[336184] c"rank"))))
      unknown tmp[336300] "maybe param" "temp"
      (336323 'move' tmp[336300](336321 call chpl_compute_high_param_loop_bound 0(336316 call chpl__nudgeHighBound(336318 call . this[336184] c"rank"))))
      unknown tmp[336301] "maybe param" "temp"
      (336326 'move' tmp[336301] 1)
      ParamForLoop[336328]
      { i[336243] tmp[336299] tmp[336300] tmp[336301]
        {
          { scopeless
            const tmp[336266] "const" "temp"(336264 call(336260 call . this[336184] c"arg") i[336243])
            (336273 call _check_tuple_var_decl tmp[336266] 2)
            const p0[336256] "const"(336267 call tmp[336266] 0)
            const p1[336258] "const"(336270 call tmp[336266] 1)
            (336278 'end of statement')
          }
          { scopeless
            const s[336280] "const"(336282 call shape[336216] i[336243])
            (336285 'end of statement')
          }
          (336286 call =(336289 call narg[336230] i[336243])(336297 call _build_tuple p0[336256](336293 call + s[336280] p0[336256])))
        }
      }
      label _unused_continueLabel[336303]
      label _breakLabel[336302]
    }
    { scopeless
      const g[336338] "const"(336345 call(336342 call . grad[336196] c"shrink")(336347 'expand_tuple' narg[336230]))
      (336349 'end of statement')
    }
    (336350 return(336353 call _build_tuple g[336338]))
  }
  { scopeless type
    (336212 call _build_tuple(336203 call ndarray[328686](?)(336204 call . this[336184] c"rank")(336208 call . this[336184] c"eltType")))
  } serializable[310094]
  type shrinkOp[336623](?) unknown rank[336365] "param" int[10] unknown eltType[336370] "type variable" real[13] unknown arg[336374](336375 call * rank[336365](336378 call * 2 int[10])) unknown input[336385](336387 call _shared(336389 call BaseTensorResource[334219](?) eltType[336370] rank[336365])) function shrinkOp[336623](?).children[336394](arg _mt[336398]:_MT[201], arg this[336396]:shrinkOp[336623](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (336401 return(336407 call _build_tuple(336403 call . this[336396] c"input")))
  } function shrinkOp[336623](?).forward[336411](arg _mt[336415]:_MT[201], arg this[336413]:shrinkOp[336623](?)) : _unknown[42] "method" "primary method"
  {
    (336428 return(336439 call(336436 call .(336433 call .(336429 call . this[336413] c"input") c"array") c"shrink")(336444 'expand_tuple'(336440 call . this[336413] c"arg"))))
  }
  { scopeless type
    (336418 call ndarray[328686](?)(336419 call . this[336413] c"rank")(336423 call . this[336413] c"eltType"))
  } function shrinkOp[336623](?).backward[336448](arg _mt[336465]:_MT[201], arg this[336450]:shrinkOp[336623](?), arg grad[336462] :
  (336453 call ndarray[328686](?)(336454 call . this[336450] c"rank")(336458 call . this[336450] c"eltType"))) : _unknown[42] "method" "primary method"
  {
    { scopeless
      const shape[336482] "const"(336490 call .(336487 call .(336483 call . this[336450] c"input") c"array") c"shape")
      (336494 'end of statement')
    }
    { scopeless
      unknown narg[336496](336497 call *(336499 call . this[336450] c"rank")(336503 call * 2 int[10]))
      (336508 'end of statement')
    }
    {
      unknown i[336509] "index var" 0
      unknown tmp[336565] "maybe param" "temp"
      (336577 'move' tmp[336565](336575 call chpl_compute_low_param_loop_bound 0(336516 call chpl__nudgeHighBound(336512 call . this[336450] c"rank"))))
      unknown tmp[336566] "maybe param" "temp"
      (336589 'move' tmp[336566](336587 call chpl_compute_high_param_loop_bound 0(336582 call chpl__nudgeHighBound(336584 call . this[336450] c"rank"))))
      unknown tmp[336567] "maybe param" "temp"
      (336592 'move' tmp[336567] 1)
      ParamForLoop[336594]
      { i[336509] tmp[336565] tmp[336566] tmp[336567]
        {
          { scopeless
            const tmp[336532] "const" "temp"(336530 call(336526 call . this[336450] c"arg") i[336509])
            (336539 call _check_tuple_var_decl tmp[336532] 2)
            const p0[336522] "const"(336533 call tmp[336532] 0)
            const p1[336524] "const"(336536 call tmp[336532] 1)
            (336544 'end of statement')
          }
          { scopeless
            const s[336546] "const"(336548 call shape[336482] i[336509])
            (336551 'end of statement')
          }
          (336552 call =(336555 call narg[336496] i[336509])(336563 call _build_tuple p0[336522](336559 call - s[336546] p1[336524])))
        }
      }
      label _unused_continueLabel[336569]
      label _breakLabel[336568]
    }
    { scopeless
      const g[336604] "const"(336609 call(336606 call . grad[336462] c"pad")(336611 'expand_tuple' narg[336496]))
      (336613 'end of statement')
    }
    (336614 return(336617 call _build_tuple g[336604]))
  }
  { scopeless type
    (336478 call _build_tuple(336469 call ndarray[328686](?)(336470 call . this[336450] c"rank")(336474 call . this[336450] c"eltType")))
  } serializable[310094]
  type sliceOp[336787](?) unknown rank[336629] "param" int[10] unknown eltType[336634] "type variable" real[13] unknown dom[336638](336640 call chpl__buildDomainRuntimeType defaultDist rank[336629] int[10]) unknown input[336647](336649 call _shared(336651 call BaseTensorResource[334219](?) eltType[336634] rank[336629])) function sliceOp[336787](?).children[336656](arg _mt[336660]:_MT[201], arg this[336658]:sliceOp[336787](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (336663 return(336669 call _build_tuple(336665 call . this[336658] c"input")))
  } function sliceOp[336787](?).forward[336673](arg _mt[336677]:_MT[201], arg this[336675]:sliceOp[336787](?)) : _unknown[42] "method" "primary method"
  {
    (336690 return(336691 'new'(336693 call ndarray[328686](?)(336701 call(336698 call .(336694 call . this[336675] c"input") c"array")(336702 call . this[336675] c"dom")))))
  }
  { scopeless type
    (336680 call ndarray[328686](?)(336681 call . this[336675] c"rank")(336685 call . this[336675] c"eltType"))
  } function sliceOp[336787](?).backward[336709](arg _mt[336726]:_MT[201], arg this[336711]:sliceOp[336787](?), arg grad[336723] :
  (336714 call ndarray[328686](?)(336715 call . this[336711] c"rank")(336719 call . this[336711] c"eltType"))) : _unknown[42] "method" "primary method"
  {
    { scopeless
      unknown g[336743](336744 'new'(336746 call ndarray[328686](?)(336754 call .(336751 call .(336747 call . this[336711] c"input") c"array") c"_dom")(336757 call . this[336711] c"eltType")))
      (336762 'end of statement')
    }
    (336763 call =(336769 call(336766 call . g[336743] c"data")(336770 call . this[336711] c"dom"))(336775 call . grad[336723] c"data"))
    (336778 return(336781 call _build_tuple g[336743]))
  }
  { scopeless type
    (336739 call _build_tuple(336730 call ndarray[328686](?)(336731 call . this[336711] c"rank")(336735 call . this[336711] c"eltType")))
  } serializable[310094]
  type layerSliceOp[337049](?) unknown rank[336793] "param" int[10] unknown eltType[336798] "type variable" real[13] unknown base[336802](336804 call _shared(336806 call BaseTensorResource[334219](?) eltType[336798] rank[336793])) unknown mask[336812](336814 call _shared(336816 call BaseTensorResource[334219](?) eltType[336798] rank[336793])) unknown maskDomain[336822](336824 call chpl__buildDomainRuntimeType defaultDist rank[336793] int[10]) function layerSliceOp[337049](?).children[336830](arg _mt[336834]:_MT[201], arg this[336832]:layerSliceOp[337049](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (336837 return(336851 call _build_tuple(336841 call . this[336832] c"base")(336847 call . this[336832] c"mask")))
  } function layerSliceOp[337049](?).forward[336855](arg _mt[336859]:_MT[201], arg this[336857]:layerSliceOp[337049](?)) : _unknown[42] "method" "primary method"
  {
    { scopeless
      unknown layered[336873](336874 'new'(336876 call ndarray[328686](?)(336881 call .(336877 call . this[336857] c"base") c"array")))
      (336885 'end of statement')
    }
    { scopeless
      unknown maskData[336887] "ref var"(336895 call .(336892 call .(336888 call . this[336857] c"mask") c"array") c"data")
      (336899 'end of statement')
    }
    (336900 call =(336906 call(336903 call . layered[336873] c"data")(336909 call . this[336857] c"maskDomain"))(336914 call maskData[336887](336915 call . this[336857] c"maskDomain")))
    (336919 return layered[336873])
  }
  { scopeless type
    (336862 call ndarray[328686](?)(336863 call . this[336857] c"rank")(336867 call . this[336857] c"eltType"))
  } function layerSliceOp[337049](?).backward[336924](arg _mt[336941]:_MT[201], arg this[336926]:layerSliceOp[337049](?), arg grad[336938] :
  (336929 call ndarray[328686](?)(336930 call . this[336926] c"rank")(336934 call . this[336926] c"eltType"))) : _unknown[42] "method" "primary method"
  {
    { scopeless
      const zero[336968] "const"(336969 call : 0(336972 call . this[336926] c"eltType"))
      (336977 'end of statement')
    }
    { scopeless
      unknown gBase[336979](336980 'new'(336982 call ndarray[328686](?) grad[336938]))
      (336985 'end of statement')
    }
    (336986 call =(336992 call(336989 call . gBase[336979] c"data")(336993 call . this[336926] c"maskDomain")) zero[336968])
    { scopeless
      unknown gMask[336999](337000 'new'(337002 call ndarray[328686](?)(337010 call .(337007 call .(337003 call . this[336926] c"mask") c"array") c"_dom")(337013 call . this[336926] c"eltType")))
      (337018 'end of statement')
    }
    (337019 call =(337025 call(337022 call . gMask[336999] c"data")(337026 call . this[336926] c"maskDomain"))(337034 call(337031 call . grad[336938] c"data")(337035 call . this[336926] c"maskDomain")))
    (337039 return(337043 call _build_tuple gBase[336979] gMask[336999]))
  }
  { scopeless type
    (336964 call _build_tuple(336945 call ndarray[328686](?)(336946 call . this[336926] c"rank")(336950 call . this[336926] c"eltType"))(336955 call ndarray[328686](?)(336956 call . this[336926] c"rank")(336960 call . this[336926] c"eltType")))
  } serializable[310094]
  type sumOp[337537](?) unknown rank[337055] "param" int[10] unknown eltType[337060] "type variable" real[13] unknown sumRank[337064] "param" int[10] unknown axes[337069](337070 call * sumRank[337064] int[10]) unknown input[337077](337079 call _shared(337081 call BaseTensorResource[334219](?) eltType[337060] rank[337055])) function sumOp[337537](?).children[337086](arg _mt[337090]:_MT[201], arg this[337088]:sumOp[337537](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (337093 return(337099 call _build_tuple(337095 call . this[337088] c"input")))
  } function sumOp[337537](?).outRank[337103](arg _mt[337107]:_MT[201], arg this[337105]:sumOp[337537](?)) param : _unknown[42] "method" "primary method" "no parens"
  {
    if(337146 call _cond_test(337131 call ==(337133 call -(337135 call . this[337105] c"rank")(337141 call . this[337105] c"sumRank")) 0))
    {
      if(337125 call _cond_test(337118 call ==(337120 call . this[337105] c"rank") 1))
      {
        (337113 return(337114 call . this[337105] c"rank"))
      }
      (337129 return 1)
    }
    (337150 return(337151 call -(337153 call . this[337105] c"rank")(337157 call . this[337105] c"sumRank")))
  }
  { scopeless type
    int[10]
  } function sumOp[337537](?).forward[337164](arg _mt[337168]:_MT[201], arg this[337166]:sumOp[337537](?)) : _unknown[42] "method" "primary method"
  {
    { scopeless
      unknown newDim[337172] "param"(337173 call -(337175 call . this[337166] c"rank")(337179 call . this[337166] c"sumRank"))
      (337184 'end of statement')
    }
    if(337241 call _cond_test(337237 call == newDim[337172] 0))
    {
      if(337207 call _cond_test(337200 call ==(337202 call . this[337166] c"rank") 1))
      {
        (337187 return(337198 call(337195 call .(337192 call .(337188 call . this[337166] c"input") c"array") c"sum") 0))
      }
      (337211 return(337235 call(337232 call .(337222 call(337219 call .(337216 call .(337212 call . this[337166] c"input") c"array") c"sum")(337229 'expand_tuple'(337225 call . this[337166] c"axes"))) c"squeeze") 1))
    }
    (337245 return(337265 call(337262 call .(337256 call(337253 call .(337250 call .(337246 call . this[337166] c"input") c"array") c"sum")(337261 'expand_tuple'(337257 call . this[337166] c"axes"))) c"squeeze") newDim[337172]))
  } function sumOp[337537](?).backward[337269](arg _mt[337288]:_MT[201], arg this[337271]:sumOp[337537](?), arg grad[337285] :
  (337274 call ndarray[328686](?)(337277 call . this[337271] c"outRank")(337281 call . this[337271] c"eltType"))) : _unknown[42] "method" "primary method"
  {
    { scopeless
      const inputShape[337305] "const"(337323 call .(337320 call .(337317 call .(337313 call . this[337271] c"input") c"array") c"data") c"shape")(337306 call *(337308 call . this[337271] c"rank") int[10])
      (337327 'end of statement')
    }
    { scopeless
      unknown unsqueezeShape[337329](337330 call *(337332 call . this[337271] c"rank") int[10])
      (337338 'end of statement')
    }
    {
      unknown i[337339] "index var" 0
      unknown tmp[337445] "maybe param" "temp"
      (337457 'move' tmp[337445](337455 call chpl_compute_low_param_loop_bound 0(337346 call chpl__nudgeHighBound(337342 call . this[337271] c"rank"))))
      unknown tmp[337446] "maybe param" "temp"
      (337469 'move' tmp[337446](337467 call chpl_compute_high_param_loop_bound 0(337462 call chpl__nudgeHighBound(337464 call . this[337271] c"rank"))))
      unknown tmp[337447] "maybe param" "temp"
      (337472 'move' tmp[337447] 1)
      ParamForLoop[337474]
      { i[337339] tmp[337445] tmp[337446] tmp[337447]
        {
          { scopeless
            unknown found[337352] 0
            (337355 'end of statement')
          }
          {
            unknown j[337356] "index var" 0
            unknown tmp[337386] "maybe param" "temp"
            (337398 'move' tmp[337386](337396 call chpl_compute_low_param_loop_bound 0(337363 call chpl__nudgeHighBound(337359 call . this[337271] c"sumRank"))))
            unknown tmp[337387] "maybe param" "temp"
            (337410 'move' tmp[337387](337408 call chpl_compute_high_param_loop_bound 0(337403 call chpl__nudgeHighBound(337405 call . this[337271] c"sumRank"))))
            unknown tmp[337388] "maybe param" "temp"
            (337413 'move' tmp[337388] 1)
            ParamForLoop[337415]
            { j[337356] tmp[337386] tmp[337387] tmp[337388]
              {
                if(337382 call _cond_test(337373 call == i[337339](337380 call(337376 call . this[337271] c"axes") j[337356])))
                {
                  (337369 call = found[337352] 1)
                }
              }
            }
            label _unused_continueLabel[337390]
            label _breakLabel[337389]
          }
          if(337441 call _cond_test found[337352])
          {
            (337425 call =(337428 call unsqueezeShape[337329] i[337339]) 1)
          }
          {
            (337432 call =(337435 call unsqueezeShape[337329] i[337339])(337438 call inputShape[337305] i[337339]))
          }
        }
      }
      label _unused_continueLabel[337449]
      label _breakLabel[337448]
    }
    { scopeless
      const unsqueezeDom[337484] "const"(337488 call domainFromShape module=[222] Utilities[320397](337492 'expand_tuple' unsqueezeShape[337329]))
      (337494 'end of statement')
    }
    { scopeless
      unknown g[337496](337511 call(337508 call . grad[337285] c"reshape")(337513 'expand_tuple' unsqueezeShape[337329]))(337498 call ndarray[328686](?)(337499 call . this[337271] c"rank")(337503 call . this[337271] c"eltType"))
      (337515 'end of statement')
    }
    (337516 call = g[337496](337523 call(337520 call . g[337496] c"expand")(337525 'expand_tuple' inputShape[337305])))
    (337526 return(337529 call _build_tuple g[337496]))
    (337532 'referenced modules list' Utilities[320397])
  }
  { scopeless type
    (337301 call _build_tuple(337292 call ndarray[328686](?)(337293 call . this[337271] c"rank")(337297 call . this[337271] c"eltType")))
  } serializable[310094]
  type maxOp[337698](?) unknown rank[337543] "param" int[10] unknown eltType[337548] "type variable" real[13] unknown maxRank[337552] "param" int[10] unknown axes[337557](337558 call * maxRank[337552] int[10]) unknown input[337565](337567 call _shared(337569 call BaseTensorResource[334219](?) eltType[337548] rank[337543])) function maxOp[337698](?).children[337574](arg _mt[337578]:_MT[201], arg this[337576]:maxOp[337698](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (337581 return(337587 call _build_tuple(337583 call . this[337576] c"input")))
  } function maxOp[337698](?).forward[337591](arg _mt[337595]:_MT[201], arg this[337593]:maxOp[337698](?)) : _unknown[42] "method" "primary method"
  {
    if(337658 call _cond_test(337645 call ==(337647 call -(337649 call . this[337593] c"rank")(337653 call . this[337593] c"maxRank")) 0))
    {
      (337599 return(337610 call(337607 call .(337604 call .(337600 call . this[337593] c"input") c"array") c"max")))
    }
    {
      (337612 return(337632 call(337629 call .(337623 call(337620 call .(337617 call .(337613 call . this[337593] c"input") c"array") c"max")(337628 'expand_tuple'(337624 call . this[337593] c"axes"))) c"squeeze")(337633 call -(337635 call . this[337593] c"rank")(337641 call . this[337593] c"maxRank"))))
    }
  } function maxOp[337698](?).backward[337664](arg _mt[337670]:_MT[201], arg this[337666]:maxOp[337698](?), arg grad[337668]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    (337686 return(337691 call .(337687 call . this[337666] c"input") c"array"))
  }
  { scopeless type
    (337683 call _build_tuple(337674 call ndarray[328686](?)(337675 call . this[337666] c"rank")(337679 call . this[337666] c"eltType")))
  } serializable[310094]
  type conv2DOp[338447](?) unknown eltType[337704] "type variable" real[13] unknown features[337708](337710 call _shared(337712 call BaseTensorResource[334219](?) eltType[337704] 3)) unknown kernel[337718](337720 call _shared(337722 call BaseTensorResource[334219](?) eltType[337704] 4)) unknown stride[337728] int[10] function conv2DOp[338447](?).children[337732](arg _mt[337736]:_MT[201], arg this[337734]:conv2DOp[338447](?)) : _unknown[42] "method" "primary method" "no parens"
  {
    (337739 return(337753 call _build_tuple(337743 call . this[337734] c"features")(337749 call . this[337734] c"kernel")))
  } function conv2DOp[338447](?).forward[337757](arg _mt[337761]:_MT[201], arg this[337759]:conv2DOp[338447](?)) : _unknown[42] "method" "primary method"
  {
    (337771 return(337778 call(337775 call . ndarray[328686](?) c"convolve")(337783 call .(337779 call . this[337759] c"features") c"array")(337790 call .(337786 call . this[337759] c"kernel") c"array") stride))
  }
  { scopeless type
    (337764 call ndarray[328686](?) 3(337766 call . this[337759] c"eltType"))
  } function conv2DOp[338447](?).backward[337797](arg _mt[337811]:_MT[201], arg this[337799]:conv2DOp[338447](?), arg grad[337808] :
  (337802 call ndarray[328686](?) 3(337804 call . this[337799] c"eltType"))) : _unknown[42] "method" "primary method"
  {
    { scopeless
      const tmp[337851] "const" "temp"(337848 call .(337845 call .(337842 call .(337838 call . this[337799] c"features") c"array") c"_dom") c"shape")
      (337861 call _check_tuple_var_decl tmp[337851] 3)
      const channels[337832] "const"(337852 call tmp[337851] 0)
      const inHeight[337834] "const"(337855 call tmp[337851] 1)
      const inWidth[337836] "const"(337858 call tmp[337851] 2)
      (337866 'end of statement')
    }
    { scopeless
      const tmp[337881] "const" "temp"(337878 call .(337875 call . grad[337808] c"_dom") c"shape")
      (337891 call _check_tuple_var_decl tmp[337881] 3)
      const filters[337868] "const"(337882 call tmp[337881] 0)
      const outHeight[337870] "const"(337885 call tmp[337881] 1)
      const outWidth[337872] "const"(337888 call tmp[337881] 2)
      (337896 'end of statement')
    }
    { scopeless
      const tmp[337919] "const" "temp"(337916 call .(337913 call .(337910 call .(337906 call . this[337799] c"kernel") c"array") c"_dom") c"shape")
      (337932 call _check_tuple_var_decl tmp[337919] 4)
      const _filters[337898] "const"(337920 call tmp[337919] 0)
      const _channels[337900] "const"(337923 call tmp[337919] 1)
      const kerHeight[337902] "const"(337926 call tmp[337919] 2)
      const kerWidth[337904] "const"(337929 call tmp[337919] 3)
      (337937 'end of statement')
    }
    { scopeless
      const strideDil[337939] "const"(337940 call -(337942 call . this[337799] c"stride") 1)
      (337948 'end of statement')
    }
    { scopeless
      const dialGrad[337950] "const"(337957 call(337954 call . grad[337808] c"dilate") strideDil[337939])
      (337960 'end of statement')
    }
    { scopeless
      const fet[337962] "const"(337985 call(337982 call .(337977 call(337974 call .(337971 call .(337967 call . this[337799] c"features") c"array") c"reshape") channels[337832] 1 inHeight[337834] inWidth[337836]) c"expand") channels[337832] filters[337868] inHeight[337834] inWidth[337836])(337964 call ndarray[328686](?) 4 real[13])
      (337991 'end of statement')
    }
    { scopeless
      unknown kerGrad[337993](337998 'new'(338000 call ndarray[328686](?)(338008 call .(338005 call .(338001 call . this[337799] c"kernel") c"array") c"_dom")(338011 call . this[337799] c"eltType")))(337995 call ndarray[328686](?) 4 real[13])
      (338016 'end of statement')
    }
    {
      unknown _indexOfInterest[338126] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[338127] "expr temp" "temp"
      (338136 'move' _iterator[338127](338134 call _getIterator(338142 call chpl_direct_range_iter 0(338140 call chpl__nudgeHighBound filters[337868]))))
      Defer
      {
        {
          (338157 call _freeIterator _iterator[338127])
        }
      }
      { scopeless type
        (338147 'move' _indexOfInterest[338126](338144 call iteratorIndex _iterator[338127]))
      }
      ForLoop[338128]
      {
        unknown f[338017] "index var" "insert auto destroy"
        (338152 'move' f[338017] _indexOfInterest[338126])
        {
          { scopeless
            const gradSl[338027] "const"(338036 call(338033 call . grad[337808] c"slice") f[338017](338038 call chpl_build_unbounded_range)(338040 call chpl_build_unbounded_range))(338029 call ndarray[328686](?) 2 real[13])
            (338043 'end of statement')
          }
          { scopeless
            const fets[338045] "const"(338050 call .(338046 call . this[337799] c"features") c"array")
            (338054 'end of statement')
          }
          { scopeless
            const gslice[338056] "const"(338074 call(338071 call .(338066 call(338063 call .(338061 call(338058 call . gradSl[338027] c"dilate") strideDil[337939]) c"reshape") 1 1 outHeight[337870] outWidth[337872]) c"expand") 1 channels[337832] outHeight[337870] outWidth[337872])
            (338080 'end of statement')
          }
          { scopeless
            const filterGrad[338082] "const"(338091 call(338088 call . ndarray[328686](?) c"convolve") fets[338045] gslice[338056](stride =(338094 call . this[337799] c"stride")))(338084 call ndarray[328686](?) 3 real[13])
            (338100 'end of statement')
          }
          (338101 call =(338107 call(338104 call . kerGrad[337993] c"data") f[338017](338109 call chpl_build_unbounded_range)(338111 call chpl_build_unbounded_range)(338113 call chpl_build_unbounded_range))(338119 call(338116 call . filterGrad[338082] c"data")(338120 call chpl_build_unbounded_range)(338122 call chpl_build_unbounded_range)(338124 call chpl_build_unbounded_range)))
        }
        label _continueLabel[338131]
        _indexOfInterest[338126]
        _iterator[338127]
      }
      label _breakLabel[338132]
    }
    { scopeless
      const rotKernel[338165] "const"(338178 call(338175 call .(338170 call .(338166 call . this[337799] c"kernel") c"array") c"kernelRot"))
      (338180 'end of statement')
    }
    { scopeless
      const padH[338182] "const"(338184 call - kerHeight[337902] 1) int[10]
      (338189 'end of statement')
    }
    { scopeless
      const padW[338191] "const"(338193 call - kerWidth[337904] 1) int[10]
      (338198 'end of statement')
    }
    { scopeless
      const kernelRot[338200] "const"(338211 call(338208 call .(338205 call .(338201 call . this[337799] c"kernel") c"array") c"kernelRot"))
      (338213 'end of statement')
    }
    { scopeless
      unknown fetGrad[338215](338220 'new'(338222 call ndarray[328686](?)(338230 call .(338227 call .(338223 call . this[337799] c"features") c"array") c"_dom")(338233 call . this[337799] c"eltType")))(338217 call ndarray[328686](?) 3 real[13])
      (338238 'end of statement')
    }
    {
      unknown _indexOfInterest[338355] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[338356] "expr temp" "temp"
      (338365 'move' _iterator[338356](338363 call _getIterator(338371 call chpl_direct_range_iter 0(338369 call chpl__nudgeHighBound filters[337868]))))
      Defer
      {
        {
          (338386 call _freeIterator _iterator[338356])
        }
      }
      { scopeless type
        (338376 'move' _indexOfInterest[338355](338373 call iteratorIndex _iterator[338356]))
      }
      ForLoop[338357]
      {
        unknown f[338239] "index var" "insert auto destroy"
        (338381 'move' f[338239] _indexOfInterest[338355])
        {
          { scopeless
            const rotKernel[338249] "const"(338273 call(338270 call .(338265 call(338262 call .(338254 call(338251 call . kernelRot[338200] c"slice") f[338239](338256 call chpl_build_unbounded_range)(338258 call chpl_build_unbounded_range)(338260 call chpl_build_unbounded_range)) c"reshape") channels[337832] 1 kerHeight[337902] kerWidth[337904]) c"expand") channels[337832] channels[337832] kerHeight[337902] kerWidth[337904])
            (338279 'end of statement')
          }
          { scopeless
            const gslice[338281] "const"(338314 call(338311 call .(338307 call(338304 call .(338300 call(338297 call .(338295 call(338292 call .(338286 call(338283 call . grad[337808] c"slice") f[338239](338288 call chpl_build_unbounded_range)(338290 call chpl_build_unbounded_range)) c"dilate") strideDil[337939]) c"reshape") 1 outHeight[337870] outWidth[337872]) c"expand") channels[337832] outHeight[337870] outWidth[337872]) c"pad")(338318 call _build_tuple 0 0)(338323 call _build_tuple padH[338182] padH[338182])(338328 call _build_tuple padW[338191] padW[338191]))
            (338331 'end of statement')
          }
          { scopeless
            const imGrad[338333] "const"(338338 call(338335 call . ndarray[328686](?) c"convolve") gslice[338281] rotKernel[338249](stride = 1))
            (338344 'end of statement')
          }
          (338345 call +=(338348 call . fetGrad[338215] c"data")(338352 call . imGrad[338333] c"data"))
        }
        label _continueLabel[338360]
        _indexOfInterest[338355]
        _iterator[338356]
      }
      label _breakLabel[338361]
    }
    if(338433 call _cond_test(338417 call !=(338420 call . fetGrad[338215] c"shape")(338430 call .(338427 call .(338423 call . this[337799] c"features") c"array") c"shape")))
    {
      (338395 call writeln fetGrad[338215])
      (338400 call err module=[222] Utilities[320397](338404 call . fetGrad[338215] c"shape")(338414 call .(338411 call .(338407 call . this[337799] c"features") c"array") c"shape"))
      (338397 'referenced modules list' Utilities[320397])
    }
    (338437 return(338441 call _build_tuple fetGrad[338215] kerGrad[337993]))
  }
  { scopeless type
    (337828 call _build_tuple(337815 call ndarray[328686](?) 3(337817 call . this[337799] c"eltType"))(337822 call ndarray[328686](?) 4(337824 call . this[337799] c"eltType")))
  } serializable[310094]
}