AST dump for TwoArrayPartitioning after pass expandExternArrayCalls.
Module use list: 

{
  (387046 'use' ChapelStandard)
  (240152 'use' Math)
  (240157 'use' List 'only' list)
  (240163 'import' Sort.{ShellSort, MSBRadixSort})
  (240168 'import' Sort.{RadixSortHelp, ShallowCopy})
  (240171 'import' Sort)
  (240173 'use' MSBRadixSort)
  { scopeless
    unknown debug[240176] "param" "private" 0
    (240179 'end of statement')
  }
  { scopeless
    unknown maxBuckets[240181] "param" 512
    (240186 'end of statement')
  }
  type TwoArraySortTask[240295] unknown start[240189] int[10] unknown size[240194] int[10] unknown startbit[240199] int[10] unknown inA[240204] bool unknown doSort[240209] bool function TwoArraySortTask[240295].init[240213](arg _mt[240217]:_MT[201], arg this[240215]:TwoArraySortTask[240295]) : _unknown[42] "method" "primary method"
  {
  } function TwoArraySortTask[240295].init[240222](arg _mt[240246]:_MT[201], arg this[240224]:TwoArraySortTask[240295], arg start[240227] :
  int[10], arg size[240231] :
  int[10], arg startbit[240235] :
  int[10], arg inA[240239] :
  bool, arg doSort[240243] :
  bool) : _unknown[42] "method" "primary method"
  {
    (240249 call =(240254 call . this c"start") start)
    (240258 call =(240261 call . this c"size") size)
    (240265 call =(240270 call . this c"startbit") startbit)
    (240274 call =(240279 call . this c"inA") inA)
    (240283 call =(240288 call . this c"doSort") doSort)
  }
  type TwoArrayBucketizerPerTaskState[240314] unknown localCounts[240299](240309 call chpl__buildArrayRuntimeType(240306 call chpl__ensureDomainExpr(240300 call #(240303 call chpl_build_low_bounded_range 0) maxBuckets)) int[10])
  function defaultNumTasks[240316]() : _unknown[42]
  {
    if(240323 call _cond_test(240322 'task_get_serial'))
    {
      (240320 return 1)
    }
    { scopeless
      const tasksPerLocale[240328] "const" dataParTasksPerLocale
      (240331 'end of statement')
    }
    { scopeless
      const ignoreRunning[240333] "const" dataParIgnoreRunningTasks
      (240336 'end of statement')
    }
    { scopeless
      unknown nTasks[240338](240348 IfExpr (240339 call > tasksPerLocale 0) then
      { scopeless
        tasksPerLocale
      } else
      { scopeless
        (240345 call . here c"maxTaskPar")
      } )
      (240352 'end of statement')
    }
    if(240387 call _cond_test(240384 call ! ignoreRunning))
    {
      { scopeless
        const otherTasks[240355] "const"(240356 call -(240362 call(240359 call . here c"runningTasks")) 1)
        (240365 'end of statement')
      }
      (240366 call = nTasks(240381 IfExpr (240369 call < otherTasks nTasks) then
      { scopeless
        (240373 call :(240375 call - nTasks otherTasks) int[10])
      } else
      { scopeless
        1
      } ))
    }
    (240391 return nTasks)
  }
  type TwoArrayBucketizerSharedState[240640](?) unknown nTasks[240397](240400 call defaultNumTasks) int[10] unknown countsSize[240404](240406 call * nTasks maxBuckets) int[10] unknown bucketizerType[240413] "type variable" unknown bucketizer[240416] bucketizerType unknown globalCounts[240421](240431 call chpl__buildArrayRuntimeType(240428 call chpl__ensureDomainExpr(240422 call #(240425 call chpl_build_low_bounded_range 0) countsSize)) int[10]) unknown globalEnds[240436](240446 call chpl__buildArrayRuntimeType(240443 call chpl__ensureDomainExpr(240437 call #(240440 call chpl_build_low_bounded_range 0) countsSize)) int[10]) unknown localState[240451](240461 call chpl__buildArrayRuntimeType(240458 call chpl__ensureDomainExpr(240452 call #(240455 call chpl_build_low_bounded_range 0) nTasks)) TwoArrayBucketizerPerTaskState) unknown counts[240466](240476 call chpl__buildArrayRuntimeType(240473 call chpl__ensureDomainExpr(240467 call #(240470 call chpl_build_low_bounded_range 0) maxBuckets)) int[10]) unknown ends[240481](240491 call chpl__buildArrayRuntimeType(240488 call chpl__ensureDomainExpr(240482 call #(240485 call chpl_build_low_bounded_range 0) maxBuckets)) int[10]) unknown outputInA[240496](240506 call chpl__buildArrayRuntimeType(240503 call chpl__ensureDomainExpr(240497 call #(240500 call chpl_build_low_bounded_range 0) maxBuckets)) bool) unknown bigTasks[240511](240513 call list TwoArraySortTask) unknown smallTasks[240518](240520 call list TwoArraySortTask) unknown baseCaseSize[240525] 16 int[10] unknown sequentialSizePerTask[240531] 4096 int[10] unknown endbit[240537](240540 call max int[10]) int[10] function TwoArrayBucketizerSharedState[240640](?).init[240544](arg _mt[240550]:_MT[201], arg this[240546]:TwoArrayBucketizerSharedState[240640](?), arg bucketizerType[240548]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    (240553 call =(240558 call . this c"bucketizerType") bucketizerType)
  } function TwoArrayBucketizerSharedState[240640](?).init[240564](arg _mt[240590]:_MT[201], arg this[240566]:TwoArrayBucketizerSharedState[240640](?), in arg bucketizer[240568]:_any[141](?), arg baseCaseSize[240572] :
  int[10] =
  16, arg sequentialSizePerTask[240578] :
  int[10] =
  4096, arg endbit[240586] :
  int[10] =
  (240584 call max int[10])) : _unknown[42] "method" "primary method"
  {
    (240593 call =(240596 call . this c"bucketizerType")(240600 'typeof' bucketizer))
    (240601 call =(240606 call . this c"bucketizer") bucketizer)
    (240610 call =(240615 call . this c"baseCaseSize") baseCaseSize)
    (240619 call =(240624 call . this c"sequentialSizePerTask") sequentialSizePerTask)
    (240628 call =(240633 call . this c"endbit") endbit)
  }
  function bucketize[240642](arg start_n[240645] :
  int[10], arg end_n[240649] :
  int[10], ref arg dst[240655] :
  (240653 call chpl__buildArrayRuntimeType nil[32]), arg src[240661] :
  (240659 call chpl__buildArrayRuntimeType nil[32]), ref arg state[240665] :
  TwoArrayBucketizerSharedState, arg criterion[240668]:_any[141](?), inout arg startbit[240671] :
  int[10], arg allowSkipahead[240675] =
  0) : _unknown[42]
  {
    if(240694 call _cond_test debug)
    {
      { scopeless
        (240680 call writeln "bucketize "(240686 call chpl_build_bounded_range start_n end_n) " startbit=" startbit)
      }
    }
    unknown idxType[240700] "type variable"(240702 call . dst c"idxType")
    { scopeless
      const nBuckets[240707] "const"(240717 call(240714 call .(240709 call . state c"bucketizer") c"getNumBuckets"))
      (240719 'end of statement')
    }
    { scopeless
      const n[240721] "const"(240722 call +(240724 call - end_n start_n) 1)
      (240730 'end of statement')
    }
    { scopeless
      const nTasks[240732] "const"(240747 IfExpr (240733 call >= n(240739 call . state c"nTasks")) then
      { scopeless
        (240743 call . state c"nTasks")
      } else
      { scopeless
        1
      } )
      (240751 'end of statement')
    }
    (240753 call assert(240754 call > nTasks 0))
    if(240773 call _cond_test(240769 call == n 0))
    {
      (240759 call =(240764 call . state c"counts") 0)
      (240768 return)
    }
    { scopeless
      const countsSize[240778] "const"(240779 call * nTasks nBuckets)
      (240784 'end of statement')
    }
    { scopeless
      const blockSize[240786] "const"(240788 call divCeil n nTasks)
      (240792 'end of statement')
    }
    { scopeless
      const nBlocks[240794] "const"(240796 call divCeil n blockSize)
      (240800 'end of statement')
    }
    {
      unknown tmpIter[389495] "expr temp" "maybe ref" "no copy" "temp"
      (389498 'move' tmpIter[389495](240803 call #(240806 call chpl_build_low_bounded_range 0) nTasks))
      unknown isBounded[389863] "maybe param" "temp"
      (389869 'move' isBounded[389863](389865 call chpl_supportsBoundedCoforall tmpIter[389495] 0))
      if isBounded[389863]
      {
        const _coforallCount[389732] "const" "end count" "temp"
        (389800 'move' _coforallCount[389732](389797 call _endCountAlloc 1))
        unknown numTasks[389733] "temp"
        (389784 'move' numTasks[389733](389780 call chpl_boundedCoforallSize tmpIter[389495] 0))
        (389775 call _upEndCount _coforallCount[389732] 1 numTasks[389733])
        (389772 call chpl_resetTaskSpawn numTasks[389733])
        unknown _indexOfInterest[389740] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[389741] "expr temp" "temp"
        (389750 'move' _iterator[389741](389748 call _getIterator tmpIter[389495]))
        Defer
        {
          {
            (389765 call _freeIterator _iterator[389741])
          }
        }
        { scopeless type
          (389755 'move' _indexOfInterest[389740](389752 call iteratorIndex _iterator[389741]))
        }
        ForLoop[389742]
        {
          unknown tid[389502] "coforall index var" "index var" "insert auto destroy"
          (389760 'move' tid[389502] _indexOfInterest[389740])
          {
            {
              { scopeless
                unknown start[389506](389508 call + start_n(389511 call * tid blockSize))
                (389515 'end of statement')
              }
              { scopeless
                unknown end[389517](389519 call -(389521 call + start blockSize) 1)
                (389526 'end of statement')
              }
              if(389528 call _cond_test(389530 call > end end_n))
              {
                (389535 call = end end_n)
              }
              if(389540 call _cond_test debug)
              {
                { scopeless
                  (389545 call writeln "tid " tid " considering "(389550 call chpl_build_bounded_range start end))
                }
              }
              { scopeless
                unknown counts[389555] "ref var"(389557 call .(389562 call(389559 call . state c"localState") tid) c"localCounts")
                (389566 'end of statement')
              }
              {
                unknown _indexOfInterest[389568] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[389570] "expr temp" "temp"
                (389572 'move' _iterator[389570](389575 call _getIterator(389577 call chpl_direct_counted_range_iter 0 nBuckets)))
                Defer
                {
                  {
                    (389582 call _freeIterator _iterator[389570])
                  }
                }
                { scopeless type
                  (389586 'move' _indexOfInterest[389568](389589 call iteratorIndex _iterator[389570]))
                }
                ForLoop[389591]
                {
                  unknown bin[389594] "index var" "insert auto destroy"
                  (389596 'move' bin[389594] _indexOfInterest[389568])
                  {
                    (389601 call =(389603 call counts bin) 0)
                  }
                  label _continueLabel[389606]
                  _indexOfInterest[389568]
                  _iterator[389570]
                }
                label _breakLabel[389608]
              }
              {
                unknown _indexOfInterest[389611] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[389613] "expr temp" "temp"
                (389615 'move' _iterator[389613](389618 call _getIterator(389626 call(389620 call .(389622 call . state c"bucketizer") c"classify") src start end criterion startbit)))
                Defer
                {
                  {
                    (389634 call _freeIterator _iterator[389613])
                  }
                }
                { scopeless type
                  (389638 'move' _indexOfInterest[389611](389641 call iteratorIndex _iterator[389613]))
                }
                ForLoop[389643]
                {
                  (389647 call _check_tuple_var_decl _indexOfInterest[389611] 2)
                  unknown bin[389650] "index var" "insert auto destroy"
                  (389652 'move' bin[389650](389655 call _indexOfInterest[389611] 1))
                  {
                    (389659 call +=(389661 call counts bin) 1)
                  }
                  label _continueLabel[389664]
                  _indexOfInterest[389611]
                  _iterator[389613]
                }
                label _breakLabel[389666]
              }
              {
                unknown _indexOfInterest[389669] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[389671] "expr temp" "temp"
                (389673 'move' _iterator[389671](389676 call _getIterator(389678 call chpl_direct_counted_range_iter 0 nBuckets)))
                Defer
                {
                  {
                    (389683 call _freeIterator _iterator[389671])
                  }
                }
                { scopeless type
                  (389687 'move' _indexOfInterest[389669](389690 call iteratorIndex _iterator[389671]))
                }
                ForLoop[389692] order-independent
                {
                  unknown bin[389701] "index var" "insert auto destroy"
                  (389703 'move' bin[389701] _indexOfInterest[389669])
                  {
                    (389708 call =(389713 call(389710 call . state c"globalCounts")(389715 call +(389717 call * bin nTasks) tid))(389722 call counts bin))
                  }
                  label _continueLabel[389724]
                  _indexOfInterest[389669]
                  _iterator[389671]
                }
                label _breakLabel[389726]
              }
            }
            (389735 call _downEndCount _coforallCount[389732] nil[32])
            (389734 'coforall loop')
            (389728 'actuals list' tiMarkRef[283] state)
          }
          label _continueLabel[389745]
          _indexOfInterest[389740]
          _iterator[389741]
        }
        label _breakLabel[389746]
        Defer
        {
          {
            (389787 call _endCountFree _coforallCount[389732])
          }
        }
        (389792 call _waitEndCount _coforallCount[389732] 1 numTasks[389733])
      }
      {
        const _coforallCount[389804] "const" "end count" "temp"
        (389860 'move' _coforallCount[389804](389857 call _endCountAlloc 1))
        unknown _indexOfInterest[389812] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[389813] "expr temp" "temp"
        (389822 'move' _iterator[389813](389820 call _getIterator tmpIter[389495]))
        Defer
        {
          {
            (389837 call _freeIterator _iterator[389813])
          }
        }
        { scopeless type
          (389827 'move' _indexOfInterest[389812](389824 call iteratorIndex _iterator[389813]))
        }
        ForLoop[389814]
        {
          unknown tid[240801] "coforall index var" "index var" "insert auto destroy"
          (389832 'move' tid[240801] _indexOfInterest[389812])
          (389844 call _upEndCount _coforallCount[389804] 1)
          {
            {
              { scopeless
                unknown start[240819](240820 call + start_n(240823 call * tid blockSize))
                (240828 'end of statement')
              }
              { scopeless
                unknown end[240830](240831 call -(240833 call + start blockSize) 1)
                (240839 'end of statement')
              }
              if(240849 call _cond_test(240845 call > end end_n))
              {
                (240841 call = end end_n)
              }
              if(240868 call _cond_test debug)
              {
                { scopeless
                  (240854 call writeln "tid " tid " considering "(240864 call chpl_build_bounded_range start end))
                }
              }
              { scopeless
                unknown counts[240874] "ref var"(240885 call .(240881 call(240878 call . state c"localState") tid) c"localCounts")
                (240889 'end of statement')
              }
              {
                unknown _indexOfInterest[240905] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[240906] "expr temp" "temp"
                (240915 'move' _iterator[240906](240913 call _getIterator(240922 call chpl_direct_counted_range_iter 0 nBuckets)))
                Defer
                {
                  {
                    (240937 call _freeIterator _iterator[240906])
                  }
                }
                { scopeless type
                  (240927 'move' _indexOfInterest[240905](240924 call iteratorIndex _iterator[240906]))
                }
                ForLoop[240907]
                {
                  unknown bin[240890] "index var" "insert auto destroy"
                  (240932 'move' bin[240890] _indexOfInterest[240905])
                  {
                    (240899 call =(240902 call counts bin) 0)
                  }
                  label _continueLabel[240910]
                  _indexOfInterest[240905]
                  _iterator[240906]
                }
                label _breakLabel[240911]
              }
              {
                unknown _indexOfInterest[240972] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[240973] "expr temp" "temp"
                (240982 'move' _iterator[240973](240980 call _getIterator(240959 call(240956 call .(240951 call . state c"bucketizer") c"classify") src start end criterion startbit)))
                Defer
                {
                  {
                    (241004 call _freeIterator _iterator[240973])
                  }
                }
                { scopeless type
                  (240987 'move' _indexOfInterest[240972](240984 call iteratorIndex _iterator[240973]))
                }
                ForLoop[240974]
                {
                  (240992 call _check_tuple_var_decl _indexOfInterest[240972] 2)
                  unknown bin[240946] "index var" "insert auto destroy"
                  (240999 'move' bin[240946](240996 call _indexOfInterest[240972] 1))
                  {
                    (240966 call +=(240969 call counts bin) 1)
                  }
                  label _continueLabel[240977]
                  _indexOfInterest[240972]
                  _iterator[240973]
                }
                label _breakLabel[240978]
              }
              {
                unknown _indexOfInterest[241047] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[241048] "expr temp" "temp"
                (241057 'move' _iterator[241048](241055 call _getIterator(241064 call chpl_direct_counted_range_iter 0 nBuckets)))
                Defer
                {
                  {
                    (241079 call _freeIterator _iterator[241048])
                  }
                }
                { scopeless type
                  (241069 'move' _indexOfInterest[241047](241066 call iteratorIndex _iterator[241048]))
                }
                ForLoop[241049] order-independent
                {
                  unknown bin[241011] "index var" "insert auto destroy"
                  (241074 'move' bin[241011] _indexOfInterest[241047])
                  {
                    (241026 call =(241034 call(241031 call . state c"globalCounts")(241035 call +(241037 call * bin nTasks) tid))(241043 call counts bin))
                  }
                  label _continueLabel[241052]
                  _indexOfInterest[241047]
                  _iterator[241048]
                }
                label _breakLabel[241053]
              }
            }
            (389807 call _downEndCount _coforallCount[389804] nil[32])
            (389806 'coforall loop')
            (240809 'actuals list' tiMarkRef[283] state)
          }
          label _continueLabel[389817]
          _indexOfInterest[389812]
          _iterator[389813]
        }
        label _breakLabel[389818]
        Defer
        {
          {
            (389848 call _endCountFree _coforallCount[389804])
          }
        }
        (389853 call _waitEndCount _coforallCount[389804] 1)
      }
    }
    { scopeless
      unknown counts[241088] "ref var"(241090 call . state c"counts")
      (241094 'end of statement')
    }
    Forall[241186] {
      induction variables:
        
        unknown bin[241095] "index var" "insert auto destroy"
      iterated expressions:
        (241097 call #(241100 call chpl_build_low_bounded_range 0) nBuckets)
      shadow variables:
        counts[241105] 'ref' intent
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        { scopeless
          unknown total[241111] 0
          (241114 'end of statement')
        }
        {
          unknown _indexOfInterest[241139] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[241140] "expr temp" "temp"
          (241149 'move' _iterator[241140](241147 call _getIterator(241156 call chpl_direct_counted_range_iter 0 nTasks)))
          Defer
          {
            {
              (241171 call _freeIterator _iterator[241140])
            }
          }
          { scopeless type
            (241161 'move' _indexOfInterest[241139](241158 call iteratorIndex _iterator[241140]))
          }
          ForLoop[241141]
          {
            unknown tid[241115] "index var" "insert auto destroy"
            (241166 'move' tid[241115] _indexOfInterest[241139])
            {
              (241124 call += total(241131 call(241128 call . state c"globalCounts")(241132 call +(241134 call * bin nTasks) tid)))
            }
            label _continueLabel[241144]
            _indexOfInterest[241139]
            _iterator[241140]
          }
          label _breakLabel[241145]
        }
        (241178 call =(241181 call counts bin) total)
      }
    }
    if(241370 call _cond_test(241356 call &&(241358 call !(241366 call .(241361 call . state c"bucketizer") c"isSampleSort")) allowSkipahead))
    {
      { scopeless
        unknown onlyBin[241191](241193 call - 1) int[10]
        (241197 'end of statement')
      }
      {
        unknown _indexOfInterest[241244] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[241245] "expr temp" "temp"
        (241254 'move' _iterator[241245](241252 call _getIterator(241261 call chpl_direct_counted_range_iter 0 nBuckets)))
        Defer
        {
          {
            (241276 call _freeIterator _iterator[241245])
          }
        }
        { scopeless type
          (241266 'move' _indexOfInterest[241244](241263 call iteratorIndex _iterator[241245]))
        }
        ForLoop[241246]
        {
          unknown bin[241198] "index var" "insert auto destroy"
          (241271 'move' bin[241198] _indexOfInterest[241244])
          {
            { scopeless
              unknown total[241208](241210 call counts bin)
              (241213 'end of statement')
            }
            if(241239 call _cond_test(241235 call == total 0))
            {
            }
            {
              { scopeless
                if(241231 call _cond_test(241227 call == total n))
                {
                  (241216 call = onlyBin bin)
                  break nil[32]
                }
                {
                  break nil[32]
                }
              }
            }
          }
          label _continueLabel[241249]
          _indexOfInterest[241244]
          _iterator[241245]
        }
        label _breakLabel[241250]
      }
      if(241352 call _cond_test(241348 call >= onlyBin 0))
      {
        (241284 call = startbit(241296 call(241293 call .(241288 call . state c"bucketizer") c"getNextStartBit") startbit))
        if(241307 call _cond_test(241300 call > startbit(241304 call . state c"endbit")))
        {
          { scopeless
            (241298 return)
          }
        }
        if(241331 call _cond_test(241314 call !(241329 call(241326 call .(241325 call(241322 call .(241317 call . state c"bucketizer") c"getBinsToRecursivelySort")) c"contains") onlyBin)))
        {
          { scopeless
            (241312 return)
          }
        }
        (241337 call bucketize start_n end_n dst src state criterion startbit(allowSkipahead = 1))
        (241347 return)
      }
    }
    (241374 call =(241379 call . state c"globalEnds")(241382 call +(241423 call function chpl__scan1[241389](arg chpl_toScan[241391]:_any[141](?)) : _unknown[42] "compiler nested function" "fn returns iterator"
    {
      unknown chpl_eltType[241393] "maybe type" "temp"
      { scopeless type
        (241397 'move' chpl_eltType[241393](241399 'typeof'(241401 call chpl__initCopy(241403 call iteratorIndex(241405 call _getIterator chpl_toScan[241391])) 0)))
      }
      const tmp[241394] "const" "temp"
      (241415 'move' tmp[241394](241414 'new'(241413 call SumReduceScanOp(eltType = chpl_eltType[241393])(_chpl_manager = unmanaged[183](?)))))
      (241417 return(241419 call chpl__scanIterator tmp[241394] chpl_toScan[241391]))
    }(241386 call . state c"globalCounts")) start_n))
    if(241577 call _cond_test debug)
    {
      {
        unknown _indexOfInterest[241537] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[241538] "expr temp" "temp"
        (241547 'move' _iterator[241538](241545 call _getIterator(241554 call chpl_direct_counted_range_iter 0 nBuckets)))
        Defer
        {
          {
            (241569 call _freeIterator _iterator[241538])
          }
        }
        { scopeless type
          (241559 'move' _indexOfInterest[241537](241556 call iteratorIndex _iterator[241538]))
        }
        ForLoop[241539]
        {
          unknown bin[241426] "index var" "insert auto destroy"
          (241564 'move' bin[241426] _indexOfInterest[241537])
          {
            {
              unknown _indexOfInterest[241498] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[241499] "expr temp" "temp"
              (241508 'move' _iterator[241499](241506 call _getIterator(241515 call chpl_direct_counted_range_iter 0 nTasks)))
              Defer
              {
                {
                  (241530 call _freeIterator _iterator[241499])
                }
              }
              { scopeless type
                (241520 'move' _indexOfInterest[241498](241517 call iteratorIndex _iterator[241499]))
              }
              ForLoop[241500]
              {
                unknown tid[241435] "index var" "insert auto destroy"
                (241525 'move' tid[241435] _indexOfInterest[241498])
                {
                  { scopeless
                    unknown gb[241445](241446 call +(241448 call * bin nTasks) tid)
                    (241454 'end of statement')
                  }
                  if(241494 call _cond_test(241485 call !=(241491 call(241488 call . state c"globalCounts") gb) 0))
                  {
                    (241457 call writeln "tid " tid " count[" bin "] = "(241471 call(241468 call . state c"globalCounts") gb) " end = "(241476 call -(241482 call(241479 call . state c"globalEnds") gb) 1))
                  }
                }
                label _continueLabel[241503]
                _indexOfInterest[241498]
                _iterator[241499]
              }
              label _breakLabel[241504]
            }
          }
          label _continueLabel[241542]
          _indexOfInterest[241537]
          _iterator[241538]
        }
        label _breakLabel[241543]
      }
    }
    {
      unknown tmpIter[389873] "expr temp" "maybe ref" "no copy" "temp"
      (389876 'move' tmpIter[389873](241583 call #(241586 call chpl_build_low_bounded_range 0) nTasks))
      unknown isBounded[390264] "maybe param" "temp"
      (390270 'move' isBounded[390264](390266 call chpl_supportsBoundedCoforall tmpIter[389873] 0))
      if isBounded[390264]
      {
        const _coforallCount[390133] "const" "end count" "temp"
        (390201 'move' _coforallCount[390133](390198 call _endCountAlloc 1))
        unknown numTasks[390134] "temp"
        (390185 'move' numTasks[390134](390181 call chpl_boundedCoforallSize tmpIter[389873] 0))
        (390176 call _upEndCount _coforallCount[390133] 1 numTasks[390134])
        (390173 call chpl_resetTaskSpawn numTasks[390134])
        unknown _indexOfInterest[390141] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[390142] "expr temp" "temp"
        (390151 'move' _iterator[390142](390149 call _getIterator tmpIter[389873]))
        Defer
        {
          {
            (390166 call _freeIterator _iterator[390142])
          }
        }
        { scopeless type
          (390156 'move' _indexOfInterest[390141](390153 call iteratorIndex _iterator[390142]))
        }
        ForLoop[390143]
        {
          unknown tid[389880] "coforall index var" "index var" "insert auto destroy"
          (390161 'move' tid[389880] _indexOfInterest[390141])
          {
            {
              { scopeless
                unknown start[389884](389886 call + start_n(389889 call * tid blockSize))
                (389893 'end of statement')
              }
              { scopeless
                unknown end[389895](389897 call -(389899 call + start blockSize) 1)
                (389904 'end of statement')
              }
              if(389906 call _cond_test(389908 call > end end_n))
              {
                (389913 call = end end_n)
              }
              { scopeless
                unknown nextOffsets[389918] "ref var"(389920 call .(389925 call(389922 call . state c"localState") tid) c"localCounts")
                (389929 'end of statement')
              }
              {
                unknown _indexOfInterest[389931] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[389933] "expr temp" "temp"
                (389935 'move' _iterator[389933](389938 call _getIterator(389940 call chpl_direct_counted_range_iter 0 nBuckets)))
                Defer
                {
                  {
                    (389945 call _freeIterator _iterator[389933])
                  }
                }
                { scopeless type
                  (389949 'move' _indexOfInterest[389931](389952 call iteratorIndex _iterator[389933]))
                }
                ForLoop[389954]
                {
                  unknown bin[389957] "index var" "insert auto destroy"
                  (389959 'move' bin[389957] _indexOfInterest[389931])
                  {
                    { scopeless
                      unknown globalBin[389964](389966 call +(389968 call * bin nTasks) tid)
                      (389973 'end of statement')
                    }
                    (389975 call =(389977 call nextOffsets bin)(389995 IfExpr (389980 call > globalBin 0) then
                    { scopeless
                      (389988 call(389985 call . state c"globalEnds")(389990 call - globalBin 1))
                    } else
                    { scopeless
                      start_n
                    } ))
                    if(389997 call _cond_test debug)
                    {
                      if(390001 call _cond_test(390003 call !=(390008 call(390005 call . state c"globalCounts") globalBin) 0))
                      {
                        (390013 call writeln "tid " tid " nextOffsets[" bin "] = "(390020 call nextOffsets bin))
                      }
                    }
                  }
                  label _continueLabel[390024]
                  _indexOfInterest[389931]
                  _iterator[389933]
                }
                label _breakLabel[390026]
              }
              {
                unknown _indexOfInterest[390029] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[390031] "expr temp" "temp"
                (390033 'move' _iterator[390031](390036 call _getIterator(390044 call(390038 call .(390040 call . state c"bucketizer") c"classify") src start end criterion startbit)))
                Defer
                {
                  {
                    (390052 call _freeIterator _iterator[390031])
                  }
                }
                { scopeless type
                  (390056 'move' _indexOfInterest[390029](390059 call iteratorIndex _iterator[390031]))
                }
                ForLoop[390061]
                {
                  (390065 call _check_tuple_var_decl _indexOfInterest[390029] 2)
                  unknown i[390068] "index var" "insert auto destroy"
                  (390070 'move' i[390068](390073 call _indexOfInterest[390029] 0))
                  unknown bin[390075] "index var" "insert auto destroy"
                  (390077 'move' bin[390075](390080 call _indexOfInterest[390029] 1))
                  {
                    { scopeless
                      unknown next[390084] "ref var"(390086 call nextOffsets bin)
                      (390089 'end of statement')
                    }
                    if(390091 call _cond_test debug)
                    {
                      (390095 call writeln "tid " tid " dst[" next "] = src[" i "] bin " bin)
                    }
                    (390109 call(390106 call . ShallowCopy c"shallowCopy") dst next src(390114 call : i idxType)(390118 call : 1 idxType))
                    (390122 call += next 1)
                  }
                  label _continueLabel[390125]
                  _indexOfInterest[390029]
                  _iterator[390031]
                }
                label _breakLabel[390127]
              }
            }
            (390136 call _downEndCount _coforallCount[390133] nil[32])
            (390135 'coforall loop')
            (390129 'actuals list' tiMarkRef[283] state)
          }
          label _continueLabel[390146]
          _indexOfInterest[390141]
          _iterator[390142]
        }
        label _breakLabel[390147]
        Defer
        {
          {
            (390188 call _endCountFree _coforallCount[390133])
          }
        }
        (390193 call _waitEndCount _coforallCount[390133] 1 numTasks[390134])
      }
      {
        const _coforallCount[390205] "const" "end count" "temp"
        (390261 'move' _coforallCount[390205](390258 call _endCountAlloc 1))
        unknown _indexOfInterest[390213] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[390214] "expr temp" "temp"
        (390223 'move' _iterator[390214](390221 call _getIterator tmpIter[389873]))
        Defer
        {
          {
            (390238 call _freeIterator _iterator[390214])
          }
        }
        { scopeless type
          (390228 'move' _indexOfInterest[390213](390225 call iteratorIndex _iterator[390214]))
        }
        ForLoop[390215]
        {
          unknown tid[241581] "coforall index var" "index var" "insert auto destroy"
          (390233 'move' tid[241581] _indexOfInterest[390213])
          (390245 call _upEndCount _coforallCount[390205] 1)
          {
            {
              { scopeless
                unknown start[241599](241600 call + start_n(241603 call * tid blockSize))
                (241608 'end of statement')
              }
              { scopeless
                unknown end[241610](241611 call -(241613 call + start blockSize) 1)
                (241619 'end of statement')
              }
              if(241629 call _cond_test(241625 call > end end_n))
              {
                (241621 call = end end_n)
              }
              { scopeless
                unknown nextOffsets[241634] "ref var"(241641 call .(241639 call(241636 call . state c"localState") tid) c"localCounts")
                (241645 'end of statement')
              }
              {
                unknown _indexOfInterest[241720] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[241721] "expr temp" "temp"
                (241730 'move' _iterator[241721](241728 call _getIterator(241737 call chpl_direct_counted_range_iter 0 nBuckets)))
                Defer
                {
                  {
                    (241752 call _freeIterator _iterator[241721])
                  }
                }
                { scopeless type
                  (241742 'move' _indexOfInterest[241720](241739 call iteratorIndex _iterator[241721]))
                }
                ForLoop[241722]
                {
                  unknown bin[241646] "index var" "insert auto destroy"
                  (241747 'move' bin[241646] _indexOfInterest[241720])
                  {
                    { scopeless
                      unknown globalBin[241656](241657 call +(241659 call * bin nTasks) tid)
                      (241665 'end of statement')
                    }
                    (241666 call =(241669 call nextOffsets bin)(241685 IfExpr (241671 call > globalBin 0) then
                    { scopeless
                      (241679 call(241676 call . state c"globalEnds")(241680 call - globalBin 1))
                    } else
                    { scopeless
                      start_n
                    } ))
                    if(241716 call _cond_test debug)
                    {
                      if(241711 call _cond_test(241702 call !=(241708 call(241705 call . state c"globalCounts") globalBin) 0))
                      {
                        (241691 call writeln "tid " tid " nextOffsets[" bin "] = "(241700 call nextOffsets bin))
                      }
                    }
                  }
                  label _continueLabel[241725]
                  _indexOfInterest[241720]
                  _iterator[241721]
                }
                label _breakLabel[241726]
              }
              {
                unknown _indexOfInterest[241829] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[241830] "expr temp" "temp"
                (241839 'move' _iterator[241830](241837 call _getIterator(241773 call(241770 call .(241767 call . state c"bucketizer") c"classify") src start end criterion startbit)))
                Defer
                {
                  {
                    (241867 call _freeIterator _iterator[241830])
                  }
                }
                { scopeless type
                  (241844 'move' _indexOfInterest[241829](241841 call iteratorIndex _iterator[241830]))
                }
                ForLoop[241831]
                {
                  (241849 call _check_tuple_var_decl _indexOfInterest[241829] 2)
                  unknown i[241760] "index var" "insert auto destroy"
                  (241856 'move' i[241760](241853 call _indexOfInterest[241829] 0))
                  unknown bin[241762] "index var" "insert auto destroy"
                  (241862 'move' bin[241762](241859 call _indexOfInterest[241829] 1))
                  {
                    { scopeless
                      unknown next[241781] "ref var"(241783 call nextOffsets bin)
                      (241786 'end of statement')
                    }
                    if(241805 call _cond_test debug)
                    {
                      (241789 call writeln "tid " tid " dst[" next "] = src[" i "] bin " bin)
                    }
                    (241813 call(241810 call . ShallowCopy c"shallowCopy") dst next src(241817 call : i idxType)(241821 call : 1 idxType))
                    (241825 call += next 1)
                  }
                  label _continueLabel[241834]
                  _indexOfInterest[241829]
                  _iterator[241830]
                }
                label _breakLabel[241835]
              }
            }
            (390208 call _downEndCount _coforallCount[390205] nil[32])
            (390207 'coforall loop')
            (241589 'actuals list' tiMarkRef[283] state)
          }
          label _continueLabel[390218]
          _indexOfInterest[390213]
          _iterator[390214]
        }
        label _breakLabel[390219]
        Defer
        {
          {
            (390249 call _endCountFree _coforallCount[390205])
          }
        }
        (390254 call _waitEndCount _coforallCount[390205] 1)
      }
    }
  }
  function testBucketize[241877](arg start_n[241880] :
  int[10], arg end_n[241884] :
  int[10], ref arg dst[241890] :
  (241888 call chpl__buildArrayRuntimeType nil[32]), arg src[241896] :
  (241894 call chpl__buildArrayRuntimeType nil[32]), arg bucketizer[241899]:_any[141](?), arg criterion[241901]:_any[141](?), arg startbit[241904] :
  int[10]) : _unknown[42]
  {
    { scopeless
      unknown state[241909](241910 'new'(241912 call TwoArrayBucketizerSharedState(bucketizer = bucketizer)))
      (241916 'end of statement')
    }
    { scopeless
      unknown myStartBit[241918] startbit
      (241921 'end of statement')
    }
    (241923 call bucketize start_n end_n dst src state criterion myStartBit)
    (241931 return(241933 call . state c"counts"))
  }
  function partitioningSortWithScratchSpaceHandleSampling[241938](arg start_n[241941] :
  int[10], arg end_n[241945] :
  int[10], ref arg A[241951] :
  (241949 call chpl__buildArrayRuntimeType nil[32]), ref arg Scratch[241957] :
  (241955 call chpl__buildArrayRuntimeType nil[32]), ref arg state[241961] :
  TwoArrayBucketizerSharedState, arg criterion[241964]:_any[141](?), arg startbit[241967] :
  int[10]) : _unknown[42]
  {
    if(242153 call _cond_test(242150 call .(242147 call . state c"bucketizer") c"isSampleSort"))
    {
      { scopeless
        unknown n[241974](241975 call -(241977 call + 1 end_n) start_n)
        (241983 'end of statement')
      }
      { scopeless
        unknown logNumBuckets[241985](241987 call computeLogBucketSize n)
        (241990 'end of statement')
      }
      { scopeless
        unknown numBuckets[241992](241993 call << 1 logNumBuckets)
        (241998 'end of statement')
      }
      { scopeless
        unknown sampleStep[242000](242002 call chooseSampleStep n logNumBuckets)
        (242006 'end of statement')
      }
      { scopeless
        unknown sampleSize[242008](242009 call -(242011 call * sampleStep numBuckets) 1)
        (242017 'end of statement')
      }
      if(242045 call _cond_test(242041 call >= sampleSize n))
      {
        if(242026 call _cond_test debug)
        {
          { scopeless
            (242020 call writeln "Reducing sample size because it was too big")
          }
        }
        (242031 call = sampleSize(242035 call max 1(242037 call / n 2)))
      }
      (242050 call putRandomSampleAtArrayStart start_n end_n A sampleSize)
      if(242062 call _cond_test debug)
      {
        { scopeless
          (242056 call writeln "recursing to sort the sample")
        }
      }
      (242071 call(242068 call . Sort c"sort")(242073 call A(242074 call #(242077 call chpl_build_low_bounded_range start_n) sampleSize))(comparator = criterion))
      if(242102 call _cond_test debug)
      {
        (242089 call(242086 call . RadixSortHelp c"checkSorted") start_n(242091 call -(242093 call + start_n sampleSize) 1) A criterion startbit)
      }
      (242107 call createSplittersFromSample A(242110 call . state c"bucketizer") criterion start_n sampleSize sampleStep numBuckets)
      if(242142 call _cond_test debug)
      {
        (242120 call writeln "sample bucketizer "(242125 call . state c"bucketizer"))
        (242129 call writef "A %i %i A=%\?\n" start_n end_n(242136 call A(242139 call chpl_build_bounded_range start_n end_n)))
      }
    }
  }
  { scopeless type
    void[4]
  }
  function partitioningSortWithScratchSpace[242160](arg start_n[242163] :
  int[10], arg end_n[242167] :
  int[10], ref arg A[242173] :
  (242171 call chpl__buildArrayRuntimeType nil[32]), ref arg Scratch[242179] :
  (242177 call chpl__buildArrayRuntimeType nil[32]), ref arg state[242183] :
  TwoArrayBucketizerSharedState, arg criterion[242186]:_any[141](?), arg startbit[242189] :
  int[10]) : _unknown[42]
  {
    if(242203 call _cond_test(242196 call > startbit(242200 call . state c"endbit")))
    {
      { scopeless
        (242194 return)
      }
    }
    if(242233 call _cond_test(242223 call <(242225 call - end_n start_n)(242230 call . state c"baseCaseSize")))
    {
      (242215 call(242212 call . ShellSort c"shellSortMoveEltsIntIdx") A criterion(start = start_n)(end = end_n))
      (242222 return)
    }
    if(242259 call _cond_test debug)
    {
      (242239 call writeln "partitioningSortWithScratchSpace(" start_n "," end_n ")")
      (242248 call writef "A %i %i A=%\?\n" start_n end_n(242253 call A(242256 call chpl_build_bounded_range start_n end_n)))
    }
    { scopeless
      const n[242264] "const"(242265 call +(242267 call - end_n start_n) 1)
      (242273 'end of statement')
    }
    { scopeless
      const maxSequentialSize[242275] "const"(242277 call max(242278 call / n(242282 call . state c"nTasks"))(242285 call *(242288 call . state c"nTasks")(242292 call . state c"sequentialSizePerTask")))
      (242296 'end of statement')
    }
    (242306 call(242303 call .(242300 call . state c"bigTasks") c"pushBack")(242307 'new'(242309 call TwoArraySortTask start_n n startbit(inA = 1)(doSort = 1))))
    (242318 call assert(242319 call ==(242325 call .(242322 call . state c"bigTasks") c"size") 1))
    (242330 call assert(242331 call ==(242339 call .(242336 call . state c"smallTasks") c"size") 0))
    {
      unknown tmp[242876] "temp"
      (242912 'move' tmp[242876](242901 call _cond_test(242903 call !(242911 call(242905 call .(242907 call . state c"bigTasks") c"isEmpty")))))
      WhileDo[242881]
      {
        {
          { scopeless
            const task[242355] "const"(242365 call(242362 call .(242357 call . state c"bigTasks") c"popBack"))
            (242367 'end of statement')
          }
          { scopeless
            const taskEnd[242369] "const"(242370 call -(242372 call +(242375 call . task c"start")(242379 call . task c"size")) 1)
            (242384 'end of statement')
          }
          { scopeless
            unknown taskStartBit[242386](242388 call . task c"startbit")
            (242392 'end of statement')
          }
          (242394 call assert(242396 call . task c"doSort"))
          if(242413 call _cond_test debug)
          {
            (242401 call writeln "doing big task "(242410 call chpl_build_bounded_range(242406 call . task c"start") taskEnd))
          }
          if(242525 call _cond_test(242522 call . task c"inA"))
          {
            (242419 call partitioningSortWithScratchSpaceHandleSampling(242421 call . task c"start") taskEnd A Scratch state criterion taskStartBit)
            (242431 call bucketize(242433 call . task c"start") taskEnd Scratch A state criterion taskStartBit(allowSkipahead = 1))
            if(242465 call _cond_test debug)
            {
              (242446 call writef "pb %i %i Scratch=%\?\n"(242451 call . task c"start") taskEnd(242456 call Scratch(242462 call chpl_build_bounded_range(242458 call . task c"start") taskEnd)))
            }
          }
          {
            (242471 call partitioningSortWithScratchSpaceHandleSampling(242473 call . task c"start") taskEnd Scratch A state criterion taskStartBit)
            (242483 call bucketize(242485 call . task c"start") taskEnd A Scratch state criterion taskStartBit(allowSkipahead = 1))
            if(242517 call _cond_test debug)
            {
              (242498 call writef "pb %i %i A=%\?\n"(242503 call . task c"start") taskEnd(242508 call A(242514 call chpl_build_bounded_range(242510 call . task c"start") taskEnd)))
            }
          }
          { scopeless
            const nowInA[242530] "const"(242531 call !(242534 call . task c"inA"))
            (242538 'end of statement')
          }
          (242539 call =(242544 call . state c"ends")(242547 call +(242588 call function chpl__scan2[242554](arg chpl_toScan[242556]:_any[141](?)) : _unknown[42] "compiler nested function" "fn returns iterator"
          {
            unknown chpl_eltType[242558] "maybe type" "temp"
            { scopeless type
              (242562 'move' chpl_eltType[242558](242564 'typeof'(242566 call chpl__initCopy(242568 call iteratorIndex(242570 call _getIterator chpl_toScan[242556])) 0)))
            }
            const tmp[242559] "const" "temp"
            (242580 'move' tmp[242559](242579 'new'(242578 call SumReduceScanOp(eltType = chpl_eltType[242558])(_chpl_manager = unmanaged[183](?)))))
            (242582 return(242584 call chpl__scanIterator tmp[242559] chpl_toScan[242556]))
          }(242551 call . state c"counts"))(242590 call . task c"start")))
          { scopeless
            const nBuckets[242594] "const"(242602 call(242599 call .(242596 call . state c"bucketizer") c"getNumBuckets"))
            (242604 'end of statement')
          }
          {
            unknown _indexOfInterest[242837] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[242838] "expr temp" "temp"
            (242847 'move' _iterator[242838](242845 call _getIterator(242854 call chpl_direct_counted_range_iter 0 nBuckets)))
            Defer
            {
              {
                (242869 call _freeIterator _iterator[242838])
              }
            }
            { scopeless type
              (242859 'move' _indexOfInterest[242837](242856 call iteratorIndex _iterator[242838]))
            }
            ForLoop[242839]
            {
              unknown bin[242605] "index var" "insert auto destroy"
              (242864 'move' bin[242605] _indexOfInterest[242837])
              {
                { scopeless
                  const binSize[242615] "const"(242620 call(242617 call . state c"counts") bin)
                  (242623 'end of statement')
                }
                { scopeless
                  const binStart[242625] "const"(242626 call -(242632 call(242629 call . state c"ends") bin) binSize)
                  (242636 'end of statement')
                }
                { scopeless
                  const binEnd[242638] "const"(242639 call -(242641 call + binStart binSize) 1)
                  (242647 'end of statement')
                }
                { scopeless
                  const binStartBit[242649] "const"(242657 call(242654 call .(242651 call . state c"bucketizer") c"getNextStartBit") taskStartBit)
                  (242660 'end of statement')
                }
                { scopeless
                  const sortit[242662] "const"(242663 call &&(242665 call &&(242667 call > binSize 1)(242671 call <= binStartBit(242675 call . state c"endbit")))(242689 call(242686 call .(242685 call(242682 call .(242679 call . state c"bucketizer") c"getBinsToRecursivelySort")) c"contains") bin))
                  (242692 'end of statement')
                }
                if(242832 call _cond_test(242828 call == binSize 0))
                {
                }
                {
                  { scopeless
                    if(242823 call _cond_test(242817 call && nowInA(242820 call ! sortit)))
                    {
                    }
                    {
                      { scopeless
                        if(242812 call _cond_test(242804 call &&(242806 call ! nowInA)(242809 call ! sortit)))
                        {
                          (242703 call(242700 call .(242697 call . state c"smallTasks") c"pushBack")(242704 'new'(242706 call TwoArraySortTask binStart binSize binStartBit nowInA sortit)))
                        }
                        {
                          { scopeless
                            if(242800 call _cond_test(242796 call <= binSize maxSequentialSize))
                            {
                              if(242735 call _cond_test(242728 call && debug(242731 call > binSize 0)))
                              {
                                (242715 call writeln "handling bin " bin " "(242723 call chpl_build_bounded_range binStart binEnd) " as small")
                              }
                              (242746 call(242743 call .(242740 call . state c"smallTasks") c"pushBack")(242747 'new'(242749 call TwoArraySortTask binStart binSize binStartBit nowInA sortit)))
                            }
                            {
                              if(242776 call _cond_test(242769 call && debug(242772 call > binSize 0)))
                              {
                                (242758 call writeln "handling bin " bin " "(242764 call chpl_build_bounded_range binStart binEnd) " as big")
                              }
                              (242787 call(242784 call .(242781 call . state c"bigTasks") c"pushBack")(242788 'new'(242790 call TwoArraySortTask binStart binSize binStartBit nowInA sortit)))
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              label _continueLabel[242842]
              _indexOfInterest[242837]
              _iterator[242838]
            }
            label _breakLabel[242843]
          }
        }
        label _continueLabel[242879]
        (242896 'move' tmp[242876](242885 call _cond_test(242887 call !(242895 call(242889 call .(242891 call . state c"bigTasks") c"isEmpty")))))
        tmp[242876]
      }
      label _breakLabel[242880]
    }
    Forall[243048] {
      induction variables:
        
        unknown task[242915] "index var" "insert auto destroy"
      iterated expressions:
        (242918 call . state c"smallTasks")
      shadow variables:
        A[242923] 'ref' intent
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        { scopeless
          const size[242929] "const"(242931 call . task c"size")
          (242935 'end of statement')
        }
        { scopeless
          const taskEnd[242937] "const"(242938 call -(242940 call +(242943 call . task c"start") size) 1)
          (242949 'end of statement')
        }
        if(242971 call _cond_test debug)
        {
          (242952 call writef "doing small task %i %i A=%\?\n"(242957 call . task c"start") taskEnd(242962 call A(242968 call chpl_build_bounded_range(242964 call . task c"start") taskEnd)))
        }
        if(242998 call _cond_test(242992 call !(242995 call . task c"inA")))
        {
          (242980 call(242977 call . ShallowCopy c"shallowCopy") A(242983 call . task c"start") Scratch(242988 call . task c"start") size)
        }
        if(243042 call _cond_test(243039 call . task c"doSort"))
        {
          (243004 call msbRadixSort A(243006 call :(243009 call . task c"start")(243013 call . A c"idxType"))(243016 call : taskEnd(243020 call . A c"idxType")) criterion(243025 call . task c"startbit")(243029 call . state c"endbit")(settings =(243032 'new'(243034 call MSBRadixSortSettings(alwaysSerial = 1)))))
        }
      }
    }
    if(243089 call _cond_test debug)
    {
      (243053 call writef "ps %i %i A=%\?\n" start_n end_n(243060 call A(243063 call chpl_build_bounded_range start_n end_n)))
      (243066 call writef "ps %i %i Scratch=%\?\n" start_n end_n(243073 call Scratch(243076 call chpl_build_bounded_range start_n end_n)))
      (243082 call(243079 call . RadixSortHelp c"checkSorted") start_n end_n A criterion startbit)
    }
  }
  { scopeless type
    void[4]
  }
}