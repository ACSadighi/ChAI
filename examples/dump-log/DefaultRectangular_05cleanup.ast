AST dump for DefaultRectangular after pass cleanup.
Module use list: 

{
  (287580 'import' HaltWrappers)
  const dataParTasksPerLocale[287582] "config" "const" "@unstable" 0
  (287585 'end of statement')
  const dataParIgnoreRunningTasks[287587] "config" "const" "@unstable" 0
  (287590 'end of statement')
  const dataParMinGranularity[287592] "config" "const" "@unstable" 1 int[10]
  (287596 'end of statement')
  if(287607 call _cond_test(287603 call < dataParTasksPerLocale 0))
  {
    (287598 call halt "dataParTasksPerLocale must be >= 0")
  }
  if(287622 call _cond_test(287618 call <= dataParMinGranularity 0))
  {
    (287613 call halt "dataParMinGranularity must be > 0")
  }
  (287628 'use' DSIUtil)
  (287631 'use' ChapelArray)
  (287638 'use' ChapelDistribution)
  (287640 'use' ChapelRange)
  (287641 'use' OS)
  (287642 'use' CTypes)
  (287643 'use' CTypes)
  (287648 'use' ChapelDebugPrint)
  (287650 'use' ChapelLocks)
  (287651 'use' OwnedObject)
  (287652 'use' IO)
  (287655 'use' DefaultSparse)
  (287657 'use' DefaultAssociative)
  (287659 'use' ExternalArray)
  unknown debugDefaultDist[287662] "config" "param" 0
  (287665 'end of statement')
  unknown debugDefaultDistBulkTransfer[287667] "config" "param" 0
  (287670 'end of statement')
  unknown debugDataPar[287672] "config" "param" 0
  (287675 'end of statement')
  unknown debugDataParNuma[287677] "config" "param" 0
  (287680 'end of statement')
  unknown disableArrRealloc[287682] "config" "param" 0
  (287685 'end of statement')
  unknown reportInPlaceRealloc[287687] "config" "param" 0
  (287690 'end of statement')
  unknown parallelAssignThreshold[287692] "config" "param"(287693 call *(287695 call * 2 1024) 1024)
  (287701 'end of statement')
  unknown enableParallelGetsInAssignment[287703] "config" "param" 0
  (287706 'end of statement')
  unknown enableParallelPutsInAssignment[287708] "config" "param" 0
  (287711 'end of statement')
  unknown defaultDoRADOpt[287713] "config" "param" 1
  (287716 'end of statement')
  unknown defaultDisableLazyRADOpt[287718] "config" "param" 0
  (287721 'end of statement')
  unknown earlyShiftData[287723] "config" "param" 1
  (287726 'end of statement')
  unknown usePollyArrayIndex[287728] "config" "param" 0
  (287731 'end of statement')
  unknown defaultRectangularSupportsAutoLocalAccess[287733] "config" "param" 1
  (287736 'end of statement')
  type ArrayStorageOrder[287742] def RMO[287738]:ArrayStorageOrder[287742] def CMO[287740]:ArrayStorageOrder[287742]
  unknown defaultStorageOrder[287746] "config" "param"(287750 call . ArrayStorageOrder c"RMO")
  (287754 'end of statement')
  unknown storageOrder[287756] "param" defaultStorageOrder
  (287759 'end of statement')
  function polly_array_index[287760](arg arguments[287764] ... :
  int[10]) : _unknown[42] "lineno ok" "llvm readnone"
  {
    unknown rank[287771] "param"(287772 call /(287774 call -(287777 call . arguments c"size") 1) 2)
    (287783 'end of statement')
    unknown blkStart[287785] "param" 2
    (287788 'end of statement')
    unknown blkEnd[287790] "param"(287791 call -(287793 call + 2 rank) 1)
    (287799 'end of statement')
    unknown indStart[287801] "param"(287802 call + blkEnd 1)
    (287807 'end of statement')
    unknown indEnd[287809] "param"(287810 call -(287812 call + indStart rank) 1)
    (287818 'end of statement')
    unknown offset[287820](287822 call arguments 0)
    (287825 'end of statement')
    unknown blk[287827](287828 call * rank int[10])
    (287833 'end of statement')
    unknown ind[287835](287836 call * rank int[10])
    (287841 'end of statement')
    (287842 call =(287845 call blk(287846 call - rank 1)) 1)
    {
      unknown i[287851] "index var" 0
      unknown tmp[287885] "maybe param" "temp"
      (287896 'move' tmp[287885](287894 call chpl_compute_low_param_loop_bound 0(287856 call - rank 2)))
      unknown tmp[287886] "maybe param" "temp"
      (287906 'move' tmp[287886](287904 call chpl_compute_high_param_loop_bound 0(287901 call - rank 2)))
      unknown tmp[287887] "maybe param" "temp"
      (287909 'move' tmp[287887](287862 call - 1))
      ParamForLoop[287911]
      { i[287851] tmp[287885] tmp[287886] tmp[287887]
        (287865 call =(287868 call blk i)(287870 call *(287873 call blk(287874 call + i 1))(287879 call arguments(287880 call + blkStart i))))
      }
      label _unused_continueLabel[287889]
      label _breakLabel[287888]
    }
    {
      unknown j[287920] "index var" 0
      unknown tmp[287944] "maybe param" "temp"
      (287956 'move' tmp[287944](287954 call chpl_compute_low_param_loop_bound 0(287923 call - rank 1)))
      unknown tmp[287945] "maybe param" "temp"
      (287966 'move' tmp[287945](287964 call chpl_compute_high_param_loop_bound 0(287961 call - rank 1)))
      unknown tmp[287946] "maybe param" "temp"
      (287969 'move' tmp[287946] 1)
      ParamForLoop[287971]
      { j[287920] tmp[287944] tmp[287945] tmp[287946]
        {
          (287930 call =(287933 call ind j)(287936 call arguments(287937 call -(287939 call + indStart j) 1)))
        }
      }
      label _unused_continueLabel[287948]
      label _breakLabel[287947]
    }
    unknown ret[287981] offset int[10]
    (287985 'end of statement')
    {
      unknown i[287986] "index var" 0
      unknown tmp[288007] "maybe param" "temp"
      (288019 'move' tmp[288007](288017 call chpl_compute_low_param_loop_bound 0(287989 call - rank 1)))
      unknown tmp[288008] "maybe param" "temp"
      (288029 'move' tmp[288008](288027 call chpl_compute_high_param_loop_bound 0(288024 call - rank 1)))
      unknown tmp[288009] "maybe param" "temp"
      (288032 'move' tmp[288009] 1)
      ParamForLoop[288034]
      { i[287986] tmp[288007] tmp[288008] tmp[288009]
        {
          (287996 call += ret(287999 call *(288002 call ind i)(288005 call blk i)))
        }
      }
      label _unused_continueLabel[288011]
      label _breakLabel[288010]
    }
    (288043 return ret)
  }
  { scopeless type
    int[10]
  }
  function DefaultDist[288284].dsiNewRectangularDom[288050](arg _mt[288066]:_MT[201], arg this[288052]:DefaultDist[288284], param arg rank[288055] :
  int[10], arg idxType[288058]:_any[141](?), param arg strides[288061] :
  strideKind, arg inds[288064]:_any[141](?)) : _unknown[42] "method" "primary method" "method overrides"
  {
    const dom[288070] "const"(288071 'new'(_chpl_manager = unmanaged[183](?))(288075 call DefaultRectangularDom rank idxType strides(288080 call _to_unmanaged this)))
    (288083 'end of statement')
    (288088 call(288085 call . dom c"dsiSetIndices") inds)
    (288090 return dom)
  }
  function DefaultDist[288284].dsiNewAssociativeDom[288094](arg _mt[288104]:_MT[201], arg this[288096]:DefaultDist[288284], arg idxType[288098]:_any[141](?), param arg parSafe[288101] :
  bool) : _unknown[42] "method" "primary method" "method overrides"
  {
    (288107 return(288108 'new'(_chpl_manager = unmanaged[183](?))(288112 call DefaultAssociativeDom idxType parSafe(288116 call _to_unmanaged this))))
  }
  function DefaultDist[288284].dsiNewSparseDom[288120](arg _mt[288134]:_MT[201], arg this[288122]:DefaultDist[288284], param arg rank[288125] :
  int[10], arg idxType[288128]:_any[141](?), arg dom[288131] :
  _domain) : _unknown[42] "method" "primary method" "method overrides"
  {
    (288137 return(288138 'new'(_chpl_manager = unmanaged[183](?))(288142 call DefaultSparseDom rank idxType(288146 call _to_unmanaged this) dom)))
  }
  function DefaultDist[288284].dsiTargetLocales[288151](arg _mt[288155]:_MT[201], arg this[288153]:DefaultDist[288284]) const ref : _unknown[42] "method" "primary method"
  {
    (288158 return(288160 call chpl_getSingletonLocaleArray(288163 call chpl_localeID_to_locale(288162 '_wide_get_locale' this))))
  }
  function DefaultDist[288284].dsiIndexToLocale[288167](arg _mt[288173]:_MT[201], arg this[288169]:DefaultDist[288284], arg ind[288171]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    (288176 return(288179 call chpl_localeID_to_locale(288178 '_wide_get_locale' this)))
  }
  function DefaultDist[288284].dsiClone[288183](arg _mt[288187]:_MT[201], arg this[288185]:DefaultDist[288284]) : _unknown[42] "method" "primary method"
  {
    (288190 return(288192 call _to_unmanaged this))
  }
  function DefaultDist[288284].dsiAssign[288196](arg _mt[288205]:_MT[201], arg this[288198]:DefaultDist[288284], arg other[288202] :
  (288201 'typeof' this)) : _unknown[42] "method" "primary method" "no return value for void"
  {
  }
  function DefaultDist[288284].dsiEqualDMaps[288210](arg _mt[288219]:_MT[201], arg this[288212]:DefaultDist[288284], arg d[288216] :
  (288214 'to unmanaged class from unknown' DefaultDist)) param : _unknown[42] "method" "primary method"
  {
    (288222 return 1)
  }
  function DefaultDist[288284].dsiEqualDMaps[288226](arg _mt[288232]:_MT[201], arg this[288228]:DefaultDist[288284], arg d[288230]:_any[141](?)) param : _unknown[42] "method" "primary method"
  {
    (288235 return 0)
  }
  function DefaultDist[288284].trackDomains[288239](arg _mt[288243]:_MT[201], arg this[288241]:DefaultDist[288284]) param : _unknown[42] "method" "primary method" "method overrides"
  {
    (288246 return 0)
  }
  function DefaultDist[288284].dsiTrackDomains[288250](arg _mt[288254]:_MT[201], arg this[288252]:DefaultDist[288284]) : _unknown[42] "method" "primary method" "method overrides"
  {
    (288257 return 0)
  }
  function DefaultDist[288284].singleton[288261](arg _mt[288265]:_MT[201], arg this[288263]:DefaultDist[288284]) param : _unknown[42] "method" "primary method" "method overrides"
  {
    (288268 return 1)
  }
  function DefaultDist[288284].dsiIsLayout[288272](arg _mt[288276]:_MT[201], arg this[288274]:DefaultDist[288284]) param : _unknown[42] "method" "primary method" "method overrides"
  {
    (288279 return 1)
  }
  type DefaultDist[288284] BaseDist
  unknown defaultDist[288287] "locale private"(288288 'new'(288290 call dmap(288291 'new'(_chpl_manager = unmanaged[183](?))(288295 call DefaultDist))))
  (288297 'end of statement')
  function chpl_defaultDistInitPrivate[288298]() : _unknown[42] "no return value for void"
  {
    if(288332 call _cond_test(288325 call ==(288328 call . defaultDist c"_value") nil[32]))
    {
      const nd[288303] "const"(288304 'new'(288306 call dmap(288307 'new'(_chpl_manager = unmanaged[183](?))(288311 call DefaultDist))))
      (288313 'end of statement')
      (288314 'move' defaultDist(288317 call chpl__autoCopy(288322 call(288319 call . nd c"clone"))(definedConst = 0)))
    }
  }
  function DefaultRectangularDom[292740].linksDistribution[288361](arg _mt[288365]:_MT[201], arg this[288363]:DefaultRectangularDom[292740]) param : _unknown[42] "method" "primary method" "method overrides"
  {
    (288368 return 0)
  }
  function DefaultRectangularDom[292740].dsiLinksDistribution[288372](arg _mt[288376]:_MT[201], arg this[288374]:DefaultRectangularDom[292740]) : _unknown[42] "method" "primary method" "method overrides"
  {
    (288379 return 0)
  }
  function DefaultRectangularDom[292740].isDefaultRectangular[288383](arg _mt[288387]:_MT[201], arg this[288385]:DefaultRectangularDom[292740]) param : _unknown[42] "method" "primary method" "method overrides"
  {
    (288390 return 1)
  }
  function DefaultRectangularDom[292740].isDefaultRectangular[288394](arg _mt[288398]:_MT[201], arg this[288396]:DefaultRectangularDom[292740]) param : _unknown[42] "method" "primary method" "method overrides"
  {
    (288401 return 1)
  }
  function DefaultRectangularDom[292740].init[288405](arg _mt[288417]:_MT[201], arg this[288407]:DefaultRectangularDom[292740], param arg rank[288409]:_any[141](?), arg idxType[288411]:_any[141](?), param arg strides[288413]:_any[141](?), arg dist[288415]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (288424 call(288421 call . super c"init") rank idxType strides)
    (288428 call =(288431 call . this c"dist") dist)
  }
  function DefaultRectangularDom[292740].chpl_integralIdxType[288437](arg _mt[288441]:_MT[201], arg this[288439]:DefaultRectangularDom[292740]) type : _unknown[42] "method" "primary method" "no parens"
  {
    (288444 return(288446 call chpl__idxTypeToIntIdxType idxType))
  }
  function DefaultRectangularDom[292740].dsiMyDist[288450](arg _mt[288454]:_MT[201], arg this[288452]:DefaultRectangularDom[292740]) : _unknown[42] "method" "primary method" "method overrides"
  {
    (288457 return dist)
  }
  function DefaultRectangularDom[292740].chpl__serialize[288484](arg _mt[288488]:_MT[201], arg this[288486]:DefaultRectangularDom[292740]) : _unknown[42] "method" "primary method"
  {
    (288491 return(288492 'new'(288494 call _serialized_domain rank idxType strides(288499 call dsiDims) 1)))
  }
  function DefaultRectangularDom[292740].chpl__deserialize[288503](arg _mt[288509]:_MT[201], arg this[288505]:DefaultRectangularDom[292740], arg data[288507]:_any[141](?)) : _unknown[42] "method" "primary method"
  {
    (288512 return(288517 call(288514 call . defaultDist c"newRectangularDom")(288519 call . data c"rank")(288523 call . data c"idxType")(288527 call . data c"strides")(288531 call . data c"dims")))
  }
  function DefaultRectangularDom[292740].dsiDisplayRepresentation[288536](arg _mt[288540]:_MT[201], arg this[288538]:DefaultRectangularDom[292740]) : _unknown[42] "method" "primary method" "method overrides" "no return value for void"
  {
    (288544 call writeln "ranges = " ranges)
  }
  function DefaultRectangularDom[292740].dsiGetIndices[288551](arg _mt[288555]:_MT[201], arg this[288553]:DefaultRectangularDom[292740]) : _unknown[42] "method" "primary method"
  {
    (288558 return ranges)
  }
  function DefaultRectangularDom[292740].dsiSetIndices[288562](arg _mt[288568]:_MT[201], arg this[288564]:DefaultRectangularDom[292740], arg x[288566]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (288571 call = ranges x)
  }
  function DefaultRectangularDom[292740].dsiAssignDomain[288577](arg _mt[288589]:_MT[201], arg this[288579]:DefaultRectangularDom[292740], arg rhs[288582] :
  _domain, arg lhsPrivate[288586] :
  bool) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (288593 call chpl_assignDomainWithGetSetIndices this rhs)
  }
  function DefaultRectangularDom[292740].these_help[288598](arg _mt[288606]:_MT[201], arg this[288600]:DefaultRectangularDom[292740], param arg d[288603] :
  int[10]) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(288849 call _cond_test(288842 call == d(288845 call - rank 1)))
    {
      {
        unknown _indexOfInterest[288620] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[288621] "expr temp" "temp"
        (288630 'move' _iterator[288621](288628 call _getIterator(288613 call ranges d)))
        Defer
        {
          {
            (288645 call _freeIterator _iterator[288621])
          }
        }
        { scopeless type
          (288635 'move' _indexOfInterest[288620](288632 call iteratorIndex _iterator[288621]))
        }
        ForLoop[288622] order-independent
        {
          unknown i[288610] "index var" "insert auto destroy"
          (288640 'move' i[288610] _indexOfInterest[288620])
          (288615 yield i)
          label _continueLabel[288625]
          _indexOfInterest[288620]
          _iterator[288621]
        }
        label _breakLabel[288626]
      }
    }
    {
      if(288838 call _cond_test(288831 call == d(288834 call - rank 2)))
      {
        {
          unknown _indexOfInterest[288709] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[288710] "expr temp" "temp"
          (288719 'move' _iterator[288710](288717 call _getIterator(288656 call ranges d)))
          Defer
          {
            {
              (288734 call _freeIterator _iterator[288710])
            }
          }
          { scopeless type
            (288724 'move' _indexOfInterest[288709](288721 call iteratorIndex _iterator[288710]))
          }
          ForLoop[288711] order-independent
          {
            unknown i[288653] "index var" "insert auto destroy"
            (288729 'move' i[288653] _indexOfInterest[288709])
            {
              unknown _indexOfInterest[288675] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[288676] "expr temp" "temp"
              (288685 'move' _iterator[288676](288683 call _getIterator(288661 call these_help(288662 call - rank 1))))
              Defer
              {
                {
                  (288700 call _freeIterator _iterator[288676])
                }
              }
              { scopeless type
                (288690 'move' _indexOfInterest[288675](288687 call iteratorIndex _iterator[288676]))
              }
              ForLoop[288677] order-independent
              {
                unknown j[288658] "index var" "insert auto destroy"
                (288695 'move' j[288658] _indexOfInterest[288675])
                (288666 yield(288670 call _build_tuple i j))
                label _continueLabel[288680]
                _indexOfInterest[288675]
                _iterator[288676]
              }
              label _breakLabel[288681]
            }
            label _continueLabel[288714]
            _indexOfInterest[288709]
            _iterator[288710]
          }
          label _breakLabel[288715]
        }
      }
      {
        {
          unknown _indexOfInterest[288799] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[288800] "expr temp" "temp"
          (288809 'move' _iterator[288800](288807 call _getIterator(288745 call ranges d)))
          Defer
          {
            {
              (288824 call _freeIterator _iterator[288800])
            }
          }
          { scopeless type
            (288814 'move' _indexOfInterest[288799](288811 call iteratorIndex _iterator[288800]))
          }
          ForLoop[288801] order-independent
          {
            unknown i[288742] "index var" "insert auto destroy"
            (288819 'move' i[288742] _indexOfInterest[288799])
            {
              unknown _indexOfInterest[288765] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[288766] "expr temp" "temp"
              (288775 'move' _iterator[288766](288773 call _getIterator(288750 call these_help(288751 call + d 1))))
              Defer
              {
                {
                  (288790 call _freeIterator _iterator[288766])
                }
              }
              { scopeless type
                (288780 'move' _indexOfInterest[288765](288777 call iteratorIndex _iterator[288766]))
              }
              ForLoop[288767] order-independent
              {
                unknown j[288747] "index var" "insert auto destroy"
                (288785 'move' j[288747] _indexOfInterest[288765])
                (288755 yield(288760 call _build_tuple i(288759 'expand_tuple' j)))
                label _continueLabel[288770]
                _indexOfInterest[288765]
                _iterator[288766]
              }
              label _breakLabel[288771]
            }
            label _continueLabel[288804]
            _indexOfInterest[288799]
            _iterator[288800]
          }
          label _breakLabel[288805]
        }
      }
    }
  }
  function DefaultRectangularDom[292740].these_help[288856](arg _mt[288866]:_MT[201], arg this[288858]:DefaultRectangularDom[292740], param arg d[288861] :
  int[10], arg block[288864]:_any[141](?)) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(289120 call _cond_test(289110 call == d(289113 call -(289116 call . block c"size") 1)))
    {
      {
        unknown _indexOfInterest[288880] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[288881] "expr temp" "temp"
        (288890 'move' _iterator[288881](288888 call _getIterator(288873 call block d)))
        Defer
        {
          {
            (288905 call _freeIterator _iterator[288881])
          }
        }
        { scopeless type
          (288895 'move' _indexOfInterest[288880](288892 call iteratorIndex _iterator[288881]))
        }
        ForLoop[288882] order-independent
        {
          unknown i[288870] "index var" "insert auto destroy"
          (288900 'move' i[288870] _indexOfInterest[288880])
          (288875 yield i)
          label _continueLabel[288885]
          _indexOfInterest[288880]
          _iterator[288881]
        }
        label _breakLabel[288886]
      }
    }
    {
      if(289106 call _cond_test(289096 call == d(289099 call -(289102 call . block c"size") 2)))
      {
        {
          unknown _indexOfInterest[288973] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[288974] "expr temp" "temp"
          (288983 'move' _iterator[288974](288981 call _getIterator(288916 call block d)))
          Defer
          {
            {
              (288998 call _freeIterator _iterator[288974])
            }
          }
          { scopeless type
            (288988 'move' _indexOfInterest[288973](288985 call iteratorIndex _iterator[288974]))
          }
          ForLoop[288975] order-independent
          {
            unknown i[288913] "index var" "insert auto destroy"
            (288993 'move' i[288913] _indexOfInterest[288973])
            {
              unknown _indexOfInterest[288939] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[288940] "expr temp" "temp"
              (288949 'move' _iterator[288940](288947 call _getIterator(288921 call these_help(288922 call -(288925 call . block c"size") 1) block)))
              Defer
              {
                {
                  (288964 call _freeIterator _iterator[288940])
                }
              }
              { scopeless type
                (288954 'move' _indexOfInterest[288939](288951 call iteratorIndex _iterator[288940]))
              }
              ForLoop[288941] order-independent
              {
                unknown j[288918] "index var" "insert auto destroy"
                (288959 'move' j[288918] _indexOfInterest[288939])
                (288930 yield(288934 call _build_tuple i j))
                label _continueLabel[288944]
                _indexOfInterest[288939]
                _iterator[288940]
              }
              label _breakLabel[288945]
            }
            label _continueLabel[288978]
            _indexOfInterest[288973]
            _iterator[288974]
          }
          label _breakLabel[288979]
        }
      }
      {
        {
          unknown _indexOfInterest[289064] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[289065] "expr temp" "temp"
          (289074 'move' _iterator[289065](289072 call _getIterator(289009 call block d)))
          Defer
          {
            {
              (289089 call _freeIterator _iterator[289065])
            }
          }
          { scopeless type
            (289079 'move' _indexOfInterest[289064](289076 call iteratorIndex _iterator[289065]))
          }
          ForLoop[289066] order-independent
          {
            unknown i[289006] "index var" "insert auto destroy"
            (289084 'move' i[289006] _indexOfInterest[289064])
            {
              unknown _indexOfInterest[289030] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[289031] "expr temp" "temp"
              (289040 'move' _iterator[289031](289038 call _getIterator(289014 call these_help(289015 call + d 1) block)))
              Defer
              {
                {
                  (289055 call _freeIterator _iterator[289031])
                }
              }
              { scopeless type
                (289045 'move' _indexOfInterest[289030](289042 call iteratorIndex _iterator[289031]))
              }
              ForLoop[289032] order-independent
              {
                unknown j[289011] "index var" "insert auto destroy"
                (289050 'move' j[289011] _indexOfInterest[289030])
                (289020 yield(289025 call _build_tuple i(289024 'expand_tuple' j)))
                label _continueLabel[289035]
                _indexOfInterest[289030]
                _iterator[289031]
              }
              label _breakLabel[289036]
            }
            label _continueLabel[289069]
            _indexOfInterest[289064]
            _iterator[289065]
          }
          label _breakLabel[289070]
        }
      }
    }
  }
  function DefaultRectangularDom[292740].these[289127](arg _mt[289154]:_MT[201], arg this[289129]:DefaultRectangularDom[292740], arg tasksPerLocale[289132] =
  dataParTasksPerLocale, arg ignoreRunning[289136] =
  dataParIgnoreRunningTasks, arg minIndicesPerTask[289140] =
  dataParMinGranularity, arg offset[289151] =
  (289144 call createTuple rank chpl_integralIdxType(289147 call : 0 chpl_integralIdxType))) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(289243 call _cond_test(289239 call == rank 1))
    {
      {
        unknown _indexOfInterest[289166] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[289167] "expr temp" "temp"
        (289176 'move' _iterator[289167](289174 call _getIterator(289161 call ranges 0)))
        Defer
        {
          {
            (289191 call _freeIterator _iterator[289167])
          }
        }
        { scopeless type
          (289181 'move' _indexOfInterest[289166](289178 call iteratorIndex _iterator[289167]))
        }
        ForLoop[289168]
        {
          unknown i[289158] "index var" "insert auto destroy"
          (289186 'move' i[289158] _indexOfInterest[289166])
          (289163 yield i)
          label _continueLabel[289171]
          _indexOfInterest[289166]
          _iterator[289167]
        }
        label _breakLabel[289172]
      }
    }
    {
      {
        unknown _indexOfInterest[289207] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[289208] "expr temp" "temp"
        (289217 'move' _iterator[289208](289215 call _getIterator(289202 call these_help 0)))
        Defer
        {
          {
            (289232 call _freeIterator _iterator[289208])
          }
        }
        { scopeless type
          (289222 'move' _indexOfInterest[289207](289219 call iteratorIndex _iterator[289208]))
        }
        ForLoop[289209]
        {
          unknown i[289199] "index var" "insert auto destroy"
          (289227 'move' i[289199] _indexOfInterest[289207])
          (289204 yield i)
          label _continueLabel[289212]
          _indexOfInterest[289207]
          _iterator[289208]
        }
        label _breakLabel[289213]
      }
    }
  }
  function DefaultRectangularDom[292740].these[289249](arg _mt[289280]:_MT[201], arg this[289251]:DefaultRectangularDom[292740], param arg tag[289254] :
  iterKind, arg tasksPerLocale[289258] =
  dataParTasksPerLocale, arg ignoreRunning[289262] =
  dataParIgnoreRunningTasks, arg minIndicesPerTask[289266] =
  dataParMinGranularity, arg offset[289277] =
  (289270 call createTuple rank chpl_integralIdxType(289273 call : 0 chpl_integralIdxType))) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(289298 call _cond_test chpl__testParFlag)
    {
      (289291 call chpl__testPar "default rectangular domain standalone invoked on " ranges)
    }
    if(289310 call _cond_test debugDefaultDist)
    {
      (289304 call chpl_debug_writeln "*** In domain standalone code:")
    }
    const numTasks[289316] "const"(289326 IfExpr (289317 call == tasksPerLocale 0) then
    { scopeless
      (289322 call . here c"maxTaskPar")
    } else
    { scopeless
      tasksPerLocale
    } )
    (289330 'end of statement')
    if(289345 call _cond_test debugDefaultDist)
    {
      (289333 call chpl_debug_writeln "    numTasks=" numTasks " (" ignoreRunning "), minIndicesPerTask=" minIndicesPerTask)
    }
    const tmp[289369] "const" "temp"(289366 IfExpr (289354 'task_get_serial') then
    { scopeless
      (289358 call _build_tuple 1 0)
    } else
    { scopeless
      (289361 call _computeChunkStuff numTasks ignoreRunning minIndicesPerTask ranges)
    } )
    (289376 call _check_tuple_var_decl tmp[289369] 2)
    const numChunks[289350] "const"(289370 call tmp[289369] 0)
    const parDim[289352] "const"(289373 call tmp[289369] 1)
    (289381 'end of statement')
    if(289409 call _cond_test debugDefaultDist)
    {
      (289384 call chpl_debug_writeln "    numChunks=" numChunks " parDim=" parDim " ranges(" parDim ").size="(289406 call(289403 call .(289401 call ranges parDim) c"sizeAs") uint[86]))
    }
    if(289439 call _cond_test debugDataPar)
    {
      (289415 call chpl_debug_writeln "### numTasksPerLoc = " numTasks "\n" "### ignoreRunning = " ignoreRunning "\n" "### minIndicesPerTask = " minIndicesPerTask "\n" "### numChunks = " numChunks " (parDim = " parDim ")\n" "### nranges = " ranges)
    }
    if(289451 call _cond_test debugDefaultDist)
    {
      (289445 call chpl_debug_writeln "*** DI: ranges = " ranges)
    }
    {
      unknown tmpIter[391860] "expr temp" "maybe ref" "no copy" "temp"
      (391863 'move' tmpIter[391860](289457 call #(289460 call chpl_build_low_bounded_range 0) numChunks))
      unknown isBounded[392149] "maybe param" "temp"
      (392155 'move' isBounded[392149](392151 call chpl_supportsBoundedCoforall tmpIter[391860] 0))
      if isBounded[392149]
      {
        const _coforallCount[392018] "const" "end count" "temp"
        (392086 'move' _coforallCount[392018](392083 call _endCountAlloc 1))
        unknown numTasks[392019] "temp"
        (392070 'move' numTasks[392019](392066 call chpl_boundedCoforallSize tmpIter[391860] 0))
        (392061 call _upEndCount _coforallCount[392018] 1 numTasks[392019])
        (392058 call chpl_resetTaskSpawn numTasks[392019])
        unknown _indexOfInterest[392026] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[392027] "expr temp" "temp"
        (392036 'move' _iterator[392027](392034 call _getIterator tmpIter[391860]))
        Defer
        {
          {
            (392051 call _freeIterator _iterator[392027])
          }
        }
        { scopeless type
          (392041 'move' _indexOfInterest[392026](392038 call iteratorIndex _iterator[392027]))
        }
        ForLoop[392028]
        {
          unknown chunk[391867] "coforall index var" "index var" "insert auto destroy"
          (392046 'move' chunk[391867] _indexOfInterest[392026])
          {
            {
              const ranges[391871] "const"(391873 call . this c"ranges")
              (391877 'end of statement')
              const len[391879] "const"(391881 call *(391888 call(391883 call .(391885 call ranges parDim) c"sizeAs") uint[86])(391891 call :(391893 call abs(391895 call .(391897 call ranges parDim) c"stride")) uint[86]))
              (391902 'end of statement')
              const tmp[391904] "const" "temp"(391906 call _computeBlock len numChunks chunk(391911 call .(391913 call ranges parDim) c"_high")(391917 call .(391919 call ranges parDim) c"_low")(391923 call .(391925 call ranges parDim) c"_low"))
              (391930 call _check_tuple_var_decl tmp[391904] 2)
              const lo[391933] "const"(391935 call tmp[391904] 0)
              const hi[391938] "const"(391940 call tmp[391904] 1)
              (391943 'end of statement')
              unknown block[391945] ranges
              (391948 'end of statement')
              (391950 call =(391952 call .(391954 call block parDim) c"_low") lo)
              (391959 call =(391961 call .(391963 call block parDim) c"_high") hi)
              if(391968 call _cond_test debugDefaultDist)
              {
                (391972 call chpl_debug_writeln "*** DI[" chunk "]: block = " block)
              }
              {
                unknown _indexOfInterest[391979] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[391981] "expr temp" "temp"
                (391983 'move' _iterator[391981](391986 call _getIterator(391988 call these_help 0 block)))
                Defer
                {
                  {
                    (391993 call _freeIterator _iterator[391981])
                  }
                }
                { scopeless type
                  (391997 'move' _indexOfInterest[391979](392000 call iteratorIndex _iterator[391981]))
                }
                ForLoop[392002]
                {
                  unknown i[392005] "index var" "insert auto destroy"
                  (392007 'move' i[392005] _indexOfInterest[391979])
                  {
                    (392011 yield i)
                  }
                  label _continueLabel[392013]
                  _indexOfInterest[391979]
                  _iterator[391981]
                }
                label _breakLabel[392015]
              }
            }
            (392021 call _downEndCount _coforallCount[392018] nil[32])
            (392020 'coforall loop')
          }
          label _continueLabel[392031]
          _indexOfInterest[392026]
          _iterator[392027]
        }
        label _breakLabel[392032]
        Defer
        {
          {
            (392073 call _endCountFree _coforallCount[392018])
          }
        }
        (392078 call _waitEndCount _coforallCount[392018] 1 numTasks[392019])
      }
      {
        const _coforallCount[392090] "const" "end count" "temp"
        (392146 'move' _coforallCount[392090](392143 call _endCountAlloc 1))
        unknown _indexOfInterest[392098] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[392099] "expr temp" "temp"
        (392108 'move' _iterator[392099](392106 call _getIterator tmpIter[391860]))
        Defer
        {
          {
            (392123 call _freeIterator _iterator[392099])
          }
        }
        { scopeless type
          (392113 'move' _indexOfInterest[392098](392110 call iteratorIndex _iterator[392099]))
        }
        ForLoop[392100]
        {
          unknown chunk[289455] "coforall index var" "index var" "insert auto destroy"
          (392118 'move' chunk[289455] _indexOfInterest[392098])
          (392130 call _upEndCount _coforallCount[392090] 1)
          {
            {
              const ranges[289465] "const"(289467 call . this c"ranges")
              (289471 'end of statement')
              const len[289473] "const"(289474 call *(289482 call(289479 call .(289477 call ranges parDim) c"sizeAs") uint[86])(289484 call :(289487 call abs(289491 call .(289489 call ranges parDim) c"stride")) uint[86]))
              (289496 'end of statement')
              const tmp[289525] "const" "temp"(289503 call _computeBlock len numChunks chunk(289510 call .(289508 call ranges parDim) c"_high")(289516 call .(289514 call ranges parDim) c"_low")(289522 call .(289520 call ranges parDim) c"_low"))
              (289532 call _check_tuple_var_decl tmp[289525] 2)
              const lo[289498] "const"(289526 call tmp[289525] 0)
              const hi[289500] "const"(289529 call tmp[289525] 1)
              (289537 'end of statement')
              unknown block[289539] ranges
              (289542 'end of statement')
              (289543 call =(289548 call .(289546 call block parDim) c"_low") lo)
              (289552 call =(289557 call .(289555 call block parDim) c"_high") hi)
              if(289571 call _cond_test debugDefaultDist)
              {
                (289563 call chpl_debug_writeln "*** DI[" chunk "]: block = " block)
              }
              {
                unknown _indexOfInterest[289584] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[289585] "expr temp" "temp"
                (289594 'move' _iterator[289585](289592 call _getIterator(289578 call these_help 0 block)))
                Defer
                {
                  {
                    (289609 call _freeIterator _iterator[289585])
                  }
                }
                { scopeless type
                  (289599 'move' _indexOfInterest[289584](289596 call iteratorIndex _iterator[289585]))
                }
                ForLoop[289586]
                {
                  unknown i[289575] "index var" "insert auto destroy"
                  (289604 'move' i[289575] _indexOfInterest[289584])
                  {
                    (289582 yield i)
                  }
                  label _continueLabel[289589]
                  _indexOfInterest[289584]
                  _iterator[289585]
                }
                label _breakLabel[289590]
              }
            }
            (392093 call _downEndCount _coforallCount[392090] nil[32])
            (392092 'coforall loop')
          }
          label _continueLabel[392103]
          _indexOfInterest[392098]
          _iterator[392099]
        }
        label _breakLabel[392104]
        Defer
        {
          {
            (392134 call _endCountFree _coforallCount[392090])
          }
        }
        (392139 call _waitEndCount _coforallCount[392090] 1)
      }
    }
  }
  where {
    (289282 call == tag(289286 call . iterKind c"standalone"))
  }
  function DefaultRectangularDom[292740].these[289620](arg _mt[289651]:_MT[201], arg this[289622]:DefaultRectangularDom[292740], param arg tag[289625] :
  iterKind, arg tasksPerLocale[289629] =
  dataParTasksPerLocale, arg ignoreRunning[289633] =
  dataParIgnoreRunningTasks, arg minIndicesPerTask[289637] =
  dataParMinGranularity, arg offset[289648] =
  (289641 call createTuple rank chpl_integralIdxType(289644 call : 0 chpl_integralIdxType))) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    const numSublocs[289662] "const"(289667 call(289664 call . here c"_getChildCount"))
    (289669 'end of statement')
    if(290541 call _cond_test(290534 call && localeModelPartitionsIterationOnSublocales(290537 call != numSublocs 0)))
    {
      unknown dptpl[289672](289682 IfExpr (289673 call == tasksPerLocale 0) then
      { scopeless
        (289678 call . here c"maxTaskPar")
      } else
      { scopeless
        tasksPerLocale
      } )
      (289686 'end of statement')
      if(289721 call _cond_test(289718 call ! ignoreRunning))
      {
        const otherTasks[289689] "const"(289690 call -(289696 call(289693 call . here c"runningTasks")) 1)
        (289699 'end of statement')
        (289700 call = dptpl(289715 IfExpr (289703 call < otherTasks dptpl) then
        { scopeless
          (289707 call :(289709 call - dptpl otherTasks) int[10])
        } else
        { scopeless
          1
        } ))
      }
      const numSublocTasks[289726] "const"(289728 call min numSublocs dptpl)
      (289732 'end of statement')
      const tmp[289754] "const" "temp"(289751 IfExpr (289738 'task_get_serial') then
      { scopeless
        (289742 call _build_tuple 1 0)
      } else
      { scopeless
        (289745 call _computeChunkStuff numSublocTasks(ignoreRunning = 1) minIndicesPerTask ranges)
      } )
      (289761 call _check_tuple_var_decl tmp[289754] 2)
      const numChunks[289734] "const"(289755 call tmp[289754] 0)
      const parDim[289736] "const"(289758 call tmp[289754] 1)
      (289766 'end of statement')
      if(289790 call _cond_test debugDataParNuma)
      {
        (289769 call chpl_debug_writeln "### numSublocs = " numSublocs "\n" "### numTasksPerSubloc = " numSublocTasks "\n" "### ignoreRunning = " ignoreRunning "\n" "### minIndicesPerTask = " minIndicesPerTask "\n" "### numChunks = " numChunks " (parDim = " parDim ")\n" "### nranges = " ranges)
      }
      {
        unknown tmpIter[392473] "expr temp" "maybe ref" "no copy" "temp"
        (392476 'move' tmpIter[392473](289796 call #(289799 call chpl_build_low_bounded_range 0) numChunks))
        unknown isBounded[393323] "maybe param" "temp"
        (393329 'move' isBounded[393323](393325 call chpl_supportsBoundedCoforall tmpIter[392473] 0))
        if isBounded[393323]
        {
          const _coforallCount[393192] "const" "end count" "temp"
          (393260 'move' _coforallCount[393192](393257 call _endCountAlloc 1))
          unknown numTasks[393193] "temp"
          (393244 'move' numTasks[393193](393240 call chpl_boundedCoforallSize tmpIter[392473] 0))
          (393235 call _upEndCount _coforallCount[393192] 1 numTasks[393193])
          (393232 call chpl_resetTaskSpawn numTasks[393193])
          unknown _indexOfInterest[393200] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[393201] "expr temp" "temp"
          (393210 'move' _iterator[393201](393208 call _getIterator tmpIter[392473]))
          Defer
          {
            {
              (393225 call _freeIterator _iterator[393201])
            }
          }
          { scopeless type
            (393215 'move' _indexOfInterest[393200](393212 call iteratorIndex _iterator[393201]))
          }
          ForLoop[393202]
          {
            unknown chunk[392480] "coforall index var" "index var" "insert auto destroy"
            (393220 'move' chunk[392480] _indexOfInterest[393200])
            {
              {
                const tmp[392487] "const" "temp"
                (392489 'move' tmp[392487](392491 'deref'(392492 '_wide_get_locale'(392497 call(392494 call . here c"_getChild") chunk))))
                {
                  if(392501 call _cond_test debugDataParNuma)
                  {
                    if(392505 call _cond_test(392507 call != chunk(392510 call chpl_getSubloc)))
                    {
                      (392514 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk ", on "(392519 call chpl_getSubloc) ") ***")
                    }
                  }
                  const numSublocTasks[392524] "const"(392545 IfExpr (392526 call < chunk(392529 call % dptpl numChunks)) then
                  { scopeless
                    (392534 call +(392536 call / dptpl numChunks) 1)
                  } else
                  { scopeless
                    (392542 call / dptpl numChunks)
                  } )
                  (392547 'end of statement')
                  unknown locBlock[392549](392551 call * rank(392554 call range chpl_integralIdxType))
                  (392557 'end of statement')
                  {
                    unknown i[392559] "index var" 0
                    unknown tmp[392562] "maybe param" "temp"
                    (392564 'move' tmp[392562](392567 call chpl_compute_low_param_loop_bound 0(392570 call - rank 1)))
                    unknown tmp[392573] "maybe param" "temp"
                    (392575 'move' tmp[392573](392578 call chpl_compute_high_param_loop_bound 0(392581 call - rank 1)))
                    unknown tmp[392584] "maybe param" "temp"
                    (392586 'move' tmp[392584] 1)
                    ParamForLoop[392589]
                    { i[392559] tmp[392562] tmp[392573] tmp[392584]
                      (392597 call =(392599 call locBlock i)(392602 call #(392604 call chpl_build_low_bounded_range(392606 call offset i))(392614 call(392609 call .(392611 call ranges i) c"sizeAs") chpl_integralIdxType)))
                    }
                    label _unused_continueLabel[392616]
                    label _breakLabel[392618]
                  }
                  unknown followMe[392621] locBlock(392624 call * rank(392627 call range chpl_integralIdxType))
                  (392630 'end of statement')
                  const tmp[392632] "const" "temp"(392634 call _computeBlock(392641 call(392636 call .(392638 call locBlock parDim) c"sizeAs") chpl_integralIdxType) numChunks chunk(392646 call .(392648 call locBlock parDim) c"_high")(392652 call .(392654 call locBlock parDim) c"_low")(392658 call .(392660 call locBlock parDim) c"_low"))
                  (392665 call _check_tuple_var_decl tmp[392632] 2)
                  const lo[392668] "const"(392670 call tmp[392632] 0)
                  const hi[392673] "const"(392675 call tmp[392632] 1)
                  (392678 'end of statement')
                  (392680 call =(392682 call followMe parDim)(392685 call chpl_build_bounded_range lo hi))
                  const tmp[392689] "const" "temp"(392691 call _computeChunkStuff numSublocTasks(ignoreRunning = 1) minIndicesPerTask followMe)
                  (392699 call _check_tuple_var_decl tmp[392689] 2)
                  const numChunks2[392702] "const"(392704 call tmp[392689] 0)
                  const parDim2[392707] "const"(392709 call tmp[392689] 1)
                  (392712 'end of statement')
                  {
                    unknown tmpIter[392714] "expr temp" "maybe ref" "no copy" "temp"
                    (392716 'move' tmpIter[392714](392719 call #(392721 call chpl_build_low_bounded_range 0) numChunks2))
                    unknown isBounded[392724] "maybe param" "temp"
                    (392726 'move' isBounded[392724](392729 call chpl_supportsBoundedCoforall tmpIter[392714] 0))
                    if isBounded[392724]
                    {
                      const _coforallCount[392734] "const" "end count" "temp"
                      (392736 'move' _coforallCount[392734](392739 call _endCountAlloc 1))
                      unknown numTasks[392741] "temp"
                      (392743 'move' numTasks[392741](392746 call chpl_boundedCoforallSize tmpIter[392714] 0))
                      (392750 call _upEndCount _coforallCount[392734] 1 numTasks[392741])
                      (392755 call chpl_resetTaskSpawn numTasks[392741])
                      unknown _indexOfInterest[392757] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[392759] "expr temp" "temp"
                      (392761 'move' _iterator[392759](392764 call _getIterator tmpIter[392714]))
                      Defer
                      {
                        {
                          (392768 call _freeIterator _iterator[392759])
                        }
                      }
                      { scopeless type
                        (392772 'move' _indexOfInterest[392757](392775 call iteratorIndex _iterator[392759]))
                      }
                      ForLoop[392777]
                      {
                        unknown chunk2[392780] "coforall index var" "index var" "insert auto destroy"
                        (392782 'move' chunk2[392780] _indexOfInterest[392757])
                        {
                          {
                            unknown locBlock2[392789](392791 call * rank(392794 call range chpl_integralIdxType))
                            (392797 'end of statement')
                            {
                              unknown i[392799] "index var" 0
                              unknown tmp[392802] "maybe param" "temp"
                              (392804 'move' tmp[392802](392807 call chpl_compute_low_param_loop_bound 0(392810 call - rank 1)))
                              unknown tmp[392813] "maybe param" "temp"
                              (392815 'move' tmp[392813](392818 call chpl_compute_high_param_loop_bound 0(392821 call - rank 1)))
                              unknown tmp[392824] "maybe param" "temp"
                              (392826 'move' tmp[392824] 1)
                              ParamForLoop[392829]
                              { i[392799] tmp[392802] tmp[392813] tmp[392824]
                                (392837 call =(392839 call locBlock2 i)(392842 call chpl_build_bounded_range(392844 call .(392846 call followMe i) c"lowBound")(392850 call .(392852 call followMe i) c"highBound")))
                              }
                              label _unused_continueLabel[392855]
                              label _breakLabel[392857]
                            }
                            unknown followMe2[392860] locBlock2(392863 call * rank(392866 call range chpl_integralIdxType))
                            (392869 'end of statement')
                            const low[392872] "const"(392874 call .(392876 call locBlock2 parDim2) c"_low")
                            const high[392881] "const"(392883 call .(392885 call locBlock2 parDim2) c"_high")
                            (392889 'end of statement')
                            const tmp[392891] "const" "temp"(392893 call _computeBlock(392900 call(392895 call .(392897 call locBlock2 parDim2) c"sizeAs") chpl_integralIdxType) numChunks2 chunk2 high low low)
                            (392909 call _check_tuple_var_decl tmp[392891] 2)
                            const lo[392912] "const"(392914 call tmp[392891] 0)
                            const hi[392917] "const"(392919 call tmp[392891] 1)
                            (392922 'end of statement')
                            (392924 call =(392926 call followMe2 parDim2)(392929 call chpl_build_bounded_range lo hi))
                            if(392933 call _cond_test debugDataParNuma)
                            {
                              (392937 call chpl_debug_writeln "### chunk = " chunk "  chunk2 = " chunk2 "  " "followMe = " followMe "  followMe2 = " followMe2)
                            }
                            (392948 yield followMe2)
                          }
                          (392951 call _downEndCount _coforallCount[392734] nil[32])
                          (392786 'coforall loop')
                        }
                        label _continueLabel[392954]
                        _indexOfInterest[392757]
                        _iterator[392759]
                      }
                      label _breakLabel[392956]
                      Defer
                      {
                        {
                          (392960 call _endCountFree _coforallCount[392734])
                        }
                      }
                      (392964 call _waitEndCount _coforallCount[392734] 1 numTasks[392741])
                    }
                    {
                      const _coforallCount[392969] "const" "end count" "temp"
                      (392971 'move' _coforallCount[392969](392974 call _endCountAlloc 1))
                      unknown _indexOfInterest[392976] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[392978] "expr temp" "temp"
                      (392980 'move' _iterator[392978](392983 call _getIterator tmpIter[392714]))
                      Defer
                      {
                        {
                          (392987 call _freeIterator _iterator[392978])
                        }
                      }
                      { scopeless type
                        (392991 'move' _indexOfInterest[392976](392994 call iteratorIndex _iterator[392978]))
                      }
                      ForLoop[392996]
                      {
                        unknown chunk2[392999] "coforall index var" "index var" "insert auto destroy"
                        (393001 'move' chunk2[392999] _indexOfInterest[392976])
                        (393005 call _upEndCount _coforallCount[392969] 1)
                        {
                          {
                            unknown locBlock2[393012](393014 call * rank(393017 call range chpl_integralIdxType))
                            (393020 'end of statement')
                            {
                              unknown i[393022] "index var" 0
                              unknown tmp[393025] "maybe param" "temp"
                              (393027 'move' tmp[393025](393030 call chpl_compute_low_param_loop_bound 0(393033 call - rank 1)))
                              unknown tmp[393036] "maybe param" "temp"
                              (393038 'move' tmp[393036](393041 call chpl_compute_high_param_loop_bound 0(393044 call - rank 1)))
                              unknown tmp[393047] "maybe param" "temp"
                              (393049 'move' tmp[393047] 1)
                              ParamForLoop[393052]
                              { i[393022] tmp[393025] tmp[393036] tmp[393047]
                                (393060 call =(393062 call locBlock2 i)(393065 call chpl_build_bounded_range(393067 call .(393069 call followMe i) c"lowBound")(393073 call .(393075 call followMe i) c"highBound")))
                              }
                              label _unused_continueLabel[393078]
                              label _breakLabel[393080]
                            }
                            unknown followMe2[393083] locBlock2(393086 call * rank(393089 call range chpl_integralIdxType))
                            (393092 'end of statement')
                            const low[393095] "const"(393097 call .(393099 call locBlock2 parDim2) c"_low")
                            const high[393104] "const"(393106 call .(393108 call locBlock2 parDim2) c"_high")
                            (393112 'end of statement')
                            const tmp[393114] "const" "temp"(393116 call _computeBlock(393123 call(393118 call .(393120 call locBlock2 parDim2) c"sizeAs") chpl_integralIdxType) numChunks2 chunk2 high low low)
                            (393132 call _check_tuple_var_decl tmp[393114] 2)
                            const lo[393135] "const"(393137 call tmp[393114] 0)
                            const hi[393140] "const"(393142 call tmp[393114] 1)
                            (393145 'end of statement')
                            (393147 call =(393149 call followMe2 parDim2)(393152 call chpl_build_bounded_range lo hi))
                            if(393156 call _cond_test debugDataParNuma)
                            {
                              (393160 call chpl_debug_writeln "### chunk = " chunk "  chunk2 = " chunk2 "  " "followMe = " followMe "  followMe2 = " followMe2)
                            }
                            (393171 yield followMe2)
                          }
                          (393174 call _downEndCount _coforallCount[392969] nil[32])
                          (393009 'coforall loop')
                        }
                        label _continueLabel[393177]
                        _indexOfInterest[392976]
                        _iterator[392978]
                      }
                      label _breakLabel[393179]
                      Defer
                      {
                        {
                          (393183 call _endCountFree _coforallCount[392969])
                        }
                      }
                      (393187 call _waitEndCount _coforallCount[392969] 1)
                    }
                  }
                }
                (392484 'elided on block' 0 tmp[392487])
              }
              (393195 call _downEndCount _coforallCount[393192] nil[32])
              (393194 'coforall loop')
            }
            label _continueLabel[393205]
            _indexOfInterest[393200]
            _iterator[393201]
          }
          label _breakLabel[393206]
          Defer
          {
            {
              (393247 call _endCountFree _coforallCount[393192])
            }
          }
          (393252 call _waitEndCount _coforallCount[393192] 1 numTasks[393193])
        }
        {
          const _coforallCount[393264] "const" "end count" "temp"
          (393320 'move' _coforallCount[393264](393317 call _endCountAlloc 1))
          unknown _indexOfInterest[393272] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[393273] "expr temp" "temp"
          (393282 'move' _iterator[393273](393280 call _getIterator tmpIter[392473]))
          Defer
          {
            {
              (393297 call _freeIterator _iterator[393273])
            }
          }
          { scopeless type
            (393287 'move' _indexOfInterest[393272](393284 call iteratorIndex _iterator[393273]))
          }
          ForLoop[393274]
          {
            unknown chunk[289794] "coforall index var" "index var" "insert auto destroy"
            (393292 'move' chunk[289794] _indexOfInterest[393272])
            (393304 call _upEndCount _coforallCount[393264] 1)
            {
              {
                const tmp[290215] "const" "temp"
                (290216 'move' tmp[290215](290213 'deref'(290212 '_wide_get_locale'(289807 call(289804 call . here c"_getChild") chunk))))
                {
                  if(289831 call _cond_test debugDataParNuma)
                  {
                    if(289825 call _cond_test(289820 call != chunk(289824 call chpl_getSubloc)))
                    {
                      (289812 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk ", on "(289817 call chpl_getSubloc) ") ***")
                    }
                  }
                  const numSublocTasks[289836] "const"(289855 IfExpr (289837 call < chunk(289840 call % dptpl numChunks)) then
                  { scopeless
                    (289844 call +(289846 call / dptpl numChunks) 1)
                  } else
                  { scopeless
                    (289851 call / dptpl numChunks)
                  } )
                  (289859 'end of statement')
                  unknown locBlock[289861](289862 call * rank(289866 call range chpl_integralIdxType))
                  (289869 'end of statement')
                  {
                    unknown i[289870] "index var" 0
                    unknown tmp[289900] "maybe param" "temp"
                    (289912 'move' tmp[289900](289910 call chpl_compute_low_param_loop_bound 0(289873 call - rank 1)))
                    unknown tmp[289901] "maybe param" "temp"
                    (289922 'move' tmp[289901](289920 call chpl_compute_high_param_loop_bound 0(289917 call - rank 1)))
                    unknown tmp[289902] "maybe param" "temp"
                    (289925 'move' tmp[289902] 1)
                    ParamForLoop[289927]
                    { i[289870] tmp[289900] tmp[289901] tmp[289902]
                      (289879 call =(289882 call locBlock i)(289884 call #(289889 call chpl_build_low_bounded_range(289887 call offset i))(289897 call(289894 call .(289892 call ranges i) c"sizeAs") chpl_integralIdxType)))
                    }
                    label _unused_continueLabel[289904]
                    label _breakLabel[289903]
                  }
                  unknown followMe[289937] locBlock(289938 call * rank(289942 call range chpl_integralIdxType))
                  (289946 'end of statement')
                  const tmp[289982] "const" "temp"(289953 call _computeBlock(289960 call(289957 call .(289955 call locBlock parDim) c"sizeAs") chpl_integralIdxType) numChunks chunk(289967 call .(289965 call locBlock parDim) c"_high")(289973 call .(289971 call locBlock parDim) c"_low")(289979 call .(289977 call locBlock parDim) c"_low"))
                  (289989 call _check_tuple_var_decl tmp[289982] 2)
                  const lo[289948] "const"(289983 call tmp[289982] 0)
                  const hi[289950] "const"(289986 call tmp[289982] 1)
                  (289994 'end of statement')
                  (289995 call =(289998 call followMe parDim)(290002 call chpl_build_bounded_range lo hi))
                  const tmp[290016] "const" "temp"(290010 call _computeChunkStuff numSublocTasks(ignoreRunning = 1) minIndicesPerTask followMe)
                  (290023 call _check_tuple_var_decl tmp[290016] 2)
                  const numChunks2[290005] "const"(290017 call tmp[290016] 0)
                  const parDim2[290007] "const"(290020 call tmp[290016] 1)
                  (290028 'end of statement')
                  {
                    unknown tmpIter[392159] "expr temp" "maybe ref" "no copy" "temp"
                    (392162 'move' tmpIter[392159](290031 call #(290034 call chpl_build_low_bounded_range 0) numChunks2))
                    unknown isBounded[392463] "maybe param" "temp"
                    (392469 'move' isBounded[392463](392465 call chpl_supportsBoundedCoforall tmpIter[392159] 0))
                    if isBounded[392463]
                    {
                      const _coforallCount[392332] "const" "end count" "temp"
                      (392400 'move' _coforallCount[392332](392397 call _endCountAlloc 1))
                      unknown numTasks[392333] "temp"
                      (392384 'move' numTasks[392333](392380 call chpl_boundedCoforallSize tmpIter[392159] 0))
                      (392375 call _upEndCount _coforallCount[392332] 1 numTasks[392333])
                      (392372 call chpl_resetTaskSpawn numTasks[392333])
                      unknown _indexOfInterest[392340] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[392341] "expr temp" "temp"
                      (392350 'move' _iterator[392341](392348 call _getIterator tmpIter[392159]))
                      Defer
                      {
                        {
                          (392365 call _freeIterator _iterator[392341])
                        }
                      }
                      { scopeless type
                        (392355 'move' _indexOfInterest[392340](392352 call iteratorIndex _iterator[392341]))
                      }
                      ForLoop[392342]
                      {
                        unknown chunk2[392166] "coforall index var" "index var" "insert auto destroy"
                        (392360 'move' chunk2[392166] _indexOfInterest[392340])
                        {
                          {
                            unknown locBlock2[392170](392172 call * rank(392175 call range chpl_integralIdxType))
                            (392178 'end of statement')
                            {
                              unknown i[392180] "index var" 0
                              unknown tmp[392183] "maybe param" "temp"
                              (392185 'move' tmp[392183](392188 call chpl_compute_low_param_loop_bound 0(392191 call - rank 1)))
                              unknown tmp[392194] "maybe param" "temp"
                              (392196 'move' tmp[392194](392199 call chpl_compute_high_param_loop_bound 0(392202 call - rank 1)))
                              unknown tmp[392205] "maybe param" "temp"
                              (392207 'move' tmp[392205] 1)
                              ParamForLoop[392210]
                              { i[392180] tmp[392183] tmp[392194] tmp[392205]
                                (392218 call =(392220 call locBlock2 i)(392223 call chpl_build_bounded_range(392225 call .(392227 call followMe i) c"lowBound")(392231 call .(392233 call followMe i) c"highBound")))
                              }
                              label _unused_continueLabel[392236]
                              label _breakLabel[392238]
                            }
                            unknown followMe2[392241] locBlock2(392244 call * rank(392247 call range chpl_integralIdxType))
                            (392250 'end of statement')
                            const low[392253] "const"(392255 call .(392257 call locBlock2 parDim2) c"_low")
                            const high[392262] "const"(392264 call .(392266 call locBlock2 parDim2) c"_high")
                            (392270 'end of statement')
                            const tmp[392272] "const" "temp"(392274 call _computeBlock(392281 call(392276 call .(392278 call locBlock2 parDim2) c"sizeAs") chpl_integralIdxType) numChunks2 chunk2 high low low)
                            (392290 call _check_tuple_var_decl tmp[392272] 2)
                            const lo[392293] "const"(392295 call tmp[392272] 0)
                            const hi[392298] "const"(392300 call tmp[392272] 1)
                            (392303 'end of statement')
                            (392305 call =(392307 call followMe2 parDim2)(392310 call chpl_build_bounded_range lo hi))
                            if(392314 call _cond_test debugDataParNuma)
                            {
                              (392318 call chpl_debug_writeln "### chunk = " chunk "  chunk2 = " chunk2 "  " "followMe = " followMe "  followMe2 = " followMe2)
                            }
                            (392329 yield followMe2)
                          }
                          (392335 call _downEndCount _coforallCount[392332] nil[32])
                          (392334 'coforall loop')
                        }
                        label _continueLabel[392345]
                        _indexOfInterest[392340]
                        _iterator[392341]
                      }
                      label _breakLabel[392346]
                      Defer
                      {
                        {
                          (392387 call _endCountFree _coforallCount[392332])
                        }
                      }
                      (392392 call _waitEndCount _coforallCount[392332] 1 numTasks[392333])
                    }
                    {
                      const _coforallCount[392404] "const" "end count" "temp"
                      (392460 'move' _coforallCount[392404](392457 call _endCountAlloc 1))
                      unknown _indexOfInterest[392412] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[392413] "expr temp" "temp"
                      (392422 'move' _iterator[392413](392420 call _getIterator tmpIter[392159]))
                      Defer
                      {
                        {
                          (392437 call _freeIterator _iterator[392413])
                        }
                      }
                      { scopeless type
                        (392427 'move' _indexOfInterest[392412](392424 call iteratorIndex _iterator[392413]))
                      }
                      ForLoop[392414]
                      {
                        unknown chunk2[290029] "coforall index var" "index var" "insert auto destroy"
                        (392432 'move' chunk2[290029] _indexOfInterest[392412])
                        (392444 call _upEndCount _coforallCount[392404] 1)
                        {
                          {
                            unknown locBlock2[290039](290040 call * rank(290044 call range chpl_integralIdxType))
                            (290047 'end of statement')
                            {
                              unknown i[290048] "index var" 0
                              unknown tmp[290077] "maybe param" "temp"
                              (290089 'move' tmp[290077](290087 call chpl_compute_low_param_loop_bound 0(290051 call - rank 1)))
                              unknown tmp[290078] "maybe param" "temp"
                              (290099 'move' tmp[290078](290097 call chpl_compute_high_param_loop_bound 0(290094 call - rank 1)))
                              unknown tmp[290079] "maybe param" "temp"
                              (290102 'move' tmp[290079] 1)
                              ParamForLoop[290104]
                              { i[290048] tmp[290077] tmp[290078] tmp[290079]
                                (290057 call =(290060 call locBlock2 i)(290074 call chpl_build_bounded_range(290065 call .(290063 call followMe i) c"lowBound")(290071 call .(290069 call followMe i) c"highBound")))
                              }
                              label _unused_continueLabel[290081]
                              label _breakLabel[290080]
                            }
                            unknown followMe2[290114] locBlock2(290115 call * rank(290119 call range chpl_integralIdxType))
                            (290123 'end of statement')
                            const low[290135] "const"(290139 call .(290137 call locBlock2 parDim2) c"_low")
                            const high[290126] "const"(290130 call .(290128 call locBlock2 parDim2) c"_high")
                            (290143 'end of statement')
                            const tmp[290164] "const" "temp"(290150 call _computeBlock(290157 call(290154 call .(290152 call locBlock2 parDim2) c"sizeAs") chpl_integralIdxType) numChunks2 chunk2 high low low)
                            (290171 call _check_tuple_var_decl tmp[290164] 2)
                            const lo[290145] "const"(290165 call tmp[290164] 0)
                            const hi[290147] "const"(290168 call tmp[290164] 1)
                            (290176 'end of statement')
                            (290177 call =(290180 call followMe2 parDim2)(290184 call chpl_build_bounded_range lo hi))
                            if(290205 call _cond_test debugDataParNuma)
                            {
                              (290188 call chpl_debug_writeln "### chunk = " chunk "  chunk2 = " chunk2 "  " "followMe = " followMe "  followMe2 = " followMe2)
                            }
                            (290209 yield followMe2)
                          }
                          (392407 call _downEndCount _coforallCount[392404] nil[32])
                          (392406 'coforall loop')
                        }
                        label _continueLabel[392417]
                        _indexOfInterest[392412]
                        _iterator[392413]
                      }
                      label _breakLabel[392418]
                      Defer
                      {
                        {
                          (392448 call _endCountFree _coforallCount[392404])
                        }
                      }
                      (392453 call _waitEndCount _coforallCount[392404] 1)
                    }
                  }
                }
                (290219 'elided on block' 0 tmp[290215])
              }
              (393267 call _downEndCount _coforallCount[393264] nil[32])
              (393266 'coforall loop')
            }
            label _continueLabel[393277]
            _indexOfInterest[393272]
            _iterator[393273]
          }
          label _breakLabel[393278]
          Defer
          {
            {
              (393308 call _endCountFree _coforallCount[393264])
            }
          }
          (393313 call _waitEndCount _coforallCount[393264] 1)
        }
      }
    }
    {
      if(290233 call _cond_test debugDefaultDist)
      {
        (290227 call chpl_debug_writeln "*** In domain/array leader code:")
      }
      const numTasks[290239] "const"(290249 IfExpr (290240 call == tasksPerLocale 0) then
      { scopeless
        (290245 call . here c"maxTaskPar")
      } else
      { scopeless
        tasksPerLocale
      } )
      (290253 'end of statement')
      if(290264 call _cond_test debugDefaultDist)
      {
        (290255 call chpl_debug_writeln "    numTasks=" numTasks " (" ignoreRunning "), minIndicesPerTask=" minIndicesPerTask)
      }
      const tmp[290289] "const" "temp"(290286 IfExpr (290274 'task_get_serial') then
      { scopeless
        (290278 call _build_tuple 1 0)
      } else
      { scopeless
        (290281 call _computeChunkStuff numTasks ignoreRunning minIndicesPerTask ranges)
      } )
      (290296 call _check_tuple_var_decl tmp[290289] 2)
      const numChunks[290270] "const"(290290 call tmp[290289] 0)
      const parDim[290272] "const"(290293 call tmp[290289] 1)
      (290301 'end of statement')
      if(290321 call _cond_test debugDefaultDist)
      {
        (290303 call chpl_debug_writeln "    numChunks=" numChunks " parDim=" parDim " ranges(" parDim ").size="(290317 call(290314 call .(290312 call ranges parDim) c"sizeAs") uint[86]))
      }
      if(290346 call _cond_test debugDataPar)
      {
        (290328 call chpl_debug_writeln "### numTasksPerLoc = " numTasks "\n" "### ignoreRunning = " ignoreRunning "\n" "### minIndicesPerTask = " minIndicesPerTask "\n" "### numChunks = " numChunks " (parDim = " parDim ")\n" "### nranges = " ranges)
      }
      unknown locBlock[290351](290352 call * rank(290356 call range chpl_integralIdxType))
      (290359 'end of statement')
      {
        unknown i[290360] "index var" 0
        unknown tmp[290390] "maybe param" "temp"
        (290402 'move' tmp[290390](290400 call chpl_compute_low_param_loop_bound 0(290363 call - rank 1)))
        unknown tmp[290391] "maybe param" "temp"
        (290412 'move' tmp[290391](290410 call chpl_compute_high_param_loop_bound 0(290407 call - rank 1)))
        unknown tmp[290392] "maybe param" "temp"
        (290415 'move' tmp[290392] 1)
        ParamForLoop[290417]
        { i[290360] tmp[290390] tmp[290391] tmp[290392]
          (290369 call =(290372 call locBlock i)(290374 call #(290379 call chpl_build_low_bounded_range(290377 call offset i))(290387 call(290384 call .(290382 call ranges i) c"sizeAs") chpl_integralIdxType)))
        }
        label _unused_continueLabel[290394]
        label _breakLabel[290393]
      }
      if(290434 call _cond_test debugDefaultDist)
      {
        (290427 call chpl_debug_writeln "*** DI: locBlock = " locBlock)
      }
      {
        unknown tmpIter[393333] "expr temp" "maybe ref" "no copy" "temp"
        (393336 'move' tmpIter[393333](290441 call #(290444 call chpl_build_low_bounded_range 0) numChunks))
        unknown isBounded[393557] "maybe param" "temp"
        (393563 'move' isBounded[393557](393559 call chpl_supportsBoundedCoforall tmpIter[393333] 0))
        if isBounded[393557]
        {
          const _coforallCount[393426] "const" "end count" "temp"
          (393494 'move' _coforallCount[393426](393491 call _endCountAlloc 1))
          unknown numTasks[393427] "temp"
          (393478 'move' numTasks[393427](393474 call chpl_boundedCoforallSize tmpIter[393333] 0))
          (393469 call _upEndCount _coforallCount[393426] 1 numTasks[393427])
          (393466 call chpl_resetTaskSpawn numTasks[393427])
          unknown _indexOfInterest[393434] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[393435] "expr temp" "temp"
          (393444 'move' _iterator[393435](393442 call _getIterator tmpIter[393333]))
          Defer
          {
            {
              (393459 call _freeIterator _iterator[393435])
            }
          }
          { scopeless type
            (393449 'move' _indexOfInterest[393434](393446 call iteratorIndex _iterator[393435]))
          }
          ForLoop[393436]
          {
            unknown chunk[393340] "coforall index var" "index var" "insert auto destroy"
            (393454 'move' chunk[393340] _indexOfInterest[393434])
            {
              {
                unknown followMe[393344] locBlock(393347 call * rank(393350 call range chpl_integralIdxType))
                (393353 'end of statement')
                const tmp[393355] "const" "temp"(393357 call _computeBlock(393364 call(393359 call .(393361 call locBlock parDim) c"sizeAs") chpl_integralIdxType) numChunks chunk(393369 call .(393371 call locBlock parDim) c"_high")(393375 call .(393377 call locBlock parDim) c"_low")(393381 call .(393383 call locBlock parDim) c"_low"))
                (393388 call _check_tuple_var_decl tmp[393355] 2)
                const lo[393391] "const"(393393 call tmp[393355] 0)
                const hi[393396] "const"(393398 call tmp[393355] 1)
                (393401 'end of statement')
                (393403 call =(393405 call followMe parDim)(393408 call chpl_build_bounded_range lo hi))
                if(393412 call _cond_test debugDefaultDist)
                {
                  (393417 call chpl_debug_writeln "*** DI[" chunk "]: followMe = " followMe)
                }
                (393423 yield followMe)
              }
              (393429 call _downEndCount _coforallCount[393426] nil[32])
              (393428 'coforall loop')
            }
            label _continueLabel[393439]
            _indexOfInterest[393434]
            _iterator[393435]
          }
          label _breakLabel[393440]
          Defer
          {
            {
              (393481 call _endCountFree _coforallCount[393426])
            }
          }
          (393486 call _waitEndCount _coforallCount[393426] 1 numTasks[393427])
        }
        {
          const _coforallCount[393498] "const" "end count" "temp"
          (393554 'move' _coforallCount[393498](393551 call _endCountAlloc 1))
          unknown _indexOfInterest[393506] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[393507] "expr temp" "temp"
          (393516 'move' _iterator[393507](393514 call _getIterator tmpIter[393333]))
          Defer
          {
            {
              (393531 call _freeIterator _iterator[393507])
            }
          }
          { scopeless type
            (393521 'move' _indexOfInterest[393506](393518 call iteratorIndex _iterator[393507]))
          }
          ForLoop[393508]
          {
            unknown chunk[290439] "coforall index var" "index var" "insert auto destroy"
            (393526 'move' chunk[290439] _indexOfInterest[393506])
            (393538 call _upEndCount _coforallCount[393498] 1)
            {
              {
                unknown followMe[290449] locBlock(290450 call * rank(290454 call range chpl_integralIdxType))
                (290458 'end of statement')
                const tmp[290494] "const" "temp"(290465 call _computeBlock(290472 call(290469 call .(290467 call locBlock parDim) c"sizeAs") chpl_integralIdxType) numChunks chunk(290479 call .(290477 call locBlock parDim) c"_high")(290485 call .(290483 call locBlock parDim) c"_low")(290491 call .(290489 call locBlock parDim) c"_low"))
                (290501 call _check_tuple_var_decl tmp[290494] 2)
                const lo[290460] "const"(290495 call tmp[290494] 0)
                const hi[290462] "const"(290498 call tmp[290494] 1)
                (290506 'end of statement')
                (290507 call =(290510 call followMe parDim)(290514 call chpl_build_bounded_range lo hi))
                if(290526 call _cond_test debugDefaultDist)
                {
                  (290517 call chpl_debug_writeln "*** DI[" chunk "]: followMe = " followMe)
                }
                (290531 yield followMe)
              }
              (393501 call _downEndCount _coforallCount[393498] nil[32])
              (393500 'coforall loop')
            }
            label _continueLabel[393511]
            _indexOfInterest[393506]
            _iterator[393507]
          }
          label _breakLabel[393512]
          Defer
          {
            {
              (393542 call _endCountFree _coforallCount[393498])
            }
          }
          (393547 call _waitEndCount _coforallCount[393498] 1)
        }
      }
    }
  }
  where {
    (289653 call == tag(289657 call . iterKind c"leader"))
  }
  function DefaultRectangularDom[292740].these[290548](arg _mt[290581]:_MT[201], arg this[290550]:DefaultRectangularDom[292740], param arg tag[290553] :
  iterKind, arg followThis[290556]:_any[141](?), arg tasksPerLocale[290559] =
  dataParTasksPerLocale, arg ignoreRunning[290563] =
  dataParIgnoreRunningTasks, arg minIndicesPerTask[290567] =
  dataParMinGranularity, arg offset[290578] =
  (290571 call createTuple rank chpl_integralIdxType(290574 call : 0 chpl_integralIdxType))) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(290633 call _cond_test(290623 call !=(290626 call . followThis c"size")(290630 call . this c"rank")))
    {
      (290592 call compilerError(290593 call +(290595 call +(290597 call +(290599 call + "rank mismatch in zippered iteration (can't zip a "(290602 call :(290605 call . followThis c"size") string[244])) "D expression with a ")(290612 call :(290615 call . this c"rank") string[244])) "D domain)"))
    }
    if(290646 call _cond_test chpl__testParFlag)
    {
      (290639 call chpl__testPar "default rectangular domain follower invoked on " followThis)
    }
    if(290659 call _cond_test debugDefaultDist)
    {
      (290652 call chpl_debug_writeln "In domain follower code: Following " followThis)
    }
    unknown newStrides[290665] "param"(290667 call chpl_strideProduct(290669 call . this c"strides")(290673 call chpl_strideUnion followThis))
    (290676 'end of statement')
    unknown block[290678](290679 call * rank(290683 call range(idxType = chpl_integralIdxType)(strides = newStrides)))
    (290689 'end of statement')
    if(290775 call _cond_test boundsChecking)
    {
      {
        unknown i[290690] "index var" 0
        unknown tmp[290738] "maybe param" "temp"
        (290750 'move' tmp[290738](290748 call chpl_compute_low_param_loop_bound 0(290693 call - rank 1)))
        unknown tmp[290739] "maybe param" "temp"
        (290760 'move' tmp[290739](290758 call chpl_compute_high_param_loop_bound 0(290755 call - rank 1)))
        unknown tmp[290740] "maybe param" "temp"
        (290763 'move' tmp[290740] 1)
        ParamForLoop[290765]
        { i[290690] tmp[290738] tmp[290739] tmp[290740]
          if(290733 call _cond_test(290717 call >=(290722 call .(290720 call followThis i) c"highBound")(290731 call(290728 call .(290726 call ranges i) c"sizeAs") uint[86])))
          {
            (290703 call(290700 call . HaltWrappers c"boundsCheckHalt")(290704 call +(290706 call + "size mismatch in zippered iteration (dimension "(290711 call : i string[244])) ")"))
          }
        }
        label _unused_continueLabel[290742]
        label _breakLabel[290741]
      }
    }
    if(291265 call _cond_test(291258 call !(291264 call(291261 call . newStrides c"isPosNegOne"))))
    {
      unknown strType[290782] "type variable"(290784 call chpl__signedType chpl_integralIdxType)
      {
        unknown i[290787] "index var" 0
        unknown tmp[290983] "maybe param" "temp"
        (290995 'move' tmp[290983](290993 call chpl_compute_low_param_loop_bound 0(290790 call - rank 1)))
        unknown tmp[290984] "maybe param" "temp"
        (291005 'move' tmp[290984](291003 call chpl_compute_high_param_loop_bound 0(291000 call - rank 1)))
        unknown tmp[290985] "maybe param" "temp"
        (291008 'move' tmp[290985] 1)
        ParamForLoop[291010]
        { i[290787] tmp[290983] tmp[290984] tmp[290985]
          {
            const rStride[290798] "const"(290802 call .(290800 call ranges i) c"stride")
            (290806 'end of statement')
            const rSignedStride[290821] "const"(290822 call : rStride strType)
            const fSignedStride[290809] "const"(290810 call :(290815 call .(290813 call followThis i) c"stride") strType)
            (290827 'end of statement')
            if(290979 call _cond_test(290978 call(290975 call .(290973 call ranges i) c"hasPositiveStride")))
            {
              const riStride[290830] "const"(290831 call : rStride chpl_integralIdxType)
              (290836 'end of statement')
              const low[290869] "const"(290870 call +(290875 call .(290873 call ranges i) c"alignedLowAsInt")(290878 call *(290883 call .(290881 call followThis i) c"lowBound") riStride))
              const high[290849] "const"(290850 call +(290855 call .(290853 call ranges i) c"alignedLowAsInt")(290858 call *(290863 call .(290861 call followThis i) c"highBound") riStride))
              const stride[290839] "const"(290840 call :(290842 call * rSignedStride fSignedStride) strType)
              (290888 'end of statement')
              (290895 call(290892 call .(290890 call block i) c"chpl_setFields") low high stride)
            }
            {
              const irStride[290901] "const"(290902 call :(290904 call - rStride) chpl_integralIdxType)
              (290909 'end of statement')
              const low[290942] "const"(290943 call -(290948 call .(290946 call ranges i) c"alignedHighAsInt")(290951 call *(290956 call .(290954 call followThis i) c"highBound") irStride))
              const high[290922] "const"(290923 call -(290928 call .(290926 call ranges i) c"alignedHighAsInt")(290931 call *(290936 call .(290934 call followThis i) c"lowBound") irStride))
              const stride[290912] "const"(290913 call :(290915 call * rSignedStride fSignedStride) strType)
              (290961 'end of statement')
              (290968 call(290965 call .(290963 call block i) c"chpl_setFields") low high stride)
            }
          }
        }
        label _unused_continueLabel[290987]
        label _breakLabel[290986]
      }
    }
    {
      unknown strType[291021] "type variable"(291023 call chpl__signedType chpl_integralIdxType)
      {
        unknown i[291026] "index var" 0
        unknown tmp[291222] "maybe param" "temp"
        (291234 'move' tmp[291222](291232 call chpl_compute_low_param_loop_bound 0(291029 call - rank 1)))
        unknown tmp[291223] "maybe param" "temp"
        (291244 'move' tmp[291223](291242 call chpl_compute_high_param_loop_bound 0(291239 call - rank 1)))
        unknown tmp[291224] "maybe param" "temp"
        (291247 'move' tmp[291224] 1)
        ParamForLoop[291249]
        { i[291026] tmp[291222] tmp[291223] tmp[291224]
          {
            unknown rStride[291037] "param"(291041 call .(291039 call ranges i) c"stride")
            (291045 'end of statement')
            unknown rSignedStride[291060] "param"(291061 call : rStride strType)
            unknown fSignedStride[291048] "param"(291049 call :(291054 call .(291052 call followThis i) c"stride") strType)
            (291066 'end of statement')
            if(291218 call _cond_test(291217 call(291214 call .(291212 call ranges i) c"hasPositiveStride")))
            {
              unknown riStride[291069] "param"(291070 call : rStride chpl_integralIdxType)
              (291075 'end of statement')
              const low[291098] "const"(291099 call +(291104 call .(291102 call ranges i) c"alignedLowAsInt")(291107 call *(291112 call .(291110 call followThis i) c"lowBound") riStride))
              const high[291078] "const"(291079 call +(291084 call .(291082 call ranges i) c"alignedLowAsInt")(291087 call *(291092 call .(291090 call followThis i) c"highBound") riStride))
              (291117 'end of statement')
              unknown stride[291119] "param"(291120 call :(291122 call * rSignedStride fSignedStride) strType)
              (291128 'end of statement')
              (291135 call(291132 call .(291130 call block i) c"chpl_setFields") low high)
            }
            {
              unknown irStride[291140] "param"(291141 call :(291143 call - rStride) chpl_integralIdxType)
              (291148 'end of statement')
              const low[291171] "const"(291172 call -(291177 call .(291175 call ranges i) c"alignedHighAsInt")(291180 call *(291185 call .(291183 call followThis i) c"highBound") irStride))
              const high[291151] "const"(291152 call -(291157 call .(291155 call ranges i) c"alignedHighAsInt")(291160 call *(291165 call .(291163 call followThis i) c"lowBound") irStride))
              (291190 'end of statement')
              unknown stride[291192] "param"(291193 call :(291195 call * rSignedStride fSignedStride) strType)
              (291201 'end of statement')
              (291208 call(291205 call .(291203 call block i) c"chpl_setFields") low high)
            }
          }
        }
        label _unused_continueLabel[291226]
        label _breakLabel[291225]
      }
    }
    if(291364 call _cond_test(291360 call == rank 1))
    {
      {
        unknown _indexOfInterest[291283] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[291284] "expr temp" "temp"
        (291292 'move' _iterator[291284](291275 call _getIteratorZip block))
        Defer
        {
          {
            (291307 call _freeIterator _iterator[291284])
          }
        }
        { scopeless type
          (291297 'move' _indexOfInterest[291283](291294 call iteratorIndex _iterator[291284]))
        }
        ForLoop[291285] order-independent
        {
          unknown i[291270] "index var" "insert auto destroy"
          (291302 'move' i[291270] _indexOfInterest[291283])
          {
            (291277 yield(291279 call chpl_intToIdx i))
          }
          label _continueLabel[291288]
          _indexOfInterest[291283]
          _iterator[291284]
        }
        label _breakLabel[291289]
      }
    }
    {
      {
        unknown _indexOfInterest[291328] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[291329] "expr temp" "temp"
        (291338 'move' _iterator[291329](291336 call _getIterator(291318 call these_help 0 block)))
        Defer
        {
          {
            (291353 call _freeIterator _iterator[291329])
          }
        }
        { scopeless type
          (291343 'move' _indexOfInterest[291328](291340 call iteratorIndex _iterator[291329]))
        }
        ForLoop[291330] order-independent
        {
          unknown i[291315] "index var" "insert auto destroy"
          (291348 'move' i[291315] _indexOfInterest[291328])
          {
            (291322 yield(291324 call chpl_intToIdx i))
          }
          label _continueLabel[291333]
          _indexOfInterest[291328]
          _iterator[291329]
        }
        label _breakLabel[291334]
      }
    }
  }
  where {
    (290583 call == tag(290587 call . iterKind c"follower"))
  }
  function DefaultRectangularDom[292740].dsiMember[291371](arg _mt[291382]:_MT[201], arg this[291373]:DefaultRectangularDom[292740], arg ind[291379] :
  (291375 call * rank idxType)) : _unknown[42] "method" "primary method"
  {
    {
      unknown i[291385] "index var" 0
      unknown tmp[291414] "maybe param" "temp"
      (291426 'move' tmp[291414](291424 call chpl_compute_low_param_loop_bound 0(291388 call - rank 1)))
      unknown tmp[291415] "maybe param" "temp"
      (291436 'move' tmp[291415](291434 call chpl_compute_high_param_loop_bound 0(291431 call - rank 1)))
      unknown tmp[291416] "maybe param" "temp"
      (291439 'move' tmp[291416] 1)
      ParamForLoop[291441]
      { i[291385] tmp[291414] tmp[291415] tmp[291416]
        if(291409 call _cond_test(291397 call !(291405 call(291402 call .(291400 call ranges i) c"contains")(291407 call ind i))))
        {
          (291394 return 0)
        }
      }
      label _unused_continueLabel[291418]
      label _breakLabel[291417]
    }
    (291450 return 1)
  }
  function DefaultRectangularDom[292740].dsiIndexOrder[291454](arg _mt[291465]:_MT[201], arg this[291456]:DefaultRectangularDom[292740], arg ind[291462] :
  (291458 call * rank idxType)) : _unknown[42] "method" "primary method"
  {
    unknown totOrder[291469] int[10]
    (291472 'end of statement')
    unknown blk[291474] 1
    (291477 'end of statement')
    {
      unknown d[291478] "index var" 0
      unknown tmp[291542] "maybe param" "temp"
      (291553 'move' tmp[291542](291551 call chpl_compute_low_param_loop_bound 0(291483 call - rank 1)))
      unknown tmp[291543] "maybe param" "temp"
      (291563 'move' tmp[291543](291561 call chpl_compute_high_param_loop_bound 0(291558 call - rank 1)))
      unknown tmp[291544] "maybe param" "temp"
      (291566 'move' tmp[291544](291489 call - 1))
      ParamForLoop[291568]
      { d[291478] tmp[291542] tmp[291543] tmp[291544]
        {
          const orderD[291494] "const"(291501 call(291498 call .(291496 call ranges d) c"indexOrder")(291503 call ind d))
          (291506 'end of statement')
          if(291519 call _cond_test(291510 call == orderD(291513 call :(291515 call - 1) chpl_integralIdxType)))
          {
            (291507 return orderD)
          }
          (291524 call += totOrder(291527 call * orderD blk))
          (291531 call *= blk(291540 call(291537 call .(291535 call ranges d) c"sizeAs") int[10]))
        }
      }
      label _unused_continueLabel[291546]
      label _breakLabel[291545]
    }
    (291577 return totOrder)
  }
  function DefaultRectangularDom[292740].dsiDims[291581](arg _mt[291585]:_MT[201], arg this[291583]:DefaultRectangularDom[292740]) : _unknown[42] "method" "primary method"
  {
    (291588 return ranges)
  }
  function DefaultRectangularDom[292740].dsiDim[291592](arg _mt[291600]:_MT[201], arg this[291594]:DefaultRectangularDom[292740], arg d[291597] :
  int[10]) : _unknown[42] "method" "primary method"
  {
    (291603 return(291605 call ranges d))
  }
  function DefaultRectangularDom[292740].dsiDim[291609](arg _mt[291617]:_MT[201], arg this[291611]:DefaultRectangularDom[292740], param arg d[291614] :
  int[10]) : _unknown[42] "method" "primary method"
  {
    (291620 return(291622 call ranges d))
  }
  function DefaultRectangularDom[292740].dsiNumIndices[291626](arg _mt[291630]:_MT[201], arg this[291628]:DefaultRectangularDom[292740]) : _unknown[42] "method" "primary method" "no parens"
  {
    unknown sum[291634] 1
    (291637 'end of statement')
    {
      unknown i[291638] "index var" 0
      unknown tmp[291659] "maybe param" "temp"
      (291671 'move' tmp[291659](291669 call chpl_compute_low_param_loop_bound 0(291641 call - rank 1)))
      unknown tmp[291660] "maybe param" "temp"
      (291681 'move' tmp[291660](291679 call chpl_compute_high_param_loop_bound 0(291676 call - rank 1)))
      unknown tmp[291661] "maybe param" "temp"
      (291684 'move' tmp[291661] 1)
      ParamForLoop[291686]
      { i[291638] tmp[291659] tmp[291660] tmp[291661]
        (291647 call *= sum(291656 call(291653 call .(291651 call ranges i) c"sizeAs") int[10]))
      }
      label _unused_continueLabel[291663]
      label _breakLabel[291662]
    }
    (291695 return sum)
  }
  function DefaultRectangularDom[292740].parSafe[291699](arg _mt[291703]:_MT[201], arg this[291701]:DefaultRectangularDom[292740]) param : _unknown[42] "method" "primary method" "no parens" "no return value for void"
  {
    (291707 call dnsError "parSafe")
  }
  function DefaultRectangularDom[292740].dsiLow[291711](arg _mt[291715]:_MT[201], arg this[291713]:DefaultRectangularDom[292740]) : _unknown[42] "method" "primary method" "no parens" "method overrides"
  {
    if(291798 call _cond_test(291794 call == rank 1))
    {
      (291719 return(291723 call .(291721 call ranges 0) c"lowBound"))
    }
    {
      unknown result[291728](291729 call * rank idxType)
      (291734 'end of statement')
      {
        unknown i[291735] "index var" 0
        unknown tmp[291756] "maybe param" "temp"
        (291768 'move' tmp[291756](291766 call chpl_compute_low_param_loop_bound 0(291738 call - rank 1)))
        unknown tmp[291757] "maybe param" "temp"
        (291778 'move' tmp[291757](291776 call chpl_compute_high_param_loop_bound 0(291773 call - rank 1)))
        unknown tmp[291758] "maybe param" "temp"
        (291781 'move' tmp[291758] 1)
        ParamForLoop[291783]
        { i[291735] tmp[291756] tmp[291757] tmp[291758]
          (291744 call =(291747 call result i)(291752 call .(291750 call ranges i) c"lowBound"))
        }
        label _unused_continueLabel[291760]
        label _breakLabel[291759]
      }
      (291792 return result)
    }
  }
  function DefaultRectangularDom[292740].dsiHigh[291804](arg _mt[291808]:_MT[201], arg this[291806]:DefaultRectangularDom[292740]) : _unknown[42] "method" "primary method" "no parens" "method overrides"
  {
    if(291891 call _cond_test(291887 call == rank 1))
    {
      (291812 return(291816 call .(291814 call ranges 0) c"highBound"))
    }
    {
      unknown result[291821](291822 call * rank idxType)
      (291827 'end of statement')
      {
        unknown i[291828] "index var" 0
        unknown tmp[291849] "maybe param" "temp"
        (291861 'move' tmp[291849](291859 call chpl_compute_low_param_loop_bound 0(291831 call - rank 1)))
        unknown tmp[291850] "maybe param" "temp"
        (291871 'move' tmp[291850](291869 call chpl_compute_high_param_loop_bound 0(291866 call - rank 1)))
        unknown tmp[291851] "maybe param" "temp"
        (291874 'move' tmp[291851] 1)
        ParamForLoop[291876]
        { i[291828] tmp[291849] tmp[291850] tmp[291851]
          (291837 call =(291840 call result i)(291845 call .(291843 call ranges i) c"highBound"))
        }
        label _unused_continueLabel[291853]
        label _breakLabel[291852]
      }
      (291885 return result)
    }
  }
  function DefaultRectangularDom[292740].dsiAlignedLow[291897](arg _mt[291901]:_MT[201], arg this[291899]:DefaultRectangularDom[292740]) : _unknown[42] "method" "primary method" "no parens" "method overrides"
  {
    if(291984 call _cond_test(291980 call == rank 1))
    {
      (291905 return(291909 call .(291907 call ranges 0) c"low"))
    }
    {
      unknown result[291914](291915 call * rank idxType)
      (291920 'end of statement')
      {
        unknown i[291921] "index var" 0
        unknown tmp[291942] "maybe param" "temp"
        (291954 'move' tmp[291942](291952 call chpl_compute_low_param_loop_bound 0(291924 call - rank 1)))
        unknown tmp[291943] "maybe param" "temp"
        (291964 'move' tmp[291943](291962 call chpl_compute_high_param_loop_bound 0(291959 call - rank 1)))
        unknown tmp[291944] "maybe param" "temp"
        (291967 'move' tmp[291944] 1)
        ParamForLoop[291969]
        { i[291921] tmp[291942] tmp[291943] tmp[291944]
          (291930 call =(291933 call result i)(291938 call .(291936 call ranges i) c"low"))
        }
        label _unused_continueLabel[291946]
        label _breakLabel[291945]
      }
      (291978 return result)
    }
  }
  function DefaultRectangularDom[292740].dsiAlignedHigh[291990](arg _mt[291994]:_MT[201], arg this[291992]:DefaultRectangularDom[292740]) : _unknown[42] "method" "primary method" "no parens" "method overrides"
  {
    if(292077 call _cond_test(292073 call == rank 1))
    {
      (291998 return(292002 call .(292000 call ranges 0) c"high"))
    }
    {
      unknown result[292007](292008 call * rank idxType)
      (292013 'end of statement')
      {
        unknown i[292014] "index var" 0
        unknown tmp[292035] "maybe param" "temp"
        (292047 'move' tmp[292035](292045 call chpl_compute_low_param_loop_bound 0(292017 call - rank 1)))
        unknown tmp[292036] "maybe param" "temp"
        (292057 'move' tmp[292036](292055 call chpl_compute_high_param_loop_bound 0(292052 call - rank 1)))
        unknown tmp[292037] "maybe param" "temp"
        (292060 'move' tmp[292037] 1)
        ParamForLoop[292062]
        { i[292014] tmp[292035] tmp[292036] tmp[292037]
          (292023 call =(292026 call result i)(292031 call .(292029 call ranges i) c"high"))
        }
        label _unused_continueLabel[292039]
        label _breakLabel[292038]
      }
      (292071 return result)
    }
  }
  function DefaultRectangularDom[292740].dsiStride[292083](arg _mt[292087]:_MT[201], arg this[292085]:DefaultRectangularDom[292740]) : _unknown[42] "method" "primary method" "no parens" "method overrides"
  {
    if(292172 call _cond_test(292168 call == rank 1))
    {
      (292091 return(292095 call .(292093 call ranges 0) c"stride"))
    }
    {
      unknown result[292100](292101 call * rank(292105 call chpl__signedType chpl_integralIdxType))
      (292108 'end of statement')
      {
        unknown i[292109] "index var" 0
        unknown tmp[292130] "maybe param" "temp"
        (292142 'move' tmp[292130](292140 call chpl_compute_low_param_loop_bound 0(292112 call - rank 1)))
        unknown tmp[292131] "maybe param" "temp"
        (292152 'move' tmp[292131](292150 call chpl_compute_high_param_loop_bound 0(292147 call - rank 1)))
        unknown tmp[292132] "maybe param" "temp"
        (292155 'move' tmp[292132] 1)
        ParamForLoop[292157]
        { i[292109] tmp[292130] tmp[292131] tmp[292132]
          (292118 call =(292121 call result i)(292126 call .(292124 call ranges i) c"stride"))
        }
        label _unused_continueLabel[292134]
        label _breakLabel[292133]
      }
      (292166 return result)
    }
  }
  function DefaultRectangularDom[292740].dsiAlignment[292178](arg _mt[292182]:_MT[201], arg this[292180]:DefaultRectangularDom[292740]) : _unknown[42] "method" "primary method" "no parens" "method overrides"
  {
    if(292265 call _cond_test(292261 call == rank 1))
    {
      (292186 return(292190 call .(292188 call ranges 0) c"alignment"))
    }
    {
      unknown result[292195](292196 call * rank idxType)
      (292201 'end of statement')
      {
        unknown i[292202] "index var" 0
        unknown tmp[292223] "maybe param" "temp"
        (292235 'move' tmp[292223](292233 call chpl_compute_low_param_loop_bound 0(292205 call - rank 1)))
        unknown tmp[292224] "maybe param" "temp"
        (292245 'move' tmp[292224](292243 call chpl_compute_high_param_loop_bound 0(292240 call - rank 1)))
        unknown tmp[292225] "maybe param" "temp"
        (292248 'move' tmp[292225] 1)
        ParamForLoop[292250]
        { i[292202] tmp[292223] tmp[292224] tmp[292225]
          (292211 call =(292214 call result i)(292219 call .(292217 call ranges i) c"alignment"))
        }
        label _unused_continueLabel[292227]
        label _breakLabel[292226]
      }
      (292259 return result)
    }
  }
  function DefaultRectangularDom[292740].dsiFirst[292271](arg _mt[292275]:_MT[201], arg this[292273]:DefaultRectangularDom[292740]) : _unknown[42] "method" "primary method" "no parens" "method overrides"
  {
    if(292358 call _cond_test(292354 call == rank 1))
    {
      (292279 return(292283 call .(292281 call ranges 0) c"first"))
    }
    {
      unknown result[292288](292289 call * rank idxType)
      (292294 'end of statement')
      {
        unknown i[292295] "index var" 0
        unknown tmp[292316] "maybe param" "temp"
        (292328 'move' tmp[292316](292326 call chpl_compute_low_param_loop_bound 0(292298 call - rank 1)))
        unknown tmp[292317] "maybe param" "temp"
        (292338 'move' tmp[292317](292336 call chpl_compute_high_param_loop_bound 0(292333 call - rank 1)))
        unknown tmp[292318] "maybe param" "temp"
        (292341 'move' tmp[292318] 1)
        ParamForLoop[292343]
        { i[292295] tmp[292316] tmp[292317] tmp[292318]
          (292304 call =(292307 call result i)(292312 call .(292310 call ranges i) c"first"))
        }
        label _unused_continueLabel[292320]
        label _breakLabel[292319]
      }
      (292352 return result)
    }
  }
  function DefaultRectangularDom[292740].dsiLast[292364](arg _mt[292368]:_MT[201], arg this[292366]:DefaultRectangularDom[292740]) : _unknown[42] "method" "primary method" "no parens" "method overrides"
  {
    if(292451 call _cond_test(292447 call == rank 1))
    {
      (292372 return(292376 call .(292374 call ranges 0) c"last"))
    }
    {
      unknown result[292381](292382 call * rank idxType)
      (292387 'end of statement')
      {
        unknown i[292388] "index var" 0
        unknown tmp[292409] "maybe param" "temp"
        (292421 'move' tmp[292409](292419 call chpl_compute_low_param_loop_bound 0(292391 call - rank 1)))
        unknown tmp[292410] "maybe param" "temp"
        (292431 'move' tmp[292410](292429 call chpl_compute_high_param_loop_bound 0(292426 call - rank 1)))
        unknown tmp[292411] "maybe param" "temp"
        (292434 'move' tmp[292411] 1)
        ParamForLoop[292436]
        { i[292388] tmp[292409] tmp[292410] tmp[292411]
          (292397 call =(292400 call result i)(292405 call .(292403 call ranges i) c"last"))
        }
        label _unused_continueLabel[292413]
        label _breakLabel[292412]
      }
      (292445 return result)
    }
  }
  function DefaultRectangularDom[292740].dsiBuildArray[292457](arg _mt[292467]:_MT[201], arg this[292459]:DefaultRectangularDom[292740], arg eltType[292461]:_any[141](?), param arg initElts[292464] :
  bool) : _unknown[42] "method" "primary method"
  {
    (292470 return(292471 'new'(_chpl_manager = unmanaged[183](?))(292475 call DefaultRectangularArr(eltType = eltType)(rank = rank)(idxType = idxType)(strides = strides)(dom =(292485 call _to_unmanaged this))(initElts = initElts))))
  }
  function DefaultRectangularDom[292740].doiTryCreateArray[292492](arg _mt[292498]:_MT[201], arg this[292494]:DefaultRectangularDom[292740], arg eltType[292496]:_any[141](?)) : _unknown[42] throws "method" "primary method"
  {
    if(292513 call _cond_test(292509 call != rank 1))
    {
      (292501 'throw'(292502 'new'(292504 call Error "'tryCreateArray' is only supported on domains of rank 1")))
    }
    unknown data[292519](292521 call _try_ddata_allocate eltType(292526 call .(292524 call ranges 0) c"size"))
    (292530 'end of statement')
    (292531 return(292532 'new'(_chpl_manager = unmanaged[183](?))(292536 call DefaultRectangularArr(eltType = eltType)(rank = rank)(idxType = idxType)(strides = strides)(dom =(292546 call _to_unmanaged this))(data = data))))
  }
  function DefaultRectangularDom[292740].dsiBuildArrayWith[292553](arg _mt[292569]:_MT[201], arg this[292555]:DefaultRectangularDom[292740], arg eltType[292557]:_any[141](?), arg data[292562] :
  (292560 call _ddata eltType), arg allocSize[292566] :
  int[10]) : _unknown[42] "method" "primary method"
  {
    unknown allocRange[292573](292577 call #(292585 call chpl_build_low_bounded_range(292582 call .(292580 call ranges 0) c"lowBound")) allocSize)(292575 call range idxType)
    (292589 'end of statement')
    (292590 return(292591 'new'(_chpl_manager = unmanaged[183](?))(292595 call DefaultRectangularArr(eltType = eltType)(rank = rank)(idxType = idxType)(strides = strides)(initElts = 0)(deinitElts = 1)(dom =(292609 call _to_unmanaged this))(data = data))))
  }
  function DefaultRectangularDom[292740].dsiLocalSlice[292616](arg _mt[292622]:_MT[201], arg this[292618]:DefaultRectangularDom[292740], arg ranges[292620]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (292626 call halt "all dsiLocalSlice calls on DefaultRectangulars should be handled in ChapelArray.chpl")
  }
  function DefaultRectangularDom[292740].dsiTargetLocales[292632](arg _mt[292636]:_MT[201], arg this[292634]:DefaultRectangularDom[292740]) const ref : _unknown[42] "method" "primary method"
  {
    (292639 return(292641 call chpl_getSingletonLocaleArray(292644 call chpl_localeID_to_locale(292643 '_wide_get_locale' this))))
  }
  function DefaultRectangularDom[292740].dsiHasSingleLocalSubdomain[292648](arg _mt[292652]:_MT[201], arg this[292650]:DefaultRectangularDom[292740]) param : _unknown[42] "method" "primary method"
  {
    (292655 return 1)
  }
  function DefaultRectangularDom[292740].dsiLocalSubdomain[292659](arg _mt[292667]:_MT[201], arg this[292661]:DefaultRectangularDom[292740], arg loc[292664] :
  locale[234]) : _unknown[42] "method" "primary method"
  {
    if(292697 call _cond_test(292690 call ==(292694 call chpl_localeID_to_locale(292693 '_wide_get_locale' this)) loc))
    {
      (292671 return(292673 call _getDomain(292675 call _to_unmanaged this)))
    }
    {
      unknown a[292679](292681 call chpl__buildDomainRuntimeType defaultDist rank idxType strides)
      (292687 'end of statement')
      (292688 return a)
    }
  }
  function DefaultRectangularDom[292740].dsiLocalSubdomains[292703](arg _mt[292711]:_MT[201], arg this[292705]:DefaultRectangularDom[292740], arg loc[292708] :
  locale[234]) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    (292714 yield(292716 call dsiLocalSubdomain loc))
  }
  function DefaultRectangularDom[292740].chpl_intToIdx[292720](arg _mt[292726]:_MT[201], arg this[292722]:DefaultRectangularDom[292740], arg i[292724]:_any[141](?)) : _unknown[42] "inline" "method" "primary method"
  {
    (292729 return(292731 call chpl__intToIdx(292733 call . this c"idxType") i))
  }
  type DefaultRectangularDom[292740] unknown dist[288341](288342 'to unmanaged class from unknown' DefaultDist) unknown ranges[288347](288348 call * rank(288352 call range idxType(288355 call . boundKind c"both") strides)) type _serialized_domain[288482](?) unknown rank[288463] "param" unknown idxType[288467] "type variable" unknown strides[288470] "param" unknown dims[288474] unknown isDefaultRectangular[288478] "param" BaseRectangularDom
  function chpl__intToIdx[292742](arg idxType[292744]:_any[141](?), arg i[292747] :
  integral, arg j[292751]:_any[141](?) ...) : _unknown[42] "inline"
  {
    const first[292756] "const"(292758 call chpl__intToIdx idxType i)
    (292762 'end of statement')
    const rest[292764] "const"(292766 call chpl__intToIdx idxType(292769 'expand_tuple' j))
    (292771 'end of statement')
    (292772 return(292777 call _build_tuple first(292776 'expand_tuple' rest)))
  }
  function chpl__intToIdx[292781](arg idxType[292783]:_any[141](?), arg i[292786] :
  integral, arg j[292790] :
  integral) : _unknown[42] "inline"
  {
    (292794 return(292804 call _build_tuple(292797 call chpl__intToIdx idxType i)(292801 call chpl__intToIdx idxType j)))
  }
  function chpl__intToIdx[292808](arg idxType[292810]:_any[141](?), arg i[292813] :
  _tuple) : _unknown[42] "inline"
  {
    (292817 return(292819 call chpl__intToIdx idxType(292822 'expand_tuple' i)))
  }
  function _remoteAccessData[293000](?).hasUnitStride[292900](arg _mt[292904]:_MT[201], arg this[292902]:_remoteAccessData[293000](?)) param : _unknown[42] "method" "primary method"
  {
    (292907 return(292908 call == strides(292912 call . strideKind c"one")))
  }
  function _remoteAccessData[293000](?).theData[292917](arg _mt[292921]:_MT[201], ref arg this[292919]:_remoteAccessData[293000](?)) ref : _unknown[42] "inline" "method" "primary method" "no parens"
  {
    if(292934 call _cond_test(292930 call !(292933 call hasUnitStride)))
    {
      (292925 return data)
    }
    {
      (292928 return shiftedData)
    }
  }
  function _remoteAccessData[293000](?).getDataElem[292940](arg _mt[292946]:_MT[201], arg this[292942]:_remoteAccessData[293000](?), arg i[292944]:_any[141](?)) ref : _unknown[42] "inline" "method" "primary method"
  {
    if(292963 call _cond_test(292959 call !(292962 call hasUnitStride)))
    {
      (292950 return(292952 call dataElem i))
    }
    {
      (292955 return(292957 call shiftedDataElem i))
    }
  }
  function _remoteAccessData[293000](?).dataElem[292969](arg _mt[292975]:_MT[201], arg this[292971]:_remoteAccessData[293000](?), arg i[292973]:_any[141](?)) ref : _unknown[42] "inline" "method" "primary method"
  {
    (292978 return(292980 call data i))
  }
  function _remoteAccessData[293000](?).shiftedDataElem[292984](arg _mt[292990]:_MT[201], arg this[292986]:_remoteAccessData[293000](?), arg i[292988]:_any[141](?)) ref : _unknown[42] "inline" "method" "primary method"
  {
    (292993 return(292995 call shiftedData i))
  }
  type _remoteAccessData[293000](?) unknown eltType[292827] "type variable" unknown rank[292830] "param" int[10] unknown idxType[292835] "type variable" unknown strides[292838] "param" strideKind unknown blkChanged[292843] "param" 0 bool unknown off[292849](292850 call * rank idxType) unknown blk[292857](292858 call * rank int[10]) unknown str[292865](292866 call * rank(292870 call chpl__signedType(292872 call chpl__idxTypeToIntIdxType idxType))) unknown origin[292877] int[10] unknown factoredOffs[292882] int[10] unknown data[292887](292889 call _ddata eltType) unknown shiftedData[292894](292896 call _ddata eltType)
  function _unknown[42].getDataIndex[293002](arg _mt[293012]:_MT[201], arg this[293005] :
  _remoteAccessData, arg ind[293009] :
  idxType) : _unknown[42] "inline" "method"
  {
    (293015 return(293020 call(293017 call . this c"getDataIndex")(293022 call chpl__tuplify ind)))
  }
  function _unknown[42].getDataIndex[293026](arg _mt[293039]:_MT[201], arg this[293029] :
  _remoteAccessData, arg ind[293036] :
  (293032 call * rank idxType)) : _unknown[42] "inline" "method"
  {
    if(293432 call _cond_test(293428 call !(293431 call hasUnitStride)))
    {
      unknown sum[293044] origin
      (293047 'end of statement')
      {
        unknown i[293048] "index var" 0
        unknown tmp[293090] "maybe param" "temp"
        (293102 'move' tmp[293090](293100 call chpl_compute_low_param_loop_bound 0(293051 call - rank 1)))
        unknown tmp[293091] "maybe param" "temp"
        (293112 'move' tmp[293091](293110 call chpl_compute_high_param_loop_bound 0(293107 call - rank 1)))
        unknown tmp[293092] "maybe param" "temp"
        (293115 'move' tmp[293092] 1)
        ParamForLoop[293117]
        { i[293048] tmp[293090] tmp[293091] tmp[293092]
          (293057 call += sum(293060 call /(293062 call *(293079 call(293076 call .(293064 call -(293067 call chpl__idxToInt(293069 call ind i))(293072 call chpl__idxToInt(293074 call off i))) c"safeCast") int[10])(293082 call blk i))(293085 call abs(293087 call str i))))
        }
        label _unused_continueLabel[293094]
        label _breakLabel[293093]
      }
      (293126 return sum)
    }
    {
      if(293424 call _cond_test(293417 call &&(293419 call == rank 1) earlyShiftData))
      {
        if(293156 call _cond_test blkChanged)
        {
          (293131 return(293132 call *(293134 call :(293137 call chpl__idxToInt(293139 call ind 0)) int[10])(293143 call blk 0)))
        }
        {
          (293146 return(293147 call :(293150 call chpl__idxToInt(293152 call ind 0)) int[10]))
        }
      }
      {
        unknown sum[293162](293166 IfExpr  earlyShiftData then
        { scopeless
          0
        } else
        { scopeless
          origin
        } )
        (293170 'end of statement')
        if(293398 call _cond_test blkChanged)
        {
          {
            unknown i[293172] "index var" 0
            unknown tmp[293198] "maybe param" "temp"
            (293210 'move' tmp[293198](293208 call chpl_compute_low_param_loop_bound 0(293175 call - rank 1)))
            unknown tmp[293199] "maybe param" "temp"
            (293220 'move' tmp[293199](293218 call chpl_compute_high_param_loop_bound 0(293215 call - rank 1)))
            unknown tmp[293200] "maybe param" "temp"
            (293223 'move' tmp[293200] 1)
            ParamForLoop[293225]
            { i[293172] tmp[293198] tmp[293199] tmp[293200]
              {
                (293182 call += sum(293185 call *(293187 call :(293190 call chpl__idxToInt(293192 call ind i)) int[10])(293196 call blk i)))
              }
            }
            label _unused_continueLabel[293202]
            label _breakLabel[293201]
          }
        }
        {
          if(293393 call _cond_test(293386 call == storageOrder(293390 call . ArrayStorageOrder c"RMO")))
          {
            {
              unknown i[293236] "index var" 0
              unknown tmp[293262] "maybe param" "temp"
              (293274 'move' tmp[293262](293272 call chpl_compute_low_param_loop_bound 0(293239 call - rank 2)))
              unknown tmp[293263] "maybe param" "temp"
              (293284 'move' tmp[293263](293282 call chpl_compute_high_param_loop_bound 0(293279 call - rank 2)))
              unknown tmp[293264] "maybe param" "temp"
              (293287 'move' tmp[293264] 1)
              ParamForLoop[293289]
              { i[293236] tmp[293262] tmp[293263] tmp[293264]
                {
                  (293246 call += sum(293249 call *(293251 call :(293254 call chpl__idxToInt(293256 call ind i)) int[10])(293260 call blk i)))
                }
              }
              label _unused_continueLabel[293266]
              label _breakLabel[293265]
            }
            (293298 call += sum(293301 call :(293304 call chpl__idxToInt(293306 call ind(293307 call - rank 1))) int[10]))
          }
          {
            {
              unknown i[293313] "index var" 0
              unknown tmp[293339] "maybe param" "temp"
              (293351 'move' tmp[293339](293349 call chpl_compute_low_param_loop_bound 1(293316 call - rank 1)))
              unknown tmp[293340] "maybe param" "temp"
              (293361 'move' tmp[293340](293359 call chpl_compute_high_param_loop_bound 1(293356 call - rank 1)))
              unknown tmp[293341] "maybe param" "temp"
              (293364 'move' tmp[293341] 1)
              ParamForLoop[293366]
              { i[293313] tmp[293339] tmp[293340] tmp[293341]
                {
                  (293323 call += sum(293326 call *(293328 call :(293331 call chpl__idxToInt(293333 call ind i)) int[10])(293337 call blk i)))
                }
              }
              label _unused_continueLabel[293343]
              label _breakLabel[293342]
            }
            (293375 call += sum(293378 call :(293381 call chpl__idxToInt(293383 call ind 0)) int[10]))
          }
        }
        if(293410 call _cond_test(293407 call ! earlyShiftData))
        {
          (293402 call -= sum factoredOffs)
        }
        (293415 return sum)
      }
    }
  }
  function _unknown[42].computeFactoredOffs[293438](arg _mt[293444]:_MT[201], ref arg this[293441] :
  _remoteAccessData) : _unknown[42] "method" "no return value for void"
  {
    (293447 call = factoredOffs 0)
    {
      unknown i[293451] "index var" 0
      unknown tmp[293480] "maybe param" "temp"
      (293492 'move' tmp[293480](293490 call chpl_compute_low_param_loop_bound 0(293454 call - rank 1)))
      unknown tmp[293481] "maybe param" "temp"
      (293502 'move' tmp[293481](293500 call chpl_compute_high_param_loop_bound 0(293497 call - rank 1)))
      unknown tmp[293482] "maybe param" "temp"
      (293505 'move' tmp[293482] 1)
      ParamForLoop[293507]
      { i[293451] tmp[293480] tmp[293481] tmp[293482]
        {
          (293461 call = factoredOffs(293464 call + factoredOffs(293467 call *(293470 call blk i)(293472 call :(293475 call chpl__idxToInt(293477 call off i)) int[10]))))
        }
      }
      label _unused_continueLabel[293484]
      label _breakLabel[293483]
    }
  }
  function _unknown[42].initShiftedData[293518](arg _mt[293524]:_MT[201], ref arg this[293521] :
  _remoteAccessData) : _unknown[42] "method" "no return value for void"
  {
    if(293573 call _cond_test(293568 call && earlyShiftData(293572 call hasUnitStride)))
    {
      unknown idxSignedType[293529] "type variable"(293531 call chpl__signedType(293533 call chpl__idxTypeToIntIdxType idxType))
      const shiftDist[293537] "const"(293555 IfExpr (293539 call isIntType idxType) then
      { scopeless
        (293541 call - origin factoredOffs)
      } else
      { scopeless
        (293545 call -(293547 call : origin idxSignedType)(293551 call : factoredOffs idxSignedType))
      } )
      (293559 'end of statement')
      (293560 call = shiftedData(293564 call _ddata_shift eltType data shiftDist))
    }
  }
  function _unknown[42].strideAlignUp[293579](arg _mt[293589]:_MT[201], arg this[293582] :
  _remoteAccessData, arg lo[293585]:_any[141](?), arg r[293587]:_any[141](?)) : _unknown[42] "method"
  {
    (293592 return(293593 call +(293596 call . r c"lowBound")(293599 call *(293601 call /(293603 call -(293605 call +(293607 call - lo(293611 call . r c"lowBound"))(293614 call :(293617 call abs(293619 call . r c"stride")) idxType)) 1)(293624 call :(293627 call abs(293629 call . r c"stride")) idxType))(293633 call :(293636 call abs(293638 call . r c"stride")) idxType))))
  }
  function _unknown[42].strideAlignDown[293644](arg _mt[293654]:_MT[201], arg this[293647] :
  _remoteAccessData, arg hi[293650]:_any[141](?), arg r[293652]:_any[141](?)) : _unknown[42] "method"
  {
    (293657 return(293658 call - hi(293661 call %(293663 call - hi(293667 call . r c"lowBound"))(293670 call :(293673 call abs(293675 call . r c"stride")) idxType))))
  }
  function _unknown[42].initDataFrom[293681](arg _mt[293691]:_MT[201], ref arg this[293684] :
  _remoteAccessData, arg other[293688] :
  _remoteAccessData) : _unknown[42] "method" "no return value for void"
  {
    (293694 call =(293697 call . this c"data")(293701 call . other c"data"))
  }
  function _unknown[42].toSlice[293706](arg _mt[293714]:_MT[201], arg this[293709] :
  _remoteAccessData, arg newDom[293712]:_any[141](?)) : _unknown[42] "method"
  {
    (293718 call compilerAssert(293719 call ==(293722 call . this c"rank")(293726 call . newDom c"rank")))
    unknown rad[293730](293732 call _remoteAccessData eltType(293735 call . newDom c"rank")(293739 call . newDom c"idxType")(293743 call . newDom c"strides")(293746 call ||(293748 call !(293754 call(293751 call . newDom c"hasUnitStride")))(293758 call . this c"blkChanged")))
    (293762 'end of statement')
    (293769 call(293766 call . rad c"initDataFrom") this)
    (293771 call =(293776 call . rad c"shiftedData")(293794 IfExpr (293779 call !(293785 call(293782 call . newDom c"hasUnitStride"))) then
    { scopeless
      (293787 call . this c"data")
    } else
    { scopeless
      (293791 call . this c"shiftedData")
    } ))
    (293797 call =(293802 call . rad c"origin")(293806 call . this c"origin"))
    (293809 call =(293814 call . rad c"off")(293818 call chpl__tuplify(293820 call . newDom c"dsiLow")))
    (293823 call =(293828 call . rad c"str")(293832 call chpl__tuplify(293834 call . newDom c"dsiStride")))
    {
      unknown i[293837] "index var" 0
      unknown tmp[293964] "maybe param" "temp"
      (293976 'move' tmp[293964](293974 call chpl_compute_low_param_loop_bound 0(293840 call - rank 1)))
      unknown tmp[293965] "maybe param" "temp"
      (293986 'move' tmp[293965](293984 call chpl_compute_high_param_loop_bound 0(293981 call - rank 1)))
      unknown tmp[293966] "maybe param" "temp"
      (293989 'move' tmp[293966] 1)
      ParamForLoop[293991]
      { i[293837] tmp[293964] tmp[293965] tmp[293966]
        {
          const shift[293848] "const"(293849 call /(293851 call *(293859 call(293856 call . this c"blk") i)(293885 call(293882 call .(293861 call -(293864 call chpl__idxToInt(293871 call .(293869 call(293866 call . newDom c"dsiDim") i) c"lowBound"))(293875 call chpl__idxToInt(293880 call(293877 call . this c"off") i))) c"safeCast") int[10]))(293888 call abs(293893 call(293890 call . this c"str") i)))
          (293896 'end of statement')
          if(293922 call _cond_test(293913 call >(293919 call(293916 call . this c"str") i) 0))
          {
            (293898 call +=(293901 call . rad c"origin") shift)
          }
          {
            (293906 call -=(293909 call . rad c"origin") shift)
          }
          const mult[293927] "const"(293928 call /(293936 call .(293934 call(293931 call . newDom c"dsiDim") i) c"stride")(293943 call(293940 call . this c"str") i))
          (293946 'end of statement')
          (293947 call =(293953 call(293950 call . rad c"blk") i)(293955 call *(293961 call(293958 call . this c"blk") i) mult))
        }
      }
      label _unused_continueLabel[293968]
      label _breakLabel[293967]
    }
    (294006 call(294003 call . rad c"computeFactoredOffs"))
    (294013 call(294010 call . rad c"initShiftedData"))
    (294014 return rad)
  }
  function _unknown[42].toReindex[294018](arg _mt[294026]:_MT[201], arg this[294021] :
  _remoteAccessData, arg newDom[294024]:_any[141](?)) : _unknown[42] "method"
  {
    (294030 call compilerAssert(294031 call ==(294034 call . this c"rank")(294038 call . newDom c"rank")))
    unknown rad[294042](294044 call _remoteAccessData eltType(294047 call . newDom c"rank")(294051 call . newDom c"idxType")(294055 call . newDom c"strides") blkChanged)
    (294060 'end of statement')
    (294065 call(294062 call . rad c"initDataFrom") this)
    (294067 call =(294070 call . rad c"shiftedData")(294088 IfExpr (294073 call !(294079 call(294076 call . newDom c"hasUnitStride"))) then
    { scopeless
      (294081 call . this c"data")
    } else
    { scopeless
      (294085 call . this c"shiftedData")
    } ))
    (294091 call =(294094 call . rad c"origin")(294098 call . this c"origin"))
    (294101 call =(294104 call . rad c"blk")(294108 call . this c"blk"))
    (294111 call =(294114 call . rad c"off")(294118 call chpl__tuplify(294120 call . newDom c"dsiLow")))
    (294123 call =(294126 call . rad c"str")(294130 call chpl__tuplify(294132 call . newDom c"dsiStride")))
    (294135 call =(294140 call . rad c"factoredOffs") 0)
    (294148 call(294145 call . rad c"computeFactoredOffs"))
    (294153 call(294150 call . rad c"initShiftedData"))
    (294154 return rad)
  }
  function _unknown[42].toRankChange[294158](arg _mt[294170]:_MT[201], arg this[294161] :
  _remoteAccessData, arg newDom[294164]:_any[141](?), arg cd[294166]:_any[141](?), arg idx[294168]:_any[141](?)) : _unknown[42] "method"
  {
    (294174 call compilerAssert(294175 call &&(294177 call ==(294180 call . this c"rank")(294184 call . idx c"size"))(294187 call !=(294190 call . this c"rank")(294194 call . newDom c"rank"))))
    unknown chpl_integralIdxType[294198] "type variable"(294200 call . newDom c"chpl_integralIdxType")
    unknown idxSignedType[294205] "type variable"(294207 call chpl__signedType chpl_integralIdxType)
    unknown rad[294211](294213 call _remoteAccessData eltType(294216 call . newDom c"rank")(294220 call . newDom c"idxType")(294224 call . newDom c"strides") 1)
    (294229 'end of statement')
    const collapsedDims[294231] "const"(294233 call chpl__tuplify cd)
    (294236 'end of statement')
    (294241 call(294238 call . rad c"initDataFrom") this)
    (294243 call =(294246 call . rad c"shiftedData")(294264 IfExpr (294249 call !(294255 call(294252 call . newDom c"hasUnitStride"))) then
    { scopeless
      (294257 call . this c"data")
    } else
    { scopeless
      (294261 call . this c"shiftedData")
    } ))
    (294267 call =(294270 call . rad c"origin")(294274 call . this c"origin"))
    unknown curDim[294278] 0
    (294281 'end of statement')
    {
      unknown j[294282] "index var" 0
      unknown tmp[294458] "maybe param" "temp"
      (294470 'move' tmp[294458](294468 call chpl_compute_low_param_loop_bound 0(294285 call -(294288 call . idx c"size") 1)))
      unknown tmp[294459] "maybe param" "temp"
      (294483 'move' tmp[294459](294481 call chpl_compute_high_param_loop_bound 0(294475 call -(294477 call . idx c"size") 1)))
      unknown tmp[294460] "maybe param" "temp"
      (294486 'move' tmp[294460] 1)
      ParamForLoop[294488]
      { j[294282] tmp[294458] tmp[294459] tmp[294460]
        {
          if(294454 call _cond_test(294449 call !(294452 call collapsedDims j)))
          {
            (294296 call =(294302 call(294299 call . rad c"off") curDim)(294310 call .(294308 call(294305 call . newDom c"dsiDim") curDim) c"lowBound"))
            const off[294314] "const"(294315 call :(294317 call -(294320 call chpl__idxToInt(294325 call(294322 call . rad c"off") curDim))(294328 call chpl__idxToInt(294333 call(294330 call . this c"off") j))) idxSignedType)
            (294337 'end of statement')
            (294338 call +=(294341 call . rad c"origin")(294344 call /(294346 call *(294352 call(294349 call . this c"blk") j)(294358 call(294355 call . off c"safeCast") int[10]))(294364 call(294361 call . this c"str") j)))
            (294366 call =(294372 call(294369 call . rad c"blk") curDim)(294378 call(294375 call . this c"blk") j))
            (294380 call =(294386 call(294383 call . rad c"str") curDim)(294392 call(294389 call . this c"str") j))
            (294394 call += curDim 1)
          }
          {
            const off[294400] "const"(294401 call :(294403 call -(294406 call chpl__idxToInt(294408 call idx j))(294411 call chpl__idxToInt(294416 call(294413 call . this c"off") j))) idxSignedType)
            (294420 'end of statement')
            (294421 call +=(294424 call . rad c"origin")(294427 call /(294429 call *(294435 call(294432 call . this c"blk") j)(294441 call(294438 call . off c"safeCast") int[10]))(294447 call(294444 call . this c"str") j)))
          }
        }
      }
      label _unused_continueLabel[294462]
      label _breakLabel[294461]
    }
    (294501 call(294498 call . rad c"computeFactoredOffs"))
    (294506 call(294503 call . rad c"initShiftedData"))
    (294507 return rad)
  }
  function LocRADCache[294658](?).init[294561](arg _mt[294584]:_MT[201], arg this[294563]:LocRADCache[294658](?), arg eltType[294565]:_any[141](?), param arg rank[294568] :
  int[10], arg idxType[294571]:_any[141](?), param arg strides[294574] :
  strideKind, arg newTargetLocDom[294581] :
  (294578 call chpl__buildDomainRuntimeType defaultDist rank)) : _unknown[42] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (294587 call =(294590 call . this c"eltType") eltType)
    (294594 call =(294597 call . this c"rank") rank)
    (294601 call =(294604 call . this c"idxType") idxType)
    (294608 call =(294611 call . this c"strides") strides)
    (294615 call = targetLocDom newTargetLocDom)
  }
  function LocRADCache[294658](?).lockRAD[294621](arg _mt[294627]:_MT[201], arg this[294623]:LocRADCache[294658](?), arg rlocIdx[294625]:_any[141](?)) : _unknown[42] "inline" "method" "primary method" "no return value for void"
  {
    (294636 call(294633 call .(294631 call RADLocks rlocIdx) c"lock"))
  }
  function LocRADCache[294658](?).unlockRAD[294639](arg _mt[294645]:_MT[201], arg this[294641]:LocRADCache[294658](?), arg rlocIdx[294643]:_any[141](?)) : _unknown[42] "inline" "method" "primary method" "no return value for void"
  {
    (294654 call(294651 call .(294649 call RADLocks rlocIdx) c"unlock"))
  }
  type LocRADCache[294658](?) unknown eltType[294513] "type variable" unknown rank[294516] "param" int[10] unknown idxType[294521] "type variable" unknown strides[294524] "param" strideKind unknown targetLocDom[294529](294531 call chpl__buildDomainRuntimeType defaultDist rank) unknown RAD[294537] "unsafe"(294547 call chpl__buildArrayRuntimeType(294539 call chpl__ensureDomainExpr targetLocDom)(294542 call _remoteAccessData eltType rank idxType strides)) unknown RADLocks[294552](294557 call chpl__buildArrayRuntimeType(294554 call chpl__ensureDomainExpr targetLocDom) chpl_LocalSpinlock)
  function DefaultRectangularArr[298194](?).init[294766](arg _mt[294822]:_MT[201], arg this[294768]:DefaultRectangularArr[298194](?), arg eltType[294770]:_any[141](?), param arg rank[294772]:_any[141](?), arg idxType[294774]:_any[141](?), param arg strides[294776]:_any[141](?), arg dom[294787] :
  (294778 'to unmanaged class from unknown'(294780 call DefaultRectangularDom(rank = rank)(idxType = idxType)(strides = strides))), param arg initElts[294791] =
  1, param arg deinitElts[294795] =
  initElts, arg data[294802] :
  (294799 call _ddata eltType) =
  nil[32], arg externArr[294807] =
  0, arg _borrowed[294811] =
  0, arg externFreeFunc[294818] :
  (294815 call c_ptr void[4]) =
  nil[32]) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (294829 call(294826 call . super c"init")(eltType = eltType)(rank = rank)(idxType = idxType)(strides = strides))
    (294838 call =(294841 call . this c"dom") dom)
    (294845 call =(294848 call . this c"data") data)
    (294852 call =(294857 call . this c"externFreeFunc") externFreeFunc)
    (294861 call =(294864 call . this c"externArr") externArr)
    (294868 call =(294871 call . this c"_borrowed") _borrowed)
    (294875 call =(294880 call . this c"callPostAlloc") 0)
    (294884 call =(294889 call . this c"deinitElts") deinitElts)
    (294897 call(294894 call . this c"chpl__initThisType"))
    (294904 call(294901 call . this c"setupFieldsAndAllocate") initElts)
  }
  function DefaultRectangularArr[298194](?).chpl_integralIdxType[294908](arg _mt[294912]:_MT[201], arg this[294910]:DefaultRectangularArr[298194](?)) type : _unknown[42] "method" "primary method" "no parens"
  {
    (294915 return(294917 call chpl__idxTypeToIntIdxType idxType))
  }
  function DefaultRectangularArr[298194](?).dsiDisplayRepresentation[294921](arg _mt[294925]:_MT[201], arg this[294923]:DefaultRectangularArr[298194](?)) : _unknown[42] "method" "primary method" "method overrides" "no return value for void"
  {
    (294929 call writeln "off=" off)
    (294935 call writeln "blk=" blk)
    (294941 call writeln "str=" str)
    (294947 call writeln "factoredOffs=" factoredOffs)
  }
  function DefaultRectangularArr[298194](?).dsiGetBaseDom[294954](arg _mt[294958]:_MT[201], arg this[294956]:DefaultRectangularArr[298194](?)) : _unknown[42] "method" "primary method" "method overrides"
  {
    (294961 return dom)
  }
  function DefaultRectangularArr[298194](?).dsiElementInitializationComplete[294965](arg _mt[294969]:_MT[201], arg this[294967]:DefaultRectangularArr[298194](?)) : _unknown[42] "method" "primary method" "method overrides" "no return value for void"
  {
    const size[294973] "const"(295019 IfExpr (294974 call == storageOrder(294978 call . ArrayStorageOrder c"RMO")) then
    { scopeless
      (294981 call *(294984 call blk 0)(294995 call(294992 call .(294990 call(294987 call . dom c"dsiDim") 0) c"sizeAs") int[10]))
    } else
    { scopeless
      (294997 call *(295000 call blk(295001 call - rank 1))(295017 call(295014 call .(295009 call(295006 call . dom c"dsiDim")(295010 call - rank 1)) c"sizeAs") int[10]))
    } )
    (295023 'end of statement')
    if(295037 call _cond_test debugDefaultDist)
    {
      (295026 call chpl_debug_writeln "*** DR calling postalloc "(295030 call : eltType string[244]) " " size)
    }
    if(295051 call _cond_test callPostAlloc)
    {
      (295043 call _ddata_allocate_postalloc data size)
      (295046 call = callPostAlloc 0)
    }
    (295055 call = deinitElts 1)
  }
  function DefaultRectangularArr[298194](?).dsiElementDeinitializationComplete[295061](arg _mt[295065]:_MT[201], arg this[295063]:DefaultRectangularArr[298194](?)) : _unknown[42] "method" "primary method" "method overrides" "no return value for void"
  {
    (295068 call = deinitElts 0)
  }
  function DefaultRectangularArr[298194](?).chpl_unsafeAssignIsClassElementNil[295074](arg _mt[295082]:_MT[201], arg this[295076]:DefaultRectangularArr[298194](?), arg manager[295078]:_any[141](?), arg idx[295080]:_any[141](?)) : _unknown[42] "method" "primary method" "method overrides"
  {
    unknown elem[295094] "ref var"(295099 call(295096 call . this c"dsiAccess") idx)
    (295102 'end of statement')
    (295103 return(295108 call(295105 call . manager c"isClassReferenceNil") elem))
  }
  where {
    (295084 call ==(295087 'typeof' idx)(295088 call * rank idxType))
  }
  function DefaultRectangularArr[298194](?).dsiDestroyArr[295113](arg _mt[295121]:_MT[201], arg this[295115]:DefaultRectangularArr[298194](?), arg deinitElts[295118] :
  bool) : _unknown[42] "method" "primary method" "method overrides" "no return value for void"
  {
    if(295135 call _cond_test debugDefaultDist)
    {
      (295126 call chpl_debug_writeln "*** DR calling dealloc "(295130 call : eltType string[244]))
    }
    if(295288 call _cond_test externArr)
    {
      if(295150 call _cond_test(295147 call ! _borrowed))
      {
        (295142 call chpl_call_free_func externFreeFunc(295145 call c_ptrTo data))
      }
    }
    {
      unknown numInd[295156](295158 call . dom c"dsiNumIndices")
      (295162 'end of statement')
      unknown numElts[295164] numInd
      (295167 'end of statement')
      if(295279 call _cond_test(295266 call &&(295268 call && deinitElts(295272 call . this c"deinitElts"))(295275 call > numInd 0)))
      {
        unknown needsDestroy[295170] "param"(295171 'needs auto destroy'(295172 'deref'(295174 call data 0)))
        (295177 'end of statement')
        if(295262 call _cond_test needsDestroy)
        {
          if(295257 call _cond_test(295254 call _deinitElementsIsParallel eltType numElts))
          {
            Forall[295196] {
              induction variables:
                
                unknown i[295180] "index var" "insert auto destroy"
              iterated expressions:
                (295182 call #(295185 call chpl_build_low_bounded_range 0) numElts)
              shadow variables:
              other variables
                forall body
              {
                (295190 call chpl__autoDestroy(295192 call data i))
              }
            }
          }
          {
            {
              unknown _indexOfInterest[295214] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[295215] "expr temp" "temp"
              (295224 'move' _iterator[295215](295222 call _getIterator(295231 call chpl_direct_counted_range_iter 0 numElts)))
              Defer
              {
                {
                  (295246 call _freeIterator _iterator[295215])
                }
              }
              { scopeless type
                (295236 'move' _indexOfInterest[295214](295233 call iteratorIndex _iterator[295215]))
              }
              ForLoop[295216]
              {
                unknown i[295200] "index var" "insert auto destroy"
                (295241 'move' i[295200] _indexOfInterest[295214])
                {
                  (295210 call chpl__autoDestroy(295212 call data i))
                }
                label _continueLabel[295219]
                _indexOfInterest[295214]
                _iterator[295215]
              }
              label _breakLabel[295220]
            }
          }
        }
      }
      (295284 call _ddata_free data numInd)
    }
  }
  function DefaultRectangularArr[298194](?).theData[295294](arg _mt[295298]:_MT[201], arg this[295296]:DefaultRectangularArr[298194](?)) ref : _unknown[42] "inline" "method" "primary method" "no parens"
  {
    if(295312 call _cond_test(295307 call && earlyShiftData(295311 call hasUnitStride)))
    {
      (295301 return shiftedData)
    }
    {
      (295304 return data)
    }
  }
  function DefaultRectangularArr[298194](?).these[295320](arg _mt[295342]:_MT[201], arg this[295322]:DefaultRectangularArr[298194](?), arg tasksPerLocale[295326] :
  int[10] =
  dataParTasksPerLocale, arg ignoreRunning[295332] :
  bool =
  dataParIgnoreRunningTasks, arg minIndicesPerTask[295338] :
  int[10] =
  dataParMinGranularity) ref : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(295352 call _cond_test debugDefaultDist)
    {
      (295347 call chpl_debug_writeln "*** In defRectArr simple-dd serial iterator")
    }
    {
      unknown _indexOfInterest[295365] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[295366] "expr temp" "temp"
      (295375 'move' _iterator[295366](295373 call _getIterator(295359 call chpl__serialViewIter this dom)))
      Defer
      {
        {
          (295390 call _freeIterator _iterator[295366])
        }
      }
      { scopeless type
        (295380 'move' _indexOfInterest[295365](295377 call iteratorIndex _iterator[295366]))
      }
      ForLoop[295367]
      {
        unknown elem[295356] "index var" "insert auto destroy"
        (295385 'move' elem[295356] _indexOfInterest[295365])
        (295362 yield elem)
        label _continueLabel[295370]
        _indexOfInterest[295365]
        _iterator[295366]
      }
      label _breakLabel[295371]
    }
  }
  function DefaultRectangularArr[298194](?).these[295399](arg _mt[295419]:_MT[201], arg this[295401]:DefaultRectangularArr[298194](?), param arg tag[295404] :
  iterKind, arg tasksPerLocale[295408] =
  dataParTasksPerLocale, arg ignoreRunning[295412] =
  dataParIgnoreRunningTasks, arg minIndicesPerTask[295416] =
  dataParMinGranularity) ref : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(295436 call _cond_test debugDefaultDist)
    {
      (295431 call chpl_debug_writeln "*** In defRectArr simple-dd standalone iterator")
    }
    {
      unknown _indexOfInterest[295464] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[295465] "expr temp" "temp"
      (295474 'move' _iterator[295465](295472 call _getIterator(295446 call(295443 call . dom c"these") tag tasksPerLocale ignoreRunning minIndicesPerTask)))
      Defer
      {
        {
          (295489 call _freeIterator _iterator[295465])
        }
      }
      { scopeless type
        (295479 'move' _indexOfInterest[295464](295476 call iteratorIndex _iterator[295465]))
      }
      ForLoop[295466] order-independent
      {
        unknown i[295440] "index var" "insert auto destroy"
        (295484 'move' i[295440] _indexOfInterest[295464])
        {
          (295458 yield(295460 call dsiAccess i))
        }
        label _continueLabel[295469]
        _indexOfInterest[295464]
        _iterator[295465]
      }
      label _breakLabel[295470]
    }
  }
  where {
    (295421 call == tag(295425 call . iterKind c"standalone"))
  }
  function DefaultRectangularArr[298194](?).these[295499](arg _mt[295519]:_MT[201], arg this[295501]:DefaultRectangularArr[298194](?), param arg tag[295504] :
  iterKind, arg tasksPerLocale[295508] =
  dataParTasksPerLocale, arg ignoreRunning[295512] =
  dataParIgnoreRunningTasks, arg minIndicesPerTask[295516] =
  dataParMinGranularity) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(295536 call _cond_test debugDefaultDist)
    {
      (295531 call chpl_debug_writeln "*** In defRectArr simple-dd leader iterator")
    }
    {
      unknown _indexOfInterest[295554] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[295555] "expr temp" "temp"
      (295564 'move' _iterator[295555](295562 call _getIterator(295546 call(295543 call . dom c"these") tag tasksPerLocale ignoreRunning minIndicesPerTask)))
      Defer
      {
        {
          (295579 call _freeIterator _iterator[295555])
        }
      }
      { scopeless type
        (295569 'move' _indexOfInterest[295554](295566 call iteratorIndex _iterator[295555]))
      }
      ForLoop[295556]
      {
        unknown followThis[295540] "index var" "insert auto destroy"
        (295574 'move' followThis[295540] _indexOfInterest[295554])
        (295551 yield followThis)
        label _continueLabel[295559]
        _indexOfInterest[295554]
        _iterator[295555]
      }
      label _breakLabel[295560]
    }
  }
  where {
    (295521 call == tag(295525 call . iterKind c"leader"))
  }
  function DefaultRectangularArr[298194](?).these[295589](arg _mt[295611]:_MT[201], arg this[295591]:DefaultRectangularArr[298194](?), param arg tag[295594] :
  iterKind, arg followThis[295597]:_any[141](?), arg tasksPerLocale[295600] =
  dataParTasksPerLocale, arg ignoreRunning[295604] =
  dataParIgnoreRunningTasks, arg minIndicesPerTask[295608] =
  dataParMinGranularity) ref : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(295661 call _cond_test(295651 call !=(295654 call . followThis c"size")(295658 call . this c"rank")))
    {
      (295622 call compilerError(295623 call +(295625 call +(295627 call +(295629 call + "rank mismatch in zippered iteration (can't zip a "(295632 call :(295635 call . followThis c"size") string[244])) "D expression with a ")(295640 call :(295643 call . this c"rank") string[244])) "D array)"))
    }
    if(295674 call _cond_test debugDefaultDist)
    {
      (295668 call chpl_debug_writeln "*** In defRectArr simple-dd follower iterator: " followThis)
    }
    {
      unknown _indexOfInterest[295701] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[295702] "expr temp" "temp"
      (295711 'move' _iterator[295702](295709 call _getIterator(295684 call(295681 call . dom c"these")(tag =(295686 call . iterKind c"follower")) followThis tasksPerLocale ignoreRunning minIndicesPerTask)))
      Defer
      {
        {
          (295726 call _freeIterator _iterator[295702])
        }
      }
      { scopeless type
        (295716 'move' _indexOfInterest[295701](295713 call iteratorIndex _iterator[295702]))
      }
      ForLoop[295703] order-independent
      {
        unknown i[295678] "index var" "insert auto destroy"
        (295721 'move' i[295678] _indexOfInterest[295701])
        (295694 yield(295696 call dsiAccess i))
        label _continueLabel[295706]
        _indexOfInterest[295701]
        _iterator[295702]
      }
      label _breakLabel[295707]
    }
  }
  where {
    (295613 call == tag(295617 call . iterKind c"follower"))
  }
  function DefaultRectangularArr[298194](?).computeFactoredOffs[295736](arg _mt[295740]:_MT[201], arg this[295738]:DefaultRectangularArr[298194](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (295743 call = factoredOffs 0)
    {
      unknown i[295747] "index var" 0
      unknown tmp[295776] "maybe param" "temp"
      (295788 'move' tmp[295776](295786 call chpl_compute_low_param_loop_bound 0(295750 call - rank 1)))
      unknown tmp[295777] "maybe param" "temp"
      (295798 'move' tmp[295777](295796 call chpl_compute_high_param_loop_bound 0(295793 call - rank 1)))
      unknown tmp[295778] "maybe param" "temp"
      (295801 'move' tmp[295778] 1)
      ParamForLoop[295803]
      { i[295747] tmp[295776] tmp[295777] tmp[295778]
        {
          (295757 call = factoredOffs(295760 call + factoredOffs(295763 call *(295766 call blk i)(295768 call :(295771 call chpl__idxToInt(295773 call off i)) int[10]))))
        }
      }
      label _unused_continueLabel[295780]
      label _breakLabel[295779]
    }
  }
  function DefaultRectangularArr[298194](?).initShiftedData[295814](arg _mt[295818]:_MT[201], arg this[295816]:DefaultRectangularArr[298194](?)) : _unknown[42] "inline" "method" "primary method" "no return value for void"
  {
    if(295874 call _cond_test(295869 call && earlyShiftData(295873 call hasUnitStride)))
    {
      if(295865 call _cond_test(295858 call >(295861 call . dom c"dsiNumIndices") 0))
      {
        const shiftDist[295824] "const"(295845 IfExpr (295826 call isIntType idxType) then
        { scopeless
          (295828 call -(295830 call : 0 idxType) factoredOffs)
        } else
        { scopeless
          (295835 call -(295837 call : 0 idxSignedType)(295841 call : factoredOffs idxSignedType))
        } )
        (295849 'end of statement')
        (295850 call = shiftedData(295854 call _ddata_shift eltType data shiftDist))
      }
    }
  }
  function DefaultRectangularArr[298194](?).setupFieldsAndAllocate[295880](arg _mt[295886]:_MT[201], arg this[295882]:DefaultRectangularArr[298194](?), param arg initElts[295884]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    {
      unknown dim[295889] "index var" 0
      unknown tmp[295927] "maybe param" "temp"
      (295939 'move' tmp[295927](295937 call chpl_compute_low_param_loop_bound 0(295892 call - rank 1)))
      unknown tmp[295928] "maybe param" "temp"
      (295949 'move' tmp[295928](295947 call chpl_compute_high_param_loop_bound 0(295944 call - rank 1)))
      unknown tmp[295929] "maybe param" "temp"
      (295952 'move' tmp[295929] 1)
      ParamForLoop[295954]
      { dim[295889] tmp[295927] tmp[295928] tmp[295929]
        {
          (295899 call =(295902 call off dim)(295910 call .(295908 call(295905 call . dom c"dsiDim") dim) c"low"))
          (295913 call =(295916 call str dim)(295924 call .(295922 call(295919 call . dom c"dsiDim") dim) c"stride"))
        }
      }
      label _unused_continueLabel[295931]
      label _breakLabel[295930]
    }
    if(296156 call _cond_test(296149 call == storageOrder(296153 call . ArrayStorageOrder c"RMO")))
    {
      (295964 call =(295967 call blk(295968 call - rank 1)) 1)
      {
        unknown dim[295973] "index var" 0
        unknown tmp[296015] "maybe param" "temp"
        (296026 'move' tmp[296015](296024 call chpl_compute_low_param_loop_bound 0(295978 call - rank 2)))
        unknown tmp[296016] "maybe param" "temp"
        (296036 'move' tmp[296016](296034 call chpl_compute_high_param_loop_bound 0(296031 call - rank 2)))
        unknown tmp[296017] "maybe param" "temp"
        (296039 'move' tmp[296017](295984 call - 1))
        ParamForLoop[296041]
        { dim[295973] tmp[296015] tmp[296016] tmp[296017]
          (295987 call =(295990 call blk dim)(295992 call *(295995 call blk(295996 call + dim 1))(296012 call(296009 call .(296004 call(296001 call . dom c"dsiDim")(296005 call + dim 1)) c"sizeAs") int[10])))
        }
        label _unused_continueLabel[296019]
        label _breakLabel[296018]
      }
    }
    {
      if(296145 call _cond_test(296136 call == storageOrder(296142 call . ArrayStorageOrder c"CMO")))
      {
        (296051 call =(296054 call blk 0) 1)
        {
          unknown dim[296057] "index var" 0
          unknown tmp[296094] "maybe param" "temp"
          (296106 'move' tmp[296094](296104 call chpl_compute_low_param_loop_bound 1(296060 call - rank 1)))
          unknown tmp[296095] "maybe param" "temp"
          (296116 'move' tmp[296095](296114 call chpl_compute_high_param_loop_bound 1(296111 call - rank 1)))
          unknown tmp[296096] "maybe param" "temp"
          (296119 'move' tmp[296096] 1)
          ParamForLoop[296121]
          { dim[296057] tmp[296094] tmp[296095] tmp[296096]
            {
              (296067 call =(296070 call blk dim)(296072 call *(296075 call blk(296076 call - dim 1))(296092 call(296089 call .(296084 call(296081 call . dom c"dsiDim")(296085 call - dim 1)) c"sizeAs") int[10])))
            }
          }
          label _unused_continueLabel[296098]
          label _breakLabel[296097]
        }
      }
      {
        (296132 call halt "unknown array storage order")
      }
    }
    (296162 call computeFactoredOffs)
    const size[296164] "const"(296210 IfExpr (296165 call == storageOrder(296169 call . ArrayStorageOrder c"RMO")) then
    { scopeless
      (296172 call *(296175 call blk 0)(296186 call(296183 call .(296181 call(296178 call . dom c"dsiDim") 0) c"sizeAs") int[10]))
    } else
    { scopeless
      (296188 call *(296191 call blk(296192 call - rank 1))(296208 call(296205 call .(296200 call(296197 call . dom c"dsiDim")(296201 call - rank 1)) c"sizeAs") int[10]))
    } )
    (296214 'end of statement')
    if(296279 call _cond_test usePollyArrayIndex)
    {
      {
        unknown dim[296216] "index var" 0
        unknown tmp[296242] "maybe param" "temp"
        (296254 'move' tmp[296242](296252 call chpl_compute_low_param_loop_bound 0(296219 call - rank 1)))
        unknown tmp[296243] "maybe param" "temp"
        (296264 'move' tmp[296243](296262 call chpl_compute_high_param_loop_bound 0(296259 call - rank 1)))
        unknown tmp[296244] "maybe param" "temp"
        (296267 'move' tmp[296244] 1)
        ParamForLoop[296269]
        { dim[296216] tmp[296242] tmp[296243] tmp[296244]
          {
            (296226 call =(296229 call sizesPerDim dim)(296240 call(296237 call .(296235 call(296232 call . dom c"dsiDim") dim) c"sizeAs") int[10]))
          }
        }
        label _unused_continueLabel[296246]
        label _breakLabel[296245]
      }
    }
    if(296357 call _cond_test(296353 call == data nil[32]))
    {
      if(296297 call _cond_test debugDefaultDist)
      {
        (296286 call chpl_debug_writeln "*** DR alloc "(296290 call : eltType string[244]) " " size)
      }
      if(296336 call _cond_test(296333 call ! localeModelPartitionsIterationOnSublocales))
      {
        (296302 call = data(296306 call _ddata_allocate_noinit eltType size callPostAlloc))
      }
      {
        (296311 call = data(296315 call _ddata_allocate_noinit eltType size callPostAlloc(subloc =(296329 IfExpr (296319 call >(296325 call(296322 call . here c"_getChildCount")) 1) then
        { scopeless
          c_sublocid_all
        } else
        { scopeless
          c_sublocid_none
        } ))))
      }
      if(296349 call _cond_test initElts)
      {
        (296342 call init_elts data size eltType)
        (296347 call dsiElementInitializationComplete)
      }
    }
    (296362 call initShiftedData)
  }
  function DefaultRectangularArr[298194](?).getDataIndex[296365](arg _mt[296379]:_MT[201], arg this[296367]:DefaultRectangularArr[298194](?), arg ind[296371] ... :
  idxType, param arg getShifted[296376] =
  1) : _unknown[42] "inline" "method" "primary method"
  {
    (296386 return(296388 call getDataIndex ind(getShifted = getShifted)))
  }
  where {
    (296381 call == rank 1)
  }
  function DefaultRectangularArr[298194](?).getDataIndex[296395](arg _mt[296410]:_MT[201], arg this[296397]:DefaultRectangularArr[298194](?), arg ind[296403] :
  (296399 call * rank idxType), param arg getShifted[296407] =
  1) : _unknown[42] "inline" "method" "primary method"
  {
    if(296818 call _cond_test(296814 call !(296817 call hasUnitStride)))
    {
      unknown sum[296415] 0
      (296418 'end of statement')
      {
        unknown i[296419] "index var" 0
        unknown tmp[296461] "maybe param" "temp"
        (296473 'move' tmp[296461](296471 call chpl_compute_low_param_loop_bound 0(296422 call - rank 1)))
        unknown tmp[296462] "maybe param" "temp"
        (296483 'move' tmp[296462](296481 call chpl_compute_high_param_loop_bound 0(296478 call - rank 1)))
        unknown tmp[296463] "maybe param" "temp"
        (296486 'move' tmp[296463] 1)
        ParamForLoop[296488]
        { i[296419] tmp[296461] tmp[296462] tmp[296463]
          (296428 call += sum(296431 call /(296433 call *(296450 call(296447 call .(296435 call -(296438 call chpl__idxToInt(296440 call ind i))(296443 call chpl__idxToInt(296445 call off i))) c"safeCast") int[10])(296453 call blk i))(296456 call abs(296458 call str i))))
        }
        label _unused_continueLabel[296465]
        label _breakLabel[296464]
      }
      (296497 return sum)
    }
    {
      unknown wantShiftedIndex[296501] "param"(296502 call && getShifted earlyShiftData)
      (296507 'end of statement')
      if(296810 call _cond_test(296803 call &&(296805 call == rank 1) wantShiftedIndex))
      {
        (296509 return(296510 call :(296513 call chpl__idxToInt(296515 call ind 0)) int[10]))
      }
      {
        unknown sum[296520] 0
        (296523 'end of statement')
        unknown useInd[296525] ind
        (296528 'end of statement')
        unknown useOffset[296530] 0 int[10]
        (296534 'end of statement')
        unknown useSizesPerDim[296536] sizesPerDim
        (296539 'end of statement')
        if(296799 call _cond_test usePollyArrayIndex)
        {
          if(296608 call _cond_test(296605 call ! wantShiftedIndex))
          {
            {
              unknown i[296542] "index var" 0
              unknown tmp[296569] "maybe param" "temp"
              (296581 'move' tmp[296569](296579 call chpl_compute_low_param_loop_bound 0(296545 call - rank 1)))
              unknown tmp[296570] "maybe param" "temp"
              (296591 'move' tmp[296570](296589 call chpl_compute_high_param_loop_bound 0(296586 call - rank 1)))
              unknown tmp[296571] "maybe param" "temp"
              (296594 'move' tmp[296571] 1)
              ParamForLoop[296596]
              { i[296542] tmp[296569] tmp[296570] tmp[296571]
                {
                  (296552 call =(296555 call useInd i)(296557 call -(296560 call chpl__idxToInt(296562 call useInd i))(296565 call chpl__idxToInt(296567 call off i))))
                }
              }
              label _unused_continueLabel[296573]
              label _breakLabel[296572]
            }
          }
          (296612 return(296614 call polly_array_index useOffset(296617 'expand_tuple' useSizesPerDim)(296619 'expand_tuple' useInd)))
        }
        {
          if(296779 call _cond_test(296772 call == storageOrder(296776 call . ArrayStorageOrder c"RMO")))
          {
            {
              unknown i[296622] "index var" 0
              unknown tmp[296648] "maybe param" "temp"
              (296660 'move' tmp[296648](296658 call chpl_compute_low_param_loop_bound 0(296625 call - rank 2)))
              unknown tmp[296649] "maybe param" "temp"
              (296670 'move' tmp[296649](296668 call chpl_compute_high_param_loop_bound 0(296665 call - rank 2)))
              unknown tmp[296650] "maybe param" "temp"
              (296673 'move' tmp[296650] 1)
              ParamForLoop[296675]
              { i[296622] tmp[296648] tmp[296649] tmp[296650]
                {
                  (296632 call += sum(296635 call *(296637 call :(296640 call chpl__idxToInt(296642 call ind i)) int[10])(296646 call blk i)))
                }
              }
              label _unused_continueLabel[296652]
              label _breakLabel[296651]
            }
            (296684 call += sum(296687 call :(296690 call chpl__idxToInt(296692 call ind(296693 call - rank 1))) int[10]))
          }
          {
            {
              unknown i[296699] "index var" 0
              unknown tmp[296725] "maybe param" "temp"
              (296737 'move' tmp[296725](296735 call chpl_compute_low_param_loop_bound 1(296702 call - rank 1)))
              unknown tmp[296726] "maybe param" "temp"
              (296747 'move' tmp[296726](296745 call chpl_compute_high_param_loop_bound 1(296742 call - rank 1)))
              unknown tmp[296727] "maybe param" "temp"
              (296750 'move' tmp[296727] 1)
              ParamForLoop[296752]
              { i[296699] tmp[296725] tmp[296726] tmp[296727]
                {
                  (296709 call += sum(296712 call *(296714 call :(296717 call chpl__idxToInt(296719 call ind i)) int[10])(296723 call blk i)))
                }
              }
              label _unused_continueLabel[296729]
              label _breakLabel[296728]
            }
            (296761 call += sum(296764 call :(296767 call chpl__idxToInt(296769 call ind 0)) int[10]))
          }
          if(296791 call _cond_test(296788 call ! wantShiftedIndex))
          {
            (296783 call -= sum factoredOffs)
          }
          (296796 return sum)
        }
      }
    }
  }
  function DefaultRectangularArr[298194](?).dsiAccess[296824](arg _mt[296834]:_MT[201], arg this[296826]:DefaultRectangularArr[298194](?), arg ind[296830] ... :
  idxType) ref : _unknown[42] "inline" "method" "primary method"
  {
    (296841 return(296843 call dsiAccess ind))
  }
  where {
    (296836 call == rank 1)
  }
  function DefaultRectangularArr[298194](?).dsiAccess[296848](arg _mt[296858]:_MT[201], arg this[296850]:DefaultRectangularArr[298194](?), arg ind[296854] ... :
  idxType) : _unknown[42] "inline" "method" "primary method"
  {
    (296870 return(296872 call dsiAccess ind))
  }
  where {
    (296860 call &&(296862 call == rank 1)(296867 call shouldReturnRvalueByValue eltType))
  }
  function DefaultRectangularArr[298194](?).dsiAccess[296877](arg _mt[296887]:_MT[201], arg this[296879]:DefaultRectangularArr[298194](?), arg ind[296883] ... :
  idxType) const ref : _unknown[42] "inline" "method" "primary method"
  {
    (296894 return(296896 call dsiAccess ind))
  }
  where {
    (296889 call == rank 1)
  }
  function DefaultRectangularArr[298194](?).dsiAccess[296901](arg _mt[296912]:_MT[201], arg this[296903]:DefaultRectangularArr[298194](?), const in arg ind[296909] :
  (296905 call * rank idxType)) ref : _unknown[42] "inline" "method" "primary method"
  {
    unknown dataInd[296916](296918 call getDataIndex ind)
    (296921 'end of statement')
    (296922 return(296924 call theData dataInd))
  }
  function DefaultRectangularArr[298194](?).dsiAccess[296928](arg _mt[296939]:_MT[201], arg this[296930]:DefaultRectangularArr[298194](?), const in arg ind[296936] :
  (296932 call * rank idxType)) : _unknown[42] "inline" "method" "primary method"
  {
    unknown dataInd[296946](296948 call getDataIndex ind)
    (296951 'end of statement')
    (296952 return(296954 call theData dataInd))
  }
  where {
    (296942 call shouldReturnRvalueByValue eltType)
  }
  function DefaultRectangularArr[298194](?).dsiAccess[296959](arg _mt[296970]:_MT[201], arg this[296961]:DefaultRectangularArr[298194](?), const in arg ind[296967] :
  (296963 call * rank idxType)) const ref : _unknown[42] "inline" "method" "primary method"
  {
    unknown dataInd[296974](296976 call getDataIndex ind)
    (296979 'end of statement')
    (296980 return(296982 call theData dataInd))
  }
  function DefaultRectangularArr[298194](?).dsiBoundsCheck[296986](arg _mt[296992]:_MT[201], arg this[296988]:DefaultRectangularArr[298194](?), arg i[296990]:_any[141](?)) : _unknown[42] "inline" "method" "primary method"
  {
    (296995 return(297000 call(296997 call . dom c"dsiMember") i))
  }
  function DefaultRectangularArr[298194](?).adjustBlkOffStrForNewDomain[297004](arg _mt[297018]:_MT[201], arg this[297006]:DefaultRectangularArr[298194](?), arg d[297010] :
  (297008 'to unmanaged class from unknown' DefaultRectangularDom), arg alias[297015] :
  (297013 'to unmanaged class from unknown' DefaultRectangularArr)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    {
      unknown i[297021] "index var" 0
      unknown tmp[297184] "maybe param" "temp"
      (297196 'move' tmp[297184](297194 call chpl_compute_low_param_loop_bound 0(297024 call - rank 1)))
      unknown tmp[297185] "maybe param" "temp"
      (297206 'move' tmp[297185](297204 call chpl_compute_high_param_loop_bound 0(297201 call - rank 1)))
      unknown tmp[297186] "maybe param" "temp"
      (297209 'move' tmp[297186] 1)
      ParamForLoop[297211]
      { i[297021] tmp[297184] tmp[297185] tmp[297186]
        {
          unknown s[297032] idxType
          (297035 'end of statement')
          if(297132 call _cond_test(297128 call == idxSignedType idxType))
          {
            (297037 call = s(297040 call :(297042 call /(297050 call .(297048 call(297045 call . dom c"dsiDim") i) c"stride")(297054 call str i))(297057 call . d c"idxType")))
          }
          {
            (297062 call assert(297063 call ||(297065 call &&(297067 call <(297075 call .(297073 call(297070 call . dom c"dsiDim") i) c"stride") 0)(297079 call <(297082 call str i) 0))(297085 call &&(297087 call >(297095 call .(297093 call(297090 call . dom c"dsiDim") i) c"stride") 0)(297099 call >(297102 call str i) 0))))
            (297105 call = s(297108 call :(297110 call /(297118 call .(297116 call(297113 call . dom c"dsiDim") i) c"stride")(297122 call str i))(297125 call . d c"idxType")))
          }
          (297136 call =(297142 call(297139 call . alias c"off") i)(297150 call .(297148 call(297145 call . d c"dsiDim") i) c"lowBound"))
          (297153 call =(297159 call(297156 call . alias c"blk") i)(297161 call *(297164 call blk i) s))
          (297167 call =(297173 call(297170 call . alias c"str") i)(297181 call .(297179 call(297176 call . d c"dsiDim") i) c"stride"))
        }
      }
      label _unused_continueLabel[297188]
      label _breakLabel[297187]
    }
  }
  function DefaultRectangularArr[298194](?).adjustBlkOffStrForNewDomain[297222](arg _mt[297236]:_MT[201], arg this[297224]:DefaultRectangularArr[298194](?), arg d[297228] :
  (297226 'to unmanaged class from unknown' DefaultRectangularDom), arg alias[297233] :
  (297231 'to unmanaged class from unknown' DefaultRectangularArr)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    {
      unknown i[297251] "index var" 0
      unknown tmp[297306] "maybe param" "temp"
      (297318 'move' tmp[297306](297316 call chpl_compute_low_param_loop_bound 0(297254 call - rank 1)))
      unknown tmp[297307] "maybe param" "temp"
      (297328 'move' tmp[297307](297326 call chpl_compute_high_param_loop_bound 0(297323 call - rank 1)))
      unknown tmp[297308] "maybe param" "temp"
      (297331 'move' tmp[297308] 1)
      ParamForLoop[297333]
      { i[297251] tmp[297306] tmp[297307] tmp[297308]
        {
          (297261 call =(297267 call(297264 call . alias c"off") i)(297275 call .(297273 call(297270 call . d c"dsiDim") i) c"lowBound"))
          (297278 call =(297284 call(297281 call . alias c"blk") i)(297287 call blk i))
          (297289 call =(297295 call(297292 call . alias c"str") i)(297303 call .(297301 call(297298 call . d c"dsiDim") i) c"stride"))
        }
      }
      label _unused_continueLabel[297310]
      label _breakLabel[297309]
    }
  }
  where {
    (297238 call &&(297244 call(297241 call . dom c"hasUnitStride"))(297249 call(297246 call . this c"hasUnitStride")))
  }
  function DefaultRectangularArr[298194](?).dsiReallocate[297345](arg _mt[297363]:_MT[201], arg this[297347]:DefaultRectangularArr[298194](?), arg bounds[297360] :
  (297349 call * rank(297353 call range idxType(297356 call . boundKind c"both") strides))) : _unknown[42] "method" "primary method" "method overrides" "ignore transfer errors" "no return value for void"
  {
    unknown actuallyResizing[297367] 0
    (297370 'end of statement')
    {
      unknown _indexOfInterest[297401] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[297402] "expr temp" "temp"
      (297411 'move' _iterator[297402](297409 call _getIterator(297374 call . bounds c"indices")))
      Defer
      {
        {
          (297426 call _freeIterator _iterator[297402])
        }
      }
      { scopeless type
        (297416 'move' _indexOfInterest[297401](297413 call iteratorIndex _iterator[297402]))
      }
      ForLoop[297403]
      {
        unknown i[297371] "index var" "insert auto destroy"
        (297421 'move' i[297371] _indexOfInterest[297401])
        {
          if(297397 call _cond_test(297386 call !=(297389 call bounds i)(297395 call(297392 call . dom c"dsiDim") i)))
          {
            (297379 call = actuallyResizing 1)
            break nil[32]
          }
        }
        label _continueLabel[297406]
        _indexOfInterest[297401]
        _iterator[297402]
      }
      label _breakLabel[297407]
    }
    if(297438 call _cond_test(297435 call ! actuallyResizing))
    {
      (297433 return _void[46])
    }
    if(297467 call _cond_test(297460 call == _resizePolicy(297464 call . chpl_ddataResizePolicy c"normalInit")))
    {
      if(297455 call _cond_test(297450 call !(297453 call isDefaultInitializable eltType)))
      {
        (297444 call halt(297445 call + "Can't resize domains whose arrays' elements don't " "have default values"))
      }
    }
    if(297994 call _cond_test(297987 call !=(297991 call chpl_localeID_to_locale(297990 '_wide_get_locale' this)) here))
    {
      (297474 call halt(297475 call + "internal error: dsiReallocate() can only be called " "from an array's home locale"))
    }
    {
      const reallocD[297485] "const"(297490 call chpl__buildDomainExpr(297488 'expand_tuple' bounds) 1)
      (297493 'end of statement')
      const oldSize[297495] "const"(297497 call . dom c"dsiNumIndices")
      (297501 'end of statement')
      const newSize[297503] "const"(297508 call(297505 call . reallocD c"sizeAs")(297510 'typeof' oldSize))
      (297512 'end of statement')
      if(297983 call _cond_test(297924 call &&(297926 call &&(297928 call &&(297930 call &&(297932 call &&(297934 call &&(297936 call ! disableArrRealloc)(297939 call == rank 1))(297943 call ==(297946 call . reallocD c"lowBound")(297950 call . dom c"dsiLow")))(297953 call ==(297956 call . reallocD c"stride")(297960 call . dom c"dsiStride")))(297963 call >(297966 call . dom c"dsiNumIndices") 0))(297970 call >(297973 call . reallocD c"size") 0))(297978 call _ddata_supports_reallocate data eltType oldSize newSize)))
      {
        if(297521 call _cond_test reportInPlaceRealloc)
        {
          (297515 call writeln "reallocating in-place")
        }
        (297526 call =(297529 call sizesPerDim 0)(297540 call(297537 call .(297535 call(297532 call . reallocD c"dsiDim") 0) c"sizeAs") int[10]))
        (297542 call = data(297546 call _ddata_reallocate(oldDdata = data)(eltType = eltType)(oldSize = oldSize)(newSize = newSize)(subloc = c_sublocid_none)(policy = _resizePolicy)))
        (297560 call initShiftedData)
      }
      {
        unknown initElts[297563] "param"(297565 call isDefaultInitializable eltType)
        (297568 'end of statement')
        unknown copy[297570](297571 'new'(_chpl_manager = unmanaged[183](?))(297575 call DefaultRectangularArr(eltType = eltType)(rank = rank)(idxType = idxType)(strides =(297586 call .(297583 call . reallocD c"_value") c"strides"))(dom =(297591 call . reallocD c"_value"))(initElts = initElts)))
        (297598 'end of statement')
        if(297678 call _cond_test(297675 call ! initElts))
        {
          {
            unknown tmp[297651] "expr temp" "maybe param" "maybe type" "temp"
            (297653 'move' tmp[297651] _resizePolicy)
            if(297658 call _cond_test(297655 call == tmp[297651](297604 call . chpl_ddataResizePolicy c"normalInit")))
            {
              (297609 call halt(297610 call + "internal error: bad resize policy for array of " "non-default-initializable elements"))
            }
            {
              if(297664 call _cond_test(297661 call == tmp[297651](297623 call . chpl_ddataResizePolicy c"skipInit")))
              {
              }
              {
                if(297671 call _cond_test(297668 call == tmp[297651](297631 call . chpl_ddataResizePolicy c"skipInitButClearMem")))
                {
                  (297636 call _ddata_fill(297638 call . copy c"data") eltType 0(297644 call . reallocD c"size"))
                }
              }
            }
          }
        }
        unknown keep[297683](297685 call reallocD(297690 'expand_tuple'(297687 call . dom c"ranges")))
        (297692 'end of statement')
        Forall[297719] {
          induction variables:
            
            unknown i[297693] "index var" "insert auto destroy"
          iterated expressions:
            keep
          shadow variables:
          other variables
            forall body
          {
            unknown dst[297698] "ref var"(297703 call(297700 call . copy c"dsiAccess") i)
            (297706 'end of statement')
            const src[297708] "const" "ref var"(297710 call dsiAccess i)
            (297713 'end of statement')
            (297714 '=' dst src)
          }
        }
        unknown needsDestroy[297723] "param"(297724 'needs auto destroy' eltType)
        (297727 'end of statement')
        if(297839 call _cond_test needsDestroy)
        {
          if(297834 call _cond_test(297824 call <(297827 call . reallocD c"size")(297831 call . dom c"dsiNumIndices")))
          {
            if(297820 call _cond_test(297814 call _deinitElementsIsParallel eltType(297817 call . dom c"dsiNumIndices")))
            {
              Forall[297755] {
                induction variables:
                  
                  unknown i[297731] "index var" "insert auto destroy"
                iterated expressions:
                  dom
                shadow variables:
                other variables
                  forall body
                {
                  if(297749 call _cond_test(297741 call !(297747 call(297744 call . keep c"contains") i)))
                  {
                    (297737 call chpl__autoDestroy(297739 call dsiAccess i))
                  }
                }
              }
            }
            {
              {
                unknown _indexOfInterest[297781] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[297782] "expr temp" "temp"
                (297791 'move' _iterator[297782](297789 call _getIterator dom))
                Defer
                {
                  {
                    (297806 call _freeIterator _iterator[297782])
                  }
                }
                { scopeless type
                  (297796 'move' _indexOfInterest[297781](297793 call iteratorIndex _iterator[297782]))
                }
                ForLoop[297783]
                {
                  unknown i[297759] "index var" "insert auto destroy"
                  (297801 'move' i[297759] _indexOfInterest[297781])
                  {
                    if(297777 call _cond_test(297769 call !(297775 call(297772 call . keep c"contains") i)))
                    {
                      (297765 call chpl__autoDestroy(297767 call dsiAccess i))
                    }
                  }
                  label _continueLabel[297786]
                  _indexOfInterest[297781]
                  _iterator[297782]
                }
                label _breakLabel[297787]
              }
            }
          }
        }
        (297843 call = off(297847 call . copy c"off"))
        (297850 call = blk(297854 call . copy c"blk"))
        (297857 call = str(297861 call . copy c"str"))
        (297864 call = factoredOffs(297868 call . copy c"factoredOffs"))
        (297872 call dsiDestroyArr(deinitElts = 0))
        (297875 call = data(297879 call . copy c"data"))
        if(297915 call _cond_test(297904 call && earlyShiftData(297914 call(297911 call .(297908 call . reallocD c"_value") c"hasUnitStride"))))
        {
          if(297900 call _cond_test(297891 call >(297897 call(297894 call . reallocD c"sizeAs") uint[86]) 0))
          {
            (297884 call = shiftedData(297888 call . copy c"shiftedData"))
          }
        }
        (297921 call chpl__delete copy)
      }
    }
  }
  function DefaultRectangularArr[298194](?).dsiPostReallocate[298000](arg _mt[298004]:_MT[201], arg this[298002]:DefaultRectangularArr[298194](?)) : _unknown[42] "method" "primary method" "method overrides" "no return value for void"
  {
  }
  function DefaultRectangularArr[298194](?).dsiLocalSlice[298009](arg _mt[298015]:_MT[201], arg this[298011]:DefaultRectangularArr[298194](?), arg ranges[298013]:_any[141](?)) : _unknown[42] "method" "primary method" "no return value for void"
  {
    (298019 call halt "all dsiLocalSlice calls on DefaultRectangulars should be handled in ChapelArray.chpl")
  }
  function DefaultRectangularArr[298194](?).dsiGetRAD[298023](arg _mt[298027]:_MT[201], arg this[298025]:DefaultRectangularArr[298194](?)) : _unknown[42] "method" "primary method"
  {
    unknown rad[298031](298033 call _remoteAccessData eltType rank idxType strides)
    (298039 'end of statement')
    (298040 call =(298043 call . rad c"off") off)
    (298047 call =(298050 call . rad c"blk") blk)
    (298054 call =(298057 call . rad c"str") str)
    (298061 call =(298064 call . rad c"origin") 0)
    (298068 call =(298071 call . rad c"factoredOffs") factoredOffs)
    (298075 call =(298078 call . rad c"data") data)
    (298082 call =(298085 call . rad c"shiftedData") shiftedData)
    (298089 return rad)
  }
  function DefaultRectangularArr[298194](?).dsiTargetLocales[298093](arg _mt[298097]:_MT[201], arg this[298095]:DefaultRectangularArr[298194](?)) const ref : _unknown[42] "method" "primary method"
  {
    (298100 return(298102 call chpl_getSingletonLocaleArray(298105 call chpl_localeID_to_locale(298104 '_wide_get_locale' this))))
  }
  function DefaultRectangularArr[298194](?).dsiHasSingleLocalSubdomain[298109](arg _mt[298113]:_MT[201], arg this[298111]:DefaultRectangularArr[298194](?)) param : _unknown[42] "method" "primary method"
  {
    (298116 return 1)
  }
  function DefaultRectangularArr[298194](?).dsiLocalSubdomain[298120](arg _mt[298128]:_MT[201], arg this[298122]:DefaultRectangularArr[298194](?), arg loc[298125] :
  locale[234]) : _unknown[42] "method" "primary method"
  {
    if(298159 call _cond_test(298149 call ==(298156 call chpl_localeID_to_locale(298155 '_wide_get_locale'(298152 call . this c"data"))) loc))
    {
      (298132 return(298134 call _getDomain dom))
    }
    {
      unknown a[298138](298140 call chpl__buildDomainRuntimeType defaultDist rank idxType strides)
      (298146 'end of statement')
      (298147 return a)
    }
  }
  function DefaultRectangularArr[298194](?).dsiLocalSubdomains[298165](arg _mt[298173]:_MT[201], arg this[298167]:DefaultRectangularArr[298194](?), arg loc[298170] :
  locale[234]) : _unknown[42] "iterator fn" "method" "primary method" "no return value for void"
  {
    (298176 yield(298178 call dsiLocalSubdomain loc))
  }
  function DefaultRectangularArr[298194](?).dsiIteratorYieldsLocalElements[298182](arg _mt[298186]:_MT[201], arg this[298184]:DefaultRectangularArr[298194](?)) param : _unknown[42] "method" "primary method" "method overrides"
  {
    (298189 return 1)
  }
  type DefaultRectangularArr[298194](?) unknown idxSignedType[294663] "type variable"(294665 call chpl__signedType(294667 call chpl__idxTypeToIntIdxType idxType)) unknown dom[294671](294672 'to unmanaged class from unknown'(294674 call DefaultRectangularDom(rank = rank)(idxType = idxType)(strides = strides))) unknown off[294684](294685 call * rank idxType) unknown blk[294692](294693 call * rank int[10]) unknown sizesPerDim[294700](294701 call * rank int[10]) unknown str[294708](294709 call * rank idxSignedType) unknown factoredOffs[294716] int[10] unknown data[294721] "alias scope from this" "local field" nil[32](294723 call _ddata eltType) unknown shiftedData[294729] "alias scope from this" "local field"(294731 call _ddata eltType) unknown externFreeFunc[294736](294738 call c_ptr void[4]) unknown externArr[294743] 0 bool unknown _borrowed[294749] 1 bool unknown callPostAlloc[294755] 1 bool unknown deinitElts[294761] 1 bool BaseRectangularArr
  function chpl__serialViewIter1D[298196](arg arr[298198]:_any[141](?), arg viewRange[298200]:_any[141](?)) ref : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown useCache[298207] "param"(298208 call &&(298211 call chpl__isArrayView arr)(298219 call(298216 call . arr c"shouldUseIndexCache")))
    (298221 'end of statement')
    unknown info[298223](298242 IfExpr  useCache then
    { scopeless
      (298226 call . arr c"indexCache")
    } else
    { scopeless(298239 IfExpr (298233 call(298230 call . arr c"isSliceArrayView")) then
      { scopeless
        (298235 call . arr c"arr")
      } else
      { scopeless
        arr
      } )
    } )
    (298246 'end of statement')
    if(298545 call _cond_test(298544 call(298541 call . viewRange c"hasUnitStride")))
    {
      const first[298249] "const"(298254 call(298251 call . info c"getDataIndex")(298256 call . viewRange c"low"))
      (298260 'end of statement')
      const second[298262] "const"(298267 call(298264 call . info c"getDataIndex")(298269 call chpl__intToIdx(298271 call . viewRange c"idxType")(298274 call +(298277 call chpl__idxToInt(298279 call . viewRange c"low")) 1)))
      (298284 'end of statement')
      const step[298286] "const"(298287 call - second first)
      (298292 'end of statement')
      const last[298294] "const"(298295 call + first(298298 call *(298300 call -(298302 call :(298305 call . viewRange c"size")(298309 'typeof' step)) 1) step))
      (298313 'end of statement')
      {
        unknown _indexOfInterest[298337] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[298338] "expr temp" "temp"
        (298347 'move' _iterator[298338](298345 call _getIterator(298317 call chpl_direct_pos_stride_range_iter first last step)))
        Defer
        {
          {
            (298362 call _freeIterator _iterator[298338])
          }
        }
        { scopeless type
          (298352 'move' _indexOfInterest[298337](298349 call iteratorIndex _iterator[298338]))
        }
        ForLoop[298339] order-independent
        {
          unknown i[298314] "index var" "insert auto destroy"
          (298357 'move' i[298314] _indexOfInterest[298337])
          {
            (298328 yield(298333 call(298330 call . info c"theData") i))
          }
          label _continueLabel[298342]
          _indexOfInterest[298337]
          _iterator[298338]
        }
        label _breakLabel[298343]
      }
    }
    {
      unknown vdIntIdxType[298371] "type variable"(298373 call chpl__idxTypeToIntIdxType(298375 call . viewRange c"idxType"))
      const stride[298409] "const"(298410 call :(298413 call . viewRange c"stride") vdIntIdxType)
      const start[298402] "const"(298404 call . viewRange c"first")
      const second[298381] "const"(298386 call(298383 call . info c"getDataIndex")(298388 call chpl__intToIdx(298390 call . viewRange c"idxType")(298393 call +(298396 call . viewRange c"firstAsInt") stride)))
      (298418 'end of statement')
      unknown first[298420](298425 call(298422 call . info c"getDataIndex") start)
      (298428 'end of statement')
      const step[298430] "const"(298438 call(298435 call .(298431 call - second first) c"safeCast") int[10])
      (298441 'end of statement')
      unknown last[298443](298444 call + first(298447 call *(298449 call -(298455 call(298452 call . viewRange c"sizeAs") int[10]) 1) step))
      (298460 'end of statement')
      if(298470 call _cond_test(298466 call < step 0))
      {
        (298461 call <=> last first)
      }
      unknown data[298476](298478 call . info c"theData")
      (298482 'end of statement')
      {
        unknown _indexOfInterest[298499] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[298500] "expr temp" "temp"
        (298509 'move' _iterator[298500](298507 call _getIterator(298518 call chpl_direct_strided_range_iter first last step)))
        Defer
        {
          {
            (298533 call _freeIterator _iterator[298500])
          }
        }
        { scopeless type
          (298523 'move' _indexOfInterest[298499](298520 call iteratorIndex _iterator[298500]))
        }
        ForLoop[298501] order-independent
        {
          unknown i[298483] "index var" "insert auto destroy"
          (298528 'move' i[298483] _indexOfInterest[298499])
          (298492 yield(298494 call data i))
          label _continueLabel[298504]
          _indexOfInterest[298499]
          _iterator[298500]
        }
        label _breakLabel[298505]
      }
    }
  }
  where {
    (298203 call chpl__isDROrDRView arr)
  }
  function chpl__serialViewIter[298552](arg arr[298554]:_any[141](?), arg viewDom[298556]:_any[141](?)) ref : _unknown[42] "iterator fn" "no return value for void"
  {
    unknown useCache[298563] "param"(298564 call &&(298567 call chpl__isArrayView arr)(298573 call(298570 call . arr c"shouldUseIndexCache")))
    (298575 'end of statement')
    unknown info[298577](298596 IfExpr  useCache then
    { scopeless
      (298580 call . arr c"indexCache")
    } else
    { scopeless(298593 IfExpr (298587 call(298584 call . arr c"isSliceArrayView")) then
      { scopeless
        (298589 call . arr c"arr")
      } else
      { scopeless
        arr
      } )
    } )
    (298600 'end of statement')
    if(298762 call _cond_test(298755 call ==(298758 call . arr c"rank") 1))
    {
      {
        unknown _indexOfInterest[298618] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[298619] "expr temp" "temp"
        (298628 'move' _iterator[298619](298626 call _getIterator(298605 call chpl__serialViewIter1D arr(298611 call(298608 call . viewDom c"dsiDim") 0))))
        Defer
        {
          {
            (298643 call _freeIterator _iterator[298619])
          }
        }
        { scopeless type
          (298633 'move' _indexOfInterest[298618](298630 call iteratorIndex _iterator[298619]))
        }
        ForLoop[298620] order-independent
        {
          unknown elem[298602] "index var" "insert auto destroy"
          (298638 'move' elem[298602] _indexOfInterest[298618])
          (298613 yield elem)
          label _continueLabel[298623]
          _indexOfInterest[298618]
          _iterator[298619]
        }
        label _breakLabel[298624]
      }
    }
    {
      if(298751 call _cond_test useCache)
      {
        {
          unknown _indexOfInterest[298674] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[298675] "expr temp" "temp"
          (298684 'move' _iterator[298675](298682 call _getIterator viewDom))
          Defer
          {
            {
              (298699 call _freeIterator _iterator[298675])
            }
          }
          { scopeless type
            (298689 'move' _indexOfInterest[298674](298686 call iteratorIndex _iterator[298675]))
          }
          ForLoop[298676] order-independent
          {
            unknown i[298651] "index var" "insert auto destroy"
            (298694 'move' i[298651] _indexOfInterest[298674])
            {
              const dataIdx[298656] "const"(298661 call(298658 call . info c"getDataIndex") i)
              (298664 'end of statement')
              (298665 yield(298670 call(298667 call . info c"getDataElem") dataIdx))
            }
            label _continueLabel[298679]
            _indexOfInterest[298674]
            _iterator[298675]
          }
          label _breakLabel[298680]
        }
      }
      {
        {
          unknown _indexOfInterest[298718] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[298719] "expr temp" "temp"
          (298728 'move' _iterator[298719](298726 call _getIterator(298710 call chpl__serialViewIterHelper arr viewDom)))
          Defer
          {
            {
              (298743 call _freeIterator _iterator[298719])
            }
          }
          { scopeless type
            (298733 'move' _indexOfInterest[298718](298730 call iteratorIndex _iterator[298719]))
          }
          ForLoop[298720] order-independent
          {
            unknown elem[298707] "index var" "insert auto destroy"
            (298738 'move' elem[298707] _indexOfInterest[298718])
            (298713 yield elem)
            label _continueLabel[298723]
            _indexOfInterest[298718]
            _iterator[298719]
          }
          label _breakLabel[298724]
        }
      }
    }
  }
  where {
    (298559 call chpl__isDROrDRView arr)
  }
  function chpl__serialViewIter[298770](arg arr[298772]:_any[141](?), arg viewDom[298774]:_any[141](?)) ref : _unknown[42] "iterator fn" "no return value for void"
  {
    {
      unknown _indexOfInterest[298786] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[298787] "expr temp" "temp"
      (298796 'move' _iterator[298787](298794 call _getIterator(298780 call chpl__serialViewIterHelper arr viewDom)))
      Defer
      {
        {
          (298811 call _freeIterator _iterator[298787])
        }
      }
      { scopeless type
        (298801 'move' _indexOfInterest[298786](298798 call iteratorIndex _iterator[298787]))
      }
      ForLoop[298788]
      {
        unknown elem[298777] "index var" "insert auto destroy"
        (298806 'move' elem[298777] _indexOfInterest[298786])
        (298783 yield elem)
        label _continueLabel[298791]
        _indexOfInterest[298786]
        _iterator[298787]
      }
      label _breakLabel[298792]
    }
  }
  function chpl__serialViewIterHelper[298820](arg arr[298822]:_any[141](?), arg viewDom[298824]:_any[141](?)) ref : _unknown[42] "iterator fn" "no return value for void"
  {
    {
      unknown _indexOfInterest[298900] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[298901] "expr temp" "temp"
      (298910 'move' _iterator[298901](298908 call _getIterator viewDom))
      Defer
      {
        {
          (298925 call _freeIterator _iterator[298901])
        }
      }
      { scopeless type
        (298915 'move' _indexOfInterest[298900](298912 call iteratorIndex _iterator[298901]))
      }
      ForLoop[298902] order-independent
      {
        unknown i[298827] "index var" "insert auto destroy"
        (298920 'move' i[298827] _indexOfInterest[298900])
        {
          const dataIdx[298832] "const"(298871 IfExpr (298837 call(298834 call . arr c"isReindexArrayView")) then
          { scopeless
            (298839 call chpl_reindexConvertIdx i(298842 call . arr c"dom")(298848 call . arr c"downdom"))
          } else
          { scopeless(298868 IfExpr (298855 call(298852 call . arr c"isRankChangeArrayView")) then
            { scopeless
              (298857 call chpl_rankChangeConvertIdx i(298860 call . arr c"collapsedDim")(298864 call . arr c"idx"))
            } else
            { scopeless
              i
            } )
          } )
          (298875 'end of statement')
          const info[298877] "const"(298886 IfExpr (298879 call chpl__isArrayView arr) then
          { scopeless
            (298882 call . arr c"arr")
          } else
          { scopeless
            arr
          } )
          (298890 'end of statement')
          (298891 yield(298896 call(298893 call . info c"dsiAccess") dataIdx))
        }
        label _continueLabel[298905]
        _indexOfInterest[298900]
        _iterator[298901]
      }
      label _breakLabel[298906]
    }
  }
  function _unknown[42].dsiSerialReadWrite[298934](arg _mt[298942]:_MT[201], arg this[298937] :
  DefaultRectangularDom, arg f[298940]:_any[141](?)) : _unknown[42] throws "method" "no return value for void"
  {
    function rwLiteral[298945](arg lit[298948] :
    string[244]) : _unknown[42] throws "inline" "no return value for void"
    {
      if(298970 call _cond_test(298967 call . f c"_writing"))
      {
        (298956 call(298953 call . f c"writeLiteral") lit)
      }
      {
        (298963 call(298960 call . f c"readLiteral") lit)
      }
    }
    (298979 call rwLiteral "{")
    unknown first[298982] 1
    (298985 'end of statement')
    {
      unknown _indexOfInterest[299048] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[299049] "expr temp" "temp"
      (299058 'move' _iterator[299049](299056 call _getIterator(299065 call chpl_direct_range_iter 0(299062 call - rank 1))))
      Defer
      {
        {
          (299080 call _freeIterator _iterator[299049])
        }
      }
      { scopeless type
        (299070 'move' _indexOfInterest[299048](299067 call iteratorIndex _iterator[299049]))
      }
      ForLoop[299050]
      {
        unknown i[298986] "index var" "insert auto destroy"
        (299075 'move' i[298986] _indexOfInterest[299048])
        {
          if(299008 call _cond_test(299005 call ! first))
          {
            (298997 call rwLiteral ", ")
          }
          {
            (299000 call = first 0)
          }
          if(299042 call _cond_test(299039 call . f c"_writing"))
          {
            (299018 call(299015 call . f c"write")(299020 call ranges i))
          }
          {
            (299023 call =(299026 call ranges i)(299032 call(299029 call . f c"read")(299036 'typeof'(299034 call ranges i))))
          }
        }
        label _continueLabel[299053]
        _indexOfInterest[299048]
        _iterator[299049]
      }
      label _breakLabel[299054]
    }
    (299088 call rwLiteral "}")
  }
  function _unknown[42].dsiSerialWrite[299092](arg _mt[299100]:_MT[201], arg this[299095] :
  DefaultRectangularDom, arg f[299098]:_any[141](?)) : _unknown[42] throws "method" "no return value for void"
  {
    if(299123 call _cond_test chpl_warnUnstable)
    {
      (299117 call compilerWarning "Serialization of rectangular domains with non-default Serializer is unstable, and may change in the future")
    }
    unknown ser[299129](299137 call(299134 call .(299131 call . f c"serializer") c"startList") f rank)
    (299141 'end of statement')
    {
      unknown _indexOfInterest[299159] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[299160] "expr temp" "temp"
      (299169 'move' _iterator[299160](299167 call _getIterator(299175 call chpl_direct_range_iter 0(299173 call chpl__nudgeHighBound rank))))
      Defer
      {
        {
          (299190 call _freeIterator _iterator[299160])
        }
      }
      { scopeless type
        (299180 'move' _indexOfInterest[299159](299177 call iteratorIndex _iterator[299160]))
      }
      ForLoop[299161]
      {
        unknown i[299142] "index var" "insert auto destroy"
        (299185 'move' i[299142] _indexOfInterest[299159])
        (299154 call(299151 call . ser c"writeElement")(299156 call dsiDim i))
        label _continueLabel[299164]
        _indexOfInterest[299159]
        _iterator[299160]
      }
      label _breakLabel[299165]
    }
    (299201 call(299198 call . ser c"endList"))
  }
  where {
    (299102 call &&(299105 call _supportsSerializers f)(299107 call !(299110 call isDefaultSerializerType(299112 call . f c"serializerType"))))
  }
  function _unknown[42].dsiSerialRead[299205](arg _mt[299213]:_MT[201], arg this[299208] :
  DefaultRectangularDom, arg f[299211]:_any[141](?)) : _unknown[42] throws "method" "no return value for void"
  {
    if(299238 call _cond_test chpl_warnUnstable)
    {
      (299232 call compilerWarning "Deserialization of rectangular domains with non-default Deserializer is unstable, and may change in the future")
    }
    unknown des[299244](299252 call(299249 call .(299246 call . f c"deserializer") c"startList") f)
    (299255 'end of statement')
    {
      unknown _indexOfInterest[299279] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[299280] "expr temp" "temp"
      (299289 'move' _iterator[299280](299287 call _getIterator(299295 call chpl_direct_range_iter 0(299293 call chpl__nudgeHighBound rank))))
      Defer
      {
        {
          (299310 call _freeIterator _iterator[299280])
        }
      }
      { scopeless type
        (299300 'move' _indexOfInterest[299279](299297 call iteratorIndex _iterator[299280]))
      }
      ForLoop[299281]
      {
        unknown i[299256] "index var" "insert auto destroy"
        (299305 'move' i[299256] _indexOfInterest[299279])
        (299264 call =(299267 call ranges i)(299273 call(299270 call . des c"readElement")(299277 'typeof'(299275 call ranges i))))
        label _continueLabel[299284]
        _indexOfInterest[299279]
        _iterator[299280]
      }
      label _breakLabel[299285]
    }
    (299321 call(299318 call . des c"endList"))
  }
  where {
    (299215 call &&(299218 call _supportsSerializers f)(299220 call !=(299223 call . f c"deserializerType")(299227 call . IO c"defaultDeserializer")))
  }
  function _unknown[42].doiToString[299325](arg _mt[299331]:_MT[201], arg this[299328] :
  DefaultRectangularDom) : _unknown[42] "method"
  {
    unknown str[299335](299336 call + "{"(299339 call :(299342 call ranges 0) string[244]))
    (299346 'end of statement')
    {
      unknown _indexOfInterest[299368] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[299369] "expr temp" "temp"
      (299378 'move' _iterator[299369](299376 call _getIterator(299384 call chpl_direct_range_iter 1(299382 call chpl__nudgeHighBound rank))))
      Defer
      {
        {
          (299399 call _freeIterator _iterator[299369])
        }
      }
      { scopeless type
        (299389 'move' _indexOfInterest[299368](299386 call iteratorIndex _iterator[299369]))
      }
      ForLoop[299370]
      {
        unknown i[299347] "index var" "insert auto destroy"
        (299394 'move' i[299347] _indexOfInterest[299368])
        (299355 call += str(299358 call + ", "(299361 call :(299364 call ranges i) string[244])))
        label _continueLabel[299373]
        _indexOfInterest[299368]
        _iterator[299369]
      }
      label _breakLabel[299374]
    }
    (299406 call += str "}")
    (299410 return str)
  }
  function _unknown[42].dsiSerialWrite[299414](arg _mt[299422]:_MT[201], arg this[299417] :
  DefaultRectangularDom, arg f[299420]:_any[141](?)) : _unknown[42] throws "method" "no return value for void"
  {
    (299429 call(299426 call . this c"dsiSerialReadWrite") f)
  }
  function _unknown[42].dsiSerialRead[299433](arg _mt[299441]:_MT[201], arg this[299436] :
  DefaultRectangularDom, arg f[299439]:_any[141](?)) : _unknown[42] throws "method" "no return value for void"
  {
    (299448 call(299445 call . this c"dsiSerialReadWrite") f)
  }
  function _unknown[42].dsiSerialReadWrite[299452](arg _mt[299460]:_MT[201], arg this[299455] :
  DefaultRectangularArr, arg f[299458]:_any[141](?)) : _unknown[42] throws "method" "no return value for void"
  {
    (299464 call chpl_serialReadWriteRectangular f this)
  }
  function _unknown[42].dsiSupportsAutoLocalAccess[299469](arg _mt[299475]:_MT[201], arg this[299472] :
  DefaultRectangularDom) param : _unknown[42] "method" "method overrides"
  {
    (299478 return defaultRectangularSupportsAutoLocalAccess)
  }
  function chpl_serialReadWriteRectangular[299482](arg f[299484]:_any[141](?), arg arr[299486]:_any[141](?)) : _unknown[42] throws "no return value for void"
  {
    (299490 call chpl_serialReadWriteRectangular f arr(299494 call . arr c"dom"))
  }
  function chpl_serialReadWriteRectangular[299499](arg f[299501]:_any[141](?), arg arr[299503]:_any[141](?), arg dom[299505]:_any[141](?)) : _unknown[42] throws "last resort" "no return value for void"
  {
    (299509 call chpl_serialReadWriteRectangularHelper f arr dom)
  }
  function _supportsBulkElements[299515](arg f[299517]:_any[141](?), arg arr[299519]:_any[141](?)) param : _unknown[42]
  {
    (299524 'use' Reflection)
    unknown temp[299527](299529 call c_ptr(299531 call . arr c"eltType"))
    (299535 'end of statement')
    if(299580 call _cond_test(299577 call . f c"_writing"))
    {
      (299536 return(299541 call(299538 call . Reflection c"canResolveMethod")(299543 call . f c"serializer") "writeBulkElements" f temp(299551 call : 0 uint[86])))
    }
    {
      (299556 return(299561 call(299558 call . Reflection c"canResolveMethod")(299563 call . f c"deserializer") "readBulkElements" f temp(299571 call : 0 uint[86])))
    }
  }
  { scopeless type
    bool
  }
  function _supportsSerializers[299589](arg f[299591]:_any[141](?)) param : _unknown[42]
  {
    if(299617 call _cond_test(299614 call . f c"_writing"))
    {
      (299595 return(299596 call !=(299599 call . f c"serializerType") nothing))
    }
    {
      (299604 return(299605 call !=(299608 call . f c"deserializerType") nothing))
    }
  }
  { scopeless type
    bool
  }
  function chpl_serialReadWriteRectangularHelper[299626](arg f[299628]:_any[141](?), arg arr[299630]:_any[141](?), arg dom[299632]:_any[141](?)) : _unknown[42] throws "no return value for void"
  {
    unknown rank[299639] "param"(299641 call . arr c"rank")
    (299645 'end of statement')
    unknown idxType[299647] "type variable"(299649 call . arr c"idxType")
    unknown idxSignedType[299654] "type variable"(299656 call chpl__signedType(299658 call chpl__idxTypeToIntIdxType idxType))
    unknown helper[299662](299692 IfExpr (299664 call . f c"_writing") then
    { scopeless
      (299674 call(299671 call .(299668 call . f c"serializer") c"startArray") f(299676 call :(299679 call . dom c"dsiNumIndices") int[10]))
    } else
    { scopeless
      (299690 call(299687 call .(299684 call . f c"deserializer") c"startArray") f)
    } )
    (299696 'end of statement')
    function recursiveArrayReaderWriter[299697](in arg idx[299703] :
    (299699 call * rank idxType), arg dim[299707] =
    0, in arg last[299711] =
    0) : _unknown[42] throws "no return value for void"
    {
      unknown strType[299716] "type variable" idxSignedType
      const makeStridePositive[299720] "const"(299743 IfExpr (299721 call >(299729 call .(299727 call(299724 call . dom c"dsiDim") dim) c"stride") 0) then
      { scopeless
        (299733 call : 1 strType)
      } else
      { scopeless
        (299737 call :(299739 call - 1) strType)
      } )
      (299747 'end of statement')
      if(299773 call _cond_test(299770 call . f c"_writing"))
      {
        (299752 call(299749 call . helper c"startDim")(299759 call .(299757 call(299754 call . dom c"dsiDim") dim) c"size"))
      }
      {
        (299767 call(299764 call . helper c"startDim"))
      }
      if(299984 call _cond_test(299977 call == dim(299980 call - rank 1)))
      {
        {
          unknown _indexOfInterest[299837] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[299838] "expr temp" "temp"
          (299847 'move' _iterator[299838](299845 call _getIterator(299782 call chpl_by(299788 call(299785 call . dom c"dsiDim") dim) makeStridePositive)))
          Defer
          {
            {
              (299869 call _freeIterator _iterator[299838])
            }
          }
          { scopeless type
            (299859 'move' _indexOfInterest[299837](299856 call iteratorIndex _iterator[299838]))
          }
          ForLoop[299839]
          {
            unknown j[299780] "index var" "insert auto destroy"
            (299864 'move' j[299780] _indexOfInterest[299837])
            {
              (299792 call =(299795 call idx dim) j)
              if(299832 call _cond_test(299829 call . f c"_writing"))
              {
                (299802 call(299799 call . helper c"writeElement")(299807 call(299804 call . arr c"dsiAccess") idx))
              }
              {
                (299811 call =(299817 call(299814 call . arr c"dsiAccess") idx)(299823 call(299820 call . helper c"readElement")(299825 call . arr c"eltType")))
              }
            }
            label _continueLabel[299842]
            _indexOfInterest[299837]
            _iterator[299838]
          }
          label _breakLabel[299843]
        }
      }
      {
        {
          unknown _indexOfInterest[299938] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[299939] "expr temp" "temp"
          (299948 'move' _iterator[299939](299946 call _getIterator(299879 call chpl_by(299885 call(299882 call . dom c"dsiDim") dim) makeStridePositive)))
          Defer
          {
            {
              (299970 call _freeIterator _iterator[299939])
            }
          }
          { scopeless type
            (299960 'move' _indexOfInterest[299938](299957 call iteratorIndex _iterator[299939]))
          }
          ForLoop[299940]
          {
            unknown j[299877] "index var" "insert auto destroy"
            (299965 'move' j[299877] _indexOfInterest[299938])
            {
              unknown lastIdx[299890](299897 call .(299895 call(299892 call . dom c"dsiDim") dim) c"last")
              (299901 'end of statement')
              (299902 call =(299905 call idx dim) j)
              (299909 call recursiveArrayReaderWriter idx(dim =(299911 call + dim 1))(last =(299916 call &&(299918 call || last(299921 call == dim 0))(299925 call == j(299934 call .(299932 call(299929 call . dom c"dsiDim") dim) c"high")))))
            }
            label _continueLabel[299943]
            _indexOfInterest[299938]
            _iterator[299939]
          }
          label _breakLabel[299944]
        }
      }
      (299992 call(299989 call . helper c"endDim"))
    }
    (299996 'use' Reflection)
    unknown dummy[299999](300001 call c_ptr(300003 call . arr c"eltType"))
    (300007 'end of statement')
    unknown canResolveBulkElements[300009] "param"(300010 call ||(300016 call(300013 call . Reflection c"canResolveMethod") helper "writeBulkElements" dummy 0)(300025 call(300022 call . Reflection c"canResolveMethod") helper "readBulkElements" dummy 0))
    (300031 'end of statement')
    unknown useBulkElements[300033] "param"(300034 call &&(300036 call &&(300038 call && canResolveBulkElements(300045 call(300042 call . arr c"isDefaultRectangular")))(300046 call !(300049 call chpl__isArrayView arr)))(300052 call _isSimpleIoType(300054 call . arr c"eltType")))
    (300058 'end of statement')
    const len[300060] "const"(300061 call :(300064 call . dom c"dsiNumIndices") int[10])
    (300069 'end of statement')
    unknown dataLoc[300071](300089 IfExpr (300072 call > len 0) then
    { scopeless
      (300086 call chpl_localeID_to_locale(300085 '_wide_get_locale'(300080 call(300077 call . arr c"dsiAccess")(300082 call . dom c"dsiFirst"))))
    } else
    { scopeless
      here
    } )
    (300093 'end of statement')
    if(300176 call _cond_test(300152 call &&(300154 call &&(300156 call && useBulkElements(300163 call(300160 call . arr c"isDataContiguous") dom))(300165 call > len 0))(300169 call ==(300172 call . f c"_home") dataLoc)))
    {
      unknown ptr[300096](300098 call c_addrOf(300103 call(300100 call . arr c"dsiAccess")(300105 call . dom c"dsiFirst")))
      (300109 'end of statement')
      if(300134 call _cond_test(300131 call . f c"_writing"))
      {
        (300116 call(300113 call . helper c"writeBulkElements") ptr len)
      }
      {
        (300126 call(300123 call . helper c"readBulkElements") ptr len)
      }
    }
    {
      const zeroTup[300142] "const"(300143 call * rank idxType)
      (300148 'end of statement')
      (300150 call recursiveArrayReaderWriter zeroTup)
    }
    (300184 call(300181 call . helper c"endArray"))
  }
  where {
    (299635 call _supportsSerializers f)
  }
  function chpl_serialReadWriteRectangularHelper[300188](arg f[300190]:_any[141](?), arg arr[300192]:_any[141](?), arg dom[300194]:_any[141](?)) : _unknown[42] throws "no return value for void"
  {
    unknown rank[300198] "param"(300200 call . arr c"rank")
    (300204 'end of statement')
    unknown idxType[300206] "type variable"(300208 call . arr c"idxType")
    unknown idxSignedType[300213] "type variable"(300215 call chpl__signedType(300217 call chpl__idxTypeToIntIdxType idxType))
    unknown eltType[300221] "type variable"(300223 call . arr c"eltType")
    const isNative[300228] "const"(300229 call :(300235 call(300232 call . f c"styleElement") QIO_STYLE_ELEMENT_IS_NATIVE_BYTE_ORDER) bool)
    (300239 'end of statement')
    function rwLiteral[300240](arg lit[300243] :
    string[244]) : _unknown[42] throws "inline" "no return value for void"
    {
      if(300265 call _cond_test(300262 call . f c"_writing"))
      {
        (300251 call(300248 call . f c"writeLiteral") lit)
      }
      {
        (300258 call(300255 call . f c"readLiteral") lit)
      }
    }
    function rwSpaces[300273](arg dim[300276] :
    int[10]) : _unknown[42] throws "no return value for void"
    {
      {
        unknown _indexOfInterest[300290] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[300291] "expr temp" "temp"
        (300300 'move' _iterator[300291](300298 call _getIterator(300304 call chpl_direct_range_iter 1 dim)))
        Defer
        {
          {
            (300319 call _freeIterator _iterator[300291])
          }
        }
        { scopeless type
          (300309 'move' _indexOfInterest[300290](300306 call iteratorIndex _iterator[300291]))
        }
        ForLoop[300292]
        {
          unknown i[300280] "index var" "insert auto destroy"
          (300314 'move' i[300280] _indexOfInterest[300290])
          {
            (300288 call rwLiteral " ")
          }
          label _continueLabel[300295]
          _indexOfInterest[300290]
          _iterator[300291]
        }
        label _breakLabel[300296]
      }
    }
    function recursiveArrayReaderWriter[300328](in arg idx[300334] :
    (300330 call * rank idxType), arg dim[300338] =
    0, in arg last[300342] =
    0) : _unknown[42] throws "no return value for void"
    {
      unknown binary[300347](300352 call(300349 call . f c"_binary"))
      (300354 'end of statement')
      unknown arrayStyle[300356](300361 call(300358 call . f c"styleElement") QIO_STYLE_ELEMENT_ARRAY)
      (300364 'end of statement')
      unknown isspace[300366](300367 call &&(300369 call == arrayStyle QIO_ARRAY_FORMAT_SPACE)(300373 call ! binary))
      (300377 'end of statement')
      unknown isjson[300379](300380 call &&(300382 call == arrayStyle QIO_ARRAY_FORMAT_JSON)(300386 call ! binary))
      (300390 'end of statement')
      unknown ischpl[300392](300393 call &&(300395 call == arrayStyle QIO_ARRAY_FORMAT_CHPL)(300399 call ! binary))
      (300403 'end of statement')
      unknown strType[300405] "type variable" idxSignedType
      unknown makeStridePositive[300409](300432 IfExpr (300410 call >(300418 call .(300416 call(300413 call . dom c"dsiDim") dim) c"stride") 0) then
      { scopeless
        (300422 call : 1 strType)
      } else
      { scopeless
        (300426 call :(300428 call - 1) strType)
      } )
      (300436 'end of statement')
      if(300470 call _cond_test(300466 call || isjson ischpl))
      {
        if(300461 call _cond_test(300454 call != dim(300457 call - rank 1)))
        {
          (300440 call rwLiteral "[\n")
          (300445 call rwSpaces(300446 call + dim 1))
        }
        {
          (300451 call rwLiteral "[")
        }
      }
      if(300771 call _cond_test(300764 call == dim(300767 call - rank 1)))
      {
        unknown first[300476] 1
        (300479 'end of statement')
        if(300499 call _cond_test(300492 call && debugDefaultDist(300496 call . f c"_writing")))
        {
          (300484 call(300481 call . f c"writeln")(300489 call(300486 call . dom c"dsiDim") dim))
        }
        {
          unknown _indexOfInterest[300595] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[300596] "expr temp" "temp"
          (300605 'move' _iterator[300596](300603 call _getIterator(300506 call chpl_by(300512 call(300509 call . dom c"dsiDim") dim) makeStridePositive)))
          Defer
          {
            {
              (300627 call _freeIterator _iterator[300596])
            }
          }
          { scopeless type
            (300617 'move' _indexOfInterest[300595](300614 call iteratorIndex _iterator[300596]))
          }
          ForLoop[300597]
          {
            unknown j[300504] "index var" "insert auto destroy"
            (300622 'move' j[300504] _indexOfInterest[300595])
            {
              if(300546 call _cond_test first)
              {
                (300516 call = first 0)
              }
              {
                if(300539 call _cond_test isspace)
                {
                  (300522 call rwLiteral " ")
                }
                {
                  if(300533 call _cond_test(300529 call || isjson ischpl))
                  {
                    (300526 call rwLiteral ", ")
                  }
                }
              }
              (300552 call =(300555 call idx dim) j)
              if(300589 call _cond_test(300586 call . f c"_writing"))
              {
                (300562 call(300559 call . f c"write")(300567 call(300564 call . arr c"dsiAccess") idx))
              }
              {
                (300570 call =(300576 call(300573 call . arr c"dsiAccess") idx)(300582 call(300579 call . f c"read") eltType))
              }
            }
            label _continueLabel[300600]
            _indexOfInterest[300595]
            _iterator[300596]
          }
          label _breakLabel[300601]
        }
      }
      {
        {
          unknown _indexOfInterest[300725] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[300726] "expr temp" "temp"
          (300735 'move' _iterator[300726](300733 call _getIterator(300637 call chpl_by(300643 call(300640 call . dom c"dsiDim") dim) makeStridePositive)))
          Defer
          {
            {
              (300757 call _freeIterator _iterator[300726])
            }
          }
          { scopeless type
            (300747 'move' _indexOfInterest[300725](300744 call iteratorIndex _iterator[300726]))
          }
          ForLoop[300727]
          {
            unknown j[300635] "index var" "insert auto destroy"
            (300752 'move' j[300635] _indexOfInterest[300725])
            {
              unknown lastIdx[300648](300655 call .(300653 call(300650 call . dom c"dsiDim") dim) c"last")
              (300659 'end of statement')
              (300660 call =(300663 call idx dim) j)
              (300667 call recursiveArrayReaderWriter idx(dim =(300669 call + dim 1))(last =(300674 call &&(300676 call || last(300679 call == dim 0))(300683 call == j(300692 call .(300690 call(300687 call . dom c"dsiDim") dim) c"high")))))
              if(300721 call _cond_test(300717 call || isjson ischpl))
              {
                if(300713 call _cond_test(300709 call != j lastIdx))
                {
                  (300699 call rwLiteral ",\n")
                  (300704 call rwSpaces(300705 call + dim 1))
                }
              }
            }
            label _continueLabel[300730]
            _indexOfInterest[300725]
            _iterator[300726]
          }
          label _breakLabel[300731]
        }
      }
      if(300829 call _cond_test isspace)
      {
        if(300789 call _cond_test(300780 call &&(300782 call ! last)(300785 call != dim 0)))
        {
          (300778 call rwLiteral "\n")
        }
      }
      {
        if(300824 call _cond_test(300820 call || isjson ischpl))
        {
          if(300815 call _cond_test(300808 call != dim(300811 call - rank 1)))
          {
            (300796 call rwLiteral "\n")
            (300799 call rwSpaces dim)
            (300802 call rwLiteral "]")
          }
          {
            (300805 call rwLiteral "]")
          }
        }
      }
    }
    if(301049 call _cond_test(301011 call &&(301013 call &&(301015 call &&(301017 call &&(301019 call &&(301025 call(301022 call . arr c"isDefaultRectangular"))(301026 call !(301029 call chpl__isArrayView arr)))(301032 call _isSimpleIoType(301034 call . arr c"eltType")))(301041 call(301038 call . f c"_binary"))) isNative)(301047 call(301044 call . arr c"isDataContiguous") dom)))
    {
      const elemSize[300838] "const"(300840 call c_sizeof(300842 call . arr c"eltType"))
      (300846 'end of statement')
      if(300896 call _cond_test boundsChecking)
      {
        unknown rw[300849](300860 IfExpr (300851 call . f c"_writing") then
        { scopeless
          "write"
        } else
        { scopeless
          "read"
        } )
        (300864 'end of statement')
        (300866 call assert(300867 call <=(300869 call *(300871 call :(300874 call . dom c"dsiNumIndices") uint[86])(300878 call : elemSize uint[86]))(300882 call :(300885 call max c_ssize_t) uint[86])) "length of array to " rw " is greater than c_ssize_t can hold")
      }
      const len[300901] "const"(300903 call . dom c"dsiNumIndices")
      (300907 'end of statement')
      const src[300909] "const"(300911 call . arr c"theData")
      (300915 'end of statement')
      const idx[300917] "const"(300922 call(300919 call . arr c"getDataIndex")(300924 call . dom c"dsiLow"))
      (300928 'end of statement')
      const size[300930] "const"(300931 call *(300933 call : len c_ssize_t)(300937 call : elemSize c_ssize_t))
      (300942 'end of statement')
      Try
      {
        {
          if(300986 call _cond_test(300983 call . f c"_writing"))
          {
            (300949 call(300946 call . f c"writeBinary")(300951 call c_ptrTo(300960 call(300953 call _ddata_shift(300955 call . arr c"eltType") src idx) 0)) size)
          }
          {
            (300968 call(300965 call . f c"readBinary")(300970 call c_ptrTo(300979 call(300972 call _ddata_shift(300974 call . arr c"eltType") src idx) 0)) size)
          }
        }
      }
      Catch err
      {
        unknown tmp[395629] "temp"(395632 'current error')
        unknown err[300995](395639 'new'(395638 call _owned[238](?)(395635 'to non nilable class' tmp[395629])))
        {
          (300992 'throw' err)
        }
      }
    }
    {
      const zeroTup[301001] "const"(301002 call * rank idxType)
      (301007 'end of statement')
      (301009 call recursiveArrayReaderWriter zeroTup)
    }
  }
  function _unknown[42].dsiSerialWrite[301055](arg _mt[301063]:_MT[201], arg this[301058] :
  DefaultRectangularArr, arg f[301061]:_any[141](?)) : _unknown[42] throws "method" "no return value for void"
  {
    (301067 call dsiSerialReadWrite f)
  }
  function _unknown[42].dsiSerialRead[301071](arg _mt[301079]:_MT[201], arg this[301074] :
  DefaultRectangularArr, arg f[301077]:_any[141](?)) : _unknown[42] throws "method" "no return value for void"
  {
    (301083 call dsiSerialReadWrite f)
  }
  function _unknown[42].isDataContiguous[301087](arg _mt[301097]:_MT[201], arg this[301090] :
  DefaultRectangularArr, arg dom[301094] :
  _domain) : _unknown[42] "inline" "method"
  {
    (301100 return(301102 call isDataContiguous(301104 call . dom c"_value")))
  }
  function _unknown[42].isDataContiguous[301109](arg _mt[301119]:_MT[201], arg this[301112] :
  DefaultRectangularArr, arg dom[301116] :
  range) : _unknown[42] "inline" "method"
  {
    if(301129 call _cond_test(301125 call != rank 1))
    {
      (301122 return 0)
    }
    if(301146 call _cond_test debugDefaultDistBulkTransfer)
    {
      (301135 call chpl_debug_writeln "isDataContiguous(): off=" off " blk=" blk)
    }
    if(301163 call _cond_test(301154 call !=(301157 call blk(301158 call - rank 1)) 1))
    {
      (301151 return 0)
    }
    if(301175 call _cond_test debugDefaultDistBulkTransfer)
    {
      (301169 call chpl_debug_writeln "\tYES!")
    }
    (301180 return 1)
  }
  function _unknown[42].isDataContiguous[301184](arg _mt[301192]:_MT[201], arg this[301187] :
  DefaultRectangularArr, arg dom[301190]:_any[141](?)) : _unknown[42] "method"
  {
    if(301203 call _cond_test debugDefaultDistBulkTransfer)
    {
      (301196 call chpl_debug_writeln "isDataContiguous(): off=" off " blk=" blk)
    }
    if(301220 call _cond_test(301211 call !=(301214 call blk(301215 call - rank 1)) 1))
    {
      (301208 return 0)
    }
    if(301320 call _cond_test(301316 call >= rank 2))
    {
      const domDims[301227] "const"(301232 call(301229 call . dom c"dsiDims"))
      (301234 'end of statement')
      {
        unknown dim[301235] "index var" 0
        unknown tmp[301281] "maybe param" "temp"
        (301292 'move' tmp[301281](301290 call chpl_compute_low_param_loop_bound 0(301240 call - rank 2)))
        unknown tmp[301282] "maybe param" "temp"
        (301302 'move' tmp[301282](301300 call chpl_compute_high_param_loop_bound 0(301297 call - rank 2)))
        unknown tmp[301283] "maybe param" "temp"
        (301305 'move' tmp[301283](301246 call - 1))
        ParamForLoop[301307]
        { dim[301235] tmp[301281] tmp[301282] tmp[301283]
          if(301276 call _cond_test(301252 call !=(301255 call blk dim)(301257 call *(301260 call blk(301261 call + dim 1))(301274 call(301271 call .(301266 call domDims(301267 call + dim 1)) c"sizeAs") int[10]))))
          {
            (301249 return 0)
          }
        }
        label _unused_continueLabel[301285]
        label _breakLabel[301284]
      }
    }
    if(301329 call _cond_test debugDefaultDistBulkTransfer)
    {
      (301325 call chpl_debug_writeln "\tYES!")
    }
    (301334 return 1)
  }
  function _canDoSimpleTransfer[301338](arg A[301340]:_any[141](?), arg aView[301342]:_any[141](?), arg B[301344]:_any[141](?), arg bView[301346]:_any[141](?)) : _unknown[42] "private"
  {
    if(301382 call _cond_test(301364 call ||(301366 call !(301372 call(301369 call . A c"isDataContiguous") aView))(301374 call !(301380 call(301377 call . B c"isDataContiguous") bView))))
    {
      if(301357 call _cond_test debugDefaultDistBulkTransfer)
      {
        (301351 call chpl_debug_writeln "isDataContiguous return False")
      }
      (301362 return 0)
    }
    (301386 return 1)
  }
  function _canDoComplexTransfer[301390](arg A[301392]:_any[141](?), arg aView[301394]:_any[141](?), arg B[301396]:_any[141](?), arg bView[301398]:_any[141](?)) : _unknown[42] "private"
  {
    (301401 return(301402 call && useBulkTransferStride(301406 call chpl_allStridesArePositive A aView B bView)))
  }
  function _unknown[42].doiCanBulkTransferRankChange[301413](arg _mt[301419]:_MT[201], arg this[301416] :
  DefaultRectangularArr) param : _unknown[42] "method" "method overrides"
  {
    (301422 return 1)
  }
  function _unknown[42].doiBulkTransferToKnown[301426](arg _mt[301440]:_MT[201], arg this[301429] :
  DefaultRectangularArr, arg srcDom[301432]:_any[141](?), arg destClass[301435] :
  DefaultRectangularArr, arg destDom[301438]:_any[141](?)) : _unknown[42] "method"
  {
    (301444 return(301446 call transferHelper destClass destDom this srcDom))
  }
  { scopeless type
    bool
  }
  function _unknown[42].doiBulkTransferFromKnown[301454](arg _mt[301468]:_MT[201], arg this[301457] :
  DefaultRectangularArr, arg destDom[301460]:_any[141](?), arg srcClass[301463] :
  DefaultRectangularArr, arg srcDom[301466]:_any[141](?)) : _unknown[42] "method"
  {
    (301472 return(301474 call transferHelper this destDom srcClass srcDom))
  }
  { scopeless type
    bool
  }
  function transferHelper[301482](arg A[301484]:_any[141](?), arg aView[301486]:_any[141](?), arg B[301488]:_any[141](?), arg bView[301490]:_any[141](?)) : _unknown[42] "private"
  {
    if(301577 call _cond_test(301545 call &&(301547 call &&(301549 call &&(301551 call ==(301554 call . A c"rank")(301558 call . B c"rank"))(301565 call(301562 call . aView c"hasUnitStride")))(301570 call(301567 call . bView c"hasUnitStride")))(301572 call _canDoSimpleTransfer A aView B bView)))
    {
      if(301502 call _cond_test debugDefaultDistBulkTransfer)
      {
        (301496 call chpl_debug_writeln "Performing simple DefaultRectangular transfer")
      }
      (301508 call _simpleTransfer A aView B bView)
    }
    {
      if(301541 call _cond_test(301536 call _canDoComplexTransfer A aView B bView))
      {
        if(301521 call _cond_test debugDefaultDistBulkTransfer)
        {
          (301515 call chpl_debug_writeln "Performing complex DefaultRectangular transfer")
        }
        (301527 call complexTransfer A aView B bView)
      }
      {
        (301533 return 0)
      }
    }
    (301582 return 1)
  }
  { scopeless type
    bool
  }
  function _isLocSublocSameAsHere[301587](arg locid[301589]:_any[141](?), arg sublocid[301591]:_any[141](?)) : _unknown[42] "inline" "private"
  {
    (301595 'use' ChplConfig)
    if(301607 call _cond_test(301600 call != locid(301604 call . here c"id")))
    {
      (301597 return 0)
    }
    if(301619 call _cond_test(301615 call != CHPL_LOCALE_MODEL "gpu"))
    {
      (301612 return 1)
    }
    const heresublocid[301625] "const"(301627 call chpl_task_getRequestedSubloc)
    (301629 'end of statement')
    (301630 return(301631 call ||(301633 call &&(301635 call < sublocid 0)(301639 call < heresublocid 0))(301643 call == sublocid heresublocid)))
  }
  function _simpleTransfer[301649](arg A[301651]:_any[141](?), arg aView[301653]:_any[141](?), arg B[301655]:_any[141](?), arg bView[301657]:_any[141](?)) : _unknown[42] "private" "no return value for void"
  {
    (301661 'use' ChplConfig)
    unknown rank[301664] "param"(301666 call . A c"rank")
    (301670 'end of statement')
    unknown idxType[301672] "type variable"(301674 call . A c"idxType")
    unknown Alo[301679](301680 call * rank(301684 call . aView c"idxType"))
    (301688 'end of statement')
    if(301780 call _cond_test(301778 call isDomain aView))
    {
      const Adims[301691] "const"(301696 call(301693 call . aView c"dims"))
      (301698 'end of statement')
      {
        unknown i[301699] "index var" 0
        unknown tmp[301720] "maybe param" "temp"
        (301732 'move' tmp[301720](301730 call chpl_compute_low_param_loop_bound 0(301702 call - rank 1)))
        unknown tmp[301721] "maybe param" "temp"
        (301742 'move' tmp[301721](301740 call chpl_compute_high_param_loop_bound 0(301737 call - rank 1)))
        unknown tmp[301722] "maybe param" "temp"
        (301745 'move' tmp[301722] 1)
        ParamForLoop[301747]
        { i[301699] tmp[301720] tmp[301721] tmp[301722]
          (301708 call =(301711 call Alo i)(301716 call .(301714 call Adims i) c"first"))
        }
        label _unused_continueLabel[301724]
        label _breakLabel[301723]
      }
    }
    {
      if(301773 call _cond_test(301771 call isRange aView))
      {
        (301757 call =(301760 call Alo 0)(301763 call . aView c"first"))
      }
      {
        (301768 call compilerError "Unexpected type")
      }
    }
    unknown Blo[301786](301787 call * rank(301791 call . B c"idxType"))
    (301795 'end of statement')
    if(301883 call _cond_test(301881 call isDomain bView))
    {
      const Bdims[301798] "const"(301803 call(301800 call . bView c"dims"))
      (301805 'end of statement')
      {
        unknown i[301806] "index var" 0
        unknown tmp[301827] "maybe param" "temp"
        (301839 'move' tmp[301827](301837 call chpl_compute_low_param_loop_bound 0(301809 call - rank 1)))
        unknown tmp[301828] "maybe param" "temp"
        (301849 'move' tmp[301828](301847 call chpl_compute_high_param_loop_bound 0(301844 call - rank 1)))
        unknown tmp[301829] "maybe param" "temp"
        (301852 'move' tmp[301829] 1)
        ParamForLoop[301854]
        { i[301806] tmp[301827] tmp[301828] tmp[301829]
          (301815 call =(301818 call Blo i)(301823 call .(301821 call Bdims i) c"first"))
        }
        label _unused_continueLabel[301831]
        label _breakLabel[301830]
      }
    }
    {
      if(301876 call _cond_test(301874 call isRange bView))
      {
        (301864 call =(301867 call Blo 0)(301870 call . bView c"first"))
      }
    }
    const len[301889] "const"(301902 call(301899 call .(301894 call(301891 call . aView c"sizeAs")(301896 call . aView c"chpl_integralIdxType")) c"safeCast") c_size_t)
    (301905 'end of statement')
    if(301912 call _cond_test(301908 call == len 0))
    {
      (301906 return _void[46])
    }
    if(301958 call _cond_test debugBulkTransfer)
    {
      function sizeof[301918](arg x[301920]:_any[141](?)) : _unknown[42] "extern" "local args" "no fn body" "fn synchronization free"
      {
      }
      { scopeless type
        int[10]
      }
      const elemSize[301927] "const"(301929 call sizeof(301931 call . B c"eltType"))
      (301935 'end of statement')
      (301937 call chpl_debug_writeln "In DefaultRectangular._simpleTransfer():" " Alo=" Alo ", Blo=" Blo ", len=" len ", elemSize=" elemSize)
    }
    const Aidx[301963] "const"(301968 call(301965 call . A c"getDataIndex") Alo)
    (301971 'end of statement')
    const Adata[301973] "const"(301975 call _ddata_shift(301977 call . A c"eltType")(301981 call . A c"theData") Aidx)
    (301986 'end of statement')
    const Alocid[301988] "const"(301993 '_wide_get_node' Adata)
    (301995 'end of statement')
    const Asublocid[301997] "const"(302013 IfExpr (301998 call != CHPL_LOCALE_MODEL "gpu") then
    { scopeless
      c_sublocid_any
    } else
    { scopeless
      (302004 call chpl_sublocFromLocaleID(302012 call(302009 call .(302007 call chpl_localeID_to_locale(302006 '_wide_get_locale' Adata)) c"chpl_localeid")))
    } )
    (302017 'end of statement')
    const Bidx[302019] "const"(302024 call(302021 call . B c"getDataIndex") Blo)
    (302027 'end of statement')
    const Bdata[302029] "const"(302031 call _ddata_shift(302033 call . B c"eltType")(302037 call . B c"theData") Bidx)
    (302042 'end of statement')
    const Blocid[302044] "const"(302049 '_wide_get_node' Bdata)
    (302051 'end of statement')
    const Bsublocid[302053] "const"(302069 IfExpr (302054 call != CHPL_LOCALE_MODEL "gpu") then
    { scopeless
      c_sublocid_any
    } else
    { scopeless
      (302060 call chpl_sublocFromLocaleID(302068 call(302065 call .(302063 call chpl_localeID_to_locale(302062 '_wide_get_locale' Bdata)) c"chpl_localeid")))
    } )
    (302073 'end of statement')
    unknown t[302075] "type variable"(302077 call . A c"eltType")
    const elemsizeInBytes[302082] "const"(302097 IfExpr (302084 call isNumericType t) then
    { scopeless
      (302087 call numBytes t)
    } else
    { scopeless
      (302095 call(302092 call .(302090 call c_sizeof t) c"safeCast") int[10])
    } )
    (302101 'end of statement')
    const isSizeAboveThreshold[302103] "const"(302104 call >=(302106 call *(302108 call : len int[10]) elemsizeInBytes) parallelAssignThreshold)
    (302115 'end of statement')
    const isFullyLocal[302117] "const"(302118 call &&(302120 call == Alocid Blocid)(302124 call == Asublocid Bsublocid))
    (302129 'end of statement')
    unknown doParallelAssign[302131](302132 call && isSizeAboveThreshold isFullyLocal)
    (302137 'end of statement')
    if(302189 call _cond_test(302185 call || enableParallelGetsInAssignment enableParallelPutsInAssignment))
    {
      if(302181 call _cond_test(302175 call && isSizeAboveThreshold(302178 call ! isFullyLocal)))
      {
        if(302170 call _cond_test(302163 call && enableParallelPutsInAssignment(302167 call _isLocSublocSameAsHere Blocid Bsublocid)))
        {
          (302141 call = doParallelAssign 1)
        }
        {
          if(302159 call _cond_test(302150 call && enableParallelGetsInAssignment(302153 call !(302156 call _isLocSublocSameAsHere Blocid Bsublocid))))
          {
            (302146 call = doParallelAssign 1)
          }
        }
      }
    }
    if(302218 call _cond_test doParallelAssign)
    {
      (302195 call _simpleParallelTransferHelper A B Adata Bdata Alocid Asublocid Blocid Bsublocid len)
    }
    {
      (302207 call _simpleTransferHelper A B Adata Bdata Alocid Asublocid Blocid Bsublocid len)
    }
  }
  function _simpleParallelTransferHelper[302224](arg A[302226]:_any[141](?), arg B[302228]:_any[141](?), arg Adata[302230]:_any[141](?), arg Bdata[302232]:_any[141](?), arg Alocid[302234]:_any[141](?), arg Asublocid[302236]:_any[141](?), arg Blocid[302238]:_any[141](?), arg Bsublocid[302240]:_any[141](?), arg len[302242]:_any[141](?)) : _unknown[42] "private" "no return value for void"
  {
    const numTasks[302246] "const"(302252 IfExpr (302247 'task_get_serial') then
    { scopeless
      1
    } else
    { scopeless
      (302250 call _computeNumChunks len)
    } )
    (302256 'end of statement')
    const lenPerTask[302258] "const"(302259 call /(302261 call : len int[10]) numTasks)
    (302267 'end of statement')
    if(302285 call _cond_test(302278 call && debugDefaultDistBulkTransfer(302281 call > numTasks 1)))
    {
      (302269 call chpl_debug_writeln "\tWill do parallel transfer with " numTasks " tasks")
    }
    {
      unknown tmpIter[393567] "expr temp" "maybe ref" "no copy" "temp"
      (393570 'move' tmpIter[393567](302292 call #(302295 call chpl_build_low_bounded_range 0) numTasks))
      unknown isBounded[393751] "maybe param" "temp"
      (393757 'move' isBounded[393751](393753 call chpl_supportsBoundedCoforall tmpIter[393567] 0))
      if isBounded[393751]
      {
        const _coforallCount[393620] "const" "end count" "temp"
        (393688 'move' _coforallCount[393620](393685 call _endCountAlloc 1))
        unknown numTasks[393621] "temp"
        (393672 'move' numTasks[393621](393668 call chpl_boundedCoforallSize tmpIter[393567] 0))
        (393663 call _upEndCount _coforallCount[393620] 1 numTasks[393621])
        (393660 call chpl_resetTaskSpawn numTasks[393621])
        unknown _indexOfInterest[393628] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[393629] "expr temp" "temp"
        (393638 'move' _iterator[393629](393636 call _getIterator tmpIter[393567]))
        Defer
        {
          {
            (393653 call _freeIterator _iterator[393629])
          }
        }
        { scopeless type
          (393643 'move' _indexOfInterest[393628](393640 call iteratorIndex _iterator[393629]))
        }
        ForLoop[393630]
        {
          unknown tid[393574] "coforall index var" "index var" "insert auto destroy"
          (393648 'move' tid[393574] _indexOfInterest[393628])
          {
            {
              const myOffset[393578] "const"(393580 call * tid lenPerTask)
              (393584 'end of statement')
              const myLen[393586] "const"(393604 IfExpr (393588 call == tid(393591 call - numTasks 1)) then
              { scopeless
                (393596 call -(393598 call : len int[10]) myOffset)
              } else
              { scopeless
                lenPerTask
              } )
              (393606 'end of statement')
              (393608 call _simpleTransferHelper A B Adata Bdata Alocid Asublocid Blocid Bsublocid myLen myOffset)
            }
            (393623 call _downEndCount _coforallCount[393620] nil[32])
            (393622 'coforall loop')
          }
          label _continueLabel[393633]
          _indexOfInterest[393628]
          _iterator[393629]
        }
        label _breakLabel[393634]
        Defer
        {
          {
            (393675 call _endCountFree _coforallCount[393620])
          }
        }
        (393680 call _waitEndCount _coforallCount[393620] 1 numTasks[393621])
      }
      {
        const _coforallCount[393692] "const" "end count" "temp"
        (393748 'move' _coforallCount[393692](393745 call _endCountAlloc 1))
        unknown _indexOfInterest[393700] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[393701] "expr temp" "temp"
        (393710 'move' _iterator[393701](393708 call _getIterator tmpIter[393567]))
        Defer
        {
          {
            (393725 call _freeIterator _iterator[393701])
          }
        }
        { scopeless type
          (393715 'move' _indexOfInterest[393700](393712 call iteratorIndex _iterator[393701]))
        }
        ForLoop[393702]
        {
          unknown tid[302290] "coforall index var" "index var" "insert auto destroy"
          (393720 'move' tid[302290] _indexOfInterest[393700])
          (393732 call _upEndCount _coforallCount[393692] 1)
          {
            {
              const myOffset[302300] "const"(302301 call * tid lenPerTask)
              (302306 'end of statement')
              const myLen[302308] "const"(302324 IfExpr (302309 call == tid(302312 call - numTasks 1)) then
              { scopeless
                (302316 call -(302318 call : len int[10]) myOffset)
              } else
              { scopeless
                lenPerTask
              } )
              (302328 'end of statement')
              (302330 call _simpleTransferHelper A B Adata Bdata Alocid Asublocid Blocid Bsublocid myLen myOffset)
            }
            (393695 call _downEndCount _coforallCount[393692] nil[32])
            (393694 'coforall loop')
          }
          label _continueLabel[393705]
          _indexOfInterest[393700]
          _iterator[393701]
        }
        label _breakLabel[393706]
        Defer
        {
          {
            (393736 call _endCountFree _coforallCount[393692])
          }
        }
        (393741 call _waitEndCount _coforallCount[393692] 1)
      }
    }
  }
  function _simpleTransferHelper[302344](arg A[302346]:_any[141](?), arg B[302348]:_any[141](?), arg Adata[302350]:_any[141](?), arg Bdata[302352]:_any[141](?), arg Alocid[302354]:_any[141](?), arg Asublocid[302356]:_any[141](?), arg Blocid[302358]:_any[141](?), arg Bsublocid[302360]:_any[141](?), arg len[302362]:_any[141](?), arg offset[302365] =
  0) : _unknown[42] "private" "no return value for void"
  {
    if(302375 call _cond_test(302371 call == Adata Bdata))
    {
      (302369 return _void[46])
    }
    const srcRef[302381] "const" "ref var"(302383 call Bdata offset)
    (302386 'end of statement')
    unknown dstRef[302388] "ref var"(302390 call Adata offset)
    (302393 'end of statement')
    if(302489 call _cond_test(302486 call _isLocSublocSameAsHere Alocid Asublocid))
    {
      if(302403 call _cond_test debugDefaultDistBulkTransfer)
      {
        (302396 call chpl_debug_writeln "\tlocal get() from " Blocid)
      }
      (302408 'chpl_comm_array_get' dstRef Blocid Bsublocid srcRef len)
    }
    {
      if(302480 call _cond_test(302477 call _isLocSublocSameAsHere Blocid Bsublocid))
      {
        if(302423 call _cond_test debugDefaultDistBulkTransfer)
        {
          (302416 call chpl_debug_writeln "\tlocal put() to " Alocid)
        }
        (302428 'chpl_comm_array_put' srcRef Alocid Asublocid dstRef len)
      }
      {
        {
          const tmp[302468] "const" "temp"
          (302469 'move' tmp[302468](302466 'deref'(302465 '_wide_get_locale'(302436 call chpl_localeID_to_locale(302435 '_wide_get_locale' Adata)))))
          {
            if(302454 call _cond_test debugDefaultDistBulkTransfer)
            {
              (302440 call chpl_debug_writeln "\tremote get() on "(302445 call . here c"id") " from " Blocid)
            }
            (302459 'chpl_comm_array_get' dstRef Blocid Bsublocid srcRef len)
          }
          (302472 'elided on block' 0 tmp[302468])
        }
      }
    }
  }
  function complexTransfer[302496](arg A[302498]:_any[141](?), arg aView[302500]:_any[141](?), arg B[302502]:_any[141](?), arg bView[302504]:_any[141](?)) : _unknown[42] "private" "no return value for void"
  {
    (302508 'use' ChplConfig)
    const Alocid[302511] "const"(302519 '_wide_get_node'(302513 call . A c"data"))
    (302521 'end of statement')
    const Asublocid[302523] "const"(302542 IfExpr (302524 call != CHPL_LOCALE_MODEL "gpu") then
    { scopeless
      c_sublocid_any
    } else
    { scopeless
      (302530 call chpl_sublocFromLocaleID(302541 call(302538 call .(302536 call chpl_localeID_to_locale(302535 '_wide_get_locale'(302532 call . A c"data"))) c"chpl_localeid")))
    } )
    (302546 'end of statement')
    const Blocid[302548] "const"(302556 '_wide_get_node'(302550 call . B c"data"))
    (302558 'end of statement')
    const Bsublocid[302560] "const"(302579 IfExpr (302561 call != CHPL_LOCALE_MODEL "gpu") then
    { scopeless
      c_sublocid_any
    } else
    { scopeless
      (302567 call chpl_sublocFromLocaleID(302578 call(302575 call .(302573 call chpl_localeID_to_locale(302572 '_wide_get_locale'(302569 call . B c"data"))) c"chpl_localeid")))
    } )
    (302583 'end of statement')
    if(302655 call _cond_test(302641 call &&(302643 call !(302646 call _isLocSublocSameAsHere Alocid Asublocid))(302649 call !(302652 call _isLocSublocSameAsHere Blocid Bsublocid))))
    {
      if(302600 call _cond_test debugDefaultDistBulkTransfer)
      {
        (302587 call chpl_debug_writeln "BulkTransferStride: Both arrays on different locale, moving to locale of destination: LOCALE"(302598 '_wide_get_node'(302592 call . A c"data")))
      }
      {
        const tmp[302622] "const" "temp"
        (302623 'move' tmp[302622](302620 'deref'(302619 '_wide_get_locale'(302605 call . A c"data"))))
        (302609 call complexTransferCore A Alocid Asublocid aView B Blocid Bsublocid bView)
        (302626 'elided on block' 0 tmp[302622])
      }
    }
    {
      (302632 call complexTransferCore A Alocid Asublocid aView B Blocid Bsublocid bView)
    }
  }
  function complexTransferCore[302661](arg LHS[302663]:_any[141](?), arg LHSlocid[302665]:_any[141](?), arg LHSsublocid[302667]:_any[141](?), arg LViewDom[302669]:_any[141](?), arg RHS[302671]:_any[141](?), arg RHSlocid[302673]:_any[141](?), arg RHSsublocid[302675]:_any[141](?), arg RViewDom[302677]:_any[141](?)) : _unknown[42] "private"
  {
    unknown minRank[302681] "param"(302683 call min(302685 call . LHS c"rank")(302689 call . RHS c"rank"))
    (302693 'end of statement')
    unknown idxType[302695] "type variable"(302697 call . LHS c"idxType")
    unknown chpl_integralIdxType[302702] "type variable"(302704 call . LHS c"chpl_integralIdxType")
    if(302742 call _cond_test debugDefaultDistBulkTransfer)
    {
      (302710 call writeln "Transferring views :" LViewDom " <-- " RViewDom)
      (302720 call writeln "Original domains   :"(302731 call(302728 call .(302725 call . LHS c"dom") c"dsiDims")) " <-- "(302740 call(302737 call .(302734 call . RHS c"dom") c"dsiDims")))
    }
    const LeftDims[302747] "const"(302760 IfExpr (302749 call isDomain LViewDom) then
    { scopeless
      (302755 call(302752 call . LViewDom c"dims"))
    } else
    { scopeless
      (302758 call _build_tuple LViewDom)
    } )
    (302764 'end of statement')
    const RightDims[302766] "const"(302779 IfExpr (302768 call isDomain RViewDom) then
    { scopeless
      (302774 call(302771 call . RViewDom c"dims"))
    } else
    { scopeless
      (302777 call _build_tuple RViewDom)
    } )
    (302783 'end of statement')
    const tmp[302795] "const" "temp"(302792 call bulkCommComputeActiveDims LeftDims RightDims)
    (302805 call _check_tuple_var_decl tmp[302795] 3)
    const LeftActives[302785] "const"(302796 call tmp[302795] 0)
    const RightActives[302787] "const"(302799 call tmp[302795] 1)
    const inferredRank[302789] "const"(302802 call tmp[302795] 2)
    (302810 'end of statement')
    unknown DimSizes[302812](302828 call chpl__buildArrayRuntimeType(302817 call chpl__ensureDomainExpr(302815 call chpl_build_bounded_range 1 inferredRank))(302827 'typeof'(302825 call(302822 call .(302820 call LeftDims 0) c"sizeAs") int[10])))
    (302831 'end of statement')
    {
      unknown _indexOfInterest[302862] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[302863] "expr temp" "temp"
      (302872 'move' _iterator[302863](302870 call _getIterator(302876 call chpl_direct_range_iter 1 inferredRank)))
      Defer
      {
        {
          (302891 call _freeIterator _iterator[302863])
        }
      }
      { scopeless type
        (302881 'move' _indexOfInterest[302862](302878 call iteratorIndex _iterator[302863]))
      }
      ForLoop[302864]
      {
        unknown i[302832] "index var" "insert auto destroy"
        (302886 'move' i[302832] _indexOfInterest[302862])
        {
          const dimIdx[302840] "const"(302842 call LeftActives(302843 call - i 1))
          (302848 'end of statement')
          (302849 call =(302852 call DimSizes i)(302860 call(302857 call .(302855 call LeftDims dimIdx) c"sizeAs") int[10]))
        }
        label _continueLabel[302867]
        _indexOfInterest[302862]
        _iterator[302863]
      }
      label _breakLabel[302868]
    }
    if(302906 call _cond_test debugDefaultDistBulkTransfer)
    {
      (302900 call writeln "inferredRank = " inferredRank)
    }
    (302911 call assert(302912 call <= inferredRank minRank) "complex DR transfer: computed rank greater than minimum rank!")
    unknown type_tmp[302929] "temp" "type variable"(302922 call * minRank int[10])
    unknown LBlk[302928] type_tmp[302929]
    unknown RBlk[302921] type_tmp[302929]
    (302934 'end of statement')
    {
      {
        unknown _indexOfInterest[303050] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[303051] "expr temp" "temp"
        (303060 'move' _iterator[303051](303058 call _getIterator(303071 call chpl_direct_strided_range_iter 1 inferredRank(303067 call - 1))))
        Defer
        {
          {
            (303086 call _freeIterator _iterator[303051])
          }
        }
        { scopeless type
          (303076 'move' _indexOfInterest[303050](303073 call iteratorIndex _iterator[303051]))
        }
        ForLoop[303052]
        {
          unknown idx[302936] "index var" "insert auto destroy"
          (303081 'move' idx[302936] _indexOfInterest[303050])
          {
            const li[302949] "const"(302951 call LeftActives(302952 call - idx 1))
            (302957 'end of statement')
            (302958 call =(302961 call LBlk(302962 call - idx 1))(302966 call *(302972 call(302969 call . LHS c"blk") li)(302997 call(302994 call .(302974 call /(302979 call .(302977 call LeftDims li) c"stride")(302991 call .(302989 call(302986 call .(302983 call . LHS c"dom") c"dsiDim") li) c"stride")) c"safeCast") int[10])))
            const ri[303000] "const"(303002 call RightActives(303003 call - idx 1))
            (303008 'end of statement')
            (303009 call =(303012 call RBlk(303013 call - idx 1))(303017 call *(303023 call(303020 call . RHS c"blk") ri)(303048 call(303045 call .(303025 call /(303030 call .(303028 call RightDims ri) c"stride")(303042 call .(303040 call(303037 call .(303034 call . RHS c"dom") c"dsiDim") ri) c"stride")) c"safeCast") int[10])))
          }
          label _continueLabel[303055]
          _indexOfInterest[303050]
          _iterator[303051]
        }
        label _breakLabel[303056]
      }
    }
    if(303107 call _cond_test debugDefaultDistBulkTransfer)
    {
      (303095 call writeln "LBlk = " LBlk)
      (303101 call writeln "RBlk = " RBlk)
    }
    unknown stridelevels[303112] 0
    (303115 'end of statement')
    unknown countDom[303117](303127 call chpl__buildDomainExpr(303124 call chpl_build_bounded_range 1(303120 call + inferredRank 1)) 0)
    (303131 'end of statement')
    unknown count[303133](303138 call chpl__buildArrayRuntimeType(303135 call chpl__ensureDomainExpr countDom) c_size_t)
    (303141 'end of statement')
    {
      unknown _indexOfInterest[303150] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[303151] "expr temp" "temp"
      (303160 'move' _iterator[303151](303158 call _getIterator count))
      Defer
      {
        {
          (303175 call _freeIterator _iterator[303151])
        }
      }
      { scopeless type
        (303165 'move' _indexOfInterest[303150](303162 call iteratorIndex _iterator[303151]))
      }
      ForLoop[303152]
      {
        unknown c[303142] "index var" "insert auto destroy"
        (303170 'move' c[303142] _indexOfInterest[303150])
        (303145 call = c 1)
        label _continueLabel[303155]
        _indexOfInterest[303150]
        _iterator[303151]
      }
      label _breakLabel[303156]
    }
    unknown strideDom[303183](303190 call chpl__buildDomainExpr(303187 call chpl_build_bounded_range 1 inferredRank) 0)
    (303194 'end of statement')
    unknown type_tmp[303207] "temp" "type variable"(303202 call chpl__buildArrayRuntimeType(303199 call chpl__ensureDomainExpr strideDom) c_size_t)
    unknown dstStride[303206] type_tmp[303207]
    unknown srcStride[303197] type_tmp[303207]
    (303212 'end of statement')
    if(303276 call _cond_test(303256 call ||(303258 call >(303261 call LBlk(303262 call - inferredRank 1)) 1)(303267 call >(303270 call RBlk(303271 call - inferredRank 1)) 1)))
    {
      (303214 call += stridelevels 1)
      (303218 call =(303221 call count stridelevels) 1)
      (303224 call =(303227 call dstStride stridelevels)(303238 call(303235 call .(303230 call LBlk(303231 call - inferredRank 1)) c"safeCast") c_size_t))
      (303240 call =(303243 call srcStride stridelevels)(303254 call(303251 call .(303246 call RBlk(303247 call - inferredRank 1)) c"safeCast") c_size_t))
    }
    {
      unknown _indexOfInterest[303372] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[303373] "expr temp" "temp"
      (303382 'move' _iterator[303373](303380 call _getIterator(303393 call chpl_direct_strided_range_iter 2 inferredRank(303389 call - 1))))
      Defer
      {
        {
          (303408 call _freeIterator _iterator[303373])
        }
      }
      { scopeless type
        (303398 'move' _indexOfInterest[303372](303395 call iteratorIndex _iterator[303373]))
      }
      ForLoop[303374]
      {
        unknown i[303280] "index var" "insert auto destroy"
        (303403 'move' i[303280] _indexOfInterest[303372])
        {
          (303292 call *=(303295 call count(303296 call + stridelevels 1))(303306 call(303303 call .(303301 call DimSizes i) c"safeCast") c_size_t))
          const bothReuse[303309] "const"(303310 call &&(303313 call canReuseStride LBlk i stridelevels count dstStride)(303320 call canReuseStride RBlk i stridelevels count srcStride))
          (303327 'end of statement')
          if(303368 call _cond_test(303365 call ! bothReuse))
          {
            (303329 call += stridelevels 1)
            (303333 call =(303336 call dstStride stridelevels)(303347 call(303344 call .(303339 call LBlk(303340 call - i 2)) c"safeCast") c_size_t))
            (303349 call =(303352 call srcStride stridelevels)(303363 call(303360 call .(303355 call RBlk(303356 call - i 2)) c"safeCast") c_size_t))
          }
        }
        label _continueLabel[303377]
        _indexOfInterest[303372]
        _iterator[303373]
      }
      label _breakLabel[303378]
    }
    (303415 call *=(303418 call count(303419 call + stridelevels 1))(303429 call(303426 call .(303424 call DimSizes 1) c"safeCast") c_size_t))
    (303432 call assert(303433 call <= stridelevels inferredRank) "BulkTransferStride: stride levels greater than rank.")
    if(303473 call _cond_test(303469 call == stridelevels 0))
    {
      (303441 call assert(303442 call ==(303445 call count 1)(303451 call(303448 call . LViewDom c"sizeAs") c_size_t)) "BulkTransferStride: bulk-count incorrect for stride level of 0: "(303457 call count 1) " != "(303466 call(303463 call . LViewDom c"sizeAs") c_size_t))
    }
    (303478 call = countDom(303490 call chpl__buildDomainExpr(303487 call chpl_build_bounded_range 1(303483 call + stridelevels 1)) 1))
    (303492 call = strideDom(303501 call chpl__buildDomainExpr(303498 call chpl_build_bounded_range 1 stridelevels) 1))
    function getFirstIdx[303503](arg dims[303505]:_any[141](?)) : _unknown[42]
    {
      unknown ret[303509](303510 call *(303513 call . dims c"size")(303519 call .(303517 call dims 0) c"idxType"))
      (303523 'end of statement')
      {
        unknown i[303524] "index var" 0
        unknown tmp[303566] "maybe param" "temp"
        (303578 'move' tmp[303566](303576 call chpl_compute_low_param_loop_bound 0(303527 call -(303530 call . dims c"size") 1)))
        unknown tmp[303567] "maybe param" "temp"
        (303591 'move' tmp[303567](303589 call chpl_compute_high_param_loop_bound 0(303583 call -(303585 call . dims c"size") 1)))
        unknown tmp[303568] "maybe param" "temp"
        (303594 'move' tmp[303568] 1)
        ParamForLoop[303596]
        { i[303524] tmp[303566] tmp[303567] tmp[303568]
          (303536 call =(303539 call ret i)(303562 IfExpr (303541 call <(303546 call .(303544 call dims i) c"stride") 0) then
          { scopeless
            (303553 call .(303551 call dims i) c"last")
          } else
          { scopeless
            (303559 call .(303557 call dims i) c"first")
          } ))
        }
        label _unused_continueLabel[303570]
        label _breakLabel[303569]
      }
      (303605 return ret)
    }
    const LFirst[303610] "const"(303612 call getFirstIdx LeftDims)
    (303615 'end of statement')
    const RFirst[303617] "const"(303619 call getFirstIdx RightDims)
    (303622 'end of statement')
    (303624 call complexTransferComm LHS LHSlocid LHSsublocid RHS RHSlocid RHSsublocid(303631 call : stridelevels(303635 call int[10] 32)) dstStride srcStride count LFirst RFirst)
  }
  function complexTransferComm[303644](arg A[303646]:_any[141](?), arg Alocid[303648]:_any[141](?), arg Asublocid[303650]:_any[141](?), arg B[303652]:_any[141](?), arg Blocid[303654]:_any[141](?), arg Bsublocid[303656]:_any[141](?), arg stridelevels[303661] :
  (303659 call int[10] 32), arg dstStride[303664]:_any[141](?), arg srcStride[303666]:_any[141](?), arg count[303668]:_any[141](?), arg AFirst[303670]:_any[141](?), arg BFirst[303672]:_any[141](?)) : _unknown[42] "private" "no return value for void"
  {
    (303676 'use' ChplConfig)
    if(303733 call _cond_test debugDefaultDistBulkTransfer)
    {
      (303680 call chpl_debug_writeln "BulkTransferStride with values:\n"(303695 'try!-expr'(303690 call(303687 call . "\tLocale        = %\?\n" c"format")(303692 call . here c"id")))(303704 'try!-expr'(303702 call(303699 call . "\tStride levels = %\?\n" c"format") stridelevels))(303713 'try!-expr'(303711 call(303708 call . "\tdstStride     = %\?\n" c"format") dstStride))(303722 'try!-expr'(303720 call(303717 call . "\tsrcStride     = %\?\n" c"format") srcStride))(303731 'try!-expr'(303729 call(303726 call . "\tcount         = %\?" c"format") count)))
    }
    const AO[303738] "const"(303743 call(303740 call . A c"getDataIndex") AFirst(getShifted = 0))
    (303748 'end of statement')
    const BO[303750] "const"(303755 call(303752 call . B c"getDataIndex") BFirst(getShifted = 0))
    (303760 'end of statement')
    const dest[303762] "const"(303764 call . A c"data")
    (303768 'end of statement')
    const src[303770] "const"(303772 call . B c"data")
    (303776 'end of statement')
    const dststr[303778] "const"(303783 call .(303780 call . dstStride c"_value") c"data")
    (303787 'end of statement')
    const srcstr[303789] "const"(303794 call .(303791 call . srcStride c"_value") c"data")
    (303798 'end of statement')
    const cnt[303800] "const"(303805 call .(303802 call . count c"_value") c"data")
    (303809 'end of statement')
    if(303932 call _cond_test(303929 call _isLocSublocSameAsHere Alocid Asublocid))
    {
      const srclocale[303812] "const" Blocid
      (303815 'end of statement')
      const src_subloc[303817] "const" Bsublocid
      (303820 'end of statement')
      if(303829 call _cond_test debugBulkTransfer)
      {
        (303823 call chpl_debug_writeln "BulkTransferStride: On LHS - GET from " srclocale)
      }
      (303833 'chpl_comm_get_strd'(303835 call dest AO)(303838 call dststr 0) srclocale src_subloc(303843 call src BO)(303846 call srcstr 0)(303849 call cnt 0) stridelevels)
    }
    {
      const destlocale[303854] "const" Alocid
      (303857 'end of statement')
      const dest_subloc[303859] "const" Asublocid
      (303862 'end of statement')
      if(303893 call _cond_test debugDefaultDistBulkTransfer)
      {
        (303865 call assert(303866 call ==(303872 '_wide_get_node' src)(303874 call . here c"id")) "BulkTransferStride: Expected to be on "(303884 '_wide_get_node' src) ", actually on "(303889 call . here c"id"))
      }
      if(303905 call _cond_test debugBulkTransfer)
      {
        (303899 call chpl_debug_writeln "BulkTransferStride: On RHS - PUT to " destlocale)
      }
      (303909 'chpl_comm_put_strd'(303911 call dest AO)(303914 call dststr 0) destlocale dest_subloc(303919 call src BO)(303922 call srcstr 0)(303925 call cnt 0) stridelevels)
    }
  }
  function _unknown[42].isDefaultRectangular[303938](arg _mt[303944]:_MT[201], arg this[303941] :
  DefaultRectangularArr) param : _unknown[42] "method" "method overrides"
  {
    (303947 return 1)
  }
  function _unknown[42].isDefaultRectangular[303951](arg _mt[303957]:_MT[201], arg this[303954] :
  DefaultRectangularArr) param : _unknown[42] "method" "method overrides"
  {
    (303960 return 1)
  }
  unknown debugDRScan[303965] "config" "param" 0
  (303968 'end of statement')
  function _unknown[42].doiScan[303969](arg _mt[303979]:_MT[201], arg this[303972] :
  DefaultRectangularArr, arg op[303975]:_any[141](?), arg dom[303977]:_any[141](?)) : _unknown[42] "method"
  {
    (303992 'use' RangeChunk)
    unknown resType[303995] "type variable"(304001 'typeof'(304000 call(303997 call . op c"generate")))
    unknown res[304004](304009 call(304006 call . dom c"buildArray") resType(initElts =(304011 call !(304014 call isPOD resType))))
    (304018 'end of statement')
    unknown tmp[304038] "temp"(304034 call(304031 call . this c"chpl__preScan") op res dom)
    (304048 call _check_tuple_var_decl tmp[304038] 4)
    unknown numTasks[304020](304039 call tmp[304038] 0)
    unknown rngs[304022](304042 call tmp[304038] 1)
    unknown state[304024](304045 call tmp[304038] 2)
    (304053 'end of statement')
    if(304071 call _cond_test(304067 call > numTasks 1))
    {
      (304061 call(304058 call . this c"chpl__postScan") op res numTasks rngs state)
    }
    if(304084 call _cond_test(304082 call isPOD resType))
    {
      (304079 call(304076 call . res c"dsiElementInitializationComplete"))
    }
    (304091 call chpl__delete op)
    (304094 return res)
  }
  where {
    (303981 call &&(303983 call == rank 1)(303988 call chpl__scanStateResTypesMatch op))
  }
  function _unknown[42].doiOptimizedSwap[304099](arg _mt[304110]:_MT[201], arg this[304102] :
  DefaultRectangularArr, arg other[304107] :
  (304106 'typeof' this)) : _unknown[42] "method"
  {
    unknown size1[304114](304115 call * rank int[10])
    (304120 'end of statement')
    {
      unknown _indexOfInterest[304164] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[304165] "expr temp" "temp"
      (304215 'move' _iterator[304165](304151 call _build_tuple(304188 call _getIterator(304204 call chpl_direct_counted_range_iter 0(304194 call .(304196 call .(304198 call . this c"dom") c"ranges") c"size")))(304213 call _getIterator(304207 call .(304209 call . this c"dom") c"ranges"))))
      Defer
      {
        {
          (304243 call _freeIterator _iterator[304165])
        }
      }
      { scopeless type
        (304220 'move' _indexOfInterest[304164](304217 call iteratorIndex _iterator[304165]))
      }
      ForLoop[304166]
      {
        (304225 call _check_tuple_var_decl _indexOfInterest[304164] 2)
        unknown i[304122] "index var" "insert auto destroy"
        (304232 'move' i[304122](304229 call _indexOfInterest[304164] 0))
        unknown r[304124] "index var" "insert auto destroy"
        (304238 'move' r[304124](304235 call _indexOfInterest[304164] 1))
        (304152 call =(304155 call size1 i)(304161 call(304158 call . r c"sizeAs") int[10]))
        label _continueLabel[304169]
        _indexOfInterest[304164]
        _iterator[304165]
      }
      label _breakLabel[304170]
    }
    unknown size2[304251](304252 call * rank int[10])
    (304257 'end of statement')
    {
      unknown _indexOfInterest[304301] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[304302] "expr temp" "temp"
      (304352 'move' _iterator[304302](304288 call _build_tuple(304325 call _getIterator(304341 call chpl_direct_counted_range_iter 0(304331 call .(304333 call .(304335 call . other c"dom") c"ranges") c"size")))(304350 call _getIterator(304344 call .(304346 call . other c"dom") c"ranges"))))
      Defer
      {
        {
          (304380 call _freeIterator _iterator[304302])
        }
      }
      { scopeless type
        (304357 'move' _indexOfInterest[304301](304354 call iteratorIndex _iterator[304302]))
      }
      ForLoop[304303]
      {
        (304362 call _check_tuple_var_decl _indexOfInterest[304301] 2)
        unknown i[304259] "index var" "insert auto destroy"
        (304369 'move' i[304259](304366 call _indexOfInterest[304301] 0))
        unknown r[304261] "index var" "insert auto destroy"
        (304375 'move' r[304261](304372 call _indexOfInterest[304301] 1))
        (304289 call =(304292 call size2 i)(304298 call(304295 call . r c"sizeAs") int[10]))
        label _continueLabel[304306]
        _indexOfInterest[304301]
        _iterator[304302]
      }
      label _breakLabel[304307]
    }
    if(304452 call _cond_test(304436 call &&(304438 call ==(304442 call chpl_localeID_to_locale(304441 '_wide_get_locale' this))(304446 call chpl_localeID_to_locale(304445 '_wide_get_locale' other)))(304448 call == size1 size2)))
    {
      if(304410 call _cond_test debugOptimizedSwap)
      {
        (304390 call writeln "DefaultRectangular doing optimized swap. Domains: "(304398 call .(304395 call . this c"dom") c"ranges") " "(304406 call .(304403 call . other c"dom") c"ranges"))
      }
      (304414 call <=>(304417 call . this c"data")(304421 call . other c"data"))
      (304428 call(304425 call . this c"initShiftedData"))
      (304433 call(304430 call . other c"initShiftedData"))
      (304434 return 1)
    }
    if(304478 call _cond_test debugOptimizedSwap)
    {
      (304458 call writeln "DefaultRectangular doing unoptimized swap. Domains: "(304466 call .(304463 call . this c"dom") c"ranges") " "(304474 call .(304471 call . other c"dom") c"ranges"))
    }
    (304482 return 0)
  }
  function _unknown[42].doiOptimizedSwap[304486](arg _mt[304494]:_MT[201], arg this[304489] :
  DefaultRectangularArr, arg other[304492]:_any[141](?)) : _unknown[42] "last resort" "method"
  {
    (304499 call writeln "DefaultRectangularArr doing unoptimized swap. Type mismatch")
    (304503 return 0)
  }
  where {
    debugOptimizedSwap
  }
  function _unknown[42].chpl__preScan[304508](arg _mt[304526]:_MT[201], arg this[304511] :
  DefaultRectangularArr, arg op[304514]:_any[141](?), ref arg res[304521] :
  (304519 call chpl__buildArrayRuntimeType nil[32] unknown resType[304517]), arg dom[304524]:_any[141](?)) : _unknown[42] "method"
  {
    (304531 'import' RangeChunk)
    const rng[304533] "const"(304538 call(304535 call . dom c"dim") 0)
    (304541 'end of statement')
    const numTasks[304543] "const"(304554 IfExpr (304544 'task_get_serial') then
    { scopeless
      1
    } else
    { scopeless
      (304547 call _computeNumChunks(304552 call(304549 call . rng c"sizeAs") int[10]))
    } )
    (304558 'end of statement')
    const rngs[304560] "const"(304565 call(304562 call . RangeChunk c"chunks") rng numTasks)
    (304569 'end of statement')
    if(304585 call _cond_test debugDRScan)
    {
      (304572 call writeln "Using " numTasks " tasks")
      (304579 call writeln "Whose chunks are: " rngs)
    }
    unknown state[304590](304598 call chpl__buildArrayRuntimeType(304595 call chpl__ensureDomainExpr(304592 call . rngs c"_dom")) resType)
    (304601 'end of statement')
    {
      unknown tmpIter[393761] "expr temp" "maybe ref" "no copy" "temp"
      (393764 'move' tmpIter[393761](304605 call . rngs c"_dom"))
      unknown isBounded[393995] "maybe param" "temp"
      (394001 'move' isBounded[393995](393997 call chpl_supportsBoundedCoforall tmpIter[393761] 0))
      if isBounded[393995]
      {
        const _coforallCount[393864] "const" "end count" "temp"
        (393932 'move' _coforallCount[393864](393929 call _endCountAlloc 1))
        unknown numTasks[393865] "temp"
        (393916 'move' numTasks[393865](393912 call chpl_boundedCoforallSize tmpIter[393761] 0))
        (393907 call _upEndCount _coforallCount[393864] 1 numTasks[393865])
        (393904 call chpl_resetTaskSpawn numTasks[393865])
        unknown _indexOfInterest[393872] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[393873] "expr temp" "temp"
        (393882 'move' _iterator[393873](393880 call _getIterator tmpIter[393761]))
        Defer
        {
          {
            (393897 call _freeIterator _iterator[393873])
          }
        }
        { scopeless type
          (393887 'move' _indexOfInterest[393872](393884 call iteratorIndex _iterator[393873]))
        }
        ForLoop[393874]
        {
          unknown tid[393768] "coforall index var" "index var" "insert auto destroy"
          (393892 'move' tid[393768] _indexOfInterest[393872])
          {
            {
              const current[393772] "const" resType
              (393775 'end of statement')
              const myop[393777] "const"(393782 call(393779 call . op c"clone"))
              (393784 'end of statement')
              {
                unknown _indexOfInterest[393786] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[393788] "expr temp" "temp"
                (393790 'move' _iterator[393788](393793 call _getIterator(393795 call rngs tid)))
                Defer
                {
                  {
                    (393799 call _freeIterator _iterator[393788])
                  }
                }
                { scopeless type
                  (393803 'move' _indexOfInterest[393786](393806 call iteratorIndex _iterator[393788]))
                }
                ForLoop[393808]
                {
                  unknown i[393811] "index var" "insert auto destroy"
                  (393813 'move' i[393811] _indexOfInterest[393786])
                  {
                    unknown elem[393818] "ref var"(393820 call dsiAccess i)
                    (393823 'end of statement')
                    (393828 call(393825 call . myop c"accumulate") elem)
                    (393831 call =(393833 call res i)(393839 call(393836 call . myop c"generate")))
                  }
                  label _continueLabel[393840]
                  _indexOfInterest[393786]
                  _iterator[393788]
                }
                label _breakLabel[393842]
              }
              (393845 call =(393847 call state tid)(393850 call res(393852 call .(393854 call rngs tid) c"highBound")))
              (393858 call chpl__delete myop)
            }
            (393867 call _downEndCount _coforallCount[393864] nil[32])
            (393866 'coforall loop')
            (393860 'actuals list' tiMarkRef[283] state)
          }
          label _continueLabel[393877]
          _indexOfInterest[393872]
          _iterator[393873]
        }
        label _breakLabel[393878]
        Defer
        {
          {
            (393919 call _endCountFree _coforallCount[393864])
          }
        }
        (393924 call _waitEndCount _coforallCount[393864] 1 numTasks[393865])
      }
      {
        const _coforallCount[393936] "const" "end count" "temp"
        (393992 'move' _coforallCount[393936](393989 call _endCountAlloc 1))
        unknown _indexOfInterest[393944] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[393945] "expr temp" "temp"
        (393954 'move' _iterator[393945](393952 call _getIterator tmpIter[393761]))
        Defer
        {
          {
            (393969 call _freeIterator _iterator[393945])
          }
        }
        { scopeless type
          (393959 'move' _indexOfInterest[393944](393956 call iteratorIndex _iterator[393945]))
        }
        ForLoop[393946]
        {
          unknown tid[304602] "coforall index var" "index var" "insert auto destroy"
          (393964 'move' tid[304602] _indexOfInterest[393944])
          (393976 call _upEndCount _coforallCount[393936] 1)
          {
            {
              const current[304618] "const" resType
              (304621 'end of statement')
              const myop[304623] "const"(304628 call(304625 call . op c"clone"))
              (304630 'end of statement')
              {
                unknown _indexOfInterest[304660] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[304661] "expr temp" "temp"
                (304670 'move' _iterator[304661](304668 call _getIterator(304634 call rngs tid)))
                Defer
                {
                  {
                    (304685 call _freeIterator _iterator[304661])
                  }
                }
                { scopeless type
                  (304675 'move' _indexOfInterest[304660](304672 call iteratorIndex _iterator[304661]))
                }
                ForLoop[304662]
                {
                  unknown i[304631] "index var" "insert auto destroy"
                  (304680 'move' i[304631] _indexOfInterest[304660])
                  {
                    unknown elem[304638] "ref var"(304640 call dsiAccess i)
                    (304643 'end of statement')
                    (304648 call(304645 call . myop c"accumulate") elem)
                    (304650 call =(304653 call res i)(304659 call(304656 call . myop c"generate")))
                  }
                  label _continueLabel[304665]
                  _indexOfInterest[304660]
                  _iterator[304661]
                }
                label _breakLabel[304666]
              }
              (304692 call =(304695 call state tid)(304698 call res(304702 call .(304700 call rngs tid) c"highBound")))
              (304707 call chpl__delete myop)
            }
            (393939 call _downEndCount _coforallCount[393936] nil[32])
            (393938 'coforall loop')
            (304608 'actuals list' tiMarkRef[283] state)
          }
          label _continueLabel[393949]
          _indexOfInterest[393944]
          _iterator[393945]
        }
        label _breakLabel[393950]
        Defer
        {
          {
            (393980 call _endCountFree _coforallCount[393936])
          }
        }
        (393985 call _waitEndCount _coforallCount[393936] 1)
      }
    }
    if(304725 call _cond_test debugDRScan)
    {
      (304713 call writeln "res = " res)
      (304719 call writeln "state = " state)
    }
    const metaop[304730] "const"(304735 call(304732 call . op c"clone"))
    (304737 'end of statement')
    unknown next[304739](304742 call . metaop c"identity") resType
    (304746 'end of statement')
    {
      unknown _indexOfInterest[304771] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[304772] "expr temp" "temp"
      (304781 'move' _iterator[304772](304779 call _getIterator(304750 call . rngs c"_dom")))
      Defer
      {
        {
          (304796 call _freeIterator _iterator[304772])
        }
      }
      { scopeless type
        (304786 'move' _indexOfInterest[304771](304783 call iteratorIndex _iterator[304772]))
      }
      ForLoop[304773]
      {
        unknown i[304747] "index var" "insert auto destroy"
        (304791 'move' i[304747] _indexOfInterest[304771])
        {
          (304754 call <=>(304757 call state i) next)
          (304766 call(304763 call . metaop c"accumulateOntoState") next(304769 call state i))
        }
        label _continueLabel[304776]
        _indexOfInterest[304771]
        _iterator[304772]
      }
      label _breakLabel[304777]
    }
    (304805 call chpl__delete metaop)
    if(304814 call _cond_test debugDRScan)
    {
      (304809 call writeln "state = " state)
    }
    (304819 return(304825 call _build_tuple numTasks rngs state next))
  }
  function _unknown[42].chpl__postScan[304829](arg _mt[304845]:_MT[201], arg this[304832] :
  DefaultRectangularArr, arg op[304835]:_any[141](?), ref arg res[304837]:_any[141](?), arg numTasks[304839]:_any[141](?), arg rngs[304841]:_any[141](?), arg state[304843]:_any[141](?)) : _unknown[42] "method" "no return value for void"
  {
    {
      unknown tmpIter[394005] "expr temp" "maybe ref" "no copy" "temp"
      (394008 'move' tmpIter[394005](304851 call . rngs c"_dom"))
      unknown isBounded[394199] "maybe param" "temp"
      (394205 'move' isBounded[394199](394201 call chpl_supportsBoundedCoforall tmpIter[394005] 0))
      if isBounded[394199]
      {
        const _coforallCount[394068] "const" "end count" "temp"
        (394136 'move' _coforallCount[394068](394133 call _endCountAlloc 1))
        unknown numTasks[394069] "temp"
        (394120 'move' numTasks[394069](394116 call chpl_boundedCoforallSize tmpIter[394005] 0))
        (394111 call _upEndCount _coforallCount[394068] 1 numTasks[394069])
        (394108 call chpl_resetTaskSpawn numTasks[394069])
        unknown _indexOfInterest[394076] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[394077] "expr temp" "temp"
        (394086 'move' _iterator[394077](394084 call _getIterator tmpIter[394005]))
        Defer
        {
          {
            (394101 call _freeIterator _iterator[394077])
          }
        }
        { scopeless type
          (394091 'move' _indexOfInterest[394076](394088 call iteratorIndex _iterator[394077]))
        }
        ForLoop[394078]
        {
          unknown tid[394012] "coforall index var" "index var" "insert auto destroy"
          (394096 'move' tid[394012] _indexOfInterest[394076])
          {
            {
              const myadjust[394016] "const"(394018 call state tid)
              (394021 'end of statement')
              {
                unknown _indexOfInterest[394023] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[394025] "expr temp" "temp"
                (394027 'move' _iterator[394025](394030 call _getIterator(394032 call rngs tid)))
                Defer
                {
                  {
                    (394036 call _freeIterator _iterator[394025])
                  }
                }
                { scopeless type
                  (394040 'move' _indexOfInterest[394023](394043 call iteratorIndex _iterator[394025]))
                }
                ForLoop[394045]
                {
                  unknown i[394048] "index var" "insert auto destroy"
                  (394050 'move' i[394048] _indexOfInterest[394023])
                  {
                    (394058 call(394055 call . op c"accumulateOntoState")(394060 call res i) myadjust)
                  }
                  label _continueLabel[394063]
                  _indexOfInterest[394023]
                  _iterator[394025]
                }
                label _breakLabel[394065]
              }
            }
            (394071 call _downEndCount _coforallCount[394068] nil[32])
            (394070 'coforall loop')
          }
          label _continueLabel[394081]
          _indexOfInterest[394076]
          _iterator[394077]
        }
        label _breakLabel[394082]
        Defer
        {
          {
            (394123 call _endCountFree _coforallCount[394068])
          }
        }
        (394128 call _waitEndCount _coforallCount[394068] 1 numTasks[394069])
      }
      {
        const _coforallCount[394140] "const" "end count" "temp"
        (394196 'move' _coforallCount[394140](394193 call _endCountAlloc 1))
        unknown _indexOfInterest[394148] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[394149] "expr temp" "temp"
        (394158 'move' _iterator[394149](394156 call _getIterator tmpIter[394005]))
        Defer
        {
          {
            (394173 call _freeIterator _iterator[394149])
          }
        }
        { scopeless type
          (394163 'move' _indexOfInterest[394148](394160 call iteratorIndex _iterator[394149]))
        }
        ForLoop[394150]
        {
          unknown tid[304848] "coforall index var" "index var" "insert auto destroy"
          (394168 'move' tid[304848] _indexOfInterest[394148])
          (394180 call _upEndCount _coforallCount[394140] 1)
          {
            {
              const myadjust[304856] "const"(304858 call state tid)
              (304861 'end of statement')
              {
                unknown _indexOfInterest[304877] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[304878] "expr temp" "temp"
                (304887 'move' _iterator[304878](304885 call _getIterator(304865 call rngs tid)))
                Defer
                {
                  {
                    (304902 call _freeIterator _iterator[304878])
                  }
                }
                { scopeless type
                  (304892 'move' _indexOfInterest[304877](304889 call iteratorIndex _iterator[304878]))
                }
                ForLoop[304879]
                {
                  unknown i[304862] "index var" "insert auto destroy"
                  (304897 'move' i[304862] _indexOfInterest[304877])
                  {
                    (304872 call(304869 call . op c"accumulateOntoState")(304874 call res i) myadjust)
                  }
                  label _continueLabel[304882]
                  _indexOfInterest[304877]
                  _iterator[304878]
                }
                label _breakLabel[304883]
              }
            }
            (394143 call _downEndCount _coforallCount[394140] nil[32])
            (394142 'coforall loop')
          }
          label _continueLabel[394153]
          _indexOfInterest[394148]
          _iterator[394149]
        }
        label _breakLabel[394154]
        Defer
        {
          {
            (394184 call _endCountFree _coforallCount[394140])
          }
        }
        (394189 call _waitEndCount _coforallCount[394140] 1)
      }
    }
    if(304916 call _cond_test debugDRScan)
    {
      (304911 call writeln "res = " res)
    }
  }
  function canReuseStride[304923](arg blk[304925]:_any[141](?), arg curDim[304928] :
  int[10], arg levels[304931]:_any[141](?), arg count[304933]:_any[141](?), arg stride[304935]:_any[141](?)) : _unknown[42] "private"
  {
    const lastCount[304939] "const"(304941 call count(304942 call + levels 1))
    (304947 'end of statement')
    const curStride[304949] "const"(304958 IfExpr (304950 call < levels 1) then
    { scopeless
      1
    } else
    { scopeless
      (304956 call stride levels)
    } )
    (304962 'end of statement')
    const lastIndex[304964] "const"(304965 call *(304967 call - lastCount 1) curStride)
    (304973 'end of statement')
    const nextIndex[304975] "const"(304976 call + lastIndex curStride)
    (304981 'end of statement')
    (304982 return(304983 call ==(304986 call blk(304987 call - curDim 2)) nextIndex))
  }
}